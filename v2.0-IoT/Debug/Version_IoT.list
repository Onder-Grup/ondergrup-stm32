
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc54  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001014  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de4c  0800de4c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800de4c  0800de4c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de4c  0800de4c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de4c  0800de4c  0001de4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de50  0800de50  0001de50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800de54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  200000fc  0800df50  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800df50  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167c3  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c7  00000000  00000000  0003692b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00039df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e82  00000000  00000000  0003b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6ba  00000000  00000000  0003bf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce6d  00000000  00000000  000585c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee71  00000000  00000000  00075431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000523c  00000000  00000000  001142a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001194e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce20 	.word	0x0800ce20

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800ce20 	.word	0x0800ce20

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc58 	bl	8009b04 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fad0 	bl	80087fc <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	20000374 	.word	0x20000374
 80004c0:	200001c5 	.word	0x200001c5
 80004c4:	200001ed 	.word	0x200001ed
 80004c8:	200001f0 	.word	0x200001f0
 80004cc:	200001f1 	.word	0x200001f1
 80004d0:	200001f2 	.word	0x200001f2
 80004d4:	200001f3 	.word	0x200001f3
 80004d8:	200001f4 	.word	0x200001f4
 80004dc:	200001f5 	.word	0x200001f5
 80004e0:	20000205 	.word	0x20000205
 80004e4:	200001f6 	.word	0x200001f6
 80004e8:	20000206 	.word	0x20000206
 80004ec:	200001f7 	.word	0x200001f7
 80004f0:	20000207 	.word	0x20000207
 80004f4:	200001fa 	.word	0x200001fa
 80004f8:	200001fb 	.word	0x200001fb
 80004fc:	200001fc 	.word	0x200001fc
 8000500:	200001fd 	.word	0x200001fd
 8000504:	200001fe 	.word	0x200001fe
 8000508:	200001ff 	.word	0x200001ff
 800050c:	20000200 	.word	0x20000200
 8000510:	20000201 	.word	0x20000201
 8000514:	20000202 	.word	0x20000202
 8000518:	20000203 	.word	0x20000203
 800051c:	20000204 	.word	0x20000204
 8000520:	20000208 	.word	0x20000208
 8000524:	2000020a 	.word	0x2000020a
 8000528:	200001e8 	.word	0x200001e8
 800052c:	200001e9 	.word	0x200001e9
 8000530:	200001ea 	.word	0x200001ea
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001eb 	.word	0x200001eb
 8000540:	2000020d 	.word	0x2000020d
 8000544:	2000020b 	.word	0x2000020b
 8000548:	200001f9 	.word	0x200001f9
 800054c:	2000020c 	.word	0x2000020c
 8000550:	200001f8 	.word	0x200001f8
 8000554:	2000020e 	.word	0x2000020e
 8000558:	2000020f 	.word	0x2000020f
 800055c:	20000210 	.word	0x20000210
 8000560:	20000211 	.word	0x20000211
 8000564:	20000212 	.word	0x20000212
 8000568:	20000213 	.word	0x20000213
 800056c:	20000214 	.word	0x20000214
 8000570:	20000215 	.word	0x20000215
 8000574:	20000216 	.word	0x20000216
 8000578:	20000217 	.word	0x20000217
 800057c:	200001c4 	.word	0x200001c4
	}

	if(kapi1AcSure>5) {
 8000580:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <eepromKontrol+0x4ac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <eepromKontrol+0x4ac>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b55      	ldr	r3, [pc, #340]	; (80006e4 <eepromKontrol+0x4b0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <eepromKontrol+0x4b0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <eepromKontrol+0x4b4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <eepromKontrol+0x4b4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <eepromKontrol+0x4b8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4e      	ldr	r3, [pc, #312]	; (80006ec <eepromKontrol+0x4b8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <eepromKontrol+0x4bc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <eepromKontrol+0x4c0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <eepromKontrol+0x4c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <eepromKontrol+0x4c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <eepromKontrol+0x4c8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <eepromKontrol+0x4cc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <eepromKontrol+0x4cc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <eepromKontrol+0x4d0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <eepromKontrol+0x4d0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <eepromKontrol+0x4d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <eepromKontrol+0x4d4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <eepromKontrol+0x4d8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <eepromKontrol+0x4d8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <eepromKontrol+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <eepromKontrol+0x4dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <eepromKontrol+0x4e0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <eepromKontrol+0x4e0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <eepromKontrol+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <eepromKontrol+0x4e4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <eepromKontrol+0x4e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <eepromKontrol+0x4e8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <eepromKontrol+0x4ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <eepromKontrol+0x4ec>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <eepromKontrol+0x4f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <eepromKontrol+0x4f0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <eepromKontrol+0x4f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <eepromKontrol+0x4f4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <eepromKontrol+0x4f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <eepromKontrol+0x4f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <eepromKontrol+0x4fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <eepromKontrol+0x4fc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <eepromKontrol+0x500>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <eepromKontrol+0x500>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f83f 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f008 f89e 	bl	80087fc <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f839 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f008 f898 	bl	80087fc <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f833 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f008 f892 	bl	80087fc <HAL_Delay>
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000205 	.word	0x20000205
 80006e4:	200001f6 	.word	0x200001f6
 80006e8:	20000206 	.word	0x20000206
 80006ec:	200001f7 	.word	0x200001f7
 80006f0:	200001f9 	.word	0x200001f9
 80006f4:	20000207 	.word	0x20000207
 80006f8:	200001fa 	.word	0x200001fa
 80006fc:	200001fb 	.word	0x200001fb
 8000700:	200001fc 	.word	0x200001fc
 8000704:	200001fd 	.word	0x200001fd
 8000708:	200001fe 	.word	0x200001fe
 800070c:	200001ff 	.word	0x200001ff
 8000710:	20000200 	.word	0x20000200
 8000714:	20000201 	.word	0x20000201
 8000718:	20000202 	.word	0x20000202
 800071c:	20000203 	.word	0x20000203
 8000720:	20000204 	.word	0x20000204
 8000724:	20000208 	.word	0x20000208
 8000728:	2000020a 	.word	0x2000020a
 800072c:	2000020c 	.word	0x2000020c
 8000730:	2000020d 	.word	0x2000020d
 8000734:	2000020b 	.word	0x2000020b

08000738 <convertArrays>:

void convertArrays(int state) {
 8000738:	b480      	push	{r7}
 800073a:	b08b      	sub	sp, #44	; 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d11d      	bne.n	8000782 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <convertArrays+0xe0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
 8000750:	e013      	b.n	800077a <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 8000752:	4a32      	ldr	r2, [pc, #200]	; (800081c <convertArrays+0xe4>)
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 800075c:	4a30      	ldr	r2, [pc, #192]	; (8000820 <convertArrays+0xe8>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	7819      	ldrb	r1, [r3, #0]
 8000764:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <convertArrays+0xec>)
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	4413      	add	r3, r2
 800076a:	460a      	mov	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	3301      	adds	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	3301      	adds	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	2b0b      	cmp	r3, #11
 800077e:	dde8      	ble.n	8000752 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000780:	e045      	b.n	800080e <convertArrays+0xd6>
	} else if(state == 2) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d121      	bne.n	80007cc <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <convertArrays+0xf0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	e017      	b.n	80007c4 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <convertArrays+0xe4>)
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00e      	beq.n	80007be <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <convertArrays+0xe4>)
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <convertArrays+0xf4>)
 80007ac:	5c99      	ldrb	r1, [r3, r2]
 80007ae:	4a20      	ldr	r2, [pc, #128]	; (8000830 <convertArrays+0xf8>)
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	4413      	add	r3, r2
 80007b4:	460a      	mov	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	3301      	adds	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	3301      	adds	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	2b13      	cmp	r3, #19
 80007c8:	dde4      	ble.n	8000794 <convertArrays+0x5c>
}
 80007ca:	e020      	b.n	800080e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <convertArrays+0xfc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	e017      	b.n	8000808 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007d8:	4a10      	ldr	r2, [pc, #64]	; (800081c <convertArrays+0xe4>)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00e      	beq.n	8000802 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <convertArrays+0xe4>)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <convertArrays+0xf4>)
 80007f0:	5c99      	ldrb	r1, [r3, r2]
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <convertArrays+0x100>)
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	4413      	add	r3, r2
 80007f8:	460a      	mov	r2, r1
 80007fa:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	3301      	adds	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	3301      	adds	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	2b13      	cmp	r3, #19
 800080c:	dde4      	ble.n	80007d8 <convertArrays+0xa0>
}
 800080e:	bf00      	nop
 8000810:	372c      	adds	r7, #44	; 0x2c
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000004 	.word	0x20000004
 800081c:	20000118 	.word	0x20000118
 8000820:	20000010 	.word	0x20000010
 8000824:	20000190 	.word	0x20000190
 8000828:	20000008 	.word	0x20000008
 800082c:	2000001c 	.word	0x2000001c
 8000830:	2000019c 	.word	0x2000019c
 8000834:	2000000c 	.word	0x2000000c
 8000838:	200001b0 	.word	0x200001b0

0800083c <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b09f      	sub	sp, #124	; 0x7c
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000848:	4948      	ldr	r1, [pc, #288]	; (800096c <ESP8266_Init+0x130>)
 800084a:	4849      	ldr	r0, [pc, #292]	; (8000970 <ESP8266_Init+0x134>)
 800084c:	f00b feca 	bl	800c5e4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000850:	4847      	ldr	r0, [pc, #284]	; (8000970 <ESP8266_Init+0x134>)
 8000852:	f7ff fce7 	bl	8000224 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29b      	uxth	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	4944      	ldr	r1, [pc, #272]	; (8000970 <ESP8266_Init+0x134>)
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f00b f898 	bl	800b994 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000868:	f007 ffc8 	bl	80087fc <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 800086c:	4941      	ldr	r1, [pc, #260]	; (8000974 <ESP8266_Init+0x138>)
 800086e:	4840      	ldr	r0, [pc, #256]	; (8000970 <ESP8266_Init+0x134>)
 8000870:	f00b feb8 	bl	800c5e4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000874:	483e      	ldr	r0, [pc, #248]	; (8000970 <ESP8266_Init+0x134>)
 8000876:	f7ff fcd5 	bl	8000224 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29b      	uxth	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	493b      	ldr	r1, [pc, #236]	; (8000970 <ESP8266_Init+0x134>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f00b f886 	bl	800b994 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088c:	f007 ffb6 	bl	80087fc <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000890:	4939      	ldr	r1, [pc, #228]	; (8000978 <ESP8266_Init+0x13c>)
 8000892:	4837      	ldr	r0, [pc, #220]	; (8000970 <ESP8266_Init+0x134>)
 8000894:	f00b fea6 	bl	800c5e4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000898:	4835      	ldr	r0, [pc, #212]	; (8000970 <ESP8266_Init+0x134>)
 800089a:	f7ff fcc3 	bl	8000224 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	4932      	ldr	r1, [pc, #200]	; (8000970 <ESP8266_Init+0x134>)
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f00b f874 	bl	800b994 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b0:	f007 ffa4 	bl	80087fc <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008b4:	4931      	ldr	r1, [pc, #196]	; (800097c <ESP8266_Init+0x140>)
 80008b6:	482e      	ldr	r0, [pc, #184]	; (8000970 <ESP8266_Init+0x134>)
 80008b8:	f00b fe94 	bl	800c5e4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008bc:	482c      	ldr	r0, [pc, #176]	; (8000970 <ESP8266_Init+0x134>)
 80008be:	f7ff fcb1 	bl	8000224 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4929      	ldr	r1, [pc, #164]	; (8000970 <ESP8266_Init+0x134>)
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f00b f862 	bl	800b994 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008d4:	f007 ff92 	bl	80087fc <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <ESP8266_Init+0x144>)
 80008de:	461c      	mov	r4, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e4:	c407      	stmia	r4!, {r0, r1, r2}
 80008e6:	8023      	strh	r3, [r4, #0]
 80008e8:	3402      	adds	r4, #2
 80008ea:	0c1b      	lsrs	r3, r3, #16
 80008ec:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00b fe9d 	bl	800c634 <strcat>
	strcat(str, "\",\"");
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fc90 	bl	8000224 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4413      	add	r3, r2
 800090e:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <ESP8266_Init+0x148>)
 8000910:	6810      	ldr	r0, [r2, #0]
 8000912:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	4618      	mov	r0, r3
 800091c:	f00b fe8a 	bl	800c634 <strcat>
	strcat(str, "\"\r\n");
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc7d 	bl	8000224 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4413      	add	r3, r2
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <ESP8266_Init+0x14c>)
 8000936:	6810      	ldr	r0, [r2, #0]
 8000938:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	461a      	mov	r2, r3
 8000940:	4912      	ldr	r1, [pc, #72]	; (800098c <ESP8266_Init+0x150>)
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <ESP8266_Init+0x134>)
 8000944:	f00b fe4e 	bl	800c5e4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <ESP8266_Init+0x134>)
 800094a:	f7ff fc6b 	bl	8000224 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29b      	uxth	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	4906      	ldr	r1, [pc, #24]	; (8000970 <ESP8266_Init+0x134>)
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f00b f81c 	bl	800b994 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800095c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000960:	f007 ff4c 	bl	80087fc <HAL_Delay>
}
 8000964:	bf00      	nop
 8000966:	377c      	adds	r7, #124	; 0x7c
 8000968:	46bd      	mov	sp, r7
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	0800ce38 	.word	0x0800ce38
 8000970:	20000250 	.word	0x20000250
 8000974:	0800ce48 	.word	0x0800ce48
 8000978:	0800ce54 	.word	0x0800ce54
 800097c:	0800ce5c 	.word	0x0800ce5c
 8000980:	0800ce6c 	.word	0x0800ce6c
 8000984:	0800ce7c 	.word	0x0800ce7c
 8000988:	0800ce80 	.word	0x0800ce80
 800098c:	0800ce84 	.word	0x0800ce84

08000990 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8000996:	af04      	add	r7, sp, #16
 8000998:	f507 7410 	add.w	r4, r7, #576	; 0x240
 800099c:	f5a4 740d 	sub.w	r4, r4, #564	; 0x234
 80009a0:	6020      	str	r0, [r4, #0]
 80009a2:	f507 7010 	add.w	r0, r7, #576	; 0x240
 80009a6:	f5a0 700e 	sub.w	r0, r0, #568	; 0x238
 80009aa:	6001      	str	r1, [r0, #0]
 80009ac:	f507 7110 	add.w	r1, r7, #576	; 0x240
 80009b0:	f5a1 710f 	sub.w	r1, r1, #572	; 0x23c
 80009b4:	600a      	str	r2, [r1, #0]
 80009b6:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80009ba:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 80009be:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009c0:	4a36      	ldr	r2, [pc, #216]	; (8000a9c <sendMachineData+0x10c>)
 80009c2:	4937      	ldr	r1, [pc, #220]	; (8000aa0 <sendMachineData+0x110>)
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <sendMachineData+0x114>)
 80009c6:	f00b fe0d 	bl	800c5e4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009ca:	4836      	ldr	r0, [pc, #216]	; (8000aa4 <sendMachineData+0x114>)
 80009cc:	f7ff fc2a 	bl	8000224 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80009d8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80009dc:	4931      	ldr	r1, [pc, #196]	; (8000aa4 <sendMachineData+0x114>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	f00a ffd8 	bl	800b994 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80009e4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80009e8:	f007 ff08 	bl	80087fc <HAL_Delay>

	sprintf(local_txA,
 80009ec:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80009f0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80009f4:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80009f8:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 80009fc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000a00:	4929      	ldr	r1, [pc, #164]	; (8000aa8 <sendMachineData+0x118>)
 8000a02:	9102      	str	r1, [sp, #8]
 8000a04:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8000a08:	9101      	str	r1, [sp, #4]
 8000a0a:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8000a0e:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
 8000a12:	6809      	ldr	r1, [r1, #0]
 8000a14:	9100      	str	r1, [sp, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6812      	ldr	r2, [r2, #0]
 8000a1a:	4924      	ldr	r1, [pc, #144]	; (8000aac <sendMachineData+0x11c>)
 8000a1c:	f00b fde2 	bl	800c5e4 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbfd 	bl	8000224 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8000a38:	491d      	ldr	r1, [pc, #116]	; (8000ab0 <sendMachineData+0x120>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00b fdd2 	bl	800c5e4 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fbed 	bl	8000224 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f107 0114 	add.w	r1, r7, #20
 8000a52:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000a56:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	f00a ff9a 	bl	800b994 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a60:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a64:	f007 feca 	bl	80087fc <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fbd9 	bl	8000224 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000a7a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000a7e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	f00a ff86 	bl	800b994 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000a88:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a8c:	f007 feb6 	bl	80087fc <HAL_Delay>
}
 8000a90:	bf00      	nop
 8000a92:	f507 7711 	add.w	r7, r7, #580	; 0x244
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	0800ce88 	.word	0x0800ce88
 8000aa0:	0800ce98 	.word	0x0800ce98
 8000aa4:	20000250 	.word	0x20000250
 8000aa8:	0800cf2c 	.word	0x0800cf2c
 8000aac:	0800ceb8 	.word	0x0800ceb8
 8000ab0:	0800cf40 	.word	0x0800cf40

08000ab4 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af04      	add	r7, sp, #16
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <hata2EEPROM+0xa4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <hata2EEPROM+0xa8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a25      	ldr	r2, [pc, #148]	; (8000b60 <hata2EEPROM+0xac>)
 8000acc:	5cd3      	ldrb	r3, [r2, r3]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000ad2:	f000 f92b 	bl	8000d2c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000ad6:	e000      	b.n	8000ada <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000ad8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e012      	b.n	8000b06 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <hata2EEPROM+0xa8>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <hata2EEPROM+0xac>)
 8000aea:	5cd3      	ldrb	r3, [r2, r3]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d107      	bne.n	8000b00 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <hata2EEPROM+0xa8>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	4919      	ldr	r1, [pc, #100]	; (8000b60 <hata2EEPROM+0xac>)
 8000afa:	79fa      	ldrb	r2, [r7, #7]
 8000afc:	54ca      	strb	r2, [r1, r3]
					break;
 8000afe:	e007      	b.n	8000b10 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <hata2EEPROM+0xa4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbe7      	blt.n	8000ae0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <hata2EEPROM+0xa8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	b299      	uxth	r1, r3
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <hata2EEPROM+0xa4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	b298      	uxth	r0, r3
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <hata2EEPROM+0xa8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <hata2EEPROM+0xac>)
 8000b22:	4413      	add	r3, r2
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <hata2EEPROM+0xa4>)
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	b292      	uxth	r2, r2
 8000b2a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b2e:	9402      	str	r4, [sp, #8]
 8000b30:	9201      	str	r2, [sp, #4]
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	4603      	mov	r3, r0
 8000b36:	460a      	mov	r2, r1
 8000b38:	21a0      	movs	r1, #160	; 0xa0
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <hata2EEPROM+0xb0>)
 8000b3c:	f008 fee8 	bl	8009910 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b44:	f007 fe5a 	bl	80087fc <HAL_Delay>
	eepromKontrol(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fb73 	bl	8000234 <eepromKontrol>
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000098 	.word	0x20000098
 8000b5c:	2000009c 	.word	0x2000009c
 8000b60:	20000118 	.word	0x20000118
 8000b64:	20000374 	.word	0x20000374

08000b68 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d11d      	bne.n	8000bb4 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b78:	4b62      	ldr	r3, [pc, #392]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d105      	bne.n	8000b8c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b80:	4a61      	ldr	r2, [pc, #388]	; (8000d08 <hataKoduLcdGoster+0x1a0>)
 8000b82:	2101      	movs	r1, #1
 8000b84:	2001      	movs	r0, #1
 8000b86:	f007 f8e3 	bl	8007d50 <lcd_print>
 8000b8a:	e008      	b.n	8000b9e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b8c:	4b5d      	ldr	r3, [pc, #372]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d104      	bne.n	8000b9e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b94:	4a5d      	ldr	r2, [pc, #372]	; (8000d0c <hataKoduLcdGoster+0x1a4>)
 8000b96:	2101      	movs	r1, #1
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f007 f8d9 	bl	8007d50 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b9e:	4a5c      	ldr	r2, [pc, #368]	; (8000d10 <hataKoduLcdGoster+0x1a8>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f007 f8d4 	bl	8007d50 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ba8:	4a5a      	ldr	r2, [pc, #360]	; (8000d14 <hataKoduLcdGoster+0x1ac>)
 8000baa:	2107      	movs	r1, #7
 8000bac:	2002      	movs	r0, #2
 8000bae:	f007 f8cf 	bl	8007d50 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bb2:	e0a3      	b.n	8000cfc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d11d      	bne.n	8000bf6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000bba:	4b52      	ldr	r3, [pc, #328]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d105      	bne.n	8000bce <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000bc2:	4a51      	ldr	r2, [pc, #324]	; (8000d08 <hataKoduLcdGoster+0x1a0>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f007 f8c2 	bl	8007d50 <lcd_print>
 8000bcc:	e008      	b.n	8000be0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000bce:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d104      	bne.n	8000be0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bd6:	4a4d      	ldr	r2, [pc, #308]	; (8000d0c <hataKoduLcdGoster+0x1a4>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f007 f8b8 	bl	8007d50 <lcd_print>
		lcd_print(2, 2, "2");
 8000be0:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <hataKoduLcdGoster+0x1b0>)
 8000be2:	2102      	movs	r1, #2
 8000be4:	2002      	movs	r0, #2
 8000be6:	f007 f8b3 	bl	8007d50 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bea:	4a4a      	ldr	r2, [pc, #296]	; (8000d14 <hataKoduLcdGoster+0x1ac>)
 8000bec:	2107      	movs	r1, #7
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f007 f8ae 	bl	8007d50 <lcd_print>
}
 8000bf4:	e082      	b.n	8000cfc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d11d      	bne.n	8000c38 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000bfc:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d105      	bne.n	8000c10 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c04:	4a40      	ldr	r2, [pc, #256]	; (8000d08 <hataKoduLcdGoster+0x1a0>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f007 f8a1 	bl	8007d50 <lcd_print>
 8000c0e:	e008      	b.n	8000c22 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c10:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d104      	bne.n	8000c22 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c18:	4a3c      	ldr	r2, [pc, #240]	; (8000d0c <hataKoduLcdGoster+0x1a4>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f007 f897 	bl	8007d50 <lcd_print>
		lcd_print(2, 3, "3");
 8000c22:	4a3e      	ldr	r2, [pc, #248]	; (8000d1c <hataKoduLcdGoster+0x1b4>)
 8000c24:	2103      	movs	r1, #3
 8000c26:	2002      	movs	r0, #2
 8000c28:	f007 f892 	bl	8007d50 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c2c:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <hataKoduLcdGoster+0x1ac>)
 8000c2e:	2107      	movs	r1, #7
 8000c30:	2002      	movs	r0, #2
 8000c32:	f007 f88d 	bl	8007d50 <lcd_print>
}
 8000c36:	e061      	b.n	8000cfc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d11d      	bne.n	8000c7a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c46:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <hataKoduLcdGoster+0x1a0>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f007 f880 	bl	8007d50 <lcd_print>
 8000c50:	e008      	b.n	8000c64 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c52:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d104      	bne.n	8000c64 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <hataKoduLcdGoster+0x1a4>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f007 f876 	bl	8007d50 <lcd_print>
		lcd_print(2, 4, "4");
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <hataKoduLcdGoster+0x1b8>)
 8000c66:	2104      	movs	r1, #4
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f007 f871 	bl	8007d50 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c6e:	4a29      	ldr	r2, [pc, #164]	; (8000d14 <hataKoduLcdGoster+0x1ac>)
 8000c70:	2107      	movs	r1, #7
 8000c72:	2002      	movs	r0, #2
 8000c74:	f007 f86c 	bl	8007d50 <lcd_print>
}
 8000c78:	e040      	b.n	8000cfc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	d11d      	bne.n	8000cbc <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d105      	bne.n	8000c94 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c88:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <hataKoduLcdGoster+0x1a0>)
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f007 f85f 	bl	8007d50 <lcd_print>
 8000c92:	e008      	b.n	8000ca6 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d104      	bne.n	8000ca6 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <hataKoduLcdGoster+0x1a4>)
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f007 f855 	bl	8007d50 <lcd_print>
		lcd_print(2, 5, "5");
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <hataKoduLcdGoster+0x1bc>)
 8000ca8:	2105      	movs	r1, #5
 8000caa:	2002      	movs	r0, #2
 8000cac:	f007 f850 	bl	8007d50 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cb0:	4a18      	ldr	r2, [pc, #96]	; (8000d14 <hataKoduLcdGoster+0x1ac>)
 8000cb2:	2107      	movs	r1, #7
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f007 f84b 	bl	8007d50 <lcd_print>
}
 8000cba:	e01f      	b.n	8000cfc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d11c      	bne.n	8000cfc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <hataKoduLcdGoster+0x1a0>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f007 f83e 	bl	8007d50 <lcd_print>
 8000cd4:	e008      	b.n	8000ce8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <hataKoduLcdGoster+0x19c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d104      	bne.n	8000ce8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <hataKoduLcdGoster+0x1a4>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f007 f834 	bl	8007d50 <lcd_print>
		lcd_print(2, 6, "6");
 8000ce8:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <hataKoduLcdGoster+0x1c0>)
 8000cea:	2106      	movs	r1, #6
 8000cec:	2002      	movs	r0, #2
 8000cee:	f007 f82f 	bl	8007d50 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <hataKoduLcdGoster+0x1ac>)
 8000cf4:	2107      	movs	r1, #7
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f007 f82a 	bl	8007d50 <lcd_print>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000020d 	.word	0x2000020d
 8000d08:	0800cfcc 	.word	0x0800cfcc
 8000d0c:	0800cfdc 	.word	0x0800cfdc
 8000d10:	0800cfec 	.word	0x0800cfec
 8000d14:	0800cff0 	.word	0x0800cff0
 8000d18:	0800cffc 	.word	0x0800cffc
 8000d1c:	0800d000 	.word	0x0800d000
 8000d20:	0800d004 	.word	0x0800d004
 8000d24:	0800d008 	.word	0x0800d008
 8000d28:	0800d00c 	.word	0x0800d00c

08000d2c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	e009      	b.n	8000d4c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <eepromDataFillWithEmpty+0x38>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <eepromDataFillWithEmpty+0x3c>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <eepromDataFillWithEmpty+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	dbf0      	blt.n	8000d38 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000070 	.word	0x20000070
 8000d68:	20000118 	.word	0x20000118
 8000d6c:	20000098 	.word	0x20000098

08000d70 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d82:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <i2cTest+0x154>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b4e      	ldr	r3, [pc, #312]	; (8000ec4 <i2cTest+0x154>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d92:	484c      	ldr	r0, [pc, #304]	; (8000ec4 <i2cTest+0x154>)
 8000d94:	f008 fc8e 	bl	80096b4 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d98:	23c0      	movs	r3, #192	; 0xc0
 8000d9a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d9c:	2311      	movs	r3, #17
 8000d9e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4846      	ldr	r0, [pc, #280]	; (8000ec8 <i2cTest+0x158>)
 8000dae:	f008 f895 	bl	8008edc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4844      	ldr	r0, [pc, #272]	; (8000ec8 <i2cTest+0x158>)
 8000db8:	f008 fb07 	bl	80093ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	4841      	ldr	r0, [pc, #260]	; (8000ec8 <i2cTest+0x158>)
 8000dc2:	f008 fb02 	bl	80093ca <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f007 fd18 	bl	80087fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000dcc:	bf00      	nop
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	483d      	ldr	r0, [pc, #244]	; (8000ec8 <i2cTest+0x158>)
 8000dd2:	f008 fae3 	bl	800939c <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d006      	beq.n	8000dea <i2cTest+0x7a>
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	483a      	ldr	r0, [pc, #232]	; (8000ec8 <i2cTest+0x158>)
 8000de0:	f008 fadc 	bl	800939c <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d1f1      	bne.n	8000dce <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	4836      	ldr	r0, [pc, #216]	; (8000ec8 <i2cTest+0x158>)
 8000df0:	f008 faeb 	bl	80093ca <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f007 fd01 	bl	80087fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000dfa:	bf00      	nop
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	4832      	ldr	r0, [pc, #200]	; (8000ec8 <i2cTest+0x158>)
 8000e00:	f008 facc 	bl	800939c <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d0f8      	beq.n	8000dfc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	482e      	ldr	r0, [pc, #184]	; (8000ec8 <i2cTest+0x158>)
 8000e10:	f008 fadb 	bl	80093ca <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f007 fcf1 	bl	80087fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e1a:	bf00      	nop
 8000e1c:	2140      	movs	r1, #64	; 0x40
 8000e1e:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <i2cTest+0x158>)
 8000e20:	f008 fabc 	bl	800939c <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d0f8      	beq.n	8000e1c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <i2cTest+0x158>)
 8000e30:	f008 facb 	bl	80093ca <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f007 fce1 	bl	80087fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e3a:	bf00      	nop
 8000e3c:	2140      	movs	r1, #64	; 0x40
 8000e3e:	4822      	ldr	r0, [pc, #136]	; (8000ec8 <i2cTest+0x158>)
 8000e40:	f008 faac 	bl	800939c <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d1f8      	bne.n	8000e3c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <i2cTest+0x158>)
 8000e50:	f008 fabb 	bl	80093ca <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e54:	200a      	movs	r0, #10
 8000e56:	f007 fcd1 	bl	80087fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e5a:	bf00      	nop
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <i2cTest+0x158>)
 8000e60:	f008 fa9c 	bl	800939c <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d1f8      	bne.n	8000e5c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e6a:	23c0      	movs	r3, #192	; 0xc0
 8000e6c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e6e:	2312      	movs	r3, #18
 8000e70:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <i2cTest+0x158>)
 8000e80:	f008 f82c 	bl	8008edc <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <i2cTest+0x154>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <i2cTest+0x154>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e92:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <i2cTest+0x154>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <i2cTest+0x154>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ea2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <i2cTest+0x154>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <i2cTest+0x154>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <i2cTest+0x154>)
 8000eb6:	f008 fab9 	bl	800942c <HAL_I2C_Init>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000374 	.word	0x20000374
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000ed6:	20c8      	movs	r0, #200	; 0xc8
 8000ed8:	f007 fc90 	bl	80087fc <HAL_Delay>
	lcd_clear();
 8000edc:	f006 ff64 	bl	8007da8 <lcd_clear>
	if(type == 1 && page == 0) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d13e      	bne.n	8000f64 <printTemplate+0x98>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d13b      	bne.n	8000f64 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000eec:	4a81      	ldr	r2, [pc, #516]	; (80010f4 <printTemplate+0x228>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f006 ff2d 	bl	8007d50 <lcd_print>
		lcd_print(2, 3, "0");
 8000ef6:	4a80      	ldr	r2, [pc, #512]	; (80010f8 <printTemplate+0x22c>)
 8000ef8:	2103      	movs	r1, #3
 8000efa:	2002      	movs	r0, #2
 8000efc:	f006 ff28 	bl	8007d50 <lcd_print>
		lcd_print(2, 4, "1");
 8000f00:	4a7e      	ldr	r2, [pc, #504]	; (80010fc <printTemplate+0x230>)
 8000f02:	2104      	movs	r1, #4
 8000f04:	2002      	movs	r0, #2
 8000f06:	f006 ff23 	bl	8007d50 <lcd_print>
		lcd_print(2, 5, "2");
 8000f0a:	4a7d      	ldr	r2, [pc, #500]	; (8001100 <printTemplate+0x234>)
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f006 ff1e 	bl	8007d50 <lcd_print>
		lcd_print(2, 6, "3");
 8000f14:	4a7b      	ldr	r2, [pc, #492]	; (8001104 <printTemplate+0x238>)
 8000f16:	2106      	movs	r1, #6
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f006 ff19 	bl	8007d50 <lcd_print>
		lcd_print(2, 7, "4");
 8000f1e:	4a7a      	ldr	r2, [pc, #488]	; (8001108 <printTemplate+0x23c>)
 8000f20:	2107      	movs	r1, #7
 8000f22:	2002      	movs	r0, #2
 8000f24:	f006 ff14 	bl	8007d50 <lcd_print>
		lcd_print(2, 10, "5");
 8000f28:	4a78      	ldr	r2, [pc, #480]	; (800110c <printTemplate+0x240>)
 8000f2a:	210a      	movs	r1, #10
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f006 ff0f 	bl	8007d50 <lcd_print>
		lcd_print(2, 11, "6");
 8000f32:	4a77      	ldr	r2, [pc, #476]	; (8001110 <printTemplate+0x244>)
 8000f34:	210b      	movs	r1, #11
 8000f36:	2002      	movs	r0, #2
 8000f38:	f006 ff0a 	bl	8007d50 <lcd_print>
		lcd_print(2, 12, "7");
 8000f3c:	4a75      	ldr	r2, [pc, #468]	; (8001114 <printTemplate+0x248>)
 8000f3e:	210c      	movs	r1, #12
 8000f40:	2002      	movs	r0, #2
 8000f42:	f006 ff05 	bl	8007d50 <lcd_print>
		lcd_print(2, 13, "8");
 8000f46:	4a74      	ldr	r2, [pc, #464]	; (8001118 <printTemplate+0x24c>)
 8000f48:	210d      	movs	r1, #13
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f006 ff00 	bl	8007d50 <lcd_print>
		lcd_print(2, 14, "9");
 8000f50:	4a72      	ldr	r2, [pc, #456]	; (800111c <printTemplate+0x250>)
 8000f52:	210e      	movs	r1, #14
 8000f54:	2002      	movs	r0, #2
 8000f56:	f006 fefb 	bl	8007d50 <lcd_print>
		//lcd_print(1, 5, machineID);
		lcd_gotoxy(2, 3);
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 fed8 	bl	8007d12 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			//lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f62:	e0c2      	b.n	80010ea <printTemplate+0x21e>
	} else if(type == 2) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d15e      	bne.n	8001028 <printTemplate+0x15c>
		if(page == 1) {
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10f      	bne.n	8000f90 <printTemplate+0xc4>
			lcd_clear();
 8000f70:	f006 ff1a 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 8000f74:	2064      	movs	r0, #100	; 0x64
 8000f76:	f007 fc41 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f7a:	4a69      	ldr	r2, [pc, #420]	; (8001120 <printTemplate+0x254>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f006 fee6 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f84:	4a67      	ldr	r2, [pc, #412]	; (8001124 <printTemplate+0x258>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f006 fee1 	bl	8007d50 <lcd_print>
}
 8000f8e:	e0ac      	b.n	80010ea <printTemplate+0x21e>
		} else if(page == 2) {
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d10f      	bne.n	8000fb6 <printTemplate+0xea>
			lcd_clear();
 8000f96:	f006 ff07 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 8000f9a:	2064      	movs	r0, #100	; 0x64
 8000f9c:	f007 fc2e 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fa0:	4a5f      	ldr	r2, [pc, #380]	; (8001120 <printTemplate+0x254>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f006 fed3 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000faa:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <printTemplate+0x25c>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f006 fece 	bl	8007d50 <lcd_print>
}
 8000fb4:	e099      	b.n	80010ea <printTemplate+0x21e>
		} else if(page == 3) {
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d10f      	bne.n	8000fdc <printTemplate+0x110>
			lcd_clear();
 8000fbc:	f006 fef4 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f007 fc1b 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fc6:	4a56      	ldr	r2, [pc, #344]	; (8001120 <printTemplate+0x254>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f006 fec0 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fd0:	4a56      	ldr	r2, [pc, #344]	; (800112c <printTemplate+0x260>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f006 febb 	bl	8007d50 <lcd_print>
}
 8000fda:	e086      	b.n	80010ea <printTemplate+0x21e>
		} else if(page == 4) {
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d10f      	bne.n	8001002 <printTemplate+0x136>
			lcd_clear();
 8000fe2:	f006 fee1 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f007 fc08 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fec:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <printTemplate+0x254>)
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f006 fead 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000ff6:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <printTemplate+0x264>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f006 fea8 	bl	8007d50 <lcd_print>
}
 8001000:	e073      	b.n	80010ea <printTemplate+0x21e>
		} else if(page == 5) {
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d170      	bne.n	80010ea <printTemplate+0x21e>
			lcd_clear();
 8001008:	f006 fece 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	; 0x64
 800100e:	f007 fbf5 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001012:	4a43      	ldr	r2, [pc, #268]	; (8001120 <printTemplate+0x254>)
 8001014:	2101      	movs	r1, #1
 8001016:	2001      	movs	r0, #1
 8001018:	f006 fe9a 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800101c:	4a45      	ldr	r2, [pc, #276]	; (8001134 <printTemplate+0x268>)
 800101e:	2101      	movs	r1, #1
 8001020:	2002      	movs	r0, #2
 8001022:	f006 fe95 	bl	8007d50 <lcd_print>
}
 8001026:	e060      	b.n	80010ea <printTemplate+0x21e>
	} else if(type == 3) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d15d      	bne.n	80010ea <printTemplate+0x21e>
		if(page == 1) {
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10f      	bne.n	8001054 <printTemplate+0x188>
			lcd_clear();
 8001034:	f006 feb8 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f007 fbdf 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800103e:	4a3e      	ldr	r2, [pc, #248]	; (8001138 <printTemplate+0x26c>)
 8001040:	2101      	movs	r1, #1
 8001042:	2001      	movs	r0, #1
 8001044:	f006 fe84 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001048:	4a36      	ldr	r2, [pc, #216]	; (8001124 <printTemplate+0x258>)
 800104a:	2101      	movs	r1, #1
 800104c:	2002      	movs	r0, #2
 800104e:	f006 fe7f 	bl	8007d50 <lcd_print>
}
 8001052:	e04a      	b.n	80010ea <printTemplate+0x21e>
		} else if(page == 2) {
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d10f      	bne.n	800107a <printTemplate+0x1ae>
			lcd_clear();
 800105a:	f006 fea5 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f007 fbcc 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001064:	4a34      	ldr	r2, [pc, #208]	; (8001138 <printTemplate+0x26c>)
 8001066:	2101      	movs	r1, #1
 8001068:	2001      	movs	r0, #1
 800106a:	f006 fe71 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800106e:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <printTemplate+0x25c>)
 8001070:	2101      	movs	r1, #1
 8001072:	2002      	movs	r0, #2
 8001074:	f006 fe6c 	bl	8007d50 <lcd_print>
}
 8001078:	e037      	b.n	80010ea <printTemplate+0x21e>
		} else if(page == 3) {
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d10f      	bne.n	80010a0 <printTemplate+0x1d4>
			lcd_clear();
 8001080:	f006 fe92 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 8001084:	2064      	movs	r0, #100	; 0x64
 8001086:	f007 fbb9 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <printTemplate+0x26c>)
 800108c:	2101      	movs	r1, #1
 800108e:	2001      	movs	r0, #1
 8001090:	f006 fe5e 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001094:	4a25      	ldr	r2, [pc, #148]	; (800112c <printTemplate+0x260>)
 8001096:	2101      	movs	r1, #1
 8001098:	2002      	movs	r0, #2
 800109a:	f006 fe59 	bl	8007d50 <lcd_print>
}
 800109e:	e024      	b.n	80010ea <printTemplate+0x21e>
		} else if(page == 4) {
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d10f      	bne.n	80010c6 <printTemplate+0x1fa>
			lcd_clear();
 80010a6:	f006 fe7f 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 80010aa:	2064      	movs	r0, #100	; 0x64
 80010ac:	f007 fba6 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <printTemplate+0x26c>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	2001      	movs	r0, #1
 80010b6:	f006 fe4b 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010ba:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <printTemplate+0x264>)
 80010bc:	2101      	movs	r1, #1
 80010be:	2002      	movs	r0, #2
 80010c0:	f006 fe46 	bl	8007d50 <lcd_print>
}
 80010c4:	e011      	b.n	80010ea <printTemplate+0x21e>
		} else if(page == 5) {
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d10e      	bne.n	80010ea <printTemplate+0x21e>
			lcd_clear();
 80010cc:	f006 fe6c 	bl	8007da8 <lcd_clear>
			HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f007 fb93 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <printTemplate+0x26c>)
 80010d8:	2101      	movs	r1, #1
 80010da:	2001      	movs	r0, #1
 80010dc:	f006 fe38 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <printTemplate+0x268>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	2002      	movs	r0, #2
 80010e6:	f006 fe33 	bl	8007d50 <lcd_print>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0800d010 	.word	0x0800d010
 80010f8:	0800d018 	.word	0x0800d018
 80010fc:	0800d01c 	.word	0x0800d01c
 8001100:	0800d020 	.word	0x0800d020
 8001104:	0800d024 	.word	0x0800d024
 8001108:	0800d028 	.word	0x0800d028
 800110c:	0800d02c 	.word	0x0800d02c
 8001110:	0800d030 	.word	0x0800d030
 8001114:	0800d034 	.word	0x0800d034
 8001118:	0800d038 	.word	0x0800d038
 800111c:	0800d03c 	.word	0x0800d03c
 8001120:	0800d040 	.word	0x0800d040
 8001124:	0800d048 	.word	0x0800d048
 8001128:	0800d05c 	.word	0x0800d05c
 800112c:	0800d070 	.word	0x0800d070
 8001130:	0800d084 	.word	0x0800d084
 8001134:	0800d098 	.word	0x0800d098
 8001138:	0800d0ac 	.word	0x0800d0ac

0800113c <checkSlideVal>:

int checkSlideVal(int state) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d111      	bne.n	800116e <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800114a:	2101      	movs	r1, #1
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <checkSlideVal+0x60>)
 800114e:	f008 f925 	bl	800939c <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <checkSlideVal+0x20>
			return 34;
 8001158:	2322      	movs	r3, #34	; 0x22
 800115a:	e01b      	b.n	8001194 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800115c:	2108      	movs	r1, #8
 800115e:	4810      	ldr	r0, [pc, #64]	; (80011a0 <checkSlideVal+0x64>)
 8001160:	f008 f91c 	bl	800939c <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d113      	bne.n	8001192 <checkSlideVal+0x56>
			return 32;
 800116a:	2320      	movs	r3, #32
 800116c:	e012      	b.n	8001194 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800116e:	2101      	movs	r1, #1
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <checkSlideVal+0x60>)
 8001172:	f008 f913 	bl	800939c <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <checkSlideVal+0x44>
			return 35;
 800117c:	2323      	movs	r3, #35	; 0x23
 800117e:	e009      	b.n	8001194 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001180:	2108      	movs	r1, #8
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <checkSlideVal+0x64>)
 8001184:	f008 f90a 	bl	800939c <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <checkSlideVal+0x56>
			return 33;
 800118e:	2321      	movs	r3, #33	; 0x21
 8001190:	e000      	b.n	8001194 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40010800 	.word	0x40010800
 80011a0:	40011000 	.word	0x40011000

080011a4 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff f836 	bl	8000224 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80011c0:	e08a      	b.n	80012d8 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80011c2:	6838      	ldr	r0, [r7, #0]
 80011c4:	f7ff ffba 	bl	800113c <checkSlideVal>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dd07      	ble.n	80011de <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff ffb4 	bl	800113c <checkSlideVal>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b44      	ldr	r3, [pc, #272]	; (80012ec <slideText+0x148>)
 80011da:	701a      	strb	r2, [r3, #0]
			break;
 80011dc:	e081      	b.n	80012e2 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
 80011e2:	e075      	b.n	80012d0 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80011e4:	6838      	ldr	r0, [r7, #0]
 80011e6:	f7ff ffa9 	bl	800113c <checkSlideVal>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dd09      	ble.n	8001204 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f7ff ffa3 	bl	800113c <checkSlideVal>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <slideText+0x148>)
 80011fc:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001202:	e069      	b.n	80012d8 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	4413      	add	r3, r2
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	e029      	b.n	8001262 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff ff94 	bl	800113c <checkSlideVal>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	dd0b      	ble.n	8001232 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f7ff ff8e 	bl	800113c <checkSlideVal>
 8001220:	4603      	mov	r3, r0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <slideText+0x148>)
 8001226:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001230:	e01d      	b.n	800126e <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	b2d8      	uxtb	r0, r3
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b2d9      	uxtb	r1, r3
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	461a      	mov	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	f006 fd92 	bl	8007d7a <lcd_print_char>
				HAL_Delay(30);
 8001256:	201e      	movs	r0, #30
 8001258:	f007 fad0 	bl	80087fc <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	3301      	adds	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	7dfa      	ldrb	r2, [r7, #23]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4413      	add	r3, r2
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	429a      	cmp	r2, r3
 800126c:	dbcf      	blt.n	800120e <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	3b01      	subs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	e023      	b.n	80012be <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f7ff ff60 	bl	800113c <checkSlideVal>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	dd0b      	ble.n	800129a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f7ff ff5a 	bl	800113c <checkSlideVal>
 8001288:	4603      	mov	r3, r0
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <slideText+0x148>)
 800128e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001298:	e017      	b.n	80012ca <slideText+0x126>
				}
			     if(j >= startPos) {
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	429a      	cmp	r2, r3
 80012a0:	db0a      	blt.n	80012b8 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	b2d1      	uxtb	r1, r2
 80012aa:	2220      	movs	r2, #32
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 fd64 	bl	8007d7a <lcd_print_char>
			    	 HAL_Delay(30);
 80012b2:	201e      	movs	r0, #30
 80012b4:	f007 faa2 	bl	80087fc <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	7dfa      	ldrb	r2, [r7, #23]
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dad5      	bge.n	8001276 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	3301      	adds	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	6a3a      	ldr	r2, [r7, #32]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	db85      	blt.n	80011e4 <slideText+0x40>
	while(mainLoopVal == 1) {
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	2b01      	cmp	r3, #1
 80012dc:	f43f af71 	beq.w	80011c2 <slideText+0x1e>
			     }
			}
		}
	}
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001ec 	.word	0x200001ec

080012f0 <printCredentials>:

void printCredentials(int type) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d119      	bne.n	8001332 <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <printCredentials+0xf0>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 8001306:	4a37      	ldr	r2, [pc, #220]	; (80013e4 <printCredentials+0xf4>)
 8001308:	2101      	movs	r1, #1
 800130a:	2001      	movs	r0, #1
 800130c:	f006 fd20 	bl	8007d50 <lcd_print>
 8001310:	e004      	b.n	800131c <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8001312:	4a35      	ldr	r2, [pc, #212]	; (80013e8 <printCredentials+0xf8>)
 8001314:	2101      	movs	r1, #1
 8001316:	2001      	movs	r0, #1
 8001318:	f006 fd1a 	bl	8007d50 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 800131c:	4a33      	ldr	r2, [pc, #204]	; (80013ec <printCredentials+0xfc>)
 800131e:	2101      	movs	r1, #1
 8001320:	2002      	movs	r0, #2
 8001322:	f006 fd15 	bl	8007d50 <lcd_print>
		lcd_print(2, 13, "    ");
 8001326:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <printCredentials+0x100>)
 8001328:	210d      	movs	r1, #13
 800132a:	2002      	movs	r0, #2
 800132c:	f006 fd10 	bl	8007d50 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 8001330:	e051      	b.n	80013d6 <printCredentials+0xe6>
	} else if(type == 2) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d127      	bne.n	8001388 <printCredentials+0x98>
		int ssidLength = strlen(wifiSSID);
 8001338:	482e      	ldr	r0, [pc, #184]	; (80013f4 <printCredentials+0x104>)
 800133a:	f7fe ff73 	bl	8000224 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 8001342:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <printCredentials+0x108>)
 8001344:	2101      	movs	r1, #1
 8001346:	2001      	movs	r0, #1
 8001348:	f006 fd02 	bl	8007d50 <lcd_print>
		if(ssidLength == 16) {
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b10      	cmp	r3, #16
 8001350:	d105      	bne.n	800135e <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <printCredentials+0x104>)
 8001354:	2101      	movs	r1, #1
 8001356:	2002      	movs	r0, #2
 8001358:	f006 fcfa 	bl	8007d50 <lcd_print>
}
 800135c:	e03b      	b.n	80013d6 <printCredentials+0xe6>
		} else if(ssidLength < 16) {
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	dc0a      	bgt.n	800137a <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <printCredentials+0x10c>)
 8001366:	2101      	movs	r1, #1
 8001368:	2002      	movs	r0, #2
 800136a:	f006 fcf1 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 800136e:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <printCredentials+0x104>)
 8001370:	2101      	movs	r1, #1
 8001372:	2002      	movs	r0, #2
 8001374:	f006 fcec 	bl	8007d50 <lcd_print>
}
 8001378:	e02d      	b.n	80013d6 <printCredentials+0xe6>
			slideText(wifiSSID, 1, 2, 0);
 800137a:	2300      	movs	r3, #0
 800137c:	2202      	movs	r2, #2
 800137e:	2101      	movs	r1, #1
 8001380:	481c      	ldr	r0, [pc, #112]	; (80013f4 <printCredentials+0x104>)
 8001382:	f7ff ff0f 	bl	80011a4 <slideText>
}
 8001386:	e026      	b.n	80013d6 <printCredentials+0xe6>
		int passLength = strlen(wifiPass);
 8001388:	481d      	ldr	r0, [pc, #116]	; (8001400 <printCredentials+0x110>)
 800138a:	f7fe ff4b 	bl	8000224 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <printCredentials+0x114>)
 8001394:	2101      	movs	r1, #1
 8001396:	2001      	movs	r0, #1
 8001398:	f006 fcda 	bl	8007d50 <lcd_print>
		if(passLength == 16) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d105      	bne.n	80013ae <printCredentials+0xbe>
			lcd_print(2, 1, wifiPass);
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <printCredentials+0x110>)
 80013a4:	2101      	movs	r1, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f006 fcd2 	bl	8007d50 <lcd_print>
}
 80013ac:	e013      	b.n	80013d6 <printCredentials+0xe6>
		} else if(passLength < 16) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	dc0a      	bgt.n	80013ca <printCredentials+0xda>
			lcd_print(2, 1, "                ");
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <printCredentials+0x10c>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	2002      	movs	r0, #2
 80013ba:	f006 fcc9 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, wifiPass);
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <printCredentials+0x110>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	2002      	movs	r0, #2
 80013c4:	f006 fcc4 	bl	8007d50 <lcd_print>
}
 80013c8:	e005      	b.n	80013d6 <printCredentials+0xe6>
			slideText(wifiPass, 1, 2, 1);
 80013ca:	2301      	movs	r3, #1
 80013cc:	2202      	movs	r2, #2
 80013ce:	2101      	movs	r1, #1
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <printCredentials+0x110>)
 80013d2:	f7ff fee7 	bl	80011a4 <slideText>
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000020d 	.word	0x2000020d
 80013e4:	0800d0b4 	.word	0x0800d0b4
 80013e8:	0800d0c8 	.word	0x0800d0c8
 80013ec:	20000190 	.word	0x20000190
 80013f0:	0800d0dc 	.word	0x0800d0dc
 80013f4:	2000019c 	.word	0x2000019c
 80013f8:	0800d0e4 	.word	0x0800d0e4
 80013fc:	0800d0f8 	.word	0x0800d0f8
 8001400:	200001b0 	.word	0x200001b0
 8001404:	0800d10c 	.word	0x0800d10c

08001408 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800140c:	f3bf 8f4f 	dsb	sy
}
 8001410:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <__NVIC_SystemReset+0x24>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800141a:	4904      	ldr	r1, [pc, #16]	; (800142c <__NVIC_SystemReset+0x24>)
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_SystemReset+0x28>)
 800141e:	4313      	orrs	r3, r2
 8001420:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001422:	f3bf 8f4f 	dsb	sy
}
 8001426:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <__NVIC_SystemReset+0x20>
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	05fa0004 	.word	0x05fa0004

08001434 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800143a:	2101      	movs	r1, #1
 800143c:	488e      	ldr	r0, [pc, #568]	; (8001678 <menu+0x244>)
 800143e:	f007 ffad 	bl	800939c <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	f040 808e 	bne.w	8001566 <menu+0x132>
 800144a:	4b8c      	ldr	r3, [pc, #560]	; (800167c <menu+0x248>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f083 0301 	eor.w	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8086 	beq.w	8001566 <menu+0x132>
		menuSayac = menuSayac+1;
 800145a:	4b89      	ldr	r3, [pc, #548]	; (8001680 <menu+0x24c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b87      	ldr	r3, [pc, #540]	; (8001680 <menu+0x24c>)
 8001464:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001466:	4b86      	ldr	r3, [pc, #536]	; (8001680 <menu+0x24c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b24      	cmp	r3, #36	; 0x24
 800146c:	d102      	bne.n	8001474 <menu+0x40>
			menuSayac = 1;
 800146e:	4b84      	ldr	r3, [pc, #528]	; (8001680 <menu+0x24c>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001474:	4b82      	ldr	r3, [pc, #520]	; (8001680 <menu+0x24c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d106      	bne.n	800148a <menu+0x56>
 800147c:	4b81      	ldr	r3, [pc, #516]	; (8001684 <menu+0x250>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <menu+0x56>
			menuSayac = 21;
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <menu+0x24c>)
 8001486:	2215      	movs	r2, #21
 8001488:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800148a:	4b7d      	ldr	r3, [pc, #500]	; (8001680 <menu+0x24c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b08      	cmp	r3, #8
 8001490:	d106      	bne.n	80014a0 <menu+0x6c>
 8001492:	4b7d      	ldr	r3, [pc, #500]	; (8001688 <menu+0x254>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <menu+0x6c>
			menuSayac = 16;
 800149a:	4b79      	ldr	r3, [pc, #484]	; (8001680 <menu+0x24c>)
 800149c:	2210      	movs	r2, #16
 800149e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014a0:	4b77      	ldr	r3, [pc, #476]	; (8001680 <menu+0x24c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b0d      	cmp	r3, #13
 80014a6:	d106      	bne.n	80014b6 <menu+0x82>
 80014a8:	4b77      	ldr	r3, [pc, #476]	; (8001688 <menu+0x254>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d102      	bne.n	80014b6 <menu+0x82>
			menuSayac = 16;
 80014b0:	4b73      	ldr	r3, [pc, #460]	; (8001680 <menu+0x24c>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80014b6:	4b72      	ldr	r3, [pc, #456]	; (8001680 <menu+0x24c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b09      	cmp	r3, #9
 80014bc:	d106      	bne.n	80014cc <menu+0x98>
 80014be:	4b72      	ldr	r3, [pc, #456]	; (8001688 <menu+0x254>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d102      	bne.n	80014cc <menu+0x98>
			menuSayac = 13;
 80014c6:	4b6e      	ldr	r3, [pc, #440]	; (8001680 <menu+0x24c>)
 80014c8:	220d      	movs	r2, #13
 80014ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014cc:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <menu+0x24c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b0a      	cmp	r3, #10
 80014d2:	d10a      	bne.n	80014ea <menu+0xb6>
 80014d4:	4b6d      	ldr	r3, [pc, #436]	; (800168c <menu+0x258>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d003      	beq.n	80014e4 <menu+0xb0>
 80014dc:	4b6b      	ldr	r3, [pc, #428]	; (800168c <menu+0x258>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d102      	bne.n	80014ea <menu+0xb6>
			menuSayac = 11;
 80014e4:	4b66      	ldr	r3, [pc, #408]	; (8001680 <menu+0x24c>)
 80014e6:	220b      	movs	r2, #11
 80014e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80014ea:	4b65      	ldr	r3, [pc, #404]	; (8001680 <menu+0x24c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d10e      	bne.n	8001510 <menu+0xdc>
 80014f2:	4b67      	ldr	r3, [pc, #412]	; (8001690 <menu+0x25c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d003      	beq.n	8001502 <menu+0xce>
 80014fa:	4b65      	ldr	r3, [pc, #404]	; (8001690 <menu+0x25c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d106      	bne.n	8001510 <menu+0xdc>
 8001502:	4b61      	ldr	r3, [pc, #388]	; (8001688 <menu+0x254>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <menu+0xdc>
			menuSayac = 16;
 800150a:	4b5d      	ldr	r3, [pc, #372]	; (8001680 <menu+0x24c>)
 800150c:	2210      	movs	r2, #16
 800150e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001510:	4b5b      	ldr	r3, [pc, #364]	; (8001680 <menu+0x24c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d10e      	bne.n	8001536 <menu+0x102>
 8001518:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <menu+0x25c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d003      	beq.n	8001528 <menu+0xf4>
 8001520:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <menu+0x25c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d106      	bne.n	8001536 <menu+0x102>
 8001528:	4b57      	ldr	r3, [pc, #348]	; (8001688 <menu+0x254>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d102      	bne.n	8001536 <menu+0x102>
			menuSayac = 13;
 8001530:	4b53      	ldr	r3, [pc, #332]	; (8001680 <menu+0x24c>)
 8001532:	220d      	movs	r2, #13
 8001534:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001536:	4b52      	ldr	r3, [pc, #328]	; (8001680 <menu+0x24c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	d106      	bne.n	800154c <menu+0x118>
 800153e:	4b55      	ldr	r3, [pc, #340]	; (8001694 <menu+0x260>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <menu+0x118>
			menuSayac = 16;
 8001546:	4b4e      	ldr	r3, [pc, #312]	; (8001680 <menu+0x24c>)
 8001548:	2210      	movs	r2, #16
 800154a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800154c:	4b4c      	ldr	r3, [pc, #304]	; (8001680 <menu+0x24c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b18      	cmp	r3, #24
 8001552:	d106      	bne.n	8001562 <menu+0x12e>
 8001554:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <menu+0x250>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <menu+0x12e>
			menuSayac = 26;
 800155c:	4b48      	ldr	r3, [pc, #288]	; (8001680 <menu+0x24c>)
 800155e:	221a      	movs	r2, #26
 8001560:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001562:	f003 fac3 	bl	8004aec <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001566:	2108      	movs	r1, #8
 8001568:	484b      	ldr	r0, [pc, #300]	; (8001698 <menu+0x264>)
 800156a:	f007 ff17 	bl	800939c <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d175      	bne.n	8001660 <menu+0x22c>
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <menu+0x248>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06e      	beq.n	8001660 <menu+0x22c>
		if (menuSayac <= 1) {
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <menu+0x24c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d802      	bhi.n	8001590 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <menu+0x24c>)
 800158c:	2224      	movs	r2, #36	; 0x24
 800158e:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001590:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <menu+0x24c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <menu+0x24c>)
 800159a:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800159c:	4b38      	ldr	r3, [pc, #224]	; (8001680 <menu+0x24c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b14      	cmp	r3, #20
 80015a2:	d106      	bne.n	80015b2 <menu+0x17e>
 80015a4:	4b37      	ldr	r3, [pc, #220]	; (8001684 <menu+0x250>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <menu+0x17e>
			menuSayac = 17;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <menu+0x24c>)
 80015ae:	2211      	movs	r2, #17
 80015b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <menu+0x24c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	d106      	bne.n	80015c8 <menu+0x194>
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <menu+0x254>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <menu+0x194>
			menuSayac = 7;
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <menu+0x24c>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <menu+0x24c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d106      	bne.n	80015de <menu+0x1aa>
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <menu+0x254>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d102      	bne.n	80015de <menu+0x1aa>
			menuSayac = 12;
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <menu+0x24c>)
 80015da:	220c      	movs	r2, #12
 80015dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <menu+0x24c>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d106      	bne.n	80015f4 <menu+0x1c0>
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <menu+0x254>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d102      	bne.n	80015f4 <menu+0x1c0>
			menuSayac = 8;
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <menu+0x24c>)
 80015f0:	2208      	movs	r2, #8
 80015f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <menu+0x24c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b0a      	cmp	r3, #10
 80015fa:	d10a      	bne.n	8001612 <menu+0x1de>
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <menu+0x258>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d003      	beq.n	800160c <menu+0x1d8>
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <menu+0x258>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d102      	bne.n	8001612 <menu+0x1de>
			menuSayac = 9;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <menu+0x24c>)
 800160e:	2209      	movs	r2, #9
 8001610:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <menu+0x24c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d10a      	bne.n	8001630 <menu+0x1fc>
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <menu+0x25c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d003      	beq.n	800162a <menu+0x1f6>
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <menu+0x25c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d102      	bne.n	8001630 <menu+0x1fc>
			menuSayac = 11;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <menu+0x24c>)
 800162c:	220b      	movs	r2, #11
 800162e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <menu+0x24c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d106      	bne.n	8001646 <menu+0x212>
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <menu+0x260>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d102      	bne.n	8001646 <menu+0x212>
			menuSayac = 14;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <menu+0x24c>)
 8001642:	220e      	movs	r2, #14
 8001644:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <menu+0x24c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b19      	cmp	r3, #25
 800164c:	d106      	bne.n	800165c <menu+0x228>
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <menu+0x250>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <menu+0x228>
			menuSayac = 23;
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <menu+0x24c>)
 8001658:	2217      	movs	r2, #23
 800165a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800165c:	f003 fa46 	bl	8004aec <bekle>
	}

	if (menuSayac == 0) {
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <menu+0x24c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d133      	bne.n	80016d0 <menu+0x29c>
		if(dilSecim == 0) {
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <menu+0x268>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d121      	bne.n	80016b4 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <menu+0x26c>)
 8001672:	2101      	movs	r1, #1
 8001674:	2001      	movs	r0, #1
 8001676:	e015      	b.n	80016a4 <menu+0x270>
 8001678:	40010800 	.word	0x40010800
 800167c:	2000021b 	.word	0x2000021b
 8001680:	200001ec 	.word	0x200001ec
 8001684:	200001fb 	.word	0x200001fb
 8001688:	200001f4 	.word	0x200001f4
 800168c:	200001f5 	.word	0x200001f5
 8001690:	200001f6 	.word	0x200001f6
 8001694:	200001f7 	.word	0x200001f7
 8001698:	40011000 	.word	0x40011000
 800169c:	2000020d 	.word	0x2000020d
 80016a0:	0800d120 	.word	0x0800d120
 80016a4:	f006 fb54 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80016a8:	4a94      	ldr	r2, [pc, #592]	; (80018fc <menu+0x4c8>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	2002      	movs	r0, #2
 80016ae:	f006 fb4f 	bl	8007d50 <lcd_print>
 80016b2:	e00d      	b.n	80016d0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80016b4:	4b92      	ldr	r3, [pc, #584]	; (8001900 <menu+0x4cc>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d109      	bne.n	80016d0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80016bc:	4a91      	ldr	r2, [pc, #580]	; (8001904 <menu+0x4d0>)
 80016be:	2101      	movs	r1, #1
 80016c0:	2001      	movs	r0, #1
 80016c2:	f006 fb45 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80016c6:	4a90      	ldr	r2, [pc, #576]	; (8001908 <menu+0x4d4>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	2002      	movs	r0, #2
 80016cc:	f006 fb40 	bl	8007d50 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80016d0:	4b8e      	ldr	r3, [pc, #568]	; (800190c <menu+0x4d8>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	f040 82b5 	bne.w	8001c44 <menu+0x810>
		if(dilSecim == 0) {
 80016da:	4b89      	ldr	r3, [pc, #548]	; (8001900 <menu+0x4cc>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d105      	bne.n	80016ee <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80016e2:	4a8b      	ldr	r2, [pc, #556]	; (8001910 <menu+0x4dc>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	2001      	movs	r0, #1
 80016e8:	f006 fb32 	bl	8007d50 <lcd_print>
 80016ec:	e008      	b.n	8001700 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80016ee:	4b84      	ldr	r3, [pc, #528]	; (8001900 <menu+0x4cc>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d104      	bne.n	8001700 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80016f6:	4a87      	ldr	r2, [pc, #540]	; (8001914 <menu+0x4e0>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	2001      	movs	r0, #1
 80016fc:	f006 fb28 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001700:	4b85      	ldr	r3, [pc, #532]	; (8001918 <menu+0x4e4>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d123      	bne.n	8001750 <menu+0x31c>
			if(dilSecim == 0) {
 8001708:	4b7d      	ldr	r3, [pc, #500]	; (8001900 <menu+0x4cc>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d105      	bne.n	800171c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001710:	4a82      	ldr	r2, [pc, #520]	; (800191c <menu+0x4e8>)
 8001712:	2101      	movs	r1, #1
 8001714:	2002      	movs	r0, #2
 8001716:	f006 fb1b 	bl	8007d50 <lcd_print>
 800171a:	e008      	b.n	800172e <menu+0x2fa>

			} else if(dilSecim == 1) {
 800171c:	4b78      	ldr	r3, [pc, #480]	; (8001900 <menu+0x4cc>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d104      	bne.n	800172e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001724:	4a7e      	ldr	r2, [pc, #504]	; (8001920 <menu+0x4ec>)
 8001726:	2101      	movs	r1, #1
 8001728:	2002      	movs	r0, #2
 800172a:	f006 fb11 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800172e:	4a7d      	ldr	r2, [pc, #500]	; (8001924 <menu+0x4f0>)
 8001730:	210f      	movs	r1, #15
 8001732:	2002      	movs	r0, #2
 8001734:	f006 fb0c 	bl	8007d50 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001738:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <menu+0x4f4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	220a      	movs	r2, #10
 800173e:	497b      	ldr	r1, [pc, #492]	; (800192c <menu+0x4f8>)
 8001740:	4618      	mov	r0, r3
 8001742:	f00a fe57 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 8001746:	4a79      	ldr	r2, [pc, #484]	; (800192c <menu+0x4f8>)
 8001748:	210e      	movs	r1, #14
 800174a:	2002      	movs	r0, #2
 800174c:	f006 fb00 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001750:	4b71      	ldr	r3, [pc, #452]	; (8001918 <menu+0x4e4>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d123      	bne.n	80017a0 <menu+0x36c>
			if(dilSecim == 0) {
 8001758:	4b69      	ldr	r3, [pc, #420]	; (8001900 <menu+0x4cc>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001760:	4a73      	ldr	r2, [pc, #460]	; (8001930 <menu+0x4fc>)
 8001762:	2101      	movs	r1, #1
 8001764:	2002      	movs	r0, #2
 8001766:	f006 faf3 	bl	8007d50 <lcd_print>
 800176a:	e008      	b.n	800177e <menu+0x34a>
			} else if(dilSecim == 1) {
 800176c:	4b64      	ldr	r3, [pc, #400]	; (8001900 <menu+0x4cc>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d104      	bne.n	800177e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001774:	4a6f      	ldr	r2, [pc, #444]	; (8001934 <menu+0x500>)
 8001776:	2101      	movs	r1, #1
 8001778:	2002      	movs	r0, #2
 800177a:	f006 fae9 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <menu+0x504>)
 8001780:	210f      	movs	r1, #15
 8001782:	2002      	movs	r0, #2
 8001784:	f006 fae4 	bl	8007d50 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001788:	4b6c      	ldr	r3, [pc, #432]	; (800193c <menu+0x508>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	220a      	movs	r2, #10
 800178e:	4967      	ldr	r1, [pc, #412]	; (800192c <menu+0x4f8>)
 8001790:	4618      	mov	r0, r3
 8001792:	f00a fe2f 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 8001796:	4a65      	ldr	r2, [pc, #404]	; (800192c <menu+0x4f8>)
 8001798:	210e      	movs	r1, #14
 800179a:	2002      	movs	r0, #2
 800179c:	f006 fad8 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80017a0:	4b5d      	ldr	r3, [pc, #372]	; (8001918 <menu+0x4e4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d123      	bne.n	80017f0 <menu+0x3bc>
			if(dilSecim == 0) {
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <menu+0x4cc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80017b0:	4a63      	ldr	r2, [pc, #396]	; (8001940 <menu+0x50c>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	2002      	movs	r0, #2
 80017b6:	f006 facb 	bl	8007d50 <lcd_print>
 80017ba:	e008      	b.n	80017ce <menu+0x39a>
			} else if(dilSecim == 1) {
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <menu+0x4cc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d104      	bne.n	80017ce <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80017c4:	4a5f      	ldr	r2, [pc, #380]	; (8001944 <menu+0x510>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	2002      	movs	r0, #2
 80017ca:	f006 fac1 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ce:	4a5a      	ldr	r2, [pc, #360]	; (8001938 <menu+0x504>)
 80017d0:	210f      	movs	r1, #15
 80017d2:	2002      	movs	r0, #2
 80017d4:	f006 fabc 	bl	8007d50 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <menu+0x514>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	220a      	movs	r2, #10
 80017de:	4953      	ldr	r1, [pc, #332]	; (800192c <menu+0x4f8>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00a fe07 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 80017e6:	4a51      	ldr	r2, [pc, #324]	; (800192c <menu+0x4f8>)
 80017e8:	210e      	movs	r1, #14
 80017ea:	2002      	movs	r0, #2
 80017ec:	f006 fab0 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80017f0:	4b49      	ldr	r3, [pc, #292]	; (8001918 <menu+0x4e4>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d123      	bne.n	8001840 <menu+0x40c>
			if(dilSecim == 0) {
 80017f8:	4b41      	ldr	r3, [pc, #260]	; (8001900 <menu+0x4cc>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <menu+0x518>)
 8001802:	2101      	movs	r1, #1
 8001804:	2002      	movs	r0, #2
 8001806:	f006 faa3 	bl	8007d50 <lcd_print>
 800180a:	e008      	b.n	800181e <menu+0x3ea>
			} else if(dilSecim == 1) {
 800180c:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <menu+0x4cc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d104      	bne.n	800181e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001814:	4a4e      	ldr	r2, [pc, #312]	; (8001950 <menu+0x51c>)
 8001816:	2101      	movs	r1, #1
 8001818:	2002      	movs	r0, #2
 800181a:	f006 fa99 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800181e:	4a46      	ldr	r2, [pc, #280]	; (8001938 <menu+0x504>)
 8001820:	210f      	movs	r1, #15
 8001822:	2002      	movs	r0, #2
 8001824:	f006 fa94 	bl	8007d50 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <menu+0x520>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	220a      	movs	r2, #10
 800182e:	493f      	ldr	r1, [pc, #252]	; (800192c <menu+0x4f8>)
 8001830:	4618      	mov	r0, r3
 8001832:	f00a fddf 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 8001836:	4a3d      	ldr	r2, [pc, #244]	; (800192c <menu+0x4f8>)
 8001838:	210e      	movs	r1, #14
 800183a:	2002      	movs	r0, #2
 800183c:	f006 fa88 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <menu+0x4e4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d123      	bne.n	8001890 <menu+0x45c>
			if(dilSecim == 0) {
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <menu+0x4cc>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001850:	4a41      	ldr	r2, [pc, #260]	; (8001958 <menu+0x524>)
 8001852:	2101      	movs	r1, #1
 8001854:	2002      	movs	r0, #2
 8001856:	f006 fa7b 	bl	8007d50 <lcd_print>
 800185a:	e008      	b.n	800186e <menu+0x43a>
			} else if(dilSecim == 1) {
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <menu+0x4cc>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d104      	bne.n	800186e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001864:	4a3d      	ldr	r2, [pc, #244]	; (800195c <menu+0x528>)
 8001866:	2101      	movs	r1, #1
 8001868:	2002      	movs	r0, #2
 800186a:	f006 fa71 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800186e:	4a32      	ldr	r2, [pc, #200]	; (8001938 <menu+0x504>)
 8001870:	210f      	movs	r1, #15
 8001872:	2002      	movs	r0, #2
 8001874:	f006 fa6c 	bl	8007d50 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001878:	4b39      	ldr	r3, [pc, #228]	; (8001960 <menu+0x52c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	220a      	movs	r2, #10
 800187e:	492b      	ldr	r1, [pc, #172]	; (800192c <menu+0x4f8>)
 8001880:	4618      	mov	r0, r3
 8001882:	f00a fdb7 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 8001886:	4a29      	ldr	r2, [pc, #164]	; (800192c <menu+0x4f8>)
 8001888:	210e      	movs	r1, #14
 800188a:	2002      	movs	r0, #2
 800188c:	f006 fa60 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <menu+0x4e4>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d123      	bne.n	80018e0 <menu+0x4ac>
			if(dilSecim == 0) {
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <menu+0x4cc>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <menu+0x530>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	2002      	movs	r0, #2
 80018a6:	f006 fa53 	bl	8007d50 <lcd_print>
 80018aa:	e008      	b.n	80018be <menu+0x48a>
			} else if(dilSecim == 1) {
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <menu+0x4cc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d104      	bne.n	80018be <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80018b4:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <menu+0x534>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	2002      	movs	r0, #2
 80018ba:	f006 fa49 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <menu+0x504>)
 80018c0:	210f      	movs	r1, #15
 80018c2:	2002      	movs	r0, #2
 80018c4:	f006 fa44 	bl	8007d50 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <menu+0x538>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	220a      	movs	r2, #10
 80018ce:	4917      	ldr	r1, [pc, #92]	; (800192c <menu+0x4f8>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00a fd8f 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <menu+0x4f8>)
 80018d8:	210e      	movs	r1, #14
 80018da:	2002      	movs	r0, #2
 80018dc:	f006 fa38 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <menu+0x4e4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	d15f      	bne.n	80019a8 <menu+0x574>
			if(dilSecim == 0) {
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <menu+0x4cc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d141      	bne.n	8001974 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <menu+0x53c>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	2002      	movs	r0, #2
 80018f6:	f006 fa2b 	bl	8007d50 <lcd_print>
 80018fa:	e044      	b.n	8001986 <menu+0x552>
 80018fc:	0800d134 	.word	0x0800d134
 8001900:	2000020d 	.word	0x2000020d
 8001904:	0800d148 	.word	0x0800d148
 8001908:	0800d15c 	.word	0x0800d15c
 800190c:	200001ec 	.word	0x200001ec
 8001910:	0800d170 	.word	0x0800d170
 8001914:	0800d184 	.word	0x0800d184
 8001918:	200001ee 	.word	0x200001ee
 800191c:	0800d198 	.word	0x0800d198
 8001920:	0800d1a8 	.word	0x0800d1a8
 8001924:	0800d1b8 	.word	0x0800d1b8
 8001928:	2000020e 	.word	0x2000020e
 800192c:	20000188 	.word	0x20000188
 8001930:	0800d1bc 	.word	0x0800d1bc
 8001934:	0800d1cc 	.word	0x0800d1cc
 8001938:	0800d1dc 	.word	0x0800d1dc
 800193c:	2000020f 	.word	0x2000020f
 8001940:	0800d1e0 	.word	0x0800d1e0
 8001944:	0800d1f0 	.word	0x0800d1f0
 8001948:	20000210 	.word	0x20000210
 800194c:	0800d200 	.word	0x0800d200
 8001950:	0800d210 	.word	0x0800d210
 8001954:	20000211 	.word	0x20000211
 8001958:	0800d220 	.word	0x0800d220
 800195c:	0800d230 	.word	0x0800d230
 8001960:	20000212 	.word	0x20000212
 8001964:	0800d240 	.word	0x0800d240
 8001968:	0800d250 	.word	0x0800d250
 800196c:	20000213 	.word	0x20000213
 8001970:	0800d260 	.word	0x0800d260
			} else if(dilSecim == 1) {
 8001974:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <menu+0x680>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d104      	bne.n	8001986 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 800197c:	4a4e      	ldr	r2, [pc, #312]	; (8001ab8 <menu+0x684>)
 800197e:	2101      	movs	r1, #1
 8001980:	2002      	movs	r0, #2
 8001982:	f006 f9e5 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001986:	4a4d      	ldr	r2, [pc, #308]	; (8001abc <menu+0x688>)
 8001988:	210f      	movs	r1, #15
 800198a:	2002      	movs	r0, #2
 800198c:	f006 f9e0 	bl	8007d50 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <menu+0x68c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	220a      	movs	r2, #10
 8001996:	494b      	ldr	r1, [pc, #300]	; (8001ac4 <menu+0x690>)
 8001998:	4618      	mov	r0, r3
 800199a:	f00a fd2b 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 800199e:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <menu+0x690>)
 80019a0:	210e      	movs	r1, #14
 80019a2:	2002      	movs	r0, #2
 80019a4:	f006 f9d4 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019a8:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <menu+0x694>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	d123      	bne.n	80019f8 <menu+0x5c4>
			if(dilSecim == 0) {
 80019b0:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <menu+0x680>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80019b8:	4a44      	ldr	r2, [pc, #272]	; (8001acc <menu+0x698>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	2002      	movs	r0, #2
 80019be:	f006 f9c7 	bl	8007d50 <lcd_print>
 80019c2:	e008      	b.n	80019d6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <menu+0x680>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d104      	bne.n	80019d6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80019cc:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <menu+0x69c>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	2002      	movs	r0, #2
 80019d2:	f006 f9bd 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019d6:	4a39      	ldr	r2, [pc, #228]	; (8001abc <menu+0x688>)
 80019d8:	210f      	movs	r1, #15
 80019da:	2002      	movs	r0, #2
 80019dc:	f006 f9b8 	bl	8007d50 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80019e0:	4b3c      	ldr	r3, [pc, #240]	; (8001ad4 <menu+0x6a0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	220a      	movs	r2, #10
 80019e6:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <menu+0x690>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00a fd03 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 80019ee:	4a35      	ldr	r2, [pc, #212]	; (8001ac4 <menu+0x690>)
 80019f0:	210e      	movs	r1, #14
 80019f2:	2002      	movs	r0, #2
 80019f4:	f006 f9ac 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80019f8:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <menu+0x694>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d123      	bne.n	8001a48 <menu+0x614>
			if(dilSecim == 0) {
 8001a00:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <menu+0x680>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a08:	4a33      	ldr	r2, [pc, #204]	; (8001ad8 <menu+0x6a4>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f006 f99f 	bl	8007d50 <lcd_print>
 8001a12:	e008      	b.n	8001a26 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <menu+0x680>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d104      	bne.n	8001a26 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001a1c:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <menu+0x6a8>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2002      	movs	r0, #2
 8001a22:	f006 f995 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a26:	4a25      	ldr	r2, [pc, #148]	; (8001abc <menu+0x688>)
 8001a28:	210f      	movs	r1, #15
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f006 f990 	bl	8007d50 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <menu+0x6ac>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	220a      	movs	r2, #10
 8001a36:	4923      	ldr	r1, [pc, #140]	; (8001ac4 <menu+0x690>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00a fcdb 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 8001a3e:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <menu+0x690>)
 8001a40:	210e      	movs	r1, #14
 8001a42:	2002      	movs	r0, #2
 8001a44:	f006 f984 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <menu+0x694>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d123      	bne.n	8001a98 <menu+0x664>
			if(dilSecim == 0) {
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <menu+0x680>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001a58:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <menu+0x6b0>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f006 f977 	bl	8007d50 <lcd_print>
 8001a62:	e008      	b.n	8001a76 <menu+0x642>
			} else if(dilSecim == 1) {
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <menu+0x680>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d104      	bne.n	8001a76 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <menu+0x6b4>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2002      	movs	r0, #2
 8001a72:	f006 f96d 	bl	8007d50 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <menu+0x6b8>)
 8001a78:	2110      	movs	r1, #16
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	f006 f968 	bl	8007d50 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <menu+0x6bc>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	220a      	movs	r2, #10
 8001a86:	490f      	ldr	r1, [pc, #60]	; (8001ac4 <menu+0x690>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00a fcb3 	bl	800c3f4 <itoa>
			lcd_print(2, 15, snum);
 8001a8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <menu+0x690>)
 8001a90:	210f      	movs	r1, #15
 8001a92:	2002      	movs	r0, #2
 8001a94:	f006 f95c 	bl	8007d50 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <menu+0x694>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b0a      	cmp	r3, #10
 8001a9e:	d134      	bne.n	8001b0a <menu+0x6d6>
			if(dilSecim == 0) {
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <menu+0x680>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d127      	bne.n	8001af8 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <menu+0x6c0>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2002      	movs	r0, #2
 8001aae:	f006 f94f 	bl	8007d50 <lcd_print>
 8001ab2:	e02a      	b.n	8001b0a <menu+0x6d6>
 8001ab4:	2000020d 	.word	0x2000020d
 8001ab8:	0800d270 	.word	0x0800d270
 8001abc:	0800d1dc 	.word	0x0800d1dc
 8001ac0:	20000214 	.word	0x20000214
 8001ac4:	20000188 	.word	0x20000188
 8001ac8:	200001ee 	.word	0x200001ee
 8001acc:	0800d280 	.word	0x0800d280
 8001ad0:	0800d290 	.word	0x0800d290
 8001ad4:	20000215 	.word	0x20000215
 8001ad8:	0800d2a0 	.word	0x0800d2a0
 8001adc:	0800d2b0 	.word	0x0800d2b0
 8001ae0:	20000216 	.word	0x20000216
 8001ae4:	0800d2c0 	.word	0x0800d2c0
 8001ae8:	0800d2d0 	.word	0x0800d2d0
 8001aec:	0800d2e0 	.word	0x0800d2e0
 8001af0:	20000217 	.word	0x20000217
 8001af4:	0800d2e4 	.word	0x0800d2e4
			} else if(dilSecim == 1) {
 8001af8:	4b82      	ldr	r3, [pc, #520]	; (8001d04 <menu+0x8d0>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d104      	bne.n	8001b0a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001b00:	4a81      	ldr	r2, [pc, #516]	; (8001d08 <menu+0x8d4>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	2002      	movs	r0, #2
 8001b06:	f006 f923 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	487f      	ldr	r0, [pc, #508]	; (8001d0c <menu+0x8d8>)
 8001b0e:	f007 fc45 	bl	800939c <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d119      	bne.n	8001b4c <menu+0x718>
 8001b18:	4b7d      	ldr	r3, [pc, #500]	; (8001d10 <menu+0x8dc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d012      	beq.n	8001b4c <menu+0x718>
 8001b26:	4b7b      	ldr	r3, [pc, #492]	; (8001d14 <menu+0x8e0>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10e      	bne.n	8001b4c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001b2e:	4b7a      	ldr	r3, [pc, #488]	; (8001d18 <menu+0x8e4>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <menu+0x8e4>)
 8001b38:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001b3a:	4b77      	ldr	r3, [pc, #476]	; (8001d18 <menu+0x8e4>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d902      	bls.n	8001b48 <menu+0x714>
				hataGostermeSirasi = 0;
 8001b42:	4b75      	ldr	r3, [pc, #468]	; (8001d18 <menu+0x8e4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b48:	f002 ffd0 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	486f      	ldr	r0, [pc, #444]	; (8001d0c <menu+0x8d8>)
 8001b50:	f007 fc24 	bl	800939c <HAL_GPIO_ReadPin>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d119      	bne.n	8001b8e <menu+0x75a>
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <menu+0x8dc>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	f083 0301 	eor.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d012      	beq.n	8001b8e <menu+0x75a>
 8001b68:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <menu+0x8e0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10e      	bne.n	8001b8e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b70:	4b69      	ldr	r3, [pc, #420]	; (8001d18 <menu+0x8e4>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	4b67      	ldr	r3, [pc, #412]	; (8001d18 <menu+0x8e4>)
 8001b7a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b7c:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <menu+0x8e4>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b0b      	cmp	r3, #11
 8001b82:	d902      	bls.n	8001b8a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001b84:	4b64      	ldr	r3, [pc, #400]	; (8001d18 <menu+0x8e4>)
 8001b86:	220a      	movs	r2, #10
 8001b88:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b8a:	f002 ffaf 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b8e:	2108      	movs	r1, #8
 8001b90:	485e      	ldr	r0, [pc, #376]	; (8001d0c <menu+0x8d8>)
 8001b92:	f007 fc03 	bl	800939c <HAL_GPIO_ReadPin>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d153      	bne.n	8001c44 <menu+0x810>
 8001b9c:	4b5c      	ldr	r3, [pc, #368]	; (8001d10 <menu+0x8dc>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f083 0301 	eor.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d04c      	beq.n	8001c44 <menu+0x810>
 8001baa:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <menu+0x8e4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b0a      	cmp	r3, #10
 8001bb0:	d148      	bne.n	8001c44 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001bb2:	4b5a      	ldr	r3, [pc, #360]	; (8001d1c <menu+0x8e8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <menu+0x8ec>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001bc0:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <menu+0x8f0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <menu+0x8ec>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <menu+0x8f4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	4b52      	ldr	r3, [pc, #328]	; (8001d20 <menu+0x8ec>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <menu+0x8f8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	4b4f      	ldr	r3, [pc, #316]	; (8001d20 <menu+0x8ec>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001bea:	4b51      	ldr	r3, [pc, #324]	; (8001d30 <menu+0x8fc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <menu+0x8ec>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <menu+0x900>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <menu+0x8ec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c06:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <menu+0x904>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <menu+0x8ec>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c14:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <menu+0x908>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <menu+0x8ec>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <menu+0x90c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <menu+0x8ec>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c30:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <menu+0x910>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	4b3a      	ldr	r3, [pc, #232]	; (8001d20 <menu+0x8ec>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001c3e:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <menu+0x914>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c44:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <menu+0x918>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	f040 80fc 	bne.w	8001e46 <menu+0xa12>
		if(dilSecim == 0) {
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <menu+0x8d0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001c56:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <menu+0x91c>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f006 f878 	bl	8007d50 <lcd_print>
 8001c60:	e008      	b.n	8001c74 <menu+0x840>
		} else if(dilSecim == 1) {
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <menu+0x8d0>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d104      	bne.n	8001c74 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001c6a:	4a3a      	ldr	r2, [pc, #232]	; (8001d54 <menu+0x920>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f006 f86e 	bl	8007d50 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <menu+0x8e0>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d003      	beq.n	8001c84 <menu+0x850>
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <menu+0x8e0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d112      	bne.n	8001caa <menu+0x876>
			if(dilSecim == 0) {
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <menu+0x8d0>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001c8c:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <menu+0x924>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	2002      	movs	r0, #2
 8001c92:	f006 f85d 	bl	8007d50 <lcd_print>
 8001c96:	e008      	b.n	8001caa <menu+0x876>
			} else if(dilSecim == 1) {
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <menu+0x8d0>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d104      	bne.n	8001caa <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001ca0:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <menu+0x928>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f006 f853 	bl	8007d50 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <menu+0x92c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d116      	bne.n	8001ce0 <menu+0x8ac>
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <menu+0x8e0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d112      	bne.n	8001ce0 <menu+0x8ac>
			if(dilSecim == 0) {
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <menu+0x8d0>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001cc2:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <menu+0x930>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f006 f842 	bl	8007d50 <lcd_print>
 8001ccc:	e008      	b.n	8001ce0 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <menu+0x8d0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d104      	bne.n	8001ce0 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001cd6:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <menu+0x934>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f006 f838 	bl	8007d50 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <menu+0x92c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d14c      	bne.n	8001d82 <menu+0x94e>
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <menu+0x8e0>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d148      	bne.n	8001d82 <menu+0x94e>
			if(dilSecim == 0) {
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <menu+0x8d0>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d13b      	bne.n	8001d70 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <menu+0x938>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f006 f827 	bl	8007d50 <lcd_print>
 8001d02:	e03e      	b.n	8001d82 <menu+0x94e>
 8001d04:	2000020d 	.word	0x2000020d
 8001d08:	0800d2f8 	.word	0x0800d2f8
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	2000021b 	.word	0x2000021b
 8001d14:	200001fb 	.word	0x200001fb
 8001d18:	200001ee 	.word	0x200001ee
 8001d1c:	2000020e 	.word	0x2000020e
 8001d20:	20000118 	.word	0x20000118
 8001d24:	2000020f 	.word	0x2000020f
 8001d28:	20000210 	.word	0x20000210
 8001d2c:	20000211 	.word	0x20000211
 8001d30:	20000212 	.word	0x20000212
 8001d34:	20000213 	.word	0x20000213
 8001d38:	20000214 	.word	0x20000214
 8001d3c:	20000215 	.word	0x20000215
 8001d40:	20000216 	.word	0x20000216
 8001d44:	20000217 	.word	0x20000217
 8001d48:	20000218 	.word	0x20000218
 8001d4c:	200001ec 	.word	0x200001ec
 8001d50:	0800d30c 	.word	0x0800d30c
 8001d54:	0800d320 	.word	0x0800d320
 8001d58:	0800d334 	.word	0x0800d334
 8001d5c:	0800d348 	.word	0x0800d348
 8001d60:	200001ed 	.word	0x200001ed
 8001d64:	0800d35c 	.word	0x0800d35c
 8001d68:	0800d36c 	.word	0x0800d36c
 8001d6c:	0800d37c 	.word	0x0800d37c
			} else if(dilSecim == 1) {
 8001d70:	4b98      	ldr	r3, [pc, #608]	; (8001fd4 <menu+0xba0>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d104      	bne.n	8001d82 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001d78:	4a97      	ldr	r2, [pc, #604]	; (8001fd8 <menu+0xba4>)
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	f005 ffe7 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d82:	2102      	movs	r1, #2
 8001d84:	4895      	ldr	r0, [pc, #596]	; (8001fdc <menu+0xba8>)
 8001d86:	f007 fb09 	bl	800939c <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d119      	bne.n	8001dc4 <menu+0x990>
 8001d90:	4b93      	ldr	r3, [pc, #588]	; (8001fe0 <menu+0xbac>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	f083 0301 	eor.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <menu+0x990>
 8001d9e:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <menu+0xbb0>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10e      	bne.n	8001dc4 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001da6:	4b90      	ldr	r3, [pc, #576]	; (8001fe8 <menu+0xbb4>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b8e      	ldr	r3, [pc, #568]	; (8001fe8 <menu+0xbb4>)
 8001db0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001db2:	4b8d      	ldr	r3, [pc, #564]	; (8001fe8 <menu+0xbb4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d902      	bls.n	8001dc0 <menu+0x98c>
				calismaSekli = 0;
 8001dba:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <menu+0xbb4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dc0:	f002 fe94 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4885      	ldr	r0, [pc, #532]	; (8001fdc <menu+0xba8>)
 8001dc8:	f007 fae8 	bl	800939c <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d119      	bne.n	8001e06 <menu+0x9d2>
 8001dd2:	4b83      	ldr	r3, [pc, #524]	; (8001fe0 <menu+0xbac>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	f083 0301 	eor.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d012      	beq.n	8001e06 <menu+0x9d2>
 8001de0:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <menu+0xbb0>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10e      	bne.n	8001e06 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001de8:	4b7f      	ldr	r3, [pc, #508]	; (8001fe8 <menu+0xbb4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b7d      	ldr	r3, [pc, #500]	; (8001fe8 <menu+0xbb4>)
 8001df2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001df4:	4b7c      	ldr	r3, [pc, #496]	; (8001fe8 <menu+0xbb4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <menu+0x9ce>
	    		calismaSekli = 1;
 8001dfc:	4b7a      	ldr	r3, [pc, #488]	; (8001fe8 <menu+0xbb4>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e02:	f002 fe73 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e06:	2108      	movs	r1, #8
 8001e08:	4874      	ldr	r0, [pc, #464]	; (8001fdc <menu+0xba8>)
 8001e0a:	f007 fac7 	bl	800939c <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d118      	bne.n	8001e46 <menu+0xa12>
 8001e14:	4b72      	ldr	r3, [pc, #456]	; (8001fe0 <menu+0xbac>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	f083 0301 	eor.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d011      	beq.n	8001e46 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001e22:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <menu+0xbb4>)
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b71      	ldr	r3, [pc, #452]	; (8001fec <menu+0xbb8>)
 8001e28:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <menu+0xbb4>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d106      	bne.n	8001e40 <menu+0xa0c>
				altLimit = 1;
 8001e32:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <menu+0xbbc>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e38:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <menu+0xbbc>)
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	4b6b      	ldr	r3, [pc, #428]	; (8001fec <menu+0xbb8>)
 8001e3e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e40:	4b6c      	ldr	r3, [pc, #432]	; (8001ff4 <menu+0xbc0>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e46:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <menu+0xbc4>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	f040 8083 	bne.w	8001f56 <menu+0xb22>
		if(dilSecim == 0) {
 8001e50:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <menu+0xba0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001e58:	4a68      	ldr	r2, [pc, #416]	; (8001ffc <menu+0xbc8>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f005 ff77 	bl	8007d50 <lcd_print>
 8001e62:	e008      	b.n	8001e76 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <menu+0xba0>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d104      	bne.n	8001e76 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001e6c:	4a64      	ldr	r2, [pc, #400]	; (8002000 <menu+0xbcc>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2001      	movs	r0, #1
 8001e72:	f005 ff6d 	bl	8007d50 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <menu+0xbd0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d113      	bne.n	8001ea6 <menu+0xa72>
			if(dilSecim == 0) {
 8001e7e:	4b55      	ldr	r3, [pc, #340]	; (8001fd4 <menu+0xba0>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001e86:	4a60      	ldr	r2, [pc, #384]	; (8002008 <menu+0xbd4>)
 8001e88:	2101      	movs	r1, #1
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f005 ff60 	bl	8007d50 <lcd_print>
 8001e90:	e012      	b.n	8001eb8 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001e92:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <menu+0xba0>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d10e      	bne.n	8001eb8 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001e9a:	4a5c      	ldr	r2, [pc, #368]	; (800200c <menu+0xbd8>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f005 ff56 	bl	8007d50 <lcd_print>
 8001ea4:	e008      	b.n	8001eb8 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <menu+0xbd0>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d104      	bne.n	8001eb8 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001eae:	4a58      	ldr	r2, [pc, #352]	; (8002010 <menu+0xbdc>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f005 ff4c 	bl	8007d50 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4848      	ldr	r0, [pc, #288]	; (8001fdc <menu+0xba8>)
 8001ebc:	f007 fa6e 	bl	800939c <HAL_GPIO_ReadPin>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d115      	bne.n	8001ef2 <menu+0xabe>
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <menu+0xbac>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f083 0301 	eor.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <menu+0xbd0>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	4b49      	ldr	r3, [pc, #292]	; (8002004 <menu+0xbd0>)
 8001ede:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001ee0:	4b48      	ldr	r3, [pc, #288]	; (8002004 <menu+0xbd0>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d902      	bls.n	8001eee <menu+0xaba>
				emniyetCercevesi = 0;
 8001ee8:	4b46      	ldr	r3, [pc, #280]	; (8002004 <menu+0xbd0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001eee:	f002 fdfd 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef2:	2104      	movs	r1, #4
 8001ef4:	4839      	ldr	r0, [pc, #228]	; (8001fdc <menu+0xba8>)
 8001ef6:	f007 fa51 	bl	800939c <HAL_GPIO_ReadPin>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d115      	bne.n	8001f2c <menu+0xaf8>
 8001f00:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <menu+0xbac>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00e      	beq.n	8001f2c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <menu+0xbd0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <menu+0xbd0>)
 8001f18:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <menu+0xbd0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <menu+0xbd0>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f28:	f002 fde0 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	482b      	ldr	r0, [pc, #172]	; (8001fdc <menu+0xba8>)
 8001f30:	f007 fa34 	bl	800939c <HAL_GPIO_ReadPin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10d      	bne.n	8001f56 <menu+0xb22>
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <menu+0xbac>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	f083 0301 	eor.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <menu+0xbd0>)
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <menu+0xbb8>)
 8001f4e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <menu+0xbc0>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <menu+0xbc4>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	f040 80ba 	bne.w	80020d4 <menu+0xca0>
		if(dilSecim == 0) {
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <menu+0xba0>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001f68:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <menu+0xbe0>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f005 feef 	bl	8007d50 <lcd_print>
 8001f72:	e008      	b.n	8001f86 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <menu+0xba0>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d104      	bne.n	8001f86 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <menu+0xbe4>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2001      	movs	r0, #1
 8001f82:	f005 fee5 	bl	8007d50 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <menu+0xbe8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d113      	bne.n	8001fb6 <menu+0xb82>
			if(dilSecim == 0) {
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <menu+0xba0>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <menu+0xbd4>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	f005 fed8 	bl	8007d50 <lcd_print>
 8001fa0:	e049      	b.n	8002036 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <menu+0xba0>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d145      	bne.n	8002036 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001faa:	4a18      	ldr	r2, [pc, #96]	; (800200c <menu+0xbd8>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f005 fece 	bl	8007d50 <lcd_print>
 8001fb4:	e03f      	b.n	8002036 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <menu+0xbe8>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d13b      	bne.n	8002036 <menu+0xc02>
			if(dilSecim == 0) {
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <menu+0xba0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d12e      	bne.n	8002024 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <menu+0xbec>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f005 fec0 	bl	8007d50 <lcd_print>
 8001fd0:	e031      	b.n	8002036 <menu+0xc02>
 8001fd2:	bf00      	nop
 8001fd4:	2000020d 	.word	0x2000020d
 8001fd8:	0800d38c 	.word	0x0800d38c
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	2000021b 	.word	0x2000021b
 8001fe4:	200001fb 	.word	0x200001fb
 8001fe8:	200001ed 	.word	0x200001ed
 8001fec:	20000118 	.word	0x20000118
 8001ff0:	200001f2 	.word	0x200001f2
 8001ff4:	20000218 	.word	0x20000218
 8001ff8:	200001ec 	.word	0x200001ec
 8001ffc:	0800d39c 	.word	0x0800d39c
 8002000:	0800d3b0 	.word	0x0800d3b0
 8002004:	200001f0 	.word	0x200001f0
 8002008:	0800d3c4 	.word	0x0800d3c4
 800200c:	0800d3d8 	.word	0x0800d3d8
 8002010:	0800d3ec 	.word	0x0800d3ec
 8002014:	0800d3fc 	.word	0x0800d3fc
 8002018:	0800d410 	.word	0x0800d410
 800201c:	200001f1 	.word	0x200001f1
 8002020:	0800d424 	.word	0x0800d424
			} else if(dilSecim == 1) {
 8002024:	4b92      	ldr	r3, [pc, #584]	; (8002270 <menu+0xe3c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d104      	bne.n	8002036 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 800202c:	4a91      	ldr	r2, [pc, #580]	; (8002274 <menu+0xe40>)
 800202e:	2101      	movs	r1, #1
 8002030:	2002      	movs	r0, #2
 8002032:	f005 fe8d 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002036:	2102      	movs	r1, #2
 8002038:	488f      	ldr	r0, [pc, #572]	; (8002278 <menu+0xe44>)
 800203a:	f007 f9af 	bl	800939c <HAL_GPIO_ReadPin>
 800203e:	4603      	mov	r3, r0
 8002040:	2b01      	cmp	r3, #1
 8002042:	d115      	bne.n	8002070 <menu+0xc3c>
 8002044:	4b8d      	ldr	r3, [pc, #564]	; (800227c <menu+0xe48>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	f083 0301 	eor.w	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <menu+0xe4c>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b89      	ldr	r3, [pc, #548]	; (8002280 <menu+0xe4c>)
 800205c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <menu+0xe4c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d902      	bls.n	800206c <menu+0xc38>
				yavaslamaLimit = 0;
 8002066:	4b86      	ldr	r3, [pc, #536]	; (8002280 <menu+0xe4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800206c:	f002 fd3e 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002070:	2104      	movs	r1, #4
 8002072:	4881      	ldr	r0, [pc, #516]	; (8002278 <menu+0xe44>)
 8002074:	f007 f992 	bl	800939c <HAL_GPIO_ReadPin>
 8002078:	4603      	mov	r3, r0
 800207a:	2b01      	cmp	r3, #1
 800207c:	d115      	bne.n	80020aa <menu+0xc76>
 800207e:	4b7f      	ldr	r3, [pc, #508]	; (800227c <menu+0xe48>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f083 0301 	eor.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00e      	beq.n	80020aa <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 800208c:	4b7c      	ldr	r3, [pc, #496]	; (8002280 <menu+0xe4c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	3b01      	subs	r3, #1
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b7a      	ldr	r3, [pc, #488]	; (8002280 <menu+0xe4c>)
 8002096:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <menu+0xe4c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80020a0:	4b77      	ldr	r3, [pc, #476]	; (8002280 <menu+0xe4c>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020a6:	f002 fd21 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020aa:	2108      	movs	r1, #8
 80020ac:	4872      	ldr	r0, [pc, #456]	; (8002278 <menu+0xe44>)
 80020ae:	f007 f975 	bl	800939c <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d10d      	bne.n	80020d4 <menu+0xca0>
 80020b8:	4b70      	ldr	r3, [pc, #448]	; (800227c <menu+0xe48>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	f083 0301 	eor.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80020c6:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <menu+0xe4c>)
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	4b6e      	ldr	r3, [pc, #440]	; (8002284 <menu+0xe50>)
 80020cc:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80020ce:	4b6e      	ldr	r3, [pc, #440]	; (8002288 <menu+0xe54>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80020d4:	4b6d      	ldr	r3, [pc, #436]	; (800228c <menu+0xe58>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	f040 80b9 	bne.w	8002250 <menu+0xe1c>
		if(dilSecim == 0) {
 80020de:	4b64      	ldr	r3, [pc, #400]	; (8002270 <menu+0xe3c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80020e6:	4a6a      	ldr	r2, [pc, #424]	; (8002290 <menu+0xe5c>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	2001      	movs	r0, #1
 80020ec:	f005 fe30 	bl	8007d50 <lcd_print>
 80020f0:	e008      	b.n	8002104 <menu+0xcd0>
		} else if(dilSecim == 1) {
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <menu+0xe3c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d104      	bne.n	8002104 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80020fa:	4a66      	ldr	r2, [pc, #408]	; (8002294 <menu+0xe60>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	2001      	movs	r0, #1
 8002100:	f005 fe26 	bl	8007d50 <lcd_print>
		}

		if(altLimit == 0) {
 8002104:	4b64      	ldr	r3, [pc, #400]	; (8002298 <menu+0xe64>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d113      	bne.n	8002134 <menu+0xd00>
			if(dilSecim == 0) {
 800210c:	4b58      	ldr	r3, [pc, #352]	; (8002270 <menu+0xe3c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002114:	4a61      	ldr	r2, [pc, #388]	; (800229c <menu+0xe68>)
 8002116:	2101      	movs	r1, #1
 8002118:	2002      	movs	r0, #2
 800211a:	f005 fe19 	bl	8007d50 <lcd_print>
 800211e:	e020      	b.n	8002162 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <menu+0xe3c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d11c      	bne.n	8002162 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002128:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <menu+0xe6c>)
 800212a:	2101      	movs	r1, #1
 800212c:	2002      	movs	r0, #2
 800212e:	f005 fe0f 	bl	8007d50 <lcd_print>
 8002132:	e016      	b.n	8002162 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002134:	4b58      	ldr	r3, [pc, #352]	; (8002298 <menu+0xe64>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d112      	bne.n	8002162 <menu+0xd2e>
			if(dilSecim == 0){
 800213c:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <menu+0xe3c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002144:	4a57      	ldr	r2, [pc, #348]	; (80022a4 <menu+0xe70>)
 8002146:	2101      	movs	r1, #1
 8002148:	2002      	movs	r0, #2
 800214a:	f005 fe01 	bl	8007d50 <lcd_print>
 800214e:	e008      	b.n	8002162 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002150:	4b47      	ldr	r3, [pc, #284]	; (8002270 <menu+0xe3c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d104      	bne.n	8002162 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002158:	4a46      	ldr	r2, [pc, #280]	; (8002274 <menu+0xe40>)
 800215a:	2101      	movs	r1, #1
 800215c:	2002      	movs	r0, #2
 800215e:	f005 fdf7 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002162:	2102      	movs	r1, #2
 8002164:	4844      	ldr	r0, [pc, #272]	; (8002278 <menu+0xe44>)
 8002166:	f007 f919 	bl	800939c <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b01      	cmp	r3, #1
 800216e:	d119      	bne.n	80021a4 <menu+0xd70>
 8002170:	4b42      	ldr	r3, [pc, #264]	; (800227c <menu+0xe48>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f083 0301 	eor.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d012      	beq.n	80021a4 <menu+0xd70>
 800217e:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <menu+0xe74>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10e      	bne.n	80021a4 <menu+0xd70>
			altLimit = altLimit + 1;
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <menu+0xe64>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b42      	ldr	r3, [pc, #264]	; (8002298 <menu+0xe64>)
 8002190:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <menu+0xe64>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d902      	bls.n	80021a0 <menu+0xd6c>
				altLimit = 0;
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <menu+0xe64>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021a0:	f002 fca4 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80021a4:	2104      	movs	r1, #4
 80021a6:	4834      	ldr	r0, [pc, #208]	; (8002278 <menu+0xe44>)
 80021a8:	f007 f8f8 	bl	800939c <HAL_GPIO_ReadPin>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d119      	bne.n	80021e6 <menu+0xdb2>
 80021b2:	4b32      	ldr	r3, [pc, #200]	; (800227c <menu+0xe48>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d012      	beq.n	80021e6 <menu+0xdb2>
 80021c0:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <menu+0xe74>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10e      	bne.n	80021e6 <menu+0xdb2>
			altLimit = altLimit - 1;
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <menu+0xe64>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <menu+0xe64>)
 80021d2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80021d4:	4b30      	ldr	r3, [pc, #192]	; (8002298 <menu+0xe64>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <menu+0xdae>
		   		altLimit = 1;
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <menu+0xe64>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021e2:	f002 fc83 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021e6:	2108      	movs	r1, #8
 80021e8:	4823      	ldr	r0, [pc, #140]	; (8002278 <menu+0xe44>)
 80021ea:	f007 f8d7 	bl	800939c <HAL_GPIO_ReadPin>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d12d      	bne.n	8002250 <menu+0xe1c>
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <menu+0xe48>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d026      	beq.n	8002250 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <menu+0xe64>)
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <menu+0xe50>)
 8002208:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <menu+0xe64>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d110      	bne.n	8002234 <menu+0xe00>
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <menu+0xe78>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <menu+0xdee>
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <menu+0xe78>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d108      	bne.n	8002234 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <menu+0xe78>)
 8002224:	2203      	movs	r2, #3
 8002226:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <menu+0xe78>)
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <menu+0xe50>)
 800222e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002232:	e00a      	b.n	800224a <menu+0xe16>
			} else if(altLimit == 0) {
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <menu+0xe64>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <menu+0xe16>
				platformSilindirTipi = 0;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <menu+0xe7c>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <menu+0xe7c>)
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <menu+0xe50>)
 8002248:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <menu+0xe54>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <menu+0xe58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b06      	cmp	r3, #6
 8002256:	f040 80b6 	bne.w	80023c6 <menu+0xf92>
		if(dilSecim == 0) {
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <menu+0xe3c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d12a      	bne.n	80022b8 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002262:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <menu+0xe80>)
 8002264:	2101      	movs	r1, #1
 8002266:	2001      	movs	r0, #1
 8002268:	f005 fd72 	bl	8007d50 <lcd_print>
 800226c:	e02d      	b.n	80022ca <menu+0xe96>
 800226e:	bf00      	nop
 8002270:	2000020d 	.word	0x2000020d
 8002274:	0800d438 	.word	0x0800d438
 8002278:	40010800 	.word	0x40010800
 800227c:	2000021b 	.word	0x2000021b
 8002280:	200001f1 	.word	0x200001f1
 8002284:	20000118 	.word	0x20000118
 8002288:	20000218 	.word	0x20000218
 800228c:	200001ec 	.word	0x200001ec
 8002290:	0800d44c 	.word	0x0800d44c
 8002294:	0800d460 	.word	0x0800d460
 8002298:	200001f2 	.word	0x200001f2
 800229c:	0800d3c4 	.word	0x0800d3c4
 80022a0:	0800d3d8 	.word	0x0800d3d8
 80022a4:	0800d424 	.word	0x0800d424
 80022a8:	200001ed 	.word	0x200001ed
 80022ac:	200001f9 	.word	0x200001f9
 80022b0:	200001ff 	.word	0x200001ff
 80022b4:	0800d474 	.word	0x0800d474
		} else if(dilSecim == 1){
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <menu+0x1070>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d104      	bne.n	80022ca <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80022c0:	4a79      	ldr	r2, [pc, #484]	; (80024a8 <menu+0x1074>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	2001      	movs	r0, #1
 80022c6:	f005 fd43 	bl	8007d50 <lcd_print>
		}
		if(basincSalteri == 0){
 80022ca:	4b78      	ldr	r3, [pc, #480]	; (80024ac <menu+0x1078>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d113      	bne.n	80022fa <menu+0xec6>
			if(dilSecim == 0) {
 80022d2:	4b74      	ldr	r3, [pc, #464]	; (80024a4 <menu+0x1070>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80022da:	4a75      	ldr	r2, [pc, #468]	; (80024b0 <menu+0x107c>)
 80022dc:	2101      	movs	r1, #1
 80022de:	2002      	movs	r0, #2
 80022e0:	f005 fd36 	bl	8007d50 <lcd_print>
 80022e4:	e020      	b.n	8002328 <menu+0xef4>
			} else if(dilSecim == 1){
 80022e6:	4b6f      	ldr	r3, [pc, #444]	; (80024a4 <menu+0x1070>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d11c      	bne.n	8002328 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80022ee:	4a71      	ldr	r2, [pc, #452]	; (80024b4 <menu+0x1080>)
 80022f0:	2101      	movs	r1, #1
 80022f2:	2002      	movs	r0, #2
 80022f4:	f005 fd2c 	bl	8007d50 <lcd_print>
 80022f8:	e016      	b.n	8002328 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80022fa:	4b6c      	ldr	r3, [pc, #432]	; (80024ac <menu+0x1078>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d112      	bne.n	8002328 <menu+0xef4>
			if(dilSecim == 0) {
 8002302:	4b68      	ldr	r3, [pc, #416]	; (80024a4 <menu+0x1070>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800230a:	4a6b      	ldr	r2, [pc, #428]	; (80024b8 <menu+0x1084>)
 800230c:	2101      	movs	r1, #1
 800230e:	2002      	movs	r0, #2
 8002310:	f005 fd1e 	bl	8007d50 <lcd_print>
 8002314:	e008      	b.n	8002328 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <menu+0x1070>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d104      	bne.n	8002328 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800231e:	4a67      	ldr	r2, [pc, #412]	; (80024bc <menu+0x1088>)
 8002320:	2101      	movs	r1, #1
 8002322:	2002      	movs	r0, #2
 8002324:	f005 fd14 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002328:	2102      	movs	r1, #2
 800232a:	4865      	ldr	r0, [pc, #404]	; (80024c0 <menu+0x108c>)
 800232c:	f007 f836 	bl	800939c <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d115      	bne.n	8002362 <menu+0xf2e>
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <menu+0x1090>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <menu+0x1078>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b57      	ldr	r3, [pc, #348]	; (80024ac <menu+0x1078>)
 800234e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002350:	4b56      	ldr	r3, [pc, #344]	; (80024ac <menu+0x1078>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d902      	bls.n	800235e <menu+0xf2a>
				basincSalteri = 0;
 8002358:	4b54      	ldr	r3, [pc, #336]	; (80024ac <menu+0x1078>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800235e:	f002 fbc5 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002362:	2104      	movs	r1, #4
 8002364:	4856      	ldr	r0, [pc, #344]	; (80024c0 <menu+0x108c>)
 8002366:	f007 f819 	bl	800939c <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b01      	cmp	r3, #1
 800236e:	d115      	bne.n	800239c <menu+0xf68>
 8002370:	4b54      	ldr	r3, [pc, #336]	; (80024c4 <menu+0x1090>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00e      	beq.n	800239c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800237e:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <menu+0x1078>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	3b01      	subs	r3, #1
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b49      	ldr	r3, [pc, #292]	; (80024ac <menu+0x1078>)
 8002388:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <menu+0x1078>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <menu+0xf64>
		   		basincSalteri = 1;
 8002392:	4b46      	ldr	r3, [pc, #280]	; (80024ac <menu+0x1078>)
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002398:	f002 fba8 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800239c:	2108      	movs	r1, #8
 800239e:	4848      	ldr	r0, [pc, #288]	; (80024c0 <menu+0x108c>)
 80023a0:	f006 fffc 	bl	800939c <HAL_GPIO_ReadPin>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10d      	bne.n	80023c6 <menu+0xf92>
 80023aa:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <menu+0x1090>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	f083 0301 	eor.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80023b8:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <menu+0x1078>)
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <menu+0x1094>)
 80023be:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <menu+0x1098>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80023c6:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <menu+0x109c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b07      	cmp	r3, #7
 80023cc:	f040 80f5 	bne.w	80025ba <menu+0x1186>
		if(dilSecim == 0) {
 80023d0:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <menu+0x1070>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80023d8:	4a3e      	ldr	r2, [pc, #248]	; (80024d4 <menu+0x10a0>)
 80023da:	2101      	movs	r1, #1
 80023dc:	2001      	movs	r0, #1
 80023de:	f005 fcb7 	bl	8007d50 <lcd_print>
 80023e2:	e008      	b.n	80023f6 <menu+0xfc2>
		} else if(dilSecim == 1){
 80023e4:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <menu+0x1070>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d104      	bne.n	80023f6 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80023ec:	4a3a      	ldr	r2, [pc, #232]	; (80024d8 <menu+0x10a4>)
 80023ee:	2101      	movs	r1, #1
 80023f0:	2001      	movs	r0, #1
 80023f2:	f005 fcad 	bl	8007d50 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80023f6:	4b39      	ldr	r3, [pc, #228]	; (80024dc <menu+0x10a8>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <menu+0xff2>
			if(dilSecim == 0) {
 80023fe:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <menu+0x1070>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002406:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <menu+0x107c>)
 8002408:	2101      	movs	r1, #1
 800240a:	2002      	movs	r0, #2
 800240c:	f005 fca0 	bl	8007d50 <lcd_print>
 8002410:	e079      	b.n	8002506 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <menu+0x1070>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d175      	bne.n	8002506 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800241a:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <menu+0x1080>)
 800241c:	2101      	movs	r1, #1
 800241e:	2002      	movs	r0, #2
 8002420:	f005 fc96 	bl	8007d50 <lcd_print>
 8002424:	e06f      	b.n	8002506 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <menu+0x10a8>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d113      	bne.n	8002456 <menu+0x1022>
			if(dilSecim == 0) {
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <menu+0x1070>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002436:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <menu+0x10ac>)
 8002438:	2101      	movs	r1, #1
 800243a:	2002      	movs	r0, #2
 800243c:	f005 fc88 	bl	8007d50 <lcd_print>
 8002440:	e061      	b.n	8002506 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <menu+0x1070>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d15d      	bne.n	8002506 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800244a:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <menu+0x10b0>)
 800244c:	2101      	movs	r1, #1
 800244e:	2002      	movs	r0, #2
 8002450:	f005 fc7e 	bl	8007d50 <lcd_print>
 8002454:	e057      	b.n	8002506 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <menu+0x10a8>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d113      	bne.n	8002486 <menu+0x1052>
			if(dilSecim == 0) {
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <menu+0x1070>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <menu+0x10b4>)
 8002468:	2101      	movs	r1, #1
 800246a:	2002      	movs	r0, #2
 800246c:	f005 fc70 	bl	8007d50 <lcd_print>
 8002470:	e049      	b.n	8002506 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <menu+0x1070>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d145      	bne.n	8002506 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <menu+0x10b8>)
 800247c:	2101      	movs	r1, #1
 800247e:	2002      	movs	r0, #2
 8002480:	f005 fc66 	bl	8007d50 <lcd_print>
 8002484:	e03f      	b.n	8002506 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <menu+0x10a8>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d13b      	bne.n	8002506 <menu+0x10d2>
			if(dilSecim == 0) {
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <menu+0x1070>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d12e      	bne.n	80024f4 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <menu+0x10bc>)
 8002498:	2101      	movs	r1, #1
 800249a:	2002      	movs	r0, #2
 800249c:	f005 fc58 	bl	8007d50 <lcd_print>
 80024a0:	e031      	b.n	8002506 <menu+0x10d2>
 80024a2:	bf00      	nop
 80024a4:	2000020d 	.word	0x2000020d
 80024a8:	0800d484 	.word	0x0800d484
 80024ac:	200001f3 	.word	0x200001f3
 80024b0:	0800d3c4 	.word	0x0800d3c4
 80024b4:	0800d3d8 	.word	0x0800d3d8
 80024b8:	0800d424 	.word	0x0800d424
 80024bc:	0800d438 	.word	0x0800d438
 80024c0:	40010800 	.word	0x40010800
 80024c4:	2000021b 	.word	0x2000021b
 80024c8:	20000118 	.word	0x20000118
 80024cc:	20000218 	.word	0x20000218
 80024d0:	200001ec 	.word	0x200001ec
 80024d4:	0800d494 	.word	0x0800d494
 80024d8:	0800d4a8 	.word	0x0800d4a8
 80024dc:	200001f4 	.word	0x200001f4
 80024e0:	0800d4bc 	.word	0x0800d4bc
 80024e4:	0800d4d0 	.word	0x0800d4d0
 80024e8:	0800d4e4 	.word	0x0800d4e4
 80024ec:	0800d4f8 	.word	0x0800d4f8
 80024f0:	0800d50c 	.word	0x0800d50c
			} else if(dilSecim == 1){
 80024f4:	4b99      	ldr	r3, [pc, #612]	; (800275c <menu+0x1328>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d104      	bne.n	8002506 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80024fc:	4a98      	ldr	r2, [pc, #608]	; (8002760 <menu+0x132c>)
 80024fe:	2101      	movs	r1, #1
 8002500:	2002      	movs	r0, #2
 8002502:	f005 fc25 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002506:	2102      	movs	r1, #2
 8002508:	4896      	ldr	r0, [pc, #600]	; (8002764 <menu+0x1330>)
 800250a:	f006 ff47 	bl	800939c <HAL_GPIO_ReadPin>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d115      	bne.n	8002540 <menu+0x110c>
 8002514:	4b94      	ldr	r3, [pc, #592]	; (8002768 <menu+0x1334>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f083 0301 	eor.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00e      	beq.n	8002540 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002522:	4b92      	ldr	r3, [pc, #584]	; (800276c <menu+0x1338>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b90      	ldr	r3, [pc, #576]	; (800276c <menu+0x1338>)
 800252c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800252e:	4b8f      	ldr	r3, [pc, #572]	; (800276c <menu+0x1338>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d902      	bls.n	800253c <menu+0x1108>
				kapiSecimleri = 0;
 8002536:	4b8d      	ldr	r3, [pc, #564]	; (800276c <menu+0x1338>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800253c:	f002 fad6 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002540:	2104      	movs	r1, #4
 8002542:	4888      	ldr	r0, [pc, #544]	; (8002764 <menu+0x1330>)
 8002544:	f006 ff2a 	bl	800939c <HAL_GPIO_ReadPin>
 8002548:	4603      	mov	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d115      	bne.n	800257a <menu+0x1146>
 800254e:	4b86      	ldr	r3, [pc, #536]	; (8002768 <menu+0x1334>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f083 0301 	eor.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00e      	beq.n	800257a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800255c:	4b83      	ldr	r3, [pc, #524]	; (800276c <menu+0x1338>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	3b01      	subs	r3, #1
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b81      	ldr	r3, [pc, #516]	; (800276c <menu+0x1338>)
 8002566:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002568:	4b80      	ldr	r3, [pc, #512]	; (800276c <menu+0x1338>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d902      	bls.n	8002576 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002570:	4b7e      	ldr	r3, [pc, #504]	; (800276c <menu+0x1338>)
 8002572:	2203      	movs	r2, #3
 8002574:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002576:	f002 fab9 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800257a:	2108      	movs	r1, #8
 800257c:	4879      	ldr	r0, [pc, #484]	; (8002764 <menu+0x1330>)
 800257e:	f006 ff0d 	bl	800939c <HAL_GPIO_ReadPin>
 8002582:	4603      	mov	r3, r0
 8002584:	2b01      	cmp	r3, #1
 8002586:	d118      	bne.n	80025ba <menu+0x1186>
 8002588:	4b77      	ldr	r3, [pc, #476]	; (8002768 <menu+0x1334>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f083 0301 	eor.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d011      	beq.n	80025ba <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002596:	4b75      	ldr	r3, [pc, #468]	; (800276c <menu+0x1338>)
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	4b75      	ldr	r3, [pc, #468]	; (8002770 <menu+0x133c>)
 800259c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800259e:	4b73      	ldr	r3, [pc, #460]	; (800276c <menu+0x1338>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <menu+0x1180>
				altLimit = 1;
 80025a6:	4b73      	ldr	r3, [pc, #460]	; (8002774 <menu+0x1340>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80025ac:	4b71      	ldr	r3, [pc, #452]	; (8002774 <menu+0x1340>)
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <menu+0x133c>)
 80025b2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80025b4:	4b70      	ldr	r3, [pc, #448]	; (8002778 <menu+0x1344>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <menu+0x1348>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b08      	cmp	r3, #8
 80025c0:	f040 8092 	bne.w	80026e8 <menu+0x12b4>
		if(dilSecim == 0) {
 80025c4:	4b65      	ldr	r3, [pc, #404]	; (800275c <menu+0x1328>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80025cc:	4a6c      	ldr	r2, [pc, #432]	; (8002780 <menu+0x134c>)
 80025ce:	2101      	movs	r1, #1
 80025d0:	2001      	movs	r0, #1
 80025d2:	f005 fbbd 	bl	8007d50 <lcd_print>
 80025d6:	e008      	b.n	80025ea <menu+0x11b6>
		} else if(dilSecim == 1) {
 80025d8:	4b60      	ldr	r3, [pc, #384]	; (800275c <menu+0x1328>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d104      	bne.n	80025ea <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80025e0:	4a68      	ldr	r2, [pc, #416]	; (8002784 <menu+0x1350>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	2001      	movs	r0, #1
 80025e6:	f005 fbb3 	bl	8007d50 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80025ea:	4b67      	ldr	r3, [pc, #412]	; (8002788 <menu+0x1354>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d113      	bne.n	800261a <menu+0x11e6>
			if(dilSecim == 0) {
 80025f2:	4b5a      	ldr	r3, [pc, #360]	; (800275c <menu+0x1328>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80025fa:	4a64      	ldr	r2, [pc, #400]	; (800278c <menu+0x1358>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	2002      	movs	r0, #2
 8002600:	f005 fba6 	bl	8007d50 <lcd_print>
 8002604:	e020      	b.n	8002648 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002606:	4b55      	ldr	r3, [pc, #340]	; (800275c <menu+0x1328>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d11c      	bne.n	8002648 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800260e:	4a60      	ldr	r2, [pc, #384]	; (8002790 <menu+0x135c>)
 8002610:	2101      	movs	r1, #1
 8002612:	2002      	movs	r0, #2
 8002614:	f005 fb9c 	bl	8007d50 <lcd_print>
 8002618:	e016      	b.n	8002648 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800261a:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <menu+0x1354>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d112      	bne.n	8002648 <menu+0x1214>
			if(dilSecim == 0){
 8002622:	4b4e      	ldr	r3, [pc, #312]	; (800275c <menu+0x1328>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800262a:	4a5a      	ldr	r2, [pc, #360]	; (8002794 <menu+0x1360>)
 800262c:	2101      	movs	r1, #1
 800262e:	2002      	movs	r0, #2
 8002630:	f005 fb8e 	bl	8007d50 <lcd_print>
 8002634:	e008      	b.n	8002648 <menu+0x1214>
			} else if(dilSecim == 1){
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <menu+0x1328>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d104      	bne.n	8002648 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800263e:	4a56      	ldr	r2, [pc, #344]	; (8002798 <menu+0x1364>)
 8002640:	2101      	movs	r1, #1
 8002642:	2002      	movs	r0, #2
 8002644:	f005 fb84 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002648:	2102      	movs	r1, #2
 800264a:	4846      	ldr	r0, [pc, #280]	; (8002764 <menu+0x1330>)
 800264c:	f006 fea6 	bl	800939c <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	d115      	bne.n	8002682 <menu+0x124e>
 8002656:	4b44      	ldr	r3, [pc, #272]	; (8002768 <menu+0x1334>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	f083 0301 	eor.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00e      	beq.n	8002682 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002664:	4b48      	ldr	r3, [pc, #288]	; (8002788 <menu+0x1354>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	b2da      	uxtb	r2, r3
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <menu+0x1354>)
 800266e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002670:	4b45      	ldr	r3, [pc, #276]	; (8002788 <menu+0x1354>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d902      	bls.n	800267e <menu+0x124a>
				kapiAcTipi = 0;
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <menu+0x1354>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800267e:	f002 fa35 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002682:	2104      	movs	r1, #4
 8002684:	4837      	ldr	r0, [pc, #220]	; (8002764 <menu+0x1330>)
 8002686:	f006 fe89 	bl	800939c <HAL_GPIO_ReadPin>
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	d115      	bne.n	80026bc <menu+0x1288>
 8002690:	4b35      	ldr	r3, [pc, #212]	; (8002768 <menu+0x1334>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <menu+0x1354>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b38      	ldr	r3, [pc, #224]	; (8002788 <menu+0x1354>)
 80026a8:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <menu+0x1354>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <menu+0x1284>
		   		kapiAcTipi = 1;
 80026b2:	4b35      	ldr	r3, [pc, #212]	; (8002788 <menu+0x1354>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026b8:	f002 fa18 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026bc:	2108      	movs	r1, #8
 80026be:	4829      	ldr	r0, [pc, #164]	; (8002764 <menu+0x1330>)
 80026c0:	f006 fe6c 	bl	800939c <HAL_GPIO_ReadPin>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d10e      	bne.n	80026e8 <menu+0x12b4>
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <menu+0x1334>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f083 0301 	eor.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <menu+0x1354>)
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	4b24      	ldr	r3, [pc, #144]	; (8002770 <menu+0x133c>)
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80026e2:	4b25      	ldr	r3, [pc, #148]	; (8002778 <menu+0x1344>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <menu+0x1348>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	f040 80b9 	bne.w	8002864 <menu+0x1430>
		if(dilSecim == 0){
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <menu+0x1328>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80026fa:	4a28      	ldr	r2, [pc, #160]	; (800279c <menu+0x1368>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	2001      	movs	r0, #1
 8002700:	f005 fb26 	bl	8007d50 <lcd_print>
 8002704:	e008      	b.n	8002718 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <menu+0x1328>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d104      	bne.n	8002718 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800270e:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <menu+0x136c>)
 8002710:	2101      	movs	r1, #1
 8002712:	2001      	movs	r0, #1
 8002714:	f005 fb1c 	bl	8007d50 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <menu+0x1370>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002720:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <menu+0x1374>)
 8002722:	2101      	movs	r1, #1
 8002724:	2002      	movs	r0, #2
 8002726:	f005 fb13 	bl	8007d50 <lcd_print>
 800272a:	e04c      	b.n	80027c6 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <menu+0x1370>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d13f      	bne.n	80027b4 <menu+0x1380>
			if(dilSecim == 0){
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <menu+0x1328>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 800273c:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <menu+0x1378>)
 800273e:	2101      	movs	r1, #1
 8002740:	2002      	movs	r0, #2
 8002742:	f005 fb05 	bl	8007d50 <lcd_print>
 8002746:	e03e      	b.n	80027c6 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <menu+0x1328>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d13a      	bne.n	80027c6 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <menu+0x137c>)
 8002752:	2101      	movs	r1, #1
 8002754:	2002      	movs	r0, #2
 8002756:	f005 fafb 	bl	8007d50 <lcd_print>
 800275a:	e034      	b.n	80027c6 <menu+0x1392>
 800275c:	2000020d 	.word	0x2000020d
 8002760:	0800d520 	.word	0x0800d520
 8002764:	40010800 	.word	0x40010800
 8002768:	2000021b 	.word	0x2000021b
 800276c:	200001f4 	.word	0x200001f4
 8002770:	20000118 	.word	0x20000118
 8002774:	200001f2 	.word	0x200001f2
 8002778:	20000218 	.word	0x20000218
 800277c:	200001ec 	.word	0x200001ec
 8002780:	0800d534 	.word	0x0800d534
 8002784:	0800d548 	.word	0x0800d548
 8002788:	200001f8 	.word	0x200001f8
 800278c:	0800d55c 	.word	0x0800d55c
 8002790:	0800d56c 	.word	0x0800d56c
 8002794:	0800d57c 	.word	0x0800d57c
 8002798:	0800d590 	.word	0x0800d590
 800279c:	0800d5a4 	.word	0x0800d5a4
 80027a0:	0800d5b8 	.word	0x0800d5b8
 80027a4:	200001f5 	.word	0x200001f5
 80027a8:	0800d5cc 	.word	0x0800d5cc
 80027ac:	0800d5e0 	.word	0x0800d5e0
 80027b0:	0800d5f0 	.word	0x0800d5f0
			}
		} else if(kapi1Tip == 2) {
 80027b4:	4b8a      	ldr	r3, [pc, #552]	; (80029e0 <menu+0x15ac>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d104      	bne.n	80027c6 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80027bc:	4a89      	ldr	r2, [pc, #548]	; (80029e4 <menu+0x15b0>)
 80027be:	2101      	movs	r1, #1
 80027c0:	2002      	movs	r0, #2
 80027c2:	f005 fac5 	bl	8007d50 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c6:	2102      	movs	r1, #2
 80027c8:	4887      	ldr	r0, [pc, #540]	; (80029e8 <menu+0x15b4>)
 80027ca:	f006 fde7 	bl	800939c <HAL_GPIO_ReadPin>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d115      	bne.n	8002800 <menu+0x13cc>
 80027d4:	4b85      	ldr	r3, [pc, #532]	; (80029ec <menu+0x15b8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00e      	beq.n	8002800 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80027e2:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <menu+0x15ac>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b7d      	ldr	r3, [pc, #500]	; (80029e0 <menu+0x15ac>)
 80027ec:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80027ee:	4b7c      	ldr	r3, [pc, #496]	; (80029e0 <menu+0x15ac>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <menu+0x13c8>
				kapi1Tip = 0;
 80027f6:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <menu+0x15ac>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027fc:	f002 f976 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002800:	2104      	movs	r1, #4
 8002802:	4879      	ldr	r0, [pc, #484]	; (80029e8 <menu+0x15b4>)
 8002804:	f006 fdca 	bl	800939c <HAL_GPIO_ReadPin>
 8002808:	4603      	mov	r3, r0
 800280a:	2b01      	cmp	r3, #1
 800280c:	d115      	bne.n	800283a <menu+0x1406>
 800280e:	4b77      	ldr	r3, [pc, #476]	; (80029ec <menu+0x15b8>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00e      	beq.n	800283a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 800281c:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <menu+0x15ac>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	3b01      	subs	r3, #1
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b6e      	ldr	r3, [pc, #440]	; (80029e0 <menu+0x15ac>)
 8002826:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002828:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <menu+0x15ac>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d902      	bls.n	8002836 <menu+0x1402>
		   		kapi1Tip = 2;
 8002830:	4b6b      	ldr	r3, [pc, #428]	; (80029e0 <menu+0x15ac>)
 8002832:	2202      	movs	r2, #2
 8002834:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002836:	f002 f959 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800283a:	2108      	movs	r1, #8
 800283c:	486a      	ldr	r0, [pc, #424]	; (80029e8 <menu+0x15b4>)
 800283e:	f006 fdad 	bl	800939c <HAL_GPIO_ReadPin>
 8002842:	4603      	mov	r3, r0
 8002844:	2b01      	cmp	r3, #1
 8002846:	d10d      	bne.n	8002864 <menu+0x1430>
 8002848:	4b68      	ldr	r3, [pc, #416]	; (80029ec <menu+0x15b8>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002856:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <menu+0x15ac>)
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <menu+0x15bc>)
 800285c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <menu+0x15c0>)
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <menu+0x15c4>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b0a      	cmp	r3, #10
 800286a:	d17f      	bne.n	800296c <menu+0x1538>
		if(dilSecim == 0) {
 800286c:	4b63      	ldr	r3, [pc, #396]	; (80029fc <menu+0x15c8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002874:	4a62      	ldr	r2, [pc, #392]	; (8002a00 <menu+0x15cc>)
 8002876:	2101      	movs	r1, #1
 8002878:	2001      	movs	r0, #1
 800287a:	f005 fa69 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800287e:	4a61      	ldr	r2, [pc, #388]	; (8002a04 <menu+0x15d0>)
 8002880:	2101      	movs	r1, #1
 8002882:	2002      	movs	r0, #2
 8002884:	f005 fa64 	bl	8007d50 <lcd_print>
 8002888:	e00d      	b.n	80028a6 <menu+0x1472>
		} else if(dilSecim == 1) {
 800288a:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <menu+0x15c8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d109      	bne.n	80028a6 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002892:	4a5d      	ldr	r2, [pc, #372]	; (8002a08 <menu+0x15d4>)
 8002894:	2101      	movs	r1, #1
 8002896:	2001      	movs	r0, #1
 8002898:	f005 fa5a 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800289c:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <menu+0x15d8>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2002      	movs	r0, #2
 80028a2:	f005 fa55 	bl	8007d50 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80028a6:	4b5a      	ldr	r3, [pc, #360]	; (8002a10 <menu+0x15dc>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	220a      	movs	r2, #10
 80028ac:	4959      	ldr	r1, [pc, #356]	; (8002a14 <menu+0x15e0>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f009 fda0 	bl	800c3f4 <itoa>
		lcd_print(2,16,snum);
 80028b4:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <menu+0x15e0>)
 80028b6:	2110      	movs	r1, #16
 80028b8:	2002      	movs	r0, #2
 80028ba:	f005 fa49 	bl	8007d50 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80028be:	2102      	movs	r1, #2
 80028c0:	4849      	ldr	r0, [pc, #292]	; (80029e8 <menu+0x15b4>)
 80028c2:	f006 fd6b 	bl	800939c <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d119      	bne.n	8002900 <menu+0x14cc>
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <menu+0x15b8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d012      	beq.n	8002900 <menu+0x14cc>
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <menu+0x15ac>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <menu+0x15dc>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <menu+0x15dc>)
 80028ec:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80028ee:	4b48      	ldr	r3, [pc, #288]	; (8002a10 <menu+0x15dc>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d902      	bls.n	80028fc <menu+0x14c8>
				kapi1AcSure = 0;
 80028f6:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <menu+0x15dc>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028fc:	f002 f8f6 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002900:	2104      	movs	r1, #4
 8002902:	4839      	ldr	r0, [pc, #228]	; (80029e8 <menu+0x15b4>)
 8002904:	f006 fd4a 	bl	800939c <HAL_GPIO_ReadPin>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d119      	bne.n	8002942 <menu+0x150e>
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <menu+0x15b8>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d012      	beq.n	8002942 <menu+0x150e>
 800291c:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <menu+0x15ac>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10e      	bne.n	8002942 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002924:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <menu+0x15dc>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	3b01      	subs	r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <menu+0x15dc>)
 800292e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002930:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <menu+0x15dc>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b06      	cmp	r3, #6
 8002936:	d902      	bls.n	800293e <menu+0x150a>
		   		kapi1AcSure = 5;
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <menu+0x15dc>)
 800293a:	2205      	movs	r2, #5
 800293c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800293e:	f002 f8d5 	bl	8004aec <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002942:	2108      	movs	r1, #8
 8002944:	4828      	ldr	r0, [pc, #160]	; (80029e8 <menu+0x15b4>)
 8002946:	f006 fd29 	bl	800939c <HAL_GPIO_ReadPin>
 800294a:	4603      	mov	r3, r0
 800294c:	2b01      	cmp	r3, #1
 800294e:	d10d      	bne.n	800296c <menu+0x1538>
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <menu+0x15b8>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f083 0301 	eor.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800295e:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <menu+0x15dc>)
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <menu+0x15bc>)
 8002964:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002966:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <menu+0x15c0>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <menu+0x15c4>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b0b      	cmp	r3, #11
 8002972:	f040 80b5 	bne.w	8002ae0 <menu+0x16ac>
		if(dilSecim == 0) {
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <menu+0x15c8>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800297e:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <menu+0x15e4>)
 8002980:	2101      	movs	r1, #1
 8002982:	2001      	movs	r0, #1
 8002984:	f005 f9e4 	bl	8007d50 <lcd_print>
 8002988:	e008      	b.n	800299c <menu+0x1568>
		} else if(dilSecim == 1) {
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <menu+0x15c8>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d104      	bne.n	800299c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002992:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <menu+0x15e8>)
 8002994:	2101      	movs	r1, #1
 8002996:	2001      	movs	r0, #1
 8002998:	f005 f9da 	bl	8007d50 <lcd_print>
		}

		if(kapi2Tip == 0) {
 800299c:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <menu+0x15ec>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80029a4:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <menu+0x15f0>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	2002      	movs	r0, #2
 80029aa:	f005 f9d1 	bl	8007d50 <lcd_print>
 80029ae:	e048      	b.n	8002a42 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <menu+0x15ec>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d13b      	bne.n	8002a30 <menu+0x15fc>
			if(dilSecim == 0) {
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <menu+0x15c8>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <menu+0x15f4>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	2002      	movs	r0, #2
 80029c6:	f005 f9c3 	bl	8007d50 <lcd_print>
 80029ca:	e03a      	b.n	8002a42 <menu+0x160e>
			} else if(dilSecim == 1) {
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <menu+0x15c8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d136      	bne.n	8002a42 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80029d4:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <menu+0x15f8>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	2002      	movs	r0, #2
 80029da:	f005 f9b9 	bl	8007d50 <lcd_print>
 80029de:	e030      	b.n	8002a42 <menu+0x160e>
 80029e0:	200001f5 	.word	0x200001f5
 80029e4:	0800d604 	.word	0x0800d604
 80029e8:	40010800 	.word	0x40010800
 80029ec:	2000021b 	.word	0x2000021b
 80029f0:	20000118 	.word	0x20000118
 80029f4:	20000218 	.word	0x20000218
 80029f8:	200001ec 	.word	0x200001ec
 80029fc:	2000020d 	.word	0x2000020d
 8002a00:	0800d614 	.word	0x0800d614
 8002a04:	0800d628 	.word	0x0800d628
 8002a08:	0800d638 	.word	0x0800d638
 8002a0c:	0800d64c 	.word	0x0800d64c
 8002a10:	20000205 	.word	0x20000205
 8002a14:	20000188 	.word	0x20000188
 8002a18:	0800d65c 	.word	0x0800d65c
 8002a1c:	0800d670 	.word	0x0800d670
 8002a20:	200001f6 	.word	0x200001f6
 8002a24:	0800d5cc 	.word	0x0800d5cc
 8002a28:	0800d5e0 	.word	0x0800d5e0
 8002a2c:	0800d5f0 	.word	0x0800d5f0
			}
		} else if(kapi2Tip == 2) {
 8002a30:	4b8a      	ldr	r3, [pc, #552]	; (8002c5c <menu+0x1828>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d104      	bne.n	8002a42 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002a38:	4a89      	ldr	r2, [pc, #548]	; (8002c60 <menu+0x182c>)
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	f005 f987 	bl	8007d50 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a42:	2102      	movs	r1, #2
 8002a44:	4887      	ldr	r0, [pc, #540]	; (8002c64 <menu+0x1830>)
 8002a46:	f006 fca9 	bl	800939c <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d115      	bne.n	8002a7c <menu+0x1648>
 8002a50:	4b85      	ldr	r3, [pc, #532]	; (8002c68 <menu+0x1834>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00e      	beq.n	8002a7c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	; (8002c5c <menu+0x1828>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b7d      	ldr	r3, [pc, #500]	; (8002c5c <menu+0x1828>)
 8002a68:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002a6a:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <menu+0x1828>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <menu+0x1644>
				kapi2Tip = 0;
 8002a72:	4b7a      	ldr	r3, [pc, #488]	; (8002c5c <menu+0x1828>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a78:	f002 f838 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	4879      	ldr	r0, [pc, #484]	; (8002c64 <menu+0x1830>)
 8002a80:	f006 fc8c 	bl	800939c <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d115      	bne.n	8002ab6 <menu+0x1682>
 8002a8a:	4b77      	ldr	r3, [pc, #476]	; (8002c68 <menu+0x1834>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002a98:	4b70      	ldr	r3, [pc, #448]	; (8002c5c <menu+0x1828>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b6e      	ldr	r3, [pc, #440]	; (8002c5c <menu+0x1828>)
 8002aa2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002aa4:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <menu+0x1828>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d902      	bls.n	8002ab2 <menu+0x167e>
		   		kapi2Tip = 2;
 8002aac:	4b6b      	ldr	r3, [pc, #428]	; (8002c5c <menu+0x1828>)
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ab2:	f002 f81b 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab6:	2108      	movs	r1, #8
 8002ab8:	486a      	ldr	r0, [pc, #424]	; (8002c64 <menu+0x1830>)
 8002aba:	f006 fc6f 	bl	800939c <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10d      	bne.n	8002ae0 <menu+0x16ac>
 8002ac4:	4b68      	ldr	r3, [pc, #416]	; (8002c68 <menu+0x1834>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <menu+0x1828>)
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <menu+0x1838>)
 8002ad8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002ada:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <menu+0x183c>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002ae0:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <menu+0x1840>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d17f      	bne.n	8002be8 <menu+0x17b4>
		if(dilSecim == 0) {
 8002ae8:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <menu+0x1844>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002af0:	4a62      	ldr	r2, [pc, #392]	; (8002c7c <menu+0x1848>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	2001      	movs	r0, #1
 8002af6:	f005 f92b 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002afa:	4a61      	ldr	r2, [pc, #388]	; (8002c80 <menu+0x184c>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	2002      	movs	r0, #2
 8002b00:	f005 f926 	bl	8007d50 <lcd_print>
 8002b04:	e00d      	b.n	8002b22 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <menu+0x1844>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d109      	bne.n	8002b22 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <menu+0x1850>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	2001      	movs	r0, #1
 8002b14:	f005 f91c 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b18:	4a5b      	ldr	r2, [pc, #364]	; (8002c88 <menu+0x1854>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f005 f917 	bl	8007d50 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002b22:	4b5a      	ldr	r3, [pc, #360]	; (8002c8c <menu+0x1858>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	220a      	movs	r2, #10
 8002b28:	4959      	ldr	r1, [pc, #356]	; (8002c90 <menu+0x185c>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f009 fc62 	bl	800c3f4 <itoa>
		lcd_print(2,16,snum);
 8002b30:	4a57      	ldr	r2, [pc, #348]	; (8002c90 <menu+0x185c>)
 8002b32:	2110      	movs	r1, #16
 8002b34:	2002      	movs	r0, #2
 8002b36:	f005 f90b 	bl	8007d50 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4849      	ldr	r0, [pc, #292]	; (8002c64 <menu+0x1830>)
 8002b3e:	f006 fc2d 	bl	800939c <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d119      	bne.n	8002b7c <menu+0x1748>
 8002b48:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <menu+0x1834>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f083 0301 	eor.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <menu+0x1748>
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <menu+0x1828>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10e      	bne.n	8002b7c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <menu+0x1858>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b49      	ldr	r3, [pc, #292]	; (8002c8c <menu+0x1858>)
 8002b68:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002b6a:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <menu+0x1858>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d902      	bls.n	8002b78 <menu+0x1744>
				kapi2AcSure = 0;
 8002b72:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <menu+0x1858>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b78:	f001 ffb8 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	4839      	ldr	r0, [pc, #228]	; (8002c64 <menu+0x1830>)
 8002b80:	f006 fc0c 	bl	800939c <HAL_GPIO_ReadPin>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d119      	bne.n	8002bbe <menu+0x178a>
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <menu+0x1834>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d012      	beq.n	8002bbe <menu+0x178a>
 8002b98:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <menu+0x1828>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10e      	bne.n	8002bbe <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <menu+0x1858>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b38      	ldr	r3, [pc, #224]	; (8002c8c <menu+0x1858>)
 8002baa:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002bac:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <menu+0x1858>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b06      	cmp	r3, #6
 8002bb2:	d902      	bls.n	8002bba <menu+0x1786>
		   		kapi2AcSure = 5;
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <menu+0x1858>)
 8002bb6:	2205      	movs	r2, #5
 8002bb8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bba:	f001 ff97 	bl	8004aec <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bbe:	2108      	movs	r1, #8
 8002bc0:	4828      	ldr	r0, [pc, #160]	; (8002c64 <menu+0x1830>)
 8002bc2:	f006 fbeb 	bl	800939c <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d10d      	bne.n	8002be8 <menu+0x17b4>
 8002bcc:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <menu+0x1834>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <menu+0x1858>)
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <menu+0x1838>)
 8002be0:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <menu+0x183c>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <menu+0x1840>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b0d      	cmp	r3, #13
 8002bee:	f040 80b5 	bne.w	8002d5c <menu+0x1928>
		if(dilSecim == 0) {
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <menu+0x1844>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002bfa:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <menu+0x1860>)
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f005 f8a6 	bl	8007d50 <lcd_print>
 8002c04:	e008      	b.n	8002c18 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <menu+0x1844>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d104      	bne.n	8002c18 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c0e:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <menu+0x1864>)
 8002c10:	2101      	movs	r1, #1
 8002c12:	2001      	movs	r0, #1
 8002c14:	f005 f89c 	bl	8007d50 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <menu+0x1868>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <menu+0x186c>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	2002      	movs	r0, #2
 8002c26:	f005 f893 	bl	8007d50 <lcd_print>
 8002c2a:	e048      	b.n	8002cbe <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <menu+0x1868>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d13b      	bne.n	8002cac <menu+0x1878>
			if(dilSecim == 0) {
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <menu+0x1844>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <menu+0x1870>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2002      	movs	r0, #2
 8002c42:	f005 f885 	bl	8007d50 <lcd_print>
 8002c46:	e03a      	b.n	8002cbe <menu+0x188a>
			} else if(dilSecim == 1) {
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <menu+0x1844>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d136      	bne.n	8002cbe <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <menu+0x1874>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	2002      	movs	r0, #2
 8002c56:	f005 f87b 	bl	8007d50 <lcd_print>
 8002c5a:	e030      	b.n	8002cbe <menu+0x188a>
 8002c5c:	200001f6 	.word	0x200001f6
 8002c60:	0800d604 	.word	0x0800d604
 8002c64:	40010800 	.word	0x40010800
 8002c68:	2000021b 	.word	0x2000021b
 8002c6c:	20000118 	.word	0x20000118
 8002c70:	20000218 	.word	0x20000218
 8002c74:	200001ec 	.word	0x200001ec
 8002c78:	2000020d 	.word	0x2000020d
 8002c7c:	0800d684 	.word	0x0800d684
 8002c80:	0800d628 	.word	0x0800d628
 8002c84:	0800d698 	.word	0x0800d698
 8002c88:	0800d64c 	.word	0x0800d64c
 8002c8c:	20000206 	.word	0x20000206
 8002c90:	20000188 	.word	0x20000188
 8002c94:	0800d6ac 	.word	0x0800d6ac
 8002c98:	0800d6c0 	.word	0x0800d6c0
 8002c9c:	200001f7 	.word	0x200001f7
 8002ca0:	0800d5cc 	.word	0x0800d5cc
 8002ca4:	0800d5e0 	.word	0x0800d5e0
 8002ca8:	0800d5f0 	.word	0x0800d5f0
			}
		} else if(kapitablaTip == 2) {
 8002cac:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <menu+0x19e8>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d104      	bne.n	8002cbe <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002cb4:	4a5a      	ldr	r2, [pc, #360]	; (8002e20 <menu+0x19ec>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f005 f849 	bl	8007d50 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	4858      	ldr	r0, [pc, #352]	; (8002e24 <menu+0x19f0>)
 8002cc2:	f006 fb6b 	bl	800939c <HAL_GPIO_ReadPin>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d115      	bne.n	8002cf8 <menu+0x18c4>
 8002ccc:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <menu+0x19f4>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	f083 0301 	eor.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002cda:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <menu+0x19e8>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b4e      	ldr	r3, [pc, #312]	; (8002e1c <menu+0x19e8>)
 8002ce4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <menu+0x19e8>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <menu+0x18c0>
				kapitablaTip = 0;
 8002cee:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <menu+0x19e8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cf4:	f001 fefa 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	484a      	ldr	r0, [pc, #296]	; (8002e24 <menu+0x19f0>)
 8002cfc:	f006 fb4e 	bl	800939c <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d115      	bne.n	8002d32 <menu+0x18fe>
 8002d06:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <menu+0x19f4>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002d14:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <menu+0x19e8>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <menu+0x19e8>)
 8002d1e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002d20:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <menu+0x19e8>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d902      	bls.n	8002d2e <menu+0x18fa>
		   		kapitablaTip = 2;
 8002d28:	4b3c      	ldr	r3, [pc, #240]	; (8002e1c <menu+0x19e8>)
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d2e:	f001 fedd 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d32:	2108      	movs	r1, #8
 8002d34:	483b      	ldr	r0, [pc, #236]	; (8002e24 <menu+0x19f0>)
 8002d36:	f006 fb31 	bl	800939c <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10d      	bne.n	8002d5c <menu+0x1928>
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <menu+0x19f4>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002d4e:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <menu+0x19e8>)
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <menu+0x19f8>)
 8002d54:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <menu+0x19fc>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <menu+0x1a00>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b0e      	cmp	r3, #14
 8002d62:	f040 80f2 	bne.w	8002f4a <menu+0x1b16>
		if(dilSecim == 0) {
 8002d66:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <menu+0x1a04>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002d6e:	4a33      	ldr	r2, [pc, #204]	; (8002e3c <menu+0x1a08>)
 8002d70:	2101      	movs	r1, #1
 8002d72:	2001      	movs	r0, #1
 8002d74:	f004 ffec 	bl	8007d50 <lcd_print>
 8002d78:	e008      	b.n	8002d8c <menu+0x1958>
		} else if(dilSecim == 1) {
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <menu+0x1a04>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d104      	bne.n	8002d8c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002d82:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <menu+0x1a0c>)
 8002d84:	2101      	movs	r1, #1
 8002d86:	2001      	movs	r0, #1
 8002d88:	f004 ffe2 	bl	8007d50 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <menu+0x1a10>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d113      	bne.n	8002dbc <menu+0x1988>
			if(dilSecim == 0){
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <menu+0x1a04>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002d9c:	4a2a      	ldr	r2, [pc, #168]	; (8002e48 <menu+0x1a14>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2002      	movs	r0, #2
 8002da2:	f004 ffd5 	bl	8007d50 <lcd_print>
 8002da6:	e071      	b.n	8002e8c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <menu+0x1a04>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d16d      	bne.n	8002e8c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002db0:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <menu+0x1a18>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	2002      	movs	r0, #2
 8002db6:	f004 ffcb 	bl	8007d50 <lcd_print>
 8002dba:	e067      	b.n	8002e8c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <menu+0x1a10>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d112      	bne.n	8002dea <menu+0x19b6>
			if(dilSecim == 0){
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <menu+0x1a04>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002dcc:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <menu+0x1a1c>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f004 ffbd 	bl	8007d50 <lcd_print>
			}
			if(dilSecim == 1){
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <menu+0x1a04>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d156      	bne.n	8002e8c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <menu+0x1a20>)
 8002de0:	2101      	movs	r1, #1
 8002de2:	2002      	movs	r0, #2
 8002de4:	f004 ffb4 	bl	8007d50 <lcd_print>
 8002de8:	e050      	b.n	8002e8c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <menu+0x1a10>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d136      	bne.n	8002e60 <menu+0x1a2c>
			if(dilSecim == 0){
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <menu+0x1a04>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <menu+0x1a24>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	2002      	movs	r0, #2
 8002e00:	f004 ffa6 	bl	8007d50 <lcd_print>
 8002e04:	e042      	b.n	8002e8c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <menu+0x1a04>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d13e      	bne.n	8002e8c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <menu+0x1a28>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	2002      	movs	r0, #2
 8002e14:	f004 ff9c 	bl	8007d50 <lcd_print>
 8002e18:	e038      	b.n	8002e8c <menu+0x1a58>
 8002e1a:	bf00      	nop
 8002e1c:	200001f7 	.word	0x200001f7
 8002e20:	0800d604 	.word	0x0800d604
 8002e24:	40010800 	.word	0x40010800
 8002e28:	2000021b 	.word	0x2000021b
 8002e2c:	20000118 	.word	0x20000118
 8002e30:	20000218 	.word	0x20000218
 8002e34:	200001ec 	.word	0x200001ec
 8002e38:	2000020d 	.word	0x2000020d
 8002e3c:	0800d6d4 	.word	0x0800d6d4
 8002e40:	0800d6e8 	.word	0x0800d6e8
 8002e44:	200001f9 	.word	0x200001f9
 8002e48:	0800d6fc 	.word	0x0800d6fc
 8002e4c:	0800d70c 	.word	0x0800d70c
 8002e50:	0800d71c 	.word	0x0800d71c
 8002e54:	0800d72c 	.word	0x0800d72c
 8002e58:	0800d73c 	.word	0x0800d73c
 8002e5c:	0800d750 	.word	0x0800d750
			}
		} else if(kapiTablaAcKonum == 3) {
 8002e60:	4b9b      	ldr	r3, [pc, #620]	; (80030d0 <menu+0x1c9c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d111      	bne.n	8002e8c <menu+0x1a58>
			if(dilSecim == 0) {
 8002e68:	4b9a      	ldr	r3, [pc, #616]	; (80030d4 <menu+0x1ca0>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002e70:	4a99      	ldr	r2, [pc, #612]	; (80030d8 <menu+0x1ca4>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	2002      	movs	r0, #2
 8002e76:	f004 ff6b 	bl	8007d50 <lcd_print>
			}
			if(dilSecim == 1) {
 8002e7a:	4b96      	ldr	r3, [pc, #600]	; (80030d4 <menu+0x1ca0>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d104      	bne.n	8002e8c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002e82:	4a96      	ldr	r2, [pc, #600]	; (80030dc <menu+0x1ca8>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	2002      	movs	r0, #2
 8002e88:	f004 ff62 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4894      	ldr	r0, [pc, #592]	; (80030e0 <menu+0x1cac>)
 8002e90:	f006 fa84 	bl	800939c <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d115      	bne.n	8002ec6 <menu+0x1a92>
 8002e9a:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <menu+0x1cb0>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002ea8:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <menu+0x1c9c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b87      	ldr	r3, [pc, #540]	; (80030d0 <menu+0x1c9c>)
 8002eb2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002eb4:	4b86      	ldr	r3, [pc, #536]	; (80030d0 <menu+0x1c9c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d902      	bls.n	8002ec2 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002ebc:	4b84      	ldr	r3, [pc, #528]	; (80030d0 <menu+0x1c9c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ec2:	f001 fe13 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ec6:	2104      	movs	r1, #4
 8002ec8:	4885      	ldr	r0, [pc, #532]	; (80030e0 <menu+0x1cac>)
 8002eca:	f006 fa67 	bl	800939c <HAL_GPIO_ReadPin>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d115      	bne.n	8002f00 <menu+0x1acc>
 8002ed4:	4b83      	ldr	r3, [pc, #524]	; (80030e4 <menu+0x1cb0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f083 0301 	eor.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00e      	beq.n	8002f00 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002ee2:	4b7b      	ldr	r3, [pc, #492]	; (80030d0 <menu+0x1c9c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <menu+0x1c9c>)
 8002eec:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002eee:	4b78      	ldr	r3, [pc, #480]	; (80030d0 <menu+0x1c9c>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d902      	bls.n	8002efc <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002ef6:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <menu+0x1c9c>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002efc:	f001 fdf6 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f00:	2108      	movs	r1, #8
 8002f02:	4877      	ldr	r0, [pc, #476]	; (80030e0 <menu+0x1cac>)
 8002f04:	f006 fa4a 	bl	800939c <HAL_GPIO_ReadPin>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d11d      	bne.n	8002f4a <menu+0x1b16>
 8002f0e:	4b75      	ldr	r3, [pc, #468]	; (80030e4 <menu+0x1cb0>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	f083 0301 	eor.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002f1c:	4b6c      	ldr	r3, [pc, #432]	; (80030d0 <menu+0x1c9c>)
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	4b71      	ldr	r3, [pc, #452]	; (80030e8 <menu+0x1cb4>)
 8002f22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <menu+0x1c9c>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <menu+0x1b02>
 8002f2e:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <menu+0x1c9c>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d106      	bne.n	8002f44 <menu+0x1b10>
				altLimit = 1;
 8002f36:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <menu+0x1cb8>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f3c:	4b6b      	ldr	r3, [pc, #428]	; (80030ec <menu+0x1cb8>)
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <menu+0x1cb4>)
 8002f42:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <menu+0x1cbc>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002f4a:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <menu+0x1cc0>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	d17f      	bne.n	8003052 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002f52:	4b60      	ldr	r3, [pc, #384]	; (80030d4 <menu+0x1ca0>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002f5a:	4a67      	ldr	r2, [pc, #412]	; (80030f8 <menu+0x1cc4>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f004 fef6 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002f64:	4a65      	ldr	r2, [pc, #404]	; (80030fc <menu+0x1cc8>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f004 fef1 	bl	8007d50 <lcd_print>
 8002f6e:	e00d      	b.n	8002f8c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002f70:	4b58      	ldr	r3, [pc, #352]	; (80030d4 <menu+0x1ca0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d109      	bne.n	8002f8c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002f78:	4a61      	ldr	r2, [pc, #388]	; (8003100 <menu+0x1ccc>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f004 fee7 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002f82:	4a60      	ldr	r2, [pc, #384]	; (8003104 <menu+0x1cd0>)
 8002f84:	2101      	movs	r1, #1
 8002f86:	2002      	movs	r0, #2
 8002f88:	f004 fee2 	bl	8007d50 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002f8c:	4b5e      	ldr	r3, [pc, #376]	; (8003108 <menu+0x1cd4>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	220a      	movs	r2, #10
 8002f92:	495e      	ldr	r1, [pc, #376]	; (800310c <menu+0x1cd8>)
 8002f94:	4618      	mov	r0, r3
 8002f96:	f009 fa2d 	bl	800c3f4 <itoa>
		lcd_print(2,16,snum);
 8002f9a:	4a5c      	ldr	r2, [pc, #368]	; (800310c <menu+0x1cd8>)
 8002f9c:	2110      	movs	r1, #16
 8002f9e:	2002      	movs	r0, #2
 8002fa0:	f004 fed6 	bl	8007d50 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	484e      	ldr	r0, [pc, #312]	; (80030e0 <menu+0x1cac>)
 8002fa8:	f006 f9f8 	bl	800939c <HAL_GPIO_ReadPin>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d119      	bne.n	8002fe6 <menu+0x1bb2>
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <menu+0x1cb0>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <menu+0x1bb2>
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <menu+0x1cdc>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10e      	bne.n	8002fe6 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	; (8003108 <menu+0x1cd4>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <menu+0x1cd4>)
 8002fd2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <menu+0x1cd4>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d902      	bls.n	8002fe2 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002fdc:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <menu+0x1cd4>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fe2:	f001 fd83 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	483d      	ldr	r0, [pc, #244]	; (80030e0 <menu+0x1cac>)
 8002fea:	f006 f9d7 	bl	800939c <HAL_GPIO_ReadPin>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d119      	bne.n	8003028 <menu+0x1bf4>
 8002ff4:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <menu+0x1cb0>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d012      	beq.n	8003028 <menu+0x1bf4>
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <menu+0x1cdc>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800300a:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <menu+0x1cd4>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	3b01      	subs	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <menu+0x1cd4>)
 8003014:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003016:	4b3c      	ldr	r3, [pc, #240]	; (8003108 <menu+0x1cd4>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800301e:	4b3a      	ldr	r3, [pc, #232]	; (8003108 <menu+0x1cd4>)
 8003020:	2205      	movs	r2, #5
 8003022:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003024:	f001 fd62 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003028:	2108      	movs	r1, #8
 800302a:	482d      	ldr	r0, [pc, #180]	; (80030e0 <menu+0x1cac>)
 800302c:	f006 f9b6 	bl	800939c <HAL_GPIO_ReadPin>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10d      	bne.n	8003052 <menu+0x1c1e>
 8003036:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <menu+0x1cb0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003044:	4b30      	ldr	r3, [pc, #192]	; (8003108 <menu+0x1cd4>)
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <menu+0x1cb4>)
 800304a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800304c:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <menu+0x1cbc>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003052:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <menu+0x1cc0>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b10      	cmp	r3, #16
 8003058:	f040 80bc 	bne.w	80031d4 <menu+0x1da0>
		if(dilSecim == 0) {
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <menu+0x1ca0>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003064:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <menu+0x1ce0>)
 8003066:	2101      	movs	r1, #1
 8003068:	2001      	movs	r0, #1
 800306a:	f004 fe71 	bl	8007d50 <lcd_print>
 800306e:	e008      	b.n	8003082 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <menu+0x1ca0>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d104      	bne.n	8003082 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003078:	4a27      	ldr	r2, [pc, #156]	; (8003118 <menu+0x1ce4>)
 800307a:	2101      	movs	r1, #1
 800307c:	2001      	movs	r0, #1
 800307e:	f004 fe67 	bl	8007d50 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <menu+0x1ce8>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d113      	bne.n	80030b2 <menu+0x1c7e>
			if(dilSecim == 0) {
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <menu+0x1ca0>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8003092:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <menu+0x1ca4>)
 8003094:	2101      	movs	r1, #1
 8003096:	2002      	movs	r0, #2
 8003098:	f004 fe5a 	bl	8007d50 <lcd_print>
 800309c:	e04b      	b.n	8003136 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800309e:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <menu+0x1ca0>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d147      	bne.n	8003136 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80030a6:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <menu+0x1ca8>)
 80030a8:	2101      	movs	r1, #1
 80030aa:	2002      	movs	r0, #2
 80030ac:	f004 fe50 	bl	8007d50 <lcd_print>
 80030b0:	e041      	b.n	8003136 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <menu+0x1ce8>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d13d      	bne.n	8003136 <menu+0x1d02>
			if(dilSecim == 0) {
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <menu+0x1ca0>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d130      	bne.n	8003124 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80030c2:	4a17      	ldr	r2, [pc, #92]	; (8003120 <menu+0x1cec>)
 80030c4:	2101      	movs	r1, #1
 80030c6:	2002      	movs	r0, #2
 80030c8:	f004 fe42 	bl	8007d50 <lcd_print>
 80030cc:	e033      	b.n	8003136 <menu+0x1d02>
 80030ce:	bf00      	nop
 80030d0:	200001f9 	.word	0x200001f9
 80030d4:	2000020d 	.word	0x2000020d
 80030d8:	0800d3c4 	.word	0x0800d3c4
 80030dc:	0800d3d8 	.word	0x0800d3d8
 80030e0:	40010800 	.word	0x40010800
 80030e4:	2000021b 	.word	0x2000021b
 80030e8:	20000118 	.word	0x20000118
 80030ec:	200001f2 	.word	0x200001f2
 80030f0:	20000218 	.word	0x20000218
 80030f4:	200001ec 	.word	0x200001ec
 80030f8:	0800d764 	.word	0x0800d764
 80030fc:	0800d628 	.word	0x0800d628
 8003100:	0800d778 	.word	0x0800d778
 8003104:	0800d64c 	.word	0x0800d64c
 8003108:	20000207 	.word	0x20000207
 800310c:	20000188 	.word	0x20000188
 8003110:	200001f7 	.word	0x200001f7
 8003114:	0800d78c 	.word	0x0800d78c
 8003118:	0800d7a0 	.word	0x0800d7a0
 800311c:	200001fa 	.word	0x200001fa
 8003120:	0800d424 	.word	0x0800d424
			} else if(dilSecim == 1) {
 8003124:	4b99      	ldr	r3, [pc, #612]	; (800338c <menu+0x1f58>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d104      	bne.n	8003136 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 800312c:	4a98      	ldr	r2, [pc, #608]	; (8003390 <menu+0x1f5c>)
 800312e:	2101      	movs	r1, #1
 8003130:	2002      	movs	r0, #2
 8003132:	f004 fe0d 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003136:	2102      	movs	r1, #2
 8003138:	4896      	ldr	r0, [pc, #600]	; (8003394 <menu+0x1f60>)
 800313a:	f006 f92f 	bl	800939c <HAL_GPIO_ReadPin>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	d115      	bne.n	8003170 <menu+0x1d3c>
 8003144:	4b94      	ldr	r3, [pc, #592]	; (8003398 <menu+0x1f64>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00e      	beq.n	8003170 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003152:	4b92      	ldr	r3, [pc, #584]	; (800339c <menu+0x1f68>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b90      	ldr	r3, [pc, #576]	; (800339c <menu+0x1f68>)
 800315c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800315e:	4b8f      	ldr	r3, [pc, #572]	; (800339c <menu+0x1f68>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d902      	bls.n	800316c <menu+0x1d38>
				yukariYavasLimit = 0;
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <menu+0x1f68>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800316c:	f001 fcbe 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003170:	2104      	movs	r1, #4
 8003172:	4888      	ldr	r0, [pc, #544]	; (8003394 <menu+0x1f60>)
 8003174:	f006 f912 	bl	800939c <HAL_GPIO_ReadPin>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d115      	bne.n	80031aa <menu+0x1d76>
 800317e:	4b86      	ldr	r3, [pc, #536]	; (8003398 <menu+0x1f64>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	f083 0301 	eor.w	r3, r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 800318c:	4b83      	ldr	r3, [pc, #524]	; (800339c <menu+0x1f68>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	3b01      	subs	r3, #1
 8003192:	b2da      	uxtb	r2, r3
 8003194:	4b81      	ldr	r3, [pc, #516]	; (800339c <menu+0x1f68>)
 8003196:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003198:	4b80      	ldr	r3, [pc, #512]	; (800339c <menu+0x1f68>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80031a0:	4b7e      	ldr	r3, [pc, #504]	; (800339c <menu+0x1f68>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031a6:	f001 fca1 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031aa:	2108      	movs	r1, #8
 80031ac:	4879      	ldr	r0, [pc, #484]	; (8003394 <menu+0x1f60>)
 80031ae:	f006 f8f5 	bl	800939c <HAL_GPIO_ReadPin>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10d      	bne.n	80031d4 <menu+0x1da0>
 80031b8:	4b77      	ldr	r3, [pc, #476]	; (8003398 <menu+0x1f64>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f083 0301 	eor.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80031c6:	4b75      	ldr	r3, [pc, #468]	; (800339c <menu+0x1f68>)
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	4b75      	ldr	r3, [pc, #468]	; (80033a0 <menu+0x1f6c>)
 80031cc:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80031ce:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <menu+0x1f70>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80031d4:	4b74      	ldr	r3, [pc, #464]	; (80033a8 <menu+0x1f74>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b11      	cmp	r3, #17
 80031da:	f040 80c3 	bne.w	8003364 <menu+0x1f30>
		if(dilSecim == 0) {
 80031de:	4b6b      	ldr	r3, [pc, #428]	; (800338c <menu+0x1f58>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80031e6:	4a71      	ldr	r2, [pc, #452]	; (80033ac <menu+0x1f78>)
 80031e8:	2101      	movs	r1, #1
 80031ea:	2001      	movs	r0, #1
 80031ec:	f004 fdb0 	bl	8007d50 <lcd_print>
 80031f0:	e008      	b.n	8003204 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80031f2:	4b66      	ldr	r3, [pc, #408]	; (800338c <menu+0x1f58>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d104      	bne.n	8003204 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80031fa:	4a6d      	ldr	r2, [pc, #436]	; (80033b0 <menu+0x1f7c>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	2001      	movs	r0, #1
 8003200:	f004 fda6 	bl	8007d50 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003204:	4b6b      	ldr	r3, [pc, #428]	; (80033b4 <menu+0x1f80>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d113      	bne.n	8003234 <menu+0x1e00>
			if(dilSecim == 0){
 800320c:	4b5f      	ldr	r3, [pc, #380]	; (800338c <menu+0x1f58>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003214:	4a68      	ldr	r2, [pc, #416]	; (80033b8 <menu+0x1f84>)
 8003216:	2101      	movs	r1, #1
 8003218:	2002      	movs	r0, #2
 800321a:	f004 fd99 	bl	8007d50 <lcd_print>
 800321e:	e038      	b.n	8003292 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003220:	4b5a      	ldr	r3, [pc, #360]	; (800338c <menu+0x1f58>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d134      	bne.n	8003292 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003228:	4a64      	ldr	r2, [pc, #400]	; (80033bc <menu+0x1f88>)
 800322a:	2101      	movs	r1, #1
 800322c:	2002      	movs	r0, #2
 800322e:	f004 fd8f 	bl	8007d50 <lcd_print>
 8003232:	e02e      	b.n	8003292 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003234:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <menu+0x1f80>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d113      	bne.n	8003264 <menu+0x1e30>
			if(dilSecim == 0){
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <menu+0x1f58>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003244:	4a5e      	ldr	r2, [pc, #376]	; (80033c0 <menu+0x1f8c>)
 8003246:	2101      	movs	r1, #1
 8003248:	2002      	movs	r0, #2
 800324a:	f004 fd81 	bl	8007d50 <lcd_print>
 800324e:	e020      	b.n	8003292 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003250:	4b4e      	ldr	r3, [pc, #312]	; (800338c <menu+0x1f58>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d11c      	bne.n	8003292 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003258:	4a5a      	ldr	r2, [pc, #360]	; (80033c4 <menu+0x1f90>)
 800325a:	2101      	movs	r1, #1
 800325c:	2002      	movs	r0, #2
 800325e:	f004 fd77 	bl	8007d50 <lcd_print>
 8003262:	e016      	b.n	8003292 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <menu+0x1f80>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d112      	bne.n	8003292 <menu+0x1e5e>
			if(dilSecim == 0) {
 800326c:	4b47      	ldr	r3, [pc, #284]	; (800338c <menu+0x1f58>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003274:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <menu+0x1f94>)
 8003276:	2101      	movs	r1, #1
 8003278:	2002      	movs	r0, #2
 800327a:	f004 fd69 	bl	8007d50 <lcd_print>
 800327e:	e008      	b.n	8003292 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <menu+0x1f58>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d104      	bne.n	8003292 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003288:	4a50      	ldr	r2, [pc, #320]	; (80033cc <menu+0x1f98>)
 800328a:	2101      	movs	r1, #1
 800328c:	2002      	movs	r0, #2
 800328e:	f004 fd5f 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003292:	2102      	movs	r1, #2
 8003294:	483f      	ldr	r0, [pc, #252]	; (8003394 <menu+0x1f60>)
 8003296:	f006 f881 	bl	800939c <HAL_GPIO_ReadPin>
 800329a:	4603      	mov	r3, r0
 800329c:	2b01      	cmp	r3, #1
 800329e:	d115      	bne.n	80032cc <menu+0x1e98>
 80032a0:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <menu+0x1f64>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <menu+0x1f80>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	3301      	adds	r3, #1
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <menu+0x1f80>)
 80032b8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80032ba:	4b3e      	ldr	r3, [pc, #248]	; (80033b4 <menu+0x1f80>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d902      	bls.n	80032c8 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80032c2:	4b3c      	ldr	r3, [pc, #240]	; (80033b4 <menu+0x1f80>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032c8:	f001 fc10 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032cc:	2104      	movs	r1, #4
 80032ce:	4831      	ldr	r0, [pc, #196]	; (8003394 <menu+0x1f60>)
 80032d0:	f006 f864 	bl	800939c <HAL_GPIO_ReadPin>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d115      	bne.n	8003306 <menu+0x1ed2>
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <menu+0x1f64>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	f083 0301 	eor.w	r3, r3, #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <menu+0x1f80>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	4b30      	ldr	r3, [pc, #192]	; (80033b4 <menu+0x1f80>)
 80032f2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <menu+0x1f80>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d902      	bls.n	8003302 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80032fc:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <menu+0x1f80>)
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003302:	f001 fbf3 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003306:	2108      	movs	r1, #8
 8003308:	4822      	ldr	r0, [pc, #136]	; (8003394 <menu+0x1f60>)
 800330a:	f006 f847 	bl	800939c <HAL_GPIO_ReadPin>
 800330e:	4603      	mov	r3, r0
 8003310:	2b01      	cmp	r3, #1
 8003312:	d127      	bne.n	8003364 <menu+0x1f30>
 8003314:	4b20      	ldr	r3, [pc, #128]	; (8003398 <menu+0x1f64>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	f083 0301 	eor.w	r3, r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d020      	beq.n	8003364 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <menu+0x1f80>)
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <menu+0x1f6c>)
 8003328:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800332a:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <menu+0x1f80>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d003      	beq.n	800333a <menu+0x1f06>
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <menu+0x1f80>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d106      	bne.n	8003348 <menu+0x1f14>
				calismaSekli = 0;
 800333a:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <menu+0x1f9c>)
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003340:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <menu+0x1f9c>)
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <menu+0x1f6c>)
 8003346:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <menu+0x1f80>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d106      	bne.n	800335e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <menu+0x1fa0>)
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <menu+0x1fa0>)
 8003358:	781a      	ldrb	r2, [r3, #0]
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <menu+0x1f6c>)
 800335c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <menu+0x1f70>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <menu+0x1f74>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b12      	cmp	r3, #18
 800336a:	f040 80d5 	bne.w	8003518 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <menu+0x1f80>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d13c      	bne.n	80033f0 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <menu+0x1f58>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d12e      	bne.n	80033dc <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800337e:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <menu+0x1fa4>)
 8003380:	2101      	movs	r1, #1
 8003382:	2001      	movs	r0, #1
 8003384:	f004 fce4 	bl	8007d50 <lcd_print>
 8003388:	e048      	b.n	800341c <menu+0x1fe8>
 800338a:	bf00      	nop
 800338c:	2000020d 	.word	0x2000020d
 8003390:	0800d438 	.word	0x0800d438
 8003394:	40010800 	.word	0x40010800
 8003398:	2000021b 	.word	0x2000021b
 800339c:	200001fa 	.word	0x200001fa
 80033a0:	20000118 	.word	0x20000118
 80033a4:	20000218 	.word	0x20000218
 80033a8:	200001ec 	.word	0x200001ec
 80033ac:	0800d7b4 	.word	0x0800d7b4
 80033b0:	0800d7c8 	.word	0x0800d7c8
 80033b4:	200001fb 	.word	0x200001fb
 80033b8:	0800d7dc 	.word	0x0800d7dc
 80033bc:	0800d7ec 	.word	0x0800d7ec
 80033c0:	0800d7fc 	.word	0x0800d7fc
 80033c4:	0800d80c 	.word	0x0800d80c
 80033c8:	0800d3c4 	.word	0x0800d3c4
 80033cc:	0800d3d8 	.word	0x0800d3d8
 80033d0:	200001ed 	.word	0x200001ed
 80033d4:	200001fe 	.word	0x200001fe
 80033d8:	0800d81c 	.word	0x0800d81c
			} else if(dilSecim == 1) {
 80033dc:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <menu+0x2198>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d11b      	bne.n	800341c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80033e4:	4a7a      	ldr	r2, [pc, #488]	; (80035d0 <menu+0x219c>)
 80033e6:	2101      	movs	r1, #1
 80033e8:	2001      	movs	r0, #1
 80033ea:	f004 fcb1 	bl	8007d50 <lcd_print>
 80033ee:	e015      	b.n	800341c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033f0:	4b78      	ldr	r3, [pc, #480]	; (80035d4 <menu+0x21a0>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d111      	bne.n	800341c <menu+0x1fe8>
			if(dilSecim == 0){
 80033f8:	4b74      	ldr	r3, [pc, #464]	; (80035cc <menu+0x2198>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003400:	4a75      	ldr	r2, [pc, #468]	; (80035d8 <menu+0x21a4>)
 8003402:	2101      	movs	r1, #1
 8003404:	2001      	movs	r0, #1
 8003406:	f004 fca3 	bl	8007d50 <lcd_print>
			}
			if(dilSecim == 1){
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <menu+0x2198>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d104      	bne.n	800341c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003412:	4a72      	ldr	r2, [pc, #456]	; (80035dc <menu+0x21a8>)
 8003414:	2101      	movs	r1, #1
 8003416:	2001      	movs	r0, #1
 8003418:	f004 fc9a 	bl	8007d50 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800341c:	4b70      	ldr	r3, [pc, #448]	; (80035e0 <menu+0x21ac>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d113      	bne.n	800344c <menu+0x2018>
			if(dilSecim == 0) {
 8003424:	4b69      	ldr	r3, [pc, #420]	; (80035cc <menu+0x2198>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800342c:	4a6d      	ldr	r2, [pc, #436]	; (80035e4 <menu+0x21b0>)
 800342e:	2101      	movs	r1, #1
 8003430:	2002      	movs	r0, #2
 8003432:	f004 fc8d 	bl	8007d50 <lcd_print>
 8003436:	e020      	b.n	800347a <menu+0x2046>
			} else if(dilSecim == 1){
 8003438:	4b64      	ldr	r3, [pc, #400]	; (80035cc <menu+0x2198>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d11c      	bne.n	800347a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003440:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <menu+0x21b4>)
 8003442:	2101      	movs	r1, #1
 8003444:	2002      	movs	r0, #2
 8003446:	f004 fc83 	bl	8007d50 <lcd_print>
 800344a:	e016      	b.n	800347a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800344c:	4b64      	ldr	r3, [pc, #400]	; (80035e0 <menu+0x21ac>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d112      	bne.n	800347a <menu+0x2046>
			if(dilSecim == 0){
 8003454:	4b5d      	ldr	r3, [pc, #372]	; (80035cc <menu+0x2198>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800345c:	4a63      	ldr	r2, [pc, #396]	; (80035ec <menu+0x21b8>)
 800345e:	2101      	movs	r1, #1
 8003460:	2002      	movs	r0, #2
 8003462:	f004 fc75 	bl	8007d50 <lcd_print>
 8003466:	e008      	b.n	800347a <menu+0x2046>
			} else if(dilSecim == 1){
 8003468:	4b58      	ldr	r3, [pc, #352]	; (80035cc <menu+0x2198>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d104      	bne.n	800347a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003470:	4a5f      	ldr	r2, [pc, #380]	; (80035f0 <menu+0x21bc>)
 8003472:	2101      	movs	r1, #1
 8003474:	2002      	movs	r0, #2
 8003476:	f004 fc6b 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800347a:	2102      	movs	r1, #2
 800347c:	485d      	ldr	r0, [pc, #372]	; (80035f4 <menu+0x21c0>)
 800347e:	f005 ff8d 	bl	800939c <HAL_GPIO_ReadPin>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d115      	bne.n	80034b4 <menu+0x2080>
 8003488:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <menu+0x21c4>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00e      	beq.n	80034b4 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003496:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <menu+0x21ac>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b50      	ldr	r3, [pc, #320]	; (80035e0 <menu+0x21ac>)
 80034a0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <menu+0x21ac>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d902      	bls.n	80034b0 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80034aa:	4b4d      	ldr	r3, [pc, #308]	; (80035e0 <menu+0x21ac>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034b0:	f001 fb1c 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034b4:	2104      	movs	r1, #4
 80034b6:	484f      	ldr	r0, [pc, #316]	; (80035f4 <menu+0x21c0>)
 80034b8:	f005 ff70 	bl	800939c <HAL_GPIO_ReadPin>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d115      	bne.n	80034ee <menu+0x20ba>
 80034c2:	4b4d      	ldr	r3, [pc, #308]	; (80035f8 <menu+0x21c4>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	f083 0301 	eor.w	r3, r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00e      	beq.n	80034ee <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <menu+0x21ac>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <menu+0x21ac>)
 80034da:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80034dc:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <menu+0x21ac>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80034e4:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <menu+0x21ac>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034ea:	f001 faff 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ee:	2108      	movs	r1, #8
 80034f0:	4840      	ldr	r0, [pc, #256]	; (80035f4 <menu+0x21c0>)
 80034f2:	f005 ff53 	bl	800939c <HAL_GPIO_ReadPin>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10d      	bne.n	8003518 <menu+0x20e4>
 80034fc:	4b3e      	ldr	r3, [pc, #248]	; (80035f8 <menu+0x21c4>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	f083 0301 	eor.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800350a:	4b35      	ldr	r3, [pc, #212]	; (80035e0 <menu+0x21ac>)
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <menu+0x21c8>)
 8003510:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <menu+0x21cc>)
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003518:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <menu+0x21d0>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b13      	cmp	r3, #19
 800351e:	f040 80d5 	bne.w	80036cc <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003522:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <menu+0x21a0>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d113      	bne.n	8003552 <menu+0x211e>
			if(dilSecim == 0) {
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <menu+0x2198>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003532:	4a35      	ldr	r2, [pc, #212]	; (8003608 <menu+0x21d4>)
 8003534:	2101      	movs	r1, #1
 8003536:	2001      	movs	r0, #1
 8003538:	f004 fc0a 	bl	8007d50 <lcd_print>
 800353c:	e01f      	b.n	800357e <menu+0x214a>
			} else if(dilSecim == 1) {
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <menu+0x2198>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d11b      	bne.n	800357e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003546:	4a31      	ldr	r2, [pc, #196]	; (800360c <menu+0x21d8>)
 8003548:	2101      	movs	r1, #1
 800354a:	2001      	movs	r0, #1
 800354c:	f004 fc00 	bl	8007d50 <lcd_print>
 8003550:	e015      	b.n	800357e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <menu+0x21a0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d111      	bne.n	800357e <menu+0x214a>
			if(dilSecim == 0) {
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <menu+0x2198>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003562:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <menu+0x21dc>)
 8003564:	2101      	movs	r1, #1
 8003566:	2001      	movs	r0, #1
 8003568:	f004 fbf2 	bl	8007d50 <lcd_print>
			}
			if(dilSecim == 1) {
 800356c:	4b17      	ldr	r3, [pc, #92]	; (80035cc <menu+0x2198>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d104      	bne.n	800357e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <menu+0x21e0>)
 8003576:	2101      	movs	r1, #1
 8003578:	2001      	movs	r0, #1
 800357a:	f004 fbe9 	bl	8007d50 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <menu+0x21e4>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d113      	bne.n	80035ae <menu+0x217a>
			if(dilSecim == 0) {
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <menu+0x2198>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d105      	bne.n	800359a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800358e:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <menu+0x21b0>)
 8003590:	2101      	movs	r1, #1
 8003592:	2002      	movs	r0, #2
 8003594:	f004 fbdc 	bl	8007d50 <lcd_print>
 8003598:	e049      	b.n	800362e <menu+0x21fa>
			} else if(dilSecim == 1) {
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <menu+0x2198>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d145      	bne.n	800362e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <menu+0x21b4>)
 80035a4:	2101      	movs	r1, #1
 80035a6:	2002      	movs	r0, #2
 80035a8:	f004 fbd2 	bl	8007d50 <lcd_print>
 80035ac:	e03f      	b.n	800362e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <menu+0x21e4>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d13b      	bne.n	800362e <menu+0x21fa>
			if(dilSecim == 0) {
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <menu+0x2198>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d12e      	bne.n	800361c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80035be:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <menu+0x21b8>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	2002      	movs	r0, #2
 80035c4:	f004 fbc4 	bl	8007d50 <lcd_print>
 80035c8:	e031      	b.n	800362e <menu+0x21fa>
 80035ca:	bf00      	nop
 80035cc:	2000020d 	.word	0x2000020d
 80035d0:	0800d830 	.word	0x0800d830
 80035d4:	200001fb 	.word	0x200001fb
 80035d8:	0800d840 	.word	0x0800d840
 80035dc:	0800d854 	.word	0x0800d854
 80035e0:	200001fc 	.word	0x200001fc
 80035e4:	0800d3c4 	.word	0x0800d3c4
 80035e8:	0800d3d8 	.word	0x0800d3d8
 80035ec:	0800d424 	.word	0x0800d424
 80035f0:	0800d438 	.word	0x0800d438
 80035f4:	40010800 	.word	0x40010800
 80035f8:	2000021b 	.word	0x2000021b
 80035fc:	20000118 	.word	0x20000118
 8003600:	20000218 	.word	0x20000218
 8003604:	200001ec 	.word	0x200001ec
 8003608:	0800d868 	.word	0x0800d868
 800360c:	0800d87c 	.word	0x0800d87c
 8003610:	0800d890 	.word	0x0800d890
 8003614:	0800d8a4 	.word	0x0800d8a4
 8003618:	200001fd 	.word	0x200001fd
			} else if(dilSecim == 1) {
 800361c:	4b90      	ldr	r3, [pc, #576]	; (8003860 <menu+0x242c>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d104      	bne.n	800362e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003624:	4a8f      	ldr	r2, [pc, #572]	; (8003864 <menu+0x2430>)
 8003626:	2101      	movs	r1, #1
 8003628:	2002      	movs	r0, #2
 800362a:	f004 fb91 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800362e:	2102      	movs	r1, #2
 8003630:	488d      	ldr	r0, [pc, #564]	; (8003868 <menu+0x2434>)
 8003632:	f005 feb3 	bl	800939c <HAL_GPIO_ReadPin>
 8003636:	4603      	mov	r3, r0
 8003638:	2b01      	cmp	r3, #1
 800363a:	d115      	bne.n	8003668 <menu+0x2234>
 800363c:	4b8b      	ldr	r3, [pc, #556]	; (800386c <menu+0x2438>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800364a:	4b89      	ldr	r3, [pc, #548]	; (8003870 <menu+0x243c>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4b87      	ldr	r3, [pc, #540]	; (8003870 <menu+0x243c>)
 8003654:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003656:	4b86      	ldr	r3, [pc, #536]	; (8003870 <menu+0x243c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d902      	bls.n	8003664 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800365e:	4b84      	ldr	r3, [pc, #528]	; (8003870 <menu+0x243c>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003664:	f001 fa42 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003668:	2104      	movs	r1, #4
 800366a:	487f      	ldr	r0, [pc, #508]	; (8003868 <menu+0x2434>)
 800366c:	f005 fe96 	bl	800939c <HAL_GPIO_ReadPin>
 8003670:	4603      	mov	r3, r0
 8003672:	2b01      	cmp	r3, #1
 8003674:	d115      	bne.n	80036a2 <menu+0x226e>
 8003676:	4b7d      	ldr	r3, [pc, #500]	; (800386c <menu+0x2438>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	f083 0301 	eor.w	r3, r3, #1
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003684:	4b7a      	ldr	r3, [pc, #488]	; (8003870 <menu+0x243c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	b2da      	uxtb	r2, r3
 800368c:	4b78      	ldr	r3, [pc, #480]	; (8003870 <menu+0x243c>)
 800368e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003690:	4b77      	ldr	r3, [pc, #476]	; (8003870 <menu+0x243c>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003698:	4b75      	ldr	r3, [pc, #468]	; (8003870 <menu+0x243c>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800369e:	f001 fa25 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036a2:	2108      	movs	r1, #8
 80036a4:	4870      	ldr	r0, [pc, #448]	; (8003868 <menu+0x2434>)
 80036a6:	f005 fe79 	bl	800939c <HAL_GPIO_ReadPin>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10d      	bne.n	80036cc <menu+0x2298>
 80036b0:	4b6e      	ldr	r3, [pc, #440]	; (800386c <menu+0x2438>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f083 0301 	eor.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d006      	beq.n	80036cc <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80036be:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <menu+0x243c>)
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	4b6c      	ldr	r3, [pc, #432]	; (8003874 <menu+0x2440>)
 80036c4:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80036c6:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <menu+0x2444>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80036cc:	4b6b      	ldr	r3, [pc, #428]	; (800387c <menu+0x2448>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b14      	cmp	r3, #20
 80036d2:	f040 80b5 	bne.w	8003840 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80036d6:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <menu+0x244c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d113      	bne.n	8003706 <menu+0x22d2>
			if(dilSecim == 0) {
 80036de:	4b60      	ldr	r3, [pc, #384]	; (8003860 <menu+0x242c>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80036e6:	4a67      	ldr	r2, [pc, #412]	; (8003884 <menu+0x2450>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	2001      	movs	r0, #1
 80036ec:	f004 fb30 	bl	8007d50 <lcd_print>
 80036f0:	e020      	b.n	8003734 <menu+0x2300>
			} else if(dilSecim == 1) {
 80036f2:	4b5b      	ldr	r3, [pc, #364]	; (8003860 <menu+0x242c>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d11c      	bne.n	8003734 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80036fa:	4a63      	ldr	r2, [pc, #396]	; (8003888 <menu+0x2454>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	2001      	movs	r0, #1
 8003700:	f004 fb26 	bl	8007d50 <lcd_print>
 8003704:	e016      	b.n	8003734 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003706:	4b5e      	ldr	r3, [pc, #376]	; (8003880 <menu+0x244c>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d112      	bne.n	8003734 <menu+0x2300>
			if(dilSecim == 0) {
 800370e:	4b54      	ldr	r3, [pc, #336]	; (8003860 <menu+0x242c>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003716:	4a5d      	ldr	r2, [pc, #372]	; (800388c <menu+0x2458>)
 8003718:	2101      	movs	r1, #1
 800371a:	2001      	movs	r0, #1
 800371c:	f004 fb18 	bl	8007d50 <lcd_print>
 8003720:	e008      	b.n	8003734 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003722:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <menu+0x242c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d104      	bne.n	8003734 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800372a:	4a59      	ldr	r2, [pc, #356]	; (8003890 <menu+0x245c>)
 800372c:	2101      	movs	r1, #1
 800372e:	2001      	movs	r0, #1
 8003730:	f004 fb0e 	bl	8007d50 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003734:	4b57      	ldr	r3, [pc, #348]	; (8003894 <menu+0x2460>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <menu+0x2330>
			if(dilSecim == 0) {
 800373c:	4b48      	ldr	r3, [pc, #288]	; (8003860 <menu+0x242c>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003744:	4a54      	ldr	r2, [pc, #336]	; (8003898 <menu+0x2464>)
 8003746:	2101      	movs	r1, #1
 8003748:	2002      	movs	r0, #2
 800374a:	f004 fb01 	bl	8007d50 <lcd_print>
 800374e:	e020      	b.n	8003792 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003750:	4b43      	ldr	r3, [pc, #268]	; (8003860 <menu+0x242c>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d11c      	bne.n	8003792 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003758:	4a50      	ldr	r2, [pc, #320]	; (800389c <menu+0x2468>)
 800375a:	2101      	movs	r1, #1
 800375c:	2002      	movs	r0, #2
 800375e:	f004 faf7 	bl	8007d50 <lcd_print>
 8003762:	e016      	b.n	8003792 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <menu+0x2460>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d112      	bne.n	8003792 <menu+0x235e>
			if(dilSecim == 0) {
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <menu+0x242c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003774:	4a4a      	ldr	r2, [pc, #296]	; (80038a0 <menu+0x246c>)
 8003776:	2101      	movs	r1, #1
 8003778:	2002      	movs	r0, #2
 800377a:	f004 fae9 	bl	8007d50 <lcd_print>
 800377e:	e008      	b.n	8003792 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003780:	4b37      	ldr	r3, [pc, #220]	; (8003860 <menu+0x242c>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d104      	bne.n	8003792 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003788:	4a46      	ldr	r2, [pc, #280]	; (80038a4 <menu+0x2470>)
 800378a:	2101      	movs	r1, #1
 800378c:	2002      	movs	r0, #2
 800378e:	f004 fadf 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003792:	2102      	movs	r1, #2
 8003794:	4834      	ldr	r0, [pc, #208]	; (8003868 <menu+0x2434>)
 8003796:	f005 fe01 	bl	800939c <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d119      	bne.n	80037d4 <menu+0x23a0>
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <menu+0x2438>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d012      	beq.n	80037d4 <menu+0x23a0>
 80037ae:	4b34      	ldr	r3, [pc, #208]	; (8003880 <menu+0x244c>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d10e      	bne.n	80037d4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80037b6:	4b37      	ldr	r3, [pc, #220]	; (8003894 <menu+0x2460>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b35      	ldr	r3, [pc, #212]	; (8003894 <menu+0x2460>)
 80037c0:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80037c2:	4b34      	ldr	r3, [pc, #208]	; (8003894 <menu+0x2460>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d902      	bls.n	80037d0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80037ca:	4b32      	ldr	r3, [pc, #200]	; (8003894 <menu+0x2460>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037d0:	f001 f98c 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037d4:	2104      	movs	r1, #4
 80037d6:	4824      	ldr	r0, [pc, #144]	; (8003868 <menu+0x2434>)
 80037d8:	f005 fde0 	bl	800939c <HAL_GPIO_ReadPin>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d119      	bne.n	8003816 <menu+0x23e2>
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <menu+0x2438>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	f083 0301 	eor.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d012      	beq.n	8003816 <menu+0x23e2>
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <menu+0x244c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d10e      	bne.n	8003816 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <menu+0x2460>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <menu+0x2460>)
 8003802:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003804:	4b23      	ldr	r3, [pc, #140]	; (8003894 <menu+0x2460>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <menu+0x2460>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003812:	f001 f96b 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003816:	2108      	movs	r1, #8
 8003818:	4813      	ldr	r0, [pc, #76]	; (8003868 <menu+0x2434>)
 800381a:	f005 fdbf 	bl	800939c <HAL_GPIO_ReadPin>
 800381e:	4603      	mov	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10d      	bne.n	8003840 <menu+0x240c>
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <menu+0x2438>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	f083 0301 	eor.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d006      	beq.n	8003840 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003832:	4b18      	ldr	r3, [pc, #96]	; (8003894 <menu+0x2460>)
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <menu+0x2440>)
 8003838:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <menu+0x2444>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <menu+0x2448>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b15      	cmp	r3, #21
 8003846:	f040 80c2 	bne.w	80039ce <menu+0x259a>
		if(dilSecim == 0) {
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <menu+0x242c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d12c      	bne.n	80038ac <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <menu+0x2474>)
 8003854:	2101      	movs	r1, #1
 8003856:	2001      	movs	r0, #1
 8003858:	f004 fa7a 	bl	8007d50 <lcd_print>
 800385c:	e02f      	b.n	80038be <menu+0x248a>
 800385e:	bf00      	nop
 8003860:	2000020d 	.word	0x2000020d
 8003864:	0800d438 	.word	0x0800d438
 8003868:	40010800 	.word	0x40010800
 800386c:	2000021b 	.word	0x2000021b
 8003870:	200001fd 	.word	0x200001fd
 8003874:	20000118 	.word	0x20000118
 8003878:	20000218 	.word	0x20000218
 800387c:	200001ec 	.word	0x200001ec
 8003880:	200001fb 	.word	0x200001fb
 8003884:	0800d8b8 	.word	0x0800d8b8
 8003888:	0800d8cc 	.word	0x0800d8cc
 800388c:	0800d8e0 	.word	0x0800d8e0
 8003890:	0800d8f4 	.word	0x0800d8f4
 8003894:	200001fe 	.word	0x200001fe
 8003898:	0800d908 	.word	0x0800d908
 800389c:	0800d91c 	.word	0x0800d91c
 80038a0:	0800d92c 	.word	0x0800d92c
 80038a4:	0800d940 	.word	0x0800d940
 80038a8:	0800d950 	.word	0x0800d950
		} else if(dilSecim == 1) {
 80038ac:	4b9c      	ldr	r3, [pc, #624]	; (8003b20 <menu+0x26ec>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d104      	bne.n	80038be <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80038b4:	4a9b      	ldr	r2, [pc, #620]	; (8003b24 <menu+0x26f0>)
 80038b6:	2101      	movs	r1, #1
 80038b8:	2001      	movs	r0, #1
 80038ba:	f004 fa49 	bl	8007d50 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80038be:	4b9a      	ldr	r3, [pc, #616]	; (8003b28 <menu+0x26f4>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d112      	bne.n	80038ec <menu+0x24b8>
			if(dilSecim == 0) {
 80038c6:	4b96      	ldr	r3, [pc, #600]	; (8003b20 <menu+0x26ec>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80038ce:	4a97      	ldr	r2, [pc, #604]	; (8003b2c <menu+0x26f8>)
 80038d0:	2101      	movs	r1, #1
 80038d2:	2002      	movs	r0, #2
 80038d4:	f004 fa3c 	bl	8007d50 <lcd_print>
			}
			if(dilSecim == 1) {
 80038d8:	4b91      	ldr	r3, [pc, #580]	; (8003b20 <menu+0x26ec>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d11c      	bne.n	800391a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80038e0:	4a93      	ldr	r2, [pc, #588]	; (8003b30 <menu+0x26fc>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	2002      	movs	r0, #2
 80038e6:	f004 fa33 	bl	8007d50 <lcd_print>
 80038ea:	e016      	b.n	800391a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80038ec:	4b8e      	ldr	r3, [pc, #568]	; (8003b28 <menu+0x26f4>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d112      	bne.n	800391a <menu+0x24e6>
			if(dilSecim == 0) {
 80038f4:	4b8a      	ldr	r3, [pc, #552]	; (8003b20 <menu+0x26ec>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80038fc:	4a8d      	ldr	r2, [pc, #564]	; (8003b34 <menu+0x2700>)
 80038fe:	2101      	movs	r1, #1
 8003900:	2002      	movs	r0, #2
 8003902:	f004 fa25 	bl	8007d50 <lcd_print>
 8003906:	e008      	b.n	800391a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003908:	4b85      	ldr	r3, [pc, #532]	; (8003b20 <menu+0x26ec>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d104      	bne.n	800391a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003910:	4a89      	ldr	r2, [pc, #548]	; (8003b38 <menu+0x2704>)
 8003912:	2101      	movs	r1, #1
 8003914:	2002      	movs	r0, #2
 8003916:	f004 fa1b 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800391a:	2102      	movs	r1, #2
 800391c:	4887      	ldr	r0, [pc, #540]	; (8003b3c <menu+0x2708>)
 800391e:	f005 fd3d 	bl	800939c <HAL_GPIO_ReadPin>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d115      	bne.n	8003954 <menu+0x2520>
 8003928:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <menu+0x270c>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	f083 0301 	eor.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00e      	beq.n	8003954 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003936:	4b7c      	ldr	r3, [pc, #496]	; (8003b28 <menu+0x26f4>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b7a      	ldr	r3, [pc, #488]	; (8003b28 <menu+0x26f4>)
 8003940:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003942:	4b79      	ldr	r3, [pc, #484]	; (8003b28 <menu+0x26f4>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d902      	bls.n	8003950 <menu+0x251c>
				platformSilindirTipi = 0;
 800394a:	4b77      	ldr	r3, [pc, #476]	; (8003b28 <menu+0x26f4>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003950:	f001 f8cc 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003954:	2104      	movs	r1, #4
 8003956:	4879      	ldr	r0, [pc, #484]	; (8003b3c <menu+0x2708>)
 8003958:	f005 fd20 	bl	800939c <HAL_GPIO_ReadPin>
 800395c:	4603      	mov	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d115      	bne.n	800398e <menu+0x255a>
 8003962:	4b77      	ldr	r3, [pc, #476]	; (8003b40 <menu+0x270c>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	f083 0301 	eor.w	r3, r3, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00e      	beq.n	800398e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003970:	4b6d      	ldr	r3, [pc, #436]	; (8003b28 <menu+0x26f4>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	3b01      	subs	r3, #1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <menu+0x26f4>)
 800397a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <menu+0x26f4>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <menu+0x26f4>)
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800398a:	f001 f8af 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800398e:	2108      	movs	r1, #8
 8003990:	486a      	ldr	r0, [pc, #424]	; (8003b3c <menu+0x2708>)
 8003992:	f005 fd03 	bl	800939c <HAL_GPIO_ReadPin>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d118      	bne.n	80039ce <menu+0x259a>
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <menu+0x270c>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	f083 0301 	eor.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d011      	beq.n	80039ce <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80039aa:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <menu+0x26f4>)
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <menu+0x2710>)
 80039b0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80039b2:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <menu+0x26f4>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d106      	bne.n	80039c8 <menu+0x2594>
				altLimit = 1;
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <menu+0x2714>)
 80039bc:	2201      	movs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <menu+0x2714>)
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	4b5f      	ldr	r3, [pc, #380]	; (8003b44 <menu+0x2710>)
 80039c6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80039c8:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <menu+0x2718>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80039ce:	4b60      	ldr	r3, [pc, #384]	; (8003b50 <menu+0x271c>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b16      	cmp	r3, #22
 80039d4:	f040 8081 	bne.w	8003ada <menu+0x26a6>
		if(dilSecim == 0) {
 80039d8:	4b51      	ldr	r3, [pc, #324]	; (8003b20 <menu+0x26ec>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80039e0:	4a5c      	ldr	r2, [pc, #368]	; (8003b54 <menu+0x2720>)
 80039e2:	2101      	movs	r1, #1
 80039e4:	2001      	movs	r0, #1
 80039e6:	f004 f9b3 	bl	8007d50 <lcd_print>
 80039ea:	e008      	b.n	80039fe <menu+0x25ca>
		} else if(dilSecim == 1) {
 80039ec:	4b4c      	ldr	r3, [pc, #304]	; (8003b20 <menu+0x26ec>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d104      	bne.n	80039fe <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80039f4:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <menu+0x2724>)
 80039f6:	2101      	movs	r1, #1
 80039f8:	2001      	movs	r0, #1
 80039fa:	f004 f9a9 	bl	8007d50 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80039fe:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <menu+0x26ec>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d105      	bne.n	8003a12 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a06:	4a55      	ldr	r2, [pc, #340]	; (8003b5c <menu+0x2728>)
 8003a08:	2101      	movs	r1, #1
 8003a0a:	2002      	movs	r0, #2
 8003a0c:	f004 f9a0 	bl	8007d50 <lcd_print>
 8003a10:	e008      	b.n	8003a24 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003a12:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <menu+0x26ec>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d104      	bne.n	8003a24 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003a1a:	4a51      	ldr	r2, [pc, #324]	; (8003b60 <menu+0x272c>)
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	2002      	movs	r0, #2
 8003a20:	f004 f996 	bl	8007d50 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003a24:	4b4f      	ldr	r3, [pc, #316]	; (8003b64 <menu+0x2730>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	220a      	movs	r2, #10
 8003a2a:	494f      	ldr	r1, [pc, #316]	; (8003b68 <menu+0x2734>)
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f008 fce1 	bl	800c3f4 <itoa>
		lcd_print(2,16,snum);
 8003a32:	4a4d      	ldr	r2, [pc, #308]	; (8003b68 <menu+0x2734>)
 8003a34:	2110      	movs	r1, #16
 8003a36:	2002      	movs	r0, #2
 8003a38:	f004 f98a 	bl	8007d50 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	483f      	ldr	r0, [pc, #252]	; (8003b3c <menu+0x2708>)
 8003a40:	f005 fcac 	bl	800939c <HAL_GPIO_ReadPin>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d115      	bne.n	8003a76 <menu+0x2642>
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <menu+0x270c>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	f083 0301 	eor.w	r3, r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003a58:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <menu+0x2730>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <menu+0x2730>)
 8003a62:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003a64:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <menu+0x2730>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d902      	bls.n	8003a72 <menu+0x263e>
				yukariValfTmr = 0;
 8003a6c:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <menu+0x2730>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a72:	f001 f83b 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a76:	2104      	movs	r1, #4
 8003a78:	4830      	ldr	r0, [pc, #192]	; (8003b3c <menu+0x2708>)
 8003a7a:	f005 fc8f 	bl	800939c <HAL_GPIO_ReadPin>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d115      	bne.n	8003ab0 <menu+0x267c>
 8003a84:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <menu+0x270c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	f083 0301 	eor.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003a92:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <menu+0x2730>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <menu+0x2730>)
 8003a9c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <menu+0x2730>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d902      	bls.n	8003aac <menu+0x2678>
		   		yukariValfTmr = 5;
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <menu+0x2730>)
 8003aa8:	2205      	movs	r2, #5
 8003aaa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003aac:	f001 f81e 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab0:	2108      	movs	r1, #8
 8003ab2:	4822      	ldr	r0, [pc, #136]	; (8003b3c <menu+0x2708>)
 8003ab4:	f005 fc72 	bl	800939c <HAL_GPIO_ReadPin>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10d      	bne.n	8003ada <menu+0x26a6>
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <menu+0x270c>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	f083 0301 	eor.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <menu+0x2730>)
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <menu+0x2710>)
 8003ad2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <menu+0x2718>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <menu+0x271c>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b17      	cmp	r3, #23
 8003ae0:	f040 80ac 	bne.w	8003c3c <menu+0x2808>
		if(dilSecim == 0) {
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <menu+0x26ec>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <menu+0x2738>)
 8003aee:	2101      	movs	r1, #1
 8003af0:	2001      	movs	r0, #1
 8003af2:	f004 f92d 	bl	8007d50 <lcd_print>
 8003af6:	e008      	b.n	8003b0a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <menu+0x26ec>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d104      	bne.n	8003b0a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <menu+0x273c>)
 8003b02:	2101      	movs	r1, #1
 8003b04:	2001      	movs	r0, #1
 8003b06:	f004 f923 	bl	8007d50 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <menu+0x26ec>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d130      	bne.n	8003b74 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <menu+0x2728>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	2002      	movs	r0, #2
 8003b18:	f004 f91a 	bl	8007d50 <lcd_print>
 8003b1c:	e033      	b.n	8003b86 <menu+0x2752>
 8003b1e:	bf00      	nop
 8003b20:	2000020d 	.word	0x2000020d
 8003b24:	0800d964 	.word	0x0800d964
 8003b28:	200001ff 	.word	0x200001ff
 8003b2c:	0800d908 	.word	0x0800d908
 8003b30:	0800d91c 	.word	0x0800d91c
 8003b34:	0800d92c 	.word	0x0800d92c
 8003b38:	0800d940 	.word	0x0800d940
 8003b3c:	40010800 	.word	0x40010800
 8003b40:	2000021b 	.word	0x2000021b
 8003b44:	20000118 	.word	0x20000118
 8003b48:	200001f2 	.word	0x200001f2
 8003b4c:	20000218 	.word	0x20000218
 8003b50:	200001ec 	.word	0x200001ec
 8003b54:	0800d974 	.word	0x0800d974
 8003b58:	0800d988 	.word	0x0800d988
 8003b5c:	0800d628 	.word	0x0800d628
 8003b60:	0800d99c 	.word	0x0800d99c
 8003b64:	20000200 	.word	0x20000200
 8003b68:	20000188 	.word	0x20000188
 8003b6c:	0800d9ac 	.word	0x0800d9ac
 8003b70:	0800d9c0 	.word	0x0800d9c0
			} else if(dilSecim == 1) {
 8003b74:	4b98      	ldr	r3, [pc, #608]	; (8003dd8 <menu+0x29a4>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d104      	bne.n	8003b86 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003b7c:	4a97      	ldr	r2, [pc, #604]	; (8003ddc <menu+0x29a8>)
 8003b7e:	2101      	movs	r1, #1
 8003b80:	2002      	movs	r0, #2
 8003b82:	f004 f8e5 	bl	8007d50 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003b86:	4b96      	ldr	r3, [pc, #600]	; (8003de0 <menu+0x29ac>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	220a      	movs	r2, #10
 8003b8c:	4995      	ldr	r1, [pc, #596]	; (8003de4 <menu+0x29b0>)
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f008 fc30 	bl	800c3f4 <itoa>
		lcd_print(2,16,snum);
 8003b94:	4a93      	ldr	r2, [pc, #588]	; (8003de4 <menu+0x29b0>)
 8003b96:	2110      	movs	r1, #16
 8003b98:	2002      	movs	r0, #2
 8003b9a:	f004 f8d9 	bl	8007d50 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4891      	ldr	r0, [pc, #580]	; (8003de8 <menu+0x29b4>)
 8003ba2:	f005 fbfb 	bl	800939c <HAL_GPIO_ReadPin>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d115      	bne.n	8003bd8 <menu+0x27a4>
 8003bac:	4b8f      	ldr	r3, [pc, #572]	; (8003dec <menu+0x29b8>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	f083 0301 	eor.w	r3, r3, #1
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00e      	beq.n	8003bd8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003bba:	4b89      	ldr	r3, [pc, #548]	; (8003de0 <menu+0x29ac>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b87      	ldr	r3, [pc, #540]	; (8003de0 <menu+0x29ac>)
 8003bc4:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003bc6:	4b86      	ldr	r3, [pc, #536]	; (8003de0 <menu+0x29ac>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d902      	bls.n	8003bd4 <menu+0x27a0>
				asagiValfTmr = 0;
 8003bce:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <menu+0x29ac>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bd4:	f000 ff8a 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd8:	2104      	movs	r1, #4
 8003bda:	4883      	ldr	r0, [pc, #524]	; (8003de8 <menu+0x29b4>)
 8003bdc:	f005 fbde 	bl	800939c <HAL_GPIO_ReadPin>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d115      	bne.n	8003c12 <menu+0x27de>
 8003be6:	4b81      	ldr	r3, [pc, #516]	; (8003dec <menu+0x29b8>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f083 0301 	eor.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003bf4:	4b7a      	ldr	r3, [pc, #488]	; (8003de0 <menu+0x29ac>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	4b78      	ldr	r3, [pc, #480]	; (8003de0 <menu+0x29ac>)
 8003bfe:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c00:	4b77      	ldr	r3, [pc, #476]	; (8003de0 <menu+0x29ac>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d902      	bls.n	8003c0e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003c08:	4b75      	ldr	r3, [pc, #468]	; (8003de0 <menu+0x29ac>)
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c0e:	f000 ff6d 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c12:	2108      	movs	r1, #8
 8003c14:	4874      	ldr	r0, [pc, #464]	; (8003de8 <menu+0x29b4>)
 8003c16:	f005 fbc1 	bl	800939c <HAL_GPIO_ReadPin>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10d      	bne.n	8003c3c <menu+0x2808>
 8003c20:	4b72      	ldr	r3, [pc, #456]	; (8003dec <menu+0x29b8>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f083 0301 	eor.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <menu+0x29ac>)
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <menu+0x29bc>)
 8003c34:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003c36:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <menu+0x29c0>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003c3c:	4b6e      	ldr	r3, [pc, #440]	; (8003df8 <menu+0x29c4>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b18      	cmp	r3, #24
 8003c42:	f040 809d 	bne.w	8003d80 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003c46:	4b6d      	ldr	r3, [pc, #436]	; (8003dfc <menu+0x29c8>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d113      	bne.n	8003c76 <menu+0x2842>
			if(dilSecim == 0) {
 8003c4e:	4b62      	ldr	r3, [pc, #392]	; (8003dd8 <menu+0x29a4>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003c56:	4a6a      	ldr	r2, [pc, #424]	; (8003e00 <menu+0x29cc>)
 8003c58:	2101      	movs	r1, #1
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f004 f878 	bl	8007d50 <lcd_print>
 8003c60:	e020      	b.n	8003ca4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c62:	4b5d      	ldr	r3, [pc, #372]	; (8003dd8 <menu+0x29a4>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d11c      	bne.n	8003ca4 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003c6a:	4a66      	ldr	r2, [pc, #408]	; (8003e04 <menu+0x29d0>)
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f004 f86e 	bl	8007d50 <lcd_print>
 8003c74:	e016      	b.n	8003ca4 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c76:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <menu+0x29c8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d112      	bne.n	8003ca4 <menu+0x2870>
			if(dilSecim == 0) {
 8003c7e:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <menu+0x29a4>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003c86:	4a60      	ldr	r2, [pc, #384]	; (8003e08 <menu+0x29d4>)
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	f004 f860 	bl	8007d50 <lcd_print>
 8003c90:	e008      	b.n	8003ca4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c92:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <menu+0x29a4>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d104      	bne.n	8003ca4 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003c9a:	4a5c      	ldr	r2, [pc, #368]	; (8003e0c <menu+0x29d8>)
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f004 f856 	bl	8007d50 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <menu+0x29a4>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cac:	4a58      	ldr	r2, [pc, #352]	; (8003e10 <menu+0x29dc>)
 8003cae:	2101      	movs	r1, #1
 8003cb0:	2002      	movs	r0, #2
 8003cb2:	f004 f84d 	bl	8007d50 <lcd_print>
 8003cb6:	e008      	b.n	8003cca <menu+0x2896>
			} else if(dilSecim == 1) {
 8003cb8:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <menu+0x29a4>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d104      	bne.n	8003cca <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003cc0:	4a46      	ldr	r2, [pc, #280]	; (8003ddc <menu+0x29a8>)
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	f004 f843 	bl	8007d50 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003cca:	4b52      	ldr	r3, [pc, #328]	; (8003e14 <menu+0x29e0>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	220a      	movs	r2, #10
 8003cd0:	4944      	ldr	r1, [pc, #272]	; (8003de4 <menu+0x29b0>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f008 fb8e 	bl	800c3f4 <itoa>
		lcd_print(2, 16, snum);
 8003cd8:	4a42      	ldr	r2, [pc, #264]	; (8003de4 <menu+0x29b0>)
 8003cda:	2110      	movs	r1, #16
 8003cdc:	2002      	movs	r0, #2
 8003cde:	f004 f837 	bl	8007d50 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	4840      	ldr	r0, [pc, #256]	; (8003de8 <menu+0x29b4>)
 8003ce6:	f005 fb59 	bl	800939c <HAL_GPIO_ReadPin>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d115      	bne.n	8003d1c <menu+0x28e8>
 8003cf0:	4b3e      	ldr	r3, [pc, #248]	; (8003dec <menu+0x29b8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	f083 0301 	eor.w	r3, r3, #1
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00e      	beq.n	8003d1c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003cfe:	4b45      	ldr	r3, [pc, #276]	; (8003e14 <menu+0x29e0>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <menu+0x29e0>)
 8003d08:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d0a:	4b42      	ldr	r3, [pc, #264]	; (8003e14 <menu+0x29e0>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d902      	bls.n	8003d18 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003d12:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <menu+0x29e0>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d18:	f000 fee8 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d1c:	2104      	movs	r1, #4
 8003d1e:	4832      	ldr	r0, [pc, #200]	; (8003de8 <menu+0x29b4>)
 8003d20:	f005 fb3c 	bl	800939c <HAL_GPIO_ReadPin>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d115      	bne.n	8003d56 <menu+0x2922>
 8003d2a:	4b30      	ldr	r3, [pc, #192]	; (8003dec <menu+0x29b8>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	f083 0301 	eor.w	r3, r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00e      	beq.n	8003d56 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003d38:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <menu+0x29e0>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <menu+0x29e0>)
 8003d42:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003d44:	4b33      	ldr	r3, [pc, #204]	; (8003e14 <menu+0x29e0>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d902      	bls.n	8003d52 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003d4c:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <menu+0x29e0>)
 8003d4e:	2205      	movs	r2, #5
 8003d50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d52:	f000 fecb 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d56:	2108      	movs	r1, #8
 8003d58:	4823      	ldr	r0, [pc, #140]	; (8003de8 <menu+0x29b4>)
 8003d5a:	f005 fb1f 	bl	800939c <HAL_GPIO_ReadPin>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10d      	bne.n	8003d80 <menu+0x294c>
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <menu+0x29b8>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	f083 0301 	eor.w	r3, r3, #1
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <menu+0x29e0>)
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <menu+0x29bc>)
 8003d78:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <menu+0x29c0>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <menu+0x29c4>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b19      	cmp	r3, #25
 8003d86:	f040 80c4 	bne.w	8003f12 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <menu+0x29c8>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d113      	bne.n	8003dba <menu+0x2986>
			if(dilSecim == 0) {
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <menu+0x29a4>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <menu+0x29e4>)
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f003 ffd6 	bl	8007d50 <lcd_print>
 8003da4:	e047      	b.n	8003e36 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <menu+0x29a4>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d143      	bne.n	8003e36 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <menu+0x29e8>)
 8003db0:	2101      	movs	r1, #1
 8003db2:	2001      	movs	r0, #1
 8003db4:	f003 ffcc 	bl	8007d50 <lcd_print>
 8003db8:	e03d      	b.n	8003e36 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <menu+0x29c8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d139      	bne.n	8003e36 <menu+0x2a02>
			if(dilSecim == 0) {
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <menu+0x29a4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d12c      	bne.n	8003e24 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <menu+0x29ec>)
 8003dcc:	2101      	movs	r1, #1
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f003 ffbe 	bl	8007d50 <lcd_print>
 8003dd4:	e02f      	b.n	8003e36 <menu+0x2a02>
 8003dd6:	bf00      	nop
 8003dd8:	2000020d 	.word	0x2000020d
 8003ddc:	0800d99c 	.word	0x0800d99c
 8003de0:	20000201 	.word	0x20000201
 8003de4:	20000188 	.word	0x20000188
 8003de8:	40010800 	.word	0x40010800
 8003dec:	2000021b 	.word	0x2000021b
 8003df0:	20000118 	.word	0x20000118
 8003df4:	20000218 	.word	0x20000218
 8003df8:	200001ec 	.word	0x200001ec
 8003dfc:	200001fb 	.word	0x200001fb
 8003e00:	0800d9d4 	.word	0x0800d9d4
 8003e04:	0800d9e8 	.word	0x0800d9e8
 8003e08:	0800d9fc 	.word	0x0800d9fc
 8003e0c:	0800da10 	.word	0x0800da10
 8003e10:	0800d628 	.word	0x0800d628
 8003e14:	20000202 	.word	0x20000202
 8003e18:	0800da24 	.word	0x0800da24
 8003e1c:	0800da38 	.word	0x0800da38
 8003e20:	0800da4c 	.word	0x0800da4c
			} else if(dilSecim == 1) {
 8003e24:	4b73      	ldr	r3, [pc, #460]	; (8003ff4 <menu+0x2bc0>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d104      	bne.n	8003e36 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003e2c:	4a72      	ldr	r2, [pc, #456]	; (8003ff8 <menu+0x2bc4>)
 8003e2e:	2101      	movs	r1, #1
 8003e30:	2001      	movs	r0, #1
 8003e32:	f003 ff8d 	bl	8007d50 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003e36:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <menu+0x2bc0>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e3e:	4a6f      	ldr	r2, [pc, #444]	; (8003ffc <menu+0x2bc8>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	2002      	movs	r0, #2
 8003e44:	f003 ff84 	bl	8007d50 <lcd_print>
 8003e48:	e008      	b.n	8003e5c <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003e4a:	4b6a      	ldr	r3, [pc, #424]	; (8003ff4 <menu+0x2bc0>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d104      	bne.n	8003e5c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003e52:	4a6b      	ldr	r2, [pc, #428]	; (8004000 <menu+0x2bcc>)
 8003e54:	2101      	movs	r1, #1
 8003e56:	2002      	movs	r0, #2
 8003e58:	f003 ff7a 	bl	8007d50 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003e5c:	4b69      	ldr	r3, [pc, #420]	; (8004004 <menu+0x2bd0>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	220a      	movs	r2, #10
 8003e62:	4969      	ldr	r1, [pc, #420]	; (8004008 <menu+0x2bd4>)
 8003e64:	4618      	mov	r0, r3
 8003e66:	f008 fac5 	bl	800c3f4 <itoa>
		lcd_print(2,16,snum);
 8003e6a:	4a67      	ldr	r2, [pc, #412]	; (8004008 <menu+0x2bd4>)
 8003e6c:	2110      	movs	r1, #16
 8003e6e:	2002      	movs	r0, #2
 8003e70:	f003 ff6e 	bl	8007d50 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e74:	2102      	movs	r1, #2
 8003e76:	4865      	ldr	r0, [pc, #404]	; (800400c <menu+0x2bd8>)
 8003e78:	f005 fa90 	bl	800939c <HAL_GPIO_ReadPin>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d115      	bne.n	8003eae <menu+0x2a7a>
 8003e82:	4b63      	ldr	r3, [pc, #396]	; (8004010 <menu+0x2bdc>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	f083 0301 	eor.w	r3, r3, #1
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00e      	beq.n	8003eae <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003e90:	4b5c      	ldr	r3, [pc, #368]	; (8004004 <menu+0x2bd0>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <menu+0x2bd0>)
 8003e9a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003e9c:	4b59      	ldr	r3, [pc, #356]	; (8004004 <menu+0x2bd0>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	d902      	bls.n	8003eaa <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003ea4:	4b57      	ldr	r3, [pc, #348]	; (8004004 <menu+0x2bd0>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003eaa:	f000 fe1f 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eae:	2104      	movs	r1, #4
 8003eb0:	4856      	ldr	r0, [pc, #344]	; (800400c <menu+0x2bd8>)
 8003eb2:	f005 fa73 	bl	800939c <HAL_GPIO_ReadPin>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d115      	bne.n	8003ee8 <menu+0x2ab4>
 8003ebc:	4b54      	ldr	r3, [pc, #336]	; (8004010 <menu+0x2bdc>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	f083 0301 	eor.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003eca:	4b4e      	ldr	r3, [pc, #312]	; (8004004 <menu+0x2bd0>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4b4c      	ldr	r3, [pc, #304]	; (8004004 <menu+0x2bd0>)
 8003ed4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <menu+0x2bd0>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d902      	bls.n	8003ee4 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003ede:	4b49      	ldr	r3, [pc, #292]	; (8004004 <menu+0x2bd0>)
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ee4:	f000 fe02 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ee8:	2108      	movs	r1, #8
 8003eea:	4848      	ldr	r0, [pc, #288]	; (800400c <menu+0x2bd8>)
 8003eec:	f005 fa56 	bl	800939c <HAL_GPIO_ReadPin>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10d      	bne.n	8003f12 <menu+0x2ade>
 8003ef6:	4b46      	ldr	r3, [pc, #280]	; (8004010 <menu+0x2bdc>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d006      	beq.n	8003f12 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f04:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <menu+0x2bd0>)
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <menu+0x2be0>)
 8003f0a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <menu+0x2be4>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f12:	4b42      	ldr	r3, [pc, #264]	; (800401c <menu+0x2be8>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b1a      	cmp	r3, #26
 8003f18:	f040 80ec 	bne.w	80040f4 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003f1c:	4b35      	ldr	r3, [pc, #212]	; (8003ff4 <menu+0x2bc0>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003f24:	4a3e      	ldr	r2, [pc, #248]	; (8004020 <menu+0x2bec>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f003 ff11 	bl	8007d50 <lcd_print>
 8003f2e:	e008      	b.n	8003f42 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003f30:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <menu+0x2bc0>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d104      	bne.n	8003f42 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003f38:	4a3a      	ldr	r2, [pc, #232]	; (8004024 <menu+0x2bf0>)
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	f003 ff07 	bl	8007d50 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003f42:	4b39      	ldr	r3, [pc, #228]	; (8004028 <menu+0x2bf4>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b63      	cmp	r3, #99	; 0x63
 8003f48:	d91e      	bls.n	8003f88 <menu+0x2b54>
			if(dilSecim == 0) {
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <menu+0x2bc0>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f52:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <menu+0x2bc8>)
 8003f54:	2101      	movs	r1, #1
 8003f56:	2002      	movs	r0, #2
 8003f58:	f003 fefa 	bl	8007d50 <lcd_print>
			}
			if(dilSecim == 1) {
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <menu+0x2bc0>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d104      	bne.n	8003f6e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <menu+0x2bcc>)
 8003f66:	2101      	movs	r1, #1
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f003 fef1 	bl	8007d50 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <menu+0x2bf4>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	220a      	movs	r2, #10
 8003f74:	4924      	ldr	r1, [pc, #144]	; (8004008 <menu+0x2bd4>)
 8003f76:	4618      	mov	r0, r3
 8003f78:	f008 fa3c 	bl	800c3f4 <itoa>
			lcd_print(2,14,snum);
 8003f7c:	4a22      	ldr	r2, [pc, #136]	; (8004008 <menu+0x2bd4>)
 8003f7e:	210e      	movs	r1, #14
 8003f80:	2002      	movs	r0, #2
 8003f82:	f003 fee5 	bl	8007d50 <lcd_print>
 8003f86:	e066      	b.n	8004056 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <menu+0x2bf4>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	d923      	bls.n	8003fd8 <menu+0x2ba4>
 8003f90:	4b25      	ldr	r3, [pc, #148]	; (8004028 <menu+0x2bf4>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b63      	cmp	r3, #99	; 0x63
 8003f96:	d81f      	bhi.n	8003fd8 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003f98:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <menu+0x2bc0>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fa0:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <menu+0x2bc8>)
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2002      	movs	r0, #2
 8003fa6:	f003 fed3 	bl	8007d50 <lcd_print>
 8003faa:	e008      	b.n	8003fbe <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <menu+0x2bc0>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d104      	bne.n	8003fbe <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <menu+0x2bcc>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	2002      	movs	r0, #2
 8003fba:	f003 fec9 	bl	8007d50 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <menu+0x2bf4>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	220a      	movs	r2, #10
 8003fc4:	4910      	ldr	r1, [pc, #64]	; (8004008 <menu+0x2bd4>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f008 fa14 	bl	800c3f4 <itoa>
			lcd_print(2, 15, snum);
 8003fcc:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <menu+0x2bd4>)
 8003fce:	210f      	movs	r1, #15
 8003fd0:	2002      	movs	r0, #2
 8003fd2:	f003 febd 	bl	8007d50 <lcd_print>
 8003fd6:	e03e      	b.n	8004056 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <menu+0x2bf4>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b09      	cmp	r3, #9
 8003fde:	d83a      	bhi.n	8004056 <menu+0x2c22>
			if(dilSecim == 0) {
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <menu+0x2bc0>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d121      	bne.n	800402c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <menu+0x2bc8>)
 8003fea:	2101      	movs	r1, #1
 8003fec:	2002      	movs	r0, #2
 8003fee:	f003 feaf 	bl	8007d50 <lcd_print>
 8003ff2:	e024      	b.n	800403e <menu+0x2c0a>
 8003ff4:	2000020d 	.word	0x2000020d
 8003ff8:	0800da60 	.word	0x0800da60
 8003ffc:	0800d628 	.word	0x0800d628
 8004000:	0800d99c 	.word	0x0800d99c
 8004004:	20000203 	.word	0x20000203
 8004008:	20000188 	.word	0x20000188
 800400c:	40010800 	.word	0x40010800
 8004010:	2000021b 	.word	0x2000021b
 8004014:	20000118 	.word	0x20000118
 8004018:	20000218 	.word	0x20000218
 800401c:	200001ec 	.word	0x200001ec
 8004020:	0800da74 	.word	0x0800da74
 8004024:	0800da88 	.word	0x0800da88
 8004028:	20000204 	.word	0x20000204
			} else if(dilSecim == 1) {
 800402c:	4b8f      	ldr	r3, [pc, #572]	; (800426c <menu+0x2e38>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d104      	bne.n	800403e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004034:	4a8e      	ldr	r2, [pc, #568]	; (8004270 <menu+0x2e3c>)
 8004036:	2101      	movs	r1, #1
 8004038:	2002      	movs	r0, #2
 800403a:	f003 fe89 	bl	8007d50 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800403e:	4b8d      	ldr	r3, [pc, #564]	; (8004274 <menu+0x2e40>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	220a      	movs	r2, #10
 8004044:	498c      	ldr	r1, [pc, #560]	; (8004278 <menu+0x2e44>)
 8004046:	4618      	mov	r0, r3
 8004048:	f008 f9d4 	bl	800c3f4 <itoa>
			lcd_print(2, 16, snum);
 800404c:	4a8a      	ldr	r2, [pc, #552]	; (8004278 <menu+0x2e44>)
 800404e:	2110      	movs	r1, #16
 8004050:	2002      	movs	r0, #2
 8004052:	f003 fe7d 	bl	8007d50 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004056:	2102      	movs	r1, #2
 8004058:	4888      	ldr	r0, [pc, #544]	; (800427c <menu+0x2e48>)
 800405a:	f005 f99f 	bl	800939c <HAL_GPIO_ReadPin>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d115      	bne.n	8004090 <menu+0x2c5c>
 8004064:	4b86      	ldr	r3, [pc, #536]	; (8004280 <menu+0x2e4c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	f083 0301 	eor.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00e      	beq.n	8004090 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004072:	4b80      	ldr	r3, [pc, #512]	; (8004274 <menu+0x2e40>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b7e      	ldr	r3, [pc, #504]	; (8004274 <menu+0x2e40>)
 800407c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800407e:	4b7d      	ldr	r3, [pc, #500]	; (8004274 <menu+0x2e40>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2bb4      	cmp	r3, #180	; 0xb4
 8004084:	d902      	bls.n	800408c <menu+0x2c58>
				makineCalismaTmr = 0;
 8004086:	4b7b      	ldr	r3, [pc, #492]	; (8004274 <menu+0x2e40>)
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800408c:	f000 fd2e 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004090:	2104      	movs	r1, #4
 8004092:	487a      	ldr	r0, [pc, #488]	; (800427c <menu+0x2e48>)
 8004094:	f005 f982 	bl	800939c <HAL_GPIO_ReadPin>
 8004098:	4603      	mov	r3, r0
 800409a:	2b01      	cmp	r3, #1
 800409c:	d115      	bne.n	80040ca <menu+0x2c96>
 800409e:	4b78      	ldr	r3, [pc, #480]	; (8004280 <menu+0x2e4c>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f083 0301 	eor.w	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80040ac:	4b71      	ldr	r3, [pc, #452]	; (8004274 <menu+0x2e40>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <menu+0x2e40>)
 80040b6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80040b8:	4b6e      	ldr	r3, [pc, #440]	; (8004274 <menu+0x2e40>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2bb5      	cmp	r3, #181	; 0xb5
 80040be:	d902      	bls.n	80040c6 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80040c0:	4b6c      	ldr	r3, [pc, #432]	; (8004274 <menu+0x2e40>)
 80040c2:	22b4      	movs	r2, #180	; 0xb4
 80040c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040c6:	f000 fd11 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040ca:	2108      	movs	r1, #8
 80040cc:	486b      	ldr	r0, [pc, #428]	; (800427c <menu+0x2e48>)
 80040ce:	f005 f965 	bl	800939c <HAL_GPIO_ReadPin>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10d      	bne.n	80040f4 <menu+0x2cc0>
 80040d8:	4b69      	ldr	r3, [pc, #420]	; (8004280 <menu+0x2e4c>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f083 0301 	eor.w	r3, r3, #1
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80040e6:	4b63      	ldr	r3, [pc, #396]	; (8004274 <menu+0x2e40>)
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	4b66      	ldr	r3, [pc, #408]	; (8004284 <menu+0x2e50>)
 80040ec:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80040ee:	4b66      	ldr	r3, [pc, #408]	; (8004288 <menu+0x2e54>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80040f4:	4b65      	ldr	r3, [pc, #404]	; (800428c <menu+0x2e58>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b1b      	cmp	r3, #27
 80040fa:	f040 8083 	bne.w	8004204 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 80040fe:	4a64      	ldr	r2, [pc, #400]	; (8004290 <menu+0x2e5c>)
 8004100:	2101      	movs	r1, #1
 8004102:	2001      	movs	r0, #1
 8004104:	f003 fe24 	bl	8007d50 <lcd_print>

		if(buzzer == 0) {
 8004108:	4b62      	ldr	r3, [pc, #392]	; (8004294 <menu+0x2e60>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d113      	bne.n	8004138 <menu+0x2d04>
			if(dilSecim == 0) {
 8004110:	4b56      	ldr	r3, [pc, #344]	; (800426c <menu+0x2e38>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004118:	4a5f      	ldr	r2, [pc, #380]	; (8004298 <menu+0x2e64>)
 800411a:	2101      	movs	r1, #1
 800411c:	2002      	movs	r0, #2
 800411e:	f003 fe17 	bl	8007d50 <lcd_print>
 8004122:	e020      	b.n	8004166 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004124:	4b51      	ldr	r3, [pc, #324]	; (800426c <menu+0x2e38>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d11c      	bne.n	8004166 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 800412c:	4a5b      	ldr	r2, [pc, #364]	; (800429c <menu+0x2e68>)
 800412e:	2101      	movs	r1, #1
 8004130:	2002      	movs	r0, #2
 8004132:	f003 fe0d 	bl	8007d50 <lcd_print>
 8004136:	e016      	b.n	8004166 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004138:	4b56      	ldr	r3, [pc, #344]	; (8004294 <menu+0x2e60>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d112      	bne.n	8004166 <menu+0x2d32>
			if(dilSecim == 0) {
 8004140:	4b4a      	ldr	r3, [pc, #296]	; (800426c <menu+0x2e38>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004148:	4a55      	ldr	r2, [pc, #340]	; (80042a0 <menu+0x2e6c>)
 800414a:	2101      	movs	r1, #1
 800414c:	2002      	movs	r0, #2
 800414e:	f003 fdff 	bl	8007d50 <lcd_print>
 8004152:	e008      	b.n	8004166 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004154:	4b45      	ldr	r3, [pc, #276]	; (800426c <menu+0x2e38>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d104      	bne.n	8004166 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 800415c:	4a51      	ldr	r2, [pc, #324]	; (80042a4 <menu+0x2e70>)
 800415e:	2101      	movs	r1, #1
 8004160:	2002      	movs	r0, #2
 8004162:	f003 fdf5 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004166:	2102      	movs	r1, #2
 8004168:	4844      	ldr	r0, [pc, #272]	; (800427c <menu+0x2e48>)
 800416a:	f005 f917 	bl	800939c <HAL_GPIO_ReadPin>
 800416e:	4603      	mov	r3, r0
 8004170:	2b01      	cmp	r3, #1
 8004172:	d115      	bne.n	80041a0 <menu+0x2d6c>
 8004174:	4b42      	ldr	r3, [pc, #264]	; (8004280 <menu+0x2e4c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f083 0301 	eor.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00e      	beq.n	80041a0 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8004182:	4b44      	ldr	r3, [pc, #272]	; (8004294 <menu+0x2e60>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	3301      	adds	r3, #1
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4b42      	ldr	r3, [pc, #264]	; (8004294 <menu+0x2e60>)
 800418c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800418e:	4b41      	ldr	r3, [pc, #260]	; (8004294 <menu+0x2e60>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d902      	bls.n	800419c <menu+0x2d68>
				buzzer = 0;
 8004196:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <menu+0x2e60>)
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800419c:	f000 fca6 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041a0:	2104      	movs	r1, #4
 80041a2:	4836      	ldr	r0, [pc, #216]	; (800427c <menu+0x2e48>)
 80041a4:	f005 f8fa 	bl	800939c <HAL_GPIO_ReadPin>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d115      	bne.n	80041da <menu+0x2da6>
 80041ae:	4b34      	ldr	r3, [pc, #208]	; (8004280 <menu+0x2e4c>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f083 0301 	eor.w	r3, r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00e      	beq.n	80041da <menu+0x2da6>
			buzzer = buzzer - 1;
 80041bc:	4b35      	ldr	r3, [pc, #212]	; (8004294 <menu+0x2e60>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	4b33      	ldr	r3, [pc, #204]	; (8004294 <menu+0x2e60>)
 80041c6:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80041c8:	4b32      	ldr	r3, [pc, #200]	; (8004294 <menu+0x2e60>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <menu+0x2da2>
		   		buzzer = 1;
 80041d0:	4b30      	ldr	r3, [pc, #192]	; (8004294 <menu+0x2e60>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041d6:	f000 fc89 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041da:	2108      	movs	r1, #8
 80041dc:	4827      	ldr	r0, [pc, #156]	; (800427c <menu+0x2e48>)
 80041de:	f005 f8dd 	bl	800939c <HAL_GPIO_ReadPin>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10d      	bne.n	8004204 <menu+0x2dd0>
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <menu+0x2e4c>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	f083 0301 	eor.w	r3, r3, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <menu+0x2dd0>
			eepromData[25] = buzzer;
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <menu+0x2e60>)
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <menu+0x2e50>)
 80041fc:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <menu+0x2e54>)
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004204:	4b21      	ldr	r3, [pc, #132]	; (800428c <menu+0x2e58>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b1c      	cmp	r3, #28
 800420a:	f040 80ab 	bne.w	8004364 <menu+0x2f30>
		calismaSayModu = 0;
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <menu+0x2e74>)
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004214:	4a25      	ldr	r2, [pc, #148]	; (80042ac <menu+0x2e78>)
 8004216:	2101      	movs	r1, #1
 8004218:	2001      	movs	r0, #1
 800421a:	f003 fd99 	bl	8007d50 <lcd_print>

		if(demoMode == 0) {
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <menu+0x2e7c>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d113      	bne.n	800424e <menu+0x2e1a>
			if(dilSecim == 0) {
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <menu+0x2e38>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800422e:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <menu+0x2e64>)
 8004230:	2101      	movs	r1, #1
 8004232:	2002      	movs	r0, #2
 8004234:	f003 fd8c 	bl	8007d50 <lcd_print>
 8004238:	e045      	b.n	80042c6 <menu+0x2e92>
			} else if(dilSecim == 1) {
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <menu+0x2e38>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d141      	bne.n	80042c6 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004242:	4a16      	ldr	r2, [pc, #88]	; (800429c <menu+0x2e68>)
 8004244:	2101      	movs	r1, #1
 8004246:	2002      	movs	r0, #2
 8004248:	f003 fd82 	bl	8007d50 <lcd_print>
 800424c:	e03b      	b.n	80042c6 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800424e:	4b18      	ldr	r3, [pc, #96]	; (80042b0 <menu+0x2e7c>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d137      	bne.n	80042c6 <menu+0x2e92>
			if(dilSecim == 0){
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <menu+0x2e38>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d12a      	bne.n	80042b4 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <menu+0x2e6c>)
 8004260:	2101      	movs	r1, #1
 8004262:	2002      	movs	r0, #2
 8004264:	f003 fd74 	bl	8007d50 <lcd_print>
 8004268:	e02d      	b.n	80042c6 <menu+0x2e92>
 800426a:	bf00      	nop
 800426c:	2000020d 	.word	0x2000020d
 8004270:	0800d99c 	.word	0x0800d99c
 8004274:	20000204 	.word	0x20000204
 8004278:	20000188 	.word	0x20000188
 800427c:	40010800 	.word	0x40010800
 8004280:	2000021b 	.word	0x2000021b
 8004284:	20000118 	.word	0x20000118
 8004288:	20000218 	.word	0x20000218
 800428c:	200001ec 	.word	0x200001ec
 8004290:	0800da9c 	.word	0x0800da9c
 8004294:	20000208 	.word	0x20000208
 8004298:	0800d3c4 	.word	0x0800d3c4
 800429c:	0800d3d8 	.word	0x0800d3d8
 80042a0:	0800d424 	.word	0x0800d424
 80042a4:	0800d438 	.word	0x0800d438
 80042a8:	2000020c 	.word	0x2000020c
 80042ac:	0800dab0 	.word	0x0800dab0
 80042b0:	2000020a 	.word	0x2000020a
			} else if(dilSecim == 1) {
 80042b4:	4b71      	ldr	r3, [pc, #452]	; (800447c <menu+0x3048>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d104      	bne.n	80042c6 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80042bc:	4a70      	ldr	r2, [pc, #448]	; (8004480 <menu+0x304c>)
 80042be:	2101      	movs	r1, #1
 80042c0:	2002      	movs	r0, #2
 80042c2:	f003 fd45 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042c6:	2102      	movs	r1, #2
 80042c8:	486e      	ldr	r0, [pc, #440]	; (8004484 <menu+0x3050>)
 80042ca:	f005 f867 	bl	800939c <HAL_GPIO_ReadPin>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d115      	bne.n	8004300 <menu+0x2ecc>
 80042d4:	4b6c      	ldr	r3, [pc, #432]	; (8004488 <menu+0x3054>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	f083 0301 	eor.w	r3, r3, #1
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00e      	beq.n	8004300 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <menu+0x3058>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	4b68      	ldr	r3, [pc, #416]	; (800448c <menu+0x3058>)
 80042ec:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80042ee:	4b67      	ldr	r3, [pc, #412]	; (800448c <menu+0x3058>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d902      	bls.n	80042fc <menu+0x2ec8>
				demoMode = 0;
 80042f6:	4b65      	ldr	r3, [pc, #404]	; (800448c <menu+0x3058>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042fc:	f000 fbf6 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004300:	2104      	movs	r1, #4
 8004302:	4860      	ldr	r0, [pc, #384]	; (8004484 <menu+0x3050>)
 8004304:	f005 f84a 	bl	800939c <HAL_GPIO_ReadPin>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d115      	bne.n	800433a <menu+0x2f06>
 800430e:	4b5e      	ldr	r3, [pc, #376]	; (8004488 <menu+0x3054>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	f083 0301 	eor.w	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00e      	beq.n	800433a <menu+0x2f06>
			demoMode = demoMode - 1;
 800431c:	4b5b      	ldr	r3, [pc, #364]	; (800448c <menu+0x3058>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	3b01      	subs	r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <menu+0x3058>)
 8004326:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004328:	4b58      	ldr	r3, [pc, #352]	; (800448c <menu+0x3058>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <menu+0x2f02>
		   		demoMode = 1;
 8004330:	4b56      	ldr	r3, [pc, #344]	; (800448c <menu+0x3058>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004336:	f000 fbd9 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800433a:	2108      	movs	r1, #8
 800433c:	4851      	ldr	r0, [pc, #324]	; (8004484 <menu+0x3050>)
 800433e:	f005 f82d 	bl	800939c <HAL_GPIO_ReadPin>
 8004342:	4603      	mov	r3, r0
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10d      	bne.n	8004364 <menu+0x2f30>
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <menu+0x3054>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	f083 0301 	eor.w	r3, r3, #1
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004356:	4b4d      	ldr	r3, [pc, #308]	; (800448c <menu+0x3058>)
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	4b4d      	ldr	r3, [pc, #308]	; (8004490 <menu+0x305c>)
 800435c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800435e:	4b4d      	ldr	r3, [pc, #308]	; (8004494 <menu+0x3060>)
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004364:	4b4c      	ldr	r3, [pc, #304]	; (8004498 <menu+0x3064>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b1d      	cmp	r3, #29
 800436a:	f040 8132 	bne.w	80045d2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800436e:	4b4b      	ldr	r3, [pc, #300]	; (800449c <menu+0x3068>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d113      	bne.n	800439e <menu+0x2f6a>
 8004376:	4b4a      	ldr	r3, [pc, #296]	; (80044a0 <menu+0x306c>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <menu+0x2f6a>
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <menu+0x3070>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <menu+0x2f6a>
 8004386:	4b48      	ldr	r3, [pc, #288]	; (80044a8 <menu+0x3074>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d107      	bne.n	800439e <menu+0x2f6a>
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <menu+0x3078>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004396:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <menu+0x307c>)
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e002      	b.n	80043a4 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800439e:	4b44      	ldr	r3, [pc, #272]	; (80044b0 <menu+0x307c>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80043a4:	4b43      	ldr	r3, [pc, #268]	; (80044b4 <menu+0x3080>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d154      	bne.n	8004456 <menu+0x3022>
			if(dilSecim == 0) {
 80043ac:	4b33      	ldr	r3, [pc, #204]	; (800447c <menu+0x3048>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043b4:	4a40      	ldr	r2, [pc, #256]	; (80044b8 <menu+0x3084>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	2001      	movs	r0, #1
 80043ba:	f003 fcc9 	bl	8007d50 <lcd_print>
 80043be:	e008      	b.n	80043d2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80043c0:	4b2e      	ldr	r3, [pc, #184]	; (800447c <menu+0x3048>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d104      	bne.n	80043d2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80043c8:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <menu+0x3088>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	2001      	movs	r0, #1
 80043ce:	f003 fcbf 	bl	8007d50 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <menu+0x3078>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	220a      	movs	r2, #10
 80043d8:	4939      	ldr	r1, [pc, #228]	; (80044c0 <menu+0x308c>)
 80043da:	4618      	mov	r0, r3
 80043dc:	f008 f80a 	bl	800c3f4 <itoa>
			lcd_print(2, 12, snum);
 80043e0:	4a37      	ldr	r2, [pc, #220]	; (80044c0 <menu+0x308c>)
 80043e2:	210c      	movs	r1, #12
 80043e4:	2002      	movs	r0, #2
 80043e6:	f003 fcb3 	bl	8007d50 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <menu+0x3074>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	220a      	movs	r2, #10
 80043f0:	4933      	ldr	r1, [pc, #204]	; (80044c0 <menu+0x308c>)
 80043f2:	4618      	mov	r0, r3
 80043f4:	f007 fffe 	bl	800c3f4 <itoa>
			lcd_print(2, 13, snum);
 80043f8:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <menu+0x308c>)
 80043fa:	210d      	movs	r1, #13
 80043fc:	2002      	movs	r0, #2
 80043fe:	f003 fca7 	bl	8007d50 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004402:	4b28      	ldr	r3, [pc, #160]	; (80044a4 <menu+0x3070>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	220a      	movs	r2, #10
 8004408:	492d      	ldr	r1, [pc, #180]	; (80044c0 <menu+0x308c>)
 800440a:	4618      	mov	r0, r3
 800440c:	f007 fff2 	bl	800c3f4 <itoa>
			lcd_print(2, 14, snum);
 8004410:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <menu+0x308c>)
 8004412:	210e      	movs	r1, #14
 8004414:	2002      	movs	r0, #2
 8004416:	f003 fc9b 	bl	8007d50 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <menu+0x306c>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	220a      	movs	r2, #10
 8004420:	4927      	ldr	r1, [pc, #156]	; (80044c0 <menu+0x308c>)
 8004422:	4618      	mov	r0, r3
 8004424:	f007 ffe6 	bl	800c3f4 <itoa>
			lcd_print(2, 15, snum);
 8004428:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <menu+0x308c>)
 800442a:	210f      	movs	r1, #15
 800442c:	2002      	movs	r0, #2
 800442e:	f003 fc8f 	bl	8007d50 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004432:	4b1a      	ldr	r3, [pc, #104]	; (800449c <menu+0x3068>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	220a      	movs	r2, #10
 8004438:	4921      	ldr	r1, [pc, #132]	; (80044c0 <menu+0x308c>)
 800443a:	4618      	mov	r0, r3
 800443c:	f007 ffda 	bl	800c3f4 <itoa>
			lcd_print(2, 16, snum);
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <menu+0x308c>)
 8004442:	2110      	movs	r1, #16
 8004444:	2002      	movs	r0, #2
 8004446:	f003 fc83 	bl	8007d50 <lcd_print>

			lcd_print(2, 1, "           ");
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <menu+0x3090>)
 800444c:	2101      	movs	r1, #1
 800444e:	2002      	movs	r0, #2
 8004450:	f003 fc7e 	bl	8007d50 <lcd_print>
 8004454:	e048      	b.n	80044e8 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <menu+0x3080>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d144      	bne.n	80044e8 <menu+0x30b4>
			if(dilSecim == 0) {
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <menu+0x3048>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d132      	bne.n	80044cc <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004466:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <menu+0x3084>)
 8004468:	2101      	movs	r1, #1
 800446a:	2001      	movs	r0, #1
 800446c:	f003 fc70 	bl	8007d50 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004470:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <menu+0x3094>)
 8004472:	2101      	movs	r1, #1
 8004474:	2002      	movs	r0, #2
 8004476:	f003 fc6b 	bl	8007d50 <lcd_print>
 800447a:	e035      	b.n	80044e8 <menu+0x30b4>
 800447c:	2000020d 	.word	0x2000020d
 8004480:	0800d438 	.word	0x0800d438
 8004484:	40010800 	.word	0x40010800
 8004488:	2000021b 	.word	0x2000021b
 800448c:	2000020a 	.word	0x2000020a
 8004490:	20000118 	.word	0x20000118
 8004494:	20000218 	.word	0x20000218
 8004498:	200001ec 	.word	0x200001ec
 800449c:	200001e9 	.word	0x200001e9
 80044a0:	200001ea 	.word	0x200001ea
 80044a4:	20000000 	.word	0x20000000
 80044a8:	20000001 	.word	0x20000001
 80044ac:	200001eb 	.word	0x200001eb
 80044b0:	2000022d 	.word	0x2000022d
 80044b4:	2000020c 	.word	0x2000020c
 80044b8:	0800dac0 	.word	0x0800dac0
 80044bc:	0800dad4 	.word	0x0800dad4
 80044c0:	20000188 	.word	0x20000188
 80044c4:	0800dae8 	.word	0x0800dae8
 80044c8:	0800daf4 	.word	0x0800daf4
			} else if(dilSecim == 1) {
 80044cc:	4b94      	ldr	r3, [pc, #592]	; (8004720 <menu+0x32ec>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d109      	bne.n	80044e8 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80044d4:	4a93      	ldr	r2, [pc, #588]	; (8004724 <menu+0x32f0>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	2001      	movs	r0, #1
 80044da:	f003 fc39 	bl	8007d50 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80044de:	4a92      	ldr	r2, [pc, #584]	; (8004728 <menu+0x32f4>)
 80044e0:	2101      	movs	r1, #1
 80044e2:	2002      	movs	r0, #2
 80044e4:	f003 fc34 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80044e8:	2102      	movs	r1, #2
 80044ea:	4890      	ldr	r0, [pc, #576]	; (800472c <menu+0x32f8>)
 80044ec:	f004 ff56 	bl	800939c <HAL_GPIO_ReadPin>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d119      	bne.n	800452a <menu+0x30f6>
 80044f6:	4b8e      	ldr	r3, [pc, #568]	; (8004730 <menu+0x32fc>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d012      	beq.n	800452a <menu+0x30f6>
 8004504:	4b8b      	ldr	r3, [pc, #556]	; (8004734 <menu+0x3300>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800450c:	4b8a      	ldr	r3, [pc, #552]	; (8004738 <menu+0x3304>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	b2da      	uxtb	r2, r3
 8004514:	4b88      	ldr	r3, [pc, #544]	; (8004738 <menu+0x3304>)
 8004516:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004518:	4b87      	ldr	r3, [pc, #540]	; (8004738 <menu+0x3304>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d902      	bls.n	8004526 <menu+0x30f2>
				calismaSayModu = 0;
 8004520:	4b85      	ldr	r3, [pc, #532]	; (8004738 <menu+0x3304>)
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004526:	f000 fae1 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800452a:	2104      	movs	r1, #4
 800452c:	487f      	ldr	r0, [pc, #508]	; (800472c <menu+0x32f8>)
 800452e:	f004 ff35 	bl	800939c <HAL_GPIO_ReadPin>
 8004532:	4603      	mov	r3, r0
 8004534:	2b01      	cmp	r3, #1
 8004536:	d119      	bne.n	800456c <menu+0x3138>
 8004538:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <menu+0x32fc>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	f083 0301 	eor.w	r3, r3, #1
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <menu+0x3138>
 8004546:	4b7b      	ldr	r3, [pc, #492]	; (8004734 <menu+0x3300>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800454e:	4b7a      	ldr	r3, [pc, #488]	; (8004738 <menu+0x3304>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	3b01      	subs	r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4b78      	ldr	r3, [pc, #480]	; (8004738 <menu+0x3304>)
 8004558:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800455a:	4b77      	ldr	r3, [pc, #476]	; (8004738 <menu+0x3304>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <menu+0x3134>
		   		calismaSayModu = 1;
 8004562:	4b75      	ldr	r3, [pc, #468]	; (8004738 <menu+0x3304>)
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004568:	f000 fac0 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800456c:	2108      	movs	r1, #8
 800456e:	486f      	ldr	r0, [pc, #444]	; (800472c <menu+0x32f8>)
 8004570:	f004 ff14 	bl	800939c <HAL_GPIO_ReadPin>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d12b      	bne.n	80045d2 <menu+0x319e>
 800457a:	4b6d      	ldr	r3, [pc, #436]	; (8004730 <menu+0x32fc>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	f083 0301 	eor.w	r3, r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d024      	beq.n	80045d2 <menu+0x319e>
			eepromData[32] = 0;
 8004588:	4b6c      	ldr	r3, [pc, #432]	; (800473c <menu+0x3308>)
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004590:	4b6a      	ldr	r3, [pc, #424]	; (800473c <menu+0x3308>)
 8004592:	2200      	movs	r2, #0
 8004594:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004596:	4b69      	ldr	r3, [pc, #420]	; (800473c <menu+0x3308>)
 8004598:	2200      	movs	r2, #0
 800459a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800459c:	4b67      	ldr	r3, [pc, #412]	; (800473c <menu+0x3308>)
 800459e:	2200      	movs	r2, #0
 80045a0:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80045a2:	4b66      	ldr	r3, [pc, #408]	; (800473c <menu+0x3308>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80045a8:	4b65      	ldr	r3, [pc, #404]	; (8004740 <menu+0x330c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80045ae:	4b65      	ldr	r3, [pc, #404]	; (8004744 <menu+0x3310>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80045b4:	4b64      	ldr	r3, [pc, #400]	; (8004748 <menu+0x3314>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80045ba:	4b64      	ldr	r3, [pc, #400]	; (800474c <menu+0x3318>)
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80045c0:	4b63      	ldr	r3, [pc, #396]	; (8004750 <menu+0x331c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80045c6:	4b5c      	ldr	r3, [pc, #368]	; (8004738 <menu+0x3304>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80045cc:	4b61      	ldr	r3, [pc, #388]	; (8004754 <menu+0x3320>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80045d2:	4b61      	ldr	r3, [pc, #388]	; (8004758 <menu+0x3324>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b1e      	cmp	r3, #30
 80045d8:	d16f      	bne.n	80046ba <menu+0x3286>
		calismaSayModu = 0;
 80045da:	4b57      	ldr	r3, [pc, #348]	; (8004738 <menu+0x3304>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80045e0:	4b4f      	ldr	r3, [pc, #316]	; (8004720 <menu+0x32ec>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80045e8:	4a5c      	ldr	r2, [pc, #368]	; (800475c <menu+0x3328>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	2001      	movs	r0, #1
 80045ee:	f003 fbaf 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80045f2:	4a5b      	ldr	r2, [pc, #364]	; (8004760 <menu+0x332c>)
 80045f4:	2101      	movs	r1, #1
 80045f6:	2002      	movs	r0, #2
 80045f8:	f003 fbaa 	bl	8007d50 <lcd_print>
 80045fc:	e00d      	b.n	800461a <menu+0x31e6>
		} else if(dilSecim == 1) {
 80045fe:	4b48      	ldr	r3, [pc, #288]	; (8004720 <menu+0x32ec>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d109      	bne.n	800461a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004606:	4a57      	ldr	r2, [pc, #348]	; (8004764 <menu+0x3330>)
 8004608:	2101      	movs	r1, #1
 800460a:	2001      	movs	r0, #1
 800460c:	f003 fba0 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004610:	4a55      	ldr	r2, [pc, #340]	; (8004768 <menu+0x3334>)
 8004612:	2101      	movs	r1, #1
 8004614:	2002      	movs	r0, #2
 8004616:	f003 fb9b 	bl	8007d50 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800461a:	2102      	movs	r1, #2
 800461c:	4843      	ldr	r0, [pc, #268]	; (800472c <menu+0x32f8>)
 800461e:	f004 febd 	bl	800939c <HAL_GPIO_ReadPin>
 8004622:	4603      	mov	r3, r0
 8004624:	2b01      	cmp	r3, #1
 8004626:	d115      	bne.n	8004654 <menu+0x3220>
 8004628:	4b41      	ldr	r3, [pc, #260]	; (8004730 <menu+0x32fc>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f083 0301 	eor.w	r3, r3, #1
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00e      	beq.n	8004654 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004636:	4b3a      	ldr	r3, [pc, #232]	; (8004720 <menu+0x32ec>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4b38      	ldr	r3, [pc, #224]	; (8004720 <menu+0x32ec>)
 8004640:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004642:	4b37      	ldr	r3, [pc, #220]	; (8004720 <menu+0x32ec>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d902      	bls.n	8004650 <menu+0x321c>
				dilSecim = 0;
 800464a:	4b35      	ldr	r3, [pc, #212]	; (8004720 <menu+0x32ec>)
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004650:	f000 fa4c 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004654:	2104      	movs	r1, #4
 8004656:	4835      	ldr	r0, [pc, #212]	; (800472c <menu+0x32f8>)
 8004658:	f004 fea0 	bl	800939c <HAL_GPIO_ReadPin>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d115      	bne.n	800468e <menu+0x325a>
 8004662:	4b33      	ldr	r3, [pc, #204]	; (8004730 <menu+0x32fc>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	f083 0301 	eor.w	r3, r3, #1
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004670:	4b2b      	ldr	r3, [pc, #172]	; (8004720 <menu+0x32ec>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	3b01      	subs	r3, #1
 8004676:	b2da      	uxtb	r2, r3
 8004678:	4b29      	ldr	r3, [pc, #164]	; (8004720 <menu+0x32ec>)
 800467a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800467c:	4b28      	ldr	r3, [pc, #160]	; (8004720 <menu+0x32ec>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <menu+0x3256>
		   		dilSecim = 1;
 8004684:	4b26      	ldr	r3, [pc, #152]	; (8004720 <menu+0x32ec>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800468a:	f000 fa2f 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800468e:	2108      	movs	r1, #8
 8004690:	4826      	ldr	r0, [pc, #152]	; (800472c <menu+0x32f8>)
 8004692:	f004 fe83 	bl	800939c <HAL_GPIO_ReadPin>
 8004696:	4603      	mov	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d10e      	bne.n	80046ba <menu+0x3286>
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <menu+0x32fc>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	f083 0301 	eor.w	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <menu+0x3286>
			eepromData[33] = dilSecim;
 80046aa:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <menu+0x32ec>)
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	4b23      	ldr	r3, [pc, #140]	; (800473c <menu+0x3308>)
 80046b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80046b4:	4b27      	ldr	r3, [pc, #156]	; (8004754 <menu+0x3320>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80046ba:	4b27      	ldr	r3, [pc, #156]	; (8004758 <menu+0x3324>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b1f      	cmp	r3, #31
 80046c0:	f040 80b7 	bne.w	8004832 <menu+0x33fe>
		calismaSayModu = 0;
 80046c4:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <menu+0x3304>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80046ca:	4a28      	ldr	r2, [pc, #160]	; (800476c <menu+0x3338>)
 80046cc:	2101      	movs	r1, #1
 80046ce:	2001      	movs	r0, #1
 80046d0:	f003 fb3e 	bl	8007d50 <lcd_print>

		if(iotMode == 0) {
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <menu+0x333c>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d113      	bne.n	8004704 <menu+0x32d0>
			if(dilSecim == 0) {
 80046dc:	4b10      	ldr	r3, [pc, #64]	; (8004720 <menu+0x32ec>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80046e4:	4a23      	ldr	r2, [pc, #140]	; (8004774 <menu+0x3340>)
 80046e6:	2101      	movs	r1, #1
 80046e8:	2002      	movs	r0, #2
 80046ea:	f003 fb31 	bl	8007d50 <lcd_print>
 80046ee:	e050      	b.n	8004792 <menu+0x335e>
			} else if(dilSecim == 1) {
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <menu+0x32ec>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d14c      	bne.n	8004792 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <menu+0x3344>)
 80046fa:	2101      	movs	r1, #1
 80046fc:	2002      	movs	r0, #2
 80046fe:	f003 fb27 	bl	8007d50 <lcd_print>
 8004702:	e046      	b.n	8004792 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <menu+0x333c>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d142      	bne.n	8004792 <menu+0x335e>
			if(dilSecim == 0) {
 800470c:	4b04      	ldr	r3, [pc, #16]	; (8004720 <menu+0x32ec>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d135      	bne.n	8004780 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004714:	4a19      	ldr	r2, [pc, #100]	; (800477c <menu+0x3348>)
 8004716:	2101      	movs	r1, #1
 8004718:	2002      	movs	r0, #2
 800471a:	f003 fb19 	bl	8007d50 <lcd_print>
 800471e:	e038      	b.n	8004792 <menu+0x335e>
 8004720:	2000020d 	.word	0x2000020d
 8004724:	0800dad4 	.word	0x0800dad4
 8004728:	0800db08 	.word	0x0800db08
 800472c:	40010800 	.word	0x40010800
 8004730:	2000021b 	.word	0x2000021b
 8004734:	2000022d 	.word	0x2000022d
 8004738:	2000020c 	.word	0x2000020c
 800473c:	20000118 	.word	0x20000118
 8004740:	200001eb 	.word	0x200001eb
 8004744:	20000001 	.word	0x20000001
 8004748:	20000000 	.word	0x20000000
 800474c:	200001ea 	.word	0x200001ea
 8004750:	200001e9 	.word	0x200001e9
 8004754:	20000218 	.word	0x20000218
 8004758:	200001ec 	.word	0x200001ec
 800475c:	0800db1c 	.word	0x0800db1c
 8004760:	0800db30 	.word	0x0800db30
 8004764:	0800db44 	.word	0x0800db44
 8004768:	0800db58 	.word	0x0800db58
 800476c:	0800db6c 	.word	0x0800db6c
 8004770:	2000020b 	.word	0x2000020b
 8004774:	0800d3c4 	.word	0x0800d3c4
 8004778:	0800d3d8 	.word	0x0800d3d8
 800477c:	0800d424 	.word	0x0800d424
			} else if(dilSecim == 1) {
 8004780:	4ba1      	ldr	r3, [pc, #644]	; (8004a08 <menu+0x35d4>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d104      	bne.n	8004792 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004788:	4aa0      	ldr	r2, [pc, #640]	; (8004a0c <menu+0x35d8>)
 800478a:	2101      	movs	r1, #1
 800478c:	2002      	movs	r0, #2
 800478e:	f003 fadf 	bl	8007d50 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004792:	2102      	movs	r1, #2
 8004794:	489e      	ldr	r0, [pc, #632]	; (8004a10 <menu+0x35dc>)
 8004796:	f004 fe01 	bl	800939c <HAL_GPIO_ReadPin>
 800479a:	4603      	mov	r3, r0
 800479c:	2b01      	cmp	r3, #1
 800479e:	d115      	bne.n	80047cc <menu+0x3398>
 80047a0:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <menu+0x35e0>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f083 0301 	eor.w	r3, r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00e      	beq.n	80047cc <menu+0x3398>
			iotMode = iotMode + 1;
 80047ae:	4b9a      	ldr	r3, [pc, #616]	; (8004a18 <menu+0x35e4>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4b98      	ldr	r3, [pc, #608]	; (8004a18 <menu+0x35e4>)
 80047b8:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80047ba:	4b97      	ldr	r3, [pc, #604]	; (8004a18 <menu+0x35e4>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d902      	bls.n	80047c8 <menu+0x3394>
				iotMode = 0;
 80047c2:	4b95      	ldr	r3, [pc, #596]	; (8004a18 <menu+0x35e4>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047c8:	f000 f990 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047cc:	2104      	movs	r1, #4
 80047ce:	4890      	ldr	r0, [pc, #576]	; (8004a10 <menu+0x35dc>)
 80047d0:	f004 fde4 	bl	800939c <HAL_GPIO_ReadPin>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d115      	bne.n	8004806 <menu+0x33d2>
 80047da:	4b8e      	ldr	r3, [pc, #568]	; (8004a14 <menu+0x35e0>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	f083 0301 	eor.w	r3, r3, #1
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00e      	beq.n	8004806 <menu+0x33d2>
			iotMode = iotMode - 1;
 80047e8:	4b8b      	ldr	r3, [pc, #556]	; (8004a18 <menu+0x35e4>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	4b89      	ldr	r3, [pc, #548]	; (8004a18 <menu+0x35e4>)
 80047f2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80047f4:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <menu+0x35e4>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <menu+0x33ce>
		   		iotMode = 1;
 80047fc:	4b86      	ldr	r3, [pc, #536]	; (8004a18 <menu+0x35e4>)
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004802:	f000 f973 	bl	8004aec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004806:	2108      	movs	r1, #8
 8004808:	4881      	ldr	r0, [pc, #516]	; (8004a10 <menu+0x35dc>)
 800480a:	f004 fdc7 	bl	800939c <HAL_GPIO_ReadPin>
 800480e:	4603      	mov	r3, r0
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10e      	bne.n	8004832 <menu+0x33fe>
 8004814:	4b7f      	ldr	r3, [pc, #508]	; (8004a14 <menu+0x35e0>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f083 0301 	eor.w	r3, r3, #1
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004822:	4b7d      	ldr	r3, [pc, #500]	; (8004a18 <menu+0x35e4>)
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	4b7d      	ldr	r3, [pc, #500]	; (8004a1c <menu+0x35e8>)
 8004828:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 800482c:	4b7c      	ldr	r3, [pc, #496]	; (8004a20 <menu+0x35ec>)
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004832:	4b7c      	ldr	r3, [pc, #496]	; (8004a24 <menu+0x35f0>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b20      	cmp	r3, #32
 8004838:	d12b      	bne.n	8004892 <menu+0x345e>
		calismaSayModu = 0;
 800483a:	4b7b      	ldr	r3, [pc, #492]	; (8004a28 <menu+0x35f4>)
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004840:	2001      	movs	r0, #1
 8004842:	f7fb ff79 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004846:	2032      	movs	r0, #50	; 0x32
 8004848:	f003 ffd8 	bl	80087fc <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 800484c:	2001      	movs	r0, #1
 800484e:	f7fc fd4f 	bl	80012f0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004852:	2102      	movs	r1, #2
 8004854:	486e      	ldr	r0, [pc, #440]	; (8004a10 <menu+0x35dc>)
 8004856:	f004 fda1 	bl	800939c <HAL_GPIO_ReadPin>
 800485a:	4603      	mov	r3, r0
 800485c:	2b01      	cmp	r3, #1
 800485e:	d118      	bne.n	8004892 <menu+0x345e>
 8004860:	2104      	movs	r1, #4
 8004862:	486b      	ldr	r0, [pc, #428]	; (8004a10 <menu+0x35dc>)
 8004864:	f004 fd9a 	bl	800939c <HAL_GPIO_ReadPin>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	d111      	bne.n	8004892 <menu+0x345e>
 800486e:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <menu+0x35e0>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	f083 0301 	eor.w	r3, r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <menu+0x345e>
			takeMachineID();
 800487c:	f002 fa80 	bl	8006d80 <takeMachineID>

			convertArrays(1);
 8004880:	2001      	movs	r0, #1
 8004882:	f7fb ff59 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004886:	2032      	movs	r0, #50	; 0x32
 8004888:	f003 ffb8 	bl	80087fc <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 800488c:	2001      	movs	r0, #1
 800488e:	f7fc fd2f 	bl	80012f0 <printCredentials>
		}
	}

	if (menuSayac == 33) {
 8004892:	4b64      	ldr	r3, [pc, #400]	; (8004a24 <menu+0x35f0>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b21      	cmp	r3, #33	; 0x21
 8004898:	d12e      	bne.n	80048f8 <menu+0x34c4>
		calismaSayModu = 0;
 800489a:	4b63      	ldr	r3, [pc, #396]	; (8004a28 <menu+0x35f4>)
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f003 faa1 	bl	8007de8 <lcd_backlight>

		convertArrays(2);
 80048a6:	2002      	movs	r0, #2
 80048a8:	f7fb ff46 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80048ac:	2032      	movs	r0, #50	; 0x32
 80048ae:	f003 ffa5 	bl	80087fc <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 80048b2:	2002      	movs	r0, #2
 80048b4:	f7fc fd1c 	bl	80012f0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048b8:	2102      	movs	r1, #2
 80048ba:	4855      	ldr	r0, [pc, #340]	; (8004a10 <menu+0x35dc>)
 80048bc:	f004 fd6e 	bl	800939c <HAL_GPIO_ReadPin>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d118      	bne.n	80048f8 <menu+0x34c4>
 80048c6:	2104      	movs	r1, #4
 80048c8:	4851      	ldr	r0, [pc, #324]	; (8004a10 <menu+0x35dc>)
 80048ca:	f004 fd67 	bl	800939c <HAL_GPIO_ReadPin>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d111      	bne.n	80048f8 <menu+0x34c4>
 80048d4:	4b4f      	ldr	r3, [pc, #316]	; (8004a14 <menu+0x35e0>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	f083 0301 	eor.w	r3, r3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <menu+0x34c4>
			takeWifiSSID();
 80048e2:	f002 fbe5 	bl	80070b0 <takeWifiSSID>

			convertArrays(2);
 80048e6:	2002      	movs	r0, #2
 80048e8:	f7fb ff26 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 80048ec:	2032      	movs	r0, #50	; 0x32
 80048ee:	f003 ff85 	bl	80087fc <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 80048f2:	2002      	movs	r0, #2
 80048f4:	f7fc fcfc 	bl	80012f0 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 80048f8:	4b4a      	ldr	r3, [pc, #296]	; (8004a24 <menu+0x35f0>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b22      	cmp	r3, #34	; 0x22
 80048fe:	d12e      	bne.n	800495e <menu+0x352a>
		calismaSayModu = 0;
 8004900:	4b49      	ldr	r3, [pc, #292]	; (8004a28 <menu+0x35f4>)
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004906:	2001      	movs	r0, #1
 8004908:	f003 fa6e 	bl	8007de8 <lcd_backlight>

		convertArrays(3);
 800490c:	2003      	movs	r0, #3
 800490e:	f7fb ff13 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004912:	2032      	movs	r0, #50	; 0x32
 8004914:	f003 ff72 	bl	80087fc <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8004918:	2003      	movs	r0, #3
 800491a:	f7fc fce9 	bl	80012f0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800491e:	2102      	movs	r1, #2
 8004920:	483b      	ldr	r0, [pc, #236]	; (8004a10 <menu+0x35dc>)
 8004922:	f004 fd3b 	bl	800939c <HAL_GPIO_ReadPin>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d118      	bne.n	800495e <menu+0x352a>
 800492c:	2104      	movs	r1, #4
 800492e:	4838      	ldr	r0, [pc, #224]	; (8004a10 <menu+0x35dc>)
 8004930:	f004 fd34 	bl	800939c <HAL_GPIO_ReadPin>
 8004934:	4603      	mov	r3, r0
 8004936:	2b01      	cmp	r3, #1
 8004938:	d111      	bne.n	800495e <menu+0x352a>
 800493a:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <menu+0x35e0>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	f083 0301 	eor.w	r3, r3, #1
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <menu+0x352a>
			takeWifiPass();
 8004948:	f002 fd2a 	bl	80073a0 <takeWifiPass>

			convertArrays(3);
 800494c:	2003      	movs	r0, #3
 800494e:	f7fb fef3 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004952:	2032      	movs	r0, #50	; 0x32
 8004954:	f003 ff52 	bl	80087fc <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8004958:	2003      	movs	r0, #3
 800495a:	f7fc fcc9 	bl	80012f0 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 800495e:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <menu+0x35f0>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b23      	cmp	r3, #35	; 0x23
 8004964:	d14d      	bne.n	8004a02 <menu+0x35ce>
		if(dilSecim == 0) {
 8004966:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <menu+0x35d4>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <menu+0x3550>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800496e:	4a2f      	ldr	r2, [pc, #188]	; (8004a2c <menu+0x35f8>)
 8004970:	2101      	movs	r1, #1
 8004972:	2001      	movs	r0, #1
 8004974:	f003 f9ec 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004978:	4a2d      	ldr	r2, [pc, #180]	; (8004a30 <menu+0x35fc>)
 800497a:	2101      	movs	r1, #1
 800497c:	2002      	movs	r0, #2
 800497e:	f003 f9e7 	bl	8007d50 <lcd_print>
 8004982:	e00d      	b.n	80049a0 <menu+0x356c>
		} else if(dilSecim == 1) {
 8004984:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <menu+0x35d4>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d109      	bne.n	80049a0 <menu+0x356c>
			lcd_print(1, 1, " EXIT THE MENU  ");
 800498c:	4a29      	ldr	r2, [pc, #164]	; (8004a34 <menu+0x3600>)
 800498e:	2101      	movs	r1, #1
 8004990:	2001      	movs	r0, #1
 8004992:	f003 f9dd 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004996:	4a28      	ldr	r2, [pc, #160]	; (8004a38 <menu+0x3604>)
 8004998:	2101      	movs	r1, #1
 800499a:	2002      	movs	r0, #2
 800499c:	f003 f9d8 	bl	8007d50 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80049a0:	2108      	movs	r1, #8
 80049a2:	481b      	ldr	r0, [pc, #108]	; (8004a10 <menu+0x35dc>)
 80049a4:	f004 fcfa 	bl	800939c <HAL_GPIO_ReadPin>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d129      	bne.n	8004a02 <menu+0x35ce>
			menuGiris = 0;
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <menu+0x3608>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80049b4:	bf00      	nop
 80049b6:	4822      	ldr	r0, [pc, #136]	; (8004a40 <menu+0x360c>)
 80049b8:	f005 fb19 	bl	8009fee <HAL_I2C_GetError>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d0f9      	beq.n	80049b6 <menu+0x3582>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80049c2:	bf00      	nop
 80049c4:	481e      	ldr	r0, [pc, #120]	; (8004a40 <menu+0x360c>)
 80049c6:	f005 fb05 	bl	8009fd4 <HAL_I2C_GetState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d1f9      	bne.n	80049c4 <menu+0x3590>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80049d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80049d4:	9302      	str	r3, [sp, #8]
 80049d6:	236e      	movs	r3, #110	; 0x6e
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <menu+0x35e8>)
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	236e      	movs	r3, #110	; 0x6e
 80049e0:	2200      	movs	r2, #0
 80049e2:	21a0      	movs	r1, #160	; 0xa0
 80049e4:	4816      	ldr	r0, [pc, #88]	; (8004a40 <menu+0x360c>)
 80049e6:	f004 ff93 	bl	8009910 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80049ea:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80049ee:	f003 ff05 	bl	80087fc <HAL_Delay>

			lcd_clear();
 80049f2:	f003 f9d9 	bl	8007da8 <lcd_clear>
			HAL_Delay(500);
 80049f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049fa:	f003 feff 	bl	80087fc <HAL_Delay>
			NVIC_SystemReset();
 80049fe:	f7fc fd03 	bl	8001408 <__NVIC_SystemReset>
		}
	}
}
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	2000020d 	.word	0x2000020d
 8004a0c:	0800d438 	.word	0x0800d438
 8004a10:	40010800 	.word	0x40010800
 8004a14:	2000021b 	.word	0x2000021b
 8004a18:	2000020b 	.word	0x2000020b
 8004a1c:	20000118 	.word	0x20000118
 8004a20:	20000218 	.word	0x20000218
 8004a24:	200001ec 	.word	0x200001ec
 8004a28:	2000020c 	.word	0x2000020c
 8004a2c:	0800db80 	.word	0x0800db80
 8004a30:	0800db94 	.word	0x0800db94
 8004a34:	0800dba8 	.word	0x0800dba8
 8004a38:	0800dbbc 	.word	0x0800dbbc
 8004a3c:	20000209 	.word	0x20000209
 8004a40:	20000374 	.word	0x20000374

08004a44 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <lcdUpdate+0x9c>)
 8004a56:	2101      	movs	r1, #1
 8004a58:	2002      	movs	r0, #2
 8004a5a:	f003 f979 	bl	8007d50 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a5e:	e03b      	b.n	8004ad8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d105      	bne.n	8004a72 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a66:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <lcdUpdate+0x9c>)
 8004a68:	2102      	movs	r1, #2
 8004a6a:	2002      	movs	r0, #2
 8004a6c:	f003 f970 	bl	8007d50 <lcd_print>
}
 8004a70:	e032      	b.n	8004ad8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d105      	bne.n	8004a84 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <lcdUpdate+0x9c>)
 8004a7a:	2103      	movs	r1, #3
 8004a7c:	2002      	movs	r0, #2
 8004a7e:	f003 f967 	bl	8007d50 <lcd_print>
}
 8004a82:	e029      	b.n	8004ad8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d105      	bne.n	8004a96 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a8a:	4a15      	ldr	r2, [pc, #84]	; (8004ae0 <lcdUpdate+0x9c>)
 8004a8c:	2104      	movs	r1, #4
 8004a8e:	2002      	movs	r0, #2
 8004a90:	f003 f95e 	bl	8007d50 <lcd_print>
}
 8004a94:	e020      	b.n	8004ad8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	d105      	bne.n	8004aa8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004a9c:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <lcdUpdate+0x9c>)
 8004a9e:	2105      	movs	r1, #5
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f003 f955 	bl	8007d50 <lcd_print>
}
 8004aa6:	e017      	b.n	8004ad8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	2b06      	cmp	r3, #6
 8004aac:	d105      	bne.n	8004aba <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004aae:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <lcdUpdate+0x9c>)
 8004ab0:	2106      	movs	r1, #6
 8004ab2:	2002      	movs	r0, #2
 8004ab4:	f003 f94c 	bl	8007d50 <lcd_print>
}
 8004ab8:	e00e      	b.n	8004ad8 <lcdUpdate+0x94>
	} else if (y==7) {
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d10b      	bne.n	8004ad8 <lcdUpdate+0x94>
		lcd_clear();
 8004ac0:	f003 f972 	bl	8007da8 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004ac4:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <lcdUpdate+0xa0>)
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	2001      	movs	r0, #1
 8004aca:	f003 f941 	bl	8007d50 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004ace:	4a06      	ldr	r2, [pc, #24]	; (8004ae8 <lcdUpdate+0xa4>)
 8004ad0:	2106      	movs	r1, #6
 8004ad2:	2002      	movs	r0, #2
 8004ad4:	f003 f93c 	bl	8007d50 <lcd_print>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	0800dbd0 	.word	0x0800dbd0
 8004ae4:	0800dbd4 	.word	0x0800dbd4
 8004ae8:	0800dbdc 	.word	0x0800dbdc

08004aec <bekle>:

void bekle() {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
	timer1=millis;
 8004af0:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <bekle+0x124>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a47      	ldr	r2, [pc, #284]	; (8004c14 <bekle+0x128>)
 8004af6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004af8:	e002      	b.n	8004b00 <bekle+0x14>
    	butonKontrol = 1;
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <bekle+0x12c>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b00:	2101      	movs	r1, #1
 8004b02:	4846      	ldr	r0, [pc, #280]	; (8004c1c <bekle+0x130>)
 8004b04:	f004 fc4a 	bl	800939c <HAL_GPIO_ReadPin>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d109      	bne.n	8004b22 <bekle+0x36>
 8004b0e:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <bekle+0x124>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b40      	ldr	r3, [pc, #256]	; (8004c14 <bekle+0x128>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d0ef      	beq.n	8004afa <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b1a:	e002      	b.n	8004b22 <bekle+0x36>
    	butonKontrol = 1;
 8004b1c:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <bekle+0x12c>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b22:	2108      	movs	r1, #8
 8004b24:	483e      	ldr	r0, [pc, #248]	; (8004c20 <bekle+0x134>)
 8004b26:	f004 fc39 	bl	800939c <HAL_GPIO_ReadPin>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d109      	bne.n	8004b44 <bekle+0x58>
 8004b30:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <bekle+0x124>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <bekle+0x128>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d0ef      	beq.n	8004b1c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b3c:	e002      	b.n	8004b44 <bekle+0x58>
    	butonKontrol = 1;
 8004b3e:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <bekle+0x12c>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b44:	2102      	movs	r1, #2
 8004b46:	4835      	ldr	r0, [pc, #212]	; (8004c1c <bekle+0x130>)
 8004b48:	f004 fc28 	bl	800939c <HAL_GPIO_ReadPin>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d109      	bne.n	8004b66 <bekle+0x7a>
 8004b52:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <bekle+0x124>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b2f      	ldr	r3, [pc, #188]	; (8004c14 <bekle+0x128>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d0ef      	beq.n	8004b3e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b5e:	e002      	b.n	8004b66 <bekle+0x7a>
    	butonKontrol = 1;
 8004b60:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <bekle+0x12c>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b66:	2104      	movs	r1, #4
 8004b68:	482c      	ldr	r0, [pc, #176]	; (8004c1c <bekle+0x130>)
 8004b6a:	f004 fc17 	bl	800939c <HAL_GPIO_ReadPin>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d109      	bne.n	8004b88 <bekle+0x9c>
 8004b74:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <bekle+0x124>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <bekle+0x128>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d0ef      	beq.n	8004b60 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b80:	e002      	b.n	8004b88 <bekle+0x9c>
    	butonKontrol = 1;
 8004b82:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <bekle+0x12c>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b88:	2108      	movs	r1, #8
 8004b8a:	4824      	ldr	r0, [pc, #144]	; (8004c1c <bekle+0x130>)
 8004b8c:	f004 fc06 	bl	800939c <HAL_GPIO_ReadPin>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d109      	bne.n	8004baa <bekle+0xbe>
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <bekle+0x124>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <bekle+0x128>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d0ef      	beq.n	8004b82 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ba2:	e002      	b.n	8004baa <bekle+0xbe>
    	butonKontrol = 1;
 8004ba4:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <bekle+0x12c>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	481c      	ldr	r0, [pc, #112]	; (8004c20 <bekle+0x134>)
 8004bae:	f004 fbf5 	bl	800939c <HAL_GPIO_ReadPin>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <bekle+0xe0>
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <bekle+0x124>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <bekle+0x128>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d0ef      	beq.n	8004ba4 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bc4:	e002      	b.n	8004bcc <bekle+0xe0>
    	butonKontrol = 1;
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <bekle+0x12c>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bd0:	4813      	ldr	r0, [pc, #76]	; (8004c20 <bekle+0x134>)
 8004bd2:	f004 fbe3 	bl	800939c <HAL_GPIO_ReadPin>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <bekle+0x104>
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <bekle+0x124>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <bekle+0x128>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d0ee      	beq.n	8004bc6 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004be8:	e002      	b.n	8004bf0 <bekle+0x104>
    	butonKontrol = 1;
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <bekle+0x12c>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bf4:	480a      	ldr	r0, [pc, #40]	; (8004c20 <bekle+0x134>)
 8004bf6:	f004 fbd1 	bl	800939c <HAL_GPIO_ReadPin>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <bekle+0x120>
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <bekle+0x124>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <bekle+0x128>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d0ee      	beq.n	8004bea <bekle+0xfe>
    }

}
 8004c0c:	bf00      	nop
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	200001c8 	.word	0x200001c8
 8004c14:	200001d0 	.word	0x200001d0
 8004c18:	2000021b 	.word	0x2000021b
 8004c1c:	40010800 	.word	0x40010800
 8004c20:	40011000 	.word	0x40011000

08004c24 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004c28:	2101      	movs	r1, #1
 8004c2a:	4815      	ldr	r0, [pc, #84]	; (8004c80 <buttonCheck+0x5c>)
 8004c2c:	f004 fbb6 	bl	800939c <HAL_GPIO_ReadPin>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d01b      	beq.n	8004c6e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004c36:	2108      	movs	r1, #8
 8004c38:	4812      	ldr	r0, [pc, #72]	; (8004c84 <buttonCheck+0x60>)
 8004c3a:	f004 fbaf 	bl	800939c <HAL_GPIO_ReadPin>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d014      	beq.n	8004c6e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004c44:	2102      	movs	r1, #2
 8004c46:	480e      	ldr	r0, [pc, #56]	; (8004c80 <buttonCheck+0x5c>)
 8004c48:	f004 fba8 	bl	800939c <HAL_GPIO_ReadPin>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d00d      	beq.n	8004c6e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004c52:	2104      	movs	r1, #4
 8004c54:	480a      	ldr	r0, [pc, #40]	; (8004c80 <buttonCheck+0x5c>)
 8004c56:	f004 fba1 	bl	800939c <HAL_GPIO_ReadPin>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d006      	beq.n	8004c6e <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004c60:	2108      	movs	r1, #8
 8004c62:	4807      	ldr	r0, [pc, #28]	; (8004c80 <buttonCheck+0x5c>)
 8004c64:	f004 fb9a 	bl	800939c <HAL_GPIO_ReadPin>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d104      	bne.n	8004c78 <buttonCheck+0x54>
		backLightTimer = 0;
 8004c6e:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <buttonCheck+0x64>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
		return 1;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <buttonCheck+0x56>
	}
	return 0;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40010800 	.word	0x40010800
 8004c84:	40011000 	.word	0x40011000
 8004c88:	200001e4 	.word	0x200001e4

08004c8c <checkLCDBacklight>:

void checkLCDBacklight() {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <checkLCDBacklight+0x24>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <checkLCDBacklight+0x28>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b3b      	cmp	r3, #59	; 0x3b
 8004c9c:	d903      	bls.n	8004ca6 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f003 f8a2 	bl	8007de8 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004ca4:	e002      	b.n	8004cac <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f003 f89e 	bl	8007de8 <lcd_backlight>
}
 8004cac:	bf00      	nop
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200001c8 	.word	0x200001c8
 8004cb4:	200001e4 	.word	0x200001e4

08004cb8 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <checkBasincSalteri+0x54>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <checkBasincSalteri+0x12>
		basincVar=1;
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <checkBasincSalteri+0x58>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004cca:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <checkBasincSalteri+0x54>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d119      	bne.n	8004d06 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004cd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cd6:	480f      	ldr	r0, [pc, #60]	; (8004d14 <checkBasincSalteri+0x5c>)
 8004cd8:	f004 fb60 	bl	800939c <HAL_GPIO_ReadPin>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <checkBasincSalteri+0x60>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <checkBasincSalteri+0x64>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d90a      	bls.n	8004d06 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <checkBasincSalteri+0x58>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004cf6:	e006      	b.n	8004d06 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <checkBasincSalteri+0x60>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <checkBasincSalteri+0x64>)
 8004cfe:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <checkBasincSalteri+0x58>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200001f3 	.word	0x200001f3
 8004d10:	200001ef 	.word	0x200001ef
 8004d14:	40011000 	.word	0x40011000
 8004d18:	200001c8 	.word	0x200001c8
 8004d1c:	200001e0 	.word	0x200001e0

08004d20 <checkBasGonder>:

void checkBasGonder() {
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <checkBasGonder+0x74>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d10b      	bne.n	8004d44 <checkBasGonder+0x24>
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <checkBasGonder+0x78>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <checkBasGonder+0x24>
 8004d34:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <checkBasGonder+0x7c>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <checkBasGonder+0x80>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e009      	b.n	8004d58 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004d44:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <checkBasGonder+0x78>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f083 0301 	eor.w	r3, r3, #1
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <checkBasGonder+0x80>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d58:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <checkBasGonder+0x74>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10b      	bne.n	8004d78 <checkBasGonder+0x58>
 8004d60:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <checkBasGonder+0x84>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <checkBasGonder+0x58>
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <checkBasGonder+0x7c>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <checkBasGonder+0x88>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004d76:	e009      	b.n	8004d8c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <checkBasGonder+0x84>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f083 0301 	eor.w	r3, r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <checkBasGonder+0x88>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	200001ed 	.word	0x200001ed
 8004d98:	20000221 	.word	0x20000221
 8004d9c:	200001fb 	.word	0x200001fb
 8004da0:	20000228 	.word	0x20000228
 8004da4:	20000224 	.word	0x20000224
 8004da8:	20000229 	.word	0x20000229

08004dac <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004db0:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <checkKapiSecimleri+0x98>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004db8:	4b23      	ldr	r3, [pc, #140]	; (8004e48 <checkKapiSecimleri+0x9c>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <checkKapiSecimleri+0x98>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d10e      	bne.n	8004de4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dca:	4820      	ldr	r0, [pc, #128]	; (8004e4c <checkKapiSecimleri+0xa0>)
 8004dcc:	f004 fae6 	bl	800939c <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <checkKapiSecimleri+0x9c>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e002      	b.n	8004de4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004dde:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <checkKapiSecimleri+0x9c>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <checkKapiSecimleri+0x98>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d10e      	bne.n	8004e0a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004df0:	4816      	ldr	r0, [pc, #88]	; (8004e4c <checkKapiSecimleri+0xa0>)
 8004df2:	f004 fad3 	bl	800939c <HAL_GPIO_ReadPin>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d103      	bne.n	8004e04 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <checkKapiSecimleri+0x9c>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	e002      	b.n	8004e0a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004e04:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <checkKapiSecimleri+0x9c>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <checkKapiSecimleri+0x98>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d116      	bne.n	8004e40 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004e12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e16:	480d      	ldr	r0, [pc, #52]	; (8004e4c <checkKapiSecimleri+0xa0>)
 8004e18:	f004 fac0 	bl	800939c <HAL_GPIO_ReadPin>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <checkKapiSecimleri+0x8e>
 8004e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e26:	4809      	ldr	r0, [pc, #36]	; (8004e4c <checkKapiSecimleri+0xa0>)
 8004e28:	f004 fab8 	bl	800939c <HAL_GPIO_ReadPin>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d103      	bne.n	8004e3a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <checkKapiSecimleri+0x9c>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004e38:	e002      	b.n	8004e40 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004e3a:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <checkKapiSecimleri+0x9c>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
}
 8004e40:	bf00      	nop
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200001f4 	.word	0x200001f4
 8004e48:	2000023f 	.word	0x2000023f
 8004e4c:	40010800 	.word	0x40010800

08004e50 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004e54:	4b62      	ldr	r3, [pc, #392]	; (8004fe0 <checkAktifCalisma+0x190>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f041 833e 	bne.w	80064da <checkAktifCalisma+0x168a>
 8004e5e:	4b61      	ldr	r3, [pc, #388]	; (8004fe4 <checkAktifCalisma+0x194>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f041 8339 	bne.w	80064da <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004e68:	4b5f      	ldr	r3, [pc, #380]	; (8004fe8 <checkAktifCalisma+0x198>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11a      	bne.n	8004ea6 <checkAktifCalisma+0x56>
 8004e70:	4b5e      	ldr	r3, [pc, #376]	; (8004fec <checkAktifCalisma+0x19c>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d116      	bne.n	8004ea6 <checkAktifCalisma+0x56>
 8004e78:	4b5d      	ldr	r3, [pc, #372]	; (8004ff0 <checkAktifCalisma+0x1a0>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <checkAktifCalisma+0x46>
 8004e80:	4b5c      	ldr	r3, [pc, #368]	; (8004ff4 <checkAktifCalisma+0x1a4>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	f083 0301 	eor.w	r3, r3, #1
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <checkAktifCalisma+0x46>
 8004e8e:	4b5a      	ldr	r3, [pc, #360]	; (8004ff8 <checkAktifCalisma+0x1a8>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d007      	beq.n	8004ea6 <checkAktifCalisma+0x56>
 8004e96:	4b59      	ldr	r3, [pc, #356]	; (8004ffc <checkAktifCalisma+0x1ac>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <checkAktifCalisma+0x80>
 8004e9e:	4b58      	ldr	r3, [pc, #352]	; (8005000 <checkAktifCalisma+0x1b0>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d114      	bne.n	8004ed0 <checkAktifCalisma+0x80>
 8004ea6:	4b57      	ldr	r3, [pc, #348]	; (8005004 <checkAktifCalisma+0x1b4>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <checkAktifCalisma+0x80>
 8004eae:	4b56      	ldr	r3, [pc, #344]	; (8005008 <checkAktifCalisma+0x1b8>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ebc:	4853      	ldr	r0, [pc, #332]	; (800500c <checkAktifCalisma+0x1bc>)
 8004ebe:	f004 fa84 	bl	80093ca <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004ec2:	4b53      	ldr	r3, [pc, #332]	; (8005010 <checkAktifCalisma+0x1c0>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004ec8:	4b52      	ldr	r3, [pc, #328]	; (8005014 <checkAktifCalisma+0x1c4>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e008      	b.n	8004ee2 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ed6:	484d      	ldr	r0, [pc, #308]	; (800500c <checkAktifCalisma+0x1bc>)
 8004ed8:	f004 fa77 	bl	80093ca <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004edc:	4b4c      	ldr	r3, [pc, #304]	; (8005010 <checkAktifCalisma+0x1c0>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004ee2:	4b40      	ldr	r3, [pc, #256]	; (8004fe4 <checkAktifCalisma+0x194>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d160      	bne.n	8004fac <checkAktifCalisma+0x15c>
 8004eea:	4b46      	ldr	r3, [pc, #280]	; (8005004 <checkAktifCalisma+0x1b4>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d05c      	beq.n	8004fac <checkAktifCalisma+0x15c>
 8004ef2:	4b45      	ldr	r3, [pc, #276]	; (8005008 <checkAktifCalisma+0x1b8>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d058      	beq.n	8004fac <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004efe:	4843      	ldr	r0, [pc, #268]	; (800500c <checkAktifCalisma+0x1bc>)
 8004f00:	f004 fa4c 	bl	800939c <HAL_GPIO_ReadPin>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <checkAktifCalisma+0xc2>
 8004f0a:	4b43      	ldr	r3, [pc, #268]	; (8005018 <checkAktifCalisma+0x1c8>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d04c      	beq.n	8004fac <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f12:	2102      	movs	r1, #2
 8004f14:	4841      	ldr	r0, [pc, #260]	; (800501c <checkAktifCalisma+0x1cc>)
 8004f16:	f004 fa41 	bl	800939c <HAL_GPIO_ReadPin>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d145      	bne.n	8004fac <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004f20:	4b3f      	ldr	r3, [pc, #252]	; (8005020 <checkAktifCalisma+0x1d0>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d041      	beq.n	8004fac <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004f28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f2c:	4837      	ldr	r0, [pc, #220]	; (800500c <checkAktifCalisma+0x1bc>)
 8004f2e:	f004 fa35 	bl	800939c <HAL_GPIO_ReadPin>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d10e      	bne.n	8004f56 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f3c:	4833      	ldr	r0, [pc, #204]	; (800500c <checkAktifCalisma+0x1bc>)
 8004f3e:	f004 fa2d 	bl	800939c <HAL_GPIO_ReadPin>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d106      	bne.n	8004f56 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004f48:	2140      	movs	r1, #64	; 0x40
 8004f4a:	4834      	ldr	r0, [pc, #208]	; (800501c <checkAktifCalisma+0x1cc>)
 8004f4c:	f004 fa26 	bl	800939c <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d003      	beq.n	8004f5e <checkAktifCalisma+0x10e>
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <checkAktifCalisma+0x198>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d026      	beq.n	8004fac <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <checkAktifCalisma+0x1a0>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	f083 0301 	eor.w	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01f      	beq.n	8004fac <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	; (8004fec <checkAktifCalisma+0x19c>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f083 0301 	eor.w	r3, r3, #1
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004f7a:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <checkAktifCalisma+0x1ac>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	f083 0301 	eor.w	r3, r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004f88:	4b26      	ldr	r3, [pc, #152]	; (8005024 <checkAktifCalisma+0x1d4>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f083 0301 	eor.w	r3, r3, #1
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <checkAktifCalisma+0x1d8>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	f083 0301 	eor.w	r3, r3, #1
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004fa4:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <checkAktifCalisma+0x198>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <checkAktifCalisma+0x198>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <checkAktifCalisma+0x198>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d03a      	beq.n	8005030 <checkAktifCalisma+0x1e0>
 8004fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fbe:	4817      	ldr	r0, [pc, #92]	; (800501c <checkAktifCalisma+0x1cc>)
 8004fc0:	f004 f9ec 	bl	800939c <HAL_GPIO_ReadPin>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d132      	bne.n	8005030 <checkAktifCalisma+0x1e0>
 8004fca:	4b18      	ldr	r3, [pc, #96]	; (800502c <checkAktifCalisma+0x1dc>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02e      	beq.n	8005030 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fd8:	480c      	ldr	r0, [pc, #48]	; (800500c <checkAktifCalisma+0x1bc>)
 8004fda:	f004 f9f6 	bl	80093ca <HAL_GPIO_WritePin>
 8004fde:	e02d      	b.n	800503c <checkAktifCalisma+0x1ec>
 8004fe0:	2000020a 	.word	0x2000020a
 8004fe4:	20000209 	.word	0x20000209
 8004fe8:	20000221 	.word	0x20000221
 8004fec:	20000222 	.word	0x20000222
 8004ff0:	20000224 	.word	0x20000224
 8004ff4:	2000021c 	.word	0x2000021c
 8004ff8:	200001ff 	.word	0x200001ff
 8004ffc:	20000223 	.word	0x20000223
 8005000:	200001fe 	.word	0x200001fe
 8005004:	2000023e 	.word	0x2000023e
 8005008:	2000023f 	.word	0x2000023f
 800500c:	40010c00 	.word	0x40010c00
 8005010:	20000240 	.word	0x20000240
 8005014:	2000022b 	.word	0x2000022b
 8005018:	20000228 	.word	0x20000228
 800501c:	40011000 	.word	0x40011000
 8005020:	200001ef 	.word	0x200001ef
 8005024:	20000226 	.word	0x20000226
 8005028:	20000227 	.word	0x20000227
 800502c:	200001fa 	.word	0x200001fa
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005036:	4860      	ldr	r0, [pc, #384]	; (80051b8 <checkAktifCalisma+0x368>)
 8005038:	f004 f9c7 	bl	80093ca <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800503c:	4b5f      	ldr	r3, [pc, #380]	; (80051bc <checkAktifCalisma+0x36c>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <checkAktifCalisma+0x21c>
 8005044:	4b5e      	ldr	r3, [pc, #376]	; (80051c0 <checkAktifCalisma+0x370>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d007      	beq.n	800505c <checkAktifCalisma+0x20c>
 800504c:	4b5c      	ldr	r3, [pc, #368]	; (80051c0 <checkAktifCalisma+0x370>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d003      	beq.n	800505c <checkAktifCalisma+0x20c>
 8005054:	4b5b      	ldr	r3, [pc, #364]	; (80051c4 <checkAktifCalisma+0x374>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800505c:	2201      	movs	r2, #1
 800505e:	2104      	movs	r1, #4
 8005060:	4855      	ldr	r0, [pc, #340]	; (80051b8 <checkAktifCalisma+0x368>)
 8005062:	f004 f9b2 	bl	80093ca <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005066:	4b58      	ldr	r3, [pc, #352]	; (80051c8 <checkAktifCalisma+0x378>)
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800506c:	4b56      	ldr	r3, [pc, #344]	; (80051c8 <checkAktifCalisma+0x378>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02f      	beq.n	80050d4 <checkAktifCalisma+0x284>
 8005074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005078:	484f      	ldr	r0, [pc, #316]	; (80051b8 <checkAktifCalisma+0x368>)
 800507a:	f004 f98f 	bl	800939c <HAL_GPIO_ReadPin>
 800507e:	4603      	mov	r3, r0
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <checkAktifCalisma+0x242>
 8005084:	4b51      	ldr	r3, [pc, #324]	; (80051cc <checkAktifCalisma+0x37c>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f083 0301 	eor.w	r3, r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <checkAktifCalisma+0x250>
 8005092:	2102      	movs	r1, #2
 8005094:	484e      	ldr	r0, [pc, #312]	; (80051d0 <checkAktifCalisma+0x380>)
 8005096:	f004 f981 	bl	800939c <HAL_GPIO_ReadPin>
 800509a:	4603      	mov	r3, r0
 800509c:	2b01      	cmp	r3, #1
 800509e:	d119      	bne.n	80050d4 <checkAktifCalisma+0x284>
 80050a0:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <checkAktifCalisma+0x384>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d015      	beq.n	80050d4 <checkAktifCalisma+0x284>
 80050a8:	4b4b      	ldr	r3, [pc, #300]	; (80051d8 <checkAktifCalisma+0x388>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d011      	beq.n	80050d4 <checkAktifCalisma+0x284>
 80050b0:	4b4a      	ldr	r3, [pc, #296]	; (80051dc <checkAktifCalisma+0x38c>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <checkAktifCalisma+0x284>
 80050b8:	4b49      	ldr	r3, [pc, #292]	; (80051e0 <checkAktifCalisma+0x390>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f083 0301 	eor.w	r3, r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <checkAktifCalisma+0x284>
			timer2=millis;
 80050c6:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <checkAktifCalisma+0x394>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a47      	ldr	r2, [pc, #284]	; (80051e8 <checkAktifCalisma+0x398>)
 80050cc:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80050ce:	4b44      	ldr	r3, [pc, #272]	; (80051e0 <checkAktifCalisma+0x390>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80050d4:	4b43      	ldr	r3, [pc, #268]	; (80051e4 <checkAktifCalisma+0x394>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b43      	ldr	r3, [pc, #268]	; (80051e8 <checkAktifCalisma+0x398>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	4a43      	ldr	r2, [pc, #268]	; (80051ec <checkAktifCalisma+0x39c>)
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d303      	bcc.n	80050ee <checkAktifCalisma+0x29e>
 80050e6:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <checkAktifCalisma+0x390>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d111      	bne.n	8005112 <checkAktifCalisma+0x2c2>
 80050ee:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <checkAktifCalisma+0x384>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f083 0301 	eor.w	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <checkAktifCalisma+0x2c2>
 80050fc:	4b36      	ldr	r3, [pc, #216]	; (80051d8 <checkAktifCalisma+0x388>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f083 0301 	eor.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <checkAktifCalisma+0x2c2>
 800510a:	4b34      	ldr	r3, [pc, #208]	; (80051dc <checkAktifCalisma+0x38c>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005112:	2200      	movs	r2, #0
 8005114:	2104      	movs	r1, #4
 8005116:	4828      	ldr	r0, [pc, #160]	; (80051b8 <checkAktifCalisma+0x368>)
 8005118:	f004 f957 	bl	80093ca <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800511c:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <checkAktifCalisma+0x378>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005122:	4b2f      	ldr	r3, [pc, #188]	; (80051e0 <checkAktifCalisma+0x390>)
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <checkAktifCalisma+0x3a0>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d102      	bne.n	8005136 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005130:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <checkAktifCalisma+0x3a4>)
 8005132:	2201      	movs	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005136:	4b2e      	ldr	r3, [pc, #184]	; (80051f0 <checkAktifCalisma+0x3a0>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d116      	bne.n	800516c <checkAktifCalisma+0x31c>
 800513e:	4b2e      	ldr	r3, [pc, #184]	; (80051f8 <checkAktifCalisma+0x3a8>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d112      	bne.n	800516c <checkAktifCalisma+0x31c>
 8005146:	2101      	movs	r1, #1
 8005148:	4821      	ldr	r0, [pc, #132]	; (80051d0 <checkAktifCalisma+0x380>)
 800514a:	f004 f927 	bl	800939c <HAL_GPIO_ReadPin>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <checkAktifCalisma+0x31c>
 8005154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005158:	4817      	ldr	r0, [pc, #92]	; (80051b8 <checkAktifCalisma+0x368>)
 800515a:	f004 f91f 	bl	800939c <HAL_GPIO_ReadPin>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005164:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <checkAktifCalisma+0x3a4>)
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	e011      	b.n	8005190 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800516c:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <checkAktifCalisma+0x3a0>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10d      	bne.n	8005190 <checkAktifCalisma+0x340>
 8005174:	2101      	movs	r1, #1
 8005176:	4816      	ldr	r0, [pc, #88]	; (80051d0 <checkAktifCalisma+0x380>)
 8005178:	f004 f910 	bl	800939c <HAL_GPIO_ReadPin>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d106      	bne.n	8005190 <checkAktifCalisma+0x340>
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <checkAktifCalisma+0x3a8>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d102      	bne.n	8005190 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800518a:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <checkAktifCalisma+0x3a4>)
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <checkAktifCalisma+0x3a0>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d134      	bne.n	8005202 <checkAktifCalisma+0x3b2>
 8005198:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <checkAktifCalisma+0x3a8>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d130      	bne.n	8005202 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80051a0:	2101      	movs	r1, #1
 80051a2:	480b      	ldr	r0, [pc, #44]	; (80051d0 <checkAktifCalisma+0x380>)
 80051a4:	f004 f8fa 	bl	800939c <HAL_GPIO_ReadPin>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d126      	bne.n	80051fc <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <checkAktifCalisma+0x3a4>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	e025      	b.n	8005202 <checkAktifCalisma+0x3b2>
 80051b6:	bf00      	nop
 80051b8:	40010c00 	.word	0x40010c00
 80051bc:	20000221 	.word	0x20000221
 80051c0:	200001fb 	.word	0x200001fb
 80051c4:	200001ff 	.word	0x200001ff
 80051c8:	20000225 	.word	0x20000225
 80051cc:	20000228 	.word	0x20000228
 80051d0:	40011000 	.word	0x40011000
 80051d4:	2000023e 	.word	0x2000023e
 80051d8:	2000023f 	.word	0x2000023f
 80051dc:	200001ef 	.word	0x200001ef
 80051e0:	2000021d 	.word	0x2000021d
 80051e4:	200001c8 	.word	0x200001c8
 80051e8:	200001d4 	.word	0x200001d4
 80051ec:	20000200 	.word	0x20000200
 80051f0:	200001f0 	.word	0x200001f0
 80051f4:	20000243 	.word	0x20000243
 80051f8:	200001ed 	.word	0x200001ed
			} else {
				cerceveVar=0;
 80051fc:	4b7f      	ldr	r3, [pc, #508]	; (80053fc <checkAktifCalisma+0x5ac>)
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005202:	4b7f      	ldr	r3, [pc, #508]	; (8005400 <checkAktifCalisma+0x5b0>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d17c      	bne.n	8005304 <checkAktifCalisma+0x4b4>
 800520a:	4b7e      	ldr	r3, [pc, #504]	; (8005404 <checkAktifCalisma+0x5b4>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d078      	beq.n	8005304 <checkAktifCalisma+0x4b4>
 8005212:	4b7d      	ldr	r3, [pc, #500]	; (8005408 <checkAktifCalisma+0x5b8>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d074      	beq.n	8005304 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800521a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800521e:	487b      	ldr	r0, [pc, #492]	; (800540c <checkAktifCalisma+0x5bc>)
 8005220:	f004 f8bc 	bl	800939c <HAL_GPIO_ReadPin>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <checkAktifCalisma+0x3e2>
 800522a:	4b79      	ldr	r3, [pc, #484]	; (8005410 <checkAktifCalisma+0x5c0>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d068      	beq.n	8005304 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005232:	4b72      	ldr	r3, [pc, #456]	; (80053fc <checkAktifCalisma+0x5ac>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d064      	beq.n	8005304 <checkAktifCalisma+0x4b4>
 800523a:	4b76      	ldr	r3, [pc, #472]	; (8005414 <checkAktifCalisma+0x5c4>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f083 0301 	eor.w	r3, r3, #1
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d05d      	beq.n	8005304 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005248:	2104      	movs	r1, #4
 800524a:	4873      	ldr	r0, [pc, #460]	; (8005418 <checkAktifCalisma+0x5c8>)
 800524c:	f004 f8a6 	bl	800939c <HAL_GPIO_ReadPin>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <checkAktifCalisma+0x40e>
 8005256:	4b71      	ldr	r3, [pc, #452]	; (800541c <checkAktifCalisma+0x5cc>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d152      	bne.n	8005304 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800525e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005262:	486a      	ldr	r0, [pc, #424]	; (800540c <checkAktifCalisma+0x5bc>)
 8005264:	f004 f89a 	bl	800939c <HAL_GPIO_ReadPin>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10e      	bne.n	800528c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800526e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005272:	4866      	ldr	r0, [pc, #408]	; (800540c <checkAktifCalisma+0x5bc>)
 8005274:	f004 f892 	bl	800939c <HAL_GPIO_ReadPin>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d106      	bne.n	800528c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800527e:	2140      	movs	r1, #64	; 0x40
 8005280:	4865      	ldr	r0, [pc, #404]	; (8005418 <checkAktifCalisma+0x5c8>)
 8005282:	f004 f88b 	bl	800939c <HAL_GPIO_ReadPin>
 8005286:	4603      	mov	r3, r0
 8005288:	2b01      	cmp	r3, #1
 800528a:	d003      	beq.n	8005294 <checkAktifCalisma+0x444>
 800528c:	4b64      	ldr	r3, [pc, #400]	; (8005420 <checkAktifCalisma+0x5d0>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d037      	beq.n	8005304 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005294:	4b63      	ldr	r3, [pc, #396]	; (8005424 <checkAktifCalisma+0x5d4>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	f083 0301 	eor.w	r3, r3, #1
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d030      	beq.n	8005304 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80052a2:	4b61      	ldr	r3, [pc, #388]	; (8005428 <checkAktifCalisma+0x5d8>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	f083 0301 	eor.w	r3, r3, #1
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d029      	beq.n	8005304 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80052b0:	4b5e      	ldr	r3, [pc, #376]	; (800542c <checkAktifCalisma+0x5dc>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	f083 0301 	eor.w	r3, r3, #1
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d022      	beq.n	8005304 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80052be:	4b5c      	ldr	r3, [pc, #368]	; (8005430 <checkAktifCalisma+0x5e0>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f083 0301 	eor.w	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01b      	beq.n	8005304 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80052cc:	4b59      	ldr	r3, [pc, #356]	; (8005434 <checkAktifCalisma+0x5e4>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	f083 0301 	eor.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d014      	beq.n	8005304 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80052da:	4b57      	ldr	r3, [pc, #348]	; (8005438 <checkAktifCalisma+0x5e8>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f083 0301 	eor.w	r3, r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00d      	beq.n	8005304 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80052e8:	2201      	movs	r2, #1
 80052ea:	2102      	movs	r1, #2
 80052ec:	4847      	ldr	r0, [pc, #284]	; (800540c <checkAktifCalisma+0x5bc>)
 80052ee:	f004 f86c 	bl	80093ca <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80052f2:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <checkAktifCalisma+0x5d0>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80052f8:	4b50      	ldr	r3, [pc, #320]	; (800543c <checkAktifCalisma+0x5ec>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80052fe:	4b50      	ldr	r3, [pc, #320]	; (8005440 <checkAktifCalisma+0x5f0>)
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005304:	4b46      	ldr	r3, [pc, #280]	; (8005420 <checkAktifCalisma+0x5d0>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d033      	beq.n	8005374 <checkAktifCalisma+0x524>
 800530c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005310:	483e      	ldr	r0, [pc, #248]	; (800540c <checkAktifCalisma+0x5bc>)
 8005312:	f004 f843 	bl	800939c <HAL_GPIO_ReadPin>
 8005316:	4603      	mov	r3, r0
 8005318:	2b01      	cmp	r3, #1
 800531a:	d106      	bne.n	800532a <checkAktifCalisma+0x4da>
 800531c:	4b3c      	ldr	r3, [pc, #240]	; (8005410 <checkAktifCalisma+0x5c0>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f083 0301 	eor.w	r3, r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <checkAktifCalisma+0x4f0>
 800532a:	2104      	movs	r1, #4
 800532c:	483a      	ldr	r0, [pc, #232]	; (8005418 <checkAktifCalisma+0x5c8>)
 800532e:	f004 f835 	bl	800939c <HAL_GPIO_ReadPin>
 8005332:	4603      	mov	r3, r0
 8005334:	2b01      	cmp	r3, #1
 8005336:	d11d      	bne.n	8005374 <checkAktifCalisma+0x524>
 8005338:	4b38      	ldr	r3, [pc, #224]	; (800541c <checkAktifCalisma+0x5cc>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d019      	beq.n	8005374 <checkAktifCalisma+0x524>
 8005340:	4b30      	ldr	r3, [pc, #192]	; (8005404 <checkAktifCalisma+0x5b4>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d015      	beq.n	8005374 <checkAktifCalisma+0x524>
 8005348:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <checkAktifCalisma+0x5b8>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d011      	beq.n	8005374 <checkAktifCalisma+0x524>
 8005350:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <checkAktifCalisma+0x5ac>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00d      	beq.n	8005374 <checkAktifCalisma+0x524>
 8005358:	4b3a      	ldr	r3, [pc, #232]	; (8005444 <checkAktifCalisma+0x5f4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f083 0301 	eor.w	r3, r3, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d006      	beq.n	8005374 <checkAktifCalisma+0x524>
			timer2=millis;
 8005366:	4b38      	ldr	r3, [pc, #224]	; (8005448 <checkAktifCalisma+0x5f8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a38      	ldr	r2, [pc, #224]	; (800544c <checkAktifCalisma+0x5fc>)
 800536c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800536e:	4b35      	ldr	r3, [pc, #212]	; (8005444 <checkAktifCalisma+0x5f4>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005374:	4b34      	ldr	r3, [pc, #208]	; (8005448 <checkAktifCalisma+0x5f8>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4b34      	ldr	r3, [pc, #208]	; (800544c <checkAktifCalisma+0x5fc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	4a34      	ldr	r2, [pc, #208]	; (8005450 <checkAktifCalisma+0x600>)
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	4293      	cmp	r3, r2
 8005384:	d303      	bcc.n	800538e <checkAktifCalisma+0x53e>
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <checkAktifCalisma+0x5f4>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d114      	bne.n	80053b8 <checkAktifCalisma+0x568>
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <checkAktifCalisma+0x5b4>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	f083 0301 	eor.w	r3, r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10d      	bne.n	80053b8 <checkAktifCalisma+0x568>
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <checkAktifCalisma+0x5b8>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f083 0301 	eor.w	r3, r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <checkAktifCalisma+0x568>
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <checkAktifCalisma+0x5ac>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f083 0301 	eor.w	r3, r3, #1
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80053b8:	2200      	movs	r2, #0
 80053ba:	2102      	movs	r1, #2
 80053bc:	4813      	ldr	r0, [pc, #76]	; (800540c <checkAktifCalisma+0x5bc>)
 80053be:	f004 f804 	bl	80093ca <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80053c2:	4b17      	ldr	r3, [pc, #92]	; (8005420 <checkAktifCalisma+0x5d0>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80053c8:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <checkAktifCalisma+0x5f4>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80053ce:	4b14      	ldr	r3, [pc, #80]	; (8005420 <checkAktifCalisma+0x5d0>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d040      	beq.n	8005458 <checkAktifCalisma+0x608>
 80053d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053da:	480f      	ldr	r0, [pc, #60]	; (8005418 <checkAktifCalisma+0x5c8>)
 80053dc:	f003 ffde 	bl	800939c <HAL_GPIO_ReadPin>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d138      	bne.n	8005458 <checkAktifCalisma+0x608>
 80053e6:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <checkAktifCalisma+0x604>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d034      	beq.n	8005458 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80053ee:	2201      	movs	r2, #1
 80053f0:	2101      	movs	r1, #1
 80053f2:	4806      	ldr	r0, [pc, #24]	; (800540c <checkAktifCalisma+0x5bc>)
 80053f4:	f003 ffe9 	bl	80093ca <HAL_GPIO_WritePin>
 80053f8:	e033      	b.n	8005462 <checkAktifCalisma+0x612>
 80053fa:	bf00      	nop
 80053fc:	20000243 	.word	0x20000243
 8005400:	20000209 	.word	0x20000209
 8005404:	2000023e 	.word	0x2000023e
 8005408:	2000023f 	.word	0x2000023f
 800540c:	40010c00 	.word	0x40010c00
 8005410:	20000229 	.word	0x20000229
 8005414:	2000023d 	.word	0x2000023d
 8005418:	40011000 	.word	0x40011000
 800541c:	200001f2 	.word	0x200001f2
 8005420:	20000224 	.word	0x20000224
 8005424:	20000221 	.word	0x20000221
 8005428:	20000225 	.word	0x20000225
 800542c:	20000222 	.word	0x20000222
 8005430:	20000223 	.word	0x20000223
 8005434:	20000226 	.word	0x20000226
 8005438:	20000227 	.word	0x20000227
 800543c:	2000022c 	.word	0x2000022c
 8005440:	2000024d 	.word	0x2000024d
 8005444:	2000021c 	.word	0x2000021c
 8005448:	200001c8 	.word	0x200001c8
 800544c:	200001d4 	.word	0x200001d4
 8005450:	20000201 	.word	0x20000201
 8005454:	200001f1 	.word	0x200001f1
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005458:	2200      	movs	r2, #0
 800545a:	2101      	movs	r1, #1
 800545c:	4836      	ldr	r0, [pc, #216]	; (8005538 <checkAktifCalisma+0x6e8>)
 800545e:	f003 ffb4 	bl	80093ca <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005462:	4b36      	ldr	r3, [pc, #216]	; (800553c <checkAktifCalisma+0x6ec>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 8080 	bne.w	800556c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800546c:	4b34      	ldr	r3, [pc, #208]	; (8005540 <checkAktifCalisma+0x6f0>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d003      	beq.n	800547c <checkAktifCalisma+0x62c>
 8005474:	4b32      	ldr	r3, [pc, #200]	; (8005540 <checkAktifCalisma+0x6f0>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d177      	bne.n	800556c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 800547c:	4b31      	ldr	r3, [pc, #196]	; (8005544 <checkAktifCalisma+0x6f4>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d073      	beq.n	800556c <checkAktifCalisma+0x71c>
 8005484:	4b30      	ldr	r3, [pc, #192]	; (8005548 <checkAktifCalisma+0x6f8>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d06f      	beq.n	800556c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 800548c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005490:	4829      	ldr	r0, [pc, #164]	; (8005538 <checkAktifCalisma+0x6e8>)
 8005492:	f003 ff83 	bl	800939c <HAL_GPIO_ReadPin>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d167      	bne.n	800556c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 800549c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054a0:	482a      	ldr	r0, [pc, #168]	; (800554c <checkAktifCalisma+0x6fc>)
 80054a2:	f003 ff7b 	bl	800939c <HAL_GPIO_ReadPin>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <checkAktifCalisma+0x664>
 80054ac:	4b28      	ldr	r3, [pc, #160]	; (8005550 <checkAktifCalisma+0x700>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d15b      	bne.n	800556c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80054b4:	2140      	movs	r1, #64	; 0x40
 80054b6:	4825      	ldr	r0, [pc, #148]	; (800554c <checkAktifCalisma+0x6fc>)
 80054b8:	f003 ff70 	bl	800939c <HAL_GPIO_ReadPin>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10f      	bne.n	80054e2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80054c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054c6:	481c      	ldr	r0, [pc, #112]	; (8005538 <checkAktifCalisma+0x6e8>)
 80054c8:	f003 ff68 	bl	800939c <HAL_GPIO_ReadPin>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d107      	bne.n	80054e2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80054d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054d6:	4818      	ldr	r0, [pc, #96]	; (8005538 <checkAktifCalisma+0x6e8>)
 80054d8:	f003 ff60 	bl	800939c <HAL_GPIO_ReadPin>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d003      	beq.n	80054ea <checkAktifCalisma+0x69a>
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <checkAktifCalisma+0x704>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d040      	beq.n	800556c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <checkAktifCalisma+0x708>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f083 0301 	eor.w	r3, r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d039      	beq.n	800556c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80054f8:	4b18      	ldr	r3, [pc, #96]	; (800555c <checkAktifCalisma+0x70c>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	f083 0301 	eor.w	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d032      	beq.n	800556c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005506:	4b16      	ldr	r3, [pc, #88]	; (8005560 <checkAktifCalisma+0x710>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f083 0301 	eor.w	r3, r3, #1
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02b      	beq.n	800556c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <checkAktifCalisma+0x714>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	f083 0301 	eor.w	r3, r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d024      	beq.n	800556c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <checkAktifCalisma+0x718>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f083 0301 	eor.w	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01d      	beq.n	800556c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005530:	4b08      	ldr	r3, [pc, #32]	; (8005554 <checkAktifCalisma+0x704>)
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e01c      	b.n	8005572 <checkAktifCalisma+0x722>
 8005538:	40010c00 	.word	0x40010c00
 800553c:	20000209 	.word	0x20000209
 8005540:	200001fb 	.word	0x200001fb
 8005544:	2000023e 	.word	0x2000023e
 8005548:	2000023f 	.word	0x2000023f
 800554c:	40011000 	.word	0x40011000
 8005550:	200001fc 	.word	0x200001fc
 8005554:	20000222 	.word	0x20000222
 8005558:	20000221 	.word	0x20000221
 800555c:	20000225 	.word	0x20000225
 8005560:	20000224 	.word	0x20000224
 8005564:	20000223 	.word	0x20000223
 8005568:	20000227 	.word	0x20000227
		} else {
			devmotoryukaricalisiyor=0;
 800556c:	4b64      	ldr	r3, [pc, #400]	; (8005700 <checkAktifCalisma+0x8b0>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005572:	4b63      	ldr	r3, [pc, #396]	; (8005700 <checkAktifCalisma+0x8b0>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800557a:	2201      	movs	r2, #1
 800557c:	2120      	movs	r1, #32
 800557e:	4861      	ldr	r0, [pc, #388]	; (8005704 <checkAktifCalisma+0x8b4>)
 8005580:	f003 ff23 	bl	80093ca <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005584:	4b60      	ldr	r3, [pc, #384]	; (8005708 <checkAktifCalisma+0x8b8>)
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800558a:	4b5f      	ldr	r3, [pc, #380]	; (8005708 <checkAktifCalisma+0x8b8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d025      	beq.n	80055de <checkAktifCalisma+0x78e>
 8005592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005596:	485d      	ldr	r0, [pc, #372]	; (800570c <checkAktifCalisma+0x8bc>)
 8005598:	f003 ff00 	bl	800939c <HAL_GPIO_ReadPin>
 800559c:	4603      	mov	r3, r0
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d007      	beq.n	80055b2 <checkAktifCalisma+0x762>
 80055a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055a6:	4857      	ldr	r0, [pc, #348]	; (8005704 <checkAktifCalisma+0x8b4>)
 80055a8:	f003 fef8 	bl	800939c <HAL_GPIO_ReadPin>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d115      	bne.n	80055de <checkAktifCalisma+0x78e>
 80055b2:	4b57      	ldr	r3, [pc, #348]	; (8005710 <checkAktifCalisma+0x8c0>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d011      	beq.n	80055de <checkAktifCalisma+0x78e>
 80055ba:	4b56      	ldr	r3, [pc, #344]	; (8005714 <checkAktifCalisma+0x8c4>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <checkAktifCalisma+0x78e>
 80055c2:	4b55      	ldr	r3, [pc, #340]	; (8005718 <checkAktifCalisma+0x8c8>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	f083 0301 	eor.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <checkAktifCalisma+0x78e>
			timer2=millis;
 80055d0:	4b52      	ldr	r3, [pc, #328]	; (800571c <checkAktifCalisma+0x8cc>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a52      	ldr	r2, [pc, #328]	; (8005720 <checkAktifCalisma+0x8d0>)
 80055d6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80055d8:	4b4f      	ldr	r3, [pc, #316]	; (8005718 <checkAktifCalisma+0x8c8>)
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055de:	4b4f      	ldr	r3, [pc, #316]	; (800571c <checkAktifCalisma+0x8cc>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b4f      	ldr	r3, [pc, #316]	; (8005720 <checkAktifCalisma+0x8d0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	4a4e      	ldr	r2, [pc, #312]	; (8005724 <checkAktifCalisma+0x8d4>)
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d303      	bcc.n	80055f8 <checkAktifCalisma+0x7a8>
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <checkAktifCalisma+0x8c8>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10d      	bne.n	8005614 <checkAktifCalisma+0x7c4>
 80055f8:	4b45      	ldr	r3, [pc, #276]	; (8005710 <checkAktifCalisma+0x8c0>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f083 0301 	eor.w	r3, r3, #1
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <checkAktifCalisma+0x7c4>
 8005606:	4b43      	ldr	r3, [pc, #268]	; (8005714 <checkAktifCalisma+0x8c4>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	f083 0301 	eor.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005614:	2200      	movs	r2, #0
 8005616:	2120      	movs	r1, #32
 8005618:	483a      	ldr	r0, [pc, #232]	; (8005704 <checkAktifCalisma+0x8b4>)
 800561a:	f003 fed6 	bl	80093ca <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800561e:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <checkAktifCalisma+0x8b8>)
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005624:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <checkAktifCalisma+0x8c8>)
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800562a:	4b3f      	ldr	r3, [pc, #252]	; (8005728 <checkAktifCalisma+0x8d8>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f040 8088 	bne.w	8005744 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005634:	4b3d      	ldr	r3, [pc, #244]	; (800572c <checkAktifCalisma+0x8dc>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d003      	beq.n	8005644 <checkAktifCalisma+0x7f4>
 800563c:	4b3b      	ldr	r3, [pc, #236]	; (800572c <checkAktifCalisma+0x8dc>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d17f      	bne.n	8005744 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005644:	4b32      	ldr	r3, [pc, #200]	; (8005710 <checkAktifCalisma+0x8c0>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d07b      	beq.n	8005744 <checkAktifCalisma+0x8f4>
 800564c:	4b31      	ldr	r3, [pc, #196]	; (8005714 <checkAktifCalisma+0x8c4>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d077      	beq.n	8005744 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005654:	2140      	movs	r1, #64	; 0x40
 8005656:	482b      	ldr	r0, [pc, #172]	; (8005704 <checkAktifCalisma+0x8b4>)
 8005658:	f003 fea0 	bl	800939c <HAL_GPIO_ReadPin>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d170      	bne.n	8005744 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005666:	4827      	ldr	r0, [pc, #156]	; (8005704 <checkAktifCalisma+0x8b4>)
 8005668:	f003 fe98 	bl	800939c <HAL_GPIO_ReadPin>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <checkAktifCalisma+0x82a>
 8005672:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <checkAktifCalisma+0x8e0>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d164      	bne.n	8005744 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800567a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800567e:	4823      	ldr	r0, [pc, #140]	; (800570c <checkAktifCalisma+0x8bc>)
 8005680:	f003 fe8c 	bl	800939c <HAL_GPIO_ReadPin>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10f      	bne.n	80056aa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800568a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800568e:	481f      	ldr	r0, [pc, #124]	; (800570c <checkAktifCalisma+0x8bc>)
 8005690:	f003 fe84 	bl	800939c <HAL_GPIO_ReadPin>
 8005694:	4603      	mov	r3, r0
 8005696:	2b01      	cmp	r3, #1
 8005698:	d107      	bne.n	80056aa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800569a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800569e:	481b      	ldr	r0, [pc, #108]	; (800570c <checkAktifCalisma+0x8bc>)
 80056a0:	f003 fe7c 	bl	800939c <HAL_GPIO_ReadPin>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d003      	beq.n	80056b2 <checkAktifCalisma+0x862>
 80056aa:	4b22      	ldr	r3, [pc, #136]	; (8005734 <checkAktifCalisma+0x8e4>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d048      	beq.n	8005744 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80056b2:	4b21      	ldr	r3, [pc, #132]	; (8005738 <checkAktifCalisma+0x8e8>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f083 0301 	eor.w	r3, r3, #1
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d041      	beq.n	8005744 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80056c0:	4b1e      	ldr	r3, [pc, #120]	; (800573c <checkAktifCalisma+0x8ec>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f083 0301 	eor.w	r3, r3, #1
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d03a      	beq.n	8005744 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80056ce:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <checkAktifCalisma+0x8f0>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f083 0301 	eor.w	r3, r3, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d033      	beq.n	8005744 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <checkAktifCalisma+0x8b8>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	f083 0301 	eor.w	r3, r3, #1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02c      	beq.n	8005744 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <checkAktifCalisma+0x8b0>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	f083 0301 	eor.w	r3, r3, #1
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d025      	beq.n	8005744 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80056f8:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <checkAktifCalisma+0x8e4>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e024      	b.n	800574a <checkAktifCalisma+0x8fa>
 8005700:	20000222 	.word	0x20000222
 8005704:	40011000 	.word	0x40011000
 8005708:	20000226 	.word	0x20000226
 800570c:	40010c00 	.word	0x40010c00
 8005710:	2000023e 	.word	0x2000023e
 8005714:	2000023f 	.word	0x2000023f
 8005718:	2000021e 	.word	0x2000021e
 800571c:	200001c8 	.word	0x200001c8
 8005720:	200001d4 	.word	0x200001d4
 8005724:	20000202 	.word	0x20000202
 8005728:	20000209 	.word	0x20000209
 800572c:	200001fb 	.word	0x200001fb
 8005730:	200001fd 	.word	0x200001fd
 8005734:	20000223 	.word	0x20000223
 8005738:	20000221 	.word	0x20000221
 800573c:	20000225 	.word	0x20000225
 8005740:	20000224 	.word	0x20000224
		} else {
			devmotorasagicalisiyor=0;
 8005744:	4b96      	ldr	r3, [pc, #600]	; (80059a0 <checkAktifCalisma+0xb50>)
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800574a:	4b95      	ldr	r3, [pc, #596]	; (80059a0 <checkAktifCalisma+0xb50>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005752:	2201      	movs	r2, #1
 8005754:	2110      	movs	r1, #16
 8005756:	4893      	ldr	r0, [pc, #588]	; (80059a4 <checkAktifCalisma+0xb54>)
 8005758:	f003 fe37 	bl	80093ca <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 800575c:	4b92      	ldr	r3, [pc, #584]	; (80059a8 <checkAktifCalisma+0xb58>)
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005762:	4b91      	ldr	r3, [pc, #580]	; (80059a8 <checkAktifCalisma+0xb58>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d024      	beq.n	80057b4 <checkAktifCalisma+0x964>
 800576a:	2140      	movs	r1, #64	; 0x40
 800576c:	488d      	ldr	r0, [pc, #564]	; (80059a4 <checkAktifCalisma+0xb54>)
 800576e:	f003 fe15 	bl	800939c <HAL_GPIO_ReadPin>
 8005772:	4603      	mov	r3, r0
 8005774:	2b01      	cmp	r3, #1
 8005776:	d007      	beq.n	8005788 <checkAktifCalisma+0x938>
 8005778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800577c:	4889      	ldr	r0, [pc, #548]	; (80059a4 <checkAktifCalisma+0xb54>)
 800577e:	f003 fe0d 	bl	800939c <HAL_GPIO_ReadPin>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d115      	bne.n	80057b4 <checkAktifCalisma+0x964>
 8005788:	4b88      	ldr	r3, [pc, #544]	; (80059ac <checkAktifCalisma+0xb5c>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d011      	beq.n	80057b4 <checkAktifCalisma+0x964>
 8005790:	4b87      	ldr	r3, [pc, #540]	; (80059b0 <checkAktifCalisma+0xb60>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <checkAktifCalisma+0x964>
 8005798:	4b86      	ldr	r3, [pc, #536]	; (80059b4 <checkAktifCalisma+0xb64>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f083 0301 	eor.w	r3, r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d006      	beq.n	80057b4 <checkAktifCalisma+0x964>
			timer2=millis;
 80057a6:	4b84      	ldr	r3, [pc, #528]	; (80059b8 <checkAktifCalisma+0xb68>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a84      	ldr	r2, [pc, #528]	; (80059bc <checkAktifCalisma+0xb6c>)
 80057ac:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80057ae:	4b81      	ldr	r3, [pc, #516]	; (80059b4 <checkAktifCalisma+0xb64>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80057b4:	4b80      	ldr	r3, [pc, #512]	; (80059b8 <checkAktifCalisma+0xb68>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4b80      	ldr	r3, [pc, #512]	; (80059bc <checkAktifCalisma+0xb6c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	4a80      	ldr	r2, [pc, #512]	; (80059c0 <checkAktifCalisma+0xb70>)
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d303      	bcc.n	80057ce <checkAktifCalisma+0x97e>
 80057c6:	4b7b      	ldr	r3, [pc, #492]	; (80059b4 <checkAktifCalisma+0xb64>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10d      	bne.n	80057ea <checkAktifCalisma+0x99a>
 80057ce:	4b77      	ldr	r3, [pc, #476]	; (80059ac <checkAktifCalisma+0xb5c>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	f083 0301 	eor.w	r3, r3, #1
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <checkAktifCalisma+0x99a>
 80057dc:	4b74      	ldr	r3, [pc, #464]	; (80059b0 <checkAktifCalisma+0xb60>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f083 0301 	eor.w	r3, r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2110      	movs	r1, #16
 80057ee:	486d      	ldr	r0, [pc, #436]	; (80059a4 <checkAktifCalisma+0xb54>)
 80057f0:	f003 fdeb 	bl	80093ca <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80057f4:	4b6c      	ldr	r3, [pc, #432]	; (80059a8 <checkAktifCalisma+0xb58>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80057fa:	4b6e      	ldr	r3, [pc, #440]	; (80059b4 <checkAktifCalisma+0xb64>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005804:	486f      	ldr	r0, [pc, #444]	; (80059c4 <checkAktifCalisma+0xb74>)
 8005806:	f003 fdc9 	bl	800939c <HAL_GPIO_ReadPin>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d120      	bne.n	8005852 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005814:	486b      	ldr	r0, [pc, #428]	; (80059c4 <checkAktifCalisma+0xb74>)
 8005816:	f003 fdc1 	bl	800939c <HAL_GPIO_ReadPin>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d118      	bne.n	8005852 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005820:	2104      	movs	r1, #4
 8005822:	4868      	ldr	r0, [pc, #416]	; (80059c4 <checkAktifCalisma+0xb74>)
 8005824:	f003 fdba 	bl	800939c <HAL_GPIO_ReadPin>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d111      	bne.n	8005852 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800582e:	2102      	movs	r1, #2
 8005830:	4864      	ldr	r0, [pc, #400]	; (80059c4 <checkAktifCalisma+0xb74>)
 8005832:	f003 fdb3 	bl	800939c <HAL_GPIO_ReadPin>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800583c:	2101      	movs	r1, #1
 800583e:	4861      	ldr	r0, [pc, #388]	; (80059c4 <checkAktifCalisma+0xb74>)
 8005840:	f003 fdac 	bl	800939c <HAL_GPIO_ReadPin>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d103      	bne.n	8005852 <checkAktifCalisma+0xa02>
			makineStop=1;
 800584a:	4b5f      	ldr	r3, [pc, #380]	; (80059c8 <checkAktifCalisma+0xb78>)
 800584c:	2201      	movs	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	e002      	b.n	8005858 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005852:	4b5d      	ldr	r3, [pc, #372]	; (80059c8 <checkAktifCalisma+0xb78>)
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005858:	4b5c      	ldr	r3, [pc, #368]	; (80059cc <checkAktifCalisma+0xb7c>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d144      	bne.n	80058ea <checkAktifCalisma+0xa9a>
 8005860:	4b5b      	ldr	r3, [pc, #364]	; (80059d0 <checkAktifCalisma+0xb80>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d003      	beq.n	8005870 <checkAktifCalisma+0xa20>
 8005868:	4b59      	ldr	r3, [pc, #356]	; (80059d0 <checkAktifCalisma+0xb80>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d13c      	bne.n	80058ea <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	484c      	ldr	r0, [pc, #304]	; (80059a4 <checkAktifCalisma+0xb54>)
 8005874:	f003 fd92 	bl	800939c <HAL_GPIO_ReadPin>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <checkAktifCalisma+0xa36>
 800587e:	4b55      	ldr	r3, [pc, #340]	; (80059d4 <checkAktifCalisma+0xb84>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <checkAktifCalisma+0xa4e>
 8005886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800588a:	484e      	ldr	r0, [pc, #312]	; (80059c4 <checkAktifCalisma+0xb74>)
 800588c:	f003 fd86 	bl	800939c <HAL_GPIO_ReadPin>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d129      	bne.n	80058ea <checkAktifCalisma+0xa9a>
 8005896:	4b4f      	ldr	r3, [pc, #316]	; (80059d4 <checkAktifCalisma+0xb84>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d125      	bne.n	80058ea <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800589e:	2104      	movs	r1, #4
 80058a0:	4840      	ldr	r0, [pc, #256]	; (80059a4 <checkAktifCalisma+0xb54>)
 80058a2:	f003 fd7b 	bl	800939c <HAL_GPIO_ReadPin>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d003      	beq.n	80058b4 <checkAktifCalisma+0xa64>
 80058ac:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <checkAktifCalisma+0xb88>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11a      	bne.n	80058ea <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058b4:	2102      	movs	r1, #2
 80058b6:	483b      	ldr	r0, [pc, #236]	; (80059a4 <checkAktifCalisma+0xb54>)
 80058b8:	f003 fd70 	bl	800939c <HAL_GPIO_ReadPin>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d113      	bne.n	80058ea <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80058c2:	4b46      	ldr	r3, [pc, #280]	; (80059dc <checkAktifCalisma+0xb8c>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	f083 0301 	eor.w	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00c      	beq.n	80058ea <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80058d0:	4b3d      	ldr	r3, [pc, #244]	; (80059c8 <checkAktifCalisma+0xb78>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80058d8:	4b41      	ldr	r3, [pc, #260]	; (80059e0 <checkAktifCalisma+0xb90>)
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058de:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <checkAktifCalisma+0xb68>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a40      	ldr	r2, [pc, #256]	; (80059e4 <checkAktifCalisma+0xb94>)
 80058e4:	6013      	str	r3, [r2, #0]
			bekle();
 80058e6:	f7ff f901 	bl	8004aec <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80058ea:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <checkAktifCalisma+0xb68>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b3d      	ldr	r3, [pc, #244]	; (80059e4 <checkAktifCalisma+0xb94>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	4a3c      	ldr	r2, [pc, #240]	; (80059e8 <checkAktifCalisma+0xb98>)
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d211      	bcs.n	8005920 <checkAktifCalisma+0xad0>
 80058fc:	2104      	movs	r1, #4
 80058fe:	4829      	ldr	r0, [pc, #164]	; (80059a4 <checkAktifCalisma+0xb54>)
 8005900:	f003 fd4c 	bl	800939c <HAL_GPIO_ReadPin>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <checkAktifCalisma+0xad0>
 800590a:	4b33      	ldr	r3, [pc, #204]	; (80059d8 <checkAktifCalisma+0xb88>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d006      	beq.n	8005920 <checkAktifCalisma+0xad0>
 8005912:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <checkAktifCalisma+0xb78>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f083 0301 	eor.w	r3, r3, #1
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005920:	4b2f      	ldr	r3, [pc, #188]	; (80059e0 <checkAktifCalisma+0xb90>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005926:	4b29      	ldr	r3, [pc, #164]	; (80059cc <checkAktifCalisma+0xb7c>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d160      	bne.n	80059f0 <checkAktifCalisma+0xba0>
 800592e:	4b28      	ldr	r3, [pc, #160]	; (80059d0 <checkAktifCalisma+0xb80>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d003      	beq.n	800593e <checkAktifCalisma+0xaee>
 8005936:	4b26      	ldr	r3, [pc, #152]	; (80059d0 <checkAktifCalisma+0xb80>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d158      	bne.n	80059f0 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800593e:	2104      	movs	r1, #4
 8005940:	4818      	ldr	r0, [pc, #96]	; (80059a4 <checkAktifCalisma+0xb54>)
 8005942:	f003 fd2b 	bl	800939c <HAL_GPIO_ReadPin>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	d003      	beq.n	8005954 <checkAktifCalisma+0xb04>
 800594c:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <checkAktifCalisma+0xb88>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d14d      	bne.n	80059f0 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005954:	2102      	movs	r1, #2
 8005956:	4813      	ldr	r0, [pc, #76]	; (80059a4 <checkAktifCalisma+0xb54>)
 8005958:	f003 fd20 	bl	800939c <HAL_GPIO_ReadPin>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d146      	bne.n	80059f0 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	480f      	ldr	r0, [pc, #60]	; (80059a4 <checkAktifCalisma+0xb54>)
 8005966:	f003 fd19 	bl	800939c <HAL_GPIO_ReadPin>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <checkAktifCalisma+0xb28>
 8005970:	4b18      	ldr	r3, [pc, #96]	; (80059d4 <checkAktifCalisma+0xb84>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00b      	beq.n	8005990 <checkAktifCalisma+0xb40>
 8005978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800597c:	4811      	ldr	r0, [pc, #68]	; (80059c4 <checkAktifCalisma+0xb74>)
 800597e:	f003 fd0d 	bl	800939c <HAL_GPIO_ReadPin>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d133      	bne.n	80059f0 <checkAktifCalisma+0xba0>
 8005988:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <checkAktifCalisma+0xb84>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d12f      	bne.n	80059f0 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005990:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <checkAktifCalisma+0xb78>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02b      	beq.n	80059f0 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005998:	4b14      	ldr	r3, [pc, #80]	; (80059ec <checkAktifCalisma+0xb9c>)
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	e02a      	b.n	80059f6 <checkAktifCalisma+0xba6>
 80059a0:	20000223 	.word	0x20000223
 80059a4:	40011000 	.word	0x40011000
 80059a8:	20000227 	.word	0x20000227
 80059ac:	2000023e 	.word	0x2000023e
 80059b0:	2000023f 	.word	0x2000023f
 80059b4:	2000021f 	.word	0x2000021f
 80059b8:	200001c8 	.word	0x200001c8
 80059bc:	200001d4 	.word	0x200001d4
 80059c0:	20000202 	.word	0x20000202
 80059c4:	40010c00 	.word	0x40010c00
 80059c8:	2000022e 	.word	0x2000022e
 80059cc:	200001f5 	.word	0x200001f5
 80059d0:	200001f4 	.word	0x200001f4
 80059d4:	200001f8 	.word	0x200001f8
 80059d8:	200001f2 	.word	0x200001f2
 80059dc:	2000021b 	.word	0x2000021b
 80059e0:	2000022f 	.word	0x2000022f
 80059e4:	200001cc 	.word	0x200001cc
 80059e8:	20000205 	.word	0x20000205
 80059ec:	20000230 	.word	0x20000230
		} else {
			kapi1butonkontrol=0;
 80059f0:	4b8b      	ldr	r3, [pc, #556]	; (8005c20 <checkAktifCalisma+0xdd0>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059f6:	4b8b      	ldr	r3, [pc, #556]	; (8005c24 <checkAktifCalisma+0xdd4>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d121      	bne.n	8005a42 <checkAktifCalisma+0xbf2>
 80059fe:	4b8a      	ldr	r3, [pc, #552]	; (8005c28 <checkAktifCalisma+0xdd8>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d003      	beq.n	8005a0e <checkAktifCalisma+0xbbe>
 8005a06:	4b88      	ldr	r3, [pc, #544]	; (8005c28 <checkAktifCalisma+0xdd8>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d119      	bne.n	8005a42 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a0e:	2104      	movs	r1, #4
 8005a10:	4886      	ldr	r0, [pc, #536]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005a12:	f003 fcc3 	bl	800939c <HAL_GPIO_ReadPin>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d003      	beq.n	8005a24 <checkAktifCalisma+0xbd4>
 8005a1c:	4b84      	ldr	r3, [pc, #528]	; (8005c30 <checkAktifCalisma+0xde0>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10e      	bne.n	8005a42 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a24:	2102      	movs	r1, #2
 8005a26:	4881      	ldr	r0, [pc, #516]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005a28:	f003 fcb8 	bl	800939c <HAL_GPIO_ReadPin>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005a32:	4b80      	ldr	r3, [pc, #512]	; (8005c34 <checkAktifCalisma+0xde4>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005a3a:	4b7f      	ldr	r3, [pc, #508]	; (8005c38 <checkAktifCalisma+0xde8>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e002      	b.n	8005a48 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005a42:	4b7d      	ldr	r3, [pc, #500]	; (8005c38 <checkAktifCalisma+0xde8>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005a48:	4b75      	ldr	r3, [pc, #468]	; (8005c20 <checkAktifCalisma+0xdd0>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d107      	bne.n	8005a60 <checkAktifCalisma+0xc10>
 8005a50:	4b79      	ldr	r3, [pc, #484]	; (8005c38 <checkAktifCalisma+0xde8>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <checkAktifCalisma+0xc10>
 8005a58:	4b78      	ldr	r3, [pc, #480]	; (8005c3c <checkAktifCalisma+0xdec>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a60:	2201      	movs	r2, #1
 8005a62:	2180      	movs	r1, #128	; 0x80
 8005a64:	4876      	ldr	r0, [pc, #472]	; (8005c40 <checkAktifCalisma+0xdf0>)
 8005a66:	f003 fcb0 	bl	80093ca <HAL_GPIO_WritePin>
 8005a6a:	e004      	b.n	8005a76 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2180      	movs	r1, #128	; 0x80
 8005a70:	4873      	ldr	r0, [pc, #460]	; (8005c40 <checkAktifCalisma+0xdf0>)
 8005a72:	f003 fcaa 	bl	80093ca <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a76:	4b73      	ldr	r3, [pc, #460]	; (8005c44 <checkAktifCalisma+0xdf4>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d141      	bne.n	8005b02 <checkAktifCalisma+0xcb2>
 8005a7e:	4b6a      	ldr	r3, [pc, #424]	; (8005c28 <checkAktifCalisma+0xdd8>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d003      	beq.n	8005a8e <checkAktifCalisma+0xc3e>
 8005a86:	4b68      	ldr	r3, [pc, #416]	; (8005c28 <checkAktifCalisma+0xdd8>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d139      	bne.n	8005b02 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a92:	4866      	ldr	r0, [pc, #408]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005a94:	f003 fc82 	bl	800939c <HAL_GPIO_ReadPin>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <checkAktifCalisma+0xc56>
 8005a9e:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <checkAktifCalisma+0xdf8>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00b      	beq.n	8005abe <checkAktifCalisma+0xc6e>
 8005aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aaa:	4868      	ldr	r0, [pc, #416]	; (8005c4c <checkAktifCalisma+0xdfc>)
 8005aac:	f003 fc76 	bl	800939c <HAL_GPIO_ReadPin>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d125      	bne.n	8005b02 <checkAktifCalisma+0xcb2>
 8005ab6:	4b64      	ldr	r3, [pc, #400]	; (8005c48 <checkAktifCalisma+0xdf8>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d121      	bne.n	8005b02 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005abe:	2102      	movs	r1, #2
 8005ac0:	485a      	ldr	r0, [pc, #360]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005ac2:	f003 fc6b 	bl	800939c <HAL_GPIO_ReadPin>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d11a      	bne.n	8005b02 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005acc:	2104      	movs	r1, #4
 8005ace:	4857      	ldr	r0, [pc, #348]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005ad0:	f003 fc64 	bl	800939c <HAL_GPIO_ReadPin>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d113      	bne.n	8005b02 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005ada:	4b56      	ldr	r3, [pc, #344]	; (8005c34 <checkAktifCalisma+0xde4>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00f      	beq.n	8005b02 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005ae2:	4b5b      	ldr	r3, [pc, #364]	; (8005c50 <checkAktifCalisma+0xe00>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f083 0301 	eor.w	r3, r3, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005af0:	4b58      	ldr	r3, [pc, #352]	; (8005c54 <checkAktifCalisma+0xe04>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005af6:	4b58      	ldr	r3, [pc, #352]	; (8005c58 <checkAktifCalisma+0xe08>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <checkAktifCalisma+0xe0c>)
 8005afc:	6013      	str	r3, [r2, #0]
			bekle();
 8005afe:	f7fe fff5 	bl	8004aec <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005b02:	4b55      	ldr	r3, [pc, #340]	; (8005c58 <checkAktifCalisma+0xe08>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b55      	ldr	r3, [pc, #340]	; (8005c5c <checkAktifCalisma+0xe0c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	4a54      	ldr	r2, [pc, #336]	; (8005c60 <checkAktifCalisma+0xe10>)
 8005b0e:	7812      	ldrb	r2, [r2, #0]
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d20d      	bcs.n	8005b30 <checkAktifCalisma+0xce0>
 8005b14:	2102      	movs	r1, #2
 8005b16:	4845      	ldr	r0, [pc, #276]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005b18:	f003 fc40 	bl	800939c <HAL_GPIO_ReadPin>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d006      	beq.n	8005b30 <checkAktifCalisma+0xce0>
 8005b22:	4b44      	ldr	r3, [pc, #272]	; (8005c34 <checkAktifCalisma+0xde4>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	f083 0301 	eor.w	r3, r3, #1
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005b30:	4b48      	ldr	r3, [pc, #288]	; (8005c54 <checkAktifCalisma+0xe04>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b36:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <checkAktifCalisma+0xdf4>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d135      	bne.n	8005baa <checkAktifCalisma+0xd5a>
 8005b3e:	4b3a      	ldr	r3, [pc, #232]	; (8005c28 <checkAktifCalisma+0xdd8>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d003      	beq.n	8005b4e <checkAktifCalisma+0xcfe>
 8005b46:	4b38      	ldr	r3, [pc, #224]	; (8005c28 <checkAktifCalisma+0xdd8>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d12d      	bne.n	8005baa <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b52:	4836      	ldr	r0, [pc, #216]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005b54:	f003 fc22 	bl	800939c <HAL_GPIO_ReadPin>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <checkAktifCalisma+0xd16>
 8005b5e:	4b3a      	ldr	r3, [pc, #232]	; (8005c48 <checkAktifCalisma+0xdf8>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <checkAktifCalisma+0xd2e>
 8005b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b6a:	4838      	ldr	r0, [pc, #224]	; (8005c4c <checkAktifCalisma+0xdfc>)
 8005b6c:	f003 fc16 	bl	800939c <HAL_GPIO_ReadPin>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d119      	bne.n	8005baa <checkAktifCalisma+0xd5a>
 8005b76:	4b34      	ldr	r3, [pc, #208]	; (8005c48 <checkAktifCalisma+0xdf8>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d115      	bne.n	8005baa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b7e:	2102      	movs	r1, #2
 8005b80:	482a      	ldr	r0, [pc, #168]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005b82:	f003 fc0b 	bl	800939c <HAL_GPIO_ReadPin>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d10e      	bne.n	8005baa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b8c:	2104      	movs	r1, #4
 8005b8e:	4827      	ldr	r0, [pc, #156]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005b90:	f003 fc04 	bl	800939c <HAL_GPIO_ReadPin>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d107      	bne.n	8005baa <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b9a:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <checkAktifCalisma+0xde4>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005ba2:	4b30      	ldr	r3, [pc, #192]	; (8005c64 <checkAktifCalisma+0xe14>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	e002      	b.n	8005bb0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005baa:	4b2e      	ldr	r3, [pc, #184]	; (8005c64 <checkAktifCalisma+0xe14>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005bb0:	4b24      	ldr	r3, [pc, #144]	; (8005c44 <checkAktifCalisma+0xdf4>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d11d      	bne.n	8005bf4 <checkAktifCalisma+0xda4>
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <checkAktifCalisma+0xdd8>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d003      	beq.n	8005bc8 <checkAktifCalisma+0xd78>
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <checkAktifCalisma+0xdd8>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d115      	bne.n	8005bf4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bc8:	2102      	movs	r1, #2
 8005bca:	4818      	ldr	r0, [pc, #96]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005bcc:	f003 fbe6 	bl	800939c <HAL_GPIO_ReadPin>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d10e      	bne.n	8005bf4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bd6:	2104      	movs	r1, #4
 8005bd8:	4814      	ldr	r0, [pc, #80]	; (8005c2c <checkAktifCalisma+0xddc>)
 8005bda:	f003 fbdf 	bl	800939c <HAL_GPIO_ReadPin>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d107      	bne.n	8005bf4 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005be4:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <checkAktifCalisma+0xde4>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005bec:	4b1e      	ldr	r3, [pc, #120]	; (8005c68 <checkAktifCalisma+0xe18>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e002      	b.n	8005bfa <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005bf4:	4b1c      	ldr	r3, [pc, #112]	; (8005c68 <checkAktifCalisma+0xe18>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <checkAktifCalisma+0xe14>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <checkAktifCalisma+0xdc2>
 8005c02:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <checkAktifCalisma+0xe18>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <checkAktifCalisma+0xdc2>
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <checkAktifCalisma+0xe04>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d02c      	beq.n	8005c6c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005c12:	2201      	movs	r2, #1
 8005c14:	2140      	movs	r1, #64	; 0x40
 8005c16:	480a      	ldr	r0, [pc, #40]	; (8005c40 <checkAktifCalisma+0xdf0>)
 8005c18:	f003 fbd7 	bl	80093ca <HAL_GPIO_WritePin>
 8005c1c:	e02b      	b.n	8005c76 <checkAktifCalisma+0xe26>
 8005c1e:	bf00      	nop
 8005c20:	20000230 	.word	0x20000230
 8005c24:	200001f5 	.word	0x200001f5
 8005c28:	200001f4 	.word	0x200001f4
 8005c2c:	40011000 	.word	0x40011000
 8005c30:	200001f2 	.word	0x200001f2
 8005c34:	2000022e 	.word	0x2000022e
 8005c38:	20000231 	.word	0x20000231
 8005c3c:	2000022f 	.word	0x2000022f
 8005c40:	40010800 	.word	0x40010800
 8005c44:	200001f6 	.word	0x200001f6
 8005c48:	200001f8 	.word	0x200001f8
 8005c4c:	40010c00 	.word	0x40010c00
 8005c50:	2000021b 	.word	0x2000021b
 8005c54:	20000232 	.word	0x20000232
 8005c58:	200001c8 	.word	0x200001c8
 8005c5c:	200001cc 	.word	0x200001cc
 8005c60:	20000206 	.word	0x20000206
 8005c64:	20000233 	.word	0x20000233
 8005c68:	20000234 	.word	0x20000234
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2140      	movs	r1, #64	; 0x40
 8005c70:	488d      	ldr	r0, [pc, #564]	; (8005ea8 <checkAktifCalisma+0x1058>)
 8005c72:	f003 fbaa 	bl	80093ca <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005c76:	4b8d      	ldr	r3, [pc, #564]	; (8005eac <checkAktifCalisma+0x105c>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <checkAktifCalisma+0xe36>
 8005c7e:	4b8b      	ldr	r3, [pc, #556]	; (8005eac <checkAktifCalisma+0x105c>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d115      	bne.n	8005cb2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c86:	2104      	movs	r1, #4
 8005c88:	4889      	ldr	r0, [pc, #548]	; (8005eb0 <checkAktifCalisma+0x1060>)
 8005c8a:	f003 fb87 	bl	800939c <HAL_GPIO_ReadPin>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d003      	beq.n	8005c9c <checkAktifCalisma+0xe4c>
 8005c94:	4b87      	ldr	r3, [pc, #540]	; (8005eb4 <checkAktifCalisma+0x1064>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	4884      	ldr	r0, [pc, #528]	; (8005eb0 <checkAktifCalisma+0x1060>)
 8005ca0:	f003 fb7c 	bl	800939c <HAL_GPIO_ReadPin>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005caa:	4b83      	ldr	r3, [pc, #524]	; (8005eb8 <checkAktifCalisma+0x1068>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	e002      	b.n	8005cb8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005cb2:	4b81      	ldr	r3, [pc, #516]	; (8005eb8 <checkAktifCalisma+0x1068>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005cb8:	4b7c      	ldr	r3, [pc, #496]	; (8005eac <checkAktifCalisma+0x105c>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d003      	beq.n	8005cc8 <checkAktifCalisma+0xe78>
 8005cc0:	4b7a      	ldr	r3, [pc, #488]	; (8005eac <checkAktifCalisma+0x105c>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d111      	bne.n	8005cec <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cc8:	2102      	movs	r1, #2
 8005cca:	4879      	ldr	r0, [pc, #484]	; (8005eb0 <checkAktifCalisma+0x1060>)
 8005ccc:	f003 fb66 	bl	800939c <HAL_GPIO_ReadPin>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d10a      	bne.n	8005cec <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	4875      	ldr	r0, [pc, #468]	; (8005eb0 <checkAktifCalisma+0x1060>)
 8005cda:	f003 fb5f 	bl	800939c <HAL_GPIO_ReadPin>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d103      	bne.n	8005cec <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005ce4:	4b75      	ldr	r3, [pc, #468]	; (8005ebc <checkAktifCalisma+0x106c>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005cec:	4b73      	ldr	r3, [pc, #460]	; (8005ebc <checkAktifCalisma+0x106c>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005cf2:	4b71      	ldr	r3, [pc, #452]	; (8005eb8 <checkAktifCalisma+0x1068>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00f      	beq.n	8005d1a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005cfa:	4b71      	ldr	r3, [pc, #452]	; (8005ec0 <checkAktifCalisma+0x1070>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d10b      	bne.n	8005d1a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d06:	486f      	ldr	r0, [pc, #444]	; (8005ec4 <checkAktifCalisma+0x1074>)
 8005d08:	f003 fb48 	bl	800939c <HAL_GPIO_ReadPin>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005d12:	4b6d      	ldr	r3, [pc, #436]	; (8005ec8 <checkAktifCalisma+0x1078>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	e002      	b.n	8005d20 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005d1a:	4b6b      	ldr	r3, [pc, #428]	; (8005ec8 <checkAktifCalisma+0x1078>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005d20:	4b66      	ldr	r3, [pc, #408]	; (8005ebc <checkAktifCalisma+0x106c>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00f      	beq.n	8005d48 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005d28:	4b65      	ldr	r3, [pc, #404]	; (8005ec0 <checkAktifCalisma+0x1070>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d10b      	bne.n	8005d48 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d34:	4863      	ldr	r0, [pc, #396]	; (8005ec4 <checkAktifCalisma+0x1074>)
 8005d36:	f003 fb31 	bl	800939c <HAL_GPIO_ReadPin>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005d40:	4b62      	ldr	r3, [pc, #392]	; (8005ecc <checkAktifCalisma+0x107c>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e002      	b.n	8005d4e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005d48:	4b60      	ldr	r3, [pc, #384]	; (8005ecc <checkAktifCalisma+0x107c>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d4e:	4b60      	ldr	r3, [pc, #384]	; (8005ed0 <checkAktifCalisma+0x1080>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d137      	bne.n	8005dc6 <checkAktifCalisma+0xf76>
 8005d56:	4b5f      	ldr	r3, [pc, #380]	; (8005ed4 <checkAktifCalisma+0x1084>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d003      	beq.n	8005d66 <checkAktifCalisma+0xf16>
 8005d5e:	4b5d      	ldr	r3, [pc, #372]	; (8005ed4 <checkAktifCalisma+0x1084>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d12f      	bne.n	8005dc6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d66:	4b54      	ldr	r3, [pc, #336]	; (8005eb8 <checkAktifCalisma+0x1068>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <checkAktifCalisma+0xf26>
 8005d6e:	4b53      	ldr	r3, [pc, #332]	; (8005ebc <checkAktifCalisma+0x106c>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d027      	beq.n	8005dc6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d7a:	484d      	ldr	r0, [pc, #308]	; (8005eb0 <checkAktifCalisma+0x1060>)
 8005d7c:	f003 fb0e 	bl	800939c <HAL_GPIO_ReadPin>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d103      	bne.n	8005d8e <checkAktifCalisma+0xf3e>
 8005d86:	4b4e      	ldr	r3, [pc, #312]	; (8005ec0 <checkAktifCalisma+0x1070>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d8e:	4b4e      	ldr	r3, [pc, #312]	; (8005ec8 <checkAktifCalisma+0x1078>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <checkAktifCalisma+0xf4e>
 8005d96:	4b4d      	ldr	r3, [pc, #308]	; (8005ecc <checkAktifCalisma+0x107c>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d013      	beq.n	8005dc6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d9e:	4b4e      	ldr	r3, [pc, #312]	; (8005ed8 <checkAktifCalisma+0x1088>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00f      	beq.n	8005dc6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005da6:	4b4d      	ldr	r3, [pc, #308]	; (8005edc <checkAktifCalisma+0x108c>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f083 0301 	eor.w	r3, r3, #1
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005db4:	4b4a      	ldr	r3, [pc, #296]	; (8005ee0 <checkAktifCalisma+0x1090>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005dba:	4b4a      	ldr	r3, [pc, #296]	; (8005ee4 <checkAktifCalisma+0x1094>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a4a      	ldr	r2, [pc, #296]	; (8005ee8 <checkAktifCalisma+0x1098>)
 8005dc0:	6013      	str	r3, [r2, #0]
			bekle();
 8005dc2:	f7fe fe93 	bl	8004aec <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005dc6:	4b47      	ldr	r3, [pc, #284]	; (8005ee4 <checkAktifCalisma+0x1094>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b47      	ldr	r3, [pc, #284]	; (8005ee8 <checkAktifCalisma+0x1098>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	4a46      	ldr	r2, [pc, #280]	; (8005eec <checkAktifCalisma+0x109c>)
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d214      	bcs.n	8005e02 <checkAktifCalisma+0xfb2>
 8005dd8:	4b37      	ldr	r3, [pc, #220]	; (8005eb8 <checkAktifCalisma+0x1068>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f083 0301 	eor.w	r3, r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <checkAktifCalisma+0xfa4>
 8005de6:	4b35      	ldr	r3, [pc, #212]	; (8005ebc <checkAktifCalisma+0x106c>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f083 0301 	eor.w	r3, r3, #1
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <checkAktifCalisma+0xfb2>
 8005df4:	4b38      	ldr	r3, [pc, #224]	; (8005ed8 <checkAktifCalisma+0x1088>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f083 0301 	eor.w	r3, r3, #1
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005e02:	4b37      	ldr	r3, [pc, #220]	; (8005ee0 <checkAktifCalisma+0x1090>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e08:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <checkAktifCalisma+0x1080>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d12b      	bne.n	8005e68 <checkAktifCalisma+0x1018>
 8005e10:	4b30      	ldr	r3, [pc, #192]	; (8005ed4 <checkAktifCalisma+0x1084>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d003      	beq.n	8005e20 <checkAktifCalisma+0xfd0>
 8005e18:	4b2e      	ldr	r3, [pc, #184]	; (8005ed4 <checkAktifCalisma+0x1084>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d123      	bne.n	8005e68 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <checkAktifCalisma+0x1068>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <checkAktifCalisma+0xfe0>
 8005e28:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <checkAktifCalisma+0x106c>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e34:	481e      	ldr	r0, [pc, #120]	; (8005eb0 <checkAktifCalisma+0x1060>)
 8005e36:	f003 fab1 	bl	800939c <HAL_GPIO_ReadPin>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <checkAktifCalisma+0xff8>
 8005e40:	4b1f      	ldr	r3, [pc, #124]	; (8005ec0 <checkAktifCalisma+0x1070>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e48:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <checkAktifCalisma+0x1078>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <checkAktifCalisma+0x1008>
 8005e50:	4b1e      	ldr	r3, [pc, #120]	; (8005ecc <checkAktifCalisma+0x107c>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005e58:	4b1f      	ldr	r3, [pc, #124]	; (8005ed8 <checkAktifCalisma+0x1088>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005e60:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <checkAktifCalisma+0x10a0>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e002      	b.n	8005e6e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005e68:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <checkAktifCalisma+0x10a0>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e6e:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <checkAktifCalisma+0x1080>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d140      	bne.n	8005ef8 <checkAktifCalisma+0x10a8>
 8005e76:	4b17      	ldr	r3, [pc, #92]	; (8005ed4 <checkAktifCalisma+0x1084>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d003      	beq.n	8005e86 <checkAktifCalisma+0x1036>
 8005e7e:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <checkAktifCalisma+0x1084>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d138      	bne.n	8005ef8 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e86:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <checkAktifCalisma+0x1068>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <checkAktifCalisma+0x1046>
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <checkAktifCalisma+0x106c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d030      	beq.n	8005ef8 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <checkAktifCalisma+0x1088>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02c      	beq.n	8005ef8 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e9e:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <checkAktifCalisma+0x10a4>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e02b      	b.n	8005efe <checkAktifCalisma+0x10ae>
 8005ea6:	bf00      	nop
 8005ea8:	40010800 	.word	0x40010800
 8005eac:	200001f9 	.word	0x200001f9
 8005eb0:	40011000 	.word	0x40011000
 8005eb4:	200001f2 	.word	0x200001f2
 8005eb8:	20000238 	.word	0x20000238
 8005ebc:	20000239 	.word	0x20000239
 8005ec0:	200001f8 	.word	0x200001f8
 8005ec4:	40010c00 	.word	0x40010c00
 8005ec8:	20000248 	.word	0x20000248
 8005ecc:	20000249 	.word	0x20000249
 8005ed0:	200001f7 	.word	0x200001f7
 8005ed4:	200001f4 	.word	0x200001f4
 8005ed8:	2000022e 	.word	0x2000022e
 8005edc:	2000021b 	.word	0x2000021b
 8005ee0:	20000235 	.word	0x20000235
 8005ee4:	200001c8 	.word	0x200001c8
 8005ee8:	200001cc 	.word	0x200001cc
 8005eec:	20000207 	.word	0x20000207
 8005ef0:	20000236 	.word	0x20000236
 8005ef4:	20000237 	.word	0x20000237
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005ef8:	4b8b      	ldr	r3, [pc, #556]	; (8006128 <checkAktifCalisma+0x12d8>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005efe:	4b8b      	ldr	r3, [pc, #556]	; (800612c <checkAktifCalisma+0x12dc>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d107      	bne.n	8005f16 <checkAktifCalisma+0x10c6>
 8005f06:	4b8a      	ldr	r3, [pc, #552]	; (8006130 <checkAktifCalisma+0x12e0>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <checkAktifCalisma+0x10c6>
 8005f0e:	4b86      	ldr	r3, [pc, #536]	; (8006128 <checkAktifCalisma+0x12d8>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005f16:	2201      	movs	r2, #1
 8005f18:	2120      	movs	r1, #32
 8005f1a:	4886      	ldr	r0, [pc, #536]	; (8006134 <checkAktifCalisma+0x12e4>)
 8005f1c:	f003 fa55 	bl	80093ca <HAL_GPIO_WritePin>
 8005f20:	e004      	b.n	8005f2c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2120      	movs	r1, #32
 8005f26:	4883      	ldr	r0, [pc, #524]	; (8006134 <checkAktifCalisma+0x12e4>)
 8005f28:	f003 fa4f 	bl	80093ca <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005f2c:	4b82      	ldr	r3, [pc, #520]	; (8006138 <checkAktifCalisma+0x12e8>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <checkAktifCalisma+0x1102>
 8005f34:	2102      	movs	r1, #2
 8005f36:	4881      	ldr	r0, [pc, #516]	; (800613c <checkAktifCalisma+0x12ec>)
 8005f38:	f003 fa30 	bl	800939c <HAL_GPIO_ReadPin>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <checkAktifCalisma+0x1102>
 8005f42:	4b7f      	ldr	r3, [pc, #508]	; (8006140 <checkAktifCalisma+0x12f0>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <checkAktifCalisma+0x1102>
 8005f4a:	4b7e      	ldr	r3, [pc, #504]	; (8006144 <checkAktifCalisma+0x12f4>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d112      	bne.n	8005f78 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005f52:	4b7d      	ldr	r3, [pc, #500]	; (8006148 <checkAktifCalisma+0x12f8>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d066      	beq.n	8006028 <checkAktifCalisma+0x11d8>
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	4877      	ldr	r0, [pc, #476]	; (800613c <checkAktifCalisma+0x12ec>)
 8005f5e:	f003 fa1d 	bl	800939c <HAL_GPIO_ReadPin>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d15f      	bne.n	8006028 <checkAktifCalisma+0x11d8>
 8005f68:	4b75      	ldr	r3, [pc, #468]	; (8006140 <checkAktifCalisma+0x12f0>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d05b      	beq.n	8006028 <checkAktifCalisma+0x11d8>
 8005f70:	4b74      	ldr	r3, [pc, #464]	; (8006144 <checkAktifCalisma+0x12f4>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d057      	beq.n	8006028 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005f78:	4b74      	ldr	r3, [pc, #464]	; (800614c <checkAktifCalisma+0x12fc>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	4b72      	ldr	r3, [pc, #456]	; (800614c <checkAktifCalisma+0x12fc>)
 8005f82:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005f84:	4b71      	ldr	r3, [pc, #452]	; (800614c <checkAktifCalisma+0x12fc>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	d908      	bls.n	8005f9e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f8c:	4b6f      	ldr	r3, [pc, #444]	; (800614c <checkAktifCalisma+0x12fc>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f92:	4b6f      	ldr	r3, [pc, #444]	; (8006150 <checkAktifCalisma+0x1300>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	4b6d      	ldr	r3, [pc, #436]	; (8006150 <checkAktifCalisma+0x1300>)
 8005f9c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f9e:	4b6c      	ldr	r3, [pc, #432]	; (8006150 <checkAktifCalisma+0x1300>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b09      	cmp	r3, #9
 8005fa4:	d908      	bls.n	8005fb8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005fa6:	4b6a      	ldr	r3, [pc, #424]	; (8006150 <checkAktifCalisma+0x1300>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005fac:	4b69      	ldr	r3, [pc, #420]	; (8006154 <checkAktifCalisma+0x1304>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	4b67      	ldr	r3, [pc, #412]	; (8006154 <checkAktifCalisma+0x1304>)
 8005fb6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005fb8:	4b66      	ldr	r3, [pc, #408]	; (8006154 <checkAktifCalisma+0x1304>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d908      	bls.n	8005fd2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005fc0:	4b64      	ldr	r3, [pc, #400]	; (8006154 <checkAktifCalisma+0x1304>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005fc6:	4b64      	ldr	r3, [pc, #400]	; (8006158 <checkAktifCalisma+0x1308>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	4b62      	ldr	r3, [pc, #392]	; (8006158 <checkAktifCalisma+0x1308>)
 8005fd0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005fd2:	4b61      	ldr	r3, [pc, #388]	; (8006158 <checkAktifCalisma+0x1308>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b09      	cmp	r3, #9
 8005fd8:	d908      	bls.n	8005fec <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005fda:	4b5f      	ldr	r3, [pc, #380]	; (8006158 <checkAktifCalisma+0x1308>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005fe0:	4b5e      	ldr	r3, [pc, #376]	; (800615c <checkAktifCalisma+0x130c>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	4b5c      	ldr	r3, [pc, #368]	; (800615c <checkAktifCalisma+0x130c>)
 8005fea:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005fec:	4b5b      	ldr	r3, [pc, #364]	; (800615c <checkAktifCalisma+0x130c>)
 8005fee:	781a      	ldrb	r2, [r3, #0]
 8005ff0:	4b5b      	ldr	r3, [pc, #364]	; (8006160 <checkAktifCalisma+0x1310>)
 8005ff2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005ff6:	4b58      	ldr	r3, [pc, #352]	; (8006158 <checkAktifCalisma+0x1308>)
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	4b59      	ldr	r3, [pc, #356]	; (8006160 <checkAktifCalisma+0x1310>)
 8005ffc:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005ffe:	4b55      	ldr	r3, [pc, #340]	; (8006154 <checkAktifCalisma+0x1304>)
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	4b57      	ldr	r3, [pc, #348]	; (8006160 <checkAktifCalisma+0x1310>)
 8006004:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006006:	4b52      	ldr	r3, [pc, #328]	; (8006150 <checkAktifCalisma+0x1300>)
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	4b55      	ldr	r3, [pc, #340]	; (8006160 <checkAktifCalisma+0x1310>)
 800600c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800600e:	4b4f      	ldr	r3, [pc, #316]	; (800614c <checkAktifCalisma+0x12fc>)
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	4b53      	ldr	r3, [pc, #332]	; (8006160 <checkAktifCalisma+0x1310>)
 8006014:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006016:	4b53      	ldr	r3, [pc, #332]	; (8006164 <checkAktifCalisma+0x1314>)
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800601c:	4b46      	ldr	r3, [pc, #280]	; (8006138 <checkAktifCalisma+0x12e8>)
 800601e:	2200      	movs	r2, #0
 8006020:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006022:	4b49      	ldr	r3, [pc, #292]	; (8006148 <checkAktifCalisma+0x12f8>)
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800602c:	484e      	ldr	r0, [pc, #312]	; (8006168 <checkAktifCalisma+0x1318>)
 800602e:	f003 f9b5 	bl	800939c <HAL_GPIO_ReadPin>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d016      	beq.n	8006066 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800603c:	484a      	ldr	r0, [pc, #296]	; (8006168 <checkAktifCalisma+0x1318>)
 800603e:	f003 f9ad 	bl	800939c <HAL_GPIO_ReadPin>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800604c:	4846      	ldr	r0, [pc, #280]	; (8006168 <checkAktifCalisma+0x1318>)
 800604e:	f003 f9a5 	bl	800939c <HAL_GPIO_ReadPin>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006058:	2140      	movs	r1, #64	; 0x40
 800605a:	4838      	ldr	r0, [pc, #224]	; (800613c <checkAktifCalisma+0x12ec>)
 800605c:	f003 f99e 	bl	800939c <HAL_GPIO_ReadPin>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <checkAktifCalisma+0x121e>
			startBasili=1;
 8006066:	4b41      	ldr	r3, [pc, #260]	; (800616c <checkAktifCalisma+0x131c>)
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e002      	b.n	8006074 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800606e:	4b3f      	ldr	r3, [pc, #252]	; (800616c <checkAktifCalisma+0x131c>)
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006074:	4b3d      	ldr	r3, [pc, #244]	; (800616c <checkAktifCalisma+0x131c>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d016      	beq.n	80060aa <checkAktifCalisma+0x125a>
 800607c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006080:	4839      	ldr	r0, [pc, #228]	; (8006168 <checkAktifCalisma+0x1318>)
 8006082:	f003 f98b 	bl	800939c <HAL_GPIO_ReadPin>
 8006086:	4603      	mov	r3, r0
 8006088:	2b01      	cmp	r3, #1
 800608a:	d10e      	bne.n	80060aa <checkAktifCalisma+0x125a>
			hataVar=1;
 800608c:	4b38      	ldr	r3, [pc, #224]	; (8006170 <checkAktifCalisma+0x1320>)
 800608e:	2201      	movs	r2, #1
 8006090:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006092:	2001      	movs	r0, #1
 8006094:	f7fa fd68 	bl	8000b68 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006098:	2001      	movs	r0, #1
 800609a:	f7fa fd0b 	bl	8000ab4 <hata2EEPROM>
			convertAndSendData();
 800609e:	f001 fc17 	bl	80078d0 <convertAndSendData>
			acilstophatasi=1;
 80060a2:	4b34      	ldr	r3, [pc, #208]	; (8006174 <checkAktifCalisma+0x1324>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e018      	b.n	80060dc <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80060aa:	4b32      	ldr	r3, [pc, #200]	; (8006174 <checkAktifCalisma+0x1324>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d014      	beq.n	80060dc <checkAktifCalisma+0x128c>
 80060b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060b6:	482c      	ldr	r0, [pc, #176]	; (8006168 <checkAktifCalisma+0x1318>)
 80060b8:	f003 f970 	bl	800939c <HAL_GPIO_ReadPin>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10c      	bne.n	80060dc <checkAktifCalisma+0x128c>
 80060c2:	4b2a      	ldr	r3, [pc, #168]	; (800616c <checkAktifCalisma+0x131c>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	f083 0301 	eor.w	r3, r3, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <checkAktifCalisma+0x1324>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80060d6:	2001      	movs	r0, #1
 80060d8:	f7fe fcb4 	bl	8004a44 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80060dc:	4b26      	ldr	r3, [pc, #152]	; (8006178 <checkAktifCalisma+0x1328>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f083 0301 	eor.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d04e      	beq.n	8006188 <checkAktifCalisma+0x1338>
 80060ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060ee:	481e      	ldr	r0, [pc, #120]	; (8006168 <checkAktifCalisma+0x1318>)
 80060f0:	f003 f954 	bl	800939c <HAL_GPIO_ReadPin>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <checkAktifCalisma+0x12b2>
 80060fa:	4b20      	ldr	r3, [pc, #128]	; (800617c <checkAktifCalisma+0x132c>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d042      	beq.n	8006188 <checkAktifCalisma+0x1338>
 8006102:	4b1f      	ldr	r3, [pc, #124]	; (8006180 <checkAktifCalisma+0x1330>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d13e      	bne.n	8006188 <checkAktifCalisma+0x1338>
			hataVar=1;
 800610a:	4b19      	ldr	r3, [pc, #100]	; (8006170 <checkAktifCalisma+0x1320>)
 800610c:	2201      	movs	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006110:	2002      	movs	r0, #2
 8006112:	f7fa fd29 	bl	8000b68 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006116:	2002      	movs	r0, #2
 8006118:	f7fa fccc 	bl	8000ab4 <hata2EEPROM>
			convertAndSendData();
 800611c:	f001 fbd8 	bl	80078d0 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006120:	4b18      	ldr	r3, [pc, #96]	; (8006184 <checkAktifCalisma+0x1334>)
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	e047      	b.n	80061b8 <checkAktifCalisma+0x1368>
 8006128:	20000237 	.word	0x20000237
 800612c:	20000236 	.word	0x20000236
 8006130:	20000235 	.word	0x20000235
 8006134:	40010800 	.word	0x40010800
 8006138:	2000022b 	.word	0x2000022b
 800613c:	40011000 	.word	0x40011000
 8006140:	200001f2 	.word	0x200001f2
 8006144:	2000022e 	.word	0x2000022e
 8006148:	2000022c 	.word	0x2000022c
 800614c:	200001e9 	.word	0x200001e9
 8006150:	200001ea 	.word	0x200001ea
 8006154:	20000000 	.word	0x20000000
 8006158:	20000001 	.word	0x20000001
 800615c:	200001eb 	.word	0x200001eb
 8006160:	20000118 	.word	0x20000118
 8006164:	20000218 	.word	0x20000218
 8006168:	40010c00 	.word	0x40010c00
 800616c:	2000023a 	.word	0x2000023a
 8006170:	20000241 	.word	0x20000241
 8006174:	2000023c 	.word	0x2000023c
 8006178:	20000243 	.word	0x20000243
 800617c:	2000024d 	.word	0x2000024d
 8006180:	200001f0 	.word	0x200001f0
 8006184:	2000023d 	.word	0x2000023d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006188:	4b9b      	ldr	r3, [pc, #620]	; (80063f8 <checkAktifCalisma+0x15a8>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <checkAktifCalisma+0x1368>
 8006190:	4b9a      	ldr	r3, [pc, #616]	; (80063fc <checkAktifCalisma+0x15ac>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00f      	beq.n	80061b8 <checkAktifCalisma+0x1368>
 8006198:	4b99      	ldr	r3, [pc, #612]	; (8006400 <checkAktifCalisma+0x15b0>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f083 0301 	eor.w	r3, r3, #1
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d008      	beq.n	80061b8 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80061a6:	4b94      	ldr	r3, [pc, #592]	; (80063f8 <checkAktifCalisma+0x15a8>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80061ac:	4b95      	ldr	r3, [pc, #596]	; (8006404 <checkAktifCalisma+0x15b4>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80061b2:	2002      	movs	r0, #2
 80061b4:	f7fe fc46 	bl	8004a44 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80061b8:	4b93      	ldr	r3, [pc, #588]	; (8006408 <checkAktifCalisma+0x15b8>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d11e      	bne.n	80061fe <checkAktifCalisma+0x13ae>
 80061c0:	4b92      	ldr	r3, [pc, #584]	; (800640c <checkAktifCalisma+0x15bc>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d11a      	bne.n	80061fe <checkAktifCalisma+0x13ae>
 80061c8:	4b91      	ldr	r3, [pc, #580]	; (8006410 <checkAktifCalisma+0x15c0>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d016      	beq.n	80061fe <checkAktifCalisma+0x13ae>
 80061d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061d4:	488f      	ldr	r0, [pc, #572]	; (8006414 <checkAktifCalisma+0x15c4>)
 80061d6:	f003 f8e1 	bl	800939c <HAL_GPIO_ReadPin>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10e      	bne.n	80061fe <checkAktifCalisma+0x13ae>
			hataVar=1;
 80061e0:	4b8d      	ldr	r3, [pc, #564]	; (8006418 <checkAktifCalisma+0x15c8>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80061e6:	2003      	movs	r0, #3
 80061e8:	f7fa fcbe 	bl	8000b68 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80061ec:	2003      	movs	r0, #3
 80061ee:	f7fa fc61 	bl	8000ab4 <hata2EEPROM>
			convertAndSendData();
 80061f2:	f001 fb6d 	bl	80078d0 <convertAndSendData>
			basinchatasi=1;
 80061f6:	4b89      	ldr	r3, [pc, #548]	; (800641c <checkAktifCalisma+0x15cc>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e015      	b.n	800622a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80061fe:	4b87      	ldr	r3, [pc, #540]	; (800641c <checkAktifCalisma+0x15cc>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d011      	beq.n	800622a <checkAktifCalisma+0x13da>
 8006206:	4b80      	ldr	r3, [pc, #512]	; (8006408 <checkAktifCalisma+0x15b8>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d10d      	bne.n	800622a <checkAktifCalisma+0x13da>
 800620e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006212:	4883      	ldr	r0, [pc, #524]	; (8006420 <checkAktifCalisma+0x15d0>)
 8006214:	f003 f8c2 	bl	800939c <HAL_GPIO_ReadPin>
 8006218:	4603      	mov	r3, r0
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800621e:	4b7f      	ldr	r3, [pc, #508]	; (800641c <checkAktifCalisma+0x15cc>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006224:	2003      	movs	r0, #3
 8006226:	f7fe fc0d 	bl	8004a44 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800622a:	4b7e      	ldr	r3, [pc, #504]	; (8006424 <checkAktifCalisma+0x15d4>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <checkAktifCalisma+0x13ea>
 8006232:	4b7d      	ldr	r3, [pc, #500]	; (8006428 <checkAktifCalisma+0x15d8>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01e      	beq.n	8006278 <checkAktifCalisma+0x1428>
 800623a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800623e:	487b      	ldr	r0, [pc, #492]	; (800642c <checkAktifCalisma+0x15dc>)
 8006240:	f003 f8ac 	bl	800939c <HAL_GPIO_ReadPin>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d116      	bne.n	8006278 <checkAktifCalisma+0x1428>
 800624a:	4b79      	ldr	r3, [pc, #484]	; (8006430 <checkAktifCalisma+0x15e0>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d003      	beq.n	800625a <checkAktifCalisma+0x140a>
 8006252:	4b77      	ldr	r3, [pc, #476]	; (8006430 <checkAktifCalisma+0x15e0>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b03      	cmp	r3, #3
 8006258:	d10e      	bne.n	8006278 <checkAktifCalisma+0x1428>
			hataVar=1;
 800625a:	4b6f      	ldr	r3, [pc, #444]	; (8006418 <checkAktifCalisma+0x15c8>)
 800625c:	2201      	movs	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006260:	2004      	movs	r0, #4
 8006262:	f7fa fc81 	bl	8000b68 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006266:	2004      	movs	r0, #4
 8006268:	f7fa fc24 	bl	8000ab4 <hata2EEPROM>
			convertAndSendData();
 800626c:	f001 fb30 	bl	80078d0 <convertAndSendData>
			katkapisivicihatasi=1;
 8006270:	4b70      	ldr	r3, [pc, #448]	; (8006434 <checkAktifCalisma+0x15e4>)
 8006272:	2201      	movs	r2, #1
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	e01f      	b.n	80062b8 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006278:	4b6e      	ldr	r3, [pc, #440]	; (8006434 <checkAktifCalisma+0x15e4>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01b      	beq.n	80062b8 <checkAktifCalisma+0x1468>
 8006280:	4b6d      	ldr	r3, [pc, #436]	; (8006438 <checkAktifCalisma+0x15e8>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d017      	beq.n	80062b8 <checkAktifCalisma+0x1468>
 8006288:	4b66      	ldr	r3, [pc, #408]	; (8006424 <checkAktifCalisma+0x15d4>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f083 0301 	eor.w	r3, r3, #1
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d010      	beq.n	80062b8 <checkAktifCalisma+0x1468>
 8006296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800629a:	4864      	ldr	r0, [pc, #400]	; (800642c <checkAktifCalisma+0x15dc>)
 800629c:	f003 f87e 	bl	800939c <HAL_GPIO_ReadPin>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d108      	bne.n	80062b8 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80062a6:	4b63      	ldr	r3, [pc, #396]	; (8006434 <checkAktifCalisma+0x15e4>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80062ac:	4b5e      	ldr	r3, [pc, #376]	; (8006428 <checkAktifCalisma+0x15d8>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80062b2:	2004      	movs	r0, #4
 80062b4:	f7fe fbc6 	bl	8004a44 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062b8:	4b5a      	ldr	r3, [pc, #360]	; (8006424 <checkAktifCalisma+0x15d4>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <checkAktifCalisma+0x1478>
 80062c0:	4b5e      	ldr	r3, [pc, #376]	; (800643c <checkAktifCalisma+0x15ec>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01e      	beq.n	8006306 <checkAktifCalisma+0x14b6>
 80062c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062cc:	4857      	ldr	r0, [pc, #348]	; (800642c <checkAktifCalisma+0x15dc>)
 80062ce:	f003 f865 	bl	800939c <HAL_GPIO_ReadPin>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d116      	bne.n	8006306 <checkAktifCalisma+0x14b6>
 80062d8:	4b55      	ldr	r3, [pc, #340]	; (8006430 <checkAktifCalisma+0x15e0>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d003      	beq.n	80062e8 <checkAktifCalisma+0x1498>
 80062e0:	4b53      	ldr	r3, [pc, #332]	; (8006430 <checkAktifCalisma+0x15e0>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d10e      	bne.n	8006306 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80062e8:	4b4b      	ldr	r3, [pc, #300]	; (8006418 <checkAktifCalisma+0x15c8>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80062ee:	2005      	movs	r0, #5
 80062f0:	f7fa fc3a 	bl	8000b68 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80062f4:	2005      	movs	r0, #5
 80062f6:	f7fa fbdd 	bl	8000ab4 <hata2EEPROM>
			convertAndSendData();
 80062fa:	f001 fae9 	bl	80078d0 <convertAndSendData>
			tablakapisivicihatasi=1;
 80062fe:	4b50      	ldr	r3, [pc, #320]	; (8006440 <checkAktifCalisma+0x15f0>)
 8006300:	2201      	movs	r2, #1
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e023      	b.n	800634e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006306:	4b4e      	ldr	r3, [pc, #312]	; (8006440 <checkAktifCalisma+0x15f0>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01f      	beq.n	800634e <checkAktifCalisma+0x14fe>
 800630e:	4b4a      	ldr	r3, [pc, #296]	; (8006438 <checkAktifCalisma+0x15e8>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01b      	beq.n	800634e <checkAktifCalisma+0x14fe>
 8006316:	4b43      	ldr	r3, [pc, #268]	; (8006424 <checkAktifCalisma+0x15d4>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	f083 0301 	eor.w	r3, r3, #1
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d014      	beq.n	800634e <checkAktifCalisma+0x14fe>
 8006324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006328:	4840      	ldr	r0, [pc, #256]	; (800642c <checkAktifCalisma+0x15dc>)
 800632a:	f003 f837 	bl	800939c <HAL_GPIO_ReadPin>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10c      	bne.n	800634e <checkAktifCalisma+0x14fe>
 8006334:	4b40      	ldr	r3, [pc, #256]	; (8006438 <checkAktifCalisma+0x15e8>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d008      	beq.n	800634e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800633c:	4b40      	ldr	r3, [pc, #256]	; (8006440 <checkAktifCalisma+0x15f0>)
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006342:	4b3e      	ldr	r3, [pc, #248]	; (800643c <checkAktifCalisma+0x15ec>)
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006348:	2005      	movs	r0, #5
 800634a:	f7fe fb7b 	bl	8004a44 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800634e:	4b30      	ldr	r3, [pc, #192]	; (8006410 <checkAktifCalisma+0x15c0>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <checkAktifCalisma+0x1516>
 8006356:	4b2a      	ldr	r3, [pc, #168]	; (8006400 <checkAktifCalisma+0x15b0>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <checkAktifCalisma+0x1516>
 800635e:	4b39      	ldr	r3, [pc, #228]	; (8006444 <checkAktifCalisma+0x15f4>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006366:	4b38      	ldr	r3, [pc, #224]	; (8006448 <checkAktifCalisma+0x15f8>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b38      	ldr	r3, [pc, #224]	; (800644c <checkAktifCalisma+0x15fc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	4a37      	ldr	r2, [pc, #220]	; (8006450 <checkAktifCalisma+0x1600>)
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	4293      	cmp	r3, r2
 8006376:	d30d      	bcc.n	8006394 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006378:	4b27      	ldr	r3, [pc, #156]	; (8006418 <checkAktifCalisma+0x15c8>)
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800637e:	2006      	movs	r0, #6
 8006380:	f7fa fbf2 	bl	8000b68 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006384:	2006      	movs	r0, #6
 8006386:	f7fa fb95 	bl	8000ab4 <hata2EEPROM>
			  	convertAndSendData();
 800638a:	f001 faa1 	bl	80078d0 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800638e:	4b31      	ldr	r3, [pc, #196]	; (8006454 <checkAktifCalisma+0x1604>)
 8006390:	2201      	movs	r2, #1
 8006392:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006394:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <checkAktifCalisma+0x1604>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d013      	beq.n	80063c4 <checkAktifCalisma+0x1574>
 800639c:	2108      	movs	r1, #8
 800639e:	4823      	ldr	r0, [pc, #140]	; (800642c <checkAktifCalisma+0x15dc>)
 80063a0:	f002 fffc 	bl	800939c <HAL_GPIO_ReadPin>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00c      	beq.n	80063c4 <checkAktifCalisma+0x1574>
 80063aa:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <checkAktifCalisma+0x15d4>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f083 0301 	eor.w	r3, r3, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80063b8:	4b26      	ldr	r3, [pc, #152]	; (8006454 <checkAktifCalisma+0x1604>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80063be:	2006      	movs	r0, #6
 80063c0:	f7fe fb40 	bl	8004a44 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80063c4:	4b24      	ldr	r3, [pc, #144]	; (8006458 <checkAktifCalisma+0x1608>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10b      	bne.n	80063e4 <checkAktifCalisma+0x1594>
 80063cc:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <checkAktifCalisma+0x15b0>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d107      	bne.n	80063e4 <checkAktifCalisma+0x1594>
 80063d4:	4b21      	ldr	r3, [pc, #132]	; (800645c <checkAktifCalisma+0x160c>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <checkAktifCalisma+0x1594>
 80063dc:	4b19      	ldr	r3, [pc, #100]	; (8006444 <checkAktifCalisma+0x15f4>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d03f      	beq.n	8006464 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <checkAktifCalisma+0x1610>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <checkAktifCalisma+0x15d8>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80063f0:	4b12      	ldr	r3, [pc, #72]	; (800643c <checkAktifCalisma+0x15ec>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e03c      	b.n	8006472 <checkAktifCalisma+0x1622>
 80063f8:	2000023d 	.word	0x2000023d
 80063fc:	20000243 	.word	0x20000243
 8006400:	20000224 	.word	0x20000224
 8006404:	2000024d 	.word	0x2000024d
 8006408:	200001ef 	.word	0x200001ef
 800640c:	200001f3 	.word	0x200001f3
 8006410:	20000240 	.word	0x20000240
 8006414:	40011000 	.word	0x40011000
 8006418:	20000241 	.word	0x20000241
 800641c:	2000024a 	.word	0x2000024a
 8006420:	40010c00 	.word	0x40010c00
 8006424:	2000023a 	.word	0x2000023a
 8006428:	2000024e 	.word	0x2000024e
 800642c:	40010800 	.word	0x40010800
 8006430:	200001f4 	.word	0x200001f4
 8006434:	2000024b 	.word	0x2000024b
 8006438:	2000022e 	.word	0x2000022e
 800643c:	2000024f 	.word	0x2000024f
 8006440:	2000024c 	.word	0x2000024c
 8006444:	20000223 	.word	0x20000223
 8006448:	200001c8 	.word	0x200001c8
 800644c:	200001dc 	.word	0x200001dc
 8006450:	20000204 	.word	0x20000204
 8006454:	2000023b 	.word	0x2000023b
 8006458:	20000221 	.word	0x20000221
 800645c:	20000222 	.word	0x20000222
 8006460:	20000242 	.word	0x20000242
		} else {
			makineCalisiyor=1;
 8006464:	4b1e      	ldr	r3, [pc, #120]	; (80064e0 <checkAktifCalisma+0x1690>)
 8006466:	2201      	movs	r2, #1
 8006468:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800646a:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <checkAktifCalisma+0x1694>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1e      	ldr	r2, [pc, #120]	; (80064e8 <checkAktifCalisma+0x1698>)
 8006470:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006472:	4b1e      	ldr	r3, [pc, #120]	; (80064ec <checkAktifCalisma+0x169c>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d02f      	beq.n	80064da <checkAktifCalisma+0x168a>
 800647a:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <checkAktifCalisma+0x16a0>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f083 0301 	eor.w	r3, r3, #1
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d028      	beq.n	80064da <checkAktifCalisma+0x168a>
 8006488:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <checkAktifCalisma+0x16a4>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f083 0301 	eor.w	r3, r3, #1
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d021      	beq.n	80064da <checkAktifCalisma+0x168a>
 8006496:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <checkAktifCalisma+0x16a8>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f083 0301 	eor.w	r3, r3, #1
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01a      	beq.n	80064da <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80064a4:	4b15      	ldr	r3, [pc, #84]	; (80064fc <checkAktifCalisma+0x16ac>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f083 0301 	eor.w	r3, r3, #1
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d013      	beq.n	80064da <checkAktifCalisma+0x168a>
 80064b2:	4b13      	ldr	r3, [pc, #76]	; (8006500 <checkAktifCalisma+0x16b0>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	f083 0301 	eor.w	r3, r3, #1
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00c      	beq.n	80064da <checkAktifCalisma+0x168a>
 80064c0:	4b10      	ldr	r3, [pc, #64]	; (8006504 <checkAktifCalisma+0x16b4>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	f083 0301 	eor.w	r3, r3, #1
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <checkAktifCalisma+0x168a>
			hataVar=0;
 80064ce:	4b07      	ldr	r3, [pc, #28]	; (80064ec <checkAktifCalisma+0x169c>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80064d4:	2007      	movs	r0, #7
 80064d6:	f7fe fab5 	bl	8004a44 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80064da:	bf00      	nop
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000242 	.word	0x20000242
 80064e4:	200001c8 	.word	0x200001c8
 80064e8:	200001dc 	.word	0x200001dc
 80064ec:	20000241 	.word	0x20000241
 80064f0:	2000023c 	.word	0x2000023c
 80064f4:	2000023d 	.word	0x2000023d
 80064f8:	2000024a 	.word	0x2000024a
 80064fc:	2000024b 	.word	0x2000024b
 8006500:	2000024c 	.word	0x2000024c
 8006504:	2000023b 	.word	0x2000023b

08006508 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800650c:	4b8b      	ldr	r3, [pc, #556]	; (800673c <checkDemoModCalisma+0x234>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b01      	cmp	r3, #1
 8006512:	f040 8229 	bne.w	8006968 <checkDemoModCalisma+0x460>
 8006516:	4b8a      	ldr	r3, [pc, #552]	; (8006740 <checkDemoModCalisma+0x238>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8224 	beq.w	8006968 <checkDemoModCalisma+0x460>
 8006520:	4b88      	ldr	r3, [pc, #544]	; (8006744 <checkDemoModCalisma+0x23c>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f040 821f 	bne.w	8006968 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800652a:	2102      	movs	r1, #2
 800652c:	4886      	ldr	r0, [pc, #536]	; (8006748 <checkDemoModCalisma+0x240>)
 800652e:	f002 ff35 	bl	800939c <HAL_GPIO_ReadPin>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11d      	bne.n	8006574 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006538:	4b84      	ldr	r3, [pc, #528]	; (800674c <checkDemoModCalisma+0x244>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f083 0301 	eor.w	r3, r3, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006546:	4b82      	ldr	r3, [pc, #520]	; (8006750 <checkDemoModCalisma+0x248>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f083 0301 	eor.w	r3, r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00f      	beq.n	8006574 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006554:	4b7f      	ldr	r3, [pc, #508]	; (8006754 <checkDemoModCalisma+0x24c>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f083 0301 	eor.w	r3, r3, #1
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006562:	2201      	movs	r2, #1
 8006564:	2104      	movs	r1, #4
 8006566:	487c      	ldr	r0, [pc, #496]	; (8006758 <checkDemoModCalisma+0x250>)
 8006568:	f002 ff2f 	bl	80093ca <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800656c:	4b7b      	ldr	r3, [pc, #492]	; (800675c <checkDemoModCalisma+0x254>)
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e00e      	b.n	8006592 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006574:	2102      	movs	r1, #2
 8006576:	4874      	ldr	r0, [pc, #464]	; (8006748 <checkDemoModCalisma+0x240>)
 8006578:	f002 ff10 	bl	800939c <HAL_GPIO_ReadPin>
 800657c:	4603      	mov	r3, r0
 800657e:	2b01      	cmp	r3, #1
 8006580:	d107      	bne.n	8006592 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006582:	2200      	movs	r2, #0
 8006584:	2104      	movs	r1, #4
 8006586:	4874      	ldr	r0, [pc, #464]	; (8006758 <checkDemoModCalisma+0x250>)
 8006588:	f002 ff1f 	bl	80093ca <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 800658c:	4b73      	ldr	r3, [pc, #460]	; (800675c <checkDemoModCalisma+0x254>)
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006592:	4b72      	ldr	r3, [pc, #456]	; (800675c <checkDemoModCalisma+0x254>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <checkDemoModCalisma+0xaa>
 800659a:	4b6d      	ldr	r3, [pc, #436]	; (8006750 <checkDemoModCalisma+0x248>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d107      	bne.n	80065b2 <checkDemoModCalisma+0xaa>
 80065a2:	4b6c      	ldr	r3, [pc, #432]	; (8006754 <checkDemoModCalisma+0x24c>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <checkDemoModCalisma+0xaa>
 80065aa:	4b68      	ldr	r3, [pc, #416]	; (800674c <checkDemoModCalisma+0x244>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80065b2:	2201      	movs	r2, #1
 80065b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065b8:	4867      	ldr	r0, [pc, #412]	; (8006758 <checkDemoModCalisma+0x250>)
 80065ba:	f002 ff06 	bl	80093ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065be:	2201      	movs	r2, #1
 80065c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065c4:	4864      	ldr	r0, [pc, #400]	; (8006758 <checkDemoModCalisma+0x250>)
 80065c6:	f002 ff00 	bl	80093ca <HAL_GPIO_WritePin>
 80065ca:	e00b      	b.n	80065e4 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065d2:	4861      	ldr	r0, [pc, #388]	; (8006758 <checkDemoModCalisma+0x250>)
 80065d4:	f002 fef9 	bl	80093ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065d8:	2200      	movs	r2, #0
 80065da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065de:	485e      	ldr	r0, [pc, #376]	; (8006758 <checkDemoModCalisma+0x250>)
 80065e0:	f002 fef3 	bl	80093ca <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065e4:	2102      	movs	r1, #2
 80065e6:	4858      	ldr	r0, [pc, #352]	; (8006748 <checkDemoModCalisma+0x240>)
 80065e8:	f002 fed8 	bl	800939c <HAL_GPIO_ReadPin>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d10d      	bne.n	800660e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065f6:	4854      	ldr	r0, [pc, #336]	; (8006748 <checkDemoModCalisma+0x240>)
 80065f8:	f002 fed0 	bl	800939c <HAL_GPIO_ReadPin>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006602:	4b56      	ldr	r3, [pc, #344]	; (800675c <checkDemoModCalisma+0x254>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	f083 0301 	eor.w	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800660e:	2102      	movs	r1, #2
 8006610:	484d      	ldr	r0, [pc, #308]	; (8006748 <checkDemoModCalisma+0x240>)
 8006612:	f002 fec3 	bl	800939c <HAL_GPIO_ReadPin>
 8006616:	4603      	mov	r3, r0
 8006618:	2b01      	cmp	r3, #1
 800661a:	d125      	bne.n	8006668 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800661c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006620:	4849      	ldr	r0, [pc, #292]	; (8006748 <checkDemoModCalisma+0x240>)
 8006622:	f002 febb 	bl	800939c <HAL_GPIO_ReadPin>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d11d      	bne.n	8006668 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800662c:	4b4b      	ldr	r3, [pc, #300]	; (800675c <checkDemoModCalisma+0x254>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f083 0301 	eor.w	r3, r3, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d016      	beq.n	8006668 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800663a:	4b44      	ldr	r3, [pc, #272]	; (800674c <checkDemoModCalisma+0x244>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	f083 0301 	eor.w	r3, r3, #1
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00f      	beq.n	8006668 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006648:	4b42      	ldr	r3, [pc, #264]	; (8006754 <checkDemoModCalisma+0x24c>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f083 0301 	eor.w	r3, r3, #1
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d008      	beq.n	8006668 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006656:	2201      	movs	r2, #1
 8006658:	2120      	movs	r1, #32
 800665a:	483b      	ldr	r0, [pc, #236]	; (8006748 <checkDemoModCalisma+0x240>)
 800665c:	f002 feb5 	bl	80093ca <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006660:	4b3b      	ldr	r3, [pc, #236]	; (8006750 <checkDemoModCalisma+0x248>)
 8006662:	2201      	movs	r2, #1
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	e007      	b.n	8006678 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006668:	2200      	movs	r2, #0
 800666a:	2120      	movs	r1, #32
 800666c:	4836      	ldr	r0, [pc, #216]	; (8006748 <checkDemoModCalisma+0x240>)
 800666e:	f002 feac 	bl	80093ca <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006672:	4b37      	ldr	r3, [pc, #220]	; (8006750 <checkDemoModCalisma+0x248>)
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006678:	2102      	movs	r1, #2
 800667a:	4833      	ldr	r0, [pc, #204]	; (8006748 <checkDemoModCalisma+0x240>)
 800667c:	f002 fe8e 	bl	800939c <HAL_GPIO_ReadPin>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d125      	bne.n	80066d2 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800668a:	482f      	ldr	r0, [pc, #188]	; (8006748 <checkDemoModCalisma+0x240>)
 800668c:	f002 fe86 	bl	800939c <HAL_GPIO_ReadPin>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d11d      	bne.n	80066d2 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006696:	4b31      	ldr	r3, [pc, #196]	; (800675c <checkDemoModCalisma+0x254>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f083 0301 	eor.w	r3, r3, #1
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d016      	beq.n	80066d2 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80066a4:	4b2a      	ldr	r3, [pc, #168]	; (8006750 <checkDemoModCalisma+0x248>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f083 0301 	eor.w	r3, r3, #1
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00f      	beq.n	80066d2 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80066b2:	4b26      	ldr	r3, [pc, #152]	; (800674c <checkDemoModCalisma+0x244>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f083 0301 	eor.w	r3, r3, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80066c0:	2201      	movs	r2, #1
 80066c2:	2110      	movs	r1, #16
 80066c4:	4820      	ldr	r0, [pc, #128]	; (8006748 <checkDemoModCalisma+0x240>)
 80066c6:	f002 fe80 	bl	80093ca <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80066ca:	4b22      	ldr	r3, [pc, #136]	; (8006754 <checkDemoModCalisma+0x24c>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	e007      	b.n	80066e2 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2110      	movs	r1, #16
 80066d6:	481c      	ldr	r0, [pc, #112]	; (8006748 <checkDemoModCalisma+0x240>)
 80066d8:	f002 fe77 	bl	80093ca <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <checkDemoModCalisma+0x24c>)
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80066e2:	2104      	movs	r1, #4
 80066e4:	4818      	ldr	r0, [pc, #96]	; (8006748 <checkDemoModCalisma+0x240>)
 80066e6:	f002 fe59 	bl	800939c <HAL_GPIO_ReadPin>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d139      	bne.n	8006764 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80066f0:	4b1a      	ldr	r3, [pc, #104]	; (800675c <checkDemoModCalisma+0x254>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f083 0301 	eor.w	r3, r3, #1
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d032      	beq.n	8006764 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80066fe:	4b15      	ldr	r3, [pc, #84]	; (8006754 <checkDemoModCalisma+0x24c>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f083 0301 	eor.w	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d02b      	beq.n	8006764 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800670c:	4b10      	ldr	r3, [pc, #64]	; (8006750 <checkDemoModCalisma+0x248>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f083 0301 	eor.w	r3, r3, #1
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d024      	beq.n	8006764 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800671a:	2201      	movs	r2, #1
 800671c:	2102      	movs	r1, #2
 800671e:	480e      	ldr	r0, [pc, #56]	; (8006758 <checkDemoModCalisma+0x250>)
 8006720:	f002 fe53 	bl	80093ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006724:	2201      	movs	r2, #1
 8006726:	2101      	movs	r1, #1
 8006728:	480b      	ldr	r0, [pc, #44]	; (8006758 <checkDemoModCalisma+0x250>)
 800672a:	f002 fe4e 	bl	80093ca <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800672e:	4b07      	ldr	r3, [pc, #28]	; (800674c <checkDemoModCalisma+0x244>)
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <checkDemoModCalisma+0x258>)
 8006736:	2201      	movs	r2, #1
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e027      	b.n	800678c <checkDemoModCalisma+0x284>
 800673c:	2000020a 	.word	0x2000020a
 8006740:	2000023e 	.word	0x2000023e
 8006744:	20000209 	.word	0x20000209
 8006748:	40011000 	.word	0x40011000
 800674c:	20000245 	.word	0x20000245
 8006750:	20000246 	.word	0x20000246
 8006754:	20000247 	.word	0x20000247
 8006758:	40010c00 	.word	0x40010c00
 800675c:	20000244 	.word	0x20000244
 8006760:	2000022a 	.word	0x2000022a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006764:	2104      	movs	r1, #4
 8006766:	48a0      	ldr	r0, [pc, #640]	; (80069e8 <checkDemoModCalisma+0x4e0>)
 8006768:	f002 fe18 	bl	800939c <HAL_GPIO_ReadPin>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d10c      	bne.n	800678c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006772:	2200      	movs	r2, #0
 8006774:	2102      	movs	r1, #2
 8006776:	489d      	ldr	r0, [pc, #628]	; (80069ec <checkDemoModCalisma+0x4e4>)
 8006778:	f002 fe27 	bl	80093ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800677c:	2200      	movs	r2, #0
 800677e:	2101      	movs	r1, #1
 8006780:	489a      	ldr	r0, [pc, #616]	; (80069ec <checkDemoModCalisma+0x4e4>)
 8006782:	f002 fe22 	bl	80093ca <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006786:	4b9a      	ldr	r3, [pc, #616]	; (80069f0 <checkDemoModCalisma+0x4e8>)
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800678c:	2104      	movs	r1, #4
 800678e:	4896      	ldr	r0, [pc, #600]	; (80069e8 <checkDemoModCalisma+0x4e0>)
 8006790:	f002 fe04 	bl	800939c <HAL_GPIO_ReadPin>
 8006794:	4603      	mov	r3, r0
 8006796:	2b01      	cmp	r3, #1
 8006798:	d10d      	bne.n	80067b6 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800679a:	2201      	movs	r2, #1
 800679c:	2180      	movs	r1, #128	; 0x80
 800679e:	4895      	ldr	r0, [pc, #596]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 80067a0:	f002 fe13 	bl	80093ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80067a4:	2201      	movs	r2, #1
 80067a6:	2120      	movs	r1, #32
 80067a8:	4892      	ldr	r0, [pc, #584]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 80067aa:	f002 fe0e 	bl	80093ca <HAL_GPIO_WritePin>
			timer3 = millis;
 80067ae:	4b92      	ldr	r3, [pc, #584]	; (80069f8 <checkDemoModCalisma+0x4f0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a92      	ldr	r2, [pc, #584]	; (80069fc <checkDemoModCalisma+0x4f4>)
 80067b4:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067b6:	4b90      	ldr	r3, [pc, #576]	; (80069f8 <checkDemoModCalisma+0x4f0>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b90      	ldr	r3, [pc, #576]	; (80069fc <checkDemoModCalisma+0x4f4>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d909      	bls.n	80067d8 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067c4:	2200      	movs	r2, #0
 80067c6:	2180      	movs	r1, #128	; 0x80
 80067c8:	488a      	ldr	r0, [pc, #552]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 80067ca:	f002 fdfe 	bl	80093ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067ce:	2200      	movs	r2, #0
 80067d0:	2120      	movs	r1, #32
 80067d2:	4888      	ldr	r0, [pc, #544]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 80067d4:	f002 fdf9 	bl	80093ca <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80067d8:	2102      	movs	r1, #2
 80067da:	4883      	ldr	r0, [pc, #524]	; (80069e8 <checkDemoModCalisma+0x4e0>)
 80067dc:	f002 fdde 	bl	800939c <HAL_GPIO_ReadPin>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d108      	bne.n	80067f8 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80067e6:	2201      	movs	r2, #1
 80067e8:	2140      	movs	r1, #64	; 0x40
 80067ea:	4882      	ldr	r0, [pc, #520]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 80067ec:	f002 fded 	bl	80093ca <HAL_GPIO_WritePin>
			timer3 = millis;
 80067f0:	4b81      	ldr	r3, [pc, #516]	; (80069f8 <checkDemoModCalisma+0x4f0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a81      	ldr	r2, [pc, #516]	; (80069fc <checkDemoModCalisma+0x4f4>)
 80067f6:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067f8:	4b7f      	ldr	r3, [pc, #508]	; (80069f8 <checkDemoModCalisma+0x4f0>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b7f      	ldr	r3, [pc, #508]	; (80069fc <checkDemoModCalisma+0x4f4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b04      	cmp	r3, #4
 8006804:	d904      	bls.n	8006810 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006806:	2200      	movs	r2, #0
 8006808:	2140      	movs	r1, #64	; 0x40
 800680a:	487a      	ldr	r0, [pc, #488]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 800680c:	f002 fddd 	bl	80093ca <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006810:	4b7b      	ldr	r3, [pc, #492]	; (8006a00 <checkDemoModCalisma+0x4f8>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d058      	beq.n	80068ca <checkDemoModCalisma+0x3c2>
 8006818:	4b7a      	ldr	r3, [pc, #488]	; (8006a04 <checkDemoModCalisma+0x4fc>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d054      	beq.n	80068ca <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006820:	4b79      	ldr	r3, [pc, #484]	; (8006a08 <checkDemoModCalisma+0x500>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	4b77      	ldr	r3, [pc, #476]	; (8006a08 <checkDemoModCalisma+0x500>)
 800682a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800682c:	4b76      	ldr	r3, [pc, #472]	; (8006a08 <checkDemoModCalisma+0x500>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b09      	cmp	r3, #9
 8006832:	d908      	bls.n	8006846 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006834:	4b74      	ldr	r3, [pc, #464]	; (8006a08 <checkDemoModCalisma+0x500>)
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800683a:	4b74      	ldr	r3, [pc, #464]	; (8006a0c <checkDemoModCalisma+0x504>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	3301      	adds	r3, #1
 8006840:	b2da      	uxtb	r2, r3
 8006842:	4b72      	ldr	r3, [pc, #456]	; (8006a0c <checkDemoModCalisma+0x504>)
 8006844:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006846:	4b71      	ldr	r3, [pc, #452]	; (8006a0c <checkDemoModCalisma+0x504>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b09      	cmp	r3, #9
 800684c:	d908      	bls.n	8006860 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800684e:	4b6f      	ldr	r3, [pc, #444]	; (8006a0c <checkDemoModCalisma+0x504>)
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006854:	4b6e      	ldr	r3, [pc, #440]	; (8006a10 <checkDemoModCalisma+0x508>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	b2da      	uxtb	r2, r3
 800685c:	4b6c      	ldr	r3, [pc, #432]	; (8006a10 <checkDemoModCalisma+0x508>)
 800685e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006860:	4b6b      	ldr	r3, [pc, #428]	; (8006a10 <checkDemoModCalisma+0x508>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b09      	cmp	r3, #9
 8006866:	d908      	bls.n	800687a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006868:	4b69      	ldr	r3, [pc, #420]	; (8006a10 <checkDemoModCalisma+0x508>)
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800686e:	4b69      	ldr	r3, [pc, #420]	; (8006a14 <checkDemoModCalisma+0x50c>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	b2da      	uxtb	r2, r3
 8006876:	4b67      	ldr	r3, [pc, #412]	; (8006a14 <checkDemoModCalisma+0x50c>)
 8006878:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800687a:	4b66      	ldr	r3, [pc, #408]	; (8006a14 <checkDemoModCalisma+0x50c>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b09      	cmp	r3, #9
 8006880:	d908      	bls.n	8006894 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006882:	4b64      	ldr	r3, [pc, #400]	; (8006a14 <checkDemoModCalisma+0x50c>)
 8006884:	2200      	movs	r2, #0
 8006886:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006888:	4b63      	ldr	r3, [pc, #396]	; (8006a18 <checkDemoModCalisma+0x510>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	3301      	adds	r3, #1
 800688e:	b2da      	uxtb	r2, r3
 8006890:	4b61      	ldr	r3, [pc, #388]	; (8006a18 <checkDemoModCalisma+0x510>)
 8006892:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006894:	4b60      	ldr	r3, [pc, #384]	; (8006a18 <checkDemoModCalisma+0x510>)
 8006896:	781a      	ldrb	r2, [r3, #0]
 8006898:	4b60      	ldr	r3, [pc, #384]	; (8006a1c <checkDemoModCalisma+0x514>)
 800689a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800689e:	4b5d      	ldr	r3, [pc, #372]	; (8006a14 <checkDemoModCalisma+0x50c>)
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	4b5e      	ldr	r3, [pc, #376]	; (8006a1c <checkDemoModCalisma+0x514>)
 80068a4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80068a6:	4b5a      	ldr	r3, [pc, #360]	; (8006a10 <checkDemoModCalisma+0x508>)
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	4b5c      	ldr	r3, [pc, #368]	; (8006a1c <checkDemoModCalisma+0x514>)
 80068ac:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80068ae:	4b57      	ldr	r3, [pc, #348]	; (8006a0c <checkDemoModCalisma+0x504>)
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	4b5a      	ldr	r3, [pc, #360]	; (8006a1c <checkDemoModCalisma+0x514>)
 80068b4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80068b6:	4b54      	ldr	r3, [pc, #336]	; (8006a08 <checkDemoModCalisma+0x500>)
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	4b58      	ldr	r3, [pc, #352]	; (8006a1c <checkDemoModCalisma+0x514>)
 80068bc:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80068be:	4b58      	ldr	r3, [pc, #352]	; (8006a20 <checkDemoModCalisma+0x518>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80068c4:	4b4f      	ldr	r3, [pc, #316]	; (8006a04 <checkDemoModCalisma+0x4fc>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80068ca:	4b56      	ldr	r3, [pc, #344]	; (8006a24 <checkDemoModCalisma+0x51c>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f040 8087 	bne.w	80069e2 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80068d4:	4a54      	ldr	r2, [pc, #336]	; (8006a28 <checkDemoModCalisma+0x520>)
 80068d6:	2101      	movs	r1, #1
 80068d8:	2002      	movs	r0, #2
 80068da:	f001 fa39 	bl	8007d50 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80068de:	4a53      	ldr	r2, [pc, #332]	; (8006a2c <checkDemoModCalisma+0x524>)
 80068e0:	2101      	movs	r1, #1
 80068e2:	2001      	movs	r0, #1
 80068e4:	f001 fa34 	bl	8007d50 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80068e8:	4b4b      	ldr	r3, [pc, #300]	; (8006a18 <checkDemoModCalisma+0x510>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	220a      	movs	r2, #10
 80068ee:	4950      	ldr	r1, [pc, #320]	; (8006a30 <checkDemoModCalisma+0x528>)
 80068f0:	4618      	mov	r0, r3
 80068f2:	f005 fd7f 	bl	800c3f4 <itoa>
			lcd_print(2,12,snum);
 80068f6:	4a4e      	ldr	r2, [pc, #312]	; (8006a30 <checkDemoModCalisma+0x528>)
 80068f8:	210c      	movs	r1, #12
 80068fa:	2002      	movs	r0, #2
 80068fc:	f001 fa28 	bl	8007d50 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006900:	4b44      	ldr	r3, [pc, #272]	; (8006a14 <checkDemoModCalisma+0x50c>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	220a      	movs	r2, #10
 8006906:	494a      	ldr	r1, [pc, #296]	; (8006a30 <checkDemoModCalisma+0x528>)
 8006908:	4618      	mov	r0, r3
 800690a:	f005 fd73 	bl	800c3f4 <itoa>
			lcd_print(2,13,snum);
 800690e:	4a48      	ldr	r2, [pc, #288]	; (8006a30 <checkDemoModCalisma+0x528>)
 8006910:	210d      	movs	r1, #13
 8006912:	2002      	movs	r0, #2
 8006914:	f001 fa1c 	bl	8007d50 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006918:	4b3d      	ldr	r3, [pc, #244]	; (8006a10 <checkDemoModCalisma+0x508>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	220a      	movs	r2, #10
 800691e:	4944      	ldr	r1, [pc, #272]	; (8006a30 <checkDemoModCalisma+0x528>)
 8006920:	4618      	mov	r0, r3
 8006922:	f005 fd67 	bl	800c3f4 <itoa>
			lcd_print(2,14,snum);
 8006926:	4a42      	ldr	r2, [pc, #264]	; (8006a30 <checkDemoModCalisma+0x528>)
 8006928:	210e      	movs	r1, #14
 800692a:	2002      	movs	r0, #2
 800692c:	f001 fa10 	bl	8007d50 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006930:	4b36      	ldr	r3, [pc, #216]	; (8006a0c <checkDemoModCalisma+0x504>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	220a      	movs	r2, #10
 8006936:	493e      	ldr	r1, [pc, #248]	; (8006a30 <checkDemoModCalisma+0x528>)
 8006938:	4618      	mov	r0, r3
 800693a:	f005 fd5b 	bl	800c3f4 <itoa>
			lcd_print(2,15,snum);
 800693e:	4a3c      	ldr	r2, [pc, #240]	; (8006a30 <checkDemoModCalisma+0x528>)
 8006940:	210f      	movs	r1, #15
 8006942:	2002      	movs	r0, #2
 8006944:	f001 fa04 	bl	8007d50 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006948:	4b2f      	ldr	r3, [pc, #188]	; (8006a08 <checkDemoModCalisma+0x500>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	220a      	movs	r2, #10
 800694e:	4938      	ldr	r1, [pc, #224]	; (8006a30 <checkDemoModCalisma+0x528>)
 8006950:	4618      	mov	r0, r3
 8006952:	f005 fd4f 	bl	800c3f4 <itoa>
			lcd_print(2,16,snum);
 8006956:	4a36      	ldr	r2, [pc, #216]	; (8006a30 <checkDemoModCalisma+0x528>)
 8006958:	2110      	movs	r1, #16
 800695a:	2002      	movs	r0, #2
 800695c:	f001 f9f8 	bl	8007d50 <lcd_print>
			mesajYazildi=1;
 8006960:	4b34      	ldr	r3, [pc, #208]	; (8006a34 <checkDemoModCalisma+0x52c>)
 8006962:	2201      	movs	r2, #1
 8006964:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006966:	e03c      	b.n	80069e2 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006968:	4b33      	ldr	r3, [pc, #204]	; (8006a38 <checkDemoModCalisma+0x530>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d003      	beq.n	8006978 <checkDemoModCalisma+0x470>
 8006970:	4b2c      	ldr	r3, [pc, #176]	; (8006a24 <checkDemoModCalisma+0x51c>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d134      	bne.n	80069e2 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006978:	2200      	movs	r2, #0
 800697a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800697e:	481b      	ldr	r0, [pc, #108]	; (80069ec <checkDemoModCalisma+0x4e4>)
 8006980:	f002 fd23 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006984:	2200      	movs	r2, #0
 8006986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800698a:	4818      	ldr	r0, [pc, #96]	; (80069ec <checkDemoModCalisma+0x4e4>)
 800698c:	f002 fd1d 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006990:	2200      	movs	r2, #0
 8006992:	2104      	movs	r1, #4
 8006994:	4815      	ldr	r0, [pc, #84]	; (80069ec <checkDemoModCalisma+0x4e4>)
 8006996:	f002 fd18 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800699a:	2200      	movs	r2, #0
 800699c:	2102      	movs	r1, #2
 800699e:	4813      	ldr	r0, [pc, #76]	; (80069ec <checkDemoModCalisma+0x4e4>)
 80069a0:	f002 fd13 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80069a4:	2200      	movs	r2, #0
 80069a6:	2101      	movs	r1, #1
 80069a8:	4810      	ldr	r0, [pc, #64]	; (80069ec <checkDemoModCalisma+0x4e4>)
 80069aa:	f002 fd0e 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80069ae:	2200      	movs	r2, #0
 80069b0:	2120      	movs	r1, #32
 80069b2:	480d      	ldr	r0, [pc, #52]	; (80069e8 <checkDemoModCalisma+0x4e0>)
 80069b4:	f002 fd09 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80069b8:	2200      	movs	r2, #0
 80069ba:	2110      	movs	r1, #16
 80069bc:	480a      	ldr	r0, [pc, #40]	; (80069e8 <checkDemoModCalisma+0x4e0>)
 80069be:	f002 fd04 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80069c2:	2200      	movs	r2, #0
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	480b      	ldr	r0, [pc, #44]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 80069c8:	f002 fcff 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80069cc:	2200      	movs	r2, #0
 80069ce:	2140      	movs	r1, #64	; 0x40
 80069d0:	4808      	ldr	r0, [pc, #32]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 80069d2:	f002 fcfa 	bl	80093ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069d6:	2200      	movs	r2, #0
 80069d8:	2120      	movs	r1, #32
 80069da:	4806      	ldr	r0, [pc, #24]	; (80069f4 <checkDemoModCalisma+0x4ec>)
 80069dc:	f002 fcf5 	bl	80093ca <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80069e0:	e7ff      	b.n	80069e2 <checkDemoModCalisma+0x4da>
 80069e2:	bf00      	nop
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40011000 	.word	0x40011000
 80069ec:	40010c00 	.word	0x40010c00
 80069f0:	20000245 	.word	0x20000245
 80069f4:	40010800 	.word	0x40010800
 80069f8:	200001c8 	.word	0x200001c8
 80069fc:	200001d8 	.word	0x200001d8
 8006a00:	20000244 	.word	0x20000244
 8006a04:	2000022a 	.word	0x2000022a
 8006a08:	200001e9 	.word	0x200001e9
 8006a0c:	200001ea 	.word	0x200001ea
 8006a10:	20000000 	.word	0x20000000
 8006a14:	20000001 	.word	0x20000001
 8006a18:	200001eb 	.word	0x200001eb
 8006a1c:	20000118 	.word	0x20000118
 8006a20:	20000218 	.word	0x20000218
 8006a24:	20000209 	.word	0x20000209
 8006a28:	0800dbe0 	.word	0x0800dbe0
 8006a2c:	0800dbec 	.word	0x0800dbec
 8006a30:	20000188 	.word	0x20000188
 8006a34:	20000220 	.word	0x20000220
 8006a38:	2000020a 	.word	0x2000020a

08006a3c <mainLoop>:

void mainLoop() {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006a42:	f7fe f923 	bl	8004c8c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006a46:	2101      	movs	r1, #1
 8006a48:	48a9      	ldr	r0, [pc, #676]	; (8006cf0 <mainLoop+0x2b4>)
 8006a4a:	f002 fca7 	bl	800939c <HAL_GPIO_ReadPin>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d136      	bne.n	8006ac2 <mainLoop+0x86>
 8006a54:	2108      	movs	r1, #8
 8006a56:	48a7      	ldr	r0, [pc, #668]	; (8006cf4 <mainLoop+0x2b8>)
 8006a58:	f002 fca0 	bl	800939c <HAL_GPIO_ReadPin>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d12f      	bne.n	8006ac2 <mainLoop+0x86>
 8006a62:	2102      	movs	r1, #2
 8006a64:	48a2      	ldr	r0, [pc, #648]	; (8006cf0 <mainLoop+0x2b4>)
 8006a66:	f002 fc99 	bl	800939c <HAL_GPIO_ReadPin>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d128      	bne.n	8006ac2 <mainLoop+0x86>
 8006a70:	2104      	movs	r1, #4
 8006a72:	489f      	ldr	r0, [pc, #636]	; (8006cf0 <mainLoop+0x2b4>)
 8006a74:	f002 fc92 	bl	800939c <HAL_GPIO_ReadPin>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d121      	bne.n	8006ac2 <mainLoop+0x86>
 8006a7e:	2108      	movs	r1, #8
 8006a80:	489b      	ldr	r0, [pc, #620]	; (8006cf0 <mainLoop+0x2b4>)
 8006a82:	f002 fc8b 	bl	800939c <HAL_GPIO_ReadPin>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d11a      	bne.n	8006ac2 <mainLoop+0x86>
 8006a8c:	2180      	movs	r1, #128	; 0x80
 8006a8e:	4899      	ldr	r0, [pc, #612]	; (8006cf4 <mainLoop+0x2b8>)
 8006a90:	f002 fc84 	bl	800939c <HAL_GPIO_ReadPin>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d113      	bne.n	8006ac2 <mainLoop+0x86>
 8006a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a9e:	4895      	ldr	r0, [pc, #596]	; (8006cf4 <mainLoop+0x2b8>)
 8006aa0:	f002 fc7c 	bl	800939c <HAL_GPIO_ReadPin>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d10b      	bne.n	8006ac2 <mainLoop+0x86>
 8006aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006aae:	4891      	ldr	r0, [pc, #580]	; (8006cf4 <mainLoop+0x2b8>)
 8006ab0:	f002 fc74 	bl	800939c <HAL_GPIO_ReadPin>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d103      	bne.n	8006ac2 <mainLoop+0x86>
			butonKontrol=0;
 8006aba:	4b8f      	ldr	r3, [pc, #572]	; (8006cf8 <mainLoop+0x2bc>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	e003      	b.n	8006aca <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006ac2:	4b8e      	ldr	r3, [pc, #568]	; (8006cfc <mainLoop+0x2c0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a8e      	ldr	r2, [pc, #568]	; (8006d00 <mainLoop+0x2c4>)
 8006ac8:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8006aca:	f7fe f8ab 	bl	8004c24 <buttonCheck>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d003      	beq.n	8006adc <mainLoop+0xa0>
			backLightTimer = millis;
 8006ad4:	4b89      	ldr	r3, [pc, #548]	; (8006cfc <mainLoop+0x2c0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a89      	ldr	r2, [pc, #548]	; (8006d00 <mainLoop+0x2c4>)
 8006ada:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006adc:	4b89      	ldr	r3, [pc, #548]	; (8006d04 <mainLoop+0x2c8>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d03a      	beq.n	8006b5a <mainLoop+0x11e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006ae4:	bf00      	nop
 8006ae6:	4888      	ldr	r0, [pc, #544]	; (8006d08 <mainLoop+0x2cc>)
 8006ae8:	f003 fa81 	bl	8009fee <HAL_I2C_GetError>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d0f9      	beq.n	8006ae6 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006af2:	bf00      	nop
 8006af4:	4884      	ldr	r0, [pc, #528]	; (8006d08 <mainLoop+0x2cc>)
 8006af6:	f003 fa6d 	bl	8009fd4 <HAL_I2C_GetState>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d1f9      	bne.n	8006af4 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b04:	9302      	str	r3, [sp, #8]
 8006b06:	236e      	movs	r3, #110	; 0x6e
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	4b80      	ldr	r3, [pc, #512]	; (8006d0c <mainLoop+0x2d0>)
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	236e      	movs	r3, #110	; 0x6e
 8006b10:	2200      	movs	r2, #0
 8006b12:	21a0      	movs	r1, #160	; 0xa0
 8006b14:	487c      	ldr	r0, [pc, #496]	; (8006d08 <mainLoop+0x2cc>)
 8006b16:	f002 fefb 	bl	8009910 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b1e:	f001 fe6d 	bl	80087fc <HAL_Delay>

		  hafizaYaz=0;
 8006b22:	4b78      	ldr	r3, [pc, #480]	; (8006d04 <mainLoop+0x2c8>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006b28:	4b79      	ldr	r3, [pc, #484]	; (8006d10 <mainLoop+0x2d4>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 8006b30:	4a78      	ldr	r2, [pc, #480]	; (8006d14 <mainLoop+0x2d8>)
 8006b32:	2101      	movs	r1, #1
 8006b34:	2002      	movs	r0, #2
 8006b36:	f001 f90b 	bl	8007d50 <lcd_print>
 8006b3a:	e008      	b.n	8006b4e <mainLoop+0x112>
		  } else if(dilSecim==1) {
 8006b3c:	4b74      	ldr	r3, [pc, #464]	; (8006d10 <mainLoop+0x2d4>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d104      	bne.n	8006b4e <mainLoop+0x112>
			  lcd_print(2,1,"Data Wrote      ");
 8006b44:	4a74      	ldr	r2, [pc, #464]	; (8006d18 <mainLoop+0x2dc>)
 8006b46:	2101      	movs	r1, #1
 8006b48:	2002      	movs	r0, #2
 8006b4a:	f001 f901 	bl	8007d50 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b52:	f001 fe53 	bl	80087fc <HAL_Delay>
		  lcd_clear();
 8006b56:	f001 f927 	bl	8007da8 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006b5a:	4b70      	ldr	r3, [pc, #448]	; (8006d1c <mainLoop+0x2e0>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f083 0301 	eor.w	r3, r3, #1
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d06d      	beq.n	8006c44 <mainLoop+0x208>
 8006b68:	4867      	ldr	r0, [pc, #412]	; (8006d08 <mainLoop+0x2cc>)
 8006b6a:	f003 fa33 	bl	8009fd4 <HAL_I2C_GetState>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d167      	bne.n	8006c44 <mainLoop+0x208>
		  if(ilkOkuma==0) {
 8006b74:	4b6a      	ldr	r3, [pc, #424]	; (8006d20 <mainLoop+0x2e4>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	f083 0301 	eor.w	r3, r3, #1
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d044      	beq.n	8006c0c <mainLoop+0x1d0>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006b82:	4a68      	ldr	r2, [pc, #416]	; (8006d24 <mainLoop+0x2e8>)
 8006b84:	2101      	movs	r1, #1
 8006b86:	2001      	movs	r0, #1
 8006b88:	f001 f8e2 	bl	8007d50 <lcd_print>
			  if(dilSecim==0) {
 8006b8c:	4b60      	ldr	r3, [pc, #384]	; (8006d10 <mainLoop+0x2d4>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <mainLoop+0x164>
				  lcd_print(2,1,"Data Okunuyor...");
 8006b94:	4a64      	ldr	r2, [pc, #400]	; (8006d28 <mainLoop+0x2ec>)
 8006b96:	2101      	movs	r1, #1
 8006b98:	2002      	movs	r0, #2
 8006b9a:	f001 f8d9 	bl	8007d50 <lcd_print>
 8006b9e:	e008      	b.n	8006bb2 <mainLoop+0x176>
			  } else if(dilSecim==1) {
 8006ba0:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <mainLoop+0x2d4>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d104      	bne.n	8006bb2 <mainLoop+0x176>
				  lcd_print(2,1,"Data Reading... ");
 8006ba8:	4a60      	ldr	r2, [pc, #384]	; (8006d2c <mainLoop+0x2f0>)
 8006baa:	2101      	movs	r1, #1
 8006bac:	2002      	movs	r0, #2
 8006bae:	f001 f8cf 	bl	8007d50 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bb6:	f001 fe21 	bl	80087fc <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006bba:	bf00      	nop
 8006bbc:	4852      	ldr	r0, [pc, #328]	; (8006d08 <mainLoop+0x2cc>)
 8006bbe:	f003 fa16 	bl	8009fee <HAL_I2C_GetError>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d0f9      	beq.n	8006bbc <mainLoop+0x180>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006bc8:	e003      	b.n	8006bd2 <mainLoop+0x196>
				  HAL_Delay(1000);
 8006bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bce:	f001 fe15 	bl	80087fc <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006bd2:	484d      	ldr	r0, [pc, #308]	; (8006d08 <mainLoop+0x2cc>)
 8006bd4:	f003 f9fe 	bl	8009fd4 <HAL_I2C_GetState>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d1f5      	bne.n	8006bca <mainLoop+0x18e>
			  }

			  if(dilSecim==0) {
 8006bde:	4b4c      	ldr	r3, [pc, #304]	; (8006d10 <mainLoop+0x2d4>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d105      	bne.n	8006bf2 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Okundu.    ");
 8006be6:	4a52      	ldr	r2, [pc, #328]	; (8006d30 <mainLoop+0x2f4>)
 8006be8:	2101      	movs	r1, #1
 8006bea:	2002      	movs	r0, #2
 8006bec:	f001 f8b0 	bl	8007d50 <lcd_print>
 8006bf0:	e008      	b.n	8006c04 <mainLoop+0x1c8>
			  } else if(dilSecim==1) {
 8006bf2:	4b47      	ldr	r3, [pc, #284]	; (8006d10 <mainLoop+0x2d4>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d104      	bne.n	8006c04 <mainLoop+0x1c8>
				  lcd_print(2,1,"Data Read.      ");
 8006bfa:	4a4e      	ldr	r2, [pc, #312]	; (8006d34 <mainLoop+0x2f8>)
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	2002      	movs	r0, #2
 8006c00:	f001 f8a6 	bl	8007d50 <lcd_print>
			  }

			  ilkOkuma=1;
 8006c04:	4b46      	ldr	r3, [pc, #280]	; (8006d20 <mainLoop+0x2e4>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e014      	b.n	8006c36 <mainLoop+0x1fa>
		  } else {
			  if(dilSecim==0) {
 8006c0c:	4b40      	ldr	r3, [pc, #256]	; (8006d10 <mainLoop+0x2d4>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d105      	bne.n	8006c20 <mainLoop+0x1e4>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006c14:	4a48      	ldr	r2, [pc, #288]	; (8006d38 <mainLoop+0x2fc>)
 8006c16:	2101      	movs	r1, #1
 8006c18:	2002      	movs	r0, #2
 8006c1a:	f001 f899 	bl	8007d50 <lcd_print>
 8006c1e:	e008      	b.n	8006c32 <mainLoop+0x1f6>
			  } else if(dilSecim==1) {
 8006c20:	4b3b      	ldr	r3, [pc, #236]	; (8006d10 <mainLoop+0x2d4>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d104      	bne.n	8006c32 <mainLoop+0x1f6>
				  lcd_print(2,1,"Value Saved     ");
 8006c28:	4a44      	ldr	r2, [pc, #272]	; (8006d3c <mainLoop+0x300>)
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	2002      	movs	r0, #2
 8006c2e:	f001 f88f 	bl	8007d50 <lcd_print>
			  }
			  lcd_clear();
 8006c32:	f001 f8b9 	bl	8007da8 <lcd_clear>
		  }

		  lcd_clear();
 8006c36:	f001 f8b7 	bl	8007da8 <lcd_clear>

		  eepromKontrol();
 8006c3a:	f7f9 fafb 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006c3e:	4b37      	ldr	r3, [pc, #220]	; (8006d1c <mainLoop+0x2e0>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006c44:	4b3e      	ldr	r3, [pc, #248]	; (8006d40 <mainLoop+0x304>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11c      	bne.n	8006c86 <mainLoop+0x24a>
 8006c4c:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <mainLoop+0x308>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f083 0301 	eor.w	r3, r3, #1
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d015      	beq.n	8006c86 <mainLoop+0x24a>
 8006c5a:	4b3b      	ldr	r3, [pc, #236]	; (8006d48 <mainLoop+0x30c>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d111      	bne.n	8006c86 <mainLoop+0x24a>
			lcd_clear();
 8006c62:	f001 f8a1 	bl	8007da8 <lcd_clear>
			HAL_Delay(10);
 8006c66:	200a      	movs	r0, #10
 8006c68:	f001 fdc8 	bl	80087fc <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006c6c:	4a37      	ldr	r2, [pc, #220]	; (8006d4c <mainLoop+0x310>)
 8006c6e:	2101      	movs	r1, #1
 8006c70:	2001      	movs	r0, #1
 8006c72:	f001 f86d 	bl	8007d50 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006c76:	4a36      	ldr	r2, [pc, #216]	; (8006d50 <mainLoop+0x314>)
 8006c78:	2101      	movs	r1, #1
 8006c7a:	2002      	movs	r0, #2
 8006c7c:	f001 f868 	bl	8007d50 <lcd_print>
			mesajYazildi=1;
 8006c80:	4b30      	ldr	r3, [pc, #192]	; (8006d44 <mainLoop+0x308>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006c86:	4b2e      	ldr	r3, [pc, #184]	; (8006d40 <mainLoop+0x304>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d112      	bne.n	8006cb4 <mainLoop+0x278>
 8006c8e:	2102      	movs	r1, #2
 8006c90:	4817      	ldr	r0, [pc, #92]	; (8006cf0 <mainLoop+0x2b4>)
 8006c92:	f002 fb83 	bl	800939c <HAL_GPIO_ReadPin>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d10b      	bne.n	8006cb4 <mainLoop+0x278>
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	4814      	ldr	r0, [pc, #80]	; (8006cf0 <mainLoop+0x2b4>)
 8006ca0:	f002 fb7c 	bl	800939c <HAL_GPIO_ReadPin>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d104      	bne.n	8006cb4 <mainLoop+0x278>
			menuGiris=1;
 8006caa:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <mainLoop+0x304>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006cb0:	f001 f87a 	bl	8007da8 <lcd_clear>
		}

		if(menuGiris==1) {
 8006cb4:	4b22      	ldr	r3, [pc, #136]	; (8006d40 <mainLoop+0x304>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <mainLoop+0x284>
			menu();
 8006cbc:	f7fa fbba 	bl	8001434 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cc4:	480b      	ldr	r0, [pc, #44]	; (8006cf4 <mainLoop+0x2b8>)
 8006cc6:	f002 fb98 	bl	80093fa <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cce:	4821      	ldr	r0, [pc, #132]	; (8006d54 <mainLoop+0x318>)
 8006cd0:	f002 fb64 	bl	800939c <HAL_GPIO_ReadPin>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d142      	bne.n	8006d60 <mainLoop+0x324>
 8006cda:	4b1f      	ldr	r3, [pc, #124]	; (8006d58 <mainLoop+0x31c>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f083 0301 	eor.w	r3, r3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d03b      	beq.n	8006d60 <mainLoop+0x324>
			stopVar=1;
 8006ce8:	4b1c      	ldr	r3, [pc, #112]	; (8006d5c <mainLoop+0x320>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	e03a      	b.n	8006d66 <mainLoop+0x32a>
 8006cf0:	40010800 	.word	0x40010800
 8006cf4:	40011000 	.word	0x40011000
 8006cf8:	2000021b 	.word	0x2000021b
 8006cfc:	200001c8 	.word	0x200001c8
 8006d00:	200001e4 	.word	0x200001e4
 8006d04:	20000218 	.word	0x20000218
 8006d08:	20000374 	.word	0x20000374
 8006d0c:	20000118 	.word	0x20000118
 8006d10:	2000020d 	.word	0x2000020d
 8006d14:	0800dc00 	.word	0x0800dc00
 8006d18:	0800dc14 	.word	0x0800dc14
 8006d1c:	20000219 	.word	0x20000219
 8006d20:	2000021a 	.word	0x2000021a
 8006d24:	0800dc28 	.word	0x0800dc28
 8006d28:	0800dc3c 	.word	0x0800dc3c
 8006d2c:	0800dc50 	.word	0x0800dc50
 8006d30:	0800dc64 	.word	0x0800dc64
 8006d34:	0800dc78 	.word	0x0800dc78
 8006d38:	0800dc8c 	.word	0x0800dc8c
 8006d3c:	0800dca0 	.word	0x0800dca0
 8006d40:	20000209 	.word	0x20000209
 8006d44:	20000220 	.word	0x20000220
 8006d48:	2000020a 	.word	0x2000020a
 8006d4c:	0800dcb4 	.word	0x0800dcb4
 8006d50:	0800dcc8 	.word	0x0800dcc8
 8006d54:	40010c00 	.word	0x40010c00
 8006d58:	20000241 	.word	0x20000241
 8006d5c:	2000023e 	.word	0x2000023e
		} else {
			stopVar=0;
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <mainLoop+0x340>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006d66:	f7fd ffa7 	bl	8004cb8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006d6a:	f7fd ffd9 	bl	8004d20 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006d6e:	f7fe f81d 	bl	8004dac <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006d72:	f7fe f86d 	bl	8004e50 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006d76:	f7ff fbc7 	bl	8006508 <checkDemoModCalisma>
		checkLCDBacklight();
 8006d7a:	e662      	b.n	8006a42 <mainLoop+0x6>
 8006d7c:	2000023e 	.word	0x2000023e

08006d80 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006d86:	2001      	movs	r0, #1
 8006d88:	f001 f840 	bl	8007e0c <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8006d8c:	220c      	movs	r2, #12
 8006d8e:	2100      	movs	r1, #0
 8006d90:	48a5      	ldr	r0, [pc, #660]	; (8007028 <takeMachineID+0x2a8>)
 8006d92:	f005 fc47 	bl	800c624 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006d96:	2305      	movs	r3, #5
 8006d98:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006d9e:	2300      	movs	r3, #0
 8006da0:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006da2:	4ba2      	ldr	r3, [pc, #648]	; (800702c <takeMachineID+0x2ac>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8006da8:	2100      	movs	r1, #0
 8006daa:	2001      	movs	r0, #1
 8006dac:	f7fa f88e 	bl	8000ecc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006db0:	2108      	movs	r1, #8
 8006db2:	489f      	ldr	r0, [pc, #636]	; (8007030 <takeMachineID+0x2b0>)
 8006db4:	f002 faf2 	bl	800939c <HAL_GPIO_ReadPin>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d13c      	bne.n	8006e38 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f001 f824 	bl	8007e0c <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8006dc4:	f000 fe06 	bl	80079d4 <checkEEPROM4ID>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d022      	beq.n	8006e14 <takeMachineID+0x94>
        		itoa(strlen(machineID), snum, 10);
 8006dce:	4896      	ldr	r0, [pc, #600]	; (8007028 <takeMachineID+0x2a8>)
 8006dd0:	f7f9 fa28 	bl	8000224 <strlen>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	220a      	movs	r2, #10
 8006dd8:	4996      	ldr	r1, [pc, #600]	; (8007034 <takeMachineID+0x2b4>)
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f005 fb0a 	bl	800c3f4 <itoa>
        		lcd_print(1, 1, snum);
 8006de0:	4a94      	ldr	r2, [pc, #592]	; (8007034 <takeMachineID+0x2b4>)
 8006de2:	2101      	movs	r1, #1
 8006de4:	2001      	movs	r0, #1
 8006de6:	f000 ffb3 	bl	8007d50 <lcd_print>
        		HAL_Delay(2500);
 8006dea:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006dee:	f001 fd05 	bl	80087fc <HAL_Delay>
        		lcd_clear();
 8006df2:	f000 ffd9 	bl	8007da8 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006df6:	4a90      	ldr	r2, [pc, #576]	; (8007038 <takeMachineID+0x2b8>)
 8006df8:	2101      	movs	r1, #1
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	f000 ffa8 	bl	8007d50 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006e00:	4a8e      	ldr	r2, [pc, #568]	; (800703c <takeMachineID+0x2bc>)
 8006e02:	2101      	movs	r1, #1
 8006e04:	2002      	movs	r0, #2
 8006e06:	f000 ffa3 	bl	8007d50 <lcd_print>
        		HAL_Delay(1200);
 8006e0a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e0e:	f001 fcf5 	bl	80087fc <HAL_Delay>
        		goto mainSection;
 8006e12:	e7b8      	b.n	8006d86 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e14:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e18:	9302      	str	r3, [sp, #8]
 8006e1a:	236e      	movs	r3, #110	; 0x6e
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	4b88      	ldr	r3, [pc, #544]	; (8007040 <takeMachineID+0x2c0>)
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	236e      	movs	r3, #110	; 0x6e
 8006e24:	2200      	movs	r2, #0
 8006e26:	21a0      	movs	r1, #160	; 0xa0
 8006e28:	4886      	ldr	r0, [pc, #536]	; (8007044 <takeMachineID+0x2c4>)
 8006e2a:	f002 fd71 	bl	8009910 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006e2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e32:	f001 fce3 	bl	80087fc <HAL_Delay>

            	break;
 8006e36:	e135      	b.n	80070a4 <takeMachineID+0x324>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006e38:	2101      	movs	r1, #1
 8006e3a:	487d      	ldr	r0, [pc, #500]	; (8007030 <takeMachineID+0x2b0>)
 8006e3c:	f002 faae 	bl	800939c <HAL_GPIO_ReadPin>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d111      	bne.n	8006e6a <takeMachineID+0xea>
        	if(cursorPosition == 7) {
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b07      	cmp	r3, #7
 8006e4a:	d102      	bne.n	8006e52 <takeMachineID+0xd2>
        		cursorPosition = 10;
 8006e4c:	230a      	movs	r3, #10
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	e008      	b.n	8006e64 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b0e      	cmp	r3, #14
 8006e56:	d102      	bne.n	8006e5e <takeMachineID+0xde>
                cursorPosition = 3;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	e002      	b.n	8006e64 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	3301      	adds	r3, #1
 8006e62:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006e64:	2096      	movs	r0, #150	; 0x96
 8006e66:	f001 fcc9 	bl	80087fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006e6a:	2108      	movs	r1, #8
 8006e6c:	4876      	ldr	r0, [pc, #472]	; (8007048 <takeMachineID+0x2c8>)
 8006e6e:	f002 fa95 	bl	800939c <HAL_GPIO_ReadPin>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d111      	bne.n	8006e9c <takeMachineID+0x11c>
            if (cursorPosition == 3) {
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d102      	bne.n	8006e84 <takeMachineID+0x104>
                cursorPosition = 14;
 8006e7e:	230e      	movs	r3, #14
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	e008      	b.n	8006e96 <takeMachineID+0x116>
            } else if(cursorPosition == 10) {
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b0a      	cmp	r3, #10
 8006e88:	d102      	bne.n	8006e90 <takeMachineID+0x110>
            	cursorPosition = 7;
 8006e8a:	2307      	movs	r3, #7
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	e002      	b.n	8006e96 <takeMachineID+0x116>
            } else {
            	cursorPosition--;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8006e96:	20fa      	movs	r0, #250	; 0xfa
 8006e98:	f001 fcb0 	bl	80087fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	4864      	ldr	r0, [pc, #400]	; (8007030 <takeMachineID+0x2b0>)
 8006ea0:	f002 fa7c 	bl	800939c <HAL_GPIO_ReadPin>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	f040 80a1 	bne.w	8006fee <takeMachineID+0x26e>
        	if(cursorPosition == 3) {
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d10a      	bne.n	8006ec8 <takeMachineID+0x148>
        		machineID[arrayPos] = '0';
 8006eb2:	4a5d      	ldr	r2, [pc, #372]	; (8007028 <takeMachineID+0x2a8>)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	2230      	movs	r2, #48	; 0x30
 8006eba:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006ebc:	4a60      	ldr	r2, [pc, #384]	; (8007040 <takeMachineID+0x2c0>)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e07c      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 4) {
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d10a      	bne.n	8006ee4 <takeMachineID+0x164>
        		machineID[arrayPos] = '1';
 8006ece:	4a56      	ldr	r2, [pc, #344]	; (8007028 <takeMachineID+0x2a8>)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	2231      	movs	r2, #49	; 0x31
 8006ed6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006ed8:	4a59      	ldr	r2, [pc, #356]	; (8007040 <takeMachineID+0x2c0>)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	4413      	add	r3, r2
 8006ede:	2201      	movs	r2, #1
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e06e      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 5) {
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d10a      	bne.n	8006f00 <takeMachineID+0x180>
        		machineID[arrayPos] = '2';
 8006eea:	4a4f      	ldr	r2, [pc, #316]	; (8007028 <takeMachineID+0x2a8>)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	2232      	movs	r2, #50	; 0x32
 8006ef2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006ef4:	4a52      	ldr	r2, [pc, #328]	; (8007040 <takeMachineID+0x2c0>)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	4413      	add	r3, r2
 8006efa:	2202      	movs	r2, #2
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e060      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 6) {
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d10a      	bne.n	8006f1c <takeMachineID+0x19c>
        		machineID[arrayPos] = '3';
 8006f06:	4a48      	ldr	r2, [pc, #288]	; (8007028 <takeMachineID+0x2a8>)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	2233      	movs	r2, #51	; 0x33
 8006f0e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006f10:	4a4b      	ldr	r2, [pc, #300]	; (8007040 <takeMachineID+0x2c0>)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	4413      	add	r3, r2
 8006f16:	2203      	movs	r2, #3
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	e052      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 7) {
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b07      	cmp	r3, #7
 8006f20:	d10a      	bne.n	8006f38 <takeMachineID+0x1b8>
        		machineID[arrayPos] = '4';
 8006f22:	4a41      	ldr	r2, [pc, #260]	; (8007028 <takeMachineID+0x2a8>)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4413      	add	r3, r2
 8006f28:	2234      	movs	r2, #52	; 0x34
 8006f2a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006f2c:	4a44      	ldr	r2, [pc, #272]	; (8007040 <takeMachineID+0x2c0>)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	4413      	add	r3, r2
 8006f32:	2204      	movs	r2, #4
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	e044      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 10) {
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b0a      	cmp	r3, #10
 8006f3c:	d10a      	bne.n	8006f54 <takeMachineID+0x1d4>
        		machineID[arrayPos] = '5';
 8006f3e:	4a3a      	ldr	r2, [pc, #232]	; (8007028 <takeMachineID+0x2a8>)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	2235      	movs	r2, #53	; 0x35
 8006f46:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006f48:	4a3d      	ldr	r2, [pc, #244]	; (8007040 <takeMachineID+0x2c0>)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2205      	movs	r2, #5
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e036      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 11) {
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b0b      	cmp	r3, #11
 8006f58:	d10a      	bne.n	8006f70 <takeMachineID+0x1f0>
        		machineID[arrayPos] = '6';
 8006f5a:	4a33      	ldr	r2, [pc, #204]	; (8007028 <takeMachineID+0x2a8>)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	2236      	movs	r2, #54	; 0x36
 8006f62:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006f64:	4a36      	ldr	r2, [pc, #216]	; (8007040 <takeMachineID+0x2c0>)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	2206      	movs	r2, #6
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e028      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 12) {
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b0c      	cmp	r3, #12
 8006f74:	d10a      	bne.n	8006f8c <takeMachineID+0x20c>
        		machineID[arrayPos] = '7';
 8006f76:	4a2c      	ldr	r2, [pc, #176]	; (8007028 <takeMachineID+0x2a8>)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	2237      	movs	r2, #55	; 0x37
 8006f7e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006f80:	4a2f      	ldr	r2, [pc, #188]	; (8007040 <takeMachineID+0x2c0>)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	4413      	add	r3, r2
 8006f86:	2207      	movs	r2, #7
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	e01a      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 13) {
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b0d      	cmp	r3, #13
 8006f90:	d10a      	bne.n	8006fa8 <takeMachineID+0x228>
        		machineID[arrayPos] = '8';
 8006f92:	4a25      	ldr	r2, [pc, #148]	; (8007028 <takeMachineID+0x2a8>)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4413      	add	r3, r2
 8006f98:	2238      	movs	r2, #56	; 0x38
 8006f9a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006f9c:	4a28      	ldr	r2, [pc, #160]	; (8007040 <takeMachineID+0x2c0>)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	e00c      	b.n	8006fc2 <takeMachineID+0x242>
        	} else if(cursorPosition == 14) {
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b0e      	cmp	r3, #14
 8006fac:	d109      	bne.n	8006fc2 <takeMachineID+0x242>
        		machineID[arrayPos] = '9';
 8006fae:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <takeMachineID+0x2a8>)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	2239      	movs	r2, #57	; 0x39
 8006fb6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006fb8:	4a21      	ldr	r2, [pc, #132]	; (8007040 <takeMachineID+0x2c0>)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2209      	movs	r2, #9
 8006fc0:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	b2d9      	uxtb	r1, r3
 8006fc6:	4a18      	ldr	r2, [pc, #96]	; (8007028 <takeMachineID+0x2a8>)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	f000 fed2 	bl	8007d7a <lcd_print_char>

        	writeLoc++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006fe8:	2096      	movs	r0, #150	; 0x96
 8006fea:	f001 fc07 	bl	80087fc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006fee:	2104      	movs	r1, #4
 8006ff0:	480f      	ldr	r0, [pc, #60]	; (8007030 <takeMachineID+0x2b0>)
 8006ff2:	f002 f9d3 	bl	800939c <HAL_GPIO_ReadPin>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d14c      	bne.n	8007096 <takeMachineID+0x316>
            if(strlen(machineID) >= 1) {
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <takeMachineID+0x2a8>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d045      	beq.n	8007090 <takeMachineID+0x310>
                machineID[arrayPos] = '\0';
 8007004:	4a08      	ldr	r2, [pc, #32]	; (8007028 <takeMachineID+0x2a8>)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4413      	add	r3, r2
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 800700e:	4a0c      	ldr	r2, [pc, #48]	; (8007040 <takeMachineID+0x2c0>)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	4413      	add	r3, r2
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b05      	cmp	r3, #5
 800701c:	dd16      	ble.n	800704c <takeMachineID+0x2cc>
                	writeLoc--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3b01      	subs	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	e017      	b.n	8007056 <takeMachineID+0x2d6>
 8007026:	bf00      	nop
 8007028:	20000190 	.word	0x20000190
 800702c:	20000004 	.word	0x20000004
 8007030:	40010800 	.word	0x40010800
 8007034:	20000188 	.word	0x20000188
 8007038:	0800dcdc 	.word	0x0800dcdc
 800703c:	0800dcf0 	.word	0x0800dcf0
 8007040:	20000118 	.word	0x20000118
 8007044:	20000374 	.word	0x20000374
 8007048:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b04      	cmp	r3, #4
 8007050:	dc01      	bgt.n	8007056 <takeMachineID+0x2d6>
                	writeLoc = 5;
 8007052:	2305      	movs	r3, #5
 8007054:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	dd06      	ble.n	800706a <takeMachineID+0x2ea>
                	arrayPos--;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3b01      	subs	r3, #1
 8007060:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	3b01      	subs	r3, #1
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	e007      	b.n	800707a <takeMachineID+0x2fa>
                } else if(arrayPos < 0) {
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	da04      	bge.n	800707a <takeMachineID+0x2fa>
                	arrayPos = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <takeMachineID+0x32c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	3304      	adds	r3, #4
 8007080:	b2db      	uxtb	r3, r3
 8007082:	4619      	mov	r1, r3
 8007084:	2001      	movs	r0, #1
 8007086:	f000 fe99 	bl	8007dbc <lcd_delete_char>
                HAL_Delay(50);
 800708a:	2032      	movs	r0, #50	; 0x32
 800708c:	f001 fbb6 	bl	80087fc <HAL_Delay>
            }

            HAL_Delay(150);
 8007090:	2096      	movs	r0, #150	; 0x96
 8007092:	f001 fbb3 	bl	80087fc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	b2db      	uxtb	r3, r3
 800709a:	4619      	mov	r1, r3
 800709c:	2002      	movs	r0, #2
 800709e:	f000 fe38 	bl	8007d12 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80070a2:	e685      	b.n	8006db0 <takeMachineID+0x30>
    }
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000004 	.word	0x20000004

080070b0 <takeWifiSSID>:

void takeWifiSSID() {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	; 0x28
 80070b4:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 80070b6:	2001      	movs	r0, #1
 80070b8:	f000 fea8 	bl	8007e0c <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80070bc:	2214      	movs	r2, #20
 80070be:	2100      	movs	r1, #0
 80070c0:	489c      	ldr	r0, [pc, #624]	; (8007334 <takeWifiSSID+0x284>)
 80070c2:	f005 faaf 	bl	800c624 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80070c6:	2301      	movs	r3, #1
 80070c8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80070ca:	2307      	movs	r3, #7
 80070cc:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80070ce:	2301      	movs	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80070d2:	2300      	movs	r3, #0
 80070d4:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80070d6:	4b98      	ldr	r3, [pc, #608]	; (8007338 <takeWifiSSID+0x288>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80070dc:	2101      	movs	r1, #1
 80070de:	2002      	movs	r0, #2
 80070e0:	f7f9 fef4 	bl	8000ecc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80070e4:	2108      	movs	r1, #8
 80070e6:	4895      	ldr	r0, [pc, #596]	; (800733c <takeWifiSSID+0x28c>)
 80070e8:	f002 f958 	bl	800939c <HAL_GPIO_ReadPin>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d12b      	bne.n	800714a <takeWifiSSID+0x9a>
            lcd_cursor(0);
 80070f2:	2000      	movs	r0, #0
 80070f4:	f000 fe8a 	bl	8007e0c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80070f8:	488e      	ldr	r0, [pc, #568]	; (8007334 <takeWifiSSID+0x284>)
 80070fa:	f7f9 f893 	bl	8000224 <strlen>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b14      	cmp	r3, #20
 8007102:	d910      	bls.n	8007126 <takeWifiSSID+0x76>
                lcd_clear();
 8007104:	f000 fe50 	bl	8007da8 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007108:	4a8d      	ldr	r2, [pc, #564]	; (8007340 <takeWifiSSID+0x290>)
 800710a:	2101      	movs	r1, #1
 800710c:	2001      	movs	r0, #1
 800710e:	f000 fe1f 	bl	8007d50 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007112:	4a8c      	ldr	r2, [pc, #560]	; (8007344 <takeWifiSSID+0x294>)
 8007114:	2101      	movs	r1, #1
 8007116:	2002      	movs	r0, #2
 8007118:	f000 fe1a 	bl	8007d50 <lcd_print>
                HAL_Delay(1250);
 800711c:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007120:	f001 fb6c 	bl	80087fc <HAL_Delay>
                goto mainSSIDSection;
 8007124:	e7c7      	b.n	80070b6 <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007126:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	236e      	movs	r3, #110	; 0x6e
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	4b85      	ldr	r3, [pc, #532]	; (8007348 <takeWifiSSID+0x298>)
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	236e      	movs	r3, #110	; 0x6e
 8007136:	2200      	movs	r2, #0
 8007138:	21a0      	movs	r1, #160	; 0xa0
 800713a:	4884      	ldr	r0, [pc, #528]	; (800734c <takeWifiSSID+0x29c>)
 800713c:	f002 fbe8 	bl	8009910 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007144:	f001 fb5a 	bl	80087fc <HAL_Delay>

            	break;
 8007148:	e123      	b.n	8007392 <takeWifiSSID+0x2e2>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800714a:	2101      	movs	r1, #1
 800714c:	487b      	ldr	r0, [pc, #492]	; (800733c <takeWifiSSID+0x28c>)
 800714e:	f002 f925 	bl	800939c <HAL_GPIO_ReadPin>
 8007152:	4603      	mov	r3, r0
 8007154:	2b01      	cmp	r3, #1
 8007156:	d14d      	bne.n	80071f4 <takeWifiSSID+0x144>
        	if(cursorPosition > 80) {
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b50      	cmp	r3, #80	; 0x50
 800715c:	dd01      	ble.n	8007162 <takeWifiSSID+0xb2>
        		cursorPosition = 1;
 800715e:	2301      	movs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b10      	cmp	r3, #16
 8007166:	d13f      	bne.n	80071e8 <takeWifiSSID+0x138>
            	if(page == 1) {
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d109      	bne.n	8007182 <takeWifiSSID+0xd2>
            		cursorPosition = 1;
 800716e:	2301      	movs	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]
            		page++;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	3301      	adds	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007178:	2102      	movs	r1, #2
 800717a:	2002      	movs	r0, #2
 800717c:	f7f9 fea6 	bl	8000ecc <printTemplate>
 8007180:	e035      	b.n	80071ee <takeWifiSSID+0x13e>
            	} else if(page == 2) {
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d109      	bne.n	800719c <takeWifiSSID+0xec>
            		cursorPosition = 1;
 8007188:	2301      	movs	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
            		page++;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	3301      	adds	r3, #1
 8007190:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007192:	2103      	movs	r1, #3
 8007194:	2002      	movs	r0, #2
 8007196:	f7f9 fe99 	bl	8000ecc <printTemplate>
 800719a:	e028      	b.n	80071ee <takeWifiSSID+0x13e>
            	} else if(page == 3) {
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d109      	bne.n	80071b6 <takeWifiSSID+0x106>
            		cursorPosition = 1;
 80071a2:	2301      	movs	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
            		page++;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	3301      	adds	r3, #1
 80071aa:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80071ac:	2104      	movs	r1, #4
 80071ae:	2002      	movs	r0, #2
 80071b0:	f7f9 fe8c 	bl	8000ecc <printTemplate>
 80071b4:	e01b      	b.n	80071ee <takeWifiSSID+0x13e>
            	} else if(page == 4) {
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d109      	bne.n	80071d0 <takeWifiSSID+0x120>
            		cursorPosition = 1;
 80071bc:	2301      	movs	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
            		page++;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	3301      	adds	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80071c6:	2105      	movs	r1, #5
 80071c8:	2002      	movs	r0, #2
 80071ca:	f7f9 fe7f 	bl	8000ecc <printTemplate>
 80071ce:	e00e      	b.n	80071ee <takeWifiSSID+0x13e>
            	} else if(page == 5) {
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2b05      	cmp	r3, #5
 80071d4:	d10b      	bne.n	80071ee <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80071de:	2101      	movs	r1, #1
 80071e0:	2002      	movs	r0, #2
 80071e2:	f7f9 fe73 	bl	8000ecc <printTemplate>
 80071e6:	e002      	b.n	80071ee <takeWifiSSID+0x13e>
            	}
            } else {
            	cursorPosition++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80071ee:	2096      	movs	r0, #150	; 0x96
 80071f0:	f001 fb04 	bl	80087fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80071f4:	2108      	movs	r1, #8
 80071f6:	4856      	ldr	r0, [pc, #344]	; (8007350 <takeWifiSSID+0x2a0>)
 80071f8:	f002 f8d0 	bl	800939c <HAL_GPIO_ReadPin>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d149      	bne.n	8007296 <takeWifiSSID+0x1e6>
        	if(cursorPosition < 1) {
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	dc01      	bgt.n	800720c <takeWifiSSID+0x15c>
        		cursorPosition = 80;
 8007208:	2350      	movs	r3, #80	; 0x50
 800720a:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d13b      	bne.n	800728a <takeWifiSSID+0x1da>
            	if(page == 1) {
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d108      	bne.n	800722a <takeWifiSSID+0x17a>
            		cursorPosition = 16;
 8007218:	2310      	movs	r3, #16
 800721a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800721c:	2305      	movs	r3, #5
 800721e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007220:	2105      	movs	r1, #5
 8007222:	2002      	movs	r0, #2
 8007224:	f7f9 fe52 	bl	8000ecc <printTemplate>
 8007228:	e032      	b.n	8007290 <takeWifiSSID+0x1e0>
            	} else if(page == 2) {
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b02      	cmp	r3, #2
 800722e:	d108      	bne.n	8007242 <takeWifiSSID+0x192>
            		cursorPosition = 16;
 8007230:	2310      	movs	r3, #16
 8007232:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007234:	2301      	movs	r3, #1
 8007236:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007238:	2101      	movs	r1, #1
 800723a:	2002      	movs	r0, #2
 800723c:	f7f9 fe46 	bl	8000ecc <printTemplate>
 8007240:	e026      	b.n	8007290 <takeWifiSSID+0x1e0>
            	} else if(page == 3) {
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b03      	cmp	r3, #3
 8007246:	d108      	bne.n	800725a <takeWifiSSID+0x1aa>
            		cursorPosition = 16;
 8007248:	2310      	movs	r3, #16
 800724a:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800724c:	2302      	movs	r3, #2
 800724e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007250:	2102      	movs	r1, #2
 8007252:	2002      	movs	r0, #2
 8007254:	f7f9 fe3a 	bl	8000ecc <printTemplate>
 8007258:	e01a      	b.n	8007290 <takeWifiSSID+0x1e0>
            	} else if(page == 4) {
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b04      	cmp	r3, #4
 800725e:	d108      	bne.n	8007272 <takeWifiSSID+0x1c2>
            		cursorPosition = 16;
 8007260:	2310      	movs	r3, #16
 8007262:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007264:	2303      	movs	r3, #3
 8007266:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007268:	2103      	movs	r1, #3
 800726a:	2002      	movs	r0, #2
 800726c:	f7f9 fe2e 	bl	8000ecc <printTemplate>
 8007270:	e00e      	b.n	8007290 <takeWifiSSID+0x1e0>
            	} else if(page == 5) {
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b05      	cmp	r3, #5
 8007276:	d10b      	bne.n	8007290 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8007278:	2310      	movs	r3, #16
 800727a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800727c:	2304      	movs	r3, #4
 800727e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007280:	2104      	movs	r1, #4
 8007282:	2002      	movs	r0, #2
 8007284:	f7f9 fe22 	bl	8000ecc <printTemplate>
 8007288:	e002      	b.n	8007290 <takeWifiSSID+0x1e0>
            	}
            } else {
            	cursorPosition--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3b01      	subs	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007290:	2096      	movs	r0, #150	; 0x96
 8007292:	f001 fab3 	bl	80087fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007296:	2102      	movs	r1, #2
 8007298:	4828      	ldr	r0, [pc, #160]	; (800733c <takeWifiSSID+0x28c>)
 800729a:	f002 f87f 	bl	800939c <HAL_GPIO_ReadPin>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d121      	bne.n	80072e8 <takeWifiSSID+0x238>
            eepromData[eepromVal] = cursorPosition;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	b2d9      	uxtb	r1, r3
 80072a8:	4a27      	ldr	r2, [pc, #156]	; (8007348 <takeWifiSSID+0x298>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4413      	add	r3, r2
 80072ae:	460a      	mov	r2, r1
 80072b0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	b2d9      	uxtb	r1, r3
 80072b6:	4a27      	ldr	r2, [pc, #156]	; (8007354 <takeWifiSSID+0x2a4>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	2001      	movs	r0, #1
 80072c2:	f000 fd5a 	bl	8007d7a <lcd_print_char>

            writeLoc++;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3301      	adds	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3301      	adds	r3, #1
 80072d6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80072d8:	4a1b      	ldr	r2, [pc, #108]	; (8007348 <takeWifiSSID+0x298>)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80072e2:	2096      	movs	r0, #150	; 0x96
 80072e4:	f001 fa8a 	bl	80087fc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072e8:	2104      	movs	r1, #4
 80072ea:	4814      	ldr	r0, [pc, #80]	; (800733c <takeWifiSSID+0x28c>)
 80072ec:	f002 f856 	bl	800939c <HAL_GPIO_ReadPin>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d146      	bne.n	8007384 <takeWifiSSID+0x2d4>
        	if(strlen(wifiSSID) >= 1) {
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <takeWifiSSID+0x284>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d03f      	beq.n	800737e <takeWifiSSID+0x2ce>
        		eepromData[eepromVal] = '\0';
 80072fe:	4a12      	ldr	r2, [pc, #72]	; (8007348 <takeWifiSSID+0x298>)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4413      	add	r3, r2
 8007304:	2200      	movs	r2, #0
 8007306:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b07      	cmp	r3, #7
 800730c:	dd03      	ble.n	8007316 <takeWifiSSID+0x266>
        			writeLoc--;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3b01      	subs	r3, #1
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	e004      	b.n	8007320 <takeWifiSSID+0x270>
        		} else if(writeLoc < 7) {
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b06      	cmp	r3, #6
 800731a:	dc01      	bgt.n	8007320 <takeWifiSSID+0x270>
        			writeLoc = 7;
 800731c:	2307      	movs	r3, #7
 800731e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	dd18      	ble.n	8007358 <takeWifiSSID+0x2a8>
        			arrayPosition--;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	3b01      	subs	r3, #1
 800732a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3b01      	subs	r3, #1
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	e019      	b.n	8007368 <takeWifiSSID+0x2b8>
 8007334:	2000019c 	.word	0x2000019c
 8007338:	20000008 	.word	0x20000008
 800733c:	40010800 	.word	0x40010800
 8007340:	0800dd04 	.word	0x0800dd04
 8007344:	0800dd18 	.word	0x0800dd18
 8007348:	20000118 	.word	0x20000118
 800734c:	20000374 	.word	0x20000374
 8007350:	40011000 	.word	0x40011000
 8007354:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da04      	bge.n	8007368 <takeWifiSSID+0x2b8>
        			arrayPosition = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007362:	4b0e      	ldr	r3, [pc, #56]	; (800739c <takeWifiSSID+0x2ec>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	3306      	adds	r3, #6
 800736e:	b2db      	uxtb	r3, r3
 8007370:	4619      	mov	r1, r3
 8007372:	2001      	movs	r0, #1
 8007374:	f000 fd22 	bl	8007dbc <lcd_delete_char>
        		HAL_Delay(50);
 8007378:	2032      	movs	r0, #50	; 0x32
 800737a:	f001 fa3f 	bl	80087fc <HAL_Delay>
        	}

        	HAL_Delay(150);
 800737e:	2096      	movs	r0, #150	; 0x96
 8007380:	f001 fa3c 	bl	80087fc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	4619      	mov	r1, r3
 800738a:	2002      	movs	r0, #2
 800738c:	f000 fcc1 	bl	8007d12 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007390:	e6a8      	b.n	80070e4 <takeWifiSSID+0x34>
    }
}
 8007392:	bf00      	nop
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000008 	.word	0x20000008

080073a0 <takeWifiPass>:

void takeWifiPass() {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 80073a6:	2001      	movs	r0, #1
 80073a8:	f000 fd30 	bl	8007e0c <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80073ac:	2214      	movs	r2, #20
 80073ae:	2100      	movs	r1, #0
 80073b0:	489c      	ldr	r0, [pc, #624]	; (8007624 <takeWifiPass+0x284>)
 80073b2:	f005 f937 	bl	800c624 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80073ba:	2307      	movs	r3, #7
 80073bc:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80073be:	2301      	movs	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80073c6:	4b98      	ldr	r3, [pc, #608]	; (8007628 <takeWifiPass+0x288>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80073cc:	2101      	movs	r1, #1
 80073ce:	2003      	movs	r0, #3
 80073d0:	f7f9 fd7c 	bl	8000ecc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073d4:	2108      	movs	r1, #8
 80073d6:	4895      	ldr	r0, [pc, #596]	; (800762c <takeWifiPass+0x28c>)
 80073d8:	f001 ffe0 	bl	800939c <HAL_GPIO_ReadPin>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d12b      	bne.n	800743a <takeWifiPass+0x9a>
            lcd_cursor(0);
 80073e2:	2000      	movs	r0, #0
 80073e4:	f000 fd12 	bl	8007e0c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80073e8:	4891      	ldr	r0, [pc, #580]	; (8007630 <takeWifiPass+0x290>)
 80073ea:	f7f8 ff1b 	bl	8000224 <strlen>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b14      	cmp	r3, #20
 80073f2:	d910      	bls.n	8007416 <takeWifiPass+0x76>
                lcd_clear();
 80073f4:	f000 fcd8 	bl	8007da8 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073f8:	4a8e      	ldr	r2, [pc, #568]	; (8007634 <takeWifiPass+0x294>)
 80073fa:	2101      	movs	r1, #1
 80073fc:	2001      	movs	r0, #1
 80073fe:	f000 fca7 	bl	8007d50 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007402:	4a8d      	ldr	r2, [pc, #564]	; (8007638 <takeWifiPass+0x298>)
 8007404:	2101      	movs	r1, #1
 8007406:	2002      	movs	r0, #2
 8007408:	f000 fca2 	bl	8007d50 <lcd_print>
                HAL_Delay(1250);
 800740c:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007410:	f001 f9f4 	bl	80087fc <HAL_Delay>
                goto mainPassSection;
 8007414:	e7c7      	b.n	80073a6 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007416:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800741a:	9302      	str	r3, [sp, #8]
 800741c:	236e      	movs	r3, #110	; 0x6e
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	4b86      	ldr	r3, [pc, #536]	; (800763c <takeWifiPass+0x29c>)
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	236e      	movs	r3, #110	; 0x6e
 8007426:	2200      	movs	r2, #0
 8007428:	21a0      	movs	r1, #160	; 0xa0
 800742a:	4885      	ldr	r0, [pc, #532]	; (8007640 <takeWifiPass+0x2a0>)
 800742c:	f002 fa70 	bl	8009910 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007434:	f001 f9e2 	bl	80087fc <HAL_Delay>

            	break;
 8007438:	e125      	b.n	8007686 <takeWifiPass+0x2e6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800743a:	2101      	movs	r1, #1
 800743c:	487b      	ldr	r0, [pc, #492]	; (800762c <takeWifiPass+0x28c>)
 800743e:	f001 ffad 	bl	800939c <HAL_GPIO_ReadPin>
 8007442:	4603      	mov	r3, r0
 8007444:	2b01      	cmp	r3, #1
 8007446:	d14d      	bne.n	80074e4 <takeWifiPass+0x144>
        	if(cursorPosition > 80) {
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b50      	cmp	r3, #80	; 0x50
 800744c:	dd01      	ble.n	8007452 <takeWifiPass+0xb2>
        		cursorPosition = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b10      	cmp	r3, #16
 8007456:	d13f      	bne.n	80074d8 <takeWifiPass+0x138>
            	if(page == 1) {
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d109      	bne.n	8007472 <takeWifiPass+0xd2>
            		cursorPosition = 1;
 800745e:	2301      	movs	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]
            		page++;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	3301      	adds	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007468:	2102      	movs	r1, #2
 800746a:	2003      	movs	r0, #3
 800746c:	f7f9 fd2e 	bl	8000ecc <printTemplate>
 8007470:	e035      	b.n	80074de <takeWifiPass+0x13e>
            	} else if(page == 2) {
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d109      	bne.n	800748c <takeWifiPass+0xec>
            		cursorPosition = 1;
 8007478:	2301      	movs	r3, #1
 800747a:	60fb      	str	r3, [r7, #12]
            		page++;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	3301      	adds	r3, #1
 8007480:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007482:	2103      	movs	r1, #3
 8007484:	2003      	movs	r0, #3
 8007486:	f7f9 fd21 	bl	8000ecc <printTemplate>
 800748a:	e028      	b.n	80074de <takeWifiPass+0x13e>
            	} else if(page == 3) {
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d109      	bne.n	80074a6 <takeWifiPass+0x106>
            		cursorPosition = 1;
 8007492:	2301      	movs	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]
            		page++;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	3301      	adds	r3, #1
 800749a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800749c:	2104      	movs	r1, #4
 800749e:	2003      	movs	r0, #3
 80074a0:	f7f9 fd14 	bl	8000ecc <printTemplate>
 80074a4:	e01b      	b.n	80074de <takeWifiPass+0x13e>
            	} else if(page == 4) {
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d109      	bne.n	80074c0 <takeWifiPass+0x120>
            		cursorPosition = 1;
 80074ac:	2301      	movs	r3, #1
 80074ae:	60fb      	str	r3, [r7, #12]
            		page++;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	3301      	adds	r3, #1
 80074b4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80074b6:	2105      	movs	r1, #5
 80074b8:	2003      	movs	r0, #3
 80074ba:	f7f9 fd07 	bl	8000ecc <printTemplate>
 80074be:	e00e      	b.n	80074de <takeWifiPass+0x13e>
            	} else if(page == 5) {
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d10b      	bne.n	80074de <takeWifiPass+0x13e>
            		cursorPosition = 1;
 80074c6:	2301      	movs	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80074ca:	2301      	movs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80074ce:	2101      	movs	r1, #1
 80074d0:	2003      	movs	r0, #3
 80074d2:	f7f9 fcfb 	bl	8000ecc <printTemplate>
 80074d6:	e002      	b.n	80074de <takeWifiPass+0x13e>
            	}
            } else {
            	cursorPosition++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80074de:	2096      	movs	r0, #150	; 0x96
 80074e0:	f001 f98c 	bl	80087fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80074e4:	2108      	movs	r1, #8
 80074e6:	4857      	ldr	r0, [pc, #348]	; (8007644 <takeWifiPass+0x2a4>)
 80074e8:	f001 ff58 	bl	800939c <HAL_GPIO_ReadPin>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d149      	bne.n	8007586 <takeWifiPass+0x1e6>
        	if(cursorPosition < 1) {
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dc01      	bgt.n	80074fc <takeWifiPass+0x15c>
        		cursorPosition = 80;
 80074f8:	2350      	movs	r3, #80	; 0x50
 80074fa:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d13b      	bne.n	800757a <takeWifiPass+0x1da>
            	if(page == 1) {
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d108      	bne.n	800751a <takeWifiPass+0x17a>
            		cursorPosition = 16;
 8007508:	2310      	movs	r3, #16
 800750a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800750c:	2305      	movs	r3, #5
 800750e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007510:	2105      	movs	r1, #5
 8007512:	2003      	movs	r0, #3
 8007514:	f7f9 fcda 	bl	8000ecc <printTemplate>
 8007518:	e032      	b.n	8007580 <takeWifiPass+0x1e0>
            	} else if(page == 2) {
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d108      	bne.n	8007532 <takeWifiPass+0x192>
            		cursorPosition = 16;
 8007520:	2310      	movs	r3, #16
 8007522:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007524:	2301      	movs	r3, #1
 8007526:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007528:	2101      	movs	r1, #1
 800752a:	2003      	movs	r0, #3
 800752c:	f7f9 fcce 	bl	8000ecc <printTemplate>
 8007530:	e026      	b.n	8007580 <takeWifiPass+0x1e0>
            	} else if(page == 3) {
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b03      	cmp	r3, #3
 8007536:	d108      	bne.n	800754a <takeWifiPass+0x1aa>
            		cursorPosition = 16;
 8007538:	2310      	movs	r3, #16
 800753a:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800753c:	2302      	movs	r3, #2
 800753e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007540:	2102      	movs	r1, #2
 8007542:	2003      	movs	r0, #3
 8007544:	f7f9 fcc2 	bl	8000ecc <printTemplate>
 8007548:	e01a      	b.n	8007580 <takeWifiPass+0x1e0>
            	} else if(page == 4) {
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b04      	cmp	r3, #4
 800754e:	d108      	bne.n	8007562 <takeWifiPass+0x1c2>
            		cursorPosition = 16;
 8007550:	2310      	movs	r3, #16
 8007552:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007554:	2303      	movs	r3, #3
 8007556:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007558:	2103      	movs	r1, #3
 800755a:	2003      	movs	r0, #3
 800755c:	f7f9 fcb6 	bl	8000ecc <printTemplate>
 8007560:	e00e      	b.n	8007580 <takeWifiPass+0x1e0>
            	} else if(page == 5) {
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b05      	cmp	r3, #5
 8007566:	d10b      	bne.n	8007580 <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 8007568:	2310      	movs	r3, #16
 800756a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800756c:	2304      	movs	r3, #4
 800756e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007570:	2104      	movs	r1, #4
 8007572:	2003      	movs	r0, #3
 8007574:	f7f9 fcaa 	bl	8000ecc <printTemplate>
 8007578:	e002      	b.n	8007580 <takeWifiPass+0x1e0>
            	}
            } else {
            	cursorPosition--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3b01      	subs	r3, #1
 800757e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007580:	2096      	movs	r0, #150	; 0x96
 8007582:	f001 f93b 	bl	80087fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007586:	2102      	movs	r1, #2
 8007588:	4828      	ldr	r0, [pc, #160]	; (800762c <takeWifiPass+0x28c>)
 800758a:	f001 ff07 	bl	800939c <HAL_GPIO_ReadPin>
 800758e:	4603      	mov	r3, r0
 8007590:	2b01      	cmp	r3, #1
 8007592:	d121      	bne.n	80075d8 <takeWifiPass+0x238>
            eepromData[eepromVal] = cursorPosition;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	b2d9      	uxtb	r1, r3
 8007598:	4a28      	ldr	r2, [pc, #160]	; (800763c <takeWifiPass+0x29c>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	460a      	mov	r2, r1
 80075a0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	b2d9      	uxtb	r1, r3
 80075a6:	4a28      	ldr	r2, [pc, #160]	; (8007648 <takeWifiPass+0x2a8>)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	2001      	movs	r0, #1
 80075b2:	f000 fbe2 	bl	8007d7a <lcd_print_char>

            writeLoc++;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3301      	adds	r3, #1
 80075ba:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3301      	adds	r3, #1
 80075c0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3301      	adds	r3, #1
 80075c6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80075c8:	4a1c      	ldr	r2, [pc, #112]	; (800763c <takeWifiPass+0x29c>)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80075d2:	2096      	movs	r0, #150	; 0x96
 80075d4:	f001 f912 	bl	80087fc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80075d8:	2104      	movs	r1, #4
 80075da:	4814      	ldr	r0, [pc, #80]	; (800762c <takeWifiPass+0x28c>)
 80075dc:	f001 fede 	bl	800939c <HAL_GPIO_ReadPin>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d148      	bne.n	8007678 <takeWifiPass+0x2d8>
        	if(strlen(wifiSSID) >= 1) {
 80075e6:	4b12      	ldr	r3, [pc, #72]	; (8007630 <takeWifiPass+0x290>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d041      	beq.n	8007672 <takeWifiPass+0x2d2>
        		eepromData[eepromVal] = '\0';
 80075ee:	4a13      	ldr	r2, [pc, #76]	; (800763c <takeWifiPass+0x29c>)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	2200      	movs	r2, #0
 80075f6:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	dd03      	ble.n	8007606 <takeWifiPass+0x266>
        			writeLoc--;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3b01      	subs	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	e004      	b.n	8007610 <takeWifiPass+0x270>
        		} else if(writeLoc < 7) {
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b06      	cmp	r3, #6
 800760a:	dc01      	bgt.n	8007610 <takeWifiPass+0x270>
        			writeLoc = 7;
 800760c:	2307      	movs	r3, #7
 800760e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	dd1a      	ble.n	800764c <takeWifiPass+0x2ac>
        			arrayPosition--;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	3b01      	subs	r3, #1
 800761a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3b01      	subs	r3, #1
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	e01b      	b.n	800765c <takeWifiPass+0x2bc>
 8007624:	200001b0 	.word	0x200001b0
 8007628:	2000000c 	.word	0x2000000c
 800762c:	40010800 	.word	0x40010800
 8007630:	2000019c 	.word	0x2000019c
 8007634:	0800dd04 	.word	0x0800dd04
 8007638:	0800dd18 	.word	0x0800dd18
 800763c:	20000118 	.word	0x20000118
 8007640:	20000374 	.word	0x20000374
 8007644:	40011000 	.word	0x40011000
 8007648:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	da04      	bge.n	800765c <takeWifiPass+0x2bc>
        			arrayPosition = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8007656:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <takeWifiPass+0x2f0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	3306      	adds	r3, #6
 8007662:	b2db      	uxtb	r3, r3
 8007664:	4619      	mov	r1, r3
 8007666:	2001      	movs	r0, #1
 8007668:	f000 fba8 	bl	8007dbc <lcd_delete_char>
        		HAL_Delay(50);
 800766c:	2032      	movs	r0, #50	; 0x32
 800766e:	f001 f8c5 	bl	80087fc <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007672:	2096      	movs	r0, #150	; 0x96
 8007674:	f001 f8c2 	bl	80087fc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	4619      	mov	r1, r3
 800767e:	2002      	movs	r0, #2
 8007680:	f000 fb47 	bl	8007d12 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007684:	e6a6      	b.n	80073d4 <takeWifiPass+0x34>
    }
}
 8007686:	bf00      	nop
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	2000000c 	.word	0x2000000c

08007694 <mergeData>:

char* mergeData() {
 8007694:	b580      	push	{r7, lr}
 8007696:	b09c      	sub	sp, #112	; 0x70
 8007698:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800769a:	2300      	movs	r3, #0
 800769c:	63bb      	str	r3, [r7, #56]	; 0x38
 800769e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076a2:	2229      	movs	r2, #41	; 0x29
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f004 ffbc 	bl	800c624 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80076ac:	4b65      	ldr	r3, [pc, #404]	; (8007844 <mergeData+0x1b0>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	703b      	strb	r3, [r7, #0]
 80076b2:	4b65      	ldr	r3, [pc, #404]	; (8007848 <mergeData+0x1b4>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	707b      	strb	r3, [r7, #1]
 80076b8:	4b64      	ldr	r3, [pc, #400]	; (800784c <mergeData+0x1b8>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	70bb      	strb	r3, [r7, #2]
 80076be:	4b64      	ldr	r3, [pc, #400]	; (8007850 <mergeData+0x1bc>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	70fb      	strb	r3, [r7, #3]
 80076c4:	4b63      	ldr	r3, [pc, #396]	; (8007854 <mergeData+0x1c0>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	713b      	strb	r3, [r7, #4]
 80076ca:	4b63      	ldr	r3, [pc, #396]	; (8007858 <mergeData+0x1c4>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	717b      	strb	r3, [r7, #5]
 80076d0:	4b62      	ldr	r3, [pc, #392]	; (800785c <mergeData+0x1c8>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	71bb      	strb	r3, [r7, #6]
 80076d6:	4b62      	ldr	r3, [pc, #392]	; (8007860 <mergeData+0x1cc>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	71fb      	strb	r3, [r7, #7]
 80076dc:	4b61      	ldr	r3, [pc, #388]	; (8007864 <mergeData+0x1d0>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	723b      	strb	r3, [r7, #8]
 80076e2:	4b61      	ldr	r3, [pc, #388]	; (8007868 <mergeData+0x1d4>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	727b      	strb	r3, [r7, #9]
 80076e8:	4b60      	ldr	r3, [pc, #384]	; (800786c <mergeData+0x1d8>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	72bb      	strb	r3, [r7, #10]
 80076ee:	4b60      	ldr	r3, [pc, #384]	; (8007870 <mergeData+0x1dc>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	72fb      	strb	r3, [r7, #11]
 80076f4:	4b5f      	ldr	r3, [pc, #380]	; (8007874 <mergeData+0x1e0>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	733b      	strb	r3, [r7, #12]
 80076fa:	4b5f      	ldr	r3, [pc, #380]	; (8007878 <mergeData+0x1e4>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	737b      	strb	r3, [r7, #13]
 8007700:	4b5e      	ldr	r3, [pc, #376]	; (800787c <mergeData+0x1e8>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	73bb      	strb	r3, [r7, #14]
 8007706:	4b5e      	ldr	r3, [pc, #376]	; (8007880 <mergeData+0x1ec>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	73fb      	strb	r3, [r7, #15]
 800770c:	4b5d      	ldr	r3, [pc, #372]	; (8007884 <mergeData+0x1f0>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	743b      	strb	r3, [r7, #16]
 8007712:	4b5d      	ldr	r3, [pc, #372]	; (8007888 <mergeData+0x1f4>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	747b      	strb	r3, [r7, #17]
 8007718:	4b5c      	ldr	r3, [pc, #368]	; (800788c <mergeData+0x1f8>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	74bb      	strb	r3, [r7, #18]
 800771e:	4b5c      	ldr	r3, [pc, #368]	; (8007890 <mergeData+0x1fc>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	74fb      	strb	r3, [r7, #19]
 8007724:	4b5b      	ldr	r3, [pc, #364]	; (8007894 <mergeData+0x200>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	753b      	strb	r3, [r7, #20]
 800772a:	4b5b      	ldr	r3, [pc, #364]	; (8007898 <mergeData+0x204>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	757b      	strb	r3, [r7, #21]
 8007730:	4b5a      	ldr	r3, [pc, #360]	; (800789c <mergeData+0x208>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	75bb      	strb	r3, [r7, #22]
 8007736:	4b5a      	ldr	r3, [pc, #360]	; (80078a0 <mergeData+0x20c>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	75fb      	strb	r3, [r7, #23]
 800773c:	4b59      	ldr	r3, [pc, #356]	; (80078a4 <mergeData+0x210>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	763b      	strb	r3, [r7, #24]
 8007742:	4b59      	ldr	r3, [pc, #356]	; (80078a8 <mergeData+0x214>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	767b      	strb	r3, [r7, #25]
 8007748:	4b58      	ldr	r3, [pc, #352]	; (80078ac <mergeData+0x218>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	76bb      	strb	r3, [r7, #26]
 800774e:	4b58      	ldr	r3, [pc, #352]	; (80078b0 <mergeData+0x21c>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	76fb      	strb	r3, [r7, #27]
 8007754:	4b57      	ldr	r3, [pc, #348]	; (80078b4 <mergeData+0x220>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	773b      	strb	r3, [r7, #28]
 800775a:	4b57      	ldr	r3, [pc, #348]	; (80078b8 <mergeData+0x224>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	777b      	strb	r3, [r7, #29]
 8007760:	4b56      	ldr	r3, [pc, #344]	; (80078bc <mergeData+0x228>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	77bb      	strb	r3, [r7, #30]
 8007766:	4b56      	ldr	r3, [pc, #344]	; (80078c0 <mergeData+0x22c>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	77fb      	strb	r3, [r7, #31]
 800776c:	4b55      	ldr	r3, [pc, #340]	; (80078c4 <mergeData+0x230>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007774:	4b54      	ldr	r3, [pc, #336]	; (80078c8 <mergeData+0x234>)
 8007776:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800777a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			eepromData[39],
 800777e:	4b52      	ldr	r3, [pc, #328]	; (80078c8 <mergeData+0x234>)
 8007780:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			eepromData[40],
 8007788:	4b4f      	ldr	r3, [pc, #316]	; (80078c8 <mergeData+0x234>)
 800778a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			eepromData[41],
 8007792:	4b4d      	ldr	r3, [pc, #308]	; (80078c8 <mergeData+0x234>)
 8007794:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007798:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			eepromData[42],
 800779c:	4b4a      	ldr	r3, [pc, #296]	; (80078c8 <mergeData+0x234>)
 800779e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80077a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[43],
 80077a6:	4b48      	ldr	r3, [pc, #288]	; (80078c8 <mergeData+0x234>)
 80077a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80077ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[44],
 80077b0:	4b45      	ldr	r3, [pc, #276]	; (80078c8 <mergeData+0x234>)
 80077b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80077b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[45],
 80077ba:	4b43      	ldr	r3, [pc, #268]	; (80078c8 <mergeData+0x234>)
 80077bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80077c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[46],
 80077c4:	4b40      	ldr	r3, [pc, #256]	; (80078c8 <mergeData+0x234>)
 80077c6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80077ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[47],
 80077ce:	4b3e      	ldr	r3, [pc, #248]	; (80078c8 <mergeData+0x234>)
 80077d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80077d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077d8:	2306      	movs	r3, #6
 80077da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80077de:	2300      	movs	r3, #0
 80077e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077e2:	e015      	b.n	8007810 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 80077e4:	463a      	mov	r2, r7
 80077e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e8:	4413      	add	r3, r2
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077f2:	4936      	ldr	r1, [pc, #216]	; (80078cc <mergeData+0x238>)
 80077f4:	4618      	mov	r0, r3
 80077f6:	f004 fef5 	bl	800c5e4 <siprintf>
	    strcat(combinedString, temp);
 80077fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80077fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f004 ff15 	bl	800c634 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800780a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780c:	3301      	adds	r3, #1
 800780e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007812:	2b2b      	cmp	r3, #43	; 0x2b
 8007814:	d9e6      	bls.n	80077e4 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800781a:	4618      	mov	r0, r3
 800781c:	f7f8 fd02 	bl	8000224 <strlen>
 8007820:	4603      	mov	r3, r0
 8007822:	3301      	adds	r3, #1
 8007824:	4618      	mov	r0, r3
 8007826:	f004 fde7 	bl	800c3f8 <malloc>
 800782a:	4603      	mov	r3, r0
 800782c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800782e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007832:	4619      	mov	r1, r3
 8007834:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007836:	f004 ff49 	bl	800c6cc <strcpy>
	return result;
 800783a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800783c:	4618      	mov	r0, r3
 800783e:	3770      	adds	r7, #112	; 0x70
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	200001fb 	.word	0x200001fb
 8007848:	200001ed 	.word	0x200001ed
 800784c:	200001f0 	.word	0x200001f0
 8007850:	200001f1 	.word	0x200001f1
 8007854:	200001f2 	.word	0x200001f2
 8007858:	200001f9 	.word	0x200001f9
 800785c:	200001f3 	.word	0x200001f3
 8007860:	200001f4 	.word	0x200001f4
 8007864:	200001f8 	.word	0x200001f8
 8007868:	200001f5 	.word	0x200001f5
 800786c:	20000205 	.word	0x20000205
 8007870:	200001f6 	.word	0x200001f6
 8007874:	20000206 	.word	0x20000206
 8007878:	200001f7 	.word	0x200001f7
 800787c:	20000207 	.word	0x20000207
 8007880:	200001fa 	.word	0x200001fa
 8007884:	200001fc 	.word	0x200001fc
 8007888:	200001fd 	.word	0x200001fd
 800788c:	200001fe 	.word	0x200001fe
 8007890:	200001ff 	.word	0x200001ff
 8007894:	20000200 	.word	0x20000200
 8007898:	20000201 	.word	0x20000201
 800789c:	20000202 	.word	0x20000202
 80078a0:	20000203 	.word	0x20000203
 80078a4:	20000204 	.word	0x20000204
 80078a8:	20000208 	.word	0x20000208
 80078ac:	2000020a 	.word	0x2000020a
 80078b0:	200001e9 	.word	0x200001e9
 80078b4:	200001ea 	.word	0x200001ea
 80078b8:	20000000 	.word	0x20000000
 80078bc:	20000001 	.word	0x20000001
 80078c0:	200001eb 	.word	0x200001eb
 80078c4:	2000020d 	.word	0x2000020d
 80078c8:	20000118 	.word	0x20000118
 80078cc:	0800dd2c 	.word	0x0800dd2c

080078d0 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 80078d6:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <convertAndSendData+0x74>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10a      	bne.n	80078f4 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80078de:	4a1a      	ldr	r2, [pc, #104]	; (8007948 <convertAndSendData+0x78>)
 80078e0:	2101      	movs	r1, #1
 80078e2:	2001      	movs	r0, #1
 80078e4:	f000 fa34 	bl	8007d50 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80078e8:	4a18      	ldr	r2, [pc, #96]	; (800794c <convertAndSendData+0x7c>)
 80078ea:	2101      	movs	r1, #1
 80078ec:	2002      	movs	r0, #2
 80078ee:	f000 fa2f 	bl	8007d50 <lcd_print>
 80078f2:	e009      	b.n	8007908 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80078f4:	4a16      	ldr	r2, [pc, #88]	; (8007950 <convertAndSendData+0x80>)
 80078f6:	2101      	movs	r1, #1
 80078f8:	2001      	movs	r0, #1
 80078fa:	f000 fa29 	bl	8007d50 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80078fe:	4a15      	ldr	r2, [pc, #84]	; (8007954 <convertAndSendData+0x84>)
 8007900:	2101      	movs	r1, #1
 8007902:	2002      	movs	r0, #2
 8007904:	f000 fa24 	bl	8007d50 <lcd_print>
	//lcd_print(1, 1, machineID);
	//lcd_print(2, 1, wifiSSID);
	//char *dataArray = mergeData();
	//convertArrays(1);
	//lcd_print(1, 1, machineID);
	for(int i=0; i<2; i++) {
 8007908:	2300      	movs	r3, #0
 800790a:	607b      	str	r3, [r7, #4]
 800790c:	e00c      	b.n	8007928 <convertAndSendData+0x58>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 800790e:	f7ff fec1 	bl	8007694 <mergeData>
 8007912:	4603      	mov	r3, r0
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	4b10      	ldr	r3, [pc, #64]	; (8007958 <convertAndSendData+0x88>)
 8007918:	4a10      	ldr	r2, [pc, #64]	; (800795c <convertAndSendData+0x8c>)
 800791a:	4911      	ldr	r1, [pc, #68]	; (8007960 <convertAndSendData+0x90>)
 800791c:	4811      	ldr	r0, [pc, #68]	; (8007964 <convertAndSendData+0x94>)
 800791e:	f7f9 f837 	bl	8000990 <sendMachineData>
	for(int i=0; i<2; i++) {
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3301      	adds	r3, #1
 8007926:	607b      	str	r3, [r7, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b01      	cmp	r3, #1
 800792c:	ddef      	ble.n	800790e <convertAndSendData+0x3e>
	}

	HAL_Delay(500);
 800792e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007932:	f000 ff63 	bl	80087fc <HAL_Delay>
	lcd_clear();
 8007936:	f000 fa37 	bl	8007da8 <lcd_clear>
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	2000020d 	.word	0x2000020d
 8007948:	0800dd30 	.word	0x0800dd30
 800794c:	0800dd44 	.word	0x0800dd44
 8007950:	0800dd58 	.word	0x0800dd58
 8007954:	0800dd6c 	.word	0x0800dd6c
 8007958:	200001b0 	.word	0x200001b0
 800795c:	2000019c 	.word	0x2000019c
 8007960:	20000190 	.word	0x20000190
 8007964:	20000410 	.word	0x20000410

08007968 <iotSetup>:

void iotSetup() {
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 800796c:	4b13      	ldr	r3, [pc, #76]	; (80079bc <iotSetup+0x54>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d016      	beq.n	80079a2 <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 8007974:	f000 f82e 	bl	80079d4 <checkEEPROM4ID>
 8007978:	4603      	mov	r3, r0
 800797a:	2b01      	cmp	r3, #1
 800797c:	d001      	beq.n	8007982 <iotSetup+0x1a>
			takeMachineID();
 800797e:	f7ff f9ff 	bl	8006d80 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007982:	480f      	ldr	r0, [pc, #60]	; (80079c0 <iotSetup+0x58>)
 8007984:	f7f8 fc4e 	bl	8000224 <strlen>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d801      	bhi.n	8007992 <iotSetup+0x2a>
			takeWifiSSID();
 800798e:	f7ff fb8f 	bl	80070b0 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007992:	480c      	ldr	r0, [pc, #48]	; (80079c4 <iotSetup+0x5c>)
 8007994:	f7f8 fc46 	bl	8000224 <strlen>
 8007998:	4603      	mov	r3, r0
 800799a:	2b01      	cmp	r3, #1
 800799c:	d801      	bhi.n	80079a2 <iotSetup+0x3a>
			takeWifiPass();
 800799e:	f7ff fcff 	bl	80073a0 <takeWifiPass>
			HAL_Delay(200);
			goto takeIDSection;
		}
	}*/

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 80079a2:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <iotSetup+0x60>)
 80079a4:	4909      	ldr	r1, [pc, #36]	; (80079cc <iotSetup+0x64>)
 80079a6:	480a      	ldr	r0, [pc, #40]	; (80079d0 <iotSetup+0x68>)
 80079a8:	f7f8 ff48 	bl	800083c <ESP8266_Init>
	HAL_Delay(500);
 80079ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079b0:	f000 ff24 	bl	80087fc <HAL_Delay>
	convertAndSendData();
 80079b4:	f7ff ff8c 	bl	80078d0 <convertAndSendData>
}
 80079b8:	bf00      	nop
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	2000020b 	.word	0x2000020b
 80079c0:	2000019c 	.word	0x2000019c
 80079c4:	200001b0 	.word	0x200001b0
 80079c8:	0800dd80 	.word	0x0800dd80
 80079cc:	0800dd98 	.word	0x0800dd98
 80079d0:	20000410 	.word	0x20000410

080079d4 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <checkEEPROM4ID+0x44>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 80079e0:	2301      	movs	r3, #1
 80079e2:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 80079e4:	2300      	movs	r3, #0
 80079e6:	607b      	str	r3, [r7, #4]
 80079e8:	e00d      	b.n	8007a06 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 80079ea:	4a0c      	ldr	r2, [pc, #48]	; (8007a1c <checkEEPROM4ID+0x48>)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <checkEEPROM4ID+0x26>
			returnVal = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3301      	adds	r3, #1
 80079fe:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3301      	adds	r3, #1
 8007a04:	607b      	str	r3, [r7, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b0b      	cmp	r3, #11
 8007a0a:	ddee      	ble.n	80079ea <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr
 8007a18:	20000004 	.word	0x20000004
 8007a1c:	20000118 	.word	0x20000118

08007a20 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	4603      	mov	r3, r0
 8007a28:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	f023 030f 	bic.w	r3, r3, #15
 8007a30:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a32:	79fb      	ldrb	r3, [r7, #7]
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a38:	7b7b      	ldrb	r3, [r7, #13]
 8007a3a:	f043 030c 	orr.w	r3, r3, #12
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a42:	7b7b      	ldrb	r3, [r7, #13]
 8007a44:	f043 0308 	orr.w	r3, r3, #8
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a4c:	7b3b      	ldrb	r3, [r7, #12]
 8007a4e:	f043 030c 	orr.w	r3, r3, #12
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007a56:	7b3b      	ldrb	r3, [r7, #12]
 8007a58:	f043 0308 	orr.w	r3, r3, #8
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a60:	bf00      	nop
 8007a62:	4825      	ldr	r0, [pc, #148]	; (8007af8 <lcd_send_cmd+0xd8>)
 8007a64:	f002 fac3 	bl	8009fee <HAL_I2C_GetError>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d0f9      	beq.n	8007a62 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a6e:	bf00      	nop
 8007a70:	4821      	ldr	r0, [pc, #132]	; (8007af8 <lcd_send_cmd+0xd8>)
 8007a72:	f002 faaf 	bl	8009fd4 <HAL_I2C_GetState>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d1f9      	bne.n	8007a70 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a7c:	4b1f      	ldr	r3, [pc, #124]	; (8007afc <lcd_send_cmd+0xdc>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d116      	bne.n	8007ab2 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e00f      	b.n	8007aaa <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	3310      	adds	r3, #16
 8007a8e:	443b      	add	r3, r7
 8007a90:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	f022 0208 	bic.w	r2, r2, #8
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	3310      	adds	r3, #16
 8007a9e:	443b      	add	r3, r7
 8007aa0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d9ec      	bls.n	8007a8a <lcd_send_cmd+0x6a>
 8007ab0:	e015      	b.n	8007ade <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73bb      	strb	r3, [r7, #14]
 8007ab6:	e00f      	b.n	8007ad8 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	3310      	adds	r3, #16
 8007abc:	443b      	add	r3, r7
 8007abe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	f042 0208 	orr.w	r2, r2, #8
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	3310      	adds	r3, #16
 8007acc:	443b      	add	r3, r7
 8007ace:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	73bb      	strb	r3, [r7, #14]
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d9ec      	bls.n	8007ab8 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007ade:	f107 0208 	add.w	r2, r7, #8
 8007ae2:	2364      	movs	r3, #100	; 0x64
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	2304      	movs	r3, #4
 8007ae8:	214e      	movs	r1, #78	; 0x4e
 8007aea:	4803      	ldr	r0, [pc, #12]	; (8007af8 <lcd_send_cmd+0xd8>)
 8007aec:	f001 fe12 	bl	8009714 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20000374 	.word	0x20000374
 8007afc:	2000034a 	.word	0x2000034a

08007b00 <lcd_send_data>:

void lcd_send_data (char data) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	f023 030f 	bic.w	r3, r3, #15
 8007b10:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b18:	7b7b      	ldrb	r3, [r7, #13]
 8007b1a:	f043 030d 	orr.w	r3, r3, #13
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b22:	7b7b      	ldrb	r3, [r7, #13]
 8007b24:	f043 0309 	orr.w	r3, r3, #9
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b2c:	7b3b      	ldrb	r3, [r7, #12]
 8007b2e:	f043 030d 	orr.w	r3, r3, #13
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b36:	7b3b      	ldrb	r3, [r7, #12]
 8007b38:	f043 0309 	orr.w	r3, r3, #9
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b40:	bf00      	nop
 8007b42:	4825      	ldr	r0, [pc, #148]	; (8007bd8 <lcd_send_data+0xd8>)
 8007b44:	f002 fa53 	bl	8009fee <HAL_I2C_GetError>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d0f9      	beq.n	8007b42 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b4e:	bf00      	nop
 8007b50:	4821      	ldr	r0, [pc, #132]	; (8007bd8 <lcd_send_data+0xd8>)
 8007b52:	f002 fa3f 	bl	8009fd4 <HAL_I2C_GetState>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d1f9      	bne.n	8007b50 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b5c:	4b1f      	ldr	r3, [pc, #124]	; (8007bdc <lcd_send_data+0xdc>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d116      	bne.n	8007b92 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]
 8007b68:	e00f      	b.n	8007b8a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	443b      	add	r3, r7
 8007b70:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	f022 0208 	bic.w	r2, r2, #8
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	3310      	adds	r3, #16
 8007b7e:	443b      	add	r3, r7
 8007b80:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	3301      	adds	r3, #1
 8007b88:	73fb      	strb	r3, [r7, #15]
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d9ec      	bls.n	8007b6a <lcd_send_data+0x6a>
 8007b90:	e015      	b.n	8007bbe <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b92:	2300      	movs	r3, #0
 8007b94:	73bb      	strb	r3, [r7, #14]
 8007b96:	e00f      	b.n	8007bb8 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	3310      	adds	r3, #16
 8007b9c:	443b      	add	r3, r7
 8007b9e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	f042 0208 	orr.w	r2, r2, #8
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	3310      	adds	r3, #16
 8007bac:	443b      	add	r3, r7
 8007bae:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	73bb      	strb	r3, [r7, #14]
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d9ec      	bls.n	8007b98 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007bbe:	f107 0208 	add.w	r2, r7, #8
 8007bc2:	2364      	movs	r3, #100	; 0x64
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	214e      	movs	r1, #78	; 0x4e
 8007bca:	4803      	ldr	r0, [pc, #12]	; (8007bd8 <lcd_send_data+0xd8>)
 8007bcc:	f001 fda2 	bl	8009714 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007bd0:	bf00      	nop
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20000374 	.word	0x20000374
 8007bdc:	2000034a 	.word	0x2000034a

08007be0 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007be8:	e006      	b.n	8007bf8 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff ff84 	bl	8007b00 <lcd_send_data>
	while (*str) {
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1f4      	bne.n	8007bea <lcd_send_string+0xa>
	}
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	4603      	mov	r3, r0
 8007c14:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	f023 030f 	bic.w	r3, r3, #15
 8007c1c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c24:	7b7b      	ldrb	r3, [r7, #13]
 8007c26:	f043 030d 	orr.w	r3, r3, #13
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c2e:	7b7b      	ldrb	r3, [r7, #13]
 8007c30:	f043 0309 	orr.w	r3, r3, #9
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c38:	7b3b      	ldrb	r3, [r7, #12]
 8007c3a:	f043 030d 	orr.w	r3, r3, #13
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c42:	7b3b      	ldrb	r3, [r7, #12]
 8007c44:	f043 0309 	orr.w	r3, r3, #9
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c4c:	bf00      	nop
 8007c4e:	4825      	ldr	r0, [pc, #148]	; (8007ce4 <lcd_send_char+0xd8>)
 8007c50:	f002 f9cd 	bl	8009fee <HAL_I2C_GetError>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d0f9      	beq.n	8007c4e <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c5a:	bf00      	nop
 8007c5c:	4821      	ldr	r0, [pc, #132]	; (8007ce4 <lcd_send_char+0xd8>)
 8007c5e:	f002 f9b9 	bl	8009fd4 <HAL_I2C_GetState>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d1f9      	bne.n	8007c5c <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007c68:	4b1f      	ldr	r3, [pc, #124]	; (8007ce8 <lcd_send_char+0xdc>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d116      	bne.n	8007c9e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
 8007c74:	e00f      	b.n	8007c96 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	3310      	adds	r3, #16
 8007c7a:	443b      	add	r3, r7
 8007c7c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	f022 0208 	bic.w	r2, r2, #8
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	3310      	adds	r3, #16
 8007c8a:	443b      	add	r3, r7
 8007c8c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	3301      	adds	r3, #1
 8007c94:	73fb      	strb	r3, [r7, #15]
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d9ec      	bls.n	8007c76 <lcd_send_char+0x6a>
 8007c9c:	e015      	b.n	8007cca <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73bb      	strb	r3, [r7, #14]
 8007ca2:	e00f      	b.n	8007cc4 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	3310      	adds	r3, #16
 8007ca8:	443b      	add	r3, r7
 8007caa:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	f042 0208 	orr.w	r2, r2, #8
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	3310      	adds	r3, #16
 8007cb8:	443b      	add	r3, r7
 8007cba:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	73bb      	strb	r3, [r7, #14]
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d9ec      	bls.n	8007ca4 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007cca:	f107 0208 	add.w	r2, r7, #8
 8007cce:	2364      	movs	r3, #100	; 0x64
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	2304      	movs	r3, #4
 8007cd4:	214e      	movs	r1, #78	; 0x4e
 8007cd6:	4803      	ldr	r0, [pc, #12]	; (8007ce4 <lcd_send_char+0xd8>)
 8007cd8:	f001 fd1c 	bl	8009714 <HAL_I2C_Master_Transmit>
}
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000374 	.word	0x20000374
 8007ce8:	2000034a 	.word	0x2000034a

08007cec <lcd_init>:

void lcd_init (void) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007cf0:	2002      	movs	r0, #2
 8007cf2:	f7ff fe95 	bl	8007a20 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007cf6:	2028      	movs	r0, #40	; 0x28
 8007cf8:	f7ff fe92 	bl	8007a20 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007cfc:	200c      	movs	r0, #12
 8007cfe:	f7ff fe8f 	bl	8007a20 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d02:	2080      	movs	r0, #128	; 0x80
 8007d04:	f7ff fe8c 	bl	8007a20 <lcd_send_cmd>
	lcd_backlight(1);
 8007d08:	2001      	movs	r0, #1
 8007d0a:	f000 f86d 	bl	8007de8 <lcd_backlight>
}
 8007d0e:	bf00      	nop
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	4603      	mov	r3, r0
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	71fb      	strb	r3, [r7, #7]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d106      	bne.n	8007d36 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d28:	79bb      	ldrb	r3, [r7, #6]
 8007d2a:	337f      	adds	r3, #127	; 0x7f
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fe76 	bl	8007a20 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d34:	e008      	b.n	8007d48 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d105      	bne.n	8007d48 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d3c:	79bb      	ldrb	r3, [r7, #6]
 8007d3e:	3b41      	subs	r3, #65	; 0x41
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff fe6c 	bl	8007a20 <lcd_send_cmd>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	603a      	str	r2, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007d60:	79ba      	ldrb	r2, [r7, #6]
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff ffd3 	bl	8007d12 <lcd_gotoxy>
	lcd_send_string(str);
 8007d6c:	6838      	ldr	r0, [r7, #0]
 8007d6e:	f7ff ff37 	bl	8007be0 <lcd_send_string>
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	4603      	mov	r3, r0
 8007d82:	71fb      	strb	r3, [r7, #7]
 8007d84:	460b      	mov	r3, r1
 8007d86:	71bb      	strb	r3, [r7, #6]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007d8c:	79ba      	ldrb	r2, [r7, #6]
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff ffbd 	bl	8007d12 <lcd_gotoxy>
    lcd_send_char(ch);
 8007d98:	797b      	ldrb	r3, [r7, #5]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff ff36 	bl	8007c0c <lcd_send_char>
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <lcd_clear>:

void lcd_clear(void) {
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007dac:	2001      	movs	r0, #1
 8007dae:	f7ff fe37 	bl	8007a20 <lcd_send_cmd>
    HAL_Delay(2);
 8007db2:	2002      	movs	r0, #2
 8007db4:	f000 fd22 	bl	80087fc <HAL_Delay>
}
 8007db8:	bf00      	nop
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	71fb      	strb	r3, [r7, #7]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007dcc:	79ba      	ldrb	r2, [r7, #6]
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff ff9d 	bl	8007d12 <lcd_gotoxy>

    lcd_send_char(' ');
 8007dd8:	2020      	movs	r0, #32
 8007dda:	f7ff ff17 	bl	8007c0c <lcd_send_char>
}
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007df2:	4a05      	ldr	r2, [pc, #20]	; (8007e08 <lcd_backlight+0x20>)
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007df8:	2000      	movs	r0, #0
 8007dfa:	f7ff fe11 	bl	8007a20 <lcd_send_cmd>
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	2000034a 	.word	0x2000034a

08007e0c <lcd_cursor>:

void lcd_cursor(int state) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d106      	bne.n	8007e28 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e1a:	200e      	movs	r0, #14
 8007e1c:	f7ff fe00 	bl	8007a20 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e20:	200f      	movs	r0, #15
 8007e22:	f7ff fdfd 	bl	8007a20 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e26:	e002      	b.n	8007e2e <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e28:	200c      	movs	r0, #12
 8007e2a:	f7ff fdf9 	bl	8007a20 <lcd_send_cmd>
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	4a03      	ldr	r2, [pc, #12]	; (8007e54 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e48:	6013      	str	r3, [r2, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr
 8007e54:	200001c8 	.word	0x200001c8

08007e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e5c:	f000 fc6c 	bl	8008738 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e64:	f000 fcca 	bl	80087fc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e68:	f000 f89c 	bl	8007fa4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e6c:	f000 f9be 	bl	80081ec <MX_GPIO_Init>
  MX_CAN_Init();
 8007e70:	f000 f8de 	bl	8008030 <MX_CAN_Init>
  MX_I2C1_Init();
 8007e74:	f000 f910 	bl	8008098 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007e78:	f000 f93c 	bl	80080f4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007e7c:	f000 f98c 	bl	8008198 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007e80:	2201      	movs	r2, #1
 8007e82:	2140      	movs	r1, #64	; 0x40
 8007e84:	483e      	ldr	r0, [pc, #248]	; (8007f80 <main+0x128>)
 8007e86:	f001 faa0 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	2180      	movs	r1, #128	; 0x80
 8007e8e:	483c      	ldr	r0, [pc, #240]	; (8007f80 <main+0x128>)
 8007e90:	f001 fa9b 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007e94:	200a      	movs	r0, #10
 8007e96:	f000 fcb1 	bl	80087fc <HAL_Delay>
  lcd_init();
 8007e9a:	f7ff ff27 	bl	8007cec <lcd_init>
  HAL_Delay(10);
 8007e9e:	200a      	movs	r0, #10
 8007ea0:	f000 fcac 	bl	80087fc <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007ea4:	4837      	ldr	r0, [pc, #220]	; (8007f84 <main+0x12c>)
 8007ea6:	f003 f943 	bl	800b130 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007eaa:	bf00      	nop
 8007eac:	4836      	ldr	r0, [pc, #216]	; (8007f88 <main+0x130>)
 8007eae:	f002 f89e 	bl	8009fee <HAL_I2C_GetError>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d0f9      	beq.n	8007eac <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007eb8:	bf00      	nop
 8007eba:	4833      	ldr	r0, [pc, #204]	; (8007f88 <main+0x130>)
 8007ebc:	f002 f88a 	bl	8009fd4 <HAL_I2C_GetState>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	d1f9      	bne.n	8007eba <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ecc:	482c      	ldr	r0, [pc, #176]	; (8007f80 <main+0x128>)
 8007ece:	f001 fa7c 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ed8:	4829      	ldr	r0, [pc, #164]	; (8007f80 <main+0x128>)
 8007eda:	f001 fa76 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2104      	movs	r1, #4
 8007ee2:	4827      	ldr	r0, [pc, #156]	; (8007f80 <main+0x128>)
 8007ee4:	f001 fa71 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2102      	movs	r1, #2
 8007eec:	4824      	ldr	r0, [pc, #144]	; (8007f80 <main+0x128>)
 8007eee:	f001 fa6c 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	4822      	ldr	r0, [pc, #136]	; (8007f80 <main+0x128>)
 8007ef8:	f001 fa67 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007efc:	2200      	movs	r2, #0
 8007efe:	2120      	movs	r1, #32
 8007f00:	4822      	ldr	r0, [pc, #136]	; (8007f8c <main+0x134>)
 8007f02:	f001 fa62 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f06:	2200      	movs	r2, #0
 8007f08:	2110      	movs	r1, #16
 8007f0a:	4820      	ldr	r0, [pc, #128]	; (8007f8c <main+0x134>)
 8007f0c:	f001 fa5d 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f10:	2200      	movs	r2, #0
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	481e      	ldr	r0, [pc, #120]	; (8007f90 <main+0x138>)
 8007f16:	f001 fa58 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2140      	movs	r1, #64	; 0x40
 8007f1e:	481c      	ldr	r0, [pc, #112]	; (8007f90 <main+0x138>)
 8007f20:	f001 fa53 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2120      	movs	r1, #32
 8007f28:	4819      	ldr	r0, [pc, #100]	; (8007f90 <main+0x138>)
 8007f2a:	f001 fa4e 	bl	80093ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2110      	movs	r1, #16
 8007f32:	4817      	ldr	r0, [pc, #92]	; (8007f90 <main+0x138>)
 8007f34:	f001 fa49 	bl	80093ca <HAL_GPIO_WritePin>

  i2cTest();
 8007f38:	f7f8 ff1a 	bl	8000d70 <i2cTest>
  HAL_Delay(100);
 8007f3c:	2064      	movs	r0, #100	; 0x64
 8007f3e:	f000 fc5d 	bl	80087fc <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f42:	4a14      	ldr	r2, [pc, #80]	; (8007f94 <main+0x13c>)
 8007f44:	2101      	movs	r1, #1
 8007f46:	2001      	movs	r0, #1
 8007f48:	f7ff ff02 	bl	8007d50 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f4c:	4a12      	ldr	r2, [pc, #72]	; (8007f98 <main+0x140>)
 8007f4e:	2101      	movs	r1, #1
 8007f50:	2002      	movs	r0, #2
 8007f52:	f7ff fefd 	bl	8007d50 <lcd_print>
  HAL_Delay(1000);
 8007f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f5a:	f000 fc4f 	bl	80087fc <HAL_Delay>
  lcd_clear();
 8007f5e:	f7ff ff23 	bl	8007da8 <lcd_clear>

  eepromKontrol();
 8007f62:	f7f8 f967 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007f66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f6a:	f000 fc47 	bl	80087fc <HAL_Delay>

  backLightTimer = millis;
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <main+0x144>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a0b      	ldr	r2, [pc, #44]	; (8007fa0 <main+0x148>)
 8007f74:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007f76:	f7ff fcf7 	bl	8007968 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f7a:	f7fe fd5f 	bl	8006a3c <mainLoop>
 8007f7e:	e7fc      	b.n	8007f7a <main+0x122>
 8007f80:	40010c00 	.word	0x40010c00
 8007f84:	200003c8 	.word	0x200003c8
 8007f88:	20000374 	.word	0x20000374
 8007f8c:	40011000 	.word	0x40011000
 8007f90:	40010800 	.word	0x40010800
 8007f94:	0800dda0 	.word	0x0800dda0
 8007f98:	0800ddb4 	.word	0x0800ddb4
 8007f9c:	200001c8 	.word	0x200001c8
 8007fa0:	200001e4 	.word	0x200001e4

08007fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b090      	sub	sp, #64	; 0x40
 8007fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007faa:	f107 0318 	add.w	r3, r7, #24
 8007fae:	2228      	movs	r2, #40	; 0x28
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f004 fb36 	bl	800c624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fb8:	1d3b      	adds	r3, r7, #4
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
 8007fc0:	609a      	str	r2, [r3, #8]
 8007fc2:	60da      	str	r2, [r3, #12]
 8007fc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fe2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fe8:	f107 0318 	add.w	r3, r7, #24
 8007fec:	4618      	mov	r0, r3
 8007fee:	f002 fc3f 	bl	800a870 <HAL_RCC_OscConfig>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007ff8:	f000 f9a2 	bl	8008340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ffc:	230f      	movs	r3, #15
 8007ffe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008000:	2302      	movs	r3, #2
 8008002:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800800c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	2102      	movs	r1, #2
 8008016:	4618      	mov	r0, r3
 8008018:	f002 feac 	bl	800ad74 <HAL_RCC_ClockConfig>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008022:	f000 f98d 	bl	8008340 <Error_Handler>
  }
}
 8008026:	bf00      	nop
 8008028:	3740      	adds	r7, #64	; 0x40
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008034:	4b16      	ldr	r3, [pc, #88]	; (8008090 <MX_CAN_Init+0x60>)
 8008036:	4a17      	ldr	r2, [pc, #92]	; (8008094 <MX_CAN_Init+0x64>)
 8008038:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800803a:	4b15      	ldr	r3, [pc, #84]	; (8008090 <MX_CAN_Init+0x60>)
 800803c:	2210      	movs	r2, #16
 800803e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008040:	4b13      	ldr	r3, [pc, #76]	; (8008090 <MX_CAN_Init+0x60>)
 8008042:	2200      	movs	r2, #0
 8008044:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008046:	4b12      	ldr	r3, [pc, #72]	; (8008090 <MX_CAN_Init+0x60>)
 8008048:	2200      	movs	r2, #0
 800804a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800804c:	4b10      	ldr	r3, [pc, #64]	; (8008090 <MX_CAN_Init+0x60>)
 800804e:	2200      	movs	r2, #0
 8008050:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008052:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <MX_CAN_Init+0x60>)
 8008054:	2200      	movs	r2, #0
 8008056:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008058:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <MX_CAN_Init+0x60>)
 800805a:	2200      	movs	r2, #0
 800805c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800805e:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <MX_CAN_Init+0x60>)
 8008060:	2200      	movs	r2, #0
 8008062:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <MX_CAN_Init+0x60>)
 8008066:	2200      	movs	r2, #0
 8008068:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800806a:	4b09      	ldr	r3, [pc, #36]	; (8008090 <MX_CAN_Init+0x60>)
 800806c:	2200      	movs	r2, #0
 800806e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <MX_CAN_Init+0x60>)
 8008072:	2200      	movs	r2, #0
 8008074:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <MX_CAN_Init+0x60>)
 8008078:	2200      	movs	r2, #0
 800807a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800807c:	4804      	ldr	r0, [pc, #16]	; (8008090 <MX_CAN_Init+0x60>)
 800807e:	f000 fbe1 	bl	8008844 <HAL_CAN_Init>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008088:	f000 f95a 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800808c:	bf00      	nop
 800808e:	bd80      	pop	{r7, pc}
 8008090:	2000034c 	.word	0x2000034c
 8008094:	40006400 	.word	0x40006400

08008098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800809c:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <MX_I2C1_Init+0x50>)
 800809e:	4a13      	ldr	r2, [pc, #76]	; (80080ec <MX_I2C1_Init+0x54>)
 80080a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80080a2:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080a4:	4a12      	ldr	r2, [pc, #72]	; (80080f0 <MX_I2C1_Init+0x58>)
 80080a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80080a8:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80080ae:	4b0e      	ldr	r3, [pc, #56]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80080b4:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080be:	2200      	movs	r2, #0
 80080c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80080c2:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080d4:	4804      	ldr	r0, [pc, #16]	; (80080e8 <MX_I2C1_Init+0x50>)
 80080d6:	f001 f9a9 	bl	800942c <HAL_I2C_Init>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080e0:	f000 f92e 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80080e4:	bf00      	nop
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20000374 	.word	0x20000374
 80080ec:	40005400 	.word	0x40005400
 80080f0:	00061a80 	.word	0x00061a80

080080f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	605a      	str	r2, [r3, #4]
 8008104:	609a      	str	r2, [r3, #8]
 8008106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008108:	463b      	mov	r3, r7
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008110:	4b1f      	ldr	r3, [pc, #124]	; (8008190 <MX_TIM1_Init+0x9c>)
 8008112:	4a20      	ldr	r2, [pc, #128]	; (8008194 <MX_TIM1_Init+0xa0>)
 8008114:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008116:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <MX_TIM1_Init+0x9c>)
 8008118:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800811c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800811e:	4b1c      	ldr	r3, [pc, #112]	; (8008190 <MX_TIM1_Init+0x9c>)
 8008120:	2200      	movs	r2, #0
 8008122:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008124:	4b1a      	ldr	r3, [pc, #104]	; (8008190 <MX_TIM1_Init+0x9c>)
 8008126:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800812a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800812c:	4b18      	ldr	r3, [pc, #96]	; (8008190 <MX_TIM1_Init+0x9c>)
 800812e:	2200      	movs	r2, #0
 8008130:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008132:	4b17      	ldr	r3, [pc, #92]	; (8008190 <MX_TIM1_Init+0x9c>)
 8008134:	2200      	movs	r2, #0
 8008136:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008138:	4b15      	ldr	r3, [pc, #84]	; (8008190 <MX_TIM1_Init+0x9c>)
 800813a:	2200      	movs	r2, #0
 800813c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800813e:	4814      	ldr	r0, [pc, #80]	; (8008190 <MX_TIM1_Init+0x9c>)
 8008140:	f002 ffa6 	bl	800b090 <HAL_TIM_Base_Init>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800814a:	f000 f8f9 	bl	8008340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800814e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008152:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008154:	f107 0308 	add.w	r3, r7, #8
 8008158:	4619      	mov	r1, r3
 800815a:	480d      	ldr	r0, [pc, #52]	; (8008190 <MX_TIM1_Init+0x9c>)
 800815c:	f003 f950 	bl	800b400 <HAL_TIM_ConfigClockSource>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008166:	f000 f8eb 	bl	8008340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800816a:	2300      	movs	r3, #0
 800816c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800816e:	2300      	movs	r3, #0
 8008170:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008172:	463b      	mov	r3, r7
 8008174:	4619      	mov	r1, r3
 8008176:	4806      	ldr	r0, [pc, #24]	; (8008190 <MX_TIM1_Init+0x9c>)
 8008178:	f003 fb3e 	bl	800b7f8 <HAL_TIMEx_MasterConfigSynchronization>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008182:	f000 f8dd 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008186:	bf00      	nop
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200003c8 	.word	0x200003c8
 8008194:	40012c00 	.word	0x40012c00

08008198 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800819c:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 800819e:	4a12      	ldr	r2, [pc, #72]	; (80081e8 <MX_USART1_UART_Init+0x50>)
 80081a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80081a2:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 80081a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80081aa:	4b0e      	ldr	r3, [pc, #56]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081bc:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 80081be:	220c      	movs	r2, #12
 80081c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081c2:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081c8:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081ce:	4805      	ldr	r0, [pc, #20]	; (80081e4 <MX_USART1_UART_Init+0x4c>)
 80081d0:	f003 fb90 	bl	800b8f4 <HAL_UART_Init>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80081da:	f000 f8b1 	bl	8008340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081de:	bf00      	nop
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000410 	.word	0x20000410
 80081e8:	40013800 	.word	0x40013800

080081ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f2:	f107 0310 	add.w	r3, r7, #16
 80081f6:	2200      	movs	r2, #0
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	605a      	str	r2, [r3, #4]
 80081fc:	609a      	str	r2, [r3, #8]
 80081fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008200:	4b4b      	ldr	r3, [pc, #300]	; (8008330 <MX_GPIO_Init+0x144>)
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	4a4a      	ldr	r2, [pc, #296]	; (8008330 <MX_GPIO_Init+0x144>)
 8008206:	f043 0310 	orr.w	r3, r3, #16
 800820a:	6193      	str	r3, [r2, #24]
 800820c:	4b48      	ldr	r3, [pc, #288]	; (8008330 <MX_GPIO_Init+0x144>)
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008218:	4b45      	ldr	r3, [pc, #276]	; (8008330 <MX_GPIO_Init+0x144>)
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	4a44      	ldr	r2, [pc, #272]	; (8008330 <MX_GPIO_Init+0x144>)
 800821e:	f043 0320 	orr.w	r3, r3, #32
 8008222:	6193      	str	r3, [r2, #24]
 8008224:	4b42      	ldr	r3, [pc, #264]	; (8008330 <MX_GPIO_Init+0x144>)
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	60bb      	str	r3, [r7, #8]
 800822e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008230:	4b3f      	ldr	r3, [pc, #252]	; (8008330 <MX_GPIO_Init+0x144>)
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	4a3e      	ldr	r2, [pc, #248]	; (8008330 <MX_GPIO_Init+0x144>)
 8008236:	f043 0304 	orr.w	r3, r3, #4
 800823a:	6193      	str	r3, [r2, #24]
 800823c:	4b3c      	ldr	r3, [pc, #240]	; (8008330 <MX_GPIO_Init+0x144>)
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008248:	4b39      	ldr	r3, [pc, #228]	; (8008330 <MX_GPIO_Init+0x144>)
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	4a38      	ldr	r2, [pc, #224]	; (8008330 <MX_GPIO_Init+0x144>)
 800824e:	f043 0308 	orr.w	r3, r3, #8
 8008252:	6193      	str	r3, [r2, #24]
 8008254:	4b36      	ldr	r3, [pc, #216]	; (8008330 <MX_GPIO_Init+0x144>)
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	603b      	str	r3, [r7, #0]
 800825e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008260:	2200      	movs	r2, #0
 8008262:	21f0      	movs	r1, #240	; 0xf0
 8008264:	4833      	ldr	r0, [pc, #204]	; (8008334 <MX_GPIO_Init+0x148>)
 8008266:	f001 f8b0 	bl	80093ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800826a:	2200      	movs	r2, #0
 800826c:	f241 0130 	movw	r1, #4144	; 0x1030
 8008270:	4831      	ldr	r0, [pc, #196]	; (8008338 <MX_GPIO_Init+0x14c>)
 8008272:	f001 f8aa 	bl	80093ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008276:	2200      	movs	r2, #0
 8008278:	f640 4107 	movw	r1, #3079	; 0xc07
 800827c:	482f      	ldr	r0, [pc, #188]	; (800833c <MX_GPIO_Init+0x150>)
 800827e:	f001 f8a4 	bl	80093ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008282:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008286:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828c:	2300      	movs	r3, #0
 800828e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008290:	f107 0310 	add.w	r3, r7, #16
 8008294:	4619      	mov	r1, r3
 8008296:	4828      	ldr	r0, [pc, #160]	; (8008338 <MX_GPIO_Init+0x14c>)
 8008298:	f000 fe20 	bl	8008edc <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800829c:	f248 130f 	movw	r3, #33039	; 0x810f
 80082a0:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082a2:	2300      	movs	r3, #0
 80082a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082aa:	f107 0310 	add.w	r3, r7, #16
 80082ae:	4619      	mov	r1, r3
 80082b0:	4820      	ldr	r0, [pc, #128]	; (8008334 <MX_GPIO_Init+0x148>)
 80082b2:	f000 fe13 	bl	8008edc <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80082b6:	23f0      	movs	r3, #240	; 0xf0
 80082b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ba:	2301      	movs	r3, #1
 80082bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082c2:	2302      	movs	r3, #2
 80082c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c6:	f107 0310 	add.w	r3, r7, #16
 80082ca:	4619      	mov	r1, r3
 80082cc:	4819      	ldr	r0, [pc, #100]	; (8008334 <MX_GPIO_Init+0x148>)
 80082ce:	f000 fe05 	bl	8008edc <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80082d2:	f241 0330 	movw	r3, #4144	; 0x1030
 80082d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082d8:	2301      	movs	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e0:	2302      	movs	r3, #2
 80082e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082e4:	f107 0310 	add.w	r3, r7, #16
 80082e8:	4619      	mov	r1, r3
 80082ea:	4813      	ldr	r0, [pc, #76]	; (8008338 <MX_GPIO_Init+0x14c>)
 80082ec:	f000 fdf6 	bl	8008edc <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082f0:	f640 4307 	movw	r3, #3079	; 0xc07
 80082f4:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082f6:	2301      	movs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fe:	2302      	movs	r3, #2
 8008300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008302:	f107 0310 	add.w	r3, r7, #16
 8008306:	4619      	mov	r1, r3
 8008308:	480c      	ldr	r0, [pc, #48]	; (800833c <MX_GPIO_Init+0x150>)
 800830a:	f000 fde7 	bl	8008edc <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800830e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008318:	2300      	movs	r3, #0
 800831a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800831c:	f107 0310 	add.w	r3, r7, #16
 8008320:	4619      	mov	r1, r3
 8008322:	4806      	ldr	r0, [pc, #24]	; (800833c <MX_GPIO_Init+0x150>)
 8008324:	f000 fdda 	bl	8008edc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008328:	bf00      	nop
 800832a:	3720      	adds	r7, #32
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40021000 	.word	0x40021000
 8008334:	40010800 	.word	0x40010800
 8008338:	40011000 	.word	0x40011000
 800833c:	40010c00 	.word	0x40010c00

08008340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008344:	bf00      	nop
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr

0800834c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <HAL_MspInit+0x5c>)
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <HAL_MspInit+0x5c>)
 8008358:	f043 0301 	orr.w	r3, r3, #1
 800835c:	6193      	str	r3, [r2, #24]
 800835e:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <HAL_MspInit+0x5c>)
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	60bb      	str	r3, [r7, #8]
 8008368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800836a:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <HAL_MspInit+0x5c>)
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	4a0e      	ldr	r2, [pc, #56]	; (80083a8 <HAL_MspInit+0x5c>)
 8008370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008374:	61d3      	str	r3, [r2, #28]
 8008376:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <HAL_MspInit+0x5c>)
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837e:	607b      	str	r3, [r7, #4]
 8008380:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <HAL_MspInit+0x60>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	4a04      	ldr	r2, [pc, #16]	; (80083ac <HAL_MspInit+0x60>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr
 80083a8:	40021000 	.word	0x40021000
 80083ac:	40010000 	.word	0x40010000

080083b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	609a      	str	r2, [r3, #8]
 80083c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1c      	ldr	r2, [pc, #112]	; (800843c <HAL_CAN_MspInit+0x8c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d131      	bne.n	8008434 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80083d0:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <HAL_CAN_MspInit+0x90>)
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	4a1a      	ldr	r2, [pc, #104]	; (8008440 <HAL_CAN_MspInit+0x90>)
 80083d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083da:	61d3      	str	r3, [r2, #28]
 80083dc:	4b18      	ldr	r3, [pc, #96]	; (8008440 <HAL_CAN_MspInit+0x90>)
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <HAL_CAN_MspInit+0x90>)
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	4a14      	ldr	r2, [pc, #80]	; (8008440 <HAL_CAN_MspInit+0x90>)
 80083ee:	f043 0304 	orr.w	r3, r3, #4
 80083f2:	6193      	str	r3, [r2, #24]
 80083f4:	4b12      	ldr	r3, [pc, #72]	; (8008440 <HAL_CAN_MspInit+0x90>)
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	60bb      	str	r3, [r7, #8]
 80083fe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800840a:	2300      	movs	r3, #0
 800840c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800840e:	f107 0310 	add.w	r3, r7, #16
 8008412:	4619      	mov	r1, r3
 8008414:	480b      	ldr	r0, [pc, #44]	; (8008444 <HAL_CAN_MspInit+0x94>)
 8008416:	f000 fd61 	bl	8008edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800841a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800841e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008420:	2302      	movs	r3, #2
 8008422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008424:	2303      	movs	r3, #3
 8008426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008428:	f107 0310 	add.w	r3, r7, #16
 800842c:	4619      	mov	r1, r3
 800842e:	4805      	ldr	r0, [pc, #20]	; (8008444 <HAL_CAN_MspInit+0x94>)
 8008430:	f000 fd54 	bl	8008edc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008434:	bf00      	nop
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	40006400 	.word	0x40006400
 8008440:	40021000 	.word	0x40021000
 8008444:	40010800 	.word	0x40010800

08008448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	605a      	str	r2, [r3, #4]
 800845a:	609a      	str	r2, [r3, #8]
 800845c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <HAL_I2C_MspInit+0x70>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d123      	bne.n	80084b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008468:	4b14      	ldr	r3, [pc, #80]	; (80084bc <HAL_I2C_MspInit+0x74>)
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	4a13      	ldr	r2, [pc, #76]	; (80084bc <HAL_I2C_MspInit+0x74>)
 800846e:	f043 0308 	orr.w	r3, r3, #8
 8008472:	6193      	str	r3, [r2, #24]
 8008474:	4b11      	ldr	r3, [pc, #68]	; (80084bc <HAL_I2C_MspInit+0x74>)
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008480:	23c0      	movs	r3, #192	; 0xc0
 8008482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008484:	2312      	movs	r3, #18
 8008486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008488:	2303      	movs	r3, #3
 800848a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800848c:	f107 0310 	add.w	r3, r7, #16
 8008490:	4619      	mov	r1, r3
 8008492:	480b      	ldr	r0, [pc, #44]	; (80084c0 <HAL_I2C_MspInit+0x78>)
 8008494:	f000 fd22 	bl	8008edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008498:	4b08      	ldr	r3, [pc, #32]	; (80084bc <HAL_I2C_MspInit+0x74>)
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	4a07      	ldr	r2, [pc, #28]	; (80084bc <HAL_I2C_MspInit+0x74>)
 800849e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084a2:	61d3      	str	r3, [r2, #28]
 80084a4:	4b05      	ldr	r3, [pc, #20]	; (80084bc <HAL_I2C_MspInit+0x74>)
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084ac:	60bb      	str	r3, [r7, #8]
 80084ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084b0:	bf00      	nop
 80084b2:	3720      	adds	r7, #32
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	40005400 	.word	0x40005400
 80084bc:	40021000 	.word	0x40021000
 80084c0:	40010c00 	.word	0x40010c00

080084c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <HAL_I2C_MspDeInit+0x38>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d10d      	bne.n	80084f2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80084d6:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <HAL_I2C_MspDeInit+0x3c>)
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	4a09      	ldr	r2, [pc, #36]	; (8008500 <HAL_I2C_MspDeInit+0x3c>)
 80084dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084e0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80084e2:	2140      	movs	r1, #64	; 0x40
 80084e4:	4807      	ldr	r0, [pc, #28]	; (8008504 <HAL_I2C_MspDeInit+0x40>)
 80084e6:	f000 fe8d 	bl	8009204 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80084ea:	2180      	movs	r1, #128	; 0x80
 80084ec:	4805      	ldr	r0, [pc, #20]	; (8008504 <HAL_I2C_MspDeInit+0x40>)
 80084ee:	f000 fe89 	bl	8009204 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	40005400 	.word	0x40005400
 8008500:	40021000 	.word	0x40021000
 8008504:	40010c00 	.word	0x40010c00

08008508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a0d      	ldr	r2, [pc, #52]	; (800854c <HAL_TIM_Base_MspInit+0x44>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d113      	bne.n	8008542 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800851a:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <HAL_TIM_Base_MspInit+0x48>)
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	4a0c      	ldr	r2, [pc, #48]	; (8008550 <HAL_TIM_Base_MspInit+0x48>)
 8008520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008524:	6193      	str	r3, [r2, #24]
 8008526:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <HAL_TIM_Base_MspInit+0x48>)
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008532:	2200      	movs	r2, #0
 8008534:	2100      	movs	r1, #0
 8008536:	2019      	movs	r0, #25
 8008538:	f000 fb57 	bl	8008bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800853c:	2019      	movs	r0, #25
 800853e:	f000 fb70 	bl	8008c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40021000 	.word	0x40021000

08008554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800855c:	f107 0310 	add.w	r3, r7, #16
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a20      	ldr	r2, [pc, #128]	; (80085f0 <HAL_UART_MspInit+0x9c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d139      	bne.n	80085e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008574:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <HAL_UART_MspInit+0xa0>)
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	4a1e      	ldr	r2, [pc, #120]	; (80085f4 <HAL_UART_MspInit+0xa0>)
 800857a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800857e:	6193      	str	r3, [r2, #24]
 8008580:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <HAL_UART_MspInit+0xa0>)
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800858c:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <HAL_UART_MspInit+0xa0>)
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	4a18      	ldr	r2, [pc, #96]	; (80085f4 <HAL_UART_MspInit+0xa0>)
 8008592:	f043 0304 	orr.w	r3, r3, #4
 8008596:	6193      	str	r3, [r2, #24]
 8008598:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <HAL_UART_MspInit+0xa0>)
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	60bb      	str	r3, [r7, #8]
 80085a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085aa:	2302      	movs	r3, #2
 80085ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085ae:	2303      	movs	r3, #3
 80085b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b2:	f107 0310 	add.w	r3, r7, #16
 80085b6:	4619      	mov	r1, r3
 80085b8:	480f      	ldr	r0, [pc, #60]	; (80085f8 <HAL_UART_MspInit+0xa4>)
 80085ba:	f000 fc8f 	bl	8008edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085cc:	f107 0310 	add.w	r3, r7, #16
 80085d0:	4619      	mov	r1, r3
 80085d2:	4809      	ldr	r0, [pc, #36]	; (80085f8 <HAL_UART_MspInit+0xa4>)
 80085d4:	f000 fc82 	bl	8008edc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	2025      	movs	r0, #37	; 0x25
 80085de:	f000 fb04 	bl	8008bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085e2:	2025      	movs	r0, #37	; 0x25
 80085e4:	f000 fb1d 	bl	8008c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085e8:	bf00      	nop
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	40013800 	.word	0x40013800
 80085f4:	40021000 	.word	0x40021000
 80085f8:	40010800 	.word	0x40010800

080085fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008600:	e7fe      	b.n	8008600 <NMI_Handler+0x4>

08008602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008602:	b480      	push	{r7}
 8008604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008606:	e7fe      	b.n	8008606 <HardFault_Handler+0x4>

08008608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800860c:	e7fe      	b.n	800860c <MemManage_Handler+0x4>

0800860e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800860e:	b480      	push	{r7}
 8008610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008612:	e7fe      	b.n	8008612 <BusFault_Handler+0x4>

08008614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008618:	e7fe      	b.n	8008618 <UsageFault_Handler+0x4>

0800861a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800861a:	b480      	push	{r7}
 800861c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800861e:	bf00      	nop
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008626:	b480      	push	{r7}
 8008628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800862a:	bf00      	nop
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008632:	b480      	push	{r7}
 8008634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008636:	bf00      	nop
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr

0800863e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008642:	f000 f8bf 	bl	80087c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008646:	bf00      	nop
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008650:	4802      	ldr	r0, [pc, #8]	; (800865c <TIM1_UP_IRQHandler+0x10>)
 8008652:	f002 fdcd 	bl	800b1f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008656:	bf00      	nop
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	200003c8 	.word	0x200003c8

08008660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008664:	4802      	ldr	r0, [pc, #8]	; (8008670 <USART1_IRQHandler+0x10>)
 8008666:	f003 f9cb 	bl	800ba00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800866a:	bf00      	nop
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000410 	.word	0x20000410

08008674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800867c:	4a14      	ldr	r2, [pc, #80]	; (80086d0 <_sbrk+0x5c>)
 800867e:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <_sbrk+0x60>)
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008688:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <_sbrk+0x64>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d102      	bne.n	8008696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008690:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <_sbrk+0x64>)
 8008692:	4a12      	ldr	r2, [pc, #72]	; (80086dc <_sbrk+0x68>)
 8008694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008696:	4b10      	ldr	r3, [pc, #64]	; (80086d8 <_sbrk+0x64>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d207      	bcs.n	80086b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086a4:	f003 ffe6 	bl	800c674 <__errno>
 80086a8:	4603      	mov	r3, r0
 80086aa:	220c      	movs	r2, #12
 80086ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086ae:	f04f 33ff 	mov.w	r3, #4294967295
 80086b2:	e009      	b.n	80086c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086b4:	4b08      	ldr	r3, [pc, #32]	; (80086d8 <_sbrk+0x64>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <_sbrk+0x64>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4413      	add	r3, r2
 80086c2:	4a05      	ldr	r2, [pc, #20]	; (80086d8 <_sbrk+0x64>)
 80086c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086c6:	68fb      	ldr	r3, [r7, #12]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	2000c000 	.word	0x2000c000
 80086d4:	00000400 	.word	0x00000400
 80086d8:	20000458 	.word	0x20000458
 80086dc:	200005a8 	.word	0x200005a8

080086e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086e0:	b480      	push	{r7}
 80086e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086e4:	bf00      	nop
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086ec:	480c      	ldr	r0, [pc, #48]	; (8008720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80086ee:	490d      	ldr	r1, [pc, #52]	; (8008724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80086f0:	4a0d      	ldr	r2, [pc, #52]	; (8008728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80086f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086f4:	e002      	b.n	80086fc <LoopCopyDataInit>

080086f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086fa:	3304      	adds	r3, #4

080086fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008700:	d3f9      	bcc.n	80086f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008702:	4a0a      	ldr	r2, [pc, #40]	; (800872c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008704:	4c0a      	ldr	r4, [pc, #40]	; (8008730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008708:	e001      	b.n	800870e <LoopFillZerobss>

0800870a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800870a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800870c:	3204      	adds	r2, #4

0800870e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800870e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008710:	d3fb      	bcc.n	800870a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008712:	f7ff ffe5 	bl	80086e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008716:	f003 ffb3 	bl	800c680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800871a:	f7ff fb9d 	bl	8007e58 <main>
  bx lr
 800871e:	4770      	bx	lr
  ldr r0, =_sdata
 8008720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008724:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8008728:	0800de54 	.word	0x0800de54
  ldr r2, =_sbss
 800872c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8008730:	200005a8 	.word	0x200005a8

08008734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008734:	e7fe      	b.n	8008734 <ADC1_2_IRQHandler>
	...

08008738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800873c:	4b08      	ldr	r3, [pc, #32]	; (8008760 <HAL_Init+0x28>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a07      	ldr	r2, [pc, #28]	; (8008760 <HAL_Init+0x28>)
 8008742:	f043 0310 	orr.w	r3, r3, #16
 8008746:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008748:	2003      	movs	r0, #3
 800874a:	f000 fa43 	bl	8008bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800874e:	200f      	movs	r0, #15
 8008750:	f000 f808 	bl	8008764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008754:	f7ff fdfa 	bl	800834c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	40022000 	.word	0x40022000

08008764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800876c:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <HAL_InitTick+0x54>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4b12      	ldr	r3, [pc, #72]	; (80087bc <HAL_InitTick+0x58>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	4619      	mov	r1, r3
 8008776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800877a:	fbb3 f3f1 	udiv	r3, r3, r1
 800877e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fa5b 	bl	8008c3e <HAL_SYSTICK_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e00e      	b.n	80087b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d80a      	bhi.n	80087ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008798:	2200      	movs	r2, #0
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	f000 fa23 	bl	8008bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087a4:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <HAL_InitTick+0x5c>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e000      	b.n	80087b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	200000a0 	.word	0x200000a0
 80087bc:	200000a8 	.word	0x200000a8
 80087c0:	200000a4 	.word	0x200000a4

080087c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087c4:	b480      	push	{r7}
 80087c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087c8:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <HAL_IncTick+0x1c>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <HAL_IncTick+0x20>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4413      	add	r3, r2
 80087d4:	4a03      	ldr	r2, [pc, #12]	; (80087e4 <HAL_IncTick+0x20>)
 80087d6:	6013      	str	r3, [r2, #0]
}
 80087d8:	bf00      	nop
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr
 80087e0:	200000a8 	.word	0x200000a8
 80087e4:	2000045c 	.word	0x2000045c

080087e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
  return uwTick;
 80087ec:	4b02      	ldr	r3, [pc, #8]	; (80087f8 <HAL_GetTick+0x10>)
 80087ee:	681b      	ldr	r3, [r3, #0]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bc80      	pop	{r7}
 80087f6:	4770      	bx	lr
 80087f8:	2000045c 	.word	0x2000045c

080087fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008804:	f7ff fff0 	bl	80087e8 <HAL_GetTick>
 8008808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d005      	beq.n	8008822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008816:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <HAL_Delay+0x44>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008822:	bf00      	nop
 8008824:	f7ff ffe0 	bl	80087e8 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	429a      	cmp	r2, r3
 8008832:	d8f7      	bhi.n	8008824 <HAL_Delay+0x28>
  {
  }
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	200000a8 	.word	0x200000a8

08008844 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e0ed      	b.n	8008a32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d102      	bne.n	8008868 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fda4 	bl	80083b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0201 	orr.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008878:	f7ff ffb6 	bl	80087e8 <HAL_GetTick>
 800887c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800887e:	e012      	b.n	80088a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008880:	f7ff ffb2 	bl	80087e8 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b0a      	cmp	r3, #10
 800888c:	d90b      	bls.n	80088a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2205      	movs	r2, #5
 800889e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e0c5      	b.n	8008a32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0e5      	beq.n	8008880 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0202 	bic.w	r2, r2, #2
 80088c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088c4:	f7ff ff90 	bl	80087e8 <HAL_GetTick>
 80088c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088ca:	e012      	b.n	80088f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088cc:	f7ff ff8c 	bl	80087e8 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b0a      	cmp	r3, #10
 80088d8:	d90b      	bls.n	80088f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2205      	movs	r2, #5
 80088ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e09f      	b.n	8008a32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e5      	bne.n	80088cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7e1b      	ldrb	r3, [r3, #24]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d108      	bne.n	800891a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	e007      	b.n	800892a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008928:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7e5b      	ldrb	r3, [r3, #25]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d108      	bne.n	8008944 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	e007      	b.n	8008954 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008952:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7e9b      	ldrb	r3, [r3, #26]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d108      	bne.n	800896e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0220 	orr.w	r2, r2, #32
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	e007      	b.n	800897e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0220 	bic.w	r2, r2, #32
 800897c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	7edb      	ldrb	r3, [r3, #27]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d108      	bne.n	8008998 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0210 	bic.w	r2, r2, #16
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	e007      	b.n	80089a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0210 	orr.w	r2, r2, #16
 80089a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	7f1b      	ldrb	r3, [r3, #28]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d108      	bne.n	80089c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0208 	orr.w	r2, r2, #8
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	e007      	b.n	80089d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0208 	bic.w	r2, r2, #8
 80089d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	7f5b      	ldrb	r3, [r3, #29]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d108      	bne.n	80089ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0204 	orr.w	r2, r2, #4
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	e007      	b.n	80089fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0204 	bic.w	r2, r2, #4
 80089fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	ea42 0103 	orr.w	r1, r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	1e5a      	subs	r2, r3, #1
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <__NVIC_SetPriorityGrouping>:
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <__NVIC_SetPriorityGrouping+0x44>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a6e:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <__NVIC_SetPriorityGrouping+0x44>)
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	60d3      	str	r3, [r2, #12]
}
 8008a74:	bf00      	nop
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	e000ed00 	.word	0xe000ed00

08008a84 <__NVIC_GetPriorityGrouping>:
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a88:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <__NVIC_GetPriorityGrouping+0x18>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	0a1b      	lsrs	r3, r3, #8
 8008a8e:	f003 0307 	and.w	r3, r3, #7
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bc80      	pop	{r7}
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	e000ed00 	.word	0xe000ed00

08008aa0 <__NVIC_EnableIRQ>:
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	db0b      	blt.n	8008aca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	f003 021f 	and.w	r2, r3, #31
 8008ab8:	4906      	ldr	r1, [pc, #24]	; (8008ad4 <__NVIC_EnableIRQ+0x34>)
 8008aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	2001      	movs	r0, #1
 8008ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bc80      	pop	{r7}
 8008ad2:	4770      	bx	lr
 8008ad4:	e000e100 	.word	0xe000e100

08008ad8 <__NVIC_SetPriority>:
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	6039      	str	r1, [r7, #0]
 8008ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	db0a      	blt.n	8008b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	490c      	ldr	r1, [pc, #48]	; (8008b24 <__NVIC_SetPriority+0x4c>)
 8008af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008af6:	0112      	lsls	r2, r2, #4
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	440b      	add	r3, r1
 8008afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b00:	e00a      	b.n	8008b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	4908      	ldr	r1, [pc, #32]	; (8008b28 <__NVIC_SetPriority+0x50>)
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	f003 030f 	and.w	r3, r3, #15
 8008b0e:	3b04      	subs	r3, #4
 8008b10:	0112      	lsls	r2, r2, #4
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	440b      	add	r3, r1
 8008b16:	761a      	strb	r2, [r3, #24]
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bc80      	pop	{r7}
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	e000e100 	.word	0xe000e100
 8008b28:	e000ed00 	.word	0xe000ed00

08008b2c <NVIC_EncodePriority>:
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b089      	sub	sp, #36	; 0x24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f003 0307 	and.w	r3, r3, #7
 8008b3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f1c3 0307 	rsb	r3, r3, #7
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	bf28      	it	cs
 8008b4a:	2304      	movcs	r3, #4
 8008b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	3304      	adds	r3, #4
 8008b52:	2b06      	cmp	r3, #6
 8008b54:	d902      	bls.n	8008b5c <NVIC_EncodePriority+0x30>
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	3b03      	subs	r3, #3
 8008b5a:	e000      	b.n	8008b5e <NVIC_EncodePriority+0x32>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b60:	f04f 32ff 	mov.w	r2, #4294967295
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	43da      	mvns	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	401a      	ands	r2, r3
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b74:	f04f 31ff 	mov.w	r1, #4294967295
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7e:	43d9      	mvns	r1, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b84:	4313      	orrs	r3, r2
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3724      	adds	r7, #36	; 0x24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ba0:	d301      	bcc.n	8008ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e00f      	b.n	8008bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ba6:	4a0a      	ldr	r2, [pc, #40]	; (8008bd0 <SysTick_Config+0x40>)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008bae:	210f      	movs	r1, #15
 8008bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb4:	f7ff ff90 	bl	8008ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <SysTick_Config+0x40>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <SysTick_Config+0x40>)
 8008bc0:	2207      	movs	r2, #7
 8008bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	e000e010 	.word	0xe000e010

08008bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff2d 	bl	8008a3c <__NVIC_SetPriorityGrouping>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	607a      	str	r2, [r7, #4]
 8008bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bfc:	f7ff ff42 	bl	8008a84 <__NVIC_GetPriorityGrouping>
 8008c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	6978      	ldr	r0, [r7, #20]
 8008c08:	f7ff ff90 	bl	8008b2c <NVIC_EncodePriority>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7ff ff5f 	bl	8008ad8 <__NVIC_SetPriority>
}
 8008c1a:	bf00      	nop
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	4603      	mov	r3, r0
 8008c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff ff35 	bl	8008aa0 <__NVIC_EnableIRQ>
}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff ffa2 	bl	8008b90 <SysTick_Config>
 8008c4c:	4603      	mov	r3, r0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b085      	sub	sp, #20
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d008      	beq.n	8008c80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2204      	movs	r2, #4
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e020      	b.n	8008cc2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 020e 	bic.w	r2, r2, #14
 8008c8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0201 	bic.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca8:	2101      	movs	r1, #1
 8008caa:	fa01 f202 	lsl.w	r2, r1, r2
 8008cae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr

08008ccc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d005      	beq.n	8008cf0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	73fb      	strb	r3, [r7, #15]
 8008cee:	e0d6      	b.n	8008e9e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 020e 	bic.w	r2, r2, #14
 8008cfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 0201 	bic.w	r2, r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	4b64      	ldr	r3, [pc, #400]	; (8008ea8 <HAL_DMA_Abort_IT+0x1dc>)
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d958      	bls.n	8008dce <HAL_DMA_Abort_IT+0x102>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a62      	ldr	r2, [pc, #392]	; (8008eac <HAL_DMA_Abort_IT+0x1e0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d04f      	beq.n	8008dc6 <HAL_DMA_Abort_IT+0xfa>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a61      	ldr	r2, [pc, #388]	; (8008eb0 <HAL_DMA_Abort_IT+0x1e4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d048      	beq.n	8008dc2 <HAL_DMA_Abort_IT+0xf6>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a5f      	ldr	r2, [pc, #380]	; (8008eb4 <HAL_DMA_Abort_IT+0x1e8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d040      	beq.n	8008dbc <HAL_DMA_Abort_IT+0xf0>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a5e      	ldr	r2, [pc, #376]	; (8008eb8 <HAL_DMA_Abort_IT+0x1ec>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d038      	beq.n	8008db6 <HAL_DMA_Abort_IT+0xea>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a5c      	ldr	r2, [pc, #368]	; (8008ebc <HAL_DMA_Abort_IT+0x1f0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d030      	beq.n	8008db0 <HAL_DMA_Abort_IT+0xe4>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a5b      	ldr	r2, [pc, #364]	; (8008ec0 <HAL_DMA_Abort_IT+0x1f4>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d028      	beq.n	8008daa <HAL_DMA_Abort_IT+0xde>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a52      	ldr	r2, [pc, #328]	; (8008ea8 <HAL_DMA_Abort_IT+0x1dc>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d020      	beq.n	8008da4 <HAL_DMA_Abort_IT+0xd8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a57      	ldr	r2, [pc, #348]	; (8008ec4 <HAL_DMA_Abort_IT+0x1f8>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d019      	beq.n	8008da0 <HAL_DMA_Abort_IT+0xd4>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a55      	ldr	r2, [pc, #340]	; (8008ec8 <HAL_DMA_Abort_IT+0x1fc>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d012      	beq.n	8008d9c <HAL_DMA_Abort_IT+0xd0>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a54      	ldr	r2, [pc, #336]	; (8008ecc <HAL_DMA_Abort_IT+0x200>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00a      	beq.n	8008d96 <HAL_DMA_Abort_IT+0xca>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a52      	ldr	r2, [pc, #328]	; (8008ed0 <HAL_DMA_Abort_IT+0x204>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d102      	bne.n	8008d90 <HAL_DMA_Abort_IT+0xc4>
 8008d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d8e:	e01b      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d94:	e018      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d9a:	e015      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008d9c:	2310      	movs	r3, #16
 8008d9e:	e013      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e011      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008da8:	e00e      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008daa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008dae:	e00b      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008db4:	e008      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dba:	e005      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dc0:	e002      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008dc2:	2310      	movs	r3, #16
 8008dc4:	e000      	b.n	8008dc8 <HAL_DMA_Abort_IT+0xfc>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4a42      	ldr	r2, [pc, #264]	; (8008ed4 <HAL_DMA_Abort_IT+0x208>)
 8008dca:	6053      	str	r3, [r2, #4]
 8008dcc:	e057      	b.n	8008e7e <HAL_DMA_Abort_IT+0x1b2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a36      	ldr	r2, [pc, #216]	; (8008eac <HAL_DMA_Abort_IT+0x1e0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d04f      	beq.n	8008e78 <HAL_DMA_Abort_IT+0x1ac>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a34      	ldr	r2, [pc, #208]	; (8008eb0 <HAL_DMA_Abort_IT+0x1e4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d048      	beq.n	8008e74 <HAL_DMA_Abort_IT+0x1a8>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a33      	ldr	r2, [pc, #204]	; (8008eb4 <HAL_DMA_Abort_IT+0x1e8>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d040      	beq.n	8008e6e <HAL_DMA_Abort_IT+0x1a2>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a31      	ldr	r2, [pc, #196]	; (8008eb8 <HAL_DMA_Abort_IT+0x1ec>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d038      	beq.n	8008e68 <HAL_DMA_Abort_IT+0x19c>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a30      	ldr	r2, [pc, #192]	; (8008ebc <HAL_DMA_Abort_IT+0x1f0>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d030      	beq.n	8008e62 <HAL_DMA_Abort_IT+0x196>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a2e      	ldr	r2, [pc, #184]	; (8008ec0 <HAL_DMA_Abort_IT+0x1f4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d028      	beq.n	8008e5c <HAL_DMA_Abort_IT+0x190>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a26      	ldr	r2, [pc, #152]	; (8008ea8 <HAL_DMA_Abort_IT+0x1dc>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d020      	beq.n	8008e56 <HAL_DMA_Abort_IT+0x18a>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2a      	ldr	r2, [pc, #168]	; (8008ec4 <HAL_DMA_Abort_IT+0x1f8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d019      	beq.n	8008e52 <HAL_DMA_Abort_IT+0x186>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a29      	ldr	r2, [pc, #164]	; (8008ec8 <HAL_DMA_Abort_IT+0x1fc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d012      	beq.n	8008e4e <HAL_DMA_Abort_IT+0x182>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a27      	ldr	r2, [pc, #156]	; (8008ecc <HAL_DMA_Abort_IT+0x200>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00a      	beq.n	8008e48 <HAL_DMA_Abort_IT+0x17c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a26      	ldr	r2, [pc, #152]	; (8008ed0 <HAL_DMA_Abort_IT+0x204>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d102      	bne.n	8008e42 <HAL_DMA_Abort_IT+0x176>
 8008e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e40:	e01b      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e46:	e018      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e4c:	e015      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e4e:	2310      	movs	r3, #16
 8008e50:	e013      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e011      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e5a:	e00e      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e60:	e00b      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e66:	e008      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e6c:	e005      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e72:	e002      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e74:	2310      	movs	r3, #16
 8008e76:	e000      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1ae>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	4a17      	ldr	r2, [pc, #92]	; (8008ed8 <HAL_DMA_Abort_IT+0x20c>)
 8008e7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
    } 
  }
  return status;
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	40020080 	.word	0x40020080
 8008eac:	40020008 	.word	0x40020008
 8008eb0:	4002001c 	.word	0x4002001c
 8008eb4:	40020030 	.word	0x40020030
 8008eb8:	40020044 	.word	0x40020044
 8008ebc:	40020058 	.word	0x40020058
 8008ec0:	4002006c 	.word	0x4002006c
 8008ec4:	40020408 	.word	0x40020408
 8008ec8:	4002041c 	.word	0x4002041c
 8008ecc:	40020430 	.word	0x40020430
 8008ed0:	40020444 	.word	0x40020444
 8008ed4:	40020400 	.word	0x40020400
 8008ed8:	40020000 	.word	0x40020000

08008edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b08b      	sub	sp, #44	; 0x2c
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008eea:	2300      	movs	r3, #0
 8008eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008eee:	e179      	b.n	80091e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69fa      	ldr	r2, [r7, #28]
 8008f00:	4013      	ands	r3, r2
 8008f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	f040 8168 	bne.w	80091de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	4a96      	ldr	r2, [pc, #600]	; (800916c <HAL_GPIO_Init+0x290>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d05e      	beq.n	8008fd6 <HAL_GPIO_Init+0xfa>
 8008f18:	4a94      	ldr	r2, [pc, #592]	; (800916c <HAL_GPIO_Init+0x290>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d875      	bhi.n	800900a <HAL_GPIO_Init+0x12e>
 8008f1e:	4a94      	ldr	r2, [pc, #592]	; (8009170 <HAL_GPIO_Init+0x294>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d058      	beq.n	8008fd6 <HAL_GPIO_Init+0xfa>
 8008f24:	4a92      	ldr	r2, [pc, #584]	; (8009170 <HAL_GPIO_Init+0x294>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d86f      	bhi.n	800900a <HAL_GPIO_Init+0x12e>
 8008f2a:	4a92      	ldr	r2, [pc, #584]	; (8009174 <HAL_GPIO_Init+0x298>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d052      	beq.n	8008fd6 <HAL_GPIO_Init+0xfa>
 8008f30:	4a90      	ldr	r2, [pc, #576]	; (8009174 <HAL_GPIO_Init+0x298>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d869      	bhi.n	800900a <HAL_GPIO_Init+0x12e>
 8008f36:	4a90      	ldr	r2, [pc, #576]	; (8009178 <HAL_GPIO_Init+0x29c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d04c      	beq.n	8008fd6 <HAL_GPIO_Init+0xfa>
 8008f3c:	4a8e      	ldr	r2, [pc, #568]	; (8009178 <HAL_GPIO_Init+0x29c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d863      	bhi.n	800900a <HAL_GPIO_Init+0x12e>
 8008f42:	4a8e      	ldr	r2, [pc, #568]	; (800917c <HAL_GPIO_Init+0x2a0>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d046      	beq.n	8008fd6 <HAL_GPIO_Init+0xfa>
 8008f48:	4a8c      	ldr	r2, [pc, #560]	; (800917c <HAL_GPIO_Init+0x2a0>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d85d      	bhi.n	800900a <HAL_GPIO_Init+0x12e>
 8008f4e:	2b12      	cmp	r3, #18
 8008f50:	d82a      	bhi.n	8008fa8 <HAL_GPIO_Init+0xcc>
 8008f52:	2b12      	cmp	r3, #18
 8008f54:	d859      	bhi.n	800900a <HAL_GPIO_Init+0x12e>
 8008f56:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <HAL_GPIO_Init+0x80>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008fd7 	.word	0x08008fd7
 8008f60:	08008fb1 	.word	0x08008fb1
 8008f64:	08008fc3 	.word	0x08008fc3
 8008f68:	08009005 	.word	0x08009005
 8008f6c:	0800900b 	.word	0x0800900b
 8008f70:	0800900b 	.word	0x0800900b
 8008f74:	0800900b 	.word	0x0800900b
 8008f78:	0800900b 	.word	0x0800900b
 8008f7c:	0800900b 	.word	0x0800900b
 8008f80:	0800900b 	.word	0x0800900b
 8008f84:	0800900b 	.word	0x0800900b
 8008f88:	0800900b 	.word	0x0800900b
 8008f8c:	0800900b 	.word	0x0800900b
 8008f90:	0800900b 	.word	0x0800900b
 8008f94:	0800900b 	.word	0x0800900b
 8008f98:	0800900b 	.word	0x0800900b
 8008f9c:	0800900b 	.word	0x0800900b
 8008fa0:	08008fb9 	.word	0x08008fb9
 8008fa4:	08008fcd 	.word	0x08008fcd
 8008fa8:	4a75      	ldr	r2, [pc, #468]	; (8009180 <HAL_GPIO_Init+0x2a4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008fae:	e02c      	b.n	800900a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	623b      	str	r3, [r7, #32]
          break;
 8008fb6:	e029      	b.n	800900c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	623b      	str	r3, [r7, #32]
          break;
 8008fc0:	e024      	b.n	800900c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	623b      	str	r3, [r7, #32]
          break;
 8008fca:	e01f      	b.n	800900c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	330c      	adds	r3, #12
 8008fd2:	623b      	str	r3, [r7, #32]
          break;
 8008fd4:	e01a      	b.n	800900c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008fde:	2304      	movs	r3, #4
 8008fe0:	623b      	str	r3, [r7, #32]
          break;
 8008fe2:	e013      	b.n	800900c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d105      	bne.n	8008ff8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fec:	2308      	movs	r3, #8
 8008fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	611a      	str	r2, [r3, #16]
          break;
 8008ff6:	e009      	b.n	800900c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ff8:	2308      	movs	r3, #8
 8008ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	69fa      	ldr	r2, [r7, #28]
 8009000:	615a      	str	r2, [r3, #20]
          break;
 8009002:	e003      	b.n	800900c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009004:	2300      	movs	r3, #0
 8009006:	623b      	str	r3, [r7, #32]
          break;
 8009008:	e000      	b.n	800900c <HAL_GPIO_Init+0x130>
          break;
 800900a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2bff      	cmp	r3, #255	; 0xff
 8009010:	d801      	bhi.n	8009016 <HAL_GPIO_Init+0x13a>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	e001      	b.n	800901a <HAL_GPIO_Init+0x13e>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3304      	adds	r3, #4
 800901a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	2bff      	cmp	r3, #255	; 0xff
 8009020:	d802      	bhi.n	8009028 <HAL_GPIO_Init+0x14c>
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	e002      	b.n	800902e <HAL_GPIO_Init+0x152>
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	3b08      	subs	r3, #8
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	210f      	movs	r1, #15
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	fa01 f303 	lsl.w	r3, r1, r3
 800903c:	43db      	mvns	r3, r3
 800903e:	401a      	ands	r2, r3
 8009040:	6a39      	ldr	r1, [r7, #32]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	fa01 f303 	lsl.w	r3, r1, r3
 8009048:	431a      	orrs	r2, r3
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 80c1 	beq.w	80091de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800905c:	4b49      	ldr	r3, [pc, #292]	; (8009184 <HAL_GPIO_Init+0x2a8>)
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	4a48      	ldr	r2, [pc, #288]	; (8009184 <HAL_GPIO_Init+0x2a8>)
 8009062:	f043 0301 	orr.w	r3, r3, #1
 8009066:	6193      	str	r3, [r2, #24]
 8009068:	4b46      	ldr	r3, [pc, #280]	; (8009184 <HAL_GPIO_Init+0x2a8>)
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	60bb      	str	r3, [r7, #8]
 8009072:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009074:	4a44      	ldr	r2, [pc, #272]	; (8009188 <HAL_GPIO_Init+0x2ac>)
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	089b      	lsrs	r3, r3, #2
 800907a:	3302      	adds	r3, #2
 800907c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009080:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	220f      	movs	r2, #15
 800908c:	fa02 f303 	lsl.w	r3, r2, r3
 8009090:	43db      	mvns	r3, r3
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4013      	ands	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a3c      	ldr	r2, [pc, #240]	; (800918c <HAL_GPIO_Init+0x2b0>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d01f      	beq.n	80090e0 <HAL_GPIO_Init+0x204>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a3b      	ldr	r2, [pc, #236]	; (8009190 <HAL_GPIO_Init+0x2b4>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d019      	beq.n	80090dc <HAL_GPIO_Init+0x200>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a3a      	ldr	r2, [pc, #232]	; (8009194 <HAL_GPIO_Init+0x2b8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d013      	beq.n	80090d8 <HAL_GPIO_Init+0x1fc>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a39      	ldr	r2, [pc, #228]	; (8009198 <HAL_GPIO_Init+0x2bc>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00d      	beq.n	80090d4 <HAL_GPIO_Init+0x1f8>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a38      	ldr	r2, [pc, #224]	; (800919c <HAL_GPIO_Init+0x2c0>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <HAL_GPIO_Init+0x1f4>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a37      	ldr	r2, [pc, #220]	; (80091a0 <HAL_GPIO_Init+0x2c4>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d101      	bne.n	80090cc <HAL_GPIO_Init+0x1f0>
 80090c8:	2305      	movs	r3, #5
 80090ca:	e00a      	b.n	80090e2 <HAL_GPIO_Init+0x206>
 80090cc:	2306      	movs	r3, #6
 80090ce:	e008      	b.n	80090e2 <HAL_GPIO_Init+0x206>
 80090d0:	2304      	movs	r3, #4
 80090d2:	e006      	b.n	80090e2 <HAL_GPIO_Init+0x206>
 80090d4:	2303      	movs	r3, #3
 80090d6:	e004      	b.n	80090e2 <HAL_GPIO_Init+0x206>
 80090d8:	2302      	movs	r3, #2
 80090da:	e002      	b.n	80090e2 <HAL_GPIO_Init+0x206>
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <HAL_GPIO_Init+0x206>
 80090e0:	2300      	movs	r3, #0
 80090e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e4:	f002 0203 	and.w	r2, r2, #3
 80090e8:	0092      	lsls	r2, r2, #2
 80090ea:	4093      	lsls	r3, r2
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80090f2:	4925      	ldr	r1, [pc, #148]	; (8009188 <HAL_GPIO_Init+0x2ac>)
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	089b      	lsrs	r3, r3, #2
 80090f8:	3302      	adds	r3, #2
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800910c:	4b25      	ldr	r3, [pc, #148]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	4924      	ldr	r1, [pc, #144]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	4313      	orrs	r3, r2
 8009116:	608b      	str	r3, [r1, #8]
 8009118:	e006      	b.n	8009128 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800911a:	4b22      	ldr	r3, [pc, #136]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	43db      	mvns	r3, r3
 8009122:	4920      	ldr	r1, [pc, #128]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 8009124:	4013      	ands	r3, r2
 8009126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d006      	beq.n	8009142 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009134:	4b1b      	ldr	r3, [pc, #108]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	491a      	ldr	r1, [pc, #104]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	4313      	orrs	r3, r2
 800913e:	60cb      	str	r3, [r1, #12]
 8009140:	e006      	b.n	8009150 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009142:	4b18      	ldr	r3, [pc, #96]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	43db      	mvns	r3, r3
 800914a:	4916      	ldr	r1, [pc, #88]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 800914c:	4013      	ands	r3, r2
 800914e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d025      	beq.n	80091a8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800915c:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	4910      	ldr	r1, [pc, #64]	; (80091a4 <HAL_GPIO_Init+0x2c8>)
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	4313      	orrs	r3, r2
 8009166:	604b      	str	r3, [r1, #4]
 8009168:	e025      	b.n	80091b6 <HAL_GPIO_Init+0x2da>
 800916a:	bf00      	nop
 800916c:	10320000 	.word	0x10320000
 8009170:	10310000 	.word	0x10310000
 8009174:	10220000 	.word	0x10220000
 8009178:	10210000 	.word	0x10210000
 800917c:	10120000 	.word	0x10120000
 8009180:	10110000 	.word	0x10110000
 8009184:	40021000 	.word	0x40021000
 8009188:	40010000 	.word	0x40010000
 800918c:	40010800 	.word	0x40010800
 8009190:	40010c00 	.word	0x40010c00
 8009194:	40011000 	.word	0x40011000
 8009198:	40011400 	.word	0x40011400
 800919c:	40011800 	.word	0x40011800
 80091a0:	40011c00 	.word	0x40011c00
 80091a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80091a8:	4b15      	ldr	r3, [pc, #84]	; (8009200 <HAL_GPIO_Init+0x324>)
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	43db      	mvns	r3, r3
 80091b0:	4913      	ldr	r1, [pc, #76]	; (8009200 <HAL_GPIO_Init+0x324>)
 80091b2:	4013      	ands	r3, r2
 80091b4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80091c2:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <HAL_GPIO_Init+0x324>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	490e      	ldr	r1, [pc, #56]	; (8009200 <HAL_GPIO_Init+0x324>)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	600b      	str	r3, [r1, #0]
 80091ce:	e006      	b.n	80091de <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80091d0:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <HAL_GPIO_Init+0x324>)
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	43db      	mvns	r3, r3
 80091d8:	4909      	ldr	r1, [pc, #36]	; (8009200 <HAL_GPIO_Init+0x324>)
 80091da:	4013      	ands	r3, r2
 80091dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	3301      	adds	r3, #1
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f47f ae7e 	bne.w	8008ef0 <HAL_GPIO_Init+0x14>
  }
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	372c      	adds	r7, #44	; 0x2c
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr
 8009200:	40010400 	.word	0x40010400

08009204 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009204:	b480      	push	{r7}
 8009206:	b089      	sub	sp, #36	; 0x24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800920e:	2300      	movs	r3, #0
 8009210:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009212:	e0a6      	b.n	8009362 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009214:	2201      	movs	r2, #1
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	fa02 f303 	lsl.w	r3, r2, r3
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	4013      	ands	r3, r2
 8009220:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 8099 	beq.w	800935c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800922a:	4a54      	ldr	r2, [pc, #336]	; (800937c <HAL_GPIO_DeInit+0x178>)
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	089b      	lsrs	r3, r3, #2
 8009230:	3302      	adds	r3, #2
 8009232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009236:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	220f      	movs	r2, #15
 8009242:	fa02 f303 	lsl.w	r3, r2, r3
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	4013      	ands	r3, r2
 800924a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a4c      	ldr	r2, [pc, #304]	; (8009380 <HAL_GPIO_DeInit+0x17c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d01f      	beq.n	8009294 <HAL_GPIO_DeInit+0x90>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a4b      	ldr	r2, [pc, #300]	; (8009384 <HAL_GPIO_DeInit+0x180>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d019      	beq.n	8009290 <HAL_GPIO_DeInit+0x8c>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a4a      	ldr	r2, [pc, #296]	; (8009388 <HAL_GPIO_DeInit+0x184>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d013      	beq.n	800928c <HAL_GPIO_DeInit+0x88>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a49      	ldr	r2, [pc, #292]	; (800938c <HAL_GPIO_DeInit+0x188>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d00d      	beq.n	8009288 <HAL_GPIO_DeInit+0x84>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a48      	ldr	r2, [pc, #288]	; (8009390 <HAL_GPIO_DeInit+0x18c>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d007      	beq.n	8009284 <HAL_GPIO_DeInit+0x80>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a47      	ldr	r2, [pc, #284]	; (8009394 <HAL_GPIO_DeInit+0x190>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d101      	bne.n	8009280 <HAL_GPIO_DeInit+0x7c>
 800927c:	2305      	movs	r3, #5
 800927e:	e00a      	b.n	8009296 <HAL_GPIO_DeInit+0x92>
 8009280:	2306      	movs	r3, #6
 8009282:	e008      	b.n	8009296 <HAL_GPIO_DeInit+0x92>
 8009284:	2304      	movs	r3, #4
 8009286:	e006      	b.n	8009296 <HAL_GPIO_DeInit+0x92>
 8009288:	2303      	movs	r3, #3
 800928a:	e004      	b.n	8009296 <HAL_GPIO_DeInit+0x92>
 800928c:	2302      	movs	r3, #2
 800928e:	e002      	b.n	8009296 <HAL_GPIO_DeInit+0x92>
 8009290:	2301      	movs	r3, #1
 8009292:	e000      	b.n	8009296 <HAL_GPIO_DeInit+0x92>
 8009294:	2300      	movs	r3, #0
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	f002 0203 	and.w	r2, r2, #3
 800929c:	0092      	lsls	r2, r2, #2
 800929e:	4093      	lsls	r3, r2
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d132      	bne.n	800930c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80092a6:	4b3c      	ldr	r3, [pc, #240]	; (8009398 <HAL_GPIO_DeInit+0x194>)
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	43db      	mvns	r3, r3
 80092ae:	493a      	ldr	r1, [pc, #232]	; (8009398 <HAL_GPIO_DeInit+0x194>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80092b4:	4b38      	ldr	r3, [pc, #224]	; (8009398 <HAL_GPIO_DeInit+0x194>)
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	43db      	mvns	r3, r3
 80092bc:	4936      	ldr	r1, [pc, #216]	; (8009398 <HAL_GPIO_DeInit+0x194>)
 80092be:	4013      	ands	r3, r2
 80092c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80092c2:	4b35      	ldr	r3, [pc, #212]	; (8009398 <HAL_GPIO_DeInit+0x194>)
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	43db      	mvns	r3, r3
 80092ca:	4933      	ldr	r1, [pc, #204]	; (8009398 <HAL_GPIO_DeInit+0x194>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80092d0:	4b31      	ldr	r3, [pc, #196]	; (8009398 <HAL_GPIO_DeInit+0x194>)
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	43db      	mvns	r3, r3
 80092d8:	492f      	ldr	r1, [pc, #188]	; (8009398 <HAL_GPIO_DeInit+0x194>)
 80092da:	4013      	ands	r3, r2
 80092dc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	f003 0303 	and.w	r3, r3, #3
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	220f      	movs	r2, #15
 80092e8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ec:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80092ee:	4a23      	ldr	r2, [pc, #140]	; (800937c <HAL_GPIO_DeInit+0x178>)
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	089b      	lsrs	r3, r3, #2
 80092f4:	3302      	adds	r3, #2
 80092f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	43da      	mvns	r2, r3
 80092fe:	481f      	ldr	r0, [pc, #124]	; (800937c <HAL_GPIO_DeInit+0x178>)
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	089b      	lsrs	r3, r3, #2
 8009304:	400a      	ands	r2, r1
 8009306:	3302      	adds	r3, #2
 8009308:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	2bff      	cmp	r3, #255	; 0xff
 8009310:	d801      	bhi.n	8009316 <HAL_GPIO_DeInit+0x112>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	e001      	b.n	800931a <HAL_GPIO_DeInit+0x116>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3304      	adds	r3, #4
 800931a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	2bff      	cmp	r3, #255	; 0xff
 8009320:	d802      	bhi.n	8009328 <HAL_GPIO_DeInit+0x124>
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	e002      	b.n	800932e <HAL_GPIO_DeInit+0x12a>
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	3b08      	subs	r3, #8
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	210f      	movs	r1, #15
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	fa01 f303 	lsl.w	r3, r1, r3
 800933c:	43db      	mvns	r3, r3
 800933e:	401a      	ands	r2, r3
 8009340:	2104      	movs	r1, #4
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	fa01 f303 	lsl.w	r3, r1, r3
 8009348:	431a      	orrs	r2, r3
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	43db      	mvns	r3, r3
 8009356:	401a      	ands	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	3301      	adds	r3, #1
 8009360:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	fa22 f303 	lsr.w	r3, r2, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	f47f af52 	bne.w	8009214 <HAL_GPIO_DeInit+0x10>
  }
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	3724      	adds	r7, #36	; 0x24
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr
 800937c:	40010000 	.word	0x40010000
 8009380:	40010800 	.word	0x40010800
 8009384:	40010c00 	.word	0x40010c00
 8009388:	40011000 	.word	0x40011000
 800938c:	40011400 	.word	0x40011400
 8009390:	40011800 	.word	0x40011800
 8009394:	40011c00 	.word	0x40011c00
 8009398:	40010400 	.word	0x40010400

0800939c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	887b      	ldrh	r3, [r7, #2]
 80093ae:	4013      	ands	r3, r2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093b4:	2301      	movs	r3, #1
 80093b6:	73fb      	strb	r3, [r7, #15]
 80093b8:	e001      	b.n	80093be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr

080093ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	807b      	strh	r3, [r7, #2]
 80093d6:	4613      	mov	r3, r2
 80093d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093da:	787b      	ldrb	r3, [r7, #1]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093e0:	887a      	ldrh	r2, [r7, #2]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093e6:	e003      	b.n	80093f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093e8:	887b      	ldrh	r3, [r7, #2]
 80093ea:	041a      	lsls	r2, r3, #16
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	611a      	str	r2, [r3, #16]
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr

080093fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800940c:	887a      	ldrh	r2, [r7, #2]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4013      	ands	r3, r2
 8009412:	041a      	lsls	r2, r3, #16
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	43d9      	mvns	r1, r3
 8009418:	887b      	ldrh	r3, [r7, #2]
 800941a:	400b      	ands	r3, r1
 800941c:	431a      	orrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	611a      	str	r2, [r3, #16]
}
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	bc80      	pop	{r7}
 800942a:	4770      	bx	lr

0800942c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e12b      	b.n	8009696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7fe fff8 	bl	8008448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2224      	movs	r2, #36	; 0x24
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800947e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800948e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009490:	f001 fdb8 	bl	800b004 <HAL_RCC_GetPCLK1Freq>
 8009494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	4a81      	ldr	r2, [pc, #516]	; (80096a0 <HAL_I2C_Init+0x274>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d807      	bhi.n	80094b0 <HAL_I2C_Init+0x84>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4a80      	ldr	r2, [pc, #512]	; (80096a4 <HAL_I2C_Init+0x278>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	bf94      	ite	ls
 80094a8:	2301      	movls	r3, #1
 80094aa:	2300      	movhi	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	e006      	b.n	80094be <HAL_I2C_Init+0x92>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a7d      	ldr	r2, [pc, #500]	; (80096a8 <HAL_I2C_Init+0x27c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	bf94      	ite	ls
 80094b8:	2301      	movls	r3, #1
 80094ba:	2300      	movhi	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e0e7      	b.n	8009696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4a78      	ldr	r2, [pc, #480]	; (80096ac <HAL_I2C_Init+0x280>)
 80094ca:	fba2 2303 	umull	r2, r3, r2, r3
 80094ce:	0c9b      	lsrs	r3, r3, #18
 80094d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	4a6a      	ldr	r2, [pc, #424]	; (80096a0 <HAL_I2C_Init+0x274>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d802      	bhi.n	8009500 <HAL_I2C_Init+0xd4>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	3301      	adds	r3, #1
 80094fe:	e009      	b.n	8009514 <HAL_I2C_Init+0xe8>
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009506:	fb02 f303 	mul.w	r3, r2, r3
 800950a:	4a69      	ldr	r2, [pc, #420]	; (80096b0 <HAL_I2C_Init+0x284>)
 800950c:	fba2 2303 	umull	r2, r3, r2, r3
 8009510:	099b      	lsrs	r3, r3, #6
 8009512:	3301      	adds	r3, #1
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6812      	ldr	r2, [r2, #0]
 8009518:	430b      	orrs	r3, r1
 800951a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009526:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	495c      	ldr	r1, [pc, #368]	; (80096a0 <HAL_I2C_Init+0x274>)
 8009530:	428b      	cmp	r3, r1
 8009532:	d819      	bhi.n	8009568 <HAL_I2C_Init+0x13c>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	1e59      	subs	r1, r3, #1
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009542:	1c59      	adds	r1, r3, #1
 8009544:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009548:	400b      	ands	r3, r1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <HAL_I2C_Init+0x138>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	1e59      	subs	r1, r3, #1
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	fbb1 f3f3 	udiv	r3, r1, r3
 800955c:	3301      	adds	r3, #1
 800955e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009562:	e051      	b.n	8009608 <HAL_I2C_Init+0x1dc>
 8009564:	2304      	movs	r3, #4
 8009566:	e04f      	b.n	8009608 <HAL_I2C_Init+0x1dc>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d111      	bne.n	8009594 <HAL_I2C_Init+0x168>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	1e58      	subs	r0, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6859      	ldr	r1, [r3, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	440b      	add	r3, r1
 800957e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009582:	3301      	adds	r3, #1
 8009584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009588:	2b00      	cmp	r3, #0
 800958a:	bf0c      	ite	eq
 800958c:	2301      	moveq	r3, #1
 800958e:	2300      	movne	r3, #0
 8009590:	b2db      	uxtb	r3, r3
 8009592:	e012      	b.n	80095ba <HAL_I2C_Init+0x18e>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	1e58      	subs	r0, r3, #1
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6859      	ldr	r1, [r3, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	0099      	lsls	r1, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095aa:	3301      	adds	r3, #1
 80095ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bf0c      	ite	eq
 80095b4:	2301      	moveq	r3, #1
 80095b6:	2300      	movne	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <HAL_I2C_Init+0x196>
 80095be:	2301      	movs	r3, #1
 80095c0:	e022      	b.n	8009608 <HAL_I2C_Init+0x1dc>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10e      	bne.n	80095e8 <HAL_I2C_Init+0x1bc>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	1e58      	subs	r0, r3, #1
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6859      	ldr	r1, [r3, #4]
 80095d2:	460b      	mov	r3, r1
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	440b      	add	r3, r1
 80095d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80095dc:	3301      	adds	r3, #1
 80095de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095e6:	e00f      	b.n	8009608 <HAL_I2C_Init+0x1dc>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	1e58      	subs	r0, r3, #1
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6859      	ldr	r1, [r3, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	0099      	lsls	r1, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80095fe:	3301      	adds	r3, #1
 8009600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	6809      	ldr	r1, [r1, #0]
 800960c:	4313      	orrs	r3, r2
 800960e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69da      	ldr	r2, [r3, #28]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	431a      	orrs	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	6911      	ldr	r1, [r2, #16]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	68d2      	ldr	r2, [r2, #12]
 8009642:	4311      	orrs	r1, r2
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	6812      	ldr	r2, [r2, #0]
 8009648:	430b      	orrs	r3, r1
 800964a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	695a      	ldr	r2, [r3, #20]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f042 0201 	orr.w	r2, r2, #1
 8009676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2220      	movs	r2, #32
 8009682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	000186a0 	.word	0x000186a0
 80096a4:	001e847f 	.word	0x001e847f
 80096a8:	003d08ff 	.word	0x003d08ff
 80096ac:	431bde83 	.word	0x431bde83
 80096b0:	10624dd3 	.word	0x10624dd3

080096b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e021      	b.n	800970a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2224      	movs	r2, #36	; 0x24
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0201 	bic.w	r2, r2, #1
 80096dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fe fef0 	bl	80084c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	607a      	str	r2, [r7, #4]
 800971e:	461a      	mov	r2, r3
 8009720:	460b      	mov	r3, r1
 8009722:	817b      	strh	r3, [r7, #10]
 8009724:	4613      	mov	r3, r2
 8009726:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009728:	f7ff f85e 	bl	80087e8 <HAL_GetTick>
 800972c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b20      	cmp	r3, #32
 8009738:	f040 80e0 	bne.w	80098fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	2319      	movs	r3, #25
 8009742:	2201      	movs	r2, #1
 8009744:	4970      	ldr	r1, [pc, #448]	; (8009908 <HAL_I2C_Master_Transmit+0x1f4>)
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 fe5c 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009752:	2302      	movs	r3, #2
 8009754:	e0d3      	b.n	80098fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_I2C_Master_Transmit+0x50>
 8009760:	2302      	movs	r3, #2
 8009762:	e0cc      	b.n	80098fe <HAL_I2C_Master_Transmit+0x1ea>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b01      	cmp	r3, #1
 8009778:	d007      	beq.n	800978a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f042 0201 	orr.w	r2, r2, #1
 8009788:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009798:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2221      	movs	r2, #33	; 0x21
 800979e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2210      	movs	r2, #16
 80097a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	893a      	ldrh	r2, [r7, #8]
 80097ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4a50      	ldr	r2, [pc, #320]	; (800990c <HAL_I2C_Master_Transmit+0x1f8>)
 80097ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097cc:	8979      	ldrh	r1, [r7, #10]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	6a3a      	ldr	r2, [r7, #32]
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fc16 	bl	800a004 <I2C_MasterRequestWrite>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e08d      	b.n	80098fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097e2:	2300      	movs	r3, #0
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	613b      	str	r3, [r7, #16]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80097f8:	e066      	b.n	80098c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	6a39      	ldr	r1, [r7, #32]
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 ff1a 	bl	800a638 <I2C_WaitOnTXEFlagUntilTimeout>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00d      	beq.n	8009826 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	2b04      	cmp	r3, #4
 8009810:	d107      	bne.n	8009822 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009820:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e06b      	b.n	80098fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982a:	781a      	ldrb	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009840:	b29b      	uxth	r3, r3
 8009842:	3b01      	subs	r3, #1
 8009844:	b29a      	uxth	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800984e:	3b01      	subs	r3, #1
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	f003 0304 	and.w	r3, r3, #4
 8009860:	2b04      	cmp	r3, #4
 8009862:	d11b      	bne.n	800989c <HAL_I2C_Master_Transmit+0x188>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009868:	2b00      	cmp	r3, #0
 800986a:	d017      	beq.n	800989c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	781a      	ldrb	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	1c5a      	adds	r2, r3, #1
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009886:	b29b      	uxth	r3, r3
 8009888:	3b01      	subs	r3, #1
 800988a:	b29a      	uxth	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	6a39      	ldr	r1, [r7, #32]
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 ff11 	bl	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00d      	beq.n	80098c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d107      	bne.n	80098c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e01a      	b.n	80098fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d194      	bne.n	80097fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	e000      	b.n	80098fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80098fc:	2302      	movs	r3, #2
  }
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	00100002 	.word	0x00100002
 800990c:	ffff0000 	.word	0xffff0000

08009910 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af02      	add	r7, sp, #8
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	461a      	mov	r2, r3
 800991e:	4603      	mov	r3, r0
 8009920:	817b      	strh	r3, [r7, #10]
 8009922:	460b      	mov	r3, r1
 8009924:	813b      	strh	r3, [r7, #8]
 8009926:	4613      	mov	r3, r2
 8009928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800992a:	f7fe ff5d 	bl	80087e8 <HAL_GetTick>
 800992e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b20      	cmp	r3, #32
 800993a:	f040 80d9 	bne.w	8009af0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	2319      	movs	r3, #25
 8009944:	2201      	movs	r2, #1
 8009946:	496d      	ldr	r1, [pc, #436]	; (8009afc <HAL_I2C_Mem_Write+0x1ec>)
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fd5b 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009954:	2302      	movs	r3, #2
 8009956:	e0cc      	b.n	8009af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800995e:	2b01      	cmp	r3, #1
 8009960:	d101      	bne.n	8009966 <HAL_I2C_Mem_Write+0x56>
 8009962:	2302      	movs	r3, #2
 8009964:	e0c5      	b.n	8009af2 <HAL_I2C_Mem_Write+0x1e2>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	2b01      	cmp	r3, #1
 800997a:	d007      	beq.n	800998c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0201 	orr.w	r2, r2, #1
 800998a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800999a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2221      	movs	r2, #33	; 0x21
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2240      	movs	r2, #64	; 0x40
 80099a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a3a      	ldr	r2, [r7, #32]
 80099b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4a4d      	ldr	r2, [pc, #308]	; (8009b00 <HAL_I2C_Mem_Write+0x1f0>)
 80099cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099ce:	88f8      	ldrh	r0, [r7, #6]
 80099d0:	893a      	ldrh	r2, [r7, #8]
 80099d2:	8979      	ldrh	r1, [r7, #10]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	4603      	mov	r3, r0
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 fb92 	bl	800a108 <I2C_RequestMemoryWrite>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d052      	beq.n	8009a90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e081      	b.n	8009af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 fe20 	bl	800a638 <I2C_WaitOnTXEFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00d      	beq.n	8009a1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	d107      	bne.n	8009a16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e06b      	b.n	8009af2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	781a      	ldrb	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d11b      	bne.n	8009a90 <HAL_I2C_Mem_Write+0x180>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d017      	beq.n	8009a90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1aa      	bne.n	80099ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 fe13 	bl	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00d      	beq.n	8009ac4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d107      	bne.n	8009ac0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009abe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e016      	b.n	8009af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	e000      	b.n	8009af2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009af0:	2302      	movs	r3, #2
  }
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	00100002 	.word	0x00100002
 8009b00:	ffff0000 	.word	0xffff0000

08009b04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08c      	sub	sp, #48	; 0x30
 8009b08:	af02      	add	r7, sp, #8
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	461a      	mov	r2, r3
 8009b12:	4603      	mov	r3, r0
 8009b14:	817b      	strh	r3, [r7, #10]
 8009b16:	460b      	mov	r3, r1
 8009b18:	813b      	strh	r3, [r7, #8]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b22:	f7fe fe61 	bl	80087e8 <HAL_GetTick>
 8009b26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	f040 8244 	bne.w	8009fbe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	2319      	movs	r3, #25
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	4982      	ldr	r1, [pc, #520]	; (8009d48 <HAL_I2C_Mem_Read+0x244>)
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 fc5f 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e237      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d101      	bne.n	8009b5e <HAL_I2C_Mem_Read+0x5a>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e230      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d007      	beq.n	8009b84 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0201 	orr.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2222      	movs	r2, #34	; 0x22
 8009b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2240      	movs	r2, #64	; 0x40
 8009ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4a62      	ldr	r2, [pc, #392]	; (8009d4c <HAL_I2C_Mem_Read+0x248>)
 8009bc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bc6:	88f8      	ldrh	r0, [r7, #6]
 8009bc8:	893a      	ldrh	r2, [r7, #8]
 8009bca:	8979      	ldrh	r1, [r7, #10]
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fb2c 	bl	800a234 <I2C_RequestMemoryRead>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e1ec      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d113      	bne.n	8009c16 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	61fb      	str	r3, [r7, #28]
 8009c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	e1c0      	b.n	8009f98 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d11e      	bne.n	8009c5c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c2e:	b672      	cpsid	i
}
 8009c30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c32:	2300      	movs	r3, #0
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	61bb      	str	r3, [r7, #24]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	61bb      	str	r3, [r7, #24]
 8009c46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c58:	b662      	cpsie	i
}
 8009c5a:	e035      	b.n	8009cc8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d11e      	bne.n	8009ca2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c74:	b672      	cpsid	i
}
 8009c76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c78:	2300      	movs	r3, #0
 8009c7a:	617b      	str	r3, [r7, #20]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c9e:	b662      	cpsie	i
}
 8009ca0:	e012      	b.n	8009cc8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cb0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	613b      	str	r3, [r7, #16]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	613b      	str	r3, [r7, #16]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	613b      	str	r3, [r7, #16]
 8009cc6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009cc8:	e166      	b.n	8009f98 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	f200 811f 	bhi.w	8009f12 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d123      	bne.n	8009d24 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fd39 	bl	800a758 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e167      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	691a      	ldr	r2, [r3, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	b2d2      	uxtb	r2, r2
 8009cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d22:	e139      	b.n	8009f98 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d152      	bne.n	8009dd2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	2200      	movs	r2, #0
 8009d34:	4906      	ldr	r1, [pc, #24]	; (8009d50 <HAL_I2C_Mem_Read+0x24c>)
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f000 fb64 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d008      	beq.n	8009d54 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e13c      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
 8009d46:	bf00      	nop
 8009d48:	00100002 	.word	0x00100002
 8009d4c:	ffff0000 	.word	0xffff0000
 8009d50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d54:	b672      	cpsid	i
}
 8009d56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	691a      	ldr	r2, [r3, #16]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	b2d2      	uxtb	r2, r2
 8009d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	3b01      	subs	r3, #1
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d9a:	b662      	cpsie	i
}
 8009d9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691a      	ldr	r2, [r3, #16]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009dd0:	e0e2      	b.n	8009f98 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd8:	2200      	movs	r2, #0
 8009dda:	497b      	ldr	r1, [pc, #492]	; (8009fc8 <HAL_I2C_Mem_Read+0x4c4>)
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 fb11 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e0e9      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dfc:	b672      	cpsid	i
}
 8009dfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e32:	4b66      	ldr	r3, [pc, #408]	; (8009fcc <HAL_I2C_Mem_Read+0x4c8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	08db      	lsrs	r3, r3, #3
 8009e38:	4a65      	ldr	r2, [pc, #404]	; (8009fd0 <HAL_I2C_Mem_Read+0x4cc>)
 8009e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3e:	0a1a      	lsrs	r2, r3, #8
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	00da      	lsls	r2, r3, #3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d118      	bne.n	8009e8a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e72:	f043 0220 	orr.w	r2, r3, #32
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e7a:	b662      	cpsie	i
}
 8009e7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e09a      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d1d9      	bne.n	8009e4c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	691a      	ldr	r2, [r3, #16]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	b2d2      	uxtb	r2, r2
 8009eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009eda:	b662      	cpsie	i
}
 8009edc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	691a      	ldr	r2, [r3, #16]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	b2d2      	uxtb	r2, r2
 8009eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009efa:	3b01      	subs	r3, #1
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f10:	e042      	b.n	8009f98 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 fc1e 	bl	800a758 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e04c      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	691a      	ldr	r2, [r3, #16]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	b2d2      	uxtb	r2, r2
 8009f32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f42:	3b01      	subs	r3, #1
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	3b01      	subs	r3, #1
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	f003 0304 	and.w	r3, r3, #4
 8009f62:	2b04      	cmp	r3, #4
 8009f64:	d118      	bne.n	8009f98 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	691a      	ldr	r2, [r3, #16]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	b2d2      	uxtb	r2, r2
 8009f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f82:	3b01      	subs	r3, #1
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	3b01      	subs	r3, #1
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f47f ae94 	bne.w	8009cca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e000      	b.n	8009fc0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009fbe:	2302      	movs	r3, #2
  }
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3728      	adds	r7, #40	; 0x28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	00010004 	.word	0x00010004
 8009fcc:	200000a0 	.word	0x200000a0
 8009fd0:	14f8b589 	.word	0x14f8b589

08009fd4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe2:	b2db      	uxtb	r3, r3
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bc80      	pop	{r7}
 8009fec:	4770      	bx	lr

08009fee <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bc80      	pop	{r7}
 800a002:	4770      	bx	lr

0800a004 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af02      	add	r7, sp, #8
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	460b      	mov	r3, r1
 800a012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b08      	cmp	r3, #8
 800a01e:	d006      	beq.n	800a02e <I2C_MasterRequestWrite+0x2a>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d003      	beq.n	800a02e <I2C_MasterRequestWrite+0x2a>
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a02c:	d108      	bne.n	800a040 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	e00b      	b.n	800a058 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a044:	2b12      	cmp	r3, #18
 800a046:	d107      	bne.n	800a058 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a056:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f9cd 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00d      	beq.n	800a08c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07e:	d103      	bne.n	800a088 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	e035      	b.n	800a0f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a094:	d108      	bne.n	800a0a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a096:	897b      	ldrh	r3, [r7, #10]
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	461a      	mov	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0a4:	611a      	str	r2, [r3, #16]
 800a0a6:	e01b      	b.n	800a0e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0a8:	897b      	ldrh	r3, [r7, #10]
 800a0aa:	11db      	asrs	r3, r3, #7
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	f003 0306 	and.w	r3, r3, #6
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f063 030f 	orn	r3, r3, #15
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	490e      	ldr	r1, [pc, #56]	; (800a100 <I2C_MasterRequestWrite+0xfc>)
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 fa16 	bl	800a4f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e010      	b.n	800a0f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0d6:	897b      	ldrh	r3, [r7, #10]
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	4907      	ldr	r1, [pc, #28]	; (800a104 <I2C_MasterRequestWrite+0x100>)
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 fa06 	bl	800a4f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	00010008 	.word	0x00010008
 800a104:	00010002 	.word	0x00010002

0800a108 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af02      	add	r7, sp, #8
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	4608      	mov	r0, r1
 800a112:	4611      	mov	r1, r2
 800a114:	461a      	mov	r2, r3
 800a116:	4603      	mov	r3, r0
 800a118:	817b      	strh	r3, [r7, #10]
 800a11a:	460b      	mov	r3, r1
 800a11c:	813b      	strh	r3, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a130:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	2200      	movs	r2, #0
 800a13a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 f960 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00d      	beq.n	800a166 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a158:	d103      	bne.n	800a162 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a160:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e05f      	b.n	800a226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a166:	897b      	ldrh	r3, [r7, #10]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	461a      	mov	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a174:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	6a3a      	ldr	r2, [r7, #32]
 800a17a:	492d      	ldr	r1, [pc, #180]	; (800a230 <I2C_RequestMemoryWrite+0x128>)
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 f9bb 	bl	800a4f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e04c      	b.n	800a226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a4:	6a39      	ldr	r1, [r7, #32]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 fa46 	bl	800a638 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00d      	beq.n	800a1ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d107      	bne.n	800a1ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e02b      	b.n	800a226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1ce:	88fb      	ldrh	r3, [r7, #6]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d105      	bne.n	800a1e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1d4:	893b      	ldrh	r3, [r7, #8]
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	611a      	str	r2, [r3, #16]
 800a1de:	e021      	b.n	800a224 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1e0:	893b      	ldrh	r3, [r7, #8]
 800a1e2:	0a1b      	lsrs	r3, r3, #8
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f0:	6a39      	ldr	r1, [r7, #32]
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 fa20 	bl	800a638 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00d      	beq.n	800a21a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a202:	2b04      	cmp	r3, #4
 800a204:	d107      	bne.n	800a216 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a214:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e005      	b.n	800a226 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a21a:	893b      	ldrh	r3, [r7, #8]
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	00010002 	.word	0x00010002

0800a234 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af02      	add	r7, sp, #8
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4603      	mov	r3, r0
 800a244:	817b      	strh	r3, [r7, #10]
 800a246:	460b      	mov	r3, r1
 800a248:	813b      	strh	r3, [r7, #8]
 800a24a:	4613      	mov	r3, r2
 800a24c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a25c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a26c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	2200      	movs	r2, #0
 800a276:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f000 f8c2 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00d      	beq.n	800a2a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a294:	d103      	bne.n	800a29e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a29c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e0aa      	b.n	800a3f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2a2:	897b      	ldrh	r3, [r7, #10]
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	6a3a      	ldr	r2, [r7, #32]
 800a2b6:	4952      	ldr	r1, [pc, #328]	; (800a400 <I2C_RequestMemoryRead+0x1cc>)
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 f91d 	bl	800a4f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e097      	b.n	800a3f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e0:	6a39      	ldr	r1, [r7, #32]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 f9a8 	bl	800a638 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00d      	beq.n	800a30a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d107      	bne.n	800a306 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e076      	b.n	800a3f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a30a:	88fb      	ldrh	r3, [r7, #6]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d105      	bne.n	800a31c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a310:	893b      	ldrh	r3, [r7, #8]
 800a312:	b2da      	uxtb	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	611a      	str	r2, [r3, #16]
 800a31a:	e021      	b.n	800a360 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a31c:	893b      	ldrh	r3, [r7, #8]
 800a31e:	0a1b      	lsrs	r3, r3, #8
 800a320:	b29b      	uxth	r3, r3
 800a322:	b2da      	uxtb	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a32c:	6a39      	ldr	r1, [r7, #32]
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 f982 	bl	800a638 <I2C_WaitOnTXEFlagUntilTimeout>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00d      	beq.n	800a356 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d107      	bne.n	800a352 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e050      	b.n	800a3f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a356:	893b      	ldrh	r3, [r7, #8]
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a362:	6a39      	ldr	r1, [r7, #32]
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 f967 	bl	800a638 <I2C_WaitOnTXEFlagUntilTimeout>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00d      	beq.n	800a38c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a374:	2b04      	cmp	r3, #4
 800a376:	d107      	bne.n	800a388 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a386:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e035      	b.n	800a3f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a39a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f82b 	bl	800a404 <I2C_WaitOnFlagUntilTimeout>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00d      	beq.n	800a3d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c2:	d103      	bne.n	800a3cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e013      	b.n	800a3f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3d0:	897b      	ldrh	r3, [r7, #10]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	f043 0301 	orr.w	r3, r3, #1
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	6a3a      	ldr	r2, [r7, #32]
 800a3e4:	4906      	ldr	r1, [pc, #24]	; (800a400 <I2C_RequestMemoryRead+0x1cc>)
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f000 f886 	bl	800a4f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e000      	b.n	800a3f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	00010002 	.word	0x00010002

0800a404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	603b      	str	r3, [r7, #0]
 800a410:	4613      	mov	r3, r2
 800a412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a414:	e048      	b.n	800a4a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41c:	d044      	beq.n	800a4a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41e:	f7fe f9e3 	bl	80087e8 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d302      	bcc.n	800a434 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d139      	bne.n	800a4a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	0c1b      	lsrs	r3, r3, #16
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d10d      	bne.n	800a45a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	43da      	mvns	r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4013      	ands	r3, r2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bf0c      	ite	eq
 800a450:	2301      	moveq	r3, #1
 800a452:	2300      	movne	r3, #0
 800a454:	b2db      	uxtb	r3, r3
 800a456:	461a      	mov	r2, r3
 800a458:	e00c      	b.n	800a474 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	43da      	mvns	r2, r3
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	4013      	ands	r3, r2
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bf0c      	ite	eq
 800a46c:	2301      	moveq	r3, #1
 800a46e:	2300      	movne	r3, #0
 800a470:	b2db      	uxtb	r3, r3
 800a472:	461a      	mov	r2, r3
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	429a      	cmp	r2, r3
 800a478:	d116      	bne.n	800a4a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2220      	movs	r2, #32
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a494:	f043 0220 	orr.w	r2, r3, #32
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e023      	b.n	800a4f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	0c1b      	lsrs	r3, r3, #16
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d10d      	bne.n	800a4ce <I2C_WaitOnFlagUntilTimeout+0xca>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	43da      	mvns	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	4013      	ands	r3, r2
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bf0c      	ite	eq
 800a4c4:	2301      	moveq	r3, #1
 800a4c6:	2300      	movne	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	e00c      	b.n	800a4e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	43da      	mvns	r2, r3
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	4013      	ands	r3, r2
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bf0c      	ite	eq
 800a4e0:	2301      	moveq	r3, #1
 800a4e2:	2300      	movne	r3, #0
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d093      	beq.n	800a416 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a506:	e071      	b.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a516:	d123      	bne.n	800a560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a526:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a530:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2220      	movs	r2, #32
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54c:	f043 0204 	orr.w	r2, r3, #4
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e067      	b.n	800a630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a566:	d041      	beq.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a568:	f7fe f93e 	bl	80087e8 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	429a      	cmp	r2, r3
 800a576:	d302      	bcc.n	800a57e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d136      	bne.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	0c1b      	lsrs	r3, r3, #16
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b01      	cmp	r3, #1
 800a586:	d10c      	bne.n	800a5a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	43da      	mvns	r2, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	4013      	ands	r3, r2
 800a594:	b29b      	uxth	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	bf14      	ite	ne
 800a59a:	2301      	movne	r3, #1
 800a59c:	2300      	moveq	r3, #0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	e00b      	b.n	800a5ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	43da      	mvns	r2, r3
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	bf14      	ite	ne
 800a5b4:	2301      	movne	r3, #1
 800a5b6:	2300      	moveq	r3, #0
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d016      	beq.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2220      	movs	r2, #32
 800a5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d8:	f043 0220 	orr.w	r2, r3, #32
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e021      	b.n	800a630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d10c      	bne.n	800a610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	43da      	mvns	r2, r3
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	4013      	ands	r3, r2
 800a602:	b29b      	uxth	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	bf14      	ite	ne
 800a608:	2301      	movne	r3, #1
 800a60a:	2300      	moveq	r3, #0
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	e00b      	b.n	800a628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	43da      	mvns	r2, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	4013      	ands	r3, r2
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bf14      	ite	ne
 800a622:	2301      	movne	r3, #1
 800a624:	2300      	moveq	r3, #0
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f47f af6d 	bne.w	800a508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a644:	e034      	b.n	800a6b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 f8e3 	bl	800a812 <I2C_IsAcknowledgeFailed>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e034      	b.n	800a6c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65c:	d028      	beq.n	800a6b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65e:	f7fe f8c3 	bl	80087e8 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d302      	bcc.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d11d      	bne.n	800a6b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a67e:	2b80      	cmp	r3, #128	; 0x80
 800a680:	d016      	beq.n	800a6b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69c:	f043 0220 	orr.w	r2, r3, #32
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e007      	b.n	800a6c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ba:	2b80      	cmp	r3, #128	; 0x80
 800a6bc:	d1c3      	bne.n	800a646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6d4:	e034      	b.n	800a740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 f89b 	bl	800a812 <I2C_IsAcknowledgeFailed>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e034      	b.n	800a750 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ec:	d028      	beq.n	800a740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ee:	f7fe f87b 	bl	80087e8 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d302      	bcc.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d11d      	bne.n	800a740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	f003 0304 	and.w	r3, r3, #4
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d016      	beq.n	800a740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2220      	movs	r2, #32
 800a71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	f043 0220 	orr.w	r2, r3, #32
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e007      	b.n	800a750 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f003 0304 	and.w	r3, r3, #4
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d1c3      	bne.n	800a6d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a764:	e049      	b.n	800a7fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	f003 0310 	and.w	r3, r3, #16
 800a770:	2b10      	cmp	r3, #16
 800a772:	d119      	bne.n	800a7a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f06f 0210 	mvn.w	r2, #16
 800a77c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2220      	movs	r2, #32
 800a788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e030      	b.n	800a80a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a8:	f7fe f81e 	bl	80087e8 <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d302      	bcc.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d11d      	bne.n	800a7fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c8:	2b40      	cmp	r3, #64	; 0x40
 800a7ca:	d016      	beq.n	800a7fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	f043 0220 	orr.w	r2, r3, #32
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e007      	b.n	800a80a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	d1ae      	bne.n	800a766 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a828:	d11b      	bne.n	800a862 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a832:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	f043 0204 	orr.w	r2, r3, #4
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	bc80      	pop	{r7}
 800a86c:	4770      	bx	lr
	...

0800a870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e272      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 8087 	beq.w	800a99e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a890:	4b92      	ldr	r3, [pc, #584]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f003 030c 	and.w	r3, r3, #12
 800a898:	2b04      	cmp	r3, #4
 800a89a:	d00c      	beq.n	800a8b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a89c:	4b8f      	ldr	r3, [pc, #572]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f003 030c 	and.w	r3, r3, #12
 800a8a4:	2b08      	cmp	r3, #8
 800a8a6:	d112      	bne.n	800a8ce <HAL_RCC_OscConfig+0x5e>
 800a8a8:	4b8c      	ldr	r3, [pc, #560]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b4:	d10b      	bne.n	800a8ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8b6:	4b89      	ldr	r3, [pc, #548]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d06c      	beq.n	800a99c <HAL_RCC_OscConfig+0x12c>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d168      	bne.n	800a99c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e24c      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d6:	d106      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x76>
 800a8d8:	4b80      	ldr	r3, [pc, #512]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a7f      	ldr	r2, [pc, #508]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a8de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	e02e      	b.n	800a944 <HAL_RCC_OscConfig+0xd4>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10c      	bne.n	800a908 <HAL_RCC_OscConfig+0x98>
 800a8ee:	4b7b      	ldr	r3, [pc, #492]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a7a      	ldr	r2, [pc, #488]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8f8:	6013      	str	r3, [r2, #0]
 800a8fa:	4b78      	ldr	r3, [pc, #480]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a77      	ldr	r2, [pc, #476]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	e01d      	b.n	800a944 <HAL_RCC_OscConfig+0xd4>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a910:	d10c      	bne.n	800a92c <HAL_RCC_OscConfig+0xbc>
 800a912:	4b72      	ldr	r3, [pc, #456]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a71      	ldr	r2, [pc, #452]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	4b6f      	ldr	r3, [pc, #444]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a6e      	ldr	r2, [pc, #440]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e00b      	b.n	800a944 <HAL_RCC_OscConfig+0xd4>
 800a92c:	4b6b      	ldr	r3, [pc, #428]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a6a      	ldr	r2, [pc, #424]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	4b68      	ldr	r3, [pc, #416]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a67      	ldr	r2, [pc, #412]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a93e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d013      	beq.n	800a974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a94c:	f7fd ff4c 	bl	80087e8 <HAL_GetTick>
 800a950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a954:	f7fd ff48 	bl	80087e8 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b64      	cmp	r3, #100	; 0x64
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e200      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a966:	4b5d      	ldr	r3, [pc, #372]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0f0      	beq.n	800a954 <HAL_RCC_OscConfig+0xe4>
 800a972:	e014      	b.n	800a99e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a974:	f7fd ff38 	bl	80087e8 <HAL_GetTick>
 800a978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a97a:	e008      	b.n	800a98e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a97c:	f7fd ff34 	bl	80087e8 <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b64      	cmp	r3, #100	; 0x64
 800a988:	d901      	bls.n	800a98e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e1ec      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a98e:	4b53      	ldr	r3, [pc, #332]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1f0      	bne.n	800a97c <HAL_RCC_OscConfig+0x10c>
 800a99a:	e000      	b.n	800a99e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a99c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d063      	beq.n	800aa72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9aa:	4b4c      	ldr	r3, [pc, #304]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f003 030c 	and.w	r3, r3, #12
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00b      	beq.n	800a9ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a9b6:	4b49      	ldr	r3, [pc, #292]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f003 030c 	and.w	r3, r3, #12
 800a9be:	2b08      	cmp	r3, #8
 800a9c0:	d11c      	bne.n	800a9fc <HAL_RCC_OscConfig+0x18c>
 800a9c2:	4b46      	ldr	r3, [pc, #280]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d116      	bne.n	800a9fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9ce:	4b43      	ldr	r3, [pc, #268]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x176>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d001      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e1c0      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9e6:	4b3d      	ldr	r3, [pc, #244]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	4939      	ldr	r1, [pc, #228]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9fa:	e03a      	b.n	800aa72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d020      	beq.n	800aa46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa04:	4b36      	ldr	r3, [pc, #216]	; (800aae0 <HAL_RCC_OscConfig+0x270>)
 800aa06:	2201      	movs	r2, #1
 800aa08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa0a:	f7fd feed 	bl	80087e8 <HAL_GetTick>
 800aa0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa10:	e008      	b.n	800aa24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa12:	f7fd fee9 	bl	80087e8 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d901      	bls.n	800aa24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e1a1      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa24:	4b2d      	ldr	r3, [pc, #180]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0f0      	beq.n	800aa12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa30:	4b2a      	ldr	r3, [pc, #168]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	4927      	ldr	r1, [pc, #156]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800aa40:	4313      	orrs	r3, r2
 800aa42:	600b      	str	r3, [r1, #0]
 800aa44:	e015      	b.n	800aa72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa46:	4b26      	ldr	r3, [pc, #152]	; (800aae0 <HAL_RCC_OscConfig+0x270>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa4c:	f7fd fecc 	bl	80087e8 <HAL_GetTick>
 800aa50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa52:	e008      	b.n	800aa66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa54:	f7fd fec8 	bl	80087e8 <HAL_GetTick>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d901      	bls.n	800aa66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e180      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa66:	4b1d      	ldr	r3, [pc, #116]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f0      	bne.n	800aa54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0308 	and.w	r3, r3, #8
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d03a      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d019      	beq.n	800aaba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa86:	4b17      	ldr	r3, [pc, #92]	; (800aae4 <HAL_RCC_OscConfig+0x274>)
 800aa88:	2201      	movs	r2, #1
 800aa8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa8c:	f7fd feac 	bl	80087e8 <HAL_GetTick>
 800aa90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa92:	e008      	b.n	800aaa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa94:	f7fd fea8 	bl	80087e8 <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d901      	bls.n	800aaa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e160      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaa6:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <HAL_RCC_OscConfig+0x26c>)
 800aaa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d0f0      	beq.n	800aa94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aab2:	2001      	movs	r0, #1
 800aab4:	f000 face 	bl	800b054 <RCC_Delay>
 800aab8:	e01c      	b.n	800aaf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aaba:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <HAL_RCC_OscConfig+0x274>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aac0:	f7fd fe92 	bl	80087e8 <HAL_GetTick>
 800aac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aac6:	e00f      	b.n	800aae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aac8:	f7fd fe8e 	bl	80087e8 <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d908      	bls.n	800aae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e146      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
 800aada:	bf00      	nop
 800aadc:	40021000 	.word	0x40021000
 800aae0:	42420000 	.word	0x42420000
 800aae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aae8:	4b92      	ldr	r3, [pc, #584]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e9      	bne.n	800aac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0304 	and.w	r3, r3, #4
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80a6 	beq.w	800ac4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab02:	2300      	movs	r3, #0
 800ab04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab06:	4b8b      	ldr	r3, [pc, #556]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10d      	bne.n	800ab2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab12:	4b88      	ldr	r3, [pc, #544]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	4a87      	ldr	r2, [pc, #540]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab1c:	61d3      	str	r3, [r2, #28]
 800ab1e:	4b85      	ldr	r3, [pc, #532]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab26:	60bb      	str	r3, [r7, #8]
 800ab28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab2e:	4b82      	ldr	r3, [pc, #520]	; (800ad38 <HAL_RCC_OscConfig+0x4c8>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d118      	bne.n	800ab6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab3a:	4b7f      	ldr	r3, [pc, #508]	; (800ad38 <HAL_RCC_OscConfig+0x4c8>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a7e      	ldr	r2, [pc, #504]	; (800ad38 <HAL_RCC_OscConfig+0x4c8>)
 800ab40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab46:	f7fd fe4f 	bl	80087e8 <HAL_GetTick>
 800ab4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab4c:	e008      	b.n	800ab60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab4e:	f7fd fe4b 	bl	80087e8 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	2b64      	cmp	r3, #100	; 0x64
 800ab5a:	d901      	bls.n	800ab60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e103      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab60:	4b75      	ldr	r3, [pc, #468]	; (800ad38 <HAL_RCC_OscConfig+0x4c8>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0f0      	beq.n	800ab4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d106      	bne.n	800ab82 <HAL_RCC_OscConfig+0x312>
 800ab74:	4b6f      	ldr	r3, [pc, #444]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	4a6e      	ldr	r2, [pc, #440]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab7a:	f043 0301 	orr.w	r3, r3, #1
 800ab7e:	6213      	str	r3, [r2, #32]
 800ab80:	e02d      	b.n	800abde <HAL_RCC_OscConfig+0x36e>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10c      	bne.n	800aba4 <HAL_RCC_OscConfig+0x334>
 800ab8a:	4b6a      	ldr	r3, [pc, #424]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	4a69      	ldr	r2, [pc, #420]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	6213      	str	r3, [r2, #32]
 800ab96:	4b67      	ldr	r3, [pc, #412]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	4a66      	ldr	r2, [pc, #408]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ab9c:	f023 0304 	bic.w	r3, r3, #4
 800aba0:	6213      	str	r3, [r2, #32]
 800aba2:	e01c      	b.n	800abde <HAL_RCC_OscConfig+0x36e>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	2b05      	cmp	r3, #5
 800abaa:	d10c      	bne.n	800abc6 <HAL_RCC_OscConfig+0x356>
 800abac:	4b61      	ldr	r3, [pc, #388]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	4a60      	ldr	r2, [pc, #384]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800abb2:	f043 0304 	orr.w	r3, r3, #4
 800abb6:	6213      	str	r3, [r2, #32]
 800abb8:	4b5e      	ldr	r3, [pc, #376]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	4a5d      	ldr	r2, [pc, #372]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800abbe:	f043 0301 	orr.w	r3, r3, #1
 800abc2:	6213      	str	r3, [r2, #32]
 800abc4:	e00b      	b.n	800abde <HAL_RCC_OscConfig+0x36e>
 800abc6:	4b5b      	ldr	r3, [pc, #364]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	4a5a      	ldr	r2, [pc, #360]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800abcc:	f023 0301 	bic.w	r3, r3, #1
 800abd0:	6213      	str	r3, [r2, #32]
 800abd2:	4b58      	ldr	r3, [pc, #352]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	4a57      	ldr	r2, [pc, #348]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800abd8:	f023 0304 	bic.w	r3, r3, #4
 800abdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d015      	beq.n	800ac12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abe6:	f7fd fdff 	bl	80087e8 <HAL_GetTick>
 800abea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abec:	e00a      	b.n	800ac04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abee:	f7fd fdfb 	bl	80087e8 <HAL_GetTick>
 800abf2:	4602      	mov	r2, r0
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d901      	bls.n	800ac04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e0b1      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac04:	4b4b      	ldr	r3, [pc, #300]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d0ee      	beq.n	800abee <HAL_RCC_OscConfig+0x37e>
 800ac10:	e014      	b.n	800ac3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac12:	f7fd fde9 	bl	80087e8 <HAL_GetTick>
 800ac16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac18:	e00a      	b.n	800ac30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac1a:	f7fd fde5 	bl	80087e8 <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d901      	bls.n	800ac30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e09b      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac30:	4b40      	ldr	r3, [pc, #256]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1ee      	bne.n	800ac1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac3c:	7dfb      	ldrb	r3, [r7, #23]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d105      	bne.n	800ac4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac42:	4b3c      	ldr	r3, [pc, #240]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	4a3b      	ldr	r2, [pc, #236]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ac48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 8087 	beq.w	800ad66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac58:	4b36      	ldr	r3, [pc, #216]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	f003 030c 	and.w	r3, r3, #12
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d061      	beq.n	800ad28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d146      	bne.n	800acfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac6c:	4b33      	ldr	r3, [pc, #204]	; (800ad3c <HAL_RCC_OscConfig+0x4cc>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac72:	f7fd fdb9 	bl	80087e8 <HAL_GetTick>
 800ac76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac78:	e008      	b.n	800ac8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac7a:	f7fd fdb5 	bl	80087e8 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e06d      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac8c:	4b29      	ldr	r3, [pc, #164]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1f0      	bne.n	800ac7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a1b      	ldr	r3, [r3, #32]
 800ac9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca0:	d108      	bne.n	800acb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aca2:	4b24      	ldr	r3, [pc, #144]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	4921      	ldr	r1, [pc, #132]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acb4:	4b1f      	ldr	r3, [pc, #124]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a19      	ldr	r1, [r3, #32]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	430b      	orrs	r3, r1
 800acc6:	491b      	ldr	r1, [pc, #108]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800accc:	4b1b      	ldr	r3, [pc, #108]	; (800ad3c <HAL_RCC_OscConfig+0x4cc>)
 800acce:	2201      	movs	r2, #1
 800acd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acd2:	f7fd fd89 	bl	80087e8 <HAL_GetTick>
 800acd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acd8:	e008      	b.n	800acec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acda:	f7fd fd85 	bl	80087e8 <HAL_GetTick>
 800acde:	4602      	mov	r2, r0
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d901      	bls.n	800acec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e03d      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acec:	4b11      	ldr	r3, [pc, #68]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d0f0      	beq.n	800acda <HAL_RCC_OscConfig+0x46a>
 800acf8:	e035      	b.n	800ad66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acfa:	4b10      	ldr	r3, [pc, #64]	; (800ad3c <HAL_RCC_OscConfig+0x4cc>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad00:	f7fd fd72 	bl	80087e8 <HAL_GetTick>
 800ad04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad06:	e008      	b.n	800ad1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad08:	f7fd fd6e 	bl	80087e8 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e026      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad1a:	4b06      	ldr	r3, [pc, #24]	; (800ad34 <HAL_RCC_OscConfig+0x4c4>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1f0      	bne.n	800ad08 <HAL_RCC_OscConfig+0x498>
 800ad26:	e01e      	b.n	800ad66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d107      	bne.n	800ad40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e019      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
 800ad34:	40021000 	.word	0x40021000
 800ad38:	40007000 	.word	0x40007000
 800ad3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad40:	4b0b      	ldr	r3, [pc, #44]	; (800ad70 <HAL_RCC_OscConfig+0x500>)
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d106      	bne.n	800ad62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d001      	beq.n	800ad66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	40021000 	.word	0x40021000

0800ad74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e0d0      	b.n	800af2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad88:	4b6a      	ldr	r3, [pc, #424]	; (800af34 <HAL_RCC_ClockConfig+0x1c0>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0307 	and.w	r3, r3, #7
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d910      	bls.n	800adb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad96:	4b67      	ldr	r3, [pc, #412]	; (800af34 <HAL_RCC_ClockConfig+0x1c0>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f023 0207 	bic.w	r2, r3, #7
 800ad9e:	4965      	ldr	r1, [pc, #404]	; (800af34 <HAL_RCC_ClockConfig+0x1c0>)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ada6:	4b63      	ldr	r3, [pc, #396]	; (800af34 <HAL_RCC_ClockConfig+0x1c0>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0307 	and.w	r3, r3, #7
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d001      	beq.n	800adb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e0b8      	b.n	800af2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d020      	beq.n	800ae06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d005      	beq.n	800addc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800add0:	4b59      	ldr	r3, [pc, #356]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	4a58      	ldr	r2, [pc, #352]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800add6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800adda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0308 	and.w	r3, r3, #8
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d005      	beq.n	800adf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ade8:	4b53      	ldr	r3, [pc, #332]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	4a52      	ldr	r2, [pc, #328]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800adee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800adf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adf4:	4b50      	ldr	r3, [pc, #320]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	494d      	ldr	r1, [pc, #308]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d040      	beq.n	800ae94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d107      	bne.n	800ae2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae1a:	4b47      	ldr	r3, [pc, #284]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d115      	bne.n	800ae52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e07f      	b.n	800af2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d107      	bne.n	800ae42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae32:	4b41      	ldr	r3, [pc, #260]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d109      	bne.n	800ae52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e073      	b.n	800af2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae42:	4b3d      	ldr	r3, [pc, #244]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e06b      	b.n	800af2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae52:	4b39      	ldr	r3, [pc, #228]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	f023 0203 	bic.w	r2, r3, #3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	4936      	ldr	r1, [pc, #216]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae64:	f7fd fcc0 	bl	80087e8 <HAL_GetTick>
 800ae68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae6a:	e00a      	b.n	800ae82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae6c:	f7fd fcbc 	bl	80087e8 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d901      	bls.n	800ae82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e053      	b.n	800af2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae82:	4b2d      	ldr	r3, [pc, #180]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	f003 020c 	and.w	r2, r3, #12
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d1eb      	bne.n	800ae6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae94:	4b27      	ldr	r3, [pc, #156]	; (800af34 <HAL_RCC_ClockConfig+0x1c0>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0307 	and.w	r3, r3, #7
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d210      	bcs.n	800aec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aea2:	4b24      	ldr	r3, [pc, #144]	; (800af34 <HAL_RCC_ClockConfig+0x1c0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f023 0207 	bic.w	r2, r3, #7
 800aeaa:	4922      	ldr	r1, [pc, #136]	; (800af34 <HAL_RCC_ClockConfig+0x1c0>)
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeb2:	4b20      	ldr	r3, [pc, #128]	; (800af34 <HAL_RCC_ClockConfig+0x1c0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0307 	and.w	r3, r3, #7
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d001      	beq.n	800aec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e032      	b.n	800af2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d008      	beq.n	800aee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aed0:	4b19      	ldr	r3, [pc, #100]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	4916      	ldr	r1, [pc, #88]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d009      	beq.n	800af02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aeee:	4b12      	ldr	r3, [pc, #72]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	490e      	ldr	r1, [pc, #56]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800aefe:	4313      	orrs	r3, r2
 800af00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af02:	f000 f821 	bl	800af48 <HAL_RCC_GetSysClockFreq>
 800af06:	4602      	mov	r2, r0
 800af08:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <HAL_RCC_ClockConfig+0x1c4>)
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	091b      	lsrs	r3, r3, #4
 800af0e:	f003 030f 	and.w	r3, r3, #15
 800af12:	490a      	ldr	r1, [pc, #40]	; (800af3c <HAL_RCC_ClockConfig+0x1c8>)
 800af14:	5ccb      	ldrb	r3, [r1, r3]
 800af16:	fa22 f303 	lsr.w	r3, r2, r3
 800af1a:	4a09      	ldr	r2, [pc, #36]	; (800af40 <HAL_RCC_ClockConfig+0x1cc>)
 800af1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af1e:	4b09      	ldr	r3, [pc, #36]	; (800af44 <HAL_RCC_ClockConfig+0x1d0>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4618      	mov	r0, r3
 800af24:	f7fd fc1e 	bl	8008764 <HAL_InitTick>

  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	40022000 	.word	0x40022000
 800af38:	40021000 	.word	0x40021000
 800af3c:	0800ddc8 	.word	0x0800ddc8
 800af40:	200000a0 	.word	0x200000a0
 800af44:	200000a4 	.word	0x200000a4

0800af48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
 800af52:	2300      	movs	r3, #0
 800af54:	60bb      	str	r3, [r7, #8]
 800af56:	2300      	movs	r3, #0
 800af58:	617b      	str	r3, [r7, #20]
 800af5a:	2300      	movs	r3, #0
 800af5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af62:	4b1e      	ldr	r3, [pc, #120]	; (800afdc <HAL_RCC_GetSysClockFreq+0x94>)
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f003 030c 	and.w	r3, r3, #12
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d002      	beq.n	800af78 <HAL_RCC_GetSysClockFreq+0x30>
 800af72:	2b08      	cmp	r3, #8
 800af74:	d003      	beq.n	800af7e <HAL_RCC_GetSysClockFreq+0x36>
 800af76:	e027      	b.n	800afc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af78:	4b19      	ldr	r3, [pc, #100]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x98>)
 800af7a:	613b      	str	r3, [r7, #16]
      break;
 800af7c:	e027      	b.n	800afce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	0c9b      	lsrs	r3, r3, #18
 800af82:	f003 030f 	and.w	r3, r3, #15
 800af86:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af88:	5cd3      	ldrb	r3, [r2, r3]
 800af8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af92:	2b00      	cmp	r3, #0
 800af94:	d010      	beq.n	800afb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af96:	4b11      	ldr	r3, [pc, #68]	; (800afdc <HAL_RCC_GetSysClockFreq+0x94>)
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	0c5b      	lsrs	r3, r3, #17
 800af9c:	f003 0301 	and.w	r3, r3, #1
 800afa0:	4a11      	ldr	r2, [pc, #68]	; (800afe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800afa2:	5cd3      	ldrb	r3, [r2, r3]
 800afa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a0d      	ldr	r2, [pc, #52]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x98>)
 800afaa:	fb03 f202 	mul.w	r2, r3, r2
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb4:	617b      	str	r3, [r7, #20]
 800afb6:	e004      	b.n	800afc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a0c      	ldr	r2, [pc, #48]	; (800afec <HAL_RCC_GetSysClockFreq+0xa4>)
 800afbc:	fb02 f303 	mul.w	r3, r2, r3
 800afc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	613b      	str	r3, [r7, #16]
      break;
 800afc6:	e002      	b.n	800afce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x98>)
 800afca:	613b      	str	r3, [r7, #16]
      break;
 800afcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800afce:	693b      	ldr	r3, [r7, #16]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	371c      	adds	r7, #28
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bc80      	pop	{r7}
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	40021000 	.word	0x40021000
 800afe0:	007a1200 	.word	0x007a1200
 800afe4:	0800dde0 	.word	0x0800dde0
 800afe8:	0800ddf0 	.word	0x0800ddf0
 800afec:	003d0900 	.word	0x003d0900

0800aff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aff4:	4b02      	ldr	r3, [pc, #8]	; (800b000 <HAL_RCC_GetHCLKFreq+0x10>)
 800aff6:	681b      	ldr	r3, [r3, #0]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	46bd      	mov	sp, r7
 800affc:	bc80      	pop	{r7}
 800affe:	4770      	bx	lr
 800b000:	200000a0 	.word	0x200000a0

0800b004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b008:	f7ff fff2 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b00c:	4602      	mov	r2, r0
 800b00e:	4b05      	ldr	r3, [pc, #20]	; (800b024 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	f003 0307 	and.w	r3, r3, #7
 800b018:	4903      	ldr	r1, [pc, #12]	; (800b028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b01a:	5ccb      	ldrb	r3, [r1, r3]
 800b01c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b020:	4618      	mov	r0, r3
 800b022:	bd80      	pop	{r7, pc}
 800b024:	40021000 	.word	0x40021000
 800b028:	0800ddd8 	.word	0x0800ddd8

0800b02c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b030:	f7ff ffde 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b034:	4602      	mov	r2, r0
 800b036:	4b05      	ldr	r3, [pc, #20]	; (800b04c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	0adb      	lsrs	r3, r3, #11
 800b03c:	f003 0307 	and.w	r3, r3, #7
 800b040:	4903      	ldr	r1, [pc, #12]	; (800b050 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b042:	5ccb      	ldrb	r3, [r1, r3]
 800b044:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b048:	4618      	mov	r0, r3
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	40021000 	.word	0x40021000
 800b050:	0800ddd8 	.word	0x0800ddd8

0800b054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b05c:	4b0a      	ldr	r3, [pc, #40]	; (800b088 <RCC_Delay+0x34>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <RCC_Delay+0x38>)
 800b062:	fba2 2303 	umull	r2, r3, r2, r3
 800b066:	0a5b      	lsrs	r3, r3, #9
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
 800b06e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b070:	bf00      	nop
  }
  while (Delay --);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	1e5a      	subs	r2, r3, #1
 800b076:	60fa      	str	r2, [r7, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f9      	bne.n	800b070 <RCC_Delay+0x1c>
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	bc80      	pop	{r7}
 800b086:	4770      	bx	lr
 800b088:	200000a0 	.word	0x200000a0
 800b08c:	10624dd3 	.word	0x10624dd3

0800b090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e041      	b.n	800b126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7fd fa26 	bl	8008508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	f000 fa82 	bl	800b5d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b01      	cmp	r3, #1
 800b142:	d001      	beq.n	800b148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e044      	b.n	800b1d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f042 0201 	orr.w	r2, r2, #1
 800b15e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a1d      	ldr	r2, [pc, #116]	; (800b1dc <HAL_TIM_Base_Start_IT+0xac>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d018      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x6c>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a1c      	ldr	r2, [pc, #112]	; (800b1e0 <HAL_TIM_Base_Start_IT+0xb0>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d013      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x6c>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b17c:	d00e      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x6c>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a18      	ldr	r2, [pc, #96]	; (800b1e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d009      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x6c>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a16      	ldr	r2, [pc, #88]	; (800b1e8 <HAL_TIM_Base_Start_IT+0xb8>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d004      	beq.n	800b19c <HAL_TIM_Base_Start_IT+0x6c>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a15      	ldr	r2, [pc, #84]	; (800b1ec <HAL_TIM_Base_Start_IT+0xbc>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d111      	bne.n	800b1c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	f003 0307 	and.w	r3, r3, #7
 800b1a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b06      	cmp	r3, #6
 800b1ac:	d010      	beq.n	800b1d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f042 0201 	orr.w	r2, r2, #1
 800b1bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1be:	e007      	b.n	800b1d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f042 0201 	orr.w	r2, r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bc80      	pop	{r7}
 800b1da:	4770      	bx	lr
 800b1dc:	40012c00 	.word	0x40012c00
 800b1e0:	40013400 	.word	0x40013400
 800b1e4:	40000400 	.word	0x40000400
 800b1e8:	40000800 	.word	0x40000800
 800b1ec:	40000c00 	.word	0x40000c00

0800b1f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0302 	and.w	r3, r3, #2
 800b202:	2b02      	cmp	r3, #2
 800b204:	d122      	bne.n	800b24c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b02      	cmp	r3, #2
 800b212:	d11b      	bne.n	800b24c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0202 	mvn.w	r2, #2
 800b21c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f9b4 	bl	800b5a0 <HAL_TIM_IC_CaptureCallback>
 800b238:	e005      	b.n	800b246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f9a7 	bl	800b58e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f9b6 	bl	800b5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b04      	cmp	r3, #4
 800b258:	d122      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b04      	cmp	r3, #4
 800b266:	d11b      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f06f 0204 	mvn.w	r2, #4
 800b270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2202      	movs	r2, #2
 800b276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f98a 	bl	800b5a0 <HAL_TIM_IC_CaptureCallback>
 800b28c:	e005      	b.n	800b29a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f97d 	bl	800b58e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f98c 	bl	800b5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f003 0308 	and.w	r3, r3, #8
 800b2aa:	2b08      	cmp	r3, #8
 800b2ac:	d122      	bne.n	800b2f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	f003 0308 	and.w	r3, r3, #8
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	d11b      	bne.n	800b2f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0208 	mvn.w	r2, #8
 800b2c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2204      	movs	r2, #4
 800b2ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69db      	ldr	r3, [r3, #28]
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f960 	bl	800b5a0 <HAL_TIM_IC_CaptureCallback>
 800b2e0:	e005      	b.n	800b2ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f953 	bl	800b58e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f962 	bl	800b5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	f003 0310 	and.w	r3, r3, #16
 800b2fe:	2b10      	cmp	r3, #16
 800b300:	d122      	bne.n	800b348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f003 0310 	and.w	r3, r3, #16
 800b30c:	2b10      	cmp	r3, #16
 800b30e:	d11b      	bne.n	800b348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f06f 0210 	mvn.w	r2, #16
 800b318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2208      	movs	r2, #8
 800b31e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f936 	bl	800b5a0 <HAL_TIM_IC_CaptureCallback>
 800b334:	e005      	b.n	800b342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f929 	bl	800b58e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f938 	bl	800b5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b01      	cmp	r3, #1
 800b354:	d10e      	bne.n	800b374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f003 0301 	and.w	r3, r3, #1
 800b360:	2b01      	cmp	r3, #1
 800b362:	d107      	bne.n	800b374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f06f 0201 	mvn.w	r2, #1
 800b36c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7fc fd62 	bl	8007e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37e:	2b80      	cmp	r3, #128	; 0x80
 800b380:	d10e      	bne.n	800b3a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b38c:	2b80      	cmp	r3, #128	; 0x80
 800b38e:	d107      	bne.n	800b3a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 faa1 	bl	800b8e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3aa:	2b40      	cmp	r3, #64	; 0x40
 800b3ac:	d10e      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b8:	2b40      	cmp	r3, #64	; 0x40
 800b3ba:	d107      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f8fc 	bl	800b5c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	f003 0320 	and.w	r3, r3, #32
 800b3d6:	2b20      	cmp	r3, #32
 800b3d8:	d10e      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b20      	cmp	r3, #32
 800b3e6:	d107      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f06f 0220 	mvn.w	r2, #32
 800b3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fa6c 	bl	800b8d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3f8:	bf00      	nop
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <HAL_TIM_ConfigClockSource+0x1c>
 800b418:	2302      	movs	r3, #2
 800b41a:	e0b4      	b.n	800b586 <HAL_TIM_ConfigClockSource+0x186>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b43a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b442:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b454:	d03e      	beq.n	800b4d4 <HAL_TIM_ConfigClockSource+0xd4>
 800b456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b45a:	f200 8087 	bhi.w	800b56c <HAL_TIM_ConfigClockSource+0x16c>
 800b45e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b462:	f000 8086 	beq.w	800b572 <HAL_TIM_ConfigClockSource+0x172>
 800b466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46a:	d87f      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x16c>
 800b46c:	2b70      	cmp	r3, #112	; 0x70
 800b46e:	d01a      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0xa6>
 800b470:	2b70      	cmp	r3, #112	; 0x70
 800b472:	d87b      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x16c>
 800b474:	2b60      	cmp	r3, #96	; 0x60
 800b476:	d050      	beq.n	800b51a <HAL_TIM_ConfigClockSource+0x11a>
 800b478:	2b60      	cmp	r3, #96	; 0x60
 800b47a:	d877      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x16c>
 800b47c:	2b50      	cmp	r3, #80	; 0x50
 800b47e:	d03c      	beq.n	800b4fa <HAL_TIM_ConfigClockSource+0xfa>
 800b480:	2b50      	cmp	r3, #80	; 0x50
 800b482:	d873      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x16c>
 800b484:	2b40      	cmp	r3, #64	; 0x40
 800b486:	d058      	beq.n	800b53a <HAL_TIM_ConfigClockSource+0x13a>
 800b488:	2b40      	cmp	r3, #64	; 0x40
 800b48a:	d86f      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x16c>
 800b48c:	2b30      	cmp	r3, #48	; 0x30
 800b48e:	d064      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x15a>
 800b490:	2b30      	cmp	r3, #48	; 0x30
 800b492:	d86b      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x16c>
 800b494:	2b20      	cmp	r3, #32
 800b496:	d060      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x15a>
 800b498:	2b20      	cmp	r3, #32
 800b49a:	d867      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x16c>
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d05c      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x15a>
 800b4a0:	2b10      	cmp	r3, #16
 800b4a2:	d05a      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x15a>
 800b4a4:	e062      	b.n	800b56c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4b6:	f000 f980 	bl	800b7ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	609a      	str	r2, [r3, #8]
      break;
 800b4d2:	e04f      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4e4:	f000 f969 	bl	800b7ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	689a      	ldr	r2, [r3, #8]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4f6:	609a      	str	r2, [r3, #8]
      break;
 800b4f8:	e03c      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b506:	461a      	mov	r2, r3
 800b508:	f000 f8e0 	bl	800b6cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2150      	movs	r1, #80	; 0x50
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f937 	bl	800b786 <TIM_ITRx_SetConfig>
      break;
 800b518:	e02c      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b526:	461a      	mov	r2, r3
 800b528:	f000 f8fe 	bl	800b728 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2160      	movs	r1, #96	; 0x60
 800b532:	4618      	mov	r0, r3
 800b534:	f000 f927 	bl	800b786 <TIM_ITRx_SetConfig>
      break;
 800b538:	e01c      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b546:	461a      	mov	r2, r3
 800b548:	f000 f8c0 	bl	800b6cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2140      	movs	r1, #64	; 0x40
 800b552:	4618      	mov	r0, r3
 800b554:	f000 f917 	bl	800b786 <TIM_ITRx_SetConfig>
      break;
 800b558:	e00c      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4619      	mov	r1, r3
 800b564:	4610      	mov	r0, r2
 800b566:	f000 f90e 	bl	800b786 <TIM_ITRx_SetConfig>
      break;
 800b56a:	e003      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	73fb      	strb	r3, [r7, #15]
      break;
 800b570:	e000      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b572:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b596:	bf00      	nop
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bc80      	pop	{r7}
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bc80      	pop	{r7}
 800b5b0:	4770      	bx	lr

0800b5b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5ba:	bf00      	nop
 800b5bc:	370c      	adds	r7, #12
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bc80      	pop	{r7}
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bc80      	pop	{r7}
 800b5d4:	4770      	bx	lr
	...

0800b5d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a33      	ldr	r2, [pc, #204]	; (800b6b8 <TIM_Base_SetConfig+0xe0>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d013      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a32      	ldr	r2, [pc, #200]	; (800b6bc <TIM_Base_SetConfig+0xe4>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00f      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5fe:	d00b      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a2f      	ldr	r2, [pc, #188]	; (800b6c0 <TIM_Base_SetConfig+0xe8>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d007      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a2e      	ldr	r2, [pc, #184]	; (800b6c4 <TIM_Base_SetConfig+0xec>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d003      	beq.n	800b618 <TIM_Base_SetConfig+0x40>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a2d      	ldr	r2, [pc, #180]	; (800b6c8 <TIM_Base_SetConfig+0xf0>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d108      	bne.n	800b62a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b61e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4313      	orrs	r3, r2
 800b628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a22      	ldr	r2, [pc, #136]	; (800b6b8 <TIM_Base_SetConfig+0xe0>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d013      	beq.n	800b65a <TIM_Base_SetConfig+0x82>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a21      	ldr	r2, [pc, #132]	; (800b6bc <TIM_Base_SetConfig+0xe4>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d00f      	beq.n	800b65a <TIM_Base_SetConfig+0x82>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b640:	d00b      	beq.n	800b65a <TIM_Base_SetConfig+0x82>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a1e      	ldr	r2, [pc, #120]	; (800b6c0 <TIM_Base_SetConfig+0xe8>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d007      	beq.n	800b65a <TIM_Base_SetConfig+0x82>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a1d      	ldr	r2, [pc, #116]	; (800b6c4 <TIM_Base_SetConfig+0xec>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d003      	beq.n	800b65a <TIM_Base_SetConfig+0x82>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a1c      	ldr	r2, [pc, #112]	; (800b6c8 <TIM_Base_SetConfig+0xf0>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d108      	bne.n	800b66c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	4313      	orrs	r3, r2
 800b66a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	689a      	ldr	r2, [r3, #8]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a09      	ldr	r2, [pc, #36]	; (800b6b8 <TIM_Base_SetConfig+0xe0>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d003      	beq.n	800b6a0 <TIM_Base_SetConfig+0xc8>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a08      	ldr	r2, [pc, #32]	; (800b6bc <TIM_Base_SetConfig+0xe4>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d103      	bne.n	800b6a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	691a      	ldr	r2, [r3, #16]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	615a      	str	r2, [r3, #20]
}
 800b6ae:	bf00      	nop
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bc80      	pop	{r7}
 800b6b6:	4770      	bx	lr
 800b6b8:	40012c00 	.word	0x40012c00
 800b6bc:	40013400 	.word	0x40013400
 800b6c0:	40000400 	.word	0x40000400
 800b6c4:	40000800 	.word	0x40000800
 800b6c8:	40000c00 	.word	0x40000c00

0800b6cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6a1b      	ldr	r3, [r3, #32]
 800b6e2:	f023 0201 	bic.w	r2, r3, #1
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	699b      	ldr	r3, [r3, #24]
 800b6ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	011b      	lsls	r3, r3, #4
 800b6fc:	693a      	ldr	r2, [r7, #16]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f023 030a 	bic.w	r3, r3, #10
 800b708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	4313      	orrs	r3, r2
 800b710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	621a      	str	r2, [r3, #32]
}
 800b71e:	bf00      	nop
 800b720:	371c      	adds	r7, #28
 800b722:	46bd      	mov	sp, r7
 800b724:	bc80      	pop	{r7}
 800b726:	4770      	bx	lr

0800b728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b728:	b480      	push	{r7}
 800b72a:	b087      	sub	sp, #28
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6a1b      	ldr	r3, [r3, #32]
 800b73e:	f023 0210 	bic.w	r2, r3, #16
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	031b      	lsls	r3, r3, #12
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b764:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	011b      	lsls	r3, r3, #4
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	621a      	str	r2, [r3, #32]
}
 800b77c:	bf00      	nop
 800b77e:	371c      	adds	r7, #28
 800b780:	46bd      	mov	sp, r7
 800b782:	bc80      	pop	{r7}
 800b784:	4770      	bx	lr

0800b786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b786:	b480      	push	{r7}
 800b788:	b085      	sub	sp, #20
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	f043 0307 	orr.w	r3, r3, #7
 800b7a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	609a      	str	r2, [r3, #8]
}
 800b7b0:	bf00      	nop
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bc80      	pop	{r7}
 800b7b8:	4770      	bx	lr

0800b7ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b087      	sub	sp, #28
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	607a      	str	r2, [r7, #4]
 800b7c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	021a      	lsls	r2, r3, #8
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	609a      	str	r2, [r3, #8]
}
 800b7ee:	bf00      	nop
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bc80      	pop	{r7}
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d101      	bne.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b80c:	2302      	movs	r3, #2
 800b80e:	e050      	b.n	800b8b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a1b      	ldr	r2, [pc, #108]	; (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d018      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a19      	ldr	r2, [pc, #100]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d013      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b866:	d00e      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a15      	ldr	r2, [pc, #84]	; (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d009      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a14      	ldr	r2, [pc, #80]	; (800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d004      	beq.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a12      	ldr	r2, [pc, #72]	; (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d10c      	bne.n	800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b88c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	4313      	orrs	r3, r2
 800b896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bc80      	pop	{r7}
 800b8ba:	4770      	bx	lr
 800b8bc:	40012c00 	.word	0x40012c00
 800b8c0:	40013400 	.word	0x40013400
 800b8c4:	40000400 	.word	0x40000400
 800b8c8:	40000800 	.word	0x40000800
 800b8cc:	40000c00 	.word	0x40000c00

0800b8d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bc80      	pop	{r7}
 800b8e0:	4770      	bx	lr

0800b8e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8ea:	bf00      	nop
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bc80      	pop	{r7}
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e042      	b.n	800b98c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7fc fe1a 	bl	8008554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2224      	movs	r2, #36	; 0x24
 800b924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fcb5 	bl	800c2a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	691a      	ldr	r2, [r3, #16]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b94c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	695a      	ldr	r2, [r3, #20]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b95c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68da      	ldr	r2, [r3, #12]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b96c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2220      	movs	r2, #32
 800b978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2220      	movs	r2, #32
 800b980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b20      	cmp	r3, #32
 800b9ac:	d121      	bne.n	800b9f2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <HAL_UART_Transmit_IT+0x26>
 800b9b4:	88fb      	ldrh	r3, [r7, #6]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d101      	bne.n	800b9be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e01a      	b.n	800b9f4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	88fa      	ldrh	r2, [r7, #6]
 800b9c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	88fa      	ldrh	r2, [r7, #6]
 800b9ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2221      	movs	r2, #33	; 0x21
 800b9da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68da      	ldr	r2, [r3, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e000      	b.n	800b9f4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b9f2:	2302      	movs	r3, #2
  }
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bc80      	pop	{r7}
 800b9fc:	4770      	bx	lr
	...

0800ba00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b0ba      	sub	sp, #232	; 0xe8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba26:	2300      	movs	r3, #0
 800ba28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba36:	f003 030f 	and.w	r3, r3, #15
 800ba3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10f      	bne.n	800ba66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba4a:	f003 0320 	and.w	r3, r3, #32
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d009      	beq.n	800ba66 <HAL_UART_IRQHandler+0x66>
 800ba52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba56:	f003 0320 	and.w	r3, r3, #32
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fb63 	bl	800c12a <UART_Receive_IT>
      return;
 800ba64:	e25b      	b.n	800bf1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 80de 	beq.w	800bc2c <HAL_UART_IRQHandler+0x22c>
 800ba70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d106      	bne.n	800ba8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 80d1 	beq.w	800bc2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00b      	beq.n	800baae <HAL_UART_IRQHandler+0xae>
 800ba96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d005      	beq.n	800baae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa6:	f043 0201 	orr.w	r2, r3, #1
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800baae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab2:	f003 0304 	and.w	r3, r3, #4
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00b      	beq.n	800bad2 <HAL_UART_IRQHandler+0xd2>
 800baba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d005      	beq.n	800bad2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baca:	f043 0202 	orr.w	r2, r3, #2
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00b      	beq.n	800baf6 <HAL_UART_IRQHandler+0xf6>
 800bade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bae2:	f003 0301 	and.w	r3, r3, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d005      	beq.n	800baf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baee:	f043 0204 	orr.w	r2, r3, #4
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800baf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bafa:	f003 0308 	and.w	r3, r3, #8
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d011      	beq.n	800bb26 <HAL_UART_IRQHandler+0x126>
 800bb02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb06:	f003 0320 	and.w	r3, r3, #32
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d105      	bne.n	800bb1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d005      	beq.n	800bb26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1e:	f043 0208 	orr.w	r2, r3, #8
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 81f2 	beq.w	800bf14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb34:	f003 0320 	and.w	r3, r3, #32
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d008      	beq.n	800bb4e <HAL_UART_IRQHandler+0x14e>
 800bb3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb40:	f003 0320 	and.w	r3, r3, #32
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 faee 	bl	800c12a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	695b      	ldr	r3, [r3, #20]
 800bb54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bf14      	ite	ne
 800bb5c:	2301      	movne	r3, #1
 800bb5e:	2300      	moveq	r3, #0
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb6a:	f003 0308 	and.w	r3, r3, #8
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d103      	bne.n	800bb7a <HAL_UART_IRQHandler+0x17a>
 800bb72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d04f      	beq.n	800bc1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f9f8 	bl	800bf70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d041      	beq.n	800bc12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3314      	adds	r3, #20
 800bb94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb9c:	e853 3f00 	ldrex	r3, [r3]
 800bba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3314      	adds	r3, #20
 800bbb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbca:	e841 2300 	strex	r3, r2, [r1]
 800bbce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1d9      	bne.n	800bb8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d013      	beq.n	800bc0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe6:	4a7e      	ldr	r2, [pc, #504]	; (800bde0 <HAL_UART_IRQHandler+0x3e0>)
 800bbe8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fd f86c 	bl	8008ccc <HAL_DMA_Abort_IT>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d016      	beq.n	800bc28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc04:	4610      	mov	r0, r2
 800bc06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc08:	e00e      	b.n	800bc28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f99c 	bl	800bf48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc10:	e00a      	b.n	800bc28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f998 	bl	800bf48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc18:	e006      	b.n	800bc28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f994 	bl	800bf48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc26:	e175      	b.n	800bf14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc28:	bf00      	nop
    return;
 800bc2a:	e173      	b.n	800bf14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	f040 814f 	bne.w	800bed4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc3a:	f003 0310 	and.w	r3, r3, #16
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f000 8148 	beq.w	800bed4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc48:	f003 0310 	and.w	r3, r3, #16
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 8141 	beq.w	800bed4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc52:	2300      	movs	r3, #0
 800bc54:	60bb      	str	r3, [r7, #8]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	60bb      	str	r3, [r7, #8]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	60bb      	str	r3, [r7, #8]
 800bc66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	695b      	ldr	r3, [r3, #20]
 800bc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f000 80b6 	beq.w	800bde4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 8145 	beq.w	800bf18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc96:	429a      	cmp	r2, r3
 800bc98:	f080 813e 	bcs.w	800bf18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bca2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	2b20      	cmp	r3, #32
 800bcac:	f000 8088 	beq.w	800bdc0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	330c      	adds	r3, #12
 800bcb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcbe:	e853 3f00 	ldrex	r3, [r3]
 800bcc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bcc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	330c      	adds	r3, #12
 800bcd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bcdc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bce0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bce8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bcec:	e841 2300 	strex	r3, r2, [r1]
 800bcf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bcf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1d9      	bne.n	800bcb0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3314      	adds	r3, #20
 800bd02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd0e:	f023 0301 	bic.w	r3, r3, #1
 800bd12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3314      	adds	r3, #20
 800bd1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd2c:	e841 2300 	strex	r3, r2, [r1]
 800bd30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1e1      	bne.n	800bcfc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3314      	adds	r3, #20
 800bd3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd42:	e853 3f00 	ldrex	r3, [r3]
 800bd46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3314      	adds	r3, #20
 800bd58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd64:	e841 2300 	strex	r3, r2, [r1]
 800bd68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1e3      	bne.n	800bd38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	330c      	adds	r3, #12
 800bd84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd88:	e853 3f00 	ldrex	r3, [r3]
 800bd8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd90:	f023 0310 	bic.w	r3, r3, #16
 800bd94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	330c      	adds	r3, #12
 800bd9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bda2:	65ba      	str	r2, [r7, #88]	; 0x58
 800bda4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bda8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdaa:	e841 2300 	strex	r3, r2, [r1]
 800bdae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bdb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1e3      	bne.n	800bd7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fc ff4b 	bl	8008c56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f8bf 	bl	800bf5a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bddc:	e09c      	b.n	800bf18 <HAL_UART_IRQHandler+0x518>
 800bdde:	bf00      	nop
 800bde0:	0800c035 	.word	0x0800c035
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 808e 	beq.w	800bf1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 8089 	beq.w	800bf1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	330c      	adds	r3, #12
 800be10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be14:	e853 3f00 	ldrex	r3, [r3]
 800be18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	330c      	adds	r3, #12
 800be2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be2e:	647a      	str	r2, [r7, #68]	; 0x44
 800be30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be36:	e841 2300 	strex	r3, r2, [r1]
 800be3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1e3      	bne.n	800be0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3314      	adds	r3, #20
 800be48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	e853 3f00 	ldrex	r3, [r3]
 800be50:	623b      	str	r3, [r7, #32]
   return(result);
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	f023 0301 	bic.w	r3, r3, #1
 800be58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3314      	adds	r3, #20
 800be62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be66:	633a      	str	r2, [r7, #48]	; 0x30
 800be68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6e:	e841 2300 	strex	r3, r2, [r1]
 800be72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1e3      	bne.n	800be42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2220      	movs	r2, #32
 800be7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	330c      	adds	r3, #12
 800be8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	e853 3f00 	ldrex	r3, [r3]
 800be96:	60fb      	str	r3, [r7, #12]
   return(result);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0310 	bic.w	r3, r3, #16
 800be9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	330c      	adds	r3, #12
 800bea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800beac:	61fa      	str	r2, [r7, #28]
 800beae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb0:	69b9      	ldr	r1, [r7, #24]
 800beb2:	69fa      	ldr	r2, [r7, #28]
 800beb4:	e841 2300 	strex	r3, r2, [r1]
 800beb8:	617b      	str	r3, [r7, #20]
   return(result);
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1e3      	bne.n	800be88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2202      	movs	r2, #2
 800bec4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bec6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800beca:	4619      	mov	r1, r3
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f844 	bl	800bf5a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bed2:	e023      	b.n	800bf1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d009      	beq.n	800bef4 <HAL_UART_IRQHandler+0x4f4>
 800bee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d003      	beq.n	800bef4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f8b5 	bl	800c05c <UART_Transmit_IT>
    return;
 800bef2:	e014      	b.n	800bf1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00e      	beq.n	800bf1e <HAL_UART_IRQHandler+0x51e>
 800bf00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d008      	beq.n	800bf1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f8f4 	bl	800c0fa <UART_EndTransmit_IT>
    return;
 800bf12:	e004      	b.n	800bf1e <HAL_UART_IRQHandler+0x51e>
    return;
 800bf14:	bf00      	nop
 800bf16:	e002      	b.n	800bf1e <HAL_UART_IRQHandler+0x51e>
      return;
 800bf18:	bf00      	nop
 800bf1a:	e000      	b.n	800bf1e <HAL_UART_IRQHandler+0x51e>
      return;
 800bf1c:	bf00      	nop
  }
}
 800bf1e:	37e8      	adds	r7, #232	; 0xe8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bc80      	pop	{r7}
 800bf34:	4770      	bx	lr

0800bf36 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b083      	sub	sp, #12
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf3e:	bf00      	nop
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bc80      	pop	{r7}
 800bf46:	4770      	bx	lr

0800bf48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bc80      	pop	{r7}
 800bf58:	4770      	bx	lr

0800bf5a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	460b      	mov	r3, r1
 800bf64:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf66:	bf00      	nop
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bc80      	pop	{r7}
 800bf6e:	4770      	bx	lr

0800bf70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b095      	sub	sp, #84	; 0x54
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	330c      	adds	r3, #12
 800bf7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf82:	e853 3f00 	ldrex	r3, [r3]
 800bf86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	330c      	adds	r3, #12
 800bf96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf98:	643a      	str	r2, [r7, #64]	; 0x40
 800bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfa0:	e841 2300 	strex	r3, r2, [r1]
 800bfa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1e5      	bne.n	800bf78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3314      	adds	r3, #20
 800bfb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	6a3b      	ldr	r3, [r7, #32]
 800bfb6:	e853 3f00 	ldrex	r3, [r3]
 800bfba:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	f023 0301 	bic.w	r3, r3, #1
 800bfc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3314      	adds	r3, #20
 800bfca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e5      	bne.n	800bfac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d119      	bne.n	800c01c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	330c      	adds	r3, #12
 800bfee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	e853 3f00 	ldrex	r3, [r3]
 800bff6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	f023 0310 	bic.w	r3, r3, #16
 800bffe:	647b      	str	r3, [r7, #68]	; 0x44
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	330c      	adds	r3, #12
 800c006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c008:	61ba      	str	r2, [r7, #24]
 800c00a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00c:	6979      	ldr	r1, [r7, #20]
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	e841 2300 	strex	r3, r2, [r1]
 800c014:	613b      	str	r3, [r7, #16]
   return(result);
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1e5      	bne.n	800bfe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2220      	movs	r2, #32
 800c020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c02a:	bf00      	nop
 800c02c:	3754      	adds	r7, #84	; 0x54
 800c02e:	46bd      	mov	sp, r7
 800c030:	bc80      	pop	{r7}
 800c032:	4770      	bx	lr

0800c034 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c040:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f7ff ff7a 	bl	800bf48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c054:	bf00      	nop
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b21      	cmp	r3, #33	; 0x21
 800c06e:	d13e      	bne.n	800c0ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c078:	d114      	bne.n	800c0a4 <UART_Transmit_IT+0x48>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d110      	bne.n	800c0a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	461a      	mov	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c096:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a1b      	ldr	r3, [r3, #32]
 800c09c:	1c9a      	adds	r2, r3, #2
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	621a      	str	r2, [r3, #32]
 800c0a2:	e008      	b.n	800c0b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a1b      	ldr	r3, [r3, #32]
 800c0a8:	1c59      	adds	r1, r3, #1
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	6211      	str	r1, [r2, #32]
 800c0ae:	781a      	ldrb	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10f      	bne.n	800c0ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e000      	b.n	800c0f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0ee:	2302      	movs	r3, #2
  }
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bc80      	pop	{r7}
 800c0f8:	4770      	bx	lr

0800c0fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2220      	movs	r2, #32
 800c116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff ff02 	bl	800bf24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b08c      	sub	sp, #48	; 0x30
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b22      	cmp	r3, #34	; 0x22
 800c13c:	f040 80ae 	bne.w	800c29c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c148:	d117      	bne.n	800c17a <UART_Receive_IT+0x50>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d113      	bne.n	800c17a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c152:	2300      	movs	r3, #0
 800c154:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	b29b      	uxth	r3, r3
 800c164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c168:	b29a      	uxth	r2, r3
 800c16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c172:	1c9a      	adds	r2, r3, #2
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	629a      	str	r2, [r3, #40]	; 0x28
 800c178:	e026      	b.n	800c1c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c180:	2300      	movs	r3, #0
 800c182:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c18c:	d007      	beq.n	800c19e <UART_Receive_IT+0x74>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10a      	bne.n	800c1ac <UART_Receive_IT+0x82>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d106      	bne.n	800c1ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	701a      	strb	r2, [r3, #0]
 800c1aa:	e008      	b.n	800c1be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d15d      	bne.n	800c298 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68da      	ldr	r2, [r3, #12]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f022 0220 	bic.w	r2, r2, #32
 800c1ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	695a      	ldr	r2, [r3, #20]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 0201 	bic.w	r2, r2, #1
 800c20a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2220      	movs	r2, #32
 800c210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d135      	bne.n	800c28e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	330c      	adds	r3, #12
 800c22e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	e853 3f00 	ldrex	r3, [r3]
 800c236:	613b      	str	r3, [r7, #16]
   return(result);
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f023 0310 	bic.w	r3, r3, #16
 800c23e:	627b      	str	r3, [r7, #36]	; 0x24
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	330c      	adds	r3, #12
 800c246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c248:	623a      	str	r2, [r7, #32]
 800c24a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24c:	69f9      	ldr	r1, [r7, #28]
 800c24e:	6a3a      	ldr	r2, [r7, #32]
 800c250:	e841 2300 	strex	r3, r2, [r1]
 800c254:	61bb      	str	r3, [r7, #24]
   return(result);
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1e5      	bne.n	800c228 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0310 	and.w	r3, r3, #16
 800c266:	2b10      	cmp	r3, #16
 800c268:	d10a      	bne.n	800c280 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c26a:	2300      	movs	r3, #0
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	60fb      	str	r3, [r7, #12]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	60fb      	str	r3, [r7, #12]
 800c27e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff fe67 	bl	800bf5a <HAL_UARTEx_RxEventCallback>
 800c28c:	e002      	b.n	800c294 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7ff fe51 	bl	800bf36 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	e002      	b.n	800c29e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	e000      	b.n	800c29e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c29c:	2302      	movs	r3, #2
  }
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3730      	adds	r7, #48	; 0x30
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
	...

0800c2a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	430a      	orrs	r2, r1
 800c2c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	689a      	ldr	r2, [r3, #8]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	695b      	ldr	r3, [r3, #20]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c2e2:	f023 030c 	bic.w	r3, r3, #12
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6812      	ldr	r2, [r2, #0]
 800c2ea:	68b9      	ldr	r1, [r7, #8]
 800c2ec:	430b      	orrs	r3, r1
 800c2ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	699a      	ldr	r2, [r3, #24]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a2c      	ldr	r2, [pc, #176]	; (800c3bc <UART_SetConfig+0x114>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d103      	bne.n	800c318 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c310:	f7fe fe8c 	bl	800b02c <HAL_RCC_GetPCLK2Freq>
 800c314:	60f8      	str	r0, [r7, #12]
 800c316:	e002      	b.n	800c31e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c318:	f7fe fe74 	bl	800b004 <HAL_RCC_GetPCLK1Freq>
 800c31c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	009a      	lsls	r2, r3, #2
 800c328:	441a      	add	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	fbb2 f3f3 	udiv	r3, r2, r3
 800c334:	4a22      	ldr	r2, [pc, #136]	; (800c3c0 <UART_SetConfig+0x118>)
 800c336:	fba2 2303 	umull	r2, r3, r2, r3
 800c33a:	095b      	lsrs	r3, r3, #5
 800c33c:	0119      	lsls	r1, r3, #4
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	4613      	mov	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	009a      	lsls	r2, r3, #2
 800c348:	441a      	add	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	fbb2 f2f3 	udiv	r2, r2, r3
 800c354:	4b1a      	ldr	r3, [pc, #104]	; (800c3c0 <UART_SetConfig+0x118>)
 800c356:	fba3 0302 	umull	r0, r3, r3, r2
 800c35a:	095b      	lsrs	r3, r3, #5
 800c35c:	2064      	movs	r0, #100	; 0x64
 800c35e:	fb00 f303 	mul.w	r3, r0, r3
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	011b      	lsls	r3, r3, #4
 800c366:	3332      	adds	r3, #50	; 0x32
 800c368:	4a15      	ldr	r2, [pc, #84]	; (800c3c0 <UART_SetConfig+0x118>)
 800c36a:	fba2 2303 	umull	r2, r3, r2, r3
 800c36e:	095b      	lsrs	r3, r3, #5
 800c370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c374:	4419      	add	r1, r3
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	009a      	lsls	r2, r3, #2
 800c380:	441a      	add	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	fbb2 f2f3 	udiv	r2, r2, r3
 800c38c:	4b0c      	ldr	r3, [pc, #48]	; (800c3c0 <UART_SetConfig+0x118>)
 800c38e:	fba3 0302 	umull	r0, r3, r3, r2
 800c392:	095b      	lsrs	r3, r3, #5
 800c394:	2064      	movs	r0, #100	; 0x64
 800c396:	fb00 f303 	mul.w	r3, r0, r3
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	011b      	lsls	r3, r3, #4
 800c39e:	3332      	adds	r3, #50	; 0x32
 800c3a0:	4a07      	ldr	r2, [pc, #28]	; (800c3c0 <UART_SetConfig+0x118>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	f003 020f 	and.w	r2, r3, #15
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	440a      	add	r2, r1
 800c3b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c3b4:	bf00      	nop
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	40013800 	.word	0x40013800
 800c3c0:	51eb851f 	.word	0x51eb851f

0800c3c4 <__itoa>:
 800c3c4:	1e93      	subs	r3, r2, #2
 800c3c6:	2b22      	cmp	r3, #34	; 0x22
 800c3c8:	b510      	push	{r4, lr}
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	d904      	bls.n	800c3d8 <__itoa+0x14>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	461c      	mov	r4, r3
 800c3d2:	700b      	strb	r3, [r1, #0]
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	bd10      	pop	{r4, pc}
 800c3d8:	2a0a      	cmp	r2, #10
 800c3da:	d109      	bne.n	800c3f0 <__itoa+0x2c>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	da07      	bge.n	800c3f0 <__itoa+0x2c>
 800c3e0:	232d      	movs	r3, #45	; 0x2d
 800c3e2:	700b      	strb	r3, [r1, #0]
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	4240      	negs	r0, r0
 800c3e8:	4421      	add	r1, r4
 800c3ea:	f000 f8b9 	bl	800c560 <__utoa>
 800c3ee:	e7f1      	b.n	800c3d4 <__itoa+0x10>
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	e7f9      	b.n	800c3e8 <__itoa+0x24>

0800c3f4 <itoa>:
 800c3f4:	f7ff bfe6 	b.w	800c3c4 <__itoa>

0800c3f8 <malloc>:
 800c3f8:	4b02      	ldr	r3, [pc, #8]	; (800c404 <malloc+0xc>)
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	f000 b823 	b.w	800c448 <_malloc_r>
 800c402:	bf00      	nop
 800c404:	200000f8 	.word	0x200000f8

0800c408 <sbrk_aligned>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	4e0e      	ldr	r6, [pc, #56]	; (800c444 <sbrk_aligned+0x3c>)
 800c40c:	460c      	mov	r4, r1
 800c40e:	6831      	ldr	r1, [r6, #0]
 800c410:	4605      	mov	r5, r0
 800c412:	b911      	cbnz	r1, 800c41a <sbrk_aligned+0x12>
 800c414:	f000 f91e 	bl	800c654 <_sbrk_r>
 800c418:	6030      	str	r0, [r6, #0]
 800c41a:	4621      	mov	r1, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	f000 f919 	bl	800c654 <_sbrk_r>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	d00a      	beq.n	800c43c <sbrk_aligned+0x34>
 800c426:	1cc4      	adds	r4, r0, #3
 800c428:	f024 0403 	bic.w	r4, r4, #3
 800c42c:	42a0      	cmp	r0, r4
 800c42e:	d007      	beq.n	800c440 <sbrk_aligned+0x38>
 800c430:	1a21      	subs	r1, r4, r0
 800c432:	4628      	mov	r0, r5
 800c434:	f000 f90e 	bl	800c654 <_sbrk_r>
 800c438:	3001      	adds	r0, #1
 800c43a:	d101      	bne.n	800c440 <sbrk_aligned+0x38>
 800c43c:	f04f 34ff 	mov.w	r4, #4294967295
 800c440:	4620      	mov	r0, r4
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	20000464 	.word	0x20000464

0800c448 <_malloc_r>:
 800c448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c44c:	1ccd      	adds	r5, r1, #3
 800c44e:	f025 0503 	bic.w	r5, r5, #3
 800c452:	3508      	adds	r5, #8
 800c454:	2d0c      	cmp	r5, #12
 800c456:	bf38      	it	cc
 800c458:	250c      	movcc	r5, #12
 800c45a:	2d00      	cmp	r5, #0
 800c45c:	4607      	mov	r7, r0
 800c45e:	db01      	blt.n	800c464 <_malloc_r+0x1c>
 800c460:	42a9      	cmp	r1, r5
 800c462:	d905      	bls.n	800c470 <_malloc_r+0x28>
 800c464:	230c      	movs	r3, #12
 800c466:	2600      	movs	r6, #0
 800c468:	603b      	str	r3, [r7, #0]
 800c46a:	4630      	mov	r0, r6
 800c46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c470:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c544 <_malloc_r+0xfc>
 800c474:	f000 f868 	bl	800c548 <__malloc_lock>
 800c478:	f8d8 3000 	ldr.w	r3, [r8]
 800c47c:	461c      	mov	r4, r3
 800c47e:	bb5c      	cbnz	r4, 800c4d8 <_malloc_r+0x90>
 800c480:	4629      	mov	r1, r5
 800c482:	4638      	mov	r0, r7
 800c484:	f7ff ffc0 	bl	800c408 <sbrk_aligned>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	4604      	mov	r4, r0
 800c48c:	d155      	bne.n	800c53a <_malloc_r+0xf2>
 800c48e:	f8d8 4000 	ldr.w	r4, [r8]
 800c492:	4626      	mov	r6, r4
 800c494:	2e00      	cmp	r6, #0
 800c496:	d145      	bne.n	800c524 <_malloc_r+0xdc>
 800c498:	2c00      	cmp	r4, #0
 800c49a:	d048      	beq.n	800c52e <_malloc_r+0xe6>
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	4631      	mov	r1, r6
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	eb04 0903 	add.w	r9, r4, r3
 800c4a6:	f000 f8d5 	bl	800c654 <_sbrk_r>
 800c4aa:	4581      	cmp	r9, r0
 800c4ac:	d13f      	bne.n	800c52e <_malloc_r+0xe6>
 800c4ae:	6821      	ldr	r1, [r4, #0]
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	1a6d      	subs	r5, r5, r1
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	f7ff ffa7 	bl	800c408 <sbrk_aligned>
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	d037      	beq.n	800c52e <_malloc_r+0xe6>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	442b      	add	r3, r5
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d038      	beq.n	800c53e <_malloc_r+0xf6>
 800c4cc:	685a      	ldr	r2, [r3, #4]
 800c4ce:	42a2      	cmp	r2, r4
 800c4d0:	d12b      	bne.n	800c52a <_malloc_r+0xe2>
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	605a      	str	r2, [r3, #4]
 800c4d6:	e00f      	b.n	800c4f8 <_malloc_r+0xb0>
 800c4d8:	6822      	ldr	r2, [r4, #0]
 800c4da:	1b52      	subs	r2, r2, r5
 800c4dc:	d41f      	bmi.n	800c51e <_malloc_r+0xd6>
 800c4de:	2a0b      	cmp	r2, #11
 800c4e0:	d917      	bls.n	800c512 <_malloc_r+0xca>
 800c4e2:	1961      	adds	r1, r4, r5
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	6025      	str	r5, [r4, #0]
 800c4e8:	bf18      	it	ne
 800c4ea:	6059      	strne	r1, [r3, #4]
 800c4ec:	6863      	ldr	r3, [r4, #4]
 800c4ee:	bf08      	it	eq
 800c4f0:	f8c8 1000 	streq.w	r1, [r8]
 800c4f4:	5162      	str	r2, [r4, r5]
 800c4f6:	604b      	str	r3, [r1, #4]
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f104 060b 	add.w	r6, r4, #11
 800c4fe:	f000 f829 	bl	800c554 <__malloc_unlock>
 800c502:	f026 0607 	bic.w	r6, r6, #7
 800c506:	1d23      	adds	r3, r4, #4
 800c508:	1af2      	subs	r2, r6, r3
 800c50a:	d0ae      	beq.n	800c46a <_malloc_r+0x22>
 800c50c:	1b9b      	subs	r3, r3, r6
 800c50e:	50a3      	str	r3, [r4, r2]
 800c510:	e7ab      	b.n	800c46a <_malloc_r+0x22>
 800c512:	42a3      	cmp	r3, r4
 800c514:	6862      	ldr	r2, [r4, #4]
 800c516:	d1dd      	bne.n	800c4d4 <_malloc_r+0x8c>
 800c518:	f8c8 2000 	str.w	r2, [r8]
 800c51c:	e7ec      	b.n	800c4f8 <_malloc_r+0xb0>
 800c51e:	4623      	mov	r3, r4
 800c520:	6864      	ldr	r4, [r4, #4]
 800c522:	e7ac      	b.n	800c47e <_malloc_r+0x36>
 800c524:	4634      	mov	r4, r6
 800c526:	6876      	ldr	r6, [r6, #4]
 800c528:	e7b4      	b.n	800c494 <_malloc_r+0x4c>
 800c52a:	4613      	mov	r3, r2
 800c52c:	e7cc      	b.n	800c4c8 <_malloc_r+0x80>
 800c52e:	230c      	movs	r3, #12
 800c530:	4638      	mov	r0, r7
 800c532:	603b      	str	r3, [r7, #0]
 800c534:	f000 f80e 	bl	800c554 <__malloc_unlock>
 800c538:	e797      	b.n	800c46a <_malloc_r+0x22>
 800c53a:	6025      	str	r5, [r4, #0]
 800c53c:	e7dc      	b.n	800c4f8 <_malloc_r+0xb0>
 800c53e:	605b      	str	r3, [r3, #4]
 800c540:	deff      	udf	#255	; 0xff
 800c542:	bf00      	nop
 800c544:	20000460 	.word	0x20000460

0800c548 <__malloc_lock>:
 800c548:	4801      	ldr	r0, [pc, #4]	; (800c550 <__malloc_lock+0x8>)
 800c54a:	f000 b8bd 	b.w	800c6c8 <__retarget_lock_acquire_recursive>
 800c54e:	bf00      	nop
 800c550:	200005a4 	.word	0x200005a4

0800c554 <__malloc_unlock>:
 800c554:	4801      	ldr	r0, [pc, #4]	; (800c55c <__malloc_unlock+0x8>)
 800c556:	f000 b8b8 	b.w	800c6ca <__retarget_lock_release_recursive>
 800c55a:	bf00      	nop
 800c55c:	200005a4 	.word	0x200005a4

0800c560 <__utoa>:
 800c560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c562:	b08b      	sub	sp, #44	; 0x2c
 800c564:	4605      	mov	r5, r0
 800c566:	460b      	mov	r3, r1
 800c568:	466e      	mov	r6, sp
 800c56a:	4c1d      	ldr	r4, [pc, #116]	; (800c5e0 <__utoa+0x80>)
 800c56c:	f104 0c20 	add.w	ip, r4, #32
 800c570:	4637      	mov	r7, r6
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	6861      	ldr	r1, [r4, #4]
 800c576:	3408      	adds	r4, #8
 800c578:	c703      	stmia	r7!, {r0, r1}
 800c57a:	4564      	cmp	r4, ip
 800c57c:	463e      	mov	r6, r7
 800c57e:	d1f7      	bne.n	800c570 <__utoa+0x10>
 800c580:	7921      	ldrb	r1, [r4, #4]
 800c582:	6820      	ldr	r0, [r4, #0]
 800c584:	7139      	strb	r1, [r7, #4]
 800c586:	1e91      	subs	r1, r2, #2
 800c588:	2922      	cmp	r1, #34	; 0x22
 800c58a:	6038      	str	r0, [r7, #0]
 800c58c:	f04f 0100 	mov.w	r1, #0
 800c590:	d904      	bls.n	800c59c <__utoa+0x3c>
 800c592:	7019      	strb	r1, [r3, #0]
 800c594:	460b      	mov	r3, r1
 800c596:	4618      	mov	r0, r3
 800c598:	b00b      	add	sp, #44	; 0x2c
 800c59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c59c:	1e58      	subs	r0, r3, #1
 800c59e:	4684      	mov	ip, r0
 800c5a0:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5a4:	fb02 5617 	mls	r6, r2, r7, r5
 800c5a8:	3628      	adds	r6, #40	; 0x28
 800c5aa:	446e      	add	r6, sp
 800c5ac:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5b6:	462e      	mov	r6, r5
 800c5b8:	42b2      	cmp	r2, r6
 800c5ba:	463d      	mov	r5, r7
 800c5bc:	f101 0101 	add.w	r1, r1, #1
 800c5c0:	d9ee      	bls.n	800c5a0 <__utoa+0x40>
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	545a      	strb	r2, [r3, r1]
 800c5c6:	1919      	adds	r1, r3, r4
 800c5c8:	1aa5      	subs	r5, r4, r2
 800c5ca:	42aa      	cmp	r2, r5
 800c5cc:	dae3      	bge.n	800c596 <__utoa+0x36>
 800c5ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5d2:	780e      	ldrb	r6, [r1, #0]
 800c5d4:	3201      	adds	r2, #1
 800c5d6:	7006      	strb	r6, [r0, #0]
 800c5d8:	f801 5901 	strb.w	r5, [r1], #-1
 800c5dc:	e7f4      	b.n	800c5c8 <__utoa+0x68>
 800c5de:	bf00      	nop
 800c5e0:	0800ddf2 	.word	0x0800ddf2

0800c5e4 <siprintf>:
 800c5e4:	b40e      	push	{r1, r2, r3}
 800c5e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5ea:	b500      	push	{lr}
 800c5ec:	b09c      	sub	sp, #112	; 0x70
 800c5ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c5f0:	9002      	str	r0, [sp, #8]
 800c5f2:	9006      	str	r0, [sp, #24]
 800c5f4:	9107      	str	r1, [sp, #28]
 800c5f6:	9104      	str	r1, [sp, #16]
 800c5f8:	4808      	ldr	r0, [pc, #32]	; (800c61c <siprintf+0x38>)
 800c5fa:	4909      	ldr	r1, [pc, #36]	; (800c620 <siprintf+0x3c>)
 800c5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c600:	9105      	str	r1, [sp, #20]
 800c602:	6800      	ldr	r0, [r0, #0]
 800c604:	a902      	add	r1, sp, #8
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	f000 f90a 	bl	800c820 <_svfiprintf_r>
 800c60c:	2200      	movs	r2, #0
 800c60e:	9b02      	ldr	r3, [sp, #8]
 800c610:	701a      	strb	r2, [r3, #0]
 800c612:	b01c      	add	sp, #112	; 0x70
 800c614:	f85d eb04 	ldr.w	lr, [sp], #4
 800c618:	b003      	add	sp, #12
 800c61a:	4770      	bx	lr
 800c61c:	200000f8 	.word	0x200000f8
 800c620:	ffff0208 	.word	0xffff0208

0800c624 <memset>:
 800c624:	4603      	mov	r3, r0
 800c626:	4402      	add	r2, r0
 800c628:	4293      	cmp	r3, r2
 800c62a:	d100      	bne.n	800c62e <memset+0xa>
 800c62c:	4770      	bx	lr
 800c62e:	f803 1b01 	strb.w	r1, [r3], #1
 800c632:	e7f9      	b.n	800c628 <memset+0x4>

0800c634 <strcat>:
 800c634:	4602      	mov	r2, r0
 800c636:	b510      	push	{r4, lr}
 800c638:	7814      	ldrb	r4, [r2, #0]
 800c63a:	4613      	mov	r3, r2
 800c63c:	3201      	adds	r2, #1
 800c63e:	2c00      	cmp	r4, #0
 800c640:	d1fa      	bne.n	800c638 <strcat+0x4>
 800c642:	3b01      	subs	r3, #1
 800c644:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c648:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c64c:	2a00      	cmp	r2, #0
 800c64e:	d1f9      	bne.n	800c644 <strcat+0x10>
 800c650:	bd10      	pop	{r4, pc}
	...

0800c654 <_sbrk_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	2300      	movs	r3, #0
 800c658:	4d05      	ldr	r5, [pc, #20]	; (800c670 <_sbrk_r+0x1c>)
 800c65a:	4604      	mov	r4, r0
 800c65c:	4608      	mov	r0, r1
 800c65e:	602b      	str	r3, [r5, #0]
 800c660:	f7fc f808 	bl	8008674 <_sbrk>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_sbrk_r+0x1a>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_sbrk_r+0x1a>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	200005a0 	.word	0x200005a0

0800c674 <__errno>:
 800c674:	4b01      	ldr	r3, [pc, #4]	; (800c67c <__errno+0x8>)
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	200000f8 	.word	0x200000f8

0800c680 <__libc_init_array>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	2600      	movs	r6, #0
 800c684:	4d0c      	ldr	r5, [pc, #48]	; (800c6b8 <__libc_init_array+0x38>)
 800c686:	4c0d      	ldr	r4, [pc, #52]	; (800c6bc <__libc_init_array+0x3c>)
 800c688:	1b64      	subs	r4, r4, r5
 800c68a:	10a4      	asrs	r4, r4, #2
 800c68c:	42a6      	cmp	r6, r4
 800c68e:	d109      	bne.n	800c6a4 <__libc_init_array+0x24>
 800c690:	f000 fbc6 	bl	800ce20 <_init>
 800c694:	2600      	movs	r6, #0
 800c696:	4d0a      	ldr	r5, [pc, #40]	; (800c6c0 <__libc_init_array+0x40>)
 800c698:	4c0a      	ldr	r4, [pc, #40]	; (800c6c4 <__libc_init_array+0x44>)
 800c69a:	1b64      	subs	r4, r4, r5
 800c69c:	10a4      	asrs	r4, r4, #2
 800c69e:	42a6      	cmp	r6, r4
 800c6a0:	d105      	bne.n	800c6ae <__libc_init_array+0x2e>
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}
 800c6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6a8:	4798      	blx	r3
 800c6aa:	3601      	adds	r6, #1
 800c6ac:	e7ee      	b.n	800c68c <__libc_init_array+0xc>
 800c6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b2:	4798      	blx	r3
 800c6b4:	3601      	adds	r6, #1
 800c6b6:	e7f2      	b.n	800c69e <__libc_init_array+0x1e>
 800c6b8:	0800de4c 	.word	0x0800de4c
 800c6bc:	0800de4c 	.word	0x0800de4c
 800c6c0:	0800de4c 	.word	0x0800de4c
 800c6c4:	0800de50 	.word	0x0800de50

0800c6c8 <__retarget_lock_acquire_recursive>:
 800c6c8:	4770      	bx	lr

0800c6ca <__retarget_lock_release_recursive>:
 800c6ca:	4770      	bx	lr

0800c6cc <strcpy>:
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6d2:	f803 2b01 	strb.w	r2, [r3], #1
 800c6d6:	2a00      	cmp	r2, #0
 800c6d8:	d1f9      	bne.n	800c6ce <strcpy+0x2>
 800c6da:	4770      	bx	lr

0800c6dc <_free_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4605      	mov	r5, r0
 800c6e0:	2900      	cmp	r1, #0
 800c6e2:	d040      	beq.n	800c766 <_free_r+0x8a>
 800c6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e8:	1f0c      	subs	r4, r1, #4
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bfb8      	it	lt
 800c6ee:	18e4      	addlt	r4, r4, r3
 800c6f0:	f7ff ff2a 	bl	800c548 <__malloc_lock>
 800c6f4:	4a1c      	ldr	r2, [pc, #112]	; (800c768 <_free_r+0x8c>)
 800c6f6:	6813      	ldr	r3, [r2, #0]
 800c6f8:	b933      	cbnz	r3, 800c708 <_free_r+0x2c>
 800c6fa:	6063      	str	r3, [r4, #4]
 800c6fc:	6014      	str	r4, [r2, #0]
 800c6fe:	4628      	mov	r0, r5
 800c700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c704:	f7ff bf26 	b.w	800c554 <__malloc_unlock>
 800c708:	42a3      	cmp	r3, r4
 800c70a:	d908      	bls.n	800c71e <_free_r+0x42>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	1821      	adds	r1, r4, r0
 800c710:	428b      	cmp	r3, r1
 800c712:	bf01      	itttt	eq
 800c714:	6819      	ldreq	r1, [r3, #0]
 800c716:	685b      	ldreq	r3, [r3, #4]
 800c718:	1809      	addeq	r1, r1, r0
 800c71a:	6021      	streq	r1, [r4, #0]
 800c71c:	e7ed      	b.n	800c6fa <_free_r+0x1e>
 800c71e:	461a      	mov	r2, r3
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	b10b      	cbz	r3, 800c728 <_free_r+0x4c>
 800c724:	42a3      	cmp	r3, r4
 800c726:	d9fa      	bls.n	800c71e <_free_r+0x42>
 800c728:	6811      	ldr	r1, [r2, #0]
 800c72a:	1850      	adds	r0, r2, r1
 800c72c:	42a0      	cmp	r0, r4
 800c72e:	d10b      	bne.n	800c748 <_free_r+0x6c>
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	4401      	add	r1, r0
 800c734:	1850      	adds	r0, r2, r1
 800c736:	4283      	cmp	r3, r0
 800c738:	6011      	str	r1, [r2, #0]
 800c73a:	d1e0      	bne.n	800c6fe <_free_r+0x22>
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	4408      	add	r0, r1
 800c742:	6010      	str	r0, [r2, #0]
 800c744:	6053      	str	r3, [r2, #4]
 800c746:	e7da      	b.n	800c6fe <_free_r+0x22>
 800c748:	d902      	bls.n	800c750 <_free_r+0x74>
 800c74a:	230c      	movs	r3, #12
 800c74c:	602b      	str	r3, [r5, #0]
 800c74e:	e7d6      	b.n	800c6fe <_free_r+0x22>
 800c750:	6820      	ldr	r0, [r4, #0]
 800c752:	1821      	adds	r1, r4, r0
 800c754:	428b      	cmp	r3, r1
 800c756:	bf01      	itttt	eq
 800c758:	6819      	ldreq	r1, [r3, #0]
 800c75a:	685b      	ldreq	r3, [r3, #4]
 800c75c:	1809      	addeq	r1, r1, r0
 800c75e:	6021      	streq	r1, [r4, #0]
 800c760:	6063      	str	r3, [r4, #4]
 800c762:	6054      	str	r4, [r2, #4]
 800c764:	e7cb      	b.n	800c6fe <_free_r+0x22>
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	20000460 	.word	0x20000460

0800c76c <__ssputs_r>:
 800c76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c770:	461f      	mov	r7, r3
 800c772:	688e      	ldr	r6, [r1, #8]
 800c774:	4682      	mov	sl, r0
 800c776:	42be      	cmp	r6, r7
 800c778:	460c      	mov	r4, r1
 800c77a:	4690      	mov	r8, r2
 800c77c:	680b      	ldr	r3, [r1, #0]
 800c77e:	d82c      	bhi.n	800c7da <__ssputs_r+0x6e>
 800c780:	898a      	ldrh	r2, [r1, #12]
 800c782:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c786:	d026      	beq.n	800c7d6 <__ssputs_r+0x6a>
 800c788:	6965      	ldr	r5, [r4, #20]
 800c78a:	6909      	ldr	r1, [r1, #16]
 800c78c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c790:	eba3 0901 	sub.w	r9, r3, r1
 800c794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c798:	1c7b      	adds	r3, r7, #1
 800c79a:	444b      	add	r3, r9
 800c79c:	106d      	asrs	r5, r5, #1
 800c79e:	429d      	cmp	r5, r3
 800c7a0:	bf38      	it	cc
 800c7a2:	461d      	movcc	r5, r3
 800c7a4:	0553      	lsls	r3, r2, #21
 800c7a6:	d527      	bpl.n	800c7f8 <__ssputs_r+0x8c>
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	f7ff fe4d 	bl	800c448 <_malloc_r>
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	b360      	cbz	r0, 800c80c <__ssputs_r+0xa0>
 800c7b2:	464a      	mov	r2, r9
 800c7b4:	6921      	ldr	r1, [r4, #16]
 800c7b6:	f000 faed 	bl	800cd94 <memcpy>
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7c4:	81a3      	strh	r3, [r4, #12]
 800c7c6:	6126      	str	r6, [r4, #16]
 800c7c8:	444e      	add	r6, r9
 800c7ca:	6026      	str	r6, [r4, #0]
 800c7cc:	463e      	mov	r6, r7
 800c7ce:	6165      	str	r5, [r4, #20]
 800c7d0:	eba5 0509 	sub.w	r5, r5, r9
 800c7d4:	60a5      	str	r5, [r4, #8]
 800c7d6:	42be      	cmp	r6, r7
 800c7d8:	d900      	bls.n	800c7dc <__ssputs_r+0x70>
 800c7da:	463e      	mov	r6, r7
 800c7dc:	4632      	mov	r2, r6
 800c7de:	4641      	mov	r1, r8
 800c7e0:	6820      	ldr	r0, [r4, #0]
 800c7e2:	f000 faaf 	bl	800cd44 <memmove>
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	68a3      	ldr	r3, [r4, #8]
 800c7ea:	1b9b      	subs	r3, r3, r6
 800c7ec:	60a3      	str	r3, [r4, #8]
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	4433      	add	r3, r6
 800c7f2:	6023      	str	r3, [r4, #0]
 800c7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f8:	462a      	mov	r2, r5
 800c7fa:	f000 fad9 	bl	800cdb0 <_realloc_r>
 800c7fe:	4606      	mov	r6, r0
 800c800:	2800      	cmp	r0, #0
 800c802:	d1e0      	bne.n	800c7c6 <__ssputs_r+0x5a>
 800c804:	4650      	mov	r0, sl
 800c806:	6921      	ldr	r1, [r4, #16]
 800c808:	f7ff ff68 	bl	800c6dc <_free_r>
 800c80c:	230c      	movs	r3, #12
 800c80e:	f8ca 3000 	str.w	r3, [sl]
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	f04f 30ff 	mov.w	r0, #4294967295
 800c818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	e7e9      	b.n	800c7f4 <__ssputs_r+0x88>

0800c820 <_svfiprintf_r>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	4698      	mov	r8, r3
 800c826:	898b      	ldrh	r3, [r1, #12]
 800c828:	4607      	mov	r7, r0
 800c82a:	061b      	lsls	r3, r3, #24
 800c82c:	460d      	mov	r5, r1
 800c82e:	4614      	mov	r4, r2
 800c830:	b09d      	sub	sp, #116	; 0x74
 800c832:	d50e      	bpl.n	800c852 <_svfiprintf_r+0x32>
 800c834:	690b      	ldr	r3, [r1, #16]
 800c836:	b963      	cbnz	r3, 800c852 <_svfiprintf_r+0x32>
 800c838:	2140      	movs	r1, #64	; 0x40
 800c83a:	f7ff fe05 	bl	800c448 <_malloc_r>
 800c83e:	6028      	str	r0, [r5, #0]
 800c840:	6128      	str	r0, [r5, #16]
 800c842:	b920      	cbnz	r0, 800c84e <_svfiprintf_r+0x2e>
 800c844:	230c      	movs	r3, #12
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	e0d0      	b.n	800c9f0 <_svfiprintf_r+0x1d0>
 800c84e:	2340      	movs	r3, #64	; 0x40
 800c850:	616b      	str	r3, [r5, #20]
 800c852:	2300      	movs	r3, #0
 800c854:	9309      	str	r3, [sp, #36]	; 0x24
 800c856:	2320      	movs	r3, #32
 800c858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c85c:	2330      	movs	r3, #48	; 0x30
 800c85e:	f04f 0901 	mov.w	r9, #1
 800c862:	f8cd 800c 	str.w	r8, [sp, #12]
 800c866:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca08 <_svfiprintf_r+0x1e8>
 800c86a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c86e:	4623      	mov	r3, r4
 800c870:	469a      	mov	sl, r3
 800c872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c876:	b10a      	cbz	r2, 800c87c <_svfiprintf_r+0x5c>
 800c878:	2a25      	cmp	r2, #37	; 0x25
 800c87a:	d1f9      	bne.n	800c870 <_svfiprintf_r+0x50>
 800c87c:	ebba 0b04 	subs.w	fp, sl, r4
 800c880:	d00b      	beq.n	800c89a <_svfiprintf_r+0x7a>
 800c882:	465b      	mov	r3, fp
 800c884:	4622      	mov	r2, r4
 800c886:	4629      	mov	r1, r5
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff ff6f 	bl	800c76c <__ssputs_r>
 800c88e:	3001      	adds	r0, #1
 800c890:	f000 80a9 	beq.w	800c9e6 <_svfiprintf_r+0x1c6>
 800c894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c896:	445a      	add	r2, fp
 800c898:	9209      	str	r2, [sp, #36]	; 0x24
 800c89a:	f89a 3000 	ldrb.w	r3, [sl]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f000 80a1 	beq.w	800c9e6 <_svfiprintf_r+0x1c6>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8ae:	f10a 0a01 	add.w	sl, sl, #1
 800c8b2:	9304      	str	r3, [sp, #16]
 800c8b4:	9307      	str	r3, [sp, #28]
 800c8b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ba:	931a      	str	r3, [sp, #104]	; 0x68
 800c8bc:	4654      	mov	r4, sl
 800c8be:	2205      	movs	r2, #5
 800c8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c4:	4850      	ldr	r0, [pc, #320]	; (800ca08 <_svfiprintf_r+0x1e8>)
 800c8c6:	f000 fa57 	bl	800cd78 <memchr>
 800c8ca:	9a04      	ldr	r2, [sp, #16]
 800c8cc:	b9d8      	cbnz	r0, 800c906 <_svfiprintf_r+0xe6>
 800c8ce:	06d0      	lsls	r0, r2, #27
 800c8d0:	bf44      	itt	mi
 800c8d2:	2320      	movmi	r3, #32
 800c8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8d8:	0711      	lsls	r1, r2, #28
 800c8da:	bf44      	itt	mi
 800c8dc:	232b      	movmi	r3, #43	; 0x2b
 800c8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8e8:	d015      	beq.n	800c916 <_svfiprintf_r+0xf6>
 800c8ea:	4654      	mov	r4, sl
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	f04f 0c0a 	mov.w	ip, #10
 800c8f2:	9a07      	ldr	r2, [sp, #28]
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8fa:	3b30      	subs	r3, #48	; 0x30
 800c8fc:	2b09      	cmp	r3, #9
 800c8fe:	d94d      	bls.n	800c99c <_svfiprintf_r+0x17c>
 800c900:	b1b0      	cbz	r0, 800c930 <_svfiprintf_r+0x110>
 800c902:	9207      	str	r2, [sp, #28]
 800c904:	e014      	b.n	800c930 <_svfiprintf_r+0x110>
 800c906:	eba0 0308 	sub.w	r3, r0, r8
 800c90a:	fa09 f303 	lsl.w	r3, r9, r3
 800c90e:	4313      	orrs	r3, r2
 800c910:	46a2      	mov	sl, r4
 800c912:	9304      	str	r3, [sp, #16]
 800c914:	e7d2      	b.n	800c8bc <_svfiprintf_r+0x9c>
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	1d19      	adds	r1, r3, #4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	9103      	str	r1, [sp, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfbb      	ittet	lt
 800c922:	425b      	neglt	r3, r3
 800c924:	f042 0202 	orrlt.w	r2, r2, #2
 800c928:	9307      	strge	r3, [sp, #28]
 800c92a:	9307      	strlt	r3, [sp, #28]
 800c92c:	bfb8      	it	lt
 800c92e:	9204      	strlt	r2, [sp, #16]
 800c930:	7823      	ldrb	r3, [r4, #0]
 800c932:	2b2e      	cmp	r3, #46	; 0x2e
 800c934:	d10c      	bne.n	800c950 <_svfiprintf_r+0x130>
 800c936:	7863      	ldrb	r3, [r4, #1]
 800c938:	2b2a      	cmp	r3, #42	; 0x2a
 800c93a:	d134      	bne.n	800c9a6 <_svfiprintf_r+0x186>
 800c93c:	9b03      	ldr	r3, [sp, #12]
 800c93e:	3402      	adds	r4, #2
 800c940:	1d1a      	adds	r2, r3, #4
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	9203      	str	r2, [sp, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	bfb8      	it	lt
 800c94a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c94e:	9305      	str	r3, [sp, #20]
 800c950:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca0c <_svfiprintf_r+0x1ec>
 800c954:	2203      	movs	r2, #3
 800c956:	4650      	mov	r0, sl
 800c958:	7821      	ldrb	r1, [r4, #0]
 800c95a:	f000 fa0d 	bl	800cd78 <memchr>
 800c95e:	b138      	cbz	r0, 800c970 <_svfiprintf_r+0x150>
 800c960:	2240      	movs	r2, #64	; 0x40
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	eba0 000a 	sub.w	r0, r0, sl
 800c968:	4082      	lsls	r2, r0
 800c96a:	4313      	orrs	r3, r2
 800c96c:	3401      	adds	r4, #1
 800c96e:	9304      	str	r3, [sp, #16]
 800c970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c974:	2206      	movs	r2, #6
 800c976:	4826      	ldr	r0, [pc, #152]	; (800ca10 <_svfiprintf_r+0x1f0>)
 800c978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c97c:	f000 f9fc 	bl	800cd78 <memchr>
 800c980:	2800      	cmp	r0, #0
 800c982:	d038      	beq.n	800c9f6 <_svfiprintf_r+0x1d6>
 800c984:	4b23      	ldr	r3, [pc, #140]	; (800ca14 <_svfiprintf_r+0x1f4>)
 800c986:	bb1b      	cbnz	r3, 800c9d0 <_svfiprintf_r+0x1b0>
 800c988:	9b03      	ldr	r3, [sp, #12]
 800c98a:	3307      	adds	r3, #7
 800c98c:	f023 0307 	bic.w	r3, r3, #7
 800c990:	3308      	adds	r3, #8
 800c992:	9303      	str	r3, [sp, #12]
 800c994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c996:	4433      	add	r3, r6
 800c998:	9309      	str	r3, [sp, #36]	; 0x24
 800c99a:	e768      	b.n	800c86e <_svfiprintf_r+0x4e>
 800c99c:	460c      	mov	r4, r1
 800c99e:	2001      	movs	r0, #1
 800c9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9a4:	e7a6      	b.n	800c8f4 <_svfiprintf_r+0xd4>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f04f 0c0a 	mov.w	ip, #10
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	3401      	adds	r4, #1
 800c9b0:	9305      	str	r3, [sp, #20]
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9b8:	3a30      	subs	r2, #48	; 0x30
 800c9ba:	2a09      	cmp	r2, #9
 800c9bc:	d903      	bls.n	800c9c6 <_svfiprintf_r+0x1a6>
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0c6      	beq.n	800c950 <_svfiprintf_r+0x130>
 800c9c2:	9105      	str	r1, [sp, #20]
 800c9c4:	e7c4      	b.n	800c950 <_svfiprintf_r+0x130>
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9ce:	e7f0      	b.n	800c9b2 <_svfiprintf_r+0x192>
 800c9d0:	ab03      	add	r3, sp, #12
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	462a      	mov	r2, r5
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ca18 <_svfiprintf_r+0x1f8>)
 800c9da:	a904      	add	r1, sp, #16
 800c9dc:	f3af 8000 	nop.w
 800c9e0:	1c42      	adds	r2, r0, #1
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	d1d6      	bne.n	800c994 <_svfiprintf_r+0x174>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	065b      	lsls	r3, r3, #25
 800c9ea:	f53f af2d 	bmi.w	800c848 <_svfiprintf_r+0x28>
 800c9ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9f0:	b01d      	add	sp, #116	; 0x74
 800c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f6:	ab03      	add	r3, sp, #12
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	462a      	mov	r2, r5
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <_svfiprintf_r+0x1f8>)
 800ca00:	a904      	add	r1, sp, #16
 800ca02:	f000 f87d 	bl	800cb00 <_printf_i>
 800ca06:	e7eb      	b.n	800c9e0 <_svfiprintf_r+0x1c0>
 800ca08:	0800de17 	.word	0x0800de17
 800ca0c:	0800de1d 	.word	0x0800de1d
 800ca10:	0800de21 	.word	0x0800de21
 800ca14:	00000000 	.word	0x00000000
 800ca18:	0800c76d 	.word	0x0800c76d

0800ca1c <_printf_common>:
 800ca1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca20:	4616      	mov	r6, r2
 800ca22:	4699      	mov	r9, r3
 800ca24:	688a      	ldr	r2, [r1, #8]
 800ca26:	690b      	ldr	r3, [r1, #16]
 800ca28:	4607      	mov	r7, r0
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	bfb8      	it	lt
 800ca2e:	4613      	movlt	r3, r2
 800ca30:	6033      	str	r3, [r6, #0]
 800ca32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca36:	460c      	mov	r4, r1
 800ca38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca3c:	b10a      	cbz	r2, 800ca42 <_printf_common+0x26>
 800ca3e:	3301      	adds	r3, #1
 800ca40:	6033      	str	r3, [r6, #0]
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	0699      	lsls	r1, r3, #26
 800ca46:	bf42      	ittt	mi
 800ca48:	6833      	ldrmi	r3, [r6, #0]
 800ca4a:	3302      	addmi	r3, #2
 800ca4c:	6033      	strmi	r3, [r6, #0]
 800ca4e:	6825      	ldr	r5, [r4, #0]
 800ca50:	f015 0506 	ands.w	r5, r5, #6
 800ca54:	d106      	bne.n	800ca64 <_printf_common+0x48>
 800ca56:	f104 0a19 	add.w	sl, r4, #25
 800ca5a:	68e3      	ldr	r3, [r4, #12]
 800ca5c:	6832      	ldr	r2, [r6, #0]
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	42ab      	cmp	r3, r5
 800ca62:	dc2b      	bgt.n	800cabc <_printf_common+0xa0>
 800ca64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca68:	1e13      	subs	r3, r2, #0
 800ca6a:	6822      	ldr	r2, [r4, #0]
 800ca6c:	bf18      	it	ne
 800ca6e:	2301      	movne	r3, #1
 800ca70:	0692      	lsls	r2, r2, #26
 800ca72:	d430      	bmi.n	800cad6 <_printf_common+0xba>
 800ca74:	4649      	mov	r1, r9
 800ca76:	4638      	mov	r0, r7
 800ca78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca7c:	47c0      	blx	r8
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d023      	beq.n	800caca <_printf_common+0xae>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	6922      	ldr	r2, [r4, #16]
 800ca86:	f003 0306 	and.w	r3, r3, #6
 800ca8a:	2b04      	cmp	r3, #4
 800ca8c:	bf14      	ite	ne
 800ca8e:	2500      	movne	r5, #0
 800ca90:	6833      	ldreq	r3, [r6, #0]
 800ca92:	f04f 0600 	mov.w	r6, #0
 800ca96:	bf08      	it	eq
 800ca98:	68e5      	ldreq	r5, [r4, #12]
 800ca9a:	f104 041a 	add.w	r4, r4, #26
 800ca9e:	bf08      	it	eq
 800caa0:	1aed      	subeq	r5, r5, r3
 800caa2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800caa6:	bf08      	it	eq
 800caa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caac:	4293      	cmp	r3, r2
 800caae:	bfc4      	itt	gt
 800cab0:	1a9b      	subgt	r3, r3, r2
 800cab2:	18ed      	addgt	r5, r5, r3
 800cab4:	42b5      	cmp	r5, r6
 800cab6:	d11a      	bne.n	800caee <_printf_common+0xd2>
 800cab8:	2000      	movs	r0, #0
 800caba:	e008      	b.n	800cace <_printf_common+0xb2>
 800cabc:	2301      	movs	r3, #1
 800cabe:	4652      	mov	r2, sl
 800cac0:	4649      	mov	r1, r9
 800cac2:	4638      	mov	r0, r7
 800cac4:	47c0      	blx	r8
 800cac6:	3001      	adds	r0, #1
 800cac8:	d103      	bne.n	800cad2 <_printf_common+0xb6>
 800caca:	f04f 30ff 	mov.w	r0, #4294967295
 800cace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad2:	3501      	adds	r5, #1
 800cad4:	e7c1      	b.n	800ca5a <_printf_common+0x3e>
 800cad6:	2030      	movs	r0, #48	; 0x30
 800cad8:	18e1      	adds	r1, r4, r3
 800cada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cae4:	4422      	add	r2, r4
 800cae6:	3302      	adds	r3, #2
 800cae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800caec:	e7c2      	b.n	800ca74 <_printf_common+0x58>
 800caee:	2301      	movs	r3, #1
 800caf0:	4622      	mov	r2, r4
 800caf2:	4649      	mov	r1, r9
 800caf4:	4638      	mov	r0, r7
 800caf6:	47c0      	blx	r8
 800caf8:	3001      	adds	r0, #1
 800cafa:	d0e6      	beq.n	800caca <_printf_common+0xae>
 800cafc:	3601      	adds	r6, #1
 800cafe:	e7d9      	b.n	800cab4 <_printf_common+0x98>

0800cb00 <_printf_i>:
 800cb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb04:	7e0f      	ldrb	r7, [r1, #24]
 800cb06:	4691      	mov	r9, r2
 800cb08:	2f78      	cmp	r7, #120	; 0x78
 800cb0a:	4680      	mov	r8, r0
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	469a      	mov	sl, r3
 800cb10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb16:	d807      	bhi.n	800cb28 <_printf_i+0x28>
 800cb18:	2f62      	cmp	r7, #98	; 0x62
 800cb1a:	d80a      	bhi.n	800cb32 <_printf_i+0x32>
 800cb1c:	2f00      	cmp	r7, #0
 800cb1e:	f000 80d5 	beq.w	800cccc <_printf_i+0x1cc>
 800cb22:	2f58      	cmp	r7, #88	; 0x58
 800cb24:	f000 80c1 	beq.w	800ccaa <_printf_i+0x1aa>
 800cb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb30:	e03a      	b.n	800cba8 <_printf_i+0xa8>
 800cb32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb36:	2b15      	cmp	r3, #21
 800cb38:	d8f6      	bhi.n	800cb28 <_printf_i+0x28>
 800cb3a:	a101      	add	r1, pc, #4	; (adr r1, 800cb40 <_printf_i+0x40>)
 800cb3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb40:	0800cb99 	.word	0x0800cb99
 800cb44:	0800cbad 	.word	0x0800cbad
 800cb48:	0800cb29 	.word	0x0800cb29
 800cb4c:	0800cb29 	.word	0x0800cb29
 800cb50:	0800cb29 	.word	0x0800cb29
 800cb54:	0800cb29 	.word	0x0800cb29
 800cb58:	0800cbad 	.word	0x0800cbad
 800cb5c:	0800cb29 	.word	0x0800cb29
 800cb60:	0800cb29 	.word	0x0800cb29
 800cb64:	0800cb29 	.word	0x0800cb29
 800cb68:	0800cb29 	.word	0x0800cb29
 800cb6c:	0800ccb3 	.word	0x0800ccb3
 800cb70:	0800cbd9 	.word	0x0800cbd9
 800cb74:	0800cc6d 	.word	0x0800cc6d
 800cb78:	0800cb29 	.word	0x0800cb29
 800cb7c:	0800cb29 	.word	0x0800cb29
 800cb80:	0800ccd5 	.word	0x0800ccd5
 800cb84:	0800cb29 	.word	0x0800cb29
 800cb88:	0800cbd9 	.word	0x0800cbd9
 800cb8c:	0800cb29 	.word	0x0800cb29
 800cb90:	0800cb29 	.word	0x0800cb29
 800cb94:	0800cc75 	.word	0x0800cc75
 800cb98:	682b      	ldr	r3, [r5, #0]
 800cb9a:	1d1a      	adds	r2, r3, #4
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	602a      	str	r2, [r5, #0]
 800cba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e0a0      	b.n	800ccee <_printf_i+0x1ee>
 800cbac:	6820      	ldr	r0, [r4, #0]
 800cbae:	682b      	ldr	r3, [r5, #0]
 800cbb0:	0607      	lsls	r7, r0, #24
 800cbb2:	f103 0104 	add.w	r1, r3, #4
 800cbb6:	6029      	str	r1, [r5, #0]
 800cbb8:	d501      	bpl.n	800cbbe <_printf_i+0xbe>
 800cbba:	681e      	ldr	r6, [r3, #0]
 800cbbc:	e003      	b.n	800cbc6 <_printf_i+0xc6>
 800cbbe:	0646      	lsls	r6, r0, #25
 800cbc0:	d5fb      	bpl.n	800cbba <_printf_i+0xba>
 800cbc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cbc6:	2e00      	cmp	r6, #0
 800cbc8:	da03      	bge.n	800cbd2 <_printf_i+0xd2>
 800cbca:	232d      	movs	r3, #45	; 0x2d
 800cbcc:	4276      	negs	r6, r6
 800cbce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbd2:	230a      	movs	r3, #10
 800cbd4:	4859      	ldr	r0, [pc, #356]	; (800cd3c <_printf_i+0x23c>)
 800cbd6:	e012      	b.n	800cbfe <_printf_i+0xfe>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	6820      	ldr	r0, [r4, #0]
 800cbdc:	1d19      	adds	r1, r3, #4
 800cbde:	6029      	str	r1, [r5, #0]
 800cbe0:	0605      	lsls	r5, r0, #24
 800cbe2:	d501      	bpl.n	800cbe8 <_printf_i+0xe8>
 800cbe4:	681e      	ldr	r6, [r3, #0]
 800cbe6:	e002      	b.n	800cbee <_printf_i+0xee>
 800cbe8:	0641      	lsls	r1, r0, #25
 800cbea:	d5fb      	bpl.n	800cbe4 <_printf_i+0xe4>
 800cbec:	881e      	ldrh	r6, [r3, #0]
 800cbee:	2f6f      	cmp	r7, #111	; 0x6f
 800cbf0:	bf0c      	ite	eq
 800cbf2:	2308      	moveq	r3, #8
 800cbf4:	230a      	movne	r3, #10
 800cbf6:	4851      	ldr	r0, [pc, #324]	; (800cd3c <_printf_i+0x23c>)
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbfe:	6865      	ldr	r5, [r4, #4]
 800cc00:	2d00      	cmp	r5, #0
 800cc02:	bfa8      	it	ge
 800cc04:	6821      	ldrge	r1, [r4, #0]
 800cc06:	60a5      	str	r5, [r4, #8]
 800cc08:	bfa4      	itt	ge
 800cc0a:	f021 0104 	bicge.w	r1, r1, #4
 800cc0e:	6021      	strge	r1, [r4, #0]
 800cc10:	b90e      	cbnz	r6, 800cc16 <_printf_i+0x116>
 800cc12:	2d00      	cmp	r5, #0
 800cc14:	d04b      	beq.n	800ccae <_printf_i+0x1ae>
 800cc16:	4615      	mov	r5, r2
 800cc18:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc1c:	fb03 6711 	mls	r7, r3, r1, r6
 800cc20:	5dc7      	ldrb	r7, [r0, r7]
 800cc22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc26:	4637      	mov	r7, r6
 800cc28:	42bb      	cmp	r3, r7
 800cc2a:	460e      	mov	r6, r1
 800cc2c:	d9f4      	bls.n	800cc18 <_printf_i+0x118>
 800cc2e:	2b08      	cmp	r3, #8
 800cc30:	d10b      	bne.n	800cc4a <_printf_i+0x14a>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	07de      	lsls	r6, r3, #31
 800cc36:	d508      	bpl.n	800cc4a <_printf_i+0x14a>
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	6861      	ldr	r1, [r4, #4]
 800cc3c:	4299      	cmp	r1, r3
 800cc3e:	bfde      	ittt	le
 800cc40:	2330      	movle	r3, #48	; 0x30
 800cc42:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc46:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc4a:	1b52      	subs	r2, r2, r5
 800cc4c:	6122      	str	r2, [r4, #16]
 800cc4e:	464b      	mov	r3, r9
 800cc50:	4621      	mov	r1, r4
 800cc52:	4640      	mov	r0, r8
 800cc54:	f8cd a000 	str.w	sl, [sp]
 800cc58:	aa03      	add	r2, sp, #12
 800cc5a:	f7ff fedf 	bl	800ca1c <_printf_common>
 800cc5e:	3001      	adds	r0, #1
 800cc60:	d14a      	bne.n	800ccf8 <_printf_i+0x1f8>
 800cc62:	f04f 30ff 	mov.w	r0, #4294967295
 800cc66:	b004      	add	sp, #16
 800cc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	f043 0320 	orr.w	r3, r3, #32
 800cc72:	6023      	str	r3, [r4, #0]
 800cc74:	2778      	movs	r7, #120	; 0x78
 800cc76:	4832      	ldr	r0, [pc, #200]	; (800cd40 <_printf_i+0x240>)
 800cc78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	6829      	ldr	r1, [r5, #0]
 800cc80:	061f      	lsls	r7, r3, #24
 800cc82:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc86:	d402      	bmi.n	800cc8e <_printf_i+0x18e>
 800cc88:	065f      	lsls	r7, r3, #25
 800cc8a:	bf48      	it	mi
 800cc8c:	b2b6      	uxthmi	r6, r6
 800cc8e:	07df      	lsls	r7, r3, #31
 800cc90:	bf48      	it	mi
 800cc92:	f043 0320 	orrmi.w	r3, r3, #32
 800cc96:	6029      	str	r1, [r5, #0]
 800cc98:	bf48      	it	mi
 800cc9a:	6023      	strmi	r3, [r4, #0]
 800cc9c:	b91e      	cbnz	r6, 800cca6 <_printf_i+0x1a6>
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	f023 0320 	bic.w	r3, r3, #32
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	2310      	movs	r3, #16
 800cca8:	e7a6      	b.n	800cbf8 <_printf_i+0xf8>
 800ccaa:	4824      	ldr	r0, [pc, #144]	; (800cd3c <_printf_i+0x23c>)
 800ccac:	e7e4      	b.n	800cc78 <_printf_i+0x178>
 800ccae:	4615      	mov	r5, r2
 800ccb0:	e7bd      	b.n	800cc2e <_printf_i+0x12e>
 800ccb2:	682b      	ldr	r3, [r5, #0]
 800ccb4:	6826      	ldr	r6, [r4, #0]
 800ccb6:	1d18      	adds	r0, r3, #4
 800ccb8:	6961      	ldr	r1, [r4, #20]
 800ccba:	6028      	str	r0, [r5, #0]
 800ccbc:	0635      	lsls	r5, r6, #24
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	d501      	bpl.n	800ccc6 <_printf_i+0x1c6>
 800ccc2:	6019      	str	r1, [r3, #0]
 800ccc4:	e002      	b.n	800cccc <_printf_i+0x1cc>
 800ccc6:	0670      	lsls	r0, r6, #25
 800ccc8:	d5fb      	bpl.n	800ccc2 <_printf_i+0x1c2>
 800ccca:	8019      	strh	r1, [r3, #0]
 800cccc:	2300      	movs	r3, #0
 800ccce:	4615      	mov	r5, r2
 800ccd0:	6123      	str	r3, [r4, #16]
 800ccd2:	e7bc      	b.n	800cc4e <_printf_i+0x14e>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	1d1a      	adds	r2, r3, #4
 800ccda:	602a      	str	r2, [r5, #0]
 800ccdc:	681d      	ldr	r5, [r3, #0]
 800ccde:	6862      	ldr	r2, [r4, #4]
 800cce0:	4628      	mov	r0, r5
 800cce2:	f000 f849 	bl	800cd78 <memchr>
 800cce6:	b108      	cbz	r0, 800ccec <_printf_i+0x1ec>
 800cce8:	1b40      	subs	r0, r0, r5
 800ccea:	6060      	str	r0, [r4, #4]
 800ccec:	6863      	ldr	r3, [r4, #4]
 800ccee:	6123      	str	r3, [r4, #16]
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf6:	e7aa      	b.n	800cc4e <_printf_i+0x14e>
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	6923      	ldr	r3, [r4, #16]
 800cd00:	47d0      	blx	sl
 800cd02:	3001      	adds	r0, #1
 800cd04:	d0ad      	beq.n	800cc62 <_printf_i+0x162>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	079b      	lsls	r3, r3, #30
 800cd0a:	d413      	bmi.n	800cd34 <_printf_i+0x234>
 800cd0c:	68e0      	ldr	r0, [r4, #12]
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	4298      	cmp	r0, r3
 800cd12:	bfb8      	it	lt
 800cd14:	4618      	movlt	r0, r3
 800cd16:	e7a6      	b.n	800cc66 <_printf_i+0x166>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	4632      	mov	r2, r6
 800cd1c:	4649      	mov	r1, r9
 800cd1e:	4640      	mov	r0, r8
 800cd20:	47d0      	blx	sl
 800cd22:	3001      	adds	r0, #1
 800cd24:	d09d      	beq.n	800cc62 <_printf_i+0x162>
 800cd26:	3501      	adds	r5, #1
 800cd28:	68e3      	ldr	r3, [r4, #12]
 800cd2a:	9903      	ldr	r1, [sp, #12]
 800cd2c:	1a5b      	subs	r3, r3, r1
 800cd2e:	42ab      	cmp	r3, r5
 800cd30:	dcf2      	bgt.n	800cd18 <_printf_i+0x218>
 800cd32:	e7eb      	b.n	800cd0c <_printf_i+0x20c>
 800cd34:	2500      	movs	r5, #0
 800cd36:	f104 0619 	add.w	r6, r4, #25
 800cd3a:	e7f5      	b.n	800cd28 <_printf_i+0x228>
 800cd3c:	0800de28 	.word	0x0800de28
 800cd40:	0800de39 	.word	0x0800de39

0800cd44 <memmove>:
 800cd44:	4288      	cmp	r0, r1
 800cd46:	b510      	push	{r4, lr}
 800cd48:	eb01 0402 	add.w	r4, r1, r2
 800cd4c:	d902      	bls.n	800cd54 <memmove+0x10>
 800cd4e:	4284      	cmp	r4, r0
 800cd50:	4623      	mov	r3, r4
 800cd52:	d807      	bhi.n	800cd64 <memmove+0x20>
 800cd54:	1e43      	subs	r3, r0, #1
 800cd56:	42a1      	cmp	r1, r4
 800cd58:	d008      	beq.n	800cd6c <memmove+0x28>
 800cd5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd62:	e7f8      	b.n	800cd56 <memmove+0x12>
 800cd64:	4601      	mov	r1, r0
 800cd66:	4402      	add	r2, r0
 800cd68:	428a      	cmp	r2, r1
 800cd6a:	d100      	bne.n	800cd6e <memmove+0x2a>
 800cd6c:	bd10      	pop	{r4, pc}
 800cd6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd76:	e7f7      	b.n	800cd68 <memmove+0x24>

0800cd78 <memchr>:
 800cd78:	4603      	mov	r3, r0
 800cd7a:	b510      	push	{r4, lr}
 800cd7c:	b2c9      	uxtb	r1, r1
 800cd7e:	4402      	add	r2, r0
 800cd80:	4293      	cmp	r3, r2
 800cd82:	4618      	mov	r0, r3
 800cd84:	d101      	bne.n	800cd8a <memchr+0x12>
 800cd86:	2000      	movs	r0, #0
 800cd88:	e003      	b.n	800cd92 <memchr+0x1a>
 800cd8a:	7804      	ldrb	r4, [r0, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	428c      	cmp	r4, r1
 800cd90:	d1f6      	bne.n	800cd80 <memchr+0x8>
 800cd92:	bd10      	pop	{r4, pc}

0800cd94 <memcpy>:
 800cd94:	440a      	add	r2, r1
 800cd96:	4291      	cmp	r1, r2
 800cd98:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd9c:	d100      	bne.n	800cda0 <memcpy+0xc>
 800cd9e:	4770      	bx	lr
 800cda0:	b510      	push	{r4, lr}
 800cda2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cda6:	4291      	cmp	r1, r2
 800cda8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdac:	d1f9      	bne.n	800cda2 <memcpy+0xe>
 800cdae:	bd10      	pop	{r4, pc}

0800cdb0 <_realloc_r>:
 800cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	4614      	mov	r4, r2
 800cdb8:	460e      	mov	r6, r1
 800cdba:	b921      	cbnz	r1, 800cdc6 <_realloc_r+0x16>
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	f7ff bb41 	b.w	800c448 <_malloc_r>
 800cdc6:	b92a      	cbnz	r2, 800cdd4 <_realloc_r+0x24>
 800cdc8:	f7ff fc88 	bl	800c6dc <_free_r>
 800cdcc:	4625      	mov	r5, r4
 800cdce:	4628      	mov	r0, r5
 800cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd4:	f000 f81b 	bl	800ce0e <_malloc_usable_size_r>
 800cdd8:	4284      	cmp	r4, r0
 800cdda:	4607      	mov	r7, r0
 800cddc:	d802      	bhi.n	800cde4 <_realloc_r+0x34>
 800cdde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cde2:	d812      	bhi.n	800ce0a <_realloc_r+0x5a>
 800cde4:	4621      	mov	r1, r4
 800cde6:	4640      	mov	r0, r8
 800cde8:	f7ff fb2e 	bl	800c448 <_malloc_r>
 800cdec:	4605      	mov	r5, r0
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d0ed      	beq.n	800cdce <_realloc_r+0x1e>
 800cdf2:	42bc      	cmp	r4, r7
 800cdf4:	4622      	mov	r2, r4
 800cdf6:	4631      	mov	r1, r6
 800cdf8:	bf28      	it	cs
 800cdfa:	463a      	movcs	r2, r7
 800cdfc:	f7ff ffca 	bl	800cd94 <memcpy>
 800ce00:	4631      	mov	r1, r6
 800ce02:	4640      	mov	r0, r8
 800ce04:	f7ff fc6a 	bl	800c6dc <_free_r>
 800ce08:	e7e1      	b.n	800cdce <_realloc_r+0x1e>
 800ce0a:	4635      	mov	r5, r6
 800ce0c:	e7df      	b.n	800cdce <_realloc_r+0x1e>

0800ce0e <_malloc_usable_size_r>:
 800ce0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce12:	1f18      	subs	r0, r3, #4
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	bfbc      	itt	lt
 800ce18:	580b      	ldrlt	r3, [r1, r0]
 800ce1a:	18c0      	addlt	r0, r0, r3
 800ce1c:	4770      	bx	lr
	...

0800ce20 <_init>:
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	bf00      	nop
 800ce24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce26:	bc08      	pop	{r3}
 800ce28:	469e      	mov	lr, r3
 800ce2a:	4770      	bx	lr

0800ce2c <_fini>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	bf00      	nop
 800ce30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce32:	bc08      	pop	{r3}
 800ce34:	469e      	mov	lr, r3
 800ce36:	4770      	bx	lr
