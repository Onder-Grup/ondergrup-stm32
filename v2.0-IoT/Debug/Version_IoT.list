
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc18  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  0800cdfc  0800cdfc  0001cdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddf0  0800ddf0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ddf0  0800ddf0  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ddf0  0800ddf0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddf0  0800ddf0  0001ddf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddf4  0800ddf4  0001ddf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800ddf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800def4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800def4  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016908  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000351d  00000000  00000000  00036a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5d  00000000  00000000  0003b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003c075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c307  00000000  00000000  0005871a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee4c  00000000  00000000  00074a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005220  00000000  00000000  00113870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cde4 	.word	0x0800cde4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800cde4 	.word	0x0800cde4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc3a 	bl	8009ac8 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fab2 	bl	80087c0 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <eepromKontrol+0x4fc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b69      	ldr	r3, [pc, #420]	; (8000730 <eepromKontrol+0x4fc>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b69      	ldr	r3, [pc, #420]	; (8000734 <eepromKontrol+0x500>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b67      	ldr	r3, [pc, #412]	; (8000734 <eepromKontrol+0x500>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b66      	ldr	r3, [pc, #408]	; (8000738 <eepromKontrol+0x504>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b64      	ldr	r3, [pc, #400]	; (8000738 <eepromKontrol+0x504>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <eepromKontrol+0x508>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <eepromKontrol+0x508>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b61      	ldr	r3, [pc, #388]	; (8000740 <eepromKontrol+0x50c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b5f      	ldr	r3, [pc, #380]	; (8000740 <eepromKontrol+0x50c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <eepromKontrol+0x510>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <eepromKontrol+0x510>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <eepromKontrol+0x514>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5a      	ldr	r3, [pc, #360]	; (8000748 <eepromKontrol+0x514>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <eepromKontrol+0x518>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <eepromKontrol+0x518>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <eepromKontrol+0x51c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <eepromKontrol+0x51c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <eepromKontrol+0x520>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b53      	ldr	r3, [pc, #332]	; (8000754 <eepromKontrol+0x520>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b52      	ldr	r3, [pc, #328]	; (8000758 <eepromKontrol+0x524>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b50      	ldr	r3, [pc, #320]	; (8000758 <eepromKontrol+0x524>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <eepromKontrol+0x528>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <eepromKontrol+0x528>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <eepromKontrol+0x52c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <eepromKontrol+0x52c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <eepromKontrol+0x530>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b49      	ldr	r3, [pc, #292]	; (8000764 <eepromKontrol+0x530>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b48      	ldr	r3, [pc, #288]	; (8000768 <eepromKontrol+0x534>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b46      	ldr	r3, [pc, #280]	; (8000768 <eepromKontrol+0x534>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <eepromKontrol+0x538>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <eepromKontrol+0x538>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <eepromKontrol+0x53c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <eepromKontrol+0x53c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <eepromKontrol+0x540>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <eepromKontrol+0x540>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <eepromKontrol+0x544>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <eepromKontrol+0x544>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <eepromKontrol+0x548>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <eepromKontrol+0x548>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <eepromKontrol+0x54c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <eepromKontrol+0x54c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <eepromKontrol+0x550>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <eepromKontrol+0x550>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineIDInt, &eepromData[idStartPos], machineIDCharacterLimit); //destination, source, size
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <eepromKontrol+0x554>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a34      	ldr	r2, [pc, #208]	; (800078c <eepromKontrol+0x558>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <eepromKontrol+0x55c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	convertArrays(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f86a 	bl	80007a4 <convertArrays>
	HAL_Delay(250);
 80006d0:	20fa      	movs	r0, #250	; 0xfa
 80006d2:	f008 f875 	bl	80087c0 <HAL_Delay>
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit); //destination, source, size
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <eepromKontrol+0x560>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a2c      	ldr	r2, [pc, #176]	; (800078c <eepromKontrol+0x558>)
 80006dc:	441a      	add	r2, r3
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <eepromKontrol+0x564>)
 80006e0:	6811      	ldr	r1, [r2, #0]
 80006e2:	6855      	ldr	r5, [r2, #4]
 80006e4:	6894      	ldr	r4, [r2, #8]
 80006e6:	68d0      	ldr	r0, [r2, #12]
 80006e8:	6019      	str	r1, [r3, #0]
 80006ea:	605d      	str	r5, [r3, #4]
 80006ec:	609c      	str	r4, [r3, #8]
 80006ee:	60d8      	str	r0, [r3, #12]
 80006f0:	6911      	ldr	r1, [r2, #16]
 80006f2:	6119      	str	r1, [r3, #16]
	convertArrays(2);
 80006f4:	2002      	movs	r0, #2
 80006f6:	f000 f855 	bl	80007a4 <convertArrays>
	HAL_Delay(250);
 80006fa:	20fa      	movs	r0, #250	; 0xfa
 80006fc:	f008 f860 	bl	80087c0 <HAL_Delay>
	memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit); //destination, source, size
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <eepromKontrol+0x568>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <eepromKontrol+0x558>)
 8000706:	441a      	add	r2, r3
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <eepromKontrol+0x56c>)
 800070a:	6811      	ldr	r1, [r2, #0]
 800070c:	6855      	ldr	r5, [r2, #4]
 800070e:	6894      	ldr	r4, [r2, #8]
 8000710:	68d0      	ldr	r0, [r2, #12]
 8000712:	6019      	str	r1, [r3, #0]
 8000714:	605d      	str	r5, [r3, #4]
 8000716:	609c      	str	r4, [r3, #8]
 8000718:	60d8      	str	r0, [r3, #12]
 800071a:	6911      	ldr	r1, [r2, #16]
 800071c:	6119      	str	r1, [r3, #16]
	convertArrays(3);
 800071e:	2003      	movs	r0, #3
 8000720:	f000 f840 	bl	80007a4 <convertArrays>
	HAL_Delay(250);
 8000724:	20fa      	movs	r0, #250	; 0xfa
 8000726:	f008 f84b 	bl	80087c0 <HAL_Delay>
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bdb0      	pop	{r4, r5, r7, pc}
 8000730:	20000239 	.word	0x20000239
 8000734:	2000022a 	.word	0x2000022a
 8000738:	2000023a 	.word	0x2000023a
 800073c:	2000022b 	.word	0x2000022b
 8000740:	2000022d 	.word	0x2000022d
 8000744:	2000023b 	.word	0x2000023b
 8000748:	2000022e 	.word	0x2000022e
 800074c:	2000022f 	.word	0x2000022f
 8000750:	20000230 	.word	0x20000230
 8000754:	20000231 	.word	0x20000231
 8000758:	20000232 	.word	0x20000232
 800075c:	20000233 	.word	0x20000233
 8000760:	20000234 	.word	0x20000234
 8000764:	20000235 	.word	0x20000235
 8000768:	20000236 	.word	0x20000236
 800076c:	20000237 	.word	0x20000237
 8000770:	20000238 	.word	0x20000238
 8000774:	2000023c 	.word	0x2000023c
 8000778:	2000023e 	.word	0x2000023e
 800077c:	20000240 	.word	0x20000240
 8000780:	20000241 	.word	0x20000241
 8000784:	2000023f 	.word	0x2000023f
 8000788:	20000004 	.word	0x20000004
 800078c:	20000118 	.word	0x20000118
 8000790:	200001c4 	.word	0x200001c4
 8000794:	20000008 	.word	0x20000008
 8000798:	200001d0 	.word	0x200001d0
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200001e4 	.word	0x200001e4

080007a4 <convertArrays>:

void convertArrays(int state) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d122      	bne.n	80007f8 <convertArrays+0x54>
		memset(machineID, 0, machineID[0]);
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <convertArrays+0xec>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	4835      	ldr	r0, [pc, #212]	; (8000890 <convertArrays+0xec>)
 80007bc:	f00b ff23 	bl	800c606 <memset>
		int eepromVal = idStartPos;
 80007c0:	4b34      	ldr	r3, [pc, #208]	; (8000894 <convertArrays+0xf0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<12; i++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	e011      	b.n	80007f0 <convertArrays+0x4c>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 80007cc:	4a32      	ldr	r2, [pc, #200]	; (8000898 <convertArrays+0xf4>)
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <convertArrays+0xf8>)
 80007d8:	5c99      	ldrb	r1, [r3, r2]
 80007da:	4a2d      	ldr	r2, [pc, #180]	; (8000890 <convertArrays+0xec>)
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	4413      	add	r3, r2
 80007e0:	460a      	mov	r2, r1
 80007e2:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	3301      	adds	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<12; i++) {
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3301      	adds	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	2b0b      	cmp	r3, #11
 80007f4:	ddea      	ble.n	80007cc <convertArrays+0x28>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];

			eepromVal++;
		}
	}
}
 80007f6:	e047      	b.n	8000888 <convertArrays+0xe4>
	} else if(state == 2) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d122      	bne.n	8000844 <convertArrays+0xa0>
		memset(wifiSSID, 0, wifiSSID[0]);
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <convertArrays+0xfc>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	4826      	ldr	r0, [pc, #152]	; (80008a0 <convertArrays+0xfc>)
 8000808:	f00b fefd 	bl	800c606 <memset>
		int eepromVal = ssidStartPos;
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <convertArrays+0x100>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	e011      	b.n	800083c <convertArrays+0x98>
			wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000818:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <convertArrays+0xf4>)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <convertArrays+0x104>)
 8000824:	5c99      	ldrb	r1, [r3, r2]
 8000826:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <convertArrays+0xfc>)
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	4413      	add	r3, r2
 800082c:	460a      	mov	r2, r1
 800082e:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3301      	adds	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3301      	adds	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	2b13      	cmp	r3, #19
 8000840:	ddea      	ble.n	8000818 <convertArrays+0x74>
}
 8000842:	e021      	b.n	8000888 <convertArrays+0xe4>
		memset(wifiPass, 0, wifiPass[0]);
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <convertArrays+0x108>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	4817      	ldr	r0, [pc, #92]	; (80008ac <convertArrays+0x108>)
 800084e:	f00b feda 	bl	800c606 <memset>
		int eepromVal = passStartPos;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <convertArrays+0x10c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	e011      	b.n	8000882 <convertArrays+0xde>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <convertArrays+0xf4>)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <convertArrays+0x104>)
 800086a:	5c99      	ldrb	r1, [r3, r2]
 800086c:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <convertArrays+0x108>)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	460a      	mov	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	3301      	adds	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	2b13      	cmp	r3, #19
 8000886:	ddea      	ble.n	800085e <convertArrays+0xba>
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000190 	.word	0x20000190
 8000894:	20000004 	.word	0x20000004
 8000898:	20000118 	.word	0x20000118
 800089c:	20000010 	.word	0x20000010
 80008a0:	2000019c 	.word	0x2000019c
 80008a4:	20000008 	.word	0x20000008
 80008a8:	2000001c 	.word	0x2000001c
 80008ac:	200001b0 	.word	0x200001b0
 80008b0:	2000000c 	.word	0x2000000c

080008b4 <resetEEPROM4Wifi>:
	} else {
		//wifi pass convert
	}
}

void resetEEPROM4Wifi(int state) {
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d11e      	bne.n	8000900 <resetEEPROM4Wifi+0x4c>
		int eepromVal = idStartPos;
 80008c2:	4b32      	ldr	r3, [pc, #200]	; (800098c <resetEEPROM4Wifi+0xd8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	e014      	b.n	80008f8 <resetEEPROM4Wifi+0x44>
			machineID[i] = '\0';
 80008ce:	4a30      	ldr	r2, [pc, #192]	; (8000990 <resetEEPROM4Wifi+0xdc>)
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
			machineIDInt[i] = '\0';
 80008d8:	4a2e      	ldr	r2, [pc, #184]	; (8000994 <resetEEPROM4Wifi+0xe0>)
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	4413      	add	r3, r2
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <resetEEPROM4Wifi+0xe4>)
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	3301      	adds	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	3301      	adds	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	2b0b      	cmp	r3, #11
 80008fc:	dde7      	ble.n	80008ce <resetEEPROM4Wifi+0x1a>
			wifiPassInt[i] = '\0';
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 80008fe:	e03f      	b.n	8000980 <resetEEPROM4Wifi+0xcc>
	} else if(state == 2) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d11e      	bne.n	8000944 <resetEEPROM4Wifi+0x90>
		int eepromVal = ssidStartPos;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <resetEEPROM4Wifi+0xe8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	e014      	b.n	800093c <resetEEPROM4Wifi+0x88>
			wifiSSID[i] = '\0';
 8000912:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <resetEEPROM4Wifi+0xec>)
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4413      	add	r3, r2
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
			wifiSSIDInt[i] = '\0';
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <resetEEPROM4Wifi+0xf0>)
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	4413      	add	r3, r2
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <resetEEPROM4Wifi+0xe4>)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	4413      	add	r3, r2
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	3301      	adds	r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b13      	cmp	r3, #19
 8000940:	dde7      	ble.n	8000912 <resetEEPROM4Wifi+0x5e>
}
 8000942:	e01d      	b.n	8000980 <resetEEPROM4Wifi+0xcc>
		int eepromVal = passStartPos;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <resetEEPROM4Wifi+0xf4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	e014      	b.n	800097a <resetEEPROM4Wifi+0xc6>
			wifiPass[i] = '\0';
 8000950:	4a16      	ldr	r2, [pc, #88]	; (80009ac <resetEEPROM4Wifi+0xf8>)
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
			wifiPassInt[i] = '\0';
 800095a:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <resetEEPROM4Wifi+0xfc>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4413      	add	r3, r2
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <resetEEPROM4Wifi+0xe4>)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4413      	add	r3, r2
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3301      	adds	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b13      	cmp	r3, #19
 800097e:	dde7      	ble.n	8000950 <resetEEPROM4Wifi+0x9c>
}
 8000980:	bf00      	nop
 8000982:	3724      	adds	r7, #36	; 0x24
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000004 	.word	0x20000004
 8000990:	20000190 	.word	0x20000190
 8000994:	200001c4 	.word	0x200001c4
 8000998:	20000118 	.word	0x20000118
 800099c:	20000008 	.word	0x20000008
 80009a0:	2000019c 	.word	0x2000019c
 80009a4:	200001d0 	.word	0x200001d0
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	200001b0 	.word	0x200001b0
 80009b0:	200001e4 	.word	0x200001e4

080009b4 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b0c9      	sub	sp, #292	; 0x124
 80009b8:	af04      	add	r7, sp, #16
 80009ba:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80009be:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80009c2:	6020      	str	r0, [r4, #0]
 80009c4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80009c8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80009cc:	6001      	str	r1, [r0, #0]
 80009ce:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80009d2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80009d6:	600a      	str	r2, [r1, #0]
 80009d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009dc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009e0:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009e2:	4a36      	ldr	r2, [pc, #216]	; (8000abc <sendMachineData+0x108>)
 80009e4:	4936      	ldr	r1, [pc, #216]	; (8000ac0 <sendMachineData+0x10c>)
 80009e6:	4837      	ldr	r0, [pc, #220]	; (8000ac4 <sendMachineData+0x110>)
 80009e8:	f00b fd9c 	bl	800c524 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009ec:	4835      	ldr	r0, [pc, #212]	; (8000ac4 <sendMachineData+0x110>)
 80009ee:	f7ff fc19 	bl	8000224 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009fe:	4931      	ldr	r1, [pc, #196]	; (8000ac4 <sendMachineData+0x110>)
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	f00a ffa9 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a06:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a0a:	f007 fed9 	bl	80087c0 <HAL_Delay>

	sprintf(local_txA,
 8000a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a1a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000a1e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000a22:	4929      	ldr	r1, [pc, #164]	; (8000ac8 <sendMachineData+0x114>)
 8000a24:	9102      	str	r1, [sp, #8]
 8000a26:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000a2a:	9101      	str	r1, [sp, #4]
 8000a2c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a30:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a34:	6809      	ldr	r1, [r1, #0]
 8000a36:	9100      	str	r1, [sp, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	4923      	ldr	r1, [pc, #140]	; (8000acc <sendMachineData+0x118>)
 8000a3e:	f00b fd71 	bl	800c524 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fbec 	bl	8000224 <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a5a:	491d      	ldr	r1, [pc, #116]	; (8000ad0 <sendMachineData+0x11c>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f00b fd61 	bl	800c524 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fbdc 	bl	8000224 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f107 0110 	add.w	r1, r7, #16
 8000a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	f00a ff6b 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a82:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a86:	f007 fe9b 	bl	80087c0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fbc8 	bl	8000224 <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f00a ff57 	bl	800b958 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000aaa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aae:	f007 fe87 	bl	80087c0 <HAL_Delay>
}
 8000ab2:	bf00      	nop
 8000ab4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	0800ce4c 	.word	0x0800ce4c
 8000ac0:	0800ce5c 	.word	0x0800ce5c
 8000ac4:	20000284 	.word	0x20000284
 8000ac8:	0800cef0 	.word	0x0800cef0
 8000acc:	0800ce7c 	.word	0x0800ce7c
 8000ad0:	0800cf04 	.word	0x0800cf04

08000ad4 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000ade:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <hata2EEPROM+0xa4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <hata2EEPROM+0xa8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <hata2EEPROM+0xac>)
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000af2:	f000 f92b 	bl	8000d4c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000af6:	e000      	b.n	8000afa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000af8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	e012      	b.n	8000b26 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <hata2EEPROM+0xa8>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <hata2EEPROM+0xac>)
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d107      	bne.n	8000b20 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <hata2EEPROM+0xa8>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	4919      	ldr	r1, [pc, #100]	; (8000b80 <hata2EEPROM+0xac>)
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	54ca      	strb	r2, [r1, r3]
					break;
 8000b1e:	e007      	b.n	8000b30 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <hata2EEPROM+0xa4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbe7      	blt.n	8000b00 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <hata2EEPROM+0xa8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b299      	uxth	r1, r3
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <hata2EEPROM+0xa4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	b298      	uxth	r0, r3
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <hata2EEPROM+0xa8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <hata2EEPROM+0xac>)
 8000b42:	4413      	add	r3, r2
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <hata2EEPROM+0xa4>)
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b4e:	9402      	str	r4, [sp, #8]
 8000b50:	9201      	str	r2, [sp, #4]
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4603      	mov	r3, r0
 8000b56:	460a      	mov	r2, r1
 8000b58:	21a0      	movs	r1, #160	; 0xa0
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <hata2EEPROM+0xb0>)
 8000b5c:	f008 feba 	bl	80098d4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b64:	f007 fe2c 	bl	80087c0 <HAL_Delay>
	eepromKontrol(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff fb63 	bl	8000234 <eepromKontrol>
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000098 	.word	0x20000098
 8000b7c:	2000009c 	.word	0x2000009c
 8000b80:	20000118 	.word	0x20000118
 8000b84:	200003a8 	.word	0x200003a8

08000b88 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d11d      	bne.n	8000bd4 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b98:	4b62      	ldr	r3, [pc, #392]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d105      	bne.n	8000bac <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000ba0:	4a61      	ldr	r2, [pc, #388]	; (8000d28 <hataKoduLcdGoster+0x1a0>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f007 f8b5 	bl	8007d14 <lcd_print>
 8000baa:	e008      	b.n	8000bbe <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000bac:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d104      	bne.n	8000bbe <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000bb4:	4a5d      	ldr	r2, [pc, #372]	; (8000d2c <hataKoduLcdGoster+0x1a4>)
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f007 f8ab 	bl	8007d14 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000bbe:	4a5c      	ldr	r2, [pc, #368]	; (8000d30 <hataKoduLcdGoster+0x1a8>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f007 f8a6 	bl	8007d14 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bc8:	4a5a      	ldr	r2, [pc, #360]	; (8000d34 <hataKoduLcdGoster+0x1ac>)
 8000bca:	2107      	movs	r1, #7
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f007 f8a1 	bl	8007d14 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bd2:	e0a3      	b.n	8000d1c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d11d      	bne.n	8000c16 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000bda:	4b52      	ldr	r3, [pc, #328]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d105      	bne.n	8000bee <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000be2:	4a51      	ldr	r2, [pc, #324]	; (8000d28 <hataKoduLcdGoster+0x1a0>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f007 f894 	bl	8007d14 <lcd_print>
 8000bec:	e008      	b.n	8000c00 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000bee:	4b4d      	ldr	r3, [pc, #308]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d104      	bne.n	8000c00 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bf6:	4a4d      	ldr	r2, [pc, #308]	; (8000d2c <hataKoduLcdGoster+0x1a4>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f007 f88a 	bl	8007d14 <lcd_print>
		lcd_print(2, 2, "2");
 8000c00:	4a4d      	ldr	r2, [pc, #308]	; (8000d38 <hataKoduLcdGoster+0x1b0>)
 8000c02:	2102      	movs	r1, #2
 8000c04:	2002      	movs	r0, #2
 8000c06:	f007 f885 	bl	8007d14 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c0a:	4a4a      	ldr	r2, [pc, #296]	; (8000d34 <hataKoduLcdGoster+0x1ac>)
 8000c0c:	2107      	movs	r1, #7
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f007 f880 	bl	8007d14 <lcd_print>
}
 8000c14:	e082      	b.n	8000d1c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d11d      	bne.n	8000c58 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d105      	bne.n	8000c30 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c24:	4a40      	ldr	r2, [pc, #256]	; (8000d28 <hataKoduLcdGoster+0x1a0>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f007 f873 	bl	8007d14 <lcd_print>
 8000c2e:	e008      	b.n	8000c42 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c30:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d104      	bne.n	8000c42 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c38:	4a3c      	ldr	r2, [pc, #240]	; (8000d2c <hataKoduLcdGoster+0x1a4>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f007 f869 	bl	8007d14 <lcd_print>
		lcd_print(2, 3, "3");
 8000c42:	4a3e      	ldr	r2, [pc, #248]	; (8000d3c <hataKoduLcdGoster+0x1b4>)
 8000c44:	2103      	movs	r1, #3
 8000c46:	2002      	movs	r0, #2
 8000c48:	f007 f864 	bl	8007d14 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c4c:	4a39      	ldr	r2, [pc, #228]	; (8000d34 <hataKoduLcdGoster+0x1ac>)
 8000c4e:	2107      	movs	r1, #7
 8000c50:	2002      	movs	r0, #2
 8000c52:	f007 f85f 	bl	8007d14 <lcd_print>
}
 8000c56:	e061      	b.n	8000d1c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d11d      	bne.n	8000c9a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d105      	bne.n	8000c72 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c66:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <hataKoduLcdGoster+0x1a0>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f007 f852 	bl	8007d14 <lcd_print>
 8000c70:	e008      	b.n	8000c84 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d104      	bne.n	8000c84 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <hataKoduLcdGoster+0x1a4>)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f007 f848 	bl	8007d14 <lcd_print>
		lcd_print(2, 4, "4");
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <hataKoduLcdGoster+0x1b8>)
 8000c86:	2104      	movs	r1, #4
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f007 f843 	bl	8007d14 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c8e:	4a29      	ldr	r2, [pc, #164]	; (8000d34 <hataKoduLcdGoster+0x1ac>)
 8000c90:	2107      	movs	r1, #7
 8000c92:	2002      	movs	r0, #2
 8000c94:	f007 f83e 	bl	8007d14 <lcd_print>
}
 8000c98:	e040      	b.n	8000d1c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	d11d      	bne.n	8000cdc <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d105      	bne.n	8000cb4 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <hataKoduLcdGoster+0x1a0>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	2001      	movs	r0, #1
 8000cae:	f007 f831 	bl	8007d14 <lcd_print>
 8000cb2:	e008      	b.n	8000cc6 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d104      	bne.n	8000cc6 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <hataKoduLcdGoster+0x1a4>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f007 f827 	bl	8007d14 <lcd_print>
		lcd_print(2, 5, "5");
 8000cc6:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <hataKoduLcdGoster+0x1bc>)
 8000cc8:	2105      	movs	r1, #5
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f007 f822 	bl	8007d14 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cd0:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <hataKoduLcdGoster+0x1ac>)
 8000cd2:	2107      	movs	r1, #7
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f007 f81d 	bl	8007d14 <lcd_print>
}
 8000cda:	e01f      	b.n	8000d1c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d11c      	bne.n	8000d1c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <hataKoduLcdGoster+0x1a0>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f007 f810 	bl	8007d14 <lcd_print>
 8000cf4:	e008      	b.n	8000d08 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <hataKoduLcdGoster+0x19c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d104      	bne.n	8000d08 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <hataKoduLcdGoster+0x1a4>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	2001      	movs	r0, #1
 8000d04:	f007 f806 	bl	8007d14 <lcd_print>
		lcd_print(2, 6, "6");
 8000d08:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <hataKoduLcdGoster+0x1c0>)
 8000d0a:	2106      	movs	r1, #6
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f007 f801 	bl	8007d14 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <hataKoduLcdGoster+0x1ac>)
 8000d14:	2107      	movs	r1, #7
 8000d16:	2002      	movs	r0, #2
 8000d18:	f006 fffc 	bl	8007d14 <lcd_print>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000241 	.word	0x20000241
 8000d28:	0800cf90 	.word	0x0800cf90
 8000d2c:	0800cfa0 	.word	0x0800cfa0
 8000d30:	0800cfb0 	.word	0x0800cfb0
 8000d34:	0800cfb4 	.word	0x0800cfb4
 8000d38:	0800cfc0 	.word	0x0800cfc0
 8000d3c:	0800cfc4 	.word	0x0800cfc4
 8000d40:	0800cfc8 	.word	0x0800cfc8
 8000d44:	0800cfcc 	.word	0x0800cfcc
 8000d48:	0800cfd0 	.word	0x0800cfd0

08000d4c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e009      	b.n	8000d6c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <eepromDataFillWithEmpty+0x38>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <eepromDataFillWithEmpty+0x3c>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <eepromDataFillWithEmpty+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbf0      	blt.n	8000d58 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000070 	.word	0x20000070
 8000d88:	20000118 	.word	0x20000118
 8000d8c:	20000098 	.word	0x20000098

08000d90 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000da2:	4b50      	ldr	r3, [pc, #320]	; (8000ee4 <i2cTest+0x154>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b4e      	ldr	r3, [pc, #312]	; (8000ee4 <i2cTest+0x154>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0201 	bic.w	r2, r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000db2:	484c      	ldr	r0, [pc, #304]	; (8000ee4 <i2cTest+0x154>)
 8000db4:	f008 fc60 	bl	8009678 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db8:	23c0      	movs	r3, #192	; 0xc0
 8000dba:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000dbc:	2311      	movs	r3, #17
 8000dbe:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4846      	ldr	r0, [pc, #280]	; (8000ee8 <i2cTest+0x158>)
 8000dce:	f008 f867 	bl	8008ea0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2140      	movs	r1, #64	; 0x40
 8000dd6:	4844      	ldr	r0, [pc, #272]	; (8000ee8 <i2cTest+0x158>)
 8000dd8:	f008 fad9 	bl	800938e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	4841      	ldr	r0, [pc, #260]	; (8000ee8 <i2cTest+0x158>)
 8000de2:	f008 fad4 	bl	800938e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000de6:	200a      	movs	r0, #10
 8000de8:	f007 fcea 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000dec:	bf00      	nop
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	483d      	ldr	r0, [pc, #244]	; (8000ee8 <i2cTest+0x158>)
 8000df2:	f008 fab5 	bl	8009360 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d006      	beq.n	8000e0a <i2cTest+0x7a>
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	483a      	ldr	r0, [pc, #232]	; (8000ee8 <i2cTest+0x158>)
 8000e00:	f008 faae 	bl	8009360 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d1f1      	bne.n	8000dee <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	4836      	ldr	r0, [pc, #216]	; (8000ee8 <i2cTest+0x158>)
 8000e10:	f008 fabd 	bl	800938e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f007 fcd3 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e1a:	bf00      	nop
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <i2cTest+0x158>)
 8000e20:	f008 fa9e 	bl	8009360 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d0f8      	beq.n	8000e1c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	482e      	ldr	r0, [pc, #184]	; (8000ee8 <i2cTest+0x158>)
 8000e30:	f008 faad 	bl	800938e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f007 fcc3 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e3a:	bf00      	nop
 8000e3c:	2140      	movs	r1, #64	; 0x40
 8000e3e:	482a      	ldr	r0, [pc, #168]	; (8000ee8 <i2cTest+0x158>)
 8000e40:	f008 fa8e 	bl	8009360 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d0f8      	beq.n	8000e3c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	4826      	ldr	r0, [pc, #152]	; (8000ee8 <i2cTest+0x158>)
 8000e50:	f008 fa9d 	bl	800938e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e54:	200a      	movs	r0, #10
 8000e56:	f007 fcb3 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e5a:	bf00      	nop
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	4822      	ldr	r0, [pc, #136]	; (8000ee8 <i2cTest+0x158>)
 8000e60:	f008 fa7e 	bl	8009360 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d1f8      	bne.n	8000e5c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	481e      	ldr	r0, [pc, #120]	; (8000ee8 <i2cTest+0x158>)
 8000e70:	f008 fa8d 	bl	800938e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e74:	200a      	movs	r0, #10
 8000e76:	f007 fca3 	bl	80087c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e7a:	bf00      	nop
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	481a      	ldr	r0, [pc, #104]	; (8000ee8 <i2cTest+0x158>)
 8000e80:	f008 fa6e 	bl	8009360 <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d1f8      	bne.n	8000e7c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e8a:	23c0      	movs	r3, #192	; 0xc0
 8000e8c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <i2cTest+0x158>)
 8000ea0:	f007 fffe 	bl	8008ea0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <i2cTest+0x154>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <i2cTest+0x154>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eb2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <i2cTest+0x154>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <i2cTest+0x154>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ec2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <i2cTest+0x154>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <i2cTest+0x154>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <i2cTest+0x154>)
 8000ed6:	f008 fa8b 	bl	80093f0 <HAL_I2C_Init>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200003a8 	.word	0x200003a8
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000ef6:	20c8      	movs	r0, #200	; 0xc8
 8000ef8:	f007 fc62 	bl	80087c0 <HAL_Delay>
	lcd_clear();
 8000efc:	f006 ff36 	bl	8007d6c <lcd_clear>
	if(type == 1 && page == 0) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d143      	bne.n	8000f8e <printTemplate+0xa2>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d140      	bne.n	8000f8e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000f0c:	4a9d      	ldr	r2, [pc, #628]	; (8001184 <printTemplate+0x298>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2001      	movs	r0, #1
 8000f12:	f006 feff 	bl	8007d14 <lcd_print>
		lcd_print(2, 3, "0");
 8000f16:	4a9c      	ldr	r2, [pc, #624]	; (8001188 <printTemplate+0x29c>)
 8000f18:	2103      	movs	r1, #3
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f006 fefa 	bl	8007d14 <lcd_print>
		lcd_print(2, 4, "1");
 8000f20:	4a9a      	ldr	r2, [pc, #616]	; (800118c <printTemplate+0x2a0>)
 8000f22:	2104      	movs	r1, #4
 8000f24:	2002      	movs	r0, #2
 8000f26:	f006 fef5 	bl	8007d14 <lcd_print>
		lcd_print(2, 5, "2");
 8000f2a:	4a99      	ldr	r2, [pc, #612]	; (8001190 <printTemplate+0x2a4>)
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f006 fef0 	bl	8007d14 <lcd_print>
		lcd_print(2, 6, "3");
 8000f34:	4a97      	ldr	r2, [pc, #604]	; (8001194 <printTemplate+0x2a8>)
 8000f36:	2106      	movs	r1, #6
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f006 feeb 	bl	8007d14 <lcd_print>
		lcd_print(2, 7, "4");
 8000f3e:	4a96      	ldr	r2, [pc, #600]	; (8001198 <printTemplate+0x2ac>)
 8000f40:	2107      	movs	r1, #7
 8000f42:	2002      	movs	r0, #2
 8000f44:	f006 fee6 	bl	8007d14 <lcd_print>
		lcd_print(2, 10, "5");
 8000f48:	4a94      	ldr	r2, [pc, #592]	; (800119c <printTemplate+0x2b0>)
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f006 fee1 	bl	8007d14 <lcd_print>
		lcd_print(2, 11, "6");
 8000f52:	4a93      	ldr	r2, [pc, #588]	; (80011a0 <printTemplate+0x2b4>)
 8000f54:	210b      	movs	r1, #11
 8000f56:	2002      	movs	r0, #2
 8000f58:	f006 fedc 	bl	8007d14 <lcd_print>
		lcd_print(2, 12, "7");
 8000f5c:	4a91      	ldr	r2, [pc, #580]	; (80011a4 <printTemplate+0x2b8>)
 8000f5e:	210c      	movs	r1, #12
 8000f60:	2002      	movs	r0, #2
 8000f62:	f006 fed7 	bl	8007d14 <lcd_print>
		lcd_print(2, 13, "8");
 8000f66:	4a90      	ldr	r2, [pc, #576]	; (80011a8 <printTemplate+0x2bc>)
 8000f68:	210d      	movs	r1, #13
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f006 fed2 	bl	8007d14 <lcd_print>
		lcd_print(2, 14, "9");
 8000f70:	4a8e      	ldr	r2, [pc, #568]	; (80011ac <printTemplate+0x2c0>)
 8000f72:	210e      	movs	r1, #14
 8000f74:	2002      	movs	r0, #2
 8000f76:	f006 fecd 	bl	8007d14 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f7a:	4a8d      	ldr	r2, [pc, #564]	; (80011b0 <printTemplate+0x2c4>)
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f006 fec8 	bl	8007d14 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f84:	2103      	movs	r1, #3
 8000f86:	2002      	movs	r0, #2
 8000f88:	f006 fea5 	bl	8007cd6 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f8c:	e0f5      	b.n	800117a <printTemplate+0x28e>
	} else if(type == 2) {
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d178      	bne.n	8001086 <printTemplate+0x19a>
		if(page == 1) {
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d114      	bne.n	8000fc4 <printTemplate+0xd8>
			lcd_clear();
 8000f9a:	f006 fee7 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f007 fc0e 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fa4:	4a83      	ldr	r2, [pc, #524]	; (80011b4 <printTemplate+0x2c8>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f006 feb3 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fae:	4a82      	ldr	r2, [pc, #520]	; (80011b8 <printTemplate+0x2cc>)
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f006 feae 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fb8:	4a80      	ldr	r2, [pc, #512]	; (80011bc <printTemplate+0x2d0>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f006 fea9 	bl	8007d14 <lcd_print>
}
 8000fc2:	e0da      	b.n	800117a <printTemplate+0x28e>
		} else if(page == 2) {
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d114      	bne.n	8000ff4 <printTemplate+0x108>
			lcd_clear();
 8000fca:	f006 fecf 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f007 fbf6 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fd4:	4a77      	ldr	r2, [pc, #476]	; (80011b4 <printTemplate+0x2c8>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f006 fe9b 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fde:	4a76      	ldr	r2, [pc, #472]	; (80011b8 <printTemplate+0x2cc>)
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f006 fe96 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fe8:	4a75      	ldr	r2, [pc, #468]	; (80011c0 <printTemplate+0x2d4>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2002      	movs	r0, #2
 8000fee:	f006 fe91 	bl	8007d14 <lcd_print>
}
 8000ff2:	e0c2      	b.n	800117a <printTemplate+0x28e>
		} else if(page == 3) {
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d114      	bne.n	8001024 <printTemplate+0x138>
			lcd_clear();
 8000ffa:	f006 feb7 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f007 fbde 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001004:	4a6b      	ldr	r2, [pc, #428]	; (80011b4 <printTemplate+0x2c8>)
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f006 fe83 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800100e:	4a6a      	ldr	r2, [pc, #424]	; (80011b8 <printTemplate+0x2cc>)
 8001010:	2107      	movs	r1, #7
 8001012:	2001      	movs	r0, #1
 8001014:	f006 fe7e 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001018:	4a6a      	ldr	r2, [pc, #424]	; (80011c4 <printTemplate+0x2d8>)
 800101a:	2101      	movs	r1, #1
 800101c:	2002      	movs	r0, #2
 800101e:	f006 fe79 	bl	8007d14 <lcd_print>
}
 8001022:	e0aa      	b.n	800117a <printTemplate+0x28e>
		} else if(page == 4) {
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2b04      	cmp	r3, #4
 8001028:	d114      	bne.n	8001054 <printTemplate+0x168>
			lcd_clear();
 800102a:	f006 fe9f 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f007 fbc6 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001034:	4a5f      	ldr	r2, [pc, #380]	; (80011b4 <printTemplate+0x2c8>)
 8001036:	2101      	movs	r1, #1
 8001038:	2001      	movs	r0, #1
 800103a:	f006 fe6b 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800103e:	4a5e      	ldr	r2, [pc, #376]	; (80011b8 <printTemplate+0x2cc>)
 8001040:	2107      	movs	r1, #7
 8001042:	2001      	movs	r0, #1
 8001044:	f006 fe66 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001048:	4a5f      	ldr	r2, [pc, #380]	; (80011c8 <printTemplate+0x2dc>)
 800104a:	2101      	movs	r1, #1
 800104c:	2002      	movs	r0, #2
 800104e:	f006 fe61 	bl	8007d14 <lcd_print>
}
 8001052:	e092      	b.n	800117a <printTemplate+0x28e>
		} else if(page == 5) {
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b05      	cmp	r3, #5
 8001058:	f040 808f 	bne.w	800117a <printTemplate+0x28e>
			lcd_clear();
 800105c:	f006 fe86 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
 8001062:	f007 fbad 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001066:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <printTemplate+0x2c8>)
 8001068:	2101      	movs	r1, #1
 800106a:	2001      	movs	r0, #1
 800106c:	f006 fe52 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001070:	4a51      	ldr	r2, [pc, #324]	; (80011b8 <printTemplate+0x2cc>)
 8001072:	2107      	movs	r1, #7
 8001074:	2001      	movs	r0, #1
 8001076:	f006 fe4d 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800107a:	4a54      	ldr	r2, [pc, #336]	; (80011cc <printTemplate+0x2e0>)
 800107c:	2101      	movs	r1, #1
 800107e:	2002      	movs	r0, #2
 8001080:	f006 fe48 	bl	8007d14 <lcd_print>
}
 8001084:	e079      	b.n	800117a <printTemplate+0x28e>
	} else if(type == 3) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b03      	cmp	r3, #3
 800108a:	d176      	bne.n	800117a <printTemplate+0x28e>
		if(page == 1) {
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d114      	bne.n	80010bc <printTemplate+0x1d0>
			lcd_clear();
 8001092:	f006 fe6b 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f007 fb92 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <printTemplate+0x2e4>)
 800109e:	2101      	movs	r1, #1
 80010a0:	2001      	movs	r0, #1
 80010a2:	f006 fe37 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010a6:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <printTemplate+0x2e8>)
 80010a8:	2107      	movs	r1, #7
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fe32 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010b0:	4a42      	ldr	r2, [pc, #264]	; (80011bc <printTemplate+0x2d0>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	2002      	movs	r0, #2
 80010b6:	f006 fe2d 	bl	8007d14 <lcd_print>
}
 80010ba:	e05e      	b.n	800117a <printTemplate+0x28e>
		} else if(page == 2) {
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d114      	bne.n	80010ec <printTemplate+0x200>
			lcd_clear();
 80010c2:	f006 fe53 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f007 fb7a 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010cc:	4a40      	ldr	r2, [pc, #256]	; (80011d0 <printTemplate+0x2e4>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	2001      	movs	r0, #1
 80010d2:	f006 fe1f 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010d6:	4a3f      	ldr	r2, [pc, #252]	; (80011d4 <printTemplate+0x2e8>)
 80010d8:	2107      	movs	r1, #7
 80010da:	2001      	movs	r0, #1
 80010dc:	f006 fe1a 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010e0:	4a37      	ldr	r2, [pc, #220]	; (80011c0 <printTemplate+0x2d4>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	2002      	movs	r0, #2
 80010e6:	f006 fe15 	bl	8007d14 <lcd_print>
}
 80010ea:	e046      	b.n	800117a <printTemplate+0x28e>
		} else if(page == 3) {
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d114      	bne.n	800111c <printTemplate+0x230>
			lcd_clear();
 80010f2:	f006 fe3b 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 80010f6:	2064      	movs	r0, #100	; 0x64
 80010f8:	f007 fb62 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010fc:	4a34      	ldr	r2, [pc, #208]	; (80011d0 <printTemplate+0x2e4>)
 80010fe:	2101      	movs	r1, #1
 8001100:	2001      	movs	r0, #1
 8001102:	f006 fe07 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001106:	4a33      	ldr	r2, [pc, #204]	; (80011d4 <printTemplate+0x2e8>)
 8001108:	2107      	movs	r1, #7
 800110a:	2001      	movs	r0, #1
 800110c:	f006 fe02 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001110:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <printTemplate+0x2d8>)
 8001112:	2101      	movs	r1, #1
 8001114:	2002      	movs	r0, #2
 8001116:	f006 fdfd 	bl	8007d14 <lcd_print>
}
 800111a:	e02e      	b.n	800117a <printTemplate+0x28e>
		} else if(page == 4) {
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b04      	cmp	r3, #4
 8001120:	d114      	bne.n	800114c <printTemplate+0x260>
			lcd_clear();
 8001122:	f006 fe23 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 8001126:	2064      	movs	r0, #100	; 0x64
 8001128:	f007 fb4a 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800112c:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <printTemplate+0x2e4>)
 800112e:	2101      	movs	r1, #1
 8001130:	2001      	movs	r0, #1
 8001132:	f006 fdef 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001136:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <printTemplate+0x2e8>)
 8001138:	2107      	movs	r1, #7
 800113a:	2001      	movs	r0, #1
 800113c:	f006 fdea 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <printTemplate+0x2dc>)
 8001142:	2101      	movs	r1, #1
 8001144:	2002      	movs	r0, #2
 8001146:	f006 fde5 	bl	8007d14 <lcd_print>
}
 800114a:	e016      	b.n	800117a <printTemplate+0x28e>
		} else if(page == 5) {
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b05      	cmp	r3, #5
 8001150:	d113      	bne.n	800117a <printTemplate+0x28e>
			lcd_clear();
 8001152:	f006 fe0b 	bl	8007d6c <lcd_clear>
			HAL_Delay(100);
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f007 fb32 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <printTemplate+0x2e4>)
 800115e:	2101      	movs	r1, #1
 8001160:	2001      	movs	r0, #1
 8001162:	f006 fdd7 	bl	8007d14 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001166:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <printTemplate+0x2e8>)
 8001168:	2107      	movs	r1, #7
 800116a:	2001      	movs	r0, #1
 800116c:	f006 fdd2 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001170:	4a16      	ldr	r2, [pc, #88]	; (80011cc <printTemplate+0x2e0>)
 8001172:	2101      	movs	r1, #1
 8001174:	2002      	movs	r0, #2
 8001176:	f006 fdcd 	bl	8007d14 <lcd_print>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800cfd4 	.word	0x0800cfd4
 8001188:	0800cfdc 	.word	0x0800cfdc
 800118c:	0800cfe0 	.word	0x0800cfe0
 8001190:	0800cfe4 	.word	0x0800cfe4
 8001194:	0800cfe8 	.word	0x0800cfe8
 8001198:	0800cfec 	.word	0x0800cfec
 800119c:	0800cff0 	.word	0x0800cff0
 80011a0:	0800cff4 	.word	0x0800cff4
 80011a4:	0800cff8 	.word	0x0800cff8
 80011a8:	0800cffc 	.word	0x0800cffc
 80011ac:	0800d000 	.word	0x0800d000
 80011b0:	20000190 	.word	0x20000190
 80011b4:	0800d004 	.word	0x0800d004
 80011b8:	2000019c 	.word	0x2000019c
 80011bc:	0800d00c 	.word	0x0800d00c
 80011c0:	0800d020 	.word	0x0800d020
 80011c4:	0800d034 	.word	0x0800d034
 80011c8:	0800d048 	.word	0x0800d048
 80011cc:	0800d05c 	.word	0x0800d05c
 80011d0:	0800d070 	.word	0x0800d070
 80011d4:	200001b0 	.word	0x200001b0

080011d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011dc:	f3bf 8f4f 	dsb	sy
}
 80011e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <__NVIC_SystemReset+0x24>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011ea:	4904      	ldr	r1, [pc, #16]	; (80011fc <__NVIC_SystemReset+0x24>)
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_SystemReset+0x28>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <__NVIC_SystemReset+0x20>
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	05fa0004 	.word	0x05fa0004

08001204 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001204:	b580      	push	{r7, lr}
 8001206:	b092      	sub	sp, #72	; 0x48
 8001208:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800120a:	2101      	movs	r1, #1
 800120c:	488e      	ldr	r0, [pc, #568]	; (8001448 <menu+0x244>)
 800120e:	f008 f8a7 	bl	8009360 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	f040 808e 	bne.w	8001336 <menu+0x132>
 800121a:	4b8c      	ldr	r3, [pc, #560]	; (800144c <menu+0x248>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	f083 0301 	eor.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 8086 	beq.w	8001336 <menu+0x132>
		menuSayac = menuSayac+1;
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <menu+0x24c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b87      	ldr	r3, [pc, #540]	; (8001450 <menu+0x24c>)
 8001234:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001236:	4b86      	ldr	r3, [pc, #536]	; (8001450 <menu+0x24c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b24      	cmp	r3, #36	; 0x24
 800123c:	d102      	bne.n	8001244 <menu+0x40>
			menuSayac = 1;
 800123e:	4b84      	ldr	r3, [pc, #528]	; (8001450 <menu+0x24c>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001244:	4b82      	ldr	r3, [pc, #520]	; (8001450 <menu+0x24c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b12      	cmp	r3, #18
 800124a:	d106      	bne.n	800125a <menu+0x56>
 800124c:	4b81      	ldr	r3, [pc, #516]	; (8001454 <menu+0x250>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <menu+0x56>
			menuSayac = 21;
 8001254:	4b7e      	ldr	r3, [pc, #504]	; (8001450 <menu+0x24c>)
 8001256:	2215      	movs	r2, #21
 8001258:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <menu+0x24c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b08      	cmp	r3, #8
 8001260:	d106      	bne.n	8001270 <menu+0x6c>
 8001262:	4b7d      	ldr	r3, [pc, #500]	; (8001458 <menu+0x254>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <menu+0x6c>
			menuSayac = 16;
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <menu+0x24c>)
 800126c:	2210      	movs	r2, #16
 800126e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001270:	4b77      	ldr	r3, [pc, #476]	; (8001450 <menu+0x24c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b0d      	cmp	r3, #13
 8001276:	d106      	bne.n	8001286 <menu+0x82>
 8001278:	4b77      	ldr	r3, [pc, #476]	; (8001458 <menu+0x254>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d102      	bne.n	8001286 <menu+0x82>
			menuSayac = 16;
 8001280:	4b73      	ldr	r3, [pc, #460]	; (8001450 <menu+0x24c>)
 8001282:	2210      	movs	r2, #16
 8001284:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001286:	4b72      	ldr	r3, [pc, #456]	; (8001450 <menu+0x24c>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b09      	cmp	r3, #9
 800128c:	d106      	bne.n	800129c <menu+0x98>
 800128e:	4b72      	ldr	r3, [pc, #456]	; (8001458 <menu+0x254>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d102      	bne.n	800129c <menu+0x98>
			menuSayac = 13;
 8001296:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <menu+0x24c>)
 8001298:	220d      	movs	r2, #13
 800129a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800129c:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <menu+0x24c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b0a      	cmp	r3, #10
 80012a2:	d10a      	bne.n	80012ba <menu+0xb6>
 80012a4:	4b6d      	ldr	r3, [pc, #436]	; (800145c <menu+0x258>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d003      	beq.n	80012b4 <menu+0xb0>
 80012ac:	4b6b      	ldr	r3, [pc, #428]	; (800145c <menu+0x258>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d102      	bne.n	80012ba <menu+0xb6>
			menuSayac = 11;
 80012b4:	4b66      	ldr	r3, [pc, #408]	; (8001450 <menu+0x24c>)
 80012b6:	220b      	movs	r2, #11
 80012b8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80012ba:	4b65      	ldr	r3, [pc, #404]	; (8001450 <menu+0x24c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d10e      	bne.n	80012e0 <menu+0xdc>
 80012c2:	4b67      	ldr	r3, [pc, #412]	; (8001460 <menu+0x25c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d003      	beq.n	80012d2 <menu+0xce>
 80012ca:	4b65      	ldr	r3, [pc, #404]	; (8001460 <menu+0x25c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d106      	bne.n	80012e0 <menu+0xdc>
 80012d2:	4b61      	ldr	r3, [pc, #388]	; (8001458 <menu+0x254>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d102      	bne.n	80012e0 <menu+0xdc>
			menuSayac = 16;
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <menu+0x24c>)
 80012dc:	2210      	movs	r2, #16
 80012de:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80012e0:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <menu+0x24c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d10e      	bne.n	8001306 <menu+0x102>
 80012e8:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <menu+0x25c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d003      	beq.n	80012f8 <menu+0xf4>
 80012f0:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <menu+0x25c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d106      	bne.n	8001306 <menu+0x102>
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <menu+0x254>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d102      	bne.n	8001306 <menu+0x102>
			menuSayac = 13;
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <menu+0x24c>)
 8001302:	220d      	movs	r2, #13
 8001304:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001306:	4b52      	ldr	r3, [pc, #328]	; (8001450 <menu+0x24c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	d106      	bne.n	800131c <menu+0x118>
 800130e:	4b55      	ldr	r3, [pc, #340]	; (8001464 <menu+0x260>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d102      	bne.n	800131c <menu+0x118>
			menuSayac = 16;
 8001316:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <menu+0x24c>)
 8001318:	2210      	movs	r2, #16
 800131a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800131c:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <menu+0x24c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b18      	cmp	r3, #24
 8001322:	d106      	bne.n	8001332 <menu+0x12e>
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <menu+0x250>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <menu+0x12e>
			menuSayac = 26;
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <menu+0x24c>)
 800132e:	221a      	movs	r2, #26
 8001330:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001332:	f003 fbff 	bl	8004b34 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001336:	2108      	movs	r1, #8
 8001338:	484b      	ldr	r0, [pc, #300]	; (8001468 <menu+0x264>)
 800133a:	f008 f811 	bl	8009360 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d175      	bne.n	8001430 <menu+0x22c>
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <menu+0x248>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d06e      	beq.n	8001430 <menu+0x22c>
		if (menuSayac <= 1) {
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <menu+0x24c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d802      	bhi.n	8001360 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <menu+0x24c>)
 800135c:	2224      	movs	r2, #36	; 0x24
 800135e:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <menu+0x24c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <menu+0x24c>)
 800136a:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <menu+0x24c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b14      	cmp	r3, #20
 8001372:	d106      	bne.n	8001382 <menu+0x17e>
 8001374:	4b37      	ldr	r3, [pc, #220]	; (8001454 <menu+0x250>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <menu+0x17e>
			menuSayac = 17;
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <menu+0x24c>)
 800137e:	2211      	movs	r2, #17
 8001380:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <menu+0x24c>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	d106      	bne.n	8001398 <menu+0x194>
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <menu+0x254>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <menu+0x194>
			menuSayac = 7;
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <menu+0x24c>)
 8001394:	2207      	movs	r2, #7
 8001396:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <menu+0x24c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d106      	bne.n	80013ae <menu+0x1aa>
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <menu+0x254>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d102      	bne.n	80013ae <menu+0x1aa>
			menuSayac = 12;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <menu+0x24c>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <menu+0x24c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d106      	bne.n	80013c4 <menu+0x1c0>
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <menu+0x254>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d102      	bne.n	80013c4 <menu+0x1c0>
			menuSayac = 8;
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <menu+0x24c>)
 80013c0:	2208      	movs	r2, #8
 80013c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <menu+0x24c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b0a      	cmp	r3, #10
 80013ca:	d10a      	bne.n	80013e2 <menu+0x1de>
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <menu+0x258>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d003      	beq.n	80013dc <menu+0x1d8>
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <menu+0x258>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d102      	bne.n	80013e2 <menu+0x1de>
			menuSayac = 9;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <menu+0x24c>)
 80013de:	2209      	movs	r2, #9
 80013e0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <menu+0x24c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d10a      	bne.n	8001400 <menu+0x1fc>
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <menu+0x25c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d003      	beq.n	80013fa <menu+0x1f6>
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <menu+0x25c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d102      	bne.n	8001400 <menu+0x1fc>
			menuSayac = 11;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <menu+0x24c>)
 80013fc:	220b      	movs	r2, #11
 80013fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <menu+0x24c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d106      	bne.n	8001416 <menu+0x212>
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <menu+0x260>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d102      	bne.n	8001416 <menu+0x212>
			menuSayac = 14;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <menu+0x24c>)
 8001412:	220e      	movs	r2, #14
 8001414:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <menu+0x24c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b19      	cmp	r3, #25
 800141c:	d106      	bne.n	800142c <menu+0x228>
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <menu+0x250>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <menu+0x228>
			menuSayac = 23;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <menu+0x24c>)
 8001428:	2217      	movs	r2, #23
 800142a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800142c:	f003 fb82 	bl	8004b34 <bekle>
	}

	if (menuSayac == 0) {
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <menu+0x24c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d133      	bne.n	80014a0 <menu+0x29c>
		if(dilSecim == 0) {
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <menu+0x268>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d121      	bne.n	8001484 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <menu+0x26c>)
 8001442:	2101      	movs	r1, #1
 8001444:	2001      	movs	r0, #1
 8001446:	e015      	b.n	8001474 <menu+0x270>
 8001448:	40010800 	.word	0x40010800
 800144c:	2000024f 	.word	0x2000024f
 8001450:	20000220 	.word	0x20000220
 8001454:	2000022f 	.word	0x2000022f
 8001458:	20000228 	.word	0x20000228
 800145c:	20000229 	.word	0x20000229
 8001460:	2000022a 	.word	0x2000022a
 8001464:	2000022b 	.word	0x2000022b
 8001468:	40011000 	.word	0x40011000
 800146c:	20000241 	.word	0x20000241
 8001470:	0800d078 	.word	0x0800d078
 8001474:	f006 fc4e 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001478:	4a94      	ldr	r2, [pc, #592]	; (80016cc <menu+0x4c8>)
 800147a:	2101      	movs	r1, #1
 800147c:	2002      	movs	r0, #2
 800147e:	f006 fc49 	bl	8007d14 <lcd_print>
 8001482:	e00d      	b.n	80014a0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <menu+0x4cc>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d109      	bne.n	80014a0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800148c:	4a91      	ldr	r2, [pc, #580]	; (80016d4 <menu+0x4d0>)
 800148e:	2101      	movs	r1, #1
 8001490:	2001      	movs	r0, #1
 8001492:	f006 fc3f 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001496:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <menu+0x4d4>)
 8001498:	2101      	movs	r1, #1
 800149a:	2002      	movs	r0, #2
 800149c:	f006 fc3a 	bl	8007d14 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80014a0:	4b8e      	ldr	r3, [pc, #568]	; (80016dc <menu+0x4d8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	f040 82b5 	bne.w	8001a14 <menu+0x810>
		if(dilSecim == 0) {
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <menu+0x4cc>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80014b2:	4a8b      	ldr	r2, [pc, #556]	; (80016e0 <menu+0x4dc>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	2001      	movs	r0, #1
 80014b8:	f006 fc2c 	bl	8007d14 <lcd_print>
 80014bc:	e008      	b.n	80014d0 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80014be:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <menu+0x4cc>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d104      	bne.n	80014d0 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80014c6:	4a87      	ldr	r2, [pc, #540]	; (80016e4 <menu+0x4e0>)
 80014c8:	2101      	movs	r1, #1
 80014ca:	2001      	movs	r0, #1
 80014cc:	f006 fc22 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80014d0:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <menu+0x4e4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d123      	bne.n	8001520 <menu+0x31c>
			if(dilSecim == 0) {
 80014d8:	4b7d      	ldr	r3, [pc, #500]	; (80016d0 <menu+0x4cc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80014e0:	4a82      	ldr	r2, [pc, #520]	; (80016ec <menu+0x4e8>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f006 fc15 	bl	8007d14 <lcd_print>
 80014ea:	e008      	b.n	80014fe <menu+0x2fa>

			} else if(dilSecim == 1) {
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <menu+0x4cc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d104      	bne.n	80014fe <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80014f4:	4a7e      	ldr	r2, [pc, #504]	; (80016f0 <menu+0x4ec>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	2002      	movs	r0, #2
 80014fa:	f006 fc0b 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80014fe:	4a7d      	ldr	r2, [pc, #500]	; (80016f4 <menu+0x4f0>)
 8001500:	210f      	movs	r1, #15
 8001502:	2002      	movs	r0, #2
 8001504:	f006 fc06 	bl	8007d14 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001508:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <menu+0x4f4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	220a      	movs	r2, #10
 800150e:	497b      	ldr	r1, [pc, #492]	; (80016fc <menu+0x4f8>)
 8001510:	4618      	mov	r0, r3
 8001512:	f00a ff51 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 8001516:	4a79      	ldr	r2, [pc, #484]	; (80016fc <menu+0x4f8>)
 8001518:	210e      	movs	r1, #14
 800151a:	2002      	movs	r0, #2
 800151c:	f006 fbfa 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001520:	4b71      	ldr	r3, [pc, #452]	; (80016e8 <menu+0x4e4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d123      	bne.n	8001570 <menu+0x36c>
			if(dilSecim == 0) {
 8001528:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <menu+0x4cc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001530:	4a73      	ldr	r2, [pc, #460]	; (8001700 <menu+0x4fc>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f006 fbed 	bl	8007d14 <lcd_print>
 800153a:	e008      	b.n	800154e <menu+0x34a>
			} else if(dilSecim == 1) {
 800153c:	4b64      	ldr	r3, [pc, #400]	; (80016d0 <menu+0x4cc>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d104      	bne.n	800154e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001544:	4a6f      	ldr	r2, [pc, #444]	; (8001704 <menu+0x500>)
 8001546:	2101      	movs	r1, #1
 8001548:	2002      	movs	r0, #2
 800154a:	f006 fbe3 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800154e:	4a6e      	ldr	r2, [pc, #440]	; (8001708 <menu+0x504>)
 8001550:	210f      	movs	r1, #15
 8001552:	2002      	movs	r0, #2
 8001554:	f006 fbde 	bl	8007d14 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001558:	4b6c      	ldr	r3, [pc, #432]	; (800170c <menu+0x508>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	220a      	movs	r2, #10
 800155e:	4967      	ldr	r1, [pc, #412]	; (80016fc <menu+0x4f8>)
 8001560:	4618      	mov	r0, r3
 8001562:	f00a ff29 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 8001566:	4a65      	ldr	r2, [pc, #404]	; (80016fc <menu+0x4f8>)
 8001568:	210e      	movs	r1, #14
 800156a:	2002      	movs	r0, #2
 800156c:	f006 fbd2 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <menu+0x4e4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d123      	bne.n	80015c0 <menu+0x3bc>
			if(dilSecim == 0) {
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <menu+0x4cc>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001580:	4a63      	ldr	r2, [pc, #396]	; (8001710 <menu+0x50c>)
 8001582:	2101      	movs	r1, #1
 8001584:	2002      	movs	r0, #2
 8001586:	f006 fbc5 	bl	8007d14 <lcd_print>
 800158a:	e008      	b.n	800159e <menu+0x39a>
			} else if(dilSecim == 1) {
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <menu+0x4cc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d104      	bne.n	800159e <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001594:	4a5f      	ldr	r2, [pc, #380]	; (8001714 <menu+0x510>)
 8001596:	2101      	movs	r1, #1
 8001598:	2002      	movs	r0, #2
 800159a:	f006 fbbb 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800159e:	4a5a      	ldr	r2, [pc, #360]	; (8001708 <menu+0x504>)
 80015a0:	210f      	movs	r1, #15
 80015a2:	2002      	movs	r0, #2
 80015a4:	f006 fbb6 	bl	8007d14 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <menu+0x514>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	220a      	movs	r2, #10
 80015ae:	4953      	ldr	r1, [pc, #332]	; (80016fc <menu+0x4f8>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00a ff01 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 80015b6:	4a51      	ldr	r2, [pc, #324]	; (80016fc <menu+0x4f8>)
 80015b8:	210e      	movs	r1, #14
 80015ba:	2002      	movs	r0, #2
 80015bc:	f006 fbaa 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80015c0:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <menu+0x4e4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d123      	bne.n	8001610 <menu+0x40c>
			if(dilSecim == 0) {
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <menu+0x4cc>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <menu+0x518>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	2002      	movs	r0, #2
 80015d6:	f006 fb9d 	bl	8007d14 <lcd_print>
 80015da:	e008      	b.n	80015ee <menu+0x3ea>
			} else if(dilSecim == 1) {
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <menu+0x4cc>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d104      	bne.n	80015ee <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80015e4:	4a4e      	ldr	r2, [pc, #312]	; (8001720 <menu+0x51c>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	2002      	movs	r0, #2
 80015ea:	f006 fb93 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <menu+0x504>)
 80015f0:	210f      	movs	r1, #15
 80015f2:	2002      	movs	r0, #2
 80015f4:	f006 fb8e 	bl	8007d14 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80015f8:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <menu+0x520>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	220a      	movs	r2, #10
 80015fe:	493f      	ldr	r1, [pc, #252]	; (80016fc <menu+0x4f8>)
 8001600:	4618      	mov	r0, r3
 8001602:	f00a fed9 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 8001606:	4a3d      	ldr	r2, [pc, #244]	; (80016fc <menu+0x4f8>)
 8001608:	210e      	movs	r1, #14
 800160a:	2002      	movs	r0, #2
 800160c:	f006 fb82 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001610:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <menu+0x4e4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b04      	cmp	r3, #4
 8001616:	d123      	bne.n	8001660 <menu+0x45c>
			if(dilSecim == 0) {
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <menu+0x4cc>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d105      	bne.n	800162c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001620:	4a41      	ldr	r2, [pc, #260]	; (8001728 <menu+0x524>)
 8001622:	2101      	movs	r1, #1
 8001624:	2002      	movs	r0, #2
 8001626:	f006 fb75 	bl	8007d14 <lcd_print>
 800162a:	e008      	b.n	800163e <menu+0x43a>
			} else if(dilSecim == 1) {
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <menu+0x4cc>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d104      	bne.n	800163e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001634:	4a3d      	ldr	r2, [pc, #244]	; (800172c <menu+0x528>)
 8001636:	2101      	movs	r1, #1
 8001638:	2002      	movs	r0, #2
 800163a:	f006 fb6b 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <menu+0x504>)
 8001640:	210f      	movs	r1, #15
 8001642:	2002      	movs	r0, #2
 8001644:	f006 fb66 	bl	8007d14 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001648:	4b39      	ldr	r3, [pc, #228]	; (8001730 <menu+0x52c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	220a      	movs	r2, #10
 800164e:	492b      	ldr	r1, [pc, #172]	; (80016fc <menu+0x4f8>)
 8001650:	4618      	mov	r0, r3
 8001652:	f00a feb1 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <menu+0x4f8>)
 8001658:	210e      	movs	r1, #14
 800165a:	2002      	movs	r0, #2
 800165c:	f006 fb5a 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <menu+0x4e4>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b05      	cmp	r3, #5
 8001666:	d123      	bne.n	80016b0 <menu+0x4ac>
			if(dilSecim == 0) {
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <menu+0x4cc>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <menu+0x530>)
 8001672:	2101      	movs	r1, #1
 8001674:	2002      	movs	r0, #2
 8001676:	f006 fb4d 	bl	8007d14 <lcd_print>
 800167a:	e008      	b.n	800168e <menu+0x48a>
			} else if(dilSecim == 1) {
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <menu+0x4cc>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d104      	bne.n	800168e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001684:	4a2c      	ldr	r2, [pc, #176]	; (8001738 <menu+0x534>)
 8001686:	2101      	movs	r1, #1
 8001688:	2002      	movs	r0, #2
 800168a:	f006 fb43 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <menu+0x504>)
 8001690:	210f      	movs	r1, #15
 8001692:	2002      	movs	r0, #2
 8001694:	f006 fb3e 	bl	8007d14 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <menu+0x538>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	220a      	movs	r2, #10
 800169e:	4917      	ldr	r1, [pc, #92]	; (80016fc <menu+0x4f8>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00a fe89 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 80016a6:	4a15      	ldr	r2, [pc, #84]	; (80016fc <menu+0x4f8>)
 80016a8:	210e      	movs	r1, #14
 80016aa:	2002      	movs	r0, #2
 80016ac:	f006 fb32 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <menu+0x4e4>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d15f      	bne.n	8001778 <menu+0x574>
			if(dilSecim == 0) {
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <menu+0x4cc>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d141      	bne.n	8001744 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80016c0:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <menu+0x53c>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	2002      	movs	r0, #2
 80016c6:	f006 fb25 	bl	8007d14 <lcd_print>
 80016ca:	e044      	b.n	8001756 <menu+0x552>
 80016cc:	0800d08c 	.word	0x0800d08c
 80016d0:	20000241 	.word	0x20000241
 80016d4:	0800d0a0 	.word	0x0800d0a0
 80016d8:	0800d0b4 	.word	0x0800d0b4
 80016dc:	20000220 	.word	0x20000220
 80016e0:	0800d0c8 	.word	0x0800d0c8
 80016e4:	0800d0dc 	.word	0x0800d0dc
 80016e8:	20000222 	.word	0x20000222
 80016ec:	0800d0f0 	.word	0x0800d0f0
 80016f0:	0800d100 	.word	0x0800d100
 80016f4:	0800d110 	.word	0x0800d110
 80016f8:	20000242 	.word	0x20000242
 80016fc:	20000188 	.word	0x20000188
 8001700:	0800d114 	.word	0x0800d114
 8001704:	0800d124 	.word	0x0800d124
 8001708:	0800d134 	.word	0x0800d134
 800170c:	20000243 	.word	0x20000243
 8001710:	0800d138 	.word	0x0800d138
 8001714:	0800d148 	.word	0x0800d148
 8001718:	20000244 	.word	0x20000244
 800171c:	0800d158 	.word	0x0800d158
 8001720:	0800d168 	.word	0x0800d168
 8001724:	20000245 	.word	0x20000245
 8001728:	0800d178 	.word	0x0800d178
 800172c:	0800d188 	.word	0x0800d188
 8001730:	20000246 	.word	0x20000246
 8001734:	0800d198 	.word	0x0800d198
 8001738:	0800d1a8 	.word	0x0800d1a8
 800173c:	20000247 	.word	0x20000247
 8001740:	0800d1b8 	.word	0x0800d1b8
			} else if(dilSecim == 1) {
 8001744:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <menu+0x680>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d104      	bne.n	8001756 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 800174c:	4a4e      	ldr	r2, [pc, #312]	; (8001888 <menu+0x684>)
 800174e:	2101      	movs	r1, #1
 8001750:	2002      	movs	r0, #2
 8001752:	f006 fadf 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001756:	4a4d      	ldr	r2, [pc, #308]	; (800188c <menu+0x688>)
 8001758:	210f      	movs	r1, #15
 800175a:	2002      	movs	r0, #2
 800175c:	f006 fada 	bl	8007d14 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001760:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <menu+0x68c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	220a      	movs	r2, #10
 8001766:	494b      	ldr	r1, [pc, #300]	; (8001894 <menu+0x690>)
 8001768:	4618      	mov	r0, r3
 800176a:	f00a fe25 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 800176e:	4a49      	ldr	r2, [pc, #292]	; (8001894 <menu+0x690>)
 8001770:	210e      	movs	r1, #14
 8001772:	2002      	movs	r0, #2
 8001774:	f006 face 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001778:	4b47      	ldr	r3, [pc, #284]	; (8001898 <menu+0x694>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b07      	cmp	r3, #7
 800177e:	d123      	bne.n	80017c8 <menu+0x5c4>
			if(dilSecim == 0) {
 8001780:	4b40      	ldr	r3, [pc, #256]	; (8001884 <menu+0x680>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001788:	4a44      	ldr	r2, [pc, #272]	; (800189c <menu+0x698>)
 800178a:	2101      	movs	r1, #1
 800178c:	2002      	movs	r0, #2
 800178e:	f006 fac1 	bl	8007d14 <lcd_print>
 8001792:	e008      	b.n	80017a6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <menu+0x680>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d104      	bne.n	80017a6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 800179c:	4a40      	ldr	r2, [pc, #256]	; (80018a0 <menu+0x69c>)
 800179e:	2101      	movs	r1, #1
 80017a0:	2002      	movs	r0, #2
 80017a2:	f006 fab7 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017a6:	4a39      	ldr	r2, [pc, #228]	; (800188c <menu+0x688>)
 80017a8:	210f      	movs	r1, #15
 80017aa:	2002      	movs	r0, #2
 80017ac:	f006 fab2 	bl	8007d14 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80017b0:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <menu+0x6a0>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	220a      	movs	r2, #10
 80017b6:	4937      	ldr	r1, [pc, #220]	; (8001894 <menu+0x690>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00a fdfd 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 80017be:	4a35      	ldr	r2, [pc, #212]	; (8001894 <menu+0x690>)
 80017c0:	210e      	movs	r1, #14
 80017c2:	2002      	movs	r0, #2
 80017c4:	f006 faa6 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <menu+0x694>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d123      	bne.n	8001818 <menu+0x614>
			if(dilSecim == 0) {
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <menu+0x680>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80017d8:	4a33      	ldr	r2, [pc, #204]	; (80018a8 <menu+0x6a4>)
 80017da:	2101      	movs	r1, #1
 80017dc:	2002      	movs	r0, #2
 80017de:	f006 fa99 	bl	8007d14 <lcd_print>
 80017e2:	e008      	b.n	80017f6 <menu+0x5f2>
			} else if(dilSecim == 1) {
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <menu+0x680>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d104      	bne.n	80017f6 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80017ec:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <menu+0x6a8>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	2002      	movs	r0, #2
 80017f2:	f006 fa8f 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <menu+0x688>)
 80017f8:	210f      	movs	r1, #15
 80017fa:	2002      	movs	r0, #2
 80017fc:	f006 fa8a 	bl	8007d14 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <menu+0x6ac>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	220a      	movs	r2, #10
 8001806:	4923      	ldr	r1, [pc, #140]	; (8001894 <menu+0x690>)
 8001808:	4618      	mov	r0, r3
 800180a:	f00a fdd5 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 800180e:	4a21      	ldr	r2, [pc, #132]	; (8001894 <menu+0x690>)
 8001810:	210e      	movs	r1, #14
 8001812:	2002      	movs	r0, #2
 8001814:	f006 fa7e 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <menu+0x694>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b09      	cmp	r3, #9
 800181e:	d123      	bne.n	8001868 <menu+0x664>
			if(dilSecim == 0) {
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <menu+0x680>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001828:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <menu+0x6b0>)
 800182a:	2101      	movs	r1, #1
 800182c:	2002      	movs	r0, #2
 800182e:	f006 fa71 	bl	8007d14 <lcd_print>
 8001832:	e008      	b.n	8001846 <menu+0x642>
			} else if(dilSecim == 1) {
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <menu+0x680>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d104      	bne.n	8001846 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 800183c:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <menu+0x6b4>)
 800183e:	2101      	movs	r1, #1
 8001840:	2002      	movs	r0, #2
 8001842:	f006 fa67 	bl	8007d14 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001846:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <menu+0x6b8>)
 8001848:	2110      	movs	r1, #16
 800184a:	2002      	movs	r0, #2
 800184c:	f006 fa62 	bl	8007d14 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <menu+0x6bc>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	220a      	movs	r2, #10
 8001856:	490f      	ldr	r1, [pc, #60]	; (8001894 <menu+0x690>)
 8001858:	4618      	mov	r0, r3
 800185a:	f00a fdad 	bl	800c3b8 <itoa>
			lcd_print(2, 15, snum);
 800185e:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <menu+0x690>)
 8001860:	210f      	movs	r1, #15
 8001862:	2002      	movs	r0, #2
 8001864:	f006 fa56 	bl	8007d14 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <menu+0x694>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b0a      	cmp	r3, #10
 800186e:	d134      	bne.n	80018da <menu+0x6d6>
			if(dilSecim == 0) {
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <menu+0x680>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d127      	bne.n	80018c8 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <menu+0x6c0>)
 800187a:	2101      	movs	r1, #1
 800187c:	2002      	movs	r0, #2
 800187e:	f006 fa49 	bl	8007d14 <lcd_print>
 8001882:	e02a      	b.n	80018da <menu+0x6d6>
 8001884:	20000241 	.word	0x20000241
 8001888:	0800d1c8 	.word	0x0800d1c8
 800188c:	0800d134 	.word	0x0800d134
 8001890:	20000248 	.word	0x20000248
 8001894:	20000188 	.word	0x20000188
 8001898:	20000222 	.word	0x20000222
 800189c:	0800d1d8 	.word	0x0800d1d8
 80018a0:	0800d1e8 	.word	0x0800d1e8
 80018a4:	20000249 	.word	0x20000249
 80018a8:	0800d1f8 	.word	0x0800d1f8
 80018ac:	0800d208 	.word	0x0800d208
 80018b0:	2000024a 	.word	0x2000024a
 80018b4:	0800d218 	.word	0x0800d218
 80018b8:	0800d228 	.word	0x0800d228
 80018bc:	0800d238 	.word	0x0800d238
 80018c0:	2000024b 	.word	0x2000024b
 80018c4:	0800d23c 	.word	0x0800d23c
			} else if(dilSecim == 1) {
 80018c8:	4b82      	ldr	r3, [pc, #520]	; (8001ad4 <menu+0x8d0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d104      	bne.n	80018da <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80018d0:	4a81      	ldr	r2, [pc, #516]	; (8001ad8 <menu+0x8d4>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2002      	movs	r0, #2
 80018d6:	f006 fa1d 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018da:	2102      	movs	r1, #2
 80018dc:	487f      	ldr	r0, [pc, #508]	; (8001adc <menu+0x8d8>)
 80018de:	f007 fd3f 	bl	8009360 <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d119      	bne.n	800191c <menu+0x718>
 80018e8:	4b7d      	ldr	r3, [pc, #500]	; (8001ae0 <menu+0x8dc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f083 0301 	eor.w	r3, r3, #1
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d012      	beq.n	800191c <menu+0x718>
 80018f6:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <menu+0x8e0>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10e      	bne.n	800191c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80018fe:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <menu+0x8e4>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <menu+0x8e4>)
 8001908:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800190a:	4b77      	ldr	r3, [pc, #476]	; (8001ae8 <menu+0x8e4>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b0a      	cmp	r3, #10
 8001910:	d902      	bls.n	8001918 <menu+0x714>
				hataGostermeSirasi = 0;
 8001912:	4b75      	ldr	r3, [pc, #468]	; (8001ae8 <menu+0x8e4>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001918:	f003 f90c 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800191c:	2104      	movs	r1, #4
 800191e:	486f      	ldr	r0, [pc, #444]	; (8001adc <menu+0x8d8>)
 8001920:	f007 fd1e 	bl	8009360 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d119      	bne.n	800195e <menu+0x75a>
 800192a:	4b6d      	ldr	r3, [pc, #436]	; (8001ae0 <menu+0x8dc>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	f083 0301 	eor.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d012      	beq.n	800195e <menu+0x75a>
 8001938:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <menu+0x8e0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10e      	bne.n	800195e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001940:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <menu+0x8e4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <menu+0x8e4>)
 800194a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 800194c:	4b66      	ldr	r3, [pc, #408]	; (8001ae8 <menu+0x8e4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b0b      	cmp	r3, #11
 8001952:	d902      	bls.n	800195a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <menu+0x8e4>)
 8001956:	220a      	movs	r2, #10
 8001958:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800195a:	f003 f8eb 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800195e:	2108      	movs	r1, #8
 8001960:	485e      	ldr	r0, [pc, #376]	; (8001adc <menu+0x8d8>)
 8001962:	f007 fcfd 	bl	8009360 <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	2b01      	cmp	r3, #1
 800196a:	d153      	bne.n	8001a14 <menu+0x810>
 800196c:	4b5c      	ldr	r3, [pc, #368]	; (8001ae0 <menu+0x8dc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	f083 0301 	eor.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d04c      	beq.n	8001a14 <menu+0x810>
 800197a:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <menu+0x8e4>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b0a      	cmp	r3, #10
 8001980:	d148      	bne.n	8001a14 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001982:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <menu+0x8e8>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <menu+0x8ec>)
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <menu+0x8f0>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <menu+0x8ec>)
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <menu+0x8f4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <menu+0x8ec>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80019ac:	4b53      	ldr	r3, [pc, #332]	; (8001afc <menu+0x8f8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <menu+0x8ec>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80019ba:	4b51      	ldr	r3, [pc, #324]	; (8001b00 <menu+0x8fc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <menu+0x8ec>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80019c8:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <menu+0x900>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <menu+0x8ec>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80019d6:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <menu+0x904>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <menu+0x8ec>)
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80019e4:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <menu+0x908>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <menu+0x8ec>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <menu+0x90c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <menu+0x8ec>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001a00:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <menu+0x910>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <menu+0x8ec>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001a0e:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <menu+0x914>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <menu+0x918>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	f040 80fc 	bne.w	8001c16 <menu+0xa12>
		if(dilSecim == 0) {
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <menu+0x8d0>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001a26:	4a3e      	ldr	r2, [pc, #248]	; (8001b20 <menu+0x91c>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f006 f972 	bl	8007d14 <lcd_print>
 8001a30:	e008      	b.n	8001a44 <menu+0x840>
		} else if(dilSecim == 1) {
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <menu+0x8d0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d104      	bne.n	8001a44 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001a3a:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <menu+0x920>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f006 f968 	bl	8007d14 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <menu+0x8e0>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d003      	beq.n	8001a54 <menu+0x850>
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <menu+0x8e0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d112      	bne.n	8001a7a <menu+0x876>
			if(dilSecim == 0) {
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <menu+0x8d0>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001a5c:	4a32      	ldr	r2, [pc, #200]	; (8001b28 <menu+0x924>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2002      	movs	r0, #2
 8001a62:	f006 f957 	bl	8007d14 <lcd_print>
 8001a66:	e008      	b.n	8001a7a <menu+0x876>
			} else if(dilSecim == 1) {
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <menu+0x8d0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d104      	bne.n	8001a7a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001a70:	4a2e      	ldr	r2, [pc, #184]	; (8001b2c <menu+0x928>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	2002      	movs	r0, #2
 8001a76:	f006 f94d 	bl	8007d14 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <menu+0x92c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <menu+0x8ac>
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <menu+0x8e0>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d112      	bne.n	8001ab0 <menu+0x8ac>
			if(dilSecim == 0) {
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <menu+0x8d0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a92:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <menu+0x930>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	2002      	movs	r0, #2
 8001a98:	f006 f93c 	bl	8007d14 <lcd_print>
 8001a9c:	e008      	b.n	8001ab0 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <menu+0x8d0>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d104      	bne.n	8001ab0 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <menu+0x934>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f006 f932 	bl	8007d14 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <menu+0x92c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d14c      	bne.n	8001b52 <menu+0x94e>
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <menu+0x8e0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d148      	bne.n	8001b52 <menu+0x94e>
			if(dilSecim == 0) {
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <menu+0x8d0>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d13b      	bne.n	8001b40 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <menu+0x938>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	2002      	movs	r0, #2
 8001ace:	f006 f921 	bl	8007d14 <lcd_print>
 8001ad2:	e03e      	b.n	8001b52 <menu+0x94e>
 8001ad4:	20000241 	.word	0x20000241
 8001ad8:	0800d250 	.word	0x0800d250
 8001adc:	40010800 	.word	0x40010800
 8001ae0:	2000024f 	.word	0x2000024f
 8001ae4:	2000022f 	.word	0x2000022f
 8001ae8:	20000222 	.word	0x20000222
 8001aec:	20000242 	.word	0x20000242
 8001af0:	20000118 	.word	0x20000118
 8001af4:	20000243 	.word	0x20000243
 8001af8:	20000244 	.word	0x20000244
 8001afc:	20000245 	.word	0x20000245
 8001b00:	20000246 	.word	0x20000246
 8001b04:	20000247 	.word	0x20000247
 8001b08:	20000248 	.word	0x20000248
 8001b0c:	20000249 	.word	0x20000249
 8001b10:	2000024a 	.word	0x2000024a
 8001b14:	2000024b 	.word	0x2000024b
 8001b18:	2000024c 	.word	0x2000024c
 8001b1c:	20000220 	.word	0x20000220
 8001b20:	0800d264 	.word	0x0800d264
 8001b24:	0800d278 	.word	0x0800d278
 8001b28:	0800d28c 	.word	0x0800d28c
 8001b2c:	0800d2a0 	.word	0x0800d2a0
 8001b30:	20000221 	.word	0x20000221
 8001b34:	0800d2b4 	.word	0x0800d2b4
 8001b38:	0800d2c4 	.word	0x0800d2c4
 8001b3c:	0800d2d4 	.word	0x0800d2d4
			} else if(dilSecim == 1) {
 8001b40:	4b98      	ldr	r3, [pc, #608]	; (8001da4 <menu+0xba0>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d104      	bne.n	8001b52 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001b48:	4a97      	ldr	r2, [pc, #604]	; (8001da8 <menu+0xba4>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f006 f8e1 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b52:	2102      	movs	r1, #2
 8001b54:	4895      	ldr	r0, [pc, #596]	; (8001dac <menu+0xba8>)
 8001b56:	f007 fc03 	bl	8009360 <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d119      	bne.n	8001b94 <menu+0x990>
 8001b60:	4b93      	ldr	r3, [pc, #588]	; (8001db0 <menu+0xbac>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	f083 0301 	eor.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d012      	beq.n	8001b94 <menu+0x990>
 8001b6e:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <menu+0xbb0>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10e      	bne.n	8001b94 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b76:	4b90      	ldr	r3, [pc, #576]	; (8001db8 <menu+0xbb4>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b8e      	ldr	r3, [pc, #568]	; (8001db8 <menu+0xbb4>)
 8001b80:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b82:	4b8d      	ldr	r3, [pc, #564]	; (8001db8 <menu+0xbb4>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d902      	bls.n	8001b90 <menu+0x98c>
				calismaSekli = 0;
 8001b8a:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <menu+0xbb4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b90:	f002 ffd0 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b94:	2104      	movs	r1, #4
 8001b96:	4885      	ldr	r0, [pc, #532]	; (8001dac <menu+0xba8>)
 8001b98:	f007 fbe2 	bl	8009360 <HAL_GPIO_ReadPin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d119      	bne.n	8001bd6 <menu+0x9d2>
 8001ba2:	4b83      	ldr	r3, [pc, #524]	; (8001db0 <menu+0xbac>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d012      	beq.n	8001bd6 <menu+0x9d2>
 8001bb0:	4b80      	ldr	r3, [pc, #512]	; (8001db4 <menu+0xbb0>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10e      	bne.n	8001bd6 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001bb8:	4b7f      	ldr	r3, [pc, #508]	; (8001db8 <menu+0xbb4>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <menu+0xbb4>)
 8001bc2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001bc4:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <menu+0xbb4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <menu+0x9ce>
	    		calismaSekli = 1;
 8001bcc:	4b7a      	ldr	r3, [pc, #488]	; (8001db8 <menu+0xbb4>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001bd2:	f002 ffaf 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	4874      	ldr	r0, [pc, #464]	; (8001dac <menu+0xba8>)
 8001bda:	f007 fbc1 	bl	8009360 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d118      	bne.n	8001c16 <menu+0xa12>
 8001be4:	4b72      	ldr	r3, [pc, #456]	; (8001db0 <menu+0xbac>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d011      	beq.n	8001c16 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001bf2:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <menu+0xbb4>)
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	4b71      	ldr	r3, [pc, #452]	; (8001dbc <menu+0xbb8>)
 8001bf8:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001bfa:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <menu+0xbb4>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d106      	bne.n	8001c10 <menu+0xa0c>
				altLimit = 1;
 8001c02:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <menu+0xbbc>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c08:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <menu+0xbbc>)
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	; (8001dbc <menu+0xbb8>)
 8001c0e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001c10:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <menu+0xbc0>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001c16:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <menu+0xbc4>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	f040 8083 	bne.w	8001d26 <menu+0xb22>
		if(dilSecim == 0) {
 8001c20:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <menu+0xba0>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001c28:	4a68      	ldr	r2, [pc, #416]	; (8001dcc <menu+0xbc8>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f006 f871 	bl	8007d14 <lcd_print>
 8001c32:	e008      	b.n	8001c46 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001c34:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <menu+0xba0>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d104      	bne.n	8001c46 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001c3c:	4a64      	ldr	r2, [pc, #400]	; (8001dd0 <menu+0xbcc>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2001      	movs	r0, #1
 8001c42:	f006 f867 	bl	8007d14 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001c46:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <menu+0xbd0>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d113      	bne.n	8001c76 <menu+0xa72>
			if(dilSecim == 0) {
 8001c4e:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <menu+0xba0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001c56:	4a60      	ldr	r2, [pc, #384]	; (8001dd8 <menu+0xbd4>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f006 f85a 	bl	8007d14 <lcd_print>
 8001c60:	e012      	b.n	8001c88 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001c62:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <menu+0xba0>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10e      	bne.n	8001c88 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001c6a:	4a5c      	ldr	r2, [pc, #368]	; (8001ddc <menu+0xbd8>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f006 f850 	bl	8007d14 <lcd_print>
 8001c74:	e008      	b.n	8001c88 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c76:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <menu+0xbd0>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d104      	bne.n	8001c88 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c7e:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <menu+0xbdc>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	2002      	movs	r0, #2
 8001c84:	f006 f846 	bl	8007d14 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4848      	ldr	r0, [pc, #288]	; (8001dac <menu+0xba8>)
 8001c8c:	f007 fb68 	bl	8009360 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d115      	bne.n	8001cc2 <menu+0xabe>
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <menu+0xbac>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00e      	beq.n	8001cc2 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <menu+0xbd0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <menu+0xbd0>)
 8001cae:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001cb0:	4b48      	ldr	r3, [pc, #288]	; (8001dd4 <menu+0xbd0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d902      	bls.n	8001cbe <menu+0xaba>
				emniyetCercevesi = 0;
 8001cb8:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <menu+0xbd0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cbe:	f002 ff39 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	4839      	ldr	r0, [pc, #228]	; (8001dac <menu+0xba8>)
 8001cc6:	f007 fb4b 	bl	8009360 <HAL_GPIO_ReadPin>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d115      	bne.n	8001cfc <menu+0xaf8>
 8001cd0:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <menu+0xbac>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	f083 0301 	eor.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00e      	beq.n	8001cfc <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <menu+0xbd0>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <menu+0xbd0>)
 8001ce8:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <menu+0xbd0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <menu+0xbd0>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cf8:	f002 ff1c 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	482b      	ldr	r0, [pc, #172]	; (8001dac <menu+0xba8>)
 8001d00:	f007 fb2e 	bl	8009360 <HAL_GPIO_ReadPin>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d10d      	bne.n	8001d26 <menu+0xb22>
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <menu+0xbac>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <menu+0xbd0>)
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <menu+0xbb8>)
 8001d1e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <menu+0xbc0>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <menu+0xbc4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	f040 80ba 	bne.w	8001ea4 <menu+0xca0>
		if(dilSecim == 0) {
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <menu+0xba0>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <menu+0xbe0>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f005 ffe9 	bl	8007d14 <lcd_print>
 8001d42:	e008      	b.n	8001d56 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <menu+0xba0>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d104      	bne.n	8001d56 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001d4c:	4a26      	ldr	r2, [pc, #152]	; (8001de8 <menu+0xbe4>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2001      	movs	r0, #1
 8001d52:	f005 ffdf 	bl	8007d14 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <menu+0xbe8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d113      	bne.n	8001d86 <menu+0xb82>
			if(dilSecim == 0) {
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <menu+0xba0>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001d66:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <menu+0xbd4>)
 8001d68:	2101      	movs	r1, #1
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f005 ffd2 	bl	8007d14 <lcd_print>
 8001d70:	e049      	b.n	8001e06 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <menu+0xba0>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d145      	bne.n	8001e06 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <menu+0xbd8>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f005 ffc8 	bl	8007d14 <lcd_print>
 8001d84:	e03f      	b.n	8001e06 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <menu+0xbe8>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d13b      	bne.n	8001e06 <menu+0xc02>
			if(dilSecim == 0) {
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <menu+0xba0>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d12e      	bne.n	8001df4 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001d96:	4a16      	ldr	r2, [pc, #88]	; (8001df0 <menu+0xbec>)
 8001d98:	2101      	movs	r1, #1
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f005 ffba 	bl	8007d14 <lcd_print>
 8001da0:	e031      	b.n	8001e06 <menu+0xc02>
 8001da2:	bf00      	nop
 8001da4:	20000241 	.word	0x20000241
 8001da8:	0800d2e4 	.word	0x0800d2e4
 8001dac:	40010800 	.word	0x40010800
 8001db0:	2000024f 	.word	0x2000024f
 8001db4:	2000022f 	.word	0x2000022f
 8001db8:	20000221 	.word	0x20000221
 8001dbc:	20000118 	.word	0x20000118
 8001dc0:	20000226 	.word	0x20000226
 8001dc4:	2000024c 	.word	0x2000024c
 8001dc8:	20000220 	.word	0x20000220
 8001dcc:	0800d2f4 	.word	0x0800d2f4
 8001dd0:	0800d308 	.word	0x0800d308
 8001dd4:	20000224 	.word	0x20000224
 8001dd8:	0800d31c 	.word	0x0800d31c
 8001ddc:	0800d330 	.word	0x0800d330
 8001de0:	0800d344 	.word	0x0800d344
 8001de4:	0800d354 	.word	0x0800d354
 8001de8:	0800d368 	.word	0x0800d368
 8001dec:	20000225 	.word	0x20000225
 8001df0:	0800d37c 	.word	0x0800d37c
			} else if(dilSecim == 1) {
 8001df4:	4b92      	ldr	r3, [pc, #584]	; (8002040 <menu+0xe3c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d104      	bne.n	8001e06 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001dfc:	4a91      	ldr	r2, [pc, #580]	; (8002044 <menu+0xe40>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	2002      	movs	r0, #2
 8001e02:	f005 ff87 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e06:	2102      	movs	r1, #2
 8001e08:	488f      	ldr	r0, [pc, #572]	; (8002048 <menu+0xe44>)
 8001e0a:	f007 faa9 	bl	8009360 <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d115      	bne.n	8001e40 <menu+0xc3c>
 8001e14:	4b8d      	ldr	r3, [pc, #564]	; (800204c <menu+0xe48>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	f083 0301 	eor.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00e      	beq.n	8001e40 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <menu+0xe4c>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b89      	ldr	r3, [pc, #548]	; (8002050 <menu+0xe4c>)
 8001e2c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001e2e:	4b88      	ldr	r3, [pc, #544]	; (8002050 <menu+0xe4c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d902      	bls.n	8001e3c <menu+0xc38>
				yavaslamaLimit = 0;
 8001e36:	4b86      	ldr	r3, [pc, #536]	; (8002050 <menu+0xe4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e3c:	f002 fe7a 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e40:	2104      	movs	r1, #4
 8001e42:	4881      	ldr	r0, [pc, #516]	; (8002048 <menu+0xe44>)
 8001e44:	f007 fa8c 	bl	8009360 <HAL_GPIO_ReadPin>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d115      	bne.n	8001e7a <menu+0xc76>
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	; (800204c <menu+0xe48>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	f083 0301 	eor.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00e      	beq.n	8001e7a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001e5c:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <menu+0xe4c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <menu+0xe4c>)
 8001e66:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001e68:	4b79      	ldr	r3, [pc, #484]	; (8002050 <menu+0xe4c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001e70:	4b77      	ldr	r3, [pc, #476]	; (8002050 <menu+0xe4c>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e76:	f002 fe5d 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	4872      	ldr	r0, [pc, #456]	; (8002048 <menu+0xe44>)
 8001e7e:	f007 fa6f 	bl	8009360 <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10d      	bne.n	8001ea4 <menu+0xca0>
 8001e88:	4b70      	ldr	r3, [pc, #448]	; (800204c <menu+0xe48>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001e96:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <menu+0xe4c>)
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b6e      	ldr	r3, [pc, #440]	; (8002054 <menu+0xe50>)
 8001e9c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e9e:	4b6e      	ldr	r3, [pc, #440]	; (8002058 <menu+0xe54>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001ea4:	4b6d      	ldr	r3, [pc, #436]	; (800205c <menu+0xe58>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	f040 80b9 	bne.w	8002020 <menu+0xe1c>
		if(dilSecim == 0) {
 8001eae:	4b64      	ldr	r3, [pc, #400]	; (8002040 <menu+0xe3c>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001eb6:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <menu+0xe5c>)
 8001eb8:	2101      	movs	r1, #1
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f005 ff2a 	bl	8007d14 <lcd_print>
 8001ec0:	e008      	b.n	8001ed4 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	; (8002040 <menu+0xe3c>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d104      	bne.n	8001ed4 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001eca:	4a66      	ldr	r2, [pc, #408]	; (8002064 <menu+0xe60>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f005 ff20 	bl	8007d14 <lcd_print>
		}

		if(altLimit == 0) {
 8001ed4:	4b64      	ldr	r3, [pc, #400]	; (8002068 <menu+0xe64>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d113      	bne.n	8001f04 <menu+0xd00>
			if(dilSecim == 0) {
 8001edc:	4b58      	ldr	r3, [pc, #352]	; (8002040 <menu+0xe3c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001ee4:	4a61      	ldr	r2, [pc, #388]	; (800206c <menu+0xe68>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f005 ff13 	bl	8007d14 <lcd_print>
 8001eee:	e020      	b.n	8001f32 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <menu+0xe3c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d11c      	bne.n	8001f32 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <menu+0xe6c>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	2002      	movs	r0, #2
 8001efe:	f005 ff09 	bl	8007d14 <lcd_print>
 8001f02:	e016      	b.n	8001f32 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001f04:	4b58      	ldr	r3, [pc, #352]	; (8002068 <menu+0xe64>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d112      	bne.n	8001f32 <menu+0xd2e>
			if(dilSecim == 0){
 8001f0c:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <menu+0xe3c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001f14:	4a57      	ldr	r2, [pc, #348]	; (8002074 <menu+0xe70>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f005 fefb 	bl	8007d14 <lcd_print>
 8001f1e:	e008      	b.n	8001f32 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001f20:	4b47      	ldr	r3, [pc, #284]	; (8002040 <menu+0xe3c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d104      	bne.n	8001f32 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001f28:	4a46      	ldr	r2, [pc, #280]	; (8002044 <menu+0xe40>)
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f005 fef1 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001f32:	2102      	movs	r1, #2
 8001f34:	4844      	ldr	r0, [pc, #272]	; (8002048 <menu+0xe44>)
 8001f36:	f007 fa13 	bl	8009360 <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d119      	bne.n	8001f74 <menu+0xd70>
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <menu+0xe48>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f083 0301 	eor.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <menu+0xd70>
 8001f4e:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <menu+0xe74>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10e      	bne.n	8001f74 <menu+0xd70>
			altLimit = altLimit + 1;
 8001f56:	4b44      	ldr	r3, [pc, #272]	; (8002068 <menu+0xe64>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b42      	ldr	r3, [pc, #264]	; (8002068 <menu+0xe64>)
 8001f60:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <menu+0xe64>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d902      	bls.n	8001f70 <menu+0xd6c>
				altLimit = 0;
 8001f6a:	4b3f      	ldr	r3, [pc, #252]	; (8002068 <menu+0xe64>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f70:	f002 fde0 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f74:	2104      	movs	r1, #4
 8001f76:	4834      	ldr	r0, [pc, #208]	; (8002048 <menu+0xe44>)
 8001f78:	f007 f9f2 	bl	8009360 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d119      	bne.n	8001fb6 <menu+0xdb2>
 8001f82:	4b32      	ldr	r3, [pc, #200]	; (800204c <menu+0xe48>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f083 0301 	eor.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <menu+0xdb2>
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <menu+0xe74>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10e      	bne.n	8001fb6 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <menu+0xe64>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <menu+0xe64>)
 8001fa2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <menu+0xe64>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <menu+0xdae>
		   		altLimit = 1;
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <menu+0xe64>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fb2:	f002 fdbf 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb6:	2108      	movs	r1, #8
 8001fb8:	4823      	ldr	r0, [pc, #140]	; (8002048 <menu+0xe44>)
 8001fba:	f007 f9d1 	bl	8009360 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d12d      	bne.n	8002020 <menu+0xe1c>
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <menu+0xe48>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f083 0301 	eor.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d026      	beq.n	8002020 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <menu+0xe64>)
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <menu+0xe50>)
 8001fd8:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <menu+0xe64>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d110      	bne.n	8002004 <menu+0xe00>
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <menu+0xe78>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <menu+0xdee>
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <menu+0xe78>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d108      	bne.n	8002004 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <menu+0xe78>)
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <menu+0xe78>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <menu+0xe50>)
 8001ffe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002002:	e00a      	b.n	800201a <menu+0xe16>
			} else if(altLimit == 0) {
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <menu+0xe64>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <menu+0xe16>
				platformSilindirTipi = 0;
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <menu+0xe7c>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <menu+0xe7c>)
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <menu+0xe50>)
 8002018:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <menu+0xe54>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <menu+0xe58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b06      	cmp	r3, #6
 8002026:	f040 80b6 	bne.w	8002196 <menu+0xf92>
		if(dilSecim == 0) {
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <menu+0xe3c>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d12a      	bne.n	8002088 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002032:	4a14      	ldr	r2, [pc, #80]	; (8002084 <menu+0xe80>)
 8002034:	2101      	movs	r1, #1
 8002036:	2001      	movs	r0, #1
 8002038:	f005 fe6c 	bl	8007d14 <lcd_print>
 800203c:	e02d      	b.n	800209a <menu+0xe96>
 800203e:	bf00      	nop
 8002040:	20000241 	.word	0x20000241
 8002044:	0800d390 	.word	0x0800d390
 8002048:	40010800 	.word	0x40010800
 800204c:	2000024f 	.word	0x2000024f
 8002050:	20000225 	.word	0x20000225
 8002054:	20000118 	.word	0x20000118
 8002058:	2000024c 	.word	0x2000024c
 800205c:	20000220 	.word	0x20000220
 8002060:	0800d3a4 	.word	0x0800d3a4
 8002064:	0800d3b8 	.word	0x0800d3b8
 8002068:	20000226 	.word	0x20000226
 800206c:	0800d31c 	.word	0x0800d31c
 8002070:	0800d330 	.word	0x0800d330
 8002074:	0800d37c 	.word	0x0800d37c
 8002078:	20000221 	.word	0x20000221
 800207c:	2000022d 	.word	0x2000022d
 8002080:	20000233 	.word	0x20000233
 8002084:	0800d3cc 	.word	0x0800d3cc
		} else if(dilSecim == 1){
 8002088:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <menu+0x1070>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d104      	bne.n	800209a <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002090:	4a79      	ldr	r2, [pc, #484]	; (8002278 <menu+0x1074>)
 8002092:	2101      	movs	r1, #1
 8002094:	2001      	movs	r0, #1
 8002096:	f005 fe3d 	bl	8007d14 <lcd_print>
		}
		if(basincSalteri == 0){
 800209a:	4b78      	ldr	r3, [pc, #480]	; (800227c <menu+0x1078>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d113      	bne.n	80020ca <menu+0xec6>
			if(dilSecim == 0) {
 80020a2:	4b74      	ldr	r3, [pc, #464]	; (8002274 <menu+0x1070>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80020aa:	4a75      	ldr	r2, [pc, #468]	; (8002280 <menu+0x107c>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	2002      	movs	r0, #2
 80020b0:	f005 fe30 	bl	8007d14 <lcd_print>
 80020b4:	e020      	b.n	80020f8 <menu+0xef4>
			} else if(dilSecim == 1){
 80020b6:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <menu+0x1070>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d11c      	bne.n	80020f8 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80020be:	4a71      	ldr	r2, [pc, #452]	; (8002284 <menu+0x1080>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	2002      	movs	r0, #2
 80020c4:	f005 fe26 	bl	8007d14 <lcd_print>
 80020c8:	e016      	b.n	80020f8 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <menu+0x1078>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d112      	bne.n	80020f8 <menu+0xef4>
			if(dilSecim == 0) {
 80020d2:	4b68      	ldr	r3, [pc, #416]	; (8002274 <menu+0x1070>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80020da:	4a6b      	ldr	r2, [pc, #428]	; (8002288 <menu+0x1084>)
 80020dc:	2101      	movs	r1, #1
 80020de:	2002      	movs	r0, #2
 80020e0:	f005 fe18 	bl	8007d14 <lcd_print>
 80020e4:	e008      	b.n	80020f8 <menu+0xef4>
			} else if(dilSecim == 1) {
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <menu+0x1070>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d104      	bne.n	80020f8 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80020ee:	4a67      	ldr	r2, [pc, #412]	; (800228c <menu+0x1088>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	2002      	movs	r0, #2
 80020f4:	f005 fe0e 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020f8:	2102      	movs	r1, #2
 80020fa:	4865      	ldr	r0, [pc, #404]	; (8002290 <menu+0x108c>)
 80020fc:	f007 f930 	bl	8009360 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d115      	bne.n	8002132 <menu+0xf2e>
 8002106:	4b63      	ldr	r3, [pc, #396]	; (8002294 <menu+0x1090>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00e      	beq.n	8002132 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <menu+0x1078>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b57      	ldr	r3, [pc, #348]	; (800227c <menu+0x1078>)
 800211e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002120:	4b56      	ldr	r3, [pc, #344]	; (800227c <menu+0x1078>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d902      	bls.n	800212e <menu+0xf2a>
				basincSalteri = 0;
 8002128:	4b54      	ldr	r3, [pc, #336]	; (800227c <menu+0x1078>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800212e:	f002 fd01 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002132:	2104      	movs	r1, #4
 8002134:	4856      	ldr	r0, [pc, #344]	; (8002290 <menu+0x108c>)
 8002136:	f007 f913 	bl	8009360 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	2b01      	cmp	r3, #1
 800213e:	d115      	bne.n	800216c <menu+0xf68>
 8002140:	4b54      	ldr	r3, [pc, #336]	; (8002294 <menu+0x1090>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f083 0301 	eor.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00e      	beq.n	800216c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800214e:	4b4b      	ldr	r3, [pc, #300]	; (800227c <menu+0x1078>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b49      	ldr	r3, [pc, #292]	; (800227c <menu+0x1078>)
 8002158:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800215a:	4b48      	ldr	r3, [pc, #288]	; (800227c <menu+0x1078>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <menu+0xf64>
		   		basincSalteri = 1;
 8002162:	4b46      	ldr	r3, [pc, #280]	; (800227c <menu+0x1078>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002168:	f002 fce4 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800216c:	2108      	movs	r1, #8
 800216e:	4848      	ldr	r0, [pc, #288]	; (8002290 <menu+0x108c>)
 8002170:	f007 f8f6 	bl	8009360 <HAL_GPIO_ReadPin>
 8002174:	4603      	mov	r3, r0
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10d      	bne.n	8002196 <menu+0xf92>
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <menu+0x1090>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f083 0301 	eor.w	r3, r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002188:	4b3c      	ldr	r3, [pc, #240]	; (800227c <menu+0x1078>)
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <menu+0x1094>)
 800218e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <menu+0x1098>)
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002196:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <menu+0x109c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b07      	cmp	r3, #7
 800219c:	f040 80f5 	bne.w	800238a <menu+0x1186>
		if(dilSecim == 0) {
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <menu+0x1070>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80021a8:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <menu+0x10a0>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	2001      	movs	r0, #1
 80021ae:	f005 fdb1 	bl	8007d14 <lcd_print>
 80021b2:	e008      	b.n	80021c6 <menu+0xfc2>
		} else if(dilSecim == 1){
 80021b4:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <menu+0x1070>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d104      	bne.n	80021c6 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80021bc:	4a3a      	ldr	r2, [pc, #232]	; (80022a8 <menu+0x10a4>)
 80021be:	2101      	movs	r1, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	f005 fda7 	bl	8007d14 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <menu+0x10a8>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d113      	bne.n	80021f6 <menu+0xff2>
			if(dilSecim == 0) {
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <menu+0x1070>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80021d6:	4a2a      	ldr	r2, [pc, #168]	; (8002280 <menu+0x107c>)
 80021d8:	2101      	movs	r1, #1
 80021da:	2002      	movs	r0, #2
 80021dc:	f005 fd9a 	bl	8007d14 <lcd_print>
 80021e0:	e079      	b.n	80022d6 <menu+0x10d2>
			} else if(dilSecim == 1){
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <menu+0x1070>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d175      	bne.n	80022d6 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80021ea:	4a26      	ldr	r2, [pc, #152]	; (8002284 <menu+0x1080>)
 80021ec:	2101      	movs	r1, #1
 80021ee:	2002      	movs	r0, #2
 80021f0:	f005 fd90 	bl	8007d14 <lcd_print>
 80021f4:	e06f      	b.n	80022d6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <menu+0x10a8>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d113      	bne.n	8002226 <menu+0x1022>
			if(dilSecim == 0) {
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <menu+0x1070>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002206:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <menu+0x10ac>)
 8002208:	2101      	movs	r1, #1
 800220a:	2002      	movs	r0, #2
 800220c:	f005 fd82 	bl	8007d14 <lcd_print>
 8002210:	e061      	b.n	80022d6 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <menu+0x1070>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d15d      	bne.n	80022d6 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800221a:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <menu+0x10b0>)
 800221c:	2101      	movs	r1, #1
 800221e:	2002      	movs	r0, #2
 8002220:	f005 fd78 	bl	8007d14 <lcd_print>
 8002224:	e057      	b.n	80022d6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <menu+0x10a8>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d113      	bne.n	8002256 <menu+0x1052>
			if(dilSecim == 0) {
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <menu+0x1070>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002236:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <menu+0x10b4>)
 8002238:	2101      	movs	r1, #1
 800223a:	2002      	movs	r0, #2
 800223c:	f005 fd6a 	bl	8007d14 <lcd_print>
 8002240:	e049      	b.n	80022d6 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <menu+0x1070>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d145      	bne.n	80022d6 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800224a:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <menu+0x10b8>)
 800224c:	2101      	movs	r1, #1
 800224e:	2002      	movs	r0, #2
 8002250:	f005 fd60 	bl	8007d14 <lcd_print>
 8002254:	e03f      	b.n	80022d6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <menu+0x10a8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d13b      	bne.n	80022d6 <menu+0x10d2>
			if(dilSecim == 0) {
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <menu+0x1070>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d12e      	bne.n	80022c4 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <menu+0x10bc>)
 8002268:	2101      	movs	r1, #1
 800226a:	2002      	movs	r0, #2
 800226c:	f005 fd52 	bl	8007d14 <lcd_print>
 8002270:	e031      	b.n	80022d6 <menu+0x10d2>
 8002272:	bf00      	nop
 8002274:	20000241 	.word	0x20000241
 8002278:	0800d3dc 	.word	0x0800d3dc
 800227c:	20000227 	.word	0x20000227
 8002280:	0800d31c 	.word	0x0800d31c
 8002284:	0800d330 	.word	0x0800d330
 8002288:	0800d37c 	.word	0x0800d37c
 800228c:	0800d390 	.word	0x0800d390
 8002290:	40010800 	.word	0x40010800
 8002294:	2000024f 	.word	0x2000024f
 8002298:	20000118 	.word	0x20000118
 800229c:	2000024c 	.word	0x2000024c
 80022a0:	20000220 	.word	0x20000220
 80022a4:	0800d3ec 	.word	0x0800d3ec
 80022a8:	0800d400 	.word	0x0800d400
 80022ac:	20000228 	.word	0x20000228
 80022b0:	0800d414 	.word	0x0800d414
 80022b4:	0800d428 	.word	0x0800d428
 80022b8:	0800d43c 	.word	0x0800d43c
 80022bc:	0800d450 	.word	0x0800d450
 80022c0:	0800d464 	.word	0x0800d464
			} else if(dilSecim == 1){
 80022c4:	4b99      	ldr	r3, [pc, #612]	; (800252c <menu+0x1328>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d104      	bne.n	80022d6 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80022cc:	4a98      	ldr	r2, [pc, #608]	; (8002530 <menu+0x132c>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	2002      	movs	r0, #2
 80022d2:	f005 fd1f 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d6:	2102      	movs	r1, #2
 80022d8:	4896      	ldr	r0, [pc, #600]	; (8002534 <menu+0x1330>)
 80022da:	f007 f841 	bl	8009360 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d115      	bne.n	8002310 <menu+0x110c>
 80022e4:	4b94      	ldr	r3, [pc, #592]	; (8002538 <menu+0x1334>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00e      	beq.n	8002310 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80022f2:	4b92      	ldr	r3, [pc, #584]	; (800253c <menu+0x1338>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b90      	ldr	r3, [pc, #576]	; (800253c <menu+0x1338>)
 80022fc:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80022fe:	4b8f      	ldr	r3, [pc, #572]	; (800253c <menu+0x1338>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d902      	bls.n	800230c <menu+0x1108>
				kapiSecimleri = 0;
 8002306:	4b8d      	ldr	r3, [pc, #564]	; (800253c <menu+0x1338>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800230c:	f002 fc12 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002310:	2104      	movs	r1, #4
 8002312:	4888      	ldr	r0, [pc, #544]	; (8002534 <menu+0x1330>)
 8002314:	f007 f824 	bl	8009360 <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d115      	bne.n	800234a <menu+0x1146>
 800231e:	4b86      	ldr	r3, [pc, #536]	; (8002538 <menu+0x1334>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800232c:	4b83      	ldr	r3, [pc, #524]	; (800253c <menu+0x1338>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	3b01      	subs	r3, #1
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b81      	ldr	r3, [pc, #516]	; (800253c <menu+0x1338>)
 8002336:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002338:	4b80      	ldr	r3, [pc, #512]	; (800253c <menu+0x1338>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d902      	bls.n	8002346 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002340:	4b7e      	ldr	r3, [pc, #504]	; (800253c <menu+0x1338>)
 8002342:	2203      	movs	r2, #3
 8002344:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002346:	f002 fbf5 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800234a:	2108      	movs	r1, #8
 800234c:	4879      	ldr	r0, [pc, #484]	; (8002534 <menu+0x1330>)
 800234e:	f007 f807 	bl	8009360 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	d118      	bne.n	800238a <menu+0x1186>
 8002358:	4b77      	ldr	r3, [pc, #476]	; (8002538 <menu+0x1334>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d011      	beq.n	800238a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002366:	4b75      	ldr	r3, [pc, #468]	; (800253c <menu+0x1338>)
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	4b75      	ldr	r3, [pc, #468]	; (8002540 <menu+0x133c>)
 800236c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800236e:	4b73      	ldr	r3, [pc, #460]	; (800253c <menu+0x1338>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <menu+0x1180>
				altLimit = 1;
 8002376:	4b73      	ldr	r3, [pc, #460]	; (8002544 <menu+0x1340>)
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800237c:	4b71      	ldr	r3, [pc, #452]	; (8002544 <menu+0x1340>)
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <menu+0x133c>)
 8002382:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002384:	4b70      	ldr	r3, [pc, #448]	; (8002548 <menu+0x1344>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <menu+0x1348>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b08      	cmp	r3, #8
 8002390:	f040 8092 	bne.w	80024b8 <menu+0x12b4>
		if(dilSecim == 0) {
 8002394:	4b65      	ldr	r3, [pc, #404]	; (800252c <menu+0x1328>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d105      	bne.n	80023a8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800239c:	4a6c      	ldr	r2, [pc, #432]	; (8002550 <menu+0x134c>)
 800239e:	2101      	movs	r1, #1
 80023a0:	2001      	movs	r0, #1
 80023a2:	f005 fcb7 	bl	8007d14 <lcd_print>
 80023a6:	e008      	b.n	80023ba <menu+0x11b6>
		} else if(dilSecim == 1) {
 80023a8:	4b60      	ldr	r3, [pc, #384]	; (800252c <menu+0x1328>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d104      	bne.n	80023ba <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80023b0:	4a68      	ldr	r2, [pc, #416]	; (8002554 <menu+0x1350>)
 80023b2:	2101      	movs	r1, #1
 80023b4:	2001      	movs	r0, #1
 80023b6:	f005 fcad 	bl	8007d14 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80023ba:	4b67      	ldr	r3, [pc, #412]	; (8002558 <menu+0x1354>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d113      	bne.n	80023ea <menu+0x11e6>
			if(dilSecim == 0) {
 80023c2:	4b5a      	ldr	r3, [pc, #360]	; (800252c <menu+0x1328>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80023ca:	4a64      	ldr	r2, [pc, #400]	; (800255c <menu+0x1358>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	2002      	movs	r0, #2
 80023d0:	f005 fca0 	bl	8007d14 <lcd_print>
 80023d4:	e020      	b.n	8002418 <menu+0x1214>
			} else if(dilSecim == 1) {
 80023d6:	4b55      	ldr	r3, [pc, #340]	; (800252c <menu+0x1328>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d11c      	bne.n	8002418 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80023de:	4a60      	ldr	r2, [pc, #384]	; (8002560 <menu+0x135c>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	2002      	movs	r0, #2
 80023e4:	f005 fc96 	bl	8007d14 <lcd_print>
 80023e8:	e016      	b.n	8002418 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80023ea:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <menu+0x1354>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d112      	bne.n	8002418 <menu+0x1214>
			if(dilSecim == 0){
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <menu+0x1328>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80023fa:	4a5a      	ldr	r2, [pc, #360]	; (8002564 <menu+0x1360>)
 80023fc:	2101      	movs	r1, #1
 80023fe:	2002      	movs	r0, #2
 8002400:	f005 fc88 	bl	8007d14 <lcd_print>
 8002404:	e008      	b.n	8002418 <menu+0x1214>
			} else if(dilSecim == 1){
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <menu+0x1328>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d104      	bne.n	8002418 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800240e:	4a56      	ldr	r2, [pc, #344]	; (8002568 <menu+0x1364>)
 8002410:	2101      	movs	r1, #1
 8002412:	2002      	movs	r0, #2
 8002414:	f005 fc7e 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002418:	2102      	movs	r1, #2
 800241a:	4846      	ldr	r0, [pc, #280]	; (8002534 <menu+0x1330>)
 800241c:	f006 ffa0 	bl	8009360 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d115      	bne.n	8002452 <menu+0x124e>
 8002426:	4b44      	ldr	r3, [pc, #272]	; (8002538 <menu+0x1334>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002434:	4b48      	ldr	r3, [pc, #288]	; (8002558 <menu+0x1354>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <menu+0x1354>)
 800243e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002440:	4b45      	ldr	r3, [pc, #276]	; (8002558 <menu+0x1354>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d902      	bls.n	800244e <menu+0x124a>
				kapiAcTipi = 0;
 8002448:	4b43      	ldr	r3, [pc, #268]	; (8002558 <menu+0x1354>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800244e:	f002 fb71 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002452:	2104      	movs	r1, #4
 8002454:	4837      	ldr	r0, [pc, #220]	; (8002534 <menu+0x1330>)
 8002456:	f006 ff83 	bl	8009360 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d115      	bne.n	800248c <menu+0x1288>
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <menu+0x1334>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f083 0301 	eor.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00e      	beq.n	800248c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800246e:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <menu+0x1354>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3b01      	subs	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b38      	ldr	r3, [pc, #224]	; (8002558 <menu+0x1354>)
 8002478:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <menu+0x1354>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002482:	4b35      	ldr	r3, [pc, #212]	; (8002558 <menu+0x1354>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002488:	f002 fb54 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800248c:	2108      	movs	r1, #8
 800248e:	4829      	ldr	r0, [pc, #164]	; (8002534 <menu+0x1330>)
 8002490:	f006 ff66 	bl	8009360 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d10e      	bne.n	80024b8 <menu+0x12b4>
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <menu+0x1334>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f083 0301 	eor.w	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <menu+0x1354>)
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <menu+0x133c>)
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80024b2:	4b25      	ldr	r3, [pc, #148]	; (8002548 <menu+0x1344>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <menu+0x1348>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	f040 80b9 	bne.w	8002634 <menu+0x1430>
		if(dilSecim == 0){
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <menu+0x1328>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80024ca:	4a28      	ldr	r2, [pc, #160]	; (800256c <menu+0x1368>)
 80024cc:	2101      	movs	r1, #1
 80024ce:	2001      	movs	r0, #1
 80024d0:	f005 fc20 	bl	8007d14 <lcd_print>
 80024d4:	e008      	b.n	80024e8 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <menu+0x1328>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d104      	bne.n	80024e8 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80024de:	4a24      	ldr	r2, [pc, #144]	; (8002570 <menu+0x136c>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	2001      	movs	r0, #1
 80024e4:	f005 fc16 	bl	8007d14 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <menu+0x1370>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80024f0:	4a21      	ldr	r2, [pc, #132]	; (8002578 <menu+0x1374>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	2002      	movs	r0, #2
 80024f6:	f005 fc0d 	bl	8007d14 <lcd_print>
 80024fa:	e04c      	b.n	8002596 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <menu+0x1370>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d13f      	bne.n	8002584 <menu+0x1380>
			if(dilSecim == 0){
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <menu+0x1328>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <menu+0x1378>)
 800250e:	2101      	movs	r1, #1
 8002510:	2002      	movs	r0, #2
 8002512:	f005 fbff 	bl	8007d14 <lcd_print>
 8002516:	e03e      	b.n	8002596 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <menu+0x1328>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d13a      	bne.n	8002596 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <menu+0x137c>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f005 fbf5 	bl	8007d14 <lcd_print>
 800252a:	e034      	b.n	8002596 <menu+0x1392>
 800252c:	20000241 	.word	0x20000241
 8002530:	0800d478 	.word	0x0800d478
 8002534:	40010800 	.word	0x40010800
 8002538:	2000024f 	.word	0x2000024f
 800253c:	20000228 	.word	0x20000228
 8002540:	20000118 	.word	0x20000118
 8002544:	20000226 	.word	0x20000226
 8002548:	2000024c 	.word	0x2000024c
 800254c:	20000220 	.word	0x20000220
 8002550:	0800d48c 	.word	0x0800d48c
 8002554:	0800d4a0 	.word	0x0800d4a0
 8002558:	2000022c 	.word	0x2000022c
 800255c:	0800d4b4 	.word	0x0800d4b4
 8002560:	0800d4c4 	.word	0x0800d4c4
 8002564:	0800d4d4 	.word	0x0800d4d4
 8002568:	0800d4e8 	.word	0x0800d4e8
 800256c:	0800d4fc 	.word	0x0800d4fc
 8002570:	0800d510 	.word	0x0800d510
 8002574:	20000229 	.word	0x20000229
 8002578:	0800d524 	.word	0x0800d524
 800257c:	0800d538 	.word	0x0800d538
 8002580:	0800d548 	.word	0x0800d548
			}
		} else if(kapi1Tip == 2) {
 8002584:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <menu+0x15ac>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d104      	bne.n	8002596 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 800258c:	4a89      	ldr	r2, [pc, #548]	; (80027b4 <menu+0x15b0>)
 800258e:	2101      	movs	r1, #1
 8002590:	2002      	movs	r0, #2
 8002592:	f005 fbbf 	bl	8007d14 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002596:	2102      	movs	r1, #2
 8002598:	4887      	ldr	r0, [pc, #540]	; (80027b8 <menu+0x15b4>)
 800259a:	f006 fee1 	bl	8009360 <HAL_GPIO_ReadPin>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d115      	bne.n	80025d0 <menu+0x13cc>
 80025a4:	4b85      	ldr	r3, [pc, #532]	; (80027bc <menu+0x15b8>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00e      	beq.n	80025d0 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80025b2:	4b7f      	ldr	r3, [pc, #508]	; (80027b0 <menu+0x15ac>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b7d      	ldr	r3, [pc, #500]	; (80027b0 <menu+0x15ac>)
 80025bc:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80025be:	4b7c      	ldr	r3, [pc, #496]	; (80027b0 <menu+0x15ac>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d902      	bls.n	80025cc <menu+0x13c8>
				kapi1Tip = 0;
 80025c6:	4b7a      	ldr	r3, [pc, #488]	; (80027b0 <menu+0x15ac>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025cc:	f002 fab2 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025d0:	2104      	movs	r1, #4
 80025d2:	4879      	ldr	r0, [pc, #484]	; (80027b8 <menu+0x15b4>)
 80025d4:	f006 fec4 	bl	8009360 <HAL_GPIO_ReadPin>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d115      	bne.n	800260a <menu+0x1406>
 80025de:	4b77      	ldr	r3, [pc, #476]	; (80027bc <menu+0x15b8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <menu+0x15ac>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	4b6e      	ldr	r3, [pc, #440]	; (80027b0 <menu+0x15ac>)
 80025f6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80025f8:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <menu+0x15ac>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d902      	bls.n	8002606 <menu+0x1402>
		   		kapi1Tip = 2;
 8002600:	4b6b      	ldr	r3, [pc, #428]	; (80027b0 <menu+0x15ac>)
 8002602:	2202      	movs	r2, #2
 8002604:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002606:	f002 fa95 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800260a:	2108      	movs	r1, #8
 800260c:	486a      	ldr	r0, [pc, #424]	; (80027b8 <menu+0x15b4>)
 800260e:	f006 fea7 	bl	8009360 <HAL_GPIO_ReadPin>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10d      	bne.n	8002634 <menu+0x1430>
 8002618:	4b68      	ldr	r3, [pc, #416]	; (80027bc <menu+0x15b8>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	f083 0301 	eor.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002626:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <menu+0x15ac>)
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <menu+0x15bc>)
 800262c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800262e:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <menu+0x15c0>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002634:	4b64      	ldr	r3, [pc, #400]	; (80027c8 <menu+0x15c4>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b0a      	cmp	r3, #10
 800263a:	d17f      	bne.n	800273c <menu+0x1538>
		if(dilSecim == 0) {
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <menu+0x15c8>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002644:	4a62      	ldr	r2, [pc, #392]	; (80027d0 <menu+0x15cc>)
 8002646:	2101      	movs	r1, #1
 8002648:	2001      	movs	r0, #1
 800264a:	f005 fb63 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800264e:	4a61      	ldr	r2, [pc, #388]	; (80027d4 <menu+0x15d0>)
 8002650:	2101      	movs	r1, #1
 8002652:	2002      	movs	r0, #2
 8002654:	f005 fb5e 	bl	8007d14 <lcd_print>
 8002658:	e00d      	b.n	8002676 <menu+0x1472>
		} else if(dilSecim == 1) {
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <menu+0x15c8>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d109      	bne.n	8002676 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002662:	4a5d      	ldr	r2, [pc, #372]	; (80027d8 <menu+0x15d4>)
 8002664:	2101      	movs	r1, #1
 8002666:	2001      	movs	r0, #1
 8002668:	f005 fb54 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800266c:	4a5b      	ldr	r2, [pc, #364]	; (80027dc <menu+0x15d8>)
 800266e:	2101      	movs	r1, #1
 8002670:	2002      	movs	r0, #2
 8002672:	f005 fb4f 	bl	8007d14 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002676:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <menu+0x15dc>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	220a      	movs	r2, #10
 800267c:	4959      	ldr	r1, [pc, #356]	; (80027e4 <menu+0x15e0>)
 800267e:	4618      	mov	r0, r3
 8002680:	f009 fe9a 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8002684:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <menu+0x15e0>)
 8002686:	2110      	movs	r1, #16
 8002688:	2002      	movs	r0, #2
 800268a:	f005 fb43 	bl	8007d14 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800268e:	2102      	movs	r1, #2
 8002690:	4849      	ldr	r0, [pc, #292]	; (80027b8 <menu+0x15b4>)
 8002692:	f006 fe65 	bl	8009360 <HAL_GPIO_ReadPin>
 8002696:	4603      	mov	r3, r0
 8002698:	2b01      	cmp	r3, #1
 800269a:	d119      	bne.n	80026d0 <menu+0x14cc>
 800269c:	4b47      	ldr	r3, [pc, #284]	; (80027bc <menu+0x15b8>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f083 0301 	eor.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <menu+0x14cc>
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <menu+0x15ac>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10e      	bne.n	80026d0 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80026b2:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <menu+0x15dc>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <menu+0x15dc>)
 80026bc:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80026be:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <menu+0x15dc>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d902      	bls.n	80026cc <menu+0x14c8>
				kapi1AcSure = 0;
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <menu+0x15dc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026cc:	f002 fa32 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80026d0:	2104      	movs	r1, #4
 80026d2:	4839      	ldr	r0, [pc, #228]	; (80027b8 <menu+0x15b4>)
 80026d4:	f006 fe44 	bl	8009360 <HAL_GPIO_ReadPin>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d119      	bne.n	8002712 <menu+0x150e>
 80026de:	4b37      	ldr	r3, [pc, #220]	; (80027bc <menu+0x15b8>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	f083 0301 	eor.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d012      	beq.n	8002712 <menu+0x150e>
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <menu+0x15ac>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10e      	bne.n	8002712 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80026f4:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <menu+0x15dc>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <menu+0x15dc>)
 80026fe:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <menu+0x15dc>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b06      	cmp	r3, #6
 8002706:	d902      	bls.n	800270e <menu+0x150a>
		   		kapi1AcSure = 5;
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <menu+0x15dc>)
 800270a:	2205      	movs	r2, #5
 800270c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800270e:	f002 fa11 	bl	8004b34 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002712:	2108      	movs	r1, #8
 8002714:	4828      	ldr	r0, [pc, #160]	; (80027b8 <menu+0x15b4>)
 8002716:	f006 fe23 	bl	8009360 <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d10d      	bne.n	800273c <menu+0x1538>
 8002720:	4b26      	ldr	r3, [pc, #152]	; (80027bc <menu+0x15b8>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <menu+0x15dc>)
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <menu+0x15bc>)
 8002734:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002736:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <menu+0x15c0>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <menu+0x15c4>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b0b      	cmp	r3, #11
 8002742:	f040 80b5 	bne.w	80028b0 <menu+0x16ac>
		if(dilSecim == 0) {
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <menu+0x15c8>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800274e:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <menu+0x15e4>)
 8002750:	2101      	movs	r1, #1
 8002752:	2001      	movs	r0, #1
 8002754:	f005 fade 	bl	8007d14 <lcd_print>
 8002758:	e008      	b.n	800276c <menu+0x1568>
		} else if(dilSecim == 1) {
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <menu+0x15c8>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d104      	bne.n	800276c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002762:	4a22      	ldr	r2, [pc, #136]	; (80027ec <menu+0x15e8>)
 8002764:	2101      	movs	r1, #1
 8002766:	2001      	movs	r0, #1
 8002768:	f005 fad4 	bl	8007d14 <lcd_print>
		}

		if(kapi2Tip == 0) {
 800276c:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <menu+0x15ec>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002774:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <menu+0x15f0>)
 8002776:	2101      	movs	r1, #1
 8002778:	2002      	movs	r0, #2
 800277a:	f005 facb 	bl	8007d14 <lcd_print>
 800277e:	e048      	b.n	8002812 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <menu+0x15ec>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d13b      	bne.n	8002800 <menu+0x15fc>
			if(dilSecim == 0) {
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <menu+0x15c8>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002790:	4a19      	ldr	r2, [pc, #100]	; (80027f8 <menu+0x15f4>)
 8002792:	2101      	movs	r1, #1
 8002794:	2002      	movs	r0, #2
 8002796:	f005 fabd 	bl	8007d14 <lcd_print>
 800279a:	e03a      	b.n	8002812 <menu+0x160e>
			} else if(dilSecim == 1) {
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <menu+0x15c8>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d136      	bne.n	8002812 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80027a4:	4a15      	ldr	r2, [pc, #84]	; (80027fc <menu+0x15f8>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	2002      	movs	r0, #2
 80027aa:	f005 fab3 	bl	8007d14 <lcd_print>
 80027ae:	e030      	b.n	8002812 <menu+0x160e>
 80027b0:	20000229 	.word	0x20000229
 80027b4:	0800d55c 	.word	0x0800d55c
 80027b8:	40010800 	.word	0x40010800
 80027bc:	2000024f 	.word	0x2000024f
 80027c0:	20000118 	.word	0x20000118
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000220 	.word	0x20000220
 80027cc:	20000241 	.word	0x20000241
 80027d0:	0800d56c 	.word	0x0800d56c
 80027d4:	0800d580 	.word	0x0800d580
 80027d8:	0800d590 	.word	0x0800d590
 80027dc:	0800d5a4 	.word	0x0800d5a4
 80027e0:	20000239 	.word	0x20000239
 80027e4:	20000188 	.word	0x20000188
 80027e8:	0800d5b4 	.word	0x0800d5b4
 80027ec:	0800d5c8 	.word	0x0800d5c8
 80027f0:	2000022a 	.word	0x2000022a
 80027f4:	0800d524 	.word	0x0800d524
 80027f8:	0800d538 	.word	0x0800d538
 80027fc:	0800d548 	.word	0x0800d548
			}
		} else if(kapi2Tip == 2) {
 8002800:	4b8a      	ldr	r3, [pc, #552]	; (8002a2c <menu+0x1828>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d104      	bne.n	8002812 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002808:	4a89      	ldr	r2, [pc, #548]	; (8002a30 <menu+0x182c>)
 800280a:	2101      	movs	r1, #1
 800280c:	2002      	movs	r0, #2
 800280e:	f005 fa81 	bl	8007d14 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002812:	2102      	movs	r1, #2
 8002814:	4887      	ldr	r0, [pc, #540]	; (8002a34 <menu+0x1830>)
 8002816:	f006 fda3 	bl	8009360 <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d115      	bne.n	800284c <menu+0x1648>
 8002820:	4b85      	ldr	r3, [pc, #532]	; (8002a38 <menu+0x1834>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f083 0301 	eor.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800282e:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <menu+0x1828>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b7d      	ldr	r3, [pc, #500]	; (8002a2c <menu+0x1828>)
 8002838:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800283a:	4b7c      	ldr	r3, [pc, #496]	; (8002a2c <menu+0x1828>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d902      	bls.n	8002848 <menu+0x1644>
				kapi2Tip = 0;
 8002842:	4b7a      	ldr	r3, [pc, #488]	; (8002a2c <menu+0x1828>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002848:	f002 f974 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800284c:	2104      	movs	r1, #4
 800284e:	4879      	ldr	r0, [pc, #484]	; (8002a34 <menu+0x1830>)
 8002850:	f006 fd86 	bl	8009360 <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d115      	bne.n	8002886 <menu+0x1682>
 800285a:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <menu+0x1834>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	f083 0301 	eor.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00e      	beq.n	8002886 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002868:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <menu+0x1828>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	3b01      	subs	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b6e      	ldr	r3, [pc, #440]	; (8002a2c <menu+0x1828>)
 8002872:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002874:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <menu+0x1828>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d902      	bls.n	8002882 <menu+0x167e>
		   		kapi2Tip = 2;
 800287c:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <menu+0x1828>)
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002882:	f002 f957 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002886:	2108      	movs	r1, #8
 8002888:	486a      	ldr	r0, [pc, #424]	; (8002a34 <menu+0x1830>)
 800288a:	f006 fd69 	bl	8009360 <HAL_GPIO_ReadPin>
 800288e:	4603      	mov	r3, r0
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10d      	bne.n	80028b0 <menu+0x16ac>
 8002894:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <menu+0x1834>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80028a2:	4b62      	ldr	r3, [pc, #392]	; (8002a2c <menu+0x1828>)
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <menu+0x1838>)
 80028a8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80028aa:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <menu+0x183c>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80028b0:	4b64      	ldr	r3, [pc, #400]	; (8002a44 <menu+0x1840>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d17f      	bne.n	80029b8 <menu+0x17b4>
		if(dilSecim == 0) {
 80028b8:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <menu+0x1844>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80028c0:	4a62      	ldr	r2, [pc, #392]	; (8002a4c <menu+0x1848>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2001      	movs	r0, #1
 80028c6:	f005 fa25 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028ca:	4a61      	ldr	r2, [pc, #388]	; (8002a50 <menu+0x184c>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	2002      	movs	r0, #2
 80028d0:	f005 fa20 	bl	8007d14 <lcd_print>
 80028d4:	e00d      	b.n	80028f2 <menu+0x16ee>
		} else if(dilSecim == 1) {
 80028d6:	4b5c      	ldr	r3, [pc, #368]	; (8002a48 <menu+0x1844>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d109      	bne.n	80028f2 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80028de:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <menu+0x1850>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	2001      	movs	r0, #1
 80028e4:	f005 fa16 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028e8:	4a5b      	ldr	r2, [pc, #364]	; (8002a58 <menu+0x1854>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	2002      	movs	r0, #2
 80028ee:	f005 fa11 	bl	8007d14 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 80028f2:	4b5a      	ldr	r3, [pc, #360]	; (8002a5c <menu+0x1858>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	220a      	movs	r2, #10
 80028f8:	4959      	ldr	r1, [pc, #356]	; (8002a60 <menu+0x185c>)
 80028fa:	4618      	mov	r0, r3
 80028fc:	f009 fd5c 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8002900:	4a57      	ldr	r2, [pc, #348]	; (8002a60 <menu+0x185c>)
 8002902:	2110      	movs	r1, #16
 8002904:	2002      	movs	r0, #2
 8002906:	f005 fa05 	bl	8007d14 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800290a:	2102      	movs	r1, #2
 800290c:	4849      	ldr	r0, [pc, #292]	; (8002a34 <menu+0x1830>)
 800290e:	f006 fd27 	bl	8009360 <HAL_GPIO_ReadPin>
 8002912:	4603      	mov	r3, r0
 8002914:	2b01      	cmp	r3, #1
 8002916:	d119      	bne.n	800294c <menu+0x1748>
 8002918:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <menu+0x1834>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d012      	beq.n	800294c <menu+0x1748>
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <menu+0x1828>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10e      	bne.n	800294c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 800292e:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <menu+0x1858>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <menu+0x1858>)
 8002938:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800293a:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <menu+0x1858>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d902      	bls.n	8002948 <menu+0x1744>
				kapi2AcSure = 0;
 8002942:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <menu+0x1858>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002948:	f002 f8f4 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800294c:	2104      	movs	r1, #4
 800294e:	4839      	ldr	r0, [pc, #228]	; (8002a34 <menu+0x1830>)
 8002950:	f006 fd06 	bl	8009360 <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d119      	bne.n	800298e <menu+0x178a>
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <menu+0x1834>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <menu+0x178a>
 8002968:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <menu+0x1828>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10e      	bne.n	800298e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002970:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <menu+0x1858>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <menu+0x1858>)
 800297a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <menu+0x1858>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b06      	cmp	r3, #6
 8002982:	d902      	bls.n	800298a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <menu+0x1858>)
 8002986:	2205      	movs	r2, #5
 8002988:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800298a:	f002 f8d3 	bl	8004b34 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800298e:	2108      	movs	r1, #8
 8002990:	4828      	ldr	r0, [pc, #160]	; (8002a34 <menu+0x1830>)
 8002992:	f006 fce5 	bl	8009360 <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10d      	bne.n	80029b8 <menu+0x17b4>
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <menu+0x1834>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <menu+0x1858>)
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <menu+0x1838>)
 80029b0:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <menu+0x183c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80029b8:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <menu+0x1840>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b0d      	cmp	r3, #13
 80029be:	f040 80b5 	bne.w	8002b2c <menu+0x1928>
		if(dilSecim == 0) {
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <menu+0x1844>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80029ca:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <menu+0x1860>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	2001      	movs	r0, #1
 80029d0:	f005 f9a0 	bl	8007d14 <lcd_print>
 80029d4:	e008      	b.n	80029e8 <menu+0x17e4>
		} else if(dilSecim == 1){
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <menu+0x1844>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d104      	bne.n	80029e8 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <menu+0x1864>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	2001      	movs	r0, #1
 80029e4:	f005 f996 	bl	8007d14 <lcd_print>
		}

		if(kapitablaTip == 0) {
 80029e8:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <menu+0x1868>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <menu+0x186c>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f005 f98d 	bl	8007d14 <lcd_print>
 80029fa:	e048      	b.n	8002a8e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <menu+0x1868>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d13b      	bne.n	8002a7c <menu+0x1878>
			if(dilSecim == 0) {
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <menu+0x1844>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <menu+0x1870>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2002      	movs	r0, #2
 8002a12:	f005 f97f 	bl	8007d14 <lcd_print>
 8002a16:	e03a      	b.n	8002a8e <menu+0x188a>
			} else if(dilSecim == 1) {
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <menu+0x1844>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d136      	bne.n	8002a8e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002a20:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <menu+0x1874>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f005 f975 	bl	8007d14 <lcd_print>
 8002a2a:	e030      	b.n	8002a8e <menu+0x188a>
 8002a2c:	2000022a 	.word	0x2000022a
 8002a30:	0800d55c 	.word	0x0800d55c
 8002a34:	40010800 	.word	0x40010800
 8002a38:	2000024f 	.word	0x2000024f
 8002a3c:	20000118 	.word	0x20000118
 8002a40:	2000024c 	.word	0x2000024c
 8002a44:	20000220 	.word	0x20000220
 8002a48:	20000241 	.word	0x20000241
 8002a4c:	0800d5dc 	.word	0x0800d5dc
 8002a50:	0800d580 	.word	0x0800d580
 8002a54:	0800d5f0 	.word	0x0800d5f0
 8002a58:	0800d5a4 	.word	0x0800d5a4
 8002a5c:	2000023a 	.word	0x2000023a
 8002a60:	20000188 	.word	0x20000188
 8002a64:	0800d604 	.word	0x0800d604
 8002a68:	0800d618 	.word	0x0800d618
 8002a6c:	2000022b 	.word	0x2000022b
 8002a70:	0800d524 	.word	0x0800d524
 8002a74:	0800d538 	.word	0x0800d538
 8002a78:	0800d548 	.word	0x0800d548
			}
		} else if(kapitablaTip == 2) {
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <menu+0x19e8>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d104      	bne.n	8002a8e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a84:	4a5a      	ldr	r2, [pc, #360]	; (8002bf0 <menu+0x19ec>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f005 f943 	bl	8007d14 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4858      	ldr	r0, [pc, #352]	; (8002bf4 <menu+0x19f0>)
 8002a92:	f006 fc65 	bl	8009360 <HAL_GPIO_ReadPin>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d115      	bne.n	8002ac8 <menu+0x18c4>
 8002a9c:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <menu+0x19f4>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	f083 0301 	eor.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00e      	beq.n	8002ac8 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002aaa:	4b50      	ldr	r3, [pc, #320]	; (8002bec <menu+0x19e8>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	; (8002bec <menu+0x19e8>)
 8002ab4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002ab6:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <menu+0x19e8>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d902      	bls.n	8002ac4 <menu+0x18c0>
				kapitablaTip = 0;
 8002abe:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <menu+0x19e8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ac4:	f002 f836 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ac8:	2104      	movs	r1, #4
 8002aca:	484a      	ldr	r0, [pc, #296]	; (8002bf4 <menu+0x19f0>)
 8002acc:	f006 fc48 	bl	8009360 <HAL_GPIO_ReadPin>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d115      	bne.n	8002b02 <menu+0x18fe>
 8002ad6:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <menu+0x19f4>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	f083 0301 	eor.w	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002ae4:	4b41      	ldr	r3, [pc, #260]	; (8002bec <menu+0x19e8>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b3f      	ldr	r3, [pc, #252]	; (8002bec <menu+0x19e8>)
 8002aee:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002af0:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <menu+0x19e8>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d902      	bls.n	8002afe <menu+0x18fa>
		   		kapitablaTip = 2;
 8002af8:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <menu+0x19e8>)
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002afe:	f002 f819 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b02:	2108      	movs	r1, #8
 8002b04:	483b      	ldr	r0, [pc, #236]	; (8002bf4 <menu+0x19f0>)
 8002b06:	f006 fc2b 	bl	8009360 <HAL_GPIO_ReadPin>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10d      	bne.n	8002b2c <menu+0x1928>
 8002b10:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <menu+0x19f4>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f083 0301 	eor.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002b1e:	4b33      	ldr	r3, [pc, #204]	; (8002bec <menu+0x19e8>)
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <menu+0x19f8>)
 8002b24:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <menu+0x19fc>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002b2c:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <menu+0x1a00>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b0e      	cmp	r3, #14
 8002b32:	f040 80f2 	bne.w	8002d1a <menu+0x1b16>
		if(dilSecim == 0) {
 8002b36:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <menu+0x1a04>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002b3e:	4a33      	ldr	r2, [pc, #204]	; (8002c0c <menu+0x1a08>)
 8002b40:	2101      	movs	r1, #1
 8002b42:	2001      	movs	r0, #1
 8002b44:	f005 f8e6 	bl	8007d14 <lcd_print>
 8002b48:	e008      	b.n	8002b5c <menu+0x1958>
		} else if(dilSecim == 1) {
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	; (8002c08 <menu+0x1a04>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d104      	bne.n	8002b5c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002b52:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <menu+0x1a0c>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	2001      	movs	r0, #1
 8002b58:	f005 f8dc 	bl	8007d14 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <menu+0x1a10>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d113      	bne.n	8002b8c <menu+0x1988>
			if(dilSecim == 0){
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <menu+0x1a04>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b6c:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <menu+0x1a14>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	2002      	movs	r0, #2
 8002b72:	f005 f8cf 	bl	8007d14 <lcd_print>
 8002b76:	e071      	b.n	8002c5c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <menu+0x1a04>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d16d      	bne.n	8002c5c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <menu+0x1a18>)
 8002b82:	2101      	movs	r1, #1
 8002b84:	2002      	movs	r0, #2
 8002b86:	f005 f8c5 	bl	8007d14 <lcd_print>
 8002b8a:	e067      	b.n	8002c5c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b8c:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <menu+0x1a10>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d112      	bne.n	8002bba <menu+0x19b6>
			if(dilSecim == 0){
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <menu+0x1a04>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <menu+0x1a1c>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f005 f8b7 	bl	8007d14 <lcd_print>
			}
			if(dilSecim == 1){
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <menu+0x1a04>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d156      	bne.n	8002c5c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <menu+0x1a20>)
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	2002      	movs	r0, #2
 8002bb4:	f005 f8ae 	bl	8007d14 <lcd_print>
 8002bb8:	e050      	b.n	8002c5c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <menu+0x1a10>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d136      	bne.n	8002c30 <menu+0x1a2c>
			if(dilSecim == 0){
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <menu+0x1a04>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <menu+0x1a24>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2002      	movs	r0, #2
 8002bd0:	f005 f8a0 	bl	8007d14 <lcd_print>
 8002bd4:	e042      	b.n	8002c5c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <menu+0x1a04>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d13e      	bne.n	8002c5c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <menu+0x1a28>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	2002      	movs	r0, #2
 8002be4:	f005 f896 	bl	8007d14 <lcd_print>
 8002be8:	e038      	b.n	8002c5c <menu+0x1a58>
 8002bea:	bf00      	nop
 8002bec:	2000022b 	.word	0x2000022b
 8002bf0:	0800d55c 	.word	0x0800d55c
 8002bf4:	40010800 	.word	0x40010800
 8002bf8:	2000024f 	.word	0x2000024f
 8002bfc:	20000118 	.word	0x20000118
 8002c00:	2000024c 	.word	0x2000024c
 8002c04:	20000220 	.word	0x20000220
 8002c08:	20000241 	.word	0x20000241
 8002c0c:	0800d62c 	.word	0x0800d62c
 8002c10:	0800d640 	.word	0x0800d640
 8002c14:	2000022d 	.word	0x2000022d
 8002c18:	0800d654 	.word	0x0800d654
 8002c1c:	0800d664 	.word	0x0800d664
 8002c20:	0800d674 	.word	0x0800d674
 8002c24:	0800d684 	.word	0x0800d684
 8002c28:	0800d694 	.word	0x0800d694
 8002c2c:	0800d6a8 	.word	0x0800d6a8
			}
		} else if(kapiTablaAcKonum == 3) {
 8002c30:	4b9b      	ldr	r3, [pc, #620]	; (8002ea0 <menu+0x1c9c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d111      	bne.n	8002c5c <menu+0x1a58>
			if(dilSecim == 0) {
 8002c38:	4b9a      	ldr	r3, [pc, #616]	; (8002ea4 <menu+0x1ca0>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002c40:	4a99      	ldr	r2, [pc, #612]	; (8002ea8 <menu+0x1ca4>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	2002      	movs	r0, #2
 8002c46:	f005 f865 	bl	8007d14 <lcd_print>
			}
			if(dilSecim == 1) {
 8002c4a:	4b96      	ldr	r3, [pc, #600]	; (8002ea4 <menu+0x1ca0>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d104      	bne.n	8002c5c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002c52:	4a96      	ldr	r2, [pc, #600]	; (8002eac <menu+0x1ca8>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	2002      	movs	r0, #2
 8002c58:	f005 f85c 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4894      	ldr	r0, [pc, #592]	; (8002eb0 <menu+0x1cac>)
 8002c60:	f006 fb7e 	bl	8009360 <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d115      	bne.n	8002c96 <menu+0x1a92>
 8002c6a:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <menu+0x1cb0>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00e      	beq.n	8002c96 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c78:	4b89      	ldr	r3, [pc, #548]	; (8002ea0 <menu+0x1c9c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4b87      	ldr	r3, [pc, #540]	; (8002ea0 <menu+0x1c9c>)
 8002c82:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c84:	4b86      	ldr	r3, [pc, #536]	; (8002ea0 <menu+0x1c9c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d902      	bls.n	8002c92 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c8c:	4b84      	ldr	r3, [pc, #528]	; (8002ea0 <menu+0x1c9c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c92:	f001 ff4f 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c96:	2104      	movs	r1, #4
 8002c98:	4885      	ldr	r0, [pc, #532]	; (8002eb0 <menu+0x1cac>)
 8002c9a:	f006 fb61 	bl	8009360 <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d115      	bne.n	8002cd0 <menu+0x1acc>
 8002ca4:	4b83      	ldr	r3, [pc, #524]	; (8002eb4 <menu+0x1cb0>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00e      	beq.n	8002cd0 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002cb2:	4b7b      	ldr	r3, [pc, #492]	; (8002ea0 <menu+0x1c9c>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4b79      	ldr	r3, [pc, #484]	; (8002ea0 <menu+0x1c9c>)
 8002cbc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002cbe:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <menu+0x1c9c>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d902      	bls.n	8002ccc <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <menu+0x1c9c>)
 8002cc8:	2202      	movs	r2, #2
 8002cca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ccc:	f001 ff32 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cd0:	2108      	movs	r1, #8
 8002cd2:	4877      	ldr	r0, [pc, #476]	; (8002eb0 <menu+0x1cac>)
 8002cd4:	f006 fb44 	bl	8009360 <HAL_GPIO_ReadPin>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d11d      	bne.n	8002d1a <menu+0x1b16>
 8002cde:	4b75      	ldr	r3, [pc, #468]	; (8002eb4 <menu+0x1cb0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	f083 0301 	eor.w	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d016      	beq.n	8002d1a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002cec:	4b6c      	ldr	r3, [pc, #432]	; (8002ea0 <menu+0x1c9c>)
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <menu+0x1cb4>)
 8002cf2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002cf6:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <menu+0x1c9c>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <menu+0x1b02>
 8002cfe:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <menu+0x1c9c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d106      	bne.n	8002d14 <menu+0x1b10>
				altLimit = 1;
 8002d06:	4b6d      	ldr	r3, [pc, #436]	; (8002ebc <menu+0x1cb8>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d0c:	4b6b      	ldr	r3, [pc, #428]	; (8002ebc <menu+0x1cb8>)
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	4b69      	ldr	r3, [pc, #420]	; (8002eb8 <menu+0x1cb4>)
 8002d12:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <menu+0x1cbc>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <menu+0x1cc0>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	d17f      	bne.n	8002e22 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002d22:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <menu+0x1ca0>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002d2a:	4a67      	ldr	r2, [pc, #412]	; (8002ec8 <menu+0x1cc4>)
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f004 fff0 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d34:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <menu+0x1cc8>)
 8002d36:	2101      	movs	r1, #1
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f004 ffeb 	bl	8007d14 <lcd_print>
 8002d3e:	e00d      	b.n	8002d5c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002d40:	4b58      	ldr	r3, [pc, #352]	; (8002ea4 <menu+0x1ca0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d109      	bne.n	8002d5c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002d48:	4a61      	ldr	r2, [pc, #388]	; (8002ed0 <menu+0x1ccc>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f004 ffe1 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d52:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <menu+0x1cd0>)
 8002d54:	2101      	movs	r1, #1
 8002d56:	2002      	movs	r0, #2
 8002d58:	f004 ffdc 	bl	8007d14 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <menu+0x1cd4>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	220a      	movs	r2, #10
 8002d62:	495e      	ldr	r1, [pc, #376]	; (8002edc <menu+0x1cd8>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f009 fb27 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8002d6a:	4a5c      	ldr	r2, [pc, #368]	; (8002edc <menu+0x1cd8>)
 8002d6c:	2110      	movs	r1, #16
 8002d6e:	2002      	movs	r0, #2
 8002d70:	f004 ffd0 	bl	8007d14 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d74:	2102      	movs	r1, #2
 8002d76:	484e      	ldr	r0, [pc, #312]	; (8002eb0 <menu+0x1cac>)
 8002d78:	f006 faf2 	bl	8009360 <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d119      	bne.n	8002db6 <menu+0x1bb2>
 8002d82:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <menu+0x1cb0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <menu+0x1bb2>
 8002d90:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <menu+0x1cdc>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10e      	bne.n	8002db6 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d98:	4b4f      	ldr	r3, [pc, #316]	; (8002ed8 <menu+0x1cd4>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b4d      	ldr	r3, [pc, #308]	; (8002ed8 <menu+0x1cd4>)
 8002da2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002da4:	4b4c      	ldr	r3, [pc, #304]	; (8002ed8 <menu+0x1cd4>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d902      	bls.n	8002db2 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002dac:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <menu+0x1cd4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002db2:	f001 febf 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002db6:	2104      	movs	r1, #4
 8002db8:	483d      	ldr	r0, [pc, #244]	; (8002eb0 <menu+0x1cac>)
 8002dba:	f006 fad1 	bl	8009360 <HAL_GPIO_ReadPin>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d119      	bne.n	8002df8 <menu+0x1bf4>
 8002dc4:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <menu+0x1cb0>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f083 0301 	eor.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <menu+0x1bf4>
 8002dd2:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <menu+0x1cdc>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10e      	bne.n	8002df8 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <menu+0x1cd4>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <menu+0x1cd4>)
 8002de4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002de6:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <menu+0x1cd4>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d902      	bls.n	8002df4 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002dee:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <menu+0x1cd4>)
 8002df0:	2205      	movs	r2, #5
 8002df2:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002df4:	f001 fe9e 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df8:	2108      	movs	r1, #8
 8002dfa:	482d      	ldr	r0, [pc, #180]	; (8002eb0 <menu+0x1cac>)
 8002dfc:	f006 fab0 	bl	8009360 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10d      	bne.n	8002e22 <menu+0x1c1e>
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <menu+0x1cb0>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f083 0301 	eor.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002e14:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <menu+0x1cd4>)
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <menu+0x1cb4>)
 8002e1a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <menu+0x1cbc>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002e22:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <menu+0x1cc0>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	f040 80bc 	bne.w	8002fa4 <menu+0x1da0>
		if(dilSecim == 0) {
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <menu+0x1ca0>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002e34:	4a2b      	ldr	r2, [pc, #172]	; (8002ee4 <menu+0x1ce0>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f004 ff6b 	bl	8007d14 <lcd_print>
 8002e3e:	e008      	b.n	8002e52 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002e40:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <menu+0x1ca0>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d104      	bne.n	8002e52 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002e48:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <menu+0x1ce4>)
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f004 ff61 	bl	8007d14 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002e52:	4b26      	ldr	r3, [pc, #152]	; (8002eec <menu+0x1ce8>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <menu+0x1ca0>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002e62:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <menu+0x1ca4>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	2002      	movs	r0, #2
 8002e68:	f004 ff54 	bl	8007d14 <lcd_print>
 8002e6c:	e04b      	b.n	8002f06 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <menu+0x1ca0>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d147      	bne.n	8002f06 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e76:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <menu+0x1ca8>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2002      	movs	r0, #2
 8002e7c:	f004 ff4a 	bl	8007d14 <lcd_print>
 8002e80:	e041      	b.n	8002f06 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e82:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <menu+0x1ce8>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d13d      	bne.n	8002f06 <menu+0x1d02>
			if(dilSecim == 0) {
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <menu+0x1ca0>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d130      	bne.n	8002ef4 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <menu+0x1cec>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	2002      	movs	r0, #2
 8002e98:	f004 ff3c 	bl	8007d14 <lcd_print>
 8002e9c:	e033      	b.n	8002f06 <menu+0x1d02>
 8002e9e:	bf00      	nop
 8002ea0:	2000022d 	.word	0x2000022d
 8002ea4:	20000241 	.word	0x20000241
 8002ea8:	0800d31c 	.word	0x0800d31c
 8002eac:	0800d330 	.word	0x0800d330
 8002eb0:	40010800 	.word	0x40010800
 8002eb4:	2000024f 	.word	0x2000024f
 8002eb8:	20000118 	.word	0x20000118
 8002ebc:	20000226 	.word	0x20000226
 8002ec0:	2000024c 	.word	0x2000024c
 8002ec4:	20000220 	.word	0x20000220
 8002ec8:	0800d6bc 	.word	0x0800d6bc
 8002ecc:	0800d580 	.word	0x0800d580
 8002ed0:	0800d6d0 	.word	0x0800d6d0
 8002ed4:	0800d5a4 	.word	0x0800d5a4
 8002ed8:	2000023b 	.word	0x2000023b
 8002edc:	20000188 	.word	0x20000188
 8002ee0:	2000022b 	.word	0x2000022b
 8002ee4:	0800d6e4 	.word	0x0800d6e4
 8002ee8:	0800d6f8 	.word	0x0800d6f8
 8002eec:	2000022e 	.word	0x2000022e
 8002ef0:	0800d37c 	.word	0x0800d37c
			} else if(dilSecim == 1) {
 8002ef4:	4b99      	ldr	r3, [pc, #612]	; (800315c <menu+0x1f58>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d104      	bne.n	8002f06 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002efc:	4a98      	ldr	r2, [pc, #608]	; (8003160 <menu+0x1f5c>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	2002      	movs	r0, #2
 8002f02:	f004 ff07 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f06:	2102      	movs	r1, #2
 8002f08:	4896      	ldr	r0, [pc, #600]	; (8003164 <menu+0x1f60>)
 8002f0a:	f006 fa29 	bl	8009360 <HAL_GPIO_ReadPin>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d115      	bne.n	8002f40 <menu+0x1d3c>
 8002f14:	4b94      	ldr	r3, [pc, #592]	; (8003168 <menu+0x1f64>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f083 0301 	eor.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002f22:	4b92      	ldr	r3, [pc, #584]	; (800316c <menu+0x1f68>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b90      	ldr	r3, [pc, #576]	; (800316c <menu+0x1f68>)
 8002f2c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002f2e:	4b8f      	ldr	r3, [pc, #572]	; (800316c <menu+0x1f68>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d902      	bls.n	8002f3c <menu+0x1d38>
				yukariYavasLimit = 0;
 8002f36:	4b8d      	ldr	r3, [pc, #564]	; (800316c <menu+0x1f68>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f3c:	f001 fdfa 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f40:	2104      	movs	r1, #4
 8002f42:	4888      	ldr	r0, [pc, #544]	; (8003164 <menu+0x1f60>)
 8002f44:	f006 fa0c 	bl	8009360 <HAL_GPIO_ReadPin>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d115      	bne.n	8002f7a <menu+0x1d76>
 8002f4e:	4b86      	ldr	r3, [pc, #536]	; (8003168 <menu+0x1f64>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	f083 0301 	eor.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002f5c:	4b83      	ldr	r3, [pc, #524]	; (800316c <menu+0x1f68>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b81      	ldr	r3, [pc, #516]	; (800316c <menu+0x1f68>)
 8002f66:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002f68:	4b80      	ldr	r3, [pc, #512]	; (800316c <menu+0x1f68>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002f70:	4b7e      	ldr	r3, [pc, #504]	; (800316c <menu+0x1f68>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f76:	f001 fddd 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7a:	2108      	movs	r1, #8
 8002f7c:	4879      	ldr	r0, [pc, #484]	; (8003164 <menu+0x1f60>)
 8002f7e:	f006 f9ef 	bl	8009360 <HAL_GPIO_ReadPin>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10d      	bne.n	8002fa4 <menu+0x1da0>
 8002f88:	4b77      	ldr	r3, [pc, #476]	; (8003168 <menu+0x1f64>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f083 0301 	eor.w	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002f96:	4b75      	ldr	r3, [pc, #468]	; (800316c <menu+0x1f68>)
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <menu+0x1f6c>)
 8002f9c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f9e:	4b75      	ldr	r3, [pc, #468]	; (8003174 <menu+0x1f70>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002fa4:	4b74      	ldr	r3, [pc, #464]	; (8003178 <menu+0x1f74>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b11      	cmp	r3, #17
 8002faa:	f040 80c3 	bne.w	8003134 <menu+0x1f30>
		if(dilSecim == 0) {
 8002fae:	4b6b      	ldr	r3, [pc, #428]	; (800315c <menu+0x1f58>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d105      	bne.n	8002fc2 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002fb6:	4a71      	ldr	r2, [pc, #452]	; (800317c <menu+0x1f78>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f004 feaa 	bl	8007d14 <lcd_print>
 8002fc0:	e008      	b.n	8002fd4 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002fc2:	4b66      	ldr	r3, [pc, #408]	; (800315c <menu+0x1f58>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d104      	bne.n	8002fd4 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002fca:	4a6d      	ldr	r2, [pc, #436]	; (8003180 <menu+0x1f7c>)
 8002fcc:	2101      	movs	r1, #1
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f004 fea0 	bl	8007d14 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002fd4:	4b6b      	ldr	r3, [pc, #428]	; (8003184 <menu+0x1f80>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d113      	bne.n	8003004 <menu+0x1e00>
			if(dilSecim == 0){
 8002fdc:	4b5f      	ldr	r3, [pc, #380]	; (800315c <menu+0x1f58>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002fe4:	4a68      	ldr	r2, [pc, #416]	; (8003188 <menu+0x1f84>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f004 fe93 	bl	8007d14 <lcd_print>
 8002fee:	e038      	b.n	8003062 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002ff0:	4b5a      	ldr	r3, [pc, #360]	; (800315c <menu+0x1f58>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d134      	bne.n	8003062 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002ff8:	4a64      	ldr	r2, [pc, #400]	; (800318c <menu+0x1f88>)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	2002      	movs	r0, #2
 8002ffe:	f004 fe89 	bl	8007d14 <lcd_print>
 8003002:	e02e      	b.n	8003062 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003004:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <menu+0x1f80>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d113      	bne.n	8003034 <menu+0x1e30>
			if(dilSecim == 0){
 800300c:	4b53      	ldr	r3, [pc, #332]	; (800315c <menu+0x1f58>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003014:	4a5e      	ldr	r2, [pc, #376]	; (8003190 <menu+0x1f8c>)
 8003016:	2101      	movs	r1, #1
 8003018:	2002      	movs	r0, #2
 800301a:	f004 fe7b 	bl	8007d14 <lcd_print>
 800301e:	e020      	b.n	8003062 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003020:	4b4e      	ldr	r3, [pc, #312]	; (800315c <menu+0x1f58>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11c      	bne.n	8003062 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003028:	4a5a      	ldr	r2, [pc, #360]	; (8003194 <menu+0x1f90>)
 800302a:	2101      	movs	r1, #1
 800302c:	2002      	movs	r0, #2
 800302e:	f004 fe71 	bl	8007d14 <lcd_print>
 8003032:	e016      	b.n	8003062 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <menu+0x1f80>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d112      	bne.n	8003062 <menu+0x1e5e>
			if(dilSecim == 0) {
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <menu+0x1f58>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003044:	4a54      	ldr	r2, [pc, #336]	; (8003198 <menu+0x1f94>)
 8003046:	2101      	movs	r1, #1
 8003048:	2002      	movs	r0, #2
 800304a:	f004 fe63 	bl	8007d14 <lcd_print>
 800304e:	e008      	b.n	8003062 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <menu+0x1f58>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d104      	bne.n	8003062 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003058:	4a50      	ldr	r2, [pc, #320]	; (800319c <menu+0x1f98>)
 800305a:	2101      	movs	r1, #1
 800305c:	2002      	movs	r0, #2
 800305e:	f004 fe59 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003062:	2102      	movs	r1, #2
 8003064:	483f      	ldr	r0, [pc, #252]	; (8003164 <menu+0x1f60>)
 8003066:	f006 f97b 	bl	8009360 <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b01      	cmp	r3, #1
 800306e:	d115      	bne.n	800309c <menu+0x1e98>
 8003070:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <menu+0x1f64>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	f083 0301 	eor.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00e      	beq.n	800309c <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800307e:	4b41      	ldr	r3, [pc, #260]	; (8003184 <menu+0x1f80>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <menu+0x1f80>)
 8003088:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800308a:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <menu+0x1f80>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d902      	bls.n	8003098 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003092:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <menu+0x1f80>)
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003098:	f001 fd4c 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800309c:	2104      	movs	r1, #4
 800309e:	4831      	ldr	r0, [pc, #196]	; (8003164 <menu+0x1f60>)
 80030a0:	f006 f95e 	bl	8009360 <HAL_GPIO_ReadPin>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d115      	bne.n	80030d6 <menu+0x1ed2>
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <menu+0x1f64>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80030b8:	4b32      	ldr	r3, [pc, #200]	; (8003184 <menu+0x1f80>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	3b01      	subs	r3, #1
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <menu+0x1f80>)
 80030c2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <menu+0x1f80>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d902      	bls.n	80030d2 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80030cc:	4b2d      	ldr	r3, [pc, #180]	; (8003184 <menu+0x1f80>)
 80030ce:	2202      	movs	r2, #2
 80030d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030d2:	f001 fd2f 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030d6:	2108      	movs	r1, #8
 80030d8:	4822      	ldr	r0, [pc, #136]	; (8003164 <menu+0x1f60>)
 80030da:	f006 f941 	bl	8009360 <HAL_GPIO_ReadPin>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d127      	bne.n	8003134 <menu+0x1f30>
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <menu+0x1f64>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	f083 0301 	eor.w	r3, r3, #1
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d020      	beq.n	8003134 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <menu+0x1f80>)
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <menu+0x1f6c>)
 80030f8:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <menu+0x1f80>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <menu+0x1f06>
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <menu+0x1f80>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d106      	bne.n	8003118 <menu+0x1f14>
				calismaSekli = 0;
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <menu+0x1f9c>)
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003110:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <menu+0x1f9c>)
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <menu+0x1f6c>)
 8003116:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003118:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <menu+0x1f80>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <menu+0x1fa0>)
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003126:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <menu+0x1fa0>)
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <menu+0x1f6c>)
 800312c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <menu+0x1f70>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <menu+0x1f74>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b12      	cmp	r3, #18
 800313a:	f040 80d5 	bne.w	80032e8 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <menu+0x1f80>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d13c      	bne.n	80031c0 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <menu+0x1f58>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12e      	bne.n	80031ac <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800314e:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <menu+0x1fa4>)
 8003150:	2101      	movs	r1, #1
 8003152:	2001      	movs	r0, #1
 8003154:	f004 fdde 	bl	8007d14 <lcd_print>
 8003158:	e048      	b.n	80031ec <menu+0x1fe8>
 800315a:	bf00      	nop
 800315c:	20000241 	.word	0x20000241
 8003160:	0800d390 	.word	0x0800d390
 8003164:	40010800 	.word	0x40010800
 8003168:	2000024f 	.word	0x2000024f
 800316c:	2000022e 	.word	0x2000022e
 8003170:	20000118 	.word	0x20000118
 8003174:	2000024c 	.word	0x2000024c
 8003178:	20000220 	.word	0x20000220
 800317c:	0800d70c 	.word	0x0800d70c
 8003180:	0800d720 	.word	0x0800d720
 8003184:	2000022f 	.word	0x2000022f
 8003188:	0800d734 	.word	0x0800d734
 800318c:	0800d744 	.word	0x0800d744
 8003190:	0800d754 	.word	0x0800d754
 8003194:	0800d764 	.word	0x0800d764
 8003198:	0800d31c 	.word	0x0800d31c
 800319c:	0800d330 	.word	0x0800d330
 80031a0:	20000221 	.word	0x20000221
 80031a4:	20000232 	.word	0x20000232
 80031a8:	0800d774 	.word	0x0800d774
			} else if(dilSecim == 1) {
 80031ac:	4b7b      	ldr	r3, [pc, #492]	; (800339c <menu+0x2198>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d11b      	bne.n	80031ec <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80031b4:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <menu+0x219c>)
 80031b6:	2101      	movs	r1, #1
 80031b8:	2001      	movs	r0, #1
 80031ba:	f004 fdab 	bl	8007d14 <lcd_print>
 80031be:	e015      	b.n	80031ec <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031c0:	4b78      	ldr	r3, [pc, #480]	; (80033a4 <menu+0x21a0>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d111      	bne.n	80031ec <menu+0x1fe8>
			if(dilSecim == 0){
 80031c8:	4b74      	ldr	r3, [pc, #464]	; (800339c <menu+0x2198>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80031d0:	4a75      	ldr	r2, [pc, #468]	; (80033a8 <menu+0x21a4>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	2001      	movs	r0, #1
 80031d6:	f004 fd9d 	bl	8007d14 <lcd_print>
			}
			if(dilSecim == 1){
 80031da:	4b70      	ldr	r3, [pc, #448]	; (800339c <menu+0x2198>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d104      	bne.n	80031ec <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80031e2:	4a72      	ldr	r2, [pc, #456]	; (80033ac <menu+0x21a8>)
 80031e4:	2101      	movs	r1, #1
 80031e6:	2001      	movs	r0, #1
 80031e8:	f004 fd94 	bl	8007d14 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80031ec:	4b70      	ldr	r3, [pc, #448]	; (80033b0 <menu+0x21ac>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d113      	bne.n	800321c <menu+0x2018>
			if(dilSecim == 0) {
 80031f4:	4b69      	ldr	r3, [pc, #420]	; (800339c <menu+0x2198>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80031fc:	4a6d      	ldr	r2, [pc, #436]	; (80033b4 <menu+0x21b0>)
 80031fe:	2101      	movs	r1, #1
 8003200:	2002      	movs	r0, #2
 8003202:	f004 fd87 	bl	8007d14 <lcd_print>
 8003206:	e020      	b.n	800324a <menu+0x2046>
			} else if(dilSecim == 1){
 8003208:	4b64      	ldr	r3, [pc, #400]	; (800339c <menu+0x2198>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d11c      	bne.n	800324a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003210:	4a69      	ldr	r2, [pc, #420]	; (80033b8 <menu+0x21b4>)
 8003212:	2101      	movs	r1, #1
 8003214:	2002      	movs	r0, #2
 8003216:	f004 fd7d 	bl	8007d14 <lcd_print>
 800321a:	e016      	b.n	800324a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800321c:	4b64      	ldr	r3, [pc, #400]	; (80033b0 <menu+0x21ac>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d112      	bne.n	800324a <menu+0x2046>
			if(dilSecim == 0){
 8003224:	4b5d      	ldr	r3, [pc, #372]	; (800339c <menu+0x2198>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800322c:	4a63      	ldr	r2, [pc, #396]	; (80033bc <menu+0x21b8>)
 800322e:	2101      	movs	r1, #1
 8003230:	2002      	movs	r0, #2
 8003232:	f004 fd6f 	bl	8007d14 <lcd_print>
 8003236:	e008      	b.n	800324a <menu+0x2046>
			} else if(dilSecim == 1){
 8003238:	4b58      	ldr	r3, [pc, #352]	; (800339c <menu+0x2198>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d104      	bne.n	800324a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003240:	4a5f      	ldr	r2, [pc, #380]	; (80033c0 <menu+0x21bc>)
 8003242:	2101      	movs	r1, #1
 8003244:	2002      	movs	r0, #2
 8003246:	f004 fd65 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800324a:	2102      	movs	r1, #2
 800324c:	485d      	ldr	r0, [pc, #372]	; (80033c4 <menu+0x21c0>)
 800324e:	f006 f887 	bl	8009360 <HAL_GPIO_ReadPin>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d115      	bne.n	8003284 <menu+0x2080>
 8003258:	4b5b      	ldr	r3, [pc, #364]	; (80033c8 <menu+0x21c4>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f083 0301 	eor.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003266:	4b52      	ldr	r3, [pc, #328]	; (80033b0 <menu+0x21ac>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	3301      	adds	r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <menu+0x21ac>)
 8003270:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003272:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <menu+0x21ac>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d902      	bls.n	8003280 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800327a:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <menu+0x21ac>)
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003280:	f001 fc58 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003284:	2104      	movs	r1, #4
 8003286:	484f      	ldr	r0, [pc, #316]	; (80033c4 <menu+0x21c0>)
 8003288:	f006 f86a 	bl	8009360 <HAL_GPIO_ReadPin>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d115      	bne.n	80032be <menu+0x20ba>
 8003292:	4b4d      	ldr	r3, [pc, #308]	; (80033c8 <menu+0x21c4>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	f083 0301 	eor.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00e      	beq.n	80032be <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <menu+0x21ac>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <menu+0x21ac>)
 80032aa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80032ac:	4b40      	ldr	r3, [pc, #256]	; (80033b0 <menu+0x21ac>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80032b4:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <menu+0x21ac>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032ba:	f001 fc3b 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032be:	2108      	movs	r1, #8
 80032c0:	4840      	ldr	r0, [pc, #256]	; (80033c4 <menu+0x21c0>)
 80032c2:	f006 f84d 	bl	8009360 <HAL_GPIO_ReadPin>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10d      	bne.n	80032e8 <menu+0x20e4>
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <menu+0x21c4>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	f083 0301 	eor.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80032da:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <menu+0x21ac>)
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <menu+0x21c8>)
 80032e0:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <menu+0x21cc>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <menu+0x21d0>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b13      	cmp	r3, #19
 80032ee:	f040 80d5 	bne.w	800349c <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80032f2:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <menu+0x21a0>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d113      	bne.n	8003322 <menu+0x211e>
			if(dilSecim == 0) {
 80032fa:	4b28      	ldr	r3, [pc, #160]	; (800339c <menu+0x2198>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d105      	bne.n	800330e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003302:	4a35      	ldr	r2, [pc, #212]	; (80033d8 <menu+0x21d4>)
 8003304:	2101      	movs	r1, #1
 8003306:	2001      	movs	r0, #1
 8003308:	f004 fd04 	bl	8007d14 <lcd_print>
 800330c:	e01f      	b.n	800334e <menu+0x214a>
			} else if(dilSecim == 1) {
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <menu+0x2198>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d11b      	bne.n	800334e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003316:	4a31      	ldr	r2, [pc, #196]	; (80033dc <menu+0x21d8>)
 8003318:	2101      	movs	r1, #1
 800331a:	2001      	movs	r0, #1
 800331c:	f004 fcfa 	bl	8007d14 <lcd_print>
 8003320:	e015      	b.n	800334e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <menu+0x21a0>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d111      	bne.n	800334e <menu+0x214a>
			if(dilSecim == 0) {
 800332a:	4b1c      	ldr	r3, [pc, #112]	; (800339c <menu+0x2198>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003332:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <menu+0x21dc>)
 8003334:	2101      	movs	r1, #1
 8003336:	2001      	movs	r0, #1
 8003338:	f004 fcec 	bl	8007d14 <lcd_print>
			}
			if(dilSecim == 1) {
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <menu+0x2198>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d104      	bne.n	800334e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003344:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <menu+0x21e0>)
 8003346:	2101      	movs	r1, #1
 8003348:	2001      	movs	r0, #1
 800334a:	f004 fce3 	bl	8007d14 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <menu+0x21e4>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d113      	bne.n	800337e <menu+0x217a>
			if(dilSecim == 0) {
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <menu+0x2198>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800335e:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <menu+0x21b0>)
 8003360:	2101      	movs	r1, #1
 8003362:	2002      	movs	r0, #2
 8003364:	f004 fcd6 	bl	8007d14 <lcd_print>
 8003368:	e049      	b.n	80033fe <menu+0x21fa>
			} else if(dilSecim == 1) {
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <menu+0x2198>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d145      	bne.n	80033fe <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003372:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <menu+0x21b4>)
 8003374:	2101      	movs	r1, #1
 8003376:	2002      	movs	r0, #2
 8003378:	f004 fccc 	bl	8007d14 <lcd_print>
 800337c:	e03f      	b.n	80033fe <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800337e:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <menu+0x21e4>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d13b      	bne.n	80033fe <menu+0x21fa>
			if(dilSecim == 0) {
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <menu+0x2198>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d12e      	bne.n	80033ec <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800338e:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <menu+0x21b8>)
 8003390:	2101      	movs	r1, #1
 8003392:	2002      	movs	r0, #2
 8003394:	f004 fcbe 	bl	8007d14 <lcd_print>
 8003398:	e031      	b.n	80033fe <menu+0x21fa>
 800339a:	bf00      	nop
 800339c:	20000241 	.word	0x20000241
 80033a0:	0800d788 	.word	0x0800d788
 80033a4:	2000022f 	.word	0x2000022f
 80033a8:	0800d798 	.word	0x0800d798
 80033ac:	0800d7ac 	.word	0x0800d7ac
 80033b0:	20000230 	.word	0x20000230
 80033b4:	0800d31c 	.word	0x0800d31c
 80033b8:	0800d330 	.word	0x0800d330
 80033bc:	0800d37c 	.word	0x0800d37c
 80033c0:	0800d390 	.word	0x0800d390
 80033c4:	40010800 	.word	0x40010800
 80033c8:	2000024f 	.word	0x2000024f
 80033cc:	20000118 	.word	0x20000118
 80033d0:	2000024c 	.word	0x2000024c
 80033d4:	20000220 	.word	0x20000220
 80033d8:	0800d7c0 	.word	0x0800d7c0
 80033dc:	0800d7d4 	.word	0x0800d7d4
 80033e0:	0800d7e8 	.word	0x0800d7e8
 80033e4:	0800d7fc 	.word	0x0800d7fc
 80033e8:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 80033ec:	4b90      	ldr	r3, [pc, #576]	; (8003630 <menu+0x242c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d104      	bne.n	80033fe <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80033f4:	4a8f      	ldr	r2, [pc, #572]	; (8003634 <menu+0x2430>)
 80033f6:	2101      	movs	r1, #1
 80033f8:	2002      	movs	r0, #2
 80033fa:	f004 fc8b 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fe:	2102      	movs	r1, #2
 8003400:	488d      	ldr	r0, [pc, #564]	; (8003638 <menu+0x2434>)
 8003402:	f005 ffad 	bl	8009360 <HAL_GPIO_ReadPin>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d115      	bne.n	8003438 <menu+0x2234>
 800340c:	4b8b      	ldr	r3, [pc, #556]	; (800363c <menu+0x2438>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	f083 0301 	eor.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800341a:	4b89      	ldr	r3, [pc, #548]	; (8003640 <menu+0x243c>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	3301      	adds	r3, #1
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b87      	ldr	r3, [pc, #540]	; (8003640 <menu+0x243c>)
 8003424:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003426:	4b86      	ldr	r3, [pc, #536]	; (8003640 <menu+0x243c>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d902      	bls.n	8003434 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800342e:	4b84      	ldr	r3, [pc, #528]	; (8003640 <menu+0x243c>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003434:	f001 fb7e 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003438:	2104      	movs	r1, #4
 800343a:	487f      	ldr	r0, [pc, #508]	; (8003638 <menu+0x2434>)
 800343c:	f005 ff90 	bl	8009360 <HAL_GPIO_ReadPin>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d115      	bne.n	8003472 <menu+0x226e>
 8003446:	4b7d      	ldr	r3, [pc, #500]	; (800363c <menu+0x2438>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00e      	beq.n	8003472 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003454:	4b7a      	ldr	r3, [pc, #488]	; (8003640 <menu+0x243c>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	3b01      	subs	r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b78      	ldr	r3, [pc, #480]	; (8003640 <menu+0x243c>)
 800345e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003460:	4b77      	ldr	r3, [pc, #476]	; (8003640 <menu+0x243c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003468:	4b75      	ldr	r3, [pc, #468]	; (8003640 <menu+0x243c>)
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800346e:	f001 fb61 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003472:	2108      	movs	r1, #8
 8003474:	4870      	ldr	r0, [pc, #448]	; (8003638 <menu+0x2434>)
 8003476:	f005 ff73 	bl	8009360 <HAL_GPIO_ReadPin>
 800347a:	4603      	mov	r3, r0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10d      	bne.n	800349c <menu+0x2298>
 8003480:	4b6e      	ldr	r3, [pc, #440]	; (800363c <menu+0x2438>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f083 0301 	eor.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <menu+0x243c>)
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <menu+0x2440>)
 8003494:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003496:	4b6c      	ldr	r3, [pc, #432]	; (8003648 <menu+0x2444>)
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800349c:	4b6b      	ldr	r3, [pc, #428]	; (800364c <menu+0x2448>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b14      	cmp	r3, #20
 80034a2:	f040 80b5 	bne.w	8003610 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <menu+0x244c>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d113      	bne.n	80034d6 <menu+0x22d2>
			if(dilSecim == 0) {
 80034ae:	4b60      	ldr	r3, [pc, #384]	; (8003630 <menu+0x242c>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80034b6:	4a67      	ldr	r2, [pc, #412]	; (8003654 <menu+0x2450>)
 80034b8:	2101      	movs	r1, #1
 80034ba:	2001      	movs	r0, #1
 80034bc:	f004 fc2a 	bl	8007d14 <lcd_print>
 80034c0:	e020      	b.n	8003504 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034c2:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <menu+0x242c>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d11c      	bne.n	8003504 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80034ca:	4a63      	ldr	r2, [pc, #396]	; (8003658 <menu+0x2454>)
 80034cc:	2101      	movs	r1, #1
 80034ce:	2001      	movs	r0, #1
 80034d0:	f004 fc20 	bl	8007d14 <lcd_print>
 80034d4:	e016      	b.n	8003504 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80034d6:	4b5e      	ldr	r3, [pc, #376]	; (8003650 <menu+0x244c>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d112      	bne.n	8003504 <menu+0x2300>
			if(dilSecim == 0) {
 80034de:	4b54      	ldr	r3, [pc, #336]	; (8003630 <menu+0x242c>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80034e6:	4a5d      	ldr	r2, [pc, #372]	; (800365c <menu+0x2458>)
 80034e8:	2101      	movs	r1, #1
 80034ea:	2001      	movs	r0, #1
 80034ec:	f004 fc12 	bl	8007d14 <lcd_print>
 80034f0:	e008      	b.n	8003504 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034f2:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <menu+0x242c>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d104      	bne.n	8003504 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80034fa:	4a59      	ldr	r2, [pc, #356]	; (8003660 <menu+0x245c>)
 80034fc:	2101      	movs	r1, #1
 80034fe:	2001      	movs	r0, #1
 8003500:	f004 fc08 	bl	8007d14 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003504:	4b57      	ldr	r3, [pc, #348]	; (8003664 <menu+0x2460>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d113      	bne.n	8003534 <menu+0x2330>
			if(dilSecim == 0) {
 800350c:	4b48      	ldr	r3, [pc, #288]	; (8003630 <menu+0x242c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003514:	4a54      	ldr	r2, [pc, #336]	; (8003668 <menu+0x2464>)
 8003516:	2101      	movs	r1, #1
 8003518:	2002      	movs	r0, #2
 800351a:	f004 fbfb 	bl	8007d14 <lcd_print>
 800351e:	e020      	b.n	8003562 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003520:	4b43      	ldr	r3, [pc, #268]	; (8003630 <menu+0x242c>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d11c      	bne.n	8003562 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003528:	4a50      	ldr	r2, [pc, #320]	; (800366c <menu+0x2468>)
 800352a:	2101      	movs	r1, #1
 800352c:	2002      	movs	r0, #2
 800352e:	f004 fbf1 	bl	8007d14 <lcd_print>
 8003532:	e016      	b.n	8003562 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <menu+0x2460>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d112      	bne.n	8003562 <menu+0x235e>
			if(dilSecim == 0) {
 800353c:	4b3c      	ldr	r3, [pc, #240]	; (8003630 <menu+0x242c>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003544:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <menu+0x246c>)
 8003546:	2101      	movs	r1, #1
 8003548:	2002      	movs	r0, #2
 800354a:	f004 fbe3 	bl	8007d14 <lcd_print>
 800354e:	e008      	b.n	8003562 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <menu+0x242c>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d104      	bne.n	8003562 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003558:	4a46      	ldr	r2, [pc, #280]	; (8003674 <menu+0x2470>)
 800355a:	2101      	movs	r1, #1
 800355c:	2002      	movs	r0, #2
 800355e:	f004 fbd9 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003562:	2102      	movs	r1, #2
 8003564:	4834      	ldr	r0, [pc, #208]	; (8003638 <menu+0x2434>)
 8003566:	f005 fefb 	bl	8009360 <HAL_GPIO_ReadPin>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d119      	bne.n	80035a4 <menu+0x23a0>
 8003570:	4b32      	ldr	r3, [pc, #200]	; (800363c <menu+0x2438>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d012      	beq.n	80035a4 <menu+0x23a0>
 800357e:	4b34      	ldr	r3, [pc, #208]	; (8003650 <menu+0x244c>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d10e      	bne.n	80035a4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003586:	4b37      	ldr	r3, [pc, #220]	; (8003664 <menu+0x2460>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4b35      	ldr	r3, [pc, #212]	; (8003664 <menu+0x2460>)
 8003590:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003592:	4b34      	ldr	r3, [pc, #208]	; (8003664 <menu+0x2460>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d902      	bls.n	80035a0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800359a:	4b32      	ldr	r3, [pc, #200]	; (8003664 <menu+0x2460>)
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035a0:	f001 fac8 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80035a4:	2104      	movs	r1, #4
 80035a6:	4824      	ldr	r0, [pc, #144]	; (8003638 <menu+0x2434>)
 80035a8:	f005 feda 	bl	8009360 <HAL_GPIO_ReadPin>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d119      	bne.n	80035e6 <menu+0x23e2>
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <menu+0x2438>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	f083 0301 	eor.w	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <menu+0x23e2>
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <menu+0x244c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d10e      	bne.n	80035e6 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80035c8:	4b26      	ldr	r3, [pc, #152]	; (8003664 <menu+0x2460>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <menu+0x2460>)
 80035d2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <menu+0x2460>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <menu+0x2460>)
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035e2:	f001 faa7 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e6:	2108      	movs	r1, #8
 80035e8:	4813      	ldr	r0, [pc, #76]	; (8003638 <menu+0x2434>)
 80035ea:	f005 feb9 	bl	8009360 <HAL_GPIO_ReadPin>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10d      	bne.n	8003610 <menu+0x240c>
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <menu+0x2438>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f083 0301 	eor.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003602:	4b18      	ldr	r3, [pc, #96]	; (8003664 <menu+0x2460>)
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <menu+0x2440>)
 8003608:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800360a:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <menu+0x2444>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <menu+0x2448>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b15      	cmp	r3, #21
 8003616:	f040 80c2 	bne.w	800379e <menu+0x259a>
		if(dilSecim == 0) {
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <menu+0x242c>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d12c      	bne.n	800367c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003622:	4a15      	ldr	r2, [pc, #84]	; (8003678 <menu+0x2474>)
 8003624:	2101      	movs	r1, #1
 8003626:	2001      	movs	r0, #1
 8003628:	f004 fb74 	bl	8007d14 <lcd_print>
 800362c:	e02f      	b.n	800368e <menu+0x248a>
 800362e:	bf00      	nop
 8003630:	20000241 	.word	0x20000241
 8003634:	0800d390 	.word	0x0800d390
 8003638:	40010800 	.word	0x40010800
 800363c:	2000024f 	.word	0x2000024f
 8003640:	20000231 	.word	0x20000231
 8003644:	20000118 	.word	0x20000118
 8003648:	2000024c 	.word	0x2000024c
 800364c:	20000220 	.word	0x20000220
 8003650:	2000022f 	.word	0x2000022f
 8003654:	0800d810 	.word	0x0800d810
 8003658:	0800d824 	.word	0x0800d824
 800365c:	0800d838 	.word	0x0800d838
 8003660:	0800d84c 	.word	0x0800d84c
 8003664:	20000232 	.word	0x20000232
 8003668:	0800d860 	.word	0x0800d860
 800366c:	0800d874 	.word	0x0800d874
 8003670:	0800d884 	.word	0x0800d884
 8003674:	0800d898 	.word	0x0800d898
 8003678:	0800d8a8 	.word	0x0800d8a8
		} else if(dilSecim == 1) {
 800367c:	4b9c      	ldr	r3, [pc, #624]	; (80038f0 <menu+0x26ec>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d104      	bne.n	800368e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003684:	4a9b      	ldr	r2, [pc, #620]	; (80038f4 <menu+0x26f0>)
 8003686:	2101      	movs	r1, #1
 8003688:	2001      	movs	r0, #1
 800368a:	f004 fb43 	bl	8007d14 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800368e:	4b9a      	ldr	r3, [pc, #616]	; (80038f8 <menu+0x26f4>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d112      	bne.n	80036bc <menu+0x24b8>
			if(dilSecim == 0) {
 8003696:	4b96      	ldr	r3, [pc, #600]	; (80038f0 <menu+0x26ec>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800369e:	4a97      	ldr	r2, [pc, #604]	; (80038fc <menu+0x26f8>)
 80036a0:	2101      	movs	r1, #1
 80036a2:	2002      	movs	r0, #2
 80036a4:	f004 fb36 	bl	8007d14 <lcd_print>
			}
			if(dilSecim == 1) {
 80036a8:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <menu+0x26ec>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d11c      	bne.n	80036ea <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80036b0:	4a93      	ldr	r2, [pc, #588]	; (8003900 <menu+0x26fc>)
 80036b2:	2101      	movs	r1, #1
 80036b4:	2002      	movs	r0, #2
 80036b6:	f004 fb2d 	bl	8007d14 <lcd_print>
 80036ba:	e016      	b.n	80036ea <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80036bc:	4b8e      	ldr	r3, [pc, #568]	; (80038f8 <menu+0x26f4>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d112      	bne.n	80036ea <menu+0x24e6>
			if(dilSecim == 0) {
 80036c4:	4b8a      	ldr	r3, [pc, #552]	; (80038f0 <menu+0x26ec>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80036cc:	4a8d      	ldr	r2, [pc, #564]	; (8003904 <menu+0x2700>)
 80036ce:	2101      	movs	r1, #1
 80036d0:	2002      	movs	r0, #2
 80036d2:	f004 fb1f 	bl	8007d14 <lcd_print>
 80036d6:	e008      	b.n	80036ea <menu+0x24e6>
			} else if(dilSecim == 1) {
 80036d8:	4b85      	ldr	r3, [pc, #532]	; (80038f0 <menu+0x26ec>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d104      	bne.n	80036ea <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80036e0:	4a89      	ldr	r2, [pc, #548]	; (8003908 <menu+0x2704>)
 80036e2:	2101      	movs	r1, #1
 80036e4:	2002      	movs	r0, #2
 80036e6:	f004 fb15 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ea:	2102      	movs	r1, #2
 80036ec:	4887      	ldr	r0, [pc, #540]	; (800390c <menu+0x2708>)
 80036ee:	f005 fe37 	bl	8009360 <HAL_GPIO_ReadPin>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d115      	bne.n	8003724 <menu+0x2520>
 80036f8:	4b85      	ldr	r3, [pc, #532]	; (8003910 <menu+0x270c>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003706:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <menu+0x26f4>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b7a      	ldr	r3, [pc, #488]	; (80038f8 <menu+0x26f4>)
 8003710:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003712:	4b79      	ldr	r3, [pc, #484]	; (80038f8 <menu+0x26f4>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d902      	bls.n	8003720 <menu+0x251c>
				platformSilindirTipi = 0;
 800371a:	4b77      	ldr	r3, [pc, #476]	; (80038f8 <menu+0x26f4>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003720:	f001 fa08 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003724:	2104      	movs	r1, #4
 8003726:	4879      	ldr	r0, [pc, #484]	; (800390c <menu+0x2708>)
 8003728:	f005 fe1a 	bl	8009360 <HAL_GPIO_ReadPin>
 800372c:	4603      	mov	r3, r0
 800372e:	2b01      	cmp	r3, #1
 8003730:	d115      	bne.n	800375e <menu+0x255a>
 8003732:	4b77      	ldr	r3, [pc, #476]	; (8003910 <menu+0x270c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f083 0301 	eor.w	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003740:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <menu+0x26f4>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	3b01      	subs	r3, #1
 8003746:	b2da      	uxtb	r2, r3
 8003748:	4b6b      	ldr	r3, [pc, #428]	; (80038f8 <menu+0x26f4>)
 800374a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <menu+0x26f4>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003754:	4b68      	ldr	r3, [pc, #416]	; (80038f8 <menu+0x26f4>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800375a:	f001 f9eb 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800375e:	2108      	movs	r1, #8
 8003760:	486a      	ldr	r0, [pc, #424]	; (800390c <menu+0x2708>)
 8003762:	f005 fdfd 	bl	8009360 <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d118      	bne.n	800379e <menu+0x259a>
 800376c:	4b68      	ldr	r3, [pc, #416]	; (8003910 <menu+0x270c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d011      	beq.n	800379e <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800377a:	4b5f      	ldr	r3, [pc, #380]	; (80038f8 <menu+0x26f4>)
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	4b65      	ldr	r3, [pc, #404]	; (8003914 <menu+0x2710>)
 8003780:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003782:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <menu+0x26f4>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d106      	bne.n	8003798 <menu+0x2594>
				altLimit = 1;
 800378a:	4b63      	ldr	r3, [pc, #396]	; (8003918 <menu+0x2714>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003790:	4b61      	ldr	r3, [pc, #388]	; (8003918 <menu+0x2714>)
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <menu+0x2710>)
 8003796:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003798:	4b60      	ldr	r3, [pc, #384]	; (800391c <menu+0x2718>)
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800379e:	4b60      	ldr	r3, [pc, #384]	; (8003920 <menu+0x271c>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b16      	cmp	r3, #22
 80037a4:	f040 8081 	bne.w	80038aa <menu+0x26a6>
		if(dilSecim == 0) {
 80037a8:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <menu+0x26ec>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80037b0:	4a5c      	ldr	r2, [pc, #368]	; (8003924 <menu+0x2720>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	2001      	movs	r0, #1
 80037b6:	f004 faad 	bl	8007d14 <lcd_print>
 80037ba:	e008      	b.n	80037ce <menu+0x25ca>
		} else if(dilSecim == 1) {
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <menu+0x26ec>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d104      	bne.n	80037ce <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80037c4:	4a58      	ldr	r2, [pc, #352]	; (8003928 <menu+0x2724>)
 80037c6:	2101      	movs	r1, #1
 80037c8:	2001      	movs	r0, #1
 80037ca:	f004 faa3 	bl	8007d14 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80037ce:	4b48      	ldr	r3, [pc, #288]	; (80038f0 <menu+0x26ec>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80037d6:	4a55      	ldr	r2, [pc, #340]	; (800392c <menu+0x2728>)
 80037d8:	2101      	movs	r1, #1
 80037da:	2002      	movs	r0, #2
 80037dc:	f004 fa9a 	bl	8007d14 <lcd_print>
 80037e0:	e008      	b.n	80037f4 <menu+0x25f0>
			} else if(dilSecim == 1){
 80037e2:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <menu+0x26ec>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d104      	bne.n	80037f4 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80037ea:	4a51      	ldr	r2, [pc, #324]	; (8003930 <menu+0x272c>)
 80037ec:	2101      	movs	r1, #1
 80037ee:	2002      	movs	r0, #2
 80037f0:	f004 fa90 	bl	8007d14 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80037f4:	4b4f      	ldr	r3, [pc, #316]	; (8003934 <menu+0x2730>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	220a      	movs	r2, #10
 80037fa:	494f      	ldr	r1, [pc, #316]	; (8003938 <menu+0x2734>)
 80037fc:	4618      	mov	r0, r3
 80037fe:	f008 fddb 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8003802:	4a4d      	ldr	r2, [pc, #308]	; (8003938 <menu+0x2734>)
 8003804:	2110      	movs	r1, #16
 8003806:	2002      	movs	r0, #2
 8003808:	f004 fa84 	bl	8007d14 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800380c:	2102      	movs	r1, #2
 800380e:	483f      	ldr	r0, [pc, #252]	; (800390c <menu+0x2708>)
 8003810:	f005 fda6 	bl	8009360 <HAL_GPIO_ReadPin>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d115      	bne.n	8003846 <menu+0x2642>
 800381a:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <menu+0x270c>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	f083 0301 	eor.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003828:	4b42      	ldr	r3, [pc, #264]	; (8003934 <menu+0x2730>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b40      	ldr	r3, [pc, #256]	; (8003934 <menu+0x2730>)
 8003832:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003834:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <menu+0x2730>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b05      	cmp	r3, #5
 800383a:	d902      	bls.n	8003842 <menu+0x263e>
				yukariValfTmr = 0;
 800383c:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <menu+0x2730>)
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003842:	f001 f977 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003846:	2104      	movs	r1, #4
 8003848:	4830      	ldr	r0, [pc, #192]	; (800390c <menu+0x2708>)
 800384a:	f005 fd89 	bl	8009360 <HAL_GPIO_ReadPin>
 800384e:	4603      	mov	r3, r0
 8003850:	2b01      	cmp	r3, #1
 8003852:	d115      	bne.n	8003880 <menu+0x267c>
 8003854:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <menu+0x270c>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	f083 0301 	eor.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00e      	beq.n	8003880 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003862:	4b34      	ldr	r3, [pc, #208]	; (8003934 <menu+0x2730>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4b32      	ldr	r3, [pc, #200]	; (8003934 <menu+0x2730>)
 800386c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800386e:	4b31      	ldr	r3, [pc, #196]	; (8003934 <menu+0x2730>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d902      	bls.n	800387c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003876:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <menu+0x2730>)
 8003878:	2205      	movs	r2, #5
 800387a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800387c:	f001 f95a 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003880:	2108      	movs	r1, #8
 8003882:	4822      	ldr	r0, [pc, #136]	; (800390c <menu+0x2708>)
 8003884:	f005 fd6c 	bl	8009360 <HAL_GPIO_ReadPin>
 8003888:	4603      	mov	r3, r0
 800388a:	2b01      	cmp	r3, #1
 800388c:	d10d      	bne.n	80038aa <menu+0x26a6>
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <menu+0x270c>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	f083 0301 	eor.w	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d006      	beq.n	80038aa <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <menu+0x2730>)
 800389e:	781a      	ldrb	r2, [r3, #0]
 80038a0:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <menu+0x2710>)
 80038a2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <menu+0x2718>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <menu+0x271c>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b17      	cmp	r3, #23
 80038b0:	f040 80ac 	bne.w	8003a0c <menu+0x2808>
		if(dilSecim == 0) {
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <menu+0x26ec>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d105      	bne.n	80038c8 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80038bc:	4a1f      	ldr	r2, [pc, #124]	; (800393c <menu+0x2738>)
 80038be:	2101      	movs	r1, #1
 80038c0:	2001      	movs	r0, #1
 80038c2:	f004 fa27 	bl	8007d14 <lcd_print>
 80038c6:	e008      	b.n	80038da <menu+0x26d6>
		} else if(dilSecim == 1) {
 80038c8:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <menu+0x26ec>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d104      	bne.n	80038da <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <menu+0x273c>)
 80038d2:	2101      	movs	r1, #1
 80038d4:	2001      	movs	r0, #1
 80038d6:	f004 fa1d 	bl	8007d14 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <menu+0x26ec>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d130      	bne.n	8003944 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <menu+0x2728>)
 80038e4:	2101      	movs	r1, #1
 80038e6:	2002      	movs	r0, #2
 80038e8:	f004 fa14 	bl	8007d14 <lcd_print>
 80038ec:	e033      	b.n	8003956 <menu+0x2752>
 80038ee:	bf00      	nop
 80038f0:	20000241 	.word	0x20000241
 80038f4:	0800d8bc 	.word	0x0800d8bc
 80038f8:	20000233 	.word	0x20000233
 80038fc:	0800d860 	.word	0x0800d860
 8003900:	0800d874 	.word	0x0800d874
 8003904:	0800d884 	.word	0x0800d884
 8003908:	0800d898 	.word	0x0800d898
 800390c:	40010800 	.word	0x40010800
 8003910:	2000024f 	.word	0x2000024f
 8003914:	20000118 	.word	0x20000118
 8003918:	20000226 	.word	0x20000226
 800391c:	2000024c 	.word	0x2000024c
 8003920:	20000220 	.word	0x20000220
 8003924:	0800d8cc 	.word	0x0800d8cc
 8003928:	0800d8e0 	.word	0x0800d8e0
 800392c:	0800d580 	.word	0x0800d580
 8003930:	0800d8f4 	.word	0x0800d8f4
 8003934:	20000234 	.word	0x20000234
 8003938:	20000188 	.word	0x20000188
 800393c:	0800d904 	.word	0x0800d904
 8003940:	0800d918 	.word	0x0800d918
			} else if(dilSecim == 1) {
 8003944:	4b98      	ldr	r3, [pc, #608]	; (8003ba8 <menu+0x29a4>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d104      	bne.n	8003956 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 800394c:	4a97      	ldr	r2, [pc, #604]	; (8003bac <menu+0x29a8>)
 800394e:	2101      	movs	r1, #1
 8003950:	2002      	movs	r0, #2
 8003952:	f004 f9df 	bl	8007d14 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003956:	4b96      	ldr	r3, [pc, #600]	; (8003bb0 <menu+0x29ac>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	220a      	movs	r2, #10
 800395c:	4995      	ldr	r1, [pc, #596]	; (8003bb4 <menu+0x29b0>)
 800395e:	4618      	mov	r0, r3
 8003960:	f008 fd2a 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8003964:	4a93      	ldr	r2, [pc, #588]	; (8003bb4 <menu+0x29b0>)
 8003966:	2110      	movs	r1, #16
 8003968:	2002      	movs	r0, #2
 800396a:	f004 f9d3 	bl	8007d14 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800396e:	2102      	movs	r1, #2
 8003970:	4891      	ldr	r0, [pc, #580]	; (8003bb8 <menu+0x29b4>)
 8003972:	f005 fcf5 	bl	8009360 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d115      	bne.n	80039a8 <menu+0x27a4>
 800397c:	4b8f      	ldr	r3, [pc, #572]	; (8003bbc <menu+0x29b8>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	f083 0301 	eor.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800398a:	4b89      	ldr	r3, [pc, #548]	; (8003bb0 <menu+0x29ac>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b87      	ldr	r3, [pc, #540]	; (8003bb0 <menu+0x29ac>)
 8003994:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003996:	4b86      	ldr	r3, [pc, #536]	; (8003bb0 <menu+0x29ac>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b05      	cmp	r3, #5
 800399c:	d902      	bls.n	80039a4 <menu+0x27a0>
				asagiValfTmr = 0;
 800399e:	4b84      	ldr	r3, [pc, #528]	; (8003bb0 <menu+0x29ac>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039a4:	f001 f8c6 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a8:	2104      	movs	r1, #4
 80039aa:	4883      	ldr	r0, [pc, #524]	; (8003bb8 <menu+0x29b4>)
 80039ac:	f005 fcd8 	bl	8009360 <HAL_GPIO_ReadPin>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d115      	bne.n	80039e2 <menu+0x27de>
 80039b6:	4b81      	ldr	r3, [pc, #516]	; (8003bbc <menu+0x29b8>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80039c4:	4b7a      	ldr	r3, [pc, #488]	; (8003bb0 <menu+0x29ac>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	4b78      	ldr	r3, [pc, #480]	; (8003bb0 <menu+0x29ac>)
 80039ce:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80039d0:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <menu+0x29ac>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d902      	bls.n	80039de <menu+0x27da>
		   		asagiValfTmr = 5;
 80039d8:	4b75      	ldr	r3, [pc, #468]	; (8003bb0 <menu+0x29ac>)
 80039da:	2205      	movs	r2, #5
 80039dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039de:	f001 f8a9 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e2:	2108      	movs	r1, #8
 80039e4:	4874      	ldr	r0, [pc, #464]	; (8003bb8 <menu+0x29b4>)
 80039e6:	f005 fcbb 	bl	8009360 <HAL_GPIO_ReadPin>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10d      	bne.n	8003a0c <menu+0x2808>
 80039f0:	4b72      	ldr	r3, [pc, #456]	; (8003bbc <menu+0x29b8>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d006      	beq.n	8003a0c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 80039fe:	4b6c      	ldr	r3, [pc, #432]	; (8003bb0 <menu+0x29ac>)
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <menu+0x29bc>)
 8003a04:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003a06:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <menu+0x29c0>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003a0c:	4b6e      	ldr	r3, [pc, #440]	; (8003bc8 <menu+0x29c4>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b18      	cmp	r3, #24
 8003a12:	f040 809d 	bne.w	8003b50 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003a16:	4b6d      	ldr	r3, [pc, #436]	; (8003bcc <menu+0x29c8>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d113      	bne.n	8003a46 <menu+0x2842>
			if(dilSecim == 0) {
 8003a1e:	4b62      	ldr	r3, [pc, #392]	; (8003ba8 <menu+0x29a4>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003a26:	4a6a      	ldr	r2, [pc, #424]	; (8003bd0 <menu+0x29cc>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f004 f972 	bl	8007d14 <lcd_print>
 8003a30:	e020      	b.n	8003a74 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a32:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <menu+0x29a4>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d11c      	bne.n	8003a74 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003a3a:	4a66      	ldr	r2, [pc, #408]	; (8003bd4 <menu+0x29d0>)
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f004 f968 	bl	8007d14 <lcd_print>
 8003a44:	e016      	b.n	8003a74 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a46:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <menu+0x29c8>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d112      	bne.n	8003a74 <menu+0x2870>
			if(dilSecim == 0) {
 8003a4e:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <menu+0x29a4>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003a56:	4a60      	ldr	r2, [pc, #384]	; (8003bd8 <menu+0x29d4>)
 8003a58:	2101      	movs	r1, #1
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f004 f95a 	bl	8007d14 <lcd_print>
 8003a60:	e008      	b.n	8003a74 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a62:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <menu+0x29a4>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d104      	bne.n	8003a74 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	; (8003bdc <menu+0x29d8>)
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f004 f950 	bl	8007d14 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a74:	4b4c      	ldr	r3, [pc, #304]	; (8003ba8 <menu+0x29a4>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <menu+0x29dc>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2002      	movs	r0, #2
 8003a82:	f004 f947 	bl	8007d14 <lcd_print>
 8003a86:	e008      	b.n	8003a9a <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a88:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <menu+0x29a4>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d104      	bne.n	8003a9a <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a90:	4a46      	ldr	r2, [pc, #280]	; (8003bac <menu+0x29a8>)
 8003a92:	2101      	movs	r1, #1
 8003a94:	2002      	movs	r0, #2
 8003a96:	f004 f93d 	bl	8007d14 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003a9a:	4b52      	ldr	r3, [pc, #328]	; (8003be4 <menu+0x29e0>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	220a      	movs	r2, #10
 8003aa0:	4944      	ldr	r1, [pc, #272]	; (8003bb4 <menu+0x29b0>)
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f008 fc88 	bl	800c3b8 <itoa>
		lcd_print(2, 16, snum);
 8003aa8:	4a42      	ldr	r2, [pc, #264]	; (8003bb4 <menu+0x29b0>)
 8003aaa:	2110      	movs	r1, #16
 8003aac:	2002      	movs	r0, #2
 8003aae:	f004 f931 	bl	8007d14 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4840      	ldr	r0, [pc, #256]	; (8003bb8 <menu+0x29b4>)
 8003ab6:	f005 fc53 	bl	8009360 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d115      	bne.n	8003aec <menu+0x28e8>
 8003ac0:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <menu+0x29b8>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	f083 0301 	eor.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00e      	beq.n	8003aec <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003ace:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <menu+0x29e0>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <menu+0x29e0>)
 8003ad8:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003ada:	4b42      	ldr	r3, [pc, #264]	; (8003be4 <menu+0x29e0>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d902      	bls.n	8003ae8 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003ae2:	4b40      	ldr	r3, [pc, #256]	; (8003be4 <menu+0x29e0>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ae8:	f001 f824 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aec:	2104      	movs	r1, #4
 8003aee:	4832      	ldr	r0, [pc, #200]	; (8003bb8 <menu+0x29b4>)
 8003af0:	f005 fc36 	bl	8009360 <HAL_GPIO_ReadPin>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d115      	bne.n	8003b26 <menu+0x2922>
 8003afa:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <menu+0x29b8>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	f083 0301 	eor.w	r3, r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <menu+0x29e0>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <menu+0x29e0>)
 8003b12:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003b14:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <menu+0x29e0>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b06      	cmp	r3, #6
 8003b1a:	d902      	bls.n	8003b22 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003b1c:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <menu+0x29e0>)
 8003b1e:	2205      	movs	r2, #5
 8003b20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b22:	f001 f807 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b26:	2108      	movs	r1, #8
 8003b28:	4823      	ldr	r0, [pc, #140]	; (8003bb8 <menu+0x29b4>)
 8003b2a:	f005 fc19 	bl	8009360 <HAL_GPIO_ReadPin>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d10d      	bne.n	8003b50 <menu+0x294c>
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <menu+0x29b8>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	f083 0301 	eor.w	r3, r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d006      	beq.n	8003b50 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003b42:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <menu+0x29e0>)
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <menu+0x29bc>)
 8003b48:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <menu+0x29c0>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <menu+0x29c4>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b19      	cmp	r3, #25
 8003b56:	f040 80c4 	bne.w	8003ce2 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <menu+0x29c8>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d113      	bne.n	8003b8a <menu+0x2986>
			if(dilSecim == 0) {
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <menu+0x29a4>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003b6a:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <menu+0x29e4>)
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f004 f8d0 	bl	8007d14 <lcd_print>
 8003b74:	e047      	b.n	8003c06 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <menu+0x29a4>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d143      	bne.n	8003c06 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <menu+0x29e8>)
 8003b80:	2101      	movs	r1, #1
 8003b82:	2001      	movs	r0, #1
 8003b84:	f004 f8c6 	bl	8007d14 <lcd_print>
 8003b88:	e03d      	b.n	8003c06 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <menu+0x29c8>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d139      	bne.n	8003c06 <menu+0x2a02>
			if(dilSecim == 0) {
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <menu+0x29a4>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d12c      	bne.n	8003bf4 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <menu+0x29ec>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f004 f8b8 	bl	8007d14 <lcd_print>
 8003ba4:	e02f      	b.n	8003c06 <menu+0x2a02>
 8003ba6:	bf00      	nop
 8003ba8:	20000241 	.word	0x20000241
 8003bac:	0800d8f4 	.word	0x0800d8f4
 8003bb0:	20000235 	.word	0x20000235
 8003bb4:	20000188 	.word	0x20000188
 8003bb8:	40010800 	.word	0x40010800
 8003bbc:	2000024f 	.word	0x2000024f
 8003bc0:	20000118 	.word	0x20000118
 8003bc4:	2000024c 	.word	0x2000024c
 8003bc8:	20000220 	.word	0x20000220
 8003bcc:	2000022f 	.word	0x2000022f
 8003bd0:	0800d92c 	.word	0x0800d92c
 8003bd4:	0800d940 	.word	0x0800d940
 8003bd8:	0800d954 	.word	0x0800d954
 8003bdc:	0800d968 	.word	0x0800d968
 8003be0:	0800d580 	.word	0x0800d580
 8003be4:	20000236 	.word	0x20000236
 8003be8:	0800d97c 	.word	0x0800d97c
 8003bec:	0800d990 	.word	0x0800d990
 8003bf0:	0800d9a4 	.word	0x0800d9a4
			} else if(dilSecim == 1) {
 8003bf4:	4b73      	ldr	r3, [pc, #460]	; (8003dc4 <menu+0x2bc0>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d104      	bne.n	8003c06 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003bfc:	4a72      	ldr	r2, [pc, #456]	; (8003dc8 <menu+0x2bc4>)
 8003bfe:	2101      	movs	r1, #1
 8003c00:	2001      	movs	r0, #1
 8003c02:	f004 f887 	bl	8007d14 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003c06:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <menu+0x2bc0>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c0e:	4a6f      	ldr	r2, [pc, #444]	; (8003dcc <menu+0x2bc8>)
 8003c10:	2101      	movs	r1, #1
 8003c12:	2002      	movs	r0, #2
 8003c14:	f004 f87e 	bl	8007d14 <lcd_print>
 8003c18:	e008      	b.n	8003c2c <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003c1a:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <menu+0x2bc0>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d104      	bne.n	8003c2c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003c22:	4a6b      	ldr	r2, [pc, #428]	; (8003dd0 <menu+0x2bcc>)
 8003c24:	2101      	movs	r1, #1
 8003c26:	2002      	movs	r0, #2
 8003c28:	f004 f874 	bl	8007d14 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003c2c:	4b69      	ldr	r3, [pc, #420]	; (8003dd4 <menu+0x2bd0>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	220a      	movs	r2, #10
 8003c32:	4969      	ldr	r1, [pc, #420]	; (8003dd8 <menu+0x2bd4>)
 8003c34:	4618      	mov	r0, r3
 8003c36:	f008 fbbf 	bl	800c3b8 <itoa>
		lcd_print(2,16,snum);
 8003c3a:	4a67      	ldr	r2, [pc, #412]	; (8003dd8 <menu+0x2bd4>)
 8003c3c:	2110      	movs	r1, #16
 8003c3e:	2002      	movs	r0, #2
 8003c40:	f004 f868 	bl	8007d14 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c44:	2102      	movs	r1, #2
 8003c46:	4865      	ldr	r0, [pc, #404]	; (8003ddc <menu+0x2bd8>)
 8003c48:	f005 fb8a 	bl	8009360 <HAL_GPIO_ReadPin>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d115      	bne.n	8003c7e <menu+0x2a7a>
 8003c52:	4b63      	ldr	r3, [pc, #396]	; (8003de0 <menu+0x2bdc>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f083 0301 	eor.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003c60:	4b5c      	ldr	r3, [pc, #368]	; (8003dd4 <menu+0x2bd0>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <menu+0x2bd0>)
 8003c6a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003c6c:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <menu+0x2bd0>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d902      	bls.n	8003c7a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c74:	4b57      	ldr	r3, [pc, #348]	; (8003dd4 <menu+0x2bd0>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c7a:	f000 ff5b 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c7e:	2104      	movs	r1, #4
 8003c80:	4856      	ldr	r0, [pc, #344]	; (8003ddc <menu+0x2bd8>)
 8003c82:	f005 fb6d 	bl	8009360 <HAL_GPIO_ReadPin>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d115      	bne.n	8003cb8 <menu+0x2ab4>
 8003c8c:	4b54      	ldr	r3, [pc, #336]	; (8003de0 <menu+0x2bdc>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	f083 0301 	eor.w	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00e      	beq.n	8003cb8 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003c9a:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <menu+0x2bd0>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <menu+0x2bd0>)
 8003ca4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <menu+0x2bd0>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d902      	bls.n	8003cb4 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003cae:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <menu+0x2bd0>)
 8003cb0:	2205      	movs	r2, #5
 8003cb2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cb4:	f000 ff3e 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cb8:	2108      	movs	r1, #8
 8003cba:	4848      	ldr	r0, [pc, #288]	; (8003ddc <menu+0x2bd8>)
 8003cbc:	f005 fb50 	bl	8009360 <HAL_GPIO_ReadPin>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10d      	bne.n	8003ce2 <menu+0x2ade>
 8003cc6:	4b46      	ldr	r3, [pc, #280]	; (8003de0 <menu+0x2bdc>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	f083 0301 	eor.w	r3, r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d006      	beq.n	8003ce2 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003cd4:	4b3f      	ldr	r3, [pc, #252]	; (8003dd4 <menu+0x2bd0>)
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <menu+0x2be0>)
 8003cda:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003cdc:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <menu+0x2be4>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003ce2:	4b42      	ldr	r3, [pc, #264]	; (8003dec <menu+0x2be8>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b1a      	cmp	r3, #26
 8003ce8:	f040 80ec 	bne.w	8003ec4 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003cec:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <menu+0x2bc0>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003cf4:	4a3e      	ldr	r2, [pc, #248]	; (8003df0 <menu+0x2bec>)
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f004 f80b 	bl	8007d14 <lcd_print>
 8003cfe:	e008      	b.n	8003d12 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003d00:	4b30      	ldr	r3, [pc, #192]	; (8003dc4 <menu+0x2bc0>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d104      	bne.n	8003d12 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003d08:	4a3a      	ldr	r2, [pc, #232]	; (8003df4 <menu+0x2bf0>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f004 f801 	bl	8007d14 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003d12:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <menu+0x2bf4>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b63      	cmp	r3, #99	; 0x63
 8003d18:	d91e      	bls.n	8003d58 <menu+0x2b54>
			if(dilSecim == 0) {
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <menu+0x2bc0>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d22:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <menu+0x2bc8>)
 8003d24:	2101      	movs	r1, #1
 8003d26:	2002      	movs	r0, #2
 8003d28:	f003 fff4 	bl	8007d14 <lcd_print>
			}
			if(dilSecim == 1) {
 8003d2c:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <menu+0x2bc0>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d104      	bne.n	8003d3e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003d34:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <menu+0x2bcc>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	2002      	movs	r0, #2
 8003d3a:	f003 ffeb 	bl	8007d14 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d3e:	4b2e      	ldr	r3, [pc, #184]	; (8003df8 <menu+0x2bf4>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	220a      	movs	r2, #10
 8003d44:	4924      	ldr	r1, [pc, #144]	; (8003dd8 <menu+0x2bd4>)
 8003d46:	4618      	mov	r0, r3
 8003d48:	f008 fb36 	bl	800c3b8 <itoa>
			lcd_print(2,14,snum);
 8003d4c:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <menu+0x2bd4>)
 8003d4e:	210e      	movs	r1, #14
 8003d50:	2002      	movs	r0, #2
 8003d52:	f003 ffdf 	bl	8007d14 <lcd_print>
 8003d56:	e066      	b.n	8003e26 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003d58:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <menu+0x2bf4>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d923      	bls.n	8003da8 <menu+0x2ba4>
 8003d60:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <menu+0x2bf4>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b63      	cmp	r3, #99	; 0x63
 8003d66:	d81f      	bhi.n	8003da8 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003d68:	4b16      	ldr	r3, [pc, #88]	; (8003dc4 <menu+0x2bc0>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <menu+0x2bc8>)
 8003d72:	2101      	movs	r1, #1
 8003d74:	2002      	movs	r0, #2
 8003d76:	f003 ffcd 	bl	8007d14 <lcd_print>
 8003d7a:	e008      	b.n	8003d8e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <menu+0x2bc0>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d104      	bne.n	8003d8e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d84:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <menu+0x2bcc>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	2002      	movs	r0, #2
 8003d8a:	f003 ffc3 	bl	8007d14 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <menu+0x2bf4>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	220a      	movs	r2, #10
 8003d94:	4910      	ldr	r1, [pc, #64]	; (8003dd8 <menu+0x2bd4>)
 8003d96:	4618      	mov	r0, r3
 8003d98:	f008 fb0e 	bl	800c3b8 <itoa>
			lcd_print(2, 15, snum);
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <menu+0x2bd4>)
 8003d9e:	210f      	movs	r1, #15
 8003da0:	2002      	movs	r0, #2
 8003da2:	f003 ffb7 	bl	8007d14 <lcd_print>
 8003da6:	e03e      	b.n	8003e26 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <menu+0x2bf4>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b09      	cmp	r3, #9
 8003dae:	d83a      	bhi.n	8003e26 <menu+0x2c22>
			if(dilSecim == 0) {
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <menu+0x2bc0>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d121      	bne.n	8003dfc <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <menu+0x2bc8>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f003 ffa9 	bl	8007d14 <lcd_print>
 8003dc2:	e024      	b.n	8003e0e <menu+0x2c0a>
 8003dc4:	20000241 	.word	0x20000241
 8003dc8:	0800d9b8 	.word	0x0800d9b8
 8003dcc:	0800d580 	.word	0x0800d580
 8003dd0:	0800d8f4 	.word	0x0800d8f4
 8003dd4:	20000237 	.word	0x20000237
 8003dd8:	20000188 	.word	0x20000188
 8003ddc:	40010800 	.word	0x40010800
 8003de0:	2000024f 	.word	0x2000024f
 8003de4:	20000118 	.word	0x20000118
 8003de8:	2000024c 	.word	0x2000024c
 8003dec:	20000220 	.word	0x20000220
 8003df0:	0800d9cc 	.word	0x0800d9cc
 8003df4:	0800d9e0 	.word	0x0800d9e0
 8003df8:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8003dfc:	4b8f      	ldr	r3, [pc, #572]	; (800403c <menu+0x2e38>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d104      	bne.n	8003e0e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003e04:	4a8e      	ldr	r2, [pc, #568]	; (8004040 <menu+0x2e3c>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	2002      	movs	r0, #2
 8003e0a:	f003 ff83 	bl	8007d14 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e0e:	4b8d      	ldr	r3, [pc, #564]	; (8004044 <menu+0x2e40>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	220a      	movs	r2, #10
 8003e14:	498c      	ldr	r1, [pc, #560]	; (8004048 <menu+0x2e44>)
 8003e16:	4618      	mov	r0, r3
 8003e18:	f008 face 	bl	800c3b8 <itoa>
			lcd_print(2, 16, snum);
 8003e1c:	4a8a      	ldr	r2, [pc, #552]	; (8004048 <menu+0x2e44>)
 8003e1e:	2110      	movs	r1, #16
 8003e20:	2002      	movs	r0, #2
 8003e22:	f003 ff77 	bl	8007d14 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e26:	2102      	movs	r1, #2
 8003e28:	4888      	ldr	r0, [pc, #544]	; (800404c <menu+0x2e48>)
 8003e2a:	f005 fa99 	bl	8009360 <HAL_GPIO_ReadPin>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d115      	bne.n	8003e60 <menu+0x2c5c>
 8003e34:	4b86      	ldr	r3, [pc, #536]	; (8004050 <menu+0x2e4c>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f083 0301 	eor.w	r3, r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00e      	beq.n	8003e60 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003e42:	4b80      	ldr	r3, [pc, #512]	; (8004044 <menu+0x2e40>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4b7e      	ldr	r3, [pc, #504]	; (8004044 <menu+0x2e40>)
 8003e4c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003e4e:	4b7d      	ldr	r3, [pc, #500]	; (8004044 <menu+0x2e40>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2bb4      	cmp	r3, #180	; 0xb4
 8003e54:	d902      	bls.n	8003e5c <menu+0x2c58>
				makineCalismaTmr = 0;
 8003e56:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <menu+0x2e40>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e5c:	f000 fe6a 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e60:	2104      	movs	r1, #4
 8003e62:	487a      	ldr	r0, [pc, #488]	; (800404c <menu+0x2e48>)
 8003e64:	f005 fa7c 	bl	8009360 <HAL_GPIO_ReadPin>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d115      	bne.n	8003e9a <menu+0x2c96>
 8003e6e:	4b78      	ldr	r3, [pc, #480]	; (8004050 <menu+0x2e4c>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	f083 0301 	eor.w	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e7c:	4b71      	ldr	r3, [pc, #452]	; (8004044 <menu+0x2e40>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	4b6f      	ldr	r3, [pc, #444]	; (8004044 <menu+0x2e40>)
 8003e86:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e88:	4b6e      	ldr	r3, [pc, #440]	; (8004044 <menu+0x2e40>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2bb5      	cmp	r3, #181	; 0xb5
 8003e8e:	d902      	bls.n	8003e96 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e90:	4b6c      	ldr	r3, [pc, #432]	; (8004044 <menu+0x2e40>)
 8003e92:	22b4      	movs	r2, #180	; 0xb4
 8003e94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e96:	f000 fe4d 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e9a:	2108      	movs	r1, #8
 8003e9c:	486b      	ldr	r0, [pc, #428]	; (800404c <menu+0x2e48>)
 8003e9e:	f005 fa5f 	bl	8009360 <HAL_GPIO_ReadPin>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10d      	bne.n	8003ec4 <menu+0x2cc0>
 8003ea8:	4b69      	ldr	r3, [pc, #420]	; (8004050 <menu+0x2e4c>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	f083 0301 	eor.w	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <menu+0x2e40>)
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	4b66      	ldr	r3, [pc, #408]	; (8004054 <menu+0x2e50>)
 8003ebc:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003ebe:	4b66      	ldr	r3, [pc, #408]	; (8004058 <menu+0x2e54>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003ec4:	4b65      	ldr	r3, [pc, #404]	; (800405c <menu+0x2e58>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b1b      	cmp	r3, #27
 8003eca:	f040 8083 	bne.w	8003fd4 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003ece:	4a64      	ldr	r2, [pc, #400]	; (8004060 <menu+0x2e5c>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f003 ff1e 	bl	8007d14 <lcd_print>

		if(buzzer == 0) {
 8003ed8:	4b62      	ldr	r3, [pc, #392]	; (8004064 <menu+0x2e60>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d113      	bne.n	8003f08 <menu+0x2d04>
			if(dilSecim == 0) {
 8003ee0:	4b56      	ldr	r3, [pc, #344]	; (800403c <menu+0x2e38>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003ee8:	4a5f      	ldr	r2, [pc, #380]	; (8004068 <menu+0x2e64>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	2002      	movs	r0, #2
 8003eee:	f003 ff11 	bl	8007d14 <lcd_print>
 8003ef2:	e020      	b.n	8003f36 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003ef4:	4b51      	ldr	r3, [pc, #324]	; (800403c <menu+0x2e38>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d11c      	bne.n	8003f36 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003efc:	4a5b      	ldr	r2, [pc, #364]	; (800406c <menu+0x2e68>)
 8003efe:	2101      	movs	r1, #1
 8003f00:	2002      	movs	r0, #2
 8003f02:	f003 ff07 	bl	8007d14 <lcd_print>
 8003f06:	e016      	b.n	8003f36 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003f08:	4b56      	ldr	r3, [pc, #344]	; (8004064 <menu+0x2e60>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d112      	bne.n	8003f36 <menu+0x2d32>
			if(dilSecim == 0) {
 8003f10:	4b4a      	ldr	r3, [pc, #296]	; (800403c <menu+0x2e38>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003f18:	4a55      	ldr	r2, [pc, #340]	; (8004070 <menu+0x2e6c>)
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	2002      	movs	r0, #2
 8003f1e:	f003 fef9 	bl	8007d14 <lcd_print>
 8003f22:	e008      	b.n	8003f36 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f24:	4b45      	ldr	r3, [pc, #276]	; (800403c <menu+0x2e38>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d104      	bne.n	8003f36 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003f2c:	4a51      	ldr	r2, [pc, #324]	; (8004074 <menu+0x2e70>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	2002      	movs	r0, #2
 8003f32:	f003 feef 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f36:	2102      	movs	r1, #2
 8003f38:	4844      	ldr	r0, [pc, #272]	; (800404c <menu+0x2e48>)
 8003f3a:	f005 fa11 	bl	8009360 <HAL_GPIO_ReadPin>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d115      	bne.n	8003f70 <menu+0x2d6c>
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <menu+0x2e4c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00e      	beq.n	8003f70 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003f52:	4b44      	ldr	r3, [pc, #272]	; (8004064 <menu+0x2e60>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b42      	ldr	r3, [pc, #264]	; (8004064 <menu+0x2e60>)
 8003f5c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <menu+0x2e60>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d902      	bls.n	8003f6c <menu+0x2d68>
				buzzer = 0;
 8003f66:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <menu+0x2e60>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f6c:	f000 fde2 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f70:	2104      	movs	r1, #4
 8003f72:	4836      	ldr	r0, [pc, #216]	; (800404c <menu+0x2e48>)
 8003f74:	f005 f9f4 	bl	8009360 <HAL_GPIO_ReadPin>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d115      	bne.n	8003faa <menu+0x2da6>
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <menu+0x2e4c>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	f083 0301 	eor.w	r3, r3, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f8c:	4b35      	ldr	r3, [pc, #212]	; (8004064 <menu+0x2e60>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b33      	ldr	r3, [pc, #204]	; (8004064 <menu+0x2e60>)
 8003f96:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <menu+0x2e60>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <menu+0x2da2>
		   		buzzer = 1;
 8003fa0:	4b30      	ldr	r3, [pc, #192]	; (8004064 <menu+0x2e60>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fa6:	f000 fdc5 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003faa:	2108      	movs	r1, #8
 8003fac:	4827      	ldr	r0, [pc, #156]	; (800404c <menu+0x2e48>)
 8003fae:	f005 f9d7 	bl	8009360 <HAL_GPIO_ReadPin>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d10d      	bne.n	8003fd4 <menu+0x2dd0>
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <menu+0x2e4c>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	f083 0301 	eor.w	r3, r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <menu+0x2e60>)
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <menu+0x2e50>)
 8003fcc:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <menu+0x2e54>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <menu+0x2e58>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b1c      	cmp	r3, #28
 8003fda:	f040 80ab 	bne.w	8004134 <menu+0x2f30>
		calismaSayModu = 0;
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <menu+0x2e74>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003fe4:	4a25      	ldr	r2, [pc, #148]	; (800407c <menu+0x2e78>)
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f003 fe93 	bl	8007d14 <lcd_print>

		if(demoMode == 0) {
 8003fee:	4b24      	ldr	r3, [pc, #144]	; (8004080 <menu+0x2e7c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d113      	bne.n	800401e <menu+0x2e1a>
			if(dilSecim == 0) {
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <menu+0x2e38>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <menu+0x2e64>)
 8004000:	2101      	movs	r1, #1
 8004002:	2002      	movs	r0, #2
 8004004:	f003 fe86 	bl	8007d14 <lcd_print>
 8004008:	e045      	b.n	8004096 <menu+0x2e92>
			} else if(dilSecim == 1) {
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <menu+0x2e38>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d141      	bne.n	8004096 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004012:	4a16      	ldr	r2, [pc, #88]	; (800406c <menu+0x2e68>)
 8004014:	2101      	movs	r1, #1
 8004016:	2002      	movs	r0, #2
 8004018:	f003 fe7c 	bl	8007d14 <lcd_print>
 800401c:	e03b      	b.n	8004096 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800401e:	4b18      	ldr	r3, [pc, #96]	; (8004080 <menu+0x2e7c>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d137      	bne.n	8004096 <menu+0x2e92>
			if(dilSecim == 0){
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <menu+0x2e38>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d12a      	bne.n	8004084 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800402e:	4a10      	ldr	r2, [pc, #64]	; (8004070 <menu+0x2e6c>)
 8004030:	2101      	movs	r1, #1
 8004032:	2002      	movs	r0, #2
 8004034:	f003 fe6e 	bl	8007d14 <lcd_print>
 8004038:	e02d      	b.n	8004096 <menu+0x2e92>
 800403a:	bf00      	nop
 800403c:	20000241 	.word	0x20000241
 8004040:	0800d8f4 	.word	0x0800d8f4
 8004044:	20000238 	.word	0x20000238
 8004048:	20000188 	.word	0x20000188
 800404c:	40010800 	.word	0x40010800
 8004050:	2000024f 	.word	0x2000024f
 8004054:	20000118 	.word	0x20000118
 8004058:	2000024c 	.word	0x2000024c
 800405c:	20000220 	.word	0x20000220
 8004060:	0800d9f4 	.word	0x0800d9f4
 8004064:	2000023c 	.word	0x2000023c
 8004068:	0800d31c 	.word	0x0800d31c
 800406c:	0800d330 	.word	0x0800d330
 8004070:	0800d37c 	.word	0x0800d37c
 8004074:	0800d390 	.word	0x0800d390
 8004078:	20000240 	.word	0x20000240
 800407c:	0800da08 	.word	0x0800da08
 8004080:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 8004084:	4b71      	ldr	r3, [pc, #452]	; (800424c <menu+0x3048>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d104      	bne.n	8004096 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 800408c:	4a70      	ldr	r2, [pc, #448]	; (8004250 <menu+0x304c>)
 800408e:	2101      	movs	r1, #1
 8004090:	2002      	movs	r0, #2
 8004092:	f003 fe3f 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004096:	2102      	movs	r1, #2
 8004098:	486e      	ldr	r0, [pc, #440]	; (8004254 <menu+0x3050>)
 800409a:	f005 f961 	bl	8009360 <HAL_GPIO_ReadPin>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d115      	bne.n	80040d0 <menu+0x2ecc>
 80040a4:	4b6c      	ldr	r3, [pc, #432]	; (8004258 <menu+0x3054>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f083 0301 	eor.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80040b2:	4b6a      	ldr	r3, [pc, #424]	; (800425c <menu+0x3058>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	4b68      	ldr	r3, [pc, #416]	; (800425c <menu+0x3058>)
 80040bc:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80040be:	4b67      	ldr	r3, [pc, #412]	; (800425c <menu+0x3058>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d902      	bls.n	80040cc <menu+0x2ec8>
				demoMode = 0;
 80040c6:	4b65      	ldr	r3, [pc, #404]	; (800425c <menu+0x3058>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040cc:	f000 fd32 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040d0:	2104      	movs	r1, #4
 80040d2:	4860      	ldr	r0, [pc, #384]	; (8004254 <menu+0x3050>)
 80040d4:	f005 f944 	bl	8009360 <HAL_GPIO_ReadPin>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d115      	bne.n	800410a <menu+0x2f06>
 80040de:	4b5e      	ldr	r3, [pc, #376]	; (8004258 <menu+0x3054>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	f083 0301 	eor.w	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00e      	beq.n	800410a <menu+0x2f06>
			demoMode = demoMode - 1;
 80040ec:	4b5b      	ldr	r3, [pc, #364]	; (800425c <menu+0x3058>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	4b59      	ldr	r3, [pc, #356]	; (800425c <menu+0x3058>)
 80040f6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80040f8:	4b58      	ldr	r3, [pc, #352]	; (800425c <menu+0x3058>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <menu+0x2f02>
		   		demoMode = 1;
 8004100:	4b56      	ldr	r3, [pc, #344]	; (800425c <menu+0x3058>)
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004106:	f000 fd15 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800410a:	2108      	movs	r1, #8
 800410c:	4851      	ldr	r0, [pc, #324]	; (8004254 <menu+0x3050>)
 800410e:	f005 f927 	bl	8009360 <HAL_GPIO_ReadPin>
 8004112:	4603      	mov	r3, r0
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10d      	bne.n	8004134 <menu+0x2f30>
 8004118:	4b4f      	ldr	r3, [pc, #316]	; (8004258 <menu+0x3054>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	f083 0301 	eor.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d006      	beq.n	8004134 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004126:	4b4d      	ldr	r3, [pc, #308]	; (800425c <menu+0x3058>)
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <menu+0x305c>)
 800412c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800412e:	4b4d      	ldr	r3, [pc, #308]	; (8004264 <menu+0x3060>)
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004134:	4b4c      	ldr	r3, [pc, #304]	; (8004268 <menu+0x3064>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b1d      	cmp	r3, #29
 800413a:	f040 8132 	bne.w	80043a2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800413e:	4b4b      	ldr	r3, [pc, #300]	; (800426c <menu+0x3068>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <menu+0x2f6a>
 8004146:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <menu+0x306c>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <menu+0x2f6a>
 800414e:	4b49      	ldr	r3, [pc, #292]	; (8004274 <menu+0x3070>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <menu+0x2f6a>
 8004156:	4b48      	ldr	r3, [pc, #288]	; (8004278 <menu+0x3074>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d107      	bne.n	800416e <menu+0x2f6a>
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <menu+0x3078>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <menu+0x307c>)
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	e002      	b.n	8004174 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800416e:	4b44      	ldr	r3, [pc, #272]	; (8004280 <menu+0x307c>)
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <menu+0x3080>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d154      	bne.n	8004226 <menu+0x3022>
			if(dilSecim == 0) {
 800417c:	4b33      	ldr	r3, [pc, #204]	; (800424c <menu+0x3048>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004184:	4a40      	ldr	r2, [pc, #256]	; (8004288 <menu+0x3084>)
 8004186:	2101      	movs	r1, #1
 8004188:	2001      	movs	r0, #1
 800418a:	f003 fdc3 	bl	8007d14 <lcd_print>
 800418e:	e008      	b.n	80041a2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004190:	4b2e      	ldr	r3, [pc, #184]	; (800424c <menu+0x3048>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d104      	bne.n	80041a2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004198:	4a3c      	ldr	r2, [pc, #240]	; (800428c <menu+0x3088>)
 800419a:	2101      	movs	r1, #1
 800419c:	2001      	movs	r0, #1
 800419e:	f003 fdb9 	bl	8007d14 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80041a2:	4b36      	ldr	r3, [pc, #216]	; (800427c <menu+0x3078>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	220a      	movs	r2, #10
 80041a8:	4939      	ldr	r1, [pc, #228]	; (8004290 <menu+0x308c>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f008 f904 	bl	800c3b8 <itoa>
			lcd_print(2, 12, snum);
 80041b0:	4a37      	ldr	r2, [pc, #220]	; (8004290 <menu+0x308c>)
 80041b2:	210c      	movs	r1, #12
 80041b4:	2002      	movs	r0, #2
 80041b6:	f003 fdad 	bl	8007d14 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80041ba:	4b2f      	ldr	r3, [pc, #188]	; (8004278 <menu+0x3074>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	220a      	movs	r2, #10
 80041c0:	4933      	ldr	r1, [pc, #204]	; (8004290 <menu+0x308c>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f008 f8f8 	bl	800c3b8 <itoa>
			lcd_print(2, 13, snum);
 80041c8:	4a31      	ldr	r2, [pc, #196]	; (8004290 <menu+0x308c>)
 80041ca:	210d      	movs	r1, #13
 80041cc:	2002      	movs	r0, #2
 80041ce:	f003 fda1 	bl	8007d14 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80041d2:	4b28      	ldr	r3, [pc, #160]	; (8004274 <menu+0x3070>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	220a      	movs	r2, #10
 80041d8:	492d      	ldr	r1, [pc, #180]	; (8004290 <menu+0x308c>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f008 f8ec 	bl	800c3b8 <itoa>
			lcd_print(2, 14, snum);
 80041e0:	4a2b      	ldr	r2, [pc, #172]	; (8004290 <menu+0x308c>)
 80041e2:	210e      	movs	r1, #14
 80041e4:	2002      	movs	r0, #2
 80041e6:	f003 fd95 	bl	8007d14 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80041ea:	4b21      	ldr	r3, [pc, #132]	; (8004270 <menu+0x306c>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	220a      	movs	r2, #10
 80041f0:	4927      	ldr	r1, [pc, #156]	; (8004290 <menu+0x308c>)
 80041f2:	4618      	mov	r0, r3
 80041f4:	f008 f8e0 	bl	800c3b8 <itoa>
			lcd_print(2, 15, snum);
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <menu+0x308c>)
 80041fa:	210f      	movs	r1, #15
 80041fc:	2002      	movs	r0, #2
 80041fe:	f003 fd89 	bl	8007d14 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004202:	4b1a      	ldr	r3, [pc, #104]	; (800426c <menu+0x3068>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	220a      	movs	r2, #10
 8004208:	4921      	ldr	r1, [pc, #132]	; (8004290 <menu+0x308c>)
 800420a:	4618      	mov	r0, r3
 800420c:	f008 f8d4 	bl	800c3b8 <itoa>
			lcd_print(2, 16, snum);
 8004210:	4a1f      	ldr	r2, [pc, #124]	; (8004290 <menu+0x308c>)
 8004212:	2110      	movs	r1, #16
 8004214:	2002      	movs	r0, #2
 8004216:	f003 fd7d 	bl	8007d14 <lcd_print>

			lcd_print(2, 1, "           ");
 800421a:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <menu+0x3090>)
 800421c:	2101      	movs	r1, #1
 800421e:	2002      	movs	r0, #2
 8004220:	f003 fd78 	bl	8007d14 <lcd_print>
 8004224:	e048      	b.n	80042b8 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <menu+0x3080>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d144      	bne.n	80042b8 <menu+0x30b4>
			if(dilSecim == 0) {
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <menu+0x3048>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d132      	bne.n	800429c <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004236:	4a14      	ldr	r2, [pc, #80]	; (8004288 <menu+0x3084>)
 8004238:	2101      	movs	r1, #1
 800423a:	2001      	movs	r0, #1
 800423c:	f003 fd6a 	bl	8007d14 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004240:	4a15      	ldr	r2, [pc, #84]	; (8004298 <menu+0x3094>)
 8004242:	2101      	movs	r1, #1
 8004244:	2002      	movs	r0, #2
 8004246:	f003 fd65 	bl	8007d14 <lcd_print>
 800424a:	e035      	b.n	80042b8 <menu+0x30b4>
 800424c:	20000241 	.word	0x20000241
 8004250:	0800d390 	.word	0x0800d390
 8004254:	40010800 	.word	0x40010800
 8004258:	2000024f 	.word	0x2000024f
 800425c:	2000023e 	.word	0x2000023e
 8004260:	20000118 	.word	0x20000118
 8004264:	2000024c 	.word	0x2000024c
 8004268:	20000220 	.word	0x20000220
 800426c:	2000021d 	.word	0x2000021d
 8004270:	2000021e 	.word	0x2000021e
 8004274:	20000000 	.word	0x20000000
 8004278:	20000001 	.word	0x20000001
 800427c:	2000021f 	.word	0x2000021f
 8004280:	20000261 	.word	0x20000261
 8004284:	20000240 	.word	0x20000240
 8004288:	0800da18 	.word	0x0800da18
 800428c:	0800da2c 	.word	0x0800da2c
 8004290:	20000188 	.word	0x20000188
 8004294:	0800da40 	.word	0x0800da40
 8004298:	0800da4c 	.word	0x0800da4c
			} else if(dilSecim == 1) {
 800429c:	4b94      	ldr	r3, [pc, #592]	; (80044f0 <menu+0x32ec>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d109      	bne.n	80042b8 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80042a4:	4a93      	ldr	r2, [pc, #588]	; (80044f4 <menu+0x32f0>)
 80042a6:	2101      	movs	r1, #1
 80042a8:	2001      	movs	r0, #1
 80042aa:	f003 fd33 	bl	8007d14 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80042ae:	4a92      	ldr	r2, [pc, #584]	; (80044f8 <menu+0x32f4>)
 80042b0:	2101      	movs	r1, #1
 80042b2:	2002      	movs	r0, #2
 80042b4:	f003 fd2e 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042b8:	2102      	movs	r1, #2
 80042ba:	4890      	ldr	r0, [pc, #576]	; (80044fc <menu+0x32f8>)
 80042bc:	f005 f850 	bl	8009360 <HAL_GPIO_ReadPin>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d119      	bne.n	80042fa <menu+0x30f6>
 80042c6:	4b8e      	ldr	r3, [pc, #568]	; (8004500 <menu+0x32fc>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	f083 0301 	eor.w	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <menu+0x30f6>
 80042d4:	4b8b      	ldr	r3, [pc, #556]	; (8004504 <menu+0x3300>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00e      	beq.n	80042fa <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80042dc:	4b8a      	ldr	r3, [pc, #552]	; (8004508 <menu+0x3304>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	3301      	adds	r3, #1
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b88      	ldr	r3, [pc, #544]	; (8004508 <menu+0x3304>)
 80042e6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80042e8:	4b87      	ldr	r3, [pc, #540]	; (8004508 <menu+0x3304>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d902      	bls.n	80042f6 <menu+0x30f2>
				calismaSayModu = 0;
 80042f0:	4b85      	ldr	r3, [pc, #532]	; (8004508 <menu+0x3304>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042f6:	f000 fc1d 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042fa:	2104      	movs	r1, #4
 80042fc:	487f      	ldr	r0, [pc, #508]	; (80044fc <menu+0x32f8>)
 80042fe:	f005 f82f 	bl	8009360 <HAL_GPIO_ReadPin>
 8004302:	4603      	mov	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d119      	bne.n	800433c <menu+0x3138>
 8004308:	4b7d      	ldr	r3, [pc, #500]	; (8004500 <menu+0x32fc>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f083 0301 	eor.w	r3, r3, #1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d012      	beq.n	800433c <menu+0x3138>
 8004316:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <menu+0x3300>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00e      	beq.n	800433c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800431e:	4b7a      	ldr	r3, [pc, #488]	; (8004508 <menu+0x3304>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	3b01      	subs	r3, #1
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b78      	ldr	r3, [pc, #480]	; (8004508 <menu+0x3304>)
 8004328:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800432a:	4b77      	ldr	r3, [pc, #476]	; (8004508 <menu+0x3304>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <menu+0x3134>
		   		calismaSayModu = 1;
 8004332:	4b75      	ldr	r3, [pc, #468]	; (8004508 <menu+0x3304>)
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004338:	f000 fbfc 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800433c:	2108      	movs	r1, #8
 800433e:	486f      	ldr	r0, [pc, #444]	; (80044fc <menu+0x32f8>)
 8004340:	f005 f80e 	bl	8009360 <HAL_GPIO_ReadPin>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d12b      	bne.n	80043a2 <menu+0x319e>
 800434a:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <menu+0x32fc>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	f083 0301 	eor.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d024      	beq.n	80043a2 <menu+0x319e>
			eepromData[32] = 0;
 8004358:	4b6c      	ldr	r3, [pc, #432]	; (800450c <menu+0x3308>)
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004360:	4b6a      	ldr	r3, [pc, #424]	; (800450c <menu+0x3308>)
 8004362:	2200      	movs	r2, #0
 8004364:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004366:	4b69      	ldr	r3, [pc, #420]	; (800450c <menu+0x3308>)
 8004368:	2200      	movs	r2, #0
 800436a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800436c:	4b67      	ldr	r3, [pc, #412]	; (800450c <menu+0x3308>)
 800436e:	2200      	movs	r2, #0
 8004370:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004372:	4b66      	ldr	r3, [pc, #408]	; (800450c <menu+0x3308>)
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004378:	4b65      	ldr	r3, [pc, #404]	; (8004510 <menu+0x330c>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800437e:	4b65      	ldr	r3, [pc, #404]	; (8004514 <menu+0x3310>)
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004384:	4b64      	ldr	r3, [pc, #400]	; (8004518 <menu+0x3314>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800438a:	4b64      	ldr	r3, [pc, #400]	; (800451c <menu+0x3318>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004390:	4b63      	ldr	r3, [pc, #396]	; (8004520 <menu+0x331c>)
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004396:	4b5c      	ldr	r3, [pc, #368]	; (8004508 <menu+0x3304>)
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <menu+0x3320>)
 800439e:	2201      	movs	r2, #1
 80043a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80043a2:	4b61      	ldr	r3, [pc, #388]	; (8004528 <menu+0x3324>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b1e      	cmp	r3, #30
 80043a8:	d16f      	bne.n	800448a <menu+0x3286>
		calismaSayModu = 0;
 80043aa:	4b57      	ldr	r3, [pc, #348]	; (8004508 <menu+0x3304>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80043b0:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <menu+0x32ec>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80043b8:	4a5c      	ldr	r2, [pc, #368]	; (800452c <menu+0x3328>)
 80043ba:	2101      	movs	r1, #1
 80043bc:	2001      	movs	r0, #1
 80043be:	f003 fca9 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80043c2:	4a5b      	ldr	r2, [pc, #364]	; (8004530 <menu+0x332c>)
 80043c4:	2101      	movs	r1, #1
 80043c6:	2002      	movs	r0, #2
 80043c8:	f003 fca4 	bl	8007d14 <lcd_print>
 80043cc:	e00d      	b.n	80043ea <menu+0x31e6>
		} else if(dilSecim == 1) {
 80043ce:	4b48      	ldr	r3, [pc, #288]	; (80044f0 <menu+0x32ec>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d109      	bne.n	80043ea <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80043d6:	4a57      	ldr	r2, [pc, #348]	; (8004534 <menu+0x3330>)
 80043d8:	2101      	movs	r1, #1
 80043da:	2001      	movs	r0, #1
 80043dc:	f003 fc9a 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80043e0:	4a55      	ldr	r2, [pc, #340]	; (8004538 <menu+0x3334>)
 80043e2:	2101      	movs	r1, #1
 80043e4:	2002      	movs	r0, #2
 80043e6:	f003 fc95 	bl	8007d14 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043ea:	2102      	movs	r1, #2
 80043ec:	4843      	ldr	r0, [pc, #268]	; (80044fc <menu+0x32f8>)
 80043ee:	f004 ffb7 	bl	8009360 <HAL_GPIO_ReadPin>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d115      	bne.n	8004424 <menu+0x3220>
 80043f8:	4b41      	ldr	r3, [pc, #260]	; (8004500 <menu+0x32fc>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	f083 0301 	eor.w	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00e      	beq.n	8004424 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004406:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <menu+0x32ec>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <menu+0x32ec>)
 8004410:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <menu+0x32ec>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d902      	bls.n	8004420 <menu+0x321c>
				dilSecim = 0;
 800441a:	4b35      	ldr	r3, [pc, #212]	; (80044f0 <menu+0x32ec>)
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004420:	f000 fb88 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004424:	2104      	movs	r1, #4
 8004426:	4835      	ldr	r0, [pc, #212]	; (80044fc <menu+0x32f8>)
 8004428:	f004 ff9a 	bl	8009360 <HAL_GPIO_ReadPin>
 800442c:	4603      	mov	r3, r0
 800442e:	2b01      	cmp	r3, #1
 8004430:	d115      	bne.n	800445e <menu+0x325a>
 8004432:	4b33      	ldr	r3, [pc, #204]	; (8004500 <menu+0x32fc>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f083 0301 	eor.w	r3, r3, #1
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00e      	beq.n	800445e <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004440:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <menu+0x32ec>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	3b01      	subs	r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <menu+0x32ec>)
 800444a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <menu+0x32ec>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <menu+0x3256>
		   		dilSecim = 1;
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <menu+0x32ec>)
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800445a:	f000 fb6b 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800445e:	2108      	movs	r1, #8
 8004460:	4826      	ldr	r0, [pc, #152]	; (80044fc <menu+0x32f8>)
 8004462:	f004 ff7d 	bl	8009360 <HAL_GPIO_ReadPin>
 8004466:	4603      	mov	r3, r0
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10e      	bne.n	800448a <menu+0x3286>
 800446c:	4b24      	ldr	r3, [pc, #144]	; (8004500 <menu+0x32fc>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f083 0301 	eor.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <menu+0x3286>
			eepromData[33] = dilSecim;
 800447a:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <menu+0x32ec>)
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	4b23      	ldr	r3, [pc, #140]	; (800450c <menu+0x3308>)
 8004480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <menu+0x3320>)
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800448a:	4b27      	ldr	r3, [pc, #156]	; (8004528 <menu+0x3324>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b1f      	cmp	r3, #31
 8004490:	f040 80b7 	bne.w	8004602 <menu+0x33fe>
		calismaSayModu = 0;
 8004494:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <menu+0x3304>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800449a:	4a28      	ldr	r2, [pc, #160]	; (800453c <menu+0x3338>)
 800449c:	2101      	movs	r1, #1
 800449e:	2001      	movs	r0, #1
 80044a0:	f003 fc38 	bl	8007d14 <lcd_print>

		if(iotMode == 0) {
 80044a4:	4b26      	ldr	r3, [pc, #152]	; (8004540 <menu+0x333c>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d113      	bne.n	80044d4 <menu+0x32d0>
			if(dilSecim == 0) {
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <menu+0x32ec>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <menu+0x3340>)
 80044b6:	2101      	movs	r1, #1
 80044b8:	2002      	movs	r0, #2
 80044ba:	f003 fc2b 	bl	8007d14 <lcd_print>
 80044be:	e050      	b.n	8004562 <menu+0x335e>
			} else if(dilSecim == 1) {
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <menu+0x32ec>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d14c      	bne.n	8004562 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80044c8:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <menu+0x3344>)
 80044ca:	2101      	movs	r1, #1
 80044cc:	2002      	movs	r0, #2
 80044ce:	f003 fc21 	bl	8007d14 <lcd_print>
 80044d2:	e046      	b.n	8004562 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <menu+0x333c>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d142      	bne.n	8004562 <menu+0x335e>
			if(dilSecim == 0) {
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <menu+0x32ec>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d135      	bne.n	8004550 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80044e4:	4a19      	ldr	r2, [pc, #100]	; (800454c <menu+0x3348>)
 80044e6:	2101      	movs	r1, #1
 80044e8:	2002      	movs	r0, #2
 80044ea:	f003 fc13 	bl	8007d14 <lcd_print>
 80044ee:	e038      	b.n	8004562 <menu+0x335e>
 80044f0:	20000241 	.word	0x20000241
 80044f4:	0800da2c 	.word	0x0800da2c
 80044f8:	0800da60 	.word	0x0800da60
 80044fc:	40010800 	.word	0x40010800
 8004500:	2000024f 	.word	0x2000024f
 8004504:	20000261 	.word	0x20000261
 8004508:	20000240 	.word	0x20000240
 800450c:	20000118 	.word	0x20000118
 8004510:	2000021f 	.word	0x2000021f
 8004514:	20000001 	.word	0x20000001
 8004518:	20000000 	.word	0x20000000
 800451c:	2000021e 	.word	0x2000021e
 8004520:	2000021d 	.word	0x2000021d
 8004524:	2000024c 	.word	0x2000024c
 8004528:	20000220 	.word	0x20000220
 800452c:	0800da74 	.word	0x0800da74
 8004530:	0800da88 	.word	0x0800da88
 8004534:	0800da9c 	.word	0x0800da9c
 8004538:	0800dab0 	.word	0x0800dab0
 800453c:	0800dac4 	.word	0x0800dac4
 8004540:	2000023f 	.word	0x2000023f
 8004544:	0800d31c 	.word	0x0800d31c
 8004548:	0800d330 	.word	0x0800d330
 800454c:	0800d37c 	.word	0x0800d37c
			} else if(dilSecim == 1) {
 8004550:	4ba3      	ldr	r3, [pc, #652]	; (80047e0 <menu+0x35dc>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d104      	bne.n	8004562 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004558:	4aa2      	ldr	r2, [pc, #648]	; (80047e4 <menu+0x35e0>)
 800455a:	2101      	movs	r1, #1
 800455c:	2002      	movs	r0, #2
 800455e:	f003 fbd9 	bl	8007d14 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004562:	2102      	movs	r1, #2
 8004564:	48a0      	ldr	r0, [pc, #640]	; (80047e8 <menu+0x35e4>)
 8004566:	f004 fefb 	bl	8009360 <HAL_GPIO_ReadPin>
 800456a:	4603      	mov	r3, r0
 800456c:	2b01      	cmp	r3, #1
 800456e:	d115      	bne.n	800459c <menu+0x3398>
 8004570:	4b9e      	ldr	r3, [pc, #632]	; (80047ec <menu+0x35e8>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f083 0301 	eor.w	r3, r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00e      	beq.n	800459c <menu+0x3398>
			iotMode = iotMode + 1;
 800457e:	4b9c      	ldr	r3, [pc, #624]	; (80047f0 <menu+0x35ec>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4b9a      	ldr	r3, [pc, #616]	; (80047f0 <menu+0x35ec>)
 8004588:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800458a:	4b99      	ldr	r3, [pc, #612]	; (80047f0 <menu+0x35ec>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d902      	bls.n	8004598 <menu+0x3394>
				iotMode = 0;
 8004592:	4b97      	ldr	r3, [pc, #604]	; (80047f0 <menu+0x35ec>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004598:	f000 facc 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800459c:	2104      	movs	r1, #4
 800459e:	4892      	ldr	r0, [pc, #584]	; (80047e8 <menu+0x35e4>)
 80045a0:	f004 fede 	bl	8009360 <HAL_GPIO_ReadPin>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d115      	bne.n	80045d6 <menu+0x33d2>
 80045aa:	4b90      	ldr	r3, [pc, #576]	; (80047ec <menu+0x35e8>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	f083 0301 	eor.w	r3, r3, #1
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <menu+0x33d2>
			iotMode = iotMode - 1;
 80045b8:	4b8d      	ldr	r3, [pc, #564]	; (80047f0 <menu+0x35ec>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	3b01      	subs	r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	4b8b      	ldr	r3, [pc, #556]	; (80047f0 <menu+0x35ec>)
 80045c2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80045c4:	4b8a      	ldr	r3, [pc, #552]	; (80047f0 <menu+0x35ec>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <menu+0x33ce>
		   		iotMode = 1;
 80045cc:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <menu+0x35ec>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80045d2:	f000 faaf 	bl	8004b34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d6:	2108      	movs	r1, #8
 80045d8:	4883      	ldr	r0, [pc, #524]	; (80047e8 <menu+0x35e4>)
 80045da:	f004 fec1 	bl	8009360 <HAL_GPIO_ReadPin>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d10e      	bne.n	8004602 <menu+0x33fe>
 80045e4:	4b81      	ldr	r3, [pc, #516]	; (80047ec <menu+0x35e8>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	f083 0301 	eor.w	r3, r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <menu+0x33fe>
			eepromData[48] = iotMode;
 80045f2:	4b7f      	ldr	r3, [pc, #508]	; (80047f0 <menu+0x35ec>)
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	4b7f      	ldr	r3, [pc, #508]	; (80047f4 <menu+0x35f0>)
 80045f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80045fc:	4b7e      	ldr	r3, [pc, #504]	; (80047f8 <menu+0x35f4>)
 80045fe:	2201      	movs	r2, #1
 8004600:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004602:	4b7e      	ldr	r3, [pc, #504]	; (80047fc <menu+0x35f8>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b20      	cmp	r3, #32
 8004608:	d14b      	bne.n	80046a2 <menu+0x349e>
		calismaSayModu = 0;
 800460a:	4b7d      	ldr	r3, [pc, #500]	; (8004800 <menu+0x35fc>)
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004610:	2001      	movs	r0, #1
 8004612:	f7fc f8c7 	bl	80007a4 <convertArrays>
		HAL_Delay(50);
 8004616:	2032      	movs	r0, #50	; 0x32
 8004618:	f004 f8d2 	bl	80087c0 <HAL_Delay>

		if(dilSecim == 0) {
 800461c:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <menu+0x35dc>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <menu+0x342c>
			lcd_print(1, 1, "MAKINE ID       ");
 8004624:	4a77      	ldr	r2, [pc, #476]	; (8004804 <menu+0x3600>)
 8004626:	2101      	movs	r1, #1
 8004628:	2001      	movs	r0, #1
 800462a:	f003 fb73 	bl	8007d14 <lcd_print>
 800462e:	e004      	b.n	800463a <menu+0x3436>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004630:	4a75      	ldr	r2, [pc, #468]	; (8004808 <menu+0x3604>)
 8004632:	2101      	movs	r1, #1
 8004634:	2001      	movs	r0, #1
 8004636:	f003 fb6d 	bl	8007d14 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 800463a:	4a74      	ldr	r2, [pc, #464]	; (800480c <menu+0x3608>)
 800463c:	2101      	movs	r1, #1
 800463e:	2002      	movs	r0, #2
 8004640:	f003 fb68 	bl	8007d14 <lcd_print>
		lcd_print(2, 13, "    ");
 8004644:	4a72      	ldr	r2, [pc, #456]	; (8004810 <menu+0x360c>)
 8004646:	210d      	movs	r1, #13
 8004648:	2002      	movs	r0, #2
 800464a:	f003 fb63 	bl	8007d14 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800464e:	2102      	movs	r1, #2
 8004650:	4865      	ldr	r0, [pc, #404]	; (80047e8 <menu+0x35e4>)
 8004652:	f004 fe85 	bl	8009360 <HAL_GPIO_ReadPin>
 8004656:	4603      	mov	r3, r0
 8004658:	2b01      	cmp	r3, #1
 800465a:	d122      	bne.n	80046a2 <menu+0x349e>
 800465c:	2104      	movs	r1, #4
 800465e:	4862      	ldr	r0, [pc, #392]	; (80047e8 <menu+0x35e4>)
 8004660:	f004 fe7e 	bl	8009360 <HAL_GPIO_ReadPin>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d11b      	bne.n	80046a2 <menu+0x349e>
 800466a:	4b60      	ldr	r3, [pc, #384]	; (80047ec <menu+0x35e8>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	f083 0301 	eor.w	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d014      	beq.n	80046a2 <menu+0x349e>
			takeMachineID();
 8004678:	f002 fb68 	bl	8006d4c <takeMachineID>

			convertArrays(1);
 800467c:	2001      	movs	r0, #1
 800467e:	f7fc f891 	bl	80007a4 <convertArrays>
			HAL_Delay(50);
 8004682:	2032      	movs	r0, #50	; 0x32
 8004684:	f004 f89c 	bl	80087c0 <HAL_Delay>

			HAL_Delay(250);
 8004688:	20fa      	movs	r0, #250	; 0xfa
 800468a:	f004 f899 	bl	80087c0 <HAL_Delay>
			lcd_print(2, 1, machineID);
 800468e:	4a5f      	ldr	r2, [pc, #380]	; (800480c <menu+0x3608>)
 8004690:	2101      	movs	r1, #1
 8004692:	2002      	movs	r0, #2
 8004694:	f003 fb3e 	bl	8007d14 <lcd_print>
			lcd_print(2, 13, "    ");
 8004698:	4a5d      	ldr	r2, [pc, #372]	; (8004810 <menu+0x360c>)
 800469a:	210d      	movs	r1, #13
 800469c:	2002      	movs	r0, #2
 800469e:	f003 fb39 	bl	8007d14 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 80046a2:	4b56      	ldr	r3, [pc, #344]	; (80047fc <menu+0x35f8>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b21      	cmp	r3, #33	; 0x21
 80046a8:	f040 80cb 	bne.w	8004842 <menu+0x363e>
		calismaSayModu = 0;
 80046ac:	4b54      	ldr	r3, [pc, #336]	; (8004800 <menu+0x35fc>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
		int ssidLength = strlen(wifiSSID);
 80046b2:	4858      	ldr	r0, [pc, #352]	; (8004814 <menu+0x3610>)
 80046b4:	f7fb fdb6 	bl	8000224 <strlen>
 80046b8:	4603      	mov	r3, r0
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34

		convertArrays(2);
 80046bc:	2002      	movs	r0, #2
 80046be:	f7fc f871 	bl	80007a4 <convertArrays>
		HAL_Delay(50);
 80046c2:	2032      	movs	r0, #50	; 0x32
 80046c4:	f004 f87c 	bl	80087c0 <HAL_Delay>

		lcd_print(1, 1, "WIFI SSID       ");
 80046c8:	4a53      	ldr	r2, [pc, #332]	; (8004818 <menu+0x3614>)
 80046ca:	2101      	movs	r1, #1
 80046cc:	2001      	movs	r0, #1
 80046ce:	f003 fb21 	bl	8007d14 <lcd_print>
		if(ssidLength == 16) {
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d105      	bne.n	80046e4 <menu+0x34e0>
			lcd_print(2, 1, wifiSSID);
 80046d8:	4a4e      	ldr	r2, [pc, #312]	; (8004814 <menu+0x3610>)
 80046da:	2101      	movs	r1, #1
 80046dc:	2002      	movs	r0, #2
 80046de:	f003 fb19 	bl	8007d14 <lcd_print>
 80046e2:	e030      	b.n	8004746 <menu+0x3542>
		} else if(ssidLength < 16) {
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	2b0f      	cmp	r3, #15
 80046e8:	dc15      	bgt.n	8004716 <menu+0x3512>
			for(int i=0; i<16-ssidLength; i++) {
 80046ea:	2300      	movs	r3, #0
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30
 80046ee:	e00b      	b.n	8004708 <menu+0x3504>
				lcd_delete_char(2, ssidLength);
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	4619      	mov	r1, r3
 80046f6:	2002      	movs	r0, #2
 80046f8:	f003 fb42 	bl	8007d80 <lcd_delete_char>
				ssidLength++;
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	3301      	adds	r3, #1
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
			for(int i=0; i<16-ssidLength; i++) {
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	3301      	adds	r3, #1
 8004706:	633b      	str	r3, [r7, #48]	; 0x30
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	f1c3 0310 	rsb	r3, r3, #16
 800470e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004710:	429a      	cmp	r2, r3
 8004712:	dbed      	blt.n	80046f0 <menu+0x34ec>
 8004714:	e017      	b.n	8004746 <menu+0x3542>
			}
		} else {
			int lcdVal = 1;
 8004716:	2301      	movs	r3, #1
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c

			//Eğer ssid 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 800471a:	2300      	movs	r3, #0
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	e00f      	b.n	8004740 <menu+0x353c>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	b2d9      	uxtb	r1, r3
 8004724:	4a3b      	ldr	r2, [pc, #236]	; (8004814 <menu+0x3610>)
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	4413      	add	r3, r2
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	2002      	movs	r0, #2
 8004730:	f003 fb05 	bl	8007d3e <lcd_print_char>
				lcdVal++;
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	3301      	adds	r3, #1
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(int i=0; i<16; i++) {
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	3301      	adds	r3, #1
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2b0f      	cmp	r3, #15
 8004744:	ddec      	ble.n	8004720 <menu+0x351c>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004746:	2102      	movs	r1, #2
 8004748:	4827      	ldr	r0, [pc, #156]	; (80047e8 <menu+0x35e4>)
 800474a:	f004 fe09 	bl	8009360 <HAL_GPIO_ReadPin>
 800474e:	4603      	mov	r3, r0
 8004750:	2b01      	cmp	r3, #1
 8004752:	d176      	bne.n	8004842 <menu+0x363e>
 8004754:	2104      	movs	r1, #4
 8004756:	4824      	ldr	r0, [pc, #144]	; (80047e8 <menu+0x35e4>)
 8004758:	f004 fe02 	bl	8009360 <HAL_GPIO_ReadPin>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d16f      	bne.n	8004842 <menu+0x363e>
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <menu+0x35e8>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	f083 0301 	eor.w	r3, r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d068      	beq.n	8004842 <menu+0x363e>
			takeWifiSSID();
 8004770:	f002 fc86 	bl	8007080 <takeWifiSSID>

			convertArrays(2);
 8004774:	2002      	movs	r0, #2
 8004776:	f7fc f815 	bl	80007a4 <convertArrays>
			HAL_Delay(50);
 800477a:	2032      	movs	r0, #50	; 0x32
 800477c:	f004 f820 	bl	80087c0 <HAL_Delay>

			ssidLength = strlen(wifiSSID);
 8004780:	4824      	ldr	r0, [pc, #144]	; (8004814 <menu+0x3610>)
 8004782:	f7fb fd4f 	bl	8000224 <strlen>
 8004786:	4603      	mov	r3, r0
 8004788:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_Delay(250);
 800478a:	20fa      	movs	r0, #250	; 0xfa
 800478c:	f004 f818 	bl	80087c0 <HAL_Delay>
			if(ssidLength == 16) {
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	2b10      	cmp	r3, #16
 8004794:	d105      	bne.n	80047a2 <menu+0x359e>
				lcd_print(2, 1, wifiSSID);
 8004796:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <menu+0x3610>)
 8004798:	2101      	movs	r1, #1
 800479a:	2002      	movs	r0, #2
 800479c:	f003 faba 	bl	8007d14 <lcd_print>
 80047a0:	e04f      	b.n	8004842 <menu+0x363e>
			} else if(ssidLength < 16) {
 80047a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a4:	2b0f      	cmp	r3, #15
 80047a6:	dc15      	bgt.n	80047d4 <menu+0x35d0>
				for(int i=0; i<16-ssidLength; i++) {
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
 80047ac:	e00b      	b.n	80047c6 <menu+0x35c2>
					lcd_delete_char(2, ssidLength);
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	2002      	movs	r0, #2
 80047b6:	f003 fae3 	bl	8007d80 <lcd_delete_char>
					ssidLength++;
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	3301      	adds	r3, #1
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
				for(int i=0; i<16-ssidLength; i++) {
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	3301      	adds	r3, #1
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	f1c3 0310 	rsb	r3, r3, #16
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	429a      	cmp	r2, r3
 80047d0:	dbed      	blt.n	80047ae <menu+0x35aa>
 80047d2:	e036      	b.n	8004842 <menu+0x363e>
				}
			} else {
				int lcdVal = 1;
 80047d4:	2301      	movs	r3, #1
 80047d6:	623b      	str	r3, [r7, #32]

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	e02e      	b.n	800483c <menu+0x3638>
 80047de:	bf00      	nop
 80047e0:	20000241 	.word	0x20000241
 80047e4:	0800d390 	.word	0x0800d390
 80047e8:	40010800 	.word	0x40010800
 80047ec:	2000024f 	.word	0x2000024f
 80047f0:	2000023f 	.word	0x2000023f
 80047f4:	20000118 	.word	0x20000118
 80047f8:	2000024c 	.word	0x2000024c
 80047fc:	20000220 	.word	0x20000220
 8004800:	20000240 	.word	0x20000240
 8004804:	0800dad8 	.word	0x0800dad8
 8004808:	0800daec 	.word	0x0800daec
 800480c:	20000190 	.word	0x20000190
 8004810:	0800db00 	.word	0x0800db00
 8004814:	2000019c 	.word	0x2000019c
 8004818:	0800db08 	.word	0x0800db08
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	b2d9      	uxtb	r1, r3
 8004820:	4a8b      	ldr	r2, [pc, #556]	; (8004a50 <menu+0x384c>)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	2002      	movs	r0, #2
 800482c:	f003 fa87 	bl	8007d3e <lcd_print_char>
					lcdVal++;
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	3301      	adds	r3, #1
 8004834:	623b      	str	r3, [r7, #32]
				for(int i=0; i<16; i++) {
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	ddec      	ble.n	800481c <menu+0x3618>
				}
			}
		}
	}

	if (menuSayac == 34) {
 8004842:	4b84      	ldr	r3, [pc, #528]	; (8004a54 <menu+0x3850>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b22      	cmp	r3, #34	; 0x22
 8004848:	f040 80ac 	bne.w	80049a4 <menu+0x37a0>
		calismaSayModu = 0;
 800484c:	4b82      	ldr	r3, [pc, #520]	; (8004a58 <menu+0x3854>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
		int passLength = strlen(wifiPass);
 8004852:	4882      	ldr	r0, [pc, #520]	; (8004a5c <menu+0x3858>)
 8004854:	f7fb fce6 	bl	8000224 <strlen>
 8004858:	4603      	mov	r3, r0
 800485a:	61bb      	str	r3, [r7, #24]

		convertArrays(3);
 800485c:	2003      	movs	r0, #3
 800485e:	f7fb ffa1 	bl	80007a4 <convertArrays>
		HAL_Delay(50);
 8004862:	2032      	movs	r0, #50	; 0x32
 8004864:	f003 ffac 	bl	80087c0 <HAL_Delay>

		lcd_print(1, 1, "WIFI PASS       ");
 8004868:	4a7d      	ldr	r2, [pc, #500]	; (8004a60 <menu+0x385c>)
 800486a:	2101      	movs	r1, #1
 800486c:	2001      	movs	r0, #1
 800486e:	f003 fa51 	bl	8007d14 <lcd_print>
		if(passLength == 16) {
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b10      	cmp	r3, #16
 8004876:	d105      	bne.n	8004884 <menu+0x3680>
			lcd_print(2, 1, wifiPass);
 8004878:	4a78      	ldr	r2, [pc, #480]	; (8004a5c <menu+0x3858>)
 800487a:	2101      	movs	r1, #1
 800487c:	2002      	movs	r0, #2
 800487e:	f003 fa49 	bl	8007d14 <lcd_print>
 8004882:	e030      	b.n	80048e6 <menu+0x36e2>
		} else if(passLength < 16) {
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	dc15      	bgt.n	80048b6 <menu+0x36b2>
			for(int i=0; i<16-passLength; i++) {
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e00b      	b.n	80048a8 <menu+0x36a4>
				lcd_delete_char(2, passLength);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	2002      	movs	r0, #2
 8004898:	f003 fa72 	bl	8007d80 <lcd_delete_char>
				passLength++;
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	3301      	adds	r3, #1
 80048a0:	61bb      	str	r3, [r7, #24]
			for(int i=0; i<16-passLength; i++) {
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	3301      	adds	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f1c3 0310 	rsb	r3, r3, #16
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	dbed      	blt.n	8004890 <menu+0x368c>
 80048b4:	e017      	b.n	80048e6 <menu+0x36e2>
			}
		} else {
			int lcdVal = 1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	613b      	str	r3, [r7, #16]

			//Eğer pass 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e00f      	b.n	80048e0 <menu+0x36dc>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	b2d9      	uxtb	r1, r3
 80048c4:	4a65      	ldr	r2, [pc, #404]	; (8004a5c <menu+0x3858>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	2002      	movs	r0, #2
 80048d0:	f003 fa35 	bl	8007d3e <lcd_print_char>
				lcdVal++;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3301      	adds	r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
			for(int i=0; i<16; i++) {
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b0f      	cmp	r3, #15
 80048e4:	ddec      	ble.n	80048c0 <menu+0x36bc>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048e6:	2102      	movs	r1, #2
 80048e8:	485e      	ldr	r0, [pc, #376]	; (8004a64 <menu+0x3860>)
 80048ea:	f004 fd39 	bl	8009360 <HAL_GPIO_ReadPin>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d157      	bne.n	80049a4 <menu+0x37a0>
 80048f4:	2104      	movs	r1, #4
 80048f6:	485b      	ldr	r0, [pc, #364]	; (8004a64 <menu+0x3860>)
 80048f8:	f004 fd32 	bl	8009360 <HAL_GPIO_ReadPin>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d150      	bne.n	80049a4 <menu+0x37a0>
 8004902:	4b59      	ldr	r3, [pc, #356]	; (8004a68 <menu+0x3864>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d049      	beq.n	80049a4 <menu+0x37a0>
			takeWifiPass();
 8004910:	f002 fd56 	bl	80073c0 <takeWifiPass>

			convertArrays(3);
 8004914:	2003      	movs	r0, #3
 8004916:	f7fb ff45 	bl	80007a4 <convertArrays>
			HAL_Delay(50);
 800491a:	2032      	movs	r0, #50	; 0x32
 800491c:	f003 ff50 	bl	80087c0 <HAL_Delay>

			passLength = strlen(wifiPass);
 8004920:	484e      	ldr	r0, [pc, #312]	; (8004a5c <menu+0x3858>)
 8004922:	f7fb fc7f 	bl	8000224 <strlen>
 8004926:	4603      	mov	r3, r0
 8004928:	61bb      	str	r3, [r7, #24]

			HAL_Delay(250);
 800492a:	20fa      	movs	r0, #250	; 0xfa
 800492c:	f003 ff48 	bl	80087c0 <HAL_Delay>
			if(passLength == 16) {
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b10      	cmp	r3, #16
 8004934:	d105      	bne.n	8004942 <menu+0x373e>
				lcd_print(2, 1, wifiPass);
 8004936:	4a49      	ldr	r2, [pc, #292]	; (8004a5c <menu+0x3858>)
 8004938:	2101      	movs	r1, #1
 800493a:	2002      	movs	r0, #2
 800493c:	f003 f9ea 	bl	8007d14 <lcd_print>
 8004940:	e030      	b.n	80049a4 <menu+0x37a0>
			} else if(passLength < 16) {
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b0f      	cmp	r3, #15
 8004946:	dc15      	bgt.n	8004974 <menu+0x3770>
				for(int i=0; i<16-passLength; i++) {
 8004948:	2300      	movs	r3, #0
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	e00b      	b.n	8004966 <menu+0x3762>
					lcd_delete_char(2, passLength);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	2002      	movs	r0, #2
 8004956:	f003 fa13 	bl	8007d80 <lcd_delete_char>
					passLength++;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	3301      	adds	r3, #1
 800495e:	61bb      	str	r3, [r7, #24]
				for(int i=0; i<16-passLength; i++) {
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	3301      	adds	r3, #1
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f1c3 0310 	rsb	r3, r3, #16
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	dbed      	blt.n	800494e <menu+0x374a>
 8004972:	e017      	b.n	80049a4 <menu+0x37a0>
				}
			} else {
				int lcdVal = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	607b      	str	r3, [r7, #4]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 8004978:	2300      	movs	r3, #0
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	e00f      	b.n	800499e <menu+0x379a>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	b2d9      	uxtb	r1, r3
 8004982:	4a36      	ldr	r2, [pc, #216]	; (8004a5c <menu+0x3858>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	4413      	add	r3, r2
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	2002      	movs	r0, #2
 800498e:	f003 f9d6 	bl	8007d3e <lcd_print_char>
					lcdVal++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3301      	adds	r3, #1
 8004996:	607b      	str	r3, [r7, #4]
				for(int i=0; i<16; i++) {
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b0f      	cmp	r3, #15
 80049a2:	ddec      	ble.n	800497e <menu+0x377a>
				}
			}
		}
	}

	if (menuSayac == 35) {
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <menu+0x3850>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b23      	cmp	r3, #35	; 0x23
 80049aa:	d14d      	bne.n	8004a48 <menu+0x3844>
		if(dilSecim == 0) {
 80049ac:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <menu+0x3868>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <menu+0x37c6>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80049b4:	4a2e      	ldr	r2, [pc, #184]	; (8004a70 <menu+0x386c>)
 80049b6:	2101      	movs	r1, #1
 80049b8:	2001      	movs	r0, #1
 80049ba:	f003 f9ab 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80049be:	4a2d      	ldr	r2, [pc, #180]	; (8004a74 <menu+0x3870>)
 80049c0:	2101      	movs	r1, #1
 80049c2:	2002      	movs	r0, #2
 80049c4:	f003 f9a6 	bl	8007d14 <lcd_print>
 80049c8:	e00d      	b.n	80049e6 <menu+0x37e2>
		} else if(dilSecim == 1) {
 80049ca:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <menu+0x3868>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d109      	bne.n	80049e6 <menu+0x37e2>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80049d2:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <menu+0x3874>)
 80049d4:	2101      	movs	r1, #1
 80049d6:	2001      	movs	r0, #1
 80049d8:	f003 f99c 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80049dc:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <menu+0x3878>)
 80049de:	2101      	movs	r1, #1
 80049e0:	2002      	movs	r0, #2
 80049e2:	f003 f997 	bl	8007d14 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80049e6:	2108      	movs	r1, #8
 80049e8:	481e      	ldr	r0, [pc, #120]	; (8004a64 <menu+0x3860>)
 80049ea:	f004 fcb9 	bl	8009360 <HAL_GPIO_ReadPin>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d129      	bne.n	8004a48 <menu+0x3844>
			menuGiris = 0;
 80049f4:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <menu+0x387c>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80049fa:	bf00      	nop
 80049fc:	4821      	ldr	r0, [pc, #132]	; (8004a84 <menu+0x3880>)
 80049fe:	f005 fad8 	bl	8009fb2 <HAL_I2C_GetError>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d0f9      	beq.n	80049fc <menu+0x37f8>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004a08:	bf00      	nop
 8004a0a:	481e      	ldr	r0, [pc, #120]	; (8004a84 <menu+0x3880>)
 8004a0c:	f005 fac4 	bl	8009f98 <HAL_I2C_GetState>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d1f9      	bne.n	8004a0a <menu+0x3806>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004a16:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a1a:	9302      	str	r3, [sp, #8]
 8004a1c:	236e      	movs	r3, #110	; 0x6e
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <menu+0x3884>)
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	236e      	movs	r3, #110	; 0x6e
 8004a26:	2200      	movs	r2, #0
 8004a28:	21a0      	movs	r1, #160	; 0xa0
 8004a2a:	4816      	ldr	r0, [pc, #88]	; (8004a84 <menu+0x3880>)
 8004a2c:	f004 ff52 	bl	80098d4 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004a30:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004a34:	f003 fec4 	bl	80087c0 <HAL_Delay>

			lcd_clear();
 8004a38:	f003 f998 	bl	8007d6c <lcd_clear>
			HAL_Delay(500);
 8004a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a40:	f003 febe 	bl	80087c0 <HAL_Delay>
			NVIC_SystemReset();
 8004a44:	f7fc fbc8 	bl	80011d8 <__NVIC_SystemReset>
		}
	}
}
 8004a48:	bf00      	nop
 8004a4a:	3738      	adds	r7, #56	; 0x38
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	2000019c 	.word	0x2000019c
 8004a54:	20000220 	.word	0x20000220
 8004a58:	20000240 	.word	0x20000240
 8004a5c:	200001b0 	.word	0x200001b0
 8004a60:	0800db1c 	.word	0x0800db1c
 8004a64:	40010800 	.word	0x40010800
 8004a68:	2000024f 	.word	0x2000024f
 8004a6c:	20000241 	.word	0x20000241
 8004a70:	0800db30 	.word	0x0800db30
 8004a74:	0800db44 	.word	0x0800db44
 8004a78:	0800db58 	.word	0x0800db58
 8004a7c:	0800db6c 	.word	0x0800db6c
 8004a80:	2000023d 	.word	0x2000023d
 8004a84:	200003a8 	.word	0x200003a8
 8004a88:	20000118 	.word	0x20000118

08004a8c <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a9c:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <lcdUpdate+0x9c>)
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f003 f937 	bl	8007d14 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004aa6:	e03b      	b.n	8004b20 <lcdUpdate+0x94>
	} else if(y==2) {
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d105      	bne.n	8004aba <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004aae:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <lcdUpdate+0x9c>)
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	2002      	movs	r0, #2
 8004ab4:	f003 f92e 	bl	8007d14 <lcd_print>
}
 8004ab8:	e032      	b.n	8004b20 <lcdUpdate+0x94>
	} else if(y==3) {
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d105      	bne.n	8004acc <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004ac0:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <lcdUpdate+0x9c>)
 8004ac2:	2103      	movs	r1, #3
 8004ac4:	2002      	movs	r0, #2
 8004ac6:	f003 f925 	bl	8007d14 <lcd_print>
}
 8004aca:	e029      	b.n	8004b20 <lcdUpdate+0x94>
	} else if(y==4) {
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d105      	bne.n	8004ade <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004ad2:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <lcdUpdate+0x9c>)
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	2002      	movs	r0, #2
 8004ad8:	f003 f91c 	bl	8007d14 <lcd_print>
}
 8004adc:	e020      	b.n	8004b20 <lcdUpdate+0x94>
	} else if(y==5) {
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d105      	bne.n	8004af0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004ae4:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <lcdUpdate+0x9c>)
 8004ae6:	2105      	movs	r1, #5
 8004ae8:	2002      	movs	r0, #2
 8004aea:	f003 f913 	bl	8007d14 <lcd_print>
}
 8004aee:	e017      	b.n	8004b20 <lcdUpdate+0x94>
	} else if(y==6) {
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d105      	bne.n	8004b02 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004af6:	4a0c      	ldr	r2, [pc, #48]	; (8004b28 <lcdUpdate+0x9c>)
 8004af8:	2106      	movs	r1, #6
 8004afa:	2002      	movs	r0, #2
 8004afc:	f003 f90a 	bl	8007d14 <lcd_print>
}
 8004b00:	e00e      	b.n	8004b20 <lcdUpdate+0x94>
	} else if (y==7) {
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b07      	cmp	r3, #7
 8004b06:	d10b      	bne.n	8004b20 <lcdUpdate+0x94>
		lcd_clear();
 8004b08:	f003 f930 	bl	8007d6c <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004b0c:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <lcdUpdate+0xa0>)
 8004b0e:	2104      	movs	r1, #4
 8004b10:	2001      	movs	r0, #1
 8004b12:	f003 f8ff 	bl	8007d14 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004b16:	4a06      	ldr	r2, [pc, #24]	; (8004b30 <lcdUpdate+0xa4>)
 8004b18:	2106      	movs	r1, #6
 8004b1a:	2002      	movs	r0, #2
 8004b1c:	f003 f8fa 	bl	8007d14 <lcd_print>
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	0800db80 	.word	0x0800db80
 8004b2c:	0800db84 	.word	0x0800db84
 8004b30:	0800db8c 	.word	0x0800db8c

08004b34 <bekle>:

void bekle() {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
	timer1=millis;
 8004b38:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <bekle+0x124>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a47      	ldr	r2, [pc, #284]	; (8004c5c <bekle+0x128>)
 8004b3e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b40:	e002      	b.n	8004b48 <bekle+0x14>
    	butonKontrol = 1;
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <bekle+0x12c>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b48:	2101      	movs	r1, #1
 8004b4a:	4846      	ldr	r0, [pc, #280]	; (8004c64 <bekle+0x130>)
 8004b4c:	f004 fc08 	bl	8009360 <HAL_GPIO_ReadPin>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d109      	bne.n	8004b6a <bekle+0x36>
 8004b56:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <bekle+0x124>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b40      	ldr	r3, [pc, #256]	; (8004c5c <bekle+0x128>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d0ef      	beq.n	8004b42 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b62:	e002      	b.n	8004b6a <bekle+0x36>
    	butonKontrol = 1;
 8004b64:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <bekle+0x12c>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b6a:	2108      	movs	r1, #8
 8004b6c:	483e      	ldr	r0, [pc, #248]	; (8004c68 <bekle+0x134>)
 8004b6e:	f004 fbf7 	bl	8009360 <HAL_GPIO_ReadPin>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d109      	bne.n	8004b8c <bekle+0x58>
 8004b78:	4b37      	ldr	r3, [pc, #220]	; (8004c58 <bekle+0x124>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <bekle+0x128>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d0ef      	beq.n	8004b64 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b84:	e002      	b.n	8004b8c <bekle+0x58>
    	butonKontrol = 1;
 8004b86:	4b36      	ldr	r3, [pc, #216]	; (8004c60 <bekle+0x12c>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	4835      	ldr	r0, [pc, #212]	; (8004c64 <bekle+0x130>)
 8004b90:	f004 fbe6 	bl	8009360 <HAL_GPIO_ReadPin>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d109      	bne.n	8004bae <bekle+0x7a>
 8004b9a:	4b2f      	ldr	r3, [pc, #188]	; (8004c58 <bekle+0x124>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b2f      	ldr	r3, [pc, #188]	; (8004c5c <bekle+0x128>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d0ef      	beq.n	8004b86 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ba6:	e002      	b.n	8004bae <bekle+0x7a>
    	butonKontrol = 1;
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <bekle+0x12c>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bae:	2104      	movs	r1, #4
 8004bb0:	482c      	ldr	r0, [pc, #176]	; (8004c64 <bekle+0x130>)
 8004bb2:	f004 fbd5 	bl	8009360 <HAL_GPIO_ReadPin>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d109      	bne.n	8004bd0 <bekle+0x9c>
 8004bbc:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <bekle+0x124>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <bekle+0x128>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d0ef      	beq.n	8004ba8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bc8:	e002      	b.n	8004bd0 <bekle+0x9c>
    	butonKontrol = 1;
 8004bca:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <bekle+0x12c>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bd0:	2108      	movs	r1, #8
 8004bd2:	4824      	ldr	r0, [pc, #144]	; (8004c64 <bekle+0x130>)
 8004bd4:	f004 fbc4 	bl	8009360 <HAL_GPIO_ReadPin>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d109      	bne.n	8004bf2 <bekle+0xbe>
 8004bde:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <bekle+0x124>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <bekle+0x128>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d0ef      	beq.n	8004bca <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bea:	e002      	b.n	8004bf2 <bekle+0xbe>
    	butonKontrol = 1;
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <bekle+0x12c>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	481c      	ldr	r0, [pc, #112]	; (8004c68 <bekle+0x134>)
 8004bf6:	f004 fbb3 	bl	8009360 <HAL_GPIO_ReadPin>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <bekle+0xe0>
 8004c00:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <bekle+0x124>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <bekle+0x128>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d0ef      	beq.n	8004bec <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c0c:	e002      	b.n	8004c14 <bekle+0xe0>
    	butonKontrol = 1;
 8004c0e:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <bekle+0x12c>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c18:	4813      	ldr	r0, [pc, #76]	; (8004c68 <bekle+0x134>)
 8004c1a:	f004 fba1 	bl	8009360 <HAL_GPIO_ReadPin>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <bekle+0x104>
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <bekle+0x124>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <bekle+0x128>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d0ee      	beq.n	8004c0e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c30:	e002      	b.n	8004c38 <bekle+0x104>
    	butonKontrol = 1;
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <bekle+0x12c>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c3c:	480a      	ldr	r0, [pc, #40]	; (8004c68 <bekle+0x134>)
 8004c3e:	f004 fb8f 	bl	8009360 <HAL_GPIO_ReadPin>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <bekle+0x120>
 8004c48:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <bekle+0x124>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <bekle+0x128>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d0ee      	beq.n	8004c32 <bekle+0xfe>
    }

}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	200001fc 	.word	0x200001fc
 8004c5c:	20000204 	.word	0x20000204
 8004c60:	2000024f 	.word	0x2000024f
 8004c64:	40010800 	.word	0x40010800
 8004c68:	40011000 	.word	0x40011000

08004c6c <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <checkLCDBacklight+0x24>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <checkLCDBacklight+0x28>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b3b      	cmp	r3, #59	; 0x3b
 8004c7c:	d903      	bls.n	8004c86 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f003 f894 	bl	8007dac <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c84:	e002      	b.n	8004c8c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c86:	2001      	movs	r0, #1
 8004c88:	f003 f890 	bl	8007dac <lcd_backlight>
}
 8004c8c:	bf00      	nop
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	200001fc 	.word	0x200001fc
 8004c94:	20000218 	.word	0x20000218

08004c98 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c9c:	4b13      	ldr	r3, [pc, #76]	; (8004cec <checkBasincSalteri+0x54>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <checkBasincSalteri+0x12>
		basincVar=1;
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <checkBasincSalteri+0x58>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004caa:	4b10      	ldr	r3, [pc, #64]	; (8004cec <checkBasincSalteri+0x54>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d119      	bne.n	8004ce6 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cb6:	480f      	ldr	r0, [pc, #60]	; (8004cf4 <checkBasincSalteri+0x5c>)
 8004cb8:	f004 fb52 	bl	8009360 <HAL_GPIO_ReadPin>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <checkBasincSalteri+0x60>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <checkBasincSalteri+0x64>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d90a      	bls.n	8004ce6 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <checkBasincSalteri+0x58>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004cd6:	e006      	b.n	8004ce6 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <checkBasincSalteri+0x60>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <checkBasincSalteri+0x64>)
 8004cde:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <checkBasincSalteri+0x58>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000227 	.word	0x20000227
 8004cf0:	20000223 	.word	0x20000223
 8004cf4:	40011000 	.word	0x40011000
 8004cf8:	200001fc 	.word	0x200001fc
 8004cfc:	20000214 	.word	0x20000214

08004d00 <checkBasGonder>:

void checkBasGonder() {
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <checkBasGonder+0x74>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10b      	bne.n	8004d24 <checkBasGonder+0x24>
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <checkBasGonder+0x78>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <checkBasGonder+0x24>
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <checkBasGonder+0x7c>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004d1c:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <checkBasGonder+0x80>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e009      	b.n	8004d38 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004d24:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <checkBasGonder+0x78>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f083 0301 	eor.w	r3, r3, #1
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004d32:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <checkBasGonder+0x80>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <checkBasGonder+0x74>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10b      	bne.n	8004d58 <checkBasGonder+0x58>
 8004d40:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <checkBasGonder+0x84>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <checkBasGonder+0x58>
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <checkBasGonder+0x7c>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <checkBasGonder+0x88>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004d56:	e009      	b.n	8004d6c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <checkBasGonder+0x84>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f083 0301 	eor.w	r3, r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <checkBasGonder+0x88>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	20000221 	.word	0x20000221
 8004d78:	20000255 	.word	0x20000255
 8004d7c:	2000022f 	.word	0x2000022f
 8004d80:	2000025c 	.word	0x2000025c
 8004d84:	20000258 	.word	0x20000258
 8004d88:	2000025d 	.word	0x2000025d

08004d8c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d90:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <checkKapiSecimleri+0x98>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d98:	4b23      	ldr	r3, [pc, #140]	; (8004e28 <checkKapiSecimleri+0x9c>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d9e:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <checkKapiSecimleri+0x98>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d10e      	bne.n	8004dc4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004daa:	4820      	ldr	r0, [pc, #128]	; (8004e2c <checkKapiSecimleri+0xa0>)
 8004dac:	f004 fad8 	bl	8009360 <HAL_GPIO_ReadPin>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004db6:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <checkKapiSecimleri+0x9c>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	e002      	b.n	8004dc4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <checkKapiSecimleri+0x9c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004dc4:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <checkKapiSecimleri+0x98>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d10e      	bne.n	8004dea <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dd0:	4816      	ldr	r0, [pc, #88]	; (8004e2c <checkKapiSecimleri+0xa0>)
 8004dd2:	f004 fac5 	bl	8009360 <HAL_GPIO_ReadPin>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d103      	bne.n	8004de4 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004ddc:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <checkKapiSecimleri+0x9c>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e002      	b.n	8004dea <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004de4:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <checkKapiSecimleri+0x9c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <checkKapiSecimleri+0x98>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d116      	bne.n	8004e20 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004df6:	480d      	ldr	r0, [pc, #52]	; (8004e2c <checkKapiSecimleri+0xa0>)
 8004df8:	f004 fab2 	bl	8009360 <HAL_GPIO_ReadPin>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10b      	bne.n	8004e1a <checkKapiSecimleri+0x8e>
 8004e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e06:	4809      	ldr	r0, [pc, #36]	; (8004e2c <checkKapiSecimleri+0xa0>)
 8004e08:	f004 faaa 	bl	8009360 <HAL_GPIO_ReadPin>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <checkKapiSecimleri+0x9c>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004e18:	e002      	b.n	8004e20 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004e1a:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <checkKapiSecimleri+0x9c>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000228 	.word	0x20000228
 8004e28:	20000273 	.word	0x20000273
 8004e2c:	40010800 	.word	0x40010800

08004e30 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004e34:	4b62      	ldr	r3, [pc, #392]	; (8004fc0 <checkAktifCalisma+0x190>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f041 833e 	bne.w	80064ba <checkAktifCalisma+0x168a>
 8004e3e:	4b61      	ldr	r3, [pc, #388]	; (8004fc4 <checkAktifCalisma+0x194>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f041 8339 	bne.w	80064ba <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004e48:	4b5f      	ldr	r3, [pc, #380]	; (8004fc8 <checkAktifCalisma+0x198>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11a      	bne.n	8004e86 <checkAktifCalisma+0x56>
 8004e50:	4b5e      	ldr	r3, [pc, #376]	; (8004fcc <checkAktifCalisma+0x19c>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <checkAktifCalisma+0x56>
 8004e58:	4b5d      	ldr	r3, [pc, #372]	; (8004fd0 <checkAktifCalisma+0x1a0>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <checkAktifCalisma+0x46>
 8004e60:	4b5c      	ldr	r3, [pc, #368]	; (8004fd4 <checkAktifCalisma+0x1a4>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	f083 0301 	eor.w	r3, r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <checkAktifCalisma+0x46>
 8004e6e:	4b5a      	ldr	r3, [pc, #360]	; (8004fd8 <checkAktifCalisma+0x1a8>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d007      	beq.n	8004e86 <checkAktifCalisma+0x56>
 8004e76:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <checkAktifCalisma+0x1ac>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <checkAktifCalisma+0x80>
 8004e7e:	4b58      	ldr	r3, [pc, #352]	; (8004fe0 <checkAktifCalisma+0x1b0>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d114      	bne.n	8004eb0 <checkAktifCalisma+0x80>
 8004e86:	4b57      	ldr	r3, [pc, #348]	; (8004fe4 <checkAktifCalisma+0x1b4>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <checkAktifCalisma+0x80>
 8004e8e:	4b56      	ldr	r3, [pc, #344]	; (8004fe8 <checkAktifCalisma+0x1b8>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e96:	2201      	movs	r2, #1
 8004e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e9c:	4853      	ldr	r0, [pc, #332]	; (8004fec <checkAktifCalisma+0x1bc>)
 8004e9e:	f004 fa76 	bl	800938e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004ea2:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <checkAktifCalisma+0x1c0>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004ea8:	4b52      	ldr	r3, [pc, #328]	; (8004ff4 <checkAktifCalisma+0x1c4>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e008      	b.n	8004ec2 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eb6:	484d      	ldr	r0, [pc, #308]	; (8004fec <checkAktifCalisma+0x1bc>)
 8004eb8:	f004 fa69 	bl	800938e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004ebc:	4b4c      	ldr	r3, [pc, #304]	; (8004ff0 <checkAktifCalisma+0x1c0>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004ec2:	4b40      	ldr	r3, [pc, #256]	; (8004fc4 <checkAktifCalisma+0x194>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d160      	bne.n	8004f8c <checkAktifCalisma+0x15c>
 8004eca:	4b46      	ldr	r3, [pc, #280]	; (8004fe4 <checkAktifCalisma+0x1b4>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d05c      	beq.n	8004f8c <checkAktifCalisma+0x15c>
 8004ed2:	4b45      	ldr	r3, [pc, #276]	; (8004fe8 <checkAktifCalisma+0x1b8>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d058      	beq.n	8004f8c <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ede:	4843      	ldr	r0, [pc, #268]	; (8004fec <checkAktifCalisma+0x1bc>)
 8004ee0:	f004 fa3e 	bl	8009360 <HAL_GPIO_ReadPin>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <checkAktifCalisma+0xc2>
 8004eea:	4b43      	ldr	r3, [pc, #268]	; (8004ff8 <checkAktifCalisma+0x1c8>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d04c      	beq.n	8004f8c <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	4841      	ldr	r0, [pc, #260]	; (8004ffc <checkAktifCalisma+0x1cc>)
 8004ef6:	f004 fa33 	bl	8009360 <HAL_GPIO_ReadPin>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d145      	bne.n	8004f8c <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004f00:	4b3f      	ldr	r3, [pc, #252]	; (8005000 <checkAktifCalisma+0x1d0>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d041      	beq.n	8004f8c <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f0c:	4837      	ldr	r0, [pc, #220]	; (8004fec <checkAktifCalisma+0x1bc>)
 8004f0e:	f004 fa27 	bl	8009360 <HAL_GPIO_ReadPin>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10e      	bne.n	8004f36 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f1c:	4833      	ldr	r0, [pc, #204]	; (8004fec <checkAktifCalisma+0x1bc>)
 8004f1e:	f004 fa1f 	bl	8009360 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d106      	bne.n	8004f36 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004f28:	2140      	movs	r1, #64	; 0x40
 8004f2a:	4834      	ldr	r0, [pc, #208]	; (8004ffc <checkAktifCalisma+0x1cc>)
 8004f2c:	f004 fa18 	bl	8009360 <HAL_GPIO_ReadPin>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d003      	beq.n	8004f3e <checkAktifCalisma+0x10e>
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <checkAktifCalisma+0x198>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d026      	beq.n	8004f8c <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <checkAktifCalisma+0x1a0>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01f      	beq.n	8004f8c <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004f4c:	4b1f      	ldr	r3, [pc, #124]	; (8004fcc <checkAktifCalisma+0x19c>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f083 0301 	eor.w	r3, r3, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d018      	beq.n	8004f8c <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <checkAktifCalisma+0x1ac>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	f083 0301 	eor.w	r3, r3, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d011      	beq.n	8004f8c <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004f68:	4b26      	ldr	r3, [pc, #152]	; (8005004 <checkAktifCalisma+0x1d4>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	f083 0301 	eor.w	r3, r3, #1
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f76:	4b24      	ldr	r3, [pc, #144]	; (8005008 <checkAktifCalisma+0x1d8>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	f083 0301 	eor.w	r3, r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f84:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <checkAktifCalisma+0x198>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e002      	b.n	8004f92 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <checkAktifCalisma+0x198>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <checkAktifCalisma+0x198>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d03a      	beq.n	8005010 <checkAktifCalisma+0x1e0>
 8004f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f9e:	4817      	ldr	r0, [pc, #92]	; (8004ffc <checkAktifCalisma+0x1cc>)
 8004fa0:	f004 f9de 	bl	8009360 <HAL_GPIO_ReadPin>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d132      	bne.n	8005010 <checkAktifCalisma+0x1e0>
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <checkAktifCalisma+0x1dc>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d02e      	beq.n	8005010 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fb8:	480c      	ldr	r0, [pc, #48]	; (8004fec <checkAktifCalisma+0x1bc>)
 8004fba:	f004 f9e8 	bl	800938e <HAL_GPIO_WritePin>
 8004fbe:	e02d      	b.n	800501c <checkAktifCalisma+0x1ec>
 8004fc0:	2000023e 	.word	0x2000023e
 8004fc4:	2000023d 	.word	0x2000023d
 8004fc8:	20000255 	.word	0x20000255
 8004fcc:	20000256 	.word	0x20000256
 8004fd0:	20000258 	.word	0x20000258
 8004fd4:	20000250 	.word	0x20000250
 8004fd8:	20000233 	.word	0x20000233
 8004fdc:	20000257 	.word	0x20000257
 8004fe0:	20000232 	.word	0x20000232
 8004fe4:	20000272 	.word	0x20000272
 8004fe8:	20000273 	.word	0x20000273
 8004fec:	40010c00 	.word	0x40010c00
 8004ff0:	20000274 	.word	0x20000274
 8004ff4:	2000025f 	.word	0x2000025f
 8004ff8:	2000025c 	.word	0x2000025c
 8004ffc:	40011000 	.word	0x40011000
 8005000:	20000223 	.word	0x20000223
 8005004:	2000025a 	.word	0x2000025a
 8005008:	2000025b 	.word	0x2000025b
 800500c:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005010:	2200      	movs	r2, #0
 8005012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005016:	4860      	ldr	r0, [pc, #384]	; (8005198 <checkAktifCalisma+0x368>)
 8005018:	f004 f9b9 	bl	800938e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800501c:	4b5f      	ldr	r3, [pc, #380]	; (800519c <checkAktifCalisma+0x36c>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d013      	beq.n	800504c <checkAktifCalisma+0x21c>
 8005024:	4b5e      	ldr	r3, [pc, #376]	; (80051a0 <checkAktifCalisma+0x370>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d007      	beq.n	800503c <checkAktifCalisma+0x20c>
 800502c:	4b5c      	ldr	r3, [pc, #368]	; (80051a0 <checkAktifCalisma+0x370>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d003      	beq.n	800503c <checkAktifCalisma+0x20c>
 8005034:	4b5b      	ldr	r3, [pc, #364]	; (80051a4 <checkAktifCalisma+0x374>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d107      	bne.n	800504c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800503c:	2201      	movs	r2, #1
 800503e:	2104      	movs	r1, #4
 8005040:	4855      	ldr	r0, [pc, #340]	; (8005198 <checkAktifCalisma+0x368>)
 8005042:	f004 f9a4 	bl	800938e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005046:	4b58      	ldr	r3, [pc, #352]	; (80051a8 <checkAktifCalisma+0x378>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800504c:	4b56      	ldr	r3, [pc, #344]	; (80051a8 <checkAktifCalisma+0x378>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02f      	beq.n	80050b4 <checkAktifCalisma+0x284>
 8005054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005058:	484f      	ldr	r0, [pc, #316]	; (8005198 <checkAktifCalisma+0x368>)
 800505a:	f004 f981 	bl	8009360 <HAL_GPIO_ReadPin>
 800505e:	4603      	mov	r3, r0
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <checkAktifCalisma+0x242>
 8005064:	4b51      	ldr	r3, [pc, #324]	; (80051ac <checkAktifCalisma+0x37c>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	f083 0301 	eor.w	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <checkAktifCalisma+0x250>
 8005072:	2102      	movs	r1, #2
 8005074:	484e      	ldr	r0, [pc, #312]	; (80051b0 <checkAktifCalisma+0x380>)
 8005076:	f004 f973 	bl	8009360 <HAL_GPIO_ReadPin>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d119      	bne.n	80050b4 <checkAktifCalisma+0x284>
 8005080:	4b4c      	ldr	r3, [pc, #304]	; (80051b4 <checkAktifCalisma+0x384>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <checkAktifCalisma+0x284>
 8005088:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <checkAktifCalisma+0x388>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d011      	beq.n	80050b4 <checkAktifCalisma+0x284>
 8005090:	4b4a      	ldr	r3, [pc, #296]	; (80051bc <checkAktifCalisma+0x38c>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <checkAktifCalisma+0x284>
 8005098:	4b49      	ldr	r3, [pc, #292]	; (80051c0 <checkAktifCalisma+0x390>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f083 0301 	eor.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <checkAktifCalisma+0x284>
			timer2=millis;
 80050a6:	4b47      	ldr	r3, [pc, #284]	; (80051c4 <checkAktifCalisma+0x394>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a47      	ldr	r2, [pc, #284]	; (80051c8 <checkAktifCalisma+0x398>)
 80050ac:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80050ae:	4b44      	ldr	r3, [pc, #272]	; (80051c0 <checkAktifCalisma+0x390>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80050b4:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <checkAktifCalisma+0x394>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <checkAktifCalisma+0x398>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	4a43      	ldr	r2, [pc, #268]	; (80051cc <checkAktifCalisma+0x39c>)
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d303      	bcc.n	80050ce <checkAktifCalisma+0x29e>
 80050c6:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <checkAktifCalisma+0x390>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d111      	bne.n	80050f2 <checkAktifCalisma+0x2c2>
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <checkAktifCalisma+0x384>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	f083 0301 	eor.w	r3, r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <checkAktifCalisma+0x2c2>
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <checkAktifCalisma+0x388>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f083 0301 	eor.w	r3, r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <checkAktifCalisma+0x2c2>
 80050ea:	4b34      	ldr	r3, [pc, #208]	; (80051bc <checkAktifCalisma+0x38c>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80050f2:	2200      	movs	r2, #0
 80050f4:	2104      	movs	r1, #4
 80050f6:	4828      	ldr	r0, [pc, #160]	; (8005198 <checkAktifCalisma+0x368>)
 80050f8:	f004 f949 	bl	800938e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <checkAktifCalisma+0x378>)
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005102:	4b2f      	ldr	r3, [pc, #188]	; (80051c0 <checkAktifCalisma+0x390>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005108:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <checkAktifCalisma+0x3a0>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005110:	4b30      	ldr	r3, [pc, #192]	; (80051d4 <checkAktifCalisma+0x3a4>)
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005116:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <checkAktifCalisma+0x3a0>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d116      	bne.n	800514c <checkAktifCalisma+0x31c>
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <checkAktifCalisma+0x3a8>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d112      	bne.n	800514c <checkAktifCalisma+0x31c>
 8005126:	2101      	movs	r1, #1
 8005128:	4821      	ldr	r0, [pc, #132]	; (80051b0 <checkAktifCalisma+0x380>)
 800512a:	f004 f919 	bl	8009360 <HAL_GPIO_ReadPin>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <checkAktifCalisma+0x31c>
 8005134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005138:	4817      	ldr	r0, [pc, #92]	; (8005198 <checkAktifCalisma+0x368>)
 800513a:	f004 f911 	bl	8009360 <HAL_GPIO_ReadPin>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d103      	bne.n	800514c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <checkAktifCalisma+0x3a4>)
 8005146:	2201      	movs	r2, #1
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	e011      	b.n	8005170 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800514c:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <checkAktifCalisma+0x3a0>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d10d      	bne.n	8005170 <checkAktifCalisma+0x340>
 8005154:	2101      	movs	r1, #1
 8005156:	4816      	ldr	r0, [pc, #88]	; (80051b0 <checkAktifCalisma+0x380>)
 8005158:	f004 f902 	bl	8009360 <HAL_GPIO_ReadPin>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d106      	bne.n	8005170 <checkAktifCalisma+0x340>
 8005162:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <checkAktifCalisma+0x3a8>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800516a:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <checkAktifCalisma+0x3a4>)
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <checkAktifCalisma+0x3a0>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d134      	bne.n	80051e2 <checkAktifCalisma+0x3b2>
 8005178:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <checkAktifCalisma+0x3a8>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d130      	bne.n	80051e2 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005180:	2101      	movs	r1, #1
 8005182:	480b      	ldr	r0, [pc, #44]	; (80051b0 <checkAktifCalisma+0x380>)
 8005184:	f004 f8ec 	bl	8009360 <HAL_GPIO_ReadPin>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d126      	bne.n	80051dc <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <checkAktifCalisma+0x3a4>)
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e025      	b.n	80051e2 <checkAktifCalisma+0x3b2>
 8005196:	bf00      	nop
 8005198:	40010c00 	.word	0x40010c00
 800519c:	20000255 	.word	0x20000255
 80051a0:	2000022f 	.word	0x2000022f
 80051a4:	20000233 	.word	0x20000233
 80051a8:	20000259 	.word	0x20000259
 80051ac:	2000025c 	.word	0x2000025c
 80051b0:	40011000 	.word	0x40011000
 80051b4:	20000272 	.word	0x20000272
 80051b8:	20000273 	.word	0x20000273
 80051bc:	20000223 	.word	0x20000223
 80051c0:	20000251 	.word	0x20000251
 80051c4:	200001fc 	.word	0x200001fc
 80051c8:	20000208 	.word	0x20000208
 80051cc:	20000234 	.word	0x20000234
 80051d0:	20000224 	.word	0x20000224
 80051d4:	20000277 	.word	0x20000277
 80051d8:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 80051dc:	4b7f      	ldr	r3, [pc, #508]	; (80053dc <checkAktifCalisma+0x5ac>)
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80051e2:	4b7f      	ldr	r3, [pc, #508]	; (80053e0 <checkAktifCalisma+0x5b0>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d17c      	bne.n	80052e4 <checkAktifCalisma+0x4b4>
 80051ea:	4b7e      	ldr	r3, [pc, #504]	; (80053e4 <checkAktifCalisma+0x5b4>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d078      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
 80051f2:	4b7d      	ldr	r3, [pc, #500]	; (80053e8 <checkAktifCalisma+0x5b8>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d074      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80051fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051fe:	487b      	ldr	r0, [pc, #492]	; (80053ec <checkAktifCalisma+0x5bc>)
 8005200:	f004 f8ae 	bl	8009360 <HAL_GPIO_ReadPin>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <checkAktifCalisma+0x3e2>
 800520a:	4b79      	ldr	r3, [pc, #484]	; (80053f0 <checkAktifCalisma+0x5c0>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d068      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005212:	4b72      	ldr	r3, [pc, #456]	; (80053dc <checkAktifCalisma+0x5ac>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d064      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
 800521a:	4b76      	ldr	r3, [pc, #472]	; (80053f4 <checkAktifCalisma+0x5c4>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f083 0301 	eor.w	r3, r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05d      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005228:	2104      	movs	r1, #4
 800522a:	4873      	ldr	r0, [pc, #460]	; (80053f8 <checkAktifCalisma+0x5c8>)
 800522c:	f004 f898 	bl	8009360 <HAL_GPIO_ReadPin>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <checkAktifCalisma+0x40e>
 8005236:	4b71      	ldr	r3, [pc, #452]	; (80053fc <checkAktifCalisma+0x5cc>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d152      	bne.n	80052e4 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800523e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005242:	486a      	ldr	r0, [pc, #424]	; (80053ec <checkAktifCalisma+0x5bc>)
 8005244:	f004 f88c 	bl	8009360 <HAL_GPIO_ReadPin>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d10e      	bne.n	800526c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800524e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005252:	4866      	ldr	r0, [pc, #408]	; (80053ec <checkAktifCalisma+0x5bc>)
 8005254:	f004 f884 	bl	8009360 <HAL_GPIO_ReadPin>
 8005258:	4603      	mov	r3, r0
 800525a:	2b01      	cmp	r3, #1
 800525c:	d106      	bne.n	800526c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800525e:	2140      	movs	r1, #64	; 0x40
 8005260:	4865      	ldr	r0, [pc, #404]	; (80053f8 <checkAktifCalisma+0x5c8>)
 8005262:	f004 f87d 	bl	8009360 <HAL_GPIO_ReadPin>
 8005266:	4603      	mov	r3, r0
 8005268:	2b01      	cmp	r3, #1
 800526a:	d003      	beq.n	8005274 <checkAktifCalisma+0x444>
 800526c:	4b64      	ldr	r3, [pc, #400]	; (8005400 <checkAktifCalisma+0x5d0>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d037      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005274:	4b63      	ldr	r3, [pc, #396]	; (8005404 <checkAktifCalisma+0x5d4>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f083 0301 	eor.w	r3, r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d030      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005282:	4b61      	ldr	r3, [pc, #388]	; (8005408 <checkAktifCalisma+0x5d8>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	f083 0301 	eor.w	r3, r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d029      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005290:	4b5e      	ldr	r3, [pc, #376]	; (800540c <checkAktifCalisma+0x5dc>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f083 0301 	eor.w	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d022      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800529e:	4b5c      	ldr	r3, [pc, #368]	; (8005410 <checkAktifCalisma+0x5e0>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f083 0301 	eor.w	r3, r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80052ac:	4b59      	ldr	r3, [pc, #356]	; (8005414 <checkAktifCalisma+0x5e4>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f083 0301 	eor.w	r3, r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d014      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80052ba:	4b57      	ldr	r3, [pc, #348]	; (8005418 <checkAktifCalisma+0x5e8>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f083 0301 	eor.w	r3, r3, #1
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80052c8:	2201      	movs	r2, #1
 80052ca:	2102      	movs	r1, #2
 80052cc:	4847      	ldr	r0, [pc, #284]	; (80053ec <checkAktifCalisma+0x5bc>)
 80052ce:	f004 f85e 	bl	800938e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80052d2:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <checkAktifCalisma+0x5d0>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80052d8:	4b50      	ldr	r3, [pc, #320]	; (800541c <checkAktifCalisma+0x5ec>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80052de:	4b50      	ldr	r3, [pc, #320]	; (8005420 <checkAktifCalisma+0x5f0>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80052e4:	4b46      	ldr	r3, [pc, #280]	; (8005400 <checkAktifCalisma+0x5d0>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d033      	beq.n	8005354 <checkAktifCalisma+0x524>
 80052ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052f0:	483e      	ldr	r0, [pc, #248]	; (80053ec <checkAktifCalisma+0x5bc>)
 80052f2:	f004 f835 	bl	8009360 <HAL_GPIO_ReadPin>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d106      	bne.n	800530a <checkAktifCalisma+0x4da>
 80052fc:	4b3c      	ldr	r3, [pc, #240]	; (80053f0 <checkAktifCalisma+0x5c0>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <checkAktifCalisma+0x4f0>
 800530a:	2104      	movs	r1, #4
 800530c:	483a      	ldr	r0, [pc, #232]	; (80053f8 <checkAktifCalisma+0x5c8>)
 800530e:	f004 f827 	bl	8009360 <HAL_GPIO_ReadPin>
 8005312:	4603      	mov	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d11d      	bne.n	8005354 <checkAktifCalisma+0x524>
 8005318:	4b38      	ldr	r3, [pc, #224]	; (80053fc <checkAktifCalisma+0x5cc>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d019      	beq.n	8005354 <checkAktifCalisma+0x524>
 8005320:	4b30      	ldr	r3, [pc, #192]	; (80053e4 <checkAktifCalisma+0x5b4>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d015      	beq.n	8005354 <checkAktifCalisma+0x524>
 8005328:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <checkAktifCalisma+0x5b8>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d011      	beq.n	8005354 <checkAktifCalisma+0x524>
 8005330:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <checkAktifCalisma+0x5ac>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <checkAktifCalisma+0x524>
 8005338:	4b3a      	ldr	r3, [pc, #232]	; (8005424 <checkAktifCalisma+0x5f4>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <checkAktifCalisma+0x524>
			timer2=millis;
 8005346:	4b38      	ldr	r3, [pc, #224]	; (8005428 <checkAktifCalisma+0x5f8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a38      	ldr	r2, [pc, #224]	; (800542c <checkAktifCalisma+0x5fc>)
 800534c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800534e:	4b35      	ldr	r3, [pc, #212]	; (8005424 <checkAktifCalisma+0x5f4>)
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005354:	4b34      	ldr	r3, [pc, #208]	; (8005428 <checkAktifCalisma+0x5f8>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b34      	ldr	r3, [pc, #208]	; (800542c <checkAktifCalisma+0x5fc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	4a34      	ldr	r2, [pc, #208]	; (8005430 <checkAktifCalisma+0x600>)
 8005360:	7812      	ldrb	r2, [r2, #0]
 8005362:	4293      	cmp	r3, r2
 8005364:	d303      	bcc.n	800536e <checkAktifCalisma+0x53e>
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <checkAktifCalisma+0x5f4>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d114      	bne.n	8005398 <checkAktifCalisma+0x568>
 800536e:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <checkAktifCalisma+0x5b4>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	f083 0301 	eor.w	r3, r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10d      	bne.n	8005398 <checkAktifCalisma+0x568>
 800537c:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <checkAktifCalisma+0x5b8>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f083 0301 	eor.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <checkAktifCalisma+0x568>
 800538a:	4b14      	ldr	r3, [pc, #80]	; (80053dc <checkAktifCalisma+0x5ac>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f083 0301 	eor.w	r3, r3, #1
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005398:	2200      	movs	r2, #0
 800539a:	2102      	movs	r1, #2
 800539c:	4813      	ldr	r0, [pc, #76]	; (80053ec <checkAktifCalisma+0x5bc>)
 800539e:	f003 fff6 	bl	800938e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80053a2:	4b17      	ldr	r3, [pc, #92]	; (8005400 <checkAktifCalisma+0x5d0>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <checkAktifCalisma+0x5f4>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <checkAktifCalisma+0x5d0>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d040      	beq.n	8005438 <checkAktifCalisma+0x608>
 80053b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053ba:	480f      	ldr	r0, [pc, #60]	; (80053f8 <checkAktifCalisma+0x5c8>)
 80053bc:	f003 ffd0 	bl	8009360 <HAL_GPIO_ReadPin>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d138      	bne.n	8005438 <checkAktifCalisma+0x608>
 80053c6:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <checkAktifCalisma+0x604>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d034      	beq.n	8005438 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80053ce:	2201      	movs	r2, #1
 80053d0:	2101      	movs	r1, #1
 80053d2:	4806      	ldr	r0, [pc, #24]	; (80053ec <checkAktifCalisma+0x5bc>)
 80053d4:	f003 ffdb 	bl	800938e <HAL_GPIO_WritePin>
 80053d8:	e033      	b.n	8005442 <checkAktifCalisma+0x612>
 80053da:	bf00      	nop
 80053dc:	20000277 	.word	0x20000277
 80053e0:	2000023d 	.word	0x2000023d
 80053e4:	20000272 	.word	0x20000272
 80053e8:	20000273 	.word	0x20000273
 80053ec:	40010c00 	.word	0x40010c00
 80053f0:	2000025d 	.word	0x2000025d
 80053f4:	20000271 	.word	0x20000271
 80053f8:	40011000 	.word	0x40011000
 80053fc:	20000226 	.word	0x20000226
 8005400:	20000258 	.word	0x20000258
 8005404:	20000255 	.word	0x20000255
 8005408:	20000259 	.word	0x20000259
 800540c:	20000256 	.word	0x20000256
 8005410:	20000257 	.word	0x20000257
 8005414:	2000025a 	.word	0x2000025a
 8005418:	2000025b 	.word	0x2000025b
 800541c:	20000260 	.word	0x20000260
 8005420:	20000281 	.word	0x20000281
 8005424:	20000250 	.word	0x20000250
 8005428:	200001fc 	.word	0x200001fc
 800542c:	20000208 	.word	0x20000208
 8005430:	20000235 	.word	0x20000235
 8005434:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005438:	2200      	movs	r2, #0
 800543a:	2101      	movs	r1, #1
 800543c:	4836      	ldr	r0, [pc, #216]	; (8005518 <checkAktifCalisma+0x6e8>)
 800543e:	f003 ffa6 	bl	800938e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005442:	4b36      	ldr	r3, [pc, #216]	; (800551c <checkAktifCalisma+0x6ec>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8080 	bne.w	800554c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800544c:	4b34      	ldr	r3, [pc, #208]	; (8005520 <checkAktifCalisma+0x6f0>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d003      	beq.n	800545c <checkAktifCalisma+0x62c>
 8005454:	4b32      	ldr	r3, [pc, #200]	; (8005520 <checkAktifCalisma+0x6f0>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d177      	bne.n	800554c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 800545c:	4b31      	ldr	r3, [pc, #196]	; (8005524 <checkAktifCalisma+0x6f4>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d073      	beq.n	800554c <checkAktifCalisma+0x71c>
 8005464:	4b30      	ldr	r3, [pc, #192]	; (8005528 <checkAktifCalisma+0x6f8>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d06f      	beq.n	800554c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 800546c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005470:	4829      	ldr	r0, [pc, #164]	; (8005518 <checkAktifCalisma+0x6e8>)
 8005472:	f003 ff75 	bl	8009360 <HAL_GPIO_ReadPin>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d167      	bne.n	800554c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 800547c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005480:	482a      	ldr	r0, [pc, #168]	; (800552c <checkAktifCalisma+0x6fc>)
 8005482:	f003 ff6d 	bl	8009360 <HAL_GPIO_ReadPin>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <checkAktifCalisma+0x664>
 800548c:	4b28      	ldr	r3, [pc, #160]	; (8005530 <checkAktifCalisma+0x700>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d15b      	bne.n	800554c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005494:	2140      	movs	r1, #64	; 0x40
 8005496:	4825      	ldr	r0, [pc, #148]	; (800552c <checkAktifCalisma+0x6fc>)
 8005498:	f003 ff62 	bl	8009360 <HAL_GPIO_ReadPin>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10f      	bne.n	80054c2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80054a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054a6:	481c      	ldr	r0, [pc, #112]	; (8005518 <checkAktifCalisma+0x6e8>)
 80054a8:	f003 ff5a 	bl	8009360 <HAL_GPIO_ReadPin>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d107      	bne.n	80054c2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80054b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054b6:	4818      	ldr	r0, [pc, #96]	; (8005518 <checkAktifCalisma+0x6e8>)
 80054b8:	f003 ff52 	bl	8009360 <HAL_GPIO_ReadPin>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d003      	beq.n	80054ca <checkAktifCalisma+0x69a>
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <checkAktifCalisma+0x704>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d040      	beq.n	800554c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80054ca:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <checkAktifCalisma+0x708>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f083 0301 	eor.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d039      	beq.n	800554c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80054d8:	4b18      	ldr	r3, [pc, #96]	; (800553c <checkAktifCalisma+0x70c>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f083 0301 	eor.w	r3, r3, #1
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d032      	beq.n	800554c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <checkAktifCalisma+0x710>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f083 0301 	eor.w	r3, r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02b      	beq.n	800554c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <checkAktifCalisma+0x714>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	f083 0301 	eor.w	r3, r3, #1
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d024      	beq.n	800554c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <checkAktifCalisma+0x718>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f083 0301 	eor.w	r3, r3, #1
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01d      	beq.n	800554c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <checkAktifCalisma+0x704>)
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e01c      	b.n	8005552 <checkAktifCalisma+0x722>
 8005518:	40010c00 	.word	0x40010c00
 800551c:	2000023d 	.word	0x2000023d
 8005520:	2000022f 	.word	0x2000022f
 8005524:	20000272 	.word	0x20000272
 8005528:	20000273 	.word	0x20000273
 800552c:	40011000 	.word	0x40011000
 8005530:	20000230 	.word	0x20000230
 8005534:	20000256 	.word	0x20000256
 8005538:	20000255 	.word	0x20000255
 800553c:	20000259 	.word	0x20000259
 8005540:	20000258 	.word	0x20000258
 8005544:	20000257 	.word	0x20000257
 8005548:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 800554c:	4b64      	ldr	r3, [pc, #400]	; (80056e0 <checkAktifCalisma+0x8b0>)
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005552:	4b63      	ldr	r3, [pc, #396]	; (80056e0 <checkAktifCalisma+0x8b0>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800555a:	2201      	movs	r2, #1
 800555c:	2120      	movs	r1, #32
 800555e:	4861      	ldr	r0, [pc, #388]	; (80056e4 <checkAktifCalisma+0x8b4>)
 8005560:	f003 ff15 	bl	800938e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005564:	4b60      	ldr	r3, [pc, #384]	; (80056e8 <checkAktifCalisma+0x8b8>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800556a:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <checkAktifCalisma+0x8b8>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d025      	beq.n	80055be <checkAktifCalisma+0x78e>
 8005572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005576:	485d      	ldr	r0, [pc, #372]	; (80056ec <checkAktifCalisma+0x8bc>)
 8005578:	f003 fef2 	bl	8009360 <HAL_GPIO_ReadPin>
 800557c:	4603      	mov	r3, r0
 800557e:	2b01      	cmp	r3, #1
 8005580:	d007      	beq.n	8005592 <checkAktifCalisma+0x762>
 8005582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005586:	4857      	ldr	r0, [pc, #348]	; (80056e4 <checkAktifCalisma+0x8b4>)
 8005588:	f003 feea 	bl	8009360 <HAL_GPIO_ReadPin>
 800558c:	4603      	mov	r3, r0
 800558e:	2b01      	cmp	r3, #1
 8005590:	d115      	bne.n	80055be <checkAktifCalisma+0x78e>
 8005592:	4b57      	ldr	r3, [pc, #348]	; (80056f0 <checkAktifCalisma+0x8c0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d011      	beq.n	80055be <checkAktifCalisma+0x78e>
 800559a:	4b56      	ldr	r3, [pc, #344]	; (80056f4 <checkAktifCalisma+0x8c4>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00d      	beq.n	80055be <checkAktifCalisma+0x78e>
 80055a2:	4b55      	ldr	r3, [pc, #340]	; (80056f8 <checkAktifCalisma+0x8c8>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f083 0301 	eor.w	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d006      	beq.n	80055be <checkAktifCalisma+0x78e>
			timer2=millis;
 80055b0:	4b52      	ldr	r3, [pc, #328]	; (80056fc <checkAktifCalisma+0x8cc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a52      	ldr	r2, [pc, #328]	; (8005700 <checkAktifCalisma+0x8d0>)
 80055b6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80055b8:	4b4f      	ldr	r3, [pc, #316]	; (80056f8 <checkAktifCalisma+0x8c8>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055be:	4b4f      	ldr	r3, [pc, #316]	; (80056fc <checkAktifCalisma+0x8cc>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4b4f      	ldr	r3, [pc, #316]	; (8005700 <checkAktifCalisma+0x8d0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	4a4e      	ldr	r2, [pc, #312]	; (8005704 <checkAktifCalisma+0x8d4>)
 80055ca:	7812      	ldrb	r2, [r2, #0]
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d303      	bcc.n	80055d8 <checkAktifCalisma+0x7a8>
 80055d0:	4b49      	ldr	r3, [pc, #292]	; (80056f8 <checkAktifCalisma+0x8c8>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10d      	bne.n	80055f4 <checkAktifCalisma+0x7c4>
 80055d8:	4b45      	ldr	r3, [pc, #276]	; (80056f0 <checkAktifCalisma+0x8c0>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f083 0301 	eor.w	r3, r3, #1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <checkAktifCalisma+0x7c4>
 80055e6:	4b43      	ldr	r3, [pc, #268]	; (80056f4 <checkAktifCalisma+0x8c4>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f083 0301 	eor.w	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80055f4:	2200      	movs	r2, #0
 80055f6:	2120      	movs	r1, #32
 80055f8:	483a      	ldr	r0, [pc, #232]	; (80056e4 <checkAktifCalisma+0x8b4>)
 80055fa:	f003 fec8 	bl	800938e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80055fe:	4b3a      	ldr	r3, [pc, #232]	; (80056e8 <checkAktifCalisma+0x8b8>)
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005604:	4b3c      	ldr	r3, [pc, #240]	; (80056f8 <checkAktifCalisma+0x8c8>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800560a:	4b3f      	ldr	r3, [pc, #252]	; (8005708 <checkAktifCalisma+0x8d8>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f040 8088 	bne.w	8005724 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005614:	4b3d      	ldr	r3, [pc, #244]	; (800570c <checkAktifCalisma+0x8dc>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d003      	beq.n	8005624 <checkAktifCalisma+0x7f4>
 800561c:	4b3b      	ldr	r3, [pc, #236]	; (800570c <checkAktifCalisma+0x8dc>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d17f      	bne.n	8005724 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005624:	4b32      	ldr	r3, [pc, #200]	; (80056f0 <checkAktifCalisma+0x8c0>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d07b      	beq.n	8005724 <checkAktifCalisma+0x8f4>
 800562c:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <checkAktifCalisma+0x8c4>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d077      	beq.n	8005724 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005634:	2140      	movs	r1, #64	; 0x40
 8005636:	482b      	ldr	r0, [pc, #172]	; (80056e4 <checkAktifCalisma+0x8b4>)
 8005638:	f003 fe92 	bl	8009360 <HAL_GPIO_ReadPin>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d170      	bne.n	8005724 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005646:	4827      	ldr	r0, [pc, #156]	; (80056e4 <checkAktifCalisma+0x8b4>)
 8005648:	f003 fe8a 	bl	8009360 <HAL_GPIO_ReadPin>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <checkAktifCalisma+0x82a>
 8005652:	4b2f      	ldr	r3, [pc, #188]	; (8005710 <checkAktifCalisma+0x8e0>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d164      	bne.n	8005724 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800565a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800565e:	4823      	ldr	r0, [pc, #140]	; (80056ec <checkAktifCalisma+0x8bc>)
 8005660:	f003 fe7e 	bl	8009360 <HAL_GPIO_ReadPin>
 8005664:	4603      	mov	r3, r0
 8005666:	2b01      	cmp	r3, #1
 8005668:	d10f      	bne.n	800568a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800566a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800566e:	481f      	ldr	r0, [pc, #124]	; (80056ec <checkAktifCalisma+0x8bc>)
 8005670:	f003 fe76 	bl	8009360 <HAL_GPIO_ReadPin>
 8005674:	4603      	mov	r3, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800567a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800567e:	481b      	ldr	r0, [pc, #108]	; (80056ec <checkAktifCalisma+0x8bc>)
 8005680:	f003 fe6e 	bl	8009360 <HAL_GPIO_ReadPin>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d003      	beq.n	8005692 <checkAktifCalisma+0x862>
 800568a:	4b22      	ldr	r3, [pc, #136]	; (8005714 <checkAktifCalisma+0x8e4>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d048      	beq.n	8005724 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005692:	4b21      	ldr	r3, [pc, #132]	; (8005718 <checkAktifCalisma+0x8e8>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f083 0301 	eor.w	r3, r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d041      	beq.n	8005724 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80056a0:	4b1e      	ldr	r3, [pc, #120]	; (800571c <checkAktifCalisma+0x8ec>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f083 0301 	eor.w	r3, r3, #1
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d03a      	beq.n	8005724 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80056ae:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <checkAktifCalisma+0x8f0>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f083 0301 	eor.w	r3, r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d033      	beq.n	8005724 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <checkAktifCalisma+0x8b8>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f083 0301 	eor.w	r3, r3, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d02c      	beq.n	8005724 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <checkAktifCalisma+0x8b0>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f083 0301 	eor.w	r3, r3, #1
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d025      	beq.n	8005724 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80056d8:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <checkAktifCalisma+0x8e4>)
 80056da:	2201      	movs	r2, #1
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e024      	b.n	800572a <checkAktifCalisma+0x8fa>
 80056e0:	20000256 	.word	0x20000256
 80056e4:	40011000 	.word	0x40011000
 80056e8:	2000025a 	.word	0x2000025a
 80056ec:	40010c00 	.word	0x40010c00
 80056f0:	20000272 	.word	0x20000272
 80056f4:	20000273 	.word	0x20000273
 80056f8:	20000252 	.word	0x20000252
 80056fc:	200001fc 	.word	0x200001fc
 8005700:	20000208 	.word	0x20000208
 8005704:	20000236 	.word	0x20000236
 8005708:	2000023d 	.word	0x2000023d
 800570c:	2000022f 	.word	0x2000022f
 8005710:	20000231 	.word	0x20000231
 8005714:	20000257 	.word	0x20000257
 8005718:	20000255 	.word	0x20000255
 800571c:	20000259 	.word	0x20000259
 8005720:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 8005724:	4b96      	ldr	r3, [pc, #600]	; (8005980 <checkAktifCalisma+0xb50>)
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800572a:	4b95      	ldr	r3, [pc, #596]	; (8005980 <checkAktifCalisma+0xb50>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005732:	2201      	movs	r2, #1
 8005734:	2110      	movs	r1, #16
 8005736:	4893      	ldr	r0, [pc, #588]	; (8005984 <checkAktifCalisma+0xb54>)
 8005738:	f003 fe29 	bl	800938e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 800573c:	4b92      	ldr	r3, [pc, #584]	; (8005988 <checkAktifCalisma+0xb58>)
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005742:	4b91      	ldr	r3, [pc, #580]	; (8005988 <checkAktifCalisma+0xb58>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d024      	beq.n	8005794 <checkAktifCalisma+0x964>
 800574a:	2140      	movs	r1, #64	; 0x40
 800574c:	488d      	ldr	r0, [pc, #564]	; (8005984 <checkAktifCalisma+0xb54>)
 800574e:	f003 fe07 	bl	8009360 <HAL_GPIO_ReadPin>
 8005752:	4603      	mov	r3, r0
 8005754:	2b01      	cmp	r3, #1
 8005756:	d007      	beq.n	8005768 <checkAktifCalisma+0x938>
 8005758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800575c:	4889      	ldr	r0, [pc, #548]	; (8005984 <checkAktifCalisma+0xb54>)
 800575e:	f003 fdff 	bl	8009360 <HAL_GPIO_ReadPin>
 8005762:	4603      	mov	r3, r0
 8005764:	2b01      	cmp	r3, #1
 8005766:	d115      	bne.n	8005794 <checkAktifCalisma+0x964>
 8005768:	4b88      	ldr	r3, [pc, #544]	; (800598c <checkAktifCalisma+0xb5c>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d011      	beq.n	8005794 <checkAktifCalisma+0x964>
 8005770:	4b87      	ldr	r3, [pc, #540]	; (8005990 <checkAktifCalisma+0xb60>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <checkAktifCalisma+0x964>
 8005778:	4b86      	ldr	r3, [pc, #536]	; (8005994 <checkAktifCalisma+0xb64>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f083 0301 	eor.w	r3, r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <checkAktifCalisma+0x964>
			timer2=millis;
 8005786:	4b84      	ldr	r3, [pc, #528]	; (8005998 <checkAktifCalisma+0xb68>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a84      	ldr	r2, [pc, #528]	; (800599c <checkAktifCalisma+0xb6c>)
 800578c:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800578e:	4b81      	ldr	r3, [pc, #516]	; (8005994 <checkAktifCalisma+0xb64>)
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005794:	4b80      	ldr	r3, [pc, #512]	; (8005998 <checkAktifCalisma+0xb68>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	4b80      	ldr	r3, [pc, #512]	; (800599c <checkAktifCalisma+0xb6c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	4a80      	ldr	r2, [pc, #512]	; (80059a0 <checkAktifCalisma+0xb70>)
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d303      	bcc.n	80057ae <checkAktifCalisma+0x97e>
 80057a6:	4b7b      	ldr	r3, [pc, #492]	; (8005994 <checkAktifCalisma+0xb64>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10d      	bne.n	80057ca <checkAktifCalisma+0x99a>
 80057ae:	4b77      	ldr	r3, [pc, #476]	; (800598c <checkAktifCalisma+0xb5c>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f083 0301 	eor.w	r3, r3, #1
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <checkAktifCalisma+0x99a>
 80057bc:	4b74      	ldr	r3, [pc, #464]	; (8005990 <checkAktifCalisma+0xb60>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	f083 0301 	eor.w	r3, r3, #1
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80057ca:	2200      	movs	r2, #0
 80057cc:	2110      	movs	r1, #16
 80057ce:	486d      	ldr	r0, [pc, #436]	; (8005984 <checkAktifCalisma+0xb54>)
 80057d0:	f003 fddd 	bl	800938e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80057d4:	4b6c      	ldr	r3, [pc, #432]	; (8005988 <checkAktifCalisma+0xb58>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80057da:	4b6e      	ldr	r3, [pc, #440]	; (8005994 <checkAktifCalisma+0xb64>)
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80057e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057e4:	486f      	ldr	r0, [pc, #444]	; (80059a4 <checkAktifCalisma+0xb74>)
 80057e6:	f003 fdbb 	bl	8009360 <HAL_GPIO_ReadPin>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d120      	bne.n	8005832 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80057f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057f4:	486b      	ldr	r0, [pc, #428]	; (80059a4 <checkAktifCalisma+0xb74>)
 80057f6:	f003 fdb3 	bl	8009360 <HAL_GPIO_ReadPin>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d118      	bne.n	8005832 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005800:	2104      	movs	r1, #4
 8005802:	4868      	ldr	r0, [pc, #416]	; (80059a4 <checkAktifCalisma+0xb74>)
 8005804:	f003 fdac 	bl	8009360 <HAL_GPIO_ReadPin>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d111      	bne.n	8005832 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800580e:	2102      	movs	r1, #2
 8005810:	4864      	ldr	r0, [pc, #400]	; (80059a4 <checkAktifCalisma+0xb74>)
 8005812:	f003 fda5 	bl	8009360 <HAL_GPIO_ReadPin>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 800581c:	2101      	movs	r1, #1
 800581e:	4861      	ldr	r0, [pc, #388]	; (80059a4 <checkAktifCalisma+0xb74>)
 8005820:	f003 fd9e 	bl	8009360 <HAL_GPIO_ReadPin>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <checkAktifCalisma+0xa02>
			makineStop=1;
 800582a:	4b5f      	ldr	r3, [pc, #380]	; (80059a8 <checkAktifCalisma+0xb78>)
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e002      	b.n	8005838 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005832:	4b5d      	ldr	r3, [pc, #372]	; (80059a8 <checkAktifCalisma+0xb78>)
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005838:	4b5c      	ldr	r3, [pc, #368]	; (80059ac <checkAktifCalisma+0xb7c>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d144      	bne.n	80058ca <checkAktifCalisma+0xa9a>
 8005840:	4b5b      	ldr	r3, [pc, #364]	; (80059b0 <checkAktifCalisma+0xb80>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d003      	beq.n	8005850 <checkAktifCalisma+0xa20>
 8005848:	4b59      	ldr	r3, [pc, #356]	; (80059b0 <checkAktifCalisma+0xb80>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d13c      	bne.n	80058ca <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005850:	2180      	movs	r1, #128	; 0x80
 8005852:	484c      	ldr	r0, [pc, #304]	; (8005984 <checkAktifCalisma+0xb54>)
 8005854:	f003 fd84 	bl	8009360 <HAL_GPIO_ReadPin>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <checkAktifCalisma+0xa36>
 800585e:	4b55      	ldr	r3, [pc, #340]	; (80059b4 <checkAktifCalisma+0xb84>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <checkAktifCalisma+0xa4e>
 8005866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800586a:	484e      	ldr	r0, [pc, #312]	; (80059a4 <checkAktifCalisma+0xb74>)
 800586c:	f003 fd78 	bl	8009360 <HAL_GPIO_ReadPin>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d129      	bne.n	80058ca <checkAktifCalisma+0xa9a>
 8005876:	4b4f      	ldr	r3, [pc, #316]	; (80059b4 <checkAktifCalisma+0xb84>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d125      	bne.n	80058ca <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800587e:	2104      	movs	r1, #4
 8005880:	4840      	ldr	r0, [pc, #256]	; (8005984 <checkAktifCalisma+0xb54>)
 8005882:	f003 fd6d 	bl	8009360 <HAL_GPIO_ReadPin>
 8005886:	4603      	mov	r3, r0
 8005888:	2b01      	cmp	r3, #1
 800588a:	d003      	beq.n	8005894 <checkAktifCalisma+0xa64>
 800588c:	4b4a      	ldr	r3, [pc, #296]	; (80059b8 <checkAktifCalisma+0xb88>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11a      	bne.n	80058ca <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005894:	2102      	movs	r1, #2
 8005896:	483b      	ldr	r0, [pc, #236]	; (8005984 <checkAktifCalisma+0xb54>)
 8005898:	f003 fd62 	bl	8009360 <HAL_GPIO_ReadPin>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d113      	bne.n	80058ca <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80058a2:	4b46      	ldr	r3, [pc, #280]	; (80059bc <checkAktifCalisma+0xb8c>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f083 0301 	eor.w	r3, r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00c      	beq.n	80058ca <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80058b0:	4b3d      	ldr	r3, [pc, #244]	; (80059a8 <checkAktifCalisma+0xb78>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80058b8:	4b41      	ldr	r3, [pc, #260]	; (80059c0 <checkAktifCalisma+0xb90>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058be:	4b36      	ldr	r3, [pc, #216]	; (8005998 <checkAktifCalisma+0xb68>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a40      	ldr	r2, [pc, #256]	; (80059c4 <checkAktifCalisma+0xb94>)
 80058c4:	6013      	str	r3, [r2, #0]
			bekle();
 80058c6:	f7ff f935 	bl	8004b34 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80058ca:	4b33      	ldr	r3, [pc, #204]	; (8005998 <checkAktifCalisma+0xb68>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4b3d      	ldr	r3, [pc, #244]	; (80059c4 <checkAktifCalisma+0xb94>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	4a3c      	ldr	r2, [pc, #240]	; (80059c8 <checkAktifCalisma+0xb98>)
 80058d6:	7812      	ldrb	r2, [r2, #0]
 80058d8:	4293      	cmp	r3, r2
 80058da:	d211      	bcs.n	8005900 <checkAktifCalisma+0xad0>
 80058dc:	2104      	movs	r1, #4
 80058de:	4829      	ldr	r0, [pc, #164]	; (8005984 <checkAktifCalisma+0xb54>)
 80058e0:	f003 fd3e 	bl	8009360 <HAL_GPIO_ReadPin>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <checkAktifCalisma+0xad0>
 80058ea:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <checkAktifCalisma+0xb88>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <checkAktifCalisma+0xad0>
 80058f2:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <checkAktifCalisma+0xb78>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	f083 0301 	eor.w	r3, r3, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005900:	4b2f      	ldr	r3, [pc, #188]	; (80059c0 <checkAktifCalisma+0xb90>)
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005906:	4b29      	ldr	r3, [pc, #164]	; (80059ac <checkAktifCalisma+0xb7c>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d160      	bne.n	80059d0 <checkAktifCalisma+0xba0>
 800590e:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <checkAktifCalisma+0xb80>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d003      	beq.n	800591e <checkAktifCalisma+0xaee>
 8005916:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <checkAktifCalisma+0xb80>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b03      	cmp	r3, #3
 800591c:	d158      	bne.n	80059d0 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800591e:	2104      	movs	r1, #4
 8005920:	4818      	ldr	r0, [pc, #96]	; (8005984 <checkAktifCalisma+0xb54>)
 8005922:	f003 fd1d 	bl	8009360 <HAL_GPIO_ReadPin>
 8005926:	4603      	mov	r3, r0
 8005928:	2b01      	cmp	r3, #1
 800592a:	d003      	beq.n	8005934 <checkAktifCalisma+0xb04>
 800592c:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <checkAktifCalisma+0xb88>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d14d      	bne.n	80059d0 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005934:	2102      	movs	r1, #2
 8005936:	4813      	ldr	r0, [pc, #76]	; (8005984 <checkAktifCalisma+0xb54>)
 8005938:	f003 fd12 	bl	8009360 <HAL_GPIO_ReadPin>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d146      	bne.n	80059d0 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	480f      	ldr	r0, [pc, #60]	; (8005984 <checkAktifCalisma+0xb54>)
 8005946:	f003 fd0b 	bl	8009360 <HAL_GPIO_ReadPin>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d103      	bne.n	8005958 <checkAktifCalisma+0xb28>
 8005950:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <checkAktifCalisma+0xb84>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <checkAktifCalisma+0xb40>
 8005958:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800595c:	4811      	ldr	r0, [pc, #68]	; (80059a4 <checkAktifCalisma+0xb74>)
 800595e:	f003 fcff 	bl	8009360 <HAL_GPIO_ReadPin>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d133      	bne.n	80059d0 <checkAktifCalisma+0xba0>
 8005968:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <checkAktifCalisma+0xb84>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d12f      	bne.n	80059d0 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005970:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <checkAktifCalisma+0xb78>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02b      	beq.n	80059d0 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005978:	4b14      	ldr	r3, [pc, #80]	; (80059cc <checkAktifCalisma+0xb9c>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e02a      	b.n	80059d6 <checkAktifCalisma+0xba6>
 8005980:	20000257 	.word	0x20000257
 8005984:	40011000 	.word	0x40011000
 8005988:	2000025b 	.word	0x2000025b
 800598c:	20000272 	.word	0x20000272
 8005990:	20000273 	.word	0x20000273
 8005994:	20000253 	.word	0x20000253
 8005998:	200001fc 	.word	0x200001fc
 800599c:	20000208 	.word	0x20000208
 80059a0:	20000236 	.word	0x20000236
 80059a4:	40010c00 	.word	0x40010c00
 80059a8:	20000262 	.word	0x20000262
 80059ac:	20000229 	.word	0x20000229
 80059b0:	20000228 	.word	0x20000228
 80059b4:	2000022c 	.word	0x2000022c
 80059b8:	20000226 	.word	0x20000226
 80059bc:	2000024f 	.word	0x2000024f
 80059c0:	20000263 	.word	0x20000263
 80059c4:	20000200 	.word	0x20000200
 80059c8:	20000239 	.word	0x20000239
 80059cc:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 80059d0:	4b8b      	ldr	r3, [pc, #556]	; (8005c00 <checkAktifCalisma+0xdd0>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059d6:	4b8b      	ldr	r3, [pc, #556]	; (8005c04 <checkAktifCalisma+0xdd4>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d121      	bne.n	8005a22 <checkAktifCalisma+0xbf2>
 80059de:	4b8a      	ldr	r3, [pc, #552]	; (8005c08 <checkAktifCalisma+0xdd8>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d003      	beq.n	80059ee <checkAktifCalisma+0xbbe>
 80059e6:	4b88      	ldr	r3, [pc, #544]	; (8005c08 <checkAktifCalisma+0xdd8>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d119      	bne.n	8005a22 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059ee:	2104      	movs	r1, #4
 80059f0:	4886      	ldr	r0, [pc, #536]	; (8005c0c <checkAktifCalisma+0xddc>)
 80059f2:	f003 fcb5 	bl	8009360 <HAL_GPIO_ReadPin>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d003      	beq.n	8005a04 <checkAktifCalisma+0xbd4>
 80059fc:	4b84      	ldr	r3, [pc, #528]	; (8005c10 <checkAktifCalisma+0xde0>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10e      	bne.n	8005a22 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a04:	2102      	movs	r1, #2
 8005a06:	4881      	ldr	r0, [pc, #516]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005a08:	f003 fcaa 	bl	8009360 <HAL_GPIO_ReadPin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d107      	bne.n	8005a22 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005a12:	4b80      	ldr	r3, [pc, #512]	; (8005c14 <checkAktifCalisma+0xde4>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005a1a:	4b7f      	ldr	r3, [pc, #508]	; (8005c18 <checkAktifCalisma+0xde8>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	e002      	b.n	8005a28 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005a22:	4b7d      	ldr	r3, [pc, #500]	; (8005c18 <checkAktifCalisma+0xde8>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005a28:	4b75      	ldr	r3, [pc, #468]	; (8005c00 <checkAktifCalisma+0xdd0>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <checkAktifCalisma+0xc10>
 8005a30:	4b79      	ldr	r3, [pc, #484]	; (8005c18 <checkAktifCalisma+0xde8>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d103      	bne.n	8005a40 <checkAktifCalisma+0xc10>
 8005a38:	4b78      	ldr	r3, [pc, #480]	; (8005c1c <checkAktifCalisma+0xdec>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a40:	2201      	movs	r2, #1
 8005a42:	2180      	movs	r1, #128	; 0x80
 8005a44:	4876      	ldr	r0, [pc, #472]	; (8005c20 <checkAktifCalisma+0xdf0>)
 8005a46:	f003 fca2 	bl	800938e <HAL_GPIO_WritePin>
 8005a4a:	e004      	b.n	8005a56 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	4873      	ldr	r0, [pc, #460]	; (8005c20 <checkAktifCalisma+0xdf0>)
 8005a52:	f003 fc9c 	bl	800938e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a56:	4b73      	ldr	r3, [pc, #460]	; (8005c24 <checkAktifCalisma+0xdf4>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d141      	bne.n	8005ae2 <checkAktifCalisma+0xcb2>
 8005a5e:	4b6a      	ldr	r3, [pc, #424]	; (8005c08 <checkAktifCalisma+0xdd8>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d003      	beq.n	8005a6e <checkAktifCalisma+0xc3e>
 8005a66:	4b68      	ldr	r3, [pc, #416]	; (8005c08 <checkAktifCalisma+0xdd8>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d139      	bne.n	8005ae2 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a72:	4866      	ldr	r0, [pc, #408]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005a74:	f003 fc74 	bl	8009360 <HAL_GPIO_ReadPin>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <checkAktifCalisma+0xc56>
 8005a7e:	4b6a      	ldr	r3, [pc, #424]	; (8005c28 <checkAktifCalisma+0xdf8>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00b      	beq.n	8005a9e <checkAktifCalisma+0xc6e>
 8005a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a8a:	4868      	ldr	r0, [pc, #416]	; (8005c2c <checkAktifCalisma+0xdfc>)
 8005a8c:	f003 fc68 	bl	8009360 <HAL_GPIO_ReadPin>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d125      	bne.n	8005ae2 <checkAktifCalisma+0xcb2>
 8005a96:	4b64      	ldr	r3, [pc, #400]	; (8005c28 <checkAktifCalisma+0xdf8>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d121      	bne.n	8005ae2 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	485a      	ldr	r0, [pc, #360]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005aa2:	f003 fc5d 	bl	8009360 <HAL_GPIO_ReadPin>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d11a      	bne.n	8005ae2 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005aac:	2104      	movs	r1, #4
 8005aae:	4857      	ldr	r0, [pc, #348]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005ab0:	f003 fc56 	bl	8009360 <HAL_GPIO_ReadPin>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d113      	bne.n	8005ae2 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005aba:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <checkAktifCalisma+0xde4>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00f      	beq.n	8005ae2 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005ac2:	4b5b      	ldr	r3, [pc, #364]	; (8005c30 <checkAktifCalisma+0xe00>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f083 0301 	eor.w	r3, r3, #1
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005ad0:	4b58      	ldr	r3, [pc, #352]	; (8005c34 <checkAktifCalisma+0xe04>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005ad6:	4b58      	ldr	r3, [pc, #352]	; (8005c38 <checkAktifCalisma+0xe08>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a58      	ldr	r2, [pc, #352]	; (8005c3c <checkAktifCalisma+0xe0c>)
 8005adc:	6013      	str	r3, [r2, #0]
			bekle();
 8005ade:	f7ff f829 	bl	8004b34 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005ae2:	4b55      	ldr	r3, [pc, #340]	; (8005c38 <checkAktifCalisma+0xe08>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b55      	ldr	r3, [pc, #340]	; (8005c3c <checkAktifCalisma+0xe0c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	4a54      	ldr	r2, [pc, #336]	; (8005c40 <checkAktifCalisma+0xe10>)
 8005aee:	7812      	ldrb	r2, [r2, #0]
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d20d      	bcs.n	8005b10 <checkAktifCalisma+0xce0>
 8005af4:	2102      	movs	r1, #2
 8005af6:	4845      	ldr	r0, [pc, #276]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005af8:	f003 fc32 	bl	8009360 <HAL_GPIO_ReadPin>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d006      	beq.n	8005b10 <checkAktifCalisma+0xce0>
 8005b02:	4b44      	ldr	r3, [pc, #272]	; (8005c14 <checkAktifCalisma+0xde4>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	f083 0301 	eor.w	r3, r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005b10:	4b48      	ldr	r3, [pc, #288]	; (8005c34 <checkAktifCalisma+0xe04>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b16:	4b43      	ldr	r3, [pc, #268]	; (8005c24 <checkAktifCalisma+0xdf4>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d135      	bne.n	8005b8a <checkAktifCalisma+0xd5a>
 8005b1e:	4b3a      	ldr	r3, [pc, #232]	; (8005c08 <checkAktifCalisma+0xdd8>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d003      	beq.n	8005b2e <checkAktifCalisma+0xcfe>
 8005b26:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <checkAktifCalisma+0xdd8>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d12d      	bne.n	8005b8a <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b32:	4836      	ldr	r0, [pc, #216]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005b34:	f003 fc14 	bl	8009360 <HAL_GPIO_ReadPin>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <checkAktifCalisma+0xd16>
 8005b3e:	4b3a      	ldr	r3, [pc, #232]	; (8005c28 <checkAktifCalisma+0xdf8>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <checkAktifCalisma+0xd2e>
 8005b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b4a:	4838      	ldr	r0, [pc, #224]	; (8005c2c <checkAktifCalisma+0xdfc>)
 8005b4c:	f003 fc08 	bl	8009360 <HAL_GPIO_ReadPin>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d119      	bne.n	8005b8a <checkAktifCalisma+0xd5a>
 8005b56:	4b34      	ldr	r3, [pc, #208]	; (8005c28 <checkAktifCalisma+0xdf8>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d115      	bne.n	8005b8a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b5e:	2102      	movs	r1, #2
 8005b60:	482a      	ldr	r0, [pc, #168]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005b62:	f003 fbfd 	bl	8009360 <HAL_GPIO_ReadPin>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d10e      	bne.n	8005b8a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b6c:	2104      	movs	r1, #4
 8005b6e:	4827      	ldr	r0, [pc, #156]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005b70:	f003 fbf6 	bl	8009360 <HAL_GPIO_ReadPin>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <checkAktifCalisma+0xde4>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b82:	4b30      	ldr	r3, [pc, #192]	; (8005c44 <checkAktifCalisma+0xe14>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e002      	b.n	8005b90 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b8a:	4b2e      	ldr	r3, [pc, #184]	; (8005c44 <checkAktifCalisma+0xe14>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b90:	4b24      	ldr	r3, [pc, #144]	; (8005c24 <checkAktifCalisma+0xdf4>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d11d      	bne.n	8005bd4 <checkAktifCalisma+0xda4>
 8005b98:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <checkAktifCalisma+0xdd8>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d003      	beq.n	8005ba8 <checkAktifCalisma+0xd78>
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <checkAktifCalisma+0xdd8>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d115      	bne.n	8005bd4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ba8:	2102      	movs	r1, #2
 8005baa:	4818      	ldr	r0, [pc, #96]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005bac:	f003 fbd8 	bl	8009360 <HAL_GPIO_ReadPin>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d10e      	bne.n	8005bd4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	4814      	ldr	r0, [pc, #80]	; (8005c0c <checkAktifCalisma+0xddc>)
 8005bba:	f003 fbd1 	bl	8009360 <HAL_GPIO_ReadPin>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005bc4:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <checkAktifCalisma+0xde4>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <checkAktifCalisma+0xe18>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	e002      	b.n	8005bda <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005bd4:	4b1c      	ldr	r3, [pc, #112]	; (8005c48 <checkAktifCalisma+0xe18>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005bda:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <checkAktifCalisma+0xe14>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d107      	bne.n	8005bf2 <checkAktifCalisma+0xdc2>
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <checkAktifCalisma+0xe18>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <checkAktifCalisma+0xdc2>
 8005bea:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <checkAktifCalisma+0xe04>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d02c      	beq.n	8005c4c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	2140      	movs	r1, #64	; 0x40
 8005bf6:	480a      	ldr	r0, [pc, #40]	; (8005c20 <checkAktifCalisma+0xdf0>)
 8005bf8:	f003 fbc9 	bl	800938e <HAL_GPIO_WritePin>
 8005bfc:	e02b      	b.n	8005c56 <checkAktifCalisma+0xe26>
 8005bfe:	bf00      	nop
 8005c00:	20000264 	.word	0x20000264
 8005c04:	20000229 	.word	0x20000229
 8005c08:	20000228 	.word	0x20000228
 8005c0c:	40011000 	.word	0x40011000
 8005c10:	20000226 	.word	0x20000226
 8005c14:	20000262 	.word	0x20000262
 8005c18:	20000265 	.word	0x20000265
 8005c1c:	20000263 	.word	0x20000263
 8005c20:	40010800 	.word	0x40010800
 8005c24:	2000022a 	.word	0x2000022a
 8005c28:	2000022c 	.word	0x2000022c
 8005c2c:	40010c00 	.word	0x40010c00
 8005c30:	2000024f 	.word	0x2000024f
 8005c34:	20000266 	.word	0x20000266
 8005c38:	200001fc 	.word	0x200001fc
 8005c3c:	20000200 	.word	0x20000200
 8005c40:	2000023a 	.word	0x2000023a
 8005c44:	20000267 	.word	0x20000267
 8005c48:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2140      	movs	r1, #64	; 0x40
 8005c50:	488d      	ldr	r0, [pc, #564]	; (8005e88 <checkAktifCalisma+0x1058>)
 8005c52:	f003 fb9c 	bl	800938e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005c56:	4b8d      	ldr	r3, [pc, #564]	; (8005e8c <checkAktifCalisma+0x105c>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <checkAktifCalisma+0xe36>
 8005c5e:	4b8b      	ldr	r3, [pc, #556]	; (8005e8c <checkAktifCalisma+0x105c>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d115      	bne.n	8005c92 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c66:	2104      	movs	r1, #4
 8005c68:	4889      	ldr	r0, [pc, #548]	; (8005e90 <checkAktifCalisma+0x1060>)
 8005c6a:	f003 fb79 	bl	8009360 <HAL_GPIO_ReadPin>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d003      	beq.n	8005c7c <checkAktifCalisma+0xe4c>
 8005c74:	4b87      	ldr	r3, [pc, #540]	; (8005e94 <checkAktifCalisma+0x1064>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4884      	ldr	r0, [pc, #528]	; (8005e90 <checkAktifCalisma+0x1060>)
 8005c80:	f003 fb6e 	bl	8009360 <HAL_GPIO_ReadPin>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c8a:	4b83      	ldr	r3, [pc, #524]	; (8005e98 <checkAktifCalisma+0x1068>)
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	e002      	b.n	8005c98 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c92:	4b81      	ldr	r3, [pc, #516]	; (8005e98 <checkAktifCalisma+0x1068>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c98:	4b7c      	ldr	r3, [pc, #496]	; (8005e8c <checkAktifCalisma+0x105c>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d003      	beq.n	8005ca8 <checkAktifCalisma+0xe78>
 8005ca0:	4b7a      	ldr	r3, [pc, #488]	; (8005e8c <checkAktifCalisma+0x105c>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d111      	bne.n	8005ccc <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ca8:	2102      	movs	r1, #2
 8005caa:	4879      	ldr	r0, [pc, #484]	; (8005e90 <checkAktifCalisma+0x1060>)
 8005cac:	f003 fb58 	bl	8009360 <HAL_GPIO_ReadPin>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d10a      	bne.n	8005ccc <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005cb6:	2104      	movs	r1, #4
 8005cb8:	4875      	ldr	r0, [pc, #468]	; (8005e90 <checkAktifCalisma+0x1060>)
 8005cba:	f003 fb51 	bl	8009360 <HAL_GPIO_ReadPin>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005cc4:	4b75      	ldr	r3, [pc, #468]	; (8005e9c <checkAktifCalisma+0x106c>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e002      	b.n	8005cd2 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005ccc:	4b73      	ldr	r3, [pc, #460]	; (8005e9c <checkAktifCalisma+0x106c>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005cd2:	4b71      	ldr	r3, [pc, #452]	; (8005e98 <checkAktifCalisma+0x1068>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00f      	beq.n	8005cfa <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005cda:	4b71      	ldr	r3, [pc, #452]	; (8005ea0 <checkAktifCalisma+0x1070>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d10b      	bne.n	8005cfa <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ce6:	486f      	ldr	r0, [pc, #444]	; (8005ea4 <checkAktifCalisma+0x1074>)
 8005ce8:	f003 fb3a 	bl	8009360 <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005cf2:	4b6d      	ldr	r3, [pc, #436]	; (8005ea8 <checkAktifCalisma+0x1078>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	e002      	b.n	8005d00 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005cfa:	4b6b      	ldr	r3, [pc, #428]	; (8005ea8 <checkAktifCalisma+0x1078>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005d00:	4b66      	ldr	r3, [pc, #408]	; (8005e9c <checkAktifCalisma+0x106c>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005d08:	4b65      	ldr	r3, [pc, #404]	; (8005ea0 <checkAktifCalisma+0x1070>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10b      	bne.n	8005d28 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d14:	4863      	ldr	r0, [pc, #396]	; (8005ea4 <checkAktifCalisma+0x1074>)
 8005d16:	f003 fb23 	bl	8009360 <HAL_GPIO_ReadPin>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005d20:	4b62      	ldr	r3, [pc, #392]	; (8005eac <checkAktifCalisma+0x107c>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005d28:	4b60      	ldr	r3, [pc, #384]	; (8005eac <checkAktifCalisma+0x107c>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d2e:	4b60      	ldr	r3, [pc, #384]	; (8005eb0 <checkAktifCalisma+0x1080>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d137      	bne.n	8005da6 <checkAktifCalisma+0xf76>
 8005d36:	4b5f      	ldr	r3, [pc, #380]	; (8005eb4 <checkAktifCalisma+0x1084>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d003      	beq.n	8005d46 <checkAktifCalisma+0xf16>
 8005d3e:	4b5d      	ldr	r3, [pc, #372]	; (8005eb4 <checkAktifCalisma+0x1084>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d12f      	bne.n	8005da6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d46:	4b54      	ldr	r3, [pc, #336]	; (8005e98 <checkAktifCalisma+0x1068>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <checkAktifCalisma+0xf26>
 8005d4e:	4b53      	ldr	r3, [pc, #332]	; (8005e9c <checkAktifCalisma+0x106c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d027      	beq.n	8005da6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d5a:	484d      	ldr	r0, [pc, #308]	; (8005e90 <checkAktifCalisma+0x1060>)
 8005d5c:	f003 fb00 	bl	8009360 <HAL_GPIO_ReadPin>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d103      	bne.n	8005d6e <checkAktifCalisma+0xf3e>
 8005d66:	4b4e      	ldr	r3, [pc, #312]	; (8005ea0 <checkAktifCalisma+0x1070>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d6e:	4b4e      	ldr	r3, [pc, #312]	; (8005ea8 <checkAktifCalisma+0x1078>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <checkAktifCalisma+0xf4e>
 8005d76:	4b4d      	ldr	r3, [pc, #308]	; (8005eac <checkAktifCalisma+0x107c>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d013      	beq.n	8005da6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d7e:	4b4e      	ldr	r3, [pc, #312]	; (8005eb8 <checkAktifCalisma+0x1088>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00f      	beq.n	8005da6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d86:	4b4d      	ldr	r3, [pc, #308]	; (8005ebc <checkAktifCalisma+0x108c>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	f083 0301 	eor.w	r3, r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d94:	4b4a      	ldr	r3, [pc, #296]	; (8005ec0 <checkAktifCalisma+0x1090>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d9a:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <checkAktifCalisma+0x1094>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a4a      	ldr	r2, [pc, #296]	; (8005ec8 <checkAktifCalisma+0x1098>)
 8005da0:	6013      	str	r3, [r2, #0]
			bekle();
 8005da2:	f7fe fec7 	bl	8004b34 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005da6:	4b47      	ldr	r3, [pc, #284]	; (8005ec4 <checkAktifCalisma+0x1094>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <checkAktifCalisma+0x1098>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	4a46      	ldr	r2, [pc, #280]	; (8005ecc <checkAktifCalisma+0x109c>)
 8005db2:	7812      	ldrb	r2, [r2, #0]
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d214      	bcs.n	8005de2 <checkAktifCalisma+0xfb2>
 8005db8:	4b37      	ldr	r3, [pc, #220]	; (8005e98 <checkAktifCalisma+0x1068>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f083 0301 	eor.w	r3, r3, #1
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <checkAktifCalisma+0xfa4>
 8005dc6:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <checkAktifCalisma+0x106c>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f083 0301 	eor.w	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <checkAktifCalisma+0xfb2>
 8005dd4:	4b38      	ldr	r3, [pc, #224]	; (8005eb8 <checkAktifCalisma+0x1088>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f083 0301 	eor.w	r3, r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005de2:	4b37      	ldr	r3, [pc, #220]	; (8005ec0 <checkAktifCalisma+0x1090>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005de8:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <checkAktifCalisma+0x1080>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d12b      	bne.n	8005e48 <checkAktifCalisma+0x1018>
 8005df0:	4b30      	ldr	r3, [pc, #192]	; (8005eb4 <checkAktifCalisma+0x1084>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d003      	beq.n	8005e00 <checkAktifCalisma+0xfd0>
 8005df8:	4b2e      	ldr	r3, [pc, #184]	; (8005eb4 <checkAktifCalisma+0x1084>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d123      	bne.n	8005e48 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e00:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <checkAktifCalisma+0x1068>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <checkAktifCalisma+0xfe0>
 8005e08:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <checkAktifCalisma+0x106c>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01b      	beq.n	8005e48 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e14:	481e      	ldr	r0, [pc, #120]	; (8005e90 <checkAktifCalisma+0x1060>)
 8005e16:	f003 faa3 	bl	8009360 <HAL_GPIO_ReadPin>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <checkAktifCalisma+0xff8>
 8005e20:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <checkAktifCalisma+0x1070>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e28:	4b1f      	ldr	r3, [pc, #124]	; (8005ea8 <checkAktifCalisma+0x1078>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <checkAktifCalisma+0x1008>
 8005e30:	4b1e      	ldr	r3, [pc, #120]	; (8005eac <checkAktifCalisma+0x107c>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005e38:	4b1f      	ldr	r3, [pc, #124]	; (8005eb8 <checkAktifCalisma+0x1088>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005e40:	4b23      	ldr	r3, [pc, #140]	; (8005ed0 <checkAktifCalisma+0x10a0>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005e48:	4b21      	ldr	r3, [pc, #132]	; (8005ed0 <checkAktifCalisma+0x10a0>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e4e:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <checkAktifCalisma+0x1080>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d140      	bne.n	8005ed8 <checkAktifCalisma+0x10a8>
 8005e56:	4b17      	ldr	r3, [pc, #92]	; (8005eb4 <checkAktifCalisma+0x1084>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d003      	beq.n	8005e66 <checkAktifCalisma+0x1036>
 8005e5e:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <checkAktifCalisma+0x1084>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d138      	bne.n	8005ed8 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <checkAktifCalisma+0x1068>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <checkAktifCalisma+0x1046>
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <checkAktifCalisma+0x106c>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d030      	beq.n	8005ed8 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e76:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <checkAktifCalisma+0x1088>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d02c      	beq.n	8005ed8 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e7e:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <checkAktifCalisma+0x10a4>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	e02b      	b.n	8005ede <checkAktifCalisma+0x10ae>
 8005e86:	bf00      	nop
 8005e88:	40010800 	.word	0x40010800
 8005e8c:	2000022d 	.word	0x2000022d
 8005e90:	40011000 	.word	0x40011000
 8005e94:	20000226 	.word	0x20000226
 8005e98:	2000026c 	.word	0x2000026c
 8005e9c:	2000026d 	.word	0x2000026d
 8005ea0:	2000022c 	.word	0x2000022c
 8005ea4:	40010c00 	.word	0x40010c00
 8005ea8:	2000027c 	.word	0x2000027c
 8005eac:	2000027d 	.word	0x2000027d
 8005eb0:	2000022b 	.word	0x2000022b
 8005eb4:	20000228 	.word	0x20000228
 8005eb8:	20000262 	.word	0x20000262
 8005ebc:	2000024f 	.word	0x2000024f
 8005ec0:	20000269 	.word	0x20000269
 8005ec4:	200001fc 	.word	0x200001fc
 8005ec8:	20000200 	.word	0x20000200
 8005ecc:	2000023b 	.word	0x2000023b
 8005ed0:	2000026a 	.word	0x2000026a
 8005ed4:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005ed8:	4b8b      	ldr	r3, [pc, #556]	; (8006108 <checkAktifCalisma+0x12d8>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005ede:	4b8b      	ldr	r3, [pc, #556]	; (800610c <checkAktifCalisma+0x12dc>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d107      	bne.n	8005ef6 <checkAktifCalisma+0x10c6>
 8005ee6:	4b8a      	ldr	r3, [pc, #552]	; (8006110 <checkAktifCalisma+0x12e0>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <checkAktifCalisma+0x10c6>
 8005eee:	4b86      	ldr	r3, [pc, #536]	; (8006108 <checkAktifCalisma+0x12d8>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	2120      	movs	r1, #32
 8005efa:	4886      	ldr	r0, [pc, #536]	; (8006114 <checkAktifCalisma+0x12e4>)
 8005efc:	f003 fa47 	bl	800938e <HAL_GPIO_WritePin>
 8005f00:	e004      	b.n	8005f0c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f02:	2200      	movs	r2, #0
 8005f04:	2120      	movs	r1, #32
 8005f06:	4883      	ldr	r0, [pc, #524]	; (8006114 <checkAktifCalisma+0x12e4>)
 8005f08:	f003 fa41 	bl	800938e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005f0c:	4b82      	ldr	r3, [pc, #520]	; (8006118 <checkAktifCalisma+0x12e8>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00e      	beq.n	8005f32 <checkAktifCalisma+0x1102>
 8005f14:	2102      	movs	r1, #2
 8005f16:	4881      	ldr	r0, [pc, #516]	; (800611c <checkAktifCalisma+0x12ec>)
 8005f18:	f003 fa22 	bl	8009360 <HAL_GPIO_ReadPin>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d107      	bne.n	8005f32 <checkAktifCalisma+0x1102>
 8005f22:	4b7f      	ldr	r3, [pc, #508]	; (8006120 <checkAktifCalisma+0x12f0>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <checkAktifCalisma+0x1102>
 8005f2a:	4b7e      	ldr	r3, [pc, #504]	; (8006124 <checkAktifCalisma+0x12f4>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d112      	bne.n	8005f58 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005f32:	4b7d      	ldr	r3, [pc, #500]	; (8006128 <checkAktifCalisma+0x12f8>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d066      	beq.n	8006008 <checkAktifCalisma+0x11d8>
 8005f3a:	2104      	movs	r1, #4
 8005f3c:	4877      	ldr	r0, [pc, #476]	; (800611c <checkAktifCalisma+0x12ec>)
 8005f3e:	f003 fa0f 	bl	8009360 <HAL_GPIO_ReadPin>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d15f      	bne.n	8006008 <checkAktifCalisma+0x11d8>
 8005f48:	4b75      	ldr	r3, [pc, #468]	; (8006120 <checkAktifCalisma+0x12f0>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05b      	beq.n	8006008 <checkAktifCalisma+0x11d8>
 8005f50:	4b74      	ldr	r3, [pc, #464]	; (8006124 <checkAktifCalisma+0x12f4>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d057      	beq.n	8006008 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005f58:	4b74      	ldr	r3, [pc, #464]	; (800612c <checkAktifCalisma+0x12fc>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	4b72      	ldr	r3, [pc, #456]	; (800612c <checkAktifCalisma+0x12fc>)
 8005f62:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005f64:	4b71      	ldr	r3, [pc, #452]	; (800612c <checkAktifCalisma+0x12fc>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b09      	cmp	r3, #9
 8005f6a:	d908      	bls.n	8005f7e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f6c:	4b6f      	ldr	r3, [pc, #444]	; (800612c <checkAktifCalisma+0x12fc>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f72:	4b6f      	ldr	r3, [pc, #444]	; (8006130 <checkAktifCalisma+0x1300>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	4b6d      	ldr	r3, [pc, #436]	; (8006130 <checkAktifCalisma+0x1300>)
 8005f7c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f7e:	4b6c      	ldr	r3, [pc, #432]	; (8006130 <checkAktifCalisma+0x1300>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b09      	cmp	r3, #9
 8005f84:	d908      	bls.n	8005f98 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f86:	4b6a      	ldr	r3, [pc, #424]	; (8006130 <checkAktifCalisma+0x1300>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f8c:	4b69      	ldr	r3, [pc, #420]	; (8006134 <checkAktifCalisma+0x1304>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	4b67      	ldr	r3, [pc, #412]	; (8006134 <checkAktifCalisma+0x1304>)
 8005f96:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f98:	4b66      	ldr	r3, [pc, #408]	; (8006134 <checkAktifCalisma+0x1304>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b09      	cmp	r3, #9
 8005f9e:	d908      	bls.n	8005fb2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005fa0:	4b64      	ldr	r3, [pc, #400]	; (8006134 <checkAktifCalisma+0x1304>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005fa6:	4b64      	ldr	r3, [pc, #400]	; (8006138 <checkAktifCalisma+0x1308>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	4b62      	ldr	r3, [pc, #392]	; (8006138 <checkAktifCalisma+0x1308>)
 8005fb0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005fb2:	4b61      	ldr	r3, [pc, #388]	; (8006138 <checkAktifCalisma+0x1308>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	d908      	bls.n	8005fcc <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005fba:	4b5f      	ldr	r3, [pc, #380]	; (8006138 <checkAktifCalisma+0x1308>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005fc0:	4b5e      	ldr	r3, [pc, #376]	; (800613c <checkAktifCalisma+0x130c>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	4b5c      	ldr	r3, [pc, #368]	; (800613c <checkAktifCalisma+0x130c>)
 8005fca:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005fcc:	4b5b      	ldr	r3, [pc, #364]	; (800613c <checkAktifCalisma+0x130c>)
 8005fce:	781a      	ldrb	r2, [r3, #0]
 8005fd0:	4b5b      	ldr	r3, [pc, #364]	; (8006140 <checkAktifCalisma+0x1310>)
 8005fd2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005fd6:	4b58      	ldr	r3, [pc, #352]	; (8006138 <checkAktifCalisma+0x1308>)
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	4b59      	ldr	r3, [pc, #356]	; (8006140 <checkAktifCalisma+0x1310>)
 8005fdc:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005fde:	4b55      	ldr	r3, [pc, #340]	; (8006134 <checkAktifCalisma+0x1304>)
 8005fe0:	781a      	ldrb	r2, [r3, #0]
 8005fe2:	4b57      	ldr	r3, [pc, #348]	; (8006140 <checkAktifCalisma+0x1310>)
 8005fe4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005fe6:	4b52      	ldr	r3, [pc, #328]	; (8006130 <checkAktifCalisma+0x1300>)
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	4b55      	ldr	r3, [pc, #340]	; (8006140 <checkAktifCalisma+0x1310>)
 8005fec:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005fee:	4b4f      	ldr	r3, [pc, #316]	; (800612c <checkAktifCalisma+0x12fc>)
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	4b53      	ldr	r3, [pc, #332]	; (8006140 <checkAktifCalisma+0x1310>)
 8005ff4:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005ff6:	4b53      	ldr	r3, [pc, #332]	; (8006144 <checkAktifCalisma+0x1314>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005ffc:	4b46      	ldr	r3, [pc, #280]	; (8006118 <checkAktifCalisma+0x12e8>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006002:	4b49      	ldr	r3, [pc, #292]	; (8006128 <checkAktifCalisma+0x12f8>)
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800600c:	484e      	ldr	r0, [pc, #312]	; (8006148 <checkAktifCalisma+0x1318>)
 800600e:	f003 f9a7 	bl	8009360 <HAL_GPIO_ReadPin>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d016      	beq.n	8006046 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800601c:	484a      	ldr	r0, [pc, #296]	; (8006148 <checkAktifCalisma+0x1318>)
 800601e:	f003 f99f 	bl	8009360 <HAL_GPIO_ReadPin>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00e      	beq.n	8006046 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800602c:	4846      	ldr	r0, [pc, #280]	; (8006148 <checkAktifCalisma+0x1318>)
 800602e:	f003 f997 	bl	8009360 <HAL_GPIO_ReadPin>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006038:	2140      	movs	r1, #64	; 0x40
 800603a:	4838      	ldr	r0, [pc, #224]	; (800611c <checkAktifCalisma+0x12ec>)
 800603c:	f003 f990 	bl	8009360 <HAL_GPIO_ReadPin>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <checkAktifCalisma+0x121e>
			startBasili=1;
 8006046:	4b41      	ldr	r3, [pc, #260]	; (800614c <checkAktifCalisma+0x131c>)
 8006048:	2201      	movs	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e002      	b.n	8006054 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800604e:	4b3f      	ldr	r3, [pc, #252]	; (800614c <checkAktifCalisma+0x131c>)
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006054:	4b3d      	ldr	r3, [pc, #244]	; (800614c <checkAktifCalisma+0x131c>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d016      	beq.n	800608a <checkAktifCalisma+0x125a>
 800605c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006060:	4839      	ldr	r0, [pc, #228]	; (8006148 <checkAktifCalisma+0x1318>)
 8006062:	f003 f97d 	bl	8009360 <HAL_GPIO_ReadPin>
 8006066:	4603      	mov	r3, r0
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10e      	bne.n	800608a <checkAktifCalisma+0x125a>
			hataVar=1;
 800606c:	4b38      	ldr	r3, [pc, #224]	; (8006150 <checkAktifCalisma+0x1320>)
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006072:	2001      	movs	r0, #1
 8006074:	f7fa fd88 	bl	8000b88 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006078:	2001      	movs	r0, #1
 800607a:	f7fa fd2b 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 800607e:	f001 fc47 	bl	8007910 <convertAndSendData>
			acilstophatasi=1;
 8006082:	4b34      	ldr	r3, [pc, #208]	; (8006154 <checkAktifCalisma+0x1324>)
 8006084:	2201      	movs	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e018      	b.n	80060bc <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800608a:	4b32      	ldr	r3, [pc, #200]	; (8006154 <checkAktifCalisma+0x1324>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d014      	beq.n	80060bc <checkAktifCalisma+0x128c>
 8006092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006096:	482c      	ldr	r0, [pc, #176]	; (8006148 <checkAktifCalisma+0x1318>)
 8006098:	f003 f962 	bl	8009360 <HAL_GPIO_ReadPin>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10c      	bne.n	80060bc <checkAktifCalisma+0x128c>
 80060a2:	4b2a      	ldr	r3, [pc, #168]	; (800614c <checkAktifCalisma+0x131c>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f083 0301 	eor.w	r3, r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80060b0:	4b28      	ldr	r3, [pc, #160]	; (8006154 <checkAktifCalisma+0x1324>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80060b6:	2001      	movs	r0, #1
 80060b8:	f7fe fce8 	bl	8004a8c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80060bc:	4b26      	ldr	r3, [pc, #152]	; (8006158 <checkAktifCalisma+0x1328>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f083 0301 	eor.w	r3, r3, #1
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d04e      	beq.n	8006168 <checkAktifCalisma+0x1338>
 80060ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060ce:	481e      	ldr	r0, [pc, #120]	; (8006148 <checkAktifCalisma+0x1318>)
 80060d0:	f003 f946 	bl	8009360 <HAL_GPIO_ReadPin>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <checkAktifCalisma+0x12b2>
 80060da:	4b20      	ldr	r3, [pc, #128]	; (800615c <checkAktifCalisma+0x132c>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d042      	beq.n	8006168 <checkAktifCalisma+0x1338>
 80060e2:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <checkAktifCalisma+0x1330>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d13e      	bne.n	8006168 <checkAktifCalisma+0x1338>
			hataVar=1;
 80060ea:	4b19      	ldr	r3, [pc, #100]	; (8006150 <checkAktifCalisma+0x1320>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80060f0:	2002      	movs	r0, #2
 80060f2:	f7fa fd49 	bl	8000b88 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80060f6:	2002      	movs	r0, #2
 80060f8:	f7fa fcec 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 80060fc:	f001 fc08 	bl	8007910 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <checkAktifCalisma+0x1334>)
 8006102:	2201      	movs	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e047      	b.n	8006198 <checkAktifCalisma+0x1368>
 8006108:	2000026b 	.word	0x2000026b
 800610c:	2000026a 	.word	0x2000026a
 8006110:	20000269 	.word	0x20000269
 8006114:	40010800 	.word	0x40010800
 8006118:	2000025f 	.word	0x2000025f
 800611c:	40011000 	.word	0x40011000
 8006120:	20000226 	.word	0x20000226
 8006124:	20000262 	.word	0x20000262
 8006128:	20000260 	.word	0x20000260
 800612c:	2000021d 	.word	0x2000021d
 8006130:	2000021e 	.word	0x2000021e
 8006134:	20000000 	.word	0x20000000
 8006138:	20000001 	.word	0x20000001
 800613c:	2000021f 	.word	0x2000021f
 8006140:	20000118 	.word	0x20000118
 8006144:	2000024c 	.word	0x2000024c
 8006148:	40010c00 	.word	0x40010c00
 800614c:	2000026e 	.word	0x2000026e
 8006150:	20000275 	.word	0x20000275
 8006154:	20000270 	.word	0x20000270
 8006158:	20000277 	.word	0x20000277
 800615c:	20000281 	.word	0x20000281
 8006160:	20000224 	.word	0x20000224
 8006164:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006168:	4b9b      	ldr	r3, [pc, #620]	; (80063d8 <checkAktifCalisma+0x15a8>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <checkAktifCalisma+0x1368>
 8006170:	4b9a      	ldr	r3, [pc, #616]	; (80063dc <checkAktifCalisma+0x15ac>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00f      	beq.n	8006198 <checkAktifCalisma+0x1368>
 8006178:	4b99      	ldr	r3, [pc, #612]	; (80063e0 <checkAktifCalisma+0x15b0>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f083 0301 	eor.w	r3, r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006186:	4b94      	ldr	r3, [pc, #592]	; (80063d8 <checkAktifCalisma+0x15a8>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 800618c:	4b95      	ldr	r3, [pc, #596]	; (80063e4 <checkAktifCalisma+0x15b4>)
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006192:	2002      	movs	r0, #2
 8006194:	f7fe fc7a 	bl	8004a8c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006198:	4b93      	ldr	r3, [pc, #588]	; (80063e8 <checkAktifCalisma+0x15b8>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d11e      	bne.n	80061de <checkAktifCalisma+0x13ae>
 80061a0:	4b92      	ldr	r3, [pc, #584]	; (80063ec <checkAktifCalisma+0x15bc>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d11a      	bne.n	80061de <checkAktifCalisma+0x13ae>
 80061a8:	4b91      	ldr	r3, [pc, #580]	; (80063f0 <checkAktifCalisma+0x15c0>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d016      	beq.n	80061de <checkAktifCalisma+0x13ae>
 80061b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061b4:	488f      	ldr	r0, [pc, #572]	; (80063f4 <checkAktifCalisma+0x15c4>)
 80061b6:	f003 f8d3 	bl	8009360 <HAL_GPIO_ReadPin>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d10e      	bne.n	80061de <checkAktifCalisma+0x13ae>
			hataVar=1;
 80061c0:	4b8d      	ldr	r3, [pc, #564]	; (80063f8 <checkAktifCalisma+0x15c8>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80061c6:	2003      	movs	r0, #3
 80061c8:	f7fa fcde 	bl	8000b88 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80061cc:	2003      	movs	r0, #3
 80061ce:	f7fa fc81 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 80061d2:	f001 fb9d 	bl	8007910 <convertAndSendData>
			basinchatasi=1;
 80061d6:	4b89      	ldr	r3, [pc, #548]	; (80063fc <checkAktifCalisma+0x15cc>)
 80061d8:	2201      	movs	r2, #1
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e015      	b.n	800620a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80061de:	4b87      	ldr	r3, [pc, #540]	; (80063fc <checkAktifCalisma+0x15cc>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d011      	beq.n	800620a <checkAktifCalisma+0x13da>
 80061e6:	4b80      	ldr	r3, [pc, #512]	; (80063e8 <checkAktifCalisma+0x15b8>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d10d      	bne.n	800620a <checkAktifCalisma+0x13da>
 80061ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061f2:	4883      	ldr	r0, [pc, #524]	; (8006400 <checkAktifCalisma+0x15d0>)
 80061f4:	f003 f8b4 	bl	8009360 <HAL_GPIO_ReadPin>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80061fe:	4b7f      	ldr	r3, [pc, #508]	; (80063fc <checkAktifCalisma+0x15cc>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006204:	2003      	movs	r0, #3
 8006206:	f7fe fc41 	bl	8004a8c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800620a:	4b7e      	ldr	r3, [pc, #504]	; (8006404 <checkAktifCalisma+0x15d4>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <checkAktifCalisma+0x13ea>
 8006212:	4b7d      	ldr	r3, [pc, #500]	; (8006408 <checkAktifCalisma+0x15d8>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01e      	beq.n	8006258 <checkAktifCalisma+0x1428>
 800621a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800621e:	487b      	ldr	r0, [pc, #492]	; (800640c <checkAktifCalisma+0x15dc>)
 8006220:	f003 f89e 	bl	8009360 <HAL_GPIO_ReadPin>
 8006224:	4603      	mov	r3, r0
 8006226:	2b01      	cmp	r3, #1
 8006228:	d116      	bne.n	8006258 <checkAktifCalisma+0x1428>
 800622a:	4b79      	ldr	r3, [pc, #484]	; (8006410 <checkAktifCalisma+0x15e0>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d003      	beq.n	800623a <checkAktifCalisma+0x140a>
 8006232:	4b77      	ldr	r3, [pc, #476]	; (8006410 <checkAktifCalisma+0x15e0>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d10e      	bne.n	8006258 <checkAktifCalisma+0x1428>
			hataVar=1;
 800623a:	4b6f      	ldr	r3, [pc, #444]	; (80063f8 <checkAktifCalisma+0x15c8>)
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006240:	2004      	movs	r0, #4
 8006242:	f7fa fca1 	bl	8000b88 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006246:	2004      	movs	r0, #4
 8006248:	f7fa fc44 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 800624c:	f001 fb60 	bl	8007910 <convertAndSendData>
			katkapisivicihatasi=1;
 8006250:	4b70      	ldr	r3, [pc, #448]	; (8006414 <checkAktifCalisma+0x15e4>)
 8006252:	2201      	movs	r2, #1
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e01f      	b.n	8006298 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006258:	4b6e      	ldr	r3, [pc, #440]	; (8006414 <checkAktifCalisma+0x15e4>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01b      	beq.n	8006298 <checkAktifCalisma+0x1468>
 8006260:	4b6d      	ldr	r3, [pc, #436]	; (8006418 <checkAktifCalisma+0x15e8>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <checkAktifCalisma+0x1468>
 8006268:	4b66      	ldr	r3, [pc, #408]	; (8006404 <checkAktifCalisma+0x15d4>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	f083 0301 	eor.w	r3, r3, #1
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d010      	beq.n	8006298 <checkAktifCalisma+0x1468>
 8006276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800627a:	4864      	ldr	r0, [pc, #400]	; (800640c <checkAktifCalisma+0x15dc>)
 800627c:	f003 f870 	bl	8009360 <HAL_GPIO_ReadPin>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d108      	bne.n	8006298 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006286:	4b63      	ldr	r3, [pc, #396]	; (8006414 <checkAktifCalisma+0x15e4>)
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 800628c:	4b5e      	ldr	r3, [pc, #376]	; (8006408 <checkAktifCalisma+0x15d8>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006292:	2004      	movs	r0, #4
 8006294:	f7fe fbfa 	bl	8004a8c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006298:	4b5a      	ldr	r3, [pc, #360]	; (8006404 <checkAktifCalisma+0x15d4>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d103      	bne.n	80062a8 <checkAktifCalisma+0x1478>
 80062a0:	4b5e      	ldr	r3, [pc, #376]	; (800641c <checkAktifCalisma+0x15ec>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01e      	beq.n	80062e6 <checkAktifCalisma+0x14b6>
 80062a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062ac:	4857      	ldr	r0, [pc, #348]	; (800640c <checkAktifCalisma+0x15dc>)
 80062ae:	f003 f857 	bl	8009360 <HAL_GPIO_ReadPin>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d116      	bne.n	80062e6 <checkAktifCalisma+0x14b6>
 80062b8:	4b55      	ldr	r3, [pc, #340]	; (8006410 <checkAktifCalisma+0x15e0>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d003      	beq.n	80062c8 <checkAktifCalisma+0x1498>
 80062c0:	4b53      	ldr	r3, [pc, #332]	; (8006410 <checkAktifCalisma+0x15e0>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d10e      	bne.n	80062e6 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80062c8:	4b4b      	ldr	r3, [pc, #300]	; (80063f8 <checkAktifCalisma+0x15c8>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80062ce:	2005      	movs	r0, #5
 80062d0:	f7fa fc5a 	bl	8000b88 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80062d4:	2005      	movs	r0, #5
 80062d6:	f7fa fbfd 	bl	8000ad4 <hata2EEPROM>
			convertAndSendData();
 80062da:	f001 fb19 	bl	8007910 <convertAndSendData>
			tablakapisivicihatasi=1;
 80062de:	4b50      	ldr	r3, [pc, #320]	; (8006420 <checkAktifCalisma+0x15f0>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e023      	b.n	800632e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80062e6:	4b4e      	ldr	r3, [pc, #312]	; (8006420 <checkAktifCalisma+0x15f0>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01f      	beq.n	800632e <checkAktifCalisma+0x14fe>
 80062ee:	4b4a      	ldr	r3, [pc, #296]	; (8006418 <checkAktifCalisma+0x15e8>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01b      	beq.n	800632e <checkAktifCalisma+0x14fe>
 80062f6:	4b43      	ldr	r3, [pc, #268]	; (8006404 <checkAktifCalisma+0x15d4>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f083 0301 	eor.w	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d014      	beq.n	800632e <checkAktifCalisma+0x14fe>
 8006304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006308:	4840      	ldr	r0, [pc, #256]	; (800640c <checkAktifCalisma+0x15dc>)
 800630a:	f003 f829 	bl	8009360 <HAL_GPIO_ReadPin>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10c      	bne.n	800632e <checkAktifCalisma+0x14fe>
 8006314:	4b40      	ldr	r3, [pc, #256]	; (8006418 <checkAktifCalisma+0x15e8>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800631c:	4b40      	ldr	r3, [pc, #256]	; (8006420 <checkAktifCalisma+0x15f0>)
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006322:	4b3e      	ldr	r3, [pc, #248]	; (800641c <checkAktifCalisma+0x15ec>)
 8006324:	2200      	movs	r2, #0
 8006326:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006328:	2005      	movs	r0, #5
 800632a:	f7fe fbaf 	bl	8004a8c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800632e:	4b30      	ldr	r3, [pc, #192]	; (80063f0 <checkAktifCalisma+0x15c0>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d107      	bne.n	8006346 <checkAktifCalisma+0x1516>
 8006336:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <checkAktifCalisma+0x15b0>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <checkAktifCalisma+0x1516>
 800633e:	4b39      	ldr	r3, [pc, #228]	; (8006424 <checkAktifCalisma+0x15f4>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d016      	beq.n	8006374 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006346:	4b38      	ldr	r3, [pc, #224]	; (8006428 <checkAktifCalisma+0x15f8>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b38      	ldr	r3, [pc, #224]	; (800642c <checkAktifCalisma+0x15fc>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	4a37      	ldr	r2, [pc, #220]	; (8006430 <checkAktifCalisma+0x1600>)
 8006352:	7812      	ldrb	r2, [r2, #0]
 8006354:	4293      	cmp	r3, r2
 8006356:	d30d      	bcc.n	8006374 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006358:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <checkAktifCalisma+0x15c8>)
 800635a:	2201      	movs	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800635e:	2006      	movs	r0, #6
 8006360:	f7fa fc12 	bl	8000b88 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006364:	2006      	movs	r0, #6
 8006366:	f7fa fbb5 	bl	8000ad4 <hata2EEPROM>
			  	convertAndSendData();
 800636a:	f001 fad1 	bl	8007910 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800636e:	4b31      	ldr	r3, [pc, #196]	; (8006434 <checkAktifCalisma+0x1604>)
 8006370:	2201      	movs	r2, #1
 8006372:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006374:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <checkAktifCalisma+0x1604>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d013      	beq.n	80063a4 <checkAktifCalisma+0x1574>
 800637c:	2108      	movs	r1, #8
 800637e:	4823      	ldr	r0, [pc, #140]	; (800640c <checkAktifCalisma+0x15dc>)
 8006380:	f002 ffee 	bl	8009360 <HAL_GPIO_ReadPin>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <checkAktifCalisma+0x1574>
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <checkAktifCalisma+0x15d4>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f083 0301 	eor.w	r3, r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006398:	4b26      	ldr	r3, [pc, #152]	; (8006434 <checkAktifCalisma+0x1604>)
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800639e:	2006      	movs	r0, #6
 80063a0:	f7fe fb74 	bl	8004a8c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80063a4:	4b24      	ldr	r3, [pc, #144]	; (8006438 <checkAktifCalisma+0x1608>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <checkAktifCalisma+0x1594>
 80063ac:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <checkAktifCalisma+0x15b0>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d107      	bne.n	80063c4 <checkAktifCalisma+0x1594>
 80063b4:	4b21      	ldr	r3, [pc, #132]	; (800643c <checkAktifCalisma+0x160c>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <checkAktifCalisma+0x1594>
 80063bc:	4b19      	ldr	r3, [pc, #100]	; (8006424 <checkAktifCalisma+0x15f4>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d03f      	beq.n	8006444 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80063c4:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <checkAktifCalisma+0x1610>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <checkAktifCalisma+0x15d8>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80063d0:	4b12      	ldr	r3, [pc, #72]	; (800641c <checkAktifCalisma+0x15ec>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e03c      	b.n	8006452 <checkAktifCalisma+0x1622>
 80063d8:	20000271 	.word	0x20000271
 80063dc:	20000277 	.word	0x20000277
 80063e0:	20000258 	.word	0x20000258
 80063e4:	20000281 	.word	0x20000281
 80063e8:	20000223 	.word	0x20000223
 80063ec:	20000227 	.word	0x20000227
 80063f0:	20000274 	.word	0x20000274
 80063f4:	40011000 	.word	0x40011000
 80063f8:	20000275 	.word	0x20000275
 80063fc:	2000027e 	.word	0x2000027e
 8006400:	40010c00 	.word	0x40010c00
 8006404:	2000026e 	.word	0x2000026e
 8006408:	20000282 	.word	0x20000282
 800640c:	40010800 	.word	0x40010800
 8006410:	20000228 	.word	0x20000228
 8006414:	2000027f 	.word	0x2000027f
 8006418:	20000262 	.word	0x20000262
 800641c:	20000283 	.word	0x20000283
 8006420:	20000280 	.word	0x20000280
 8006424:	20000257 	.word	0x20000257
 8006428:	200001fc 	.word	0x200001fc
 800642c:	20000210 	.word	0x20000210
 8006430:	20000238 	.word	0x20000238
 8006434:	2000026f 	.word	0x2000026f
 8006438:	20000255 	.word	0x20000255
 800643c:	20000256 	.word	0x20000256
 8006440:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 8006444:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <checkAktifCalisma+0x1690>)
 8006446:	2201      	movs	r2, #1
 8006448:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <checkAktifCalisma+0x1694>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1e      	ldr	r2, [pc, #120]	; (80064c8 <checkAktifCalisma+0x1698>)
 8006450:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006452:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <checkAktifCalisma+0x169c>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d02f      	beq.n	80064ba <checkAktifCalisma+0x168a>
 800645a:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <checkAktifCalisma+0x16a0>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	f083 0301 	eor.w	r3, r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d028      	beq.n	80064ba <checkAktifCalisma+0x168a>
 8006468:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <checkAktifCalisma+0x16a4>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f083 0301 	eor.w	r3, r3, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d021      	beq.n	80064ba <checkAktifCalisma+0x168a>
 8006476:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <checkAktifCalisma+0x16a8>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	f083 0301 	eor.w	r3, r3, #1
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01a      	beq.n	80064ba <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006484:	4b15      	ldr	r3, [pc, #84]	; (80064dc <checkAktifCalisma+0x16ac>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	f083 0301 	eor.w	r3, r3, #1
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d013      	beq.n	80064ba <checkAktifCalisma+0x168a>
 8006492:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <checkAktifCalisma+0x16b0>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	f083 0301 	eor.w	r3, r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <checkAktifCalisma+0x168a>
 80064a0:	4b10      	ldr	r3, [pc, #64]	; (80064e4 <checkAktifCalisma+0x16b4>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f083 0301 	eor.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <checkAktifCalisma+0x168a>
			hataVar=0;
 80064ae:	4b07      	ldr	r3, [pc, #28]	; (80064cc <checkAktifCalisma+0x169c>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80064b4:	2007      	movs	r0, #7
 80064b6:	f7fe fae9 	bl	8004a8c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000276 	.word	0x20000276
 80064c4:	200001fc 	.word	0x200001fc
 80064c8:	20000210 	.word	0x20000210
 80064cc:	20000275 	.word	0x20000275
 80064d0:	20000270 	.word	0x20000270
 80064d4:	20000271 	.word	0x20000271
 80064d8:	2000027e 	.word	0x2000027e
 80064dc:	2000027f 	.word	0x2000027f
 80064e0:	20000280 	.word	0x20000280
 80064e4:	2000026f 	.word	0x2000026f

080064e8 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80064ec:	4b8b      	ldr	r3, [pc, #556]	; (800671c <checkDemoModCalisma+0x234>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	f040 8229 	bne.w	8006948 <checkDemoModCalisma+0x460>
 80064f6:	4b8a      	ldr	r3, [pc, #552]	; (8006720 <checkDemoModCalisma+0x238>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8224 	beq.w	8006948 <checkDemoModCalisma+0x460>
 8006500:	4b88      	ldr	r3, [pc, #544]	; (8006724 <checkDemoModCalisma+0x23c>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 821f 	bne.w	8006948 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800650a:	2102      	movs	r1, #2
 800650c:	4886      	ldr	r0, [pc, #536]	; (8006728 <checkDemoModCalisma+0x240>)
 800650e:	f002 ff27 	bl	8009360 <HAL_GPIO_ReadPin>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d11d      	bne.n	8006554 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006518:	4b84      	ldr	r3, [pc, #528]	; (800672c <checkDemoModCalisma+0x244>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f083 0301 	eor.w	r3, r3, #1
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006526:	4b82      	ldr	r3, [pc, #520]	; (8006730 <checkDemoModCalisma+0x248>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f083 0301 	eor.w	r3, r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00f      	beq.n	8006554 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006534:	4b7f      	ldr	r3, [pc, #508]	; (8006734 <checkDemoModCalisma+0x24c>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f083 0301 	eor.w	r3, r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d008      	beq.n	8006554 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006542:	2201      	movs	r2, #1
 8006544:	2104      	movs	r1, #4
 8006546:	487c      	ldr	r0, [pc, #496]	; (8006738 <checkDemoModCalisma+0x250>)
 8006548:	f002 ff21 	bl	800938e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800654c:	4b7b      	ldr	r3, [pc, #492]	; (800673c <checkDemoModCalisma+0x254>)
 800654e:	2201      	movs	r2, #1
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	e00e      	b.n	8006572 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006554:	2102      	movs	r1, #2
 8006556:	4874      	ldr	r0, [pc, #464]	; (8006728 <checkDemoModCalisma+0x240>)
 8006558:	f002 ff02 	bl	8009360 <HAL_GPIO_ReadPin>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d107      	bne.n	8006572 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006562:	2200      	movs	r2, #0
 8006564:	2104      	movs	r1, #4
 8006566:	4874      	ldr	r0, [pc, #464]	; (8006738 <checkDemoModCalisma+0x250>)
 8006568:	f002 ff11 	bl	800938e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 800656c:	4b73      	ldr	r3, [pc, #460]	; (800673c <checkDemoModCalisma+0x254>)
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006572:	4b72      	ldr	r3, [pc, #456]	; (800673c <checkDemoModCalisma+0x254>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <checkDemoModCalisma+0xaa>
 800657a:	4b6d      	ldr	r3, [pc, #436]	; (8006730 <checkDemoModCalisma+0x248>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d107      	bne.n	8006592 <checkDemoModCalisma+0xaa>
 8006582:	4b6c      	ldr	r3, [pc, #432]	; (8006734 <checkDemoModCalisma+0x24c>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <checkDemoModCalisma+0xaa>
 800658a:	4b68      	ldr	r3, [pc, #416]	; (800672c <checkDemoModCalisma+0x244>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00c      	beq.n	80065ac <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006592:	2201      	movs	r2, #1
 8006594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006598:	4867      	ldr	r0, [pc, #412]	; (8006738 <checkDemoModCalisma+0x250>)
 800659a:	f002 fef8 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800659e:	2201      	movs	r2, #1
 80065a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065a4:	4864      	ldr	r0, [pc, #400]	; (8006738 <checkDemoModCalisma+0x250>)
 80065a6:	f002 fef2 	bl	800938e <HAL_GPIO_WritePin>
 80065aa:	e00b      	b.n	80065c4 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065b2:	4861      	ldr	r0, [pc, #388]	; (8006738 <checkDemoModCalisma+0x250>)
 80065b4:	f002 feeb 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065b8:	2200      	movs	r2, #0
 80065ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065be:	485e      	ldr	r0, [pc, #376]	; (8006738 <checkDemoModCalisma+0x250>)
 80065c0:	f002 fee5 	bl	800938e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065c4:	2102      	movs	r1, #2
 80065c6:	4858      	ldr	r0, [pc, #352]	; (8006728 <checkDemoModCalisma+0x240>)
 80065c8:	f002 feca 	bl	8009360 <HAL_GPIO_ReadPin>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d10d      	bne.n	80065ee <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065d6:	4854      	ldr	r0, [pc, #336]	; (8006728 <checkDemoModCalisma+0x240>)
 80065d8:	f002 fec2 	bl	8009360 <HAL_GPIO_ReadPin>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80065e2:	4b56      	ldr	r3, [pc, #344]	; (800673c <checkDemoModCalisma+0x254>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f083 0301 	eor.w	r3, r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065ee:	2102      	movs	r1, #2
 80065f0:	484d      	ldr	r0, [pc, #308]	; (8006728 <checkDemoModCalisma+0x240>)
 80065f2:	f002 feb5 	bl	8009360 <HAL_GPIO_ReadPin>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d125      	bne.n	8006648 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006600:	4849      	ldr	r0, [pc, #292]	; (8006728 <checkDemoModCalisma+0x240>)
 8006602:	f002 fead 	bl	8009360 <HAL_GPIO_ReadPin>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d11d      	bne.n	8006648 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800660c:	4b4b      	ldr	r3, [pc, #300]	; (800673c <checkDemoModCalisma+0x254>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f083 0301 	eor.w	r3, r3, #1
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800661a:	4b44      	ldr	r3, [pc, #272]	; (800672c <checkDemoModCalisma+0x244>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	f083 0301 	eor.w	r3, r3, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00f      	beq.n	8006648 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006628:	4b42      	ldr	r3, [pc, #264]	; (8006734 <checkDemoModCalisma+0x24c>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	f083 0301 	eor.w	r3, r3, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006636:	2201      	movs	r2, #1
 8006638:	2120      	movs	r1, #32
 800663a:	483b      	ldr	r0, [pc, #236]	; (8006728 <checkDemoModCalisma+0x240>)
 800663c:	f002 fea7 	bl	800938e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006640:	4b3b      	ldr	r3, [pc, #236]	; (8006730 <checkDemoModCalisma+0x248>)
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e007      	b.n	8006658 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006648:	2200      	movs	r2, #0
 800664a:	2120      	movs	r1, #32
 800664c:	4836      	ldr	r0, [pc, #216]	; (8006728 <checkDemoModCalisma+0x240>)
 800664e:	f002 fe9e 	bl	800938e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006652:	4b37      	ldr	r3, [pc, #220]	; (8006730 <checkDemoModCalisma+0x248>)
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006658:	2102      	movs	r1, #2
 800665a:	4833      	ldr	r0, [pc, #204]	; (8006728 <checkDemoModCalisma+0x240>)
 800665c:	f002 fe80 	bl	8009360 <HAL_GPIO_ReadPin>
 8006660:	4603      	mov	r3, r0
 8006662:	2b01      	cmp	r3, #1
 8006664:	d125      	bne.n	80066b2 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800666a:	482f      	ldr	r0, [pc, #188]	; (8006728 <checkDemoModCalisma+0x240>)
 800666c:	f002 fe78 	bl	8009360 <HAL_GPIO_ReadPin>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d11d      	bne.n	80066b2 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006676:	4b31      	ldr	r3, [pc, #196]	; (800673c <checkDemoModCalisma+0x254>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f083 0301 	eor.w	r3, r3, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d016      	beq.n	80066b2 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006684:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <checkDemoModCalisma+0x248>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f083 0301 	eor.w	r3, r3, #1
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00f      	beq.n	80066b2 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006692:	4b26      	ldr	r3, [pc, #152]	; (800672c <checkDemoModCalisma+0x244>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f083 0301 	eor.w	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80066a0:	2201      	movs	r2, #1
 80066a2:	2110      	movs	r1, #16
 80066a4:	4820      	ldr	r0, [pc, #128]	; (8006728 <checkDemoModCalisma+0x240>)
 80066a6:	f002 fe72 	bl	800938e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80066aa:	4b22      	ldr	r3, [pc, #136]	; (8006734 <checkDemoModCalisma+0x24c>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	e007      	b.n	80066c2 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066b2:	2200      	movs	r2, #0
 80066b4:	2110      	movs	r1, #16
 80066b6:	481c      	ldr	r0, [pc, #112]	; (8006728 <checkDemoModCalisma+0x240>)
 80066b8:	f002 fe69 	bl	800938e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80066bc:	4b1d      	ldr	r3, [pc, #116]	; (8006734 <checkDemoModCalisma+0x24c>)
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80066c2:	2104      	movs	r1, #4
 80066c4:	4818      	ldr	r0, [pc, #96]	; (8006728 <checkDemoModCalisma+0x240>)
 80066c6:	f002 fe4b 	bl	8009360 <HAL_GPIO_ReadPin>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d139      	bne.n	8006744 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <checkDemoModCalisma+0x254>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f083 0301 	eor.w	r3, r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d032      	beq.n	8006744 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80066de:	4b15      	ldr	r3, [pc, #84]	; (8006734 <checkDemoModCalisma+0x24c>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f083 0301 	eor.w	r3, r3, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d02b      	beq.n	8006744 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80066ec:	4b10      	ldr	r3, [pc, #64]	; (8006730 <checkDemoModCalisma+0x248>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f083 0301 	eor.w	r3, r3, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d024      	beq.n	8006744 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80066fa:	2201      	movs	r2, #1
 80066fc:	2102      	movs	r1, #2
 80066fe:	480e      	ldr	r0, [pc, #56]	; (8006738 <checkDemoModCalisma+0x250>)
 8006700:	f002 fe45 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006704:	2201      	movs	r2, #1
 8006706:	2101      	movs	r1, #1
 8006708:	480b      	ldr	r0, [pc, #44]	; (8006738 <checkDemoModCalisma+0x250>)
 800670a:	f002 fe40 	bl	800938e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <checkDemoModCalisma+0x244>)
 8006710:	2201      	movs	r2, #1
 8006712:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <checkDemoModCalisma+0x258>)
 8006716:	2201      	movs	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	e027      	b.n	800676c <checkDemoModCalisma+0x284>
 800671c:	2000023e 	.word	0x2000023e
 8006720:	20000272 	.word	0x20000272
 8006724:	2000023d 	.word	0x2000023d
 8006728:	40011000 	.word	0x40011000
 800672c:	20000279 	.word	0x20000279
 8006730:	2000027a 	.word	0x2000027a
 8006734:	2000027b 	.word	0x2000027b
 8006738:	40010c00 	.word	0x40010c00
 800673c:	20000278 	.word	0x20000278
 8006740:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006744:	2104      	movs	r1, #4
 8006746:	48a0      	ldr	r0, [pc, #640]	; (80069c8 <checkDemoModCalisma+0x4e0>)
 8006748:	f002 fe0a 	bl	8009360 <HAL_GPIO_ReadPin>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d10c      	bne.n	800676c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006752:	2200      	movs	r2, #0
 8006754:	2102      	movs	r1, #2
 8006756:	489d      	ldr	r0, [pc, #628]	; (80069cc <checkDemoModCalisma+0x4e4>)
 8006758:	f002 fe19 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800675c:	2200      	movs	r2, #0
 800675e:	2101      	movs	r1, #1
 8006760:	489a      	ldr	r0, [pc, #616]	; (80069cc <checkDemoModCalisma+0x4e4>)
 8006762:	f002 fe14 	bl	800938e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006766:	4b9a      	ldr	r3, [pc, #616]	; (80069d0 <checkDemoModCalisma+0x4e8>)
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800676c:	2104      	movs	r1, #4
 800676e:	4896      	ldr	r0, [pc, #600]	; (80069c8 <checkDemoModCalisma+0x4e0>)
 8006770:	f002 fdf6 	bl	8009360 <HAL_GPIO_ReadPin>
 8006774:	4603      	mov	r3, r0
 8006776:	2b01      	cmp	r3, #1
 8006778:	d10d      	bne.n	8006796 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800677a:	2201      	movs	r2, #1
 800677c:	2180      	movs	r1, #128	; 0x80
 800677e:	4895      	ldr	r0, [pc, #596]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 8006780:	f002 fe05 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006784:	2201      	movs	r2, #1
 8006786:	2120      	movs	r1, #32
 8006788:	4892      	ldr	r0, [pc, #584]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 800678a:	f002 fe00 	bl	800938e <HAL_GPIO_WritePin>
			timer3 = millis;
 800678e:	4b92      	ldr	r3, [pc, #584]	; (80069d8 <checkDemoModCalisma+0x4f0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a92      	ldr	r2, [pc, #584]	; (80069dc <checkDemoModCalisma+0x4f4>)
 8006794:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006796:	4b90      	ldr	r3, [pc, #576]	; (80069d8 <checkDemoModCalisma+0x4f0>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b90      	ldr	r3, [pc, #576]	; (80069dc <checkDemoModCalisma+0x4f4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d909      	bls.n	80067b8 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067a4:	2200      	movs	r2, #0
 80067a6:	2180      	movs	r1, #128	; 0x80
 80067a8:	488a      	ldr	r0, [pc, #552]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 80067aa:	f002 fdf0 	bl	800938e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067ae:	2200      	movs	r2, #0
 80067b0:	2120      	movs	r1, #32
 80067b2:	4888      	ldr	r0, [pc, #544]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 80067b4:	f002 fdeb 	bl	800938e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80067b8:	2102      	movs	r1, #2
 80067ba:	4883      	ldr	r0, [pc, #524]	; (80069c8 <checkDemoModCalisma+0x4e0>)
 80067bc:	f002 fdd0 	bl	8009360 <HAL_GPIO_ReadPin>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d108      	bne.n	80067d8 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80067c6:	2201      	movs	r2, #1
 80067c8:	2140      	movs	r1, #64	; 0x40
 80067ca:	4882      	ldr	r0, [pc, #520]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 80067cc:	f002 fddf 	bl	800938e <HAL_GPIO_WritePin>
			timer3 = millis;
 80067d0:	4b81      	ldr	r3, [pc, #516]	; (80069d8 <checkDemoModCalisma+0x4f0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a81      	ldr	r2, [pc, #516]	; (80069dc <checkDemoModCalisma+0x4f4>)
 80067d6:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067d8:	4b7f      	ldr	r3, [pc, #508]	; (80069d8 <checkDemoModCalisma+0x4f0>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4b7f      	ldr	r3, [pc, #508]	; (80069dc <checkDemoModCalisma+0x4f4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d904      	bls.n	80067f0 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80067e6:	2200      	movs	r2, #0
 80067e8:	2140      	movs	r1, #64	; 0x40
 80067ea:	487a      	ldr	r0, [pc, #488]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 80067ec:	f002 fdcf 	bl	800938e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80067f0:	4b7b      	ldr	r3, [pc, #492]	; (80069e0 <checkDemoModCalisma+0x4f8>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d058      	beq.n	80068aa <checkDemoModCalisma+0x3c2>
 80067f8:	4b7a      	ldr	r3, [pc, #488]	; (80069e4 <checkDemoModCalisma+0x4fc>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d054      	beq.n	80068aa <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006800:	4b79      	ldr	r3, [pc, #484]	; (80069e8 <checkDemoModCalisma+0x500>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	b2da      	uxtb	r2, r3
 8006808:	4b77      	ldr	r3, [pc, #476]	; (80069e8 <checkDemoModCalisma+0x500>)
 800680a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 800680c:	4b76      	ldr	r3, [pc, #472]	; (80069e8 <checkDemoModCalisma+0x500>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b09      	cmp	r3, #9
 8006812:	d908      	bls.n	8006826 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006814:	4b74      	ldr	r3, [pc, #464]	; (80069e8 <checkDemoModCalisma+0x500>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800681a:	4b74      	ldr	r3, [pc, #464]	; (80069ec <checkDemoModCalisma+0x504>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	4b72      	ldr	r3, [pc, #456]	; (80069ec <checkDemoModCalisma+0x504>)
 8006824:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006826:	4b71      	ldr	r3, [pc, #452]	; (80069ec <checkDemoModCalisma+0x504>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b09      	cmp	r3, #9
 800682c:	d908      	bls.n	8006840 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800682e:	4b6f      	ldr	r3, [pc, #444]	; (80069ec <checkDemoModCalisma+0x504>)
 8006830:	2200      	movs	r2, #0
 8006832:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006834:	4b6e      	ldr	r3, [pc, #440]	; (80069f0 <checkDemoModCalisma+0x508>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	4b6c      	ldr	r3, [pc, #432]	; (80069f0 <checkDemoModCalisma+0x508>)
 800683e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006840:	4b6b      	ldr	r3, [pc, #428]	; (80069f0 <checkDemoModCalisma+0x508>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b09      	cmp	r3, #9
 8006846:	d908      	bls.n	800685a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006848:	4b69      	ldr	r3, [pc, #420]	; (80069f0 <checkDemoModCalisma+0x508>)
 800684a:	2200      	movs	r2, #0
 800684c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800684e:	4b69      	ldr	r3, [pc, #420]	; (80069f4 <checkDemoModCalisma+0x50c>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	4b67      	ldr	r3, [pc, #412]	; (80069f4 <checkDemoModCalisma+0x50c>)
 8006858:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800685a:	4b66      	ldr	r3, [pc, #408]	; (80069f4 <checkDemoModCalisma+0x50c>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b09      	cmp	r3, #9
 8006860:	d908      	bls.n	8006874 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006862:	4b64      	ldr	r3, [pc, #400]	; (80069f4 <checkDemoModCalisma+0x50c>)
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006868:	4b63      	ldr	r3, [pc, #396]	; (80069f8 <checkDemoModCalisma+0x510>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	3301      	adds	r3, #1
 800686e:	b2da      	uxtb	r2, r3
 8006870:	4b61      	ldr	r3, [pc, #388]	; (80069f8 <checkDemoModCalisma+0x510>)
 8006872:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006874:	4b60      	ldr	r3, [pc, #384]	; (80069f8 <checkDemoModCalisma+0x510>)
 8006876:	781a      	ldrb	r2, [r3, #0]
 8006878:	4b60      	ldr	r3, [pc, #384]	; (80069fc <checkDemoModCalisma+0x514>)
 800687a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800687e:	4b5d      	ldr	r3, [pc, #372]	; (80069f4 <checkDemoModCalisma+0x50c>)
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	4b5e      	ldr	r3, [pc, #376]	; (80069fc <checkDemoModCalisma+0x514>)
 8006884:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006886:	4b5a      	ldr	r3, [pc, #360]	; (80069f0 <checkDemoModCalisma+0x508>)
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	4b5c      	ldr	r3, [pc, #368]	; (80069fc <checkDemoModCalisma+0x514>)
 800688c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800688e:	4b57      	ldr	r3, [pc, #348]	; (80069ec <checkDemoModCalisma+0x504>)
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	4b5a      	ldr	r3, [pc, #360]	; (80069fc <checkDemoModCalisma+0x514>)
 8006894:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006896:	4b54      	ldr	r3, [pc, #336]	; (80069e8 <checkDemoModCalisma+0x500>)
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	4b58      	ldr	r3, [pc, #352]	; (80069fc <checkDemoModCalisma+0x514>)
 800689c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800689e:	4b58      	ldr	r3, [pc, #352]	; (8006a00 <checkDemoModCalisma+0x518>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80068a4:	4b4f      	ldr	r3, [pc, #316]	; (80069e4 <checkDemoModCalisma+0x4fc>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80068aa:	4b56      	ldr	r3, [pc, #344]	; (8006a04 <checkDemoModCalisma+0x51c>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 8087 	bne.w	80069c2 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80068b4:	4a54      	ldr	r2, [pc, #336]	; (8006a08 <checkDemoModCalisma+0x520>)
 80068b6:	2101      	movs	r1, #1
 80068b8:	2002      	movs	r0, #2
 80068ba:	f001 fa2b 	bl	8007d14 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80068be:	4a53      	ldr	r2, [pc, #332]	; (8006a0c <checkDemoModCalisma+0x524>)
 80068c0:	2101      	movs	r1, #1
 80068c2:	2001      	movs	r0, #1
 80068c4:	f001 fa26 	bl	8007d14 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80068c8:	4b4b      	ldr	r3, [pc, #300]	; (80069f8 <checkDemoModCalisma+0x510>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	220a      	movs	r2, #10
 80068ce:	4950      	ldr	r1, [pc, #320]	; (8006a10 <checkDemoModCalisma+0x528>)
 80068d0:	4618      	mov	r0, r3
 80068d2:	f005 fd71 	bl	800c3b8 <itoa>
			lcd_print(2,12,snum);
 80068d6:	4a4e      	ldr	r2, [pc, #312]	; (8006a10 <checkDemoModCalisma+0x528>)
 80068d8:	210c      	movs	r1, #12
 80068da:	2002      	movs	r0, #2
 80068dc:	f001 fa1a 	bl	8007d14 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80068e0:	4b44      	ldr	r3, [pc, #272]	; (80069f4 <checkDemoModCalisma+0x50c>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	220a      	movs	r2, #10
 80068e6:	494a      	ldr	r1, [pc, #296]	; (8006a10 <checkDemoModCalisma+0x528>)
 80068e8:	4618      	mov	r0, r3
 80068ea:	f005 fd65 	bl	800c3b8 <itoa>
			lcd_print(2,13,snum);
 80068ee:	4a48      	ldr	r2, [pc, #288]	; (8006a10 <checkDemoModCalisma+0x528>)
 80068f0:	210d      	movs	r1, #13
 80068f2:	2002      	movs	r0, #2
 80068f4:	f001 fa0e 	bl	8007d14 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80068f8:	4b3d      	ldr	r3, [pc, #244]	; (80069f0 <checkDemoModCalisma+0x508>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	220a      	movs	r2, #10
 80068fe:	4944      	ldr	r1, [pc, #272]	; (8006a10 <checkDemoModCalisma+0x528>)
 8006900:	4618      	mov	r0, r3
 8006902:	f005 fd59 	bl	800c3b8 <itoa>
			lcd_print(2,14,snum);
 8006906:	4a42      	ldr	r2, [pc, #264]	; (8006a10 <checkDemoModCalisma+0x528>)
 8006908:	210e      	movs	r1, #14
 800690a:	2002      	movs	r0, #2
 800690c:	f001 fa02 	bl	8007d14 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006910:	4b36      	ldr	r3, [pc, #216]	; (80069ec <checkDemoModCalisma+0x504>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	220a      	movs	r2, #10
 8006916:	493e      	ldr	r1, [pc, #248]	; (8006a10 <checkDemoModCalisma+0x528>)
 8006918:	4618      	mov	r0, r3
 800691a:	f005 fd4d 	bl	800c3b8 <itoa>
			lcd_print(2,15,snum);
 800691e:	4a3c      	ldr	r2, [pc, #240]	; (8006a10 <checkDemoModCalisma+0x528>)
 8006920:	210f      	movs	r1, #15
 8006922:	2002      	movs	r0, #2
 8006924:	f001 f9f6 	bl	8007d14 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006928:	4b2f      	ldr	r3, [pc, #188]	; (80069e8 <checkDemoModCalisma+0x500>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	220a      	movs	r2, #10
 800692e:	4938      	ldr	r1, [pc, #224]	; (8006a10 <checkDemoModCalisma+0x528>)
 8006930:	4618      	mov	r0, r3
 8006932:	f005 fd41 	bl	800c3b8 <itoa>
			lcd_print(2,16,snum);
 8006936:	4a36      	ldr	r2, [pc, #216]	; (8006a10 <checkDemoModCalisma+0x528>)
 8006938:	2110      	movs	r1, #16
 800693a:	2002      	movs	r0, #2
 800693c:	f001 f9ea 	bl	8007d14 <lcd_print>
			mesajYazildi=1;
 8006940:	4b34      	ldr	r3, [pc, #208]	; (8006a14 <checkDemoModCalisma+0x52c>)
 8006942:	2201      	movs	r2, #1
 8006944:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006946:	e03c      	b.n	80069c2 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006948:	4b33      	ldr	r3, [pc, #204]	; (8006a18 <checkDemoModCalisma+0x530>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d003      	beq.n	8006958 <checkDemoModCalisma+0x470>
 8006950:	4b2c      	ldr	r3, [pc, #176]	; (8006a04 <checkDemoModCalisma+0x51c>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d134      	bne.n	80069c2 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006958:	2200      	movs	r2, #0
 800695a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800695e:	481b      	ldr	r0, [pc, #108]	; (80069cc <checkDemoModCalisma+0x4e4>)
 8006960:	f002 fd15 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006964:	2200      	movs	r2, #0
 8006966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800696a:	4818      	ldr	r0, [pc, #96]	; (80069cc <checkDemoModCalisma+0x4e4>)
 800696c:	f002 fd0f 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006970:	2200      	movs	r2, #0
 8006972:	2104      	movs	r1, #4
 8006974:	4815      	ldr	r0, [pc, #84]	; (80069cc <checkDemoModCalisma+0x4e4>)
 8006976:	f002 fd0a 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800697a:	2200      	movs	r2, #0
 800697c:	2102      	movs	r1, #2
 800697e:	4813      	ldr	r0, [pc, #76]	; (80069cc <checkDemoModCalisma+0x4e4>)
 8006980:	f002 fd05 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006984:	2200      	movs	r2, #0
 8006986:	2101      	movs	r1, #1
 8006988:	4810      	ldr	r0, [pc, #64]	; (80069cc <checkDemoModCalisma+0x4e4>)
 800698a:	f002 fd00 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800698e:	2200      	movs	r2, #0
 8006990:	2120      	movs	r1, #32
 8006992:	480d      	ldr	r0, [pc, #52]	; (80069c8 <checkDemoModCalisma+0x4e0>)
 8006994:	f002 fcfb 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006998:	2200      	movs	r2, #0
 800699a:	2110      	movs	r1, #16
 800699c:	480a      	ldr	r0, [pc, #40]	; (80069c8 <checkDemoModCalisma+0x4e0>)
 800699e:	f002 fcf6 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80069a2:	2200      	movs	r2, #0
 80069a4:	2180      	movs	r1, #128	; 0x80
 80069a6:	480b      	ldr	r0, [pc, #44]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 80069a8:	f002 fcf1 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80069ac:	2200      	movs	r2, #0
 80069ae:	2140      	movs	r1, #64	; 0x40
 80069b0:	4808      	ldr	r0, [pc, #32]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 80069b2:	f002 fcec 	bl	800938e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069b6:	2200      	movs	r2, #0
 80069b8:	2120      	movs	r1, #32
 80069ba:	4806      	ldr	r0, [pc, #24]	; (80069d4 <checkDemoModCalisma+0x4ec>)
 80069bc:	f002 fce7 	bl	800938e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80069c0:	e7ff      	b.n	80069c2 <checkDemoModCalisma+0x4da>
 80069c2:	bf00      	nop
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40011000 	.word	0x40011000
 80069cc:	40010c00 	.word	0x40010c00
 80069d0:	20000279 	.word	0x20000279
 80069d4:	40010800 	.word	0x40010800
 80069d8:	200001fc 	.word	0x200001fc
 80069dc:	2000020c 	.word	0x2000020c
 80069e0:	20000278 	.word	0x20000278
 80069e4:	2000025e 	.word	0x2000025e
 80069e8:	2000021d 	.word	0x2000021d
 80069ec:	2000021e 	.word	0x2000021e
 80069f0:	20000000 	.word	0x20000000
 80069f4:	20000001 	.word	0x20000001
 80069f8:	2000021f 	.word	0x2000021f
 80069fc:	20000118 	.word	0x20000118
 8006a00:	2000024c 	.word	0x2000024c
 8006a04:	2000023d 	.word	0x2000023d
 8006a08:	0800db90 	.word	0x0800db90
 8006a0c:	0800db9c 	.word	0x0800db9c
 8006a10:	20000188 	.word	0x20000188
 8006a14:	20000254 	.word	0x20000254
 8006a18:	2000023e 	.word	0x2000023e

08006a1c <mainLoop>:

void mainLoop() {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006a22:	f7fe f923 	bl	8004c6c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006a26:	2101      	movs	r1, #1
 8006a28:	48ac      	ldr	r0, [pc, #688]	; (8006cdc <mainLoop+0x2c0>)
 8006a2a:	f002 fc99 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d136      	bne.n	8006aa2 <mainLoop+0x86>
 8006a34:	2108      	movs	r1, #8
 8006a36:	48aa      	ldr	r0, [pc, #680]	; (8006ce0 <mainLoop+0x2c4>)
 8006a38:	f002 fc92 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d12f      	bne.n	8006aa2 <mainLoop+0x86>
 8006a42:	2102      	movs	r1, #2
 8006a44:	48a5      	ldr	r0, [pc, #660]	; (8006cdc <mainLoop+0x2c0>)
 8006a46:	f002 fc8b 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d128      	bne.n	8006aa2 <mainLoop+0x86>
 8006a50:	2104      	movs	r1, #4
 8006a52:	48a2      	ldr	r0, [pc, #648]	; (8006cdc <mainLoop+0x2c0>)
 8006a54:	f002 fc84 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d121      	bne.n	8006aa2 <mainLoop+0x86>
 8006a5e:	2108      	movs	r1, #8
 8006a60:	489e      	ldr	r0, [pc, #632]	; (8006cdc <mainLoop+0x2c0>)
 8006a62:	f002 fc7d 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11a      	bne.n	8006aa2 <mainLoop+0x86>
 8006a6c:	2180      	movs	r1, #128	; 0x80
 8006a6e:	489c      	ldr	r0, [pc, #624]	; (8006ce0 <mainLoop+0x2c4>)
 8006a70:	f002 fc76 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d113      	bne.n	8006aa2 <mainLoop+0x86>
 8006a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a7e:	4898      	ldr	r0, [pc, #608]	; (8006ce0 <mainLoop+0x2c4>)
 8006a80:	f002 fc6e 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d10b      	bne.n	8006aa2 <mainLoop+0x86>
 8006a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a8e:	4894      	ldr	r0, [pc, #592]	; (8006ce0 <mainLoop+0x2c4>)
 8006a90:	f002 fc66 	bl	8009360 <HAL_GPIO_ReadPin>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d103      	bne.n	8006aa2 <mainLoop+0x86>
			butonKontrol=0;
 8006a9a:	4b92      	ldr	r3, [pc, #584]	; (8006ce4 <mainLoop+0x2c8>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	e003      	b.n	8006aaa <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006aa2:	4b91      	ldr	r3, [pc, #580]	; (8006ce8 <mainLoop+0x2cc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a91      	ldr	r2, [pc, #580]	; (8006cec <mainLoop+0x2d0>)
 8006aa8:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006aaa:	4b91      	ldr	r3, [pc, #580]	; (8006cf0 <mainLoop+0x2d4>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d03a      	beq.n	8006b28 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006ab2:	bf00      	nop
 8006ab4:	488f      	ldr	r0, [pc, #572]	; (8006cf4 <mainLoop+0x2d8>)
 8006ab6:	f003 fa7c 	bl	8009fb2 <HAL_I2C_GetError>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d0f9      	beq.n	8006ab4 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006ac0:	bf00      	nop
 8006ac2:	488c      	ldr	r0, [pc, #560]	; (8006cf4 <mainLoop+0x2d8>)
 8006ac4:	f003 fa68 	bl	8009f98 <HAL_I2C_GetState>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d1f9      	bne.n	8006ac2 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ace:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ad2:	9302      	str	r3, [sp, #8]
 8006ad4:	236e      	movs	r3, #110	; 0x6e
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	4b87      	ldr	r3, [pc, #540]	; (8006cf8 <mainLoop+0x2dc>)
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	236e      	movs	r3, #110	; 0x6e
 8006ade:	2200      	movs	r2, #0
 8006ae0:	21a0      	movs	r1, #160	; 0xa0
 8006ae2:	4884      	ldr	r0, [pc, #528]	; (8006cf4 <mainLoop+0x2d8>)
 8006ae4:	f002 fef6 	bl	80098d4 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006aec:	f001 fe68 	bl	80087c0 <HAL_Delay>

		  hafizaYaz=0;
 8006af0:	4b7f      	ldr	r3, [pc, #508]	; (8006cf0 <mainLoop+0x2d4>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006af6:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <mainLoop+0x2e0>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006afe:	4a80      	ldr	r2, [pc, #512]	; (8006d00 <mainLoop+0x2e4>)
 8006b00:	2101      	movs	r1, #1
 8006b02:	2002      	movs	r0, #2
 8006b04:	f001 f906 	bl	8007d14 <lcd_print>
 8006b08:	e008      	b.n	8006b1c <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006b0a:	4b7c      	ldr	r3, [pc, #496]	; (8006cfc <mainLoop+0x2e0>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d104      	bne.n	8006b1c <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006b12:	4a7c      	ldr	r2, [pc, #496]	; (8006d04 <mainLoop+0x2e8>)
 8006b14:	2101      	movs	r1, #1
 8006b16:	2002      	movs	r0, #2
 8006b18:	f001 f8fc 	bl	8007d14 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b20:	f001 fe4e 	bl	80087c0 <HAL_Delay>
		  lcd_clear();
 8006b24:	f001 f922 	bl	8007d6c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006b28:	4b77      	ldr	r3, [pc, #476]	; (8006d08 <mainLoop+0x2ec>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f083 0301 	eor.w	r3, r3, #1
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d06d      	beq.n	8006c12 <mainLoop+0x1f6>
 8006b36:	486f      	ldr	r0, [pc, #444]	; (8006cf4 <mainLoop+0x2d8>)
 8006b38:	f003 fa2e 	bl	8009f98 <HAL_I2C_GetState>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d167      	bne.n	8006c12 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006b42:	4b72      	ldr	r3, [pc, #456]	; (8006d0c <mainLoop+0x2f0>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f083 0301 	eor.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d044      	beq.n	8006bda <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006b50:	4a6f      	ldr	r2, [pc, #444]	; (8006d10 <mainLoop+0x2f4>)
 8006b52:	2101      	movs	r1, #1
 8006b54:	2001      	movs	r0, #1
 8006b56:	f001 f8dd 	bl	8007d14 <lcd_print>
			  if(dilSecim==0) {
 8006b5a:	4b68      	ldr	r3, [pc, #416]	; (8006cfc <mainLoop+0x2e0>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006b62:	4a6c      	ldr	r2, [pc, #432]	; (8006d14 <mainLoop+0x2f8>)
 8006b64:	2101      	movs	r1, #1
 8006b66:	2002      	movs	r0, #2
 8006b68:	f001 f8d4 	bl	8007d14 <lcd_print>
 8006b6c:	e008      	b.n	8006b80 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006b6e:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <mainLoop+0x2e0>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d104      	bne.n	8006b80 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006b76:	4a68      	ldr	r2, [pc, #416]	; (8006d18 <mainLoop+0x2fc>)
 8006b78:	2101      	movs	r1, #1
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f001 f8ca 	bl	8007d14 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b84:	f001 fe1c 	bl	80087c0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b88:	bf00      	nop
 8006b8a:	485a      	ldr	r0, [pc, #360]	; (8006cf4 <mainLoop+0x2d8>)
 8006b8c:	f003 fa11 	bl	8009fb2 <HAL_I2C_GetError>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d0f9      	beq.n	8006b8a <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b96:	e003      	b.n	8006ba0 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b9c:	f001 fe10 	bl	80087c0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006ba0:	4854      	ldr	r0, [pc, #336]	; (8006cf4 <mainLoop+0x2d8>)
 8006ba2:	f003 f9f9 	bl	8009f98 <HAL_I2C_GetState>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d1f5      	bne.n	8006b98 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006bac:	4b53      	ldr	r3, [pc, #332]	; (8006cfc <mainLoop+0x2e0>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006bb4:	4a59      	ldr	r2, [pc, #356]	; (8006d1c <mainLoop+0x300>)
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	2002      	movs	r0, #2
 8006bba:	f001 f8ab 	bl	8007d14 <lcd_print>
 8006bbe:	e008      	b.n	8006bd2 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006bc0:	4b4e      	ldr	r3, [pc, #312]	; (8006cfc <mainLoop+0x2e0>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d104      	bne.n	8006bd2 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006bc8:	4a55      	ldr	r2, [pc, #340]	; (8006d20 <mainLoop+0x304>)
 8006bca:	2101      	movs	r1, #1
 8006bcc:	2002      	movs	r0, #2
 8006bce:	f001 f8a1 	bl	8007d14 <lcd_print>
			  }

			  ilkOkuma=1;
 8006bd2:	4b4e      	ldr	r3, [pc, #312]	; (8006d0c <mainLoop+0x2f0>)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	e014      	b.n	8006c04 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006bda:	4b48      	ldr	r3, [pc, #288]	; (8006cfc <mainLoop+0x2e0>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d105      	bne.n	8006bee <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006be2:	4a50      	ldr	r2, [pc, #320]	; (8006d24 <mainLoop+0x308>)
 8006be4:	2101      	movs	r1, #1
 8006be6:	2002      	movs	r0, #2
 8006be8:	f001 f894 	bl	8007d14 <lcd_print>
 8006bec:	e008      	b.n	8006c00 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006bee:	4b43      	ldr	r3, [pc, #268]	; (8006cfc <mainLoop+0x2e0>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d104      	bne.n	8006c00 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006bf6:	4a4c      	ldr	r2, [pc, #304]	; (8006d28 <mainLoop+0x30c>)
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	2002      	movs	r0, #2
 8006bfc:	f001 f88a 	bl	8007d14 <lcd_print>
			  }
			  lcd_clear();
 8006c00:	f001 f8b4 	bl	8007d6c <lcd_clear>
		  }

		  lcd_clear();
 8006c04:	f001 f8b2 	bl	8007d6c <lcd_clear>

		  eepromKontrol();
 8006c08:	f7f9 fb14 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006c0c:	4b3e      	ldr	r3, [pc, #248]	; (8006d08 <mainLoop+0x2ec>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006c12:	4b46      	ldr	r3, [pc, #280]	; (8006d2c <mainLoop+0x310>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d11c      	bne.n	8006c54 <mainLoop+0x238>
 8006c1a:	4b45      	ldr	r3, [pc, #276]	; (8006d30 <mainLoop+0x314>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f083 0301 	eor.w	r3, r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d015      	beq.n	8006c54 <mainLoop+0x238>
 8006c28:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <mainLoop+0x318>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d111      	bne.n	8006c54 <mainLoop+0x238>
			lcd_clear();
 8006c30:	f001 f89c 	bl	8007d6c <lcd_clear>
			HAL_Delay(10);
 8006c34:	200a      	movs	r0, #10
 8006c36:	f001 fdc3 	bl	80087c0 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006c3a:	4a3f      	ldr	r2, [pc, #252]	; (8006d38 <mainLoop+0x31c>)
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	2001      	movs	r0, #1
 8006c40:	f001 f868 	bl	8007d14 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006c44:	4a3d      	ldr	r2, [pc, #244]	; (8006d3c <mainLoop+0x320>)
 8006c46:	2101      	movs	r1, #1
 8006c48:	2002      	movs	r0, #2
 8006c4a:	f001 f863 	bl	8007d14 <lcd_print>
			mesajYazildi=1;
 8006c4e:	4b38      	ldr	r3, [pc, #224]	; (8006d30 <mainLoop+0x314>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006c54:	4b35      	ldr	r3, [pc, #212]	; (8006d2c <mainLoop+0x310>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d112      	bne.n	8006c82 <mainLoop+0x266>
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	481f      	ldr	r0, [pc, #124]	; (8006cdc <mainLoop+0x2c0>)
 8006c60:	f002 fb7e 	bl	8009360 <HAL_GPIO_ReadPin>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10b      	bne.n	8006c82 <mainLoop+0x266>
 8006c6a:	2104      	movs	r1, #4
 8006c6c:	481b      	ldr	r0, [pc, #108]	; (8006cdc <mainLoop+0x2c0>)
 8006c6e:	f002 fb77 	bl	8009360 <HAL_GPIO_ReadPin>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d104      	bne.n	8006c82 <mainLoop+0x266>
			menuGiris=1;
 8006c78:	4b2c      	ldr	r3, [pc, #176]	; (8006d2c <mainLoop+0x310>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c7e:	f001 f875 	bl	8007d6c <lcd_clear>
		}

		if(menuGiris==1) {
 8006c82:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <mainLoop+0x310>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <mainLoop+0x272>
			menu();
 8006c8a:	f7fa fabb 	bl	8001204 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c92:	4813      	ldr	r0, [pc, #76]	; (8006ce0 <mainLoop+0x2c4>)
 8006c94:	f002 fb93 	bl	80093be <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c9c:	4828      	ldr	r0, [pc, #160]	; (8006d40 <mainLoop+0x324>)
 8006c9e:	f002 fb5f 	bl	8009360 <HAL_GPIO_ReadPin>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <mainLoop+0x2a2>
 8006ca8:	4b26      	ldr	r3, [pc, #152]	; (8006d44 <mainLoop+0x328>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f083 0301 	eor.w	r3, r3, #1
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <mainLoop+0x2a2>
			stopVar=1;
 8006cb6:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <mainLoop+0x32c>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e002      	b.n	8006cc4 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006cbe:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <mainLoop+0x32c>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006cc4:	f7fd ffe8 	bl	8004c98 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006cc8:	f7fe f81a 	bl	8004d00 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006ccc:	f7fe f85e 	bl	8004d8c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006cd0:	f7fe f8ae 	bl	8004e30 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006cd4:	f7ff fc08 	bl	80064e8 <checkDemoModCalisma>
		checkLCDBacklight();
 8006cd8:	e6a3      	b.n	8006a22 <mainLoop+0x6>
 8006cda:	bf00      	nop
 8006cdc:	40010800 	.word	0x40010800
 8006ce0:	40011000 	.word	0x40011000
 8006ce4:	2000024f 	.word	0x2000024f
 8006ce8:	200001fc 	.word	0x200001fc
 8006cec:	20000218 	.word	0x20000218
 8006cf0:	2000024c 	.word	0x2000024c
 8006cf4:	200003a8 	.word	0x200003a8
 8006cf8:	20000118 	.word	0x20000118
 8006cfc:	20000241 	.word	0x20000241
 8006d00:	0800dbb0 	.word	0x0800dbb0
 8006d04:	0800dbc4 	.word	0x0800dbc4
 8006d08:	2000024d 	.word	0x2000024d
 8006d0c:	2000024e 	.word	0x2000024e
 8006d10:	0800dbd8 	.word	0x0800dbd8
 8006d14:	0800dbec 	.word	0x0800dbec
 8006d18:	0800dc00 	.word	0x0800dc00
 8006d1c:	0800dc14 	.word	0x0800dc14
 8006d20:	0800dc28 	.word	0x0800dc28
 8006d24:	0800dc3c 	.word	0x0800dc3c
 8006d28:	0800dc50 	.word	0x0800dc50
 8006d2c:	2000023d 	.word	0x2000023d
 8006d30:	20000254 	.word	0x20000254
 8006d34:	2000023e 	.word	0x2000023e
 8006d38:	0800dc64 	.word	0x0800dc64
 8006d3c:	0800dc78 	.word	0x0800dc78
 8006d40:	40010c00 	.word	0x40010c00
 8006d44:	20000275 	.word	0x20000275
 8006d48:	20000272 	.word	0x20000272

08006d4c <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006d52:	2001      	movs	r0, #1
 8006d54:	f001 f83c 	bl	8007dd0 <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006d58:	2305      	movs	r3, #5
 8006d5a:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006d60:	2300      	movs	r3, #0
 8006d62:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006d64:	4ba4      	ldr	r3, [pc, #656]	; (8006ff8 <takeMachineID+0x2ac>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	603b      	str	r3, [r7, #0]

    resetEEPROM4Wifi(1);
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	f7f9 fda2 	bl	80008b4 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006d70:	2064      	movs	r0, #100	; 0x64
 8006d72:	f001 fd25 	bl	80087c0 <HAL_Delay>

    printTemplate(1, 0);
 8006d76:	2100      	movs	r1, #0
 8006d78:	2001      	movs	r0, #1
 8006d7a:	f7fa f8b7 	bl	8000eec <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d7e:	2108      	movs	r1, #8
 8006d80:	489e      	ldr	r0, [pc, #632]	; (8006ffc <takeMachineID+0x2b0>)
 8006d82:	f002 faed 	bl	8009360 <HAL_GPIO_ReadPin>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d136      	bne.n	8006dfa <takeMachineID+0xae>
        	lcd_cursor(0);
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f001 f81f 	bl	8007dd0 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006d92:	489b      	ldr	r0, [pc, #620]	; (8007000 <takeMachineID+0x2b4>)
 8006d94:	f7f9 fa46 	bl	8000224 <strlen>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b0c      	cmp	r3, #12
 8006d9c:	d010      	beq.n	8006dc0 <takeMachineID+0x74>
        		lcd_clear();
 8006d9e:	f000 ffe5 	bl	8007d6c <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006da2:	4a98      	ldr	r2, [pc, #608]	; (8007004 <takeMachineID+0x2b8>)
 8006da4:	2101      	movs	r1, #1
 8006da6:	2001      	movs	r0, #1
 8006da8:	f000 ffb4 	bl	8007d14 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006dac:	4a96      	ldr	r2, [pc, #600]	; (8007008 <takeMachineID+0x2bc>)
 8006dae:	2101      	movs	r1, #1
 8006db0:	2002      	movs	r0, #2
 8006db2:	f000 ffaf 	bl	8007d14 <lcd_print>
        		HAL_Delay(1200);
 8006db6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006dba:	f001 fd01 	bl	80087c0 <HAL_Delay>
        		goto mainSection;
 8006dbe:	e7c8      	b.n	8006d52 <takeMachineID+0x6>
        	} else {
        		memcpy(&eepromData[idStartPos], machineIDInt, machineIDCharacterLimit); //destination, source, size
 8006dc0:	4b8d      	ldr	r3, [pc, #564]	; (8006ff8 <takeMachineID+0x2ac>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a91      	ldr	r2, [pc, #580]	; (800700c <takeMachineID+0x2c0>)
 8006dc6:	4413      	add	r3, r2
 8006dc8:	4a91      	ldr	r2, [pc, #580]	; (8007010 <takeMachineID+0x2c4>)
 8006dca:	6810      	ldr	r0, [r2, #0]
 8006dcc:	6851      	ldr	r1, [r2, #4]
 8006dce:	6892      	ldr	r2, [r2, #8]
 8006dd0:	6018      	str	r0, [r3, #0]
 8006dd2:	6059      	str	r1, [r3, #4]
 8006dd4:	609a      	str	r2, [r3, #8]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006dd6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006dda:	9302      	str	r3, [sp, #8]
 8006ddc:	236e      	movs	r3, #110	; 0x6e
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	4b8a      	ldr	r3, [pc, #552]	; (800700c <takeMachineID+0x2c0>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	236e      	movs	r3, #110	; 0x6e
 8006de6:	2200      	movs	r2, #0
 8006de8:	21a0      	movs	r1, #160	; 0xa0
 8006dea:	488a      	ldr	r0, [pc, #552]	; (8007014 <takeMachineID+0x2c8>)
 8006dec:	f002 fd72 	bl	80098d4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006df4:	f001 fce4 	bl	80087c0 <HAL_Delay>

            	break;
 8006df8:	e13c      	b.n	8007074 <takeMachineID+0x328>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	487f      	ldr	r0, [pc, #508]	; (8006ffc <takeMachineID+0x2b0>)
 8006dfe:	f002 faaf 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d111      	bne.n	8006e2c <takeMachineID+0xe0>
        	if(cursorPosition == 7) {
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b07      	cmp	r3, #7
 8006e0c:	d102      	bne.n	8006e14 <takeMachineID+0xc8>
        		cursorPosition = 10;
 8006e0e:	230a      	movs	r3, #10
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	e008      	b.n	8006e26 <takeMachineID+0xda>
        	} else if (cursorPosition == 14) {
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b0e      	cmp	r3, #14
 8006e18:	d102      	bne.n	8006e20 <takeMachineID+0xd4>
                cursorPosition = 3;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	e002      	b.n	8006e26 <takeMachineID+0xda>
            } else {
            	cursorPosition++;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006e26:	2096      	movs	r0, #150	; 0x96
 8006e28:	f001 fcca 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006e2c:	2108      	movs	r1, #8
 8006e2e:	487a      	ldr	r0, [pc, #488]	; (8007018 <takeMachineID+0x2cc>)
 8006e30:	f002 fa96 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d111      	bne.n	8006e5e <takeMachineID+0x112>
            if (cursorPosition == 3) {
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d102      	bne.n	8006e46 <takeMachineID+0xfa>
                cursorPosition = 14;
 8006e40:	230e      	movs	r3, #14
 8006e42:	60bb      	str	r3, [r7, #8]
 8006e44:	e008      	b.n	8006e58 <takeMachineID+0x10c>
            } else if(cursorPosition == 10) {
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b0a      	cmp	r3, #10
 8006e4a:	d102      	bne.n	8006e52 <takeMachineID+0x106>
            	cursorPosition = 7;
 8006e4c:	2307      	movs	r3, #7
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	e002      	b.n	8006e58 <takeMachineID+0x10c>
            } else {
            	cursorPosition--;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006e58:	2096      	movs	r0, #150	; 0x96
 8006e5a:	f001 fcb1 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e5e:	2102      	movs	r1, #2
 8006e60:	4866      	ldr	r0, [pc, #408]	; (8006ffc <takeMachineID+0x2b0>)
 8006e62:	f002 fa7d 	bl	8009360 <HAL_GPIO_ReadPin>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	f040 80a9 	bne.w	8006fc0 <takeMachineID+0x274>
        	if(cursorPosition == 3) {
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d10a      	bne.n	8006e8a <takeMachineID+0x13e>
        		machineID[arrayPos] = '0';
 8006e74:	4a62      	ldr	r2, [pc, #392]	; (8007000 <takeMachineID+0x2b4>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	2230      	movs	r2, #48	; 0x30
 8006e7c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006e7e:	4a63      	ldr	r2, [pc, #396]	; (800700c <takeMachineID+0x2c0>)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4413      	add	r3, r2
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e07c      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 4) {
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d10a      	bne.n	8006ea6 <takeMachineID+0x15a>
        		machineID[arrayPos] = '1';
 8006e90:	4a5b      	ldr	r2, [pc, #364]	; (8007000 <takeMachineID+0x2b4>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4413      	add	r3, r2
 8006e96:	2231      	movs	r2, #49	; 0x31
 8006e98:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006e9a:	4a5c      	ldr	r2, [pc, #368]	; (800700c <takeMachineID+0x2c0>)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	e06e      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 5) {
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b05      	cmp	r3, #5
 8006eaa:	d10a      	bne.n	8006ec2 <takeMachineID+0x176>
        		machineID[arrayPos] = '2';
 8006eac:	4a54      	ldr	r2, [pc, #336]	; (8007000 <takeMachineID+0x2b4>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	2232      	movs	r2, #50	; 0x32
 8006eb4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006eb6:	4a55      	ldr	r2, [pc, #340]	; (800700c <takeMachineID+0x2c0>)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	4413      	add	r3, r2
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e060      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 6) {
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b06      	cmp	r3, #6
 8006ec6:	d10a      	bne.n	8006ede <takeMachineID+0x192>
        		machineID[arrayPos] = '3';
 8006ec8:	4a4d      	ldr	r2, [pc, #308]	; (8007000 <takeMachineID+0x2b4>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	2233      	movs	r2, #51	; 0x33
 8006ed0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006ed2:	4a4e      	ldr	r2, [pc, #312]	; (800700c <takeMachineID+0x2c0>)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	2203      	movs	r2, #3
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	e052      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 7) {
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	d10a      	bne.n	8006efa <takeMachineID+0x1ae>
        		machineID[arrayPos] = '4';
 8006ee4:	4a46      	ldr	r2, [pc, #280]	; (8007000 <takeMachineID+0x2b4>)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	2234      	movs	r2, #52	; 0x34
 8006eec:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006eee:	4a47      	ldr	r2, [pc, #284]	; (800700c <takeMachineID+0x2c0>)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e044      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 10) {
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b0a      	cmp	r3, #10
 8006efe:	d10a      	bne.n	8006f16 <takeMachineID+0x1ca>
        		machineID[arrayPos] = '5';
 8006f00:	4a3f      	ldr	r2, [pc, #252]	; (8007000 <takeMachineID+0x2b4>)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4413      	add	r3, r2
 8006f06:	2235      	movs	r2, #53	; 0x35
 8006f08:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006f0a:	4a40      	ldr	r2, [pc, #256]	; (800700c <takeMachineID+0x2c0>)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	4413      	add	r3, r2
 8006f10:	2205      	movs	r2, #5
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	e036      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 11) {
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b0b      	cmp	r3, #11
 8006f1a:	d10a      	bne.n	8006f32 <takeMachineID+0x1e6>
        		machineID[arrayPos] = '6';
 8006f1c:	4a38      	ldr	r2, [pc, #224]	; (8007000 <takeMachineID+0x2b4>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4413      	add	r3, r2
 8006f22:	2236      	movs	r2, #54	; 0x36
 8006f24:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006f26:	4a39      	ldr	r2, [pc, #228]	; (800700c <takeMachineID+0x2c0>)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	2206      	movs	r2, #6
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	e028      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 12) {
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b0c      	cmp	r3, #12
 8006f36:	d10a      	bne.n	8006f4e <takeMachineID+0x202>
        		machineID[arrayPos] = '7';
 8006f38:	4a31      	ldr	r2, [pc, #196]	; (8007000 <takeMachineID+0x2b4>)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	2237      	movs	r2, #55	; 0x37
 8006f40:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006f42:	4a32      	ldr	r2, [pc, #200]	; (800700c <takeMachineID+0x2c0>)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	4413      	add	r3, r2
 8006f48:	2207      	movs	r2, #7
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e01a      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 13) {
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b0d      	cmp	r3, #13
 8006f52:	d10a      	bne.n	8006f6a <takeMachineID+0x21e>
        		machineID[arrayPos] = '8';
 8006f54:	4a2a      	ldr	r2, [pc, #168]	; (8007000 <takeMachineID+0x2b4>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	2238      	movs	r2, #56	; 0x38
 8006f5c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006f5e:	4a2b      	ldr	r2, [pc, #172]	; (800700c <takeMachineID+0x2c0>)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4413      	add	r3, r2
 8006f64:	2208      	movs	r2, #8
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	e00c      	b.n	8006f84 <takeMachineID+0x238>
        	} else if(cursorPosition == 14) {
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b0e      	cmp	r3, #14
 8006f6e:	d109      	bne.n	8006f84 <takeMachineID+0x238>
        		machineID[arrayPos] = '9';
 8006f70:	4a23      	ldr	r2, [pc, #140]	; (8007000 <takeMachineID+0x2b4>)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	2239      	movs	r2, #57	; 0x39
 8006f78:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006f7a:	4a24      	ldr	r2, [pc, #144]	; (800700c <takeMachineID+0x2c0>)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	4413      	add	r3, r2
 8006f80:	2209      	movs	r2, #9
 8006f82:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	b2d9      	uxtb	r1, r3
 8006f88:	4a1d      	ldr	r2, [pc, #116]	; (8007000 <takeMachineID+0x2b4>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	2001      	movs	r0, #1
 8006f94:	f000 fed3 	bl	8007d3e <lcd_print_char>

        	writeLoc++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	603b      	str	r3, [r7, #0]

        	machineID[machineIDCharacterLimit] = '\0';
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <takeMachineID+0x2b4>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	731a      	strb	r2, [r3, #12]
        	eepromData[eepromVal] = '\0';
 8006fb0:	4a16      	ldr	r2, [pc, #88]	; (800700c <takeMachineID+0x2c0>)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]

        	HAL_Delay(150);
 8006fba:	2096      	movs	r0, #150	; 0x96
 8006fbc:	f001 fc00 	bl	80087c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	480e      	ldr	r0, [pc, #56]	; (8006ffc <takeMachineID+0x2b0>)
 8006fc4:	f002 f9cc 	bl	8009360 <HAL_GPIO_ReadPin>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d14b      	bne.n	8007066 <takeMachineID+0x31a>
            if(strlen(machineID) >= 1) {
 8006fce:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <takeMachineID+0x2b4>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d044      	beq.n	8007060 <takeMachineID+0x314>
                machineID[arrayPos] = '\0';
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <takeMachineID+0x2b4>)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4413      	add	r3, r2
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <takeMachineID+0x2c0>)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b05      	cmp	r3, #5
 8006fee:	dd15      	ble.n	800701c <takeMachineID+0x2d0>
                	writeLoc--;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e016      	b.n	8007026 <takeMachineID+0x2da>
 8006ff8:	20000004 	.word	0x20000004
 8006ffc:	40010800 	.word	0x40010800
 8007000:	20000190 	.word	0x20000190
 8007004:	0800dc8c 	.word	0x0800dc8c
 8007008:	0800dca0 	.word	0x0800dca0
 800700c:	20000118 	.word	0x20000118
 8007010:	200001c4 	.word	0x200001c4
 8007014:	200003a8 	.word	0x200003a8
 8007018:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b04      	cmp	r3, #4
 8007020:	dc01      	bgt.n	8007026 <takeMachineID+0x2da>
                	writeLoc = 5;
 8007022:	2305      	movs	r3, #5
 8007024:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	dd06      	ble.n	800703a <takeMachineID+0x2ee>
                	arrayPos--;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3b01      	subs	r3, #1
 8007030:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	3b01      	subs	r3, #1
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	e007      	b.n	800704a <takeMachineID+0x2fe>
                } else if(arrayPos < 0) {
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	da04      	bge.n	800704a <takeMachineID+0x2fe>
                	arrayPos = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <takeMachineID+0x330>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	3304      	adds	r3, #4
 8007050:	b2db      	uxtb	r3, r3
 8007052:	4619      	mov	r1, r3
 8007054:	2001      	movs	r0, #1
 8007056:	f000 fe93 	bl	8007d80 <lcd_delete_char>
                HAL_Delay(50);
 800705a:	2032      	movs	r0, #50	; 0x32
 800705c:	f001 fbb0 	bl	80087c0 <HAL_Delay>
            }

            HAL_Delay(150);
 8007060:	2096      	movs	r0, #150	; 0x96
 8007062:	f001 fbad 	bl	80087c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	4619      	mov	r1, r3
 800706c:	2002      	movs	r0, #2
 800706e:	f000 fe32 	bl	8007cd6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007072:	e684      	b.n	8006d7e <takeMachineID+0x32>
    }
}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000004 	.word	0x20000004

08007080 <takeWifiSSID>:

void takeWifiSSID() {
 8007080:	b5b0      	push	{r4, r5, r7, lr}
 8007082:	b08a      	sub	sp, #40	; 0x28
 8007084:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8007086:	2001      	movs	r0, #1
 8007088:	f000 fea2 	bl	8007dd0 <lcd_cursor>

    resetEEPROM4Wifi(2);
 800708c:	2002      	movs	r0, #2
 800708e:	f7f9 fc11 	bl	80008b4 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007092:	2064      	movs	r0, #100	; 0x64
 8007094:	f001 fb94 	bl	80087c0 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800709c:	2307      	movs	r3, #7
 800709e:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80070a0:	2301      	movs	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80070a4:	2300      	movs	r3, #0
 80070a6:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80070a8:	4ba9      	ldr	r3, [pc, #676]	; (8007350 <takeWifiSSID+0x2d0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80070ae:	2101      	movs	r1, #1
 80070b0:	2002      	movs	r0, #2
 80070b2:	f7f9 ff1b 	bl	8000eec <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80070b6:	2108      	movs	r1, #8
 80070b8:	48a6      	ldr	r0, [pc, #664]	; (8007354 <takeWifiSSID+0x2d4>)
 80070ba:	f002 f951 	bl	8009360 <HAL_GPIO_ReadPin>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d13a      	bne.n	800713a <takeWifiSSID+0xba>
            lcd_cursor(0);
 80070c4:	2000      	movs	r0, #0
 80070c6:	f000 fe83 	bl	8007dd0 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80070ca:	48a3      	ldr	r0, [pc, #652]	; (8007358 <takeWifiSSID+0x2d8>)
 80070cc:	f7f9 f8aa 	bl	8000224 <strlen>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b14      	cmp	r3, #20
 80070d4:	d910      	bls.n	80070f8 <takeWifiSSID+0x78>
                lcd_clear();
 80070d6:	f000 fe49 	bl	8007d6c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80070da:	4aa0      	ldr	r2, [pc, #640]	; (800735c <takeWifiSSID+0x2dc>)
 80070dc:	2101      	movs	r1, #1
 80070de:	2001      	movs	r0, #1
 80070e0:	f000 fe18 	bl	8007d14 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80070e4:	4a9e      	ldr	r2, [pc, #632]	; (8007360 <takeWifiSSID+0x2e0>)
 80070e6:	2101      	movs	r1, #1
 80070e8:	2002      	movs	r0, #2
 80070ea:	f000 fe13 	bl	8007d14 <lcd_print>
                HAL_Delay(1250);
 80070ee:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80070f2:	f001 fb65 	bl	80087c0 <HAL_Delay>
                goto mainSSIDSection;
 80070f6:	e7c6      	b.n	8007086 <takeWifiSSID+0x6>
            } else {
            	memcpy(&eepromData[ssidStartPos], wifiSSIDInt, wifiCharacterLimit); //destination, source, size
 80070f8:	4b95      	ldr	r3, [pc, #596]	; (8007350 <takeWifiSSID+0x2d0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a99      	ldr	r2, [pc, #612]	; (8007364 <takeWifiSSID+0x2e4>)
 80070fe:	4413      	add	r3, r2
 8007100:	4a99      	ldr	r2, [pc, #612]	; (8007368 <takeWifiSSID+0x2e8>)
 8007102:	6811      	ldr	r1, [r2, #0]
 8007104:	6855      	ldr	r5, [r2, #4]
 8007106:	6894      	ldr	r4, [r2, #8]
 8007108:	68d0      	ldr	r0, [r2, #12]
 800710a:	6019      	str	r1, [r3, #0]
 800710c:	605d      	str	r5, [r3, #4]
 800710e:	609c      	str	r4, [r3, #8]
 8007110:	60d8      	str	r0, [r3, #12]
 8007112:	6911      	ldr	r1, [r2, #16]
 8007114:	6119      	str	r1, [r3, #16]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007116:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800711a:	9302      	str	r3, [sp, #8]
 800711c:	236e      	movs	r3, #110	; 0x6e
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	4b90      	ldr	r3, [pc, #576]	; (8007364 <takeWifiSSID+0x2e4>)
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	236e      	movs	r3, #110	; 0x6e
 8007126:	2200      	movs	r2, #0
 8007128:	21a0      	movs	r1, #160	; 0xa0
 800712a:	4890      	ldr	r0, [pc, #576]	; (800736c <takeWifiSSID+0x2ec>)
 800712c:	f002 fbd2 	bl	80098d4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007134:	f001 fb44 	bl	80087c0 <HAL_Delay>

            	break;
 8007138:	e13b      	b.n	80073b2 <takeWifiSSID+0x332>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800713a:	2101      	movs	r1, #1
 800713c:	4885      	ldr	r0, [pc, #532]	; (8007354 <takeWifiSSID+0x2d4>)
 800713e:	f002 f90f 	bl	8009360 <HAL_GPIO_ReadPin>
 8007142:	4603      	mov	r3, r0
 8007144:	2b01      	cmp	r3, #1
 8007146:	d14d      	bne.n	80071e4 <takeWifiSSID+0x164>
        	if(cursorPosition > 80) {
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b50      	cmp	r3, #80	; 0x50
 800714c:	dd01      	ble.n	8007152 <takeWifiSSID+0xd2>
        		cursorPosition = 1;
 800714e:	2301      	movs	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b10      	cmp	r3, #16
 8007156:	d13f      	bne.n	80071d8 <takeWifiSSID+0x158>
            	if(page == 1) {
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d109      	bne.n	8007172 <takeWifiSSID+0xf2>
            		cursorPosition = 1;
 800715e:	2301      	movs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
            		page++;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	3301      	adds	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007168:	2102      	movs	r1, #2
 800716a:	2002      	movs	r0, #2
 800716c:	f7f9 febe 	bl	8000eec <printTemplate>
 8007170:	e035      	b.n	80071de <takeWifiSSID+0x15e>
            	} else if(page == 2) {
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d109      	bne.n	800718c <takeWifiSSID+0x10c>
            		cursorPosition = 1;
 8007178:	2301      	movs	r3, #1
 800717a:	60fb      	str	r3, [r7, #12]
            		page++;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	3301      	adds	r3, #1
 8007180:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007182:	2103      	movs	r1, #3
 8007184:	2002      	movs	r0, #2
 8007186:	f7f9 feb1 	bl	8000eec <printTemplate>
 800718a:	e028      	b.n	80071de <takeWifiSSID+0x15e>
            	} else if(page == 3) {
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2b03      	cmp	r3, #3
 8007190:	d109      	bne.n	80071a6 <takeWifiSSID+0x126>
            		cursorPosition = 1;
 8007192:	2301      	movs	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]
            		page++;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	3301      	adds	r3, #1
 800719a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800719c:	2104      	movs	r1, #4
 800719e:	2002      	movs	r0, #2
 80071a0:	f7f9 fea4 	bl	8000eec <printTemplate>
 80071a4:	e01b      	b.n	80071de <takeWifiSSID+0x15e>
            	} else if(page == 4) {
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d109      	bne.n	80071c0 <takeWifiSSID+0x140>
            		cursorPosition = 1;
 80071ac:	2301      	movs	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
            		page++;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	3301      	adds	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80071b6:	2105      	movs	r1, #5
 80071b8:	2002      	movs	r0, #2
 80071ba:	f7f9 fe97 	bl	8000eec <printTemplate>
 80071be:	e00e      	b.n	80071de <takeWifiSSID+0x15e>
            	} else if(page == 5) {
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	d10b      	bne.n	80071de <takeWifiSSID+0x15e>
            		cursorPosition = 1;
 80071c6:	2301      	movs	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80071ce:	2101      	movs	r1, #1
 80071d0:	2002      	movs	r0, #2
 80071d2:	f7f9 fe8b 	bl	8000eec <printTemplate>
 80071d6:	e002      	b.n	80071de <takeWifiSSID+0x15e>
            	}
            } else {
            	cursorPosition++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3301      	adds	r3, #1
 80071dc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80071de:	2096      	movs	r0, #150	; 0x96
 80071e0:	f001 faee 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80071e4:	2108      	movs	r1, #8
 80071e6:	4862      	ldr	r0, [pc, #392]	; (8007370 <takeWifiSSID+0x2f0>)
 80071e8:	f002 f8ba 	bl	8009360 <HAL_GPIO_ReadPin>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d149      	bne.n	8007286 <takeWifiSSID+0x206>
        	if(cursorPosition < 1) {
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dc01      	bgt.n	80071fc <takeWifiSSID+0x17c>
        		cursorPosition = 80;
 80071f8:	2350      	movs	r3, #80	; 0x50
 80071fa:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d13b      	bne.n	800727a <takeWifiSSID+0x1fa>
            	if(page == 1) {
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d108      	bne.n	800721a <takeWifiSSID+0x19a>
            		cursorPosition = 16;
 8007208:	2310      	movs	r3, #16
 800720a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800720c:	2305      	movs	r3, #5
 800720e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007210:	2105      	movs	r1, #5
 8007212:	2002      	movs	r0, #2
 8007214:	f7f9 fe6a 	bl	8000eec <printTemplate>
 8007218:	e032      	b.n	8007280 <takeWifiSSID+0x200>
            	} else if(page == 2) {
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d108      	bne.n	8007232 <takeWifiSSID+0x1b2>
            		cursorPosition = 16;
 8007220:	2310      	movs	r3, #16
 8007222:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007224:	2301      	movs	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007228:	2101      	movs	r1, #1
 800722a:	2002      	movs	r0, #2
 800722c:	f7f9 fe5e 	bl	8000eec <printTemplate>
 8007230:	e026      	b.n	8007280 <takeWifiSSID+0x200>
            	} else if(page == 3) {
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b03      	cmp	r3, #3
 8007236:	d108      	bne.n	800724a <takeWifiSSID+0x1ca>
            		cursorPosition = 16;
 8007238:	2310      	movs	r3, #16
 800723a:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800723c:	2302      	movs	r3, #2
 800723e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007240:	2102      	movs	r1, #2
 8007242:	2002      	movs	r0, #2
 8007244:	f7f9 fe52 	bl	8000eec <printTemplate>
 8007248:	e01a      	b.n	8007280 <takeWifiSSID+0x200>
            	} else if(page == 4) {
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b04      	cmp	r3, #4
 800724e:	d108      	bne.n	8007262 <takeWifiSSID+0x1e2>
            		cursorPosition = 16;
 8007250:	2310      	movs	r3, #16
 8007252:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007254:	2303      	movs	r3, #3
 8007256:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007258:	2103      	movs	r1, #3
 800725a:	2002      	movs	r0, #2
 800725c:	f7f9 fe46 	bl	8000eec <printTemplate>
 8007260:	e00e      	b.n	8007280 <takeWifiSSID+0x200>
            	} else if(page == 5) {
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b05      	cmp	r3, #5
 8007266:	d10b      	bne.n	8007280 <takeWifiSSID+0x200>
            		cursorPosition = 16;
 8007268:	2310      	movs	r3, #16
 800726a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800726c:	2304      	movs	r3, #4
 800726e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007270:	2104      	movs	r1, #4
 8007272:	2002      	movs	r0, #2
 8007274:	f7f9 fe3a 	bl	8000eec <printTemplate>
 8007278:	e002      	b.n	8007280 <takeWifiSSID+0x200>
            	}
            } else {
            	cursorPosition--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3b01      	subs	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007280:	2096      	movs	r0, #150	; 0x96
 8007282:	f001 fa9d 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007286:	2102      	movs	r1, #2
 8007288:	4832      	ldr	r0, [pc, #200]	; (8007354 <takeWifiSSID+0x2d4>)
 800728a:	f002 f869 	bl	8009360 <HAL_GPIO_ReadPin>
 800728e:	4603      	mov	r3, r0
 8007290:	2b01      	cmp	r3, #1
 8007292:	d131      	bne.n	80072f8 <takeWifiSSID+0x278>
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b2d9      	uxtb	r1, r3
 800729c:	4a32      	ldr	r2, [pc, #200]	; (8007368 <takeWifiSSID+0x2e8>)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4413      	add	r3, r2
 80072a2:	460a      	mov	r2, r1
 80072a4:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b2d9      	uxtb	r1, r3
 80072ae:	4a2d      	ldr	r2, [pc, #180]	; (8007364 <takeWifiSSID+0x2e4>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	460a      	mov	r2, r1
 80072b6:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition - 1]);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	b2d9      	uxtb	r1, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3b01      	subs	r3, #1
 80072c0:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <takeWifiSSID+0x2f4>)
 80072c2:	5cd3      	ldrb	r3, [r2, r3]
 80072c4:	461a      	mov	r2, r3
 80072c6:	2001      	movs	r0, #1
 80072c8:	f000 fd39 	bl	8007d3e <lcd_print_char>

            writeLoc++;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	3301      	adds	r3, #1
 80072d0:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3301      	adds	r3, #1
 80072dc:	607b      	str	r3, [r7, #4]

            wifiSSIDInt[arrayPosition] = '\0';
 80072de:	4a22      	ldr	r2, [pc, #136]	; (8007368 <takeWifiSSID+0x2e8>)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4413      	add	r3, r2
 80072e4:	2200      	movs	r2, #0
 80072e6:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80072e8:	4a1e      	ldr	r2, [pc, #120]	; (8007364 <takeWifiSSID+0x2e4>)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4413      	add	r3, r2
 80072ee:	2200      	movs	r2, #0
 80072f0:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80072f2:	2096      	movs	r0, #150	; 0x96
 80072f4:	f001 fa64 	bl	80087c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072f8:	2104      	movs	r1, #4
 80072fa:	4816      	ldr	r0, [pc, #88]	; (8007354 <takeWifiSSID+0x2d4>)
 80072fc:	f002 f830 	bl	8009360 <HAL_GPIO_ReadPin>
 8007300:	4603      	mov	r3, r0
 8007302:	2b01      	cmp	r3, #1
 8007304:	d14e      	bne.n	80073a4 <takeWifiSSID+0x324>
        	if(strlen(wifiSSID) >= 1) {
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <takeWifiSSID+0x2d8>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d047      	beq.n	800739e <takeWifiSSID+0x31e>
        		wifiSSIDInt[arrayPosition] = '\0';
 800730e:	4a16      	ldr	r2, [pc, #88]	; (8007368 <takeWifiSSID+0x2e8>)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4413      	add	r3, r2
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 8007318:	4a12      	ldr	r2, [pc, #72]	; (8007364 <takeWifiSSID+0x2e4>)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2b07      	cmp	r3, #7
 8007326:	dd03      	ble.n	8007330 <takeWifiSSID+0x2b0>
        			writeLoc--;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3b01      	subs	r3, #1
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	e004      	b.n	800733a <takeWifiSSID+0x2ba>
        		} else if(writeLoc < 7) {
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b06      	cmp	r3, #6
 8007334:	dc01      	bgt.n	800733a <takeWifiSSID+0x2ba>
        			writeLoc = 7;
 8007336:	2307      	movs	r3, #7
 8007338:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd1b      	ble.n	8007378 <takeWifiSSID+0x2f8>
        			arrayPosition--;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3b01      	subs	r3, #1
 8007344:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3b01      	subs	r3, #1
 800734a:	607b      	str	r3, [r7, #4]
 800734c:	e01c      	b.n	8007388 <takeWifiSSID+0x308>
 800734e:	bf00      	nop
 8007350:	20000008 	.word	0x20000008
 8007354:	40010800 	.word	0x40010800
 8007358:	2000019c 	.word	0x2000019c
 800735c:	0800dcb4 	.word	0x0800dcb4
 8007360:	0800dcc8 	.word	0x0800dcc8
 8007364:	20000118 	.word	0x20000118
 8007368:	200001d0 	.word	0x200001d0
 800736c:	200003a8 	.word	0x200003a8
 8007370:	40011000 	.word	0x40011000
 8007374:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da04      	bge.n	8007388 <takeWifiSSID+0x308>
        			arrayPosition = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007382:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <takeWifiSSID+0x33c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	3306      	adds	r3, #6
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4619      	mov	r1, r3
 8007392:	2001      	movs	r0, #1
 8007394:	f000 fcf4 	bl	8007d80 <lcd_delete_char>
        		HAL_Delay(50);
 8007398:	2032      	movs	r0, #50	; 0x32
 800739a:	f001 fa11 	bl	80087c0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800739e:	2096      	movs	r0, #150	; 0x96
 80073a0:	f001 fa0e 	bl	80087c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	2002      	movs	r0, #2
 80073ac:	f000 fc93 	bl	8007cd6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073b0:	e681      	b.n	80070b6 <takeWifiSSID+0x36>
    }
}
 80073b2:	bf00      	nop
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bdb0      	pop	{r4, r5, r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000008 	.word	0x20000008

080073c0 <takeWifiPass>:

void takeWifiPass() {
 80073c0:	b5b0      	push	{r4, r5, r7, lr}
 80073c2:	b08a      	sub	sp, #40	; 0x28
 80073c4:	af04      	add	r7, sp, #16
	mainPASSSection:

    lcd_cursor(1);
 80073c6:	2001      	movs	r0, #1
 80073c8:	f000 fd02 	bl	8007dd0 <lcd_cursor>

    resetEEPROM4Wifi(3);
 80073cc:	2003      	movs	r0, #3
 80073ce:	f7f9 fa71 	bl	80008b4 <resetEEPROM4Wifi>
    HAL_Delay(100);
 80073d2:	2064      	movs	r0, #100	; 0x64
 80073d4:	f001 f9f4 	bl	80087c0 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80073d8:	2301      	movs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 80073dc:	2307      	movs	r3, #7
 80073de:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 80073e0:	2301      	movs	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 80073e4:	2300      	movs	r3, #0
 80073e6:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 80073e8:	4bad      	ldr	r3, [pc, #692]	; (80076a0 <takeWifiPass+0x2e0>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80073ee:	2101      	movs	r1, #1
 80073f0:	2003      	movs	r0, #3
 80073f2:	f7f9 fd7b 	bl	8000eec <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073f6:	2108      	movs	r1, #8
 80073f8:	48aa      	ldr	r0, [pc, #680]	; (80076a4 <takeWifiPass+0x2e4>)
 80073fa:	f001 ffb1 	bl	8009360 <HAL_GPIO_ReadPin>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b01      	cmp	r3, #1
 8007402:	d13a      	bne.n	800747a <takeWifiPass+0xba>
            lcd_cursor(0);
 8007404:	2000      	movs	r0, #0
 8007406:	f000 fce3 	bl	8007dd0 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800740a:	48a7      	ldr	r0, [pc, #668]	; (80076a8 <takeWifiPass+0x2e8>)
 800740c:	f7f8 ff0a 	bl	8000224 <strlen>
 8007410:	4603      	mov	r3, r0
 8007412:	2b14      	cmp	r3, #20
 8007414:	d910      	bls.n	8007438 <takeWifiPass+0x78>
                lcd_clear();
 8007416:	f000 fca9 	bl	8007d6c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800741a:	4aa4      	ldr	r2, [pc, #656]	; (80076ac <takeWifiPass+0x2ec>)
 800741c:	2101      	movs	r1, #1
 800741e:	2001      	movs	r0, #1
 8007420:	f000 fc78 	bl	8007d14 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8007424:	4aa2      	ldr	r2, [pc, #648]	; (80076b0 <takeWifiPass+0x2f0>)
 8007426:	2101      	movs	r1, #1
 8007428:	2002      	movs	r0, #2
 800742a:	f000 fc73 	bl	8007d14 <lcd_print>
                HAL_Delay(1200);
 800742e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007432:	f001 f9c5 	bl	80087c0 <HAL_Delay>
                goto mainPASSSection;
 8007436:	e7c6      	b.n	80073c6 <takeWifiPass+0x6>
            } else {
            	memcpy(&eepromData[passStartPos], wifiPassInt, wifiCharacterLimit); //destination, source, size
 8007438:	4b99      	ldr	r3, [pc, #612]	; (80076a0 <takeWifiPass+0x2e0>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a9d      	ldr	r2, [pc, #628]	; (80076b4 <takeWifiPass+0x2f4>)
 800743e:	4413      	add	r3, r2
 8007440:	4a9d      	ldr	r2, [pc, #628]	; (80076b8 <takeWifiPass+0x2f8>)
 8007442:	6811      	ldr	r1, [r2, #0]
 8007444:	6855      	ldr	r5, [r2, #4]
 8007446:	6894      	ldr	r4, [r2, #8]
 8007448:	68d0      	ldr	r0, [r2, #12]
 800744a:	6019      	str	r1, [r3, #0]
 800744c:	605d      	str	r5, [r3, #4]
 800744e:	609c      	str	r4, [r3, #8]
 8007450:	60d8      	str	r0, [r3, #12]
 8007452:	6911      	ldr	r1, [r2, #16]
 8007454:	6119      	str	r1, [r3, #16]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007456:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800745a:	9302      	str	r3, [sp, #8]
 800745c:	236e      	movs	r3, #110	; 0x6e
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	4b94      	ldr	r3, [pc, #592]	; (80076b4 <takeWifiPass+0x2f4>)
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	236e      	movs	r3, #110	; 0x6e
 8007466:	2200      	movs	r2, #0
 8007468:	21a0      	movs	r1, #160	; 0xa0
 800746a:	4894      	ldr	r0, [pc, #592]	; (80076bc <takeWifiPass+0x2fc>)
 800746c:	f002 fa32 	bl	80098d4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007474:	f001 f9a4 	bl	80087c0 <HAL_Delay>

            	break;
 8007478:	e124      	b.n	80076c4 <takeWifiPass+0x304>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800747a:	2101      	movs	r1, #1
 800747c:	4889      	ldr	r0, [pc, #548]	; (80076a4 <takeWifiPass+0x2e4>)
 800747e:	f001 ff6f 	bl	8009360 <HAL_GPIO_ReadPin>
 8007482:	4603      	mov	r3, r0
 8007484:	2b01      	cmp	r3, #1
 8007486:	d14d      	bne.n	8007524 <takeWifiPass+0x164>
        	if(cursorPosition > 80) {
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b50      	cmp	r3, #80	; 0x50
 800748c:	dd01      	ble.n	8007492 <takeWifiPass+0xd2>
        	    cursorPosition = 1;
 800748e:	2301      	movs	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b10      	cmp	r3, #16
 8007496:	d13f      	bne.n	8007518 <takeWifiPass+0x158>
            	if(page == 1) {
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d109      	bne.n	80074b2 <takeWifiPass+0xf2>
            		cursorPosition = 1;
 800749e:	2301      	movs	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]
            		page++;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	3301      	adds	r3, #1
 80074a6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80074a8:	2102      	movs	r1, #2
 80074aa:	2003      	movs	r0, #3
 80074ac:	f7f9 fd1e 	bl	8000eec <printTemplate>
 80074b0:	e035      	b.n	800751e <takeWifiPass+0x15e>
            	} else if(page == 2) {
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d109      	bne.n	80074cc <takeWifiPass+0x10c>
            		cursorPosition = 1;
 80074b8:	2301      	movs	r3, #1
 80074ba:	60fb      	str	r3, [r7, #12]
            		page++;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3301      	adds	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80074c2:	2103      	movs	r1, #3
 80074c4:	2003      	movs	r0, #3
 80074c6:	f7f9 fd11 	bl	8000eec <printTemplate>
 80074ca:	e028      	b.n	800751e <takeWifiPass+0x15e>
            	} else if(page == 3) {
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d109      	bne.n	80074e6 <takeWifiPass+0x126>
            		cursorPosition = 1;
 80074d2:	2301      	movs	r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]
            		page++;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	3301      	adds	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80074dc:	2104      	movs	r1, #4
 80074de:	2003      	movs	r0, #3
 80074e0:	f7f9 fd04 	bl	8000eec <printTemplate>
 80074e4:	e01b      	b.n	800751e <takeWifiPass+0x15e>
            	} else if(page == 4) {
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d109      	bne.n	8007500 <takeWifiPass+0x140>
            		cursorPosition = 1;
 80074ec:	2301      	movs	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]
            		page++;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	3301      	adds	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80074f6:	2105      	movs	r1, #5
 80074f8:	2003      	movs	r0, #3
 80074fa:	f7f9 fcf7 	bl	8000eec <printTemplate>
 80074fe:	e00e      	b.n	800751e <takeWifiPass+0x15e>
            	} else if(page == 5) {
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b05      	cmp	r3, #5
 8007504:	d10b      	bne.n	800751e <takeWifiPass+0x15e>
            		cursorPosition = 1;
 8007506:	2301      	movs	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800750a:	2301      	movs	r3, #1
 800750c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800750e:	2101      	movs	r1, #1
 8007510:	2003      	movs	r0, #3
 8007512:	f7f9 fceb 	bl	8000eec <printTemplate>
 8007516:	e002      	b.n	800751e <takeWifiPass+0x15e>
            	}
            } else {
            	cursorPosition++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3301      	adds	r3, #1
 800751c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800751e:	2096      	movs	r0, #150	; 0x96
 8007520:	f001 f94e 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007524:	2108      	movs	r1, #8
 8007526:	4866      	ldr	r0, [pc, #408]	; (80076c0 <takeWifiPass+0x300>)
 8007528:	f001 ff1a 	bl	8009360 <HAL_GPIO_ReadPin>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d149      	bne.n	80075c6 <takeWifiPass+0x206>
        	if(cursorPosition < 1) {
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	dc01      	bgt.n	800753c <takeWifiPass+0x17c>
        	    cursorPosition = 80;
 8007538:	2350      	movs	r3, #80	; 0x50
 800753a:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d13b      	bne.n	80075ba <takeWifiPass+0x1fa>
            	if(page == 1) {
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d108      	bne.n	800755a <takeWifiPass+0x19a>
            		cursorPosition = 16;
 8007548:	2310      	movs	r3, #16
 800754a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800754c:	2305      	movs	r3, #5
 800754e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007550:	2105      	movs	r1, #5
 8007552:	2003      	movs	r0, #3
 8007554:	f7f9 fcca 	bl	8000eec <printTemplate>
 8007558:	e032      	b.n	80075c0 <takeWifiPass+0x200>
            	} else if(page == 2) {
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d108      	bne.n	8007572 <takeWifiPass+0x1b2>
            		cursorPosition = 16;
 8007560:	2310      	movs	r3, #16
 8007562:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007564:	2301      	movs	r3, #1
 8007566:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007568:	2101      	movs	r1, #1
 800756a:	2003      	movs	r0, #3
 800756c:	f7f9 fcbe 	bl	8000eec <printTemplate>
 8007570:	e026      	b.n	80075c0 <takeWifiPass+0x200>
            	} else if(page == 3) {
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d108      	bne.n	800758a <takeWifiPass+0x1ca>
            		cursorPosition = 16;
 8007578:	2310      	movs	r3, #16
 800757a:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800757c:	2302      	movs	r3, #2
 800757e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007580:	2102      	movs	r1, #2
 8007582:	2003      	movs	r0, #3
 8007584:	f7f9 fcb2 	bl	8000eec <printTemplate>
 8007588:	e01a      	b.n	80075c0 <takeWifiPass+0x200>
            	} else if(page == 4) {
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b04      	cmp	r3, #4
 800758e:	d108      	bne.n	80075a2 <takeWifiPass+0x1e2>
            		cursorPosition = 16;
 8007590:	2310      	movs	r3, #16
 8007592:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007594:	2303      	movs	r3, #3
 8007596:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007598:	2103      	movs	r1, #3
 800759a:	2003      	movs	r0, #3
 800759c:	f7f9 fca6 	bl	8000eec <printTemplate>
 80075a0:	e00e      	b.n	80075c0 <takeWifiPass+0x200>
            	} else if(page == 5) {
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b05      	cmp	r3, #5
 80075a6:	d10b      	bne.n	80075c0 <takeWifiPass+0x200>
            		cursorPosition = 16;
 80075a8:	2310      	movs	r3, #16
 80075aa:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80075ac:	2304      	movs	r3, #4
 80075ae:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80075b0:	2104      	movs	r1, #4
 80075b2:	2003      	movs	r0, #3
 80075b4:	f7f9 fc9a 	bl	8000eec <printTemplate>
 80075b8:	e002      	b.n	80075c0 <takeWifiPass+0x200>
            	}
            } else {
            	cursorPosition--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b01      	subs	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80075c0:	2096      	movs	r0, #150	; 0x96
 80075c2:	f001 f8fd 	bl	80087c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80075c6:	2102      	movs	r1, #2
 80075c8:	4836      	ldr	r0, [pc, #216]	; (80076a4 <takeWifiPass+0x2e4>)
 80075ca:	f001 fec9 	bl	8009360 <HAL_GPIO_ReadPin>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d131      	bne.n	8007638 <takeWifiPass+0x278>
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b2d9      	uxtb	r1, r3
 80075dc:	4a36      	ldr	r2, [pc, #216]	; (80076b8 <takeWifiPass+0x2f8>)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	4413      	add	r3, r2
 80075e2:	460a      	mov	r2, r1
 80075e4:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b2d9      	uxtb	r1, r3
 80075ee:	4a31      	ldr	r2, [pc, #196]	; (80076b4 <takeWifiPass+0x2f4>)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	460a      	mov	r2, r1
 80075f6:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	b2d9      	uxtb	r1, r3
 80075fc:	4a2a      	ldr	r2, [pc, #168]	; (80076a8 <takeWifiPass+0x2e8>)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4413      	add	r3, r2
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	2001      	movs	r0, #1
 8007608:	f000 fb99 	bl	8007d3e <lcd_print_char>

            writeLoc++;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	613b      	str	r3, [r7, #16]
            arrayPos++;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	3301      	adds	r3, #1
 8007616:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3301      	adds	r3, #1
 800761c:	607b      	str	r3, [r7, #4]

            wifiPassInt[arrayPos] = '\0';
 800761e:	4a26      	ldr	r2, [pc, #152]	; (80076b8 <takeWifiPass+0x2f8>)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4413      	add	r3, r2
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 8007628:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <takeWifiPass+0x2f4>)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	2200      	movs	r2, #0
 8007630:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007632:	2096      	movs	r0, #150	; 0x96
 8007634:	f001 f8c4 	bl	80087c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007638:	2104      	movs	r1, #4
 800763a:	481a      	ldr	r0, [pc, #104]	; (80076a4 <takeWifiPass+0x2e4>)
 800763c:	f001 fe90 	bl	8009360 <HAL_GPIO_ReadPin>
 8007640:	4603      	mov	r3, r0
 8007642:	2b01      	cmp	r3, #1
 8007644:	d124      	bne.n	8007690 <takeWifiPass+0x2d0>
            if(strlen(wifiPass) >= 1) {
 8007646:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <takeWifiPass+0x2e8>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01d      	beq.n	800768a <takeWifiPass+0x2ca>
            	wifiPassInt[arrayPos] = '\0';
 800764e:	4a1a      	ldr	r2, [pc, #104]	; (80076b8 <takeWifiPass+0x2f8>)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4413      	add	r3, r2
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 8007658:	4a16      	ldr	r2, [pc, #88]	; (80076b4 <takeWifiPass+0x2f4>)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	2200      	movs	r2, #0
 8007660:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	3b01      	subs	r3, #1
 8007666:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3b01      	subs	r3, #1
 800766c:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3b01      	subs	r3, #1
 8007672:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	3306      	adds	r3, #6
 800767a:	b2db      	uxtb	r3, r3
 800767c:	4619      	mov	r1, r3
 800767e:	2001      	movs	r0, #1
 8007680:	f000 fb7e 	bl	8007d80 <lcd_delete_char>
            	HAL_Delay(50);
 8007684:	2032      	movs	r0, #50	; 0x32
 8007686:	f001 f89b 	bl	80087c0 <HAL_Delay>
            }

            HAL_Delay(150);
 800768a:	2096      	movs	r0, #150	; 0x96
 800768c:	f001 f898 	bl	80087c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	4619      	mov	r1, r3
 8007696:	2002      	movs	r0, #2
 8007698:	f000 fb1d 	bl	8007cd6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800769c:	e6ab      	b.n	80073f6 <takeWifiPass+0x36>
 800769e:	bf00      	nop
 80076a0:	2000000c 	.word	0x2000000c
 80076a4:	40010800 	.word	0x40010800
 80076a8:	200001b0 	.word	0x200001b0
 80076ac:	0800dcb4 	.word	0x0800dcb4
 80076b0:	0800dcdc 	.word	0x0800dcdc
 80076b4:	20000118 	.word	0x20000118
 80076b8:	200001e4 	.word	0x200001e4
 80076bc:	200003a8 	.word	0x200003a8
 80076c0:	40011000 	.word	0x40011000
    }
}
 80076c4:	bf00      	nop
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bdb0      	pop	{r4, r5, r7, pc}

080076cc <mergeData>:

char* mergeData() {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b09c      	sub	sp, #112	; 0x70
 80076d0:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80076d2:	2300      	movs	r3, #0
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076da:	2228      	movs	r2, #40	; 0x28
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f004 ff91 	bl	800c606 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80076e4:	4b67      	ldr	r3, [pc, #412]	; (8007884 <mergeData+0x1b8>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	713b      	strb	r3, [r7, #4]
 80076ea:	4b67      	ldr	r3, [pc, #412]	; (8007888 <mergeData+0x1bc>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	717b      	strb	r3, [r7, #5]
 80076f0:	4b66      	ldr	r3, [pc, #408]	; (800788c <mergeData+0x1c0>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	71bb      	strb	r3, [r7, #6]
 80076f6:	4b66      	ldr	r3, [pc, #408]	; (8007890 <mergeData+0x1c4>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	71fb      	strb	r3, [r7, #7]
 80076fc:	4b65      	ldr	r3, [pc, #404]	; (8007894 <mergeData+0x1c8>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	723b      	strb	r3, [r7, #8]
 8007702:	4b65      	ldr	r3, [pc, #404]	; (8007898 <mergeData+0x1cc>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	727b      	strb	r3, [r7, #9]
 8007708:	4b64      	ldr	r3, [pc, #400]	; (800789c <mergeData+0x1d0>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	72bb      	strb	r3, [r7, #10]
 800770e:	4b64      	ldr	r3, [pc, #400]	; (80078a0 <mergeData+0x1d4>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	72fb      	strb	r3, [r7, #11]
 8007714:	4b63      	ldr	r3, [pc, #396]	; (80078a4 <mergeData+0x1d8>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	733b      	strb	r3, [r7, #12]
 800771a:	4b63      	ldr	r3, [pc, #396]	; (80078a8 <mergeData+0x1dc>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	737b      	strb	r3, [r7, #13]
 8007720:	4b62      	ldr	r3, [pc, #392]	; (80078ac <mergeData+0x1e0>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	73bb      	strb	r3, [r7, #14]
 8007726:	4b62      	ldr	r3, [pc, #392]	; (80078b0 <mergeData+0x1e4>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	4b61      	ldr	r3, [pc, #388]	; (80078b4 <mergeData+0x1e8>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	743b      	strb	r3, [r7, #16]
 8007732:	4b61      	ldr	r3, [pc, #388]	; (80078b8 <mergeData+0x1ec>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	747b      	strb	r3, [r7, #17]
 8007738:	4b60      	ldr	r3, [pc, #384]	; (80078bc <mergeData+0x1f0>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	74bb      	strb	r3, [r7, #18]
 800773e:	4b60      	ldr	r3, [pc, #384]	; (80078c0 <mergeData+0x1f4>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	74fb      	strb	r3, [r7, #19]
 8007744:	4b5f      	ldr	r3, [pc, #380]	; (80078c4 <mergeData+0x1f8>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	753b      	strb	r3, [r7, #20]
 800774a:	4b5f      	ldr	r3, [pc, #380]	; (80078c8 <mergeData+0x1fc>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	757b      	strb	r3, [r7, #21]
 8007750:	4b5e      	ldr	r3, [pc, #376]	; (80078cc <mergeData+0x200>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	75bb      	strb	r3, [r7, #22]
 8007756:	4b5e      	ldr	r3, [pc, #376]	; (80078d0 <mergeData+0x204>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	75fb      	strb	r3, [r7, #23]
 800775c:	4b5d      	ldr	r3, [pc, #372]	; (80078d4 <mergeData+0x208>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	763b      	strb	r3, [r7, #24]
 8007762:	4b5d      	ldr	r3, [pc, #372]	; (80078d8 <mergeData+0x20c>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	767b      	strb	r3, [r7, #25]
 8007768:	4b5c      	ldr	r3, [pc, #368]	; (80078dc <mergeData+0x210>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	76bb      	strb	r3, [r7, #26]
 800776e:	4b5c      	ldr	r3, [pc, #368]	; (80078e0 <mergeData+0x214>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	76fb      	strb	r3, [r7, #27]
 8007774:	4b5b      	ldr	r3, [pc, #364]	; (80078e4 <mergeData+0x218>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	773b      	strb	r3, [r7, #28]
 800777a:	4b5b      	ldr	r3, [pc, #364]	; (80078e8 <mergeData+0x21c>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	777b      	strb	r3, [r7, #29]
 8007780:	4b5a      	ldr	r3, [pc, #360]	; (80078ec <mergeData+0x220>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	77bb      	strb	r3, [r7, #30]
 8007786:	4b5a      	ldr	r3, [pc, #360]	; (80078f0 <mergeData+0x224>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	77fb      	strb	r3, [r7, #31]
 800778c:	4b59      	ldr	r3, [pc, #356]	; (80078f4 <mergeData+0x228>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f887 3020 	strb.w	r3, [r7, #32]
 8007794:	4b58      	ldr	r3, [pc, #352]	; (80078f8 <mergeData+0x22c>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800779c:	4b57      	ldr	r3, [pc, #348]	; (80078fc <mergeData+0x230>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077a4:	4b56      	ldr	r3, [pc, #344]	; (8007900 <mergeData+0x234>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ac:	4b55      	ldr	r3, [pc, #340]	; (8007904 <mergeData+0x238>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80077b4:	4b54      	ldr	r3, [pc, #336]	; (8007908 <mergeData+0x23c>)
 80077b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80077ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80077be:	4b52      	ldr	r3, [pc, #328]	; (8007908 <mergeData+0x23c>)
 80077c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80077c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80077c8:	4b4f      	ldr	r3, [pc, #316]	; (8007908 <mergeData+0x23c>)
 80077ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80077ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80077d2:	4b4d      	ldr	r3, [pc, #308]	; (8007908 <mergeData+0x23c>)
 80077d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80077d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80077dc:	4b4a      	ldr	r3, [pc, #296]	; (8007908 <mergeData+0x23c>)
 80077de:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80077e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80077e6:	4b48      	ldr	r3, [pc, #288]	; (8007908 <mergeData+0x23c>)
 80077e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80077ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80077f0:	4b45      	ldr	r3, [pc, #276]	; (8007908 <mergeData+0x23c>)
 80077f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80077fa:	4b43      	ldr	r3, [pc, #268]	; (8007908 <mergeData+0x23c>)
 80077fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007800:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007804:	4b40      	ldr	r3, [pc, #256]	; (8007908 <mergeData+0x23c>)
 8007806:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800780a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800780e:	4b3e      	ldr	r3, [pc, #248]	; (8007908 <mergeData+0x23c>)
 8007810:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007814:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007818:	2306      	movs	r3, #6
 800781a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800781e:	2300      	movs	r3, #0
 8007820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007822:	e015      	b.n	8007850 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007824:	1d3a      	adds	r2, r7, #4
 8007826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007828:	4413      	add	r3, r2
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007832:	4936      	ldr	r1, [pc, #216]	; (800790c <mergeData+0x240>)
 8007834:	4618      	mov	r0, r3
 8007836:	f004 fe75 	bl	800c524 <siprintf>
	    strcat(combinedString, temp);
 800783a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800783e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007842:	4611      	mov	r1, r2
 8007844:	4618      	mov	r0, r3
 8007846:	f004 fecf 	bl	800c5e8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800784a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800784c:	3301      	adds	r3, #1
 800784e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007852:	2b2b      	cmp	r3, #43	; 0x2b
 8007854:	d9e6      	bls.n	8007824 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007856:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800785a:	4618      	mov	r0, r3
 800785c:	f7f8 fce2 	bl	8000224 <strlen>
 8007860:	4603      	mov	r3, r0
 8007862:	3301      	adds	r3, #1
 8007864:	4618      	mov	r0, r3
 8007866:	f004 fda9 	bl	800c3bc <malloc>
 800786a:	4603      	mov	r3, r0
 800786c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800786e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007872:	4619      	mov	r1, r3
 8007874:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007876:	f004 ff0b 	bl	800c690 <strcpy>
	return result;
 800787a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800787c:	4618      	mov	r0, r3
 800787e:	3770      	adds	r7, #112	; 0x70
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	2000022f 	.word	0x2000022f
 8007888:	20000221 	.word	0x20000221
 800788c:	20000224 	.word	0x20000224
 8007890:	20000225 	.word	0x20000225
 8007894:	20000226 	.word	0x20000226
 8007898:	2000022d 	.word	0x2000022d
 800789c:	20000227 	.word	0x20000227
 80078a0:	20000228 	.word	0x20000228
 80078a4:	2000022c 	.word	0x2000022c
 80078a8:	20000229 	.word	0x20000229
 80078ac:	20000239 	.word	0x20000239
 80078b0:	2000022a 	.word	0x2000022a
 80078b4:	2000023a 	.word	0x2000023a
 80078b8:	2000022b 	.word	0x2000022b
 80078bc:	2000023b 	.word	0x2000023b
 80078c0:	2000022e 	.word	0x2000022e
 80078c4:	20000230 	.word	0x20000230
 80078c8:	20000231 	.word	0x20000231
 80078cc:	20000232 	.word	0x20000232
 80078d0:	20000233 	.word	0x20000233
 80078d4:	20000234 	.word	0x20000234
 80078d8:	20000235 	.word	0x20000235
 80078dc:	20000236 	.word	0x20000236
 80078e0:	20000237 	.word	0x20000237
 80078e4:	20000238 	.word	0x20000238
 80078e8:	2000023c 	.word	0x2000023c
 80078ec:	2000023e 	.word	0x2000023e
 80078f0:	2000021d 	.word	0x2000021d
 80078f4:	2000021e 	.word	0x2000021e
 80078f8:	20000000 	.word	0x20000000
 80078fc:	20000001 	.word	0x20000001
 8007900:	2000021f 	.word	0x2000021f
 8007904:	20000241 	.word	0x20000241
 8007908:	20000118 	.word	0x20000118
 800790c:	0800dcf0 	.word	0x0800dcf0

08007910 <convertAndSendData>:

void convertAndSendData() {
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 8007916:	4b16      	ldr	r3, [pc, #88]	; (8007970 <convertAndSendData+0x60>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 800791e:	4a15      	ldr	r2, [pc, #84]	; (8007974 <convertAndSendData+0x64>)
 8007920:	2101      	movs	r1, #1
 8007922:	2001      	movs	r0, #1
 8007924:	f000 f9f6 	bl	8007d14 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007928:	4a13      	ldr	r2, [pc, #76]	; (8007978 <convertAndSendData+0x68>)
 800792a:	2101      	movs	r1, #1
 800792c:	2002      	movs	r0, #2
 800792e:	f000 f9f1 	bl	8007d14 <lcd_print>
 8007932:	e009      	b.n	8007948 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007934:	4a11      	ldr	r2, [pc, #68]	; (800797c <convertAndSendData+0x6c>)
 8007936:	2101      	movs	r1, #1
 8007938:	2001      	movs	r0, #1
 800793a:	f000 f9eb 	bl	8007d14 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 800793e:	4a10      	ldr	r2, [pc, #64]	; (8007980 <convertAndSendData+0x70>)
 8007940:	2101      	movs	r1, #1
 8007942:	2002      	movs	r0, #2
 8007944:	f000 f9e6 	bl	8007d14 <lcd_print>
	}

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8007948:	f7ff fec0 	bl	80076cc <mergeData>
 800794c:	4603      	mov	r3, r0
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <convertAndSendData+0x74>)
 8007952:	4a0d      	ldr	r2, [pc, #52]	; (8007988 <convertAndSendData+0x78>)
 8007954:	490d      	ldr	r1, [pc, #52]	; (800798c <convertAndSendData+0x7c>)
 8007956:	480e      	ldr	r0, [pc, #56]	; (8007990 <convertAndSendData+0x80>)
 8007958:	f7f9 f82c 	bl	80009b4 <sendMachineData>

	HAL_Delay(500);
 800795c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007960:	f000 ff2e 	bl	80087c0 <HAL_Delay>
	lcd_clear();
 8007964:	f000 fa02 	bl	8007d6c <lcd_clear>
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000241 	.word	0x20000241
 8007974:	0800dcf4 	.word	0x0800dcf4
 8007978:	0800dd08 	.word	0x0800dd08
 800797c:	0800dd1c 	.word	0x0800dd1c
 8007980:	0800dd30 	.word	0x0800dd30
 8007984:	200001b0 	.word	0x200001b0
 8007988:	2000019c 	.word	0x2000019c
 800798c:	20000190 	.word	0x20000190
 8007990:	20000444 	.word	0x20000444

08007994 <iotSetup>:

void iotSetup() {
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007998:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <iotSetup+0x40>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d017      	beq.n	80079d0 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 80079a0:	480d      	ldr	r0, [pc, #52]	; (80079d8 <iotSetup+0x44>)
 80079a2:	f7f8 fc3f 	bl	8000224 <strlen>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b0c      	cmp	r3, #12
 80079aa:	d001      	beq.n	80079b0 <iotSetup+0x1c>
			takeMachineID();
 80079ac:	f7ff f9ce 	bl	8006d4c <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 80079b0:	480a      	ldr	r0, [pc, #40]	; (80079dc <iotSetup+0x48>)
 80079b2:	f7f8 fc37 	bl	8000224 <strlen>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d801      	bhi.n	80079c0 <iotSetup+0x2c>
			takeWifiSSID();
 80079bc:	f7ff fb60 	bl	8007080 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 80079c0:	4807      	ldr	r0, [pc, #28]	; (80079e0 <iotSetup+0x4c>)
 80079c2:	f7f8 fc2f 	bl	8000224 <strlen>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d801      	bhi.n	80079d0 <iotSetup+0x3c>
			takeWifiPass();
 80079cc:	f7ff fcf8 	bl	80073c0 <takeWifiPass>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
	HAL_Delay(500);
	convertAndSendData();*/
}
 80079d0:	bf00      	nop
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	2000023f 	.word	0x2000023f
 80079d8:	20000190 	.word	0x20000190
 80079dc:	2000019c 	.word	0x2000019c
 80079e0:	200001b0 	.word	0x200001b0

080079e4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	4603      	mov	r3, r0
 80079ec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	f023 030f 	bic.w	r3, r3, #15
 80079f4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80079fc:	7b7b      	ldrb	r3, [r7, #13]
 80079fe:	f043 030c 	orr.w	r3, r3, #12
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	f043 0308 	orr.w	r3, r3, #8
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a10:	7b3b      	ldrb	r3, [r7, #12]
 8007a12:	f043 030c 	orr.w	r3, r3, #12
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007a1a:	7b3b      	ldrb	r3, [r7, #12]
 8007a1c:	f043 0308 	orr.w	r3, r3, #8
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a24:	bf00      	nop
 8007a26:	4825      	ldr	r0, [pc, #148]	; (8007abc <lcd_send_cmd+0xd8>)
 8007a28:	f002 fac3 	bl	8009fb2 <HAL_I2C_GetError>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d0f9      	beq.n	8007a26 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a32:	bf00      	nop
 8007a34:	4821      	ldr	r0, [pc, #132]	; (8007abc <lcd_send_cmd+0xd8>)
 8007a36:	f002 faaf 	bl	8009f98 <HAL_I2C_GetState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d1f9      	bne.n	8007a34 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a40:	4b1f      	ldr	r3, [pc, #124]	; (8007ac0 <lcd_send_cmd+0xdc>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d116      	bne.n	8007a76 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
 8007a4c:	e00f      	b.n	8007a6e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	3310      	adds	r3, #16
 8007a52:	443b      	add	r3, r7
 8007a54:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	f022 0208 	bic.w	r2, r2, #8
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	3310      	adds	r3, #16
 8007a62:	443b      	add	r3, r7
 8007a64:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d9ec      	bls.n	8007a4e <lcd_send_cmd+0x6a>
 8007a74:	e015      	b.n	8007aa2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007a76:	2300      	movs	r3, #0
 8007a78:	73bb      	strb	r3, [r7, #14]
 8007a7a:	e00f      	b.n	8007a9c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	3310      	adds	r3, #16
 8007a80:	443b      	add	r3, r7
 8007a82:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	f042 0208 	orr.w	r2, r2, #8
 8007a8c:	b2d2      	uxtb	r2, r2
 8007a8e:	3310      	adds	r3, #16
 8007a90:	443b      	add	r3, r7
 8007a92:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	73bb      	strb	r3, [r7, #14]
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d9ec      	bls.n	8007a7c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007aa2:	f107 0208 	add.w	r2, r7, #8
 8007aa6:	2364      	movs	r3, #100	; 0x64
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	2304      	movs	r3, #4
 8007aac:	214e      	movs	r1, #78	; 0x4e
 8007aae:	4803      	ldr	r0, [pc, #12]	; (8007abc <lcd_send_cmd+0xd8>)
 8007ab0:	f001 fe12 	bl	80096d8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	200003a8 	.word	0x200003a8
 8007ac0:	2000037e 	.word	0x2000037e

08007ac4 <lcd_send_data>:

void lcd_send_data (char data) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	4603      	mov	r3, r0
 8007acc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	f023 030f 	bic.w	r3, r3, #15
 8007ad4:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007adc:	7b7b      	ldrb	r3, [r7, #13]
 8007ade:	f043 030d 	orr.w	r3, r3, #13
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
 8007ae8:	f043 0309 	orr.w	r3, r3, #9
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007af0:	7b3b      	ldrb	r3, [r7, #12]
 8007af2:	f043 030d 	orr.w	r3, r3, #13
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007afa:	7b3b      	ldrb	r3, [r7, #12]
 8007afc:	f043 0309 	orr.w	r3, r3, #9
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b04:	bf00      	nop
 8007b06:	4825      	ldr	r0, [pc, #148]	; (8007b9c <lcd_send_data+0xd8>)
 8007b08:	f002 fa53 	bl	8009fb2 <HAL_I2C_GetError>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d0f9      	beq.n	8007b06 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b12:	bf00      	nop
 8007b14:	4821      	ldr	r0, [pc, #132]	; (8007b9c <lcd_send_data+0xd8>)
 8007b16:	f002 fa3f 	bl	8009f98 <HAL_I2C_GetState>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d1f9      	bne.n	8007b14 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b20:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <lcd_send_data+0xdc>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d116      	bne.n	8007b56 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]
 8007b2c:	e00f      	b.n	8007b4e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	3310      	adds	r3, #16
 8007b32:	443b      	add	r3, r7
 8007b34:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	f022 0208 	bic.w	r2, r2, #8
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	3310      	adds	r3, #16
 8007b42:	443b      	add	r3, r7
 8007b44:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	73fb      	strb	r3, [r7, #15]
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d9ec      	bls.n	8007b2e <lcd_send_data+0x6a>
 8007b54:	e015      	b.n	8007b82 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b56:	2300      	movs	r3, #0
 8007b58:	73bb      	strb	r3, [r7, #14]
 8007b5a:	e00f      	b.n	8007b7c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	3310      	adds	r3, #16
 8007b60:	443b      	add	r3, r7
 8007b62:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	f042 0208 	orr.w	r2, r2, #8
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	3310      	adds	r3, #16
 8007b70:	443b      	add	r3, r7
 8007b72:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	73bb      	strb	r3, [r7, #14]
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d9ec      	bls.n	8007b5c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b82:	f107 0208 	add.w	r2, r7, #8
 8007b86:	2364      	movs	r3, #100	; 0x64
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	2304      	movs	r3, #4
 8007b8c:	214e      	movs	r1, #78	; 0x4e
 8007b8e:	4803      	ldr	r0, [pc, #12]	; (8007b9c <lcd_send_data+0xd8>)
 8007b90:	f001 fda2 	bl	80096d8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	200003a8 	.word	0x200003a8
 8007ba0:	2000037e 	.word	0x2000037e

08007ba4 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007bac:	e006      	b.n	8007bbc <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff ff84 	bl	8007ac4 <lcd_send_data>
	while (*str) {
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1f4      	bne.n	8007bae <lcd_send_string+0xa>
	}
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	f023 030f 	bic.w	r3, r3, #15
 8007be0:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007be8:	7b7b      	ldrb	r3, [r7, #13]
 8007bea:	f043 030d 	orr.w	r3, r3, #13
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007bf2:	7b7b      	ldrb	r3, [r7, #13]
 8007bf4:	f043 0309 	orr.w	r3, r3, #9
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007bfc:	7b3b      	ldrb	r3, [r7, #12]
 8007bfe:	f043 030d 	orr.w	r3, r3, #13
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c06:	7b3b      	ldrb	r3, [r7, #12]
 8007c08:	f043 0309 	orr.w	r3, r3, #9
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c10:	bf00      	nop
 8007c12:	4825      	ldr	r0, [pc, #148]	; (8007ca8 <lcd_send_char+0xd8>)
 8007c14:	f002 f9cd 	bl	8009fb2 <HAL_I2C_GetError>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	d0f9      	beq.n	8007c12 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c1e:	bf00      	nop
 8007c20:	4821      	ldr	r0, [pc, #132]	; (8007ca8 <lcd_send_char+0xd8>)
 8007c22:	f002 f9b9 	bl	8009f98 <HAL_I2C_GetState>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d1f9      	bne.n	8007c20 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007c2c:	4b1f      	ldr	r3, [pc, #124]	; (8007cac <lcd_send_char+0xdc>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d116      	bne.n	8007c62 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
 8007c38:	e00f      	b.n	8007c5a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	3310      	adds	r3, #16
 8007c3e:	443b      	add	r3, r7
 8007c40:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	f022 0208 	bic.w	r2, r2, #8
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	3310      	adds	r3, #16
 8007c4e:	443b      	add	r3, r7
 8007c50:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	3301      	adds	r3, #1
 8007c58:	73fb      	strb	r3, [r7, #15]
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d9ec      	bls.n	8007c3a <lcd_send_char+0x6a>
 8007c60:	e015      	b.n	8007c8e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007c62:	2300      	movs	r3, #0
 8007c64:	73bb      	strb	r3, [r7, #14]
 8007c66:	e00f      	b.n	8007c88 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	3310      	adds	r3, #16
 8007c6c:	443b      	add	r3, r7
 8007c6e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	f042 0208 	orr.w	r2, r2, #8
 8007c78:	b2d2      	uxtb	r2, r2
 8007c7a:	3310      	adds	r3, #16
 8007c7c:	443b      	add	r3, r7
 8007c7e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	3301      	adds	r3, #1
 8007c86:	73bb      	strb	r3, [r7, #14]
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d9ec      	bls.n	8007c68 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007c8e:	f107 0208 	add.w	r2, r7, #8
 8007c92:	2364      	movs	r3, #100	; 0x64
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	2304      	movs	r3, #4
 8007c98:	214e      	movs	r1, #78	; 0x4e
 8007c9a:	4803      	ldr	r0, [pc, #12]	; (8007ca8 <lcd_send_char+0xd8>)
 8007c9c:	f001 fd1c 	bl	80096d8 <HAL_I2C_Master_Transmit>
}
 8007ca0:	bf00      	nop
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200003a8 	.word	0x200003a8
 8007cac:	2000037e 	.word	0x2000037e

08007cb0 <lcd_init>:

void lcd_init (void) {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007cb4:	2002      	movs	r0, #2
 8007cb6:	f7ff fe95 	bl	80079e4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007cba:	2028      	movs	r0, #40	; 0x28
 8007cbc:	f7ff fe92 	bl	80079e4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007cc0:	200c      	movs	r0, #12
 8007cc2:	f7ff fe8f 	bl	80079e4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007cc6:	2080      	movs	r0, #128	; 0x80
 8007cc8:	f7ff fe8c 	bl	80079e4 <lcd_send_cmd>
	lcd_backlight(1);
 8007ccc:	2001      	movs	r0, #1
 8007cce:	f000 f86d 	bl	8007dac <lcd_backlight>
}
 8007cd2:	bf00      	nop
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	4603      	mov	r3, r0
 8007cde:	460a      	mov	r2, r1
 8007ce0:	71fb      	strb	r3, [r7, #7]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d106      	bne.n	8007cfa <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007cec:	79bb      	ldrb	r3, [r7, #6]
 8007cee:	337f      	adds	r3, #127	; 0x7f
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff fe76 	bl	80079e4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007cf8:	e008      	b.n	8007d0c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d105      	bne.n	8007d0c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d00:	79bb      	ldrb	r3, [r7, #6]
 8007d02:	3b41      	subs	r3, #65	; 0x41
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff fe6c 	bl	80079e4 <lcd_send_cmd>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	603a      	str	r2, [r7, #0]
 8007d1e:	71fb      	strb	r3, [r7, #7]
 8007d20:	460b      	mov	r3, r1
 8007d22:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007d24:	79ba      	ldrb	r2, [r7, #6]
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff ffd3 	bl	8007cd6 <lcd_gotoxy>
	lcd_send_string(str);
 8007d30:	6838      	ldr	r0, [r7, #0]
 8007d32:	f7ff ff37 	bl	8007ba4 <lcd_send_string>
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	4603      	mov	r3, r0
 8007d46:	71fb      	strb	r3, [r7, #7]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	71bb      	strb	r3, [r7, #6]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007d50:	79ba      	ldrb	r2, [r7, #6]
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff ffbd 	bl	8007cd6 <lcd_gotoxy>
    lcd_send_char(ch);
 8007d5c:	797b      	ldrb	r3, [r7, #5]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff ff36 	bl	8007bd0 <lcd_send_char>
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <lcd_clear>:

void lcd_clear(void) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007d70:	2001      	movs	r0, #1
 8007d72:	f7ff fe37 	bl	80079e4 <lcd_send_cmd>
    HAL_Delay(2);
 8007d76:	2002      	movs	r0, #2
 8007d78:	f000 fd22 	bl	80087c0 <HAL_Delay>
}
 8007d7c:	bf00      	nop
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	460a      	mov	r2, r1
 8007d8a:	71fb      	strb	r3, [r7, #7]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007d90:	79ba      	ldrb	r2, [r7, #6]
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff ff9d 	bl	8007cd6 <lcd_gotoxy>

    lcd_send_char(' ');
 8007d9c:	2020      	movs	r0, #32
 8007d9e:	f7ff ff17 	bl	8007bd0 <lcd_send_char>
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007db6:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <lcd_backlight+0x20>)
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f7ff fe11 	bl	80079e4 <lcd_send_cmd>
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	2000037e 	.word	0x2000037e

08007dd0 <lcd_cursor>:

void lcd_cursor(int state) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d106      	bne.n	8007dec <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007dde:	200e      	movs	r0, #14
 8007de0:	f7ff fe00 	bl	80079e4 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007de4:	200f      	movs	r0, #15
 8007de6:	f7ff fdfd 	bl	80079e4 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007dea:	e002      	b.n	8007df2 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007dec:	200c      	movs	r0, #12
 8007dee:	f7ff fdf9 	bl	80079e4 <lcd_send_cmd>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e04:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	4a03      	ldr	r2, [pc, #12]	; (8007e18 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e0c:	6013      	str	r3, [r2, #0]
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr
 8007e18:	200001fc 	.word	0x200001fc

08007e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e20:	f000 fc6c 	bl	80086fc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007e24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e28:	f000 fcca 	bl	80087c0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e2c:	f000 f89c 	bl	8007f68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e30:	f000 f9be 	bl	80081b0 <MX_GPIO_Init>
  MX_CAN_Init();
 8007e34:	f000 f8de 	bl	8007ff4 <MX_CAN_Init>
  MX_I2C1_Init();
 8007e38:	f000 f910 	bl	800805c <MX_I2C1_Init>
  MX_TIM1_Init();
 8007e3c:	f000 f93c 	bl	80080b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007e40:	f000 f98c 	bl	800815c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007e44:	2201      	movs	r2, #1
 8007e46:	2140      	movs	r1, #64	; 0x40
 8007e48:	483e      	ldr	r0, [pc, #248]	; (8007f44 <main+0x128>)
 8007e4a:	f001 faa0 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007e4e:	2201      	movs	r2, #1
 8007e50:	2180      	movs	r1, #128	; 0x80
 8007e52:	483c      	ldr	r0, [pc, #240]	; (8007f44 <main+0x128>)
 8007e54:	f001 fa9b 	bl	800938e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007e58:	200a      	movs	r0, #10
 8007e5a:	f000 fcb1 	bl	80087c0 <HAL_Delay>
  lcd_init();
 8007e5e:	f7ff ff27 	bl	8007cb0 <lcd_init>
  HAL_Delay(10);
 8007e62:	200a      	movs	r0, #10
 8007e64:	f000 fcac 	bl	80087c0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e68:	4837      	ldr	r0, [pc, #220]	; (8007f48 <main+0x12c>)
 8007e6a:	f003 f943 	bl	800b0f4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e6e:	bf00      	nop
 8007e70:	4836      	ldr	r0, [pc, #216]	; (8007f4c <main+0x130>)
 8007e72:	f002 f89e 	bl	8009fb2 <HAL_I2C_GetError>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d0f9      	beq.n	8007e70 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e7c:	bf00      	nop
 8007e7e:	4833      	ldr	r0, [pc, #204]	; (8007f4c <main+0x130>)
 8007e80:	f002 f88a 	bl	8009f98 <HAL_I2C_GetState>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	d1f9      	bne.n	8007e7e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e90:	482c      	ldr	r0, [pc, #176]	; (8007f44 <main+0x128>)
 8007e92:	f001 fa7c 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e96:	2200      	movs	r2, #0
 8007e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e9c:	4829      	ldr	r0, [pc, #164]	; (8007f44 <main+0x128>)
 8007e9e:	f001 fa76 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2104      	movs	r1, #4
 8007ea6:	4827      	ldr	r0, [pc, #156]	; (8007f44 <main+0x128>)
 8007ea8:	f001 fa71 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007eac:	2200      	movs	r2, #0
 8007eae:	2102      	movs	r1, #2
 8007eb0:	4824      	ldr	r0, [pc, #144]	; (8007f44 <main+0x128>)
 8007eb2:	f001 fa6c 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2101      	movs	r1, #1
 8007eba:	4822      	ldr	r0, [pc, #136]	; (8007f44 <main+0x128>)
 8007ebc:	f001 fa67 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2120      	movs	r1, #32
 8007ec4:	4822      	ldr	r0, [pc, #136]	; (8007f50 <main+0x134>)
 8007ec6:	f001 fa62 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2110      	movs	r1, #16
 8007ece:	4820      	ldr	r0, [pc, #128]	; (8007f50 <main+0x134>)
 8007ed0:	f001 fa5d 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2180      	movs	r1, #128	; 0x80
 8007ed8:	481e      	ldr	r0, [pc, #120]	; (8007f54 <main+0x138>)
 8007eda:	f001 fa58 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2140      	movs	r1, #64	; 0x40
 8007ee2:	481c      	ldr	r0, [pc, #112]	; (8007f54 <main+0x138>)
 8007ee4:	f001 fa53 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2120      	movs	r1, #32
 8007eec:	4819      	ldr	r0, [pc, #100]	; (8007f54 <main+0x138>)
 8007eee:	f001 fa4e 	bl	800938e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2110      	movs	r1, #16
 8007ef6:	4817      	ldr	r0, [pc, #92]	; (8007f54 <main+0x138>)
 8007ef8:	f001 fa49 	bl	800938e <HAL_GPIO_WritePin>

  i2cTest();
 8007efc:	f7f8 ff48 	bl	8000d90 <i2cTest>
  HAL_Delay(100);
 8007f00:	2064      	movs	r0, #100	; 0x64
 8007f02:	f000 fc5d 	bl	80087c0 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f06:	4a14      	ldr	r2, [pc, #80]	; (8007f58 <main+0x13c>)
 8007f08:	2101      	movs	r1, #1
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	f7ff ff02 	bl	8007d14 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f10:	4a12      	ldr	r2, [pc, #72]	; (8007f5c <main+0x140>)
 8007f12:	2101      	movs	r1, #1
 8007f14:	2002      	movs	r0, #2
 8007f16:	f7ff fefd 	bl	8007d14 <lcd_print>
  HAL_Delay(1000);
 8007f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f1e:	f000 fc4f 	bl	80087c0 <HAL_Delay>
  lcd_clear();
 8007f22:	f7ff ff23 	bl	8007d6c <lcd_clear>

  eepromKontrol();
 8007f26:	f7f8 f985 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007f2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f2e:	f000 fc47 	bl	80087c0 <HAL_Delay>

  backLightTimer = millis;
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <main+0x144>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a0b      	ldr	r2, [pc, #44]	; (8007f64 <main+0x148>)
 8007f38:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007f3a:	f7ff fd2b 	bl	8007994 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f3e:	f7fe fd6d 	bl	8006a1c <mainLoop>
 8007f42:	e7fc      	b.n	8007f3e <main+0x122>
 8007f44:	40010c00 	.word	0x40010c00
 8007f48:	200003fc 	.word	0x200003fc
 8007f4c:	200003a8 	.word	0x200003a8
 8007f50:	40011000 	.word	0x40011000
 8007f54:	40010800 	.word	0x40010800
 8007f58:	0800dd44 	.word	0x0800dd44
 8007f5c:	0800dd58 	.word	0x0800dd58
 8007f60:	200001fc 	.word	0x200001fc
 8007f64:	20000218 	.word	0x20000218

08007f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b090      	sub	sp, #64	; 0x40
 8007f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f6e:	f107 0318 	add.w	r3, r7, #24
 8007f72:	2228      	movs	r2, #40	; 0x28
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f004 fb45 	bl	800c606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f7c:	1d3b      	adds	r3, r7, #4
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	605a      	str	r2, [r3, #4]
 8007f84:	609a      	str	r2, [r3, #8]
 8007f86:	60da      	str	r2, [r3, #12]
 8007f88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f94:	2300      	movs	r3, #0
 8007f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fac:	f107 0318 	add.w	r3, r7, #24
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f002 fc3f 	bl	800a834 <HAL_RCC_OscConfig>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007fbc:	f000 f9a2 	bl	8008304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fc0:	230f      	movs	r3, #15
 8007fc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	2102      	movs	r1, #2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f002 feac 	bl	800ad38 <HAL_RCC_ClockConfig>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007fe6:	f000 f98d 	bl	8008304 <Error_Handler>
  }
}
 8007fea:	bf00      	nop
 8007fec:	3740      	adds	r7, #64	; 0x40
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007ff8:	4b16      	ldr	r3, [pc, #88]	; (8008054 <MX_CAN_Init+0x60>)
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <MX_CAN_Init+0x64>)
 8007ffc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007ffe:	4b15      	ldr	r3, [pc, #84]	; (8008054 <MX_CAN_Init+0x60>)
 8008000:	2210      	movs	r2, #16
 8008002:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008004:	4b13      	ldr	r3, [pc, #76]	; (8008054 <MX_CAN_Init+0x60>)
 8008006:	2200      	movs	r2, #0
 8008008:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <MX_CAN_Init+0x60>)
 800800c:	2200      	movs	r2, #0
 800800e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008010:	4b10      	ldr	r3, [pc, #64]	; (8008054 <MX_CAN_Init+0x60>)
 8008012:	2200      	movs	r2, #0
 8008014:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <MX_CAN_Init+0x60>)
 8008018:	2200      	movs	r2, #0
 800801a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800801c:	4b0d      	ldr	r3, [pc, #52]	; (8008054 <MX_CAN_Init+0x60>)
 800801e:	2200      	movs	r2, #0
 8008020:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008022:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <MX_CAN_Init+0x60>)
 8008024:	2200      	movs	r2, #0
 8008026:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008028:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <MX_CAN_Init+0x60>)
 800802a:	2200      	movs	r2, #0
 800802c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <MX_CAN_Init+0x60>)
 8008030:	2200      	movs	r2, #0
 8008032:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008034:	4b07      	ldr	r3, [pc, #28]	; (8008054 <MX_CAN_Init+0x60>)
 8008036:	2200      	movs	r2, #0
 8008038:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800803a:	4b06      	ldr	r3, [pc, #24]	; (8008054 <MX_CAN_Init+0x60>)
 800803c:	2200      	movs	r2, #0
 800803e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008040:	4804      	ldr	r0, [pc, #16]	; (8008054 <MX_CAN_Init+0x60>)
 8008042:	f000 fbe1 	bl	8008808 <HAL_CAN_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800804c:	f000 f95a 	bl	8008304 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008050:	bf00      	nop
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000380 	.word	0x20000380
 8008058:	40006400 	.word	0x40006400

0800805c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008060:	4b12      	ldr	r3, [pc, #72]	; (80080ac <MX_I2C1_Init+0x50>)
 8008062:	4a13      	ldr	r2, [pc, #76]	; (80080b0 <MX_I2C1_Init+0x54>)
 8008064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008066:	4b11      	ldr	r3, [pc, #68]	; (80080ac <MX_I2C1_Init+0x50>)
 8008068:	4a12      	ldr	r2, [pc, #72]	; (80080b4 <MX_I2C1_Init+0x58>)
 800806a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <MX_I2C1_Init+0x50>)
 800806e:	2200      	movs	r2, #0
 8008070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008072:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <MX_I2C1_Init+0x50>)
 8008074:	2200      	movs	r2, #0
 8008076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008078:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <MX_I2C1_Init+0x50>)
 800807a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800807e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <MX_I2C1_Init+0x50>)
 8008082:	2200      	movs	r2, #0
 8008084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008086:	4b09      	ldr	r3, [pc, #36]	; (80080ac <MX_I2C1_Init+0x50>)
 8008088:	2200      	movs	r2, #0
 800808a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800808c:	4b07      	ldr	r3, [pc, #28]	; (80080ac <MX_I2C1_Init+0x50>)
 800808e:	2200      	movs	r2, #0
 8008090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008092:	4b06      	ldr	r3, [pc, #24]	; (80080ac <MX_I2C1_Init+0x50>)
 8008094:	2200      	movs	r2, #0
 8008096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008098:	4804      	ldr	r0, [pc, #16]	; (80080ac <MX_I2C1_Init+0x50>)
 800809a:	f001 f9a9 	bl	80093f0 <HAL_I2C_Init>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080a4:	f000 f92e 	bl	8008304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80080a8:	bf00      	nop
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	200003a8 	.word	0x200003a8
 80080b0:	40005400 	.word	0x40005400
 80080b4:	00061a80 	.word	0x00061a80

080080b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	605a      	str	r2, [r3, #4]
 80080c8:	609a      	str	r2, [r3, #8]
 80080ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080cc:	463b      	mov	r3, r7
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80080d4:	4b1f      	ldr	r3, [pc, #124]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080d6:	4a20      	ldr	r2, [pc, #128]	; (8008158 <MX_TIM1_Init+0xa0>)
 80080d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80080da:	4b1e      	ldr	r3, [pc, #120]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080dc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80080e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080e2:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80080e8:	4b1a      	ldr	r3, [pc, #104]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080ea:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80080ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080f0:	4b18      	ldr	r3, [pc, #96]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080f6:	4b17      	ldr	r3, [pc, #92]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080fc:	4b15      	ldr	r3, [pc, #84]	; (8008154 <MX_TIM1_Init+0x9c>)
 80080fe:	2200      	movs	r2, #0
 8008100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008102:	4814      	ldr	r0, [pc, #80]	; (8008154 <MX_TIM1_Init+0x9c>)
 8008104:	f002 ffa6 	bl	800b054 <HAL_TIM_Base_Init>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800810e:	f000 f8f9 	bl	8008304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008118:	f107 0308 	add.w	r3, r7, #8
 800811c:	4619      	mov	r1, r3
 800811e:	480d      	ldr	r0, [pc, #52]	; (8008154 <MX_TIM1_Init+0x9c>)
 8008120:	f003 f950 	bl	800b3c4 <HAL_TIM_ConfigClockSource>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800812a:	f000 f8eb 	bl	8008304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800812e:	2300      	movs	r3, #0
 8008130:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008136:	463b      	mov	r3, r7
 8008138:	4619      	mov	r1, r3
 800813a:	4806      	ldr	r0, [pc, #24]	; (8008154 <MX_TIM1_Init+0x9c>)
 800813c:	f003 fb3e 	bl	800b7bc <HAL_TIMEx_MasterConfigSynchronization>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008146:	f000 f8dd 	bl	8008304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800814a:	bf00      	nop
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200003fc 	.word	0x200003fc
 8008158:	40012c00 	.word	0x40012c00

0800815c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008160:	4b11      	ldr	r3, [pc, #68]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008162:	4a12      	ldr	r2, [pc, #72]	; (80081ac <MX_USART1_UART_Init+0x50>)
 8008164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008166:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800816c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800816e:	4b0e      	ldr	r3, [pc, #56]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008170:	2200      	movs	r2, #0
 8008172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008174:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008176:	2200      	movs	r2, #0
 8008178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800817a:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 800817c:	2200      	movs	r2, #0
 800817e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008182:	220c      	movs	r2, #12
 8008184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008186:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008188:	2200      	movs	r2, #0
 800818a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 800818e:	2200      	movs	r2, #0
 8008190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008192:	4805      	ldr	r0, [pc, #20]	; (80081a8 <MX_USART1_UART_Init+0x4c>)
 8008194:	f003 fb90 	bl	800b8b8 <HAL_UART_Init>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800819e:	f000 f8b1 	bl	8008304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081a2:	bf00      	nop
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000444 	.word	0x20000444
 80081ac:	40013800 	.word	0x40013800

080081b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	609a      	str	r2, [r3, #8]
 80081c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80081c4:	4b4b      	ldr	r3, [pc, #300]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	4a4a      	ldr	r2, [pc, #296]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081ca:	f043 0310 	orr.w	r3, r3, #16
 80081ce:	6193      	str	r3, [r2, #24]
 80081d0:	4b48      	ldr	r3, [pc, #288]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f003 0310 	and.w	r3, r3, #16
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081dc:	4b45      	ldr	r3, [pc, #276]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	4a44      	ldr	r2, [pc, #272]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081e2:	f043 0320 	orr.w	r3, r3, #32
 80081e6:	6193      	str	r3, [r2, #24]
 80081e8:	4b42      	ldr	r3, [pc, #264]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	60bb      	str	r3, [r7, #8]
 80081f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081f4:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	4a3e      	ldr	r2, [pc, #248]	; (80082f4 <MX_GPIO_Init+0x144>)
 80081fa:	f043 0304 	orr.w	r3, r3, #4
 80081fe:	6193      	str	r3, [r2, #24]
 8008200:	4b3c      	ldr	r3, [pc, #240]	; (80082f4 <MX_GPIO_Init+0x144>)
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800820c:	4b39      	ldr	r3, [pc, #228]	; (80082f4 <MX_GPIO_Init+0x144>)
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	4a38      	ldr	r2, [pc, #224]	; (80082f4 <MX_GPIO_Init+0x144>)
 8008212:	f043 0308 	orr.w	r3, r3, #8
 8008216:	6193      	str	r3, [r2, #24]
 8008218:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <MX_GPIO_Init+0x144>)
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008224:	2200      	movs	r2, #0
 8008226:	21f0      	movs	r1, #240	; 0xf0
 8008228:	4833      	ldr	r0, [pc, #204]	; (80082f8 <MX_GPIO_Init+0x148>)
 800822a:	f001 f8b0 	bl	800938e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800822e:	2200      	movs	r2, #0
 8008230:	f241 0130 	movw	r1, #4144	; 0x1030
 8008234:	4831      	ldr	r0, [pc, #196]	; (80082fc <MX_GPIO_Init+0x14c>)
 8008236:	f001 f8aa 	bl	800938e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800823a:	2200      	movs	r2, #0
 800823c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008240:	482f      	ldr	r0, [pc, #188]	; (8008300 <MX_GPIO_Init+0x150>)
 8008242:	f001 f8a4 	bl	800938e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008246:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800824a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800824c:	2300      	movs	r3, #0
 800824e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008250:	2300      	movs	r3, #0
 8008252:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008254:	f107 0310 	add.w	r3, r7, #16
 8008258:	4619      	mov	r1, r3
 800825a:	4828      	ldr	r0, [pc, #160]	; (80082fc <MX_GPIO_Init+0x14c>)
 800825c:	f000 fe20 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008260:	f248 130f 	movw	r3, #33039	; 0x810f
 8008264:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826a:	2300      	movs	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800826e:	f107 0310 	add.w	r3, r7, #16
 8008272:	4619      	mov	r1, r3
 8008274:	4820      	ldr	r0, [pc, #128]	; (80082f8 <MX_GPIO_Init+0x148>)
 8008276:	f000 fe13 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800827a:	23f0      	movs	r3, #240	; 0xf0
 800827c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800827e:	2301      	movs	r3, #1
 8008280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008282:	2300      	movs	r3, #0
 8008284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008286:	2302      	movs	r3, #2
 8008288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800828a:	f107 0310 	add.w	r3, r7, #16
 800828e:	4619      	mov	r1, r3
 8008290:	4819      	ldr	r0, [pc, #100]	; (80082f8 <MX_GPIO_Init+0x148>)
 8008292:	f000 fe05 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008296:	f241 0330 	movw	r3, #4144	; 0x1030
 800829a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800829c:	2301      	movs	r3, #1
 800829e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082a4:	2302      	movs	r3, #2
 80082a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	4619      	mov	r1, r3
 80082ae:	4813      	ldr	r0, [pc, #76]	; (80082fc <MX_GPIO_Init+0x14c>)
 80082b0:	f000 fdf6 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082b4:	f640 4307 	movw	r3, #3079	; 0xc07
 80082b8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ba:	2301      	movs	r3, #1
 80082bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082c2:	2302      	movs	r3, #2
 80082c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082c6:	f107 0310 	add.w	r3, r7, #16
 80082ca:	4619      	mov	r1, r3
 80082cc:	480c      	ldr	r0, [pc, #48]	; (8008300 <MX_GPIO_Init+0x150>)
 80082ce:	f000 fde7 	bl	8008ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80082d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80082d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082d8:	2300      	movs	r3, #0
 80082da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082e0:	f107 0310 	add.w	r3, r7, #16
 80082e4:	4619      	mov	r1, r3
 80082e6:	4806      	ldr	r0, [pc, #24]	; (8008300 <MX_GPIO_Init+0x150>)
 80082e8:	f000 fdda 	bl	8008ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80082ec:	bf00      	nop
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40021000 	.word	0x40021000
 80082f8:	40010800 	.word	0x40010800
 80082fc:	40011000 	.word	0x40011000
 8008300:	40010c00 	.word	0x40010c00

08008304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008308:	bf00      	nop
 800830a:	46bd      	mov	sp, r7
 800830c:	bc80      	pop	{r7}
 800830e:	4770      	bx	lr

08008310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008316:	4b15      	ldr	r3, [pc, #84]	; (800836c <HAL_MspInit+0x5c>)
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	4a14      	ldr	r2, [pc, #80]	; (800836c <HAL_MspInit+0x5c>)
 800831c:	f043 0301 	orr.w	r3, r3, #1
 8008320:	6193      	str	r3, [r2, #24]
 8008322:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_MspInit+0x5c>)
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800832e:	4b0f      	ldr	r3, [pc, #60]	; (800836c <HAL_MspInit+0x5c>)
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	4a0e      	ldr	r2, [pc, #56]	; (800836c <HAL_MspInit+0x5c>)
 8008334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008338:	61d3      	str	r3, [r2, #28]
 800833a:	4b0c      	ldr	r3, [pc, #48]	; (800836c <HAL_MspInit+0x5c>)
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008342:	607b      	str	r3, [r7, #4]
 8008344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008346:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <HAL_MspInit+0x60>)
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	4a04      	ldr	r2, [pc, #16]	; (8008370 <HAL_MspInit+0x60>)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr
 800836c:	40021000 	.word	0x40021000
 8008370:	40010000 	.word	0x40010000

08008374 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800837c:	f107 0310 	add.w	r3, r7, #16
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	605a      	str	r2, [r3, #4]
 8008386:	609a      	str	r2, [r3, #8]
 8008388:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1c      	ldr	r2, [pc, #112]	; (8008400 <HAL_CAN_MspInit+0x8c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d131      	bne.n	80083f8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008394:	4b1b      	ldr	r3, [pc, #108]	; (8008404 <HAL_CAN_MspInit+0x90>)
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	4a1a      	ldr	r2, [pc, #104]	; (8008404 <HAL_CAN_MspInit+0x90>)
 800839a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800839e:	61d3      	str	r3, [r2, #28]
 80083a0:	4b18      	ldr	r3, [pc, #96]	; (8008404 <HAL_CAN_MspInit+0x90>)
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ac:	4b15      	ldr	r3, [pc, #84]	; (8008404 <HAL_CAN_MspInit+0x90>)
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	4a14      	ldr	r2, [pc, #80]	; (8008404 <HAL_CAN_MspInit+0x90>)
 80083b2:	f043 0304 	orr.w	r3, r3, #4
 80083b6:	6193      	str	r3, [r2, #24]
 80083b8:	4b12      	ldr	r3, [pc, #72]	; (8008404 <HAL_CAN_MspInit+0x90>)
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	60bb      	str	r3, [r7, #8]
 80083c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80083c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083d2:	f107 0310 	add.w	r3, r7, #16
 80083d6:	4619      	mov	r1, r3
 80083d8:	480b      	ldr	r0, [pc, #44]	; (8008408 <HAL_CAN_MspInit+0x94>)
 80083da:	f000 fd61 	bl	8008ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80083de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e4:	2302      	movs	r3, #2
 80083e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083e8:	2303      	movs	r3, #3
 80083ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ec:	f107 0310 	add.w	r3, r7, #16
 80083f0:	4619      	mov	r1, r3
 80083f2:	4805      	ldr	r0, [pc, #20]	; (8008408 <HAL_CAN_MspInit+0x94>)
 80083f4:	f000 fd54 	bl	8008ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80083f8:	bf00      	nop
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40006400 	.word	0x40006400
 8008404:	40021000 	.word	0x40021000
 8008408:	40010800 	.word	0x40010800

0800840c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008414:	f107 0310 	add.w	r3, r7, #16
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	605a      	str	r2, [r3, #4]
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a15      	ldr	r2, [pc, #84]	; (800847c <HAL_I2C_MspInit+0x70>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d123      	bne.n	8008474 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800842c:	4b14      	ldr	r3, [pc, #80]	; (8008480 <HAL_I2C_MspInit+0x74>)
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	4a13      	ldr	r2, [pc, #76]	; (8008480 <HAL_I2C_MspInit+0x74>)
 8008432:	f043 0308 	orr.w	r3, r3, #8
 8008436:	6193      	str	r3, [r2, #24]
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <HAL_I2C_MspInit+0x74>)
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008444:	23c0      	movs	r3, #192	; 0xc0
 8008446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008448:	2312      	movs	r3, #18
 800844a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800844c:	2303      	movs	r3, #3
 800844e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	4619      	mov	r1, r3
 8008456:	480b      	ldr	r0, [pc, #44]	; (8008484 <HAL_I2C_MspInit+0x78>)
 8008458:	f000 fd22 	bl	8008ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <HAL_I2C_MspInit+0x74>)
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	4a07      	ldr	r2, [pc, #28]	; (8008480 <HAL_I2C_MspInit+0x74>)
 8008462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008466:	61d3      	str	r3, [r2, #28]
 8008468:	4b05      	ldr	r3, [pc, #20]	; (8008480 <HAL_I2C_MspInit+0x74>)
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008474:	bf00      	nop
 8008476:	3720      	adds	r7, #32
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40005400 	.word	0x40005400
 8008480:	40021000 	.word	0x40021000
 8008484:	40010c00 	.word	0x40010c00

08008488 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <HAL_I2C_MspDeInit+0x38>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d10d      	bne.n	80084b6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <HAL_I2C_MspDeInit+0x3c>)
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <HAL_I2C_MspDeInit+0x3c>)
 80084a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084a4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80084a6:	2140      	movs	r1, #64	; 0x40
 80084a8:	4807      	ldr	r0, [pc, #28]	; (80084c8 <HAL_I2C_MspDeInit+0x40>)
 80084aa:	f000 fe8d 	bl	80091c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80084ae:	2180      	movs	r1, #128	; 0x80
 80084b0:	4805      	ldr	r0, [pc, #20]	; (80084c8 <HAL_I2C_MspDeInit+0x40>)
 80084b2:	f000 fe89 	bl	80091c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	40005400 	.word	0x40005400
 80084c4:	40021000 	.word	0x40021000
 80084c8:	40010c00 	.word	0x40010c00

080084cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a0d      	ldr	r2, [pc, #52]	; (8008510 <HAL_TIM_Base_MspInit+0x44>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d113      	bne.n	8008506 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <HAL_TIM_Base_MspInit+0x48>)
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	4a0c      	ldr	r2, [pc, #48]	; (8008514 <HAL_TIM_Base_MspInit+0x48>)
 80084e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084e8:	6193      	str	r3, [r2, #24]
 80084ea:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <HAL_TIM_Base_MspInit+0x48>)
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80084f6:	2200      	movs	r2, #0
 80084f8:	2100      	movs	r1, #0
 80084fa:	2019      	movs	r0, #25
 80084fc:	f000 fb57 	bl	8008bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008500:	2019      	movs	r0, #25
 8008502:	f000 fb70 	bl	8008be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40012c00 	.word	0x40012c00
 8008514:	40021000 	.word	0x40021000

08008518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008520:	f107 0310 	add.w	r3, r7, #16
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	605a      	str	r2, [r3, #4]
 800852a:	609a      	str	r2, [r3, #8]
 800852c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a20      	ldr	r2, [pc, #128]	; (80085b4 <HAL_UART_MspInit+0x9c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d139      	bne.n	80085ac <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008538:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 800853e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008542:	6193      	str	r3, [r2, #24]
 8008544:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008550:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 8008556:	f043 0304 	orr.w	r3, r3, #4
 800855a:	6193      	str	r3, [r2, #24]
 800855c:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <HAL_UART_MspInit+0xa0>)
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	60bb      	str	r3, [r7, #8]
 8008566:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800856c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800856e:	2302      	movs	r3, #2
 8008570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008572:	2303      	movs	r3, #3
 8008574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008576:	f107 0310 	add.w	r3, r7, #16
 800857a:	4619      	mov	r1, r3
 800857c:	480f      	ldr	r0, [pc, #60]	; (80085bc <HAL_UART_MspInit+0xa4>)
 800857e:	f000 fc8f 	bl	8008ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858c:	2300      	movs	r3, #0
 800858e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008590:	f107 0310 	add.w	r3, r7, #16
 8008594:	4619      	mov	r1, r3
 8008596:	4809      	ldr	r0, [pc, #36]	; (80085bc <HAL_UART_MspInit+0xa4>)
 8008598:	f000 fc82 	bl	8008ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800859c:	2200      	movs	r2, #0
 800859e:	2100      	movs	r1, #0
 80085a0:	2025      	movs	r0, #37	; 0x25
 80085a2:	f000 fb04 	bl	8008bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085a6:	2025      	movs	r0, #37	; 0x25
 80085a8:	f000 fb1d 	bl	8008be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085ac:	bf00      	nop
 80085ae:	3720      	adds	r7, #32
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40013800 	.word	0x40013800
 80085b8:	40021000 	.word	0x40021000
 80085bc:	40010800 	.word	0x40010800

080085c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80085c4:	e7fe      	b.n	80085c4 <NMI_Handler+0x4>

080085c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085c6:	b480      	push	{r7}
 80085c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085ca:	e7fe      	b.n	80085ca <HardFault_Handler+0x4>

080085cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085d0:	e7fe      	b.n	80085d0 <MemManage_Handler+0x4>

080085d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085d2:	b480      	push	{r7}
 80085d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085d6:	e7fe      	b.n	80085d6 <BusFault_Handler+0x4>

080085d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085dc:	e7fe      	b.n	80085dc <UsageFault_Handler+0x4>

080085de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085de:	b480      	push	{r7}
 80085e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085e2:	bf00      	nop
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr

080085ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085ea:	b480      	push	{r7}
 80085ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085ee:	bf00      	nop
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr

080085f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085f6:	b480      	push	{r7}
 80085f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085fa:	bf00      	nop
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr

08008602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008606:	f000 f8bf 	bl	8008788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800860a:	bf00      	nop
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008614:	4802      	ldr	r0, [pc, #8]	; (8008620 <TIM1_UP_IRQHandler+0x10>)
 8008616:	f002 fdcd 	bl	800b1b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800861a:	bf00      	nop
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	200003fc 	.word	0x200003fc

08008624 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008628:	4802      	ldr	r0, [pc, #8]	; (8008634 <USART1_IRQHandler+0x10>)
 800862a:	f003 f9cb 	bl	800b9c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800862e:	bf00      	nop
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000444 	.word	0x20000444

08008638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008640:	4a14      	ldr	r2, [pc, #80]	; (8008694 <_sbrk+0x5c>)
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <_sbrk+0x60>)
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800864c:	4b13      	ldr	r3, [pc, #76]	; (800869c <_sbrk+0x64>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008654:	4b11      	ldr	r3, [pc, #68]	; (800869c <_sbrk+0x64>)
 8008656:	4a12      	ldr	r2, [pc, #72]	; (80086a0 <_sbrk+0x68>)
 8008658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800865a:	4b10      	ldr	r3, [pc, #64]	; (800869c <_sbrk+0x64>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4413      	add	r3, r2
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	429a      	cmp	r2, r3
 8008666:	d207      	bcs.n	8008678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008668:	f003 ffe6 	bl	800c638 <__errno>
 800866c:	4603      	mov	r3, r0
 800866e:	220c      	movs	r2, #12
 8008670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008676:	e009      	b.n	800868c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008678:	4b08      	ldr	r3, [pc, #32]	; (800869c <_sbrk+0x64>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800867e:	4b07      	ldr	r3, [pc, #28]	; (800869c <_sbrk+0x64>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	4a05      	ldr	r2, [pc, #20]	; (800869c <_sbrk+0x64>)
 8008688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800868a:	68fb      	ldr	r3, [r7, #12]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	2000c000 	.word	0x2000c000
 8008698:	00000400 	.word	0x00000400
 800869c:	2000048c 	.word	0x2000048c
 80086a0:	200005e0 	.word	0x200005e0

080086a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086a8:	bf00      	nop
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr

080086b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086b0:	480c      	ldr	r0, [pc, #48]	; (80086e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80086b2:	490d      	ldr	r1, [pc, #52]	; (80086e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80086b4:	4a0d      	ldr	r2, [pc, #52]	; (80086ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80086b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086b8:	e002      	b.n	80086c0 <LoopCopyDataInit>

080086ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086be:	3304      	adds	r3, #4

080086c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086c4:	d3f9      	bcc.n	80086ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086c6:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80086c8:	4c0a      	ldr	r4, [pc, #40]	; (80086f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80086ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086cc:	e001      	b.n	80086d2 <LoopFillZerobss>

080086ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086d0:	3204      	adds	r2, #4

080086d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086d4:	d3fb      	bcc.n	80086ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80086d6:	f7ff ffe5 	bl	80086a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086da:	f003 ffb3 	bl	800c644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80086de:	f7ff fb9d 	bl	8007e1c <main>
  bx lr
 80086e2:	4770      	bx	lr
  ldr r0, =_sdata
 80086e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086e8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80086ec:	0800ddf8 	.word	0x0800ddf8
  ldr r2, =_sbss
 80086f0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80086f4:	200005dc 	.word	0x200005dc

080086f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80086f8:	e7fe      	b.n	80086f8 <ADC1_2_IRQHandler>
	...

080086fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008700:	4b08      	ldr	r3, [pc, #32]	; (8008724 <HAL_Init+0x28>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a07      	ldr	r2, [pc, #28]	; (8008724 <HAL_Init+0x28>)
 8008706:	f043 0310 	orr.w	r3, r3, #16
 800870a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800870c:	2003      	movs	r0, #3
 800870e:	f000 fa43 	bl	8008b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008712:	200f      	movs	r0, #15
 8008714:	f000 f808 	bl	8008728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008718:	f7ff fdfa 	bl	8008310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	40022000 	.word	0x40022000

08008728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008730:	4b12      	ldr	r3, [pc, #72]	; (800877c <HAL_InitTick+0x54>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	4b12      	ldr	r3, [pc, #72]	; (8008780 <HAL_InitTick+0x58>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	4619      	mov	r1, r3
 800873a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800873e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008742:	fbb2 f3f3 	udiv	r3, r2, r3
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fa5b 	bl	8008c02 <HAL_SYSTICK_Config>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e00e      	b.n	8008774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b0f      	cmp	r3, #15
 800875a:	d80a      	bhi.n	8008772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800875c:	2200      	movs	r2, #0
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008764:	f000 fa23 	bl	8008bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008768:	4a06      	ldr	r2, [pc, #24]	; (8008784 <HAL_InitTick+0x5c>)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	e000      	b.n	8008774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	200000a0 	.word	0x200000a0
 8008780:	200000a8 	.word	0x200000a8
 8008784:	200000a4 	.word	0x200000a4

08008788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008788:	b480      	push	{r7}
 800878a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <HAL_IncTick+0x1c>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <HAL_IncTick+0x20>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4413      	add	r3, r2
 8008798:	4a03      	ldr	r2, [pc, #12]	; (80087a8 <HAL_IncTick+0x20>)
 800879a:	6013      	str	r3, [r2, #0]
}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr
 80087a4:	200000a8 	.word	0x200000a8
 80087a8:	20000490 	.word	0x20000490

080087ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
  return uwTick;
 80087b0:	4b02      	ldr	r3, [pc, #8]	; (80087bc <HAL_GetTick+0x10>)
 80087b2:	681b      	ldr	r3, [r3, #0]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr
 80087bc:	20000490 	.word	0x20000490

080087c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087c8:	f7ff fff0 	bl	80087ac <HAL_GetTick>
 80087cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d8:	d005      	beq.n	80087e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80087da:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <HAL_Delay+0x44>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087e6:	bf00      	nop
 80087e8:	f7ff ffe0 	bl	80087ac <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d8f7      	bhi.n	80087e8 <HAL_Delay+0x28>
  {
  }
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	200000a8 	.word	0x200000a8

08008808 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e0ed      	b.n	80089f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff fda4 	bl	8008374 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800883c:	f7ff ffb6 	bl	80087ac <HAL_GetTick>
 8008840:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008842:	e012      	b.n	800886a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008844:	f7ff ffb2 	bl	80087ac <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b0a      	cmp	r3, #10
 8008850:	d90b      	bls.n	800886a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2205      	movs	r2, #5
 8008862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e0c5      	b.n	80089f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0e5      	beq.n	8008844 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0202 	bic.w	r2, r2, #2
 8008886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008888:	f7ff ff90 	bl	80087ac <HAL_GetTick>
 800888c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800888e:	e012      	b.n	80088b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008890:	f7ff ff8c 	bl	80087ac <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b0a      	cmp	r3, #10
 800889c:	d90b      	bls.n	80088b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2205      	movs	r2, #5
 80088ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e09f      	b.n	80089f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e5      	bne.n	8008890 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7e1b      	ldrb	r3, [r3, #24]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d108      	bne.n	80088de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e007      	b.n	80088ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7e5b      	ldrb	r3, [r3, #25]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d108      	bne.n	8008908 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e007      	b.n	8008918 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008916:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7e9b      	ldrb	r3, [r3, #26]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d108      	bne.n	8008932 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0220 	orr.w	r2, r2, #32
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	e007      	b.n	8008942 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0220 	bic.w	r2, r2, #32
 8008940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7edb      	ldrb	r3, [r3, #27]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d108      	bne.n	800895c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0210 	bic.w	r2, r2, #16
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e007      	b.n	800896c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0210 	orr.w	r2, r2, #16
 800896a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7f1b      	ldrb	r3, [r3, #28]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d108      	bne.n	8008986 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0208 	orr.w	r2, r2, #8
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e007      	b.n	8008996 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0208 	bic.w	r2, r2, #8
 8008994:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7f5b      	ldrb	r3, [r3, #29]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d108      	bne.n	80089b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0204 	orr.w	r2, r2, #4
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e007      	b.n	80089c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0204 	bic.w	r2, r2, #4
 80089be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	ea42 0103 	orr.w	r1, r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	1e5a      	subs	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <__NVIC_SetPriorityGrouping>:
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a10:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <__NVIC_SetPriorityGrouping+0x44>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a32:	4a04      	ldr	r2, [pc, #16]	; (8008a44 <__NVIC_SetPriorityGrouping+0x44>)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	60d3      	str	r3, [r2, #12]
}
 8008a38:	bf00      	nop
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bc80      	pop	{r7}
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	e000ed00 	.word	0xe000ed00

08008a48 <__NVIC_GetPriorityGrouping>:
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a4c:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <__NVIC_GetPriorityGrouping+0x18>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	0a1b      	lsrs	r3, r3, #8
 8008a52:	f003 0307 	and.w	r3, r3, #7
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	e000ed00 	.word	0xe000ed00

08008a64 <__NVIC_EnableIRQ>:
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	db0b      	blt.n	8008a8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	f003 021f 	and.w	r2, r3, #31
 8008a7c:	4906      	ldr	r1, [pc, #24]	; (8008a98 <__NVIC_EnableIRQ+0x34>)
 8008a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	2001      	movs	r0, #1
 8008a86:	fa00 f202 	lsl.w	r2, r0, r2
 8008a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr
 8008a98:	e000e100 	.word	0xe000e100

08008a9c <__NVIC_SetPriority>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	db0a      	blt.n	8008ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	490c      	ldr	r1, [pc, #48]	; (8008ae8 <__NVIC_SetPriority+0x4c>)
 8008ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aba:	0112      	lsls	r2, r2, #4
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	440b      	add	r3, r1
 8008ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ac4:	e00a      	b.n	8008adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	4908      	ldr	r1, [pc, #32]	; (8008aec <__NVIC_SetPriority+0x50>)
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	3b04      	subs	r3, #4
 8008ad4:	0112      	lsls	r2, r2, #4
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	440b      	add	r3, r1
 8008ada:	761a      	strb	r2, [r3, #24]
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	e000e100 	.word	0xe000e100
 8008aec:	e000ed00 	.word	0xe000ed00

08008af0 <NVIC_EncodePriority>:
{
 8008af0:	b480      	push	{r7}
 8008af2:	b089      	sub	sp, #36	; 0x24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f1c3 0307 	rsb	r3, r3, #7
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	bf28      	it	cs
 8008b0e:	2304      	movcs	r3, #4
 8008b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	3304      	adds	r3, #4
 8008b16:	2b06      	cmp	r3, #6
 8008b18:	d902      	bls.n	8008b20 <NVIC_EncodePriority+0x30>
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3b03      	subs	r3, #3
 8008b1e:	e000      	b.n	8008b22 <NVIC_EncodePriority+0x32>
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43da      	mvns	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	401a      	ands	r2, r3
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b42:	43d9      	mvns	r1, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b48:	4313      	orrs	r3, r2
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3724      	adds	r7, #36	; 0x24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b64:	d301      	bcc.n	8008b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b66:	2301      	movs	r3, #1
 8008b68:	e00f      	b.n	8008b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b6a:	4a0a      	ldr	r2, [pc, #40]	; (8008b94 <SysTick_Config+0x40>)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b72:	210f      	movs	r1, #15
 8008b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b78:	f7ff ff90 	bl	8008a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b7c:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <SysTick_Config+0x40>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b82:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <SysTick_Config+0x40>)
 8008b84:	2207      	movs	r2, #7
 8008b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	e000e010 	.word	0xe000e010

08008b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff ff2d 	bl	8008a00 <__NVIC_SetPriorityGrouping>
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b086      	sub	sp, #24
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
 8008bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bc0:	f7ff ff42 	bl	8008a48 <__NVIC_GetPriorityGrouping>
 8008bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	6978      	ldr	r0, [r7, #20]
 8008bcc:	f7ff ff90 	bl	8008af0 <NVIC_EncodePriority>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff ff5f 	bl	8008a9c <__NVIC_SetPriority>
}
 8008bde:	bf00      	nop
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	4603      	mov	r3, r0
 8008bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff ff35 	bl	8008a64 <__NVIC_EnableIRQ>
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff ffa2 	bl	8008b54 <SysTick_Config>
 8008c10:	4603      	mov	r3, r0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d008      	beq.n	8008c44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2204      	movs	r2, #4
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e020      	b.n	8008c86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 020e 	bic.w	r2, r2, #14
 8008c52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0201 	bic.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8008c72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr

08008c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d005      	beq.n	8008cb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2204      	movs	r2, #4
 8008cac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]
 8008cb2:	e0d6      	b.n	8008e62 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 020e 	bic.w	r2, r2, #14
 8008cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0201 	bic.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4b64      	ldr	r3, [pc, #400]	; (8008e6c <HAL_DMA_Abort_IT+0x1dc>)
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d958      	bls.n	8008d92 <HAL_DMA_Abort_IT+0x102>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a62      	ldr	r2, [pc, #392]	; (8008e70 <HAL_DMA_Abort_IT+0x1e0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d04f      	beq.n	8008d8a <HAL_DMA_Abort_IT+0xfa>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a61      	ldr	r2, [pc, #388]	; (8008e74 <HAL_DMA_Abort_IT+0x1e4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d048      	beq.n	8008d86 <HAL_DMA_Abort_IT+0xf6>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a5f      	ldr	r2, [pc, #380]	; (8008e78 <HAL_DMA_Abort_IT+0x1e8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d040      	beq.n	8008d80 <HAL_DMA_Abort_IT+0xf0>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a5e      	ldr	r2, [pc, #376]	; (8008e7c <HAL_DMA_Abort_IT+0x1ec>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d038      	beq.n	8008d7a <HAL_DMA_Abort_IT+0xea>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a5c      	ldr	r2, [pc, #368]	; (8008e80 <HAL_DMA_Abort_IT+0x1f0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d030      	beq.n	8008d74 <HAL_DMA_Abort_IT+0xe4>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a5b      	ldr	r2, [pc, #364]	; (8008e84 <HAL_DMA_Abort_IT+0x1f4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d028      	beq.n	8008d6e <HAL_DMA_Abort_IT+0xde>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a52      	ldr	r2, [pc, #328]	; (8008e6c <HAL_DMA_Abort_IT+0x1dc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d020      	beq.n	8008d68 <HAL_DMA_Abort_IT+0xd8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a57      	ldr	r2, [pc, #348]	; (8008e88 <HAL_DMA_Abort_IT+0x1f8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d019      	beq.n	8008d64 <HAL_DMA_Abort_IT+0xd4>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a55      	ldr	r2, [pc, #340]	; (8008e8c <HAL_DMA_Abort_IT+0x1fc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d012      	beq.n	8008d60 <HAL_DMA_Abort_IT+0xd0>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a54      	ldr	r2, [pc, #336]	; (8008e90 <HAL_DMA_Abort_IT+0x200>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d00a      	beq.n	8008d5a <HAL_DMA_Abort_IT+0xca>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a52      	ldr	r2, [pc, #328]	; (8008e94 <HAL_DMA_Abort_IT+0x204>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d102      	bne.n	8008d54 <HAL_DMA_Abort_IT+0xc4>
 8008d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d52:	e01b      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d58:	e018      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d5e:	e015      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d60:	2310      	movs	r3, #16
 8008d62:	e013      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e011      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d6c:	e00e      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d72:	e00b      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d78:	e008      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d7e:	e005      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d84:	e002      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d86:	2310      	movs	r3, #16
 8008d88:	e000      	b.n	8008d8c <HAL_DMA_Abort_IT+0xfc>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4a42      	ldr	r2, [pc, #264]	; (8008e98 <HAL_DMA_Abort_IT+0x208>)
 8008d8e:	6053      	str	r3, [r2, #4]
 8008d90:	e057      	b.n	8008e42 <HAL_DMA_Abort_IT+0x1b2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a36      	ldr	r2, [pc, #216]	; (8008e70 <HAL_DMA_Abort_IT+0x1e0>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d04f      	beq.n	8008e3c <HAL_DMA_Abort_IT+0x1ac>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a34      	ldr	r2, [pc, #208]	; (8008e74 <HAL_DMA_Abort_IT+0x1e4>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d048      	beq.n	8008e38 <HAL_DMA_Abort_IT+0x1a8>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a33      	ldr	r2, [pc, #204]	; (8008e78 <HAL_DMA_Abort_IT+0x1e8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d040      	beq.n	8008e32 <HAL_DMA_Abort_IT+0x1a2>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a31      	ldr	r2, [pc, #196]	; (8008e7c <HAL_DMA_Abort_IT+0x1ec>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d038      	beq.n	8008e2c <HAL_DMA_Abort_IT+0x19c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a30      	ldr	r2, [pc, #192]	; (8008e80 <HAL_DMA_Abort_IT+0x1f0>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d030      	beq.n	8008e26 <HAL_DMA_Abort_IT+0x196>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a2e      	ldr	r2, [pc, #184]	; (8008e84 <HAL_DMA_Abort_IT+0x1f4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d028      	beq.n	8008e20 <HAL_DMA_Abort_IT+0x190>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a26      	ldr	r2, [pc, #152]	; (8008e6c <HAL_DMA_Abort_IT+0x1dc>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d020      	beq.n	8008e1a <HAL_DMA_Abort_IT+0x18a>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a2a      	ldr	r2, [pc, #168]	; (8008e88 <HAL_DMA_Abort_IT+0x1f8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d019      	beq.n	8008e16 <HAL_DMA_Abort_IT+0x186>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a29      	ldr	r2, [pc, #164]	; (8008e8c <HAL_DMA_Abort_IT+0x1fc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d012      	beq.n	8008e12 <HAL_DMA_Abort_IT+0x182>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a27      	ldr	r2, [pc, #156]	; (8008e90 <HAL_DMA_Abort_IT+0x200>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00a      	beq.n	8008e0c <HAL_DMA_Abort_IT+0x17c>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a26      	ldr	r2, [pc, #152]	; (8008e94 <HAL_DMA_Abort_IT+0x204>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d102      	bne.n	8008e06 <HAL_DMA_Abort_IT+0x176>
 8008e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e04:	e01b      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e0a:	e018      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e10:	e015      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e12:	2310      	movs	r3, #16
 8008e14:	e013      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e011      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e1e:	e00e      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e24:	e00b      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e2a:	e008      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e30:	e005      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e36:	e002      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	e000      	b.n	8008e3e <HAL_DMA_Abort_IT+0x1ae>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	4a17      	ldr	r2, [pc, #92]	; (8008e9c <HAL_DMA_Abort_IT+0x20c>)
 8008e40:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
    } 
  }
  return status;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	40020080 	.word	0x40020080
 8008e70:	40020008 	.word	0x40020008
 8008e74:	4002001c 	.word	0x4002001c
 8008e78:	40020030 	.word	0x40020030
 8008e7c:	40020044 	.word	0x40020044
 8008e80:	40020058 	.word	0x40020058
 8008e84:	4002006c 	.word	0x4002006c
 8008e88:	40020408 	.word	0x40020408
 8008e8c:	4002041c 	.word	0x4002041c
 8008e90:	40020430 	.word	0x40020430
 8008e94:	40020444 	.word	0x40020444
 8008e98:	40020400 	.word	0x40020400
 8008e9c:	40020000 	.word	0x40020000

08008ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b08b      	sub	sp, #44	; 0x2c
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008eb2:	e179      	b.n	80091a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	f040 8168 	bne.w	80091a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	4a96      	ldr	r2, [pc, #600]	; (8009130 <HAL_GPIO_Init+0x290>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d05e      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008edc:	4a94      	ldr	r2, [pc, #592]	; (8009130 <HAL_GPIO_Init+0x290>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d875      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008ee2:	4a94      	ldr	r2, [pc, #592]	; (8009134 <HAL_GPIO_Init+0x294>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d058      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008ee8:	4a92      	ldr	r2, [pc, #584]	; (8009134 <HAL_GPIO_Init+0x294>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d86f      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008eee:	4a92      	ldr	r2, [pc, #584]	; (8009138 <HAL_GPIO_Init+0x298>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d052      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008ef4:	4a90      	ldr	r2, [pc, #576]	; (8009138 <HAL_GPIO_Init+0x298>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d869      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008efa:	4a90      	ldr	r2, [pc, #576]	; (800913c <HAL_GPIO_Init+0x29c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d04c      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008f00:	4a8e      	ldr	r2, [pc, #568]	; (800913c <HAL_GPIO_Init+0x29c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d863      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008f06:	4a8e      	ldr	r2, [pc, #568]	; (8009140 <HAL_GPIO_Init+0x2a0>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d046      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
 8008f0c:	4a8c      	ldr	r2, [pc, #560]	; (8009140 <HAL_GPIO_Init+0x2a0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d85d      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008f12:	2b12      	cmp	r3, #18
 8008f14:	d82a      	bhi.n	8008f6c <HAL_GPIO_Init+0xcc>
 8008f16:	2b12      	cmp	r3, #18
 8008f18:	d859      	bhi.n	8008fce <HAL_GPIO_Init+0x12e>
 8008f1a:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <HAL_GPIO_Init+0x80>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f9b 	.word	0x08008f9b
 8008f24:	08008f75 	.word	0x08008f75
 8008f28:	08008f87 	.word	0x08008f87
 8008f2c:	08008fc9 	.word	0x08008fc9
 8008f30:	08008fcf 	.word	0x08008fcf
 8008f34:	08008fcf 	.word	0x08008fcf
 8008f38:	08008fcf 	.word	0x08008fcf
 8008f3c:	08008fcf 	.word	0x08008fcf
 8008f40:	08008fcf 	.word	0x08008fcf
 8008f44:	08008fcf 	.word	0x08008fcf
 8008f48:	08008fcf 	.word	0x08008fcf
 8008f4c:	08008fcf 	.word	0x08008fcf
 8008f50:	08008fcf 	.word	0x08008fcf
 8008f54:	08008fcf 	.word	0x08008fcf
 8008f58:	08008fcf 	.word	0x08008fcf
 8008f5c:	08008fcf 	.word	0x08008fcf
 8008f60:	08008fcf 	.word	0x08008fcf
 8008f64:	08008f7d 	.word	0x08008f7d
 8008f68:	08008f91 	.word	0x08008f91
 8008f6c:	4a75      	ldr	r2, [pc, #468]	; (8009144 <HAL_GPIO_Init+0x2a4>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d013      	beq.n	8008f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f72:	e02c      	b.n	8008fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	623b      	str	r3, [r7, #32]
          break;
 8008f7a:	e029      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	3304      	adds	r3, #4
 8008f82:	623b      	str	r3, [r7, #32]
          break;
 8008f84:	e024      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	623b      	str	r3, [r7, #32]
          break;
 8008f8e:	e01f      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	330c      	adds	r3, #12
 8008f96:	623b      	str	r3, [r7, #32]
          break;
 8008f98:	e01a      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008fa2:	2304      	movs	r3, #4
 8008fa4:	623b      	str	r3, [r7, #32]
          break;
 8008fa6:	e013      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d105      	bne.n	8008fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	611a      	str	r2, [r3, #16]
          break;
 8008fba:	e009      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69fa      	ldr	r2, [r7, #28]
 8008fc4:	615a      	str	r2, [r3, #20]
          break;
 8008fc6:	e003      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	623b      	str	r3, [r7, #32]
          break;
 8008fcc:	e000      	b.n	8008fd0 <HAL_GPIO_Init+0x130>
          break;
 8008fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2bff      	cmp	r3, #255	; 0xff
 8008fd4:	d801      	bhi.n	8008fda <HAL_GPIO_Init+0x13a>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	e001      	b.n	8008fde <HAL_GPIO_Init+0x13e>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	2bff      	cmp	r3, #255	; 0xff
 8008fe4:	d802      	bhi.n	8008fec <HAL_GPIO_Init+0x14c>
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	e002      	b.n	8008ff2 <HAL_GPIO_Init+0x152>
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	3b08      	subs	r3, #8
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	210f      	movs	r1, #15
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8009000:	43db      	mvns	r3, r3
 8009002:	401a      	ands	r2, r3
 8009004:	6a39      	ldr	r1, [r7, #32]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	fa01 f303 	lsl.w	r3, r1, r3
 800900c:	431a      	orrs	r2, r3
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80c1 	beq.w	80091a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009020:	4b49      	ldr	r3, [pc, #292]	; (8009148 <HAL_GPIO_Init+0x2a8>)
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	4a48      	ldr	r2, [pc, #288]	; (8009148 <HAL_GPIO_Init+0x2a8>)
 8009026:	f043 0301 	orr.w	r3, r3, #1
 800902a:	6193      	str	r3, [r2, #24]
 800902c:	4b46      	ldr	r3, [pc, #280]	; (8009148 <HAL_GPIO_Init+0x2a8>)
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	60bb      	str	r3, [r7, #8]
 8009036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009038:	4a44      	ldr	r2, [pc, #272]	; (800914c <HAL_GPIO_Init+0x2ac>)
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	089b      	lsrs	r3, r3, #2
 800903e:	3302      	adds	r3, #2
 8009040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	220f      	movs	r2, #15
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4013      	ands	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a3c      	ldr	r2, [pc, #240]	; (8009150 <HAL_GPIO_Init+0x2b0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d01f      	beq.n	80090a4 <HAL_GPIO_Init+0x204>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a3b      	ldr	r2, [pc, #236]	; (8009154 <HAL_GPIO_Init+0x2b4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d019      	beq.n	80090a0 <HAL_GPIO_Init+0x200>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a3a      	ldr	r2, [pc, #232]	; (8009158 <HAL_GPIO_Init+0x2b8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d013      	beq.n	800909c <HAL_GPIO_Init+0x1fc>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a39      	ldr	r2, [pc, #228]	; (800915c <HAL_GPIO_Init+0x2bc>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00d      	beq.n	8009098 <HAL_GPIO_Init+0x1f8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a38      	ldr	r2, [pc, #224]	; (8009160 <HAL_GPIO_Init+0x2c0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d007      	beq.n	8009094 <HAL_GPIO_Init+0x1f4>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a37      	ldr	r2, [pc, #220]	; (8009164 <HAL_GPIO_Init+0x2c4>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d101      	bne.n	8009090 <HAL_GPIO_Init+0x1f0>
 800908c:	2305      	movs	r3, #5
 800908e:	e00a      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 8009090:	2306      	movs	r3, #6
 8009092:	e008      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 8009094:	2304      	movs	r3, #4
 8009096:	e006      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 8009098:	2303      	movs	r3, #3
 800909a:	e004      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 800909c:	2302      	movs	r3, #2
 800909e:	e002      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <HAL_GPIO_Init+0x206>
 80090a4:	2300      	movs	r3, #0
 80090a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a8:	f002 0203 	and.w	r2, r2, #3
 80090ac:	0092      	lsls	r2, r2, #2
 80090ae:	4093      	lsls	r3, r2
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80090b6:	4925      	ldr	r1, [pc, #148]	; (800914c <HAL_GPIO_Init+0x2ac>)
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	089b      	lsrs	r3, r3, #2
 80090bc:	3302      	adds	r3, #2
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d006      	beq.n	80090de <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80090d0:	4b25      	ldr	r3, [pc, #148]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	4924      	ldr	r1, [pc, #144]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	4313      	orrs	r3, r2
 80090da:	608b      	str	r3, [r1, #8]
 80090dc:	e006      	b.n	80090ec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80090de:	4b22      	ldr	r3, [pc, #136]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	43db      	mvns	r3, r3
 80090e6:	4920      	ldr	r1, [pc, #128]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090e8:	4013      	ands	r3, r2
 80090ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d006      	beq.n	8009106 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80090f8:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	491a      	ldr	r1, [pc, #104]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	4313      	orrs	r3, r2
 8009102:	60cb      	str	r3, [r1, #12]
 8009104:	e006      	b.n	8009114 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009106:	4b18      	ldr	r3, [pc, #96]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 8009108:	68da      	ldr	r2, [r3, #12]
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	43db      	mvns	r3, r3
 800910e:	4916      	ldr	r1, [pc, #88]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 8009110:	4013      	ands	r3, r2
 8009112:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d025      	beq.n	800916c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009120:	4b11      	ldr	r3, [pc, #68]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	4910      	ldr	r1, [pc, #64]	; (8009168 <HAL_GPIO_Init+0x2c8>)
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	4313      	orrs	r3, r2
 800912a:	604b      	str	r3, [r1, #4]
 800912c:	e025      	b.n	800917a <HAL_GPIO_Init+0x2da>
 800912e:	bf00      	nop
 8009130:	10320000 	.word	0x10320000
 8009134:	10310000 	.word	0x10310000
 8009138:	10220000 	.word	0x10220000
 800913c:	10210000 	.word	0x10210000
 8009140:	10120000 	.word	0x10120000
 8009144:	10110000 	.word	0x10110000
 8009148:	40021000 	.word	0x40021000
 800914c:	40010000 	.word	0x40010000
 8009150:	40010800 	.word	0x40010800
 8009154:	40010c00 	.word	0x40010c00
 8009158:	40011000 	.word	0x40011000
 800915c:	40011400 	.word	0x40011400
 8009160:	40011800 	.word	0x40011800
 8009164:	40011c00 	.word	0x40011c00
 8009168:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800916c:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <HAL_GPIO_Init+0x324>)
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	43db      	mvns	r3, r3
 8009174:	4913      	ldr	r1, [pc, #76]	; (80091c4 <HAL_GPIO_Init+0x324>)
 8009176:	4013      	ands	r3, r2
 8009178:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d006      	beq.n	8009194 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009186:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <HAL_GPIO_Init+0x324>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	490e      	ldr	r1, [pc, #56]	; (80091c4 <HAL_GPIO_Init+0x324>)
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	4313      	orrs	r3, r2
 8009190:	600b      	str	r3, [r1, #0]
 8009192:	e006      	b.n	80091a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009194:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <HAL_GPIO_Init+0x324>)
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	43db      	mvns	r3, r3
 800919c:	4909      	ldr	r1, [pc, #36]	; (80091c4 <HAL_GPIO_Init+0x324>)
 800919e:	4013      	ands	r3, r2
 80091a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	3301      	adds	r3, #1
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f47f ae7e 	bne.w	8008eb4 <HAL_GPIO_Init+0x14>
  }
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
 80091bc:	372c      	adds	r7, #44	; 0x2c
 80091be:	46bd      	mov	sp, r7
 80091c0:	bc80      	pop	{r7}
 80091c2:	4770      	bx	lr
 80091c4:	40010400 	.word	0x40010400

080091c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b089      	sub	sp, #36	; 0x24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80091d6:	e0a6      	b.n	8009326 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80091d8:	2201      	movs	r2, #1
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	fa02 f303 	lsl.w	r3, r2, r3
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	4013      	ands	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8099 	beq.w	8009320 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80091ee:	4a54      	ldr	r2, [pc, #336]	; (8009340 <HAL_GPIO_DeInit+0x178>)
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	089b      	lsrs	r3, r3, #2
 80091f4:	3302      	adds	r3, #2
 80091f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091fa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	220f      	movs	r2, #15
 8009206:	fa02 f303 	lsl.w	r3, r2, r3
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4013      	ands	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a4c      	ldr	r2, [pc, #304]	; (8009344 <HAL_GPIO_DeInit+0x17c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d01f      	beq.n	8009258 <HAL_GPIO_DeInit+0x90>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a4b      	ldr	r2, [pc, #300]	; (8009348 <HAL_GPIO_DeInit+0x180>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d019      	beq.n	8009254 <HAL_GPIO_DeInit+0x8c>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a4a      	ldr	r2, [pc, #296]	; (800934c <HAL_GPIO_DeInit+0x184>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d013      	beq.n	8009250 <HAL_GPIO_DeInit+0x88>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a49      	ldr	r2, [pc, #292]	; (8009350 <HAL_GPIO_DeInit+0x188>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d00d      	beq.n	800924c <HAL_GPIO_DeInit+0x84>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a48      	ldr	r2, [pc, #288]	; (8009354 <HAL_GPIO_DeInit+0x18c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d007      	beq.n	8009248 <HAL_GPIO_DeInit+0x80>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a47      	ldr	r2, [pc, #284]	; (8009358 <HAL_GPIO_DeInit+0x190>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d101      	bne.n	8009244 <HAL_GPIO_DeInit+0x7c>
 8009240:	2305      	movs	r3, #5
 8009242:	e00a      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009244:	2306      	movs	r3, #6
 8009246:	e008      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009248:	2304      	movs	r3, #4
 800924a:	e006      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 800924c:	2303      	movs	r3, #3
 800924e:	e004      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009250:	2302      	movs	r3, #2
 8009252:	e002      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <HAL_GPIO_DeInit+0x92>
 8009258:	2300      	movs	r3, #0
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	f002 0203 	and.w	r2, r2, #3
 8009260:	0092      	lsls	r2, r2, #2
 8009262:	4093      	lsls	r3, r2
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	429a      	cmp	r2, r3
 8009268:	d132      	bne.n	80092d0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800926a:	4b3c      	ldr	r3, [pc, #240]	; (800935c <HAL_GPIO_DeInit+0x194>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	43db      	mvns	r3, r3
 8009272:	493a      	ldr	r1, [pc, #232]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009274:	4013      	ands	r3, r2
 8009276:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009278:	4b38      	ldr	r3, [pc, #224]	; (800935c <HAL_GPIO_DeInit+0x194>)
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	43db      	mvns	r3, r3
 8009280:	4936      	ldr	r1, [pc, #216]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009282:	4013      	ands	r3, r2
 8009284:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009286:	4b35      	ldr	r3, [pc, #212]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	43db      	mvns	r3, r3
 800928e:	4933      	ldr	r1, [pc, #204]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009290:	4013      	ands	r3, r2
 8009292:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009294:	4b31      	ldr	r3, [pc, #196]	; (800935c <HAL_GPIO_DeInit+0x194>)
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	43db      	mvns	r3, r3
 800929c:	492f      	ldr	r1, [pc, #188]	; (800935c <HAL_GPIO_DeInit+0x194>)
 800929e:	4013      	ands	r3, r2
 80092a0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	220f      	movs	r2, #15
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80092b2:	4a23      	ldr	r2, [pc, #140]	; (8009340 <HAL_GPIO_DeInit+0x178>)
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	089b      	lsrs	r3, r3, #2
 80092b8:	3302      	adds	r3, #2
 80092ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	43da      	mvns	r2, r3
 80092c2:	481f      	ldr	r0, [pc, #124]	; (8009340 <HAL_GPIO_DeInit+0x178>)
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	089b      	lsrs	r3, r3, #2
 80092c8:	400a      	ands	r2, r1
 80092ca:	3302      	adds	r3, #2
 80092cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2bff      	cmp	r3, #255	; 0xff
 80092d4:	d801      	bhi.n	80092da <HAL_GPIO_DeInit+0x112>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	e001      	b.n	80092de <HAL_GPIO_DeInit+0x116>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3304      	adds	r3, #4
 80092de:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	2bff      	cmp	r3, #255	; 0xff
 80092e4:	d802      	bhi.n	80092ec <HAL_GPIO_DeInit+0x124>
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	e002      	b.n	80092f2 <HAL_GPIO_DeInit+0x12a>
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	3b08      	subs	r3, #8
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	210f      	movs	r1, #15
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009300:	43db      	mvns	r3, r3
 8009302:	401a      	ands	r2, r3
 8009304:	2104      	movs	r1, #4
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	fa01 f303 	lsl.w	r3, r1, r3
 800930c:	431a      	orrs	r2, r3
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	43db      	mvns	r3, r3
 800931a:	401a      	ands	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	3301      	adds	r3, #1
 8009324:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	fa22 f303 	lsr.w	r3, r2, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	f47f af52 	bne.w	80091d8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	3724      	adds	r7, #36	; 0x24
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	40010000 	.word	0x40010000
 8009344:	40010800 	.word	0x40010800
 8009348:	40010c00 	.word	0x40010c00
 800934c:	40011000 	.word	0x40011000
 8009350:	40011400 	.word	0x40011400
 8009354:	40011800 	.word	0x40011800
 8009358:	40011c00 	.word	0x40011c00
 800935c:	40010400 	.word	0x40010400

08009360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	4013      	ands	r3, r2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009378:	2301      	movs	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
 800937c:	e001      	b.n	8009382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	bc80      	pop	{r7}
 800938c:	4770      	bx	lr

0800938e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	807b      	strh	r3, [r7, #2]
 800939a:	4613      	mov	r3, r2
 800939c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800939e:	787b      	ldrb	r3, [r7, #1]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093a4:	887a      	ldrh	r2, [r7, #2]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093aa:	e003      	b.n	80093b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093ac:	887b      	ldrh	r3, [r7, #2]
 80093ae:	041a      	lsls	r2, r3, #16
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	611a      	str	r2, [r3, #16]
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bc80      	pop	{r7}
 80093bc:	4770      	bx	lr

080093be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80093d0:	887a      	ldrh	r2, [r7, #2]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4013      	ands	r3, r2
 80093d6:	041a      	lsls	r2, r3, #16
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	43d9      	mvns	r1, r3
 80093dc:	887b      	ldrh	r3, [r7, #2]
 80093de:	400b      	ands	r3, r1
 80093e0:	431a      	orrs	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	611a      	str	r2, [r3, #16]
}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bc80      	pop	{r7}
 80093ee:	4770      	bx	lr

080093f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e12b      	b.n	800965a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7fe fff8 	bl	800840c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2224      	movs	r2, #36	; 0x24
 8009420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0201 	bic.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009454:	f001 fdb8 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8009458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	4a81      	ldr	r2, [pc, #516]	; (8009664 <HAL_I2C_Init+0x274>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d807      	bhi.n	8009474 <HAL_I2C_Init+0x84>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a80      	ldr	r2, [pc, #512]	; (8009668 <HAL_I2C_Init+0x278>)
 8009468:	4293      	cmp	r3, r2
 800946a:	bf94      	ite	ls
 800946c:	2301      	movls	r3, #1
 800946e:	2300      	movhi	r3, #0
 8009470:	b2db      	uxtb	r3, r3
 8009472:	e006      	b.n	8009482 <HAL_I2C_Init+0x92>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a7d      	ldr	r2, [pc, #500]	; (800966c <HAL_I2C_Init+0x27c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	bf94      	ite	ls
 800947c:	2301      	movls	r3, #1
 800947e:	2300      	movhi	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e0e7      	b.n	800965a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4a78      	ldr	r2, [pc, #480]	; (8009670 <HAL_I2C_Init+0x280>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	0c9b      	lsrs	r3, r3, #18
 8009494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	4a6a      	ldr	r2, [pc, #424]	; (8009664 <HAL_I2C_Init+0x274>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d802      	bhi.n	80094c4 <HAL_I2C_Init+0xd4>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	3301      	adds	r3, #1
 80094c2:	e009      	b.n	80094d8 <HAL_I2C_Init+0xe8>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094ca:	fb02 f303 	mul.w	r3, r2, r3
 80094ce:	4a69      	ldr	r2, [pc, #420]	; (8009674 <HAL_I2C_Init+0x284>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	099b      	lsrs	r3, r3, #6
 80094d6:	3301      	adds	r3, #1
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6812      	ldr	r2, [r2, #0]
 80094dc:	430b      	orrs	r3, r1
 80094de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80094ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	495c      	ldr	r1, [pc, #368]	; (8009664 <HAL_I2C_Init+0x274>)
 80094f4:	428b      	cmp	r3, r1
 80094f6:	d819      	bhi.n	800952c <HAL_I2C_Init+0x13c>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	1e59      	subs	r1, r3, #1
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	fbb1 f3f3 	udiv	r3, r1, r3
 8009506:	1c59      	adds	r1, r3, #1
 8009508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800950c:	400b      	ands	r3, r1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <HAL_I2C_Init+0x138>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	1e59      	subs	r1, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009520:	3301      	adds	r3, #1
 8009522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009526:	e051      	b.n	80095cc <HAL_I2C_Init+0x1dc>
 8009528:	2304      	movs	r3, #4
 800952a:	e04f      	b.n	80095cc <HAL_I2C_Init+0x1dc>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d111      	bne.n	8009558 <HAL_I2C_Init+0x168>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	1e58      	subs	r0, r3, #1
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6859      	ldr	r1, [r3, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	440b      	add	r3, r1
 8009542:	fbb0 f3f3 	udiv	r3, r0, r3
 8009546:	3301      	adds	r3, #1
 8009548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800954c:	2b00      	cmp	r3, #0
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	e012      	b.n	800957e <HAL_I2C_Init+0x18e>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	1e58      	subs	r0, r3, #1
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6859      	ldr	r1, [r3, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	0099      	lsls	r1, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	fbb0 f3f3 	udiv	r3, r0, r3
 800956e:	3301      	adds	r3, #1
 8009570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009574:	2b00      	cmp	r3, #0
 8009576:	bf0c      	ite	eq
 8009578:	2301      	moveq	r3, #1
 800957a:	2300      	movne	r3, #0
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <HAL_I2C_Init+0x196>
 8009582:	2301      	movs	r3, #1
 8009584:	e022      	b.n	80095cc <HAL_I2C_Init+0x1dc>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10e      	bne.n	80095ac <HAL_I2C_Init+0x1bc>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1e58      	subs	r0, r3, #1
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6859      	ldr	r1, [r3, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	440b      	add	r3, r1
 800959c:	fbb0 f3f3 	udiv	r3, r0, r3
 80095a0:	3301      	adds	r3, #1
 80095a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095aa:	e00f      	b.n	80095cc <HAL_I2C_Init+0x1dc>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	1e58      	subs	r0, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6859      	ldr	r1, [r3, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	0099      	lsls	r1, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	fbb0 f3f3 	udiv	r3, r0, r3
 80095c2:	3301      	adds	r3, #1
 80095c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	6809      	ldr	r1, [r1, #0]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	69da      	ldr	r2, [r3, #28]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80095fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	6911      	ldr	r1, [r2, #16]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	68d2      	ldr	r2, [r2, #12]
 8009606:	4311      	orrs	r1, r2
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	6812      	ldr	r2, [r2, #0]
 800960c:	430b      	orrs	r3, r1
 800960e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695a      	ldr	r2, [r3, #20]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	431a      	orrs	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0201 	orr.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	000186a0 	.word	0x000186a0
 8009668:	001e847f 	.word	0x001e847f
 800966c:	003d08ff 	.word	0x003d08ff
 8009670:	431bde83 	.word	0x431bde83
 8009674:	10624dd3 	.word	0x10624dd3

08009678 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e021      	b.n	80096ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2224      	movs	r2, #36	; 0x24
 800968e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0201 	bic.w	r2, r2, #1
 80096a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7fe fef0 	bl	8008488 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af02      	add	r7, sp, #8
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	607a      	str	r2, [r7, #4]
 80096e2:	461a      	mov	r2, r3
 80096e4:	460b      	mov	r3, r1
 80096e6:	817b      	strh	r3, [r7, #10]
 80096e8:	4613      	mov	r3, r2
 80096ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096ec:	f7ff f85e 	bl	80087ac <HAL_GetTick>
 80096f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	f040 80e0 	bne.w	80098c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	2319      	movs	r3, #25
 8009706:	2201      	movs	r2, #1
 8009708:	4970      	ldr	r1, [pc, #448]	; (80098cc <HAL_I2C_Master_Transmit+0x1f4>)
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 fe5c 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009716:	2302      	movs	r3, #2
 8009718:	e0d3      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009720:	2b01      	cmp	r3, #1
 8009722:	d101      	bne.n	8009728 <HAL_I2C_Master_Transmit+0x50>
 8009724:	2302      	movs	r3, #2
 8009726:	e0cc      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b01      	cmp	r3, #1
 800973c:	d007      	beq.n	800974e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f042 0201 	orr.w	r2, r2, #1
 800974c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800975c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2221      	movs	r2, #33	; 0x21
 8009762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2210      	movs	r2, #16
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	893a      	ldrh	r2, [r7, #8]
 800977e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009784:	b29a      	uxth	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a50      	ldr	r2, [pc, #320]	; (80098d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800978e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009790:	8979      	ldrh	r1, [r7, #10]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	6a3a      	ldr	r2, [r7, #32]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 fc16 	bl	8009fc8 <I2C_MasterRequestWrite>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e08d      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80097bc:	e066      	b.n	800988c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	6a39      	ldr	r1, [r7, #32]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 ff1a 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00d      	beq.n	80097ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d107      	bne.n	80097e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e06b      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	781a      	ldrb	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b04      	cmp	r3, #4
 8009826:	d11b      	bne.n	8009860 <HAL_I2C_Master_Transmit+0x188>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982c:	2b00      	cmp	r3, #0
 800982e:	d017      	beq.n	8009860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	781a      	ldrb	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984a:	b29b      	uxth	r3, r3
 800984c:	3b01      	subs	r3, #1
 800984e:	b29a      	uxth	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009858:	3b01      	subs	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	6a39      	ldr	r1, [r7, #32]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 ff11 	bl	800a68c <I2C_WaitOnBTFFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00d      	beq.n	800988c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009874:	2b04      	cmp	r3, #4
 8009876:	d107      	bne.n	8009888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e01a      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	d194      	bne.n	80097be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	e000      	b.n	80098c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80098c0:	2302      	movs	r3, #2
  }
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	00100002 	.word	0x00100002
 80098d0:	ffff0000 	.word	0xffff0000

080098d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af02      	add	r7, sp, #8
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	4608      	mov	r0, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	461a      	mov	r2, r3
 80098e2:	4603      	mov	r3, r0
 80098e4:	817b      	strh	r3, [r7, #10]
 80098e6:	460b      	mov	r3, r1
 80098e8:	813b      	strh	r3, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098ee:	f7fe ff5d 	bl	80087ac <HAL_GetTick>
 80098f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	f040 80d9 	bne.w	8009ab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	2319      	movs	r3, #25
 8009908:	2201      	movs	r2, #1
 800990a:	496d      	ldr	r1, [pc, #436]	; (8009ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fd5b 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009918:	2302      	movs	r3, #2
 800991a:	e0cc      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_I2C_Mem_Write+0x56>
 8009926:	2302      	movs	r3, #2
 8009928:	e0c5      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b01      	cmp	r3, #1
 800993e:	d007      	beq.n	8009950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800995e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2221      	movs	r2, #33	; 0x21
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2240      	movs	r2, #64	; 0x40
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a3a      	ldr	r2, [r7, #32]
 800997a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009986:	b29a      	uxth	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4a4d      	ldr	r2, [pc, #308]	; (8009ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8009990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009992:	88f8      	ldrh	r0, [r7, #6]
 8009994:	893a      	ldrh	r2, [r7, #8]
 8009996:	8979      	ldrh	r1, [r7, #10]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	9301      	str	r3, [sp, #4]
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	4603      	mov	r3, r0
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 fb92 	bl	800a0cc <I2C_RequestMemoryWrite>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d052      	beq.n	8009a54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e081      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fe20 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00d      	beq.n	80099de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d107      	bne.n	80099da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e06b      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	781a      	ldrb	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b04      	cmp	r3, #4
 8009a1a:	d11b      	bne.n	8009a54 <HAL_I2C_Mem_Write+0x180>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d017      	beq.n	8009a54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	781a      	ldrb	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1aa      	bne.n	80099b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fe13 	bl	800a68c <I2C_WaitOnBTFFlagUntilTimeout>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00d      	beq.n	8009a88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d107      	bne.n	8009a84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e016      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e000      	b.n	8009ab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009ab4:	2302      	movs	r3, #2
  }
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	00100002 	.word	0x00100002
 8009ac4:	ffff0000 	.word	0xffff0000

08009ac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08c      	sub	sp, #48	; 0x30
 8009acc:	af02      	add	r7, sp, #8
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	817b      	strh	r3, [r7, #10]
 8009ada:	460b      	mov	r3, r1
 8009adc:	813b      	strh	r3, [r7, #8]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ae6:	f7fe fe61 	bl	80087ac <HAL_GetTick>
 8009aea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	f040 8244 	bne.w	8009f82 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	2319      	movs	r3, #25
 8009b00:	2201      	movs	r2, #1
 8009b02:	4982      	ldr	r1, [pc, #520]	; (8009d0c <HAL_I2C_Mem_Read+0x244>)
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 fc5f 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b10:	2302      	movs	r3, #2
 8009b12:	e237      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d101      	bne.n	8009b22 <HAL_I2C_Mem_Read+0x5a>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	e230      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d007      	beq.n	8009b48 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 0201 	orr.w	r2, r2, #1
 8009b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2222      	movs	r2, #34	; 0x22
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2240      	movs	r2, #64	; 0x40
 8009b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4a62      	ldr	r2, [pc, #392]	; (8009d10 <HAL_I2C_Mem_Read+0x248>)
 8009b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b8a:	88f8      	ldrh	r0, [r7, #6]
 8009b8c:	893a      	ldrh	r2, [r7, #8]
 8009b8e:	8979      	ldrh	r1, [r7, #10]
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	4603      	mov	r3, r0
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 fb2c 	bl	800a1f8 <I2C_RequestMemoryRead>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e1ec      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d113      	bne.n	8009bda <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	61fb      	str	r3, [r7, #28]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	61fb      	str	r3, [r7, #28]
 8009bc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	e1c0      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d11e      	bne.n	8009c20 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bf2:	b672      	cpsid	i
}
 8009bf4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61bb      	str	r3, [r7, #24]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c1c:	b662      	cpsie	i
}
 8009c1e:	e035      	b.n	8009c8c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d11e      	bne.n	8009c66 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c38:	b672      	cpsid	i
}
 8009c3a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	617b      	str	r3, [r7, #20]
 8009c50:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c62:	b662      	cpsie	i
}
 8009c64:	e012      	b.n	8009c8c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c74:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c76:	2300      	movs	r3, #0
 8009c78:	613b      	str	r3, [r7, #16]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	613b      	str	r3, [r7, #16]
 8009c8a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c8c:	e166      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	f200 811f 	bhi.w	8009ed6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d123      	bne.n	8009ce8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fd39 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e167      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ce6:	e139      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d152      	bne.n	8009d96 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4906      	ldr	r1, [pc, #24]	; (8009d14 <HAL_I2C_Mem_Read+0x24c>)
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fb64 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d008      	beq.n	8009d18 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e13c      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
 8009d0a:	bf00      	nop
 8009d0c:	00100002 	.word	0x00100002
 8009d10:	ffff0000 	.word	0xffff0000
 8009d14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d18:	b672      	cpsid	i
}
 8009d1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691a      	ldr	r2, [r3, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d5e:	b662      	cpsie	i
}
 8009d60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d94:	e0e2      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	497b      	ldr	r1, [pc, #492]	; (8009f8c <HAL_I2C_Mem_Read+0x4c4>)
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fb11 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0e9      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dc0:	b672      	cpsid	i
}
 8009dc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	691a      	ldr	r2, [r3, #16]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	b2d2      	uxtb	r2, r2
 8009dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de0:	3b01      	subs	r3, #1
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009df6:	4b66      	ldr	r3, [pc, #408]	; (8009f90 <HAL_I2C_Mem_Read+0x4c8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	08db      	lsrs	r3, r3, #3
 8009dfc:	4a65      	ldr	r2, [pc, #404]	; (8009f94 <HAL_I2C_Mem_Read+0x4cc>)
 8009dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009e02:	0a1a      	lsrs	r2, r3, #8
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	00da      	lsls	r2, r3, #3
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d118      	bne.n	8009e4e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	f043 0220 	orr.w	r2, r3, #32
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e3e:	b662      	cpsie	i
}
 8009e40:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e09a      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	f003 0304 	and.w	r3, r3, #4
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d1d9      	bne.n	8009e10 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	b2d2      	uxtb	r2, r2
 8009e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	3b01      	subs	r3, #1
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e9e:	b662      	cpsie	i
}
 8009ea0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	691a      	ldr	r2, [r3, #16]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ed4:	e042      	b.n	8009f5c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fc1e 	bl	800a71c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e04c      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	b2d2      	uxtb	r2, r2
 8009ef6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f06:	3b01      	subs	r3, #1
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d118      	bne.n	8009f5c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691a      	ldr	r2, [r3, #16]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	b2d2      	uxtb	r2, r2
 8009f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f46:	3b01      	subs	r3, #1
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f47f ae94 	bne.w	8009c8e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2220      	movs	r2, #32
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e000      	b.n	8009f84 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f82:	2302      	movs	r3, #2
  }
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3728      	adds	r7, #40	; 0x28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	00010004 	.word	0x00010004
 8009f90:	200000a0 	.word	0x200000a0
 8009f94:	14f8b589 	.word	0x14f8b589

08009f98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa6:	b2db      	uxtb	r3, r3
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr

08009fb2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bc80      	pop	{r7}
 8009fc6:	4770      	bx	lr

08009fc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d006      	beq.n	8009ff2 <I2C_MasterRequestWrite+0x2a>
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d003      	beq.n	8009ff2 <I2C_MasterRequestWrite+0x2a>
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ff0:	d108      	bne.n	800a004 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	e00b      	b.n	800a01c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a008:	2b12      	cmp	r3, #18
 800a00a:	d107      	bne.n	800a01c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a01a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f9cd 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00d      	beq.n	800a050 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a042:	d103      	bne.n	800a04c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a04a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e035      	b.n	800a0bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a058:	d108      	bne.n	800a06c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a05a:	897b      	ldrh	r3, [r7, #10]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	461a      	mov	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a068:	611a      	str	r2, [r3, #16]
 800a06a:	e01b      	b.n	800a0a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a06c:	897b      	ldrh	r3, [r7, #10]
 800a06e:	11db      	asrs	r3, r3, #7
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0306 	and.w	r3, r3, #6
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f063 030f 	orn	r3, r3, #15
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	490e      	ldr	r1, [pc, #56]	; (800a0c4 <I2C_MasterRequestWrite+0xfc>)
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fa16 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e010      	b.n	800a0bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a09a:	897b      	ldrh	r3, [r7, #10]
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	4907      	ldr	r1, [pc, #28]	; (800a0c8 <I2C_MasterRequestWrite+0x100>)
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 fa06 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e000      	b.n	800a0bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	00010008 	.word	0x00010008
 800a0c8:	00010002 	.word	0x00010002

0800a0cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4603      	mov	r3, r0
 800a0dc:	817b      	strh	r3, [r7, #10]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	813b      	strh	r3, [r7, #8]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 f960 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00d      	beq.n	800a12a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a11c:	d103      	bne.n	800a126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e05f      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a12a:	897b      	ldrh	r3, [r7, #10]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	6a3a      	ldr	r2, [r7, #32]
 800a13e:	492d      	ldr	r1, [pc, #180]	; (800a1f4 <I2C_RequestMemoryWrite+0x128>)
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f9bb 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e04c      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a168:	6a39      	ldr	r1, [r7, #32]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fa46 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00d      	beq.n	800a192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	d107      	bne.n	800a18e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a18c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e02b      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d105      	bne.n	800a1a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a198:	893b      	ldrh	r3, [r7, #8]
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	611a      	str	r2, [r3, #16]
 800a1a2:	e021      	b.n	800a1e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1a4:	893b      	ldrh	r3, [r7, #8]
 800a1a6:	0a1b      	lsrs	r3, r3, #8
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	6a39      	ldr	r1, [r7, #32]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fa20 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d107      	bne.n	800a1da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e005      	b.n	800a1ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1de:	893b      	ldrh	r3, [r7, #8]
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	00010002 	.word	0x00010002

0800a1f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	4608      	mov	r0, r1
 800a202:	4611      	mov	r1, r2
 800a204:	461a      	mov	r2, r3
 800a206:	4603      	mov	r3, r0
 800a208:	817b      	strh	r3, [r7, #10]
 800a20a:	460b      	mov	r3, r1
 800a20c:	813b      	strh	r3, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	2200      	movs	r2, #0
 800a23a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f8c2 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00d      	beq.n	800a266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a258:	d103      	bne.n	800a262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e0aa      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a266:	897b      	ldrh	r3, [r7, #10]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	6a3a      	ldr	r2, [r7, #32]
 800a27a:	4952      	ldr	r1, [pc, #328]	; (800a3c4 <I2C_RequestMemoryRead+0x1cc>)
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f91d 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e097      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	617b      	str	r3, [r7, #20]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a4:	6a39      	ldr	r1, [r7, #32]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 f9a8 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00d      	beq.n	800a2ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d107      	bne.n	800a2ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e076      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d105      	bne.n	800a2e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2d4:	893b      	ldrh	r3, [r7, #8]
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	611a      	str	r2, [r3, #16]
 800a2de:	e021      	b.n	800a324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2e0:	893b      	ldrh	r3, [r7, #8]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	6a39      	ldr	r1, [r7, #32]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f982 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a302:	2b04      	cmp	r3, #4
 800a304:	d107      	bne.n	800a316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e050      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a31a:	893b      	ldrh	r3, [r7, #8]
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a326:	6a39      	ldr	r1, [r7, #32]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f967 	bl	800a5fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00d      	beq.n	800a350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d107      	bne.n	800a34c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a34a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e035      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a35e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	2200      	movs	r2, #0
 800a368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f82b 	bl	800a3c8 <I2C_WaitOnFlagUntilTimeout>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00d      	beq.n	800a394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a386:	d103      	bne.n	800a390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a38e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e013      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a394:	897b      	ldrh	r3, [r7, #10]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f043 0301 	orr.w	r3, r3, #1
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	6a3a      	ldr	r2, [r7, #32]
 800a3a8:	4906      	ldr	r1, [pc, #24]	; (800a3c4 <I2C_RequestMemoryRead+0x1cc>)
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 f886 	bl	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	00010002 	.word	0x00010002

0800a3c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3d8:	e048      	b.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e0:	d044      	beq.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e2:	f7fe f9e3 	bl	80087ac <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d139      	bne.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	0c1b      	lsrs	r3, r3, #16
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d10d      	bne.n	800a41e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	43da      	mvns	r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	4013      	ands	r3, r2
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	bf0c      	ite	eq
 800a414:	2301      	moveq	r3, #1
 800a416:	2300      	movne	r3, #0
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	461a      	mov	r2, r3
 800a41c:	e00c      	b.n	800a438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	43da      	mvns	r2, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4013      	ands	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d116      	bne.n	800a46c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	f043 0220 	orr.w	r2, r3, #32
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e023      	b.n	800a4b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	0c1b      	lsrs	r3, r3, #16
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	d10d      	bne.n	800a492 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	43da      	mvns	r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	4013      	ands	r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	bf0c      	ite	eq
 800a488:	2301      	moveq	r3, #1
 800a48a:	2300      	movne	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	e00c      	b.n	800a4ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	43da      	mvns	r2, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	4013      	ands	r3, r2
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	bf0c      	ite	eq
 800a4a4:	2301      	moveq	r3, #1
 800a4a6:	2300      	movne	r3, #0
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d093      	beq.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4ca:	e071      	b.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4da:	d123      	bne.n	800a524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a510:	f043 0204 	orr.w	r2, r3, #4
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e067      	b.n	800a5f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a52a:	d041      	beq.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52c:	f7fe f93e 	bl	80087ac <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d302      	bcc.n	800a542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d136      	bne.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	0c1b      	lsrs	r3, r3, #16
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10c      	bne.n	800a566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	43da      	mvns	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bf14      	ite	ne
 800a55e:	2301      	movne	r3, #1
 800a560:	2300      	moveq	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	e00b      	b.n	800a57e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	43da      	mvns	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	4013      	ands	r3, r2
 800a572:	b29b      	uxth	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	bf14      	ite	ne
 800a578:	2301      	movne	r3, #1
 800a57a:	2300      	moveq	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d016      	beq.n	800a5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59c:	f043 0220 	orr.w	r2, r3, #32
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e021      	b.n	800a5f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	0c1b      	lsrs	r3, r3, #16
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d10c      	bne.n	800a5d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	43da      	mvns	r2, r3
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bf14      	ite	ne
 800a5cc:	2301      	movne	r3, #1
 800a5ce:	2300      	moveq	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	e00b      	b.n	800a5ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	43da      	mvns	r2, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	bf14      	ite	ne
 800a5e6:	2301      	movne	r3, #1
 800a5e8:	2300      	moveq	r3, #0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f47f af6d 	bne.w	800a4cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a608:	e034      	b.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 f8e3 	bl	800a7d6 <I2C_IsAcknowledgeFailed>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e034      	b.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a620:	d028      	beq.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a622:	f7fe f8c3 	bl	80087ac <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d302      	bcc.n	800a638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11d      	bne.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a642:	2b80      	cmp	r3, #128	; 0x80
 800a644:	d016      	beq.n	800a674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	f043 0220 	orr.w	r2, r3, #32
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e007      	b.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a67e:	2b80      	cmp	r3, #128	; 0x80
 800a680:	d1c3      	bne.n	800a60a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a698:	e034      	b.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f89b 	bl	800a7d6 <I2C_IsAcknowledgeFailed>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e034      	b.n	800a714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b0:	d028      	beq.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6b2:	f7fe f87b 	bl	80087ac <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d302      	bcc.n	800a6c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11d      	bne.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d016      	beq.n	800a704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	f043 0220 	orr.w	r2, r3, #32
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e007      	b.n	800a714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	f003 0304 	and.w	r3, r3, #4
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d1c3      	bne.n	800a69a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a728:	e049      	b.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b10      	cmp	r3, #16
 800a736:	d119      	bne.n	800a76c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f06f 0210 	mvn.w	r2, #16
 800a740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e030      	b.n	800a7ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76c:	f7fe f81e 	bl	80087ac <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d302      	bcc.n	800a782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d11d      	bne.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a78c:	2b40      	cmp	r3, #64	; 0x40
 800a78e:	d016      	beq.n	800a7be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2220      	movs	r2, #32
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7aa:	f043 0220 	orr.w	r2, r3, #32
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e007      	b.n	800a7ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c8:	2b40      	cmp	r3, #64	; 0x40
 800a7ca:	d1ae      	bne.n	800a72a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ec:	d11b      	bne.n	800a826 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	f043 0204 	orr.w	r2, r3, #4
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bc80      	pop	{r7}
 800a830:	4770      	bx	lr
	...

0800a834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e272      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 8087 	beq.w	800a962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a854:	4b92      	ldr	r3, [pc, #584]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f003 030c 	and.w	r3, r3, #12
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d00c      	beq.n	800a87a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a860:	4b8f      	ldr	r3, [pc, #572]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f003 030c 	and.w	r3, r3, #12
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d112      	bne.n	800a892 <HAL_RCC_OscConfig+0x5e>
 800a86c:	4b8c      	ldr	r3, [pc, #560]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a878:	d10b      	bne.n	800a892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a87a:	4b89      	ldr	r3, [pc, #548]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d06c      	beq.n	800a960 <HAL_RCC_OscConfig+0x12c>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d168      	bne.n	800a960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e24c      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a89a:	d106      	bne.n	800a8aa <HAL_RCC_OscConfig+0x76>
 800a89c:	4b80      	ldr	r3, [pc, #512]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a7f      	ldr	r2, [pc, #508]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	e02e      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10c      	bne.n	800a8cc <HAL_RCC_OscConfig+0x98>
 800a8b2:	4b7b      	ldr	r3, [pc, #492]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a7a      	ldr	r2, [pc, #488]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	4b78      	ldr	r3, [pc, #480]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a77      	ldr	r2, [pc, #476]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	e01d      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8d4:	d10c      	bne.n	800a8f0 <HAL_RCC_OscConfig+0xbc>
 800a8d6:	4b72      	ldr	r3, [pc, #456]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a71      	ldr	r2, [pc, #452]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4b6f      	ldr	r3, [pc, #444]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a6e      	ldr	r2, [pc, #440]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	e00b      	b.n	800a908 <HAL_RCC_OscConfig+0xd4>
 800a8f0:	4b6b      	ldr	r3, [pc, #428]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a6a      	ldr	r2, [pc, #424]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	4b68      	ldr	r3, [pc, #416]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a67      	ldr	r2, [pc, #412]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d013      	beq.n	800a938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a910:	f7fd ff4c 	bl	80087ac <HAL_GetTick>
 800a914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a916:	e008      	b.n	800a92a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a918:	f7fd ff48 	bl	80087ac <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b64      	cmp	r3, #100	; 0x64
 800a924:	d901      	bls.n	800a92a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e200      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a92a:	4b5d      	ldr	r3, [pc, #372]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f0      	beq.n	800a918 <HAL_RCC_OscConfig+0xe4>
 800a936:	e014      	b.n	800a962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a938:	f7fd ff38 	bl	80087ac <HAL_GetTick>
 800a93c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a93e:	e008      	b.n	800a952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a940:	f7fd ff34 	bl	80087ac <HAL_GetTick>
 800a944:	4602      	mov	r2, r0
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	2b64      	cmp	r3, #100	; 0x64
 800a94c:	d901      	bls.n	800a952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e1ec      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a952:	4b53      	ldr	r3, [pc, #332]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1f0      	bne.n	800a940 <HAL_RCC_OscConfig+0x10c>
 800a95e:	e000      	b.n	800a962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d063      	beq.n	800aa36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a96e:	4b4c      	ldr	r3, [pc, #304]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f003 030c 	and.w	r3, r3, #12
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00b      	beq.n	800a992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a97a:	4b49      	ldr	r3, [pc, #292]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f003 030c 	and.w	r3, r3, #12
 800a982:	2b08      	cmp	r3, #8
 800a984:	d11c      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x18c>
 800a986:	4b46      	ldr	r3, [pc, #280]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d116      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a992:	4b43      	ldr	r3, [pc, #268]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <HAL_RCC_OscConfig+0x176>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d001      	beq.n	800a9aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e1c0      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9aa:	4b3d      	ldr	r3, [pc, #244]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	4939      	ldr	r1, [pc, #228]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9be:	e03a      	b.n	800aa36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d020      	beq.n	800aa0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9c8:	4b36      	ldr	r3, [pc, #216]	; (800aaa4 <HAL_RCC_OscConfig+0x270>)
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ce:	f7fd feed 	bl	80087ac <HAL_GetTick>
 800a9d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9d4:	e008      	b.n	800a9e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9d6:	f7fd fee9 	bl	80087ac <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d901      	bls.n	800a9e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e1a1      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9e8:	4b2d      	ldr	r3, [pc, #180]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0f0      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f4:	4b2a      	ldr	r3, [pc, #168]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4927      	ldr	r1, [pc, #156]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	600b      	str	r3, [r1, #0]
 800aa08:	e015      	b.n	800aa36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa0a:	4b26      	ldr	r3, [pc, #152]	; (800aaa4 <HAL_RCC_OscConfig+0x270>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa10:	f7fd fecc 	bl	80087ac <HAL_GetTick>
 800aa14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa16:	e008      	b.n	800aa2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa18:	f7fd fec8 	bl	80087ac <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d901      	bls.n	800aa2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e180      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa2a:	4b1d      	ldr	r3, [pc, #116]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f0      	bne.n	800aa18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0308 	and.w	r3, r3, #8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d03a      	beq.n	800aab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d019      	beq.n	800aa7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa4a:	4b17      	ldr	r3, [pc, #92]	; (800aaa8 <HAL_RCC_OscConfig+0x274>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa50:	f7fd feac 	bl	80087ac <HAL_GetTick>
 800aa54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa56:	e008      	b.n	800aa6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa58:	f7fd fea8 	bl	80087ac <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d901      	bls.n	800aa6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e160      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <HAL_RCC_OscConfig+0x26c>)
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0f0      	beq.n	800aa58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa76:	2001      	movs	r0, #1
 800aa78:	f000 face 	bl	800b018 <RCC_Delay>
 800aa7c:	e01c      	b.n	800aab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <HAL_RCC_OscConfig+0x274>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa84:	f7fd fe92 	bl	80087ac <HAL_GetTick>
 800aa88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa8a:	e00f      	b.n	800aaac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa8c:	f7fd fe8e 	bl	80087ac <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d908      	bls.n	800aaac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e146      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
 800aa9e:	bf00      	nop
 800aaa0:	40021000 	.word	0x40021000
 800aaa4:	42420000 	.word	0x42420000
 800aaa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaac:	4b92      	ldr	r3, [pc, #584]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e9      	bne.n	800aa8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 80a6 	beq.w	800ac12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aaca:	4b8b      	ldr	r3, [pc, #556]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10d      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aad6:	4b88      	ldr	r3, [pc, #544]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	4a87      	ldr	r2, [pc, #540]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aadc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aae0:	61d3      	str	r3, [r2, #28]
 800aae2:	4b85      	ldr	r3, [pc, #532]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaea:	60bb      	str	r3, [r7, #8]
 800aaec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaf2:	4b82      	ldr	r3, [pc, #520]	; (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d118      	bne.n	800ab30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aafe:	4b7f      	ldr	r3, [pc, #508]	; (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a7e      	ldr	r2, [pc, #504]	; (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab0a:	f7fd fe4f 	bl	80087ac <HAL_GetTick>
 800ab0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab10:	e008      	b.n	800ab24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab12:	f7fd fe4b 	bl	80087ac <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b64      	cmp	r3, #100	; 0x64
 800ab1e:	d901      	bls.n	800ab24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e103      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab24:	4b75      	ldr	r3, [pc, #468]	; (800acfc <HAL_RCC_OscConfig+0x4c8>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0f0      	beq.n	800ab12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d106      	bne.n	800ab46 <HAL_RCC_OscConfig+0x312>
 800ab38:	4b6f      	ldr	r3, [pc, #444]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	4a6e      	ldr	r2, [pc, #440]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	6213      	str	r3, [r2, #32]
 800ab44:	e02d      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10c      	bne.n	800ab68 <HAL_RCC_OscConfig+0x334>
 800ab4e:	4b6a      	ldr	r3, [pc, #424]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	4a69      	ldr	r2, [pc, #420]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	f023 0301 	bic.w	r3, r3, #1
 800ab58:	6213      	str	r3, [r2, #32]
 800ab5a:	4b67      	ldr	r3, [pc, #412]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	4a66      	ldr	r2, [pc, #408]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab60:	f023 0304 	bic.w	r3, r3, #4
 800ab64:	6213      	str	r3, [r2, #32]
 800ab66:	e01c      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b05      	cmp	r3, #5
 800ab6e:	d10c      	bne.n	800ab8a <HAL_RCC_OscConfig+0x356>
 800ab70:	4b61      	ldr	r3, [pc, #388]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	4a60      	ldr	r2, [pc, #384]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab76:	f043 0304 	orr.w	r3, r3, #4
 800ab7a:	6213      	str	r3, [r2, #32]
 800ab7c:	4b5e      	ldr	r3, [pc, #376]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	4a5d      	ldr	r2, [pc, #372]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab82:	f043 0301 	orr.w	r3, r3, #1
 800ab86:	6213      	str	r3, [r2, #32]
 800ab88:	e00b      	b.n	800aba2 <HAL_RCC_OscConfig+0x36e>
 800ab8a:	4b5b      	ldr	r3, [pc, #364]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	4a5a      	ldr	r2, [pc, #360]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	6213      	str	r3, [r2, #32]
 800ab96:	4b58      	ldr	r3, [pc, #352]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	4a57      	ldr	r2, [pc, #348]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ab9c:	f023 0304 	bic.w	r3, r3, #4
 800aba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d015      	beq.n	800abd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abaa:	f7fd fdff 	bl	80087ac <HAL_GetTick>
 800abae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abb0:	e00a      	b.n	800abc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abb2:	f7fd fdfb 	bl	80087ac <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d901      	bls.n	800abc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e0b1      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc8:	4b4b      	ldr	r3, [pc, #300]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0ee      	beq.n	800abb2 <HAL_RCC_OscConfig+0x37e>
 800abd4:	e014      	b.n	800ac00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abd6:	f7fd fde9 	bl	80087ac <HAL_GetTick>
 800abda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abdc:	e00a      	b.n	800abf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abde:	f7fd fde5 	bl	80087ac <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abec:	4293      	cmp	r3, r2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e09b      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abf4:	4b40      	ldr	r3, [pc, #256]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1ee      	bne.n	800abde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d105      	bne.n	800ac12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac06:	4b3c      	ldr	r3, [pc, #240]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	4a3b      	ldr	r2, [pc, #236]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 8087 	beq.w	800ad2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac1c:	4b36      	ldr	r3, [pc, #216]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f003 030c 	and.w	r3, r3, #12
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d061      	beq.n	800acec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	69db      	ldr	r3, [r3, #28]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d146      	bne.n	800acbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac30:	4b33      	ldr	r3, [pc, #204]	; (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac36:	f7fd fdb9 	bl	80087ac <HAL_GetTick>
 800ac3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac3c:	e008      	b.n	800ac50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac3e:	f7fd fdb5 	bl	80087ac <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d901      	bls.n	800ac50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e06d      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac50:	4b29      	ldr	r3, [pc, #164]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1f0      	bne.n	800ac3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac64:	d108      	bne.n	800ac78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac66:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	4921      	ldr	r1, [pc, #132]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac74:	4313      	orrs	r3, r2
 800ac76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac78:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a19      	ldr	r1, [r3, #32]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	491b      	ldr	r1, [pc, #108]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac90:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac96:	f7fd fd89 	bl	80087ac <HAL_GetTick>
 800ac9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac9c:	e008      	b.n	800acb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac9e:	f7fd fd85 	bl	80087ac <HAL_GetTick>
 800aca2:	4602      	mov	r2, r0
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d901      	bls.n	800acb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e03d      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acb0:	4b11      	ldr	r3, [pc, #68]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0f0      	beq.n	800ac9e <HAL_RCC_OscConfig+0x46a>
 800acbc:	e035      	b.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acbe:	4b10      	ldr	r3, [pc, #64]	; (800ad00 <HAL_RCC_OscConfig+0x4cc>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acc4:	f7fd fd72 	bl	80087ac <HAL_GetTick>
 800acc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acca:	e008      	b.n	800acde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800accc:	f7fd fd6e 	bl	80087ac <HAL_GetTick>
 800acd0:	4602      	mov	r2, r0
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d901      	bls.n	800acde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e026      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acde:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <HAL_RCC_OscConfig+0x4c4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1f0      	bne.n	800accc <HAL_RCC_OscConfig+0x498>
 800acea:	e01e      	b.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d107      	bne.n	800ad04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e019      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
 800acf8:	40021000 	.word	0x40021000
 800acfc:	40007000 	.word	0x40007000
 800ad00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad04:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <HAL_RCC_OscConfig+0x500>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d106      	bne.n	800ad26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d001      	beq.n	800ad2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	40021000 	.word	0x40021000

0800ad38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e0d0      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad4c:	4b6a      	ldr	r3, [pc, #424]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d910      	bls.n	800ad7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad5a:	4b67      	ldr	r3, [pc, #412]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f023 0207 	bic.w	r2, r3, #7
 800ad62:	4965      	ldr	r1, [pc, #404]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad6a:	4b63      	ldr	r3, [pc, #396]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 0307 	and.w	r3, r3, #7
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d001      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e0b8      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d020      	beq.n	800adca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d005      	beq.n	800ada0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad94:	4b59      	ldr	r3, [pc, #356]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	4a58      	ldr	r2, [pc, #352]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ad9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0308 	and.w	r3, r3, #8
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adac:	4b53      	ldr	r3, [pc, #332]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	4a52      	ldr	r2, [pc, #328]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800adb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adb8:	4b50      	ldr	r3, [pc, #320]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	494d      	ldr	r1, [pc, #308]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d040      	beq.n	800ae58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d107      	bne.n	800adee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adde:	4b47      	ldr	r3, [pc, #284]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d115      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e07f      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d107      	bne.n	800ae06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adf6:	4b41      	ldr	r3, [pc, #260]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e073      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae06:	4b3d      	ldr	r3, [pc, #244]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e06b      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae16:	4b39      	ldr	r3, [pc, #228]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f023 0203 	bic.w	r2, r3, #3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4936      	ldr	r1, [pc, #216]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae28:	f7fd fcc0 	bl	80087ac <HAL_GetTick>
 800ae2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae2e:	e00a      	b.n	800ae46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae30:	f7fd fcbc 	bl	80087ac <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e053      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae46:	4b2d      	ldr	r3, [pc, #180]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	f003 020c 	and.w	r2, r3, #12
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d1eb      	bne.n	800ae30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae58:	4b27      	ldr	r3, [pc, #156]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0307 	and.w	r3, r3, #7
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d210      	bcs.n	800ae88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae66:	4b24      	ldr	r3, [pc, #144]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f023 0207 	bic.w	r2, r3, #7
 800ae6e:	4922      	ldr	r1, [pc, #136]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae76:	4b20      	ldr	r3, [pc, #128]	; (800aef8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d001      	beq.n	800ae88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e032      	b.n	800aeee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d008      	beq.n	800aea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae94:	4b19      	ldr	r3, [pc, #100]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	4916      	ldr	r1, [pc, #88]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0308 	and.w	r3, r3, #8
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d009      	beq.n	800aec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aeb2:	4b12      	ldr	r3, [pc, #72]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	490e      	ldr	r1, [pc, #56]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aec6:	f000 f821 	bl	800af0c <HAL_RCC_GetSysClockFreq>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <HAL_RCC_ClockConfig+0x1c4>)
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	091b      	lsrs	r3, r3, #4
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	490a      	ldr	r1, [pc, #40]	; (800af00 <HAL_RCC_ClockConfig+0x1c8>)
 800aed8:	5ccb      	ldrb	r3, [r1, r3]
 800aeda:	fa22 f303 	lsr.w	r3, r2, r3
 800aede:	4a09      	ldr	r2, [pc, #36]	; (800af04 <HAL_RCC_ClockConfig+0x1cc>)
 800aee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aee2:	4b09      	ldr	r3, [pc, #36]	; (800af08 <HAL_RCC_ClockConfig+0x1d0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fd fc1e 	bl	8008728 <HAL_InitTick>

  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	40022000 	.word	0x40022000
 800aefc:	40021000 	.word	0x40021000
 800af00:	0800dd6c 	.word	0x0800dd6c
 800af04:	200000a0 	.word	0x200000a0
 800af08:	200000a4 	.word	0x200000a4

0800af0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	2300      	movs	r3, #0
 800af18:	60bb      	str	r3, [r7, #8]
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	2300      	movs	r3, #0
 800af20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af26:	4b1e      	ldr	r3, [pc, #120]	; (800afa0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f003 030c 	and.w	r3, r3, #12
 800af32:	2b04      	cmp	r3, #4
 800af34:	d002      	beq.n	800af3c <HAL_RCC_GetSysClockFreq+0x30>
 800af36:	2b08      	cmp	r3, #8
 800af38:	d003      	beq.n	800af42 <HAL_RCC_GetSysClockFreq+0x36>
 800af3a:	e027      	b.n	800af8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af3c:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af3e:	613b      	str	r3, [r7, #16]
      break;
 800af40:	e027      	b.n	800af92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	0c9b      	lsrs	r3, r3, #18
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	4a17      	ldr	r2, [pc, #92]	; (800afa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af4c:	5cd3      	ldrb	r3, [r2, r3]
 800af4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d010      	beq.n	800af7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af5a:	4b11      	ldr	r3, [pc, #68]	; (800afa0 <HAL_RCC_GetSysClockFreq+0x94>)
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	0c5b      	lsrs	r3, r3, #17
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	4a11      	ldr	r2, [pc, #68]	; (800afac <HAL_RCC_GetSysClockFreq+0xa0>)
 800af66:	5cd3      	ldrb	r3, [r2, r3]
 800af68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a0d      	ldr	r2, [pc, #52]	; (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af6e:	fb03 f202 	mul.w	r2, r3, r2
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	fbb2 f3f3 	udiv	r3, r2, r3
 800af78:	617b      	str	r3, [r7, #20]
 800af7a:	e004      	b.n	800af86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a0c      	ldr	r2, [pc, #48]	; (800afb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800af80:	fb02 f303 	mul.w	r3, r2, r3
 800af84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	613b      	str	r3, [r7, #16]
      break;
 800af8a:	e002      	b.n	800af92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af8c:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800af8e:	613b      	str	r3, [r7, #16]
      break;
 800af90:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af92:	693b      	ldr	r3, [r7, #16]
}
 800af94:	4618      	mov	r0, r3
 800af96:	371c      	adds	r7, #28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bc80      	pop	{r7}
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	40021000 	.word	0x40021000
 800afa4:	007a1200 	.word	0x007a1200
 800afa8:	0800dd84 	.word	0x0800dd84
 800afac:	0800dd94 	.word	0x0800dd94
 800afb0:	003d0900 	.word	0x003d0900

0800afb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afb8:	4b02      	ldr	r3, [pc, #8]	; (800afc4 <HAL_RCC_GetHCLKFreq+0x10>)
 800afba:	681b      	ldr	r3, [r3, #0]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc80      	pop	{r7}
 800afc2:	4770      	bx	lr
 800afc4:	200000a0 	.word	0x200000a0

0800afc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800afcc:	f7ff fff2 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800afd0:	4602      	mov	r2, r0
 800afd2:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	4903      	ldr	r1, [pc, #12]	; (800afec <HAL_RCC_GetPCLK1Freq+0x24>)
 800afde:	5ccb      	ldrb	r3, [r1, r3]
 800afe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	40021000 	.word	0x40021000
 800afec:	0800dd7c 	.word	0x0800dd7c

0800aff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aff4:	f7ff ffde 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800aff8:	4602      	mov	r2, r0
 800affa:	4b05      	ldr	r3, [pc, #20]	; (800b010 <HAL_RCC_GetPCLK2Freq+0x20>)
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	0adb      	lsrs	r3, r3, #11
 800b000:	f003 0307 	and.w	r3, r3, #7
 800b004:	4903      	ldr	r1, [pc, #12]	; (800b014 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b006:	5ccb      	ldrb	r3, [r1, r3]
 800b008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	40021000 	.word	0x40021000
 800b014:	0800dd7c 	.word	0x0800dd7c

0800b018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b020:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <RCC_Delay+0x34>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a0a      	ldr	r2, [pc, #40]	; (800b050 <RCC_Delay+0x38>)
 800b026:	fba2 2303 	umull	r2, r3, r2, r3
 800b02a:	0a5b      	lsrs	r3, r3, #9
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	fb02 f303 	mul.w	r3, r2, r3
 800b032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b034:	bf00      	nop
  }
  while (Delay --);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1e5a      	subs	r2, r3, #1
 800b03a:	60fa      	str	r2, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1f9      	bne.n	800b034 <RCC_Delay+0x1c>
}
 800b040:	bf00      	nop
 800b042:	bf00      	nop
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	bc80      	pop	{r7}
 800b04a:	4770      	bx	lr
 800b04c:	200000a0 	.word	0x200000a0
 800b050:	10624dd3 	.word	0x10624dd3

0800b054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e041      	b.n	800b0ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7fd fa26 	bl	80084cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3304      	adds	r3, #4
 800b090:	4619      	mov	r1, r3
 800b092:	4610      	mov	r0, r2
 800b094:	f000 fa82 	bl	800b59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b01      	cmp	r3, #1
 800b106:	d001      	beq.n	800b10c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e044      	b.n	800b196 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0201 	orr.w	r2, r2, #1
 800b122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a1d      	ldr	r2, [pc, #116]	; (800b1a0 <HAL_TIM_Base_Start_IT+0xac>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d018      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a1c      	ldr	r2, [pc, #112]	; (800b1a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d013      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b140:	d00e      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a18      	ldr	r2, [pc, #96]	; (800b1a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d009      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a16      	ldr	r2, [pc, #88]	; (800b1ac <HAL_TIM_Base_Start_IT+0xb8>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d004      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x6c>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d111      	bne.n	800b184 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b06      	cmp	r3, #6
 800b170:	d010      	beq.n	800b194 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f042 0201 	orr.w	r2, r2, #1
 800b180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b182:	e007      	b.n	800b194 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f042 0201 	orr.w	r2, r2, #1
 800b192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bc80      	pop	{r7}
 800b19e:	4770      	bx	lr
 800b1a0:	40012c00 	.word	0x40012c00
 800b1a4:	40013400 	.word	0x40013400
 800b1a8:	40000400 	.word	0x40000400
 800b1ac:	40000800 	.word	0x40000800
 800b1b0:	40000c00 	.word	0x40000c00

0800b1b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d122      	bne.n	800b210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d11b      	bne.n	800b210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f06f 0202 	mvn.w	r2, #2
 800b1e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f9b4 	bl	800b564 <HAL_TIM_IC_CaptureCallback>
 800b1fc:	e005      	b.n	800b20a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f9a7 	bl	800b552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f9b6 	bl	800b576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0304 	and.w	r3, r3, #4
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d122      	bne.n	800b264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 0304 	and.w	r3, r3, #4
 800b228:	2b04      	cmp	r3, #4
 800b22a:	d11b      	bne.n	800b264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f06f 0204 	mvn.w	r2, #4
 800b234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2202      	movs	r2, #2
 800b23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f98a 	bl	800b564 <HAL_TIM_IC_CaptureCallback>
 800b250:	e005      	b.n	800b25e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f97d 	bl	800b552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f98c 	bl	800b576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0308 	and.w	r3, r3, #8
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d122      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0308 	and.w	r3, r3, #8
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d11b      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0208 	mvn.w	r2, #8
 800b288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2204      	movs	r2, #4
 800b28e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f003 0303 	and.w	r3, r3, #3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f960 	bl	800b564 <HAL_TIM_IC_CaptureCallback>
 800b2a4:	e005      	b.n	800b2b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f953 	bl	800b552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f962 	bl	800b576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0310 	and.w	r3, r3, #16
 800b2c2:	2b10      	cmp	r3, #16
 800b2c4:	d122      	bne.n	800b30c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f003 0310 	and.w	r3, r3, #16
 800b2d0:	2b10      	cmp	r3, #16
 800b2d2:	d11b      	bne.n	800b30c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0210 	mvn.w	r2, #16
 800b2dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2208      	movs	r2, #8
 800b2e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f936 	bl	800b564 <HAL_TIM_IC_CaptureCallback>
 800b2f8:	e005      	b.n	800b306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f929 	bl	800b552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f938 	bl	800b576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b01      	cmp	r3, #1
 800b318:	d10e      	bne.n	800b338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	2b01      	cmp	r3, #1
 800b326:	d107      	bne.n	800b338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f06f 0201 	mvn.w	r2, #1
 800b330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7fc fd62 	bl	8007dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b342:	2b80      	cmp	r3, #128	; 0x80
 800b344:	d10e      	bne.n	800b364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b350:	2b80      	cmp	r3, #128	; 0x80
 800b352:	d107      	bne.n	800b364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 faa1 	bl	800b8a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36e:	2b40      	cmp	r3, #64	; 0x40
 800b370:	d10e      	bne.n	800b390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37c:	2b40      	cmp	r3, #64	; 0x40
 800b37e:	d107      	bne.n	800b390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f8fc 	bl	800b588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f003 0320 	and.w	r3, r3, #32
 800b39a:	2b20      	cmp	r3, #32
 800b39c:	d10e      	bne.n	800b3bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	2b20      	cmp	r3, #32
 800b3aa:	d107      	bne.n	800b3bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f06f 0220 	mvn.w	r2, #32
 800b3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa6c 	bl	800b894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3bc:	bf00      	nop
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d101      	bne.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	e0b4      	b.n	800b54a <HAL_TIM_ConfigClockSource+0x186>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b3fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b418:	d03e      	beq.n	800b498 <HAL_TIM_ConfigClockSource+0xd4>
 800b41a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b41e:	f200 8087 	bhi.w	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b426:	f000 8086 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x172>
 800b42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b42e:	d87f      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b430:	2b70      	cmp	r3, #112	; 0x70
 800b432:	d01a      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0xa6>
 800b434:	2b70      	cmp	r3, #112	; 0x70
 800b436:	d87b      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b438:	2b60      	cmp	r3, #96	; 0x60
 800b43a:	d050      	beq.n	800b4de <HAL_TIM_ConfigClockSource+0x11a>
 800b43c:	2b60      	cmp	r3, #96	; 0x60
 800b43e:	d877      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b440:	2b50      	cmp	r3, #80	; 0x50
 800b442:	d03c      	beq.n	800b4be <HAL_TIM_ConfigClockSource+0xfa>
 800b444:	2b50      	cmp	r3, #80	; 0x50
 800b446:	d873      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b448:	2b40      	cmp	r3, #64	; 0x40
 800b44a:	d058      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x13a>
 800b44c:	2b40      	cmp	r3, #64	; 0x40
 800b44e:	d86f      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b450:	2b30      	cmp	r3, #48	; 0x30
 800b452:	d064      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x15a>
 800b454:	2b30      	cmp	r3, #48	; 0x30
 800b456:	d86b      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b458:	2b20      	cmp	r3, #32
 800b45a:	d060      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x15a>
 800b45c:	2b20      	cmp	r3, #32
 800b45e:	d867      	bhi.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
 800b460:	2b00      	cmp	r3, #0
 800b462:	d05c      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x15a>
 800b464:	2b10      	cmp	r3, #16
 800b466:	d05a      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x15a>
 800b468:	e062      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b47a:	f000 f980 	bl	800b77e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b48c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	609a      	str	r2, [r3, #8]
      break;
 800b496:	e04f      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4a8:	f000 f969 	bl	800b77e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	689a      	ldr	r2, [r3, #8]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4ba:	609a      	str	r2, [r3, #8]
      break;
 800b4bc:	e03c      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f000 f8e0 	bl	800b690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2150      	movs	r1, #80	; 0x50
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 f937 	bl	800b74a <TIM_ITRx_SetConfig>
      break;
 800b4dc:	e02c      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f000 f8fe 	bl	800b6ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2160      	movs	r1, #96	; 0x60
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f927 	bl	800b74a <TIM_ITRx_SetConfig>
      break;
 800b4fc:	e01c      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b50a:	461a      	mov	r2, r3
 800b50c:	f000 f8c0 	bl	800b690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2140      	movs	r1, #64	; 0x40
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f917 	bl	800b74a <TIM_ITRx_SetConfig>
      break;
 800b51c:	e00c      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4619      	mov	r1, r3
 800b528:	4610      	mov	r0, r2
 800b52a:	f000 f90e 	bl	800b74a <TIM_ITRx_SetConfig>
      break;
 800b52e:	e003      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
      break;
 800b534:	e000      	b.n	800b538 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b548:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	bc80      	pop	{r7}
 800b562:	4770      	bx	lr

0800b564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b56c:	bf00      	nop
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr

0800b576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b576:	b480      	push	{r7}
 800b578:	b083      	sub	sp, #12
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	bc80      	pop	{r7}
 800b586:	4770      	bx	lr

0800b588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	bc80      	pop	{r7}
 800b598:	4770      	bx	lr
	...

0800b59c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a33      	ldr	r2, [pc, #204]	; (800b67c <TIM_Base_SetConfig+0xe0>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d013      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a32      	ldr	r2, [pc, #200]	; (800b680 <TIM_Base_SetConfig+0xe4>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d00f      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c2:	d00b      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a2f      	ldr	r2, [pc, #188]	; (800b684 <TIM_Base_SetConfig+0xe8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d007      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a2e      	ldr	r2, [pc, #184]	; (800b688 <TIM_Base_SetConfig+0xec>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d003      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a2d      	ldr	r2, [pc, #180]	; (800b68c <TIM_Base_SetConfig+0xf0>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d108      	bne.n	800b5ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a22      	ldr	r2, [pc, #136]	; (800b67c <TIM_Base_SetConfig+0xe0>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d013      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a21      	ldr	r2, [pc, #132]	; (800b680 <TIM_Base_SetConfig+0xe4>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d00f      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b604:	d00b      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a1e      	ldr	r2, [pc, #120]	; (800b684 <TIM_Base_SetConfig+0xe8>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d007      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a1d      	ldr	r2, [pc, #116]	; (800b688 <TIM_Base_SetConfig+0xec>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d003      	beq.n	800b61e <TIM_Base_SetConfig+0x82>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a1c      	ldr	r2, [pc, #112]	; (800b68c <TIM_Base_SetConfig+0xf0>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d108      	bne.n	800b630 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	689a      	ldr	r2, [r3, #8]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a09      	ldr	r2, [pc, #36]	; (800b67c <TIM_Base_SetConfig+0xe0>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d003      	beq.n	800b664 <TIM_Base_SetConfig+0xc8>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a08      	ldr	r2, [pc, #32]	; (800b680 <TIM_Base_SetConfig+0xe4>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d103      	bne.n	800b66c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	691a      	ldr	r2, [r3, #16]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	615a      	str	r2, [r3, #20]
}
 800b672:	bf00      	nop
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	bc80      	pop	{r7}
 800b67a:	4770      	bx	lr
 800b67c:	40012c00 	.word	0x40012c00
 800b680:	40013400 	.word	0x40013400
 800b684:	40000400 	.word	0x40000400
 800b688:	40000800 	.word	0x40000800
 800b68c:	40000c00 	.word	0x40000c00

0800b690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b690:	b480      	push	{r7}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	f023 0201 	bic.w	r2, r3, #1
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	011b      	lsls	r3, r3, #4
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f023 030a 	bic.w	r3, r3, #10
 800b6cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	621a      	str	r2, [r3, #32]
}
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bc80      	pop	{r7}
 800b6ea:	4770      	bx	lr

0800b6ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	f023 0210 	bic.w	r2, r3, #16
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	031b      	lsls	r3, r3, #12
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	4313      	orrs	r3, r2
 800b720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b728:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	011b      	lsls	r3, r3, #4
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	4313      	orrs	r3, r2
 800b732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	621a      	str	r2, [r3, #32]
}
 800b740:	bf00      	nop
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr

0800b74a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b085      	sub	sp, #20
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4313      	orrs	r3, r2
 800b768:	f043 0307 	orr.w	r3, r3, #7
 800b76c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	609a      	str	r2, [r3, #8]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	bc80      	pop	{r7}
 800b77c:	4770      	bx	lr

0800b77e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b77e:	b480      	push	{r7}
 800b780:	b087      	sub	sp, #28
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	60b9      	str	r1, [r7, #8]
 800b788:	607a      	str	r2, [r7, #4]
 800b78a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b798:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	021a      	lsls	r2, r3, #8
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	609a      	str	r2, [r3, #8]
}
 800b7b2:	bf00      	nop
 800b7b4:	371c      	adds	r7, #28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bc80      	pop	{r7}
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d101      	bne.n	800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	e050      	b.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	4313      	orrs	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a1b      	ldr	r2, [pc, #108]	; (800b880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d018      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a19      	ldr	r2, [pc, #100]	; (800b884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d013      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82a:	d00e      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a15      	ldr	r2, [pc, #84]	; (800b888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d009      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a14      	ldr	r2, [pc, #80]	; (800b88c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d004      	beq.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a12      	ldr	r2, [pc, #72]	; (800b890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d10c      	bne.n	800b864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	4313      	orrs	r3, r2
 800b85a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr
 800b880:	40012c00 	.word	0x40012c00
 800b884:	40013400 	.word	0x40013400
 800b888:	40000400 	.word	0x40000400
 800b88c:	40000800 	.word	0x40000800
 800b890:	40000c00 	.word	0x40000c00

0800b894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bc80      	pop	{r7}
 800b8a4:	4770      	bx	lr

0800b8a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8ae:	bf00      	nop
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bc80      	pop	{r7}
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e042      	b.n	800b950 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7fc fe1a 	bl	8008518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2224      	movs	r2, #36	; 0x24
 800b8e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68da      	ldr	r2, [r3, #12]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fcb5 	bl	800c26c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	691a      	ldr	r2, [r3, #16]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	695a      	ldr	r2, [r3, #20]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68da      	ldr	r2, [r3, #12]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2220      	movs	r2, #32
 800b944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b20      	cmp	r3, #32
 800b970:	d121      	bne.n	800b9b6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <HAL_UART_Transmit_IT+0x26>
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	e01a      	b.n	800b9b8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	88fa      	ldrh	r2, [r7, #6]
 800b98c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	88fa      	ldrh	r2, [r7, #6]
 800b992:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2221      	movs	r2, #33	; 0x21
 800b99e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e000      	b.n	800b9b8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b9b6:	2302      	movs	r3, #2
  }
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bc80      	pop	{r7}
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b0ba      	sub	sp, #232	; 0xe8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fa:	f003 030f 	and.w	r3, r3, #15
 800b9fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10f      	bne.n	800ba2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba0e:	f003 0320 	and.w	r3, r3, #32
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <HAL_UART_IRQHandler+0x66>
 800ba16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fb63 	bl	800c0ee <UART_Receive_IT>
      return;
 800ba28:	e25b      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 80de 	beq.w	800bbf0 <HAL_UART_IRQHandler+0x22c>
 800ba34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 80d1 	beq.w	800bbf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00b      	beq.n	800ba72 <HAL_UART_IRQHandler+0xae>
 800ba5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d005      	beq.n	800ba72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba6a:	f043 0201 	orr.w	r2, r3, #1
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba76:	f003 0304 	and.w	r3, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00b      	beq.n	800ba96 <HAL_UART_IRQHandler+0xd2>
 800ba7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8e:	f043 0202 	orr.w	r2, r3, #2
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba9a:	f003 0302 	and.w	r3, r3, #2
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00b      	beq.n	800baba <HAL_UART_IRQHandler+0xf6>
 800baa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d005      	beq.n	800baba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab2:	f043 0204 	orr.w	r2, r3, #4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800baba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800babe:	f003 0308 	and.w	r3, r3, #8
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d011      	beq.n	800baea <HAL_UART_IRQHandler+0x126>
 800bac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d105      	bne.n	800bade <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d005      	beq.n	800baea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bae2:	f043 0208 	orr.w	r2, r3, #8
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 81f2 	beq.w	800bed8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800baf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf8:	f003 0320 	and.w	r3, r3, #32
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d008      	beq.n	800bb12 <HAL_UART_IRQHandler+0x14e>
 800bb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 faee 	bl	800c0ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bf14      	ite	ne
 800bb20:	2301      	movne	r3, #1
 800bb22:	2300      	moveq	r3, #0
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <HAL_UART_IRQHandler+0x17a>
 800bb36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d04f      	beq.n	800bbde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f9f8 	bl	800bf34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d041      	beq.n	800bbd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3314      	adds	r3, #20
 800bb58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb60:	e853 3f00 	ldrex	r3, [r3]
 800bb64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3314      	adds	r3, #20
 800bb7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb8e:	e841 2300 	strex	r3, r2, [r1]
 800bb92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1d9      	bne.n	800bb52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d013      	beq.n	800bbce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbaa:	4a7e      	ldr	r2, [pc, #504]	; (800bda4 <HAL_UART_IRQHandler+0x3e0>)
 800bbac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd f86c 	bl	8008c90 <HAL_DMA_Abort_IT>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d016      	beq.n	800bbec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbcc:	e00e      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f99c 	bl	800bf0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd4:	e00a      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f998 	bl	800bf0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbdc:	e006      	b.n	800bbec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f994 	bl	800bf0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bbea:	e175      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbec:	bf00      	nop
    return;
 800bbee:	e173      	b.n	800bed8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	f040 814f 	bne.w	800be98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfe:	f003 0310 	and.w	r3, r3, #16
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 8148 	beq.w	800be98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc0c:	f003 0310 	and.w	r3, r3, #16
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 8141 	beq.w	800be98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc16:	2300      	movs	r3, #0
 800bc18:	60bb      	str	r3, [r7, #8]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60bb      	str	r3, [r7, #8]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	60bb      	str	r3, [r7, #8]
 800bc2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 80b6 	beq.w	800bda8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 8145 	beq.w	800bedc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	f080 813e 	bcs.w	800bedc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	f000 8088 	beq.w	800bd84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	330c      	adds	r3, #12
 800bc7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc82:	e853 3f00 	ldrex	r3, [r3]
 800bc86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	330c      	adds	r3, #12
 800bc9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bca0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bca4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bcac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bcb0:	e841 2300 	strex	r3, r2, [r1]
 800bcb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bcb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1d9      	bne.n	800bc74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcca:	e853 3f00 	ldrex	r3, [r3]
 800bcce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcd2:	f023 0301 	bic.w	r3, r3, #1
 800bcd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3314      	adds	r3, #20
 800bce0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bce4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bce8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcf0:	e841 2300 	strex	r3, r2, [r1]
 800bcf4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1e1      	bne.n	800bcc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3314      	adds	r3, #20
 800bd02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3314      	adds	r3, #20
 800bd1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd20:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e3      	bne.n	800bcfc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2220      	movs	r2, #32
 800bd38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	330c      	adds	r3, #12
 800bd48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4c:	e853 3f00 	ldrex	r3, [r3]
 800bd50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd54:	f023 0310 	bic.w	r3, r3, #16
 800bd58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	330c      	adds	r3, #12
 800bd62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd66:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd6e:	e841 2300 	strex	r3, r2, [r1]
 800bd72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1e3      	bne.n	800bd42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fc ff4b 	bl	8008c1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2202      	movs	r2, #2
 800bd88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f8bf 	bl	800bf1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bda0:	e09c      	b.n	800bedc <HAL_UART_IRQHandler+0x518>
 800bda2:	bf00      	nop
 800bda4:	0800bff9 	.word	0x0800bff9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 808e 	beq.w	800bee0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bdc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 8089 	beq.w	800bee0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	330c      	adds	r3, #12
 800bdd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd8:	e853 3f00 	ldrex	r3, [r3]
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bde4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	330c      	adds	r3, #12
 800bdee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdf2:	647a      	str	r2, [r7, #68]	; 0x44
 800bdf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e3      	bne.n	800bdce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3314      	adds	r3, #20
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	e853 3f00 	ldrex	r3, [r3]
 800be14:	623b      	str	r3, [r7, #32]
   return(result);
 800be16:	6a3b      	ldr	r3, [r7, #32]
 800be18:	f023 0301 	bic.w	r3, r3, #1
 800be1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3314      	adds	r3, #20
 800be26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be2a:	633a      	str	r2, [r7, #48]	; 0x30
 800be2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be32:	e841 2300 	strex	r3, r2, [r1]
 800be36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e3      	bne.n	800be06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2220      	movs	r2, #32
 800be42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	330c      	adds	r3, #12
 800be52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f023 0310 	bic.w	r3, r3, #16
 800be62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	330c      	adds	r3, #12
 800be6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be70:	61fa      	str	r2, [r7, #28]
 800be72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be74:	69b9      	ldr	r1, [r7, #24]
 800be76:	69fa      	ldr	r2, [r7, #28]
 800be78:	e841 2300 	strex	r3, r2, [r1]
 800be7c:	617b      	str	r3, [r7, #20]
   return(result);
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e3      	bne.n	800be4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f844 	bl	800bf1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be96:	e023      	b.n	800bee0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d009      	beq.n	800beb8 <HAL_UART_IRQHandler+0x4f4>
 800bea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f8b5 	bl	800c020 <UART_Transmit_IT>
    return;
 800beb6:	e014      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800beb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00e      	beq.n	800bee2 <HAL_UART_IRQHandler+0x51e>
 800bec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800becc:	2b00      	cmp	r3, #0
 800bece:	d008      	beq.n	800bee2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f8f4 	bl	800c0be <UART_EndTransmit_IT>
    return;
 800bed6:	e004      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
    return;
 800bed8:	bf00      	nop
 800beda:	e002      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bedc:	bf00      	nop
 800bede:	e000      	b.n	800bee2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bee0:	bf00      	nop
  }
}
 800bee2:	37e8      	adds	r7, #232	; 0xe8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bc80      	pop	{r7}
 800bef8:	4770      	bx	lr

0800befa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800befa:	b480      	push	{r7}
 800befc:	b083      	sub	sp, #12
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf02:	bf00      	nop
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bc80      	pop	{r7}
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bc80      	pop	{r7}
 800bf1c:	4770      	bx	lr

0800bf1e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b083      	sub	sp, #12
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	460b      	mov	r3, r1
 800bf28:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf2a:	bf00      	nop
 800bf2c:	370c      	adds	r7, #12
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr

0800bf34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b095      	sub	sp, #84	; 0x54
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	330c      	adds	r3, #12
 800bf42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf46:	e853 3f00 	ldrex	r3, [r3]
 800bf4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	330c      	adds	r3, #12
 800bf5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf5c:	643a      	str	r2, [r7, #64]	; 0x40
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e5      	bne.n	800bf3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3314      	adds	r3, #20
 800bf76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	f023 0301 	bic.w	r3, r3, #1
 800bf86:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3314      	adds	r3, #20
 800bf8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf90:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e5      	bne.n	800bf70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d119      	bne.n	800bfe0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	330c      	adds	r3, #12
 800bfb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	e853 3f00 	ldrex	r3, [r3]
 800bfba:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f023 0310 	bic.w	r3, r3, #16
 800bfc2:	647b      	str	r3, [r7, #68]	; 0x44
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	330c      	adds	r3, #12
 800bfca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfcc:	61ba      	str	r2, [r7, #24]
 800bfce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	6979      	ldr	r1, [r7, #20]
 800bfd2:	69ba      	ldr	r2, [r7, #24]
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	613b      	str	r3, [r7, #16]
   return(result);
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e5      	bne.n	800bfac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfee:	bf00      	nop
 800bff0:	3754      	adds	r7, #84	; 0x54
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bc80      	pop	{r7}
 800bff6:	4770      	bx	lr

0800bff8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2200      	movs	r2, #0
 800c00a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff ff7a 	bl	800bf0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c018:	bf00      	nop
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b21      	cmp	r3, #33	; 0x21
 800c032:	d13e      	bne.n	800c0b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c03c:	d114      	bne.n	800c068 <UART_Transmit_IT+0x48>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d110      	bne.n	800c068 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	461a      	mov	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c05a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a1b      	ldr	r3, [r3, #32]
 800c060:	1c9a      	adds	r2, r3, #2
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	621a      	str	r2, [r3, #32]
 800c066:	e008      	b.n	800c07a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a1b      	ldr	r3, [r3, #32]
 800c06c:	1c59      	adds	r1, r3, #1
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	6211      	str	r1, [r2, #32]
 800c072:	781a      	ldrb	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c07e:	b29b      	uxth	r3, r3
 800c080:	3b01      	subs	r3, #1
 800c082:	b29b      	uxth	r3, r3
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	4619      	mov	r1, r3
 800c088:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10f      	bne.n	800c0ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68da      	ldr	r2, [r3, #12]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c09c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68da      	ldr	r2, [r3, #12]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e000      	b.n	800c0b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0b2:	2302      	movs	r3, #2
  }
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bc80      	pop	{r7}
 800c0bc:	4770      	bx	lr

0800c0be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2220      	movs	r2, #32
 800c0da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff ff02 	bl	800bee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b08c      	sub	sp, #48	; 0x30
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b22      	cmp	r3, #34	; 0x22
 800c100:	f040 80ae 	bne.w	800c260 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c10c:	d117      	bne.n	800c13e <UART_Receive_IT+0x50>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d113      	bne.n	800c13e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c116:	2300      	movs	r3, #0
 800c118:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	b29b      	uxth	r3, r3
 800c128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c136:	1c9a      	adds	r2, r3, #2
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	629a      	str	r2, [r3, #40]	; 0x28
 800c13c:	e026      	b.n	800c18c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c142:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c144:	2300      	movs	r3, #0
 800c146:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c150:	d007      	beq.n	800c162 <UART_Receive_IT+0x74>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <UART_Receive_IT+0x82>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	701a      	strb	r2, [r3, #0]
 800c16e:	e008      	b.n	800c182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c190:	b29b      	uxth	r3, r3
 800c192:	3b01      	subs	r3, #1
 800c194:	b29b      	uxth	r3, r3
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	4619      	mov	r1, r3
 800c19a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d15d      	bne.n	800c25c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68da      	ldr	r2, [r3, #12]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f022 0220 	bic.w	r2, r2, #32
 800c1ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	695a      	ldr	r2, [r3, #20]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 0201 	bic.w	r2, r2, #1
 800c1ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2220      	movs	r2, #32
 800c1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d135      	bne.n	800c252 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	330c      	adds	r3, #12
 800c1f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	e853 3f00 	ldrex	r3, [r3]
 800c1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	f023 0310 	bic.w	r3, r3, #16
 800c202:	627b      	str	r3, [r7, #36]	; 0x24
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	330c      	adds	r3, #12
 800c20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c20c:	623a      	str	r2, [r7, #32]
 800c20e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	6a3a      	ldr	r2, [r7, #32]
 800c214:	e841 2300 	strex	r3, r2, [r1]
 800c218:	61bb      	str	r3, [r7, #24]
   return(result);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e5      	bne.n	800c1ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f003 0310 	and.w	r3, r3, #16
 800c22a:	2b10      	cmp	r3, #16
 800c22c:	d10a      	bne.n	800c244 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c248:	4619      	mov	r1, r3
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff fe67 	bl	800bf1e <HAL_UARTEx_RxEventCallback>
 800c250:	e002      	b.n	800c258 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff fe51 	bl	800befa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	e002      	b.n	800c262 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	e000      	b.n	800c262 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c260:	2302      	movs	r3, #2
  }
}
 800c262:	4618      	mov	r0, r3
 800c264:	3730      	adds	r7, #48	; 0x30
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	68da      	ldr	r2, [r3, #12]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689a      	ldr	r2, [r3, #8]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	431a      	orrs	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	4313      	orrs	r3, r2
 800c29a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c2a6:	f023 030c 	bic.w	r3, r3, #12
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	68b9      	ldr	r1, [r7, #8]
 800c2b0:	430b      	orrs	r3, r1
 800c2b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	699a      	ldr	r2, [r3, #24]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a2c      	ldr	r2, [pc, #176]	; (800c380 <UART_SetConfig+0x114>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d103      	bne.n	800c2dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c2d4:	f7fe fe8c 	bl	800aff0 <HAL_RCC_GetPCLK2Freq>
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	e002      	b.n	800c2e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c2dc:	f7fe fe74 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 800c2e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009a      	lsls	r2, r3, #2
 800c2ec:	441a      	add	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f8:	4a22      	ldr	r2, [pc, #136]	; (800c384 <UART_SetConfig+0x118>)
 800c2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c2fe:	095b      	lsrs	r3, r3, #5
 800c300:	0119      	lsls	r1, r3, #4
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009a      	lsls	r2, r3, #2
 800c30c:	441a      	add	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	fbb2 f2f3 	udiv	r2, r2, r3
 800c318:	4b1a      	ldr	r3, [pc, #104]	; (800c384 <UART_SetConfig+0x118>)
 800c31a:	fba3 0302 	umull	r0, r3, r3, r2
 800c31e:	095b      	lsrs	r3, r3, #5
 800c320:	2064      	movs	r0, #100	; 0x64
 800c322:	fb00 f303 	mul.w	r3, r0, r3
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	3332      	adds	r3, #50	; 0x32
 800c32c:	4a15      	ldr	r2, [pc, #84]	; (800c384 <UART_SetConfig+0x118>)
 800c32e:	fba2 2303 	umull	r2, r3, r2, r3
 800c332:	095b      	lsrs	r3, r3, #5
 800c334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c338:	4419      	add	r1, r3
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	009a      	lsls	r2, r3, #2
 800c344:	441a      	add	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c350:	4b0c      	ldr	r3, [pc, #48]	; (800c384 <UART_SetConfig+0x118>)
 800c352:	fba3 0302 	umull	r0, r3, r3, r2
 800c356:	095b      	lsrs	r3, r3, #5
 800c358:	2064      	movs	r0, #100	; 0x64
 800c35a:	fb00 f303 	mul.w	r3, r0, r3
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	011b      	lsls	r3, r3, #4
 800c362:	3332      	adds	r3, #50	; 0x32
 800c364:	4a07      	ldr	r2, [pc, #28]	; (800c384 <UART_SetConfig+0x118>)
 800c366:	fba2 2303 	umull	r2, r3, r2, r3
 800c36a:	095b      	lsrs	r3, r3, #5
 800c36c:	f003 020f 	and.w	r2, r3, #15
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	440a      	add	r2, r1
 800c376:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c378:	bf00      	nop
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	40013800 	.word	0x40013800
 800c384:	51eb851f 	.word	0x51eb851f

0800c388 <__itoa>:
 800c388:	1e93      	subs	r3, r2, #2
 800c38a:	2b22      	cmp	r3, #34	; 0x22
 800c38c:	b510      	push	{r4, lr}
 800c38e:	460c      	mov	r4, r1
 800c390:	d904      	bls.n	800c39c <__itoa+0x14>
 800c392:	2300      	movs	r3, #0
 800c394:	461c      	mov	r4, r3
 800c396:	700b      	strb	r3, [r1, #0]
 800c398:	4620      	mov	r0, r4
 800c39a:	bd10      	pop	{r4, pc}
 800c39c:	2a0a      	cmp	r2, #10
 800c39e:	d109      	bne.n	800c3b4 <__itoa+0x2c>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	da07      	bge.n	800c3b4 <__itoa+0x2c>
 800c3a4:	232d      	movs	r3, #45	; 0x2d
 800c3a6:	700b      	strb	r3, [r1, #0]
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	4240      	negs	r0, r0
 800c3ac:	4421      	add	r1, r4
 800c3ae:	f000 f8d9 	bl	800c564 <__utoa>
 800c3b2:	e7f1      	b.n	800c398 <__itoa+0x10>
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	e7f9      	b.n	800c3ac <__itoa+0x24>

0800c3b8 <itoa>:
 800c3b8:	f7ff bfe6 	b.w	800c388 <__itoa>

0800c3bc <malloc>:
 800c3bc:	4b02      	ldr	r3, [pc, #8]	; (800c3c8 <malloc+0xc>)
 800c3be:	4601      	mov	r1, r0
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	f000 b823 	b.w	800c40c <_malloc_r>
 800c3c6:	bf00      	nop
 800c3c8:	200000f8 	.word	0x200000f8

0800c3cc <sbrk_aligned>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	4e0e      	ldr	r6, [pc, #56]	; (800c408 <sbrk_aligned+0x3c>)
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	6831      	ldr	r1, [r6, #0]
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	b911      	cbnz	r1, 800c3de <sbrk_aligned+0x12>
 800c3d8:	f000 f91e 	bl	800c618 <_sbrk_r>
 800c3dc:	6030      	str	r0, [r6, #0]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	f000 f919 	bl	800c618 <_sbrk_r>
 800c3e6:	1c43      	adds	r3, r0, #1
 800c3e8:	d00a      	beq.n	800c400 <sbrk_aligned+0x34>
 800c3ea:	1cc4      	adds	r4, r0, #3
 800c3ec:	f024 0403 	bic.w	r4, r4, #3
 800c3f0:	42a0      	cmp	r0, r4
 800c3f2:	d007      	beq.n	800c404 <sbrk_aligned+0x38>
 800c3f4:	1a21      	subs	r1, r4, r0
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f000 f90e 	bl	800c618 <_sbrk_r>
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d101      	bne.n	800c404 <sbrk_aligned+0x38>
 800c400:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c404:	4620      	mov	r0, r4
 800c406:	bd70      	pop	{r4, r5, r6, pc}
 800c408:	20000498 	.word	0x20000498

0800c40c <_malloc_r>:
 800c40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c410:	1ccd      	adds	r5, r1, #3
 800c412:	f025 0503 	bic.w	r5, r5, #3
 800c416:	3508      	adds	r5, #8
 800c418:	2d0c      	cmp	r5, #12
 800c41a:	bf38      	it	cc
 800c41c:	250c      	movcc	r5, #12
 800c41e:	2d00      	cmp	r5, #0
 800c420:	4607      	mov	r7, r0
 800c422:	db01      	blt.n	800c428 <_malloc_r+0x1c>
 800c424:	42a9      	cmp	r1, r5
 800c426:	d905      	bls.n	800c434 <_malloc_r+0x28>
 800c428:	230c      	movs	r3, #12
 800c42a:	2600      	movs	r6, #0
 800c42c:	603b      	str	r3, [r7, #0]
 800c42e:	4630      	mov	r0, r6
 800c430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c434:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c508 <_malloc_r+0xfc>
 800c438:	f000 f868 	bl	800c50c <__malloc_lock>
 800c43c:	f8d8 3000 	ldr.w	r3, [r8]
 800c440:	461c      	mov	r4, r3
 800c442:	bb5c      	cbnz	r4, 800c49c <_malloc_r+0x90>
 800c444:	4629      	mov	r1, r5
 800c446:	4638      	mov	r0, r7
 800c448:	f7ff ffc0 	bl	800c3cc <sbrk_aligned>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	4604      	mov	r4, r0
 800c450:	d155      	bne.n	800c4fe <_malloc_r+0xf2>
 800c452:	f8d8 4000 	ldr.w	r4, [r8]
 800c456:	4626      	mov	r6, r4
 800c458:	2e00      	cmp	r6, #0
 800c45a:	d145      	bne.n	800c4e8 <_malloc_r+0xdc>
 800c45c:	2c00      	cmp	r4, #0
 800c45e:	d048      	beq.n	800c4f2 <_malloc_r+0xe6>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	4631      	mov	r1, r6
 800c464:	4638      	mov	r0, r7
 800c466:	eb04 0903 	add.w	r9, r4, r3
 800c46a:	f000 f8d5 	bl	800c618 <_sbrk_r>
 800c46e:	4581      	cmp	r9, r0
 800c470:	d13f      	bne.n	800c4f2 <_malloc_r+0xe6>
 800c472:	6821      	ldr	r1, [r4, #0]
 800c474:	4638      	mov	r0, r7
 800c476:	1a6d      	subs	r5, r5, r1
 800c478:	4629      	mov	r1, r5
 800c47a:	f7ff ffa7 	bl	800c3cc <sbrk_aligned>
 800c47e:	3001      	adds	r0, #1
 800c480:	d037      	beq.n	800c4f2 <_malloc_r+0xe6>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	442b      	add	r3, r5
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	f8d8 3000 	ldr.w	r3, [r8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d038      	beq.n	800c502 <_malloc_r+0xf6>
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	42a2      	cmp	r2, r4
 800c494:	d12b      	bne.n	800c4ee <_malloc_r+0xe2>
 800c496:	2200      	movs	r2, #0
 800c498:	605a      	str	r2, [r3, #4]
 800c49a:	e00f      	b.n	800c4bc <_malloc_r+0xb0>
 800c49c:	6822      	ldr	r2, [r4, #0]
 800c49e:	1b52      	subs	r2, r2, r5
 800c4a0:	d41f      	bmi.n	800c4e2 <_malloc_r+0xd6>
 800c4a2:	2a0b      	cmp	r2, #11
 800c4a4:	d917      	bls.n	800c4d6 <_malloc_r+0xca>
 800c4a6:	1961      	adds	r1, r4, r5
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	6025      	str	r5, [r4, #0]
 800c4ac:	bf18      	it	ne
 800c4ae:	6059      	strne	r1, [r3, #4]
 800c4b0:	6863      	ldr	r3, [r4, #4]
 800c4b2:	bf08      	it	eq
 800c4b4:	f8c8 1000 	streq.w	r1, [r8]
 800c4b8:	5162      	str	r2, [r4, r5]
 800c4ba:	604b      	str	r3, [r1, #4]
 800c4bc:	4638      	mov	r0, r7
 800c4be:	f104 060b 	add.w	r6, r4, #11
 800c4c2:	f000 f829 	bl	800c518 <__malloc_unlock>
 800c4c6:	f026 0607 	bic.w	r6, r6, #7
 800c4ca:	1d23      	adds	r3, r4, #4
 800c4cc:	1af2      	subs	r2, r6, r3
 800c4ce:	d0ae      	beq.n	800c42e <_malloc_r+0x22>
 800c4d0:	1b9b      	subs	r3, r3, r6
 800c4d2:	50a3      	str	r3, [r4, r2]
 800c4d4:	e7ab      	b.n	800c42e <_malloc_r+0x22>
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	6862      	ldr	r2, [r4, #4]
 800c4da:	d1dd      	bne.n	800c498 <_malloc_r+0x8c>
 800c4dc:	f8c8 2000 	str.w	r2, [r8]
 800c4e0:	e7ec      	b.n	800c4bc <_malloc_r+0xb0>
 800c4e2:	4623      	mov	r3, r4
 800c4e4:	6864      	ldr	r4, [r4, #4]
 800c4e6:	e7ac      	b.n	800c442 <_malloc_r+0x36>
 800c4e8:	4634      	mov	r4, r6
 800c4ea:	6876      	ldr	r6, [r6, #4]
 800c4ec:	e7b4      	b.n	800c458 <_malloc_r+0x4c>
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	e7cc      	b.n	800c48c <_malloc_r+0x80>
 800c4f2:	230c      	movs	r3, #12
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	f000 f80e 	bl	800c518 <__malloc_unlock>
 800c4fc:	e797      	b.n	800c42e <_malloc_r+0x22>
 800c4fe:	6025      	str	r5, [r4, #0]
 800c500:	e7dc      	b.n	800c4bc <_malloc_r+0xb0>
 800c502:	605b      	str	r3, [r3, #4]
 800c504:	deff      	udf	#255	; 0xff
 800c506:	bf00      	nop
 800c508:	20000494 	.word	0x20000494

0800c50c <__malloc_lock>:
 800c50c:	4801      	ldr	r0, [pc, #4]	; (800c514 <__malloc_lock+0x8>)
 800c50e:	f000 b8bd 	b.w	800c68c <__retarget_lock_acquire_recursive>
 800c512:	bf00      	nop
 800c514:	200005d4 	.word	0x200005d4

0800c518 <__malloc_unlock>:
 800c518:	4801      	ldr	r0, [pc, #4]	; (800c520 <__malloc_unlock+0x8>)
 800c51a:	f000 b8b8 	b.w	800c68e <__retarget_lock_release_recursive>
 800c51e:	bf00      	nop
 800c520:	200005d4 	.word	0x200005d4

0800c524 <siprintf>:
 800c524:	b40e      	push	{r1, r2, r3}
 800c526:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c52a:	b500      	push	{lr}
 800c52c:	b09c      	sub	sp, #112	; 0x70
 800c52e:	ab1d      	add	r3, sp, #116	; 0x74
 800c530:	9002      	str	r0, [sp, #8]
 800c532:	9006      	str	r0, [sp, #24]
 800c534:	9107      	str	r1, [sp, #28]
 800c536:	9104      	str	r1, [sp, #16]
 800c538:	4808      	ldr	r0, [pc, #32]	; (800c55c <siprintf+0x38>)
 800c53a:	4909      	ldr	r1, [pc, #36]	; (800c560 <siprintf+0x3c>)
 800c53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c540:	9105      	str	r1, [sp, #20]
 800c542:	6800      	ldr	r0, [r0, #0]
 800c544:	a902      	add	r1, sp, #8
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	f000 f94c 	bl	800c7e4 <_svfiprintf_r>
 800c54c:	2200      	movs	r2, #0
 800c54e:	9b02      	ldr	r3, [sp, #8]
 800c550:	701a      	strb	r2, [r3, #0]
 800c552:	b01c      	add	sp, #112	; 0x70
 800c554:	f85d eb04 	ldr.w	lr, [sp], #4
 800c558:	b003      	add	sp, #12
 800c55a:	4770      	bx	lr
 800c55c:	200000f8 	.word	0x200000f8
 800c560:	ffff0208 	.word	0xffff0208

0800c564 <__utoa>:
 800c564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c566:	b08b      	sub	sp, #44	; 0x2c
 800c568:	4605      	mov	r5, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	466e      	mov	r6, sp
 800c56e:	4c1d      	ldr	r4, [pc, #116]	; (800c5e4 <__utoa+0x80>)
 800c570:	f104 0c20 	add.w	ip, r4, #32
 800c574:	4637      	mov	r7, r6
 800c576:	6820      	ldr	r0, [r4, #0]
 800c578:	6861      	ldr	r1, [r4, #4]
 800c57a:	3408      	adds	r4, #8
 800c57c:	c703      	stmia	r7!, {r0, r1}
 800c57e:	4564      	cmp	r4, ip
 800c580:	463e      	mov	r6, r7
 800c582:	d1f7      	bne.n	800c574 <__utoa+0x10>
 800c584:	7921      	ldrb	r1, [r4, #4]
 800c586:	6820      	ldr	r0, [r4, #0]
 800c588:	7139      	strb	r1, [r7, #4]
 800c58a:	1e91      	subs	r1, r2, #2
 800c58c:	2922      	cmp	r1, #34	; 0x22
 800c58e:	6038      	str	r0, [r7, #0]
 800c590:	f04f 0100 	mov.w	r1, #0
 800c594:	d904      	bls.n	800c5a0 <__utoa+0x3c>
 800c596:	7019      	strb	r1, [r3, #0]
 800c598:	460b      	mov	r3, r1
 800c59a:	4618      	mov	r0, r3
 800c59c:	b00b      	add	sp, #44	; 0x2c
 800c59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a0:	1e58      	subs	r0, r3, #1
 800c5a2:	4684      	mov	ip, r0
 800c5a4:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5a8:	fb02 5617 	mls	r6, r2, r7, r5
 800c5ac:	3628      	adds	r6, #40	; 0x28
 800c5ae:	446e      	add	r6, sp
 800c5b0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5ba:	462e      	mov	r6, r5
 800c5bc:	42b2      	cmp	r2, r6
 800c5be:	463d      	mov	r5, r7
 800c5c0:	f101 0101 	add.w	r1, r1, #1
 800c5c4:	d9ee      	bls.n	800c5a4 <__utoa+0x40>
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	545a      	strb	r2, [r3, r1]
 800c5ca:	1919      	adds	r1, r3, r4
 800c5cc:	1aa5      	subs	r5, r4, r2
 800c5ce:	42aa      	cmp	r2, r5
 800c5d0:	dae3      	bge.n	800c59a <__utoa+0x36>
 800c5d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5d6:	780e      	ldrb	r6, [r1, #0]
 800c5d8:	3201      	adds	r2, #1
 800c5da:	7006      	strb	r6, [r0, #0]
 800c5dc:	f801 5901 	strb.w	r5, [r1], #-1
 800c5e0:	e7f4      	b.n	800c5cc <__utoa+0x68>
 800c5e2:	bf00      	nop
 800c5e4:	0800dd96 	.word	0x0800dd96

0800c5e8 <strcat>:
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	7814      	ldrb	r4, [r2, #0]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	3201      	adds	r2, #1
 800c5f2:	2c00      	cmp	r4, #0
 800c5f4:	d1fa      	bne.n	800c5ec <strcat+0x4>
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c600:	2a00      	cmp	r2, #0
 800c602:	d1f9      	bne.n	800c5f8 <strcat+0x10>
 800c604:	bd10      	pop	{r4, pc}

0800c606 <memset>:
 800c606:	4603      	mov	r3, r0
 800c608:	4402      	add	r2, r0
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d100      	bne.n	800c610 <memset+0xa>
 800c60e:	4770      	bx	lr
 800c610:	f803 1b01 	strb.w	r1, [r3], #1
 800c614:	e7f9      	b.n	800c60a <memset+0x4>
	...

0800c618 <_sbrk_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	2300      	movs	r3, #0
 800c61c:	4d05      	ldr	r5, [pc, #20]	; (800c634 <_sbrk_r+0x1c>)
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7fc f808 	bl	8008638 <_sbrk>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_sbrk_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_sbrk_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	200005d8 	.word	0x200005d8

0800c638 <__errno>:
 800c638:	4b01      	ldr	r3, [pc, #4]	; (800c640 <__errno+0x8>)
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	200000f8 	.word	0x200000f8

0800c644 <__libc_init_array>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	2600      	movs	r6, #0
 800c648:	4d0c      	ldr	r5, [pc, #48]	; (800c67c <__libc_init_array+0x38>)
 800c64a:	4c0d      	ldr	r4, [pc, #52]	; (800c680 <__libc_init_array+0x3c>)
 800c64c:	1b64      	subs	r4, r4, r5
 800c64e:	10a4      	asrs	r4, r4, #2
 800c650:	42a6      	cmp	r6, r4
 800c652:	d109      	bne.n	800c668 <__libc_init_array+0x24>
 800c654:	f000 fbc6 	bl	800cde4 <_init>
 800c658:	2600      	movs	r6, #0
 800c65a:	4d0a      	ldr	r5, [pc, #40]	; (800c684 <__libc_init_array+0x40>)
 800c65c:	4c0a      	ldr	r4, [pc, #40]	; (800c688 <__libc_init_array+0x44>)
 800c65e:	1b64      	subs	r4, r4, r5
 800c660:	10a4      	asrs	r4, r4, #2
 800c662:	42a6      	cmp	r6, r4
 800c664:	d105      	bne.n	800c672 <__libc_init_array+0x2e>
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	f855 3b04 	ldr.w	r3, [r5], #4
 800c66c:	4798      	blx	r3
 800c66e:	3601      	adds	r6, #1
 800c670:	e7ee      	b.n	800c650 <__libc_init_array+0xc>
 800c672:	f855 3b04 	ldr.w	r3, [r5], #4
 800c676:	4798      	blx	r3
 800c678:	3601      	adds	r6, #1
 800c67a:	e7f2      	b.n	800c662 <__libc_init_array+0x1e>
 800c67c:	0800ddf0 	.word	0x0800ddf0
 800c680:	0800ddf0 	.word	0x0800ddf0
 800c684:	0800ddf0 	.word	0x0800ddf0
 800c688:	0800ddf4 	.word	0x0800ddf4

0800c68c <__retarget_lock_acquire_recursive>:
 800c68c:	4770      	bx	lr

0800c68e <__retarget_lock_release_recursive>:
 800c68e:	4770      	bx	lr

0800c690 <strcpy>:
 800c690:	4603      	mov	r3, r0
 800c692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c696:	f803 2b01 	strb.w	r2, [r3], #1
 800c69a:	2a00      	cmp	r2, #0
 800c69c:	d1f9      	bne.n	800c692 <strcpy+0x2>
 800c69e:	4770      	bx	lr

0800c6a0 <_free_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	2900      	cmp	r1, #0
 800c6a6:	d040      	beq.n	800c72a <_free_r+0x8a>
 800c6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ac:	1f0c      	subs	r4, r1, #4
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	bfb8      	it	lt
 800c6b2:	18e4      	addlt	r4, r4, r3
 800c6b4:	f7ff ff2a 	bl	800c50c <__malloc_lock>
 800c6b8:	4a1c      	ldr	r2, [pc, #112]	; (800c72c <_free_r+0x8c>)
 800c6ba:	6813      	ldr	r3, [r2, #0]
 800c6bc:	b933      	cbnz	r3, 800c6cc <_free_r+0x2c>
 800c6be:	6063      	str	r3, [r4, #4]
 800c6c0:	6014      	str	r4, [r2, #0]
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c8:	f7ff bf26 	b.w	800c518 <__malloc_unlock>
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	d908      	bls.n	800c6e2 <_free_r+0x42>
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	1821      	adds	r1, r4, r0
 800c6d4:	428b      	cmp	r3, r1
 800c6d6:	bf01      	itttt	eq
 800c6d8:	6819      	ldreq	r1, [r3, #0]
 800c6da:	685b      	ldreq	r3, [r3, #4]
 800c6dc:	1809      	addeq	r1, r1, r0
 800c6de:	6021      	streq	r1, [r4, #0]
 800c6e0:	e7ed      	b.n	800c6be <_free_r+0x1e>
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	b10b      	cbz	r3, 800c6ec <_free_r+0x4c>
 800c6e8:	42a3      	cmp	r3, r4
 800c6ea:	d9fa      	bls.n	800c6e2 <_free_r+0x42>
 800c6ec:	6811      	ldr	r1, [r2, #0]
 800c6ee:	1850      	adds	r0, r2, r1
 800c6f0:	42a0      	cmp	r0, r4
 800c6f2:	d10b      	bne.n	800c70c <_free_r+0x6c>
 800c6f4:	6820      	ldr	r0, [r4, #0]
 800c6f6:	4401      	add	r1, r0
 800c6f8:	1850      	adds	r0, r2, r1
 800c6fa:	4283      	cmp	r3, r0
 800c6fc:	6011      	str	r1, [r2, #0]
 800c6fe:	d1e0      	bne.n	800c6c2 <_free_r+0x22>
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	4408      	add	r0, r1
 800c706:	6010      	str	r0, [r2, #0]
 800c708:	6053      	str	r3, [r2, #4]
 800c70a:	e7da      	b.n	800c6c2 <_free_r+0x22>
 800c70c:	d902      	bls.n	800c714 <_free_r+0x74>
 800c70e:	230c      	movs	r3, #12
 800c710:	602b      	str	r3, [r5, #0]
 800c712:	e7d6      	b.n	800c6c2 <_free_r+0x22>
 800c714:	6820      	ldr	r0, [r4, #0]
 800c716:	1821      	adds	r1, r4, r0
 800c718:	428b      	cmp	r3, r1
 800c71a:	bf01      	itttt	eq
 800c71c:	6819      	ldreq	r1, [r3, #0]
 800c71e:	685b      	ldreq	r3, [r3, #4]
 800c720:	1809      	addeq	r1, r1, r0
 800c722:	6021      	streq	r1, [r4, #0]
 800c724:	6063      	str	r3, [r4, #4]
 800c726:	6054      	str	r4, [r2, #4]
 800c728:	e7cb      	b.n	800c6c2 <_free_r+0x22>
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20000494 	.word	0x20000494

0800c730 <__ssputs_r>:
 800c730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c734:	461f      	mov	r7, r3
 800c736:	688e      	ldr	r6, [r1, #8]
 800c738:	4682      	mov	sl, r0
 800c73a:	42be      	cmp	r6, r7
 800c73c:	460c      	mov	r4, r1
 800c73e:	4690      	mov	r8, r2
 800c740:	680b      	ldr	r3, [r1, #0]
 800c742:	d82c      	bhi.n	800c79e <__ssputs_r+0x6e>
 800c744:	898a      	ldrh	r2, [r1, #12]
 800c746:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c74a:	d026      	beq.n	800c79a <__ssputs_r+0x6a>
 800c74c:	6965      	ldr	r5, [r4, #20]
 800c74e:	6909      	ldr	r1, [r1, #16]
 800c750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c754:	eba3 0901 	sub.w	r9, r3, r1
 800c758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c75c:	1c7b      	adds	r3, r7, #1
 800c75e:	444b      	add	r3, r9
 800c760:	106d      	asrs	r5, r5, #1
 800c762:	429d      	cmp	r5, r3
 800c764:	bf38      	it	cc
 800c766:	461d      	movcc	r5, r3
 800c768:	0553      	lsls	r3, r2, #21
 800c76a:	d527      	bpl.n	800c7bc <__ssputs_r+0x8c>
 800c76c:	4629      	mov	r1, r5
 800c76e:	f7ff fe4d 	bl	800c40c <_malloc_r>
 800c772:	4606      	mov	r6, r0
 800c774:	b360      	cbz	r0, 800c7d0 <__ssputs_r+0xa0>
 800c776:	464a      	mov	r2, r9
 800c778:	6921      	ldr	r1, [r4, #16]
 800c77a:	f000 fb1c 	bl	800cdb6 <memcpy>
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c788:	81a3      	strh	r3, [r4, #12]
 800c78a:	6126      	str	r6, [r4, #16]
 800c78c:	444e      	add	r6, r9
 800c78e:	6026      	str	r6, [r4, #0]
 800c790:	463e      	mov	r6, r7
 800c792:	6165      	str	r5, [r4, #20]
 800c794:	eba5 0509 	sub.w	r5, r5, r9
 800c798:	60a5      	str	r5, [r4, #8]
 800c79a:	42be      	cmp	r6, r7
 800c79c:	d900      	bls.n	800c7a0 <__ssputs_r+0x70>
 800c79e:	463e      	mov	r6, r7
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	4641      	mov	r1, r8
 800c7a4:	6820      	ldr	r0, [r4, #0]
 800c7a6:	f000 fade 	bl	800cd66 <memmove>
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	68a3      	ldr	r3, [r4, #8]
 800c7ae:	1b9b      	subs	r3, r3, r6
 800c7b0:	60a3      	str	r3, [r4, #8]
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	4433      	add	r3, r6
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7bc:	462a      	mov	r2, r5
 800c7be:	f000 faa3 	bl	800cd08 <_realloc_r>
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d1e0      	bne.n	800c78a <__ssputs_r+0x5a>
 800c7c8:	4650      	mov	r0, sl
 800c7ca:	6921      	ldr	r1, [r4, #16]
 800c7cc:	f7ff ff68 	bl	800c6a0 <_free_r>
 800c7d0:	230c      	movs	r3, #12
 800c7d2:	f8ca 3000 	str.w	r3, [sl]
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7e0:	81a3      	strh	r3, [r4, #12]
 800c7e2:	e7e9      	b.n	800c7b8 <__ssputs_r+0x88>

0800c7e4 <_svfiprintf_r>:
 800c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	4698      	mov	r8, r3
 800c7ea:	898b      	ldrh	r3, [r1, #12]
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	061b      	lsls	r3, r3, #24
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	4614      	mov	r4, r2
 800c7f4:	b09d      	sub	sp, #116	; 0x74
 800c7f6:	d50e      	bpl.n	800c816 <_svfiprintf_r+0x32>
 800c7f8:	690b      	ldr	r3, [r1, #16]
 800c7fa:	b963      	cbnz	r3, 800c816 <_svfiprintf_r+0x32>
 800c7fc:	2140      	movs	r1, #64	; 0x40
 800c7fe:	f7ff fe05 	bl	800c40c <_malloc_r>
 800c802:	6028      	str	r0, [r5, #0]
 800c804:	6128      	str	r0, [r5, #16]
 800c806:	b920      	cbnz	r0, 800c812 <_svfiprintf_r+0x2e>
 800c808:	230c      	movs	r3, #12
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c810:	e0d0      	b.n	800c9b4 <_svfiprintf_r+0x1d0>
 800c812:	2340      	movs	r3, #64	; 0x40
 800c814:	616b      	str	r3, [r5, #20]
 800c816:	2300      	movs	r3, #0
 800c818:	9309      	str	r3, [sp, #36]	; 0x24
 800c81a:	2320      	movs	r3, #32
 800c81c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c820:	2330      	movs	r3, #48	; 0x30
 800c822:	f04f 0901 	mov.w	r9, #1
 800c826:	f8cd 800c 	str.w	r8, [sp, #12]
 800c82a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9cc <_svfiprintf_r+0x1e8>
 800c82e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c832:	4623      	mov	r3, r4
 800c834:	469a      	mov	sl, r3
 800c836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c83a:	b10a      	cbz	r2, 800c840 <_svfiprintf_r+0x5c>
 800c83c:	2a25      	cmp	r2, #37	; 0x25
 800c83e:	d1f9      	bne.n	800c834 <_svfiprintf_r+0x50>
 800c840:	ebba 0b04 	subs.w	fp, sl, r4
 800c844:	d00b      	beq.n	800c85e <_svfiprintf_r+0x7a>
 800c846:	465b      	mov	r3, fp
 800c848:	4622      	mov	r2, r4
 800c84a:	4629      	mov	r1, r5
 800c84c:	4638      	mov	r0, r7
 800c84e:	f7ff ff6f 	bl	800c730 <__ssputs_r>
 800c852:	3001      	adds	r0, #1
 800c854:	f000 80a9 	beq.w	800c9aa <_svfiprintf_r+0x1c6>
 800c858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c85a:	445a      	add	r2, fp
 800c85c:	9209      	str	r2, [sp, #36]	; 0x24
 800c85e:	f89a 3000 	ldrb.w	r3, [sl]
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80a1 	beq.w	800c9aa <_svfiprintf_r+0x1c6>
 800c868:	2300      	movs	r3, #0
 800c86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c872:	f10a 0a01 	add.w	sl, sl, #1
 800c876:	9304      	str	r3, [sp, #16]
 800c878:	9307      	str	r3, [sp, #28]
 800c87a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c87e:	931a      	str	r3, [sp, #104]	; 0x68
 800c880:	4654      	mov	r4, sl
 800c882:	2205      	movs	r2, #5
 800c884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c888:	4850      	ldr	r0, [pc, #320]	; (800c9cc <_svfiprintf_r+0x1e8>)
 800c88a:	f000 fa86 	bl	800cd9a <memchr>
 800c88e:	9a04      	ldr	r2, [sp, #16]
 800c890:	b9d8      	cbnz	r0, 800c8ca <_svfiprintf_r+0xe6>
 800c892:	06d0      	lsls	r0, r2, #27
 800c894:	bf44      	itt	mi
 800c896:	2320      	movmi	r3, #32
 800c898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c89c:	0711      	lsls	r1, r2, #28
 800c89e:	bf44      	itt	mi
 800c8a0:	232b      	movmi	r3, #43	; 0x2b
 800c8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ac:	d015      	beq.n	800c8da <_svfiprintf_r+0xf6>
 800c8ae:	4654      	mov	r4, sl
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	f04f 0c0a 	mov.w	ip, #10
 800c8b6:	9a07      	ldr	r2, [sp, #28]
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8be:	3b30      	subs	r3, #48	; 0x30
 800c8c0:	2b09      	cmp	r3, #9
 800c8c2:	d94d      	bls.n	800c960 <_svfiprintf_r+0x17c>
 800c8c4:	b1b0      	cbz	r0, 800c8f4 <_svfiprintf_r+0x110>
 800c8c6:	9207      	str	r2, [sp, #28]
 800c8c8:	e014      	b.n	800c8f4 <_svfiprintf_r+0x110>
 800c8ca:	eba0 0308 	sub.w	r3, r0, r8
 800c8ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	46a2      	mov	sl, r4
 800c8d6:	9304      	str	r3, [sp, #16]
 800c8d8:	e7d2      	b.n	800c880 <_svfiprintf_r+0x9c>
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	1d19      	adds	r1, r3, #4
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	9103      	str	r1, [sp, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	bfbb      	ittet	lt
 800c8e6:	425b      	neglt	r3, r3
 800c8e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c8ec:	9307      	strge	r3, [sp, #28]
 800c8ee:	9307      	strlt	r3, [sp, #28]
 800c8f0:	bfb8      	it	lt
 800c8f2:	9204      	strlt	r2, [sp, #16]
 800c8f4:	7823      	ldrb	r3, [r4, #0]
 800c8f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c8f8:	d10c      	bne.n	800c914 <_svfiprintf_r+0x130>
 800c8fa:	7863      	ldrb	r3, [r4, #1]
 800c8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fe:	d134      	bne.n	800c96a <_svfiprintf_r+0x186>
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	3402      	adds	r4, #2
 800c904:	1d1a      	adds	r2, r3, #4
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	9203      	str	r2, [sp, #12]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	bfb8      	it	lt
 800c90e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c912:	9305      	str	r3, [sp, #20]
 800c914:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c9d0 <_svfiprintf_r+0x1ec>
 800c918:	2203      	movs	r2, #3
 800c91a:	4650      	mov	r0, sl
 800c91c:	7821      	ldrb	r1, [r4, #0]
 800c91e:	f000 fa3c 	bl	800cd9a <memchr>
 800c922:	b138      	cbz	r0, 800c934 <_svfiprintf_r+0x150>
 800c924:	2240      	movs	r2, #64	; 0x40
 800c926:	9b04      	ldr	r3, [sp, #16]
 800c928:	eba0 000a 	sub.w	r0, r0, sl
 800c92c:	4082      	lsls	r2, r0
 800c92e:	4313      	orrs	r3, r2
 800c930:	3401      	adds	r4, #1
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c938:	2206      	movs	r2, #6
 800c93a:	4826      	ldr	r0, [pc, #152]	; (800c9d4 <_svfiprintf_r+0x1f0>)
 800c93c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c940:	f000 fa2b 	bl	800cd9a <memchr>
 800c944:	2800      	cmp	r0, #0
 800c946:	d038      	beq.n	800c9ba <_svfiprintf_r+0x1d6>
 800c948:	4b23      	ldr	r3, [pc, #140]	; (800c9d8 <_svfiprintf_r+0x1f4>)
 800c94a:	bb1b      	cbnz	r3, 800c994 <_svfiprintf_r+0x1b0>
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	3307      	adds	r3, #7
 800c950:	f023 0307 	bic.w	r3, r3, #7
 800c954:	3308      	adds	r3, #8
 800c956:	9303      	str	r3, [sp, #12]
 800c958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c95a:	4433      	add	r3, r6
 800c95c:	9309      	str	r3, [sp, #36]	; 0x24
 800c95e:	e768      	b.n	800c832 <_svfiprintf_r+0x4e>
 800c960:	460c      	mov	r4, r1
 800c962:	2001      	movs	r0, #1
 800c964:	fb0c 3202 	mla	r2, ip, r2, r3
 800c968:	e7a6      	b.n	800c8b8 <_svfiprintf_r+0xd4>
 800c96a:	2300      	movs	r3, #0
 800c96c:	f04f 0c0a 	mov.w	ip, #10
 800c970:	4619      	mov	r1, r3
 800c972:	3401      	adds	r4, #1
 800c974:	9305      	str	r3, [sp, #20]
 800c976:	4620      	mov	r0, r4
 800c978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c97c:	3a30      	subs	r2, #48	; 0x30
 800c97e:	2a09      	cmp	r2, #9
 800c980:	d903      	bls.n	800c98a <_svfiprintf_r+0x1a6>
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0c6      	beq.n	800c914 <_svfiprintf_r+0x130>
 800c986:	9105      	str	r1, [sp, #20]
 800c988:	e7c4      	b.n	800c914 <_svfiprintf_r+0x130>
 800c98a:	4604      	mov	r4, r0
 800c98c:	2301      	movs	r3, #1
 800c98e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c992:	e7f0      	b.n	800c976 <_svfiprintf_r+0x192>
 800c994:	ab03      	add	r3, sp, #12
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	462a      	mov	r2, r5
 800c99a:	4638      	mov	r0, r7
 800c99c:	4b0f      	ldr	r3, [pc, #60]	; (800c9dc <_svfiprintf_r+0x1f8>)
 800c99e:	a904      	add	r1, sp, #16
 800c9a0:	f3af 8000 	nop.w
 800c9a4:	1c42      	adds	r2, r0, #1
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	d1d6      	bne.n	800c958 <_svfiprintf_r+0x174>
 800c9aa:	89ab      	ldrh	r3, [r5, #12]
 800c9ac:	065b      	lsls	r3, r3, #25
 800c9ae:	f53f af2d 	bmi.w	800c80c <_svfiprintf_r+0x28>
 800c9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9b4:	b01d      	add	sp, #116	; 0x74
 800c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ba:	ab03      	add	r3, sp, #12
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	462a      	mov	r2, r5
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <_svfiprintf_r+0x1f8>)
 800c9c4:	a904      	add	r1, sp, #16
 800c9c6:	f000 f87d 	bl	800cac4 <_printf_i>
 800c9ca:	e7eb      	b.n	800c9a4 <_svfiprintf_r+0x1c0>
 800c9cc:	0800ddbb 	.word	0x0800ddbb
 800c9d0:	0800ddc1 	.word	0x0800ddc1
 800c9d4:	0800ddc5 	.word	0x0800ddc5
 800c9d8:	00000000 	.word	0x00000000
 800c9dc:	0800c731 	.word	0x0800c731

0800c9e0 <_printf_common>:
 800c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	4616      	mov	r6, r2
 800c9e6:	4699      	mov	r9, r3
 800c9e8:	688a      	ldr	r2, [r1, #8]
 800c9ea:	690b      	ldr	r3, [r1, #16]
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	bfb8      	it	lt
 800c9f2:	4613      	movlt	r3, r2
 800c9f4:	6033      	str	r3, [r6, #0]
 800c9f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca00:	b10a      	cbz	r2, 800ca06 <_printf_common+0x26>
 800ca02:	3301      	adds	r3, #1
 800ca04:	6033      	str	r3, [r6, #0]
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	0699      	lsls	r1, r3, #26
 800ca0a:	bf42      	ittt	mi
 800ca0c:	6833      	ldrmi	r3, [r6, #0]
 800ca0e:	3302      	addmi	r3, #2
 800ca10:	6033      	strmi	r3, [r6, #0]
 800ca12:	6825      	ldr	r5, [r4, #0]
 800ca14:	f015 0506 	ands.w	r5, r5, #6
 800ca18:	d106      	bne.n	800ca28 <_printf_common+0x48>
 800ca1a:	f104 0a19 	add.w	sl, r4, #25
 800ca1e:	68e3      	ldr	r3, [r4, #12]
 800ca20:	6832      	ldr	r2, [r6, #0]
 800ca22:	1a9b      	subs	r3, r3, r2
 800ca24:	42ab      	cmp	r3, r5
 800ca26:	dc2b      	bgt.n	800ca80 <_printf_common+0xa0>
 800ca28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca2c:	1e13      	subs	r3, r2, #0
 800ca2e:	6822      	ldr	r2, [r4, #0]
 800ca30:	bf18      	it	ne
 800ca32:	2301      	movne	r3, #1
 800ca34:	0692      	lsls	r2, r2, #26
 800ca36:	d430      	bmi.n	800ca9a <_printf_common+0xba>
 800ca38:	4649      	mov	r1, r9
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca40:	47c0      	blx	r8
 800ca42:	3001      	adds	r0, #1
 800ca44:	d023      	beq.n	800ca8e <_printf_common+0xae>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	6922      	ldr	r2, [r4, #16]
 800ca4a:	f003 0306 	and.w	r3, r3, #6
 800ca4e:	2b04      	cmp	r3, #4
 800ca50:	bf14      	ite	ne
 800ca52:	2500      	movne	r5, #0
 800ca54:	6833      	ldreq	r3, [r6, #0]
 800ca56:	f04f 0600 	mov.w	r6, #0
 800ca5a:	bf08      	it	eq
 800ca5c:	68e5      	ldreq	r5, [r4, #12]
 800ca5e:	f104 041a 	add.w	r4, r4, #26
 800ca62:	bf08      	it	eq
 800ca64:	1aed      	subeq	r5, r5, r3
 800ca66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca6a:	bf08      	it	eq
 800ca6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca70:	4293      	cmp	r3, r2
 800ca72:	bfc4      	itt	gt
 800ca74:	1a9b      	subgt	r3, r3, r2
 800ca76:	18ed      	addgt	r5, r5, r3
 800ca78:	42b5      	cmp	r5, r6
 800ca7a:	d11a      	bne.n	800cab2 <_printf_common+0xd2>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e008      	b.n	800ca92 <_printf_common+0xb2>
 800ca80:	2301      	movs	r3, #1
 800ca82:	4652      	mov	r2, sl
 800ca84:	4649      	mov	r1, r9
 800ca86:	4638      	mov	r0, r7
 800ca88:	47c0      	blx	r8
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	d103      	bne.n	800ca96 <_printf_common+0xb6>
 800ca8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca96:	3501      	adds	r5, #1
 800ca98:	e7c1      	b.n	800ca1e <_printf_common+0x3e>
 800ca9a:	2030      	movs	r0, #48	; 0x30
 800ca9c:	18e1      	adds	r1, r4, r3
 800ca9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800caa8:	4422      	add	r2, r4
 800caaa:	3302      	adds	r3, #2
 800caac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cab0:	e7c2      	b.n	800ca38 <_printf_common+0x58>
 800cab2:	2301      	movs	r3, #1
 800cab4:	4622      	mov	r2, r4
 800cab6:	4649      	mov	r1, r9
 800cab8:	4638      	mov	r0, r7
 800caba:	47c0      	blx	r8
 800cabc:	3001      	adds	r0, #1
 800cabe:	d0e6      	beq.n	800ca8e <_printf_common+0xae>
 800cac0:	3601      	adds	r6, #1
 800cac2:	e7d9      	b.n	800ca78 <_printf_common+0x98>

0800cac4 <_printf_i>:
 800cac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cac8:	7e0f      	ldrb	r7, [r1, #24]
 800caca:	4691      	mov	r9, r2
 800cacc:	2f78      	cmp	r7, #120	; 0x78
 800cace:	4680      	mov	r8, r0
 800cad0:	460c      	mov	r4, r1
 800cad2:	469a      	mov	sl, r3
 800cad4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cada:	d807      	bhi.n	800caec <_printf_i+0x28>
 800cadc:	2f62      	cmp	r7, #98	; 0x62
 800cade:	d80a      	bhi.n	800caf6 <_printf_i+0x32>
 800cae0:	2f00      	cmp	r7, #0
 800cae2:	f000 80d5 	beq.w	800cc90 <_printf_i+0x1cc>
 800cae6:	2f58      	cmp	r7, #88	; 0x58
 800cae8:	f000 80c1 	beq.w	800cc6e <_printf_i+0x1aa>
 800caec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caf4:	e03a      	b.n	800cb6c <_printf_i+0xa8>
 800caf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cafa:	2b15      	cmp	r3, #21
 800cafc:	d8f6      	bhi.n	800caec <_printf_i+0x28>
 800cafe:	a101      	add	r1, pc, #4	; (adr r1, 800cb04 <_printf_i+0x40>)
 800cb00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb04:	0800cb5d 	.word	0x0800cb5d
 800cb08:	0800cb71 	.word	0x0800cb71
 800cb0c:	0800caed 	.word	0x0800caed
 800cb10:	0800caed 	.word	0x0800caed
 800cb14:	0800caed 	.word	0x0800caed
 800cb18:	0800caed 	.word	0x0800caed
 800cb1c:	0800cb71 	.word	0x0800cb71
 800cb20:	0800caed 	.word	0x0800caed
 800cb24:	0800caed 	.word	0x0800caed
 800cb28:	0800caed 	.word	0x0800caed
 800cb2c:	0800caed 	.word	0x0800caed
 800cb30:	0800cc77 	.word	0x0800cc77
 800cb34:	0800cb9d 	.word	0x0800cb9d
 800cb38:	0800cc31 	.word	0x0800cc31
 800cb3c:	0800caed 	.word	0x0800caed
 800cb40:	0800caed 	.word	0x0800caed
 800cb44:	0800cc99 	.word	0x0800cc99
 800cb48:	0800caed 	.word	0x0800caed
 800cb4c:	0800cb9d 	.word	0x0800cb9d
 800cb50:	0800caed 	.word	0x0800caed
 800cb54:	0800caed 	.word	0x0800caed
 800cb58:	0800cc39 	.word	0x0800cc39
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	1d1a      	adds	r2, r3, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	602a      	str	r2, [r5, #0]
 800cb64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e0a0      	b.n	800ccb2 <_printf_i+0x1ee>
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	682b      	ldr	r3, [r5, #0]
 800cb74:	0607      	lsls	r7, r0, #24
 800cb76:	f103 0104 	add.w	r1, r3, #4
 800cb7a:	6029      	str	r1, [r5, #0]
 800cb7c:	d501      	bpl.n	800cb82 <_printf_i+0xbe>
 800cb7e:	681e      	ldr	r6, [r3, #0]
 800cb80:	e003      	b.n	800cb8a <_printf_i+0xc6>
 800cb82:	0646      	lsls	r6, r0, #25
 800cb84:	d5fb      	bpl.n	800cb7e <_printf_i+0xba>
 800cb86:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb8a:	2e00      	cmp	r6, #0
 800cb8c:	da03      	bge.n	800cb96 <_printf_i+0xd2>
 800cb8e:	232d      	movs	r3, #45	; 0x2d
 800cb90:	4276      	negs	r6, r6
 800cb92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb96:	230a      	movs	r3, #10
 800cb98:	4859      	ldr	r0, [pc, #356]	; (800cd00 <_printf_i+0x23c>)
 800cb9a:	e012      	b.n	800cbc2 <_printf_i+0xfe>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	6820      	ldr	r0, [r4, #0]
 800cba0:	1d19      	adds	r1, r3, #4
 800cba2:	6029      	str	r1, [r5, #0]
 800cba4:	0605      	lsls	r5, r0, #24
 800cba6:	d501      	bpl.n	800cbac <_printf_i+0xe8>
 800cba8:	681e      	ldr	r6, [r3, #0]
 800cbaa:	e002      	b.n	800cbb2 <_printf_i+0xee>
 800cbac:	0641      	lsls	r1, r0, #25
 800cbae:	d5fb      	bpl.n	800cba8 <_printf_i+0xe4>
 800cbb0:	881e      	ldrh	r6, [r3, #0]
 800cbb2:	2f6f      	cmp	r7, #111	; 0x6f
 800cbb4:	bf0c      	ite	eq
 800cbb6:	2308      	moveq	r3, #8
 800cbb8:	230a      	movne	r3, #10
 800cbba:	4851      	ldr	r0, [pc, #324]	; (800cd00 <_printf_i+0x23c>)
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbc2:	6865      	ldr	r5, [r4, #4]
 800cbc4:	2d00      	cmp	r5, #0
 800cbc6:	bfa8      	it	ge
 800cbc8:	6821      	ldrge	r1, [r4, #0]
 800cbca:	60a5      	str	r5, [r4, #8]
 800cbcc:	bfa4      	itt	ge
 800cbce:	f021 0104 	bicge.w	r1, r1, #4
 800cbd2:	6021      	strge	r1, [r4, #0]
 800cbd4:	b90e      	cbnz	r6, 800cbda <_printf_i+0x116>
 800cbd6:	2d00      	cmp	r5, #0
 800cbd8:	d04b      	beq.n	800cc72 <_printf_i+0x1ae>
 800cbda:	4615      	mov	r5, r2
 800cbdc:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbe0:	fb03 6711 	mls	r7, r3, r1, r6
 800cbe4:	5dc7      	ldrb	r7, [r0, r7]
 800cbe6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbea:	4637      	mov	r7, r6
 800cbec:	42bb      	cmp	r3, r7
 800cbee:	460e      	mov	r6, r1
 800cbf0:	d9f4      	bls.n	800cbdc <_printf_i+0x118>
 800cbf2:	2b08      	cmp	r3, #8
 800cbf4:	d10b      	bne.n	800cc0e <_printf_i+0x14a>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	07de      	lsls	r6, r3, #31
 800cbfa:	d508      	bpl.n	800cc0e <_printf_i+0x14a>
 800cbfc:	6923      	ldr	r3, [r4, #16]
 800cbfe:	6861      	ldr	r1, [r4, #4]
 800cc00:	4299      	cmp	r1, r3
 800cc02:	bfde      	ittt	le
 800cc04:	2330      	movle	r3, #48	; 0x30
 800cc06:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc0e:	1b52      	subs	r2, r2, r5
 800cc10:	6122      	str	r2, [r4, #16]
 800cc12:	464b      	mov	r3, r9
 800cc14:	4621      	mov	r1, r4
 800cc16:	4640      	mov	r0, r8
 800cc18:	f8cd a000 	str.w	sl, [sp]
 800cc1c:	aa03      	add	r2, sp, #12
 800cc1e:	f7ff fedf 	bl	800c9e0 <_printf_common>
 800cc22:	3001      	adds	r0, #1
 800cc24:	d14a      	bne.n	800ccbc <_printf_i+0x1f8>
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc2a:	b004      	add	sp, #16
 800cc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	f043 0320 	orr.w	r3, r3, #32
 800cc36:	6023      	str	r3, [r4, #0]
 800cc38:	2778      	movs	r7, #120	; 0x78
 800cc3a:	4832      	ldr	r0, [pc, #200]	; (800cd04 <_printf_i+0x240>)
 800cc3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	6829      	ldr	r1, [r5, #0]
 800cc44:	061f      	lsls	r7, r3, #24
 800cc46:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc4a:	d402      	bmi.n	800cc52 <_printf_i+0x18e>
 800cc4c:	065f      	lsls	r7, r3, #25
 800cc4e:	bf48      	it	mi
 800cc50:	b2b6      	uxthmi	r6, r6
 800cc52:	07df      	lsls	r7, r3, #31
 800cc54:	bf48      	it	mi
 800cc56:	f043 0320 	orrmi.w	r3, r3, #32
 800cc5a:	6029      	str	r1, [r5, #0]
 800cc5c:	bf48      	it	mi
 800cc5e:	6023      	strmi	r3, [r4, #0]
 800cc60:	b91e      	cbnz	r6, 800cc6a <_printf_i+0x1a6>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	f023 0320 	bic.w	r3, r3, #32
 800cc68:	6023      	str	r3, [r4, #0]
 800cc6a:	2310      	movs	r3, #16
 800cc6c:	e7a6      	b.n	800cbbc <_printf_i+0xf8>
 800cc6e:	4824      	ldr	r0, [pc, #144]	; (800cd00 <_printf_i+0x23c>)
 800cc70:	e7e4      	b.n	800cc3c <_printf_i+0x178>
 800cc72:	4615      	mov	r5, r2
 800cc74:	e7bd      	b.n	800cbf2 <_printf_i+0x12e>
 800cc76:	682b      	ldr	r3, [r5, #0]
 800cc78:	6826      	ldr	r6, [r4, #0]
 800cc7a:	1d18      	adds	r0, r3, #4
 800cc7c:	6961      	ldr	r1, [r4, #20]
 800cc7e:	6028      	str	r0, [r5, #0]
 800cc80:	0635      	lsls	r5, r6, #24
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	d501      	bpl.n	800cc8a <_printf_i+0x1c6>
 800cc86:	6019      	str	r1, [r3, #0]
 800cc88:	e002      	b.n	800cc90 <_printf_i+0x1cc>
 800cc8a:	0670      	lsls	r0, r6, #25
 800cc8c:	d5fb      	bpl.n	800cc86 <_printf_i+0x1c2>
 800cc8e:	8019      	strh	r1, [r3, #0]
 800cc90:	2300      	movs	r3, #0
 800cc92:	4615      	mov	r5, r2
 800cc94:	6123      	str	r3, [r4, #16]
 800cc96:	e7bc      	b.n	800cc12 <_printf_i+0x14e>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	1d1a      	adds	r2, r3, #4
 800cc9e:	602a      	str	r2, [r5, #0]
 800cca0:	681d      	ldr	r5, [r3, #0]
 800cca2:	6862      	ldr	r2, [r4, #4]
 800cca4:	4628      	mov	r0, r5
 800cca6:	f000 f878 	bl	800cd9a <memchr>
 800ccaa:	b108      	cbz	r0, 800ccb0 <_printf_i+0x1ec>
 800ccac:	1b40      	subs	r0, r0, r5
 800ccae:	6060      	str	r0, [r4, #4]
 800ccb0:	6863      	ldr	r3, [r4, #4]
 800ccb2:	6123      	str	r3, [r4, #16]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccba:	e7aa      	b.n	800cc12 <_printf_i+0x14e>
 800ccbc:	462a      	mov	r2, r5
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	47d0      	blx	sl
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	d0ad      	beq.n	800cc26 <_printf_i+0x162>
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	079b      	lsls	r3, r3, #30
 800ccce:	d413      	bmi.n	800ccf8 <_printf_i+0x234>
 800ccd0:	68e0      	ldr	r0, [r4, #12]
 800ccd2:	9b03      	ldr	r3, [sp, #12]
 800ccd4:	4298      	cmp	r0, r3
 800ccd6:	bfb8      	it	lt
 800ccd8:	4618      	movlt	r0, r3
 800ccda:	e7a6      	b.n	800cc2a <_printf_i+0x166>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	4632      	mov	r2, r6
 800cce0:	4649      	mov	r1, r9
 800cce2:	4640      	mov	r0, r8
 800cce4:	47d0      	blx	sl
 800cce6:	3001      	adds	r0, #1
 800cce8:	d09d      	beq.n	800cc26 <_printf_i+0x162>
 800ccea:	3501      	adds	r5, #1
 800ccec:	68e3      	ldr	r3, [r4, #12]
 800ccee:	9903      	ldr	r1, [sp, #12]
 800ccf0:	1a5b      	subs	r3, r3, r1
 800ccf2:	42ab      	cmp	r3, r5
 800ccf4:	dcf2      	bgt.n	800ccdc <_printf_i+0x218>
 800ccf6:	e7eb      	b.n	800ccd0 <_printf_i+0x20c>
 800ccf8:	2500      	movs	r5, #0
 800ccfa:	f104 0619 	add.w	r6, r4, #25
 800ccfe:	e7f5      	b.n	800ccec <_printf_i+0x228>
 800cd00:	0800ddcc 	.word	0x0800ddcc
 800cd04:	0800dddd 	.word	0x0800dddd

0800cd08 <_realloc_r>:
 800cd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0c:	4680      	mov	r8, r0
 800cd0e:	4614      	mov	r4, r2
 800cd10:	460e      	mov	r6, r1
 800cd12:	b921      	cbnz	r1, 800cd1e <_realloc_r+0x16>
 800cd14:	4611      	mov	r1, r2
 800cd16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1a:	f7ff bb77 	b.w	800c40c <_malloc_r>
 800cd1e:	b92a      	cbnz	r2, 800cd2c <_realloc_r+0x24>
 800cd20:	f7ff fcbe 	bl	800c6a0 <_free_r>
 800cd24:	4625      	mov	r5, r4
 800cd26:	4628      	mov	r0, r5
 800cd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2c:	f000 f851 	bl	800cdd2 <_malloc_usable_size_r>
 800cd30:	4284      	cmp	r4, r0
 800cd32:	4607      	mov	r7, r0
 800cd34:	d802      	bhi.n	800cd3c <_realloc_r+0x34>
 800cd36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd3a:	d812      	bhi.n	800cd62 <_realloc_r+0x5a>
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	4640      	mov	r0, r8
 800cd40:	f7ff fb64 	bl	800c40c <_malloc_r>
 800cd44:	4605      	mov	r5, r0
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d0ed      	beq.n	800cd26 <_realloc_r+0x1e>
 800cd4a:	42bc      	cmp	r4, r7
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	4631      	mov	r1, r6
 800cd50:	bf28      	it	cs
 800cd52:	463a      	movcs	r2, r7
 800cd54:	f000 f82f 	bl	800cdb6 <memcpy>
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	f7ff fca0 	bl	800c6a0 <_free_r>
 800cd60:	e7e1      	b.n	800cd26 <_realloc_r+0x1e>
 800cd62:	4635      	mov	r5, r6
 800cd64:	e7df      	b.n	800cd26 <_realloc_r+0x1e>

0800cd66 <memmove>:
 800cd66:	4288      	cmp	r0, r1
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	eb01 0402 	add.w	r4, r1, r2
 800cd6e:	d902      	bls.n	800cd76 <memmove+0x10>
 800cd70:	4284      	cmp	r4, r0
 800cd72:	4623      	mov	r3, r4
 800cd74:	d807      	bhi.n	800cd86 <memmove+0x20>
 800cd76:	1e43      	subs	r3, r0, #1
 800cd78:	42a1      	cmp	r1, r4
 800cd7a:	d008      	beq.n	800cd8e <memmove+0x28>
 800cd7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd80:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd84:	e7f8      	b.n	800cd78 <memmove+0x12>
 800cd86:	4601      	mov	r1, r0
 800cd88:	4402      	add	r2, r0
 800cd8a:	428a      	cmp	r2, r1
 800cd8c:	d100      	bne.n	800cd90 <memmove+0x2a>
 800cd8e:	bd10      	pop	{r4, pc}
 800cd90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd98:	e7f7      	b.n	800cd8a <memmove+0x24>

0800cd9a <memchr>:
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	b2c9      	uxtb	r1, r1
 800cda0:	4402      	add	r2, r0
 800cda2:	4293      	cmp	r3, r2
 800cda4:	4618      	mov	r0, r3
 800cda6:	d101      	bne.n	800cdac <memchr+0x12>
 800cda8:	2000      	movs	r0, #0
 800cdaa:	e003      	b.n	800cdb4 <memchr+0x1a>
 800cdac:	7804      	ldrb	r4, [r0, #0]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	428c      	cmp	r4, r1
 800cdb2:	d1f6      	bne.n	800cda2 <memchr+0x8>
 800cdb4:	bd10      	pop	{r4, pc}

0800cdb6 <memcpy>:
 800cdb6:	440a      	add	r2, r1
 800cdb8:	4291      	cmp	r1, r2
 800cdba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdbe:	d100      	bne.n	800cdc2 <memcpy+0xc>
 800cdc0:	4770      	bx	lr
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdc8:	4291      	cmp	r1, r2
 800cdca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdce:	d1f9      	bne.n	800cdc4 <memcpy+0xe>
 800cdd0:	bd10      	pop	{r4, pc}

0800cdd2 <_malloc_usable_size_r>:
 800cdd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdd6:	1f18      	subs	r0, r3, #4
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	bfbc      	itt	lt
 800cddc:	580b      	ldrlt	r3, [r1, r0]
 800cdde:	18c0      	addlt	r0, r0, r3
 800cde0:	4770      	bx	lr
	...

0800cde4 <_init>:
 800cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde6:	bf00      	nop
 800cde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdea:	bc08      	pop	{r3}
 800cdec:	469e      	mov	lr, r3
 800cdee:	4770      	bx	lr

0800cdf0 <_fini>:
 800cdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf2:	bf00      	nop
 800cdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdf6:	bc08      	pop	{r3}
 800cdf8:	469e      	mov	lr, r3
 800cdfa:	4770      	bx	lr
