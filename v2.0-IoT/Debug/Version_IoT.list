
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd4  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd98  0800dd98  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd98  0800dd98  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd98  0800dd98  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd98  0800dd98  0001dd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd9c  0800dd9c  0001dd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800dda0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000110  0800deb0  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800deb0  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016714  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e7  00000000  00000000  00036890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  0003b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0eb  00000000  00000000  0005851c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eeba  00000000  00000000  00074607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052dc  00000000  00000000  001134c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001187a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cdac 	.word	0x0800cdac

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800cdac 	.word	0x0800cdac

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fbea 	bl	8009a28 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa62 	bl	8008720 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	200002b8 	.word	0x200002b8
 80004c0:	20000201 	.word	0x20000201
 80004c4:	20000229 	.word	0x20000229
 80004c8:	2000022c 	.word	0x2000022c
 80004cc:	2000022d 	.word	0x2000022d
 80004d0:	2000022e 	.word	0x2000022e
 80004d4:	2000022f 	.word	0x2000022f
 80004d8:	20000230 	.word	0x20000230
 80004dc:	20000231 	.word	0x20000231
 80004e0:	20000241 	.word	0x20000241
 80004e4:	20000232 	.word	0x20000232
 80004e8:	20000242 	.word	0x20000242
 80004ec:	20000233 	.word	0x20000233
 80004f0:	20000243 	.word	0x20000243
 80004f4:	20000236 	.word	0x20000236
 80004f8:	20000237 	.word	0x20000237
 80004fc:	20000238 	.word	0x20000238
 8000500:	20000239 	.word	0x20000239
 8000504:	2000023a 	.word	0x2000023a
 8000508:	2000023b 	.word	0x2000023b
 800050c:	2000023c 	.word	0x2000023c
 8000510:	2000023d 	.word	0x2000023d
 8000514:	2000023e 	.word	0x2000023e
 8000518:	2000023f 	.word	0x2000023f
 800051c:	20000240 	.word	0x20000240
 8000520:	20000244 	.word	0x20000244
 8000524:	20000246 	.word	0x20000246
 8000528:	20000224 	.word	0x20000224
 800052c:	20000225 	.word	0x20000225
 8000530:	20000226 	.word	0x20000226
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000227 	.word	0x20000227
 8000540:	20000249 	.word	0x20000249
 8000544:	20000247 	.word	0x20000247
 8000548:	20000235 	.word	0x20000235
 800054c:	20000248 	.word	0x20000248
 8000550:	20000234 	.word	0x20000234
 8000554:	2000024a 	.word	0x2000024a
 8000558:	2000024b 	.word	0x2000024b
 800055c:	2000024c 	.word	0x2000024c
 8000560:	2000024d 	.word	0x2000024d
 8000564:	2000024e 	.word	0x2000024e
 8000568:	2000024f 	.word	0x2000024f
 800056c:	20000250 	.word	0x20000250
 8000570:	20000251 	.word	0x20000251
 8000574:	20000252 	.word	0x20000252
 8000578:	20000253 	.word	0x20000253
 800057c:	20000200 	.word	0x20000200
	}

	if(kapi1AcSure>5) {
 8000580:	4b68      	ldr	r3, [pc, #416]	; (8000724 <eepromKontrol+0x4f0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b66      	ldr	r3, [pc, #408]	; (8000724 <eepromKontrol+0x4f0>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b66      	ldr	r3, [pc, #408]	; (8000728 <eepromKontrol+0x4f4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b64      	ldr	r3, [pc, #400]	; (8000728 <eepromKontrol+0x4f4>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b63      	ldr	r3, [pc, #396]	; (800072c <eepromKontrol+0x4f8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b61      	ldr	r3, [pc, #388]	; (800072c <eepromKontrol+0x4f8>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b61      	ldr	r3, [pc, #388]	; (8000730 <eepromKontrol+0x4fc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b5f      	ldr	r3, [pc, #380]	; (8000730 <eepromKontrol+0x4fc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <eepromKontrol+0x500>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b5c      	ldr	r3, [pc, #368]	; (8000734 <eepromKontrol+0x500>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b5c      	ldr	r3, [pc, #368]	; (8000738 <eepromKontrol+0x504>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5a      	ldr	r3, [pc, #360]	; (8000738 <eepromKontrol+0x504>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b59      	ldr	r3, [pc, #356]	; (800073c <eepromKontrol+0x508>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b57      	ldr	r3, [pc, #348]	; (800073c <eepromKontrol+0x508>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b57      	ldr	r3, [pc, #348]	; (8000740 <eepromKontrol+0x50c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b55      	ldr	r3, [pc, #340]	; (8000740 <eepromKontrol+0x50c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b54      	ldr	r3, [pc, #336]	; (8000744 <eepromKontrol+0x510>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b52      	ldr	r3, [pc, #328]	; (8000744 <eepromKontrol+0x510>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b52      	ldr	r3, [pc, #328]	; (8000748 <eepromKontrol+0x514>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b50      	ldr	r3, [pc, #320]	; (8000748 <eepromKontrol+0x514>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b4f      	ldr	r3, [pc, #316]	; (800074c <eepromKontrol+0x518>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b4d      	ldr	r3, [pc, #308]	; (800074c <eepromKontrol+0x518>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <eepromKontrol+0x51c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <eepromKontrol+0x51c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4a      	ldr	r3, [pc, #296]	; (8000754 <eepromKontrol+0x520>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b48      	ldr	r3, [pc, #288]	; (8000754 <eepromKontrol+0x520>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b48      	ldr	r3, [pc, #288]	; (8000758 <eepromKontrol+0x524>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b46      	ldr	r3, [pc, #280]	; (8000758 <eepromKontrol+0x524>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b45      	ldr	r3, [pc, #276]	; (800075c <eepromKontrol+0x528>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b43      	ldr	r3, [pc, #268]	; (800075c <eepromKontrol+0x528>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b43      	ldr	r3, [pc, #268]	; (8000760 <eepromKontrol+0x52c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <eepromKontrol+0x52c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b40      	ldr	r3, [pc, #256]	; (8000764 <eepromKontrol+0x530>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <eepromKontrol+0x530>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <eepromKontrol+0x534>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <eepromKontrol+0x534>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b3b      	ldr	r3, [pc, #236]	; (800076c <eepromKontrol+0x538>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <eepromKontrol+0x538>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b39      	ldr	r3, [pc, #228]	; (8000770 <eepromKontrol+0x53c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b37      	ldr	r3, [pc, #220]	; (8000770 <eepromKontrol+0x53c>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b36      	ldr	r3, [pc, #216]	; (8000774 <eepromKontrol+0x540>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b34      	ldr	r3, [pc, #208]	; (8000774 <eepromKontrol+0x540>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <eepromKontrol+0x544>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <eepromKontrol+0x544>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	//memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
	//HAL_Delay(500);
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit);
 80006b4:	4b31      	ldr	r3, [pc, #196]	; (800077c <eepromKontrol+0x548>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a31      	ldr	r2, [pc, #196]	; (8000780 <eepromKontrol+0x54c>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b31      	ldr	r3, [pc, #196]	; (8000784 <eepromKontrol+0x550>)
 80006be:	6811      	ldr	r1, [r2, #0]
 80006c0:	6855      	ldr	r5, [r2, #4]
 80006c2:	6894      	ldr	r4, [r2, #8]
 80006c4:	68d0      	ldr	r0, [r2, #12]
 80006c6:	6019      	str	r1, [r3, #0]
 80006c8:	605d      	str	r5, [r3, #4]
 80006ca:	609c      	str	r4, [r3, #8]
 80006cc:	60d8      	str	r0, [r3, #12]
 80006ce:	6911      	ldr	r1, [r2, #16]
 80006d0:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d6:	f008 f823 	bl	8008720 <HAL_Delay>
	memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit);
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <eepromKontrol+0x554>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a28      	ldr	r2, [pc, #160]	; (8000780 <eepromKontrol+0x54c>)
 80006e0:	441a      	add	r2, r3
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <eepromKontrol+0x558>)
 80006e4:	6811      	ldr	r1, [r2, #0]
 80006e6:	6855      	ldr	r5, [r2, #4]
 80006e8:	6894      	ldr	r4, [r2, #8]
 80006ea:	68d0      	ldr	r0, [r2, #12]
 80006ec:	6019      	str	r1, [r3, #0]
 80006ee:	605d      	str	r5, [r3, #4]
 80006f0:	609c      	str	r4, [r3, #8]
 80006f2:	60d8      	str	r0, [r3, #12]
 80006f4:	6911      	ldr	r1, [r2, #16]
 80006f6:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 80006f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fc:	f008 f810 	bl	8008720 <HAL_Delay>
	readFromEEPROM(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f865 	bl	80007d0 <readFromEEPROM>
	HAL_Delay(200);
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f008 f80a 	bl	8008720 <HAL_Delay>
	readFromEEPROM(2);
 800070c:	2002      	movs	r0, #2
 800070e:	f000 f85f 	bl	80007d0 <readFromEEPROM>
	HAL_Delay(200);
 8000712:	20c8      	movs	r0, #200	; 0xc8
 8000714:	f008 f804 	bl	8008720 <HAL_Delay>
	readFromEEPROM(3);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f859 	bl	80007d0 <readFromEEPROM>
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bdb0      	pop	{r4, r5, r7, pc}
 8000724:	20000241 	.word	0x20000241
 8000728:	20000232 	.word	0x20000232
 800072c:	20000242 	.word	0x20000242
 8000730:	20000233 	.word	0x20000233
 8000734:	20000235 	.word	0x20000235
 8000738:	20000243 	.word	0x20000243
 800073c:	20000236 	.word	0x20000236
 8000740:	20000237 	.word	0x20000237
 8000744:	20000238 	.word	0x20000238
 8000748:	20000239 	.word	0x20000239
 800074c:	2000023a 	.word	0x2000023a
 8000750:	2000023b 	.word	0x2000023b
 8000754:	2000023c 	.word	0x2000023c
 8000758:	2000023d 	.word	0x2000023d
 800075c:	2000023e 	.word	0x2000023e
 8000760:	2000023f 	.word	0x2000023f
 8000764:	20000240 	.word	0x20000240
 8000768:	20000244 	.word	0x20000244
 800076c:	20000246 	.word	0x20000246
 8000770:	20000248 	.word	0x20000248
 8000774:	20000249 	.word	0x20000249
 8000778:	20000247 	.word	0x20000247
 800077c:	20000008 	.word	0x20000008
 8000780:	2000012c 	.word	0x2000012c
 8000784:	200001d8 	.word	0x200001d8
 8000788:	2000000c 	.word	0x2000000c
 800078c:	200001ec 	.word	0x200001ec

08000790 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <getCharFromCursorPosition+0x1c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000030 	.word	0x20000030

080007b0 <getIDCharFromCursorPosition>:

char getIDCharFromCursorPosition(uint8_t selectedInt) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	return idCharactersArray[selectedInt];
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <getIDCharFromCursorPosition+0x1c>)
 80007be:	5cd3      	ldrb	r3, [r2, r3]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000024 	.word	0x20000024

080007d0 <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d117      	bne.n	800080e <readFromEEPROM+0x3e>
		//Wifi SSID Okuma
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	e010      	b.n	8000806 <readFromEEPROM+0x36>
			wifiSSID[i] = getCharFromCursorPosition(wifiSSIDInt[i]);
 80007e4:	4a28      	ldr	r2, [pc, #160]	; (8000888 <readFromEEPROM+0xb8>)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ffcf 	bl	8000790 <getCharFromCursorPosition>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4a25      	ldr	r2, [pc, #148]	; (800088c <readFromEEPROM+0xbc>)
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	4413      	add	r3, r2
 80007fc:	460a      	mov	r2, r1
 80007fe:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3301      	adds	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	2b13      	cmp	r3, #19
 800080a:	ddeb      	ble.n	80007e4 <readFromEEPROM+0x14>
		for(int i=0; i<wifiCharacterLimit; i++) {
			machineID[i] = getIDCharFromCursorPosition(eepromData[machineIDTempLoc]);
			machineIDTempLoc++;
		}
	}
}
 800080c:	e037      	b.n	800087e <readFromEEPROM+0xae>
	} else if(state == 2) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d117      	bne.n	8000844 <readFromEEPROM+0x74>
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	e010      	b.n	800083c <readFromEEPROM+0x6c>
			wifiPass[i] = getCharFromCursorPosition(wifiPassInt[i]);
 800081a:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <readFromEEPROM+0xc0>)
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffb4 	bl	8000790 <getCharFromCursorPosition>
 8000828:	4603      	mov	r3, r0
 800082a:	4619      	mov	r1, r3
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <readFromEEPROM+0xc4>)
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	4413      	add	r3, r2
 8000832:	460a      	mov	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3301      	adds	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	2b13      	cmp	r3, #19
 8000840:	ddeb      	ble.n	800081a <readFromEEPROM+0x4a>
}
 8000842:	e01c      	b.n	800087e <readFromEEPROM+0xae>
		int machineIDTempLoc = idStartPos;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <readFromEEPROM+0xc8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e013      	b.n	8000878 <readFromEEPROM+0xa8>
			machineID[i] = getIDCharFromCursorPosition(eepromData[machineIDTempLoc]);
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <readFromEEPROM+0xcc>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffa9 	bl	80007b0 <getIDCharFromCursorPosition>
 800085e:	4603      	mov	r3, r0
 8000860:	4619      	mov	r1, r3
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <readFromEEPROM+0xd0>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4413      	add	r3, r2
 8000868:	460a      	mov	r2, r1
 800086a:	701a      	strb	r2, [r3, #0]
			machineIDTempLoc++;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	3301      	adds	r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	2b13      	cmp	r3, #19
 800087c:	dde8      	ble.n	8000850 <readFromEEPROM+0x80>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001d8 	.word	0x200001d8
 800088c:	200001b0 	.word	0x200001b0
 8000890:	200001ec 	.word	0x200001ec
 8000894:	200001c4 	.word	0x200001c4
 8000898:	20000004 	.word	0x20000004
 800089c:	2000012c 	.word	0x2000012c
 80008a0:	200001a4 	.word	0x200001a4

080008a4 <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	4613      	mov	r3, r2
 80008b0:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 80008b2:	68b8      	ldr	r0, [r7, #8]
 80008b4:	f7ff fcb6 	bl	8000224 <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f00a fff9 	bl	800b8b8 <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f007 ff29 	bl	8008720 <HAL_Delay>
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <sendMachineData>:
    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
    sendATCommand(huart, cmd, 2000);
}

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0c6      	sub	sp, #280	; 0x118
 80008dc:	af02      	add	r7, sp, #8
 80008de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008e6:	6018      	str	r0, [r3, #0]
 80008e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008f0:	6019      	str	r1, [r3, #0]
 80008f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008fa:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80008fc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <sendMachineData+0xb8>)
 8000902:	4a24      	ldr	r2, [pc, #144]	; (8000994 <sendMachineData+0xbc>)
 8000904:	21c8      	movs	r1, #200	; 0xc8
 8000906:	f00b fdb1 	bl	800c46c <sniprintf>
    sendATCommand(huart, cmd, 4000);
 800090a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800090e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000916:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	f7ff ffc2 	bl	80008a4 <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 8000920:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000928:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800092c:	4a1a      	ldr	r2, [pc, #104]	; (8000998 <sendMachineData+0xc0>)
 800092e:	9201      	str	r2, [sp, #4]
 8000930:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000934:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	9200      	str	r2, [sp, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <sendMachineData+0xc4>)
 8000940:	21c8      	movs	r1, #200	; 0xc8
 8000942:	f00b fd93 	bl	800c46c <sniprintf>
 8000946:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 800094a:	f107 0010 	add.w	r0, r7, #16
 800094e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <sendMachineData+0xc8>)
 8000954:	2132      	movs	r1, #50	; 0x32
 8000956:	f00b fd89 	bl	800c46c <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 800095a:	f107 0110 	add.w	r1, r7, #16
 800095e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000966:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	f7ff ff9a 	bl	80008a4 <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000970:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	f7ff ff8f 	bl	80008a4 <sendATCommand>
}
 8000986:	bf00      	nop
 8000988:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	0800ce14 	.word	0x0800ce14
 8000994:	0800ce24 	.word	0x0800ce24
 8000998:	0800cea0 	.word	0x0800cea0
 800099c:	0800ce44 	.word	0x0800ce44
 80009a0:	0800ceb4 	.word	0x0800ceb4

080009a4 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af04      	add	r7, sp, #16
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <hata2EEPROM+0xa4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <hata2EEPROM+0xa8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <hata2EEPROM+0xac>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009c2:	f000 f92b 	bl	8000c1c <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009c6:	e000      	b.n	80009ca <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009c8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e012      	b.n	80009f6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <hata2EEPROM+0xa8>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <hata2EEPROM+0xac>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d107      	bne.n	80009f0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <hata2EEPROM+0xa8>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	4919      	ldr	r1, [pc, #100]	; (8000a50 <hata2EEPROM+0xac>)
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	54ca      	strb	r2, [r1, r3]
					break;
 80009ee:	e007      	b.n	8000a00 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3301      	adds	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <hata2EEPROM+0xa4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbe7      	blt.n	80009d0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <hata2EEPROM+0xa8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b299      	uxth	r1, r3
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <hata2EEPROM+0xa4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	b298      	uxth	r0, r3
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <hata2EEPROM+0xa8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <hata2EEPROM+0xac>)
 8000a12:	4413      	add	r3, r2
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <hata2EEPROM+0xa4>)
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	b292      	uxth	r2, r2
 8000a1a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000a1e:	9402      	str	r4, [sp, #8]
 8000a20:	9201      	str	r2, [sp, #4]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	4603      	mov	r3, r0
 8000a26:	460a      	mov	r2, r1
 8000a28:	21a0      	movs	r1, #160	; 0xa0
 8000a2a:	480a      	ldr	r0, [pc, #40]	; (8000a54 <hata2EEPROM+0xb0>)
 8000a2c:	f008 ff02 	bl	8009834 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f007 fe74 	bl	8008720 <HAL_Delay>
	eepromKontrol(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fbfb 	bl	8000234 <eepromKontrol>
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd90      	pop	{r4, r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000ac 	.word	0x200000ac
 8000a4c:	200000b0 	.word	0x200000b0
 8000a50:	2000012c 	.word	0x2000012c
 8000a54:	200002b8 	.word	0x200002b8

08000a58 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d11d      	bne.n	8000aa4 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a68:	4b62      	ldr	r3, [pc, #392]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d105      	bne.n	8000a7c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a70:	4a61      	ldr	r2, [pc, #388]	; (8000bf8 <hataKoduLcdGoster+0x1a0>)
 8000a72:	2101      	movs	r1, #1
 8000a74:	2001      	movs	r0, #1
 8000a76:	f007 f8fd 	bl	8007c74 <lcd_print>
 8000a7a:	e008      	b.n	8000a8e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a7c:	4b5d      	ldr	r3, [pc, #372]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a84:	4a5d      	ldr	r2, [pc, #372]	; (8000bfc <hataKoduLcdGoster+0x1a4>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f007 f8f3 	bl	8007c74 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a8e:	4a5c      	ldr	r2, [pc, #368]	; (8000c00 <hataKoduLcdGoster+0x1a8>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	2002      	movs	r0, #2
 8000a94:	f007 f8ee 	bl	8007c74 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a98:	4a5a      	ldr	r2, [pc, #360]	; (8000c04 <hataKoduLcdGoster+0x1ac>)
 8000a9a:	2107      	movs	r1, #7
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f007 f8e9 	bl	8007c74 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000aa2:	e0a3      	b.n	8000bec <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d11d      	bne.n	8000ae6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000aaa:	4b52      	ldr	r3, [pc, #328]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d105      	bne.n	8000abe <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000ab2:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <hataKoduLcdGoster+0x1a0>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f007 f8dc 	bl	8007c74 <lcd_print>
 8000abc:	e008      	b.n	8000ad0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000abe:	4b4d      	ldr	r3, [pc, #308]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d104      	bne.n	8000ad0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000ac6:	4a4d      	ldr	r2, [pc, #308]	; (8000bfc <hataKoduLcdGoster+0x1a4>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	2001      	movs	r0, #1
 8000acc:	f007 f8d2 	bl	8007c74 <lcd_print>
		lcd_print(2, 2, "2");
 8000ad0:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <hataKoduLcdGoster+0x1b0>)
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f007 f8cd 	bl	8007c74 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ada:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <hataKoduLcdGoster+0x1ac>)
 8000adc:	2107      	movs	r1, #7
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f007 f8c8 	bl	8007c74 <lcd_print>
}
 8000ae4:	e082      	b.n	8000bec <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d11d      	bne.n	8000b28 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000aec:	4b41      	ldr	r3, [pc, #260]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d105      	bne.n	8000b00 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000af4:	4a40      	ldr	r2, [pc, #256]	; (8000bf8 <hataKoduLcdGoster+0x1a0>)
 8000af6:	2101      	movs	r1, #1
 8000af8:	2001      	movs	r0, #1
 8000afa:	f007 f8bb 	bl	8007c74 <lcd_print>
 8000afe:	e008      	b.n	8000b12 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b00:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d104      	bne.n	8000b12 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000b08:	4a3c      	ldr	r2, [pc, #240]	; (8000bfc <hataKoduLcdGoster+0x1a4>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f007 f8b1 	bl	8007c74 <lcd_print>
		lcd_print(2, 3, "3");
 8000b12:	4a3e      	ldr	r2, [pc, #248]	; (8000c0c <hataKoduLcdGoster+0x1b4>)
 8000b14:	2103      	movs	r1, #3
 8000b16:	2002      	movs	r0, #2
 8000b18:	f007 f8ac 	bl	8007c74 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b1c:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <hataKoduLcdGoster+0x1ac>)
 8000b1e:	2107      	movs	r1, #7
 8000b20:	2002      	movs	r0, #2
 8000b22:	f007 f8a7 	bl	8007c74 <lcd_print>
}
 8000b26:	e061      	b.n	8000bec <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d11d      	bne.n	8000b6a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b2e:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d105      	bne.n	8000b42 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b36:	4a30      	ldr	r2, [pc, #192]	; (8000bf8 <hataKoduLcdGoster+0x1a0>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f007 f89a 	bl	8007c74 <lcd_print>
 8000b40:	e008      	b.n	8000b54 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d104      	bne.n	8000b54 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <hataKoduLcdGoster+0x1a4>)
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f007 f890 	bl	8007c74 <lcd_print>
		lcd_print(2, 4, "4");
 8000b54:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <hataKoduLcdGoster+0x1b8>)
 8000b56:	2104      	movs	r1, #4
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f007 f88b 	bl	8007c74 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b5e:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <hataKoduLcdGoster+0x1ac>)
 8000b60:	2107      	movs	r1, #7
 8000b62:	2002      	movs	r0, #2
 8000b64:	f007 f886 	bl	8007c74 <lcd_print>
}
 8000b68:	e040      	b.n	8000bec <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b05      	cmp	r3, #5
 8000b6e:	d11d      	bne.n	8000bac <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d105      	bne.n	8000b84 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b78:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <hataKoduLcdGoster+0x1a0>)
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f007 f879 	bl	8007c74 <lcd_print>
 8000b82:	e008      	b.n	8000b96 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d104      	bne.n	8000b96 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <hataKoduLcdGoster+0x1a4>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2001      	movs	r0, #1
 8000b92:	f007 f86f 	bl	8007c74 <lcd_print>
		lcd_print(2, 5, "5");
 8000b96:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <hataKoduLcdGoster+0x1bc>)
 8000b98:	2105      	movs	r1, #5
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f007 f86a 	bl	8007c74 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <hataKoduLcdGoster+0x1ac>)
 8000ba2:	2107      	movs	r1, #7
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f007 f865 	bl	8007c74 <lcd_print>
}
 8000baa:	e01f      	b.n	8000bec <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d11c      	bne.n	8000bec <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d105      	bne.n	8000bc6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <hataKoduLcdGoster+0x1a0>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f007 f858 	bl	8007c74 <lcd_print>
 8000bc4:	e008      	b.n	8000bd8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <hataKoduLcdGoster+0x19c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d104      	bne.n	8000bd8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <hataKoduLcdGoster+0x1a4>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f007 f84e 	bl	8007c74 <lcd_print>
		lcd_print(2, 6, "6");
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <hataKoduLcdGoster+0x1c0>)
 8000bda:	2106      	movs	r1, #6
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f007 f849 	bl	8007c74 <lcd_print>
		lcd_print(2, 7, "          ");
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <hataKoduLcdGoster+0x1ac>)
 8000be4:	2107      	movs	r1, #7
 8000be6:	2002      	movs	r0, #2
 8000be8:	f007 f844 	bl	8007c74 <lcd_print>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000249 	.word	0x20000249
 8000bf8:	0800cf40 	.word	0x0800cf40
 8000bfc:	0800cf50 	.word	0x0800cf50
 8000c00:	0800cf60 	.word	0x0800cf60
 8000c04:	0800cf64 	.word	0x0800cf64
 8000c08:	0800cf70 	.word	0x0800cf70
 8000c0c:	0800cf74 	.word	0x0800cf74
 8000c10:	0800cf78 	.word	0x0800cf78
 8000c14:	0800cf7c 	.word	0x0800cf7c
 8000c18:	0800cf80 	.word	0x0800cf80

08000c1c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e009      	b.n	8000c3c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <eepromDataFillWithEmpty+0x38>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <eepromDataFillWithEmpty+0x3c>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <eepromDataFillWithEmpty+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dbf0      	blt.n	8000c28 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000084 	.word	0x20000084
 8000c58:	2000012c 	.word	0x2000012c
 8000c5c:	200000ac 	.word	0x200000ac

08000c60 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c72:	4b50      	ldr	r3, [pc, #320]	; (8000db4 <i2cTest+0x154>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b4e      	ldr	r3, [pc, #312]	; (8000db4 <i2cTest+0x154>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c82:	484c      	ldr	r0, [pc, #304]	; (8000db4 <i2cTest+0x154>)
 8000c84:	f008 fca8 	bl	80095d8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c88:	23c0      	movs	r3, #192	; 0xc0
 8000c8a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c8c:	2311      	movs	r3, #17
 8000c8e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4846      	ldr	r0, [pc, #280]	; (8000db8 <i2cTest+0x158>)
 8000c9e:	f008 f8af 	bl	8008e00 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	4844      	ldr	r0, [pc, #272]	; (8000db8 <i2cTest+0x158>)
 8000ca8:	f008 fb21 	bl	80092ee <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	4841      	ldr	r0, [pc, #260]	; (8000db8 <i2cTest+0x158>)
 8000cb2:	f008 fb1c 	bl	80092ee <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f007 fd32 	bl	8008720 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000cbc:	bf00      	nop
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	483d      	ldr	r0, [pc, #244]	; (8000db8 <i2cTest+0x158>)
 8000cc2:	f008 fafd 	bl	80092c0 <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d006      	beq.n	8000cda <i2cTest+0x7a>
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	483a      	ldr	r0, [pc, #232]	; (8000db8 <i2cTest+0x158>)
 8000cd0:	f008 faf6 	bl	80092c0 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d1f1      	bne.n	8000cbe <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	4836      	ldr	r0, [pc, #216]	; (8000db8 <i2cTest+0x158>)
 8000ce0:	f008 fb05 	bl	80092ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f007 fd1b 	bl	8008720 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cea:	bf00      	nop
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	4832      	ldr	r0, [pc, #200]	; (8000db8 <i2cTest+0x158>)
 8000cf0:	f008 fae6 	bl	80092c0 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d0f8      	beq.n	8000cec <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	482e      	ldr	r0, [pc, #184]	; (8000db8 <i2cTest+0x158>)
 8000d00:	f008 faf5 	bl	80092ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f007 fd0b 	bl	8008720 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d0a:	bf00      	nop
 8000d0c:	2140      	movs	r1, #64	; 0x40
 8000d0e:	482a      	ldr	r0, [pc, #168]	; (8000db8 <i2cTest+0x158>)
 8000d10:	f008 fad6 	bl	80092c0 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d0f8      	beq.n	8000d0c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	4826      	ldr	r0, [pc, #152]	; (8000db8 <i2cTest+0x158>)
 8000d20:	f008 fae5 	bl	80092ee <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f007 fcfb 	bl	8008720 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d2a:	bf00      	nop
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4822      	ldr	r0, [pc, #136]	; (8000db8 <i2cTest+0x158>)
 8000d30:	f008 fac6 	bl	80092c0 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d1f8      	bne.n	8000d2c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	481e      	ldr	r0, [pc, #120]	; (8000db8 <i2cTest+0x158>)
 8000d40:	f008 fad5 	bl	80092ee <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d44:	200a      	movs	r0, #10
 8000d46:	f007 fceb 	bl	8008720 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d4a:	bf00      	nop
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	481a      	ldr	r0, [pc, #104]	; (8000db8 <i2cTest+0x158>)
 8000d50:	f008 fab6 	bl	80092c0 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d1f8      	bne.n	8000d4c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4812      	ldr	r0, [pc, #72]	; (8000db8 <i2cTest+0x158>)
 8000d70:	f008 f846 	bl	8008e00 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <i2cTest+0x154>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <i2cTest+0x154>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d82:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <i2cTest+0x154>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <i2cTest+0x154>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d92:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <i2cTest+0x154>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <i2cTest+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0201 	orr.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <i2cTest+0x154>)
 8000da6:	f008 fad3 	bl	8009350 <HAL_I2C_Init>
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200002b8 	.word	0x200002b8
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000dc6:	20c8      	movs	r0, #200	; 0xc8
 8000dc8:	f007 fcaa 	bl	8008720 <HAL_Delay>
	lcd_clear();
 8000dcc:	f006 ff7e 	bl	8007ccc <lcd_clear>
	if(type == 1 && page == 0) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d143      	bne.n	8000e5e <printTemplate+0xa2>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d140      	bne.n	8000e5e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000ddc:	4a9d      	ldr	r2, [pc, #628]	; (8001054 <printTemplate+0x298>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	2001      	movs	r0, #1
 8000de2:	f006 ff47 	bl	8007c74 <lcd_print>
		lcd_print(2, 3, "0");
 8000de6:	4a9c      	ldr	r2, [pc, #624]	; (8001058 <printTemplate+0x29c>)
 8000de8:	2103      	movs	r1, #3
 8000dea:	2002      	movs	r0, #2
 8000dec:	f006 ff42 	bl	8007c74 <lcd_print>
		lcd_print(2, 4, "1");
 8000df0:	4a9a      	ldr	r2, [pc, #616]	; (800105c <printTemplate+0x2a0>)
 8000df2:	2104      	movs	r1, #4
 8000df4:	2002      	movs	r0, #2
 8000df6:	f006 ff3d 	bl	8007c74 <lcd_print>
		lcd_print(2, 5, "2");
 8000dfa:	4a99      	ldr	r2, [pc, #612]	; (8001060 <printTemplate+0x2a4>)
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f006 ff38 	bl	8007c74 <lcd_print>
		lcd_print(2, 6, "3");
 8000e04:	4a97      	ldr	r2, [pc, #604]	; (8001064 <printTemplate+0x2a8>)
 8000e06:	2106      	movs	r1, #6
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f006 ff33 	bl	8007c74 <lcd_print>
		lcd_print(2, 7, "4");
 8000e0e:	4a96      	ldr	r2, [pc, #600]	; (8001068 <printTemplate+0x2ac>)
 8000e10:	2107      	movs	r1, #7
 8000e12:	2002      	movs	r0, #2
 8000e14:	f006 ff2e 	bl	8007c74 <lcd_print>
		lcd_print(2, 10, "5");
 8000e18:	4a94      	ldr	r2, [pc, #592]	; (800106c <printTemplate+0x2b0>)
 8000e1a:	210a      	movs	r1, #10
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f006 ff29 	bl	8007c74 <lcd_print>
		lcd_print(2, 11, "6");
 8000e22:	4a93      	ldr	r2, [pc, #588]	; (8001070 <printTemplate+0x2b4>)
 8000e24:	210b      	movs	r1, #11
 8000e26:	2002      	movs	r0, #2
 8000e28:	f006 ff24 	bl	8007c74 <lcd_print>
		lcd_print(2, 12, "7");
 8000e2c:	4a91      	ldr	r2, [pc, #580]	; (8001074 <printTemplate+0x2b8>)
 8000e2e:	210c      	movs	r1, #12
 8000e30:	2002      	movs	r0, #2
 8000e32:	f006 ff1f 	bl	8007c74 <lcd_print>
		lcd_print(2, 13, "8");
 8000e36:	4a90      	ldr	r2, [pc, #576]	; (8001078 <printTemplate+0x2bc>)
 8000e38:	210d      	movs	r1, #13
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f006 ff1a 	bl	8007c74 <lcd_print>
		lcd_print(2, 14, "9");
 8000e40:	4a8e      	ldr	r2, [pc, #568]	; (800107c <printTemplate+0x2c0>)
 8000e42:	210e      	movs	r1, #14
 8000e44:	2002      	movs	r0, #2
 8000e46:	f006 ff15 	bl	8007c74 <lcd_print>
		lcd_print(1, 5, machineID);
 8000e4a:	4a8d      	ldr	r2, [pc, #564]	; (8001080 <printTemplate+0x2c4>)
 8000e4c:	2105      	movs	r1, #5
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f006 ff10 	bl	8007c74 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e54:	2103      	movs	r1, #3
 8000e56:	2002      	movs	r0, #2
 8000e58:	f006 feed 	bl	8007c36 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e5c:	e0f5      	b.n	800104a <printTemplate+0x28e>
	} else if(type == 2) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d178      	bne.n	8000f56 <printTemplate+0x19a>
		if(page == 1) {
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d114      	bne.n	8000e94 <printTemplate+0xd8>
			lcd_clear();
 8000e6a:	f006 ff2f 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f007 fc56 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e74:	4a83      	ldr	r2, [pc, #524]	; (8001084 <printTemplate+0x2c8>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f006 fefb 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e7e:	4a82      	ldr	r2, [pc, #520]	; (8001088 <printTemplate+0x2cc>)
 8000e80:	2107      	movs	r1, #7
 8000e82:	2001      	movs	r0, #1
 8000e84:	f006 fef6 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e88:	4a80      	ldr	r2, [pc, #512]	; (800108c <printTemplate+0x2d0>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f006 fef1 	bl	8007c74 <lcd_print>
}
 8000e92:	e0da      	b.n	800104a <printTemplate+0x28e>
		} else if(page == 2) {
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d114      	bne.n	8000ec4 <printTemplate+0x108>
			lcd_clear();
 8000e9a:	f006 ff17 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000e9e:	2064      	movs	r0, #100	; 0x64
 8000ea0:	f007 fc3e 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ea4:	4a77      	ldr	r2, [pc, #476]	; (8001084 <printTemplate+0x2c8>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f006 fee3 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eae:	4a76      	ldr	r2, [pc, #472]	; (8001088 <printTemplate+0x2cc>)
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f006 fede 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000eb8:	4a75      	ldr	r2, [pc, #468]	; (8001090 <printTemplate+0x2d4>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f006 fed9 	bl	8007c74 <lcd_print>
}
 8000ec2:	e0c2      	b.n	800104a <printTemplate+0x28e>
		} else if(page == 3) {
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d114      	bne.n	8000ef4 <printTemplate+0x138>
			lcd_clear();
 8000eca:	f006 feff 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	; 0x64
 8000ed0:	f007 fc26 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ed4:	4a6b      	ldr	r2, [pc, #428]	; (8001084 <printTemplate+0x2c8>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f006 fecb 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ede:	4a6a      	ldr	r2, [pc, #424]	; (8001088 <printTemplate+0x2cc>)
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f006 fec6 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ee8:	4a6a      	ldr	r2, [pc, #424]	; (8001094 <printTemplate+0x2d8>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	2002      	movs	r0, #2
 8000eee:	f006 fec1 	bl	8007c74 <lcd_print>
}
 8000ef2:	e0aa      	b.n	800104a <printTemplate+0x28e>
		} else if(page == 4) {
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d114      	bne.n	8000f24 <printTemplate+0x168>
			lcd_clear();
 8000efa:	f006 fee7 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000efe:	2064      	movs	r0, #100	; 0x64
 8000f00:	f007 fc0e 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f04:	4a5f      	ldr	r2, [pc, #380]	; (8001084 <printTemplate+0x2c8>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f006 feb3 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f0e:	4a5e      	ldr	r2, [pc, #376]	; (8001088 <printTemplate+0x2cc>)
 8000f10:	2107      	movs	r1, #7
 8000f12:	2001      	movs	r0, #1
 8000f14:	f006 feae 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f18:	4a5f      	ldr	r2, [pc, #380]	; (8001098 <printTemplate+0x2dc>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f006 fea9 	bl	8007c74 <lcd_print>
}
 8000f22:	e092      	b.n	800104a <printTemplate+0x28e>
		} else if(page == 5) {
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	f040 808f 	bne.w	800104a <printTemplate+0x28e>
			lcd_clear();
 8000f2c:	f006 fece 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000f30:	2064      	movs	r0, #100	; 0x64
 8000f32:	f007 fbf5 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f36:	4a53      	ldr	r2, [pc, #332]	; (8001084 <printTemplate+0x2c8>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f006 fe9a 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f40:	4a51      	ldr	r2, [pc, #324]	; (8001088 <printTemplate+0x2cc>)
 8000f42:	2107      	movs	r1, #7
 8000f44:	2001      	movs	r0, #1
 8000f46:	f006 fe95 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f4a:	4a54      	ldr	r2, [pc, #336]	; (800109c <printTemplate+0x2e0>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f006 fe90 	bl	8007c74 <lcd_print>
}
 8000f54:	e079      	b.n	800104a <printTemplate+0x28e>
	} else if(type == 3) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d176      	bne.n	800104a <printTemplate+0x28e>
		if(page == 1) {
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d114      	bne.n	8000f8c <printTemplate+0x1d0>
			lcd_clear();
 8000f62:	f006 feb3 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f007 fbda 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <printTemplate+0x2e4>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f006 fe7f 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f76:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <printTemplate+0x2e8>)
 8000f78:	2107      	movs	r1, #7
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 fe7a 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f80:	4a42      	ldr	r2, [pc, #264]	; (800108c <printTemplate+0x2d0>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2002      	movs	r0, #2
 8000f86:	f006 fe75 	bl	8007c74 <lcd_print>
}
 8000f8a:	e05e      	b.n	800104a <printTemplate+0x28e>
		} else if(page == 2) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0x200>
			lcd_clear();
 8000f92:	f006 fe9b 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fbc2 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f9c:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <printTemplate+0x2e4>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 fe67 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fa6:	4a3f      	ldr	r2, [pc, #252]	; (80010a4 <printTemplate+0x2e8>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 fe62 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fb0:	4a37      	ldr	r2, [pc, #220]	; (8001090 <printTemplate+0x2d4>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 fe5d 	bl	8007c74 <lcd_print>
}
 8000fba:	e046      	b.n	800104a <printTemplate+0x28e>
		} else if(page == 3) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d114      	bne.n	8000fec <printTemplate+0x230>
			lcd_clear();
 8000fc2:	f006 fe83 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f007 fbaa 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fcc:	4a34      	ldr	r2, [pc, #208]	; (80010a0 <printTemplate+0x2e4>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f006 fe4f 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fd6:	4a33      	ldr	r2, [pc, #204]	; (80010a4 <printTemplate+0x2e8>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f006 fe4a 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fe0:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <printTemplate+0x2d8>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f006 fe45 	bl	8007c74 <lcd_print>
}
 8000fea:	e02e      	b.n	800104a <printTemplate+0x28e>
		} else if(page == 4) {
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d114      	bne.n	800101c <printTemplate+0x260>
			lcd_clear();
 8000ff2:	f006 fe6b 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f007 fb92 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <printTemplate+0x2e4>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2001      	movs	r0, #1
 8001002:	f006 fe37 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001006:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <printTemplate+0x2e8>)
 8001008:	2107      	movs	r1, #7
 800100a:	2001      	movs	r0, #1
 800100c:	f006 fe32 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <printTemplate+0x2dc>)
 8001012:	2101      	movs	r1, #1
 8001014:	2002      	movs	r0, #2
 8001016:	f006 fe2d 	bl	8007c74 <lcd_print>
}
 800101a:	e016      	b.n	800104a <printTemplate+0x28e>
		} else if(page == 5) {
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b05      	cmp	r3, #5
 8001020:	d113      	bne.n	800104a <printTemplate+0x28e>
			lcd_clear();
 8001022:	f006 fe53 	bl	8007ccc <lcd_clear>
			HAL_Delay(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f007 fb7a 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800102c:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <printTemplate+0x2e4>)
 800102e:	2101      	movs	r1, #1
 8001030:	2001      	movs	r0, #1
 8001032:	f006 fe1f 	bl	8007c74 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <printTemplate+0x2e8>)
 8001038:	2107      	movs	r1, #7
 800103a:	2001      	movs	r0, #1
 800103c:	f006 fe1a 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <printTemplate+0x2e0>)
 8001042:	2101      	movs	r1, #1
 8001044:	2002      	movs	r0, #2
 8001046:	f006 fe15 	bl	8007c74 <lcd_print>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	0800cf84 	.word	0x0800cf84
 8001058:	0800cf8c 	.word	0x0800cf8c
 800105c:	0800cf90 	.word	0x0800cf90
 8001060:	0800cf94 	.word	0x0800cf94
 8001064:	0800cf98 	.word	0x0800cf98
 8001068:	0800cf9c 	.word	0x0800cf9c
 800106c:	0800cfa0 	.word	0x0800cfa0
 8001070:	0800cfa4 	.word	0x0800cfa4
 8001074:	0800cfa8 	.word	0x0800cfa8
 8001078:	0800cfac 	.word	0x0800cfac
 800107c:	0800cfb0 	.word	0x0800cfb0
 8001080:	200001a4 	.word	0x200001a4
 8001084:	0800cfb4 	.word	0x0800cfb4
 8001088:	200001b0 	.word	0x200001b0
 800108c:	0800cfbc 	.word	0x0800cfbc
 8001090:	0800cfd0 	.word	0x0800cfd0
 8001094:	0800cfe4 	.word	0x0800cfe4
 8001098:	0800cff8 	.word	0x0800cff8
 800109c:	0800d00c 	.word	0x0800d00c
 80010a0:	0800d020 	.word	0x0800d020
 80010a4:	200001c4 	.word	0x200001c4

080010a8 <checkSlideVal>:

int checkSlideVal(int state) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d111      	bne.n	80010da <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010b6:	2101      	movs	r1, #1
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <checkSlideVal+0x60>)
 80010ba:	f008 f901 	bl	80092c0 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <checkSlideVal+0x20>
			return 34;
 80010c4:	2322      	movs	r3, #34	; 0x22
 80010c6:	e01b      	b.n	8001100 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010c8:	2108      	movs	r1, #8
 80010ca:	4810      	ldr	r0, [pc, #64]	; (800110c <checkSlideVal+0x64>)
 80010cc:	f008 f8f8 	bl	80092c0 <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d113      	bne.n	80010fe <checkSlideVal+0x56>
			return 32;
 80010d6:	2320      	movs	r3, #32
 80010d8:	e012      	b.n	8001100 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010da:	2101      	movs	r1, #1
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <checkSlideVal+0x60>)
 80010de:	f008 f8ef 	bl	80092c0 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <checkSlideVal+0x44>
			return 35;
 80010e8:	2323      	movs	r3, #35	; 0x23
 80010ea:	e009      	b.n	8001100 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010ec:	2108      	movs	r1, #8
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <checkSlideVal+0x64>)
 80010f0:	f008 f8e6 	bl	80092c0 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <checkSlideVal+0x56>
			return 33;
 80010fa:	2321      	movs	r3, #33	; 0x21
 80010fc:	e000      	b.n	8001100 <checkSlideVal+0x58>
		}
	}
	return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40010800 	.word	0x40010800
 800110c:	40011000 	.word	0x40011000

08001110 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff f880 	bl	8000224 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800112c:	e08a      	b.n	8001244 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800112e:	6838      	ldr	r0, [r7, #0]
 8001130:	f7ff ffba 	bl	80010a8 <checkSlideVal>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd07      	ble.n	800114a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff ffb4 	bl	80010a8 <checkSlideVal>
 8001140:	4603      	mov	r3, r0
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b44      	ldr	r3, [pc, #272]	; (8001258 <slideText+0x148>)
 8001146:	701a      	strb	r2, [r3, #0]
			break;
 8001148:	e081      	b.n	800124e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
 800114e:	e075      	b.n	800123c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7ff ffa9 	bl	80010a8 <checkSlideVal>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	dd09      	ble.n	8001170 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f7ff ffa3 	bl	80010a8 <checkSlideVal>
 8001162:	4603      	mov	r3, r0
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <slideText+0x148>)
 8001168:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800116e:	e069      	b.n	8001244 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	4413      	add	r3, r2
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	e029      	b.n	80011ce <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f7ff ff94 	bl	80010a8 <checkSlideVal>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	dd0b      	ble.n	800119e <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f7ff ff8e 	bl	80010a8 <checkSlideVal>
 800118c:	4603      	mov	r3, r0
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <slideText+0x148>)
 8001192:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800119c:	e01d      	b.n	80011da <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	b2d8      	uxtb	r0, r3
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	b2d9      	uxtb	r1, r3
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4413      	add	r3, r2
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	f006 fd6e 	bl	8007c9e <lcd_print_char>
				HAL_Delay(30);
 80011c2:	201e      	movs	r0, #30
 80011c4:	f007 faac 	bl	8008720 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	3301      	adds	r3, #1
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	7dfa      	ldrb	r2, [r7, #23]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4413      	add	r3, r2
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dbcf      	blt.n	800117a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	3b01      	subs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	e023      	b.n	800122a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80011e2:	6838      	ldr	r0, [r7, #0]
 80011e4:	f7ff ff60 	bl	80010a8 <checkSlideVal>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dd0b      	ble.n	8001206 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f7ff ff5a 	bl	80010a8 <checkSlideVal>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <slideText+0x148>)
 80011fa:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001204:	e017      	b.n	8001236 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	db0a      	blt.n	8001224 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	b2d1      	uxtb	r1, r2
 8001216:	2220      	movs	r2, #32
 8001218:	4618      	mov	r0, r3
 800121a:	f006 fd40 	bl	8007c9e <lcd_print_char>
			    	 HAL_Delay(30);
 800121e:	201e      	movs	r0, #30
 8001220:	f007 fa7e 	bl	8008720 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	3b01      	subs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	7dfa      	ldrb	r2, [r7, #23]
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	429a      	cmp	r2, r3
 8001234:	dad5      	bge.n	80011e2 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	3301      	adds	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	6a3a      	ldr	r2, [r7, #32]
 8001240:	429a      	cmp	r2, r3
 8001242:	db85      	blt.n	8001150 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	2b01      	cmp	r3, #1
 8001248:	f43f af71 	beq.w	800112e <slideText+0x1e>
			     }
			}
		}
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000228 	.word	0x20000228

0800125c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <__NVIC_SystemReset+0x24>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800126e:	4904      	ldr	r1, [pc, #16]	; (8001280 <__NVIC_SystemReset+0x24>)
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_SystemReset+0x28>)
 8001272:	4313      	orrs	r3, r2
 8001274:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001276:	f3bf 8f4f 	dsb	sy
}
 800127a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <__NVIC_SystemReset+0x20>
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	05fa0004 	.word	0x05fa0004

08001288 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800128e:	2101      	movs	r1, #1
 8001290:	488e      	ldr	r0, [pc, #568]	; (80014cc <menu+0x244>)
 8001292:	f008 f815 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	f040 808e 	bne.w	80013ba <menu+0x132>
 800129e:	4b8c      	ldr	r3, [pc, #560]	; (80014d0 <menu+0x248>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f083 0301 	eor.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 8086 	beq.w	80013ba <menu+0x132>
		menuSayac = menuSayac+1;
 80012ae:	4b89      	ldr	r3, [pc, #548]	; (80014d4 <menu+0x24c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b87      	ldr	r3, [pc, #540]	; (80014d4 <menu+0x24c>)
 80012b8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80012ba:	4b86      	ldr	r3, [pc, #536]	; (80014d4 <menu+0x24c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b24      	cmp	r3, #36	; 0x24
 80012c0:	d102      	bne.n	80012c8 <menu+0x40>
			menuSayac = 1;
 80012c2:	4b84      	ldr	r3, [pc, #528]	; (80014d4 <menu+0x24c>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80012c8:	4b82      	ldr	r3, [pc, #520]	; (80014d4 <menu+0x24c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b12      	cmp	r3, #18
 80012ce:	d106      	bne.n	80012de <menu+0x56>
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <menu+0x250>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <menu+0x56>
			menuSayac = 21;
 80012d8:	4b7e      	ldr	r3, [pc, #504]	; (80014d4 <menu+0x24c>)
 80012da:	2215      	movs	r2, #21
 80012dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80012de:	4b7d      	ldr	r3, [pc, #500]	; (80014d4 <menu+0x24c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d106      	bne.n	80012f4 <menu+0x6c>
 80012e6:	4b7d      	ldr	r3, [pc, #500]	; (80014dc <menu+0x254>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <menu+0x6c>
			menuSayac = 16;
 80012ee:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <menu+0x24c>)
 80012f0:	2210      	movs	r2, #16
 80012f2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80012f4:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <menu+0x24c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b0d      	cmp	r3, #13
 80012fa:	d106      	bne.n	800130a <menu+0x82>
 80012fc:	4b77      	ldr	r3, [pc, #476]	; (80014dc <menu+0x254>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <menu+0x82>
			menuSayac = 16;
 8001304:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <menu+0x24c>)
 8001306:	2210      	movs	r2, #16
 8001308:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800130a:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <menu+0x24c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b09      	cmp	r3, #9
 8001310:	d106      	bne.n	8001320 <menu+0x98>
 8001312:	4b72      	ldr	r3, [pc, #456]	; (80014dc <menu+0x254>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d102      	bne.n	8001320 <menu+0x98>
			menuSayac = 13;
 800131a:	4b6e      	ldr	r3, [pc, #440]	; (80014d4 <menu+0x24c>)
 800131c:	220d      	movs	r2, #13
 800131e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001320:	4b6c      	ldr	r3, [pc, #432]	; (80014d4 <menu+0x24c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b0a      	cmp	r3, #10
 8001326:	d10a      	bne.n	800133e <menu+0xb6>
 8001328:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <menu+0x258>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d003      	beq.n	8001338 <menu+0xb0>
 8001330:	4b6b      	ldr	r3, [pc, #428]	; (80014e0 <menu+0x258>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d102      	bne.n	800133e <menu+0xb6>
			menuSayac = 11;
 8001338:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <menu+0x24c>)
 800133a:	220b      	movs	r2, #11
 800133c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800133e:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <menu+0x24c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b0c      	cmp	r3, #12
 8001344:	d10e      	bne.n	8001364 <menu+0xdc>
 8001346:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <menu+0x25c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d003      	beq.n	8001356 <menu+0xce>
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <menu+0x25c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d106      	bne.n	8001364 <menu+0xdc>
 8001356:	4b61      	ldr	r3, [pc, #388]	; (80014dc <menu+0x254>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d102      	bne.n	8001364 <menu+0xdc>
			menuSayac = 16;
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <menu+0x24c>)
 8001360:	2210      	movs	r2, #16
 8001362:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001364:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <menu+0x24c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	d10e      	bne.n	800138a <menu+0x102>
 800136c:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <menu+0x25c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d003      	beq.n	800137c <menu+0xf4>
 8001374:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <menu+0x25c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d106      	bne.n	800138a <menu+0x102>
 800137c:	4b57      	ldr	r3, [pc, #348]	; (80014dc <menu+0x254>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d102      	bne.n	800138a <menu+0x102>
			menuSayac = 13;
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <menu+0x24c>)
 8001386:	220d      	movs	r2, #13
 8001388:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800138a:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <menu+0x24c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	d106      	bne.n	80013a0 <menu+0x118>
 8001392:	4b55      	ldr	r3, [pc, #340]	; (80014e8 <menu+0x260>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d102      	bne.n	80013a0 <menu+0x118>
			menuSayac = 16;
 800139a:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <menu+0x24c>)
 800139c:	2210      	movs	r2, #16
 800139e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <menu+0x24c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b18      	cmp	r3, #24
 80013a6:	d106      	bne.n	80013b6 <menu+0x12e>
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <menu+0x250>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <menu+0x12e>
			menuSayac = 26;
 80013b0:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <menu+0x24c>)
 80013b2:	221a      	movs	r2, #26
 80013b4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013b6:	f003 fb33 	bl	8004a20 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ba:	2108      	movs	r1, #8
 80013bc:	484b      	ldr	r0, [pc, #300]	; (80014ec <menu+0x264>)
 80013be:	f007 ff7f 	bl	80092c0 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d175      	bne.n	80014b4 <menu+0x22c>
 80013c8:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <menu+0x248>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d06e      	beq.n	80014b4 <menu+0x22c>
		if (menuSayac <= 1) {
 80013d6:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <menu+0x24c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d802      	bhi.n	80013e4 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <menu+0x24c>)
 80013e0:	2224      	movs	r2, #36	; 0x24
 80013e2:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80013e4:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <menu+0x24c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <menu+0x24c>)
 80013ee:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80013f0:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <menu+0x24c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b14      	cmp	r3, #20
 80013f6:	d106      	bne.n	8001406 <menu+0x17e>
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <menu+0x250>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <menu+0x17e>
			menuSayac = 17;
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <menu+0x24c>)
 8001402:	2211      	movs	r2, #17
 8001404:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <menu+0x24c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	d106      	bne.n	800141c <menu+0x194>
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <menu+0x254>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <menu+0x194>
			menuSayac = 7;
 8001416:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <menu+0x24c>)
 8001418:	2207      	movs	r2, #7
 800141a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800141c:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <menu+0x24c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d106      	bne.n	8001432 <menu+0x1aa>
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <menu+0x254>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d102      	bne.n	8001432 <menu+0x1aa>
			menuSayac = 12;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <menu+0x24c>)
 800142e:	220c      	movs	r2, #12
 8001430:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <menu+0x24c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d106      	bne.n	8001448 <menu+0x1c0>
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <menu+0x254>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d102      	bne.n	8001448 <menu+0x1c0>
			menuSayac = 8;
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <menu+0x24c>)
 8001444:	2208      	movs	r2, #8
 8001446:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <menu+0x24c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b0a      	cmp	r3, #10
 800144e:	d10a      	bne.n	8001466 <menu+0x1de>
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <menu+0x258>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d003      	beq.n	8001460 <menu+0x1d8>
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <menu+0x258>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d102      	bne.n	8001466 <menu+0x1de>
			menuSayac = 9;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <menu+0x24c>)
 8001462:	2209      	movs	r2, #9
 8001464:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <menu+0x24c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d10a      	bne.n	8001484 <menu+0x1fc>
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <menu+0x25c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d003      	beq.n	800147e <menu+0x1f6>
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <menu+0x25c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d102      	bne.n	8001484 <menu+0x1fc>
			menuSayac = 11;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <menu+0x24c>)
 8001480:	220b      	movs	r2, #11
 8001482:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <menu+0x24c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d106      	bne.n	800149a <menu+0x212>
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <menu+0x260>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d102      	bne.n	800149a <menu+0x212>
			menuSayac = 14;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <menu+0x24c>)
 8001496:	220e      	movs	r2, #14
 8001498:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <menu+0x24c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b19      	cmp	r3, #25
 80014a0:	d106      	bne.n	80014b0 <menu+0x228>
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <menu+0x250>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <menu+0x228>
			menuSayac = 23;
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <menu+0x24c>)
 80014ac:	2217      	movs	r2, #23
 80014ae:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014b0:	f003 fab6 	bl	8004a20 <bekle>
	}

	if (menuSayac == 0) {
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <menu+0x24c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d133      	bne.n	8001524 <menu+0x29c>
		if(dilSecim == 0) {
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <menu+0x268>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d121      	bne.n	8001508 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <menu+0x26c>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	2001      	movs	r0, #1
 80014ca:	e015      	b.n	80014f8 <menu+0x270>
 80014cc:	40010800 	.word	0x40010800
 80014d0:	20000257 	.word	0x20000257
 80014d4:	20000228 	.word	0x20000228
 80014d8:	20000237 	.word	0x20000237
 80014dc:	20000230 	.word	0x20000230
 80014e0:	20000231 	.word	0x20000231
 80014e4:	20000232 	.word	0x20000232
 80014e8:	20000233 	.word	0x20000233
 80014ec:	40011000 	.word	0x40011000
 80014f0:	20000249 	.word	0x20000249
 80014f4:	0800d028 	.word	0x0800d028
 80014f8:	f006 fbbc 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80014fc:	4a94      	ldr	r2, [pc, #592]	; (8001750 <menu+0x4c8>)
 80014fe:	2101      	movs	r1, #1
 8001500:	2002      	movs	r0, #2
 8001502:	f006 fbb7 	bl	8007c74 <lcd_print>
 8001506:	e00d      	b.n	8001524 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001508:	4b92      	ldr	r3, [pc, #584]	; (8001754 <menu+0x4cc>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d109      	bne.n	8001524 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001510:	4a91      	ldr	r2, [pc, #580]	; (8001758 <menu+0x4d0>)
 8001512:	2101      	movs	r1, #1
 8001514:	2001      	movs	r0, #1
 8001516:	f006 fbad 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800151a:	4a90      	ldr	r2, [pc, #576]	; (800175c <menu+0x4d4>)
 800151c:	2101      	movs	r1, #1
 800151e:	2002      	movs	r0, #2
 8001520:	f006 fba8 	bl	8007c74 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001524:	4b8e      	ldr	r3, [pc, #568]	; (8001760 <menu+0x4d8>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	f040 82b5 	bne.w	8001a98 <menu+0x810>
		if(dilSecim == 0) {
 800152e:	4b89      	ldr	r3, [pc, #548]	; (8001754 <menu+0x4cc>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d105      	bne.n	8001542 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001536:	4a8b      	ldr	r2, [pc, #556]	; (8001764 <menu+0x4dc>)
 8001538:	2101      	movs	r1, #1
 800153a:	2001      	movs	r0, #1
 800153c:	f006 fb9a 	bl	8007c74 <lcd_print>
 8001540:	e008      	b.n	8001554 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001542:	4b84      	ldr	r3, [pc, #528]	; (8001754 <menu+0x4cc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d104      	bne.n	8001554 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800154a:	4a87      	ldr	r2, [pc, #540]	; (8001768 <menu+0x4e0>)
 800154c:	2101      	movs	r1, #1
 800154e:	2001      	movs	r0, #1
 8001550:	f006 fb90 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001554:	4b85      	ldr	r3, [pc, #532]	; (800176c <menu+0x4e4>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d123      	bne.n	80015a4 <menu+0x31c>
			if(dilSecim == 0) {
 800155c:	4b7d      	ldr	r3, [pc, #500]	; (8001754 <menu+0x4cc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001564:	4a82      	ldr	r2, [pc, #520]	; (8001770 <menu+0x4e8>)
 8001566:	2101      	movs	r1, #1
 8001568:	2002      	movs	r0, #2
 800156a:	f006 fb83 	bl	8007c74 <lcd_print>
 800156e:	e008      	b.n	8001582 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <menu+0x4cc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d104      	bne.n	8001582 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001578:	4a7e      	ldr	r2, [pc, #504]	; (8001774 <menu+0x4ec>)
 800157a:	2101      	movs	r1, #1
 800157c:	2002      	movs	r0, #2
 800157e:	f006 fb79 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001582:	4a7d      	ldr	r2, [pc, #500]	; (8001778 <menu+0x4f0>)
 8001584:	210f      	movs	r1, #15
 8001586:	2002      	movs	r0, #2
 8001588:	f006 fb74 	bl	8007c74 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800158c:	4b7b      	ldr	r3, [pc, #492]	; (800177c <menu+0x4f4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	220a      	movs	r2, #10
 8001592:	497b      	ldr	r1, [pc, #492]	; (8001780 <menu+0x4f8>)
 8001594:	4618      	mov	r0, r3
 8001596:	f00a febf 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 800159a:	4a79      	ldr	r2, [pc, #484]	; (8001780 <menu+0x4f8>)
 800159c:	210e      	movs	r1, #14
 800159e:	2002      	movs	r0, #2
 80015a0:	f006 fb68 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80015a4:	4b71      	ldr	r3, [pc, #452]	; (800176c <menu+0x4e4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d123      	bne.n	80015f4 <menu+0x36c>
			if(dilSecim == 0) {
 80015ac:	4b69      	ldr	r3, [pc, #420]	; (8001754 <menu+0x4cc>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80015b4:	4a73      	ldr	r2, [pc, #460]	; (8001784 <menu+0x4fc>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	2002      	movs	r0, #2
 80015ba:	f006 fb5b 	bl	8007c74 <lcd_print>
 80015be:	e008      	b.n	80015d2 <menu+0x34a>
			} else if(dilSecim == 1) {
 80015c0:	4b64      	ldr	r3, [pc, #400]	; (8001754 <menu+0x4cc>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d104      	bne.n	80015d2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80015c8:	4a6f      	ldr	r2, [pc, #444]	; (8001788 <menu+0x500>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	2002      	movs	r0, #2
 80015ce:	f006 fb51 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015d2:	4a6e      	ldr	r2, [pc, #440]	; (800178c <menu+0x504>)
 80015d4:	210f      	movs	r1, #15
 80015d6:	2002      	movs	r0, #2
 80015d8:	f006 fb4c 	bl	8007c74 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80015dc:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <menu+0x508>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	220a      	movs	r2, #10
 80015e2:	4967      	ldr	r1, [pc, #412]	; (8001780 <menu+0x4f8>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00a fe97 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <menu+0x4f8>)
 80015ec:	210e      	movs	r1, #14
 80015ee:	2002      	movs	r0, #2
 80015f0:	f006 fb40 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80015f4:	4b5d      	ldr	r3, [pc, #372]	; (800176c <menu+0x4e4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <menu+0x3bc>
			if(dilSecim == 0) {
 80015fc:	4b55      	ldr	r3, [pc, #340]	; (8001754 <menu+0x4cc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d105      	bne.n	8001610 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001604:	4a63      	ldr	r2, [pc, #396]	; (8001794 <menu+0x50c>)
 8001606:	2101      	movs	r1, #1
 8001608:	2002      	movs	r0, #2
 800160a:	f006 fb33 	bl	8007c74 <lcd_print>
 800160e:	e008      	b.n	8001622 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <menu+0x4cc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d104      	bne.n	8001622 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001618:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <menu+0x510>)
 800161a:	2101      	movs	r1, #1
 800161c:	2002      	movs	r0, #2
 800161e:	f006 fb29 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001622:	4a5a      	ldr	r2, [pc, #360]	; (800178c <menu+0x504>)
 8001624:	210f      	movs	r1, #15
 8001626:	2002      	movs	r0, #2
 8001628:	f006 fb24 	bl	8007c74 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800162c:	4b5b      	ldr	r3, [pc, #364]	; (800179c <menu+0x514>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	220a      	movs	r2, #10
 8001632:	4953      	ldr	r1, [pc, #332]	; (8001780 <menu+0x4f8>)
 8001634:	4618      	mov	r0, r3
 8001636:	f00a fe6f 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 800163a:	4a51      	ldr	r2, [pc, #324]	; (8001780 <menu+0x4f8>)
 800163c:	210e      	movs	r1, #14
 800163e:	2002      	movs	r0, #2
 8001640:	f006 fb18 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001644:	4b49      	ldr	r3, [pc, #292]	; (800176c <menu+0x4e4>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d123      	bne.n	8001694 <menu+0x40c>
			if(dilSecim == 0) {
 800164c:	4b41      	ldr	r3, [pc, #260]	; (8001754 <menu+0x4cc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001654:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <menu+0x518>)
 8001656:	2101      	movs	r1, #1
 8001658:	2002      	movs	r0, #2
 800165a:	f006 fb0b 	bl	8007c74 <lcd_print>
 800165e:	e008      	b.n	8001672 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001660:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <menu+0x4cc>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d104      	bne.n	8001672 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001668:	4a4e      	ldr	r2, [pc, #312]	; (80017a4 <menu+0x51c>)
 800166a:	2101      	movs	r1, #1
 800166c:	2002      	movs	r0, #2
 800166e:	f006 fb01 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <menu+0x504>)
 8001674:	210f      	movs	r1, #15
 8001676:	2002      	movs	r0, #2
 8001678:	f006 fafc 	bl	8007c74 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800167c:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <menu+0x520>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	220a      	movs	r2, #10
 8001682:	493f      	ldr	r1, [pc, #252]	; (8001780 <menu+0x4f8>)
 8001684:	4618      	mov	r0, r3
 8001686:	f00a fe47 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 800168a:	4a3d      	ldr	r2, [pc, #244]	; (8001780 <menu+0x4f8>)
 800168c:	210e      	movs	r1, #14
 800168e:	2002      	movs	r0, #2
 8001690:	f006 faf0 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <menu+0x4e4>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d123      	bne.n	80016e4 <menu+0x45c>
			if(dilSecim == 0) {
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <menu+0x4cc>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80016a4:	4a41      	ldr	r2, [pc, #260]	; (80017ac <menu+0x524>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	2002      	movs	r0, #2
 80016aa:	f006 fae3 	bl	8007c74 <lcd_print>
 80016ae:	e008      	b.n	80016c2 <menu+0x43a>
			} else if(dilSecim == 1) {
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <menu+0x4cc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d104      	bne.n	80016c2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80016b8:	4a3d      	ldr	r2, [pc, #244]	; (80017b0 <menu+0x528>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	2002      	movs	r0, #2
 80016be:	f006 fad9 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016c2:	4a32      	ldr	r2, [pc, #200]	; (800178c <menu+0x504>)
 80016c4:	210f      	movs	r1, #15
 80016c6:	2002      	movs	r0, #2
 80016c8:	f006 fad4 	bl	8007c74 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <menu+0x52c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	220a      	movs	r2, #10
 80016d2:	492b      	ldr	r1, [pc, #172]	; (8001780 <menu+0x4f8>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00a fe1f 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 80016da:	4a29      	ldr	r2, [pc, #164]	; (8001780 <menu+0x4f8>)
 80016dc:	210e      	movs	r1, #14
 80016de:	2002      	movs	r0, #2
 80016e0:	f006 fac8 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <menu+0x4e4>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d123      	bne.n	8001734 <menu+0x4ac>
			if(dilSecim == 0) {
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <menu+0x4cc>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80016f4:	4a30      	ldr	r2, [pc, #192]	; (80017b8 <menu+0x530>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	2002      	movs	r0, #2
 80016fa:	f006 fabb 	bl	8007c74 <lcd_print>
 80016fe:	e008      	b.n	8001712 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <menu+0x4cc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d104      	bne.n	8001712 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001708:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <menu+0x534>)
 800170a:	2101      	movs	r1, #1
 800170c:	2002      	movs	r0, #2
 800170e:	f006 fab1 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <menu+0x504>)
 8001714:	210f      	movs	r1, #15
 8001716:	2002      	movs	r0, #2
 8001718:	f006 faac 	bl	8007c74 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <menu+0x538>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	220a      	movs	r2, #10
 8001722:	4917      	ldr	r1, [pc, #92]	; (8001780 <menu+0x4f8>)
 8001724:	4618      	mov	r0, r3
 8001726:	f00a fdf7 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <menu+0x4f8>)
 800172c:	210e      	movs	r1, #14
 800172e:	2002      	movs	r0, #2
 8001730:	f006 faa0 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <menu+0x4e4>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b06      	cmp	r3, #6
 800173a:	d15f      	bne.n	80017fc <menu+0x574>
			if(dilSecim == 0) {
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <menu+0x4cc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d141      	bne.n	80017c8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001744:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <menu+0x53c>)
 8001746:	2101      	movs	r1, #1
 8001748:	2002      	movs	r0, #2
 800174a:	f006 fa93 	bl	8007c74 <lcd_print>
 800174e:	e044      	b.n	80017da <menu+0x552>
 8001750:	0800d03c 	.word	0x0800d03c
 8001754:	20000249 	.word	0x20000249
 8001758:	0800d050 	.word	0x0800d050
 800175c:	0800d064 	.word	0x0800d064
 8001760:	20000228 	.word	0x20000228
 8001764:	0800d078 	.word	0x0800d078
 8001768:	0800d08c 	.word	0x0800d08c
 800176c:	2000022a 	.word	0x2000022a
 8001770:	0800d0a0 	.word	0x0800d0a0
 8001774:	0800d0b0 	.word	0x0800d0b0
 8001778:	0800d0c0 	.word	0x0800d0c0
 800177c:	2000024a 	.word	0x2000024a
 8001780:	2000019c 	.word	0x2000019c
 8001784:	0800d0c4 	.word	0x0800d0c4
 8001788:	0800d0d4 	.word	0x0800d0d4
 800178c:	0800d0e4 	.word	0x0800d0e4
 8001790:	2000024b 	.word	0x2000024b
 8001794:	0800d0e8 	.word	0x0800d0e8
 8001798:	0800d0f8 	.word	0x0800d0f8
 800179c:	2000024c 	.word	0x2000024c
 80017a0:	0800d108 	.word	0x0800d108
 80017a4:	0800d118 	.word	0x0800d118
 80017a8:	2000024d 	.word	0x2000024d
 80017ac:	0800d128 	.word	0x0800d128
 80017b0:	0800d138 	.word	0x0800d138
 80017b4:	2000024e 	.word	0x2000024e
 80017b8:	0800d148 	.word	0x0800d148
 80017bc:	0800d158 	.word	0x0800d158
 80017c0:	2000024f 	.word	0x2000024f
 80017c4:	0800d168 	.word	0x0800d168
			} else if(dilSecim == 1) {
 80017c8:	4b4f      	ldr	r3, [pc, #316]	; (8001908 <menu+0x680>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d104      	bne.n	80017da <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80017d0:	4a4e      	ldr	r2, [pc, #312]	; (800190c <menu+0x684>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	2002      	movs	r0, #2
 80017d6:	f006 fa4d 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017da:	4a4d      	ldr	r2, [pc, #308]	; (8001910 <menu+0x688>)
 80017dc:	210f      	movs	r1, #15
 80017de:	2002      	movs	r0, #2
 80017e0:	f006 fa48 	bl	8007c74 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <menu+0x68c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	220a      	movs	r2, #10
 80017ea:	494b      	ldr	r1, [pc, #300]	; (8001918 <menu+0x690>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00a fd93 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 80017f2:	4a49      	ldr	r2, [pc, #292]	; (8001918 <menu+0x690>)
 80017f4:	210e      	movs	r1, #14
 80017f6:	2002      	movs	r0, #2
 80017f8:	f006 fa3c 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80017fc:	4b47      	ldr	r3, [pc, #284]	; (800191c <menu+0x694>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b07      	cmp	r3, #7
 8001802:	d123      	bne.n	800184c <menu+0x5c4>
			if(dilSecim == 0) {
 8001804:	4b40      	ldr	r3, [pc, #256]	; (8001908 <menu+0x680>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 800180c:	4a44      	ldr	r2, [pc, #272]	; (8001920 <menu+0x698>)
 800180e:	2101      	movs	r1, #1
 8001810:	2002      	movs	r0, #2
 8001812:	f006 fa2f 	bl	8007c74 <lcd_print>
 8001816:	e008      	b.n	800182a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <menu+0x680>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d104      	bne.n	800182a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001820:	4a40      	ldr	r2, [pc, #256]	; (8001924 <menu+0x69c>)
 8001822:	2101      	movs	r1, #1
 8001824:	2002      	movs	r0, #2
 8001826:	f006 fa25 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800182a:	4a39      	ldr	r2, [pc, #228]	; (8001910 <menu+0x688>)
 800182c:	210f      	movs	r1, #15
 800182e:	2002      	movs	r0, #2
 8001830:	f006 fa20 	bl	8007c74 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <menu+0x6a0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	220a      	movs	r2, #10
 800183a:	4937      	ldr	r1, [pc, #220]	; (8001918 <menu+0x690>)
 800183c:	4618      	mov	r0, r3
 800183e:	f00a fd6b 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 8001842:	4a35      	ldr	r2, [pc, #212]	; (8001918 <menu+0x690>)
 8001844:	210e      	movs	r1, #14
 8001846:	2002      	movs	r0, #2
 8001848:	f006 fa14 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <menu+0x694>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d123      	bne.n	800189c <menu+0x614>
			if(dilSecim == 0) {
 8001854:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <menu+0x680>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 800185c:	4a33      	ldr	r2, [pc, #204]	; (800192c <menu+0x6a4>)
 800185e:	2101      	movs	r1, #1
 8001860:	2002      	movs	r0, #2
 8001862:	f006 fa07 	bl	8007c74 <lcd_print>
 8001866:	e008      	b.n	800187a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <menu+0x680>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d104      	bne.n	800187a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001870:	4a2f      	ldr	r2, [pc, #188]	; (8001930 <menu+0x6a8>)
 8001872:	2101      	movs	r1, #1
 8001874:	2002      	movs	r0, #2
 8001876:	f006 f9fd 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800187a:	4a25      	ldr	r2, [pc, #148]	; (8001910 <menu+0x688>)
 800187c:	210f      	movs	r1, #15
 800187e:	2002      	movs	r0, #2
 8001880:	f006 f9f8 	bl	8007c74 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <menu+0x6ac>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	220a      	movs	r2, #10
 800188a:	4923      	ldr	r1, [pc, #140]	; (8001918 <menu+0x690>)
 800188c:	4618      	mov	r0, r3
 800188e:	f00a fd43 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 8001892:	4a21      	ldr	r2, [pc, #132]	; (8001918 <menu+0x690>)
 8001894:	210e      	movs	r1, #14
 8001896:	2002      	movs	r0, #2
 8001898:	f006 f9ec 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <menu+0x694>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d123      	bne.n	80018ec <menu+0x664>
			if(dilSecim == 0) {
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <menu+0x680>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80018ac:	4a22      	ldr	r2, [pc, #136]	; (8001938 <menu+0x6b0>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	2002      	movs	r0, #2
 80018b2:	f006 f9df 	bl	8007c74 <lcd_print>
 80018b6:	e008      	b.n	80018ca <menu+0x642>
			} else if(dilSecim == 1) {
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <menu+0x680>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d104      	bne.n	80018ca <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <menu+0x6b4>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	2002      	movs	r0, #2
 80018c6:	f006 f9d5 	bl	8007c74 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80018ca:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <menu+0x6b8>)
 80018cc:	2110      	movs	r1, #16
 80018ce:	2002      	movs	r0, #2
 80018d0:	f006 f9d0 	bl	8007c74 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <menu+0x6bc>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	220a      	movs	r2, #10
 80018da:	490f      	ldr	r1, [pc, #60]	; (8001918 <menu+0x690>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f00a fd1b 	bl	800c318 <itoa>
			lcd_print(2, 15, snum);
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <menu+0x690>)
 80018e4:	210f      	movs	r1, #15
 80018e6:	2002      	movs	r0, #2
 80018e8:	f006 f9c4 	bl	8007c74 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <menu+0x694>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b0a      	cmp	r3, #10
 80018f2:	d134      	bne.n	800195e <menu+0x6d6>
			if(dilSecim == 0) {
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <menu+0x680>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d127      	bne.n	800194c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 80018fc:	4a12      	ldr	r2, [pc, #72]	; (8001948 <menu+0x6c0>)
 80018fe:	2101      	movs	r1, #1
 8001900:	2002      	movs	r0, #2
 8001902:	f006 f9b7 	bl	8007c74 <lcd_print>
 8001906:	e02a      	b.n	800195e <menu+0x6d6>
 8001908:	20000249 	.word	0x20000249
 800190c:	0800d178 	.word	0x0800d178
 8001910:	0800d0e4 	.word	0x0800d0e4
 8001914:	20000250 	.word	0x20000250
 8001918:	2000019c 	.word	0x2000019c
 800191c:	2000022a 	.word	0x2000022a
 8001920:	0800d188 	.word	0x0800d188
 8001924:	0800d198 	.word	0x0800d198
 8001928:	20000251 	.word	0x20000251
 800192c:	0800d1a8 	.word	0x0800d1a8
 8001930:	0800d1b8 	.word	0x0800d1b8
 8001934:	20000252 	.word	0x20000252
 8001938:	0800d1c8 	.word	0x0800d1c8
 800193c:	0800d1d8 	.word	0x0800d1d8
 8001940:	0800d1e8 	.word	0x0800d1e8
 8001944:	20000253 	.word	0x20000253
 8001948:	0800d1ec 	.word	0x0800d1ec
			} else if(dilSecim == 1) {
 800194c:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <menu+0x8d0>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d104      	bne.n	800195e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001954:	4a81      	ldr	r2, [pc, #516]	; (8001b5c <menu+0x8d4>)
 8001956:	2101      	movs	r1, #1
 8001958:	2002      	movs	r0, #2
 800195a:	f006 f98b 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800195e:	2102      	movs	r1, #2
 8001960:	487f      	ldr	r0, [pc, #508]	; (8001b60 <menu+0x8d8>)
 8001962:	f007 fcad 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	2b01      	cmp	r3, #1
 800196a:	d119      	bne.n	80019a0 <menu+0x718>
 800196c:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <menu+0x8dc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	f083 0301 	eor.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d012      	beq.n	80019a0 <menu+0x718>
 800197a:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <menu+0x8e0>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10e      	bne.n	80019a0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001982:	4b7a      	ldr	r3, [pc, #488]	; (8001b6c <menu+0x8e4>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <menu+0x8e4>)
 800198c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800198e:	4b77      	ldr	r3, [pc, #476]	; (8001b6c <menu+0x8e4>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b0a      	cmp	r3, #10
 8001994:	d902      	bls.n	800199c <menu+0x714>
				hataGostermeSirasi = 0;
 8001996:	4b75      	ldr	r3, [pc, #468]	; (8001b6c <menu+0x8e4>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800199c:	f003 f840 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019a0:	2104      	movs	r1, #4
 80019a2:	486f      	ldr	r0, [pc, #444]	; (8001b60 <menu+0x8d8>)
 80019a4:	f007 fc8c 	bl	80092c0 <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d119      	bne.n	80019e2 <menu+0x75a>
 80019ae:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <menu+0x8dc>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f083 0301 	eor.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d012      	beq.n	80019e2 <menu+0x75a>
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <menu+0x8e0>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10e      	bne.n	80019e2 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80019c4:	4b69      	ldr	r3, [pc, #420]	; (8001b6c <menu+0x8e4>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <menu+0x8e4>)
 80019ce:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80019d0:	4b66      	ldr	r3, [pc, #408]	; (8001b6c <menu+0x8e4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b0b      	cmp	r3, #11
 80019d6:	d902      	bls.n	80019de <menu+0x756>
	    		hataGostermeSirasi = 10;
 80019d8:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <menu+0x8e4>)
 80019da:	220a      	movs	r2, #10
 80019dc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80019de:	f003 f81f 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80019e2:	2108      	movs	r1, #8
 80019e4:	485e      	ldr	r0, [pc, #376]	; (8001b60 <menu+0x8d8>)
 80019e6:	f007 fc6b 	bl	80092c0 <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d153      	bne.n	8001a98 <menu+0x810>
 80019f0:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <menu+0x8dc>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f083 0301 	eor.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d04c      	beq.n	8001a98 <menu+0x810>
 80019fe:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <menu+0x8e4>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d148      	bne.n	8001a98 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <menu+0x8e8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <menu+0x8ec>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a14:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <menu+0x8f0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <menu+0x8ec>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <menu+0x8f4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <menu+0x8ec>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <menu+0x8f8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <menu+0x8ec>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001a3e:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <menu+0x8fc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <menu+0x8ec>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001a4c:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <menu+0x900>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <menu+0x8ec>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001a5a:	4b4c      	ldr	r3, [pc, #304]	; (8001b8c <menu+0x904>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <menu+0x8ec>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001a68:	4b49      	ldr	r3, [pc, #292]	; (8001b90 <menu+0x908>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <menu+0x8ec>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <menu+0x90c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <menu+0x8ec>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001a84:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <menu+0x910>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <menu+0x8ec>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001a92:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <menu+0x914>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <menu+0x918>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	f040 80fc 	bne.w	8001c9a <menu+0xa12>
		if(dilSecim == 0) {
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <menu+0x8d0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <menu+0x91c>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f006 f8e0 	bl	8007c74 <lcd_print>
 8001ab4:	e008      	b.n	8001ac8 <menu+0x840>
		} else if(dilSecim == 1) {
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <menu+0x8d0>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d104      	bne.n	8001ac8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001abe:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <menu+0x920>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f006 f8d6 	bl	8007c74 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <menu+0x8e0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d003      	beq.n	8001ad8 <menu+0x850>
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <menu+0x8e0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d112      	bne.n	8001afe <menu+0x876>
			if(dilSecim == 0) {
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <menu+0x8d0>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001ae0:	4a32      	ldr	r2, [pc, #200]	; (8001bac <menu+0x924>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f006 f8c5 	bl	8007c74 <lcd_print>
 8001aea:	e008      	b.n	8001afe <menu+0x876>
			} else if(dilSecim == 1) {
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <menu+0x8d0>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d104      	bne.n	8001afe <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001af4:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <menu+0x928>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	2002      	movs	r0, #2
 8001afa:	f006 f8bb 	bl	8007c74 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <menu+0x92c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <menu+0x8ac>
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <menu+0x8e0>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d112      	bne.n	8001b34 <menu+0x8ac>
			if(dilSecim == 0) {
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <menu+0x8d0>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001b16:	4a28      	ldr	r2, [pc, #160]	; (8001bb8 <menu+0x930>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f006 f8aa 	bl	8007c74 <lcd_print>
 8001b20:	e008      	b.n	8001b34 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <menu+0x8d0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d104      	bne.n	8001b34 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001b2a:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <menu+0x934>)
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f006 f8a0 	bl	8007c74 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <menu+0x92c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d14c      	bne.n	8001bd6 <menu+0x94e>
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <menu+0x8e0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d148      	bne.n	8001bd6 <menu+0x94e>
			if(dilSecim == 0) {
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <menu+0x8d0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d13b      	bne.n	8001bc4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <menu+0x938>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2002      	movs	r0, #2
 8001b52:	f006 f88f 	bl	8007c74 <lcd_print>
 8001b56:	e03e      	b.n	8001bd6 <menu+0x94e>
 8001b58:	20000249 	.word	0x20000249
 8001b5c:	0800d200 	.word	0x0800d200
 8001b60:	40010800 	.word	0x40010800
 8001b64:	20000257 	.word	0x20000257
 8001b68:	20000237 	.word	0x20000237
 8001b6c:	2000022a 	.word	0x2000022a
 8001b70:	2000024a 	.word	0x2000024a
 8001b74:	2000012c 	.word	0x2000012c
 8001b78:	2000024b 	.word	0x2000024b
 8001b7c:	2000024c 	.word	0x2000024c
 8001b80:	2000024d 	.word	0x2000024d
 8001b84:	2000024e 	.word	0x2000024e
 8001b88:	2000024f 	.word	0x2000024f
 8001b8c:	20000250 	.word	0x20000250
 8001b90:	20000251 	.word	0x20000251
 8001b94:	20000252 	.word	0x20000252
 8001b98:	20000253 	.word	0x20000253
 8001b9c:	20000254 	.word	0x20000254
 8001ba0:	20000228 	.word	0x20000228
 8001ba4:	0800d214 	.word	0x0800d214
 8001ba8:	0800d228 	.word	0x0800d228
 8001bac:	0800d23c 	.word	0x0800d23c
 8001bb0:	0800d250 	.word	0x0800d250
 8001bb4:	20000229 	.word	0x20000229
 8001bb8:	0800d264 	.word	0x0800d264
 8001bbc:	0800d274 	.word	0x0800d274
 8001bc0:	0800d284 	.word	0x0800d284
			} else if(dilSecim == 1) {
 8001bc4:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <menu+0xba0>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d104      	bne.n	8001bd6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001bcc:	4a97      	ldr	r2, [pc, #604]	; (8001e2c <menu+0xba4>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f006 f84f 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	4895      	ldr	r0, [pc, #596]	; (8001e30 <menu+0xba8>)
 8001bda:	f007 fb71 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d119      	bne.n	8001c18 <menu+0x990>
 8001be4:	4b93      	ldr	r3, [pc, #588]	; (8001e34 <menu+0xbac>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d012      	beq.n	8001c18 <menu+0x990>
 8001bf2:	4b91      	ldr	r3, [pc, #580]	; (8001e38 <menu+0xbb0>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10e      	bne.n	8001c18 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001bfa:	4b90      	ldr	r3, [pc, #576]	; (8001e3c <menu+0xbb4>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b8e      	ldr	r3, [pc, #568]	; (8001e3c <menu+0xbb4>)
 8001c04:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c06:	4b8d      	ldr	r3, [pc, #564]	; (8001e3c <menu+0xbb4>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d902      	bls.n	8001c14 <menu+0x98c>
				calismaSekli = 0;
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <menu+0xbb4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c14:	f002 ff04 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c18:	2104      	movs	r1, #4
 8001c1a:	4885      	ldr	r0, [pc, #532]	; (8001e30 <menu+0xba8>)
 8001c1c:	f007 fb50 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d119      	bne.n	8001c5a <menu+0x9d2>
 8001c26:	4b83      	ldr	r3, [pc, #524]	; (8001e34 <menu+0xbac>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	f083 0301 	eor.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d012      	beq.n	8001c5a <menu+0x9d2>
 8001c34:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <menu+0xbb0>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10e      	bne.n	8001c5a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001c3c:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <menu+0xbb4>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b7d      	ldr	r3, [pc, #500]	; (8001e3c <menu+0xbb4>)
 8001c46:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001c48:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <menu+0xbb4>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <menu+0x9ce>
	    		calismaSekli = 1;
 8001c50:	4b7a      	ldr	r3, [pc, #488]	; (8001e3c <menu+0xbb4>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c56:	f002 fee3 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c5a:	2108      	movs	r1, #8
 8001c5c:	4874      	ldr	r0, [pc, #464]	; (8001e30 <menu+0xba8>)
 8001c5e:	f007 fb2f 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d118      	bne.n	8001c9a <menu+0xa12>
 8001c68:	4b72      	ldr	r3, [pc, #456]	; (8001e34 <menu+0xbac>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d011      	beq.n	8001c9a <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001c76:	4b71      	ldr	r3, [pc, #452]	; (8001e3c <menu+0xbb4>)
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	4b71      	ldr	r3, [pc, #452]	; (8001e40 <menu+0xbb8>)
 8001c7c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001c7e:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <menu+0xbb4>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d106      	bne.n	8001c94 <menu+0xa0c>
				altLimit = 1;
 8001c86:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <menu+0xbbc>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <menu+0xbbc>)
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <menu+0xbb8>)
 8001c92:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001c94:	4b6c      	ldr	r3, [pc, #432]	; (8001e48 <menu+0xbc0>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001c9a:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <menu+0xbc4>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	f040 8083 	bne.w	8001daa <menu+0xb22>
		if(dilSecim == 0) {
 8001ca4:	4b60      	ldr	r3, [pc, #384]	; (8001e28 <menu+0xba0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001cac:	4a68      	ldr	r2, [pc, #416]	; (8001e50 <menu+0xbc8>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f005 ffdf 	bl	8007c74 <lcd_print>
 8001cb6:	e008      	b.n	8001cca <menu+0xa42>
		} else if(dilSecim == 1) {
 8001cb8:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <menu+0xba0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d104      	bne.n	8001cca <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001cc0:	4a64      	ldr	r2, [pc, #400]	; (8001e54 <menu+0xbcc>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f005 ffd5 	bl	8007c74 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001cca:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <menu+0xbd0>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d113      	bne.n	8001cfa <menu+0xa72>
			if(dilSecim == 0) {
 8001cd2:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <menu+0xba0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001cda:	4a60      	ldr	r2, [pc, #384]	; (8001e5c <menu+0xbd4>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f005 ffc8 	bl	8007c74 <lcd_print>
 8001ce4:	e012      	b.n	8001d0c <menu+0xa84>
			} else if(dilSecim == 1) {
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <menu+0xba0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10e      	bne.n	8001d0c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001cee:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <menu+0xbd8>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f005 ffbe 	bl	8007c74 <lcd_print>
 8001cf8:	e008      	b.n	8001d0c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001cfa:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <menu+0xbd0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d104      	bne.n	8001d0c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <menu+0xbdc>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	2002      	movs	r0, #2
 8001d08:	f005 ffb4 	bl	8007c74 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	4848      	ldr	r0, [pc, #288]	; (8001e30 <menu+0xba8>)
 8001d10:	f007 fad6 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d115      	bne.n	8001d46 <menu+0xabe>
 8001d1a:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <menu+0xbac>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	f083 0301 	eor.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00e      	beq.n	8001d46 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <menu+0xbd0>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <menu+0xbd0>)
 8001d32:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001d34:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <menu+0xbd0>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d902      	bls.n	8001d42 <menu+0xaba>
				emniyetCercevesi = 0;
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <menu+0xbd0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d42:	f002 fe6d 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d46:	2104      	movs	r1, #4
 8001d48:	4839      	ldr	r0, [pc, #228]	; (8001e30 <menu+0xba8>)
 8001d4a:	f007 fab9 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d115      	bne.n	8001d80 <menu+0xaf8>
 8001d54:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <menu+0xbac>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00e      	beq.n	8001d80 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <menu+0xbd0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <menu+0xbd0>)
 8001d6c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <menu+0xbd0>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <menu+0xbd0>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d7c:	f002 fe50 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001d80:	2108      	movs	r1, #8
 8001d82:	482b      	ldr	r0, [pc, #172]	; (8001e30 <menu+0xba8>)
 8001d84:	f007 fa9c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d10d      	bne.n	8001daa <menu+0xb22>
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <menu+0xbac>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f083 0301 	eor.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <menu+0xbd0>)
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <menu+0xbb8>)
 8001da2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <menu+0xbc0>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <menu+0xbc4>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	f040 80ba 	bne.w	8001f28 <menu+0xca0>
		if(dilSecim == 0) {
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <menu+0xba0>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001dbc:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <menu+0xbe0>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f005 ff57 	bl	8007c74 <lcd_print>
 8001dc6:	e008      	b.n	8001dda <menu+0xb52>
		} else if(dilSecim == 1) {
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <menu+0xba0>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d104      	bne.n	8001dda <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <menu+0xbe4>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f005 ff4d 	bl	8007c74 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <menu+0xbe8>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d113      	bne.n	8001e0a <menu+0xb82>
			if(dilSecim == 0) {
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <menu+0xba0>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <menu+0xbd4>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	2002      	movs	r0, #2
 8001df0:	f005 ff40 	bl	8007c74 <lcd_print>
 8001df4:	e049      	b.n	8001e8a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <menu+0xba0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d145      	bne.n	8001e8a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <menu+0xbd8>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	2002      	movs	r0, #2
 8001e04:	f005 ff36 	bl	8007c74 <lcd_print>
 8001e08:	e03f      	b.n	8001e8a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <menu+0xbe8>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d13b      	bne.n	8001e8a <menu+0xc02>
			if(dilSecim == 0) {
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <menu+0xba0>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d12e      	bne.n	8001e78 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001e1a:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <menu+0xbec>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	2002      	movs	r0, #2
 8001e20:	f005 ff28 	bl	8007c74 <lcd_print>
 8001e24:	e031      	b.n	8001e8a <menu+0xc02>
 8001e26:	bf00      	nop
 8001e28:	20000249 	.word	0x20000249
 8001e2c:	0800d294 	.word	0x0800d294
 8001e30:	40010800 	.word	0x40010800
 8001e34:	20000257 	.word	0x20000257
 8001e38:	20000237 	.word	0x20000237
 8001e3c:	20000229 	.word	0x20000229
 8001e40:	2000012c 	.word	0x2000012c
 8001e44:	2000022e 	.word	0x2000022e
 8001e48:	20000254 	.word	0x20000254
 8001e4c:	20000228 	.word	0x20000228
 8001e50:	0800d2a4 	.word	0x0800d2a4
 8001e54:	0800d2b8 	.word	0x0800d2b8
 8001e58:	2000022c 	.word	0x2000022c
 8001e5c:	0800d2cc 	.word	0x0800d2cc
 8001e60:	0800d2e0 	.word	0x0800d2e0
 8001e64:	0800d2f4 	.word	0x0800d2f4
 8001e68:	0800d304 	.word	0x0800d304
 8001e6c:	0800d318 	.word	0x0800d318
 8001e70:	2000022d 	.word	0x2000022d
 8001e74:	0800d32c 	.word	0x0800d32c
			} else if(dilSecim == 1) {
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <menu+0xe3c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d104      	bne.n	8001e8a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001e80:	4a91      	ldr	r2, [pc, #580]	; (80020c8 <menu+0xe40>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	2002      	movs	r0, #2
 8001e86:	f005 fef5 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	488f      	ldr	r0, [pc, #572]	; (80020cc <menu+0xe44>)
 8001e8e:	f007 fa17 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d115      	bne.n	8001ec4 <menu+0xc3c>
 8001e98:	4b8d      	ldr	r3, [pc, #564]	; (80020d0 <menu+0xe48>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <menu+0xe4c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b89      	ldr	r3, [pc, #548]	; (80020d4 <menu+0xe4c>)
 8001eb0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001eb2:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <menu+0xe4c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d902      	bls.n	8001ec0 <menu+0xc38>
				yavaslamaLimit = 0;
 8001eba:	4b86      	ldr	r3, [pc, #536]	; (80020d4 <menu+0xe4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ec0:	f002 fdae 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	4881      	ldr	r0, [pc, #516]	; (80020cc <menu+0xe44>)
 8001ec8:	f007 f9fa 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d115      	bne.n	8001efe <menu+0xc76>
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <menu+0xe48>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00e      	beq.n	8001efe <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001ee0:	4b7c      	ldr	r3, [pc, #496]	; (80020d4 <menu+0xe4c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b7a      	ldr	r3, [pc, #488]	; (80020d4 <menu+0xe4c>)
 8001eea:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001eec:	4b79      	ldr	r3, [pc, #484]	; (80020d4 <menu+0xe4c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001ef4:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <menu+0xe4c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001efa:	f002 fd91 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001efe:	2108      	movs	r1, #8
 8001f00:	4872      	ldr	r0, [pc, #456]	; (80020cc <menu+0xe44>)
 8001f02:	f007 f9dd 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d10d      	bne.n	8001f28 <menu+0xca0>
 8001f0c:	4b70      	ldr	r3, [pc, #448]	; (80020d0 <menu+0xe48>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	; (80020d4 <menu+0xe4c>)
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	4b6e      	ldr	r3, [pc, #440]	; (80020d8 <menu+0xe50>)
 8001f20:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f22:	4b6e      	ldr	r3, [pc, #440]	; (80020dc <menu+0xe54>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f28:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <menu+0xe58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	f040 80b9 	bne.w	80020a4 <menu+0xe1c>
		if(dilSecim == 0) {
 8001f32:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <menu+0xe3c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001f3a:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <menu+0xe5c>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f005 fe98 	bl	8007c74 <lcd_print>
 8001f44:	e008      	b.n	8001f58 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <menu+0xe3c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d104      	bne.n	8001f58 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001f4e:	4a66      	ldr	r2, [pc, #408]	; (80020e8 <menu+0xe60>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	2001      	movs	r0, #1
 8001f54:	f005 fe8e 	bl	8007c74 <lcd_print>
		}

		if(altLimit == 0) {
 8001f58:	4b64      	ldr	r3, [pc, #400]	; (80020ec <menu+0xe64>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d113      	bne.n	8001f88 <menu+0xd00>
			if(dilSecim == 0) {
 8001f60:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <menu+0xe3c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001f68:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <menu+0xe68>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2002      	movs	r0, #2
 8001f6e:	f005 fe81 	bl	8007c74 <lcd_print>
 8001f72:	e020      	b.n	8001fb6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <menu+0xe3c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d11c      	bne.n	8001fb6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001f7c:	4a5d      	ldr	r2, [pc, #372]	; (80020f4 <menu+0xe6c>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2002      	movs	r0, #2
 8001f82:	f005 fe77 	bl	8007c74 <lcd_print>
 8001f86:	e016      	b.n	8001fb6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001f88:	4b58      	ldr	r3, [pc, #352]	; (80020ec <menu+0xe64>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d112      	bne.n	8001fb6 <menu+0xd2e>
			if(dilSecim == 0){
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <menu+0xe3c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001f98:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <menu+0xe70>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f005 fe69 	bl	8007c74 <lcd_print>
 8001fa2:	e008      	b.n	8001fb6 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <menu+0xe3c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d104      	bne.n	8001fb6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001fac:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <menu+0xe40>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f005 fe5f 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	4844      	ldr	r0, [pc, #272]	; (80020cc <menu+0xe44>)
 8001fba:	f007 f981 	bl	80092c0 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d119      	bne.n	8001ff8 <menu+0xd70>
 8001fc4:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <menu+0xe48>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f083 0301 	eor.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d012      	beq.n	8001ff8 <menu+0xd70>
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <menu+0xe74>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10e      	bne.n	8001ff8 <menu+0xd70>
			altLimit = altLimit + 1;
 8001fda:	4b44      	ldr	r3, [pc, #272]	; (80020ec <menu+0xe64>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b42      	ldr	r3, [pc, #264]	; (80020ec <menu+0xe64>)
 8001fe4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <menu+0xe64>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d902      	bls.n	8001ff4 <menu+0xd6c>
				altLimit = 0;
 8001fee:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <menu+0xe64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ff4:	f002 fd14 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	4834      	ldr	r0, [pc, #208]	; (80020cc <menu+0xe44>)
 8001ffc:	f007 f960 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002000:	4603      	mov	r3, r0
 8002002:	2b01      	cmp	r3, #1
 8002004:	d119      	bne.n	800203a <menu+0xdb2>
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <menu+0xe48>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <menu+0xdb2>
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <menu+0xe74>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10e      	bne.n	800203a <menu+0xdb2>
			altLimit = altLimit - 1;
 800201c:	4b33      	ldr	r3, [pc, #204]	; (80020ec <menu+0xe64>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <menu+0xe64>)
 8002026:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <menu+0xe64>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <menu+0xdae>
		   		altLimit = 1;
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <menu+0xe64>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002036:	f002 fcf3 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800203a:	2108      	movs	r1, #8
 800203c:	4823      	ldr	r0, [pc, #140]	; (80020cc <menu+0xe44>)
 800203e:	f007 f93f 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b01      	cmp	r3, #1
 8002046:	d12d      	bne.n	80020a4 <menu+0xe1c>
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <menu+0xe48>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d026      	beq.n	80020a4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <menu+0xe64>)
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <menu+0xe50>)
 800205c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <menu+0xe64>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d110      	bne.n	8002088 <menu+0xe00>
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <menu+0xe78>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <menu+0xdee>
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <menu+0xe78>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d108      	bne.n	8002088 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <menu+0xe78>)
 8002078:	2203      	movs	r2, #3
 800207a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <menu+0xe78>)
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <menu+0xe50>)
 8002082:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002086:	e00a      	b.n	800209e <menu+0xe16>
			} else if(altLimit == 0) {
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <menu+0xe64>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <menu+0xe16>
				platformSilindirTipi = 0;
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <menu+0xe7c>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <menu+0xe7c>)
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <menu+0xe50>)
 800209c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <menu+0xe54>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <menu+0xe58>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	f040 80b6 	bne.w	800221a <menu+0xf92>
		if(dilSecim == 0) {
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <menu+0xe3c>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d12a      	bne.n	800210c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80020b6:	4a14      	ldr	r2, [pc, #80]	; (8002108 <menu+0xe80>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	2001      	movs	r0, #1
 80020bc:	f005 fdda 	bl	8007c74 <lcd_print>
 80020c0:	e02d      	b.n	800211e <menu+0xe96>
 80020c2:	bf00      	nop
 80020c4:	20000249 	.word	0x20000249
 80020c8:	0800d340 	.word	0x0800d340
 80020cc:	40010800 	.word	0x40010800
 80020d0:	20000257 	.word	0x20000257
 80020d4:	2000022d 	.word	0x2000022d
 80020d8:	2000012c 	.word	0x2000012c
 80020dc:	20000254 	.word	0x20000254
 80020e0:	20000228 	.word	0x20000228
 80020e4:	0800d354 	.word	0x0800d354
 80020e8:	0800d368 	.word	0x0800d368
 80020ec:	2000022e 	.word	0x2000022e
 80020f0:	0800d2cc 	.word	0x0800d2cc
 80020f4:	0800d2e0 	.word	0x0800d2e0
 80020f8:	0800d32c 	.word	0x0800d32c
 80020fc:	20000229 	.word	0x20000229
 8002100:	20000235 	.word	0x20000235
 8002104:	2000023b 	.word	0x2000023b
 8002108:	0800d37c 	.word	0x0800d37c
		} else if(dilSecim == 1){
 800210c:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <menu+0x1070>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d104      	bne.n	800211e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002114:	4a79      	ldr	r2, [pc, #484]	; (80022fc <menu+0x1074>)
 8002116:	2101      	movs	r1, #1
 8002118:	2001      	movs	r0, #1
 800211a:	f005 fdab 	bl	8007c74 <lcd_print>
		}
		if(basincSalteri == 0){
 800211e:	4b78      	ldr	r3, [pc, #480]	; (8002300 <menu+0x1078>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d113      	bne.n	800214e <menu+0xec6>
			if(dilSecim == 0) {
 8002126:	4b74      	ldr	r3, [pc, #464]	; (80022f8 <menu+0x1070>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800212e:	4a75      	ldr	r2, [pc, #468]	; (8002304 <menu+0x107c>)
 8002130:	2101      	movs	r1, #1
 8002132:	2002      	movs	r0, #2
 8002134:	f005 fd9e 	bl	8007c74 <lcd_print>
 8002138:	e020      	b.n	800217c <menu+0xef4>
			} else if(dilSecim == 1){
 800213a:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <menu+0x1070>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d11c      	bne.n	800217c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002142:	4a71      	ldr	r2, [pc, #452]	; (8002308 <menu+0x1080>)
 8002144:	2101      	movs	r1, #1
 8002146:	2002      	movs	r0, #2
 8002148:	f005 fd94 	bl	8007c74 <lcd_print>
 800214c:	e016      	b.n	800217c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800214e:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <menu+0x1078>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d112      	bne.n	800217c <menu+0xef4>
			if(dilSecim == 0) {
 8002156:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <menu+0x1070>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800215e:	4a6b      	ldr	r2, [pc, #428]	; (800230c <menu+0x1084>)
 8002160:	2101      	movs	r1, #1
 8002162:	2002      	movs	r0, #2
 8002164:	f005 fd86 	bl	8007c74 <lcd_print>
 8002168:	e008      	b.n	800217c <menu+0xef4>
			} else if(dilSecim == 1) {
 800216a:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <menu+0x1070>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d104      	bne.n	800217c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002172:	4a67      	ldr	r2, [pc, #412]	; (8002310 <menu+0x1088>)
 8002174:	2101      	movs	r1, #1
 8002176:	2002      	movs	r0, #2
 8002178:	f005 fd7c 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800217c:	2102      	movs	r1, #2
 800217e:	4865      	ldr	r0, [pc, #404]	; (8002314 <menu+0x108c>)
 8002180:	f007 f89e 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d115      	bne.n	80021b6 <menu+0xf2e>
 800218a:	4b63      	ldr	r3, [pc, #396]	; (8002318 <menu+0x1090>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00e      	beq.n	80021b6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <menu+0x1078>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b57      	ldr	r3, [pc, #348]	; (8002300 <menu+0x1078>)
 80021a2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80021a4:	4b56      	ldr	r3, [pc, #344]	; (8002300 <menu+0x1078>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d902      	bls.n	80021b2 <menu+0xf2a>
				basincSalteri = 0;
 80021ac:	4b54      	ldr	r3, [pc, #336]	; (8002300 <menu+0x1078>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021b2:	f002 fc35 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b6:	2104      	movs	r1, #4
 80021b8:	4856      	ldr	r0, [pc, #344]	; (8002314 <menu+0x108c>)
 80021ba:	f007 f881 	bl	80092c0 <HAL_GPIO_ReadPin>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d115      	bne.n	80021f0 <menu+0xf68>
 80021c4:	4b54      	ldr	r3, [pc, #336]	; (8002318 <menu+0x1090>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00e      	beq.n	80021f0 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80021d2:	4b4b      	ldr	r3, [pc, #300]	; (8002300 <menu+0x1078>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <menu+0x1078>)
 80021dc:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80021de:	4b48      	ldr	r3, [pc, #288]	; (8002300 <menu+0x1078>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <menu+0xf64>
		   		basincSalteri = 1;
 80021e6:	4b46      	ldr	r3, [pc, #280]	; (8002300 <menu+0x1078>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021ec:	f002 fc18 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021f0:	2108      	movs	r1, #8
 80021f2:	4848      	ldr	r0, [pc, #288]	; (8002314 <menu+0x108c>)
 80021f4:	f007 f864 	bl	80092c0 <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10d      	bne.n	800221a <menu+0xf92>
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <menu+0x1090>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800220c:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <menu+0x1078>)
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	4b42      	ldr	r3, [pc, #264]	; (800231c <menu+0x1094>)
 8002212:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002214:	4b42      	ldr	r3, [pc, #264]	; (8002320 <menu+0x1098>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800221a:	4b42      	ldr	r3, [pc, #264]	; (8002324 <menu+0x109c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b07      	cmp	r3, #7
 8002220:	f040 80f5 	bne.w	800240e <menu+0x1186>
		if(dilSecim == 0) {
 8002224:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <menu+0x1070>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800222c:	4a3e      	ldr	r2, [pc, #248]	; (8002328 <menu+0x10a0>)
 800222e:	2101      	movs	r1, #1
 8002230:	2001      	movs	r0, #1
 8002232:	f005 fd1f 	bl	8007c74 <lcd_print>
 8002236:	e008      	b.n	800224a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <menu+0x1070>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d104      	bne.n	800224a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002240:	4a3a      	ldr	r2, [pc, #232]	; (800232c <menu+0x10a4>)
 8002242:	2101      	movs	r1, #1
 8002244:	2001      	movs	r0, #1
 8002246:	f005 fd15 	bl	8007c74 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <menu+0x10a8>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d113      	bne.n	800227a <menu+0xff2>
			if(dilSecim == 0) {
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <menu+0x1070>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800225a:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <menu+0x107c>)
 800225c:	2101      	movs	r1, #1
 800225e:	2002      	movs	r0, #2
 8002260:	f005 fd08 	bl	8007c74 <lcd_print>
 8002264:	e079      	b.n	800235a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <menu+0x1070>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d175      	bne.n	800235a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800226e:	4a26      	ldr	r2, [pc, #152]	; (8002308 <menu+0x1080>)
 8002270:	2101      	movs	r1, #1
 8002272:	2002      	movs	r0, #2
 8002274:	f005 fcfe 	bl	8007c74 <lcd_print>
 8002278:	e06f      	b.n	800235a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <menu+0x10a8>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d113      	bne.n	80022aa <menu+0x1022>
			if(dilSecim == 0) {
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <menu+0x1070>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800228a:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <menu+0x10ac>)
 800228c:	2101      	movs	r1, #1
 800228e:	2002      	movs	r0, #2
 8002290:	f005 fcf0 	bl	8007c74 <lcd_print>
 8002294:	e061      	b.n	800235a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <menu+0x1070>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d15d      	bne.n	800235a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800229e:	4a26      	ldr	r2, [pc, #152]	; (8002338 <menu+0x10b0>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	2002      	movs	r0, #2
 80022a4:	f005 fce6 	bl	8007c74 <lcd_print>
 80022a8:	e057      	b.n	800235a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <menu+0x10a8>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d113      	bne.n	80022da <menu+0x1052>
			if(dilSecim == 0) {
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <menu+0x1070>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <menu+0x10b4>)
 80022bc:	2101      	movs	r1, #1
 80022be:	2002      	movs	r0, #2
 80022c0:	f005 fcd8 	bl	8007c74 <lcd_print>
 80022c4:	e049      	b.n	800235a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <menu+0x1070>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d145      	bne.n	800235a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <menu+0x10b8>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	2002      	movs	r0, #2
 80022d4:	f005 fcce 	bl	8007c74 <lcd_print>
 80022d8:	e03f      	b.n	800235a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <menu+0x10a8>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d13b      	bne.n	800235a <menu+0x10d2>
			if(dilSecim == 0) {
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <menu+0x1070>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d12e      	bne.n	8002348 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <menu+0x10bc>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	2002      	movs	r0, #2
 80022f0:	f005 fcc0 	bl	8007c74 <lcd_print>
 80022f4:	e031      	b.n	800235a <menu+0x10d2>
 80022f6:	bf00      	nop
 80022f8:	20000249 	.word	0x20000249
 80022fc:	0800d38c 	.word	0x0800d38c
 8002300:	2000022f 	.word	0x2000022f
 8002304:	0800d2cc 	.word	0x0800d2cc
 8002308:	0800d2e0 	.word	0x0800d2e0
 800230c:	0800d32c 	.word	0x0800d32c
 8002310:	0800d340 	.word	0x0800d340
 8002314:	40010800 	.word	0x40010800
 8002318:	20000257 	.word	0x20000257
 800231c:	2000012c 	.word	0x2000012c
 8002320:	20000254 	.word	0x20000254
 8002324:	20000228 	.word	0x20000228
 8002328:	0800d39c 	.word	0x0800d39c
 800232c:	0800d3b0 	.word	0x0800d3b0
 8002330:	20000230 	.word	0x20000230
 8002334:	0800d3c4 	.word	0x0800d3c4
 8002338:	0800d3d8 	.word	0x0800d3d8
 800233c:	0800d3ec 	.word	0x0800d3ec
 8002340:	0800d400 	.word	0x0800d400
 8002344:	0800d414 	.word	0x0800d414
			} else if(dilSecim == 1){
 8002348:	4b99      	ldr	r3, [pc, #612]	; (80025b0 <menu+0x1328>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d104      	bne.n	800235a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002350:	4a98      	ldr	r2, [pc, #608]	; (80025b4 <menu+0x132c>)
 8002352:	2101      	movs	r1, #1
 8002354:	2002      	movs	r0, #2
 8002356:	f005 fc8d 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800235a:	2102      	movs	r1, #2
 800235c:	4896      	ldr	r0, [pc, #600]	; (80025b8 <menu+0x1330>)
 800235e:	f006 ffaf 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	2b01      	cmp	r3, #1
 8002366:	d115      	bne.n	8002394 <menu+0x110c>
 8002368:	4b94      	ldr	r3, [pc, #592]	; (80025bc <menu+0x1334>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002376:	4b92      	ldr	r3, [pc, #584]	; (80025c0 <menu+0x1338>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b90      	ldr	r3, [pc, #576]	; (80025c0 <menu+0x1338>)
 8002380:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002382:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <menu+0x1338>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d902      	bls.n	8002390 <menu+0x1108>
				kapiSecimleri = 0;
 800238a:	4b8d      	ldr	r3, [pc, #564]	; (80025c0 <menu+0x1338>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002390:	f002 fb46 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002394:	2104      	movs	r1, #4
 8002396:	4888      	ldr	r0, [pc, #544]	; (80025b8 <menu+0x1330>)
 8002398:	f006 ff92 	bl	80092c0 <HAL_GPIO_ReadPin>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d115      	bne.n	80023ce <menu+0x1146>
 80023a2:	4b86      	ldr	r3, [pc, #536]	; (80025bc <menu+0x1334>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80023b0:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <menu+0x1338>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <menu+0x1338>)
 80023ba:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80023bc:	4b80      	ldr	r3, [pc, #512]	; (80025c0 <menu+0x1338>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d902      	bls.n	80023ca <menu+0x1142>
		   		kapiSecimleri = 3;
 80023c4:	4b7e      	ldr	r3, [pc, #504]	; (80025c0 <menu+0x1338>)
 80023c6:	2203      	movs	r2, #3
 80023c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023ca:	f002 fb29 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ce:	2108      	movs	r1, #8
 80023d0:	4879      	ldr	r0, [pc, #484]	; (80025b8 <menu+0x1330>)
 80023d2:	f006 ff75 	bl	80092c0 <HAL_GPIO_ReadPin>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d118      	bne.n	800240e <menu+0x1186>
 80023dc:	4b77      	ldr	r3, [pc, #476]	; (80025bc <menu+0x1334>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d011      	beq.n	800240e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80023ea:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <menu+0x1338>)
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	4b75      	ldr	r3, [pc, #468]	; (80025c4 <menu+0x133c>)
 80023f0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <menu+0x1338>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <menu+0x1180>
				altLimit = 1;
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <menu+0x1340>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002400:	4b71      	ldr	r3, [pc, #452]	; (80025c8 <menu+0x1340>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	4b6f      	ldr	r3, [pc, #444]	; (80025c4 <menu+0x133c>)
 8002406:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002408:	4b70      	ldr	r3, [pc, #448]	; (80025cc <menu+0x1344>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800240e:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <menu+0x1348>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b08      	cmp	r3, #8
 8002414:	f040 8092 	bne.w	800253c <menu+0x12b4>
		if(dilSecim == 0) {
 8002418:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <menu+0x1328>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002420:	4a6c      	ldr	r2, [pc, #432]	; (80025d4 <menu+0x134c>)
 8002422:	2101      	movs	r1, #1
 8002424:	2001      	movs	r0, #1
 8002426:	f005 fc25 	bl	8007c74 <lcd_print>
 800242a:	e008      	b.n	800243e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800242c:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <menu+0x1328>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d104      	bne.n	800243e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002434:	4a68      	ldr	r2, [pc, #416]	; (80025d8 <menu+0x1350>)
 8002436:	2101      	movs	r1, #1
 8002438:	2001      	movs	r0, #1
 800243a:	f005 fc1b 	bl	8007c74 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800243e:	4b67      	ldr	r3, [pc, #412]	; (80025dc <menu+0x1354>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d113      	bne.n	800246e <menu+0x11e6>
			if(dilSecim == 0) {
 8002446:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <menu+0x1328>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800244e:	4a64      	ldr	r2, [pc, #400]	; (80025e0 <menu+0x1358>)
 8002450:	2101      	movs	r1, #1
 8002452:	2002      	movs	r0, #2
 8002454:	f005 fc0e 	bl	8007c74 <lcd_print>
 8002458:	e020      	b.n	800249c <menu+0x1214>
			} else if(dilSecim == 1) {
 800245a:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <menu+0x1328>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d11c      	bne.n	800249c <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002462:	4a60      	ldr	r2, [pc, #384]	; (80025e4 <menu+0x135c>)
 8002464:	2101      	movs	r1, #1
 8002466:	2002      	movs	r0, #2
 8002468:	f005 fc04 	bl	8007c74 <lcd_print>
 800246c:	e016      	b.n	800249c <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800246e:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <menu+0x1354>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d112      	bne.n	800249c <menu+0x1214>
			if(dilSecim == 0){
 8002476:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <menu+0x1328>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800247e:	4a5a      	ldr	r2, [pc, #360]	; (80025e8 <menu+0x1360>)
 8002480:	2101      	movs	r1, #1
 8002482:	2002      	movs	r0, #2
 8002484:	f005 fbf6 	bl	8007c74 <lcd_print>
 8002488:	e008      	b.n	800249c <menu+0x1214>
			} else if(dilSecim == 1){
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <menu+0x1328>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d104      	bne.n	800249c <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002492:	4a56      	ldr	r2, [pc, #344]	; (80025ec <menu+0x1364>)
 8002494:	2101      	movs	r1, #1
 8002496:	2002      	movs	r0, #2
 8002498:	f005 fbec 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800249c:	2102      	movs	r1, #2
 800249e:	4846      	ldr	r0, [pc, #280]	; (80025b8 <menu+0x1330>)
 80024a0:	f006 ff0e 	bl	80092c0 <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d115      	bne.n	80024d6 <menu+0x124e>
 80024aa:	4b44      	ldr	r3, [pc, #272]	; (80025bc <menu+0x1334>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <menu+0x1354>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <menu+0x1354>)
 80024c2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80024c4:	4b45      	ldr	r3, [pc, #276]	; (80025dc <menu+0x1354>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d902      	bls.n	80024d2 <menu+0x124a>
				kapiAcTipi = 0;
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <menu+0x1354>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024d2:	f002 faa5 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d6:	2104      	movs	r1, #4
 80024d8:	4837      	ldr	r0, [pc, #220]	; (80025b8 <menu+0x1330>)
 80024da:	f006 fef1 	bl	80092c0 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d115      	bne.n	8002510 <menu+0x1288>
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <menu+0x1334>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80024f2:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <menu+0x1354>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <menu+0x1354>)
 80024fc:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80024fe:	4b37      	ldr	r3, [pc, #220]	; (80025dc <menu+0x1354>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <menu+0x1284>
		   		kapiAcTipi = 1;
 8002506:	4b35      	ldr	r3, [pc, #212]	; (80025dc <menu+0x1354>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800250c:	f002 fa88 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002510:	2108      	movs	r1, #8
 8002512:	4829      	ldr	r0, [pc, #164]	; (80025b8 <menu+0x1330>)
 8002514:	f006 fed4 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10e      	bne.n	800253c <menu+0x12b4>
 800251e:	4b27      	ldr	r3, [pc, #156]	; (80025bc <menu+0x1334>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <menu+0x1354>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <menu+0x133c>)
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002536:	4b25      	ldr	r3, [pc, #148]	; (80025cc <menu+0x1344>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <menu+0x1348>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b09      	cmp	r3, #9
 8002542:	f040 80b9 	bne.w	80026b8 <menu+0x1430>
		if(dilSecim == 0){
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <menu+0x1328>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <menu+0x1368>)
 8002550:	2101      	movs	r1, #1
 8002552:	2001      	movs	r0, #1
 8002554:	f005 fb8e 	bl	8007c74 <lcd_print>
 8002558:	e008      	b.n	800256c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <menu+0x1328>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d104      	bne.n	800256c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002562:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <menu+0x136c>)
 8002564:	2101      	movs	r1, #1
 8002566:	2001      	movs	r0, #1
 8002568:	f005 fb84 	bl	8007c74 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <menu+0x1370>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002574:	4a21      	ldr	r2, [pc, #132]	; (80025fc <menu+0x1374>)
 8002576:	2101      	movs	r1, #1
 8002578:	2002      	movs	r0, #2
 800257a:	f005 fb7b 	bl	8007c74 <lcd_print>
 800257e:	e04c      	b.n	800261a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <menu+0x1370>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d13f      	bne.n	8002608 <menu+0x1380>
			if(dilSecim == 0){
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <menu+0x1328>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <menu+0x1378>)
 8002592:	2101      	movs	r1, #1
 8002594:	2002      	movs	r0, #2
 8002596:	f005 fb6d 	bl	8007c74 <lcd_print>
 800259a:	e03e      	b.n	800261a <menu+0x1392>
			} else if(dilSecim == 1) {
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <menu+0x1328>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d13a      	bne.n	800261a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80025a4:	4a17      	ldr	r2, [pc, #92]	; (8002604 <menu+0x137c>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	2002      	movs	r0, #2
 80025aa:	f005 fb63 	bl	8007c74 <lcd_print>
 80025ae:	e034      	b.n	800261a <menu+0x1392>
 80025b0:	20000249 	.word	0x20000249
 80025b4:	0800d428 	.word	0x0800d428
 80025b8:	40010800 	.word	0x40010800
 80025bc:	20000257 	.word	0x20000257
 80025c0:	20000230 	.word	0x20000230
 80025c4:	2000012c 	.word	0x2000012c
 80025c8:	2000022e 	.word	0x2000022e
 80025cc:	20000254 	.word	0x20000254
 80025d0:	20000228 	.word	0x20000228
 80025d4:	0800d43c 	.word	0x0800d43c
 80025d8:	0800d450 	.word	0x0800d450
 80025dc:	20000234 	.word	0x20000234
 80025e0:	0800d464 	.word	0x0800d464
 80025e4:	0800d474 	.word	0x0800d474
 80025e8:	0800d484 	.word	0x0800d484
 80025ec:	0800d498 	.word	0x0800d498
 80025f0:	0800d4ac 	.word	0x0800d4ac
 80025f4:	0800d4c0 	.word	0x0800d4c0
 80025f8:	20000231 	.word	0x20000231
 80025fc:	0800d4d4 	.word	0x0800d4d4
 8002600:	0800d4e8 	.word	0x0800d4e8
 8002604:	0800d4f8 	.word	0x0800d4f8
			}
		} else if(kapi1Tip == 2) {
 8002608:	4b8a      	ldr	r3, [pc, #552]	; (8002834 <menu+0x15ac>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d104      	bne.n	800261a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002610:	4a89      	ldr	r2, [pc, #548]	; (8002838 <menu+0x15b0>)
 8002612:	2101      	movs	r1, #1
 8002614:	2002      	movs	r0, #2
 8002616:	f005 fb2d 	bl	8007c74 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800261a:	2102      	movs	r1, #2
 800261c:	4887      	ldr	r0, [pc, #540]	; (800283c <menu+0x15b4>)
 800261e:	f006 fe4f 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002622:	4603      	mov	r3, r0
 8002624:	2b01      	cmp	r3, #1
 8002626:	d115      	bne.n	8002654 <menu+0x13cc>
 8002628:	4b85      	ldr	r3, [pc, #532]	; (8002840 <menu+0x15b8>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	f083 0301 	eor.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00e      	beq.n	8002654 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002636:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <menu+0x15ac>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4b7d      	ldr	r3, [pc, #500]	; (8002834 <menu+0x15ac>)
 8002640:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002642:	4b7c      	ldr	r3, [pc, #496]	; (8002834 <menu+0x15ac>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d902      	bls.n	8002650 <menu+0x13c8>
				kapi1Tip = 0;
 800264a:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <menu+0x15ac>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002650:	f002 f9e6 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002654:	2104      	movs	r1, #4
 8002656:	4879      	ldr	r0, [pc, #484]	; (800283c <menu+0x15b4>)
 8002658:	f006 fe32 	bl	80092c0 <HAL_GPIO_ReadPin>
 800265c:	4603      	mov	r3, r0
 800265e:	2b01      	cmp	r3, #1
 8002660:	d115      	bne.n	800268e <menu+0x1406>
 8002662:	4b77      	ldr	r3, [pc, #476]	; (8002840 <menu+0x15b8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	f083 0301 	eor.w	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002670:	4b70      	ldr	r3, [pc, #448]	; (8002834 <menu+0x15ac>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b6e      	ldr	r3, [pc, #440]	; (8002834 <menu+0x15ac>)
 800267a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800267c:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <menu+0x15ac>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d902      	bls.n	800268a <menu+0x1402>
		   		kapi1Tip = 2;
 8002684:	4b6b      	ldr	r3, [pc, #428]	; (8002834 <menu+0x15ac>)
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800268a:	f002 f9c9 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800268e:	2108      	movs	r1, #8
 8002690:	486a      	ldr	r0, [pc, #424]	; (800283c <menu+0x15b4>)
 8002692:	f006 fe15 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002696:	4603      	mov	r3, r0
 8002698:	2b01      	cmp	r3, #1
 800269a:	d10d      	bne.n	80026b8 <menu+0x1430>
 800269c:	4b68      	ldr	r3, [pc, #416]	; (8002840 <menu+0x15b8>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f083 0301 	eor.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80026aa:	4b62      	ldr	r3, [pc, #392]	; (8002834 <menu+0x15ac>)
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	4b65      	ldr	r3, [pc, #404]	; (8002844 <menu+0x15bc>)
 80026b0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <menu+0x15c0>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80026b8:	4b64      	ldr	r3, [pc, #400]	; (800284c <menu+0x15c4>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b0a      	cmp	r3, #10
 80026be:	d17f      	bne.n	80027c0 <menu+0x1538>
		if(dilSecim == 0) {
 80026c0:	4b63      	ldr	r3, [pc, #396]	; (8002850 <menu+0x15c8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10a      	bne.n	80026de <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80026c8:	4a62      	ldr	r2, [pc, #392]	; (8002854 <menu+0x15cc>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	2001      	movs	r0, #1
 80026ce:	f005 fad1 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80026d2:	4a61      	ldr	r2, [pc, #388]	; (8002858 <menu+0x15d0>)
 80026d4:	2101      	movs	r1, #1
 80026d6:	2002      	movs	r0, #2
 80026d8:	f005 facc 	bl	8007c74 <lcd_print>
 80026dc:	e00d      	b.n	80026fa <menu+0x1472>
		} else if(dilSecim == 1) {
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <menu+0x15c8>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d109      	bne.n	80026fa <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80026e6:	4a5d      	ldr	r2, [pc, #372]	; (800285c <menu+0x15d4>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	2001      	movs	r0, #1
 80026ec:	f005 fac2 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80026f0:	4a5b      	ldr	r2, [pc, #364]	; (8002860 <menu+0x15d8>)
 80026f2:	2101      	movs	r1, #1
 80026f4:	2002      	movs	r0, #2
 80026f6:	f005 fabd 	bl	8007c74 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80026fa:	4b5a      	ldr	r3, [pc, #360]	; (8002864 <menu+0x15dc>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	220a      	movs	r2, #10
 8002700:	4959      	ldr	r1, [pc, #356]	; (8002868 <menu+0x15e0>)
 8002702:	4618      	mov	r0, r3
 8002704:	f009 fe08 	bl	800c318 <itoa>
		lcd_print(2,16,snum);
 8002708:	4a57      	ldr	r2, [pc, #348]	; (8002868 <menu+0x15e0>)
 800270a:	2110      	movs	r1, #16
 800270c:	2002      	movs	r0, #2
 800270e:	f005 fab1 	bl	8007c74 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002712:	2102      	movs	r1, #2
 8002714:	4849      	ldr	r0, [pc, #292]	; (800283c <menu+0x15b4>)
 8002716:	f006 fdd3 	bl	80092c0 <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d119      	bne.n	8002754 <menu+0x14cc>
 8002720:	4b47      	ldr	r3, [pc, #284]	; (8002840 <menu+0x15b8>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <menu+0x14cc>
 800272e:	4b41      	ldr	r3, [pc, #260]	; (8002834 <menu+0x15ac>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10e      	bne.n	8002754 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002736:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <menu+0x15dc>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	3301      	adds	r3, #1
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <menu+0x15dc>)
 8002740:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002742:	4b48      	ldr	r3, [pc, #288]	; (8002864 <menu+0x15dc>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d902      	bls.n	8002750 <menu+0x14c8>
				kapi1AcSure = 0;
 800274a:	4b46      	ldr	r3, [pc, #280]	; (8002864 <menu+0x15dc>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002750:	f002 f966 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002754:	2104      	movs	r1, #4
 8002756:	4839      	ldr	r0, [pc, #228]	; (800283c <menu+0x15b4>)
 8002758:	f006 fdb2 	bl	80092c0 <HAL_GPIO_ReadPin>
 800275c:	4603      	mov	r3, r0
 800275e:	2b01      	cmp	r3, #1
 8002760:	d119      	bne.n	8002796 <menu+0x150e>
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <menu+0x15b8>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	f083 0301 	eor.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <menu+0x150e>
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <menu+0x15ac>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10e      	bne.n	8002796 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002778:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <menu+0x15dc>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b38      	ldr	r3, [pc, #224]	; (8002864 <menu+0x15dc>)
 8002782:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <menu+0x15dc>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b06      	cmp	r3, #6
 800278a:	d902      	bls.n	8002792 <menu+0x150a>
		   		kapi1AcSure = 5;
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <menu+0x15dc>)
 800278e:	2205      	movs	r2, #5
 8002790:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002792:	f002 f945 	bl	8004a20 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002796:	2108      	movs	r1, #8
 8002798:	4828      	ldr	r0, [pc, #160]	; (800283c <menu+0x15b4>)
 800279a:	f006 fd91 	bl	80092c0 <HAL_GPIO_ReadPin>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10d      	bne.n	80027c0 <menu+0x1538>
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <menu+0x15b8>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	f083 0301 	eor.w	r3, r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80027b2:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <menu+0x15dc>)
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <menu+0x15bc>)
 80027b8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80027ba:	4b23      	ldr	r3, [pc, #140]	; (8002848 <menu+0x15c0>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <menu+0x15c4>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b0b      	cmp	r3, #11
 80027c6:	f040 80b5 	bne.w	8002934 <menu+0x16ac>
		if(dilSecim == 0) {
 80027ca:	4b21      	ldr	r3, [pc, #132]	; (8002850 <menu+0x15c8>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80027d2:	4a26      	ldr	r2, [pc, #152]	; (800286c <menu+0x15e4>)
 80027d4:	2101      	movs	r1, #1
 80027d6:	2001      	movs	r0, #1
 80027d8:	f005 fa4c 	bl	8007c74 <lcd_print>
 80027dc:	e008      	b.n	80027f0 <menu+0x1568>
		} else if(dilSecim == 1) {
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <menu+0x15c8>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d104      	bne.n	80027f0 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80027e6:	4a22      	ldr	r2, [pc, #136]	; (8002870 <menu+0x15e8>)
 80027e8:	2101      	movs	r1, #1
 80027ea:	2001      	movs	r0, #1
 80027ec:	f005 fa42 	bl	8007c74 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80027f0:	4b20      	ldr	r3, [pc, #128]	; (8002874 <menu+0x15ec>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <menu+0x15f0>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	2002      	movs	r0, #2
 80027fe:	f005 fa39 	bl	8007c74 <lcd_print>
 8002802:	e048      	b.n	8002896 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <menu+0x15ec>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d13b      	bne.n	8002884 <menu+0x15fc>
			if(dilSecim == 0) {
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <menu+0x15c8>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <menu+0x15f4>)
 8002816:	2101      	movs	r1, #1
 8002818:	2002      	movs	r0, #2
 800281a:	f005 fa2b 	bl	8007c74 <lcd_print>
 800281e:	e03a      	b.n	8002896 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <menu+0x15c8>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d136      	bne.n	8002896 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002828:	4a15      	ldr	r2, [pc, #84]	; (8002880 <menu+0x15f8>)
 800282a:	2101      	movs	r1, #1
 800282c:	2002      	movs	r0, #2
 800282e:	f005 fa21 	bl	8007c74 <lcd_print>
 8002832:	e030      	b.n	8002896 <menu+0x160e>
 8002834:	20000231 	.word	0x20000231
 8002838:	0800d50c 	.word	0x0800d50c
 800283c:	40010800 	.word	0x40010800
 8002840:	20000257 	.word	0x20000257
 8002844:	2000012c 	.word	0x2000012c
 8002848:	20000254 	.word	0x20000254
 800284c:	20000228 	.word	0x20000228
 8002850:	20000249 	.word	0x20000249
 8002854:	0800d51c 	.word	0x0800d51c
 8002858:	0800d530 	.word	0x0800d530
 800285c:	0800d540 	.word	0x0800d540
 8002860:	0800d554 	.word	0x0800d554
 8002864:	20000241 	.word	0x20000241
 8002868:	2000019c 	.word	0x2000019c
 800286c:	0800d564 	.word	0x0800d564
 8002870:	0800d578 	.word	0x0800d578
 8002874:	20000232 	.word	0x20000232
 8002878:	0800d4d4 	.word	0x0800d4d4
 800287c:	0800d4e8 	.word	0x0800d4e8
 8002880:	0800d4f8 	.word	0x0800d4f8
			}
		} else if(kapi2Tip == 2) {
 8002884:	4b8a      	ldr	r3, [pc, #552]	; (8002ab0 <menu+0x1828>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d104      	bne.n	8002896 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 800288c:	4a89      	ldr	r2, [pc, #548]	; (8002ab4 <menu+0x182c>)
 800288e:	2101      	movs	r1, #1
 8002890:	2002      	movs	r0, #2
 8002892:	f005 f9ef 	bl	8007c74 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002896:	2102      	movs	r1, #2
 8002898:	4887      	ldr	r0, [pc, #540]	; (8002ab8 <menu+0x1830>)
 800289a:	f006 fd11 	bl	80092c0 <HAL_GPIO_ReadPin>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d115      	bne.n	80028d0 <menu+0x1648>
 80028a4:	4b85      	ldr	r3, [pc, #532]	; (8002abc <menu+0x1834>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f083 0301 	eor.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80028b2:	4b7f      	ldr	r3, [pc, #508]	; (8002ab0 <menu+0x1828>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <menu+0x1828>)
 80028bc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80028be:	4b7c      	ldr	r3, [pc, #496]	; (8002ab0 <menu+0x1828>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d902      	bls.n	80028cc <menu+0x1644>
				kapi2Tip = 0;
 80028c6:	4b7a      	ldr	r3, [pc, #488]	; (8002ab0 <menu+0x1828>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028cc:	f002 f8a8 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028d0:	2104      	movs	r1, #4
 80028d2:	4879      	ldr	r0, [pc, #484]	; (8002ab8 <menu+0x1830>)
 80028d4:	f006 fcf4 	bl	80092c0 <HAL_GPIO_ReadPin>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d115      	bne.n	800290a <menu+0x1682>
 80028de:	4b77      	ldr	r3, [pc, #476]	; (8002abc <menu+0x1834>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	f083 0301 	eor.w	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80028ec:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <menu+0x1828>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b6e      	ldr	r3, [pc, #440]	; (8002ab0 <menu+0x1828>)
 80028f6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80028f8:	4b6d      	ldr	r3, [pc, #436]	; (8002ab0 <menu+0x1828>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d902      	bls.n	8002906 <menu+0x167e>
		   		kapi2Tip = 2;
 8002900:	4b6b      	ldr	r3, [pc, #428]	; (8002ab0 <menu+0x1828>)
 8002902:	2202      	movs	r2, #2
 8002904:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002906:	f002 f88b 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800290a:	2108      	movs	r1, #8
 800290c:	486a      	ldr	r0, [pc, #424]	; (8002ab8 <menu+0x1830>)
 800290e:	f006 fcd7 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002912:	4603      	mov	r3, r0
 8002914:	2b01      	cmp	r3, #1
 8002916:	d10d      	bne.n	8002934 <menu+0x16ac>
 8002918:	4b68      	ldr	r3, [pc, #416]	; (8002abc <menu+0x1834>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002926:	4b62      	ldr	r3, [pc, #392]	; (8002ab0 <menu+0x1828>)
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <menu+0x1838>)
 800292c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <menu+0x183c>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002934:	4b64      	ldr	r3, [pc, #400]	; (8002ac8 <menu+0x1840>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d17f      	bne.n	8002a3c <menu+0x17b4>
		if(dilSecim == 0) {
 800293c:	4b63      	ldr	r3, [pc, #396]	; (8002acc <menu+0x1844>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002944:	4a62      	ldr	r2, [pc, #392]	; (8002ad0 <menu+0x1848>)
 8002946:	2101      	movs	r1, #1
 8002948:	2001      	movs	r0, #1
 800294a:	f005 f993 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800294e:	4a61      	ldr	r2, [pc, #388]	; (8002ad4 <menu+0x184c>)
 8002950:	2101      	movs	r1, #1
 8002952:	2002      	movs	r0, #2
 8002954:	f005 f98e 	bl	8007c74 <lcd_print>
 8002958:	e00d      	b.n	8002976 <menu+0x16ee>
		} else if(dilSecim == 1) {
 800295a:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <menu+0x1844>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d109      	bne.n	8002976 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002962:	4a5d      	ldr	r2, [pc, #372]	; (8002ad8 <menu+0x1850>)
 8002964:	2101      	movs	r1, #1
 8002966:	2001      	movs	r0, #1
 8002968:	f005 f984 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800296c:	4a5b      	ldr	r2, [pc, #364]	; (8002adc <menu+0x1854>)
 800296e:	2101      	movs	r1, #1
 8002970:	2002      	movs	r0, #2
 8002972:	f005 f97f 	bl	8007c74 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002976:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <menu+0x1858>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	220a      	movs	r2, #10
 800297c:	4959      	ldr	r1, [pc, #356]	; (8002ae4 <menu+0x185c>)
 800297e:	4618      	mov	r0, r3
 8002980:	f009 fcca 	bl	800c318 <itoa>
		lcd_print(2,16,snum);
 8002984:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <menu+0x185c>)
 8002986:	2110      	movs	r1, #16
 8002988:	2002      	movs	r0, #2
 800298a:	f005 f973 	bl	8007c74 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800298e:	2102      	movs	r1, #2
 8002990:	4849      	ldr	r0, [pc, #292]	; (8002ab8 <menu+0x1830>)
 8002992:	f006 fc95 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d119      	bne.n	80029d0 <menu+0x1748>
 800299c:	4b47      	ldr	r3, [pc, #284]	; (8002abc <menu+0x1834>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <menu+0x1748>
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <menu+0x1828>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <menu+0x1858>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <menu+0x1858>)
 80029bc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80029be:	4b48      	ldr	r3, [pc, #288]	; (8002ae0 <menu+0x1858>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d902      	bls.n	80029cc <menu+0x1744>
				kapi2AcSure = 0;
 80029c6:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <menu+0x1858>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029cc:	f002 f828 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80029d0:	2104      	movs	r1, #4
 80029d2:	4839      	ldr	r0, [pc, #228]	; (8002ab8 <menu+0x1830>)
 80029d4:	f006 fc74 	bl	80092c0 <HAL_GPIO_ReadPin>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d119      	bne.n	8002a12 <menu+0x178a>
 80029de:	4b37      	ldr	r3, [pc, #220]	; (8002abc <menu+0x1834>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f083 0301 	eor.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d012      	beq.n	8002a12 <menu+0x178a>
 80029ec:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <menu+0x1828>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10e      	bne.n	8002a12 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 80029f4:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <menu+0x1858>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	4b38      	ldr	r3, [pc, #224]	; (8002ae0 <menu+0x1858>)
 80029fe:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a00:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <menu+0x1858>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d902      	bls.n	8002a0e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002a08:	4b35      	ldr	r3, [pc, #212]	; (8002ae0 <menu+0x1858>)
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a0e:	f002 f807 	bl	8004a20 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a12:	2108      	movs	r1, #8
 8002a14:	4828      	ldr	r0, [pc, #160]	; (8002ab8 <menu+0x1830>)
 8002a16:	f006 fc53 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10d      	bne.n	8002a3c <menu+0x17b4>
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <menu+0x1834>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <menu+0x1858>)
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <menu+0x1838>)
 8002a34:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002a36:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <menu+0x183c>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002a3c:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <menu+0x1840>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b0d      	cmp	r3, #13
 8002a42:	f040 80b5 	bne.w	8002bb0 <menu+0x1928>
		if(dilSecim == 0) {
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <menu+0x1844>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002a4e:	4a26      	ldr	r2, [pc, #152]	; (8002ae8 <menu+0x1860>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2001      	movs	r0, #1
 8002a54:	f005 f90e 	bl	8007c74 <lcd_print>
 8002a58:	e008      	b.n	8002a6c <menu+0x17e4>
		} else if(dilSecim == 1){
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <menu+0x1844>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d104      	bne.n	8002a6c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002a62:	4a22      	ldr	r2, [pc, #136]	; (8002aec <menu+0x1864>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2001      	movs	r0, #1
 8002a68:	f005 f904 	bl	8007c74 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <menu+0x1868>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <menu+0x186c>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f005 f8fb 	bl	8007c74 <lcd_print>
 8002a7e:	e048      	b.n	8002b12 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <menu+0x1868>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d13b      	bne.n	8002b00 <menu+0x1878>
			if(dilSecim == 0) {
 8002a88:	4b10      	ldr	r3, [pc, #64]	; (8002acc <menu+0x1844>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002a90:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <menu+0x1870>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	2002      	movs	r0, #2
 8002a96:	f005 f8ed 	bl	8007c74 <lcd_print>
 8002a9a:	e03a      	b.n	8002b12 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <menu+0x1844>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d136      	bne.n	8002b12 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <menu+0x1874>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	f005 f8e3 	bl	8007c74 <lcd_print>
 8002aae:	e030      	b.n	8002b12 <menu+0x188a>
 8002ab0:	20000232 	.word	0x20000232
 8002ab4:	0800d50c 	.word	0x0800d50c
 8002ab8:	40010800 	.word	0x40010800
 8002abc:	20000257 	.word	0x20000257
 8002ac0:	2000012c 	.word	0x2000012c
 8002ac4:	20000254 	.word	0x20000254
 8002ac8:	20000228 	.word	0x20000228
 8002acc:	20000249 	.word	0x20000249
 8002ad0:	0800d58c 	.word	0x0800d58c
 8002ad4:	0800d530 	.word	0x0800d530
 8002ad8:	0800d5a0 	.word	0x0800d5a0
 8002adc:	0800d554 	.word	0x0800d554
 8002ae0:	20000242 	.word	0x20000242
 8002ae4:	2000019c 	.word	0x2000019c
 8002ae8:	0800d5b4 	.word	0x0800d5b4
 8002aec:	0800d5c8 	.word	0x0800d5c8
 8002af0:	20000233 	.word	0x20000233
 8002af4:	0800d4d4 	.word	0x0800d4d4
 8002af8:	0800d4e8 	.word	0x0800d4e8
 8002afc:	0800d4f8 	.word	0x0800d4f8
			}
		} else if(kapitablaTip == 2) {
 8002b00:	4b5b      	ldr	r3, [pc, #364]	; (8002c70 <menu+0x19e8>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d104      	bne.n	8002b12 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002b08:	4a5a      	ldr	r2, [pc, #360]	; (8002c74 <menu+0x19ec>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	2002      	movs	r0, #2
 8002b0e:	f005 f8b1 	bl	8007c74 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b12:	2102      	movs	r1, #2
 8002b14:	4858      	ldr	r0, [pc, #352]	; (8002c78 <menu+0x19f0>)
 8002b16:	f006 fbd3 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d115      	bne.n	8002b4c <menu+0x18c4>
 8002b20:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <menu+0x19f4>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	f083 0301 	eor.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00e      	beq.n	8002b4c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002b2e:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <menu+0x19e8>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	3301      	adds	r3, #1
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <menu+0x19e8>)
 8002b38:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002b3a:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <menu+0x19e8>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d902      	bls.n	8002b48 <menu+0x18c0>
				kapitablaTip = 0;
 8002b42:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <menu+0x19e8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b48:	f001 ff6a 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	484a      	ldr	r0, [pc, #296]	; (8002c78 <menu+0x19f0>)
 8002b50:	f006 fbb6 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d115      	bne.n	8002b86 <menu+0x18fe>
 8002b5a:	4b48      	ldr	r3, [pc, #288]	; (8002c7c <menu+0x19f4>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	f083 0301 	eor.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002b68:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <menu+0x19e8>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <menu+0x19e8>)
 8002b72:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002b74:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <menu+0x19e8>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d902      	bls.n	8002b82 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <menu+0x19e8>)
 8002b7e:	2202      	movs	r2, #2
 8002b80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b82:	f001 ff4d 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b86:	2108      	movs	r1, #8
 8002b88:	483b      	ldr	r0, [pc, #236]	; (8002c78 <menu+0x19f0>)
 8002b8a:	f006 fb99 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10d      	bne.n	8002bb0 <menu+0x1928>
 8002b94:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <menu+0x19f4>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f083 0301 	eor.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002ba2:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <menu+0x19e8>)
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <menu+0x19f8>)
 8002ba8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <menu+0x19fc>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002bb0:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <menu+0x1a00>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b0e      	cmp	r3, #14
 8002bb6:	f040 80f2 	bne.w	8002d9e <menu+0x1b16>
		if(dilSecim == 0) {
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <menu+0x1a04>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002bc2:	4a33      	ldr	r2, [pc, #204]	; (8002c90 <menu+0x1a08>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f005 f854 	bl	8007c74 <lcd_print>
 8002bcc:	e008      	b.n	8002be0 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002bce:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <menu+0x1a04>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d104      	bne.n	8002be0 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002bd6:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <menu+0x1a0c>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f005 f84a 	bl	8007c74 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <menu+0x1a10>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d113      	bne.n	8002c10 <menu+0x1988>
			if(dilSecim == 0){
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <menu+0x1a04>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <menu+0x1a14>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f005 f83d 	bl	8007c74 <lcd_print>
 8002bfa:	e071      	b.n	8002ce0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <menu+0x1a04>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d16d      	bne.n	8002ce0 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <menu+0x1a18>)
 8002c06:	2101      	movs	r1, #1
 8002c08:	2002      	movs	r0, #2
 8002c0a:	f005 f833 	bl	8007c74 <lcd_print>
 8002c0e:	e067      	b.n	8002ce0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <menu+0x1a10>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d112      	bne.n	8002c3e <menu+0x19b6>
			if(dilSecim == 0){
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <menu+0x1a04>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <menu+0x1a1c>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	2002      	movs	r0, #2
 8002c26:	f005 f825 	bl	8007c74 <lcd_print>
			}
			if(dilSecim == 1){
 8002c2a:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <menu+0x1a04>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d156      	bne.n	8002ce0 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <menu+0x1a20>)
 8002c34:	2101      	movs	r1, #1
 8002c36:	2002      	movs	r0, #2
 8002c38:	f005 f81c 	bl	8007c74 <lcd_print>
 8002c3c:	e050      	b.n	8002ce0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <menu+0x1a10>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d136      	bne.n	8002cb4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <menu+0x1a04>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002c4e:	4a17      	ldr	r2, [pc, #92]	; (8002cac <menu+0x1a24>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	2002      	movs	r0, #2
 8002c54:	f005 f80e 	bl	8007c74 <lcd_print>
 8002c58:	e042      	b.n	8002ce0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <menu+0x1a04>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d13e      	bne.n	8002ce0 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <menu+0x1a28>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	2002      	movs	r0, #2
 8002c68:	f005 f804 	bl	8007c74 <lcd_print>
 8002c6c:	e038      	b.n	8002ce0 <menu+0x1a58>
 8002c6e:	bf00      	nop
 8002c70:	20000233 	.word	0x20000233
 8002c74:	0800d50c 	.word	0x0800d50c
 8002c78:	40010800 	.word	0x40010800
 8002c7c:	20000257 	.word	0x20000257
 8002c80:	2000012c 	.word	0x2000012c
 8002c84:	20000254 	.word	0x20000254
 8002c88:	20000228 	.word	0x20000228
 8002c8c:	20000249 	.word	0x20000249
 8002c90:	0800d5dc 	.word	0x0800d5dc
 8002c94:	0800d5f0 	.word	0x0800d5f0
 8002c98:	20000235 	.word	0x20000235
 8002c9c:	0800d604 	.word	0x0800d604
 8002ca0:	0800d614 	.word	0x0800d614
 8002ca4:	0800d624 	.word	0x0800d624
 8002ca8:	0800d634 	.word	0x0800d634
 8002cac:	0800d644 	.word	0x0800d644
 8002cb0:	0800d658 	.word	0x0800d658
			}
		} else if(kapiTablaAcKonum == 3) {
 8002cb4:	4b9b      	ldr	r3, [pc, #620]	; (8002f24 <menu+0x1c9c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d111      	bne.n	8002ce0 <menu+0x1a58>
			if(dilSecim == 0) {
 8002cbc:	4b9a      	ldr	r3, [pc, #616]	; (8002f28 <menu+0x1ca0>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002cc4:	4a99      	ldr	r2, [pc, #612]	; (8002f2c <menu+0x1ca4>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f004 ffd3 	bl	8007c74 <lcd_print>
			}
			if(dilSecim == 1) {
 8002cce:	4b96      	ldr	r3, [pc, #600]	; (8002f28 <menu+0x1ca0>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d104      	bne.n	8002ce0 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002cd6:	4a96      	ldr	r2, [pc, #600]	; (8002f30 <menu+0x1ca8>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	2002      	movs	r0, #2
 8002cdc:	f004 ffca 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4894      	ldr	r0, [pc, #592]	; (8002f34 <menu+0x1cac>)
 8002ce4:	f006 faec 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d115      	bne.n	8002d1a <menu+0x1a92>
 8002cee:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <menu+0x1cb0>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	f083 0301 	eor.w	r3, r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002cfc:	4b89      	ldr	r3, [pc, #548]	; (8002f24 <menu+0x1c9c>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	4b87      	ldr	r3, [pc, #540]	; (8002f24 <menu+0x1c9c>)
 8002d06:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002d08:	4b86      	ldr	r3, [pc, #536]	; (8002f24 <menu+0x1c9c>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d902      	bls.n	8002d16 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002d10:	4b84      	ldr	r3, [pc, #528]	; (8002f24 <menu+0x1c9c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d16:	f001 fe83 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	4885      	ldr	r0, [pc, #532]	; (8002f34 <menu+0x1cac>)
 8002d1e:	f006 facf 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d115      	bne.n	8002d54 <menu+0x1acc>
 8002d28:	4b83      	ldr	r3, [pc, #524]	; (8002f38 <menu+0x1cb0>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002d36:	4b7b      	ldr	r3, [pc, #492]	; (8002f24 <menu+0x1c9c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4b79      	ldr	r3, [pc, #484]	; (8002f24 <menu+0x1c9c>)
 8002d40:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002d42:	4b78      	ldr	r3, [pc, #480]	; (8002f24 <menu+0x1c9c>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d902      	bls.n	8002d50 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002d4a:	4b76      	ldr	r3, [pc, #472]	; (8002f24 <menu+0x1c9c>)
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d50:	f001 fe66 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d54:	2108      	movs	r1, #8
 8002d56:	4877      	ldr	r0, [pc, #476]	; (8002f34 <menu+0x1cac>)
 8002d58:	f006 fab2 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d11d      	bne.n	8002d9e <menu+0x1b16>
 8002d62:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <menu+0x1cb0>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d016      	beq.n	8002d9e <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002d70:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <menu+0x1c9c>)
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <menu+0x1cb4>)
 8002d76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <menu+0x1c9c>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <menu+0x1b02>
 8002d82:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <menu+0x1c9c>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d106      	bne.n	8002d98 <menu+0x1b10>
				altLimit = 1;
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	; (8002f40 <menu+0x1cb8>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <menu+0x1cb8>)
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <menu+0x1cb4>)
 8002d96:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002d98:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <menu+0x1cbc>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <menu+0x1cc0>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	d17f      	bne.n	8002ea6 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002da6:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <menu+0x1ca0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002dae:	4a67      	ldr	r2, [pc, #412]	; (8002f4c <menu+0x1cc4>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	2001      	movs	r0, #1
 8002db4:	f004 ff5e 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002db8:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <menu+0x1cc8>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f004 ff59 	bl	8007c74 <lcd_print>
 8002dc2:	e00d      	b.n	8002de0 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002dc4:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <menu+0x1ca0>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d109      	bne.n	8002de0 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002dcc:	4a61      	ldr	r2, [pc, #388]	; (8002f54 <menu+0x1ccc>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f004 ff4f 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002dd6:	4a60      	ldr	r2, [pc, #384]	; (8002f58 <menu+0x1cd0>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f004 ff4a 	bl	8007c74 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002de0:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <menu+0x1cd4>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	220a      	movs	r2, #10
 8002de6:	495e      	ldr	r1, [pc, #376]	; (8002f60 <menu+0x1cd8>)
 8002de8:	4618      	mov	r0, r3
 8002dea:	f009 fa95 	bl	800c318 <itoa>
		lcd_print(2,16,snum);
 8002dee:	4a5c      	ldr	r2, [pc, #368]	; (8002f60 <menu+0x1cd8>)
 8002df0:	2110      	movs	r1, #16
 8002df2:	2002      	movs	r0, #2
 8002df4:	f004 ff3e 	bl	8007c74 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002df8:	2102      	movs	r1, #2
 8002dfa:	484e      	ldr	r0, [pc, #312]	; (8002f34 <menu+0x1cac>)
 8002dfc:	f006 fa60 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d119      	bne.n	8002e3a <menu+0x1bb2>
 8002e06:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <menu+0x1cb0>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f083 0301 	eor.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <menu+0x1bb2>
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <menu+0x1cdc>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10e      	bne.n	8002e3a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002e1c:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <menu+0x1cd4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <menu+0x1cd4>)
 8002e26:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002e28:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <menu+0x1cd4>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d902      	bls.n	8002e36 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002e30:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <menu+0x1cd4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e36:	f001 fdf3 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	483d      	ldr	r0, [pc, #244]	; (8002f34 <menu+0x1cac>)
 8002e3e:	f006 fa3f 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d119      	bne.n	8002e7c <menu+0x1bf4>
 8002e48:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <menu+0x1cb0>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d012      	beq.n	8002e7c <menu+0x1bf4>
 8002e56:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <menu+0x1cdc>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10e      	bne.n	8002e7c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <menu+0x1cd4>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <menu+0x1cd4>)
 8002e68:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002e6a:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <menu+0x1cd4>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d902      	bls.n	8002e78 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002e72:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <menu+0x1cd4>)
 8002e74:	2205      	movs	r2, #5
 8002e76:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002e78:	f001 fdd2 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	482d      	ldr	r0, [pc, #180]	; (8002f34 <menu+0x1cac>)
 8002e80:	f006 fa1e 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10d      	bne.n	8002ea6 <menu+0x1c1e>
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <menu+0x1cb0>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f083 0301 	eor.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002e98:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <menu+0x1cd4>)
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <menu+0x1cb4>)
 8002e9e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <menu+0x1cbc>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002ea6:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <menu+0x1cc0>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	f040 80bc 	bne.w	8003028 <menu+0x1da0>
		if(dilSecim == 0) {
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <menu+0x1ca0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <menu+0x1ce0>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f004 fed9 	bl	8007c74 <lcd_print>
 8002ec2:	e008      	b.n	8002ed6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <menu+0x1ca0>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d104      	bne.n	8002ed6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <menu+0x1ce4>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f004 fecf 	bl	8007c74 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002ed6:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <menu+0x1ce8>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d113      	bne.n	8002f06 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <menu+0x1ca0>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002ee6:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <menu+0x1ca4>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	2002      	movs	r0, #2
 8002eec:	f004 fec2 	bl	8007c74 <lcd_print>
 8002ef0:	e04b      	b.n	8002f8a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <menu+0x1ca0>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d147      	bne.n	8002f8a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002efa:	4a0d      	ldr	r2, [pc, #52]	; (8002f30 <menu+0x1ca8>)
 8002efc:	2101      	movs	r1, #1
 8002efe:	2002      	movs	r0, #2
 8002f00:	f004 feb8 	bl	8007c74 <lcd_print>
 8002f04:	e041      	b.n	8002f8a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <menu+0x1ce8>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d13d      	bne.n	8002f8a <menu+0x1d02>
			if(dilSecim == 0) {
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <menu+0x1ca0>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d130      	bne.n	8002f78 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002f16:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <menu+0x1cec>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2002      	movs	r0, #2
 8002f1c:	f004 feaa 	bl	8007c74 <lcd_print>
 8002f20:	e033      	b.n	8002f8a <menu+0x1d02>
 8002f22:	bf00      	nop
 8002f24:	20000235 	.word	0x20000235
 8002f28:	20000249 	.word	0x20000249
 8002f2c:	0800d2cc 	.word	0x0800d2cc
 8002f30:	0800d2e0 	.word	0x0800d2e0
 8002f34:	40010800 	.word	0x40010800
 8002f38:	20000257 	.word	0x20000257
 8002f3c:	2000012c 	.word	0x2000012c
 8002f40:	2000022e 	.word	0x2000022e
 8002f44:	20000254 	.word	0x20000254
 8002f48:	20000228 	.word	0x20000228
 8002f4c:	0800d66c 	.word	0x0800d66c
 8002f50:	0800d530 	.word	0x0800d530
 8002f54:	0800d680 	.word	0x0800d680
 8002f58:	0800d554 	.word	0x0800d554
 8002f5c:	20000243 	.word	0x20000243
 8002f60:	2000019c 	.word	0x2000019c
 8002f64:	20000233 	.word	0x20000233
 8002f68:	0800d694 	.word	0x0800d694
 8002f6c:	0800d6a8 	.word	0x0800d6a8
 8002f70:	20000236 	.word	0x20000236
 8002f74:	0800d32c 	.word	0x0800d32c
			} else if(dilSecim == 1) {
 8002f78:	4b99      	ldr	r3, [pc, #612]	; (80031e0 <menu+0x1f58>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d104      	bne.n	8002f8a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002f80:	4a98      	ldr	r2, [pc, #608]	; (80031e4 <menu+0x1f5c>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	2002      	movs	r0, #2
 8002f86:	f004 fe75 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4896      	ldr	r0, [pc, #600]	; (80031e8 <menu+0x1f60>)
 8002f8e:	f006 f997 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d115      	bne.n	8002fc4 <menu+0x1d3c>
 8002f98:	4b94      	ldr	r3, [pc, #592]	; (80031ec <menu+0x1f64>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	f083 0301 	eor.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002fa6:	4b92      	ldr	r3, [pc, #584]	; (80031f0 <menu+0x1f68>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b90      	ldr	r3, [pc, #576]	; (80031f0 <menu+0x1f68>)
 8002fb0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002fb2:	4b8f      	ldr	r3, [pc, #572]	; (80031f0 <menu+0x1f68>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d902      	bls.n	8002fc0 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002fba:	4b8d      	ldr	r3, [pc, #564]	; (80031f0 <menu+0x1f68>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fc0:	f001 fd2e 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc4:	2104      	movs	r1, #4
 8002fc6:	4888      	ldr	r0, [pc, #544]	; (80031e8 <menu+0x1f60>)
 8002fc8:	f006 f97a 	bl	80092c0 <HAL_GPIO_ReadPin>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d115      	bne.n	8002ffe <menu+0x1d76>
 8002fd2:	4b86      	ldr	r3, [pc, #536]	; (80031ec <menu+0x1f64>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002fe0:	4b83      	ldr	r3, [pc, #524]	; (80031f0 <menu+0x1f68>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	4b81      	ldr	r3, [pc, #516]	; (80031f0 <menu+0x1f68>)
 8002fea:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002fec:	4b80      	ldr	r3, [pc, #512]	; (80031f0 <menu+0x1f68>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002ff4:	4b7e      	ldr	r3, [pc, #504]	; (80031f0 <menu+0x1f68>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ffa:	f001 fd11 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ffe:	2108      	movs	r1, #8
 8003000:	4879      	ldr	r0, [pc, #484]	; (80031e8 <menu+0x1f60>)
 8003002:	f006 f95d 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003006:	4603      	mov	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10d      	bne.n	8003028 <menu+0x1da0>
 800300c:	4b77      	ldr	r3, [pc, #476]	; (80031ec <menu+0x1f64>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800301a:	4b75      	ldr	r3, [pc, #468]	; (80031f0 <menu+0x1f68>)
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	4b75      	ldr	r3, [pc, #468]	; (80031f4 <menu+0x1f6c>)
 8003020:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003022:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <menu+0x1f70>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003028:	4b74      	ldr	r3, [pc, #464]	; (80031fc <menu+0x1f74>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b11      	cmp	r3, #17
 800302e:	f040 80c3 	bne.w	80031b8 <menu+0x1f30>
		if(dilSecim == 0) {
 8003032:	4b6b      	ldr	r3, [pc, #428]	; (80031e0 <menu+0x1f58>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800303a:	4a71      	ldr	r2, [pc, #452]	; (8003200 <menu+0x1f78>)
 800303c:	2101      	movs	r1, #1
 800303e:	2001      	movs	r0, #1
 8003040:	f004 fe18 	bl	8007c74 <lcd_print>
 8003044:	e008      	b.n	8003058 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003046:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <menu+0x1f58>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d104      	bne.n	8003058 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800304e:	4a6d      	ldr	r2, [pc, #436]	; (8003204 <menu+0x1f7c>)
 8003050:	2101      	movs	r1, #1
 8003052:	2001      	movs	r0, #1
 8003054:	f004 fe0e 	bl	8007c74 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003058:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <menu+0x1f80>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d113      	bne.n	8003088 <menu+0x1e00>
			if(dilSecim == 0){
 8003060:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <menu+0x1f58>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003068:	4a68      	ldr	r2, [pc, #416]	; (800320c <menu+0x1f84>)
 800306a:	2101      	movs	r1, #1
 800306c:	2002      	movs	r0, #2
 800306e:	f004 fe01 	bl	8007c74 <lcd_print>
 8003072:	e038      	b.n	80030e6 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003074:	4b5a      	ldr	r3, [pc, #360]	; (80031e0 <menu+0x1f58>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d134      	bne.n	80030e6 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 800307c:	4a64      	ldr	r2, [pc, #400]	; (8003210 <menu+0x1f88>)
 800307e:	2101      	movs	r1, #1
 8003080:	2002      	movs	r0, #2
 8003082:	f004 fdf7 	bl	8007c74 <lcd_print>
 8003086:	e02e      	b.n	80030e6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003088:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <menu+0x1f80>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d113      	bne.n	80030b8 <menu+0x1e30>
			if(dilSecim == 0){
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <menu+0x1f58>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003098:	4a5e      	ldr	r2, [pc, #376]	; (8003214 <menu+0x1f8c>)
 800309a:	2101      	movs	r1, #1
 800309c:	2002      	movs	r0, #2
 800309e:	f004 fde9 	bl	8007c74 <lcd_print>
 80030a2:	e020      	b.n	80030e6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80030a4:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <menu+0x1f58>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d11c      	bne.n	80030e6 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80030ac:	4a5a      	ldr	r2, [pc, #360]	; (8003218 <menu+0x1f90>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	2002      	movs	r0, #2
 80030b2:	f004 fddf 	bl	8007c74 <lcd_print>
 80030b6:	e016      	b.n	80030e6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <menu+0x1f80>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d112      	bne.n	80030e6 <menu+0x1e5e>
			if(dilSecim == 0) {
 80030c0:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <menu+0x1f58>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80030c8:	4a54      	ldr	r2, [pc, #336]	; (800321c <menu+0x1f94>)
 80030ca:	2101      	movs	r1, #1
 80030cc:	2002      	movs	r0, #2
 80030ce:	f004 fdd1 	bl	8007c74 <lcd_print>
 80030d2:	e008      	b.n	80030e6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <menu+0x1f58>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d104      	bne.n	80030e6 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80030dc:	4a50      	ldr	r2, [pc, #320]	; (8003220 <menu+0x1f98>)
 80030de:	2101      	movs	r1, #1
 80030e0:	2002      	movs	r0, #2
 80030e2:	f004 fdc7 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030e6:	2102      	movs	r1, #2
 80030e8:	483f      	ldr	r0, [pc, #252]	; (80031e8 <menu+0x1f60>)
 80030ea:	f006 f8e9 	bl	80092c0 <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d115      	bne.n	8003120 <menu+0x1e98>
 80030f4:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <menu+0x1f64>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <menu+0x1f80>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <menu+0x1f80>)
 800310c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800310e:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <menu+0x1f80>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d902      	bls.n	800311c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003116:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <menu+0x1f80>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800311c:	f001 fc80 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003120:	2104      	movs	r1, #4
 8003122:	4831      	ldr	r0, [pc, #196]	; (80031e8 <menu+0x1f60>)
 8003124:	f006 f8cc 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d115      	bne.n	800315a <menu+0x1ed2>
 800312e:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <menu+0x1f64>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <menu+0x1f80>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3b01      	subs	r3, #1
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b30      	ldr	r3, [pc, #192]	; (8003208 <menu+0x1f80>)
 8003146:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <menu+0x1f80>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b03      	cmp	r3, #3
 800314e:	d902      	bls.n	8003156 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <menu+0x1f80>)
 8003152:	2202      	movs	r2, #2
 8003154:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003156:	f001 fc63 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800315a:	2108      	movs	r1, #8
 800315c:	4822      	ldr	r0, [pc, #136]	; (80031e8 <menu+0x1f60>)
 800315e:	f006 f8af 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d127      	bne.n	80031b8 <menu+0x1f30>
 8003168:	4b20      	ldr	r3, [pc, #128]	; (80031ec <menu+0x1f64>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d020      	beq.n	80031b8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <menu+0x1f80>)
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <menu+0x1f6c>)
 800317c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <menu+0x1f80>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d003      	beq.n	800318e <menu+0x1f06>
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <menu+0x1f80>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d106      	bne.n	800319c <menu+0x1f14>
				calismaSekli = 0;
 800318e:	4b25      	ldr	r3, [pc, #148]	; (8003224 <menu+0x1f9c>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <menu+0x1f9c>)
 8003196:	781a      	ldrb	r2, [r3, #0]
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <menu+0x1f6c>)
 800319a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <menu+0x1f80>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80031a4:	4b20      	ldr	r3, [pc, #128]	; (8003228 <menu+0x1fa0>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <menu+0x1fa0>)
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <menu+0x1f6c>)
 80031b0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <menu+0x1f70>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80031b8:	4b10      	ldr	r3, [pc, #64]	; (80031fc <menu+0x1f74>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b12      	cmp	r3, #18
 80031be:	f040 80d5 	bne.w	800336c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <menu+0x1f80>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d13c      	bne.n	8003244 <menu+0x1fbc>
			if(dilSecim == 0) {
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <menu+0x1f58>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d12e      	bne.n	8003230 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80031d2:	4a16      	ldr	r2, [pc, #88]	; (800322c <menu+0x1fa4>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	2001      	movs	r0, #1
 80031d8:	f004 fd4c 	bl	8007c74 <lcd_print>
 80031dc:	e048      	b.n	8003270 <menu+0x1fe8>
 80031de:	bf00      	nop
 80031e0:	20000249 	.word	0x20000249
 80031e4:	0800d340 	.word	0x0800d340
 80031e8:	40010800 	.word	0x40010800
 80031ec:	20000257 	.word	0x20000257
 80031f0:	20000236 	.word	0x20000236
 80031f4:	2000012c 	.word	0x2000012c
 80031f8:	20000254 	.word	0x20000254
 80031fc:	20000228 	.word	0x20000228
 8003200:	0800d6bc 	.word	0x0800d6bc
 8003204:	0800d6d0 	.word	0x0800d6d0
 8003208:	20000237 	.word	0x20000237
 800320c:	0800d6e4 	.word	0x0800d6e4
 8003210:	0800d6f4 	.word	0x0800d6f4
 8003214:	0800d704 	.word	0x0800d704
 8003218:	0800d714 	.word	0x0800d714
 800321c:	0800d2cc 	.word	0x0800d2cc
 8003220:	0800d2e0 	.word	0x0800d2e0
 8003224:	20000229 	.word	0x20000229
 8003228:	2000023a 	.word	0x2000023a
 800322c:	0800d724 	.word	0x0800d724
			} else if(dilSecim == 1) {
 8003230:	4b7b      	ldr	r3, [pc, #492]	; (8003420 <menu+0x2198>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d11b      	bne.n	8003270 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003238:	4a7a      	ldr	r2, [pc, #488]	; (8003424 <menu+0x219c>)
 800323a:	2101      	movs	r1, #1
 800323c:	2001      	movs	r0, #1
 800323e:	f004 fd19 	bl	8007c74 <lcd_print>
 8003242:	e015      	b.n	8003270 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003244:	4b78      	ldr	r3, [pc, #480]	; (8003428 <menu+0x21a0>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d111      	bne.n	8003270 <menu+0x1fe8>
			if(dilSecim == 0){
 800324c:	4b74      	ldr	r3, [pc, #464]	; (8003420 <menu+0x2198>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003254:	4a75      	ldr	r2, [pc, #468]	; (800342c <menu+0x21a4>)
 8003256:	2101      	movs	r1, #1
 8003258:	2001      	movs	r0, #1
 800325a:	f004 fd0b 	bl	8007c74 <lcd_print>
			}
			if(dilSecim == 1){
 800325e:	4b70      	ldr	r3, [pc, #448]	; (8003420 <menu+0x2198>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d104      	bne.n	8003270 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003266:	4a72      	ldr	r2, [pc, #456]	; (8003430 <menu+0x21a8>)
 8003268:	2101      	movs	r1, #1
 800326a:	2001      	movs	r0, #1
 800326c:	f004 fd02 	bl	8007c74 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003270:	4b70      	ldr	r3, [pc, #448]	; (8003434 <menu+0x21ac>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d113      	bne.n	80032a0 <menu+0x2018>
			if(dilSecim == 0) {
 8003278:	4b69      	ldr	r3, [pc, #420]	; (8003420 <menu+0x2198>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003280:	4a6d      	ldr	r2, [pc, #436]	; (8003438 <menu+0x21b0>)
 8003282:	2101      	movs	r1, #1
 8003284:	2002      	movs	r0, #2
 8003286:	f004 fcf5 	bl	8007c74 <lcd_print>
 800328a:	e020      	b.n	80032ce <menu+0x2046>
			} else if(dilSecim == 1){
 800328c:	4b64      	ldr	r3, [pc, #400]	; (8003420 <menu+0x2198>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d11c      	bne.n	80032ce <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003294:	4a69      	ldr	r2, [pc, #420]	; (800343c <menu+0x21b4>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f004 fceb 	bl	8007c74 <lcd_print>
 800329e:	e016      	b.n	80032ce <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80032a0:	4b64      	ldr	r3, [pc, #400]	; (8003434 <menu+0x21ac>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d112      	bne.n	80032ce <menu+0x2046>
			if(dilSecim == 0){
 80032a8:	4b5d      	ldr	r3, [pc, #372]	; (8003420 <menu+0x2198>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80032b0:	4a63      	ldr	r2, [pc, #396]	; (8003440 <menu+0x21b8>)
 80032b2:	2101      	movs	r1, #1
 80032b4:	2002      	movs	r0, #2
 80032b6:	f004 fcdd 	bl	8007c74 <lcd_print>
 80032ba:	e008      	b.n	80032ce <menu+0x2046>
			} else if(dilSecim == 1){
 80032bc:	4b58      	ldr	r3, [pc, #352]	; (8003420 <menu+0x2198>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d104      	bne.n	80032ce <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80032c4:	4a5f      	ldr	r2, [pc, #380]	; (8003444 <menu+0x21bc>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	2002      	movs	r0, #2
 80032ca:	f004 fcd3 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ce:	2102      	movs	r1, #2
 80032d0:	485d      	ldr	r0, [pc, #372]	; (8003448 <menu+0x21c0>)
 80032d2:	f005 fff5 	bl	80092c0 <HAL_GPIO_ReadPin>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d115      	bne.n	8003308 <menu+0x2080>
 80032dc:	4b5b      	ldr	r3, [pc, #364]	; (800344c <menu+0x21c4>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	f083 0301 	eor.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00e      	beq.n	8003308 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80032ea:	4b52      	ldr	r3, [pc, #328]	; (8003434 <menu+0x21ac>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4b50      	ldr	r3, [pc, #320]	; (8003434 <menu+0x21ac>)
 80032f4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80032f6:	4b4f      	ldr	r3, [pc, #316]	; (8003434 <menu+0x21ac>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d902      	bls.n	8003304 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80032fe:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <menu+0x21ac>)
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003304:	f001 fb8c 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003308:	2104      	movs	r1, #4
 800330a:	484f      	ldr	r0, [pc, #316]	; (8003448 <menu+0x21c0>)
 800330c:	f005 ffd8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d115      	bne.n	8003342 <menu+0x20ba>
 8003316:	4b4d      	ldr	r3, [pc, #308]	; (800344c <menu+0x21c4>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003324:	4b43      	ldr	r3, [pc, #268]	; (8003434 <menu+0x21ac>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3b01      	subs	r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b41      	ldr	r3, [pc, #260]	; (8003434 <menu+0x21ac>)
 800332e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003330:	4b40      	ldr	r3, [pc, #256]	; (8003434 <menu+0x21ac>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003338:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <menu+0x21ac>)
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800333e:	f001 fb6f 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003342:	2108      	movs	r1, #8
 8003344:	4840      	ldr	r0, [pc, #256]	; (8003448 <menu+0x21c0>)
 8003346:	f005 ffbb 	bl	80092c0 <HAL_GPIO_ReadPin>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d10d      	bne.n	800336c <menu+0x20e4>
 8003350:	4b3e      	ldr	r3, [pc, #248]	; (800344c <menu+0x21c4>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800335e:	4b35      	ldr	r3, [pc, #212]	; (8003434 <menu+0x21ac>)
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <menu+0x21c8>)
 8003364:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <menu+0x21cc>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800336c:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <menu+0x21d0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b13      	cmp	r3, #19
 8003372:	f040 80d5 	bne.w	8003520 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003376:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <menu+0x21a0>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d113      	bne.n	80033a6 <menu+0x211e>
			if(dilSecim == 0) {
 800337e:	4b28      	ldr	r3, [pc, #160]	; (8003420 <menu+0x2198>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003386:	4a35      	ldr	r2, [pc, #212]	; (800345c <menu+0x21d4>)
 8003388:	2101      	movs	r1, #1
 800338a:	2001      	movs	r0, #1
 800338c:	f004 fc72 	bl	8007c74 <lcd_print>
 8003390:	e01f      	b.n	80033d2 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <menu+0x2198>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d11b      	bne.n	80033d2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800339a:	4a31      	ldr	r2, [pc, #196]	; (8003460 <menu+0x21d8>)
 800339c:	2101      	movs	r1, #1
 800339e:	2001      	movs	r0, #1
 80033a0:	f004 fc68 	bl	8007c74 <lcd_print>
 80033a4:	e015      	b.n	80033d2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <menu+0x21a0>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d111      	bne.n	80033d2 <menu+0x214a>
			if(dilSecim == 0) {
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <menu+0x2198>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80033b6:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <menu+0x21dc>)
 80033b8:	2101      	movs	r1, #1
 80033ba:	2001      	movs	r0, #1
 80033bc:	f004 fc5a 	bl	8007c74 <lcd_print>
			}
			if(dilSecim == 1) {
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <menu+0x2198>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d104      	bne.n	80033d2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80033c8:	4a27      	ldr	r2, [pc, #156]	; (8003468 <menu+0x21e0>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2001      	movs	r0, #1
 80033ce:	f004 fc51 	bl	8007c74 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <menu+0x21e4>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d113      	bne.n	8003402 <menu+0x217a>
			if(dilSecim == 0) {
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <menu+0x2198>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <menu+0x21b0>)
 80033e4:	2101      	movs	r1, #1
 80033e6:	2002      	movs	r0, #2
 80033e8:	f004 fc44 	bl	8007c74 <lcd_print>
 80033ec:	e049      	b.n	8003482 <menu+0x21fa>
			} else if(dilSecim == 1) {
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <menu+0x2198>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d145      	bne.n	8003482 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80033f6:	4a11      	ldr	r2, [pc, #68]	; (800343c <menu+0x21b4>)
 80033f8:	2101      	movs	r1, #1
 80033fa:	2002      	movs	r0, #2
 80033fc:	f004 fc3a 	bl	8007c74 <lcd_print>
 8003400:	e03f      	b.n	8003482 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <menu+0x21e4>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d13b      	bne.n	8003482 <menu+0x21fa>
			if(dilSecim == 0) {
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <menu+0x2198>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d12e      	bne.n	8003470 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <menu+0x21b8>)
 8003414:	2101      	movs	r1, #1
 8003416:	2002      	movs	r0, #2
 8003418:	f004 fc2c 	bl	8007c74 <lcd_print>
 800341c:	e031      	b.n	8003482 <menu+0x21fa>
 800341e:	bf00      	nop
 8003420:	20000249 	.word	0x20000249
 8003424:	0800d738 	.word	0x0800d738
 8003428:	20000237 	.word	0x20000237
 800342c:	0800d748 	.word	0x0800d748
 8003430:	0800d75c 	.word	0x0800d75c
 8003434:	20000238 	.word	0x20000238
 8003438:	0800d2cc 	.word	0x0800d2cc
 800343c:	0800d2e0 	.word	0x0800d2e0
 8003440:	0800d32c 	.word	0x0800d32c
 8003444:	0800d340 	.word	0x0800d340
 8003448:	40010800 	.word	0x40010800
 800344c:	20000257 	.word	0x20000257
 8003450:	2000012c 	.word	0x2000012c
 8003454:	20000254 	.word	0x20000254
 8003458:	20000228 	.word	0x20000228
 800345c:	0800d770 	.word	0x0800d770
 8003460:	0800d784 	.word	0x0800d784
 8003464:	0800d798 	.word	0x0800d798
 8003468:	0800d7ac 	.word	0x0800d7ac
 800346c:	20000239 	.word	0x20000239
			} else if(dilSecim == 1) {
 8003470:	4b90      	ldr	r3, [pc, #576]	; (80036b4 <menu+0x242c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d104      	bne.n	8003482 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003478:	4a8f      	ldr	r2, [pc, #572]	; (80036b8 <menu+0x2430>)
 800347a:	2101      	movs	r1, #1
 800347c:	2002      	movs	r0, #2
 800347e:	f004 fbf9 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003482:	2102      	movs	r1, #2
 8003484:	488d      	ldr	r0, [pc, #564]	; (80036bc <menu+0x2434>)
 8003486:	f005 ff1b 	bl	80092c0 <HAL_GPIO_ReadPin>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d115      	bne.n	80034bc <menu+0x2234>
 8003490:	4b8b      	ldr	r3, [pc, #556]	; (80036c0 <menu+0x2438>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f083 0301 	eor.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800349e:	4b89      	ldr	r3, [pc, #548]	; (80036c4 <menu+0x243c>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	3301      	adds	r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b87      	ldr	r3, [pc, #540]	; (80036c4 <menu+0x243c>)
 80034a8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80034aa:	4b86      	ldr	r3, [pc, #536]	; (80036c4 <menu+0x243c>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d902      	bls.n	80034b8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80034b2:	4b84      	ldr	r3, [pc, #528]	; (80036c4 <menu+0x243c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034b8:	f001 fab2 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034bc:	2104      	movs	r1, #4
 80034be:	487f      	ldr	r0, [pc, #508]	; (80036bc <menu+0x2434>)
 80034c0:	f005 fefe 	bl	80092c0 <HAL_GPIO_ReadPin>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d115      	bne.n	80034f6 <menu+0x226e>
 80034ca:	4b7d      	ldr	r3, [pc, #500]	; (80036c0 <menu+0x2438>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f083 0301 	eor.w	r3, r3, #1
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80034d8:	4b7a      	ldr	r3, [pc, #488]	; (80036c4 <menu+0x243c>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b78      	ldr	r3, [pc, #480]	; (80036c4 <menu+0x243c>)
 80034e2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80034e4:	4b77      	ldr	r3, [pc, #476]	; (80036c4 <menu+0x243c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80034ec:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <menu+0x243c>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034f2:	f001 fa95 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034f6:	2108      	movs	r1, #8
 80034f8:	4870      	ldr	r0, [pc, #448]	; (80036bc <menu+0x2434>)
 80034fa:	f005 fee1 	bl	80092c0 <HAL_GPIO_ReadPin>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10d      	bne.n	8003520 <menu+0x2298>
 8003504:	4b6e      	ldr	r3, [pc, #440]	; (80036c0 <menu+0x2438>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f083 0301 	eor.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <menu+0x243c>)
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	4b6c      	ldr	r3, [pc, #432]	; (80036c8 <menu+0x2440>)
 8003518:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800351a:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <menu+0x2444>)
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003520:	4b6b      	ldr	r3, [pc, #428]	; (80036d0 <menu+0x2448>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b14      	cmp	r3, #20
 8003526:	f040 80b5 	bne.w	8003694 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800352a:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <menu+0x244c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d113      	bne.n	800355a <menu+0x22d2>
			if(dilSecim == 0) {
 8003532:	4b60      	ldr	r3, [pc, #384]	; (80036b4 <menu+0x242c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800353a:	4a67      	ldr	r2, [pc, #412]	; (80036d8 <menu+0x2450>)
 800353c:	2101      	movs	r1, #1
 800353e:	2001      	movs	r0, #1
 8003540:	f004 fb98 	bl	8007c74 <lcd_print>
 8003544:	e020      	b.n	8003588 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003546:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <menu+0x242c>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d11c      	bne.n	8003588 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800354e:	4a63      	ldr	r2, [pc, #396]	; (80036dc <menu+0x2454>)
 8003550:	2101      	movs	r1, #1
 8003552:	2001      	movs	r0, #1
 8003554:	f004 fb8e 	bl	8007c74 <lcd_print>
 8003558:	e016      	b.n	8003588 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800355a:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <menu+0x244c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d112      	bne.n	8003588 <menu+0x2300>
			if(dilSecim == 0) {
 8003562:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <menu+0x242c>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800356a:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <menu+0x2458>)
 800356c:	2101      	movs	r1, #1
 800356e:	2001      	movs	r0, #1
 8003570:	f004 fb80 	bl	8007c74 <lcd_print>
 8003574:	e008      	b.n	8003588 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003576:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <menu+0x242c>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d104      	bne.n	8003588 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800357e:	4a59      	ldr	r2, [pc, #356]	; (80036e4 <menu+0x245c>)
 8003580:	2101      	movs	r1, #1
 8003582:	2001      	movs	r0, #1
 8003584:	f004 fb76 	bl	8007c74 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003588:	4b57      	ldr	r3, [pc, #348]	; (80036e8 <menu+0x2460>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d113      	bne.n	80035b8 <menu+0x2330>
			if(dilSecim == 0) {
 8003590:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <menu+0x242c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003598:	4a54      	ldr	r2, [pc, #336]	; (80036ec <menu+0x2464>)
 800359a:	2101      	movs	r1, #1
 800359c:	2002      	movs	r0, #2
 800359e:	f004 fb69 	bl	8007c74 <lcd_print>
 80035a2:	e020      	b.n	80035e6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <menu+0x242c>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d11c      	bne.n	80035e6 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80035ac:	4a50      	ldr	r2, [pc, #320]	; (80036f0 <menu+0x2468>)
 80035ae:	2101      	movs	r1, #1
 80035b0:	2002      	movs	r0, #2
 80035b2:	f004 fb5f 	bl	8007c74 <lcd_print>
 80035b6:	e016      	b.n	80035e6 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <menu+0x2460>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d112      	bne.n	80035e6 <menu+0x235e>
			if(dilSecim == 0) {
 80035c0:	4b3c      	ldr	r3, [pc, #240]	; (80036b4 <menu+0x242c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80035c8:	4a4a      	ldr	r2, [pc, #296]	; (80036f4 <menu+0x246c>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	2002      	movs	r0, #2
 80035ce:	f004 fb51 	bl	8007c74 <lcd_print>
 80035d2:	e008      	b.n	80035e6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80035d4:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <menu+0x242c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d104      	bne.n	80035e6 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80035dc:	4a46      	ldr	r2, [pc, #280]	; (80036f8 <menu+0x2470>)
 80035de:	2101      	movs	r1, #1
 80035e0:	2002      	movs	r0, #2
 80035e2:	f004 fb47 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80035e6:	2102      	movs	r1, #2
 80035e8:	4834      	ldr	r0, [pc, #208]	; (80036bc <menu+0x2434>)
 80035ea:	f005 fe69 	bl	80092c0 <HAL_GPIO_ReadPin>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d119      	bne.n	8003628 <menu+0x23a0>
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <menu+0x2438>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f083 0301 	eor.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d012      	beq.n	8003628 <menu+0x23a0>
 8003602:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <menu+0x244c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d10e      	bne.n	8003628 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800360a:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <menu+0x2460>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <menu+0x2460>)
 8003614:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <menu+0x2460>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d902      	bls.n	8003624 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <menu+0x2460>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003624:	f001 f9fc 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003628:	2104      	movs	r1, #4
 800362a:	4824      	ldr	r0, [pc, #144]	; (80036bc <menu+0x2434>)
 800362c:	f005 fe48 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d119      	bne.n	800366a <menu+0x23e2>
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <menu+0x2438>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	f083 0301 	eor.w	r3, r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d012      	beq.n	800366a <menu+0x23e2>
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <menu+0x244c>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d10e      	bne.n	800366a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800364c:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <menu+0x2460>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	3b01      	subs	r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <menu+0x2460>)
 8003656:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <menu+0x2460>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <menu+0x2460>)
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003666:	f001 f9db 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800366a:	2108      	movs	r1, #8
 800366c:	4813      	ldr	r0, [pc, #76]	; (80036bc <menu+0x2434>)
 800366e:	f005 fe27 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10d      	bne.n	8003694 <menu+0x240c>
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <menu+0x2438>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <menu+0x2460>)
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <menu+0x2440>)
 800368c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <menu+0x2444>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003694:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <menu+0x2448>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b15      	cmp	r3, #21
 800369a:	f040 80c2 	bne.w	8003822 <menu+0x259a>
		if(dilSecim == 0) {
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <menu+0x242c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d12c      	bne.n	8003700 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80036a6:	4a15      	ldr	r2, [pc, #84]	; (80036fc <menu+0x2474>)
 80036a8:	2101      	movs	r1, #1
 80036aa:	2001      	movs	r0, #1
 80036ac:	f004 fae2 	bl	8007c74 <lcd_print>
 80036b0:	e02f      	b.n	8003712 <menu+0x248a>
 80036b2:	bf00      	nop
 80036b4:	20000249 	.word	0x20000249
 80036b8:	0800d340 	.word	0x0800d340
 80036bc:	40010800 	.word	0x40010800
 80036c0:	20000257 	.word	0x20000257
 80036c4:	20000239 	.word	0x20000239
 80036c8:	2000012c 	.word	0x2000012c
 80036cc:	20000254 	.word	0x20000254
 80036d0:	20000228 	.word	0x20000228
 80036d4:	20000237 	.word	0x20000237
 80036d8:	0800d7c0 	.word	0x0800d7c0
 80036dc:	0800d7d4 	.word	0x0800d7d4
 80036e0:	0800d7e8 	.word	0x0800d7e8
 80036e4:	0800d7fc 	.word	0x0800d7fc
 80036e8:	2000023a 	.word	0x2000023a
 80036ec:	0800d810 	.word	0x0800d810
 80036f0:	0800d824 	.word	0x0800d824
 80036f4:	0800d834 	.word	0x0800d834
 80036f8:	0800d848 	.word	0x0800d848
 80036fc:	0800d858 	.word	0x0800d858
		} else if(dilSecim == 1) {
 8003700:	4b9c      	ldr	r3, [pc, #624]	; (8003974 <menu+0x26ec>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d104      	bne.n	8003712 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003708:	4a9b      	ldr	r2, [pc, #620]	; (8003978 <menu+0x26f0>)
 800370a:	2101      	movs	r1, #1
 800370c:	2001      	movs	r0, #1
 800370e:	f004 fab1 	bl	8007c74 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003712:	4b9a      	ldr	r3, [pc, #616]	; (800397c <menu+0x26f4>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d112      	bne.n	8003740 <menu+0x24b8>
			if(dilSecim == 0) {
 800371a:	4b96      	ldr	r3, [pc, #600]	; (8003974 <menu+0x26ec>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003722:	4a97      	ldr	r2, [pc, #604]	; (8003980 <menu+0x26f8>)
 8003724:	2101      	movs	r1, #1
 8003726:	2002      	movs	r0, #2
 8003728:	f004 faa4 	bl	8007c74 <lcd_print>
			}
			if(dilSecim == 1) {
 800372c:	4b91      	ldr	r3, [pc, #580]	; (8003974 <menu+0x26ec>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d11c      	bne.n	800376e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003734:	4a93      	ldr	r2, [pc, #588]	; (8003984 <menu+0x26fc>)
 8003736:	2101      	movs	r1, #1
 8003738:	2002      	movs	r0, #2
 800373a:	f004 fa9b 	bl	8007c74 <lcd_print>
 800373e:	e016      	b.n	800376e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003740:	4b8e      	ldr	r3, [pc, #568]	; (800397c <menu+0x26f4>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d112      	bne.n	800376e <menu+0x24e6>
			if(dilSecim == 0) {
 8003748:	4b8a      	ldr	r3, [pc, #552]	; (8003974 <menu+0x26ec>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003750:	4a8d      	ldr	r2, [pc, #564]	; (8003988 <menu+0x2700>)
 8003752:	2101      	movs	r1, #1
 8003754:	2002      	movs	r0, #2
 8003756:	f004 fa8d 	bl	8007c74 <lcd_print>
 800375a:	e008      	b.n	800376e <menu+0x24e6>
			} else if(dilSecim == 1) {
 800375c:	4b85      	ldr	r3, [pc, #532]	; (8003974 <menu+0x26ec>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d104      	bne.n	800376e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003764:	4a89      	ldr	r2, [pc, #548]	; (800398c <menu+0x2704>)
 8003766:	2101      	movs	r1, #1
 8003768:	2002      	movs	r0, #2
 800376a:	f004 fa83 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800376e:	2102      	movs	r1, #2
 8003770:	4887      	ldr	r0, [pc, #540]	; (8003990 <menu+0x2708>)
 8003772:	f005 fda5 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003776:	4603      	mov	r3, r0
 8003778:	2b01      	cmp	r3, #1
 800377a:	d115      	bne.n	80037a8 <menu+0x2520>
 800377c:	4b85      	ldr	r3, [pc, #532]	; (8003994 <menu+0x270c>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	f083 0301 	eor.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00e      	beq.n	80037a8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800378a:	4b7c      	ldr	r3, [pc, #496]	; (800397c <menu+0x26f4>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4b7a      	ldr	r3, [pc, #488]	; (800397c <menu+0x26f4>)
 8003794:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003796:	4b79      	ldr	r3, [pc, #484]	; (800397c <menu+0x26f4>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d902      	bls.n	80037a4 <menu+0x251c>
				platformSilindirTipi = 0;
 800379e:	4b77      	ldr	r3, [pc, #476]	; (800397c <menu+0x26f4>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037a4:	f001 f93c 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037a8:	2104      	movs	r1, #4
 80037aa:	4879      	ldr	r0, [pc, #484]	; (8003990 <menu+0x2708>)
 80037ac:	f005 fd88 	bl	80092c0 <HAL_GPIO_ReadPin>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d115      	bne.n	80037e2 <menu+0x255a>
 80037b6:	4b77      	ldr	r3, [pc, #476]	; (8003994 <menu+0x270c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	f083 0301 	eor.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00e      	beq.n	80037e2 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80037c4:	4b6d      	ldr	r3, [pc, #436]	; (800397c <menu+0x26f4>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	4b6b      	ldr	r3, [pc, #428]	; (800397c <menu+0x26f4>)
 80037ce:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80037d0:	4b6a      	ldr	r3, [pc, #424]	; (800397c <menu+0x26f4>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <menu+0x2556>
		   		platformSilindirTipi = 1;
 80037d8:	4b68      	ldr	r3, [pc, #416]	; (800397c <menu+0x26f4>)
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037de:	f001 f91f 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037e2:	2108      	movs	r1, #8
 80037e4:	486a      	ldr	r0, [pc, #424]	; (8003990 <menu+0x2708>)
 80037e6:	f005 fd6b 	bl	80092c0 <HAL_GPIO_ReadPin>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d118      	bne.n	8003822 <menu+0x259a>
 80037f0:	4b68      	ldr	r3, [pc, #416]	; (8003994 <menu+0x270c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	f083 0301 	eor.w	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d011      	beq.n	8003822 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <menu+0x26f4>)
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	4b65      	ldr	r3, [pc, #404]	; (8003998 <menu+0x2710>)
 8003804:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003806:	4b5d      	ldr	r3, [pc, #372]	; (800397c <menu+0x26f4>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d106      	bne.n	800381c <menu+0x2594>
				altLimit = 1;
 800380e:	4b63      	ldr	r3, [pc, #396]	; (800399c <menu+0x2714>)
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003814:	4b61      	ldr	r3, [pc, #388]	; (800399c <menu+0x2714>)
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <menu+0x2710>)
 800381a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800381c:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <menu+0x2718>)
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003822:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <menu+0x271c>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b16      	cmp	r3, #22
 8003828:	f040 8081 	bne.w	800392e <menu+0x26a6>
		if(dilSecim == 0) {
 800382c:	4b51      	ldr	r3, [pc, #324]	; (8003974 <menu+0x26ec>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003834:	4a5c      	ldr	r2, [pc, #368]	; (80039a8 <menu+0x2720>)
 8003836:	2101      	movs	r1, #1
 8003838:	2001      	movs	r0, #1
 800383a:	f004 fa1b 	bl	8007c74 <lcd_print>
 800383e:	e008      	b.n	8003852 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003840:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <menu+0x26ec>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d104      	bne.n	8003852 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <menu+0x2724>)
 800384a:	2101      	movs	r1, #1
 800384c:	2001      	movs	r0, #1
 800384e:	f004 fa11 	bl	8007c74 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003852:	4b48      	ldr	r3, [pc, #288]	; (8003974 <menu+0x26ec>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800385a:	4a55      	ldr	r2, [pc, #340]	; (80039b0 <menu+0x2728>)
 800385c:	2101      	movs	r1, #1
 800385e:	2002      	movs	r0, #2
 8003860:	f004 fa08 	bl	8007c74 <lcd_print>
 8003864:	e008      	b.n	8003878 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003866:	4b43      	ldr	r3, [pc, #268]	; (8003974 <menu+0x26ec>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d104      	bne.n	8003878 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800386e:	4a51      	ldr	r2, [pc, #324]	; (80039b4 <menu+0x272c>)
 8003870:	2101      	movs	r1, #1
 8003872:	2002      	movs	r0, #2
 8003874:	f004 f9fe 	bl	8007c74 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003878:	4b4f      	ldr	r3, [pc, #316]	; (80039b8 <menu+0x2730>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	220a      	movs	r2, #10
 800387e:	494f      	ldr	r1, [pc, #316]	; (80039bc <menu+0x2734>)
 8003880:	4618      	mov	r0, r3
 8003882:	f008 fd49 	bl	800c318 <itoa>
		lcd_print(2,16,snum);
 8003886:	4a4d      	ldr	r2, [pc, #308]	; (80039bc <menu+0x2734>)
 8003888:	2110      	movs	r1, #16
 800388a:	2002      	movs	r0, #2
 800388c:	f004 f9f2 	bl	8007c74 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003890:	2102      	movs	r1, #2
 8003892:	483f      	ldr	r0, [pc, #252]	; (8003990 <menu+0x2708>)
 8003894:	f005 fd14 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d115      	bne.n	80038ca <menu+0x2642>
 800389e:	4b3d      	ldr	r3, [pc, #244]	; (8003994 <menu+0x270c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80038ac:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <menu+0x2730>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <menu+0x2730>)
 80038b6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80038b8:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <menu+0x2730>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d902      	bls.n	80038c6 <menu+0x263e>
				yukariValfTmr = 0;
 80038c0:	4b3d      	ldr	r3, [pc, #244]	; (80039b8 <menu+0x2730>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c6:	f001 f8ab 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ca:	2104      	movs	r1, #4
 80038cc:	4830      	ldr	r0, [pc, #192]	; (8003990 <menu+0x2708>)
 80038ce:	f005 fcf7 	bl	80092c0 <HAL_GPIO_ReadPin>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d115      	bne.n	8003904 <menu+0x267c>
 80038d8:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <menu+0x270c>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00e      	beq.n	8003904 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80038e6:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <menu+0x2730>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <menu+0x2730>)
 80038f0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <menu+0x2730>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d902      	bls.n	8003900 <menu+0x2678>
		   		yukariValfTmr = 5;
 80038fa:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <menu+0x2730>)
 80038fc:	2205      	movs	r2, #5
 80038fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003900:	f001 f88e 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003904:	2108      	movs	r1, #8
 8003906:	4822      	ldr	r0, [pc, #136]	; (8003990 <menu+0x2708>)
 8003908:	f005 fcda 	bl	80092c0 <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10d      	bne.n	800392e <menu+0x26a6>
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <menu+0x270c>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <menu+0x2730>)
 8003922:	781a      	ldrb	r2, [r3, #0]
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <menu+0x2710>)
 8003926:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <menu+0x2718>)
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <menu+0x271c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b17      	cmp	r3, #23
 8003934:	f040 80ac 	bne.w	8003a90 <menu+0x2808>
		if(dilSecim == 0) {
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <menu+0x26ec>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003940:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <menu+0x2738>)
 8003942:	2101      	movs	r1, #1
 8003944:	2001      	movs	r0, #1
 8003946:	f004 f995 	bl	8007c74 <lcd_print>
 800394a:	e008      	b.n	800395e <menu+0x26d6>
		} else if(dilSecim == 1) {
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <menu+0x26ec>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d104      	bne.n	800395e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <menu+0x273c>)
 8003956:	2101      	movs	r1, #1
 8003958:	2001      	movs	r0, #1
 800395a:	f004 f98b 	bl	8007c74 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <menu+0x26ec>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d130      	bne.n	80039c8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <menu+0x2728>)
 8003968:	2101      	movs	r1, #1
 800396a:	2002      	movs	r0, #2
 800396c:	f004 f982 	bl	8007c74 <lcd_print>
 8003970:	e033      	b.n	80039da <menu+0x2752>
 8003972:	bf00      	nop
 8003974:	20000249 	.word	0x20000249
 8003978:	0800d86c 	.word	0x0800d86c
 800397c:	2000023b 	.word	0x2000023b
 8003980:	0800d810 	.word	0x0800d810
 8003984:	0800d824 	.word	0x0800d824
 8003988:	0800d834 	.word	0x0800d834
 800398c:	0800d848 	.word	0x0800d848
 8003990:	40010800 	.word	0x40010800
 8003994:	20000257 	.word	0x20000257
 8003998:	2000012c 	.word	0x2000012c
 800399c:	2000022e 	.word	0x2000022e
 80039a0:	20000254 	.word	0x20000254
 80039a4:	20000228 	.word	0x20000228
 80039a8:	0800d87c 	.word	0x0800d87c
 80039ac:	0800d890 	.word	0x0800d890
 80039b0:	0800d530 	.word	0x0800d530
 80039b4:	0800d8a4 	.word	0x0800d8a4
 80039b8:	2000023c 	.word	0x2000023c
 80039bc:	2000019c 	.word	0x2000019c
 80039c0:	0800d8b4 	.word	0x0800d8b4
 80039c4:	0800d8c8 	.word	0x0800d8c8
			} else if(dilSecim == 1) {
 80039c8:	4b98      	ldr	r3, [pc, #608]	; (8003c2c <menu+0x29a4>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d104      	bne.n	80039da <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80039d0:	4a97      	ldr	r2, [pc, #604]	; (8003c30 <menu+0x29a8>)
 80039d2:	2101      	movs	r1, #1
 80039d4:	2002      	movs	r0, #2
 80039d6:	f004 f94d 	bl	8007c74 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80039da:	4b96      	ldr	r3, [pc, #600]	; (8003c34 <menu+0x29ac>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	220a      	movs	r2, #10
 80039e0:	4995      	ldr	r1, [pc, #596]	; (8003c38 <menu+0x29b0>)
 80039e2:	4618      	mov	r0, r3
 80039e4:	f008 fc98 	bl	800c318 <itoa>
		lcd_print(2,16,snum);
 80039e8:	4a93      	ldr	r2, [pc, #588]	; (8003c38 <menu+0x29b0>)
 80039ea:	2110      	movs	r1, #16
 80039ec:	2002      	movs	r0, #2
 80039ee:	f004 f941 	bl	8007c74 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f2:	2102      	movs	r1, #2
 80039f4:	4891      	ldr	r0, [pc, #580]	; (8003c3c <menu+0x29b4>)
 80039f6:	f005 fc63 	bl	80092c0 <HAL_GPIO_ReadPin>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d115      	bne.n	8003a2c <menu+0x27a4>
 8003a00:	4b8f      	ldr	r3, [pc, #572]	; (8003c40 <menu+0x29b8>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	f083 0301 	eor.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00e      	beq.n	8003a2c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003a0e:	4b89      	ldr	r3, [pc, #548]	; (8003c34 <menu+0x29ac>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	3301      	adds	r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b87      	ldr	r3, [pc, #540]	; (8003c34 <menu+0x29ac>)
 8003a18:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003a1a:	4b86      	ldr	r3, [pc, #536]	; (8003c34 <menu+0x29ac>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	d902      	bls.n	8003a28 <menu+0x27a0>
				asagiValfTmr = 0;
 8003a22:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <menu+0x29ac>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a28:	f000 fffa 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a2c:	2104      	movs	r1, #4
 8003a2e:	4883      	ldr	r0, [pc, #524]	; (8003c3c <menu+0x29b4>)
 8003a30:	f005 fc46 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d115      	bne.n	8003a66 <menu+0x27de>
 8003a3a:	4b81      	ldr	r3, [pc, #516]	; (8003c40 <menu+0x29b8>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	f083 0301 	eor.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003a48:	4b7a      	ldr	r3, [pc, #488]	; (8003c34 <menu+0x29ac>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	4b78      	ldr	r3, [pc, #480]	; (8003c34 <menu+0x29ac>)
 8003a52:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003a54:	4b77      	ldr	r3, [pc, #476]	; (8003c34 <menu+0x29ac>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d902      	bls.n	8003a62 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003a5c:	4b75      	ldr	r3, [pc, #468]	; (8003c34 <menu+0x29ac>)
 8003a5e:	2205      	movs	r2, #5
 8003a60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a62:	f000 ffdd 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a66:	2108      	movs	r1, #8
 8003a68:	4874      	ldr	r0, [pc, #464]	; (8003c3c <menu+0x29b4>)
 8003a6a:	f005 fc29 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10d      	bne.n	8003a90 <menu+0x2808>
 8003a74:	4b72      	ldr	r3, [pc, #456]	; (8003c40 <menu+0x29b8>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	f083 0301 	eor.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003a82:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <menu+0x29ac>)
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	4b6f      	ldr	r3, [pc, #444]	; (8003c44 <menu+0x29bc>)
 8003a88:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003a8a:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <menu+0x29c0>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003a90:	4b6e      	ldr	r3, [pc, #440]	; (8003c4c <menu+0x29c4>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b18      	cmp	r3, #24
 8003a96:	f040 809d 	bne.w	8003bd4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <menu+0x29c8>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d113      	bne.n	8003aca <menu+0x2842>
			if(dilSecim == 0) {
 8003aa2:	4b62      	ldr	r3, [pc, #392]	; (8003c2c <menu+0x29a4>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003aaa:	4a6a      	ldr	r2, [pc, #424]	; (8003c54 <menu+0x29cc>)
 8003aac:	2101      	movs	r1, #1
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f004 f8e0 	bl	8007c74 <lcd_print>
 8003ab4:	e020      	b.n	8003af8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	; (8003c2c <menu+0x29a4>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d11c      	bne.n	8003af8 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003abe:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <menu+0x29d0>)
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f004 f8d6 	bl	8007c74 <lcd_print>
 8003ac8:	e016      	b.n	8003af8 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003aca:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <menu+0x29c8>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d112      	bne.n	8003af8 <menu+0x2870>
			if(dilSecim == 0) {
 8003ad2:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <menu+0x29a4>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003ada:	4a60      	ldr	r2, [pc, #384]	; (8003c5c <menu+0x29d4>)
 8003adc:	2101      	movs	r1, #1
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f004 f8c8 	bl	8007c74 <lcd_print>
 8003ae4:	e008      	b.n	8003af8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003ae6:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <menu+0x29a4>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d104      	bne.n	8003af8 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003aee:	4a5c      	ldr	r2, [pc, #368]	; (8003c60 <menu+0x29d8>)
 8003af0:	2101      	movs	r1, #1
 8003af2:	2001      	movs	r0, #1
 8003af4:	f004 f8be 	bl	8007c74 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003af8:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <menu+0x29a4>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b00:	4a58      	ldr	r2, [pc, #352]	; (8003c64 <menu+0x29dc>)
 8003b02:	2101      	movs	r1, #1
 8003b04:	2002      	movs	r0, #2
 8003b06:	f004 f8b5 	bl	8007c74 <lcd_print>
 8003b0a:	e008      	b.n	8003b1e <menu+0x2896>
			} else if(dilSecim == 1) {
 8003b0c:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <menu+0x29a4>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d104      	bne.n	8003b1e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003b14:	4a46      	ldr	r2, [pc, #280]	; (8003c30 <menu+0x29a8>)
 8003b16:	2101      	movs	r1, #1
 8003b18:	2002      	movs	r0, #2
 8003b1a:	f004 f8ab 	bl	8007c74 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003b1e:	4b52      	ldr	r3, [pc, #328]	; (8003c68 <menu+0x29e0>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	220a      	movs	r2, #10
 8003b24:	4944      	ldr	r1, [pc, #272]	; (8003c38 <menu+0x29b0>)
 8003b26:	4618      	mov	r0, r3
 8003b28:	f008 fbf6 	bl	800c318 <itoa>
		lcd_print(2, 16, snum);
 8003b2c:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <menu+0x29b0>)
 8003b2e:	2110      	movs	r1, #16
 8003b30:	2002      	movs	r0, #2
 8003b32:	f004 f89f 	bl	8007c74 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b36:	2102      	movs	r1, #2
 8003b38:	4840      	ldr	r0, [pc, #256]	; (8003c3c <menu+0x29b4>)
 8003b3a:	f005 fbc1 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d115      	bne.n	8003b70 <menu+0x28e8>
 8003b44:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <menu+0x29b8>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	f083 0301 	eor.w	r3, r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00e      	beq.n	8003b70 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003b52:	4b45      	ldr	r3, [pc, #276]	; (8003c68 <menu+0x29e0>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <menu+0x29e0>)
 8003b5c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003b5e:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <menu+0x29e0>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d902      	bls.n	8003b6c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003b66:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <menu+0x29e0>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b6c:	f000 ff58 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b70:	2104      	movs	r1, #4
 8003b72:	4832      	ldr	r0, [pc, #200]	; (8003c3c <menu+0x29b4>)
 8003b74:	f005 fba4 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d115      	bne.n	8003baa <menu+0x2922>
 8003b7e:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <menu+0x29b8>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	f083 0301 	eor.w	r3, r3, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <menu+0x29e0>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <menu+0x29e0>)
 8003b96:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003b98:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <menu+0x29e0>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d902      	bls.n	8003ba6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003ba0:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <menu+0x29e0>)
 8003ba2:	2205      	movs	r2, #5
 8003ba4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ba6:	f000 ff3b 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003baa:	2108      	movs	r1, #8
 8003bac:	4823      	ldr	r0, [pc, #140]	; (8003c3c <menu+0x29b4>)
 8003bae:	f005 fb87 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10d      	bne.n	8003bd4 <menu+0x294c>
 8003bb8:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <menu+0x29b8>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	f083 0301 	eor.w	r3, r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003bc6:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <menu+0x29e0>)
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <menu+0x29bc>)
 8003bcc:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <menu+0x29c0>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <menu+0x29c4>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b19      	cmp	r3, #25
 8003bda:	f040 80c4 	bne.w	8003d66 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <menu+0x29c8>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d113      	bne.n	8003c0e <menu+0x2986>
			if(dilSecim == 0) {
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <menu+0x29a4>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003bee:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <menu+0x29e4>)
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f004 f83e 	bl	8007c74 <lcd_print>
 8003bf8:	e047      	b.n	8003c8a <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <menu+0x29a4>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d143      	bne.n	8003c8a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <menu+0x29e8>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	2001      	movs	r0, #1
 8003c08:	f004 f834 	bl	8007c74 <lcd_print>
 8003c0c:	e03d      	b.n	8003c8a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <menu+0x29c8>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d139      	bne.n	8003c8a <menu+0x2a02>
			if(dilSecim == 0) {
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <menu+0x29a4>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d12c      	bne.n	8003c78 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003c1e:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <menu+0x29ec>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	2001      	movs	r0, #1
 8003c24:	f004 f826 	bl	8007c74 <lcd_print>
 8003c28:	e02f      	b.n	8003c8a <menu+0x2a02>
 8003c2a:	bf00      	nop
 8003c2c:	20000249 	.word	0x20000249
 8003c30:	0800d8a4 	.word	0x0800d8a4
 8003c34:	2000023d 	.word	0x2000023d
 8003c38:	2000019c 	.word	0x2000019c
 8003c3c:	40010800 	.word	0x40010800
 8003c40:	20000257 	.word	0x20000257
 8003c44:	2000012c 	.word	0x2000012c
 8003c48:	20000254 	.word	0x20000254
 8003c4c:	20000228 	.word	0x20000228
 8003c50:	20000237 	.word	0x20000237
 8003c54:	0800d8dc 	.word	0x0800d8dc
 8003c58:	0800d8f0 	.word	0x0800d8f0
 8003c5c:	0800d904 	.word	0x0800d904
 8003c60:	0800d918 	.word	0x0800d918
 8003c64:	0800d530 	.word	0x0800d530
 8003c68:	2000023e 	.word	0x2000023e
 8003c6c:	0800d92c 	.word	0x0800d92c
 8003c70:	0800d940 	.word	0x0800d940
 8003c74:	0800d954 	.word	0x0800d954
			} else if(dilSecim == 1) {
 8003c78:	4b73      	ldr	r3, [pc, #460]	; (8003e48 <menu+0x2bc0>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d104      	bne.n	8003c8a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003c80:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <menu+0x2bc4>)
 8003c82:	2101      	movs	r1, #1
 8003c84:	2001      	movs	r0, #1
 8003c86:	f003 fff5 	bl	8007c74 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003c8a:	4b6f      	ldr	r3, [pc, #444]	; (8003e48 <menu+0x2bc0>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c92:	4a6f      	ldr	r2, [pc, #444]	; (8003e50 <menu+0x2bc8>)
 8003c94:	2101      	movs	r1, #1
 8003c96:	2002      	movs	r0, #2
 8003c98:	f003 ffec 	bl	8007c74 <lcd_print>
 8003c9c:	e008      	b.n	8003cb0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003c9e:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <menu+0x2bc0>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d104      	bne.n	8003cb0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003ca6:	4a6b      	ldr	r2, [pc, #428]	; (8003e54 <menu+0x2bcc>)
 8003ca8:	2101      	movs	r1, #1
 8003caa:	2002      	movs	r0, #2
 8003cac:	f003 ffe2 	bl	8007c74 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003cb0:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <menu+0x2bd0>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	220a      	movs	r2, #10
 8003cb6:	4969      	ldr	r1, [pc, #420]	; (8003e5c <menu+0x2bd4>)
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f008 fb2d 	bl	800c318 <itoa>
		lcd_print(2,16,snum);
 8003cbe:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <menu+0x2bd4>)
 8003cc0:	2110      	movs	r1, #16
 8003cc2:	2002      	movs	r0, #2
 8003cc4:	f003 ffd6 	bl	8007c74 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc8:	2102      	movs	r1, #2
 8003cca:	4865      	ldr	r0, [pc, #404]	; (8003e60 <menu+0x2bd8>)
 8003ccc:	f005 faf8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d115      	bne.n	8003d02 <menu+0x2a7a>
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <menu+0x2bdc>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	f083 0301 	eor.w	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00e      	beq.n	8003d02 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003ce4:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <menu+0x2bd0>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <menu+0x2bd0>)
 8003cee:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <menu+0x2bd0>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d902      	bls.n	8003cfe <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003cf8:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <menu+0x2bd0>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cfe:	f000 fe8f 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d02:	2104      	movs	r1, #4
 8003d04:	4856      	ldr	r0, [pc, #344]	; (8003e60 <menu+0x2bd8>)
 8003d06:	f005 fadb 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d115      	bne.n	8003d3c <menu+0x2ab4>
 8003d10:	4b54      	ldr	r3, [pc, #336]	; (8003e64 <menu+0x2bdc>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f083 0301 	eor.w	r3, r3, #1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00e      	beq.n	8003d3c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003d1e:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <menu+0x2bd0>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <menu+0x2bd0>)
 8003d28:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003d2a:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <menu+0x2bd0>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d902      	bls.n	8003d38 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003d32:	4b49      	ldr	r3, [pc, #292]	; (8003e58 <menu+0x2bd0>)
 8003d34:	2205      	movs	r2, #5
 8003d36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d38:	f000 fe72 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3c:	2108      	movs	r1, #8
 8003d3e:	4848      	ldr	r0, [pc, #288]	; (8003e60 <menu+0x2bd8>)
 8003d40:	f005 fabe 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10d      	bne.n	8003d66 <menu+0x2ade>
 8003d4a:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <menu+0x2bdc>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	f083 0301 	eor.w	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003d58:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <menu+0x2bd0>)
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	4b42      	ldr	r3, [pc, #264]	; (8003e68 <menu+0x2be0>)
 8003d5e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003d60:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <menu+0x2be4>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003d66:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <menu+0x2be8>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b1a      	cmp	r3, #26
 8003d6c:	f040 80ec 	bne.w	8003f48 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003d70:	4b35      	ldr	r3, [pc, #212]	; (8003e48 <menu+0x2bc0>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003d78:	4a3e      	ldr	r2, [pc, #248]	; (8003e74 <menu+0x2bec>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f003 ff79 	bl	8007c74 <lcd_print>
 8003d82:	e008      	b.n	8003d96 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003d84:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <menu+0x2bc0>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d104      	bne.n	8003d96 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003d8c:	4a3a      	ldr	r2, [pc, #232]	; (8003e78 <menu+0x2bf0>)
 8003d8e:	2101      	movs	r1, #1
 8003d90:	2001      	movs	r0, #1
 8003d92:	f003 ff6f 	bl	8007c74 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003d96:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <menu+0x2bf4>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b63      	cmp	r3, #99	; 0x63
 8003d9c:	d91e      	bls.n	8003ddc <menu+0x2b54>
			if(dilSecim == 0) {
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <menu+0x2bc0>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003da6:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <menu+0x2bc8>)
 8003da8:	2101      	movs	r1, #1
 8003daa:	2002      	movs	r0, #2
 8003dac:	f003 ff62 	bl	8007c74 <lcd_print>
			}
			if(dilSecim == 1) {
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <menu+0x2bc0>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d104      	bne.n	8003dc2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <menu+0x2bcc>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f003 ff59 	bl	8007c74 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <menu+0x2bf4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	220a      	movs	r2, #10
 8003dc8:	4924      	ldr	r1, [pc, #144]	; (8003e5c <menu+0x2bd4>)
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f008 faa4 	bl	800c318 <itoa>
			lcd_print(2,14,snum);
 8003dd0:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <menu+0x2bd4>)
 8003dd2:	210e      	movs	r1, #14
 8003dd4:	2002      	movs	r0, #2
 8003dd6:	f003 ff4d 	bl	8007c74 <lcd_print>
 8003dda:	e066      	b.n	8003eaa <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <menu+0x2bf4>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d923      	bls.n	8003e2c <menu+0x2ba4>
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <menu+0x2bf4>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b63      	cmp	r3, #99	; 0x63
 8003dea:	d81f      	bhi.n	8003e2c <menu+0x2ba4>
			if(dilSecim == 0) {
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <menu+0x2bc0>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003df4:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <menu+0x2bc8>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	2002      	movs	r0, #2
 8003dfa:	f003 ff3b 	bl	8007c74 <lcd_print>
 8003dfe:	e008      	b.n	8003e12 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <menu+0x2bc0>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d104      	bne.n	8003e12 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003e08:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <menu+0x2bcc>)
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	2002      	movs	r0, #2
 8003e0e:	f003 ff31 	bl	8007c74 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <menu+0x2bf4>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	220a      	movs	r2, #10
 8003e18:	4910      	ldr	r1, [pc, #64]	; (8003e5c <menu+0x2bd4>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f008 fa7c 	bl	800c318 <itoa>
			lcd_print(2, 15, snum);
 8003e20:	4a0e      	ldr	r2, [pc, #56]	; (8003e5c <menu+0x2bd4>)
 8003e22:	210f      	movs	r1, #15
 8003e24:	2002      	movs	r0, #2
 8003e26:	f003 ff25 	bl	8007c74 <lcd_print>
 8003e2a:	e03e      	b.n	8003eaa <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <menu+0x2bf4>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b09      	cmp	r3, #9
 8003e32:	d83a      	bhi.n	8003eaa <menu+0x2c22>
			if(dilSecim == 0) {
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <menu+0x2bc0>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d121      	bne.n	8003e80 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <menu+0x2bc8>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	2002      	movs	r0, #2
 8003e42:	f003 ff17 	bl	8007c74 <lcd_print>
 8003e46:	e024      	b.n	8003e92 <menu+0x2c0a>
 8003e48:	20000249 	.word	0x20000249
 8003e4c:	0800d968 	.word	0x0800d968
 8003e50:	0800d530 	.word	0x0800d530
 8003e54:	0800d8a4 	.word	0x0800d8a4
 8003e58:	2000023f 	.word	0x2000023f
 8003e5c:	2000019c 	.word	0x2000019c
 8003e60:	40010800 	.word	0x40010800
 8003e64:	20000257 	.word	0x20000257
 8003e68:	2000012c 	.word	0x2000012c
 8003e6c:	20000254 	.word	0x20000254
 8003e70:	20000228 	.word	0x20000228
 8003e74:	0800d97c 	.word	0x0800d97c
 8003e78:	0800d990 	.word	0x0800d990
 8003e7c:	20000240 	.word	0x20000240
			} else if(dilSecim == 1) {
 8003e80:	4b8f      	ldr	r3, [pc, #572]	; (80040c0 <menu+0x2e38>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d104      	bne.n	8003e92 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003e88:	4a8e      	ldr	r2, [pc, #568]	; (80040c4 <menu+0x2e3c>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	f003 fef1 	bl	8007c74 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e92:	4b8d      	ldr	r3, [pc, #564]	; (80040c8 <menu+0x2e40>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	220a      	movs	r2, #10
 8003e98:	498c      	ldr	r1, [pc, #560]	; (80040cc <menu+0x2e44>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f008 fa3c 	bl	800c318 <itoa>
			lcd_print(2, 16, snum);
 8003ea0:	4a8a      	ldr	r2, [pc, #552]	; (80040cc <menu+0x2e44>)
 8003ea2:	2110      	movs	r1, #16
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	f003 fee5 	bl	8007c74 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eaa:	2102      	movs	r1, #2
 8003eac:	4888      	ldr	r0, [pc, #544]	; (80040d0 <menu+0x2e48>)
 8003eae:	f005 fa07 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d115      	bne.n	8003ee4 <menu+0x2c5c>
 8003eb8:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <menu+0x2e4c>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f083 0301 	eor.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00e      	beq.n	8003ee4 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003ec6:	4b80      	ldr	r3, [pc, #512]	; (80040c8 <menu+0x2e40>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4b7e      	ldr	r3, [pc, #504]	; (80040c8 <menu+0x2e40>)
 8003ed0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003ed2:	4b7d      	ldr	r3, [pc, #500]	; (80040c8 <menu+0x2e40>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2bb4      	cmp	r3, #180	; 0xb4
 8003ed8:	d902      	bls.n	8003ee0 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003eda:	4b7b      	ldr	r3, [pc, #492]	; (80040c8 <menu+0x2e40>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ee0:	f000 fd9e 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	487a      	ldr	r0, [pc, #488]	; (80040d0 <menu+0x2e48>)
 8003ee8:	f005 f9ea 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d115      	bne.n	8003f1e <menu+0x2c96>
 8003ef2:	4b78      	ldr	r3, [pc, #480]	; (80040d4 <menu+0x2e4c>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f00:	4b71      	ldr	r3, [pc, #452]	; (80040c8 <menu+0x2e40>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	4b6f      	ldr	r3, [pc, #444]	; (80040c8 <menu+0x2e40>)
 8003f0a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003f0c:	4b6e      	ldr	r3, [pc, #440]	; (80040c8 <menu+0x2e40>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2bb5      	cmp	r3, #181	; 0xb5
 8003f12:	d902      	bls.n	8003f1a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003f14:	4b6c      	ldr	r3, [pc, #432]	; (80040c8 <menu+0x2e40>)
 8003f16:	22b4      	movs	r2, #180	; 0xb4
 8003f18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f1a:	f000 fd81 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f1e:	2108      	movs	r1, #8
 8003f20:	486b      	ldr	r0, [pc, #428]	; (80040d0 <menu+0x2e48>)
 8003f22:	f005 f9cd 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d10d      	bne.n	8003f48 <menu+0x2cc0>
 8003f2c:	4b69      	ldr	r3, [pc, #420]	; (80040d4 <menu+0x2e4c>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f083 0301 	eor.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003f3a:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <menu+0x2e40>)
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <menu+0x2e50>)
 8003f40:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003f42:	4b66      	ldr	r3, [pc, #408]	; (80040dc <menu+0x2e54>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003f48:	4b65      	ldr	r3, [pc, #404]	; (80040e0 <menu+0x2e58>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b1b      	cmp	r3, #27
 8003f4e:	f040 8083 	bne.w	8004058 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003f52:	4a64      	ldr	r2, [pc, #400]	; (80040e4 <menu+0x2e5c>)
 8003f54:	2101      	movs	r1, #1
 8003f56:	2001      	movs	r0, #1
 8003f58:	f003 fe8c 	bl	8007c74 <lcd_print>

		if(buzzer == 0) {
 8003f5c:	4b62      	ldr	r3, [pc, #392]	; (80040e8 <menu+0x2e60>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d113      	bne.n	8003f8c <menu+0x2d04>
			if(dilSecim == 0) {
 8003f64:	4b56      	ldr	r3, [pc, #344]	; (80040c0 <menu+0x2e38>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003f6c:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <menu+0x2e64>)
 8003f6e:	2101      	movs	r1, #1
 8003f70:	2002      	movs	r0, #2
 8003f72:	f003 fe7f 	bl	8007c74 <lcd_print>
 8003f76:	e020      	b.n	8003fba <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f78:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <menu+0x2e38>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d11c      	bne.n	8003fba <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003f80:	4a5b      	ldr	r2, [pc, #364]	; (80040f0 <menu+0x2e68>)
 8003f82:	2101      	movs	r1, #1
 8003f84:	2002      	movs	r0, #2
 8003f86:	f003 fe75 	bl	8007c74 <lcd_print>
 8003f8a:	e016      	b.n	8003fba <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003f8c:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <menu+0x2e60>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d112      	bne.n	8003fba <menu+0x2d32>
			if(dilSecim == 0) {
 8003f94:	4b4a      	ldr	r3, [pc, #296]	; (80040c0 <menu+0x2e38>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003f9c:	4a55      	ldr	r2, [pc, #340]	; (80040f4 <menu+0x2e6c>)
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	2002      	movs	r0, #2
 8003fa2:	f003 fe67 	bl	8007c74 <lcd_print>
 8003fa6:	e008      	b.n	8003fba <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003fa8:	4b45      	ldr	r3, [pc, #276]	; (80040c0 <menu+0x2e38>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d104      	bne.n	8003fba <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003fb0:	4a51      	ldr	r2, [pc, #324]	; (80040f8 <menu+0x2e70>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	f003 fe5d 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4844      	ldr	r0, [pc, #272]	; (80040d0 <menu+0x2e48>)
 8003fbe:	f005 f97f 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d115      	bne.n	8003ff4 <menu+0x2d6c>
 8003fc8:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <menu+0x2e4c>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	f083 0301 	eor.w	r3, r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00e      	beq.n	8003ff4 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003fd6:	4b44      	ldr	r3, [pc, #272]	; (80040e8 <menu+0x2e60>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4b42      	ldr	r3, [pc, #264]	; (80040e8 <menu+0x2e60>)
 8003fe0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003fe2:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <menu+0x2e60>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d902      	bls.n	8003ff0 <menu+0x2d68>
				buzzer = 0;
 8003fea:	4b3f      	ldr	r3, [pc, #252]	; (80040e8 <menu+0x2e60>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ff0:	f000 fd16 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ff4:	2104      	movs	r1, #4
 8003ff6:	4836      	ldr	r0, [pc, #216]	; (80040d0 <menu+0x2e48>)
 8003ff8:	f005 f962 	bl	80092c0 <HAL_GPIO_ReadPin>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d115      	bne.n	800402e <menu+0x2da6>
 8004002:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <menu+0x2e4c>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	f083 0301 	eor.w	r3, r3, #1
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <menu+0x2da6>
			buzzer = buzzer - 1;
 8004010:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <menu+0x2e60>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	3b01      	subs	r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <menu+0x2e60>)
 800401a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800401c:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <menu+0x2e60>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <menu+0x2da2>
		   		buzzer = 1;
 8004024:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <menu+0x2e60>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800402a:	f000 fcf9 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800402e:	2108      	movs	r1, #8
 8004030:	4827      	ldr	r0, [pc, #156]	; (80040d0 <menu+0x2e48>)
 8004032:	f005 f945 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004036:	4603      	mov	r3, r0
 8004038:	2b01      	cmp	r3, #1
 800403a:	d10d      	bne.n	8004058 <menu+0x2dd0>
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <menu+0x2e4c>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f083 0301 	eor.w	r3, r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <menu+0x2e60>)
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <menu+0x2e50>)
 8004050:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <menu+0x2e54>)
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <menu+0x2e58>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b1c      	cmp	r3, #28
 800405e:	f040 80ab 	bne.w	80041b8 <menu+0x2f30>
		calismaSayModu = 0;
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <menu+0x2e74>)
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <menu+0x2e78>)
 800406a:	2101      	movs	r1, #1
 800406c:	2001      	movs	r0, #1
 800406e:	f003 fe01 	bl	8007c74 <lcd_print>

		if(demoMode == 0) {
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <menu+0x2e7c>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d113      	bne.n	80040a2 <menu+0x2e1a>
			if(dilSecim == 0) {
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <menu+0x2e38>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004082:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <menu+0x2e64>)
 8004084:	2101      	movs	r1, #1
 8004086:	2002      	movs	r0, #2
 8004088:	f003 fdf4 	bl	8007c74 <lcd_print>
 800408c:	e045      	b.n	800411a <menu+0x2e92>
			} else if(dilSecim == 1) {
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <menu+0x2e38>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d141      	bne.n	800411a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <menu+0x2e68>)
 8004098:	2101      	movs	r1, #1
 800409a:	2002      	movs	r0, #2
 800409c:	f003 fdea 	bl	8007c74 <lcd_print>
 80040a0:	e03b      	b.n	800411a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80040a2:	4b18      	ldr	r3, [pc, #96]	; (8004104 <menu+0x2e7c>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d137      	bne.n	800411a <menu+0x2e92>
			if(dilSecim == 0){
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <menu+0x2e38>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d12a      	bne.n	8004108 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80040b2:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <menu+0x2e6c>)
 80040b4:	2101      	movs	r1, #1
 80040b6:	2002      	movs	r0, #2
 80040b8:	f003 fddc 	bl	8007c74 <lcd_print>
 80040bc:	e02d      	b.n	800411a <menu+0x2e92>
 80040be:	bf00      	nop
 80040c0:	20000249 	.word	0x20000249
 80040c4:	0800d8a4 	.word	0x0800d8a4
 80040c8:	20000240 	.word	0x20000240
 80040cc:	2000019c 	.word	0x2000019c
 80040d0:	40010800 	.word	0x40010800
 80040d4:	20000257 	.word	0x20000257
 80040d8:	2000012c 	.word	0x2000012c
 80040dc:	20000254 	.word	0x20000254
 80040e0:	20000228 	.word	0x20000228
 80040e4:	0800d9a4 	.word	0x0800d9a4
 80040e8:	20000244 	.word	0x20000244
 80040ec:	0800d2cc 	.word	0x0800d2cc
 80040f0:	0800d2e0 	.word	0x0800d2e0
 80040f4:	0800d32c 	.word	0x0800d32c
 80040f8:	0800d340 	.word	0x0800d340
 80040fc:	20000248 	.word	0x20000248
 8004100:	0800d9b8 	.word	0x0800d9b8
 8004104:	20000246 	.word	0x20000246
			} else if(dilSecim == 1) {
 8004108:	4b71      	ldr	r3, [pc, #452]	; (80042d0 <menu+0x3048>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d104      	bne.n	800411a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004110:	4a70      	ldr	r2, [pc, #448]	; (80042d4 <menu+0x304c>)
 8004112:	2101      	movs	r1, #1
 8004114:	2002      	movs	r0, #2
 8004116:	f003 fdad 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800411a:	2102      	movs	r1, #2
 800411c:	486e      	ldr	r0, [pc, #440]	; (80042d8 <menu+0x3050>)
 800411e:	f005 f8cf 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004122:	4603      	mov	r3, r0
 8004124:	2b01      	cmp	r3, #1
 8004126:	d115      	bne.n	8004154 <menu+0x2ecc>
 8004128:	4b6c      	ldr	r3, [pc, #432]	; (80042dc <menu+0x3054>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	f083 0301 	eor.w	r3, r3, #1
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00e      	beq.n	8004154 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004136:	4b6a      	ldr	r3, [pc, #424]	; (80042e0 <menu+0x3058>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <menu+0x3058>)
 8004140:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004142:	4b67      	ldr	r3, [pc, #412]	; (80042e0 <menu+0x3058>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d902      	bls.n	8004150 <menu+0x2ec8>
				demoMode = 0;
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <menu+0x3058>)
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004150:	f000 fc66 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004154:	2104      	movs	r1, #4
 8004156:	4860      	ldr	r0, [pc, #384]	; (80042d8 <menu+0x3050>)
 8004158:	f005 f8b2 	bl	80092c0 <HAL_GPIO_ReadPin>
 800415c:	4603      	mov	r3, r0
 800415e:	2b01      	cmp	r3, #1
 8004160:	d115      	bne.n	800418e <menu+0x2f06>
 8004162:	4b5e      	ldr	r3, [pc, #376]	; (80042dc <menu+0x3054>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	f083 0301 	eor.w	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00e      	beq.n	800418e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004170:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <menu+0x3058>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	3b01      	subs	r3, #1
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <menu+0x3058>)
 800417a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800417c:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <menu+0x3058>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <menu+0x2f02>
		   		demoMode = 1;
 8004184:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <menu+0x3058>)
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800418a:	f000 fc49 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800418e:	2108      	movs	r1, #8
 8004190:	4851      	ldr	r0, [pc, #324]	; (80042d8 <menu+0x3050>)
 8004192:	f005 f895 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004196:	4603      	mov	r3, r0
 8004198:	2b01      	cmp	r3, #1
 800419a:	d10d      	bne.n	80041b8 <menu+0x2f30>
 800419c:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <menu+0x3054>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	f083 0301 	eor.w	r3, r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d006      	beq.n	80041b8 <menu+0x2f30>
			eepromData[26] = demoMode;
 80041aa:	4b4d      	ldr	r3, [pc, #308]	; (80042e0 <menu+0x3058>)
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <menu+0x305c>)
 80041b0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80041b2:	4b4d      	ldr	r3, [pc, #308]	; (80042e8 <menu+0x3060>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80041b8:	4b4c      	ldr	r3, [pc, #304]	; (80042ec <menu+0x3064>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b1d      	cmp	r3, #29
 80041be:	f040 8132 	bne.w	8004426 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80041c2:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <menu+0x3068>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d113      	bne.n	80041f2 <menu+0x2f6a>
 80041ca:	4b4a      	ldr	r3, [pc, #296]	; (80042f4 <menu+0x306c>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <menu+0x2f6a>
 80041d2:	4b49      	ldr	r3, [pc, #292]	; (80042f8 <menu+0x3070>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <menu+0x2f6a>
 80041da:	4b48      	ldr	r3, [pc, #288]	; (80042fc <menu+0x3074>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d107      	bne.n	80041f2 <menu+0x2f6a>
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <menu+0x3078>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80041ea:	4b46      	ldr	r3, [pc, #280]	; (8004304 <menu+0x307c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e002      	b.n	80041f8 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80041f2:	4b44      	ldr	r3, [pc, #272]	; (8004304 <menu+0x307c>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80041f8:	4b43      	ldr	r3, [pc, #268]	; (8004308 <menu+0x3080>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d154      	bne.n	80042aa <menu+0x3022>
			if(dilSecim == 0) {
 8004200:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <menu+0x3048>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004208:	4a40      	ldr	r2, [pc, #256]	; (800430c <menu+0x3084>)
 800420a:	2101      	movs	r1, #1
 800420c:	2001      	movs	r0, #1
 800420e:	f003 fd31 	bl	8007c74 <lcd_print>
 8004212:	e008      	b.n	8004226 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004214:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <menu+0x3048>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d104      	bne.n	8004226 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800421c:	4a3c      	ldr	r2, [pc, #240]	; (8004310 <menu+0x3088>)
 800421e:	2101      	movs	r1, #1
 8004220:	2001      	movs	r0, #1
 8004222:	f003 fd27 	bl	8007c74 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004226:	4b36      	ldr	r3, [pc, #216]	; (8004300 <menu+0x3078>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	220a      	movs	r2, #10
 800422c:	4939      	ldr	r1, [pc, #228]	; (8004314 <menu+0x308c>)
 800422e:	4618      	mov	r0, r3
 8004230:	f008 f872 	bl	800c318 <itoa>
			lcd_print(2, 12, snum);
 8004234:	4a37      	ldr	r2, [pc, #220]	; (8004314 <menu+0x308c>)
 8004236:	210c      	movs	r1, #12
 8004238:	2002      	movs	r0, #2
 800423a:	f003 fd1b 	bl	8007c74 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800423e:	4b2f      	ldr	r3, [pc, #188]	; (80042fc <menu+0x3074>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	220a      	movs	r2, #10
 8004244:	4933      	ldr	r1, [pc, #204]	; (8004314 <menu+0x308c>)
 8004246:	4618      	mov	r0, r3
 8004248:	f008 f866 	bl	800c318 <itoa>
			lcd_print(2, 13, snum);
 800424c:	4a31      	ldr	r2, [pc, #196]	; (8004314 <menu+0x308c>)
 800424e:	210d      	movs	r1, #13
 8004250:	2002      	movs	r0, #2
 8004252:	f003 fd0f 	bl	8007c74 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004256:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <menu+0x3070>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	220a      	movs	r2, #10
 800425c:	492d      	ldr	r1, [pc, #180]	; (8004314 <menu+0x308c>)
 800425e:	4618      	mov	r0, r3
 8004260:	f008 f85a 	bl	800c318 <itoa>
			lcd_print(2, 14, snum);
 8004264:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <menu+0x308c>)
 8004266:	210e      	movs	r1, #14
 8004268:	2002      	movs	r0, #2
 800426a:	f003 fd03 	bl	8007c74 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800426e:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <menu+0x306c>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	220a      	movs	r2, #10
 8004274:	4927      	ldr	r1, [pc, #156]	; (8004314 <menu+0x308c>)
 8004276:	4618      	mov	r0, r3
 8004278:	f008 f84e 	bl	800c318 <itoa>
			lcd_print(2, 15, snum);
 800427c:	4a25      	ldr	r2, [pc, #148]	; (8004314 <menu+0x308c>)
 800427e:	210f      	movs	r1, #15
 8004280:	2002      	movs	r0, #2
 8004282:	f003 fcf7 	bl	8007c74 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004286:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <menu+0x3068>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	220a      	movs	r2, #10
 800428c:	4921      	ldr	r1, [pc, #132]	; (8004314 <menu+0x308c>)
 800428e:	4618      	mov	r0, r3
 8004290:	f008 f842 	bl	800c318 <itoa>
			lcd_print(2, 16, snum);
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <menu+0x308c>)
 8004296:	2110      	movs	r1, #16
 8004298:	2002      	movs	r0, #2
 800429a:	f003 fceb 	bl	8007c74 <lcd_print>

			lcd_print(2, 1, "           ");
 800429e:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <menu+0x3090>)
 80042a0:	2101      	movs	r1, #1
 80042a2:	2002      	movs	r0, #2
 80042a4:	f003 fce6 	bl	8007c74 <lcd_print>
 80042a8:	e048      	b.n	800433c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80042aa:	4b17      	ldr	r3, [pc, #92]	; (8004308 <menu+0x3080>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d144      	bne.n	800433c <menu+0x30b4>
			if(dilSecim == 0) {
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <menu+0x3048>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d132      	bne.n	8004320 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042ba:	4a14      	ldr	r2, [pc, #80]	; (800430c <menu+0x3084>)
 80042bc:	2101      	movs	r1, #1
 80042be:	2001      	movs	r0, #1
 80042c0:	f003 fcd8 	bl	8007c74 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80042c4:	4a15      	ldr	r2, [pc, #84]	; (800431c <menu+0x3094>)
 80042c6:	2101      	movs	r1, #1
 80042c8:	2002      	movs	r0, #2
 80042ca:	f003 fcd3 	bl	8007c74 <lcd_print>
 80042ce:	e035      	b.n	800433c <menu+0x30b4>
 80042d0:	20000249 	.word	0x20000249
 80042d4:	0800d340 	.word	0x0800d340
 80042d8:	40010800 	.word	0x40010800
 80042dc:	20000257 	.word	0x20000257
 80042e0:	20000246 	.word	0x20000246
 80042e4:	2000012c 	.word	0x2000012c
 80042e8:	20000254 	.word	0x20000254
 80042ec:	20000228 	.word	0x20000228
 80042f0:	20000225 	.word	0x20000225
 80042f4:	20000226 	.word	0x20000226
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000001 	.word	0x20000001
 8004300:	20000227 	.word	0x20000227
 8004304:	20000269 	.word	0x20000269
 8004308:	20000248 	.word	0x20000248
 800430c:	0800d9c8 	.word	0x0800d9c8
 8004310:	0800d9dc 	.word	0x0800d9dc
 8004314:	2000019c 	.word	0x2000019c
 8004318:	0800d9f0 	.word	0x0800d9f0
 800431c:	0800d9fc 	.word	0x0800d9fc
			} else if(dilSecim == 1) {
 8004320:	4b94      	ldr	r3, [pc, #592]	; (8004574 <menu+0x32ec>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d109      	bne.n	800433c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004328:	4a93      	ldr	r2, [pc, #588]	; (8004578 <menu+0x32f0>)
 800432a:	2101      	movs	r1, #1
 800432c:	2001      	movs	r0, #1
 800432e:	f003 fca1 	bl	8007c74 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004332:	4a92      	ldr	r2, [pc, #584]	; (800457c <menu+0x32f4>)
 8004334:	2101      	movs	r1, #1
 8004336:	2002      	movs	r0, #2
 8004338:	f003 fc9c 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800433c:	2102      	movs	r1, #2
 800433e:	4890      	ldr	r0, [pc, #576]	; (8004580 <menu+0x32f8>)
 8004340:	f004 ffbe 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d119      	bne.n	800437e <menu+0x30f6>
 800434a:	4b8e      	ldr	r3, [pc, #568]	; (8004584 <menu+0x32fc>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	f083 0301 	eor.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <menu+0x30f6>
 8004358:	4b8b      	ldr	r3, [pc, #556]	; (8004588 <menu+0x3300>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004360:	4b8a      	ldr	r3, [pc, #552]	; (800458c <menu+0x3304>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	4b88      	ldr	r3, [pc, #544]	; (800458c <menu+0x3304>)
 800436a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800436c:	4b87      	ldr	r3, [pc, #540]	; (800458c <menu+0x3304>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d902      	bls.n	800437a <menu+0x30f2>
				calismaSayModu = 0;
 8004374:	4b85      	ldr	r3, [pc, #532]	; (800458c <menu+0x3304>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800437a:	f000 fb51 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800437e:	2104      	movs	r1, #4
 8004380:	487f      	ldr	r0, [pc, #508]	; (8004580 <menu+0x32f8>)
 8004382:	f004 ff9d 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d119      	bne.n	80043c0 <menu+0x3138>
 800438c:	4b7d      	ldr	r3, [pc, #500]	; (8004584 <menu+0x32fc>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f083 0301 	eor.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d012      	beq.n	80043c0 <menu+0x3138>
 800439a:	4b7b      	ldr	r3, [pc, #492]	; (8004588 <menu+0x3300>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00e      	beq.n	80043c0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80043a2:	4b7a      	ldr	r3, [pc, #488]	; (800458c <menu+0x3304>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b78      	ldr	r3, [pc, #480]	; (800458c <menu+0x3304>)
 80043ac:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80043ae:	4b77      	ldr	r3, [pc, #476]	; (800458c <menu+0x3304>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <menu+0x3134>
		   		calismaSayModu = 1;
 80043b6:	4b75      	ldr	r3, [pc, #468]	; (800458c <menu+0x3304>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043bc:	f000 fb30 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043c0:	2108      	movs	r1, #8
 80043c2:	486f      	ldr	r0, [pc, #444]	; (8004580 <menu+0x32f8>)
 80043c4:	f004 ff7c 	bl	80092c0 <HAL_GPIO_ReadPin>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d12b      	bne.n	8004426 <menu+0x319e>
 80043ce:	4b6d      	ldr	r3, [pc, #436]	; (8004584 <menu+0x32fc>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f083 0301 	eor.w	r3, r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d024      	beq.n	8004426 <menu+0x319e>
			eepromData[32] = 0;
 80043dc:	4b6c      	ldr	r3, [pc, #432]	; (8004590 <menu+0x3308>)
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80043e4:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <menu+0x3308>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80043ea:	4b69      	ldr	r3, [pc, #420]	; (8004590 <menu+0x3308>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80043f0:	4b67      	ldr	r3, [pc, #412]	; (8004590 <menu+0x3308>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80043f6:	4b66      	ldr	r3, [pc, #408]	; (8004590 <menu+0x3308>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80043fc:	4b65      	ldr	r3, [pc, #404]	; (8004594 <menu+0x330c>)
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004402:	4b65      	ldr	r3, [pc, #404]	; (8004598 <menu+0x3310>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004408:	4b64      	ldr	r3, [pc, #400]	; (800459c <menu+0x3314>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800440e:	4b64      	ldr	r3, [pc, #400]	; (80045a0 <menu+0x3318>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004414:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <menu+0x331c>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800441a:	4b5c      	ldr	r3, [pc, #368]	; (800458c <menu+0x3304>)
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004420:	4b61      	ldr	r3, [pc, #388]	; (80045a8 <menu+0x3320>)
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004426:	4b61      	ldr	r3, [pc, #388]	; (80045ac <menu+0x3324>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b1e      	cmp	r3, #30
 800442c:	d16f      	bne.n	800450e <menu+0x3286>
		calismaSayModu = 0;
 800442e:	4b57      	ldr	r3, [pc, #348]	; (800458c <menu+0x3304>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004434:	4b4f      	ldr	r3, [pc, #316]	; (8004574 <menu+0x32ec>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800443c:	4a5c      	ldr	r2, [pc, #368]	; (80045b0 <menu+0x3328>)
 800443e:	2101      	movs	r1, #1
 8004440:	2001      	movs	r0, #1
 8004442:	f003 fc17 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004446:	4a5b      	ldr	r2, [pc, #364]	; (80045b4 <menu+0x332c>)
 8004448:	2101      	movs	r1, #1
 800444a:	2002      	movs	r0, #2
 800444c:	f003 fc12 	bl	8007c74 <lcd_print>
 8004450:	e00d      	b.n	800446e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004452:	4b48      	ldr	r3, [pc, #288]	; (8004574 <menu+0x32ec>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d109      	bne.n	800446e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800445a:	4a57      	ldr	r2, [pc, #348]	; (80045b8 <menu+0x3330>)
 800445c:	2101      	movs	r1, #1
 800445e:	2001      	movs	r0, #1
 8004460:	f003 fc08 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004464:	4a55      	ldr	r2, [pc, #340]	; (80045bc <menu+0x3334>)
 8004466:	2101      	movs	r1, #1
 8004468:	2002      	movs	r0, #2
 800446a:	f003 fc03 	bl	8007c74 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800446e:	2102      	movs	r1, #2
 8004470:	4843      	ldr	r0, [pc, #268]	; (8004580 <menu+0x32f8>)
 8004472:	f004 ff25 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d115      	bne.n	80044a8 <menu+0x3220>
 800447c:	4b41      	ldr	r3, [pc, #260]	; (8004584 <menu+0x32fc>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f083 0301 	eor.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800448a:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <menu+0x32ec>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	3301      	adds	r3, #1
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4b38      	ldr	r3, [pc, #224]	; (8004574 <menu+0x32ec>)
 8004494:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <menu+0x32ec>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d902      	bls.n	80044a4 <menu+0x321c>
				dilSecim = 0;
 800449e:	4b35      	ldr	r3, [pc, #212]	; (8004574 <menu+0x32ec>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80044a4:	f000 fabc 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044a8:	2104      	movs	r1, #4
 80044aa:	4835      	ldr	r0, [pc, #212]	; (8004580 <menu+0x32f8>)
 80044ac:	f004 ff08 	bl	80092c0 <HAL_GPIO_ReadPin>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d115      	bne.n	80044e2 <menu+0x325a>
 80044b6:	4b33      	ldr	r3, [pc, #204]	; (8004584 <menu+0x32fc>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	f083 0301 	eor.w	r3, r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00e      	beq.n	80044e2 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <menu+0x32ec>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	4b29      	ldr	r3, [pc, #164]	; (8004574 <menu+0x32ec>)
 80044ce:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80044d0:	4b28      	ldr	r3, [pc, #160]	; (8004574 <menu+0x32ec>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <menu+0x3256>
		   		dilSecim = 1;
 80044d8:	4b26      	ldr	r3, [pc, #152]	; (8004574 <menu+0x32ec>)
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80044de:	f000 fa9f 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044e2:	2108      	movs	r1, #8
 80044e4:	4826      	ldr	r0, [pc, #152]	; (8004580 <menu+0x32f8>)
 80044e6:	f004 feeb 	bl	80092c0 <HAL_GPIO_ReadPin>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10e      	bne.n	800450e <menu+0x3286>
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <menu+0x32fc>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f083 0301 	eor.w	r3, r3, #1
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <menu+0x3286>
			eepromData[33] = dilSecim;
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <menu+0x32ec>)
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <menu+0x3308>)
 8004504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004508:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <menu+0x3320>)
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800450e:	4b27      	ldr	r3, [pc, #156]	; (80045ac <menu+0x3324>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b1f      	cmp	r3, #31
 8004514:	f040 80b7 	bne.w	8004686 <menu+0x33fe>
		calismaSayModu = 0;
 8004518:	4b1c      	ldr	r3, [pc, #112]	; (800458c <menu+0x3304>)
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800451e:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <menu+0x3338>)
 8004520:	2101      	movs	r1, #1
 8004522:	2001      	movs	r0, #1
 8004524:	f003 fba6 	bl	8007c74 <lcd_print>

		if(iotMode == 0) {
 8004528:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <menu+0x333c>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d113      	bne.n	8004558 <menu+0x32d0>
			if(dilSecim == 0) {
 8004530:	4b10      	ldr	r3, [pc, #64]	; (8004574 <menu+0x32ec>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004538:	4a23      	ldr	r2, [pc, #140]	; (80045c8 <menu+0x3340>)
 800453a:	2101      	movs	r1, #1
 800453c:	2002      	movs	r0, #2
 800453e:	f003 fb99 	bl	8007c74 <lcd_print>
 8004542:	e050      	b.n	80045e6 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <menu+0x32ec>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d14c      	bne.n	80045e6 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800454c:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <menu+0x3344>)
 800454e:	2101      	movs	r1, #1
 8004550:	2002      	movs	r0, #2
 8004552:	f003 fb8f 	bl	8007c74 <lcd_print>
 8004556:	e046      	b.n	80045e6 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <menu+0x333c>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d142      	bne.n	80045e6 <menu+0x335e>
			if(dilSecim == 0) {
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <menu+0x32ec>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d135      	bne.n	80045d4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004568:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <menu+0x3348>)
 800456a:	2101      	movs	r1, #1
 800456c:	2002      	movs	r0, #2
 800456e:	f003 fb81 	bl	8007c74 <lcd_print>
 8004572:	e038      	b.n	80045e6 <menu+0x335e>
 8004574:	20000249 	.word	0x20000249
 8004578:	0800d9dc 	.word	0x0800d9dc
 800457c:	0800da10 	.word	0x0800da10
 8004580:	40010800 	.word	0x40010800
 8004584:	20000257 	.word	0x20000257
 8004588:	20000269 	.word	0x20000269
 800458c:	20000248 	.word	0x20000248
 8004590:	2000012c 	.word	0x2000012c
 8004594:	20000227 	.word	0x20000227
 8004598:	20000001 	.word	0x20000001
 800459c:	20000000 	.word	0x20000000
 80045a0:	20000226 	.word	0x20000226
 80045a4:	20000225 	.word	0x20000225
 80045a8:	20000254 	.word	0x20000254
 80045ac:	20000228 	.word	0x20000228
 80045b0:	0800da24 	.word	0x0800da24
 80045b4:	0800da38 	.word	0x0800da38
 80045b8:	0800da4c 	.word	0x0800da4c
 80045bc:	0800da60 	.word	0x0800da60
 80045c0:	0800da74 	.word	0x0800da74
 80045c4:	20000247 	.word	0x20000247
 80045c8:	0800d2cc 	.word	0x0800d2cc
 80045cc:	0800d2e0 	.word	0x0800d2e0
 80045d0:	0800d32c 	.word	0x0800d32c
			} else if(dilSecim == 1) {
 80045d4:	4bab      	ldr	r3, [pc, #684]	; (8004884 <menu+0x35fc>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d104      	bne.n	80045e6 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80045dc:	4aaa      	ldr	r2, [pc, #680]	; (8004888 <menu+0x3600>)
 80045de:	2101      	movs	r1, #1
 80045e0:	2002      	movs	r0, #2
 80045e2:	f003 fb47 	bl	8007c74 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80045e6:	2102      	movs	r1, #2
 80045e8:	48a8      	ldr	r0, [pc, #672]	; (800488c <menu+0x3604>)
 80045ea:	f004 fe69 	bl	80092c0 <HAL_GPIO_ReadPin>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d115      	bne.n	8004620 <menu+0x3398>
 80045f4:	4ba6      	ldr	r3, [pc, #664]	; (8004890 <menu+0x3608>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f083 0301 	eor.w	r3, r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00e      	beq.n	8004620 <menu+0x3398>
			iotMode = iotMode + 1;
 8004602:	4ba4      	ldr	r3, [pc, #656]	; (8004894 <menu+0x360c>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4ba2      	ldr	r3, [pc, #648]	; (8004894 <menu+0x360c>)
 800460c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800460e:	4ba1      	ldr	r3, [pc, #644]	; (8004894 <menu+0x360c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d902      	bls.n	800461c <menu+0x3394>
				iotMode = 0;
 8004616:	4b9f      	ldr	r3, [pc, #636]	; (8004894 <menu+0x360c>)
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800461c:	f000 fa00 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004620:	2104      	movs	r1, #4
 8004622:	489a      	ldr	r0, [pc, #616]	; (800488c <menu+0x3604>)
 8004624:	f004 fe4c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004628:	4603      	mov	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d115      	bne.n	800465a <menu+0x33d2>
 800462e:	4b98      	ldr	r3, [pc, #608]	; (8004890 <menu+0x3608>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f083 0301 	eor.w	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <menu+0x33d2>
			iotMode = iotMode - 1;
 800463c:	4b95      	ldr	r3, [pc, #596]	; (8004894 <menu+0x360c>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	3b01      	subs	r3, #1
 8004642:	b2da      	uxtb	r2, r3
 8004644:	4b93      	ldr	r3, [pc, #588]	; (8004894 <menu+0x360c>)
 8004646:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004648:	4b92      	ldr	r3, [pc, #584]	; (8004894 <menu+0x360c>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <menu+0x33ce>
		   		iotMode = 1;
 8004650:	4b90      	ldr	r3, [pc, #576]	; (8004894 <menu+0x360c>)
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004656:	f000 f9e3 	bl	8004a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800465a:	2108      	movs	r1, #8
 800465c:	488b      	ldr	r0, [pc, #556]	; (800488c <menu+0x3604>)
 800465e:	f004 fe2f 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d10e      	bne.n	8004686 <menu+0x33fe>
 8004668:	4b89      	ldr	r3, [pc, #548]	; (8004890 <menu+0x3608>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f083 0301 	eor.w	r3, r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004676:	4b87      	ldr	r3, [pc, #540]	; (8004894 <menu+0x360c>)
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	4b87      	ldr	r3, [pc, #540]	; (8004898 <menu+0x3610>)
 800467c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004680:	4b86      	ldr	r3, [pc, #536]	; (800489c <menu+0x3614>)
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004686:	4b86      	ldr	r3, [pc, #536]	; (80048a0 <menu+0x3618>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b20      	cmp	r3, #32
 800468c:	d13f      	bne.n	800470e <menu+0x3486>
		calismaSayModu = 0;
 800468e:	4b85      	ldr	r3, [pc, #532]	; (80048a4 <menu+0x361c>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004694:	4b7b      	ldr	r3, [pc, #492]	; (8004884 <menu+0x35fc>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 800469c:	4a82      	ldr	r2, [pc, #520]	; (80048a8 <menu+0x3620>)
 800469e:	2101      	movs	r1, #1
 80046a0:	2001      	movs	r0, #1
 80046a2:	f003 fae7 	bl	8007c74 <lcd_print>
 80046a6:	e004      	b.n	80046b2 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80046a8:	4a80      	ldr	r2, [pc, #512]	; (80048ac <menu+0x3624>)
 80046aa:	2101      	movs	r1, #1
 80046ac:	2001      	movs	r0, #1
 80046ae:	f003 fae1 	bl	8007c74 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80046b2:	4a7f      	ldr	r2, [pc, #508]	; (80048b0 <menu+0x3628>)
 80046b4:	2101      	movs	r1, #1
 80046b6:	2002      	movs	r0, #2
 80046b8:	f003 fadc 	bl	8007c74 <lcd_print>
		lcd_print(2, 13, "    ");
 80046bc:	4a7d      	ldr	r2, [pc, #500]	; (80048b4 <menu+0x362c>)
 80046be:	210d      	movs	r1, #13
 80046c0:	2002      	movs	r0, #2
 80046c2:	f003 fad7 	bl	8007c74 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046c6:	2102      	movs	r1, #2
 80046c8:	4870      	ldr	r0, [pc, #448]	; (800488c <menu+0x3604>)
 80046ca:	f004 fdf9 	bl	80092c0 <HAL_GPIO_ReadPin>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d11c      	bne.n	800470e <menu+0x3486>
 80046d4:	2104      	movs	r1, #4
 80046d6:	486d      	ldr	r0, [pc, #436]	; (800488c <menu+0x3604>)
 80046d8:	f004 fdf2 	bl	80092c0 <HAL_GPIO_ReadPin>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d115      	bne.n	800470e <menu+0x3486>
 80046e2:	4b6b      	ldr	r3, [pc, #428]	; (8004890 <menu+0x3608>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	f083 0301 	eor.w	r3, r3, #1
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <menu+0x3486>
			takeMachineID();
 80046f0:	f002 faa2 	bl	8006c38 <takeMachineID>

			HAL_Delay(250);
 80046f4:	20fa      	movs	r0, #250	; 0xfa
 80046f6:	f004 f813 	bl	8008720 <HAL_Delay>
			lcd_print(2, 1, machineID);
 80046fa:	4a6d      	ldr	r2, [pc, #436]	; (80048b0 <menu+0x3628>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	2002      	movs	r0, #2
 8004700:	f003 fab8 	bl	8007c74 <lcd_print>
			lcd_print(2, 13, "    ");
 8004704:	4a6b      	ldr	r2, [pc, #428]	; (80048b4 <menu+0x362c>)
 8004706:	210d      	movs	r1, #13
 8004708:	2002      	movs	r0, #2
 800470a:	f003 fab3 	bl	8007c74 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 800470e:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <menu+0x3618>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b21      	cmp	r3, #33	; 0x21
 8004714:	d14f      	bne.n	80047b6 <menu+0x352e>
		calismaSayModu = 0;
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <menu+0x361c>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 800471c:	4866      	ldr	r0, [pc, #408]	; (80048b8 <menu+0x3630>)
 800471e:	f7fb fd81 	bl	8000224 <strlen>
 8004722:	4603      	mov	r3, r0
 8004724:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 8004726:	4a65      	ldr	r2, [pc, #404]	; (80048bc <menu+0x3634>)
 8004728:	2101      	movs	r1, #1
 800472a:	2001      	movs	r0, #1
 800472c:	f003 faa2 	bl	8007c74 <lcd_print>

		if(ssidLength <=16) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b10      	cmp	r3, #16
 8004734:	dc0e      	bgt.n	8004754 <menu+0x34cc>
			lcd_print(2, 1, wifiSSID);
 8004736:	4a60      	ldr	r2, [pc, #384]	; (80048b8 <menu+0x3630>)
 8004738:	2101      	movs	r1, #1
 800473a:	2002      	movs	r0, #2
 800473c:	f003 fa9a 	bl	8007c74 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	3301      	adds	r3, #1
 8004746:	b2db      	uxtb	r3, r3
 8004748:	4a5d      	ldr	r2, [pc, #372]	; (80048c0 <menu+0x3638>)
 800474a:	4619      	mov	r1, r3
 800474c:	2002      	movs	r0, #2
 800474e:	f003 fa91 	bl	8007c74 <lcd_print>
 8004752:	e005      	b.n	8004760 <menu+0x34d8>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004754:	2300      	movs	r3, #0
 8004756:	2202      	movs	r2, #2
 8004758:	2101      	movs	r1, #1
 800475a:	4857      	ldr	r0, [pc, #348]	; (80048b8 <menu+0x3630>)
 800475c:	f7fc fcd8 	bl	8001110 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004760:	2102      	movs	r1, #2
 8004762:	484a      	ldr	r0, [pc, #296]	; (800488c <menu+0x3604>)
 8004764:	f004 fdac 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d123      	bne.n	80047b6 <menu+0x352e>
 800476e:	2104      	movs	r1, #4
 8004770:	4846      	ldr	r0, [pc, #280]	; (800488c <menu+0x3604>)
 8004772:	f004 fda5 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004776:	4603      	mov	r3, r0
 8004778:	2b01      	cmp	r3, #1
 800477a:	d11c      	bne.n	80047b6 <menu+0x352e>
 800477c:	4b44      	ldr	r3, [pc, #272]	; (8004890 <menu+0x3608>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f083 0301 	eor.w	r3, r3, #1
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d015      	beq.n	80047b6 <menu+0x352e>
			takeWifiSSID();
 800478a:	f002 fbe9 	bl	8006f60 <takeWifiSSID>

			HAL_Delay(250);
 800478e:	20fa      	movs	r0, #250	; 0xfa
 8004790:	f003 ffc6 	bl	8008720 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 8004794:	4a48      	ldr	r2, [pc, #288]	; (80048b8 <menu+0x3630>)
 8004796:	2101      	movs	r1, #1
 8004798:	2002      	movs	r0, #2
 800479a:	f003 fa6b 	bl	8007c74 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800479e:	4846      	ldr	r0, [pc, #280]	; (80048b8 <menu+0x3630>)
 80047a0:	f7fb fd40 	bl	8000224 <strlen>
 80047a4:	4603      	mov	r3, r0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	3301      	adds	r3, #1
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	4a44      	ldr	r2, [pc, #272]	; (80048c0 <menu+0x3638>)
 80047ae:	4619      	mov	r1, r3
 80047b0:	2002      	movs	r0, #2
 80047b2:	f003 fa5f 	bl	8007c74 <lcd_print>
		}
	}

	if (menuSayac == 34) {
 80047b6:	4b3a      	ldr	r3, [pc, #232]	; (80048a0 <menu+0x3618>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b22      	cmp	r3, #34	; 0x22
 80047bc:	d14f      	bne.n	800485e <menu+0x35d6>
		calismaSayModu = 0;
 80047be:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <menu+0x361c>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80047c4:	483f      	ldr	r0, [pc, #252]	; (80048c4 <menu+0x363c>)
 80047c6:	f7fb fd2d 	bl	8000224 <strlen>
 80047ca:	4603      	mov	r3, r0
 80047cc:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80047ce:	4a3e      	ldr	r2, [pc, #248]	; (80048c8 <menu+0x3640>)
 80047d0:	2101      	movs	r1, #1
 80047d2:	2001      	movs	r0, #1
 80047d4:	f003 fa4e 	bl	8007c74 <lcd_print>

		if(passLength <= 16) {
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b10      	cmp	r3, #16
 80047dc:	dc0e      	bgt.n	80047fc <menu+0x3574>
			lcd_print(2, 1, wifiPass);
 80047de:	4a39      	ldr	r2, [pc, #228]	; (80048c4 <menu+0x363c>)
 80047e0:	2101      	movs	r1, #1
 80047e2:	2002      	movs	r0, #2
 80047e4:	f003 fa46 	bl	8007c74 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3301      	adds	r3, #1
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	4a33      	ldr	r2, [pc, #204]	; (80048c0 <menu+0x3638>)
 80047f2:	4619      	mov	r1, r3
 80047f4:	2002      	movs	r0, #2
 80047f6:	f003 fa3d 	bl	8007c74 <lcd_print>
 80047fa:	e005      	b.n	8004808 <menu+0x3580>
		} else {
			slideText(wifiPass, 1, 2, 1);
 80047fc:	2301      	movs	r3, #1
 80047fe:	2202      	movs	r2, #2
 8004800:	2101      	movs	r1, #1
 8004802:	4830      	ldr	r0, [pc, #192]	; (80048c4 <menu+0x363c>)
 8004804:	f7fc fc84 	bl	8001110 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004808:	2102      	movs	r1, #2
 800480a:	4820      	ldr	r0, [pc, #128]	; (800488c <menu+0x3604>)
 800480c:	f004 fd58 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d123      	bne.n	800485e <menu+0x35d6>
 8004816:	2104      	movs	r1, #4
 8004818:	481c      	ldr	r0, [pc, #112]	; (800488c <menu+0x3604>)
 800481a:	f004 fd51 	bl	80092c0 <HAL_GPIO_ReadPin>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d11c      	bne.n	800485e <menu+0x35d6>
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <menu+0x3608>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f083 0301 	eor.w	r3, r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d015      	beq.n	800485e <menu+0x35d6>
			takeWifiPass();
 8004832:	f002 fd43 	bl	80072bc <takeWifiPass>

			HAL_Delay(250);
 8004836:	20fa      	movs	r0, #250	; 0xfa
 8004838:	f003 ff72 	bl	8008720 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 800483c:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <menu+0x363c>)
 800483e:	2101      	movs	r1, #1
 8004840:	2002      	movs	r0, #2
 8004842:	f003 fa17 	bl	8007c74 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004846:	481f      	ldr	r0, [pc, #124]	; (80048c4 <menu+0x363c>)
 8004848:	f7fb fcec 	bl	8000224 <strlen>
 800484c:	4603      	mov	r3, r0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	3301      	adds	r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	4a1a      	ldr	r2, [pc, #104]	; (80048c0 <menu+0x3638>)
 8004856:	4619      	mov	r1, r3
 8004858:	2002      	movs	r0, #2
 800485a:	f003 fa0b 	bl	8007c74 <lcd_print>
		}
	}

	if (menuSayac == 35) {
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <menu+0x3618>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b23      	cmp	r3, #35	; 0x23
 8004864:	d175      	bne.n	8004952 <menu+0x36ca>
		if(dilSecim == 0) {
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <menu+0x35fc>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d132      	bne.n	80048d4 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800486e:	4a17      	ldr	r2, [pc, #92]	; (80048cc <menu+0x3644>)
 8004870:	2101      	movs	r1, #1
 8004872:	2001      	movs	r0, #1
 8004874:	f003 f9fe 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004878:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <menu+0x3648>)
 800487a:	2101      	movs	r1, #1
 800487c:	2002      	movs	r0, #2
 800487e:	f003 f9f9 	bl	8007c74 <lcd_print>
 8004882:	e035      	b.n	80048f0 <menu+0x3668>
 8004884:	20000249 	.word	0x20000249
 8004888:	0800d340 	.word	0x0800d340
 800488c:	40010800 	.word	0x40010800
 8004890:	20000257 	.word	0x20000257
 8004894:	20000247 	.word	0x20000247
 8004898:	2000012c 	.word	0x2000012c
 800489c:	20000254 	.word	0x20000254
 80048a0:	20000228 	.word	0x20000228
 80048a4:	20000248 	.word	0x20000248
 80048a8:	0800da88 	.word	0x0800da88
 80048ac:	0800da9c 	.word	0x0800da9c
 80048b0:	200001a4 	.word	0x200001a4
 80048b4:	0800dab0 	.word	0x0800dab0
 80048b8:	200001b0 	.word	0x200001b0
 80048bc:	0800dab8 	.word	0x0800dab8
 80048c0:	20000010 	.word	0x20000010
 80048c4:	200001c4 	.word	0x200001c4
 80048c8:	0800dacc 	.word	0x0800dacc
 80048cc:	0800dae0 	.word	0x0800dae0
 80048d0:	0800daf4 	.word	0x0800daf4
		} else if(dilSecim == 1) {
 80048d4:	4b21      	ldr	r3, [pc, #132]	; (800495c <menu+0x36d4>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d109      	bne.n	80048f0 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80048dc:	4a20      	ldr	r2, [pc, #128]	; (8004960 <menu+0x36d8>)
 80048de:	2101      	movs	r1, #1
 80048e0:	2001      	movs	r0, #1
 80048e2:	f003 f9c7 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80048e6:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <menu+0x36dc>)
 80048e8:	2101      	movs	r1, #1
 80048ea:	2002      	movs	r0, #2
 80048ec:	f003 f9c2 	bl	8007c74 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80048f0:	2108      	movs	r1, #8
 80048f2:	481d      	ldr	r0, [pc, #116]	; (8004968 <menu+0x36e0>)
 80048f4:	f004 fce4 	bl	80092c0 <HAL_GPIO_ReadPin>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d129      	bne.n	8004952 <menu+0x36ca>
			menuGiris = 0;
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <menu+0x36e4>)
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004904:	bf00      	nop
 8004906:	481a      	ldr	r0, [pc, #104]	; (8004970 <menu+0x36e8>)
 8004908:	f005 fb03 	bl	8009f12 <HAL_I2C_GetError>
 800490c:	4603      	mov	r3, r0
 800490e:	2b04      	cmp	r3, #4
 8004910:	d0f9      	beq.n	8004906 <menu+0x367e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004912:	bf00      	nop
 8004914:	4816      	ldr	r0, [pc, #88]	; (8004970 <menu+0x36e8>)
 8004916:	f005 faef 	bl	8009ef8 <HAL_I2C_GetState>
 800491a:	4603      	mov	r3, r0
 800491c:	2b20      	cmp	r3, #32
 800491e:	d1f9      	bne.n	8004914 <menu+0x368c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004920:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	236e      	movs	r3, #110	; 0x6e
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	4b12      	ldr	r3, [pc, #72]	; (8004974 <menu+0x36ec>)
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	236e      	movs	r3, #110	; 0x6e
 8004930:	2200      	movs	r2, #0
 8004932:	21a0      	movs	r1, #160	; 0xa0
 8004934:	480e      	ldr	r0, [pc, #56]	; (8004970 <menu+0x36e8>)
 8004936:	f004 ff7d 	bl	8009834 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800493a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800493e:	f003 feef 	bl	8008720 <HAL_Delay>

			lcd_clear();
 8004942:	f003 f9c3 	bl	8007ccc <lcd_clear>
			HAL_Delay(500);
 8004946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800494a:	f003 fee9 	bl	8008720 <HAL_Delay>
			NVIC_SystemReset();
 800494e:	f7fc fc85 	bl	800125c <__NVIC_SystemReset>
		}
	}
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000249 	.word	0x20000249
 8004960:	0800db08 	.word	0x0800db08
 8004964:	0800db1c 	.word	0x0800db1c
 8004968:	40010800 	.word	0x40010800
 800496c:	20000245 	.word	0x20000245
 8004970:	200002b8 	.word	0x200002b8
 8004974:	2000012c 	.word	0x2000012c

08004978 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d105      	bne.n	8004994 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004988:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <lcdUpdate+0x9c>)
 800498a:	2101      	movs	r1, #1
 800498c:	2002      	movs	r0, #2
 800498e:	f003 f971 	bl	8007c74 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004992:	e03b      	b.n	8004a0c <lcdUpdate+0x94>
	} else if(y==2) {
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d105      	bne.n	80049a6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <lcdUpdate+0x9c>)
 800499c:	2102      	movs	r1, #2
 800499e:	2002      	movs	r0, #2
 80049a0:	f003 f968 	bl	8007c74 <lcd_print>
}
 80049a4:	e032      	b.n	8004a0c <lcdUpdate+0x94>
	} else if(y==3) {
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d105      	bne.n	80049b8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <lcdUpdate+0x9c>)
 80049ae:	2103      	movs	r1, #3
 80049b0:	2002      	movs	r0, #2
 80049b2:	f003 f95f 	bl	8007c74 <lcd_print>
}
 80049b6:	e029      	b.n	8004a0c <lcdUpdate+0x94>
	} else if(y==4) {
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d105      	bne.n	80049ca <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80049be:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <lcdUpdate+0x9c>)
 80049c0:	2104      	movs	r1, #4
 80049c2:	2002      	movs	r0, #2
 80049c4:	f003 f956 	bl	8007c74 <lcd_print>
}
 80049c8:	e020      	b.n	8004a0c <lcdUpdate+0x94>
	} else if(y==5) {
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d105      	bne.n	80049dc <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80049d0:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <lcdUpdate+0x9c>)
 80049d2:	2105      	movs	r1, #5
 80049d4:	2002      	movs	r0, #2
 80049d6:	f003 f94d 	bl	8007c74 <lcd_print>
}
 80049da:	e017      	b.n	8004a0c <lcdUpdate+0x94>
	} else if(y==6) {
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d105      	bne.n	80049ee <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80049e2:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <lcdUpdate+0x9c>)
 80049e4:	2106      	movs	r1, #6
 80049e6:	2002      	movs	r0, #2
 80049e8:	f003 f944 	bl	8007c74 <lcd_print>
}
 80049ec:	e00e      	b.n	8004a0c <lcdUpdate+0x94>
	} else if (y==7) {
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	2b07      	cmp	r3, #7
 80049f2:	d10b      	bne.n	8004a0c <lcdUpdate+0x94>
		lcd_clear();
 80049f4:	f003 f96a 	bl	8007ccc <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <lcdUpdate+0xa0>)
 80049fa:	2104      	movs	r1, #4
 80049fc:	2001      	movs	r0, #1
 80049fe:	f003 f939 	bl	8007c74 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004a02:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <lcdUpdate+0xa4>)
 8004a04:	2106      	movs	r1, #6
 8004a06:	2002      	movs	r0, #2
 8004a08:	f003 f934 	bl	8007c74 <lcd_print>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	0800db30 	.word	0x0800db30
 8004a18:	0800db34 	.word	0x0800db34
 8004a1c:	0800db3c 	.word	0x0800db3c

08004a20 <bekle>:

void bekle() {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
	timer1=millis;
 8004a24:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <bekle+0x124>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a47      	ldr	r2, [pc, #284]	; (8004b48 <bekle+0x128>)
 8004a2a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a2c:	e002      	b.n	8004a34 <bekle+0x14>
    	butonKontrol = 1;
 8004a2e:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <bekle+0x12c>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a34:	2101      	movs	r1, #1
 8004a36:	4846      	ldr	r0, [pc, #280]	; (8004b50 <bekle+0x130>)
 8004a38:	f004 fc42 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d109      	bne.n	8004a56 <bekle+0x36>
 8004a42:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <bekle+0x124>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b40      	ldr	r3, [pc, #256]	; (8004b48 <bekle+0x128>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d0ef      	beq.n	8004a2e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a4e:	e002      	b.n	8004a56 <bekle+0x36>
    	butonKontrol = 1;
 8004a50:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <bekle+0x12c>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a56:	2108      	movs	r1, #8
 8004a58:	483e      	ldr	r0, [pc, #248]	; (8004b54 <bekle+0x134>)
 8004a5a:	f004 fc31 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d109      	bne.n	8004a78 <bekle+0x58>
 8004a64:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <bekle+0x124>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b37      	ldr	r3, [pc, #220]	; (8004b48 <bekle+0x128>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0ef      	beq.n	8004a50 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a70:	e002      	b.n	8004a78 <bekle+0x58>
    	butonKontrol = 1;
 8004a72:	4b36      	ldr	r3, [pc, #216]	; (8004b4c <bekle+0x12c>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a78:	2102      	movs	r1, #2
 8004a7a:	4835      	ldr	r0, [pc, #212]	; (8004b50 <bekle+0x130>)
 8004a7c:	f004 fc20 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d109      	bne.n	8004a9a <bekle+0x7a>
 8004a86:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <bekle+0x124>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b2f      	ldr	r3, [pc, #188]	; (8004b48 <bekle+0x128>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d0ef      	beq.n	8004a72 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a92:	e002      	b.n	8004a9a <bekle+0x7a>
    	butonKontrol = 1;
 8004a94:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <bekle+0x12c>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a9a:	2104      	movs	r1, #4
 8004a9c:	482c      	ldr	r0, [pc, #176]	; (8004b50 <bekle+0x130>)
 8004a9e:	f004 fc0f 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d109      	bne.n	8004abc <bekle+0x9c>
 8004aa8:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <bekle+0x124>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <bekle+0x128>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0ef      	beq.n	8004a94 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ab4:	e002      	b.n	8004abc <bekle+0x9c>
    	butonKontrol = 1;
 8004ab6:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <bekle+0x12c>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004abc:	2108      	movs	r1, #8
 8004abe:	4824      	ldr	r0, [pc, #144]	; (8004b50 <bekle+0x130>)
 8004ac0:	f004 fbfe 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d109      	bne.n	8004ade <bekle+0xbe>
 8004aca:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <bekle+0x124>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <bekle+0x128>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d0ef      	beq.n	8004ab6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ad6:	e002      	b.n	8004ade <bekle+0xbe>
    	butonKontrol = 1;
 8004ad8:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <bekle+0x12c>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ade:	2180      	movs	r1, #128	; 0x80
 8004ae0:	481c      	ldr	r0, [pc, #112]	; (8004b54 <bekle+0x134>)
 8004ae2:	f004 fbed 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <bekle+0xe0>
 8004aec:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <bekle+0x124>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <bekle+0x128>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d0ef      	beq.n	8004ad8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004af8:	e002      	b.n	8004b00 <bekle+0xe0>
    	butonKontrol = 1;
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <bekle+0x12c>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b04:	4813      	ldr	r0, [pc, #76]	; (8004b54 <bekle+0x134>)
 8004b06:	f004 fbdb 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <bekle+0x104>
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <bekle+0x124>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <bekle+0x128>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d0ee      	beq.n	8004afa <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b1c:	e002      	b.n	8004b24 <bekle+0x104>
    	butonKontrol = 1;
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <bekle+0x12c>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b28:	480a      	ldr	r0, [pc, #40]	; (8004b54 <bekle+0x134>)
 8004b2a:	f004 fbc9 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <bekle+0x120>
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <bekle+0x124>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <bekle+0x128>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d0ee      	beq.n	8004b1e <bekle+0xfe>
    }

}
 8004b40:	bf00      	nop
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000204 	.word	0x20000204
 8004b48:	2000020c 	.word	0x2000020c
 8004b4c:	20000257 	.word	0x20000257
 8004b50:	40010800 	.word	0x40010800
 8004b54:	40011000 	.word	0x40011000

08004b58 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <checkLCDBacklight+0x24>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <checkLCDBacklight+0x28>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b3b      	cmp	r3, #59	; 0x3b
 8004b68:	d903      	bls.n	8004b72 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f003 f8ce 	bl	8007d0c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004b70:	e002      	b.n	8004b78 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004b72:	2001      	movs	r0, #1
 8004b74:	f003 f8ca 	bl	8007d0c <lcd_backlight>
}
 8004b78:	bf00      	nop
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000204 	.word	0x20000204
 8004b80:	20000220 	.word	0x20000220

08004b84 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <checkBasincSalteri+0x54>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <checkBasincSalteri+0x12>
		basincVar=1;
 8004b90:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <checkBasincSalteri+0x58>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <checkBasincSalteri+0x54>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d119      	bne.n	8004bd2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ba2:	480f      	ldr	r0, [pc, #60]	; (8004be0 <checkBasincSalteri+0x5c>)
 8004ba4:	f004 fb8c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <checkBasincSalteri+0x60>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <checkBasincSalteri+0x64>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d90a      	bls.n	8004bd2 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004bbc:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <checkBasincSalteri+0x58>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004bc2:	e006      	b.n	8004bd2 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004bc4:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <checkBasincSalteri+0x60>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a07      	ldr	r2, [pc, #28]	; (8004be8 <checkBasincSalteri+0x64>)
 8004bca:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <checkBasincSalteri+0x58>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2000022f 	.word	0x2000022f
 8004bdc:	2000022b 	.word	0x2000022b
 8004be0:	40011000 	.word	0x40011000
 8004be4:	20000204 	.word	0x20000204
 8004be8:	2000021c 	.word	0x2000021c

08004bec <checkBasGonder>:

void checkBasGonder() {
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004bf0:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <checkBasGonder+0x74>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d10b      	bne.n	8004c10 <checkBasGonder+0x24>
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <checkBasGonder+0x78>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <checkBasGonder+0x24>
 8004c00:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <checkBasGonder+0x7c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004c08:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <checkBasGonder+0x80>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e009      	b.n	8004c24 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004c10:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <checkBasGonder+0x78>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f083 0301 	eor.w	r3, r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <checkBasGonder+0x80>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <checkBasGonder+0x74>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d10b      	bne.n	8004c44 <checkBasGonder+0x58>
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <checkBasGonder+0x84>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <checkBasGonder+0x58>
 8004c34:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <checkBasGonder+0x7c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <checkBasGonder+0x88>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004c42:	e009      	b.n	8004c58 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <checkBasGonder+0x84>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f083 0301 	eor.w	r3, r3, #1
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <checkBasGonder+0x88>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	20000229 	.word	0x20000229
 8004c64:	2000025d 	.word	0x2000025d
 8004c68:	20000237 	.word	0x20000237
 8004c6c:	20000264 	.word	0x20000264
 8004c70:	20000260 	.word	0x20000260
 8004c74:	20000265 	.word	0x20000265

08004c78 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <checkKapiSecimleri+0x98>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004c84:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <checkKapiSecimleri+0x9c>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004c8a:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <checkKapiSecimleri+0x98>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10e      	bne.n	8004cb0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c96:	4820      	ldr	r0, [pc, #128]	; (8004d18 <checkKapiSecimleri+0xa0>)
 8004c98:	f004 fb12 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <checkKapiSecimleri+0x9c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e002      	b.n	8004cb0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004caa:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <checkKapiSecimleri+0x9c>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004cb0:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <checkKapiSecimleri+0x98>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d10e      	bne.n	8004cd6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cbc:	4816      	ldr	r0, [pc, #88]	; (8004d18 <checkKapiSecimleri+0xa0>)
 8004cbe:	f004 faff 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <checkKapiSecimleri+0x9c>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e002      	b.n	8004cd6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <checkKapiSecimleri+0x9c>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004cd6:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <checkKapiSecimleri+0x98>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d116      	bne.n	8004d0c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ce2:	480d      	ldr	r0, [pc, #52]	; (8004d18 <checkKapiSecimleri+0xa0>)
 8004ce4:	f004 faec 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <checkKapiSecimleri+0x8e>
 8004cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cf2:	4809      	ldr	r0, [pc, #36]	; (8004d18 <checkKapiSecimleri+0xa0>)
 8004cf4:	f004 fae4 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <checkKapiSecimleri+0x9c>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004d04:	e002      	b.n	8004d0c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004d06:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <checkKapiSecimleri+0x9c>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000230 	.word	0x20000230
 8004d14:	2000027b 	.word	0x2000027b
 8004d18:	40010800 	.word	0x40010800

08004d1c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004d20:	4b62      	ldr	r3, [pc, #392]	; (8004eac <checkAktifCalisma+0x190>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f041 833e 	bne.w	80063a6 <checkAktifCalisma+0x168a>
 8004d2a:	4b61      	ldr	r3, [pc, #388]	; (8004eb0 <checkAktifCalisma+0x194>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f041 8339 	bne.w	80063a6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004d34:	4b5f      	ldr	r3, [pc, #380]	; (8004eb4 <checkAktifCalisma+0x198>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11a      	bne.n	8004d72 <checkAktifCalisma+0x56>
 8004d3c:	4b5e      	ldr	r3, [pc, #376]	; (8004eb8 <checkAktifCalisma+0x19c>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d116      	bne.n	8004d72 <checkAktifCalisma+0x56>
 8004d44:	4b5d      	ldr	r3, [pc, #372]	; (8004ebc <checkAktifCalisma+0x1a0>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <checkAktifCalisma+0x46>
 8004d4c:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <checkAktifCalisma+0x1a4>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f083 0301 	eor.w	r3, r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <checkAktifCalisma+0x46>
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	; (8004ec4 <checkAktifCalisma+0x1a8>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d007      	beq.n	8004d72 <checkAktifCalisma+0x56>
 8004d62:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <checkAktifCalisma+0x1ac>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <checkAktifCalisma+0x80>
 8004d6a:	4b58      	ldr	r3, [pc, #352]	; (8004ecc <checkAktifCalisma+0x1b0>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d114      	bne.n	8004d9c <checkAktifCalisma+0x80>
 8004d72:	4b57      	ldr	r3, [pc, #348]	; (8004ed0 <checkAktifCalisma+0x1b4>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <checkAktifCalisma+0x80>
 8004d7a:	4b56      	ldr	r3, [pc, #344]	; (8004ed4 <checkAktifCalisma+0x1b8>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004d82:	2201      	movs	r2, #1
 8004d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d88:	4853      	ldr	r0, [pc, #332]	; (8004ed8 <checkAktifCalisma+0x1bc>)
 8004d8a:	f004 fab0 	bl	80092ee <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004d8e:	4b53      	ldr	r3, [pc, #332]	; (8004edc <checkAktifCalisma+0x1c0>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004d94:	4b52      	ldr	r3, [pc, #328]	; (8004ee0 <checkAktifCalisma+0x1c4>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e008      	b.n	8004dae <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004da2:	484d      	ldr	r0, [pc, #308]	; (8004ed8 <checkAktifCalisma+0x1bc>)
 8004da4:	f004 faa3 	bl	80092ee <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004da8:	4b4c      	ldr	r3, [pc, #304]	; (8004edc <checkAktifCalisma+0x1c0>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004dae:	4b40      	ldr	r3, [pc, #256]	; (8004eb0 <checkAktifCalisma+0x194>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d160      	bne.n	8004e78 <checkAktifCalisma+0x15c>
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <checkAktifCalisma+0x1b4>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d05c      	beq.n	8004e78 <checkAktifCalisma+0x15c>
 8004dbe:	4b45      	ldr	r3, [pc, #276]	; (8004ed4 <checkAktifCalisma+0x1b8>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d058      	beq.n	8004e78 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dca:	4843      	ldr	r0, [pc, #268]	; (8004ed8 <checkAktifCalisma+0x1bc>)
 8004dcc:	f004 fa78 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <checkAktifCalisma+0xc2>
 8004dd6:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <checkAktifCalisma+0x1c8>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04c      	beq.n	8004e78 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004dde:	2102      	movs	r1, #2
 8004de0:	4841      	ldr	r0, [pc, #260]	; (8004ee8 <checkAktifCalisma+0x1cc>)
 8004de2:	f004 fa6d 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d145      	bne.n	8004e78 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004dec:	4b3f      	ldr	r3, [pc, #252]	; (8004eec <checkAktifCalisma+0x1d0>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d041      	beq.n	8004e78 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004df8:	4837      	ldr	r0, [pc, #220]	; (8004ed8 <checkAktifCalisma+0x1bc>)
 8004dfa:	f004 fa61 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d10e      	bne.n	8004e22 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e08:	4833      	ldr	r0, [pc, #204]	; (8004ed8 <checkAktifCalisma+0x1bc>)
 8004e0a:	f004 fa59 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d106      	bne.n	8004e22 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004e14:	2140      	movs	r1, #64	; 0x40
 8004e16:	4834      	ldr	r0, [pc, #208]	; (8004ee8 <checkAktifCalisma+0x1cc>)
 8004e18:	f004 fa52 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d003      	beq.n	8004e2a <checkAktifCalisma+0x10e>
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <checkAktifCalisma+0x198>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d026      	beq.n	8004e78 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <checkAktifCalisma+0x1a0>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	f083 0301 	eor.w	r3, r3, #1
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01f      	beq.n	8004e78 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004e38:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <checkAktifCalisma+0x19c>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	f083 0301 	eor.w	r3, r3, #1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004e46:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <checkAktifCalisma+0x1ac>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f083 0301 	eor.w	r3, r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d011      	beq.n	8004e78 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004e54:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <checkAktifCalisma+0x1d4>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	f083 0301 	eor.w	r3, r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004e62:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <checkAktifCalisma+0x1d8>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	f083 0301 	eor.w	r3, r3, #1
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004e70:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <checkAktifCalisma+0x198>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <checkAktifCalisma+0x198>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <checkAktifCalisma+0x198>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d03a      	beq.n	8004efc <checkAktifCalisma+0x1e0>
 8004e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e8a:	4817      	ldr	r0, [pc, #92]	; (8004ee8 <checkAktifCalisma+0x1cc>)
 8004e8c:	f004 fa18 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d132      	bne.n	8004efc <checkAktifCalisma+0x1e0>
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <checkAktifCalisma+0x1dc>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d02e      	beq.n	8004efc <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea4:	480c      	ldr	r0, [pc, #48]	; (8004ed8 <checkAktifCalisma+0x1bc>)
 8004ea6:	f004 fa22 	bl	80092ee <HAL_GPIO_WritePin>
 8004eaa:	e02d      	b.n	8004f08 <checkAktifCalisma+0x1ec>
 8004eac:	20000246 	.word	0x20000246
 8004eb0:	20000245 	.word	0x20000245
 8004eb4:	2000025d 	.word	0x2000025d
 8004eb8:	2000025e 	.word	0x2000025e
 8004ebc:	20000260 	.word	0x20000260
 8004ec0:	20000258 	.word	0x20000258
 8004ec4:	2000023b 	.word	0x2000023b
 8004ec8:	2000025f 	.word	0x2000025f
 8004ecc:	2000023a 	.word	0x2000023a
 8004ed0:	2000027a 	.word	0x2000027a
 8004ed4:	2000027b 	.word	0x2000027b
 8004ed8:	40010c00 	.word	0x40010c00
 8004edc:	2000027c 	.word	0x2000027c
 8004ee0:	20000267 	.word	0x20000267
 8004ee4:	20000264 	.word	0x20000264
 8004ee8:	40011000 	.word	0x40011000
 8004eec:	2000022b 	.word	0x2000022b
 8004ef0:	20000262 	.word	0x20000262
 8004ef4:	20000263 	.word	0x20000263
 8004ef8:	20000236 	.word	0x20000236
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f02:	4860      	ldr	r0, [pc, #384]	; (8005084 <checkAktifCalisma+0x368>)
 8004f04:	f004 f9f3 	bl	80092ee <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004f08:	4b5f      	ldr	r3, [pc, #380]	; (8005088 <checkAktifCalisma+0x36c>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <checkAktifCalisma+0x21c>
 8004f10:	4b5e      	ldr	r3, [pc, #376]	; (800508c <checkAktifCalisma+0x370>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d007      	beq.n	8004f28 <checkAktifCalisma+0x20c>
 8004f18:	4b5c      	ldr	r3, [pc, #368]	; (800508c <checkAktifCalisma+0x370>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d003      	beq.n	8004f28 <checkAktifCalisma+0x20c>
 8004f20:	4b5b      	ldr	r3, [pc, #364]	; (8005090 <checkAktifCalisma+0x374>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004f28:	2201      	movs	r2, #1
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	4855      	ldr	r0, [pc, #340]	; (8005084 <checkAktifCalisma+0x368>)
 8004f2e:	f004 f9de 	bl	80092ee <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004f32:	4b58      	ldr	r3, [pc, #352]	; (8005094 <checkAktifCalisma+0x378>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004f38:	4b56      	ldr	r3, [pc, #344]	; (8005094 <checkAktifCalisma+0x378>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d02f      	beq.n	8004fa0 <checkAktifCalisma+0x284>
 8004f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f44:	484f      	ldr	r0, [pc, #316]	; (8005084 <checkAktifCalisma+0x368>)
 8004f46:	f004 f9bb 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d106      	bne.n	8004f5e <checkAktifCalisma+0x242>
 8004f50:	4b51      	ldr	r3, [pc, #324]	; (8005098 <checkAktifCalisma+0x37c>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	f083 0301 	eor.w	r3, r3, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <checkAktifCalisma+0x250>
 8004f5e:	2102      	movs	r1, #2
 8004f60:	484e      	ldr	r0, [pc, #312]	; (800509c <checkAktifCalisma+0x380>)
 8004f62:	f004 f9ad 	bl	80092c0 <HAL_GPIO_ReadPin>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d119      	bne.n	8004fa0 <checkAktifCalisma+0x284>
 8004f6c:	4b4c      	ldr	r3, [pc, #304]	; (80050a0 <checkAktifCalisma+0x384>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <checkAktifCalisma+0x284>
 8004f74:	4b4b      	ldr	r3, [pc, #300]	; (80050a4 <checkAktifCalisma+0x388>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d011      	beq.n	8004fa0 <checkAktifCalisma+0x284>
 8004f7c:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <checkAktifCalisma+0x38c>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <checkAktifCalisma+0x284>
 8004f84:	4b49      	ldr	r3, [pc, #292]	; (80050ac <checkAktifCalisma+0x390>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f083 0301 	eor.w	r3, r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d006      	beq.n	8004fa0 <checkAktifCalisma+0x284>
			timer2=millis;
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <checkAktifCalisma+0x394>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a47      	ldr	r2, [pc, #284]	; (80050b4 <checkAktifCalisma+0x398>)
 8004f98:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004f9a:	4b44      	ldr	r3, [pc, #272]	; (80050ac <checkAktifCalisma+0x390>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004fa0:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <checkAktifCalisma+0x394>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b43      	ldr	r3, [pc, #268]	; (80050b4 <checkAktifCalisma+0x398>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	4a43      	ldr	r2, [pc, #268]	; (80050b8 <checkAktifCalisma+0x39c>)
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d303      	bcc.n	8004fba <checkAktifCalisma+0x29e>
 8004fb2:	4b3e      	ldr	r3, [pc, #248]	; (80050ac <checkAktifCalisma+0x390>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d111      	bne.n	8004fde <checkAktifCalisma+0x2c2>
 8004fba:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <checkAktifCalisma+0x384>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	f083 0301 	eor.w	r3, r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <checkAktifCalisma+0x2c2>
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <checkAktifCalisma+0x388>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f083 0301 	eor.w	r3, r3, #1
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <checkAktifCalisma+0x2c2>
 8004fd6:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <checkAktifCalisma+0x38c>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2104      	movs	r1, #4
 8004fe2:	4828      	ldr	r0, [pc, #160]	; (8005084 <checkAktifCalisma+0x368>)
 8004fe4:	f004 f983 	bl	80092ee <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004fe8:	4b2a      	ldr	r3, [pc, #168]	; (8005094 <checkAktifCalisma+0x378>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <checkAktifCalisma+0x390>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004ff4:	4b31      	ldr	r3, [pc, #196]	; (80050bc <checkAktifCalisma+0x3a0>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004ffc:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <checkAktifCalisma+0x3a4>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005002:	4b2e      	ldr	r3, [pc, #184]	; (80050bc <checkAktifCalisma+0x3a0>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d116      	bne.n	8005038 <checkAktifCalisma+0x31c>
 800500a:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <checkAktifCalisma+0x3a8>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d112      	bne.n	8005038 <checkAktifCalisma+0x31c>
 8005012:	2101      	movs	r1, #1
 8005014:	4821      	ldr	r0, [pc, #132]	; (800509c <checkAktifCalisma+0x380>)
 8005016:	f004 f953 	bl	80092c0 <HAL_GPIO_ReadPin>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <checkAktifCalisma+0x31c>
 8005020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005024:	4817      	ldr	r0, [pc, #92]	; (8005084 <checkAktifCalisma+0x368>)
 8005026:	f004 f94b 	bl	80092c0 <HAL_GPIO_ReadPin>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d103      	bne.n	8005038 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005030:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <checkAktifCalisma+0x3a4>)
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e011      	b.n	800505c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005038:	4b20      	ldr	r3, [pc, #128]	; (80050bc <checkAktifCalisma+0x3a0>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10d      	bne.n	800505c <checkAktifCalisma+0x340>
 8005040:	2101      	movs	r1, #1
 8005042:	4816      	ldr	r0, [pc, #88]	; (800509c <checkAktifCalisma+0x380>)
 8005044:	f004 f93c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d106      	bne.n	800505c <checkAktifCalisma+0x340>
 800504e:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <checkAktifCalisma+0x3a8>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005056:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <checkAktifCalisma+0x3a4>)
 8005058:	2200      	movs	r2, #0
 800505a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800505c:	4b17      	ldr	r3, [pc, #92]	; (80050bc <checkAktifCalisma+0x3a0>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d134      	bne.n	80050ce <checkAktifCalisma+0x3b2>
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <checkAktifCalisma+0x3a8>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d130      	bne.n	80050ce <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800506c:	2101      	movs	r1, #1
 800506e:	480b      	ldr	r0, [pc, #44]	; (800509c <checkAktifCalisma+0x380>)
 8005070:	f004 f926 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d126      	bne.n	80050c8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <checkAktifCalisma+0x3a4>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e025      	b.n	80050ce <checkAktifCalisma+0x3b2>
 8005082:	bf00      	nop
 8005084:	40010c00 	.word	0x40010c00
 8005088:	2000025d 	.word	0x2000025d
 800508c:	20000237 	.word	0x20000237
 8005090:	2000023b 	.word	0x2000023b
 8005094:	20000261 	.word	0x20000261
 8005098:	20000264 	.word	0x20000264
 800509c:	40011000 	.word	0x40011000
 80050a0:	2000027a 	.word	0x2000027a
 80050a4:	2000027b 	.word	0x2000027b
 80050a8:	2000022b 	.word	0x2000022b
 80050ac:	20000259 	.word	0x20000259
 80050b0:	20000204 	.word	0x20000204
 80050b4:	20000210 	.word	0x20000210
 80050b8:	2000023c 	.word	0x2000023c
 80050bc:	2000022c 	.word	0x2000022c
 80050c0:	2000027f 	.word	0x2000027f
 80050c4:	20000229 	.word	0x20000229
			} else {
				cerceveVar=0;
 80050c8:	4b7f      	ldr	r3, [pc, #508]	; (80052c8 <checkAktifCalisma+0x5ac>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80050ce:	4b7f      	ldr	r3, [pc, #508]	; (80052cc <checkAktifCalisma+0x5b0>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d17c      	bne.n	80051d0 <checkAktifCalisma+0x4b4>
 80050d6:	4b7e      	ldr	r3, [pc, #504]	; (80052d0 <checkAktifCalisma+0x5b4>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d078      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
 80050de:	4b7d      	ldr	r3, [pc, #500]	; (80052d4 <checkAktifCalisma+0x5b8>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d074      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80050e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050ea:	487b      	ldr	r0, [pc, #492]	; (80052d8 <checkAktifCalisma+0x5bc>)
 80050ec:	f004 f8e8 	bl	80092c0 <HAL_GPIO_ReadPin>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <checkAktifCalisma+0x3e2>
 80050f6:	4b79      	ldr	r3, [pc, #484]	; (80052dc <checkAktifCalisma+0x5c0>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d068      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80050fe:	4b72      	ldr	r3, [pc, #456]	; (80052c8 <checkAktifCalisma+0x5ac>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d064      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
 8005106:	4b76      	ldr	r3, [pc, #472]	; (80052e0 <checkAktifCalisma+0x5c4>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	f083 0301 	eor.w	r3, r3, #1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d05d      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005114:	2104      	movs	r1, #4
 8005116:	4873      	ldr	r0, [pc, #460]	; (80052e4 <checkAktifCalisma+0x5c8>)
 8005118:	f004 f8d2 	bl	80092c0 <HAL_GPIO_ReadPin>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <checkAktifCalisma+0x40e>
 8005122:	4b71      	ldr	r3, [pc, #452]	; (80052e8 <checkAktifCalisma+0x5cc>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d152      	bne.n	80051d0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800512a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800512e:	486a      	ldr	r0, [pc, #424]	; (80052d8 <checkAktifCalisma+0x5bc>)
 8005130:	f004 f8c6 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d10e      	bne.n	8005158 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800513a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800513e:	4866      	ldr	r0, [pc, #408]	; (80052d8 <checkAktifCalisma+0x5bc>)
 8005140:	f004 f8be 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d106      	bne.n	8005158 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800514a:	2140      	movs	r1, #64	; 0x40
 800514c:	4865      	ldr	r0, [pc, #404]	; (80052e4 <checkAktifCalisma+0x5c8>)
 800514e:	f004 f8b7 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005152:	4603      	mov	r3, r0
 8005154:	2b01      	cmp	r3, #1
 8005156:	d003      	beq.n	8005160 <checkAktifCalisma+0x444>
 8005158:	4b64      	ldr	r3, [pc, #400]	; (80052ec <checkAktifCalisma+0x5d0>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d037      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005160:	4b63      	ldr	r3, [pc, #396]	; (80052f0 <checkAktifCalisma+0x5d4>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f083 0301 	eor.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d030      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800516e:	4b61      	ldr	r3, [pc, #388]	; (80052f4 <checkAktifCalisma+0x5d8>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	f083 0301 	eor.w	r3, r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d029      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800517c:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <checkAktifCalisma+0x5dc>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	f083 0301 	eor.w	r3, r3, #1
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d022      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800518a:	4b5c      	ldr	r3, [pc, #368]	; (80052fc <checkAktifCalisma+0x5e0>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	f083 0301 	eor.w	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01b      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005198:	4b59      	ldr	r3, [pc, #356]	; (8005300 <checkAktifCalisma+0x5e4>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f083 0301 	eor.w	r3, r3, #1
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d014      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80051a6:	4b57      	ldr	r3, [pc, #348]	; (8005304 <checkAktifCalisma+0x5e8>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f083 0301 	eor.w	r3, r3, #1
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00d      	beq.n	80051d0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80051b4:	2201      	movs	r2, #1
 80051b6:	2102      	movs	r1, #2
 80051b8:	4847      	ldr	r0, [pc, #284]	; (80052d8 <checkAktifCalisma+0x5bc>)
 80051ba:	f004 f898 	bl	80092ee <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80051be:	4b4b      	ldr	r3, [pc, #300]	; (80052ec <checkAktifCalisma+0x5d0>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80051c4:	4b50      	ldr	r3, [pc, #320]	; (8005308 <checkAktifCalisma+0x5ec>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80051ca:	4b50      	ldr	r3, [pc, #320]	; (800530c <checkAktifCalisma+0x5f0>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80051d0:	4b46      	ldr	r3, [pc, #280]	; (80052ec <checkAktifCalisma+0x5d0>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d033      	beq.n	8005240 <checkAktifCalisma+0x524>
 80051d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051dc:	483e      	ldr	r0, [pc, #248]	; (80052d8 <checkAktifCalisma+0x5bc>)
 80051de:	f004 f86f 	bl	80092c0 <HAL_GPIO_ReadPin>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d106      	bne.n	80051f6 <checkAktifCalisma+0x4da>
 80051e8:	4b3c      	ldr	r3, [pc, #240]	; (80052dc <checkAktifCalisma+0x5c0>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	f083 0301 	eor.w	r3, r3, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <checkAktifCalisma+0x4f0>
 80051f6:	2104      	movs	r1, #4
 80051f8:	483a      	ldr	r0, [pc, #232]	; (80052e4 <checkAktifCalisma+0x5c8>)
 80051fa:	f004 f861 	bl	80092c0 <HAL_GPIO_ReadPin>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b01      	cmp	r3, #1
 8005202:	d11d      	bne.n	8005240 <checkAktifCalisma+0x524>
 8005204:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <checkAktifCalisma+0x5cc>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d019      	beq.n	8005240 <checkAktifCalisma+0x524>
 800520c:	4b30      	ldr	r3, [pc, #192]	; (80052d0 <checkAktifCalisma+0x5b4>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d015      	beq.n	8005240 <checkAktifCalisma+0x524>
 8005214:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <checkAktifCalisma+0x5b8>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d011      	beq.n	8005240 <checkAktifCalisma+0x524>
 800521c:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <checkAktifCalisma+0x5ac>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <checkAktifCalisma+0x524>
 8005224:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <checkAktifCalisma+0x5f4>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	f083 0301 	eor.w	r3, r3, #1
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <checkAktifCalisma+0x524>
			timer2=millis;
 8005232:	4b38      	ldr	r3, [pc, #224]	; (8005314 <checkAktifCalisma+0x5f8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a38      	ldr	r2, [pc, #224]	; (8005318 <checkAktifCalisma+0x5fc>)
 8005238:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800523a:	4b35      	ldr	r3, [pc, #212]	; (8005310 <checkAktifCalisma+0x5f4>)
 800523c:	2201      	movs	r2, #1
 800523e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005240:	4b34      	ldr	r3, [pc, #208]	; (8005314 <checkAktifCalisma+0x5f8>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4b34      	ldr	r3, [pc, #208]	; (8005318 <checkAktifCalisma+0x5fc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	4a34      	ldr	r2, [pc, #208]	; (800531c <checkAktifCalisma+0x600>)
 800524c:	7812      	ldrb	r2, [r2, #0]
 800524e:	4293      	cmp	r3, r2
 8005250:	d303      	bcc.n	800525a <checkAktifCalisma+0x53e>
 8005252:	4b2f      	ldr	r3, [pc, #188]	; (8005310 <checkAktifCalisma+0x5f4>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d114      	bne.n	8005284 <checkAktifCalisma+0x568>
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <checkAktifCalisma+0x5b4>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	f083 0301 	eor.w	r3, r3, #1
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10d      	bne.n	8005284 <checkAktifCalisma+0x568>
 8005268:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <checkAktifCalisma+0x5b8>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f083 0301 	eor.w	r3, r3, #1
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <checkAktifCalisma+0x568>
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <checkAktifCalisma+0x5ac>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	f083 0301 	eor.w	r3, r3, #1
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005284:	2200      	movs	r2, #0
 8005286:	2102      	movs	r1, #2
 8005288:	4813      	ldr	r0, [pc, #76]	; (80052d8 <checkAktifCalisma+0x5bc>)
 800528a:	f004 f830 	bl	80092ee <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <checkAktifCalisma+0x5d0>)
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005294:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <checkAktifCalisma+0x5f4>)
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <checkAktifCalisma+0x5d0>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d040      	beq.n	8005324 <checkAktifCalisma+0x608>
 80052a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052a6:	480f      	ldr	r0, [pc, #60]	; (80052e4 <checkAktifCalisma+0x5c8>)
 80052a8:	f004 f80a 	bl	80092c0 <HAL_GPIO_ReadPin>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d138      	bne.n	8005324 <checkAktifCalisma+0x608>
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <checkAktifCalisma+0x604>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d034      	beq.n	8005324 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80052ba:	2201      	movs	r2, #1
 80052bc:	2101      	movs	r1, #1
 80052be:	4806      	ldr	r0, [pc, #24]	; (80052d8 <checkAktifCalisma+0x5bc>)
 80052c0:	f004 f815 	bl	80092ee <HAL_GPIO_WritePin>
 80052c4:	e033      	b.n	800532e <checkAktifCalisma+0x612>
 80052c6:	bf00      	nop
 80052c8:	2000027f 	.word	0x2000027f
 80052cc:	20000245 	.word	0x20000245
 80052d0:	2000027a 	.word	0x2000027a
 80052d4:	2000027b 	.word	0x2000027b
 80052d8:	40010c00 	.word	0x40010c00
 80052dc:	20000265 	.word	0x20000265
 80052e0:	20000279 	.word	0x20000279
 80052e4:	40011000 	.word	0x40011000
 80052e8:	2000022e 	.word	0x2000022e
 80052ec:	20000260 	.word	0x20000260
 80052f0:	2000025d 	.word	0x2000025d
 80052f4:	20000261 	.word	0x20000261
 80052f8:	2000025e 	.word	0x2000025e
 80052fc:	2000025f 	.word	0x2000025f
 8005300:	20000262 	.word	0x20000262
 8005304:	20000263 	.word	0x20000263
 8005308:	20000268 	.word	0x20000268
 800530c:	20000289 	.word	0x20000289
 8005310:	20000258 	.word	0x20000258
 8005314:	20000204 	.word	0x20000204
 8005318:	20000210 	.word	0x20000210
 800531c:	2000023d 	.word	0x2000023d
 8005320:	2000022d 	.word	0x2000022d
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005324:	2200      	movs	r2, #0
 8005326:	2101      	movs	r1, #1
 8005328:	4836      	ldr	r0, [pc, #216]	; (8005404 <checkAktifCalisma+0x6e8>)
 800532a:	f003 ffe0 	bl	80092ee <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800532e:	4b36      	ldr	r3, [pc, #216]	; (8005408 <checkAktifCalisma+0x6ec>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 8080 	bne.w	8005438 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005338:	4b34      	ldr	r3, [pc, #208]	; (800540c <checkAktifCalisma+0x6f0>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d003      	beq.n	8005348 <checkAktifCalisma+0x62c>
 8005340:	4b32      	ldr	r3, [pc, #200]	; (800540c <checkAktifCalisma+0x6f0>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d177      	bne.n	8005438 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005348:	4b31      	ldr	r3, [pc, #196]	; (8005410 <checkAktifCalisma+0x6f4>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d073      	beq.n	8005438 <checkAktifCalisma+0x71c>
 8005350:	4b30      	ldr	r3, [pc, #192]	; (8005414 <checkAktifCalisma+0x6f8>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d06f      	beq.n	8005438 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800535c:	4829      	ldr	r0, [pc, #164]	; (8005404 <checkAktifCalisma+0x6e8>)
 800535e:	f003 ffaf 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d167      	bne.n	8005438 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800536c:	482a      	ldr	r0, [pc, #168]	; (8005418 <checkAktifCalisma+0x6fc>)
 800536e:	f003 ffa7 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <checkAktifCalisma+0x664>
 8005378:	4b28      	ldr	r3, [pc, #160]	; (800541c <checkAktifCalisma+0x700>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d15b      	bne.n	8005438 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005380:	2140      	movs	r1, #64	; 0x40
 8005382:	4825      	ldr	r0, [pc, #148]	; (8005418 <checkAktifCalisma+0x6fc>)
 8005384:	f003 ff9c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005388:	4603      	mov	r3, r0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10f      	bne.n	80053ae <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800538e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005392:	481c      	ldr	r0, [pc, #112]	; (8005404 <checkAktifCalisma+0x6e8>)
 8005394:	f003 ff94 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800539e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053a2:	4818      	ldr	r0, [pc, #96]	; (8005404 <checkAktifCalisma+0x6e8>)
 80053a4:	f003 ff8c 	bl	80092c0 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d003      	beq.n	80053b6 <checkAktifCalisma+0x69a>
 80053ae:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <checkAktifCalisma+0x704>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d040      	beq.n	8005438 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80053b6:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <checkAktifCalisma+0x708>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f083 0301 	eor.w	r3, r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d039      	beq.n	8005438 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80053c4:	4b18      	ldr	r3, [pc, #96]	; (8005428 <checkAktifCalisma+0x70c>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f083 0301 	eor.w	r3, r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d032      	beq.n	8005438 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80053d2:	4b16      	ldr	r3, [pc, #88]	; (800542c <checkAktifCalisma+0x710>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f083 0301 	eor.w	r3, r3, #1
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02b      	beq.n	8005438 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80053e0:	4b13      	ldr	r3, [pc, #76]	; (8005430 <checkAktifCalisma+0x714>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f083 0301 	eor.w	r3, r3, #1
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d024      	beq.n	8005438 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <checkAktifCalisma+0x718>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	f083 0301 	eor.w	r3, r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01d      	beq.n	8005438 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80053fc:	4b08      	ldr	r3, [pc, #32]	; (8005420 <checkAktifCalisma+0x704>)
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	e01c      	b.n	800543e <checkAktifCalisma+0x722>
 8005404:	40010c00 	.word	0x40010c00
 8005408:	20000245 	.word	0x20000245
 800540c:	20000237 	.word	0x20000237
 8005410:	2000027a 	.word	0x2000027a
 8005414:	2000027b 	.word	0x2000027b
 8005418:	40011000 	.word	0x40011000
 800541c:	20000238 	.word	0x20000238
 8005420:	2000025e 	.word	0x2000025e
 8005424:	2000025d 	.word	0x2000025d
 8005428:	20000261 	.word	0x20000261
 800542c:	20000260 	.word	0x20000260
 8005430:	2000025f 	.word	0x2000025f
 8005434:	20000263 	.word	0x20000263
		} else {
			devmotoryukaricalisiyor=0;
 8005438:	4b64      	ldr	r3, [pc, #400]	; (80055cc <checkAktifCalisma+0x8b0>)
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800543e:	4b63      	ldr	r3, [pc, #396]	; (80055cc <checkAktifCalisma+0x8b0>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005446:	2201      	movs	r2, #1
 8005448:	2120      	movs	r1, #32
 800544a:	4861      	ldr	r0, [pc, #388]	; (80055d0 <checkAktifCalisma+0x8b4>)
 800544c:	f003 ff4f 	bl	80092ee <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005450:	4b60      	ldr	r3, [pc, #384]	; (80055d4 <checkAktifCalisma+0x8b8>)
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005456:	4b5f      	ldr	r3, [pc, #380]	; (80055d4 <checkAktifCalisma+0x8b8>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d025      	beq.n	80054aa <checkAktifCalisma+0x78e>
 800545e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005462:	485d      	ldr	r0, [pc, #372]	; (80055d8 <checkAktifCalisma+0x8bc>)
 8005464:	f003 ff2c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d007      	beq.n	800547e <checkAktifCalisma+0x762>
 800546e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005472:	4857      	ldr	r0, [pc, #348]	; (80055d0 <checkAktifCalisma+0x8b4>)
 8005474:	f003 ff24 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d115      	bne.n	80054aa <checkAktifCalisma+0x78e>
 800547e:	4b57      	ldr	r3, [pc, #348]	; (80055dc <checkAktifCalisma+0x8c0>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d011      	beq.n	80054aa <checkAktifCalisma+0x78e>
 8005486:	4b56      	ldr	r3, [pc, #344]	; (80055e0 <checkAktifCalisma+0x8c4>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <checkAktifCalisma+0x78e>
 800548e:	4b55      	ldr	r3, [pc, #340]	; (80055e4 <checkAktifCalisma+0x8c8>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	f083 0301 	eor.w	r3, r3, #1
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <checkAktifCalisma+0x78e>
			timer2=millis;
 800549c:	4b52      	ldr	r3, [pc, #328]	; (80055e8 <checkAktifCalisma+0x8cc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a52      	ldr	r2, [pc, #328]	; (80055ec <checkAktifCalisma+0x8d0>)
 80054a2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80054a4:	4b4f      	ldr	r3, [pc, #316]	; (80055e4 <checkAktifCalisma+0x8c8>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80054aa:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <checkAktifCalisma+0x8cc>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b4f      	ldr	r3, [pc, #316]	; (80055ec <checkAktifCalisma+0x8d0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	4a4e      	ldr	r2, [pc, #312]	; (80055f0 <checkAktifCalisma+0x8d4>)
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d303      	bcc.n	80054c4 <checkAktifCalisma+0x7a8>
 80054bc:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <checkAktifCalisma+0x8c8>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10d      	bne.n	80054e0 <checkAktifCalisma+0x7c4>
 80054c4:	4b45      	ldr	r3, [pc, #276]	; (80055dc <checkAktifCalisma+0x8c0>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f083 0301 	eor.w	r3, r3, #1
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <checkAktifCalisma+0x7c4>
 80054d2:	4b43      	ldr	r3, [pc, #268]	; (80055e0 <checkAktifCalisma+0x8c4>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	f083 0301 	eor.w	r3, r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80054e0:	2200      	movs	r2, #0
 80054e2:	2120      	movs	r1, #32
 80054e4:	483a      	ldr	r0, [pc, #232]	; (80055d0 <checkAktifCalisma+0x8b4>)
 80054e6:	f003 ff02 	bl	80092ee <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80054ea:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <checkAktifCalisma+0x8b8>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80054f0:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <checkAktifCalisma+0x8c8>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80054f6:	4b3f      	ldr	r3, [pc, #252]	; (80055f4 <checkAktifCalisma+0x8d8>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f040 8088 	bne.w	8005610 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005500:	4b3d      	ldr	r3, [pc, #244]	; (80055f8 <checkAktifCalisma+0x8dc>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d003      	beq.n	8005510 <checkAktifCalisma+0x7f4>
 8005508:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <checkAktifCalisma+0x8dc>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d17f      	bne.n	8005610 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005510:	4b32      	ldr	r3, [pc, #200]	; (80055dc <checkAktifCalisma+0x8c0>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d07b      	beq.n	8005610 <checkAktifCalisma+0x8f4>
 8005518:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <checkAktifCalisma+0x8c4>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d077      	beq.n	8005610 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005520:	2140      	movs	r1, #64	; 0x40
 8005522:	482b      	ldr	r0, [pc, #172]	; (80055d0 <checkAktifCalisma+0x8b4>)
 8005524:	f003 fecc 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d170      	bne.n	8005610 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800552e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005532:	4827      	ldr	r0, [pc, #156]	; (80055d0 <checkAktifCalisma+0x8b4>)
 8005534:	f003 fec4 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <checkAktifCalisma+0x82a>
 800553e:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <checkAktifCalisma+0x8e0>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d164      	bne.n	8005610 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800554a:	4823      	ldr	r0, [pc, #140]	; (80055d8 <checkAktifCalisma+0x8bc>)
 800554c:	f003 feb8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10f      	bne.n	8005576 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800555a:	481f      	ldr	r0, [pc, #124]	; (80055d8 <checkAktifCalisma+0x8bc>)
 800555c:	f003 feb0 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005560:	4603      	mov	r3, r0
 8005562:	2b01      	cmp	r3, #1
 8005564:	d107      	bne.n	8005576 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800556a:	481b      	ldr	r0, [pc, #108]	; (80055d8 <checkAktifCalisma+0x8bc>)
 800556c:	f003 fea8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d003      	beq.n	800557e <checkAktifCalisma+0x862>
 8005576:	4b22      	ldr	r3, [pc, #136]	; (8005600 <checkAktifCalisma+0x8e4>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d048      	beq.n	8005610 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <checkAktifCalisma+0x8e8>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	f083 0301 	eor.w	r3, r3, #1
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d041      	beq.n	8005610 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800558c:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <checkAktifCalisma+0x8ec>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f083 0301 	eor.w	r3, r3, #1
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d03a      	beq.n	8005610 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800559a:	4b1c      	ldr	r3, [pc, #112]	; (800560c <checkAktifCalisma+0x8f0>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f083 0301 	eor.w	r3, r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d033      	beq.n	8005610 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <checkAktifCalisma+0x8b8>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f083 0301 	eor.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02c      	beq.n	8005610 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <checkAktifCalisma+0x8b0>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f083 0301 	eor.w	r3, r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d025      	beq.n	8005610 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <checkAktifCalisma+0x8e4>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e024      	b.n	8005616 <checkAktifCalisma+0x8fa>
 80055cc:	2000025e 	.word	0x2000025e
 80055d0:	40011000 	.word	0x40011000
 80055d4:	20000262 	.word	0x20000262
 80055d8:	40010c00 	.word	0x40010c00
 80055dc:	2000027a 	.word	0x2000027a
 80055e0:	2000027b 	.word	0x2000027b
 80055e4:	2000025a 	.word	0x2000025a
 80055e8:	20000204 	.word	0x20000204
 80055ec:	20000210 	.word	0x20000210
 80055f0:	2000023e 	.word	0x2000023e
 80055f4:	20000245 	.word	0x20000245
 80055f8:	20000237 	.word	0x20000237
 80055fc:	20000239 	.word	0x20000239
 8005600:	2000025f 	.word	0x2000025f
 8005604:	2000025d 	.word	0x2000025d
 8005608:	20000261 	.word	0x20000261
 800560c:	20000260 	.word	0x20000260
		} else {
			devmotorasagicalisiyor=0;
 8005610:	4b96      	ldr	r3, [pc, #600]	; (800586c <checkAktifCalisma+0xb50>)
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005616:	4b95      	ldr	r3, [pc, #596]	; (800586c <checkAktifCalisma+0xb50>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800561e:	2201      	movs	r2, #1
 8005620:	2110      	movs	r1, #16
 8005622:	4893      	ldr	r0, [pc, #588]	; (8005870 <checkAktifCalisma+0xb54>)
 8005624:	f003 fe63 	bl	80092ee <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005628:	4b92      	ldr	r3, [pc, #584]	; (8005874 <checkAktifCalisma+0xb58>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800562e:	4b91      	ldr	r3, [pc, #580]	; (8005874 <checkAktifCalisma+0xb58>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d024      	beq.n	8005680 <checkAktifCalisma+0x964>
 8005636:	2140      	movs	r1, #64	; 0x40
 8005638:	488d      	ldr	r0, [pc, #564]	; (8005870 <checkAktifCalisma+0xb54>)
 800563a:	f003 fe41 	bl	80092c0 <HAL_GPIO_ReadPin>
 800563e:	4603      	mov	r3, r0
 8005640:	2b01      	cmp	r3, #1
 8005642:	d007      	beq.n	8005654 <checkAktifCalisma+0x938>
 8005644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005648:	4889      	ldr	r0, [pc, #548]	; (8005870 <checkAktifCalisma+0xb54>)
 800564a:	f003 fe39 	bl	80092c0 <HAL_GPIO_ReadPin>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d115      	bne.n	8005680 <checkAktifCalisma+0x964>
 8005654:	4b88      	ldr	r3, [pc, #544]	; (8005878 <checkAktifCalisma+0xb5c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d011      	beq.n	8005680 <checkAktifCalisma+0x964>
 800565c:	4b87      	ldr	r3, [pc, #540]	; (800587c <checkAktifCalisma+0xb60>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00d      	beq.n	8005680 <checkAktifCalisma+0x964>
 8005664:	4b86      	ldr	r3, [pc, #536]	; (8005880 <checkAktifCalisma+0xb64>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f083 0301 	eor.w	r3, r3, #1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <checkAktifCalisma+0x964>
			timer2=millis;
 8005672:	4b84      	ldr	r3, [pc, #528]	; (8005884 <checkAktifCalisma+0xb68>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a84      	ldr	r2, [pc, #528]	; (8005888 <checkAktifCalisma+0xb6c>)
 8005678:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800567a:	4b81      	ldr	r3, [pc, #516]	; (8005880 <checkAktifCalisma+0xb64>)
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005680:	4b80      	ldr	r3, [pc, #512]	; (8005884 <checkAktifCalisma+0xb68>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b80      	ldr	r3, [pc, #512]	; (8005888 <checkAktifCalisma+0xb6c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	4a80      	ldr	r2, [pc, #512]	; (800588c <checkAktifCalisma+0xb70>)
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	4293      	cmp	r3, r2
 8005690:	d303      	bcc.n	800569a <checkAktifCalisma+0x97e>
 8005692:	4b7b      	ldr	r3, [pc, #492]	; (8005880 <checkAktifCalisma+0xb64>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10d      	bne.n	80056b6 <checkAktifCalisma+0x99a>
 800569a:	4b77      	ldr	r3, [pc, #476]	; (8005878 <checkAktifCalisma+0xb5c>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f083 0301 	eor.w	r3, r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <checkAktifCalisma+0x99a>
 80056a8:	4b74      	ldr	r3, [pc, #464]	; (800587c <checkAktifCalisma+0xb60>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f083 0301 	eor.w	r3, r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80056b6:	2200      	movs	r2, #0
 80056b8:	2110      	movs	r1, #16
 80056ba:	486d      	ldr	r0, [pc, #436]	; (8005870 <checkAktifCalisma+0xb54>)
 80056bc:	f003 fe17 	bl	80092ee <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80056c0:	4b6c      	ldr	r3, [pc, #432]	; (8005874 <checkAktifCalisma+0xb58>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80056c6:	4b6e      	ldr	r3, [pc, #440]	; (8005880 <checkAktifCalisma+0xb64>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80056cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056d0:	486f      	ldr	r0, [pc, #444]	; (8005890 <checkAktifCalisma+0xb74>)
 80056d2:	f003 fdf5 	bl	80092c0 <HAL_GPIO_ReadPin>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d120      	bne.n	800571e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80056dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056e0:	486b      	ldr	r0, [pc, #428]	; (8005890 <checkAktifCalisma+0xb74>)
 80056e2:	f003 fded 	bl	80092c0 <HAL_GPIO_ReadPin>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d118      	bne.n	800571e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80056ec:	2104      	movs	r1, #4
 80056ee:	4868      	ldr	r0, [pc, #416]	; (8005890 <checkAktifCalisma+0xb74>)
 80056f0:	f003 fde6 	bl	80092c0 <HAL_GPIO_ReadPin>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d111      	bne.n	800571e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80056fa:	2102      	movs	r1, #2
 80056fc:	4864      	ldr	r0, [pc, #400]	; (8005890 <checkAktifCalisma+0xb74>)
 80056fe:	f003 fddf 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005708:	2101      	movs	r1, #1
 800570a:	4861      	ldr	r0, [pc, #388]	; (8005890 <checkAktifCalisma+0xb74>)
 800570c:	f003 fdd8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005716:	4b5f      	ldr	r3, [pc, #380]	; (8005894 <checkAktifCalisma+0xb78>)
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e002      	b.n	8005724 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800571e:	4b5d      	ldr	r3, [pc, #372]	; (8005894 <checkAktifCalisma+0xb78>)
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005724:	4b5c      	ldr	r3, [pc, #368]	; (8005898 <checkAktifCalisma+0xb7c>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d144      	bne.n	80057b6 <checkAktifCalisma+0xa9a>
 800572c:	4b5b      	ldr	r3, [pc, #364]	; (800589c <checkAktifCalisma+0xb80>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d003      	beq.n	800573c <checkAktifCalisma+0xa20>
 8005734:	4b59      	ldr	r3, [pc, #356]	; (800589c <checkAktifCalisma+0xb80>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b03      	cmp	r3, #3
 800573a:	d13c      	bne.n	80057b6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	484c      	ldr	r0, [pc, #304]	; (8005870 <checkAktifCalisma+0xb54>)
 8005740:	f003 fdbe 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <checkAktifCalisma+0xa36>
 800574a:	4b55      	ldr	r3, [pc, #340]	; (80058a0 <checkAktifCalisma+0xb84>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <checkAktifCalisma+0xa4e>
 8005752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005756:	484e      	ldr	r0, [pc, #312]	; (8005890 <checkAktifCalisma+0xb74>)
 8005758:	f003 fdb2 	bl	80092c0 <HAL_GPIO_ReadPin>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d129      	bne.n	80057b6 <checkAktifCalisma+0xa9a>
 8005762:	4b4f      	ldr	r3, [pc, #316]	; (80058a0 <checkAktifCalisma+0xb84>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d125      	bne.n	80057b6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800576a:	2104      	movs	r1, #4
 800576c:	4840      	ldr	r0, [pc, #256]	; (8005870 <checkAktifCalisma+0xb54>)
 800576e:	f003 fda7 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005772:	4603      	mov	r3, r0
 8005774:	2b01      	cmp	r3, #1
 8005776:	d003      	beq.n	8005780 <checkAktifCalisma+0xa64>
 8005778:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <checkAktifCalisma+0xb88>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11a      	bne.n	80057b6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005780:	2102      	movs	r1, #2
 8005782:	483b      	ldr	r0, [pc, #236]	; (8005870 <checkAktifCalisma+0xb54>)
 8005784:	f003 fd9c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d113      	bne.n	80057b6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800578e:	4b46      	ldr	r3, [pc, #280]	; (80058a8 <checkAktifCalisma+0xb8c>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f083 0301 	eor.w	r3, r3, #1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 800579c:	4b3d      	ldr	r3, [pc, #244]	; (8005894 <checkAktifCalisma+0xb78>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80057a4:	4b41      	ldr	r3, [pc, #260]	; (80058ac <checkAktifCalisma+0xb90>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80057aa:	4b36      	ldr	r3, [pc, #216]	; (8005884 <checkAktifCalisma+0xb68>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a40      	ldr	r2, [pc, #256]	; (80058b0 <checkAktifCalisma+0xb94>)
 80057b0:	6013      	str	r3, [r2, #0]
			bekle();
 80057b2:	f7ff f935 	bl	8004a20 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80057b6:	4b33      	ldr	r3, [pc, #204]	; (8005884 <checkAktifCalisma+0xb68>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b3d      	ldr	r3, [pc, #244]	; (80058b0 <checkAktifCalisma+0xb94>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	4a3c      	ldr	r2, [pc, #240]	; (80058b4 <checkAktifCalisma+0xb98>)
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d211      	bcs.n	80057ec <checkAktifCalisma+0xad0>
 80057c8:	2104      	movs	r1, #4
 80057ca:	4829      	ldr	r0, [pc, #164]	; (8005870 <checkAktifCalisma+0xb54>)
 80057cc:	f003 fd78 	bl	80092c0 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <checkAktifCalisma+0xad0>
 80057d6:	4b33      	ldr	r3, [pc, #204]	; (80058a4 <checkAktifCalisma+0xb88>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d006      	beq.n	80057ec <checkAktifCalisma+0xad0>
 80057de:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <checkAktifCalisma+0xb78>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f083 0301 	eor.w	r3, r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80057ec:	4b2f      	ldr	r3, [pc, #188]	; (80058ac <checkAktifCalisma+0xb90>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057f2:	4b29      	ldr	r3, [pc, #164]	; (8005898 <checkAktifCalisma+0xb7c>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d160      	bne.n	80058bc <checkAktifCalisma+0xba0>
 80057fa:	4b28      	ldr	r3, [pc, #160]	; (800589c <checkAktifCalisma+0xb80>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d003      	beq.n	800580a <checkAktifCalisma+0xaee>
 8005802:	4b26      	ldr	r3, [pc, #152]	; (800589c <checkAktifCalisma+0xb80>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d158      	bne.n	80058bc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800580a:	2104      	movs	r1, #4
 800580c:	4818      	ldr	r0, [pc, #96]	; (8005870 <checkAktifCalisma+0xb54>)
 800580e:	f003 fd57 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005812:	4603      	mov	r3, r0
 8005814:	2b01      	cmp	r3, #1
 8005816:	d003      	beq.n	8005820 <checkAktifCalisma+0xb04>
 8005818:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <checkAktifCalisma+0xb88>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d14d      	bne.n	80058bc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005820:	2102      	movs	r1, #2
 8005822:	4813      	ldr	r0, [pc, #76]	; (8005870 <checkAktifCalisma+0xb54>)
 8005824:	f003 fd4c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d146      	bne.n	80058bc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	480f      	ldr	r0, [pc, #60]	; (8005870 <checkAktifCalisma+0xb54>)
 8005832:	f003 fd45 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <checkAktifCalisma+0xb28>
 800583c:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <checkAktifCalisma+0xb84>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <checkAktifCalisma+0xb40>
 8005844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005848:	4811      	ldr	r0, [pc, #68]	; (8005890 <checkAktifCalisma+0xb74>)
 800584a:	f003 fd39 	bl	80092c0 <HAL_GPIO_ReadPin>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d133      	bne.n	80058bc <checkAktifCalisma+0xba0>
 8005854:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <checkAktifCalisma+0xb84>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d12f      	bne.n	80058bc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800585c:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <checkAktifCalisma+0xb78>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d02b      	beq.n	80058bc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <checkAktifCalisma+0xb9c>)
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	e02a      	b.n	80058c2 <checkAktifCalisma+0xba6>
 800586c:	2000025f 	.word	0x2000025f
 8005870:	40011000 	.word	0x40011000
 8005874:	20000263 	.word	0x20000263
 8005878:	2000027a 	.word	0x2000027a
 800587c:	2000027b 	.word	0x2000027b
 8005880:	2000025b 	.word	0x2000025b
 8005884:	20000204 	.word	0x20000204
 8005888:	20000210 	.word	0x20000210
 800588c:	2000023e 	.word	0x2000023e
 8005890:	40010c00 	.word	0x40010c00
 8005894:	2000026a 	.word	0x2000026a
 8005898:	20000231 	.word	0x20000231
 800589c:	20000230 	.word	0x20000230
 80058a0:	20000234 	.word	0x20000234
 80058a4:	2000022e 	.word	0x2000022e
 80058a8:	20000257 	.word	0x20000257
 80058ac:	2000026b 	.word	0x2000026b
 80058b0:	20000208 	.word	0x20000208
 80058b4:	20000241 	.word	0x20000241
 80058b8:	2000026c 	.word	0x2000026c
		} else {
			kapi1butonkontrol=0;
 80058bc:	4b8b      	ldr	r3, [pc, #556]	; (8005aec <checkAktifCalisma+0xdd0>)
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058c2:	4b8b      	ldr	r3, [pc, #556]	; (8005af0 <checkAktifCalisma+0xdd4>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d121      	bne.n	800590e <checkAktifCalisma+0xbf2>
 80058ca:	4b8a      	ldr	r3, [pc, #552]	; (8005af4 <checkAktifCalisma+0xdd8>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d003      	beq.n	80058da <checkAktifCalisma+0xbbe>
 80058d2:	4b88      	ldr	r3, [pc, #544]	; (8005af4 <checkAktifCalisma+0xdd8>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d119      	bne.n	800590e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058da:	2104      	movs	r1, #4
 80058dc:	4886      	ldr	r0, [pc, #536]	; (8005af8 <checkAktifCalisma+0xddc>)
 80058de:	f003 fcef 	bl	80092c0 <HAL_GPIO_ReadPin>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d003      	beq.n	80058f0 <checkAktifCalisma+0xbd4>
 80058e8:	4b84      	ldr	r3, [pc, #528]	; (8005afc <checkAktifCalisma+0xde0>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10e      	bne.n	800590e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058f0:	2102      	movs	r1, #2
 80058f2:	4881      	ldr	r0, [pc, #516]	; (8005af8 <checkAktifCalisma+0xddc>)
 80058f4:	f003 fce4 	bl	80092c0 <HAL_GPIO_ReadPin>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d107      	bne.n	800590e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80058fe:	4b80      	ldr	r3, [pc, #512]	; (8005b00 <checkAktifCalisma+0xde4>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005906:	4b7f      	ldr	r3, [pc, #508]	; (8005b04 <checkAktifCalisma+0xde8>)
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e002      	b.n	8005914 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800590e:	4b7d      	ldr	r3, [pc, #500]	; (8005b04 <checkAktifCalisma+0xde8>)
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005914:	4b75      	ldr	r3, [pc, #468]	; (8005aec <checkAktifCalisma+0xdd0>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <checkAktifCalisma+0xc10>
 800591c:	4b79      	ldr	r3, [pc, #484]	; (8005b04 <checkAktifCalisma+0xde8>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <checkAktifCalisma+0xc10>
 8005924:	4b78      	ldr	r3, [pc, #480]	; (8005b08 <checkAktifCalisma+0xdec>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800592c:	2201      	movs	r2, #1
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	4876      	ldr	r0, [pc, #472]	; (8005b0c <checkAktifCalisma+0xdf0>)
 8005932:	f003 fcdc 	bl	80092ee <HAL_GPIO_WritePin>
 8005936:	e004      	b.n	8005942 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005938:	2200      	movs	r2, #0
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	4873      	ldr	r0, [pc, #460]	; (8005b0c <checkAktifCalisma+0xdf0>)
 800593e:	f003 fcd6 	bl	80092ee <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005942:	4b73      	ldr	r3, [pc, #460]	; (8005b10 <checkAktifCalisma+0xdf4>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d141      	bne.n	80059ce <checkAktifCalisma+0xcb2>
 800594a:	4b6a      	ldr	r3, [pc, #424]	; (8005af4 <checkAktifCalisma+0xdd8>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d003      	beq.n	800595a <checkAktifCalisma+0xc3e>
 8005952:	4b68      	ldr	r3, [pc, #416]	; (8005af4 <checkAktifCalisma+0xdd8>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d139      	bne.n	80059ce <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800595a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800595e:	4866      	ldr	r0, [pc, #408]	; (8005af8 <checkAktifCalisma+0xddc>)
 8005960:	f003 fcae 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d103      	bne.n	8005972 <checkAktifCalisma+0xc56>
 800596a:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <checkAktifCalisma+0xdf8>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <checkAktifCalisma+0xc6e>
 8005972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005976:	4868      	ldr	r0, [pc, #416]	; (8005b18 <checkAktifCalisma+0xdfc>)
 8005978:	f003 fca2 	bl	80092c0 <HAL_GPIO_ReadPin>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d125      	bne.n	80059ce <checkAktifCalisma+0xcb2>
 8005982:	4b64      	ldr	r3, [pc, #400]	; (8005b14 <checkAktifCalisma+0xdf8>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d121      	bne.n	80059ce <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800598a:	2102      	movs	r1, #2
 800598c:	485a      	ldr	r0, [pc, #360]	; (8005af8 <checkAktifCalisma+0xddc>)
 800598e:	f003 fc97 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005992:	4603      	mov	r3, r0
 8005994:	2b01      	cmp	r3, #1
 8005996:	d11a      	bne.n	80059ce <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005998:	2104      	movs	r1, #4
 800599a:	4857      	ldr	r0, [pc, #348]	; (8005af8 <checkAktifCalisma+0xddc>)
 800599c:	f003 fc90 	bl	80092c0 <HAL_GPIO_ReadPin>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d113      	bne.n	80059ce <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80059a6:	4b56      	ldr	r3, [pc, #344]	; (8005b00 <checkAktifCalisma+0xde4>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00f      	beq.n	80059ce <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80059ae:	4b5b      	ldr	r3, [pc, #364]	; (8005b1c <checkAktifCalisma+0xe00>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	f083 0301 	eor.w	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80059bc:	4b58      	ldr	r3, [pc, #352]	; (8005b20 <checkAktifCalisma+0xe04>)
 80059be:	2201      	movs	r2, #1
 80059c0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80059c2:	4b58      	ldr	r3, [pc, #352]	; (8005b24 <checkAktifCalisma+0xe08>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a58      	ldr	r2, [pc, #352]	; (8005b28 <checkAktifCalisma+0xe0c>)
 80059c8:	6013      	str	r3, [r2, #0]
			bekle();
 80059ca:	f7ff f829 	bl	8004a20 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80059ce:	4b55      	ldr	r3, [pc, #340]	; (8005b24 <checkAktifCalisma+0xe08>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b55      	ldr	r3, [pc, #340]	; (8005b28 <checkAktifCalisma+0xe0c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	4a54      	ldr	r2, [pc, #336]	; (8005b2c <checkAktifCalisma+0xe10>)
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	4293      	cmp	r3, r2
 80059de:	d20d      	bcs.n	80059fc <checkAktifCalisma+0xce0>
 80059e0:	2102      	movs	r1, #2
 80059e2:	4845      	ldr	r0, [pc, #276]	; (8005af8 <checkAktifCalisma+0xddc>)
 80059e4:	f003 fc6c 	bl	80092c0 <HAL_GPIO_ReadPin>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d006      	beq.n	80059fc <checkAktifCalisma+0xce0>
 80059ee:	4b44      	ldr	r3, [pc, #272]	; (8005b00 <checkAktifCalisma+0xde4>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f083 0301 	eor.w	r3, r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80059fc:	4b48      	ldr	r3, [pc, #288]	; (8005b20 <checkAktifCalisma+0xe04>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a02:	4b43      	ldr	r3, [pc, #268]	; (8005b10 <checkAktifCalisma+0xdf4>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d135      	bne.n	8005a76 <checkAktifCalisma+0xd5a>
 8005a0a:	4b3a      	ldr	r3, [pc, #232]	; (8005af4 <checkAktifCalisma+0xdd8>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d003      	beq.n	8005a1a <checkAktifCalisma+0xcfe>
 8005a12:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <checkAktifCalisma+0xdd8>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d12d      	bne.n	8005a76 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a1e:	4836      	ldr	r0, [pc, #216]	; (8005af8 <checkAktifCalisma+0xddc>)
 8005a20:	f003 fc4e 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <checkAktifCalisma+0xd16>
 8005a2a:	4b3a      	ldr	r3, [pc, #232]	; (8005b14 <checkAktifCalisma+0xdf8>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <checkAktifCalisma+0xd2e>
 8005a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a36:	4838      	ldr	r0, [pc, #224]	; (8005b18 <checkAktifCalisma+0xdfc>)
 8005a38:	f003 fc42 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d119      	bne.n	8005a76 <checkAktifCalisma+0xd5a>
 8005a42:	4b34      	ldr	r3, [pc, #208]	; (8005b14 <checkAktifCalisma+0xdf8>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d115      	bne.n	8005a76 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	482a      	ldr	r0, [pc, #168]	; (8005af8 <checkAktifCalisma+0xddc>)
 8005a4e:	f003 fc37 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d10e      	bne.n	8005a76 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a58:	2104      	movs	r1, #4
 8005a5a:	4827      	ldr	r0, [pc, #156]	; (8005af8 <checkAktifCalisma+0xddc>)
 8005a5c:	f003 fc30 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d107      	bne.n	8005a76 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005a66:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <checkAktifCalisma+0xde4>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005a6e:	4b30      	ldr	r3, [pc, #192]	; (8005b30 <checkAktifCalisma+0xe14>)
 8005a70:	2201      	movs	r2, #1
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	e002      	b.n	8005a7c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005a76:	4b2e      	ldr	r3, [pc, #184]	; (8005b30 <checkAktifCalisma+0xe14>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a7c:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <checkAktifCalisma+0xdf4>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d11d      	bne.n	8005ac0 <checkAktifCalisma+0xda4>
 8005a84:	4b1b      	ldr	r3, [pc, #108]	; (8005af4 <checkAktifCalisma+0xdd8>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d003      	beq.n	8005a94 <checkAktifCalisma+0xd78>
 8005a8c:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <checkAktifCalisma+0xdd8>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d115      	bne.n	8005ac0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a94:	2102      	movs	r1, #2
 8005a96:	4818      	ldr	r0, [pc, #96]	; (8005af8 <checkAktifCalisma+0xddc>)
 8005a98:	f003 fc12 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d10e      	bne.n	8005ac0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005aa2:	2104      	movs	r1, #4
 8005aa4:	4814      	ldr	r0, [pc, #80]	; (8005af8 <checkAktifCalisma+0xddc>)
 8005aa6:	f003 fc0b 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <checkAktifCalisma+0xde4>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005ab8:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <checkAktifCalisma+0xe18>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <checkAktifCalisma+0xe18>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <checkAktifCalisma+0xe14>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <checkAktifCalisma+0xdc2>
 8005ace:	4b19      	ldr	r3, [pc, #100]	; (8005b34 <checkAktifCalisma+0xe18>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <checkAktifCalisma+0xdc2>
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <checkAktifCalisma+0xe04>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d02c      	beq.n	8005b38 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005ade:	2201      	movs	r2, #1
 8005ae0:	2140      	movs	r1, #64	; 0x40
 8005ae2:	480a      	ldr	r0, [pc, #40]	; (8005b0c <checkAktifCalisma+0xdf0>)
 8005ae4:	f003 fc03 	bl	80092ee <HAL_GPIO_WritePin>
 8005ae8:	e02b      	b.n	8005b42 <checkAktifCalisma+0xe26>
 8005aea:	bf00      	nop
 8005aec:	2000026c 	.word	0x2000026c
 8005af0:	20000231 	.word	0x20000231
 8005af4:	20000230 	.word	0x20000230
 8005af8:	40011000 	.word	0x40011000
 8005afc:	2000022e 	.word	0x2000022e
 8005b00:	2000026a 	.word	0x2000026a
 8005b04:	2000026d 	.word	0x2000026d
 8005b08:	2000026b 	.word	0x2000026b
 8005b0c:	40010800 	.word	0x40010800
 8005b10:	20000232 	.word	0x20000232
 8005b14:	20000234 	.word	0x20000234
 8005b18:	40010c00 	.word	0x40010c00
 8005b1c:	20000257 	.word	0x20000257
 8005b20:	2000026e 	.word	0x2000026e
 8005b24:	20000204 	.word	0x20000204
 8005b28:	20000208 	.word	0x20000208
 8005b2c:	20000242 	.word	0x20000242
 8005b30:	2000026f 	.word	0x2000026f
 8005b34:	20000270 	.word	0x20000270
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2140      	movs	r1, #64	; 0x40
 8005b3c:	488d      	ldr	r0, [pc, #564]	; (8005d74 <checkAktifCalisma+0x1058>)
 8005b3e:	f003 fbd6 	bl	80092ee <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005b42:	4b8d      	ldr	r3, [pc, #564]	; (8005d78 <checkAktifCalisma+0x105c>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <checkAktifCalisma+0xe36>
 8005b4a:	4b8b      	ldr	r3, [pc, #556]	; (8005d78 <checkAktifCalisma+0x105c>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d115      	bne.n	8005b7e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b52:	2104      	movs	r1, #4
 8005b54:	4889      	ldr	r0, [pc, #548]	; (8005d7c <checkAktifCalisma+0x1060>)
 8005b56:	f003 fbb3 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d003      	beq.n	8005b68 <checkAktifCalisma+0xe4c>
 8005b60:	4b87      	ldr	r3, [pc, #540]	; (8005d80 <checkAktifCalisma+0x1064>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005b68:	2102      	movs	r1, #2
 8005b6a:	4884      	ldr	r0, [pc, #528]	; (8005d7c <checkAktifCalisma+0x1060>)
 8005b6c:	f003 fba8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005b76:	4b83      	ldr	r3, [pc, #524]	; (8005d84 <checkAktifCalisma+0x1068>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	e002      	b.n	8005b84 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005b7e:	4b81      	ldr	r3, [pc, #516]	; (8005d84 <checkAktifCalisma+0x1068>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005b84:	4b7c      	ldr	r3, [pc, #496]	; (8005d78 <checkAktifCalisma+0x105c>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d003      	beq.n	8005b94 <checkAktifCalisma+0xe78>
 8005b8c:	4b7a      	ldr	r3, [pc, #488]	; (8005d78 <checkAktifCalisma+0x105c>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d111      	bne.n	8005bb8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b94:	2102      	movs	r1, #2
 8005b96:	4879      	ldr	r0, [pc, #484]	; (8005d7c <checkAktifCalisma+0x1060>)
 8005b98:	f003 fb92 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d10a      	bne.n	8005bb8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4875      	ldr	r0, [pc, #468]	; (8005d7c <checkAktifCalisma+0x1060>)
 8005ba6:	f003 fb8b 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005bb0:	4b75      	ldr	r3, [pc, #468]	; (8005d88 <checkAktifCalisma+0x106c>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	e002      	b.n	8005bbe <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005bb8:	4b73      	ldr	r3, [pc, #460]	; (8005d88 <checkAktifCalisma+0x106c>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005bbe:	4b71      	ldr	r3, [pc, #452]	; (8005d84 <checkAktifCalisma+0x1068>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00f      	beq.n	8005be6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005bc6:	4b71      	ldr	r3, [pc, #452]	; (8005d8c <checkAktifCalisma+0x1070>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10b      	bne.n	8005be6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bd2:	486f      	ldr	r0, [pc, #444]	; (8005d90 <checkAktifCalisma+0x1074>)
 8005bd4:	f003 fb74 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005bde:	4b6d      	ldr	r3, [pc, #436]	; (8005d94 <checkAktifCalisma+0x1078>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	e002      	b.n	8005bec <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005be6:	4b6b      	ldr	r3, [pc, #428]	; (8005d94 <checkAktifCalisma+0x1078>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005bec:	4b66      	ldr	r3, [pc, #408]	; (8005d88 <checkAktifCalisma+0x106c>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00f      	beq.n	8005c14 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005bf4:	4b65      	ldr	r3, [pc, #404]	; (8005d8c <checkAktifCalisma+0x1070>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10b      	bne.n	8005c14 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c00:	4863      	ldr	r0, [pc, #396]	; (8005d90 <checkAktifCalisma+0x1074>)
 8005c02:	f003 fb5d 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d103      	bne.n	8005c14 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005c0c:	4b62      	ldr	r3, [pc, #392]	; (8005d98 <checkAktifCalisma+0x107c>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e002      	b.n	8005c1a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005c14:	4b60      	ldr	r3, [pc, #384]	; (8005d98 <checkAktifCalisma+0x107c>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c1a:	4b60      	ldr	r3, [pc, #384]	; (8005d9c <checkAktifCalisma+0x1080>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d137      	bne.n	8005c92 <checkAktifCalisma+0xf76>
 8005c22:	4b5f      	ldr	r3, [pc, #380]	; (8005da0 <checkAktifCalisma+0x1084>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d003      	beq.n	8005c32 <checkAktifCalisma+0xf16>
 8005c2a:	4b5d      	ldr	r3, [pc, #372]	; (8005da0 <checkAktifCalisma+0x1084>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d12f      	bne.n	8005c92 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c32:	4b54      	ldr	r3, [pc, #336]	; (8005d84 <checkAktifCalisma+0x1068>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <checkAktifCalisma+0xf26>
 8005c3a:	4b53      	ldr	r3, [pc, #332]	; (8005d88 <checkAktifCalisma+0x106c>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d027      	beq.n	8005c92 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c46:	484d      	ldr	r0, [pc, #308]	; (8005d7c <checkAktifCalisma+0x1060>)
 8005c48:	f003 fb3a 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <checkAktifCalisma+0xf3e>
 8005c52:	4b4e      	ldr	r3, [pc, #312]	; (8005d8c <checkAktifCalisma+0x1070>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c5a:	4b4e      	ldr	r3, [pc, #312]	; (8005d94 <checkAktifCalisma+0x1078>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <checkAktifCalisma+0xf4e>
 8005c62:	4b4d      	ldr	r3, [pc, #308]	; (8005d98 <checkAktifCalisma+0x107c>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d013      	beq.n	8005c92 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005c6a:	4b4e      	ldr	r3, [pc, #312]	; (8005da4 <checkAktifCalisma+0x1088>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00f      	beq.n	8005c92 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005c72:	4b4d      	ldr	r3, [pc, #308]	; (8005da8 <checkAktifCalisma+0x108c>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f083 0301 	eor.w	r3, r3, #1
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005c80:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <checkAktifCalisma+0x1090>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005c86:	4b4a      	ldr	r3, [pc, #296]	; (8005db0 <checkAktifCalisma+0x1094>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a4a      	ldr	r2, [pc, #296]	; (8005db4 <checkAktifCalisma+0x1098>)
 8005c8c:	6013      	str	r3, [r2, #0]
			bekle();
 8005c8e:	f7fe fec7 	bl	8004a20 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005c92:	4b47      	ldr	r3, [pc, #284]	; (8005db0 <checkAktifCalisma+0x1094>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b47      	ldr	r3, [pc, #284]	; (8005db4 <checkAktifCalisma+0x1098>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	4a46      	ldr	r2, [pc, #280]	; (8005db8 <checkAktifCalisma+0x109c>)
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d214      	bcs.n	8005cce <checkAktifCalisma+0xfb2>
 8005ca4:	4b37      	ldr	r3, [pc, #220]	; (8005d84 <checkAktifCalisma+0x1068>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f083 0301 	eor.w	r3, r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <checkAktifCalisma+0xfa4>
 8005cb2:	4b35      	ldr	r3, [pc, #212]	; (8005d88 <checkAktifCalisma+0x106c>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	f083 0301 	eor.w	r3, r3, #1
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <checkAktifCalisma+0xfb2>
 8005cc0:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <checkAktifCalisma+0x1088>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f083 0301 	eor.w	r3, r3, #1
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005cce:	4b37      	ldr	r3, [pc, #220]	; (8005dac <checkAktifCalisma+0x1090>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cd4:	4b31      	ldr	r3, [pc, #196]	; (8005d9c <checkAktifCalisma+0x1080>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d12b      	bne.n	8005d34 <checkAktifCalisma+0x1018>
 8005cdc:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <checkAktifCalisma+0x1084>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d003      	beq.n	8005cec <checkAktifCalisma+0xfd0>
 8005ce4:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <checkAktifCalisma+0x1084>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d123      	bne.n	8005d34 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cec:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <checkAktifCalisma+0x1068>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d103      	bne.n	8005cfc <checkAktifCalisma+0xfe0>
 8005cf4:	4b24      	ldr	r3, [pc, #144]	; (8005d88 <checkAktifCalisma+0x106c>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d00:	481e      	ldr	r0, [pc, #120]	; (8005d7c <checkAktifCalisma+0x1060>)
 8005d02:	f003 fadd 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <checkAktifCalisma+0xff8>
 8005d0c:	4b1f      	ldr	r3, [pc, #124]	; (8005d8c <checkAktifCalisma+0x1070>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d14:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <checkAktifCalisma+0x1078>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d103      	bne.n	8005d24 <checkAktifCalisma+0x1008>
 8005d1c:	4b1e      	ldr	r3, [pc, #120]	; (8005d98 <checkAktifCalisma+0x107c>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005d24:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <checkAktifCalisma+0x1088>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005d2c:	4b23      	ldr	r3, [pc, #140]	; (8005dbc <checkAktifCalisma+0x10a0>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005d34:	4b21      	ldr	r3, [pc, #132]	; (8005dbc <checkAktifCalisma+0x10a0>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d3a:	4b18      	ldr	r3, [pc, #96]	; (8005d9c <checkAktifCalisma+0x1080>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d140      	bne.n	8005dc4 <checkAktifCalisma+0x10a8>
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <checkAktifCalisma+0x1084>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d003      	beq.n	8005d52 <checkAktifCalisma+0x1036>
 8005d4a:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <checkAktifCalisma+0x1084>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d138      	bne.n	8005dc4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d52:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <checkAktifCalisma+0x1068>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <checkAktifCalisma+0x1046>
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <checkAktifCalisma+0x106c>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d030      	beq.n	8005dc4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <checkAktifCalisma+0x1088>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d02c      	beq.n	8005dc4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <checkAktifCalisma+0x10a4>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	e02b      	b.n	8005dca <checkAktifCalisma+0x10ae>
 8005d72:	bf00      	nop
 8005d74:	40010800 	.word	0x40010800
 8005d78:	20000235 	.word	0x20000235
 8005d7c:	40011000 	.word	0x40011000
 8005d80:	2000022e 	.word	0x2000022e
 8005d84:	20000274 	.word	0x20000274
 8005d88:	20000275 	.word	0x20000275
 8005d8c:	20000234 	.word	0x20000234
 8005d90:	40010c00 	.word	0x40010c00
 8005d94:	20000284 	.word	0x20000284
 8005d98:	20000285 	.word	0x20000285
 8005d9c:	20000233 	.word	0x20000233
 8005da0:	20000230 	.word	0x20000230
 8005da4:	2000026a 	.word	0x2000026a
 8005da8:	20000257 	.word	0x20000257
 8005dac:	20000271 	.word	0x20000271
 8005db0:	20000204 	.word	0x20000204
 8005db4:	20000208 	.word	0x20000208
 8005db8:	20000243 	.word	0x20000243
 8005dbc:	20000272 	.word	0x20000272
 8005dc0:	20000273 	.word	0x20000273
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005dc4:	4b8b      	ldr	r3, [pc, #556]	; (8005ff4 <checkAktifCalisma+0x12d8>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005dca:	4b8b      	ldr	r3, [pc, #556]	; (8005ff8 <checkAktifCalisma+0x12dc>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d107      	bne.n	8005de2 <checkAktifCalisma+0x10c6>
 8005dd2:	4b8a      	ldr	r3, [pc, #552]	; (8005ffc <checkAktifCalisma+0x12e0>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d103      	bne.n	8005de2 <checkAktifCalisma+0x10c6>
 8005dda:	4b86      	ldr	r3, [pc, #536]	; (8005ff4 <checkAktifCalisma+0x12d8>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005de2:	2201      	movs	r2, #1
 8005de4:	2120      	movs	r1, #32
 8005de6:	4886      	ldr	r0, [pc, #536]	; (8006000 <checkAktifCalisma+0x12e4>)
 8005de8:	f003 fa81 	bl	80092ee <HAL_GPIO_WritePin>
 8005dec:	e004      	b.n	8005df8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005dee:	2200      	movs	r2, #0
 8005df0:	2120      	movs	r1, #32
 8005df2:	4883      	ldr	r0, [pc, #524]	; (8006000 <checkAktifCalisma+0x12e4>)
 8005df4:	f003 fa7b 	bl	80092ee <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005df8:	4b82      	ldr	r3, [pc, #520]	; (8006004 <checkAktifCalisma+0x12e8>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <checkAktifCalisma+0x1102>
 8005e00:	2102      	movs	r1, #2
 8005e02:	4881      	ldr	r0, [pc, #516]	; (8006008 <checkAktifCalisma+0x12ec>)
 8005e04:	f003 fa5c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d107      	bne.n	8005e1e <checkAktifCalisma+0x1102>
 8005e0e:	4b7f      	ldr	r3, [pc, #508]	; (800600c <checkAktifCalisma+0x12f0>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <checkAktifCalisma+0x1102>
 8005e16:	4b7e      	ldr	r3, [pc, #504]	; (8006010 <checkAktifCalisma+0x12f4>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d112      	bne.n	8005e44 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005e1e:	4b7d      	ldr	r3, [pc, #500]	; (8006014 <checkAktifCalisma+0x12f8>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d066      	beq.n	8005ef4 <checkAktifCalisma+0x11d8>
 8005e26:	2104      	movs	r1, #4
 8005e28:	4877      	ldr	r0, [pc, #476]	; (8006008 <checkAktifCalisma+0x12ec>)
 8005e2a:	f003 fa49 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d15f      	bne.n	8005ef4 <checkAktifCalisma+0x11d8>
 8005e34:	4b75      	ldr	r3, [pc, #468]	; (800600c <checkAktifCalisma+0x12f0>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d05b      	beq.n	8005ef4 <checkAktifCalisma+0x11d8>
 8005e3c:	4b74      	ldr	r3, [pc, #464]	; (8006010 <checkAktifCalisma+0x12f4>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d057      	beq.n	8005ef4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005e44:	4b74      	ldr	r3, [pc, #464]	; (8006018 <checkAktifCalisma+0x12fc>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	4b72      	ldr	r3, [pc, #456]	; (8006018 <checkAktifCalisma+0x12fc>)
 8005e4e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005e50:	4b71      	ldr	r3, [pc, #452]	; (8006018 <checkAktifCalisma+0x12fc>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b09      	cmp	r3, #9
 8005e56:	d908      	bls.n	8005e6a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005e58:	4b6f      	ldr	r3, [pc, #444]	; (8006018 <checkAktifCalisma+0x12fc>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005e5e:	4b6f      	ldr	r3, [pc, #444]	; (800601c <checkAktifCalisma+0x1300>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4b6d      	ldr	r3, [pc, #436]	; (800601c <checkAktifCalisma+0x1300>)
 8005e68:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005e6a:	4b6c      	ldr	r3, [pc, #432]	; (800601c <checkAktifCalisma+0x1300>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b09      	cmp	r3, #9
 8005e70:	d908      	bls.n	8005e84 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005e72:	4b6a      	ldr	r3, [pc, #424]	; (800601c <checkAktifCalisma+0x1300>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005e78:	4b69      	ldr	r3, [pc, #420]	; (8006020 <checkAktifCalisma+0x1304>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	4b67      	ldr	r3, [pc, #412]	; (8006020 <checkAktifCalisma+0x1304>)
 8005e82:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005e84:	4b66      	ldr	r3, [pc, #408]	; (8006020 <checkAktifCalisma+0x1304>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b09      	cmp	r3, #9
 8005e8a:	d908      	bls.n	8005e9e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005e8c:	4b64      	ldr	r3, [pc, #400]	; (8006020 <checkAktifCalisma+0x1304>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005e92:	4b64      	ldr	r3, [pc, #400]	; (8006024 <checkAktifCalisma+0x1308>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	3301      	adds	r3, #1
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4b62      	ldr	r3, [pc, #392]	; (8006024 <checkAktifCalisma+0x1308>)
 8005e9c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005e9e:	4b61      	ldr	r3, [pc, #388]	; (8006024 <checkAktifCalisma+0x1308>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b09      	cmp	r3, #9
 8005ea4:	d908      	bls.n	8005eb8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005ea6:	4b5f      	ldr	r3, [pc, #380]	; (8006024 <checkAktifCalisma+0x1308>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005eac:	4b5e      	ldr	r3, [pc, #376]	; (8006028 <checkAktifCalisma+0x130c>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	4b5c      	ldr	r3, [pc, #368]	; (8006028 <checkAktifCalisma+0x130c>)
 8005eb6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005eb8:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <checkAktifCalisma+0x130c>)
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	4b5b      	ldr	r3, [pc, #364]	; (800602c <checkAktifCalisma+0x1310>)
 8005ebe:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005ec2:	4b58      	ldr	r3, [pc, #352]	; (8006024 <checkAktifCalisma+0x1308>)
 8005ec4:	781a      	ldrb	r2, [r3, #0]
 8005ec6:	4b59      	ldr	r3, [pc, #356]	; (800602c <checkAktifCalisma+0x1310>)
 8005ec8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005eca:	4b55      	ldr	r3, [pc, #340]	; (8006020 <checkAktifCalisma+0x1304>)
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	4b57      	ldr	r3, [pc, #348]	; (800602c <checkAktifCalisma+0x1310>)
 8005ed0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005ed2:	4b52      	ldr	r3, [pc, #328]	; (800601c <checkAktifCalisma+0x1300>)
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	4b55      	ldr	r3, [pc, #340]	; (800602c <checkAktifCalisma+0x1310>)
 8005ed8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005eda:	4b4f      	ldr	r3, [pc, #316]	; (8006018 <checkAktifCalisma+0x12fc>)
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	4b53      	ldr	r3, [pc, #332]	; (800602c <checkAktifCalisma+0x1310>)
 8005ee0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005ee2:	4b53      	ldr	r3, [pc, #332]	; (8006030 <checkAktifCalisma+0x1314>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005ee8:	4b46      	ldr	r3, [pc, #280]	; (8006004 <checkAktifCalisma+0x12e8>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005eee:	4b49      	ldr	r3, [pc, #292]	; (8006014 <checkAktifCalisma+0x12f8>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ef8:	484e      	ldr	r0, [pc, #312]	; (8006034 <checkAktifCalisma+0x1318>)
 8005efa:	f003 f9e1 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d016      	beq.n	8005f32 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005f04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f08:	484a      	ldr	r0, [pc, #296]	; (8006034 <checkAktifCalisma+0x1318>)
 8005f0a:	f003 f9d9 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00e      	beq.n	8005f32 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f18:	4846      	ldr	r0, [pc, #280]	; (8006034 <checkAktifCalisma+0x1318>)
 8005f1a:	f003 f9d1 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d006      	beq.n	8005f32 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005f24:	2140      	movs	r1, #64	; 0x40
 8005f26:	4838      	ldr	r0, [pc, #224]	; (8006008 <checkAktifCalisma+0x12ec>)
 8005f28:	f003 f9ca 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005f32:	4b41      	ldr	r3, [pc, #260]	; (8006038 <checkAktifCalisma+0x131c>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005f3a:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <checkAktifCalisma+0x131c>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005f40:	4b3d      	ldr	r3, [pc, #244]	; (8006038 <checkAktifCalisma+0x131c>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d016      	beq.n	8005f76 <checkAktifCalisma+0x125a>
 8005f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f4c:	4839      	ldr	r0, [pc, #228]	; (8006034 <checkAktifCalisma+0x1318>)
 8005f4e:	f003 f9b7 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10e      	bne.n	8005f76 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005f58:	4b38      	ldr	r3, [pc, #224]	; (800603c <checkAktifCalisma+0x1320>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005f5e:	2001      	movs	r0, #1
 8005f60:	f7fa fd7a 	bl	8000a58 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005f64:	2001      	movs	r0, #1
 8005f66:	f7fa fd1d 	bl	80009a4 <hata2EEPROM>
			convertAndSendData();
 8005f6a:	f001 fc75 	bl	8007858 <convertAndSendData>
			acilstophatasi=1;
 8005f6e:	4b34      	ldr	r3, [pc, #208]	; (8006040 <checkAktifCalisma+0x1324>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e018      	b.n	8005fa8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005f76:	4b32      	ldr	r3, [pc, #200]	; (8006040 <checkAktifCalisma+0x1324>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d014      	beq.n	8005fa8 <checkAktifCalisma+0x128c>
 8005f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f82:	482c      	ldr	r0, [pc, #176]	; (8006034 <checkAktifCalisma+0x1318>)
 8005f84:	f003 f99c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10c      	bne.n	8005fa8 <checkAktifCalisma+0x128c>
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <checkAktifCalisma+0x131c>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f083 0301 	eor.w	r3, r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005f9c:	4b28      	ldr	r3, [pc, #160]	; (8006040 <checkAktifCalisma+0x1324>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	f7fe fce8 	bl	8004978 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005fa8:	4b26      	ldr	r3, [pc, #152]	; (8006044 <checkAktifCalisma+0x1328>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f083 0301 	eor.w	r3, r3, #1
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d04e      	beq.n	8006054 <checkAktifCalisma+0x1338>
 8005fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fba:	481e      	ldr	r0, [pc, #120]	; (8006034 <checkAktifCalisma+0x1318>)
 8005fbc:	f003 f980 	bl	80092c0 <HAL_GPIO_ReadPin>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <checkAktifCalisma+0x12b2>
 8005fc6:	4b20      	ldr	r3, [pc, #128]	; (8006048 <checkAktifCalisma+0x132c>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d042      	beq.n	8006054 <checkAktifCalisma+0x1338>
 8005fce:	4b1f      	ldr	r3, [pc, #124]	; (800604c <checkAktifCalisma+0x1330>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d13e      	bne.n	8006054 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005fd6:	4b19      	ldr	r3, [pc, #100]	; (800603c <checkAktifCalisma+0x1320>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005fdc:	2002      	movs	r0, #2
 8005fde:	f7fa fd3b 	bl	8000a58 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005fe2:	2002      	movs	r0, #2
 8005fe4:	f7fa fcde 	bl	80009a4 <hata2EEPROM>
			convertAndSendData();
 8005fe8:	f001 fc36 	bl	8007858 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005fec:	4b18      	ldr	r3, [pc, #96]	; (8006050 <checkAktifCalisma+0x1334>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e047      	b.n	8006084 <checkAktifCalisma+0x1368>
 8005ff4:	20000273 	.word	0x20000273
 8005ff8:	20000272 	.word	0x20000272
 8005ffc:	20000271 	.word	0x20000271
 8006000:	40010800 	.word	0x40010800
 8006004:	20000267 	.word	0x20000267
 8006008:	40011000 	.word	0x40011000
 800600c:	2000022e 	.word	0x2000022e
 8006010:	2000026a 	.word	0x2000026a
 8006014:	20000268 	.word	0x20000268
 8006018:	20000225 	.word	0x20000225
 800601c:	20000226 	.word	0x20000226
 8006020:	20000000 	.word	0x20000000
 8006024:	20000001 	.word	0x20000001
 8006028:	20000227 	.word	0x20000227
 800602c:	2000012c 	.word	0x2000012c
 8006030:	20000254 	.word	0x20000254
 8006034:	40010c00 	.word	0x40010c00
 8006038:	20000276 	.word	0x20000276
 800603c:	2000027d 	.word	0x2000027d
 8006040:	20000278 	.word	0x20000278
 8006044:	2000027f 	.word	0x2000027f
 8006048:	20000289 	.word	0x20000289
 800604c:	2000022c 	.word	0x2000022c
 8006050:	20000279 	.word	0x20000279
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006054:	4b9b      	ldr	r3, [pc, #620]	; (80062c4 <checkAktifCalisma+0x15a8>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d013      	beq.n	8006084 <checkAktifCalisma+0x1368>
 800605c:	4b9a      	ldr	r3, [pc, #616]	; (80062c8 <checkAktifCalisma+0x15ac>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00f      	beq.n	8006084 <checkAktifCalisma+0x1368>
 8006064:	4b99      	ldr	r3, [pc, #612]	; (80062cc <checkAktifCalisma+0x15b0>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f083 0301 	eor.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006072:	4b94      	ldr	r3, [pc, #592]	; (80062c4 <checkAktifCalisma+0x15a8>)
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006078:	4b95      	ldr	r3, [pc, #596]	; (80062d0 <checkAktifCalisma+0x15b4>)
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800607e:	2002      	movs	r0, #2
 8006080:	f7fe fc7a 	bl	8004978 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006084:	4b93      	ldr	r3, [pc, #588]	; (80062d4 <checkAktifCalisma+0x15b8>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11e      	bne.n	80060ca <checkAktifCalisma+0x13ae>
 800608c:	4b92      	ldr	r3, [pc, #584]	; (80062d8 <checkAktifCalisma+0x15bc>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d11a      	bne.n	80060ca <checkAktifCalisma+0x13ae>
 8006094:	4b91      	ldr	r3, [pc, #580]	; (80062dc <checkAktifCalisma+0x15c0>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d016      	beq.n	80060ca <checkAktifCalisma+0x13ae>
 800609c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060a0:	488f      	ldr	r0, [pc, #572]	; (80062e0 <checkAktifCalisma+0x15c4>)
 80060a2:	f003 f90d 	bl	80092c0 <HAL_GPIO_ReadPin>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d10e      	bne.n	80060ca <checkAktifCalisma+0x13ae>
			hataVar=1;
 80060ac:	4b8d      	ldr	r3, [pc, #564]	; (80062e4 <checkAktifCalisma+0x15c8>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80060b2:	2003      	movs	r0, #3
 80060b4:	f7fa fcd0 	bl	8000a58 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80060b8:	2003      	movs	r0, #3
 80060ba:	f7fa fc73 	bl	80009a4 <hata2EEPROM>
			convertAndSendData();
 80060be:	f001 fbcb 	bl	8007858 <convertAndSendData>
			basinchatasi=1;
 80060c2:	4b89      	ldr	r3, [pc, #548]	; (80062e8 <checkAktifCalisma+0x15cc>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e015      	b.n	80060f6 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80060ca:	4b87      	ldr	r3, [pc, #540]	; (80062e8 <checkAktifCalisma+0x15cc>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d011      	beq.n	80060f6 <checkAktifCalisma+0x13da>
 80060d2:	4b80      	ldr	r3, [pc, #512]	; (80062d4 <checkAktifCalisma+0x15b8>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d10d      	bne.n	80060f6 <checkAktifCalisma+0x13da>
 80060da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060de:	4883      	ldr	r0, [pc, #524]	; (80062ec <checkAktifCalisma+0x15d0>)
 80060e0:	f003 f8ee 	bl	80092c0 <HAL_GPIO_ReadPin>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d105      	bne.n	80060f6 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80060ea:	4b7f      	ldr	r3, [pc, #508]	; (80062e8 <checkAktifCalisma+0x15cc>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80060f0:	2003      	movs	r0, #3
 80060f2:	f7fe fc41 	bl	8004978 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80060f6:	4b7e      	ldr	r3, [pc, #504]	; (80062f0 <checkAktifCalisma+0x15d4>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <checkAktifCalisma+0x13ea>
 80060fe:	4b7d      	ldr	r3, [pc, #500]	; (80062f4 <checkAktifCalisma+0x15d8>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01e      	beq.n	8006144 <checkAktifCalisma+0x1428>
 8006106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800610a:	487b      	ldr	r0, [pc, #492]	; (80062f8 <checkAktifCalisma+0x15dc>)
 800610c:	f003 f8d8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d116      	bne.n	8006144 <checkAktifCalisma+0x1428>
 8006116:	4b79      	ldr	r3, [pc, #484]	; (80062fc <checkAktifCalisma+0x15e0>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d003      	beq.n	8006126 <checkAktifCalisma+0x140a>
 800611e:	4b77      	ldr	r3, [pc, #476]	; (80062fc <checkAktifCalisma+0x15e0>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b03      	cmp	r3, #3
 8006124:	d10e      	bne.n	8006144 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006126:	4b6f      	ldr	r3, [pc, #444]	; (80062e4 <checkAktifCalisma+0x15c8>)
 8006128:	2201      	movs	r2, #1
 800612a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800612c:	2004      	movs	r0, #4
 800612e:	f7fa fc93 	bl	8000a58 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006132:	2004      	movs	r0, #4
 8006134:	f7fa fc36 	bl	80009a4 <hata2EEPROM>
			convertAndSendData();
 8006138:	f001 fb8e 	bl	8007858 <convertAndSendData>
			katkapisivicihatasi=1;
 800613c:	4b70      	ldr	r3, [pc, #448]	; (8006300 <checkAktifCalisma+0x15e4>)
 800613e:	2201      	movs	r2, #1
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	e01f      	b.n	8006184 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006144:	4b6e      	ldr	r3, [pc, #440]	; (8006300 <checkAktifCalisma+0x15e4>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <checkAktifCalisma+0x1468>
 800614c:	4b6d      	ldr	r3, [pc, #436]	; (8006304 <checkAktifCalisma+0x15e8>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d017      	beq.n	8006184 <checkAktifCalisma+0x1468>
 8006154:	4b66      	ldr	r3, [pc, #408]	; (80062f0 <checkAktifCalisma+0x15d4>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f083 0301 	eor.w	r3, r3, #1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d010      	beq.n	8006184 <checkAktifCalisma+0x1468>
 8006162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006166:	4864      	ldr	r0, [pc, #400]	; (80062f8 <checkAktifCalisma+0x15dc>)
 8006168:	f003 f8aa 	bl	80092c0 <HAL_GPIO_ReadPin>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d108      	bne.n	8006184 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006172:	4b63      	ldr	r3, [pc, #396]	; (8006300 <checkAktifCalisma+0x15e4>)
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006178:	4b5e      	ldr	r3, [pc, #376]	; (80062f4 <checkAktifCalisma+0x15d8>)
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800617e:	2004      	movs	r0, #4
 8006180:	f7fe fbfa 	bl	8004978 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006184:	4b5a      	ldr	r3, [pc, #360]	; (80062f0 <checkAktifCalisma+0x15d4>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <checkAktifCalisma+0x1478>
 800618c:	4b5e      	ldr	r3, [pc, #376]	; (8006308 <checkAktifCalisma+0x15ec>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01e      	beq.n	80061d2 <checkAktifCalisma+0x14b6>
 8006194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006198:	4857      	ldr	r0, [pc, #348]	; (80062f8 <checkAktifCalisma+0x15dc>)
 800619a:	f003 f891 	bl	80092c0 <HAL_GPIO_ReadPin>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d116      	bne.n	80061d2 <checkAktifCalisma+0x14b6>
 80061a4:	4b55      	ldr	r3, [pc, #340]	; (80062fc <checkAktifCalisma+0x15e0>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d003      	beq.n	80061b4 <checkAktifCalisma+0x1498>
 80061ac:	4b53      	ldr	r3, [pc, #332]	; (80062fc <checkAktifCalisma+0x15e0>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d10e      	bne.n	80061d2 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80061b4:	4b4b      	ldr	r3, [pc, #300]	; (80062e4 <checkAktifCalisma+0x15c8>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80061ba:	2005      	movs	r0, #5
 80061bc:	f7fa fc4c 	bl	8000a58 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80061c0:	2005      	movs	r0, #5
 80061c2:	f7fa fbef 	bl	80009a4 <hata2EEPROM>
			convertAndSendData();
 80061c6:	f001 fb47 	bl	8007858 <convertAndSendData>
			tablakapisivicihatasi=1;
 80061ca:	4b50      	ldr	r3, [pc, #320]	; (800630c <checkAktifCalisma+0x15f0>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e023      	b.n	800621a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80061d2:	4b4e      	ldr	r3, [pc, #312]	; (800630c <checkAktifCalisma+0x15f0>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01f      	beq.n	800621a <checkAktifCalisma+0x14fe>
 80061da:	4b4a      	ldr	r3, [pc, #296]	; (8006304 <checkAktifCalisma+0x15e8>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01b      	beq.n	800621a <checkAktifCalisma+0x14fe>
 80061e2:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <checkAktifCalisma+0x15d4>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f083 0301 	eor.w	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d014      	beq.n	800621a <checkAktifCalisma+0x14fe>
 80061f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061f4:	4840      	ldr	r0, [pc, #256]	; (80062f8 <checkAktifCalisma+0x15dc>)
 80061f6:	f003 f863 	bl	80092c0 <HAL_GPIO_ReadPin>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10c      	bne.n	800621a <checkAktifCalisma+0x14fe>
 8006200:	4b40      	ldr	r3, [pc, #256]	; (8006304 <checkAktifCalisma+0x15e8>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006208:	4b40      	ldr	r3, [pc, #256]	; (800630c <checkAktifCalisma+0x15f0>)
 800620a:	2200      	movs	r2, #0
 800620c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800620e:	4b3e      	ldr	r3, [pc, #248]	; (8006308 <checkAktifCalisma+0x15ec>)
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006214:	2005      	movs	r0, #5
 8006216:	f7fe fbaf 	bl	8004978 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800621a:	4b30      	ldr	r3, [pc, #192]	; (80062dc <checkAktifCalisma+0x15c0>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <checkAktifCalisma+0x1516>
 8006222:	4b2a      	ldr	r3, [pc, #168]	; (80062cc <checkAktifCalisma+0x15b0>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d103      	bne.n	8006232 <checkAktifCalisma+0x1516>
 800622a:	4b39      	ldr	r3, [pc, #228]	; (8006310 <checkAktifCalisma+0x15f4>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006232:	4b38      	ldr	r3, [pc, #224]	; (8006314 <checkAktifCalisma+0x15f8>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b38      	ldr	r3, [pc, #224]	; (8006318 <checkAktifCalisma+0x15fc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	4a37      	ldr	r2, [pc, #220]	; (800631c <checkAktifCalisma+0x1600>)
 800623e:	7812      	ldrb	r2, [r2, #0]
 8006240:	4293      	cmp	r3, r2
 8006242:	d30d      	bcc.n	8006260 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006244:	4b27      	ldr	r3, [pc, #156]	; (80062e4 <checkAktifCalisma+0x15c8>)
 8006246:	2201      	movs	r2, #1
 8006248:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800624a:	2006      	movs	r0, #6
 800624c:	f7fa fc04 	bl	8000a58 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006250:	2006      	movs	r0, #6
 8006252:	f7fa fba7 	bl	80009a4 <hata2EEPROM>
			  	convertAndSendData();
 8006256:	f001 faff 	bl	8007858 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800625a:	4b31      	ldr	r3, [pc, #196]	; (8006320 <checkAktifCalisma+0x1604>)
 800625c:	2201      	movs	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006260:	4b2f      	ldr	r3, [pc, #188]	; (8006320 <checkAktifCalisma+0x1604>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <checkAktifCalisma+0x1574>
 8006268:	2108      	movs	r1, #8
 800626a:	4823      	ldr	r0, [pc, #140]	; (80062f8 <checkAktifCalisma+0x15dc>)
 800626c:	f003 f828 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00c      	beq.n	8006290 <checkAktifCalisma+0x1574>
 8006276:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <checkAktifCalisma+0x15d4>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f083 0301 	eor.w	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006284:	4b26      	ldr	r3, [pc, #152]	; (8006320 <checkAktifCalisma+0x1604>)
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800628a:	2006      	movs	r0, #6
 800628c:	f7fe fb74 	bl	8004978 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006290:	4b24      	ldr	r3, [pc, #144]	; (8006324 <checkAktifCalisma+0x1608>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10b      	bne.n	80062b0 <checkAktifCalisma+0x1594>
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <checkAktifCalisma+0x15b0>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d107      	bne.n	80062b0 <checkAktifCalisma+0x1594>
 80062a0:	4b21      	ldr	r3, [pc, #132]	; (8006328 <checkAktifCalisma+0x160c>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <checkAktifCalisma+0x1594>
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <checkAktifCalisma+0x15f4>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d03f      	beq.n	8006330 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <checkAktifCalisma+0x1610>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80062b6:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <checkAktifCalisma+0x15d8>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80062bc:	4b12      	ldr	r3, [pc, #72]	; (8006308 <checkAktifCalisma+0x15ec>)
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	e03c      	b.n	800633e <checkAktifCalisma+0x1622>
 80062c4:	20000279 	.word	0x20000279
 80062c8:	2000027f 	.word	0x2000027f
 80062cc:	20000260 	.word	0x20000260
 80062d0:	20000289 	.word	0x20000289
 80062d4:	2000022b 	.word	0x2000022b
 80062d8:	2000022f 	.word	0x2000022f
 80062dc:	2000027c 	.word	0x2000027c
 80062e0:	40011000 	.word	0x40011000
 80062e4:	2000027d 	.word	0x2000027d
 80062e8:	20000286 	.word	0x20000286
 80062ec:	40010c00 	.word	0x40010c00
 80062f0:	20000276 	.word	0x20000276
 80062f4:	2000028a 	.word	0x2000028a
 80062f8:	40010800 	.word	0x40010800
 80062fc:	20000230 	.word	0x20000230
 8006300:	20000287 	.word	0x20000287
 8006304:	2000026a 	.word	0x2000026a
 8006308:	2000028b 	.word	0x2000028b
 800630c:	20000288 	.word	0x20000288
 8006310:	2000025f 	.word	0x2000025f
 8006314:	20000204 	.word	0x20000204
 8006318:	20000218 	.word	0x20000218
 800631c:	20000240 	.word	0x20000240
 8006320:	20000277 	.word	0x20000277
 8006324:	2000025d 	.word	0x2000025d
 8006328:	2000025e 	.word	0x2000025e
 800632c:	2000027e 	.word	0x2000027e
		} else {
			makineCalisiyor=1;
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <checkAktifCalisma+0x1690>)
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006336:	4b1e      	ldr	r3, [pc, #120]	; (80063b0 <checkAktifCalisma+0x1694>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <checkAktifCalisma+0x1698>)
 800633c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800633e:	4b1e      	ldr	r3, [pc, #120]	; (80063b8 <checkAktifCalisma+0x169c>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d02f      	beq.n	80063a6 <checkAktifCalisma+0x168a>
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <checkAktifCalisma+0x16a0>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	f083 0301 	eor.w	r3, r3, #1
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d028      	beq.n	80063a6 <checkAktifCalisma+0x168a>
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <checkAktifCalisma+0x16a4>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	f083 0301 	eor.w	r3, r3, #1
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d021      	beq.n	80063a6 <checkAktifCalisma+0x168a>
 8006362:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <checkAktifCalisma+0x16a8>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	f083 0301 	eor.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01a      	beq.n	80063a6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006370:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <checkAktifCalisma+0x16ac>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f083 0301 	eor.w	r3, r3, #1
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d013      	beq.n	80063a6 <checkAktifCalisma+0x168a>
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <checkAktifCalisma+0x16b0>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f083 0301 	eor.w	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <checkAktifCalisma+0x168a>
 800638c:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <checkAktifCalisma+0x16b4>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f083 0301 	eor.w	r3, r3, #1
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <checkAktifCalisma+0x168a>
			hataVar=0;
 800639a:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <checkAktifCalisma+0x169c>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80063a0:	2007      	movs	r0, #7
 80063a2:	f7fe fae9 	bl	8004978 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	2000027e 	.word	0x2000027e
 80063b0:	20000204 	.word	0x20000204
 80063b4:	20000218 	.word	0x20000218
 80063b8:	2000027d 	.word	0x2000027d
 80063bc:	20000278 	.word	0x20000278
 80063c0:	20000279 	.word	0x20000279
 80063c4:	20000286 	.word	0x20000286
 80063c8:	20000287 	.word	0x20000287
 80063cc:	20000288 	.word	0x20000288
 80063d0:	20000277 	.word	0x20000277

080063d4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80063d8:	4b8b      	ldr	r3, [pc, #556]	; (8006608 <checkDemoModCalisma+0x234>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	f040 8229 	bne.w	8006834 <checkDemoModCalisma+0x460>
 80063e2:	4b8a      	ldr	r3, [pc, #552]	; (800660c <checkDemoModCalisma+0x238>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8224 	beq.w	8006834 <checkDemoModCalisma+0x460>
 80063ec:	4b88      	ldr	r3, [pc, #544]	; (8006610 <checkDemoModCalisma+0x23c>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 821f 	bne.w	8006834 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80063f6:	2102      	movs	r1, #2
 80063f8:	4886      	ldr	r0, [pc, #536]	; (8006614 <checkDemoModCalisma+0x240>)
 80063fa:	f002 ff61 	bl	80092c0 <HAL_GPIO_ReadPin>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d11d      	bne.n	8006440 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006404:	4b84      	ldr	r3, [pc, #528]	; (8006618 <checkDemoModCalisma+0x244>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f083 0301 	eor.w	r3, r3, #1
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006412:	4b82      	ldr	r3, [pc, #520]	; (800661c <checkDemoModCalisma+0x248>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f083 0301 	eor.w	r3, r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00f      	beq.n	8006440 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006420:	4b7f      	ldr	r3, [pc, #508]	; (8006620 <checkDemoModCalisma+0x24c>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f083 0301 	eor.w	r3, r3, #1
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800642e:	2201      	movs	r2, #1
 8006430:	2104      	movs	r1, #4
 8006432:	487c      	ldr	r0, [pc, #496]	; (8006624 <checkDemoModCalisma+0x250>)
 8006434:	f002 ff5b 	bl	80092ee <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006438:	4b7b      	ldr	r3, [pc, #492]	; (8006628 <checkDemoModCalisma+0x254>)
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	e00e      	b.n	800645e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006440:	2102      	movs	r1, #2
 8006442:	4874      	ldr	r0, [pc, #464]	; (8006614 <checkDemoModCalisma+0x240>)
 8006444:	f002 ff3c 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006448:	4603      	mov	r3, r0
 800644a:	2b01      	cmp	r3, #1
 800644c:	d107      	bne.n	800645e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800644e:	2200      	movs	r2, #0
 8006450:	2104      	movs	r1, #4
 8006452:	4874      	ldr	r0, [pc, #464]	; (8006624 <checkDemoModCalisma+0x250>)
 8006454:	f002 ff4b 	bl	80092ee <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006458:	4b73      	ldr	r3, [pc, #460]	; (8006628 <checkDemoModCalisma+0x254>)
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800645e:	4b72      	ldr	r3, [pc, #456]	; (8006628 <checkDemoModCalisma+0x254>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <checkDemoModCalisma+0xaa>
 8006466:	4b6d      	ldr	r3, [pc, #436]	; (800661c <checkDemoModCalisma+0x248>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d107      	bne.n	800647e <checkDemoModCalisma+0xaa>
 800646e:	4b6c      	ldr	r3, [pc, #432]	; (8006620 <checkDemoModCalisma+0x24c>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <checkDemoModCalisma+0xaa>
 8006476:	4b68      	ldr	r3, [pc, #416]	; (8006618 <checkDemoModCalisma+0x244>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800647e:	2201      	movs	r2, #1
 8006480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006484:	4867      	ldr	r0, [pc, #412]	; (8006624 <checkDemoModCalisma+0x250>)
 8006486:	f002 ff32 	bl	80092ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800648a:	2201      	movs	r2, #1
 800648c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006490:	4864      	ldr	r0, [pc, #400]	; (8006624 <checkDemoModCalisma+0x250>)
 8006492:	f002 ff2c 	bl	80092ee <HAL_GPIO_WritePin>
 8006496:	e00b      	b.n	80064b0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006498:	2200      	movs	r2, #0
 800649a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800649e:	4861      	ldr	r0, [pc, #388]	; (8006624 <checkDemoModCalisma+0x250>)
 80064a0:	f002 ff25 	bl	80092ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064aa:	485e      	ldr	r0, [pc, #376]	; (8006624 <checkDemoModCalisma+0x250>)
 80064ac:	f002 ff1f 	bl	80092ee <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064b0:	2102      	movs	r1, #2
 80064b2:	4858      	ldr	r0, [pc, #352]	; (8006614 <checkDemoModCalisma+0x240>)
 80064b4:	f002 ff04 	bl	80092c0 <HAL_GPIO_ReadPin>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d10d      	bne.n	80064da <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064c2:	4854      	ldr	r0, [pc, #336]	; (8006614 <checkDemoModCalisma+0x240>)
 80064c4:	f002 fefc 	bl	80092c0 <HAL_GPIO_ReadPin>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80064ce:	4b56      	ldr	r3, [pc, #344]	; (8006628 <checkDemoModCalisma+0x254>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f083 0301 	eor.w	r3, r3, #1
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064da:	2102      	movs	r1, #2
 80064dc:	484d      	ldr	r0, [pc, #308]	; (8006614 <checkDemoModCalisma+0x240>)
 80064de:	f002 feef 	bl	80092c0 <HAL_GPIO_ReadPin>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d125      	bne.n	8006534 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064ec:	4849      	ldr	r0, [pc, #292]	; (8006614 <checkDemoModCalisma+0x240>)
 80064ee:	f002 fee7 	bl	80092c0 <HAL_GPIO_ReadPin>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11d      	bne.n	8006534 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80064f8:	4b4b      	ldr	r3, [pc, #300]	; (8006628 <checkDemoModCalisma+0x254>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f083 0301 	eor.w	r3, r3, #1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006506:	4b44      	ldr	r3, [pc, #272]	; (8006618 <checkDemoModCalisma+0x244>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f083 0301 	eor.w	r3, r3, #1
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00f      	beq.n	8006534 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006514:	4b42      	ldr	r3, [pc, #264]	; (8006620 <checkDemoModCalisma+0x24c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f083 0301 	eor.w	r3, r3, #1
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006522:	2201      	movs	r2, #1
 8006524:	2120      	movs	r1, #32
 8006526:	483b      	ldr	r0, [pc, #236]	; (8006614 <checkDemoModCalisma+0x240>)
 8006528:	f002 fee1 	bl	80092ee <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800652c:	4b3b      	ldr	r3, [pc, #236]	; (800661c <checkDemoModCalisma+0x248>)
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	e007      	b.n	8006544 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006534:	2200      	movs	r2, #0
 8006536:	2120      	movs	r1, #32
 8006538:	4836      	ldr	r0, [pc, #216]	; (8006614 <checkDemoModCalisma+0x240>)
 800653a:	f002 fed8 	bl	80092ee <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800653e:	4b37      	ldr	r3, [pc, #220]	; (800661c <checkDemoModCalisma+0x248>)
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006544:	2102      	movs	r1, #2
 8006546:	4833      	ldr	r0, [pc, #204]	; (8006614 <checkDemoModCalisma+0x240>)
 8006548:	f002 feba 	bl	80092c0 <HAL_GPIO_ReadPin>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d125      	bne.n	800659e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006556:	482f      	ldr	r0, [pc, #188]	; (8006614 <checkDemoModCalisma+0x240>)
 8006558:	f002 feb2 	bl	80092c0 <HAL_GPIO_ReadPin>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d11d      	bne.n	800659e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006562:	4b31      	ldr	r3, [pc, #196]	; (8006628 <checkDemoModCalisma+0x254>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f083 0301 	eor.w	r3, r3, #1
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d016      	beq.n	800659e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006570:	4b2a      	ldr	r3, [pc, #168]	; (800661c <checkDemoModCalisma+0x248>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	f083 0301 	eor.w	r3, r3, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00f      	beq.n	800659e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800657e:	4b26      	ldr	r3, [pc, #152]	; (8006618 <checkDemoModCalisma+0x244>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	f083 0301 	eor.w	r3, r3, #1
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d008      	beq.n	800659e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800658c:	2201      	movs	r2, #1
 800658e:	2110      	movs	r1, #16
 8006590:	4820      	ldr	r0, [pc, #128]	; (8006614 <checkDemoModCalisma+0x240>)
 8006592:	f002 feac 	bl	80092ee <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006596:	4b22      	ldr	r3, [pc, #136]	; (8006620 <checkDemoModCalisma+0x24c>)
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	e007      	b.n	80065ae <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800659e:	2200      	movs	r2, #0
 80065a0:	2110      	movs	r1, #16
 80065a2:	481c      	ldr	r0, [pc, #112]	; (8006614 <checkDemoModCalisma+0x240>)
 80065a4:	f002 fea3 	bl	80092ee <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80065a8:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <checkDemoModCalisma+0x24c>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80065ae:	2104      	movs	r1, #4
 80065b0:	4818      	ldr	r0, [pc, #96]	; (8006614 <checkDemoModCalisma+0x240>)
 80065b2:	f002 fe85 	bl	80092c0 <HAL_GPIO_ReadPin>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d139      	bne.n	8006630 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80065bc:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <checkDemoModCalisma+0x254>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f083 0301 	eor.w	r3, r3, #1
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d032      	beq.n	8006630 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80065ca:	4b15      	ldr	r3, [pc, #84]	; (8006620 <checkDemoModCalisma+0x24c>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f083 0301 	eor.w	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d02b      	beq.n	8006630 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80065d8:	4b10      	ldr	r3, [pc, #64]	; (800661c <checkDemoModCalisma+0x248>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f083 0301 	eor.w	r3, r3, #1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d024      	beq.n	8006630 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80065e6:	2201      	movs	r2, #1
 80065e8:	2102      	movs	r1, #2
 80065ea:	480e      	ldr	r0, [pc, #56]	; (8006624 <checkDemoModCalisma+0x250>)
 80065ec:	f002 fe7f 	bl	80092ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80065f0:	2201      	movs	r2, #1
 80065f2:	2101      	movs	r1, #1
 80065f4:	480b      	ldr	r0, [pc, #44]	; (8006624 <checkDemoModCalisma+0x250>)
 80065f6:	f002 fe7a 	bl	80092ee <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80065fa:	4b07      	ldr	r3, [pc, #28]	; (8006618 <checkDemoModCalisma+0x244>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <checkDemoModCalisma+0x258>)
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e027      	b.n	8006658 <checkDemoModCalisma+0x284>
 8006608:	20000246 	.word	0x20000246
 800660c:	2000027a 	.word	0x2000027a
 8006610:	20000245 	.word	0x20000245
 8006614:	40011000 	.word	0x40011000
 8006618:	20000281 	.word	0x20000281
 800661c:	20000282 	.word	0x20000282
 8006620:	20000283 	.word	0x20000283
 8006624:	40010c00 	.word	0x40010c00
 8006628:	20000280 	.word	0x20000280
 800662c:	20000266 	.word	0x20000266
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006630:	2104      	movs	r1, #4
 8006632:	48a0      	ldr	r0, [pc, #640]	; (80068b4 <checkDemoModCalisma+0x4e0>)
 8006634:	f002 fe44 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006638:	4603      	mov	r3, r0
 800663a:	2b01      	cmp	r3, #1
 800663c:	d10c      	bne.n	8006658 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800663e:	2200      	movs	r2, #0
 8006640:	2102      	movs	r1, #2
 8006642:	489d      	ldr	r0, [pc, #628]	; (80068b8 <checkDemoModCalisma+0x4e4>)
 8006644:	f002 fe53 	bl	80092ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006648:	2200      	movs	r2, #0
 800664a:	2101      	movs	r1, #1
 800664c:	489a      	ldr	r0, [pc, #616]	; (80068b8 <checkDemoModCalisma+0x4e4>)
 800664e:	f002 fe4e 	bl	80092ee <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006652:	4b9a      	ldr	r3, [pc, #616]	; (80068bc <checkDemoModCalisma+0x4e8>)
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006658:	2104      	movs	r1, #4
 800665a:	4896      	ldr	r0, [pc, #600]	; (80068b4 <checkDemoModCalisma+0x4e0>)
 800665c:	f002 fe30 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006660:	4603      	mov	r3, r0
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10d      	bne.n	8006682 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006666:	2201      	movs	r2, #1
 8006668:	2180      	movs	r1, #128	; 0x80
 800666a:	4895      	ldr	r0, [pc, #596]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 800666c:	f002 fe3f 	bl	80092ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006670:	2201      	movs	r2, #1
 8006672:	2120      	movs	r1, #32
 8006674:	4892      	ldr	r0, [pc, #584]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 8006676:	f002 fe3a 	bl	80092ee <HAL_GPIO_WritePin>
			timer3 = millis;
 800667a:	4b92      	ldr	r3, [pc, #584]	; (80068c4 <checkDemoModCalisma+0x4f0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a92      	ldr	r2, [pc, #584]	; (80068c8 <checkDemoModCalisma+0x4f4>)
 8006680:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006682:	4b90      	ldr	r3, [pc, #576]	; (80068c4 <checkDemoModCalisma+0x4f0>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b90      	ldr	r3, [pc, #576]	; (80068c8 <checkDemoModCalisma+0x4f4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b04      	cmp	r3, #4
 800668e:	d909      	bls.n	80066a4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006690:	2200      	movs	r2, #0
 8006692:	2180      	movs	r1, #128	; 0x80
 8006694:	488a      	ldr	r0, [pc, #552]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 8006696:	f002 fe2a 	bl	80092ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800669a:	2200      	movs	r2, #0
 800669c:	2120      	movs	r1, #32
 800669e:	4888      	ldr	r0, [pc, #544]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 80066a0:	f002 fe25 	bl	80092ee <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80066a4:	2102      	movs	r1, #2
 80066a6:	4883      	ldr	r0, [pc, #524]	; (80068b4 <checkDemoModCalisma+0x4e0>)
 80066a8:	f002 fe0a 	bl	80092c0 <HAL_GPIO_ReadPin>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d108      	bne.n	80066c4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80066b2:	2201      	movs	r2, #1
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	4882      	ldr	r0, [pc, #520]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 80066b8:	f002 fe19 	bl	80092ee <HAL_GPIO_WritePin>
			timer3 = millis;
 80066bc:	4b81      	ldr	r3, [pc, #516]	; (80068c4 <checkDemoModCalisma+0x4f0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a81      	ldr	r2, [pc, #516]	; (80068c8 <checkDemoModCalisma+0x4f4>)
 80066c2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80066c4:	4b7f      	ldr	r3, [pc, #508]	; (80068c4 <checkDemoModCalisma+0x4f0>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	4b7f      	ldr	r3, [pc, #508]	; (80068c8 <checkDemoModCalisma+0x4f4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d904      	bls.n	80066dc <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2140      	movs	r1, #64	; 0x40
 80066d6:	487a      	ldr	r0, [pc, #488]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 80066d8:	f002 fe09 	bl	80092ee <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80066dc:	4b7b      	ldr	r3, [pc, #492]	; (80068cc <checkDemoModCalisma+0x4f8>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d058      	beq.n	8006796 <checkDemoModCalisma+0x3c2>
 80066e4:	4b7a      	ldr	r3, [pc, #488]	; (80068d0 <checkDemoModCalisma+0x4fc>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d054      	beq.n	8006796 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80066ec:	4b79      	ldr	r3, [pc, #484]	; (80068d4 <checkDemoModCalisma+0x500>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	4b77      	ldr	r3, [pc, #476]	; (80068d4 <checkDemoModCalisma+0x500>)
 80066f6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80066f8:	4b76      	ldr	r3, [pc, #472]	; (80068d4 <checkDemoModCalisma+0x500>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b09      	cmp	r3, #9
 80066fe:	d908      	bls.n	8006712 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006700:	4b74      	ldr	r3, [pc, #464]	; (80068d4 <checkDemoModCalisma+0x500>)
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006706:	4b74      	ldr	r3, [pc, #464]	; (80068d8 <checkDemoModCalisma+0x504>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	3301      	adds	r3, #1
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4b72      	ldr	r3, [pc, #456]	; (80068d8 <checkDemoModCalisma+0x504>)
 8006710:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006712:	4b71      	ldr	r3, [pc, #452]	; (80068d8 <checkDemoModCalisma+0x504>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b09      	cmp	r3, #9
 8006718:	d908      	bls.n	800672c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800671a:	4b6f      	ldr	r3, [pc, #444]	; (80068d8 <checkDemoModCalisma+0x504>)
 800671c:	2200      	movs	r2, #0
 800671e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006720:	4b6e      	ldr	r3, [pc, #440]	; (80068dc <checkDemoModCalisma+0x508>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	b2da      	uxtb	r2, r3
 8006728:	4b6c      	ldr	r3, [pc, #432]	; (80068dc <checkDemoModCalisma+0x508>)
 800672a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800672c:	4b6b      	ldr	r3, [pc, #428]	; (80068dc <checkDemoModCalisma+0x508>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b09      	cmp	r3, #9
 8006732:	d908      	bls.n	8006746 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006734:	4b69      	ldr	r3, [pc, #420]	; (80068dc <checkDemoModCalisma+0x508>)
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800673a:	4b69      	ldr	r3, [pc, #420]	; (80068e0 <checkDemoModCalisma+0x50c>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	b2da      	uxtb	r2, r3
 8006742:	4b67      	ldr	r3, [pc, #412]	; (80068e0 <checkDemoModCalisma+0x50c>)
 8006744:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006746:	4b66      	ldr	r3, [pc, #408]	; (80068e0 <checkDemoModCalisma+0x50c>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b09      	cmp	r3, #9
 800674c:	d908      	bls.n	8006760 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800674e:	4b64      	ldr	r3, [pc, #400]	; (80068e0 <checkDemoModCalisma+0x50c>)
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006754:	4b63      	ldr	r3, [pc, #396]	; (80068e4 <checkDemoModCalisma+0x510>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	b2da      	uxtb	r2, r3
 800675c:	4b61      	ldr	r3, [pc, #388]	; (80068e4 <checkDemoModCalisma+0x510>)
 800675e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006760:	4b60      	ldr	r3, [pc, #384]	; (80068e4 <checkDemoModCalisma+0x510>)
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	4b60      	ldr	r3, [pc, #384]	; (80068e8 <checkDemoModCalisma+0x514>)
 8006766:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800676a:	4b5d      	ldr	r3, [pc, #372]	; (80068e0 <checkDemoModCalisma+0x50c>)
 800676c:	781a      	ldrb	r2, [r3, #0]
 800676e:	4b5e      	ldr	r3, [pc, #376]	; (80068e8 <checkDemoModCalisma+0x514>)
 8006770:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006772:	4b5a      	ldr	r3, [pc, #360]	; (80068dc <checkDemoModCalisma+0x508>)
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	4b5c      	ldr	r3, [pc, #368]	; (80068e8 <checkDemoModCalisma+0x514>)
 8006778:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800677a:	4b57      	ldr	r3, [pc, #348]	; (80068d8 <checkDemoModCalisma+0x504>)
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	4b5a      	ldr	r3, [pc, #360]	; (80068e8 <checkDemoModCalisma+0x514>)
 8006780:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006782:	4b54      	ldr	r3, [pc, #336]	; (80068d4 <checkDemoModCalisma+0x500>)
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	4b58      	ldr	r3, [pc, #352]	; (80068e8 <checkDemoModCalisma+0x514>)
 8006788:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800678a:	4b58      	ldr	r3, [pc, #352]	; (80068ec <checkDemoModCalisma+0x518>)
 800678c:	2201      	movs	r2, #1
 800678e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006790:	4b4f      	ldr	r3, [pc, #316]	; (80068d0 <checkDemoModCalisma+0x4fc>)
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006796:	4b56      	ldr	r3, [pc, #344]	; (80068f0 <checkDemoModCalisma+0x51c>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f040 8087 	bne.w	80068ae <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80067a0:	4a54      	ldr	r2, [pc, #336]	; (80068f4 <checkDemoModCalisma+0x520>)
 80067a2:	2101      	movs	r1, #1
 80067a4:	2002      	movs	r0, #2
 80067a6:	f001 fa65 	bl	8007c74 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80067aa:	4a53      	ldr	r2, [pc, #332]	; (80068f8 <checkDemoModCalisma+0x524>)
 80067ac:	2101      	movs	r1, #1
 80067ae:	2001      	movs	r0, #1
 80067b0:	f001 fa60 	bl	8007c74 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80067b4:	4b4b      	ldr	r3, [pc, #300]	; (80068e4 <checkDemoModCalisma+0x510>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	220a      	movs	r2, #10
 80067ba:	4950      	ldr	r1, [pc, #320]	; (80068fc <checkDemoModCalisma+0x528>)
 80067bc:	4618      	mov	r0, r3
 80067be:	f005 fdab 	bl	800c318 <itoa>
			lcd_print(2,12,snum);
 80067c2:	4a4e      	ldr	r2, [pc, #312]	; (80068fc <checkDemoModCalisma+0x528>)
 80067c4:	210c      	movs	r1, #12
 80067c6:	2002      	movs	r0, #2
 80067c8:	f001 fa54 	bl	8007c74 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80067cc:	4b44      	ldr	r3, [pc, #272]	; (80068e0 <checkDemoModCalisma+0x50c>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	220a      	movs	r2, #10
 80067d2:	494a      	ldr	r1, [pc, #296]	; (80068fc <checkDemoModCalisma+0x528>)
 80067d4:	4618      	mov	r0, r3
 80067d6:	f005 fd9f 	bl	800c318 <itoa>
			lcd_print(2,13,snum);
 80067da:	4a48      	ldr	r2, [pc, #288]	; (80068fc <checkDemoModCalisma+0x528>)
 80067dc:	210d      	movs	r1, #13
 80067de:	2002      	movs	r0, #2
 80067e0:	f001 fa48 	bl	8007c74 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80067e4:	4b3d      	ldr	r3, [pc, #244]	; (80068dc <checkDemoModCalisma+0x508>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	220a      	movs	r2, #10
 80067ea:	4944      	ldr	r1, [pc, #272]	; (80068fc <checkDemoModCalisma+0x528>)
 80067ec:	4618      	mov	r0, r3
 80067ee:	f005 fd93 	bl	800c318 <itoa>
			lcd_print(2,14,snum);
 80067f2:	4a42      	ldr	r2, [pc, #264]	; (80068fc <checkDemoModCalisma+0x528>)
 80067f4:	210e      	movs	r1, #14
 80067f6:	2002      	movs	r0, #2
 80067f8:	f001 fa3c 	bl	8007c74 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80067fc:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <checkDemoModCalisma+0x504>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	220a      	movs	r2, #10
 8006802:	493e      	ldr	r1, [pc, #248]	; (80068fc <checkDemoModCalisma+0x528>)
 8006804:	4618      	mov	r0, r3
 8006806:	f005 fd87 	bl	800c318 <itoa>
			lcd_print(2,15,snum);
 800680a:	4a3c      	ldr	r2, [pc, #240]	; (80068fc <checkDemoModCalisma+0x528>)
 800680c:	210f      	movs	r1, #15
 800680e:	2002      	movs	r0, #2
 8006810:	f001 fa30 	bl	8007c74 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006814:	4b2f      	ldr	r3, [pc, #188]	; (80068d4 <checkDemoModCalisma+0x500>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	220a      	movs	r2, #10
 800681a:	4938      	ldr	r1, [pc, #224]	; (80068fc <checkDemoModCalisma+0x528>)
 800681c:	4618      	mov	r0, r3
 800681e:	f005 fd7b 	bl	800c318 <itoa>
			lcd_print(2,16,snum);
 8006822:	4a36      	ldr	r2, [pc, #216]	; (80068fc <checkDemoModCalisma+0x528>)
 8006824:	2110      	movs	r1, #16
 8006826:	2002      	movs	r0, #2
 8006828:	f001 fa24 	bl	8007c74 <lcd_print>
			mesajYazildi=1;
 800682c:	4b34      	ldr	r3, [pc, #208]	; (8006900 <checkDemoModCalisma+0x52c>)
 800682e:	2201      	movs	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006832:	e03c      	b.n	80068ae <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006834:	4b33      	ldr	r3, [pc, #204]	; (8006904 <checkDemoModCalisma+0x530>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d003      	beq.n	8006844 <checkDemoModCalisma+0x470>
 800683c:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <checkDemoModCalisma+0x51c>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d134      	bne.n	80068ae <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800684a:	481b      	ldr	r0, [pc, #108]	; (80068b8 <checkDemoModCalisma+0x4e4>)
 800684c:	f002 fd4f 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006856:	4818      	ldr	r0, [pc, #96]	; (80068b8 <checkDemoModCalisma+0x4e4>)
 8006858:	f002 fd49 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800685c:	2200      	movs	r2, #0
 800685e:	2104      	movs	r1, #4
 8006860:	4815      	ldr	r0, [pc, #84]	; (80068b8 <checkDemoModCalisma+0x4e4>)
 8006862:	f002 fd44 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006866:	2200      	movs	r2, #0
 8006868:	2102      	movs	r1, #2
 800686a:	4813      	ldr	r0, [pc, #76]	; (80068b8 <checkDemoModCalisma+0x4e4>)
 800686c:	f002 fd3f 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006870:	2200      	movs	r2, #0
 8006872:	2101      	movs	r1, #1
 8006874:	4810      	ldr	r0, [pc, #64]	; (80068b8 <checkDemoModCalisma+0x4e4>)
 8006876:	f002 fd3a 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800687a:	2200      	movs	r2, #0
 800687c:	2120      	movs	r1, #32
 800687e:	480d      	ldr	r0, [pc, #52]	; (80068b4 <checkDemoModCalisma+0x4e0>)
 8006880:	f002 fd35 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006884:	2200      	movs	r2, #0
 8006886:	2110      	movs	r1, #16
 8006888:	480a      	ldr	r0, [pc, #40]	; (80068b4 <checkDemoModCalisma+0x4e0>)
 800688a:	f002 fd30 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800688e:	2200      	movs	r2, #0
 8006890:	2180      	movs	r1, #128	; 0x80
 8006892:	480b      	ldr	r0, [pc, #44]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 8006894:	f002 fd2b 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006898:	2200      	movs	r2, #0
 800689a:	2140      	movs	r1, #64	; 0x40
 800689c:	4808      	ldr	r0, [pc, #32]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 800689e:	f002 fd26 	bl	80092ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80068a2:	2200      	movs	r2, #0
 80068a4:	2120      	movs	r1, #32
 80068a6:	4806      	ldr	r0, [pc, #24]	; (80068c0 <checkDemoModCalisma+0x4ec>)
 80068a8:	f002 fd21 	bl	80092ee <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80068ac:	e7ff      	b.n	80068ae <checkDemoModCalisma+0x4da>
 80068ae:	bf00      	nop
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	40011000 	.word	0x40011000
 80068b8:	40010c00 	.word	0x40010c00
 80068bc:	20000281 	.word	0x20000281
 80068c0:	40010800 	.word	0x40010800
 80068c4:	20000204 	.word	0x20000204
 80068c8:	20000214 	.word	0x20000214
 80068cc:	20000280 	.word	0x20000280
 80068d0:	20000266 	.word	0x20000266
 80068d4:	20000225 	.word	0x20000225
 80068d8:	20000226 	.word	0x20000226
 80068dc:	20000000 	.word	0x20000000
 80068e0:	20000001 	.word	0x20000001
 80068e4:	20000227 	.word	0x20000227
 80068e8:	2000012c 	.word	0x2000012c
 80068ec:	20000254 	.word	0x20000254
 80068f0:	20000245 	.word	0x20000245
 80068f4:	0800db40 	.word	0x0800db40
 80068f8:	0800db4c 	.word	0x0800db4c
 80068fc:	2000019c 	.word	0x2000019c
 8006900:	2000025c 	.word	0x2000025c
 8006904:	20000246 	.word	0x20000246

08006908 <mainLoop>:

void mainLoop() {
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800690e:	f7fe f923 	bl	8004b58 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006912:	2101      	movs	r1, #1
 8006914:	48ac      	ldr	r0, [pc, #688]	; (8006bc8 <mainLoop+0x2c0>)
 8006916:	f002 fcd3 	bl	80092c0 <HAL_GPIO_ReadPin>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d136      	bne.n	800698e <mainLoop+0x86>
 8006920:	2108      	movs	r1, #8
 8006922:	48aa      	ldr	r0, [pc, #680]	; (8006bcc <mainLoop+0x2c4>)
 8006924:	f002 fccc 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d12f      	bne.n	800698e <mainLoop+0x86>
 800692e:	2102      	movs	r1, #2
 8006930:	48a5      	ldr	r0, [pc, #660]	; (8006bc8 <mainLoop+0x2c0>)
 8006932:	f002 fcc5 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d128      	bne.n	800698e <mainLoop+0x86>
 800693c:	2104      	movs	r1, #4
 800693e:	48a2      	ldr	r0, [pc, #648]	; (8006bc8 <mainLoop+0x2c0>)
 8006940:	f002 fcbe 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d121      	bne.n	800698e <mainLoop+0x86>
 800694a:	2108      	movs	r1, #8
 800694c:	489e      	ldr	r0, [pc, #632]	; (8006bc8 <mainLoop+0x2c0>)
 800694e:	f002 fcb7 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d11a      	bne.n	800698e <mainLoop+0x86>
 8006958:	2180      	movs	r1, #128	; 0x80
 800695a:	489c      	ldr	r0, [pc, #624]	; (8006bcc <mainLoop+0x2c4>)
 800695c:	f002 fcb0 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006960:	4603      	mov	r3, r0
 8006962:	2b01      	cmp	r3, #1
 8006964:	d113      	bne.n	800698e <mainLoop+0x86>
 8006966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800696a:	4898      	ldr	r0, [pc, #608]	; (8006bcc <mainLoop+0x2c4>)
 800696c:	f002 fca8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006970:	4603      	mov	r3, r0
 8006972:	2b01      	cmp	r3, #1
 8006974:	d10b      	bne.n	800698e <mainLoop+0x86>
 8006976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800697a:	4894      	ldr	r0, [pc, #592]	; (8006bcc <mainLoop+0x2c4>)
 800697c:	f002 fca0 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006980:	4603      	mov	r3, r0
 8006982:	2b01      	cmp	r3, #1
 8006984:	d103      	bne.n	800698e <mainLoop+0x86>
			butonKontrol=0;
 8006986:	4b92      	ldr	r3, [pc, #584]	; (8006bd0 <mainLoop+0x2c8>)
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e003      	b.n	8006996 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800698e:	4b91      	ldr	r3, [pc, #580]	; (8006bd4 <mainLoop+0x2cc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a91      	ldr	r2, [pc, #580]	; (8006bd8 <mainLoop+0x2d0>)
 8006994:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006996:	4b91      	ldr	r3, [pc, #580]	; (8006bdc <mainLoop+0x2d4>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d03a      	beq.n	8006a14 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800699e:	bf00      	nop
 80069a0:	488f      	ldr	r0, [pc, #572]	; (8006be0 <mainLoop+0x2d8>)
 80069a2:	f003 fab6 	bl	8009f12 <HAL_I2C_GetError>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d0f9      	beq.n	80069a0 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80069ac:	bf00      	nop
 80069ae:	488c      	ldr	r0, [pc, #560]	; (8006be0 <mainLoop+0x2d8>)
 80069b0:	f003 faa2 	bl	8009ef8 <HAL_I2C_GetState>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d1f9      	bne.n	80069ae <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80069ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069be:	9302      	str	r3, [sp, #8]
 80069c0:	236e      	movs	r3, #110	; 0x6e
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	4b87      	ldr	r3, [pc, #540]	; (8006be4 <mainLoop+0x2dc>)
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	236e      	movs	r3, #110	; 0x6e
 80069ca:	2200      	movs	r2, #0
 80069cc:	21a0      	movs	r1, #160	; 0xa0
 80069ce:	4884      	ldr	r0, [pc, #528]	; (8006be0 <mainLoop+0x2d8>)
 80069d0:	f002 ff30 	bl	8009834 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80069d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069d8:	f001 fea2 	bl	8008720 <HAL_Delay>

		  hafizaYaz=0;
 80069dc:	4b7f      	ldr	r3, [pc, #508]	; (8006bdc <mainLoop+0x2d4>)
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80069e2:	4b81      	ldr	r3, [pc, #516]	; (8006be8 <mainLoop+0x2e0>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80069ea:	4a80      	ldr	r2, [pc, #512]	; (8006bec <mainLoop+0x2e4>)
 80069ec:	2101      	movs	r1, #1
 80069ee:	2002      	movs	r0, #2
 80069f0:	f001 f940 	bl	8007c74 <lcd_print>
 80069f4:	e008      	b.n	8006a08 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80069f6:	4b7c      	ldr	r3, [pc, #496]	; (8006be8 <mainLoop+0x2e0>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d104      	bne.n	8006a08 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80069fe:	4a7c      	ldr	r2, [pc, #496]	; (8006bf0 <mainLoop+0x2e8>)
 8006a00:	2101      	movs	r1, #1
 8006a02:	2002      	movs	r0, #2
 8006a04:	f001 f936 	bl	8007c74 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a0c:	f001 fe88 	bl	8008720 <HAL_Delay>
		  lcd_clear();
 8006a10:	f001 f95c 	bl	8007ccc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006a14:	4b77      	ldr	r3, [pc, #476]	; (8006bf4 <mainLoop+0x2ec>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f083 0301 	eor.w	r3, r3, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d06d      	beq.n	8006afe <mainLoop+0x1f6>
 8006a22:	486f      	ldr	r0, [pc, #444]	; (8006be0 <mainLoop+0x2d8>)
 8006a24:	f003 fa68 	bl	8009ef8 <HAL_I2C_GetState>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d167      	bne.n	8006afe <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006a2e:	4b72      	ldr	r3, [pc, #456]	; (8006bf8 <mainLoop+0x2f0>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	f083 0301 	eor.w	r3, r3, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d044      	beq.n	8006ac6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006a3c:	4a6f      	ldr	r2, [pc, #444]	; (8006bfc <mainLoop+0x2f4>)
 8006a3e:	2101      	movs	r1, #1
 8006a40:	2001      	movs	r0, #1
 8006a42:	f001 f917 	bl	8007c74 <lcd_print>
			  if(dilSecim==0) {
 8006a46:	4b68      	ldr	r3, [pc, #416]	; (8006be8 <mainLoop+0x2e0>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d105      	bne.n	8006a5a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006a4e:	4a6c      	ldr	r2, [pc, #432]	; (8006c00 <mainLoop+0x2f8>)
 8006a50:	2101      	movs	r1, #1
 8006a52:	2002      	movs	r0, #2
 8006a54:	f001 f90e 	bl	8007c74 <lcd_print>
 8006a58:	e008      	b.n	8006a6c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006a5a:	4b63      	ldr	r3, [pc, #396]	; (8006be8 <mainLoop+0x2e0>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d104      	bne.n	8006a6c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006a62:	4a68      	ldr	r2, [pc, #416]	; (8006c04 <mainLoop+0x2fc>)
 8006a64:	2101      	movs	r1, #1
 8006a66:	2002      	movs	r0, #2
 8006a68:	f001 f904 	bl	8007c74 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a70:	f001 fe56 	bl	8008720 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a74:	bf00      	nop
 8006a76:	485a      	ldr	r0, [pc, #360]	; (8006be0 <mainLoop+0x2d8>)
 8006a78:	f003 fa4b 	bl	8009f12 <HAL_I2C_GetError>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d0f9      	beq.n	8006a76 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a82:	e003      	b.n	8006a8c <mainLoop+0x184>
				  HAL_Delay(1000);
 8006a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a88:	f001 fe4a 	bl	8008720 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a8c:	4854      	ldr	r0, [pc, #336]	; (8006be0 <mainLoop+0x2d8>)
 8006a8e:	f003 fa33 	bl	8009ef8 <HAL_I2C_GetState>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d1f5      	bne.n	8006a84 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006a98:	4b53      	ldr	r3, [pc, #332]	; (8006be8 <mainLoop+0x2e0>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006aa0:	4a59      	ldr	r2, [pc, #356]	; (8006c08 <mainLoop+0x300>)
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	2002      	movs	r0, #2
 8006aa6:	f001 f8e5 	bl	8007c74 <lcd_print>
 8006aaa:	e008      	b.n	8006abe <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006aac:	4b4e      	ldr	r3, [pc, #312]	; (8006be8 <mainLoop+0x2e0>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d104      	bne.n	8006abe <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006ab4:	4a55      	ldr	r2, [pc, #340]	; (8006c0c <mainLoop+0x304>)
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	2002      	movs	r0, #2
 8006aba:	f001 f8db 	bl	8007c74 <lcd_print>
			  }

			  ilkOkuma=1;
 8006abe:	4b4e      	ldr	r3, [pc, #312]	; (8006bf8 <mainLoop+0x2f0>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	e014      	b.n	8006af0 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006ac6:	4b48      	ldr	r3, [pc, #288]	; (8006be8 <mainLoop+0x2e0>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006ace:	4a50      	ldr	r2, [pc, #320]	; (8006c10 <mainLoop+0x308>)
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	2002      	movs	r0, #2
 8006ad4:	f001 f8ce 	bl	8007c74 <lcd_print>
 8006ad8:	e008      	b.n	8006aec <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006ada:	4b43      	ldr	r3, [pc, #268]	; (8006be8 <mainLoop+0x2e0>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d104      	bne.n	8006aec <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006ae2:	4a4c      	ldr	r2, [pc, #304]	; (8006c14 <mainLoop+0x30c>)
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	2002      	movs	r0, #2
 8006ae8:	f001 f8c4 	bl	8007c74 <lcd_print>
			  }
			  lcd_clear();
 8006aec:	f001 f8ee 	bl	8007ccc <lcd_clear>
		  }

		  lcd_clear();
 8006af0:	f001 f8ec 	bl	8007ccc <lcd_clear>

		  eepromKontrol();
 8006af4:	f7f9 fb9e 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006af8:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <mainLoop+0x2ec>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006afe:	4b46      	ldr	r3, [pc, #280]	; (8006c18 <mainLoop+0x310>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d11c      	bne.n	8006b40 <mainLoop+0x238>
 8006b06:	4b45      	ldr	r3, [pc, #276]	; (8006c1c <mainLoop+0x314>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	f083 0301 	eor.w	r3, r3, #1
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d015      	beq.n	8006b40 <mainLoop+0x238>
 8006b14:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <mainLoop+0x318>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d111      	bne.n	8006b40 <mainLoop+0x238>
			lcd_clear();
 8006b1c:	f001 f8d6 	bl	8007ccc <lcd_clear>
			HAL_Delay(10);
 8006b20:	200a      	movs	r0, #10
 8006b22:	f001 fdfd 	bl	8008720 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006b26:	4a3f      	ldr	r2, [pc, #252]	; (8006c24 <mainLoop+0x31c>)
 8006b28:	2101      	movs	r1, #1
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	f001 f8a2 	bl	8007c74 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006b30:	4a3d      	ldr	r2, [pc, #244]	; (8006c28 <mainLoop+0x320>)
 8006b32:	2101      	movs	r1, #1
 8006b34:	2002      	movs	r0, #2
 8006b36:	f001 f89d 	bl	8007c74 <lcd_print>
			mesajYazildi=1;
 8006b3a:	4b38      	ldr	r3, [pc, #224]	; (8006c1c <mainLoop+0x314>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006b40:	4b35      	ldr	r3, [pc, #212]	; (8006c18 <mainLoop+0x310>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d112      	bne.n	8006b6e <mainLoop+0x266>
 8006b48:	2102      	movs	r1, #2
 8006b4a:	481f      	ldr	r0, [pc, #124]	; (8006bc8 <mainLoop+0x2c0>)
 8006b4c:	f002 fbb8 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d10b      	bne.n	8006b6e <mainLoop+0x266>
 8006b56:	2104      	movs	r1, #4
 8006b58:	481b      	ldr	r0, [pc, #108]	; (8006bc8 <mainLoop+0x2c0>)
 8006b5a:	f002 fbb1 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d104      	bne.n	8006b6e <mainLoop+0x266>
			menuGiris=1;
 8006b64:	4b2c      	ldr	r3, [pc, #176]	; (8006c18 <mainLoop+0x310>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006b6a:	f001 f8af 	bl	8007ccc <lcd_clear>
		}

		if(menuGiris==1) {
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <mainLoop+0x310>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <mainLoop+0x272>
			menu();
 8006b76:	f7fa fb87 	bl	8001288 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b7e:	4813      	ldr	r0, [pc, #76]	; (8006bcc <mainLoop+0x2c4>)
 8006b80:	f002 fbcd 	bl	800931e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b88:	4828      	ldr	r0, [pc, #160]	; (8006c2c <mainLoop+0x324>)
 8006b8a:	f002 fb99 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <mainLoop+0x2a2>
 8006b94:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <mainLoop+0x328>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f083 0301 	eor.w	r3, r3, #1
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <mainLoop+0x2a2>
			stopVar=1;
 8006ba2:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <mainLoop+0x32c>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	e002      	b.n	8006bb0 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006baa:	4b22      	ldr	r3, [pc, #136]	; (8006c34 <mainLoop+0x32c>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006bb0:	f7fd ffe8 	bl	8004b84 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006bb4:	f7fe f81a 	bl	8004bec <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006bb8:	f7fe f85e 	bl	8004c78 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006bbc:	f7fe f8ae 	bl	8004d1c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006bc0:	f7ff fc08 	bl	80063d4 <checkDemoModCalisma>
		checkLCDBacklight();
 8006bc4:	e6a3      	b.n	800690e <mainLoop+0x6>
 8006bc6:	bf00      	nop
 8006bc8:	40010800 	.word	0x40010800
 8006bcc:	40011000 	.word	0x40011000
 8006bd0:	20000257 	.word	0x20000257
 8006bd4:	20000204 	.word	0x20000204
 8006bd8:	20000220 	.word	0x20000220
 8006bdc:	20000254 	.word	0x20000254
 8006be0:	200002b8 	.word	0x200002b8
 8006be4:	2000012c 	.word	0x2000012c
 8006be8:	20000249 	.word	0x20000249
 8006bec:	0800db60 	.word	0x0800db60
 8006bf0:	0800db74 	.word	0x0800db74
 8006bf4:	20000255 	.word	0x20000255
 8006bf8:	20000256 	.word	0x20000256
 8006bfc:	0800db88 	.word	0x0800db88
 8006c00:	0800db9c 	.word	0x0800db9c
 8006c04:	0800dbb0 	.word	0x0800dbb0
 8006c08:	0800dbc4 	.word	0x0800dbc4
 8006c0c:	0800dbd8 	.word	0x0800dbd8
 8006c10:	0800dbec 	.word	0x0800dbec
 8006c14:	0800dc00 	.word	0x0800dc00
 8006c18:	20000245 	.word	0x20000245
 8006c1c:	2000025c 	.word	0x2000025c
 8006c20:	20000246 	.word	0x20000246
 8006c24:	0800dc14 	.word	0x0800dc14
 8006c28:	0800dc28 	.word	0x0800dc28
 8006c2c:	40010c00 	.word	0x40010c00
 8006c30:	2000027d 	.word	0x2000027d
 8006c34:	2000027a 	.word	0x2000027a

08006c38 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b089      	sub	sp, #36	; 0x24
 8006c3c:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006c3e:	2001      	movs	r0, #1
 8006c40:	f001 f876 	bl	8007d30 <lcd_cursor>

	int writeLoc = 5; //lcdnin ilk satırındaki başlangıç karakteri
 8006c44:	2305      	movs	r3, #5
 8006c46:	60fb      	str	r3, [r7, #12]
    int cursorPos = 3; //işaretçi konumu
 8006c48:	2303      	movs	r3, #3
 8006c4a:	60bb      	str	r3, [r7, #8]

    int arrayPos = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	607b      	str	r3, [r7, #4]
    int idStart = idStartPos; //eepromKonumu
 8006c50:	4ba2      	ldr	r3, [pc, #648]	; (8006edc <takeMachineID+0x2a4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006c56:	220c      	movs	r2, #12
 8006c58:	2100      	movs	r1, #0
 8006c5a:	48a1      	ldr	r0, [pc, #644]	; (8006ee0 <takeMachineID+0x2a8>)
 8006c5c:	f005 fcb7 	bl	800c5ce <memset>
    HAL_Delay(100);
 8006c60:	2064      	movs	r0, #100	; 0x64
 8006c62:	f001 fd5d 	bl	8008720 <HAL_Delay>

    printTemplate(1, 0);
 8006c66:	2100      	movs	r1, #0
 8006c68:	2001      	movs	r0, #1
 8006c6a:	f7fa f8a7 	bl	8000dbc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006c6e:	2108      	movs	r1, #8
 8006c70:	489c      	ldr	r0, [pc, #624]	; (8006ee4 <takeMachineID+0x2ac>)
 8006c72:	f002 fb25 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d131      	bne.n	8006ce0 <takeMachineID+0xa8>
        	lcd_cursor(0);
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f001 f857 	bl	8007d30 <lcd_cursor>

        	readFromEEPROM(3);
 8006c82:	2003      	movs	r0, #3
 8006c84:	f7f9 fda4 	bl	80007d0 <readFromEEPROM>
        	HAL_Delay(100);
 8006c88:	2064      	movs	r0, #100	; 0x64
 8006c8a:	f001 fd49 	bl	8008720 <HAL_Delay>

        	if(strlen(machineID) != 12) {
 8006c8e:	4894      	ldr	r0, [pc, #592]	; (8006ee0 <takeMachineID+0x2a8>)
 8006c90:	f7f9 fac8 	bl	8000224 <strlen>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b0c      	cmp	r3, #12
 8006c98:	d010      	beq.n	8006cbc <takeMachineID+0x84>
        		lcd_clear();
 8006c9a:	f001 f817 	bl	8007ccc <lcd_clear>
        		lcd_print(1, 1, "ID 12 KARAKTER");
 8006c9e:	4a92      	ldr	r2, [pc, #584]	; (8006ee8 <takeMachineID+0x2b0>)
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f000 ffe6 	bl	8007c74 <lcd_print>
        		lcd_print(2, 1, "OLMAK ZORUNDA!");
 8006ca8:	4a90      	ldr	r2, [pc, #576]	; (8006eec <takeMachineID+0x2b4>)
 8006caa:	2101      	movs	r1, #1
 8006cac:	2002      	movs	r0, #2
 8006cae:	f000 ffe1 	bl	8007c74 <lcd_print>
        		HAL_Delay(1200);
 8006cb2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006cb6:	f001 fd33 	bl	8008720 <HAL_Delay>

        		goto mainSection;
 8006cba:	e7c0      	b.n	8006c3e <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006cbc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cc0:	9302      	str	r3, [sp, #8]
 8006cc2:	236e      	movs	r3, #110	; 0x6e
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	4b8a      	ldr	r3, [pc, #552]	; (8006ef0 <takeMachineID+0x2b8>)
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	236e      	movs	r3, #110	; 0x6e
 8006ccc:	2200      	movs	r2, #0
 8006cce:	21a0      	movs	r1, #160	; 0xa0
 8006cd0:	4888      	ldr	r0, [pc, #544]	; (8006ef4 <takeMachineID+0x2bc>)
 8006cd2:	f002 fdaf 	bl	8009834 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cda:	f001 fd21 	bl	8008720 <HAL_Delay>

                break;
 8006cde:	e137      	b.n	8006f50 <takeMachineID+0x318>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	4880      	ldr	r0, [pc, #512]	; (8006ee4 <takeMachineID+0x2ac>)
 8006ce4:	f002 faec 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d114      	bne.n	8006d18 <takeMachineID+0xe0>
        	HAL_Delay(50);
 8006cee:	2032      	movs	r0, #50	; 0x32
 8006cf0:	f001 fd16 	bl	8008720 <HAL_Delay>
        	if(cursorPos == 7) {
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b07      	cmp	r3, #7
 8006cf8:	d102      	bne.n	8006d00 <takeMachineID+0xc8>
        		cursorPos = 10;
 8006cfa:	230a      	movs	r3, #10
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	e008      	b.n	8006d12 <takeMachineID+0xda>
        	} else if (cursorPos == 14) {
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b0e      	cmp	r3, #14
 8006d04:	d102      	bne.n	8006d0c <takeMachineID+0xd4>
                cursorPos = 3;
 8006d06:	2303      	movs	r3, #3
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	e002      	b.n	8006d12 <takeMachineID+0xda>
            } else {
            	cursorPos++;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006d12:	2096      	movs	r0, #150	; 0x96
 8006d14:	f001 fd04 	bl	8008720 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006d18:	2108      	movs	r1, #8
 8006d1a:	4877      	ldr	r0, [pc, #476]	; (8006ef8 <takeMachineID+0x2c0>)
 8006d1c:	f002 fad0 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d114      	bne.n	8006d50 <takeMachineID+0x118>
        	HAL_Delay(50);
 8006d26:	2032      	movs	r0, #50	; 0x32
 8006d28:	f001 fcfa 	bl	8008720 <HAL_Delay>
            if (cursorPos == 3) {
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d102      	bne.n	8006d38 <takeMachineID+0x100>
                cursorPos = 14;
 8006d32:	230e      	movs	r3, #14
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	e008      	b.n	8006d4a <takeMachineID+0x112>
            } else if(cursorPos == 10) {
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b0a      	cmp	r3, #10
 8006d3c:	d102      	bne.n	8006d44 <takeMachineID+0x10c>
            	cursorPos = 7;
 8006d3e:	2307      	movs	r3, #7
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	e002      	b.n	8006d4a <takeMachineID+0x112>
            } else {
            	cursorPos--;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006d4a:	2096      	movs	r0, #150	; 0x96
 8006d4c:	f001 fce8 	bl	8008720 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006d50:	2102      	movs	r1, #2
 8006d52:	4864      	ldr	r0, [pc, #400]	; (8006ee4 <takeMachineID+0x2ac>)
 8006d54:	f002 fab4 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	f040 80a9 	bne.w	8006eb2 <takeMachineID+0x27a>
        	HAL_Delay(50);
 8006d60:	2032      	movs	r0, #50	; 0x32
 8006d62:	f001 fcdd 	bl	8008720 <HAL_Delay>
        	if(cursorPos == 3) {
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d10a      	bne.n	8006d82 <takeMachineID+0x14a>
        		machineID[arrayPos] = '0';
 8006d6c:	4a5c      	ldr	r2, [pc, #368]	; (8006ee0 <takeMachineID+0x2a8>)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4413      	add	r3, r2
 8006d72:	2230      	movs	r2, #48	; 0x30
 8006d74:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 0;
 8006d76:	4a5e      	ldr	r2, [pc, #376]	; (8006ef0 <takeMachineID+0x2b8>)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	e07c      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 4) {
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d10a      	bne.n	8006d9e <takeMachineID+0x166>
        		machineID[arrayPos] = '1';
 8006d88:	4a55      	ldr	r2, [pc, #340]	; (8006ee0 <takeMachineID+0x2a8>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2231      	movs	r2, #49	; 0x31
 8006d90:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 1;
 8006d92:	4a57      	ldr	r2, [pc, #348]	; (8006ef0 <takeMachineID+0x2b8>)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	4413      	add	r3, r2
 8006d98:	2201      	movs	r2, #1
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e06e      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 5) {
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b05      	cmp	r3, #5
 8006da2:	d10a      	bne.n	8006dba <takeMachineID+0x182>
        		machineID[arrayPos] = '2';
 8006da4:	4a4e      	ldr	r2, [pc, #312]	; (8006ee0 <takeMachineID+0x2a8>)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	2232      	movs	r2, #50	; 0x32
 8006dac:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 2;
 8006dae:	4a50      	ldr	r2, [pc, #320]	; (8006ef0 <takeMachineID+0x2b8>)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	4413      	add	r3, r2
 8006db4:	2202      	movs	r2, #2
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	e060      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 6) {
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b06      	cmp	r3, #6
 8006dbe:	d10a      	bne.n	8006dd6 <takeMachineID+0x19e>
        		machineID[arrayPos] = '3';
 8006dc0:	4a47      	ldr	r2, [pc, #284]	; (8006ee0 <takeMachineID+0x2a8>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	2233      	movs	r2, #51	; 0x33
 8006dc8:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 3;
 8006dca:	4a49      	ldr	r2, [pc, #292]	; (8006ef0 <takeMachineID+0x2b8>)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	4413      	add	r3, r2
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	e052      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 7) {
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b07      	cmp	r3, #7
 8006dda:	d10a      	bne.n	8006df2 <takeMachineID+0x1ba>
        		machineID[arrayPos] = '4';
 8006ddc:	4a40      	ldr	r2, [pc, #256]	; (8006ee0 <takeMachineID+0x2a8>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4413      	add	r3, r2
 8006de2:	2234      	movs	r2, #52	; 0x34
 8006de4:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 4;
 8006de6:	4a42      	ldr	r2, [pc, #264]	; (8006ef0 <takeMachineID+0x2b8>)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	4413      	add	r3, r2
 8006dec:	2204      	movs	r2, #4
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	e044      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 10) {
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b0a      	cmp	r3, #10
 8006df6:	d10a      	bne.n	8006e0e <takeMachineID+0x1d6>
        		machineID[arrayPos] = '5';
 8006df8:	4a39      	ldr	r2, [pc, #228]	; (8006ee0 <takeMachineID+0x2a8>)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	2235      	movs	r2, #53	; 0x35
 8006e00:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 5;
 8006e02:	4a3b      	ldr	r2, [pc, #236]	; (8006ef0 <takeMachineID+0x2b8>)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	4413      	add	r3, r2
 8006e08:	2205      	movs	r2, #5
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e036      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 11) {
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b0b      	cmp	r3, #11
 8006e12:	d10a      	bne.n	8006e2a <takeMachineID+0x1f2>
        		machineID[arrayPos] = '6';
 8006e14:	4a32      	ldr	r2, [pc, #200]	; (8006ee0 <takeMachineID+0x2a8>)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	2236      	movs	r2, #54	; 0x36
 8006e1c:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 6;
 8006e1e:	4a34      	ldr	r2, [pc, #208]	; (8006ef0 <takeMachineID+0x2b8>)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	4413      	add	r3, r2
 8006e24:	2206      	movs	r2, #6
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e028      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 12) {
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b0c      	cmp	r3, #12
 8006e2e:	d10a      	bne.n	8006e46 <takeMachineID+0x20e>
        		machineID[arrayPos] = '7';
 8006e30:	4a2b      	ldr	r2, [pc, #172]	; (8006ee0 <takeMachineID+0x2a8>)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4413      	add	r3, r2
 8006e36:	2237      	movs	r2, #55	; 0x37
 8006e38:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 7;
 8006e3a:	4a2d      	ldr	r2, [pc, #180]	; (8006ef0 <takeMachineID+0x2b8>)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	4413      	add	r3, r2
 8006e40:	2207      	movs	r2, #7
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	e01a      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 13) {
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b0d      	cmp	r3, #13
 8006e4a:	d10a      	bne.n	8006e62 <takeMachineID+0x22a>
        		machineID[arrayPos] = '8';
 8006e4c:	4a24      	ldr	r2, [pc, #144]	; (8006ee0 <takeMachineID+0x2a8>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	2238      	movs	r2, #56	; 0x38
 8006e54:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 8;
 8006e56:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <takeMachineID+0x2b8>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	e00c      	b.n	8006e7c <takeMachineID+0x244>
        	} else if(cursorPos == 14) {
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b0e      	cmp	r3, #14
 8006e66:	d109      	bne.n	8006e7c <takeMachineID+0x244>
        		machineID[arrayPos] = '9';
 8006e68:	4a1d      	ldr	r2, [pc, #116]	; (8006ee0 <takeMachineID+0x2a8>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	2239      	movs	r2, #57	; 0x39
 8006e70:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 9;
 8006e72:	4a1f      	ldr	r2, [pc, #124]	; (8006ef0 <takeMachineID+0x2b8>)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	4413      	add	r3, r2
 8006e78:	2209      	movs	r2, #9
 8006e7a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, getIDCharFromCursorPosition(eepromData[idStart]));
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	b2dc      	uxtb	r4, r3
 8006e80:	4a1b      	ldr	r2, [pc, #108]	; (8006ef0 <takeMachineID+0x2b8>)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	4413      	add	r3, r2
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7f9 fc91 	bl	80007b0 <getIDCharFromCursorPosition>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	461a      	mov	r2, r3
 8006e92:	4621      	mov	r1, r4
 8006e94:	2001      	movs	r0, #1
 8006e96:	f000 ff02 	bl	8007c9e <lcd_print_char>

        	writeLoc++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	607b      	str	r3, [r7, #4]
        	idStart++;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006eac:	2096      	movs	r0, #150	; 0x96
 8006eae:	f001 fc37 	bl	8008720 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006eb2:	2104      	movs	r1, #4
 8006eb4:	480b      	ldr	r0, [pc, #44]	; (8006ee4 <takeMachineID+0x2ac>)
 8006eb6:	f002 fa03 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d140      	bne.n	8006f42 <takeMachineID+0x30a>
        	HAL_Delay(50);
 8006ec0:	2032      	movs	r0, #50	; 0x32
 8006ec2:	f001 fc2d 	bl	8008720 <HAL_Delay>
            if(strlen(machineID) >= 1) {
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <takeMachineID+0x2a8>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d036      	beq.n	8006f3c <takeMachineID+0x304>

            	if(writeLoc > 5) {
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b05      	cmp	r3, #5
 8006ed2:	dd13      	ble.n	8006efc <takeMachineID+0x2c4>
            	    writeLoc--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e014      	b.n	8006f06 <takeMachineID+0x2ce>
 8006edc:	20000004 	.word	0x20000004
 8006ee0:	200001a4 	.word	0x200001a4
 8006ee4:	40010800 	.word	0x40010800
 8006ee8:	0800dc3c 	.word	0x0800dc3c
 8006eec:	0800dc4c 	.word	0x0800dc4c
 8006ef0:	2000012c 	.word	0x2000012c
 8006ef4:	200002b8 	.word	0x200002b8
 8006ef8:	40011000 	.word	0x40011000
            	} else if(writeLoc < 5) {
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	dc01      	bgt.n	8006f06 <takeMachineID+0x2ce>
            	    writeLoc = 5;
 8006f02:	2305      	movs	r3, #5
 8006f04:	60fb      	str	r3, [r7, #12]
            	}

            	idStart--;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	603b      	str	r3, [r7, #0]
            	arrayPos--;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	607b      	str	r3, [r7, #4]

            	machineID[arrayPos] = '\0';
 8006f12:	4a11      	ldr	r2, [pc, #68]	; (8006f58 <takeMachineID+0x320>)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4413      	add	r3, r2
 8006f18:	2200      	movs	r2, #0
 8006f1a:	701a      	strb	r2, [r3, #0]
            	eepromData[idStart] = '\0';
 8006f1c:	4a0f      	ldr	r2, [pc, #60]	; (8006f5c <takeMachineID+0x324>)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	4413      	add	r3, r2
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+arrayPos+1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	3305      	adds	r3, #5
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	2001      	movs	r0, #1
 8006f32:	f000 fed5 	bl	8007ce0 <lcd_delete_char>
                HAL_Delay(50);
 8006f36:	2032      	movs	r0, #50	; 0x32
 8006f38:	f001 fbf2 	bl	8008720 <HAL_Delay>
            }

            HAL_Delay(150);
 8006f3c:	2096      	movs	r0, #150	; 0x96
 8006f3e:	f001 fbef 	bl	8008720 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPos);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	2002      	movs	r0, #2
 8006f4a:	f000 fe74 	bl	8007c36 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f4e:	e68e      	b.n	8006c6e <takeMachineID+0x36>
    }
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd90      	pop	{r4, r7, pc}
 8006f58:	200001a4 	.word	0x200001a4
 8006f5c:	2000012c 	.word	0x2000012c

08006f60 <takeWifiSSID>:

void takeWifiSSID() {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006f66:	2001      	movs	r0, #1
 8006f68:	f000 fee2 	bl	8007d30 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006f6c:	2214      	movs	r2, #20
 8006f6e:	2100      	movs	r1, #0
 8006f70:	48a8      	ldr	r0, [pc, #672]	; (8007214 <takeWifiSSID+0x2b4>)
 8006f72:	f005 fb2c 	bl	800c5ce <memset>
    HAL_Delay(100);
 8006f76:	2064      	movs	r0, #100	; 0x64
 8006f78:	f001 fbd2 	bl	8008720 <HAL_Delay>

    int realCharPos = 1;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8006f80:	2301      	movs	r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
    int page = 1;
 8006f84:	2301      	movs	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006f8c:	2307      	movs	r3, #7
 8006f8e:	607b      	str	r3, [r7, #4]

    int idStart = ssidStartPos;
 8006f90:	4ba1      	ldr	r3, [pc, #644]	; (8007218 <takeWifiSSID+0x2b8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	603b      	str	r3, [r7, #0]

    printTemplate(2, 1);
 8006f96:	2101      	movs	r1, #1
 8006f98:	2002      	movs	r0, #2
 8006f9a:	f7f9 ff0f 	bl	8000dbc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f9e:	2108      	movs	r1, #8
 8006fa0:	489e      	ldr	r0, [pc, #632]	; (800721c <takeWifiSSID+0x2bc>)
 8006fa2:	f002 f98d 	bl	80092c0 <HAL_GPIO_ReadPin>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d12e      	bne.n	800700a <takeWifiSSID+0xaa>
        	HAL_Delay(50);
 8006fac:	2032      	movs	r0, #50	; 0x32
 8006fae:	f001 fbb7 	bl	8008720 <HAL_Delay>
            lcd_cursor(0);
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	f000 febc 	bl	8007d30 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006fb8:	4896      	ldr	r0, [pc, #600]	; (8007214 <takeWifiSSID+0x2b4>)
 8006fba:	f7f9 f933 	bl	8000224 <strlen>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b14      	cmp	r3, #20
 8006fc2:	d910      	bls.n	8006fe6 <takeWifiSSID+0x86>
                lcd_clear();
 8006fc4:	f000 fe82 	bl	8007ccc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006fc8:	4a95      	ldr	r2, [pc, #596]	; (8007220 <takeWifiSSID+0x2c0>)
 8006fca:	2101      	movs	r1, #1
 8006fcc:	2001      	movs	r0, #1
 8006fce:	f000 fe51 	bl	8007c74 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006fd2:	4a94      	ldr	r2, [pc, #592]	; (8007224 <takeWifiSSID+0x2c4>)
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	2002      	movs	r0, #2
 8006fd8:	f000 fe4c 	bl	8007c74 <lcd_print>
                HAL_Delay(1200);
 8006fdc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006fe0:	f001 fb9e 	bl	8008720 <HAL_Delay>
                goto mainSSIDSection;
 8006fe4:	e7bf      	b.n	8006f66 <takeWifiSSID+0x6>
            } else {
                HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006fe6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006fea:	9302      	str	r3, [sp, #8]
 8006fec:	236e      	movs	r3, #110	; 0x6e
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	4b8d      	ldr	r3, [pc, #564]	; (8007228 <takeWifiSSID+0x2c8>)
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	236e      	movs	r3, #110	; 0x6e
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	21a0      	movs	r1, #160	; 0xa0
 8006ffa:	488c      	ldr	r0, [pc, #560]	; (800722c <takeWifiSSID+0x2cc>)
 8006ffc:	f002 fc1a 	bl	8009834 <HAL_I2C_Mem_Write>
                HAL_Delay(1000);
 8007000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007004:	f001 fb8c 	bl	8008720 <HAL_Delay>

                break;
 8007008:	e14e      	b.n	80072a8 <takeWifiSSID+0x348>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800700a:	2101      	movs	r1, #1
 800700c:	4883      	ldr	r0, [pc, #524]	; (800721c <takeWifiSSID+0x2bc>)
 800700e:	f002 f957 	bl	80092c0 <HAL_GPIO_ReadPin>
 8007012:	4603      	mov	r3, r0
 8007014:	2b01      	cmp	r3, #1
 8007016:	d153      	bne.n	80070c0 <takeWifiSSID+0x160>
        	HAL_Delay(50);
 8007018:	2032      	movs	r0, #50	; 0x32
 800701a:	f001 fb81 	bl	8008720 <HAL_Delay>

        	realCharPos++;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	3301      	adds	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2b50      	cmp	r3, #80	; 0x50
 8007028:	dd01      	ble.n	800702e <takeWifiSSID+0xce>
        		realCharPos = 1;
 800702a:	2301      	movs	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b10      	cmp	r3, #16
 8007032:	d13f      	bne.n	80070b4 <takeWifiSSID+0x154>
            	if(page == 1) {
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d109      	bne.n	800704e <takeWifiSSID+0xee>
            		cursorPosition = 1;
 800703a:	2301      	movs	r3, #1
 800703c:	613b      	str	r3, [r7, #16]
            		page++;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3301      	adds	r3, #1
 8007042:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8007044:	2102      	movs	r1, #2
 8007046:	2002      	movs	r0, #2
 8007048:	f7f9 feb8 	bl	8000dbc <printTemplate>
 800704c:	e035      	b.n	80070ba <takeWifiSSID+0x15a>
            	} else if(page == 2) {
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d109      	bne.n	8007068 <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8007054:	2301      	movs	r3, #1
 8007056:	613b      	str	r3, [r7, #16]
            		page++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 800705e:	2103      	movs	r1, #3
 8007060:	2002      	movs	r0, #2
 8007062:	f7f9 feab 	bl	8000dbc <printTemplate>
 8007066:	e028      	b.n	80070ba <takeWifiSSID+0x15a>
            	} else if(page == 3) {
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b03      	cmp	r3, #3
 800706c:	d109      	bne.n	8007082 <takeWifiSSID+0x122>
            		cursorPosition = 1;
 800706e:	2301      	movs	r3, #1
 8007070:	613b      	str	r3, [r7, #16]
            		page++;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007078:	2104      	movs	r1, #4
 800707a:	2002      	movs	r0, #2
 800707c:	f7f9 fe9e 	bl	8000dbc <printTemplate>
 8007080:	e01b      	b.n	80070ba <takeWifiSSID+0x15a>
            	} else if(page == 4) {
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b04      	cmp	r3, #4
 8007086:	d109      	bne.n	800709c <takeWifiSSID+0x13c>
            		cursorPosition = 1;
 8007088:	2301      	movs	r3, #1
 800708a:	613b      	str	r3, [r7, #16]
            		page++;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8007092:	2105      	movs	r1, #5
 8007094:	2002      	movs	r0, #2
 8007096:	f7f9 fe91 	bl	8000dbc <printTemplate>
 800709a:	e00e      	b.n	80070ba <takeWifiSSID+0x15a>
            	} else if(page == 5) {
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b05      	cmp	r3, #5
 80070a0:	d10b      	bne.n	80070ba <takeWifiSSID+0x15a>
            		cursorPosition = 1;
 80070a2:	2301      	movs	r3, #1
 80070a4:	613b      	str	r3, [r7, #16]
            		page = 1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 80070aa:	2101      	movs	r1, #1
 80070ac:	2002      	movs	r0, #2
 80070ae:	f7f9 fe85 	bl	8000dbc <printTemplate>
 80070b2:	e002      	b.n	80070ba <takeWifiSSID+0x15a>
            	}
            } else {
            	cursorPosition++;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3301      	adds	r3, #1
 80070b8:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 80070ba:	2096      	movs	r0, #150	; 0x96
 80070bc:	f001 fb30 	bl	8008720 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80070c0:	2108      	movs	r1, #8
 80070c2:	485b      	ldr	r0, [pc, #364]	; (8007230 <takeWifiSSID+0x2d0>)
 80070c4:	f002 f8fc 	bl	80092c0 <HAL_GPIO_ReadPin>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d14f      	bne.n	800716e <takeWifiSSID+0x20e>
        	HAL_Delay(50);
 80070ce:	2032      	movs	r0, #50	; 0x32
 80070d0:	f001 fb26 	bl	8008720 <HAL_Delay>

        	realCharPos--;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dc01      	bgt.n	80070e4 <takeWifiSSID+0x184>
        		realCharPos = 80;
 80070e0:	2350      	movs	r3, #80	; 0x50
 80070e2:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d13b      	bne.n	8007162 <takeWifiSSID+0x202>
            	if(page == 1) {
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d108      	bne.n	8007102 <takeWifiSSID+0x1a2>
            		cursorPosition = 16;
 80070f0:	2310      	movs	r3, #16
 80070f2:	613b      	str	r3, [r7, #16]
            		page = 5;
 80070f4:	2305      	movs	r3, #5
 80070f6:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 80070f8:	2105      	movs	r1, #5
 80070fa:	2002      	movs	r0, #2
 80070fc:	f7f9 fe5e 	bl	8000dbc <printTemplate>
 8007100:	e032      	b.n	8007168 <takeWifiSSID+0x208>
            	} else if(page == 2) {
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d108      	bne.n	800711a <takeWifiSSID+0x1ba>
            		cursorPosition = 16;
 8007108:	2310      	movs	r3, #16
 800710a:	613b      	str	r3, [r7, #16]
            		page = 1;
 800710c:	2301      	movs	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8007110:	2101      	movs	r1, #1
 8007112:	2002      	movs	r0, #2
 8007114:	f7f9 fe52 	bl	8000dbc <printTemplate>
 8007118:	e026      	b.n	8007168 <takeWifiSSID+0x208>
            	} else if(page == 3) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b03      	cmp	r3, #3
 800711e:	d108      	bne.n	8007132 <takeWifiSSID+0x1d2>
            		cursorPosition = 16;
 8007120:	2310      	movs	r3, #16
 8007122:	613b      	str	r3, [r7, #16]
            		page = 2;
 8007124:	2302      	movs	r3, #2
 8007126:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8007128:	2102      	movs	r1, #2
 800712a:	2002      	movs	r0, #2
 800712c:	f7f9 fe46 	bl	8000dbc <printTemplate>
 8007130:	e01a      	b.n	8007168 <takeWifiSSID+0x208>
            	} else if(page == 4) {
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d108      	bne.n	800714a <takeWifiSSID+0x1ea>
            		cursorPosition = 16;
 8007138:	2310      	movs	r3, #16
 800713a:	613b      	str	r3, [r7, #16]
            		page = 3;
 800713c:	2303      	movs	r3, #3
 800713e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8007140:	2103      	movs	r1, #3
 8007142:	2002      	movs	r0, #2
 8007144:	f7f9 fe3a 	bl	8000dbc <printTemplate>
 8007148:	e00e      	b.n	8007168 <takeWifiSSID+0x208>
            	} else if(page == 5) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b05      	cmp	r3, #5
 800714e:	d10b      	bne.n	8007168 <takeWifiSSID+0x208>
            		cursorPosition = 16;
 8007150:	2310      	movs	r3, #16
 8007152:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007154:	2304      	movs	r3, #4
 8007156:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007158:	2104      	movs	r1, #4
 800715a:	2002      	movs	r0, #2
 800715c:	f7f9 fe2e 	bl	8000dbc <printTemplate>
 8007160:	e002      	b.n	8007168 <takeWifiSSID+0x208>
            	}
            } else {
            	cursorPosition--;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3b01      	subs	r3, #1
 8007166:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007168:	2096      	movs	r0, #150	; 0x96
 800716a:	f001 fad9 	bl	8008720 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800716e:	2102      	movs	r1, #2
 8007170:	482a      	ldr	r0, [pc, #168]	; (800721c <takeWifiSSID+0x2bc>)
 8007172:	f002 f8a5 	bl	80092c0 <HAL_GPIO_ReadPin>
 8007176:	4603      	mov	r3, r0
 8007178:	2b01      	cmp	r3, #1
 800717a:	d136      	bne.n	80071ea <takeWifiSSID+0x28a>
        	HAL_Delay(50);
 800717c:	2032      	movs	r0, #50	; 0x32
 800717e:	f001 facf 	bl	8008720 <HAL_Delay>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	3b01      	subs	r3, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f7f9 fb02 	bl	8000790 <getCharFromCursorPosition>
 800718c:	4603      	mov	r3, r0
 800718e:	4619      	mov	r1, r3
 8007190:	4a20      	ldr	r2, [pc, #128]	; (8007214 <takeWifiSSID+0x2b4>)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4413      	add	r3, r2
 8007196:	460a      	mov	r2, r1
 8007198:	701a      	strb	r2, [r3, #0]
            eepromData[idStart] = realCharPos - 1;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b2d9      	uxtb	r1, r3
 80071a2:	4a21      	ldr	r2, [pc, #132]	; (8007228 <takeWifiSSID+0x2c8>)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	4413      	add	r3, r2
 80071a8:	460a      	mov	r2, r1
 80071aa:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[wifiNameLoc] = realCharPos - 1;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b2d9      	uxtb	r1, r3
 80071b4:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <takeWifiSSID+0x2d4>)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4413      	add	r3, r2
 80071ba:	460a      	mov	r2, r1
 80071bc:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	b2d9      	uxtb	r1, r3
 80071c2:	4a14      	ldr	r2, [pc, #80]	; (8007214 <takeWifiSSID+0x2b4>)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4413      	add	r3, r2
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	2001      	movs	r0, #1
 80071ce:	f000 fd66 	bl	8007c9e <lcd_print_char>

            writeLoc++;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3301      	adds	r3, #1
 80071d6:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	3301      	adds	r3, #1
 80071dc:	60bb      	str	r3, [r7, #8]
            idStart++;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	603b      	str	r3, [r7, #0]

            HAL_Delay(150);
 80071e4:	2096      	movs	r0, #150	; 0x96
 80071e6:	f001 fa9b 	bl	8008720 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80071ea:	2104      	movs	r1, #4
 80071ec:	480b      	ldr	r0, [pc, #44]	; (800721c <takeWifiSSID+0x2bc>)
 80071ee:	f002 f867 	bl	80092c0 <HAL_GPIO_ReadPin>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d150      	bne.n	800729a <takeWifiSSID+0x33a>
        	HAL_Delay(50);
 80071f8:	2032      	movs	r0, #50	; 0x32
 80071fa:	f001 fa91 	bl	8008720 <HAL_Delay>

        	if(strlen(wifiSSID) >= 1) {
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <takeWifiSSID+0x2b4>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d046      	beq.n	8007294 <takeWifiSSID+0x334>
        		if(writeLoc > 7) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b07      	cmp	r3, #7
 800720a:	dd15      	ble.n	8007238 <takeWifiSSID+0x2d8>
        			writeLoc--;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3b01      	subs	r3, #1
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	e016      	b.n	8007242 <takeWifiSSID+0x2e2>
 8007214:	200001b0 	.word	0x200001b0
 8007218:	20000008 	.word	0x20000008
 800721c:	40010800 	.word	0x40010800
 8007220:	0800dc5c 	.word	0x0800dc5c
 8007224:	0800dc70 	.word	0x0800dc70
 8007228:	2000012c 	.word	0x2000012c
 800722c:	200002b8 	.word	0x200002b8
 8007230:	40011000 	.word	0x40011000
 8007234:	200001d8 	.word	0x200001d8
        		} else if(writeLoc < 7) {
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b06      	cmp	r3, #6
 800723c:	dc01      	bgt.n	8007242 <takeWifiSSID+0x2e2>
        			writeLoc = 7;
 800723e:	2307      	movs	r3, #7
 8007240:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dd06      	ble.n	8007256 <takeWifiSSID+0x2f6>
        			wifiNameLoc--;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3b01      	subs	r3, #1
 800724c:	60bb      	str	r3, [r7, #8]
        			idStart--;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	3b01      	subs	r3, #1
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	e004      	b.n	8007260 <takeWifiSSID+0x300>
        		} else if(wifiNameLoc < 0) {
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	da01      	bge.n	8007260 <takeWifiSSID+0x300>
        			wifiNameLoc = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	60bb      	str	r3, [r7, #8]
        		}

        		wifiSSID[wifiNameLoc] = '\0';
 8007260:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <takeWifiSSID+0x350>)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	2200      	movs	r2, #0
 8007268:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = '\0';
 800726a:	4a12      	ldr	r2, [pc, #72]	; (80072b4 <takeWifiSSID+0x354>)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	4413      	add	r3, r2
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[wifiNameLoc] = '\0';
 8007274:	4a10      	ldr	r2, [pc, #64]	; (80072b8 <takeWifiSSID+0x358>)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4413      	add	r3, r2
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	3306      	adds	r3, #6
 8007284:	b2db      	uxtb	r3, r3
 8007286:	4619      	mov	r1, r3
 8007288:	2001      	movs	r0, #1
 800728a:	f000 fd29 	bl	8007ce0 <lcd_delete_char>
        		HAL_Delay(50);
 800728e:	2032      	movs	r0, #50	; 0x32
 8007290:	f001 fa46 	bl	8008720 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007294:	2096      	movs	r0, #150	; 0x96
 8007296:	f001 fa43 	bl	8008720 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	4619      	mov	r1, r3
 80072a0:	2002      	movs	r0, #2
 80072a2:	f000 fcc8 	bl	8007c36 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80072a6:	e67a      	b.n	8006f9e <takeWifiSSID+0x3e>
    }
}
 80072a8:	bf00      	nop
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	200001b0 	.word	0x200001b0
 80072b4:	2000012c 	.word	0x2000012c
 80072b8:	200001d8 	.word	0x200001d8

080072bc <takeWifiPass>:

void takeWifiPass() {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 80072c2:	2001      	movs	r0, #1
 80072c4:	f000 fd34 	bl	8007d30 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 80072c8:	2214      	movs	r2, #20
 80072ca:	2100      	movs	r1, #0
 80072cc:	48a5      	ldr	r0, [pc, #660]	; (8007564 <takeWifiPass+0x2a8>)
 80072ce:	f005 f97e 	bl	800c5ce <memset>
    HAL_Delay(100);
 80072d2:	2064      	movs	r0, #100	; 0x64
 80072d4:	f001 fa24 	bl	8008720 <HAL_Delay>

    int realCharPos = 1;
 80072d8:	2301      	movs	r3, #1
 80072da:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 80072dc:	2301      	movs	r3, #1
 80072de:	613b      	str	r3, [r7, #16]
    int page = 1;
 80072e0:	2301      	movs	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 80072e8:	2307      	movs	r3, #7
 80072ea:	607b      	str	r3, [r7, #4]

    int passStart = passStartPos;
 80072ec:	4b9e      	ldr	r3, [pc, #632]	; (8007568 <takeWifiPass+0x2ac>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	603b      	str	r3, [r7, #0]

    printTemplate(3, 1);
 80072f2:	2101      	movs	r1, #1
 80072f4:	2003      	movs	r0, #3
 80072f6:	f7f9 fd61 	bl	8000dbc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80072fa:	2108      	movs	r1, #8
 80072fc:	489b      	ldr	r0, [pc, #620]	; (800756c <takeWifiPass+0x2b0>)
 80072fe:	f001 ffdf 	bl	80092c0 <HAL_GPIO_ReadPin>
 8007302:	4603      	mov	r3, r0
 8007304:	2b01      	cmp	r3, #1
 8007306:	d12e      	bne.n	8007366 <takeWifiPass+0xaa>
        	HAL_Delay(50);
 8007308:	2032      	movs	r0, #50	; 0x32
 800730a:	f001 fa09 	bl	8008720 <HAL_Delay>
            lcd_cursor(0);
 800730e:	2000      	movs	r0, #0
 8007310:	f000 fd0e 	bl	8007d30 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007314:	4893      	ldr	r0, [pc, #588]	; (8007564 <takeWifiPass+0x2a8>)
 8007316:	f7f8 ff85 	bl	8000224 <strlen>
 800731a:	4603      	mov	r3, r0
 800731c:	2b14      	cmp	r3, #20
 800731e:	d910      	bls.n	8007342 <takeWifiPass+0x86>
                lcd_clear();
 8007320:	f000 fcd4 	bl	8007ccc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007324:	4a92      	ldr	r2, [pc, #584]	; (8007570 <takeWifiPass+0x2b4>)
 8007326:	2101      	movs	r1, #1
 8007328:	2001      	movs	r0, #1
 800732a:	f000 fca3 	bl	8007c74 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800732e:	4a91      	ldr	r2, [pc, #580]	; (8007574 <takeWifiPass+0x2b8>)
 8007330:	2101      	movs	r1, #1
 8007332:	2002      	movs	r0, #2
 8007334:	f000 fc9e 	bl	8007c74 <lcd_print>
                HAL_Delay(1200);
 8007338:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800733c:	f001 f9f0 	bl	8008720 <HAL_Delay>
                goto mainPASSSection;
 8007340:	e7bf      	b.n	80072c2 <takeWifiPass+0x6>
            } else {
                HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007342:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007346:	9302      	str	r3, [sp, #8]
 8007348:	236e      	movs	r3, #110	; 0x6e
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	4b8a      	ldr	r3, [pc, #552]	; (8007578 <takeWifiPass+0x2bc>)
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	236e      	movs	r3, #110	; 0x6e
 8007352:	2200      	movs	r2, #0
 8007354:	21a0      	movs	r1, #160	; 0xa0
 8007356:	4889      	ldr	r0, [pc, #548]	; (800757c <takeWifiPass+0x2c0>)
 8007358:	f002 fa6c 	bl	8009834 <HAL_I2C_Mem_Write>
                HAL_Delay(1000);
 800735c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007360:	f001 f9de 	bl	8008720 <HAL_Delay>

                break;
 8007364:	e14a      	b.n	80075fc <takeWifiPass+0x340>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007366:	2101      	movs	r1, #1
 8007368:	4880      	ldr	r0, [pc, #512]	; (800756c <takeWifiPass+0x2b0>)
 800736a:	f001 ffa9 	bl	80092c0 <HAL_GPIO_ReadPin>
 800736e:	4603      	mov	r3, r0
 8007370:	2b01      	cmp	r3, #1
 8007372:	d153      	bne.n	800741c <takeWifiPass+0x160>
        	HAL_Delay(50);
 8007374:	2032      	movs	r0, #50	; 0x32
 8007376:	f001 f9d3 	bl	8008720 <HAL_Delay>

        	realCharPos++;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	3301      	adds	r3, #1
 800737e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b50      	cmp	r3, #80	; 0x50
 8007384:	dd01      	ble.n	800738a <takeWifiPass+0xce>
        	    realCharPos = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b10      	cmp	r3, #16
 800738e:	d13f      	bne.n	8007410 <takeWifiPass+0x154>
            	if(page == 1) {
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d109      	bne.n	80073aa <takeWifiPass+0xee>
            		cursorPosition = 1;
 8007396:	2301      	movs	r3, #1
 8007398:	613b      	str	r3, [r7, #16]
            		page++;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 80073a0:	2102      	movs	r1, #2
 80073a2:	2003      	movs	r0, #3
 80073a4:	f7f9 fd0a 	bl	8000dbc <printTemplate>
 80073a8:	e035      	b.n	8007416 <takeWifiPass+0x15a>
            	} else if(page == 2) {
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d109      	bne.n	80073c4 <takeWifiPass+0x108>
            		cursorPosition = 1;
 80073b0:	2301      	movs	r3, #1
 80073b2:	613b      	str	r3, [r7, #16]
            		page++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3301      	adds	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 80073ba:	2103      	movs	r1, #3
 80073bc:	2003      	movs	r0, #3
 80073be:	f7f9 fcfd 	bl	8000dbc <printTemplate>
 80073c2:	e028      	b.n	8007416 <takeWifiPass+0x15a>
            	} else if(page == 3) {
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d109      	bne.n	80073de <takeWifiPass+0x122>
            		cursorPosition = 1;
 80073ca:	2301      	movs	r3, #1
 80073cc:	613b      	str	r3, [r7, #16]
            		page++;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 80073d4:	2104      	movs	r1, #4
 80073d6:	2003      	movs	r0, #3
 80073d8:	f7f9 fcf0 	bl	8000dbc <printTemplate>
 80073dc:	e01b      	b.n	8007416 <takeWifiPass+0x15a>
            	} else if(page == 4) {
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d109      	bne.n	80073f8 <takeWifiPass+0x13c>
            		cursorPosition = 1;
 80073e4:	2301      	movs	r3, #1
 80073e6:	613b      	str	r3, [r7, #16]
            		page++;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80073ee:	2105      	movs	r1, #5
 80073f0:	2003      	movs	r0, #3
 80073f2:	f7f9 fce3 	bl	8000dbc <printTemplate>
 80073f6:	e00e      	b.n	8007416 <takeWifiPass+0x15a>
            	} else if(page == 5) {
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	d10b      	bne.n	8007416 <takeWifiPass+0x15a>
            		cursorPosition = 1;
 80073fe:	2301      	movs	r3, #1
 8007400:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007402:	2301      	movs	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 8007406:	2101      	movs	r1, #1
 8007408:	2003      	movs	r0, #3
 800740a:	f7f9 fcd7 	bl	8000dbc <printTemplate>
 800740e:	e002      	b.n	8007416 <takeWifiPass+0x15a>
            	}
            } else {
            	cursorPosition++;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	3301      	adds	r3, #1
 8007414:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007416:	2096      	movs	r0, #150	; 0x96
 8007418:	f001 f982 	bl	8008720 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800741c:	2108      	movs	r1, #8
 800741e:	4858      	ldr	r0, [pc, #352]	; (8007580 <takeWifiPass+0x2c4>)
 8007420:	f001 ff4e 	bl	80092c0 <HAL_GPIO_ReadPin>
 8007424:	4603      	mov	r3, r0
 8007426:	2b01      	cmp	r3, #1
 8007428:	d14f      	bne.n	80074ca <takeWifiPass+0x20e>
        	HAL_Delay(50);
 800742a:	2032      	movs	r0, #50	; 0x32
 800742c:	f001 f978 	bl	8008720 <HAL_Delay>

        	realCharPos--;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	3b01      	subs	r3, #1
 8007434:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	dc01      	bgt.n	8007440 <takeWifiPass+0x184>
        	    realCharPos = 80;
 800743c:	2350      	movs	r3, #80	; 0x50
 800743e:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d13b      	bne.n	80074be <takeWifiPass+0x202>
            	if(page == 1) {
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d108      	bne.n	800745e <takeWifiPass+0x1a2>
            		cursorPosition = 16;
 800744c:	2310      	movs	r3, #16
 800744e:	613b      	str	r3, [r7, #16]
            		page = 5;
 8007450:	2305      	movs	r3, #5
 8007452:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 8007454:	2105      	movs	r1, #5
 8007456:	2003      	movs	r0, #3
 8007458:	f7f9 fcb0 	bl	8000dbc <printTemplate>
 800745c:	e032      	b.n	80074c4 <takeWifiPass+0x208>
            	} else if(page == 2) {
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d108      	bne.n	8007476 <takeWifiPass+0x1ba>
            		cursorPosition = 16;
 8007464:	2310      	movs	r3, #16
 8007466:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007468:	2301      	movs	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 800746c:	2101      	movs	r1, #1
 800746e:	2003      	movs	r0, #3
 8007470:	f7f9 fca4 	bl	8000dbc <printTemplate>
 8007474:	e026      	b.n	80074c4 <takeWifiPass+0x208>
            	} else if(page == 3) {
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d108      	bne.n	800748e <takeWifiPass+0x1d2>
            		cursorPosition = 16;
 800747c:	2310      	movs	r3, #16
 800747e:	613b      	str	r3, [r7, #16]
            		page = 2;
 8007480:	2302      	movs	r3, #2
 8007482:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007484:	2102      	movs	r1, #2
 8007486:	2003      	movs	r0, #3
 8007488:	f7f9 fc98 	bl	8000dbc <printTemplate>
 800748c:	e01a      	b.n	80074c4 <takeWifiPass+0x208>
            	} else if(page == 4) {
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b04      	cmp	r3, #4
 8007492:	d108      	bne.n	80074a6 <takeWifiPass+0x1ea>
            		cursorPosition = 16;
 8007494:	2310      	movs	r3, #16
 8007496:	613b      	str	r3, [r7, #16]
            		page = 3;
 8007498:	2303      	movs	r3, #3
 800749a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 800749c:	2103      	movs	r1, #3
 800749e:	2003      	movs	r0, #3
 80074a0:	f7f9 fc8c 	bl	8000dbc <printTemplate>
 80074a4:	e00e      	b.n	80074c4 <takeWifiPass+0x208>
            	} else if(page == 5) {
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d10b      	bne.n	80074c4 <takeWifiPass+0x208>
            		cursorPosition = 16;
 80074ac:	2310      	movs	r3, #16
 80074ae:	613b      	str	r3, [r7, #16]
            		page = 4;
 80074b0:	2304      	movs	r3, #4
 80074b2:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 80074b4:	2104      	movs	r1, #4
 80074b6:	2003      	movs	r0, #3
 80074b8:	f7f9 fc80 	bl	8000dbc <printTemplate>
 80074bc:	e002      	b.n	80074c4 <takeWifiPass+0x208>
            	}
            } else {
            	cursorPosition--;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 80074c4:	2096      	movs	r0, #150	; 0x96
 80074c6:	f001 f92b 	bl	8008720 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80074ca:	2102      	movs	r1, #2
 80074cc:	4827      	ldr	r0, [pc, #156]	; (800756c <takeWifiPass+0x2b0>)
 80074ce:	f001 fef7 	bl	80092c0 <HAL_GPIO_ReadPin>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d133      	bne.n	8007540 <takeWifiPass+0x284>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3b01      	subs	r3, #1
 80074dc:	4618      	mov	r0, r3
 80074de:	f7f9 f957 	bl	8000790 <getCharFromCursorPosition>
 80074e2:	4603      	mov	r3, r0
 80074e4:	4619      	mov	r1, r3
 80074e6:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <takeWifiPass+0x2a8>)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4413      	add	r3, r2
 80074ec:	460a      	mov	r2, r1
 80074ee:	701a      	strb	r2, [r3, #0]
        	eepromData[passStart] = realCharPos - 1;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b2d9      	uxtb	r1, r3
 80074f8:	4a1f      	ldr	r2, [pc, #124]	; (8007578 <takeWifiPass+0x2bc>)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	4413      	add	r3, r2
 80074fe:	460a      	mov	r2, r1
 8007500:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[wifiPassLoc] = realCharPos - 1;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b2d9      	uxtb	r1, r3
 800750a:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <takeWifiPass+0x2c8>)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4413      	add	r3, r2
 8007510:	460a      	mov	r2, r1
 8007512:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	b2d9      	uxtb	r1, r3
 8007518:	4a12      	ldr	r2, [pc, #72]	; (8007564 <takeWifiPass+0x2a8>)
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	4413      	add	r3, r2
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	2001      	movs	r0, #1
 8007524:	f000 fbbb 	bl	8007c9e <lcd_print_char>

            writeLoc++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3301      	adds	r3, #1
 800752c:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	3301      	adds	r3, #1
 8007532:	60bb      	str	r3, [r7, #8]
            passStart++;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	603b      	str	r3, [r7, #0]

            HAL_Delay(150);
 800753a:	2096      	movs	r0, #150	; 0x96
 800753c:	f001 f8f0 	bl	8008720 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007540:	2104      	movs	r1, #4
 8007542:	480a      	ldr	r0, [pc, #40]	; (800756c <takeWifiPass+0x2b0>)
 8007544:	f001 febc 	bl	80092c0 <HAL_GPIO_ReadPin>
 8007548:	4603      	mov	r3, r0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d14f      	bne.n	80075ee <takeWifiPass+0x332>
            if(strlen(wifiPass) >= 1) {
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <takeWifiPass+0x2a8>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d048      	beq.n	80075e8 <takeWifiPass+0x32c>
            	if(writeLoc > 7) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b07      	cmp	r3, #7
 800755a:	dd15      	ble.n	8007588 <takeWifiPass+0x2cc>
            		writeLoc--;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3b01      	subs	r3, #1
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	e016      	b.n	8007592 <takeWifiPass+0x2d6>
 8007564:	200001c4 	.word	0x200001c4
 8007568:	2000000c 	.word	0x2000000c
 800756c:	40010800 	.word	0x40010800
 8007570:	0800dc5c 	.word	0x0800dc5c
 8007574:	0800dc84 	.word	0x0800dc84
 8007578:	2000012c 	.word	0x2000012c
 800757c:	200002b8 	.word	0x200002b8
 8007580:	40011000 	.word	0x40011000
 8007584:	200001ec 	.word	0x200001ec
            	} else if(writeLoc < 7) {
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b06      	cmp	r3, #6
 800758c:	dc01      	bgt.n	8007592 <takeWifiPass+0x2d6>
            		writeLoc = 7;
 800758e:	2307      	movs	r3, #7
 8007590:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dd08      	ble.n	80075aa <takeWifiPass+0x2ee>
            		wifiPassLoc--;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	3b01      	subs	r3, #1
 800759c:	60bb      	str	r3, [r7, #8]
            		passStartPos--;
 800759e:	4b19      	ldr	r3, [pc, #100]	; (8007604 <takeWifiPass+0x348>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	4a17      	ldr	r2, [pc, #92]	; (8007604 <takeWifiPass+0x348>)
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	e004      	b.n	80075b4 <takeWifiPass+0x2f8>
            	} else if(wifiPassLoc < 0) {
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	da01      	bge.n	80075b4 <takeWifiPass+0x2f8>
            		wifiPassLoc = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60bb      	str	r3, [r7, #8]
            	}

            	wifiPass[wifiPassLoc] = '\0';
 80075b4:	4a14      	ldr	r2, [pc, #80]	; (8007608 <takeWifiPass+0x34c>)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4413      	add	r3, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
            	eepromData[passStartPos] = '\0';
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <takeWifiPass+0x348>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a12      	ldr	r2, [pc, #72]	; (800760c <takeWifiPass+0x350>)
 80075c4:	2100      	movs	r1, #0
 80075c6:	54d1      	strb	r1, [r2, r3]
            	wifiPassInt[wifiPassLoc] = '\0';
 80075c8:	4a11      	ldr	r2, [pc, #68]	; (8007610 <takeWifiPass+0x354>)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4413      	add	r3, r2
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	3306      	adds	r3, #6
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	4619      	mov	r1, r3
 80075dc:	2001      	movs	r0, #1
 80075de:	f000 fb7f 	bl	8007ce0 <lcd_delete_char>
            	HAL_Delay(50);
 80075e2:	2032      	movs	r0, #50	; 0x32
 80075e4:	f001 f89c 	bl	8008720 <HAL_Delay>
            }

            HAL_Delay(150);
 80075e8:	2096      	movs	r0, #150	; 0x96
 80075ea:	f001 f899 	bl	8008720 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	4619      	mov	r1, r3
 80075f4:	2002      	movs	r0, #2
 80075f6:	f000 fb1e 	bl	8007c36 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80075fa:	e67e      	b.n	80072fa <takeWifiPass+0x3e>
    }
}
 80075fc:	bf00      	nop
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	2000000c 	.word	0x2000000c
 8007608:	200001c4 	.word	0x200001c4
 800760c:	2000012c 	.word	0x2000012c
 8007610:	200001ec 	.word	0x200001ec

08007614 <mergeData>:

char* mergeData() {
 8007614:	b580      	push	{r7, lr}
 8007616:	b09c      	sub	sp, #112	; 0x70
 8007618:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800761a:	2300      	movs	r3, #0
 800761c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800761e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007622:	2228      	movs	r2, #40	; 0x28
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f004 ffd1 	bl	800c5ce <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 800762c:	4b67      	ldr	r3, [pc, #412]	; (80077cc <mergeData+0x1b8>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	713b      	strb	r3, [r7, #4]
 8007632:	4b67      	ldr	r3, [pc, #412]	; (80077d0 <mergeData+0x1bc>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	717b      	strb	r3, [r7, #5]
 8007638:	4b66      	ldr	r3, [pc, #408]	; (80077d4 <mergeData+0x1c0>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	71bb      	strb	r3, [r7, #6]
 800763e:	4b66      	ldr	r3, [pc, #408]	; (80077d8 <mergeData+0x1c4>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	71fb      	strb	r3, [r7, #7]
 8007644:	4b65      	ldr	r3, [pc, #404]	; (80077dc <mergeData+0x1c8>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	723b      	strb	r3, [r7, #8]
 800764a:	4b65      	ldr	r3, [pc, #404]	; (80077e0 <mergeData+0x1cc>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	727b      	strb	r3, [r7, #9]
 8007650:	4b64      	ldr	r3, [pc, #400]	; (80077e4 <mergeData+0x1d0>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	72bb      	strb	r3, [r7, #10]
 8007656:	4b64      	ldr	r3, [pc, #400]	; (80077e8 <mergeData+0x1d4>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	72fb      	strb	r3, [r7, #11]
 800765c:	4b63      	ldr	r3, [pc, #396]	; (80077ec <mergeData+0x1d8>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	733b      	strb	r3, [r7, #12]
 8007662:	4b63      	ldr	r3, [pc, #396]	; (80077f0 <mergeData+0x1dc>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	737b      	strb	r3, [r7, #13]
 8007668:	4b62      	ldr	r3, [pc, #392]	; (80077f4 <mergeData+0x1e0>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	73bb      	strb	r3, [r7, #14]
 800766e:	4b62      	ldr	r3, [pc, #392]	; (80077f8 <mergeData+0x1e4>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	73fb      	strb	r3, [r7, #15]
 8007674:	4b61      	ldr	r3, [pc, #388]	; (80077fc <mergeData+0x1e8>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	743b      	strb	r3, [r7, #16]
 800767a:	4b61      	ldr	r3, [pc, #388]	; (8007800 <mergeData+0x1ec>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	747b      	strb	r3, [r7, #17]
 8007680:	4b60      	ldr	r3, [pc, #384]	; (8007804 <mergeData+0x1f0>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	74bb      	strb	r3, [r7, #18]
 8007686:	4b60      	ldr	r3, [pc, #384]	; (8007808 <mergeData+0x1f4>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	74fb      	strb	r3, [r7, #19]
 800768c:	4b5f      	ldr	r3, [pc, #380]	; (800780c <mergeData+0x1f8>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	753b      	strb	r3, [r7, #20]
 8007692:	4b5f      	ldr	r3, [pc, #380]	; (8007810 <mergeData+0x1fc>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	757b      	strb	r3, [r7, #21]
 8007698:	4b5e      	ldr	r3, [pc, #376]	; (8007814 <mergeData+0x200>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	75bb      	strb	r3, [r7, #22]
 800769e:	4b5e      	ldr	r3, [pc, #376]	; (8007818 <mergeData+0x204>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	75fb      	strb	r3, [r7, #23]
 80076a4:	4b5d      	ldr	r3, [pc, #372]	; (800781c <mergeData+0x208>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	763b      	strb	r3, [r7, #24]
 80076aa:	4b5d      	ldr	r3, [pc, #372]	; (8007820 <mergeData+0x20c>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	767b      	strb	r3, [r7, #25]
 80076b0:	4b5c      	ldr	r3, [pc, #368]	; (8007824 <mergeData+0x210>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	76bb      	strb	r3, [r7, #26]
 80076b6:	4b5c      	ldr	r3, [pc, #368]	; (8007828 <mergeData+0x214>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	76fb      	strb	r3, [r7, #27]
 80076bc:	4b5b      	ldr	r3, [pc, #364]	; (800782c <mergeData+0x218>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	773b      	strb	r3, [r7, #28]
 80076c2:	4b5b      	ldr	r3, [pc, #364]	; (8007830 <mergeData+0x21c>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	777b      	strb	r3, [r7, #29]
 80076c8:	4b5a      	ldr	r3, [pc, #360]	; (8007834 <mergeData+0x220>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	77bb      	strb	r3, [r7, #30]
 80076ce:	4b5a      	ldr	r3, [pc, #360]	; (8007838 <mergeData+0x224>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	4b59      	ldr	r3, [pc, #356]	; (800783c <mergeData+0x228>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	f887 3020 	strb.w	r3, [r7, #32]
 80076dc:	4b58      	ldr	r3, [pc, #352]	; (8007840 <mergeData+0x22c>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80076e4:	4b57      	ldr	r3, [pc, #348]	; (8007844 <mergeData+0x230>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076ec:	4b56      	ldr	r3, [pc, #344]	; (8007848 <mergeData+0x234>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f4:	4b55      	ldr	r3, [pc, #340]	; (800784c <mergeData+0x238>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80076fc:	4b54      	ldr	r3, [pc, #336]	; (8007850 <mergeData+0x23c>)
 80076fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007702:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007706:	4b52      	ldr	r3, [pc, #328]	; (8007850 <mergeData+0x23c>)
 8007708:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800770c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007710:	4b4f      	ldr	r3, [pc, #316]	; (8007850 <mergeData+0x23c>)
 8007712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800771a:	4b4d      	ldr	r3, [pc, #308]	; (8007850 <mergeData+0x23c>)
 800771c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007720:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007724:	4b4a      	ldr	r3, [pc, #296]	; (8007850 <mergeData+0x23c>)
 8007726:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800772a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800772e:	4b48      	ldr	r3, [pc, #288]	; (8007850 <mergeData+0x23c>)
 8007730:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007738:	4b45      	ldr	r3, [pc, #276]	; (8007850 <mergeData+0x23c>)
 800773a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800773e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007742:	4b43      	ldr	r3, [pc, #268]	; (8007850 <mergeData+0x23c>)
 8007744:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007748:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 800774c:	4b40      	ldr	r3, [pc, #256]	; (8007850 <mergeData+0x23c>)
 800774e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007752:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007756:	4b3e      	ldr	r3, [pc, #248]	; (8007850 <mergeData+0x23c>)
 8007758:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800775c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007760:	2306      	movs	r3, #6
 8007762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007766:	2300      	movs	r3, #0
 8007768:	66fb      	str	r3, [r7, #108]	; 0x6c
 800776a:	e015      	b.n	8007798 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 800776c:	1d3a      	adds	r2, r7, #4
 800776e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007770:	4413      	add	r3, r2
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800777a:	4936      	ldr	r1, [pc, #216]	; (8007854 <mergeData+0x240>)
 800777c:	4618      	mov	r0, r3
 800777e:	f004 feb5 	bl	800c4ec <siprintf>
	    strcat(combinedString, temp);
 8007782:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800778a:	4611      	mov	r1, r2
 800778c:	4618      	mov	r0, r3
 800778e:	f004 ff0f 	bl	800c5b0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007794:	3301      	adds	r3, #1
 8007796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779a:	2b2b      	cmp	r3, #43	; 0x2b
 800779c:	d9e6      	bls.n	800776c <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800779e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7f8 fd3e 	bl	8000224 <strlen>
 80077a8:	4603      	mov	r3, r0
 80077aa:	3301      	adds	r3, #1
 80077ac:	4618      	mov	r0, r3
 80077ae:	f004 fdb5 	bl	800c31c <malloc>
 80077b2:	4603      	mov	r3, r0
 80077b4:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80077b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077ba:	4619      	mov	r1, r3
 80077bc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80077be:	f004 ff4b 	bl	800c658 <strcpy>
	return result;
 80077c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3770      	adds	r7, #112	; 0x70
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000237 	.word	0x20000237
 80077d0:	20000229 	.word	0x20000229
 80077d4:	2000022c 	.word	0x2000022c
 80077d8:	2000022d 	.word	0x2000022d
 80077dc:	2000022e 	.word	0x2000022e
 80077e0:	20000235 	.word	0x20000235
 80077e4:	2000022f 	.word	0x2000022f
 80077e8:	20000230 	.word	0x20000230
 80077ec:	20000234 	.word	0x20000234
 80077f0:	20000231 	.word	0x20000231
 80077f4:	20000241 	.word	0x20000241
 80077f8:	20000232 	.word	0x20000232
 80077fc:	20000242 	.word	0x20000242
 8007800:	20000233 	.word	0x20000233
 8007804:	20000243 	.word	0x20000243
 8007808:	20000236 	.word	0x20000236
 800780c:	20000238 	.word	0x20000238
 8007810:	20000239 	.word	0x20000239
 8007814:	2000023a 	.word	0x2000023a
 8007818:	2000023b 	.word	0x2000023b
 800781c:	2000023c 	.word	0x2000023c
 8007820:	2000023d 	.word	0x2000023d
 8007824:	2000023e 	.word	0x2000023e
 8007828:	2000023f 	.word	0x2000023f
 800782c:	20000240 	.word	0x20000240
 8007830:	20000244 	.word	0x20000244
 8007834:	20000246 	.word	0x20000246
 8007838:	20000225 	.word	0x20000225
 800783c:	20000226 	.word	0x20000226
 8007840:	20000000 	.word	0x20000000
 8007844:	20000001 	.word	0x20000001
 8007848:	20000227 	.word	0x20000227
 800784c:	20000249 	.word	0x20000249
 8007850:	2000012c 	.word	0x2000012c
 8007854:	0800dc98 	.word	0x0800dc98

08007858 <convertAndSendData>:

void convertAndSendData() {
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800785e:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <convertAndSendData+0x70>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007866:	4a19      	ldr	r2, [pc, #100]	; (80078cc <convertAndSendData+0x74>)
 8007868:	2101      	movs	r1, #1
 800786a:	2001      	movs	r0, #1
 800786c:	f000 fa02 	bl	8007c74 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007870:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <convertAndSendData+0x78>)
 8007872:	2101      	movs	r1, #1
 8007874:	2002      	movs	r0, #2
 8007876:	f000 f9fd 	bl	8007c74 <lcd_print>
 800787a:	e009      	b.n	8007890 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 800787c:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <convertAndSendData+0x7c>)
 800787e:	2101      	movs	r1, #1
 8007880:	2001      	movs	r0, #1
 8007882:	f000 f9f7 	bl	8007c74 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007886:	4a14      	ldr	r2, [pc, #80]	; (80078d8 <convertAndSendData+0x80>)
 8007888:	2101      	movs	r1, #1
 800788a:	2002      	movs	r0, #2
 800788c:	f000 f9f2 	bl	8007c74 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 8007890:	2300      	movs	r3, #0
 8007892:	607b      	str	r3, [r7, #4]
 8007894:	e00a      	b.n	80078ac <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 8007896:	f7ff febd 	bl	8007614 <mergeData>
 800789a:	4603      	mov	r3, r0
 800789c:	461a      	mov	r2, r3
 800789e:	490f      	ldr	r1, [pc, #60]	; (80078dc <convertAndSendData+0x84>)
 80078a0:	480f      	ldr	r0, [pc, #60]	; (80078e0 <convertAndSendData+0x88>)
 80078a2:	f7f9 f819 	bl	80008d8 <sendMachineData>
	for(int i=0; i<2; i++) {
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3301      	adds	r3, #1
 80078aa:	607b      	str	r3, [r7, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	ddf1      	ble.n	8007896 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 80078b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078b6:	f000 ff33 	bl	8008720 <HAL_Delay>
	lcd_clear();
 80078ba:	f000 fa07 	bl	8007ccc <lcd_clear>
}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000249 	.word	0x20000249
 80078cc:	0800dc9c 	.word	0x0800dc9c
 80078d0:	0800dcb0 	.word	0x0800dcb0
 80078d4:	0800dcc4 	.word	0x0800dcc4
 80078d8:	0800dcd8 	.word	0x0800dcd8
 80078dc:	200001a4 	.word	0x200001a4
 80078e0:	20000354 	.word	0x20000354

080078e4 <iotSetup>:

void iotSetup() {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80078e8:	4b12      	ldr	r3, [pc, #72]	; (8007934 <iotSetup+0x50>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01f      	beq.n	8007930 <iotSetup+0x4c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 80078f0:	4811      	ldr	r0, [pc, #68]	; (8007938 <iotSetup+0x54>)
 80078f2:	f7f8 fc97 	bl	8000224 <strlen>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b0c      	cmp	r3, #12
 80078fa:	d001      	beq.n	8007900 <iotSetup+0x1c>
			takeMachineID();
 80078fc:	f7ff f99c 	bl	8006c38 <takeMachineID>
		}
		HAL_Delay(500);
 8007900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007904:	f000 ff0c 	bl	8008720 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <iotSetup+0x58>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <iotSetup+0x30>
			takeWifiSSID();
 8007910:	f7ff fb26 	bl	8006f60 <takeWifiSSID>
		}
		HAL_Delay(500);
 8007914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007918:	f000 ff02 	bl	8008720 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 800791c:	4b08      	ldr	r3, [pc, #32]	; (8007940 <iotSetup+0x5c>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <iotSetup+0x44>
			takeWifiPass();
 8007924:	f7ff fcca 	bl	80072bc <takeWifiPass>
		}
		HAL_Delay(500);
 8007928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800792c:	f000 fef8 	bl	8008720 <HAL_Delay>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 8007930:	bf00      	nop
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000247 	.word	0x20000247
 8007938:	200001a4 	.word	0x200001a4
 800793c:	200001b0 	.word	0x200001b0
 8007940:	200001c4 	.word	0x200001c4

08007944 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af02      	add	r7, sp, #8
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	f023 030f 	bic.w	r3, r3, #15
 8007954:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800795c:	7b7b      	ldrb	r3, [r7, #13]
 800795e:	f043 030c 	orr.w	r3, r3, #12
 8007962:	b2db      	uxtb	r3, r3
 8007964:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007966:	7b7b      	ldrb	r3, [r7, #13]
 8007968:	f043 0308 	orr.w	r3, r3, #8
 800796c:	b2db      	uxtb	r3, r3
 800796e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007970:	7b3b      	ldrb	r3, [r7, #12]
 8007972:	f043 030c 	orr.w	r3, r3, #12
 8007976:	b2db      	uxtb	r3, r3
 8007978:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800797a:	7b3b      	ldrb	r3, [r7, #12]
 800797c:	f043 0308 	orr.w	r3, r3, #8
 8007980:	b2db      	uxtb	r3, r3
 8007982:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007984:	bf00      	nop
 8007986:	4825      	ldr	r0, [pc, #148]	; (8007a1c <lcd_send_cmd+0xd8>)
 8007988:	f002 fac3 	bl	8009f12 <HAL_I2C_GetError>
 800798c:	4603      	mov	r3, r0
 800798e:	2b04      	cmp	r3, #4
 8007990:	d0f9      	beq.n	8007986 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007992:	bf00      	nop
 8007994:	4821      	ldr	r0, [pc, #132]	; (8007a1c <lcd_send_cmd+0xd8>)
 8007996:	f002 faaf 	bl	8009ef8 <HAL_I2C_GetState>
 800799a:	4603      	mov	r3, r0
 800799c:	2b20      	cmp	r3, #32
 800799e:	d1f9      	bne.n	8007994 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80079a0:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <lcd_send_cmd+0xdc>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d116      	bne.n	80079d6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
 80079ac:	e00f      	b.n	80079ce <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	3310      	adds	r3, #16
 80079b2:	443b      	add	r3, r7
 80079b4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	f022 0208 	bic.w	r2, r2, #8
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	3310      	adds	r3, #16
 80079c2:	443b      	add	r3, r7
 80079c4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	3301      	adds	r3, #1
 80079cc:	73fb      	strb	r3, [r7, #15]
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d9ec      	bls.n	80079ae <lcd_send_cmd+0x6a>
 80079d4:	e015      	b.n	8007a02 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80079d6:	2300      	movs	r3, #0
 80079d8:	73bb      	strb	r3, [r7, #14]
 80079da:	e00f      	b.n	80079fc <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	3310      	adds	r3, #16
 80079e0:	443b      	add	r3, r7
 80079e2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	f042 0208 	orr.w	r2, r2, #8
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	3310      	adds	r3, #16
 80079f0:	443b      	add	r3, r7
 80079f2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	3301      	adds	r3, #1
 80079fa:	73bb      	strb	r3, [r7, #14]
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d9ec      	bls.n	80079dc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a02:	f107 0208 	add.w	r2, r7, #8
 8007a06:	2364      	movs	r3, #100	; 0x64
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2304      	movs	r3, #4
 8007a0c:	214e      	movs	r1, #78	; 0x4e
 8007a0e:	4803      	ldr	r0, [pc, #12]	; (8007a1c <lcd_send_cmd+0xd8>)
 8007a10:	f001 fe12 	bl	8009638 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a14:	bf00      	nop
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	200002b8 	.word	0x200002b8
 8007a20:	2000028c 	.word	0x2000028c

08007a24 <lcd_send_data>:

void lcd_send_data (char data) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	f023 030f 	bic.w	r3, r3, #15
 8007a34:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007a3c:	7b7b      	ldrb	r3, [r7, #13]
 8007a3e:	f043 030d 	orr.w	r3, r3, #13
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007a46:	7b7b      	ldrb	r3, [r7, #13]
 8007a48:	f043 0309 	orr.w	r3, r3, #9
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007a50:	7b3b      	ldrb	r3, [r7, #12]
 8007a52:	f043 030d 	orr.w	r3, r3, #13
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007a5a:	7b3b      	ldrb	r3, [r7, #12]
 8007a5c:	f043 0309 	orr.w	r3, r3, #9
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a64:	bf00      	nop
 8007a66:	4825      	ldr	r0, [pc, #148]	; (8007afc <lcd_send_data+0xd8>)
 8007a68:	f002 fa53 	bl	8009f12 <HAL_I2C_GetError>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d0f9      	beq.n	8007a66 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a72:	bf00      	nop
 8007a74:	4821      	ldr	r0, [pc, #132]	; (8007afc <lcd_send_data+0xd8>)
 8007a76:	f002 fa3f 	bl	8009ef8 <HAL_I2C_GetState>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d1f9      	bne.n	8007a74 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a80:	4b1f      	ldr	r3, [pc, #124]	; (8007b00 <lcd_send_data+0xdc>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d116      	bne.n	8007ab6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
 8007a8c:	e00f      	b.n	8007aae <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	3310      	adds	r3, #16
 8007a92:	443b      	add	r3, r7
 8007a94:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	f022 0208 	bic.w	r2, r2, #8
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	3310      	adds	r3, #16
 8007aa2:	443b      	add	r3, r7
 8007aa4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	73fb      	strb	r3, [r7, #15]
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d9ec      	bls.n	8007a8e <lcd_send_data+0x6a>
 8007ab4:	e015      	b.n	8007ae2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73bb      	strb	r3, [r7, #14]
 8007aba:	e00f      	b.n	8007adc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	3310      	adds	r3, #16
 8007ac0:	443b      	add	r3, r7
 8007ac2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	f042 0208 	orr.w	r2, r2, #8
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	3310      	adds	r3, #16
 8007ad0:	443b      	add	r3, r7
 8007ad2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	73bb      	strb	r3, [r7, #14]
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d9ec      	bls.n	8007abc <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007ae2:	f107 0208 	add.w	r2, r7, #8
 8007ae6:	2364      	movs	r3, #100	; 0x64
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	2304      	movs	r3, #4
 8007aec:	214e      	movs	r1, #78	; 0x4e
 8007aee:	4803      	ldr	r0, [pc, #12]	; (8007afc <lcd_send_data+0xd8>)
 8007af0:	f001 fda2 	bl	8009638 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	200002b8 	.word	0x200002b8
 8007b00:	2000028c 	.word	0x2000028c

08007b04 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007b0c:	e006      	b.n	8007b1c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff ff84 	bl	8007a24 <lcd_send_data>
	while (*str) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1f4      	bne.n	8007b0e <lcd_send_string+0xa>
	}
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	f023 030f 	bic.w	r3, r3, #15
 8007b40:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007b48:	7b7b      	ldrb	r3, [r7, #13]
 8007b4a:	f043 030d 	orr.w	r3, r3, #13
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007b52:	7b7b      	ldrb	r3, [r7, #13]
 8007b54:	f043 0309 	orr.w	r3, r3, #9
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007b5c:	7b3b      	ldrb	r3, [r7, #12]
 8007b5e:	f043 030d 	orr.w	r3, r3, #13
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007b66:	7b3b      	ldrb	r3, [r7, #12]
 8007b68:	f043 0309 	orr.w	r3, r3, #9
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b70:	bf00      	nop
 8007b72:	4825      	ldr	r0, [pc, #148]	; (8007c08 <lcd_send_char+0xd8>)
 8007b74:	f002 f9cd 	bl	8009f12 <HAL_I2C_GetError>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d0f9      	beq.n	8007b72 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b7e:	bf00      	nop
 8007b80:	4821      	ldr	r0, [pc, #132]	; (8007c08 <lcd_send_char+0xd8>)
 8007b82:	f002 f9b9 	bl	8009ef8 <HAL_I2C_GetState>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	d1f9      	bne.n	8007b80 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007b8c:	4b1f      	ldr	r3, [pc, #124]	; (8007c0c <lcd_send_char+0xdc>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d116      	bne.n	8007bc2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
 8007b98:	e00f      	b.n	8007bba <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	3310      	adds	r3, #16
 8007b9e:	443b      	add	r3, r7
 8007ba0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	f022 0208 	bic.w	r2, r2, #8
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	3310      	adds	r3, #16
 8007bae:	443b      	add	r3, r7
 8007bb0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d9ec      	bls.n	8007b9a <lcd_send_char+0x6a>
 8007bc0:	e015      	b.n	8007bee <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73bb      	strb	r3, [r7, #14]
 8007bc6:	e00f      	b.n	8007be8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	3310      	adds	r3, #16
 8007bcc:	443b      	add	r3, r7
 8007bce:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f042 0208 	orr.w	r2, r2, #8
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	3310      	adds	r3, #16
 8007bdc:	443b      	add	r3, r7
 8007bde:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	3301      	adds	r3, #1
 8007be6:	73bb      	strb	r3, [r7, #14]
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d9ec      	bls.n	8007bc8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007bee:	f107 0208 	add.w	r2, r7, #8
 8007bf2:	2364      	movs	r3, #100	; 0x64
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	214e      	movs	r1, #78	; 0x4e
 8007bfa:	4803      	ldr	r0, [pc, #12]	; (8007c08 <lcd_send_char+0xd8>)
 8007bfc:	f001 fd1c 	bl	8009638 <HAL_I2C_Master_Transmit>
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200002b8 	.word	0x200002b8
 8007c0c:	2000028c 	.word	0x2000028c

08007c10 <lcd_init>:

void lcd_init (void) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007c14:	2002      	movs	r0, #2
 8007c16:	f7ff fe95 	bl	8007944 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007c1a:	2028      	movs	r0, #40	; 0x28
 8007c1c:	f7ff fe92 	bl	8007944 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007c20:	200c      	movs	r0, #12
 8007c22:	f7ff fe8f 	bl	8007944 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007c26:	2080      	movs	r0, #128	; 0x80
 8007c28:	f7ff fe8c 	bl	8007944 <lcd_send_cmd>
	lcd_backlight(1);
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	f000 f86d 	bl	8007d0c <lcd_backlight>
}
 8007c32:	bf00      	nop
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	460a      	mov	r2, r1
 8007c40:	71fb      	strb	r3, [r7, #7]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d106      	bne.n	8007c5a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007c4c:	79bb      	ldrb	r3, [r7, #6]
 8007c4e:	337f      	adds	r3, #127	; 0x7f
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fe76 	bl	8007944 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007c58:	e008      	b.n	8007c6c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d105      	bne.n	8007c6c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007c60:	79bb      	ldrb	r3, [r7, #6]
 8007c62:	3b41      	subs	r3, #65	; 0x41
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff fe6c 	bl	8007944 <lcd_send_cmd>
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	603a      	str	r2, [r7, #0]
 8007c7e:	71fb      	strb	r3, [r7, #7]
 8007c80:	460b      	mov	r3, r1
 8007c82:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007c84:	79ba      	ldrb	r2, [r7, #6]
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff ffd3 	bl	8007c36 <lcd_gotoxy>
	lcd_send_string(str);
 8007c90:	6838      	ldr	r0, [r7, #0]
 8007c92:	f7ff ff37 	bl	8007b04 <lcd_send_string>
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	71fb      	strb	r3, [r7, #7]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	71bb      	strb	r3, [r7, #6]
 8007cac:	4613      	mov	r3, r2
 8007cae:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007cb0:	79ba      	ldrb	r2, [r7, #6]
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff ffbd 	bl	8007c36 <lcd_gotoxy>
    lcd_send_char(ch);
 8007cbc:	797b      	ldrb	r3, [r7, #5]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff ff36 	bl	8007b30 <lcd_send_char>
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <lcd_clear>:

void lcd_clear(void) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f7ff fe37 	bl	8007944 <lcd_send_cmd>
    HAL_Delay(2);
 8007cd6:	2002      	movs	r0, #2
 8007cd8:	f000 fd22 	bl	8008720 <HAL_Delay>
}
 8007cdc:	bf00      	nop
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	460a      	mov	r2, r1
 8007cea:	71fb      	strb	r3, [r7, #7]
 8007cec:	4613      	mov	r3, r2
 8007cee:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007cf0:	79ba      	ldrb	r2, [r7, #6]
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff ff9d 	bl	8007c36 <lcd_gotoxy>

    lcd_send_char(' ');
 8007cfc:	2020      	movs	r0, #32
 8007cfe:	f7ff ff17 	bl	8007b30 <lcd_send_char>
}
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007d16:	4a05      	ldr	r2, [pc, #20]	; (8007d2c <lcd_backlight+0x20>)
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f7ff fe11 	bl	8007944 <lcd_send_cmd>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	2000028c 	.word	0x2000028c

08007d30 <lcd_cursor>:

void lcd_cursor(int state) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d106      	bne.n	8007d4c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007d3e:	200e      	movs	r0, #14
 8007d40:	f7ff fe00 	bl	8007944 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007d44:	200f      	movs	r0, #15
 8007d46:	f7ff fdfd 	bl	8007944 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007d4a:	e002      	b.n	8007d52 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007d4c:	200c      	movs	r0, #12
 8007d4e:	f7ff fdf9 	bl	8007944 <lcd_send_cmd>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	4a03      	ldr	r2, [pc, #12]	; (8007d78 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007d6c:	6013      	str	r3, [r2, #0]
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr
 8007d78:	20000204 	.word	0x20000204

08007d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d80:	f000 fc6c 	bl	800865c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d88:	f000 fcca 	bl	8008720 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d8c:	f000 f89c 	bl	8007ec8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d90:	f000 f9be 	bl	8008110 <MX_GPIO_Init>
  MX_CAN_Init();
 8007d94:	f000 f8de 	bl	8007f54 <MX_CAN_Init>
  MX_I2C1_Init();
 8007d98:	f000 f910 	bl	8007fbc <MX_I2C1_Init>
  MX_TIM1_Init();
 8007d9c:	f000 f93c 	bl	8008018 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007da0:	f000 f98c 	bl	80080bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007da4:	2201      	movs	r2, #1
 8007da6:	2140      	movs	r1, #64	; 0x40
 8007da8:	483e      	ldr	r0, [pc, #248]	; (8007ea4 <main+0x128>)
 8007daa:	f001 faa0 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007dae:	2201      	movs	r2, #1
 8007db0:	2180      	movs	r1, #128	; 0x80
 8007db2:	483c      	ldr	r0, [pc, #240]	; (8007ea4 <main+0x128>)
 8007db4:	f001 fa9b 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007db8:	200a      	movs	r0, #10
 8007dba:	f000 fcb1 	bl	8008720 <HAL_Delay>
  lcd_init();
 8007dbe:	f7ff ff27 	bl	8007c10 <lcd_init>
  HAL_Delay(10);
 8007dc2:	200a      	movs	r0, #10
 8007dc4:	f000 fcac 	bl	8008720 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007dc8:	4837      	ldr	r0, [pc, #220]	; (8007ea8 <main+0x12c>)
 8007dca:	f003 f943 	bl	800b054 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007dce:	bf00      	nop
 8007dd0:	4836      	ldr	r0, [pc, #216]	; (8007eac <main+0x130>)
 8007dd2:	f002 f89e 	bl	8009f12 <HAL_I2C_GetError>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d0f9      	beq.n	8007dd0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ddc:	bf00      	nop
 8007dde:	4833      	ldr	r0, [pc, #204]	; (8007eac <main+0x130>)
 8007de0:	f002 f88a 	bl	8009ef8 <HAL_I2C_GetState>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	d1f9      	bne.n	8007dde <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007dea:	2200      	movs	r2, #0
 8007dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007df0:	482c      	ldr	r0, [pc, #176]	; (8007ea4 <main+0x128>)
 8007df2:	f001 fa7c 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007df6:	2200      	movs	r2, #0
 8007df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007dfc:	4829      	ldr	r0, [pc, #164]	; (8007ea4 <main+0x128>)
 8007dfe:	f001 fa76 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e02:	2200      	movs	r2, #0
 8007e04:	2104      	movs	r1, #4
 8007e06:	4827      	ldr	r0, [pc, #156]	; (8007ea4 <main+0x128>)
 8007e08:	f001 fa71 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2102      	movs	r1, #2
 8007e10:	4824      	ldr	r0, [pc, #144]	; (8007ea4 <main+0x128>)
 8007e12:	f001 fa6c 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2101      	movs	r1, #1
 8007e1a:	4822      	ldr	r0, [pc, #136]	; (8007ea4 <main+0x128>)
 8007e1c:	f001 fa67 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e20:	2200      	movs	r2, #0
 8007e22:	2120      	movs	r1, #32
 8007e24:	4822      	ldr	r0, [pc, #136]	; (8007eb0 <main+0x134>)
 8007e26:	f001 fa62 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2110      	movs	r1, #16
 8007e2e:	4820      	ldr	r0, [pc, #128]	; (8007eb0 <main+0x134>)
 8007e30:	f001 fa5d 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007e34:	2200      	movs	r2, #0
 8007e36:	2180      	movs	r1, #128	; 0x80
 8007e38:	481e      	ldr	r0, [pc, #120]	; (8007eb4 <main+0x138>)
 8007e3a:	f001 fa58 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2140      	movs	r1, #64	; 0x40
 8007e42:	481c      	ldr	r0, [pc, #112]	; (8007eb4 <main+0x138>)
 8007e44:	f001 fa53 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2120      	movs	r1, #32
 8007e4c:	4819      	ldr	r0, [pc, #100]	; (8007eb4 <main+0x138>)
 8007e4e:	f001 fa4e 	bl	80092ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007e52:	2200      	movs	r2, #0
 8007e54:	2110      	movs	r1, #16
 8007e56:	4817      	ldr	r0, [pc, #92]	; (8007eb4 <main+0x138>)
 8007e58:	f001 fa49 	bl	80092ee <HAL_GPIO_WritePin>

  i2cTest();
 8007e5c:	f7f8 ff00 	bl	8000c60 <i2cTest>
  HAL_Delay(100);
 8007e60:	2064      	movs	r0, #100	; 0x64
 8007e62:	f000 fc5d 	bl	8008720 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <main+0x13c>)
 8007e68:	2101      	movs	r1, #1
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	f7ff ff02 	bl	8007c74 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007e70:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <main+0x140>)
 8007e72:	2101      	movs	r1, #1
 8007e74:	2002      	movs	r0, #2
 8007e76:	f7ff fefd 	bl	8007c74 <lcd_print>
  HAL_Delay(1000);
 8007e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e7e:	f000 fc4f 	bl	8008720 <HAL_Delay>
  lcd_clear();
 8007e82:	f7ff ff23 	bl	8007ccc <lcd_clear>

  eepromKontrol();
 8007e86:	f7f8 f9d5 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007e8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e8e:	f000 fc47 	bl	8008720 <HAL_Delay>

  backLightTimer = millis;
 8007e92:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <main+0x144>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a0b      	ldr	r2, [pc, #44]	; (8007ec4 <main+0x148>)
 8007e98:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007e9a:	f7ff fd23 	bl	80078e4 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007e9e:	f7fe fd33 	bl	8006908 <mainLoop>
 8007ea2:	e7fc      	b.n	8007e9e <main+0x122>
 8007ea4:	40010c00 	.word	0x40010c00
 8007ea8:	2000030c 	.word	0x2000030c
 8007eac:	200002b8 	.word	0x200002b8
 8007eb0:	40011000 	.word	0x40011000
 8007eb4:	40010800 	.word	0x40010800
 8007eb8:	0800dcec 	.word	0x0800dcec
 8007ebc:	0800dd00 	.word	0x0800dd00
 8007ec0:	20000204 	.word	0x20000204
 8007ec4:	20000220 	.word	0x20000220

08007ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b090      	sub	sp, #64	; 0x40
 8007ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ece:	f107 0318 	add.w	r3, r7, #24
 8007ed2:	2228      	movs	r2, #40	; 0x28
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f004 fb79 	bl	800c5ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007edc:	1d3b      	adds	r3, r7, #4
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
 8007ee4:	609a      	str	r2, [r3, #8]
 8007ee6:	60da      	str	r2, [r3, #12]
 8007ee8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007efc:	2302      	movs	r3, #2
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f0c:	f107 0318 	add.w	r3, r7, #24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 fc3f 	bl	800a794 <HAL_RCC_OscConfig>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f1c:	f000 f9a2 	bl	8008264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f20:	230f      	movs	r3, #15
 8007f22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f24:	2302      	movs	r3, #2
 8007f26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f36:	1d3b      	adds	r3, r7, #4
 8007f38:	2102      	movs	r1, #2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f002 feac 	bl	800ac98 <HAL_RCC_ClockConfig>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007f46:	f000 f98d 	bl	8008264 <Error_Handler>
  }
}
 8007f4a:	bf00      	nop
 8007f4c:	3740      	adds	r7, #64	; 0x40
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007f58:	4b16      	ldr	r3, [pc, #88]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f5a:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <MX_CAN_Init+0x64>)
 8007f5c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007f5e:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f60:	2210      	movs	r2, #16
 8007f62:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007f64:	4b13      	ldr	r3, [pc, #76]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007f6a:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007f70:	4b10      	ldr	r3, [pc, #64]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007f76:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007f9a:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007fa0:	4804      	ldr	r0, [pc, #16]	; (8007fb4 <MX_CAN_Init+0x60>)
 8007fa2:	f000 fbe1 	bl	8008768 <HAL_CAN_Init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007fac:	f000 f95a 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007fb0:	bf00      	nop
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000290 	.word	0x20000290
 8007fb8:	40006400 	.word	0x40006400

08007fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007fc0:	4b12      	ldr	r3, [pc, #72]	; (800800c <MX_I2C1_Init+0x50>)
 8007fc2:	4a13      	ldr	r2, [pc, #76]	; (8008010 <MX_I2C1_Init+0x54>)
 8007fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007fc6:	4b11      	ldr	r3, [pc, #68]	; (800800c <MX_I2C1_Init+0x50>)
 8007fc8:	4a12      	ldr	r2, [pc, #72]	; (8008014 <MX_I2C1_Init+0x58>)
 8007fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	; (800800c <MX_I2C1_Init+0x50>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007fd2:	4b0e      	ldr	r3, [pc, #56]	; (800800c <MX_I2C1_Init+0x50>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	; (800800c <MX_I2C1_Init+0x50>)
 8007fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <MX_I2C1_Init+0x50>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <MX_I2C1_Init+0x50>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007fec:	4b07      	ldr	r3, [pc, #28]	; (800800c <MX_I2C1_Init+0x50>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <MX_I2C1_Init+0x50>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007ff8:	4804      	ldr	r0, [pc, #16]	; (800800c <MX_I2C1_Init+0x50>)
 8007ffa:	f001 f9a9 	bl	8009350 <HAL_I2C_Init>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008004:	f000 f92e 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008008:	bf00      	nop
 800800a:	bd80      	pop	{r7, pc}
 800800c:	200002b8 	.word	0x200002b8
 8008010:	40005400 	.word	0x40005400
 8008014:	00061a80 	.word	0x00061a80

08008018 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800801e:	f107 0308 	add.w	r3, r7, #8
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	605a      	str	r2, [r3, #4]
 8008028:	609a      	str	r2, [r3, #8]
 800802a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800802c:	463b      	mov	r3, r7
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008034:	4b1f      	ldr	r3, [pc, #124]	; (80080b4 <MX_TIM1_Init+0x9c>)
 8008036:	4a20      	ldr	r2, [pc, #128]	; (80080b8 <MX_TIM1_Init+0xa0>)
 8008038:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800803a:	4b1e      	ldr	r3, [pc, #120]	; (80080b4 <MX_TIM1_Init+0x9c>)
 800803c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008040:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008042:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <MX_TIM1_Init+0x9c>)
 8008044:	2200      	movs	r2, #0
 8008046:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008048:	4b1a      	ldr	r3, [pc, #104]	; (80080b4 <MX_TIM1_Init+0x9c>)
 800804a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800804e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008050:	4b18      	ldr	r3, [pc, #96]	; (80080b4 <MX_TIM1_Init+0x9c>)
 8008052:	2200      	movs	r2, #0
 8008054:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008056:	4b17      	ldr	r3, [pc, #92]	; (80080b4 <MX_TIM1_Init+0x9c>)
 8008058:	2200      	movs	r2, #0
 800805a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800805c:	4b15      	ldr	r3, [pc, #84]	; (80080b4 <MX_TIM1_Init+0x9c>)
 800805e:	2200      	movs	r2, #0
 8008060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008062:	4814      	ldr	r0, [pc, #80]	; (80080b4 <MX_TIM1_Init+0x9c>)
 8008064:	f002 ffa6 	bl	800afb4 <HAL_TIM_Base_Init>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800806e:	f000 f8f9 	bl	8008264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008078:	f107 0308 	add.w	r3, r7, #8
 800807c:	4619      	mov	r1, r3
 800807e:	480d      	ldr	r0, [pc, #52]	; (80080b4 <MX_TIM1_Init+0x9c>)
 8008080:	f003 f950 	bl	800b324 <HAL_TIM_ConfigClockSource>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800808a:	f000 f8eb 	bl	8008264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800808e:	2300      	movs	r3, #0
 8008090:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008092:	2300      	movs	r3, #0
 8008094:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008096:	463b      	mov	r3, r7
 8008098:	4619      	mov	r1, r3
 800809a:	4806      	ldr	r0, [pc, #24]	; (80080b4 <MX_TIM1_Init+0x9c>)
 800809c:	f003 fb3e 	bl	800b71c <HAL_TIMEx_MasterConfigSynchronization>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80080a6:	f000 f8dd 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80080aa:	bf00      	nop
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	2000030c 	.word	0x2000030c
 80080b8:	40012c00 	.word	0x40012c00

080080bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80080c0:	4b11      	ldr	r3, [pc, #68]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080c2:	4a12      	ldr	r2, [pc, #72]	; (800810c <MX_USART1_UART_Init+0x50>)
 80080c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80080c6:	4b10      	ldr	r3, [pc, #64]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80080ce:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80080da:	4b0b      	ldr	r3, [pc, #44]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080dc:	2200      	movs	r2, #0
 80080de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80080e0:	4b09      	ldr	r3, [pc, #36]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080e2:	220c      	movs	r2, #12
 80080e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80080e6:	4b08      	ldr	r3, [pc, #32]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80080ec:	4b06      	ldr	r3, [pc, #24]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80080f2:	4805      	ldr	r0, [pc, #20]	; (8008108 <MX_USART1_UART_Init+0x4c>)
 80080f4:	f003 fb90 	bl	800b818 <HAL_UART_Init>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80080fe:	f000 f8b1 	bl	8008264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000354 	.word	0x20000354
 800810c:	40013800 	.word	0x40013800

08008110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008116:	f107 0310 	add.w	r3, r7, #16
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	605a      	str	r2, [r3, #4]
 8008120:	609a      	str	r2, [r3, #8]
 8008122:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008124:	4b4b      	ldr	r3, [pc, #300]	; (8008254 <MX_GPIO_Init+0x144>)
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	4a4a      	ldr	r2, [pc, #296]	; (8008254 <MX_GPIO_Init+0x144>)
 800812a:	f043 0310 	orr.w	r3, r3, #16
 800812e:	6193      	str	r3, [r2, #24]
 8008130:	4b48      	ldr	r3, [pc, #288]	; (8008254 <MX_GPIO_Init+0x144>)
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800813c:	4b45      	ldr	r3, [pc, #276]	; (8008254 <MX_GPIO_Init+0x144>)
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	4a44      	ldr	r2, [pc, #272]	; (8008254 <MX_GPIO_Init+0x144>)
 8008142:	f043 0320 	orr.w	r3, r3, #32
 8008146:	6193      	str	r3, [r2, #24]
 8008148:	4b42      	ldr	r3, [pc, #264]	; (8008254 <MX_GPIO_Init+0x144>)
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f003 0320 	and.w	r3, r3, #32
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008154:	4b3f      	ldr	r3, [pc, #252]	; (8008254 <MX_GPIO_Init+0x144>)
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	4a3e      	ldr	r2, [pc, #248]	; (8008254 <MX_GPIO_Init+0x144>)
 800815a:	f043 0304 	orr.w	r3, r3, #4
 800815e:	6193      	str	r3, [r2, #24]
 8008160:	4b3c      	ldr	r3, [pc, #240]	; (8008254 <MX_GPIO_Init+0x144>)
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	607b      	str	r3, [r7, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800816c:	4b39      	ldr	r3, [pc, #228]	; (8008254 <MX_GPIO_Init+0x144>)
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	4a38      	ldr	r2, [pc, #224]	; (8008254 <MX_GPIO_Init+0x144>)
 8008172:	f043 0308 	orr.w	r3, r3, #8
 8008176:	6193      	str	r3, [r2, #24]
 8008178:	4b36      	ldr	r3, [pc, #216]	; (8008254 <MX_GPIO_Init+0x144>)
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	603b      	str	r3, [r7, #0]
 8008182:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008184:	2200      	movs	r2, #0
 8008186:	21f0      	movs	r1, #240	; 0xf0
 8008188:	4833      	ldr	r0, [pc, #204]	; (8008258 <MX_GPIO_Init+0x148>)
 800818a:	f001 f8b0 	bl	80092ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800818e:	2200      	movs	r2, #0
 8008190:	f241 0130 	movw	r1, #4144	; 0x1030
 8008194:	4831      	ldr	r0, [pc, #196]	; (800825c <MX_GPIO_Init+0x14c>)
 8008196:	f001 f8aa 	bl	80092ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800819a:	2200      	movs	r2, #0
 800819c:	f640 4107 	movw	r1, #3079	; 0xc07
 80081a0:	482f      	ldr	r0, [pc, #188]	; (8008260 <MX_GPIO_Init+0x150>)
 80081a2:	f001 f8a4 	bl	80092ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80081a6:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80081aa:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081b4:	f107 0310 	add.w	r3, r7, #16
 80081b8:	4619      	mov	r1, r3
 80081ba:	4828      	ldr	r0, [pc, #160]	; (800825c <MX_GPIO_Init+0x14c>)
 80081bc:	f000 fe20 	bl	8008e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80081c0:	f248 130f 	movw	r3, #33039	; 0x810f
 80081c4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ce:	f107 0310 	add.w	r3, r7, #16
 80081d2:	4619      	mov	r1, r3
 80081d4:	4820      	ldr	r0, [pc, #128]	; (8008258 <MX_GPIO_Init+0x148>)
 80081d6:	f000 fe13 	bl	8008e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80081da:	23f0      	movs	r3, #240	; 0xf0
 80081dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081de:	2301      	movs	r3, #1
 80081e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081e6:	2302      	movs	r3, #2
 80081e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ea:	f107 0310 	add.w	r3, r7, #16
 80081ee:	4619      	mov	r1, r3
 80081f0:	4819      	ldr	r0, [pc, #100]	; (8008258 <MX_GPIO_Init+0x148>)
 80081f2:	f000 fe05 	bl	8008e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80081f6:	f241 0330 	movw	r3, #4144	; 0x1030
 80081fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081fc:	2301      	movs	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008204:	2302      	movs	r3, #2
 8008206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008208:	f107 0310 	add.w	r3, r7, #16
 800820c:	4619      	mov	r1, r3
 800820e:	4813      	ldr	r0, [pc, #76]	; (800825c <MX_GPIO_Init+0x14c>)
 8008210:	f000 fdf6 	bl	8008e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008214:	f640 4307 	movw	r3, #3079	; 0xc07
 8008218:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800821a:	2301      	movs	r3, #1
 800821c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821e:	2300      	movs	r3, #0
 8008220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008222:	2302      	movs	r3, #2
 8008224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008226:	f107 0310 	add.w	r3, r7, #16
 800822a:	4619      	mov	r1, r3
 800822c:	480c      	ldr	r0, [pc, #48]	; (8008260 <MX_GPIO_Init+0x150>)
 800822e:	f000 fde7 	bl	8008e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008232:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800823c:	2300      	movs	r3, #0
 800823e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008240:	f107 0310 	add.w	r3, r7, #16
 8008244:	4619      	mov	r1, r3
 8008246:	4806      	ldr	r0, [pc, #24]	; (8008260 <MX_GPIO_Init+0x150>)
 8008248:	f000 fdda 	bl	8008e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800824c:	bf00      	nop
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	40021000 	.word	0x40021000
 8008258:	40010800 	.word	0x40010800
 800825c:	40011000 	.word	0x40011000
 8008260:	40010c00 	.word	0x40010c00

08008264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008268:	bf00      	nop
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <HAL_MspInit+0x5c>)
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	4a14      	ldr	r2, [pc, #80]	; (80082cc <HAL_MspInit+0x5c>)
 800827c:	f043 0301 	orr.w	r3, r3, #1
 8008280:	6193      	str	r3, [r2, #24]
 8008282:	4b12      	ldr	r3, [pc, #72]	; (80082cc <HAL_MspInit+0x5c>)
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	60bb      	str	r3, [r7, #8]
 800828c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800828e:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <HAL_MspInit+0x5c>)
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	4a0e      	ldr	r2, [pc, #56]	; (80082cc <HAL_MspInit+0x5c>)
 8008294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008298:	61d3      	str	r3, [r2, #28]
 800829a:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <HAL_MspInit+0x5c>)
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80082a6:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <HAL_MspInit+0x60>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	4a04      	ldr	r2, [pc, #16]	; (80082d0 <HAL_MspInit+0x60>)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082c2:	bf00      	nop
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr
 80082cc:	40021000 	.word	0x40021000
 80082d0:	40010000 	.word	0x40010000

080082d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082dc:	f107 0310 	add.w	r3, r7, #16
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	609a      	str	r2, [r3, #8]
 80082e8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <HAL_CAN_MspInit+0x8c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d131      	bne.n	8008358 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80082f4:	4b1b      	ldr	r3, [pc, #108]	; (8008364 <HAL_CAN_MspInit+0x90>)
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <HAL_CAN_MspInit+0x90>)
 80082fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082fe:	61d3      	str	r3, [r2, #28]
 8008300:	4b18      	ldr	r3, [pc, #96]	; (8008364 <HAL_CAN_MspInit+0x90>)
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800830c:	4b15      	ldr	r3, [pc, #84]	; (8008364 <HAL_CAN_MspInit+0x90>)
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	4a14      	ldr	r2, [pc, #80]	; (8008364 <HAL_CAN_MspInit+0x90>)
 8008312:	f043 0304 	orr.w	r3, r3, #4
 8008316:	6193      	str	r3, [r2, #24]
 8008318:	4b12      	ldr	r3, [pc, #72]	; (8008364 <HAL_CAN_MspInit+0x90>)
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	60bb      	str	r3, [r7, #8]
 8008322:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008328:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832e:	2300      	movs	r3, #0
 8008330:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008332:	f107 0310 	add.w	r3, r7, #16
 8008336:	4619      	mov	r1, r3
 8008338:	480b      	ldr	r0, [pc, #44]	; (8008368 <HAL_CAN_MspInit+0x94>)
 800833a:	f000 fd61 	bl	8008e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800833e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008344:	2302      	movs	r3, #2
 8008346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008348:	2303      	movs	r3, #3
 800834a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	4619      	mov	r1, r3
 8008352:	4805      	ldr	r0, [pc, #20]	; (8008368 <HAL_CAN_MspInit+0x94>)
 8008354:	f000 fd54 	bl	8008e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008358:	bf00      	nop
 800835a:	3720      	adds	r7, #32
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40006400 	.word	0x40006400
 8008364:	40021000 	.word	0x40021000
 8008368:	40010800 	.word	0x40010800

0800836c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008374:	f107 0310 	add.w	r3, r7, #16
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	609a      	str	r2, [r3, #8]
 8008380:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a15      	ldr	r2, [pc, #84]	; (80083dc <HAL_I2C_MspInit+0x70>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d123      	bne.n	80083d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800838c:	4b14      	ldr	r3, [pc, #80]	; (80083e0 <HAL_I2C_MspInit+0x74>)
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <HAL_I2C_MspInit+0x74>)
 8008392:	f043 0308 	orr.w	r3, r3, #8
 8008396:	6193      	str	r3, [r2, #24]
 8008398:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <HAL_I2C_MspInit+0x74>)
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	f003 0308 	and.w	r3, r3, #8
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083a4:	23c0      	movs	r3, #192	; 0xc0
 80083a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083a8:	2312      	movs	r3, #18
 80083aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083ac:	2303      	movs	r3, #3
 80083ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083b0:	f107 0310 	add.w	r3, r7, #16
 80083b4:	4619      	mov	r1, r3
 80083b6:	480b      	ldr	r0, [pc, #44]	; (80083e4 <HAL_I2C_MspInit+0x78>)
 80083b8:	f000 fd22 	bl	8008e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80083bc:	4b08      	ldr	r3, [pc, #32]	; (80083e0 <HAL_I2C_MspInit+0x74>)
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	4a07      	ldr	r2, [pc, #28]	; (80083e0 <HAL_I2C_MspInit+0x74>)
 80083c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083c6:	61d3      	str	r3, [r2, #28]
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <HAL_I2C_MspInit+0x74>)
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80083d4:	bf00      	nop
 80083d6:	3720      	adds	r7, #32
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	40005400 	.word	0x40005400
 80083e0:	40021000 	.word	0x40021000
 80083e4:	40010c00 	.word	0x40010c00

080083e8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <HAL_I2C_MspDeInit+0x38>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d10d      	bne.n	8008416 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <HAL_I2C_MspDeInit+0x3c>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	4a09      	ldr	r2, [pc, #36]	; (8008424 <HAL_I2C_MspDeInit+0x3c>)
 8008400:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008404:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008406:	2140      	movs	r1, #64	; 0x40
 8008408:	4807      	ldr	r0, [pc, #28]	; (8008428 <HAL_I2C_MspDeInit+0x40>)
 800840a:	f000 fe8d 	bl	8009128 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800840e:	2180      	movs	r1, #128	; 0x80
 8008410:	4805      	ldr	r0, [pc, #20]	; (8008428 <HAL_I2C_MspDeInit+0x40>)
 8008412:	f000 fe89 	bl	8009128 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40005400 	.word	0x40005400
 8008424:	40021000 	.word	0x40021000
 8008428:	40010c00 	.word	0x40010c00

0800842c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a0d      	ldr	r2, [pc, #52]	; (8008470 <HAL_TIM_Base_MspInit+0x44>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d113      	bne.n	8008466 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800843e:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <HAL_TIM_Base_MspInit+0x48>)
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	4a0c      	ldr	r2, [pc, #48]	; (8008474 <HAL_TIM_Base_MspInit+0x48>)
 8008444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008448:	6193      	str	r3, [r2, #24]
 800844a:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <HAL_TIM_Base_MspInit+0x48>)
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008456:	2200      	movs	r2, #0
 8008458:	2100      	movs	r1, #0
 800845a:	2019      	movs	r0, #25
 800845c:	f000 fb57 	bl	8008b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008460:	2019      	movs	r0, #25
 8008462:	f000 fb70 	bl	8008b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40012c00 	.word	0x40012c00
 8008474:	40021000 	.word	0x40021000

08008478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008480:	f107 0310 	add.w	r3, r7, #16
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	605a      	str	r2, [r3, #4]
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a20      	ldr	r2, [pc, #128]	; (8008514 <HAL_UART_MspInit+0x9c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d139      	bne.n	800850c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008498:	4b1f      	ldr	r3, [pc, #124]	; (8008518 <HAL_UART_MspInit+0xa0>)
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	4a1e      	ldr	r2, [pc, #120]	; (8008518 <HAL_UART_MspInit+0xa0>)
 800849e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084a2:	6193      	str	r3, [r2, #24]
 80084a4:	4b1c      	ldr	r3, [pc, #112]	; (8008518 <HAL_UART_MspInit+0xa0>)
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084b0:	4b19      	ldr	r3, [pc, #100]	; (8008518 <HAL_UART_MspInit+0xa0>)
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	4a18      	ldr	r2, [pc, #96]	; (8008518 <HAL_UART_MspInit+0xa0>)
 80084b6:	f043 0304 	orr.w	r3, r3, #4
 80084ba:	6193      	str	r3, [r2, #24]
 80084bc:	4b16      	ldr	r3, [pc, #88]	; (8008518 <HAL_UART_MspInit+0xa0>)
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	60bb      	str	r3, [r7, #8]
 80084c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80084c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ce:	2302      	movs	r3, #2
 80084d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084d2:	2303      	movs	r3, #3
 80084d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084d6:	f107 0310 	add.w	r3, r7, #16
 80084da:	4619      	mov	r1, r3
 80084dc:	480f      	ldr	r0, [pc, #60]	; (800851c <HAL_UART_MspInit+0xa4>)
 80084de:	f000 fc8f 	bl	8008e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80084e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084f0:	f107 0310 	add.w	r3, r7, #16
 80084f4:	4619      	mov	r1, r3
 80084f6:	4809      	ldr	r0, [pc, #36]	; (800851c <HAL_UART_MspInit+0xa4>)
 80084f8:	f000 fc82 	bl	8008e00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80084fc:	2200      	movs	r2, #0
 80084fe:	2100      	movs	r1, #0
 8008500:	2025      	movs	r0, #37	; 0x25
 8008502:	f000 fb04 	bl	8008b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008506:	2025      	movs	r0, #37	; 0x25
 8008508:	f000 fb1d 	bl	8008b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800850c:	bf00      	nop
 800850e:	3720      	adds	r7, #32
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	40013800 	.word	0x40013800
 8008518:	40021000 	.word	0x40021000
 800851c:	40010800 	.word	0x40010800

08008520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008524:	e7fe      	b.n	8008524 <NMI_Handler+0x4>

08008526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008526:	b480      	push	{r7}
 8008528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800852a:	e7fe      	b.n	800852a <HardFault_Handler+0x4>

0800852c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008530:	e7fe      	b.n	8008530 <MemManage_Handler+0x4>

08008532 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008532:	b480      	push	{r7}
 8008534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008536:	e7fe      	b.n	8008536 <BusFault_Handler+0x4>

08008538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800853c:	e7fe      	b.n	800853c <UsageFault_Handler+0x4>

0800853e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800853e:	b480      	push	{r7}
 8008540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008542:	bf00      	nop
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr

0800854a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800854a:	b480      	push	{r7}
 800854c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800854e:	bf00      	nop
 8008550:	46bd      	mov	sp, r7
 8008552:	bc80      	pop	{r7}
 8008554:	4770      	bx	lr

08008556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008556:	b480      	push	{r7}
 8008558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800855a:	bf00      	nop
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr

08008562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008566:	f000 f8bf 	bl	80086e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800856a:	bf00      	nop
 800856c:	bd80      	pop	{r7, pc}
	...

08008570 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008574:	4802      	ldr	r0, [pc, #8]	; (8008580 <TIM1_UP_IRQHandler+0x10>)
 8008576:	f002 fdcd 	bl	800b114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800857a:	bf00      	nop
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	2000030c 	.word	0x2000030c

08008584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008588:	4802      	ldr	r0, [pc, #8]	; (8008594 <USART1_IRQHandler+0x10>)
 800858a:	f003 f9cb 	bl	800b924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800858e:	bf00      	nop
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000354 	.word	0x20000354

08008598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085a0:	4a14      	ldr	r2, [pc, #80]	; (80085f4 <_sbrk+0x5c>)
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <_sbrk+0x60>)
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085ac:	4b13      	ldr	r3, [pc, #76]	; (80085fc <_sbrk+0x64>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085b4:	4b11      	ldr	r3, [pc, #68]	; (80085fc <_sbrk+0x64>)
 80085b6:	4a12      	ldr	r2, [pc, #72]	; (8008600 <_sbrk+0x68>)
 80085b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085ba:	4b10      	ldr	r3, [pc, #64]	; (80085fc <_sbrk+0x64>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d207      	bcs.n	80085d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085c8:	f004 f81a 	bl	800c600 <__errno>
 80085cc:	4603      	mov	r3, r0
 80085ce:	220c      	movs	r2, #12
 80085d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085d6:	e009      	b.n	80085ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085d8:	4b08      	ldr	r3, [pc, #32]	; (80085fc <_sbrk+0x64>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085de:	4b07      	ldr	r3, [pc, #28]	; (80085fc <_sbrk+0x64>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4413      	add	r3, r2
 80085e6:	4a05      	ldr	r2, [pc, #20]	; (80085fc <_sbrk+0x64>)
 80085e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	2000c000 	.word	0x2000c000
 80085f8:	00000400 	.word	0x00000400
 80085fc:	2000039c 	.word	0x2000039c
 8008600:	200004f0 	.word	0x200004f0

08008604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008608:	bf00      	nop
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr

08008610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008610:	480c      	ldr	r0, [pc, #48]	; (8008644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008612:	490d      	ldr	r1, [pc, #52]	; (8008648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008614:	4a0d      	ldr	r2, [pc, #52]	; (800864c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008618:	e002      	b.n	8008620 <LoopCopyDataInit>

0800861a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800861a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800861c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800861e:	3304      	adds	r3, #4

08008620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008624:	d3f9      	bcc.n	800861a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008626:	4a0a      	ldr	r2, [pc, #40]	; (8008650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008628:	4c0a      	ldr	r4, [pc, #40]	; (8008654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800862a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800862c:	e001      	b.n	8008632 <LoopFillZerobss>

0800862e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800862e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008630:	3204      	adds	r2, #4

08008632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008634:	d3fb      	bcc.n	800862e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008636:	f7ff ffe5 	bl	8008604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800863a:	f003 ffe7 	bl	800c60c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800863e:	f7ff fb9d 	bl	8007d7c <main>
  bx lr
 8008642:	4770      	bx	lr
  ldr r0, =_sdata
 8008644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008648:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800864c:	0800dda0 	.word	0x0800dda0
  ldr r2, =_sbss
 8008650:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8008654:	200004ec 	.word	0x200004ec

08008658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008658:	e7fe      	b.n	8008658 <ADC1_2_IRQHandler>
	...

0800865c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008660:	4b08      	ldr	r3, [pc, #32]	; (8008684 <HAL_Init+0x28>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a07      	ldr	r2, [pc, #28]	; (8008684 <HAL_Init+0x28>)
 8008666:	f043 0310 	orr.w	r3, r3, #16
 800866a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800866c:	2003      	movs	r0, #3
 800866e:	f000 fa43 	bl	8008af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008672:	200f      	movs	r0, #15
 8008674:	f000 f808 	bl	8008688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008678:	f7ff fdfa 	bl	8008270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40022000 	.word	0x40022000

08008688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008690:	4b12      	ldr	r3, [pc, #72]	; (80086dc <HAL_InitTick+0x54>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4b12      	ldr	r3, [pc, #72]	; (80086e0 <HAL_InitTick+0x58>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	4619      	mov	r1, r3
 800869a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800869e:	fbb3 f3f1 	udiv	r3, r3, r1
 80086a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fa5b 	bl	8008b62 <HAL_SYSTICK_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e00e      	b.n	80086d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b0f      	cmp	r3, #15
 80086ba:	d80a      	bhi.n	80086d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086bc:	2200      	movs	r2, #0
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086c4:	f000 fa23 	bl	8008b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086c8:	4a06      	ldr	r2, [pc, #24]	; (80086e4 <HAL_InitTick+0x5c>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e000      	b.n	80086d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	200000b4 	.word	0x200000b4
 80086e0:	200000bc 	.word	0x200000bc
 80086e4:	200000b8 	.word	0x200000b8

080086e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_IncTick+0x1c>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	461a      	mov	r2, r3
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <HAL_IncTick+0x20>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4413      	add	r3, r2
 80086f8:	4a03      	ldr	r2, [pc, #12]	; (8008708 <HAL_IncTick+0x20>)
 80086fa:	6013      	str	r3, [r2, #0]
}
 80086fc:	bf00      	nop
 80086fe:	46bd      	mov	sp, r7
 8008700:	bc80      	pop	{r7}
 8008702:	4770      	bx	lr
 8008704:	200000bc 	.word	0x200000bc
 8008708:	200003a0 	.word	0x200003a0

0800870c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
  return uwTick;
 8008710:	4b02      	ldr	r3, [pc, #8]	; (800871c <HAL_GetTick+0x10>)
 8008712:	681b      	ldr	r3, [r3, #0]
}
 8008714:	4618      	mov	r0, r3
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr
 800871c:	200003a0 	.word	0x200003a0

08008720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008728:	f7ff fff0 	bl	800870c <HAL_GetTick>
 800872c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008738:	d005      	beq.n	8008746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800873a:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <HAL_Delay+0x44>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008746:	bf00      	nop
 8008748:	f7ff ffe0 	bl	800870c <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	429a      	cmp	r2, r3
 8008756:	d8f7      	bhi.n	8008748 <HAL_Delay+0x28>
  {
  }
}
 8008758:	bf00      	nop
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	200000bc 	.word	0x200000bc

08008768 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e0ed      	b.n	8008956 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d102      	bne.n	800878c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7ff fda4 	bl	80082d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800879c:	f7ff ffb6 	bl	800870c <HAL_GetTick>
 80087a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087a2:	e012      	b.n	80087ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80087a4:	f7ff ffb2 	bl	800870c <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b0a      	cmp	r3, #10
 80087b0:	d90b      	bls.n	80087ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2205      	movs	r2, #5
 80087c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e0c5      	b.n	8008956 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0e5      	beq.n	80087a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0202 	bic.w	r2, r2, #2
 80087e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087e8:	f7ff ff90 	bl	800870c <HAL_GetTick>
 80087ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80087ee:	e012      	b.n	8008816 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80087f0:	f7ff ff8c 	bl	800870c <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b0a      	cmp	r3, #10
 80087fc:	d90b      	bls.n	8008816 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2205      	movs	r2, #5
 800880e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e09f      	b.n	8008956 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e5      	bne.n	80087f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7e1b      	ldrb	r3, [r3, #24]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d108      	bne.n	800883e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e007      	b.n	800884e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800884c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7e5b      	ldrb	r3, [r3, #25]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d108      	bne.n	8008868 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	e007      	b.n	8008878 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008876:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	7e9b      	ldrb	r3, [r3, #26]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d108      	bne.n	8008892 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0220 	orr.w	r2, r2, #32
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	e007      	b.n	80088a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 0220 	bic.w	r2, r2, #32
 80088a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	7edb      	ldrb	r3, [r3, #27]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d108      	bne.n	80088bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0210 	bic.w	r2, r2, #16
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	e007      	b.n	80088cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0210 	orr.w	r2, r2, #16
 80088ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7f1b      	ldrb	r3, [r3, #28]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d108      	bne.n	80088e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0208 	orr.w	r2, r2, #8
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	e007      	b.n	80088f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0208 	bic.w	r2, r2, #8
 80088f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	7f5b      	ldrb	r3, [r3, #29]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d108      	bne.n	8008910 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f042 0204 	orr.w	r2, r2, #4
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e007      	b.n	8008920 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0204 	bic.w	r2, r2, #4
 800891e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	ea42 0103 	orr.w	r1, r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	1e5a      	subs	r2, r3, #1
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <__NVIC_SetPriorityGrouping>:
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008970:	4b0c      	ldr	r3, [pc, #48]	; (80089a4 <__NVIC_SetPriorityGrouping+0x44>)
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800897c:	4013      	ands	r3, r2
 800897e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800898c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008992:	4a04      	ldr	r2, [pc, #16]	; (80089a4 <__NVIC_SetPriorityGrouping+0x44>)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	60d3      	str	r3, [r2, #12]
}
 8008998:	bf00      	nop
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	bc80      	pop	{r7}
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	e000ed00 	.word	0xe000ed00

080089a8 <__NVIC_GetPriorityGrouping>:
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089ac:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <__NVIC_GetPriorityGrouping+0x18>)
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	f003 0307 	and.w	r3, r3, #7
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bc80      	pop	{r7}
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	e000ed00 	.word	0xe000ed00

080089c4 <__NVIC_EnableIRQ>:
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	db0b      	blt.n	80089ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	f003 021f 	and.w	r2, r3, #31
 80089dc:	4906      	ldr	r1, [pc, #24]	; (80089f8 <__NVIC_EnableIRQ+0x34>)
 80089de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e2:	095b      	lsrs	r3, r3, #5
 80089e4:	2001      	movs	r0, #1
 80089e6:	fa00 f202 	lsl.w	r2, r0, r2
 80089ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bc80      	pop	{r7}
 80089f6:	4770      	bx	lr
 80089f8:	e000e100 	.word	0xe000e100

080089fc <__NVIC_SetPriority>:
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	db0a      	blt.n	8008a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	490c      	ldr	r1, [pc, #48]	; (8008a48 <__NVIC_SetPriority+0x4c>)
 8008a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a1a:	0112      	lsls	r2, r2, #4
 8008a1c:	b2d2      	uxtb	r2, r2
 8008a1e:	440b      	add	r3, r1
 8008a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a24:	e00a      	b.n	8008a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	4908      	ldr	r1, [pc, #32]	; (8008a4c <__NVIC_SetPriority+0x50>)
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	3b04      	subs	r3, #4
 8008a34:	0112      	lsls	r2, r2, #4
 8008a36:	b2d2      	uxtb	r2, r2
 8008a38:	440b      	add	r3, r1
 8008a3a:	761a      	strb	r2, [r3, #24]
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	e000e100 	.word	0xe000e100
 8008a4c:	e000ed00 	.word	0xe000ed00

08008a50 <NVIC_EncodePriority>:
{
 8008a50:	b480      	push	{r7}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	f1c3 0307 	rsb	r3, r3, #7
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	bf28      	it	cs
 8008a6e:	2304      	movcs	r3, #4
 8008a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	3304      	adds	r3, #4
 8008a76:	2b06      	cmp	r3, #6
 8008a78:	d902      	bls.n	8008a80 <NVIC_EncodePriority+0x30>
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	3b03      	subs	r3, #3
 8008a7e:	e000      	b.n	8008a82 <NVIC_EncodePriority+0x32>
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8e:	43da      	mvns	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	401a      	ands	r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa2:	43d9      	mvns	r1, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008aa8:	4313      	orrs	r3, r2
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3724      	adds	r7, #36	; 0x24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr

08008ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ac4:	d301      	bcc.n	8008aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e00f      	b.n	8008aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008aca:	4a0a      	ldr	r2, [pc, #40]	; (8008af4 <SysTick_Config+0x40>)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ad2:	210f      	movs	r1, #15
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad8:	f7ff ff90 	bl	80089fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <SysTick_Config+0x40>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ae2:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <SysTick_Config+0x40>)
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	e000e010 	.word	0xe000e010

08008af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff ff2d 	bl	8008960 <__NVIC_SetPriorityGrouping>
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b086      	sub	sp, #24
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	4603      	mov	r3, r0
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
 8008b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b20:	f7ff ff42 	bl	80089a8 <__NVIC_GetPriorityGrouping>
 8008b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	6978      	ldr	r0, [r7, #20]
 8008b2c:	f7ff ff90 	bl	8008a50 <NVIC_EncodePriority>
 8008b30:	4602      	mov	r2, r0
 8008b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff ff5f 	bl	80089fc <__NVIC_SetPriority>
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7ff ff35 	bl	80089c4 <__NVIC_EnableIRQ>
}
 8008b5a:	bf00      	nop
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff ffa2 	bl	8008ab4 <SysTick_Config>
 8008b70:	4603      	mov	r3, r0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d008      	beq.n	8008ba4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2204      	movs	r2, #4
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e020      	b.n	8008be6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 020e 	bic.w	r2, r2, #14
 8008bb2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0201 	bic.w	r2, r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	2101      	movs	r1, #1
 8008bce:	fa01 f202 	lsl.w	r2, r1, r2
 8008bd2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr

08008bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d005      	beq.n	8008c14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]
 8008c12:	e0d6      	b.n	8008dc2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 020e 	bic.w	r2, r2, #14
 8008c22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f022 0201 	bic.w	r2, r2, #1
 8008c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4b64      	ldr	r3, [pc, #400]	; (8008dcc <HAL_DMA_Abort_IT+0x1dc>)
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d958      	bls.n	8008cf2 <HAL_DMA_Abort_IT+0x102>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a62      	ldr	r2, [pc, #392]	; (8008dd0 <HAL_DMA_Abort_IT+0x1e0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d04f      	beq.n	8008cea <HAL_DMA_Abort_IT+0xfa>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a61      	ldr	r2, [pc, #388]	; (8008dd4 <HAL_DMA_Abort_IT+0x1e4>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d048      	beq.n	8008ce6 <HAL_DMA_Abort_IT+0xf6>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a5f      	ldr	r2, [pc, #380]	; (8008dd8 <HAL_DMA_Abort_IT+0x1e8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d040      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0xf0>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a5e      	ldr	r2, [pc, #376]	; (8008ddc <HAL_DMA_Abort_IT+0x1ec>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d038      	beq.n	8008cda <HAL_DMA_Abort_IT+0xea>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a5c      	ldr	r2, [pc, #368]	; (8008de0 <HAL_DMA_Abort_IT+0x1f0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d030      	beq.n	8008cd4 <HAL_DMA_Abort_IT+0xe4>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a5b      	ldr	r2, [pc, #364]	; (8008de4 <HAL_DMA_Abort_IT+0x1f4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d028      	beq.n	8008cce <HAL_DMA_Abort_IT+0xde>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a52      	ldr	r2, [pc, #328]	; (8008dcc <HAL_DMA_Abort_IT+0x1dc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d020      	beq.n	8008cc8 <HAL_DMA_Abort_IT+0xd8>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a57      	ldr	r2, [pc, #348]	; (8008de8 <HAL_DMA_Abort_IT+0x1f8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d019      	beq.n	8008cc4 <HAL_DMA_Abort_IT+0xd4>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a55      	ldr	r2, [pc, #340]	; (8008dec <HAL_DMA_Abort_IT+0x1fc>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d012      	beq.n	8008cc0 <HAL_DMA_Abort_IT+0xd0>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a54      	ldr	r2, [pc, #336]	; (8008df0 <HAL_DMA_Abort_IT+0x200>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00a      	beq.n	8008cba <HAL_DMA_Abort_IT+0xca>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a52      	ldr	r2, [pc, #328]	; (8008df4 <HAL_DMA_Abort_IT+0x204>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d102      	bne.n	8008cb4 <HAL_DMA_Abort_IT+0xc4>
 8008cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cb2:	e01b      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cb8:	e018      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cbe:	e015      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	e013      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e011      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ccc:	e00e      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cd2:	e00b      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cd8:	e008      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cde:	e005      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ce4:	e002      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008ce6:	2310      	movs	r3, #16
 8008ce8:	e000      	b.n	8008cec <HAL_DMA_Abort_IT+0xfc>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4a42      	ldr	r2, [pc, #264]	; (8008df8 <HAL_DMA_Abort_IT+0x208>)
 8008cee:	6053      	str	r3, [r2, #4]
 8008cf0:	e057      	b.n	8008da2 <HAL_DMA_Abort_IT+0x1b2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a36      	ldr	r2, [pc, #216]	; (8008dd0 <HAL_DMA_Abort_IT+0x1e0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d04f      	beq.n	8008d9c <HAL_DMA_Abort_IT+0x1ac>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a34      	ldr	r2, [pc, #208]	; (8008dd4 <HAL_DMA_Abort_IT+0x1e4>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d048      	beq.n	8008d98 <HAL_DMA_Abort_IT+0x1a8>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a33      	ldr	r2, [pc, #204]	; (8008dd8 <HAL_DMA_Abort_IT+0x1e8>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d040      	beq.n	8008d92 <HAL_DMA_Abort_IT+0x1a2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a31      	ldr	r2, [pc, #196]	; (8008ddc <HAL_DMA_Abort_IT+0x1ec>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d038      	beq.n	8008d8c <HAL_DMA_Abort_IT+0x19c>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a30      	ldr	r2, [pc, #192]	; (8008de0 <HAL_DMA_Abort_IT+0x1f0>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d030      	beq.n	8008d86 <HAL_DMA_Abort_IT+0x196>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2e      	ldr	r2, [pc, #184]	; (8008de4 <HAL_DMA_Abort_IT+0x1f4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d028      	beq.n	8008d80 <HAL_DMA_Abort_IT+0x190>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a26      	ldr	r2, [pc, #152]	; (8008dcc <HAL_DMA_Abort_IT+0x1dc>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d020      	beq.n	8008d7a <HAL_DMA_Abort_IT+0x18a>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a2a      	ldr	r2, [pc, #168]	; (8008de8 <HAL_DMA_Abort_IT+0x1f8>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d019      	beq.n	8008d76 <HAL_DMA_Abort_IT+0x186>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a29      	ldr	r2, [pc, #164]	; (8008dec <HAL_DMA_Abort_IT+0x1fc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d012      	beq.n	8008d72 <HAL_DMA_Abort_IT+0x182>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a27      	ldr	r2, [pc, #156]	; (8008df0 <HAL_DMA_Abort_IT+0x200>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00a      	beq.n	8008d6c <HAL_DMA_Abort_IT+0x17c>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a26      	ldr	r2, [pc, #152]	; (8008df4 <HAL_DMA_Abort_IT+0x204>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d102      	bne.n	8008d66 <HAL_DMA_Abort_IT+0x176>
 8008d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d64:	e01b      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d6a:	e018      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d70:	e015      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d72:	2310      	movs	r3, #16
 8008d74:	e013      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e011      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d7e:	e00e      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d84:	e00b      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d8a:	e008      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d90:	e005      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d96:	e002      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	e000      	b.n	8008d9e <HAL_DMA_Abort_IT+0x1ae>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4a17      	ldr	r2, [pc, #92]	; (8008dfc <HAL_DMA_Abort_IT+0x20c>)
 8008da0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
    } 
  }
  return status;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	40020080 	.word	0x40020080
 8008dd0:	40020008 	.word	0x40020008
 8008dd4:	4002001c 	.word	0x4002001c
 8008dd8:	40020030 	.word	0x40020030
 8008ddc:	40020044 	.word	0x40020044
 8008de0:	40020058 	.word	0x40020058
 8008de4:	4002006c 	.word	0x4002006c
 8008de8:	40020408 	.word	0x40020408
 8008dec:	4002041c 	.word	0x4002041c
 8008df0:	40020430 	.word	0x40020430
 8008df4:	40020444 	.word	0x40020444
 8008df8:	40020400 	.word	0x40020400
 8008dfc:	40020000 	.word	0x40020000

08008e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b08b      	sub	sp, #44	; 0x2c
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e12:	e179      	b.n	8009108 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e14:	2201      	movs	r2, #1
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	fa02 f303 	lsl.w	r3, r2, r3
 8008e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69fa      	ldr	r2, [r7, #28]
 8008e24:	4013      	ands	r3, r2
 8008e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	f040 8168 	bne.w	8009102 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	4a96      	ldr	r2, [pc, #600]	; (8009090 <HAL_GPIO_Init+0x290>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d05e      	beq.n	8008efa <HAL_GPIO_Init+0xfa>
 8008e3c:	4a94      	ldr	r2, [pc, #592]	; (8009090 <HAL_GPIO_Init+0x290>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d875      	bhi.n	8008f2e <HAL_GPIO_Init+0x12e>
 8008e42:	4a94      	ldr	r2, [pc, #592]	; (8009094 <HAL_GPIO_Init+0x294>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d058      	beq.n	8008efa <HAL_GPIO_Init+0xfa>
 8008e48:	4a92      	ldr	r2, [pc, #584]	; (8009094 <HAL_GPIO_Init+0x294>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d86f      	bhi.n	8008f2e <HAL_GPIO_Init+0x12e>
 8008e4e:	4a92      	ldr	r2, [pc, #584]	; (8009098 <HAL_GPIO_Init+0x298>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d052      	beq.n	8008efa <HAL_GPIO_Init+0xfa>
 8008e54:	4a90      	ldr	r2, [pc, #576]	; (8009098 <HAL_GPIO_Init+0x298>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d869      	bhi.n	8008f2e <HAL_GPIO_Init+0x12e>
 8008e5a:	4a90      	ldr	r2, [pc, #576]	; (800909c <HAL_GPIO_Init+0x29c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d04c      	beq.n	8008efa <HAL_GPIO_Init+0xfa>
 8008e60:	4a8e      	ldr	r2, [pc, #568]	; (800909c <HAL_GPIO_Init+0x29c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d863      	bhi.n	8008f2e <HAL_GPIO_Init+0x12e>
 8008e66:	4a8e      	ldr	r2, [pc, #568]	; (80090a0 <HAL_GPIO_Init+0x2a0>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d046      	beq.n	8008efa <HAL_GPIO_Init+0xfa>
 8008e6c:	4a8c      	ldr	r2, [pc, #560]	; (80090a0 <HAL_GPIO_Init+0x2a0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d85d      	bhi.n	8008f2e <HAL_GPIO_Init+0x12e>
 8008e72:	2b12      	cmp	r3, #18
 8008e74:	d82a      	bhi.n	8008ecc <HAL_GPIO_Init+0xcc>
 8008e76:	2b12      	cmp	r3, #18
 8008e78:	d859      	bhi.n	8008f2e <HAL_GPIO_Init+0x12e>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <HAL_GPIO_Init+0x80>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008efb 	.word	0x08008efb
 8008e84:	08008ed5 	.word	0x08008ed5
 8008e88:	08008ee7 	.word	0x08008ee7
 8008e8c:	08008f29 	.word	0x08008f29
 8008e90:	08008f2f 	.word	0x08008f2f
 8008e94:	08008f2f 	.word	0x08008f2f
 8008e98:	08008f2f 	.word	0x08008f2f
 8008e9c:	08008f2f 	.word	0x08008f2f
 8008ea0:	08008f2f 	.word	0x08008f2f
 8008ea4:	08008f2f 	.word	0x08008f2f
 8008ea8:	08008f2f 	.word	0x08008f2f
 8008eac:	08008f2f 	.word	0x08008f2f
 8008eb0:	08008f2f 	.word	0x08008f2f
 8008eb4:	08008f2f 	.word	0x08008f2f
 8008eb8:	08008f2f 	.word	0x08008f2f
 8008ebc:	08008f2f 	.word	0x08008f2f
 8008ec0:	08008f2f 	.word	0x08008f2f
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008ef1 	.word	0x08008ef1
 8008ecc:	4a75      	ldr	r2, [pc, #468]	; (80090a4 <HAL_GPIO_Init+0x2a4>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d013      	beq.n	8008efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008ed2:	e02c      	b.n	8008f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	623b      	str	r3, [r7, #32]
          break;
 8008eda:	e029      	b.n	8008f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	623b      	str	r3, [r7, #32]
          break;
 8008ee4:	e024      	b.n	8008f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	3308      	adds	r3, #8
 8008eec:	623b      	str	r3, [r7, #32]
          break;
 8008eee:	e01f      	b.n	8008f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	330c      	adds	r3, #12
 8008ef6:	623b      	str	r3, [r7, #32]
          break;
 8008ef8:	e01a      	b.n	8008f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f02:	2304      	movs	r3, #4
 8008f04:	623b      	str	r3, [r7, #32]
          break;
 8008f06:	e013      	b.n	8008f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d105      	bne.n	8008f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f10:	2308      	movs	r3, #8
 8008f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	611a      	str	r2, [r3, #16]
          break;
 8008f1a:	e009      	b.n	8008f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f1c:	2308      	movs	r3, #8
 8008f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	615a      	str	r2, [r3, #20]
          break;
 8008f26:	e003      	b.n	8008f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	623b      	str	r3, [r7, #32]
          break;
 8008f2c:	e000      	b.n	8008f30 <HAL_GPIO_Init+0x130>
          break;
 8008f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2bff      	cmp	r3, #255	; 0xff
 8008f34:	d801      	bhi.n	8008f3a <HAL_GPIO_Init+0x13a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	e001      	b.n	8008f3e <HAL_GPIO_Init+0x13e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	2bff      	cmp	r3, #255	; 0xff
 8008f44:	d802      	bhi.n	8008f4c <HAL_GPIO_Init+0x14c>
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	e002      	b.n	8008f52 <HAL_GPIO_Init+0x152>
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	3b08      	subs	r3, #8
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	210f      	movs	r1, #15
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f60:	43db      	mvns	r3, r3
 8008f62:	401a      	ands	r2, r3
 8008f64:	6a39      	ldr	r1, [r7, #32]
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	fa01 f303 	lsl.w	r3, r1, r3
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80c1 	beq.w	8009102 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008f80:	4b49      	ldr	r3, [pc, #292]	; (80090a8 <HAL_GPIO_Init+0x2a8>)
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	4a48      	ldr	r2, [pc, #288]	; (80090a8 <HAL_GPIO_Init+0x2a8>)
 8008f86:	f043 0301 	orr.w	r3, r3, #1
 8008f8a:	6193      	str	r3, [r2, #24]
 8008f8c:	4b46      	ldr	r3, [pc, #280]	; (80090a8 <HAL_GPIO_Init+0x2a8>)
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008f98:	4a44      	ldr	r2, [pc, #272]	; (80090ac <HAL_GPIO_Init+0x2ac>)
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	089b      	lsrs	r3, r3, #2
 8008f9e:	3302      	adds	r3, #2
 8008fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	f003 0303 	and.w	r3, r3, #3
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	220f      	movs	r2, #15
 8008fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb4:	43db      	mvns	r3, r3
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	4013      	ands	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a3c      	ldr	r2, [pc, #240]	; (80090b0 <HAL_GPIO_Init+0x2b0>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d01f      	beq.n	8009004 <HAL_GPIO_Init+0x204>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a3b      	ldr	r2, [pc, #236]	; (80090b4 <HAL_GPIO_Init+0x2b4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d019      	beq.n	8009000 <HAL_GPIO_Init+0x200>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a3a      	ldr	r2, [pc, #232]	; (80090b8 <HAL_GPIO_Init+0x2b8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d013      	beq.n	8008ffc <HAL_GPIO_Init+0x1fc>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a39      	ldr	r2, [pc, #228]	; (80090bc <HAL_GPIO_Init+0x2bc>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00d      	beq.n	8008ff8 <HAL_GPIO_Init+0x1f8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a38      	ldr	r2, [pc, #224]	; (80090c0 <HAL_GPIO_Init+0x2c0>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d007      	beq.n	8008ff4 <HAL_GPIO_Init+0x1f4>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a37      	ldr	r2, [pc, #220]	; (80090c4 <HAL_GPIO_Init+0x2c4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d101      	bne.n	8008ff0 <HAL_GPIO_Init+0x1f0>
 8008fec:	2305      	movs	r3, #5
 8008fee:	e00a      	b.n	8009006 <HAL_GPIO_Init+0x206>
 8008ff0:	2306      	movs	r3, #6
 8008ff2:	e008      	b.n	8009006 <HAL_GPIO_Init+0x206>
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	e006      	b.n	8009006 <HAL_GPIO_Init+0x206>
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e004      	b.n	8009006 <HAL_GPIO_Init+0x206>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e002      	b.n	8009006 <HAL_GPIO_Init+0x206>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <HAL_GPIO_Init+0x206>
 8009004:	2300      	movs	r3, #0
 8009006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009008:	f002 0203 	and.w	r2, r2, #3
 800900c:	0092      	lsls	r2, r2, #2
 800900e:	4093      	lsls	r3, r2
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009016:	4925      	ldr	r1, [pc, #148]	; (80090ac <HAL_GPIO_Init+0x2ac>)
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	089b      	lsrs	r3, r3, #2
 800901c:	3302      	adds	r3, #2
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d006      	beq.n	800903e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009030:	4b25      	ldr	r3, [pc, #148]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 8009032:	689a      	ldr	r2, [r3, #8]
 8009034:	4924      	ldr	r1, [pc, #144]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	4313      	orrs	r3, r2
 800903a:	608b      	str	r3, [r1, #8]
 800903c:	e006      	b.n	800904c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800903e:	4b22      	ldr	r3, [pc, #136]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	43db      	mvns	r3, r3
 8009046:	4920      	ldr	r1, [pc, #128]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 8009048:	4013      	ands	r3, r2
 800904a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d006      	beq.n	8009066 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009058:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	491a      	ldr	r1, [pc, #104]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	4313      	orrs	r3, r2
 8009062:	60cb      	str	r3, [r1, #12]
 8009064:	e006      	b.n	8009074 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009066:	4b18      	ldr	r3, [pc, #96]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	43db      	mvns	r3, r3
 800906e:	4916      	ldr	r1, [pc, #88]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 8009070:	4013      	ands	r3, r2
 8009072:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d025      	beq.n	80090cc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009080:	4b11      	ldr	r3, [pc, #68]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	4910      	ldr	r1, [pc, #64]	; (80090c8 <HAL_GPIO_Init+0x2c8>)
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	4313      	orrs	r3, r2
 800908a:	604b      	str	r3, [r1, #4]
 800908c:	e025      	b.n	80090da <HAL_GPIO_Init+0x2da>
 800908e:	bf00      	nop
 8009090:	10320000 	.word	0x10320000
 8009094:	10310000 	.word	0x10310000
 8009098:	10220000 	.word	0x10220000
 800909c:	10210000 	.word	0x10210000
 80090a0:	10120000 	.word	0x10120000
 80090a4:	10110000 	.word	0x10110000
 80090a8:	40021000 	.word	0x40021000
 80090ac:	40010000 	.word	0x40010000
 80090b0:	40010800 	.word	0x40010800
 80090b4:	40010c00 	.word	0x40010c00
 80090b8:	40011000 	.word	0x40011000
 80090bc:	40011400 	.word	0x40011400
 80090c0:	40011800 	.word	0x40011800
 80090c4:	40011c00 	.word	0x40011c00
 80090c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80090cc:	4b15      	ldr	r3, [pc, #84]	; (8009124 <HAL_GPIO_Init+0x324>)
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	43db      	mvns	r3, r3
 80090d4:	4913      	ldr	r1, [pc, #76]	; (8009124 <HAL_GPIO_Init+0x324>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d006      	beq.n	80090f4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <HAL_GPIO_Init+0x324>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	490e      	ldr	r1, [pc, #56]	; (8009124 <HAL_GPIO_Init+0x324>)
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	600b      	str	r3, [r1, #0]
 80090f2:	e006      	b.n	8009102 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80090f4:	4b0b      	ldr	r3, [pc, #44]	; (8009124 <HAL_GPIO_Init+0x324>)
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	43db      	mvns	r3, r3
 80090fc:	4909      	ldr	r1, [pc, #36]	; (8009124 <HAL_GPIO_Init+0x324>)
 80090fe:	4013      	ands	r3, r2
 8009100:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009104:	3301      	adds	r3, #1
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	fa22 f303 	lsr.w	r3, r2, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	f47f ae7e 	bne.w	8008e14 <HAL_GPIO_Init+0x14>
  }
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	372c      	adds	r7, #44	; 0x2c
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr
 8009124:	40010400 	.word	0x40010400

08009128 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009128:	b480      	push	{r7}
 800912a:	b089      	sub	sp, #36	; 0x24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009132:	2300      	movs	r3, #0
 8009134:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009136:	e0a6      	b.n	8009286 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009138:	2201      	movs	r2, #1
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	fa02 f303 	lsl.w	r3, r2, r3
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	4013      	ands	r3, r2
 8009144:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 8099 	beq.w	8009280 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800914e:	4a54      	ldr	r2, [pc, #336]	; (80092a0 <HAL_GPIO_DeInit+0x178>)
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	089b      	lsrs	r3, r3, #2
 8009154:	3302      	adds	r3, #2
 8009156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800915a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	220f      	movs	r2, #15
 8009166:	fa02 f303 	lsl.w	r3, r2, r3
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	4013      	ands	r3, r2
 800916e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a4c      	ldr	r2, [pc, #304]	; (80092a4 <HAL_GPIO_DeInit+0x17c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d01f      	beq.n	80091b8 <HAL_GPIO_DeInit+0x90>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a4b      	ldr	r2, [pc, #300]	; (80092a8 <HAL_GPIO_DeInit+0x180>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d019      	beq.n	80091b4 <HAL_GPIO_DeInit+0x8c>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a4a      	ldr	r2, [pc, #296]	; (80092ac <HAL_GPIO_DeInit+0x184>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <HAL_GPIO_DeInit+0x88>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a49      	ldr	r2, [pc, #292]	; (80092b0 <HAL_GPIO_DeInit+0x188>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d00d      	beq.n	80091ac <HAL_GPIO_DeInit+0x84>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a48      	ldr	r2, [pc, #288]	; (80092b4 <HAL_GPIO_DeInit+0x18c>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d007      	beq.n	80091a8 <HAL_GPIO_DeInit+0x80>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a47      	ldr	r2, [pc, #284]	; (80092b8 <HAL_GPIO_DeInit+0x190>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d101      	bne.n	80091a4 <HAL_GPIO_DeInit+0x7c>
 80091a0:	2305      	movs	r3, #5
 80091a2:	e00a      	b.n	80091ba <HAL_GPIO_DeInit+0x92>
 80091a4:	2306      	movs	r3, #6
 80091a6:	e008      	b.n	80091ba <HAL_GPIO_DeInit+0x92>
 80091a8:	2304      	movs	r3, #4
 80091aa:	e006      	b.n	80091ba <HAL_GPIO_DeInit+0x92>
 80091ac:	2303      	movs	r3, #3
 80091ae:	e004      	b.n	80091ba <HAL_GPIO_DeInit+0x92>
 80091b0:	2302      	movs	r3, #2
 80091b2:	e002      	b.n	80091ba <HAL_GPIO_DeInit+0x92>
 80091b4:	2301      	movs	r3, #1
 80091b6:	e000      	b.n	80091ba <HAL_GPIO_DeInit+0x92>
 80091b8:	2300      	movs	r3, #0
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	f002 0203 	and.w	r2, r2, #3
 80091c0:	0092      	lsls	r2, r2, #2
 80091c2:	4093      	lsls	r3, r2
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d132      	bne.n	8009230 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80091ca:	4b3c      	ldr	r3, [pc, #240]	; (80092bc <HAL_GPIO_DeInit+0x194>)
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	43db      	mvns	r3, r3
 80091d2:	493a      	ldr	r1, [pc, #232]	; (80092bc <HAL_GPIO_DeInit+0x194>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80091d8:	4b38      	ldr	r3, [pc, #224]	; (80092bc <HAL_GPIO_DeInit+0x194>)
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	43db      	mvns	r3, r3
 80091e0:	4936      	ldr	r1, [pc, #216]	; (80092bc <HAL_GPIO_DeInit+0x194>)
 80091e2:	4013      	ands	r3, r2
 80091e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80091e6:	4b35      	ldr	r3, [pc, #212]	; (80092bc <HAL_GPIO_DeInit+0x194>)
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	43db      	mvns	r3, r3
 80091ee:	4933      	ldr	r1, [pc, #204]	; (80092bc <HAL_GPIO_DeInit+0x194>)
 80091f0:	4013      	ands	r3, r2
 80091f2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80091f4:	4b31      	ldr	r3, [pc, #196]	; (80092bc <HAL_GPIO_DeInit+0x194>)
 80091f6:	689a      	ldr	r2, [r3, #8]
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	43db      	mvns	r3, r3
 80091fc:	492f      	ldr	r1, [pc, #188]	; (80092bc <HAL_GPIO_DeInit+0x194>)
 80091fe:	4013      	ands	r3, r2
 8009200:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	f003 0303 	and.w	r3, r3, #3
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	220f      	movs	r2, #15
 800920c:	fa02 f303 	lsl.w	r3, r2, r3
 8009210:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009212:	4a23      	ldr	r2, [pc, #140]	; (80092a0 <HAL_GPIO_DeInit+0x178>)
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	089b      	lsrs	r3, r3, #2
 8009218:	3302      	adds	r3, #2
 800921a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	43da      	mvns	r2, r3
 8009222:	481f      	ldr	r0, [pc, #124]	; (80092a0 <HAL_GPIO_DeInit+0x178>)
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	089b      	lsrs	r3, r3, #2
 8009228:	400a      	ands	r2, r1
 800922a:	3302      	adds	r3, #2
 800922c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	2bff      	cmp	r3, #255	; 0xff
 8009234:	d801      	bhi.n	800923a <HAL_GPIO_DeInit+0x112>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	e001      	b.n	800923e <HAL_GPIO_DeInit+0x116>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3304      	adds	r3, #4
 800923e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	2bff      	cmp	r3, #255	; 0xff
 8009244:	d802      	bhi.n	800924c <HAL_GPIO_DeInit+0x124>
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	e002      	b.n	8009252 <HAL_GPIO_DeInit+0x12a>
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	3b08      	subs	r3, #8
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	210f      	movs	r1, #15
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	fa01 f303 	lsl.w	r3, r1, r3
 8009260:	43db      	mvns	r3, r3
 8009262:	401a      	ands	r2, r3
 8009264:	2104      	movs	r1, #4
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	fa01 f303 	lsl.w	r3, r1, r3
 800926c:	431a      	orrs	r2, r3
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	43db      	mvns	r3, r3
 800927a:	401a      	ands	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	3301      	adds	r3, #1
 8009284:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	fa22 f303 	lsr.w	r3, r2, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	f47f af52 	bne.w	8009138 <HAL_GPIO_DeInit+0x10>
  }
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	3724      	adds	r7, #36	; 0x24
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr
 80092a0:	40010000 	.word	0x40010000
 80092a4:	40010800 	.word	0x40010800
 80092a8:	40010c00 	.word	0x40010c00
 80092ac:	40011000 	.word	0x40011000
 80092b0:	40011400 	.word	0x40011400
 80092b4:	40011800 	.word	0x40011800
 80092b8:	40011c00 	.word	0x40011c00
 80092bc:	40010400 	.word	0x40010400

080092c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	887b      	ldrh	r3, [r7, #2]
 80092d2:	4013      	ands	r3, r2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092d8:	2301      	movs	r3, #1
 80092da:	73fb      	strb	r3, [r7, #15]
 80092dc:	e001      	b.n	80092e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc80      	pop	{r7}
 80092ec:	4770      	bx	lr

080092ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	460b      	mov	r3, r1
 80092f8:	807b      	strh	r3, [r7, #2]
 80092fa:	4613      	mov	r3, r2
 80092fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092fe:	787b      	ldrb	r3, [r7, #1]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009304:	887a      	ldrh	r2, [r7, #2]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800930a:	e003      	b.n	8009314 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800930c:	887b      	ldrh	r3, [r7, #2]
 800930e:	041a      	lsls	r2, r3, #16
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	611a      	str	r2, [r3, #16]
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr

0800931e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800931e:	b480      	push	{r7}
 8009320:	b085      	sub	sp, #20
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	460b      	mov	r3, r1
 8009328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009330:	887a      	ldrh	r2, [r7, #2]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4013      	ands	r3, r2
 8009336:	041a      	lsls	r2, r3, #16
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	43d9      	mvns	r1, r3
 800933c:	887b      	ldrh	r3, [r7, #2]
 800933e:	400b      	ands	r3, r1
 8009340:	431a      	orrs	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	611a      	str	r2, [r3, #16]
}
 8009346:	bf00      	nop
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr

08009350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e12b      	b.n	80095ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fe fff8 	bl	800836c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2224      	movs	r2, #36	; 0x24
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0201 	bic.w	r2, r2, #1
 8009392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093b4:	f001 fdb8 	bl	800af28 <HAL_RCC_GetPCLK1Freq>
 80093b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	4a81      	ldr	r2, [pc, #516]	; (80095c4 <HAL_I2C_Init+0x274>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d807      	bhi.n	80093d4 <HAL_I2C_Init+0x84>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4a80      	ldr	r2, [pc, #512]	; (80095c8 <HAL_I2C_Init+0x278>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	bf94      	ite	ls
 80093cc:	2301      	movls	r3, #1
 80093ce:	2300      	movhi	r3, #0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	e006      	b.n	80093e2 <HAL_I2C_Init+0x92>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4a7d      	ldr	r2, [pc, #500]	; (80095cc <HAL_I2C_Init+0x27c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	bf94      	ite	ls
 80093dc:	2301      	movls	r3, #1
 80093de:	2300      	movhi	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e0e7      	b.n	80095ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4a78      	ldr	r2, [pc, #480]	; (80095d0 <HAL_I2C_Init+0x280>)
 80093ee:	fba2 2303 	umull	r2, r3, r2, r3
 80093f2:	0c9b      	lsrs	r3, r3, #18
 80093f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	430a      	orrs	r2, r1
 8009408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6a1b      	ldr	r3, [r3, #32]
 8009410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	4a6a      	ldr	r2, [pc, #424]	; (80095c4 <HAL_I2C_Init+0x274>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d802      	bhi.n	8009424 <HAL_I2C_Init+0xd4>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	3301      	adds	r3, #1
 8009422:	e009      	b.n	8009438 <HAL_I2C_Init+0xe8>
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800942a:	fb02 f303 	mul.w	r3, r2, r3
 800942e:	4a69      	ldr	r2, [pc, #420]	; (80095d4 <HAL_I2C_Init+0x284>)
 8009430:	fba2 2303 	umull	r2, r3, r2, r3
 8009434:	099b      	lsrs	r3, r3, #6
 8009436:	3301      	adds	r3, #1
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	6812      	ldr	r2, [r2, #0]
 800943c:	430b      	orrs	r3, r1
 800943e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800944a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	495c      	ldr	r1, [pc, #368]	; (80095c4 <HAL_I2C_Init+0x274>)
 8009454:	428b      	cmp	r3, r1
 8009456:	d819      	bhi.n	800948c <HAL_I2C_Init+0x13c>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	1e59      	subs	r1, r3, #1
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	fbb1 f3f3 	udiv	r3, r1, r3
 8009466:	1c59      	adds	r1, r3, #1
 8009468:	f640 73fc 	movw	r3, #4092	; 0xffc
 800946c:	400b      	ands	r3, r1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <HAL_I2C_Init+0x138>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	1e59      	subs	r1, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009480:	3301      	adds	r3, #1
 8009482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009486:	e051      	b.n	800952c <HAL_I2C_Init+0x1dc>
 8009488:	2304      	movs	r3, #4
 800948a:	e04f      	b.n	800952c <HAL_I2C_Init+0x1dc>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d111      	bne.n	80094b8 <HAL_I2C_Init+0x168>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	1e58      	subs	r0, r3, #1
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6859      	ldr	r1, [r3, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	440b      	add	r3, r1
 80094a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80094a6:	3301      	adds	r3, #1
 80094a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bf0c      	ite	eq
 80094b0:	2301      	moveq	r3, #1
 80094b2:	2300      	movne	r3, #0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	e012      	b.n	80094de <HAL_I2C_Init+0x18e>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	1e58      	subs	r0, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6859      	ldr	r1, [r3, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	0099      	lsls	r1, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80094ce:	3301      	adds	r3, #1
 80094d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bf0c      	ite	eq
 80094d8:	2301      	moveq	r3, #1
 80094da:	2300      	movne	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <HAL_I2C_Init+0x196>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e022      	b.n	800952c <HAL_I2C_Init+0x1dc>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10e      	bne.n	800950c <HAL_I2C_Init+0x1bc>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1e58      	subs	r0, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6859      	ldr	r1, [r3, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	440b      	add	r3, r1
 80094fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8009500:	3301      	adds	r3, #1
 8009502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800950a:	e00f      	b.n	800952c <HAL_I2C_Init+0x1dc>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	1e58      	subs	r0, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6859      	ldr	r1, [r3, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	0099      	lsls	r1, r3, #2
 800951c:	440b      	add	r3, r1
 800951e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009522:	3301      	adds	r3, #1
 8009524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	6809      	ldr	r1, [r1, #0]
 8009530:	4313      	orrs	r3, r2
 8009532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69da      	ldr	r2, [r3, #28]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	430a      	orrs	r2, r1
 800954e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800955a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6911      	ldr	r1, [r2, #16]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	68d2      	ldr	r2, [r2, #12]
 8009566:	4311      	orrs	r1, r2
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6812      	ldr	r2, [r2, #0]
 800956c:	430b      	orrs	r3, r1
 800956e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	695a      	ldr	r2, [r3, #20]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0201 	orr.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	000186a0 	.word	0x000186a0
 80095c8:	001e847f 	.word	0x001e847f
 80095cc:	003d08ff 	.word	0x003d08ff
 80095d0:	431bde83 	.word	0x431bde83
 80095d4:	10624dd3 	.word	0x10624dd3

080095d8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e021      	b.n	800962e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2224      	movs	r2, #36	; 0x24
 80095ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0201 	bic.w	r2, r2, #1
 8009600:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7fe fef0 	bl	80083e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af02      	add	r7, sp, #8
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	607a      	str	r2, [r7, #4]
 8009642:	461a      	mov	r2, r3
 8009644:	460b      	mov	r3, r1
 8009646:	817b      	strh	r3, [r7, #10]
 8009648:	4613      	mov	r3, r2
 800964a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800964c:	f7ff f85e 	bl	800870c <HAL_GetTick>
 8009650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b20      	cmp	r3, #32
 800965c:	f040 80e0 	bne.w	8009820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	2319      	movs	r3, #25
 8009666:	2201      	movs	r2, #1
 8009668:	4970      	ldr	r1, [pc, #448]	; (800982c <HAL_I2C_Master_Transmit+0x1f4>)
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 fe5c 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009676:	2302      	movs	r3, #2
 8009678:	e0d3      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_I2C_Master_Transmit+0x50>
 8009684:	2302      	movs	r3, #2
 8009686:	e0cc      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b01      	cmp	r3, #1
 800969c:	d007      	beq.n	80096ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2221      	movs	r2, #33	; 0x21
 80096c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2210      	movs	r2, #16
 80096ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	893a      	ldrh	r2, [r7, #8]
 80096de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4a50      	ldr	r2, [pc, #320]	; (8009830 <HAL_I2C_Master_Transmit+0x1f8>)
 80096ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80096f0:	8979      	ldrh	r1, [r7, #10]
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	6a3a      	ldr	r2, [r7, #32]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fc16 	bl	8009f28 <I2C_MasterRequestWrite>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e08d      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009706:	2300      	movs	r3, #0
 8009708:	613b      	str	r3, [r7, #16]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	613b      	str	r3, [r7, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	613b      	str	r3, [r7, #16]
 800971a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800971c:	e066      	b.n	80097ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	6a39      	ldr	r1, [r7, #32]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 ff1a 	bl	800a55c <I2C_WaitOnTXEFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00d      	beq.n	800974a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	2b04      	cmp	r3, #4
 8009734:	d107      	bne.n	8009746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e06b      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	781a      	ldrb	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009764:	b29b      	uxth	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009772:	3b01      	subs	r3, #1
 8009774:	b29a      	uxth	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b04      	cmp	r3, #4
 8009786:	d11b      	bne.n	80097c0 <HAL_I2C_Master_Transmit+0x188>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978c:	2b00      	cmp	r3, #0
 800978e:	d017      	beq.n	80097c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	781a      	ldrb	r2, [r3, #0]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	3b01      	subs	r3, #1
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b8:	3b01      	subs	r3, #1
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	6a39      	ldr	r1, [r7, #32]
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 ff11 	bl	800a5ec <I2C_WaitOnBTFFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00d      	beq.n	80097ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d107      	bne.n	80097e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e01a      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d194      	bne.n	800971e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2220      	movs	r2, #32
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e000      	b.n	8009822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009820:	2302      	movs	r3, #2
  }
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	00100002 	.word	0x00100002
 8009830:	ffff0000 	.word	0xffff0000

08009834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	4608      	mov	r0, r1
 800983e:	4611      	mov	r1, r2
 8009840:	461a      	mov	r2, r3
 8009842:	4603      	mov	r3, r0
 8009844:	817b      	strh	r3, [r7, #10]
 8009846:	460b      	mov	r3, r1
 8009848:	813b      	strh	r3, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800984e:	f7fe ff5d 	bl	800870c <HAL_GetTick>
 8009852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b20      	cmp	r3, #32
 800985e:	f040 80d9 	bne.w	8009a14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	2319      	movs	r3, #25
 8009868:	2201      	movs	r2, #1
 800986a:	496d      	ldr	r1, [pc, #436]	; (8009a20 <HAL_I2C_Mem_Write+0x1ec>)
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 fd5b 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009878:	2302      	movs	r3, #2
 800987a:	e0cc      	b.n	8009a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009882:	2b01      	cmp	r3, #1
 8009884:	d101      	bne.n	800988a <HAL_I2C_Mem_Write+0x56>
 8009886:	2302      	movs	r3, #2
 8009888:	e0c5      	b.n	8009a16 <HAL_I2C_Mem_Write+0x1e2>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b01      	cmp	r3, #1
 800989e:	d007      	beq.n	80098b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f042 0201 	orr.w	r2, r2, #1
 80098ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2221      	movs	r2, #33	; 0x21
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2240      	movs	r2, #64	; 0x40
 80098cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a3a      	ldr	r2, [r7, #32]
 80098da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80098e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a4d      	ldr	r2, [pc, #308]	; (8009a24 <HAL_I2C_Mem_Write+0x1f0>)
 80098f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098f2:	88f8      	ldrh	r0, [r7, #6]
 80098f4:	893a      	ldrh	r2, [r7, #8]
 80098f6:	8979      	ldrh	r1, [r7, #10]
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	4603      	mov	r3, r0
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fb92 	bl	800a02c <I2C_RequestMemoryWrite>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d052      	beq.n	80099b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e081      	b.n	8009a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 fe20 	bl	800a55c <I2C_WaitOnTXEFlagUntilTimeout>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00d      	beq.n	800993e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	2b04      	cmp	r3, #4
 8009928:	d107      	bne.n	800993a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e06b      	b.n	8009a16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009958:	3b01      	subs	r3, #1
 800995a:	b29a      	uxth	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009964:	b29b      	uxth	r3, r3
 8009966:	3b01      	subs	r3, #1
 8009968:	b29a      	uxth	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b04      	cmp	r3, #4
 800997a:	d11b      	bne.n	80099b4 <HAL_I2C_Mem_Write+0x180>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	d017      	beq.n	80099b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	1c5a      	adds	r2, r3, #1
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999e:	3b01      	subs	r3, #1
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	3b01      	subs	r3, #1
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1aa      	bne.n	8009912 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 fe13 	bl	800a5ec <I2C_WaitOnBTFFlagUntilTimeout>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00d      	beq.n	80099e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d107      	bne.n	80099e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e016      	b.n	8009a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	e000      	b.n	8009a16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a14:	2302      	movs	r3, #2
  }
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	00100002 	.word	0x00100002
 8009a24:	ffff0000 	.word	0xffff0000

08009a28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b08c      	sub	sp, #48	; 0x30
 8009a2c:	af02      	add	r7, sp, #8
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	4608      	mov	r0, r1
 8009a32:	4611      	mov	r1, r2
 8009a34:	461a      	mov	r2, r3
 8009a36:	4603      	mov	r3, r0
 8009a38:	817b      	strh	r3, [r7, #10]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	813b      	strh	r3, [r7, #8]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a46:	f7fe fe61 	bl	800870c <HAL_GetTick>
 8009a4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	f040 8244 	bne.w	8009ee2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	2319      	movs	r3, #25
 8009a60:	2201      	movs	r2, #1
 8009a62:	4982      	ldr	r1, [pc, #520]	; (8009c6c <HAL_I2C_Mem_Read+0x244>)
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 fc5f 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009a70:	2302      	movs	r3, #2
 8009a72:	e237      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d101      	bne.n	8009a82 <HAL_I2C_Mem_Read+0x5a>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	e230      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d007      	beq.n	8009aa8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 0201 	orr.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ab6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2222      	movs	r2, #34	; 0x22
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2240      	movs	r2, #64	; 0x40
 8009ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4a62      	ldr	r2, [pc, #392]	; (8009c70 <HAL_I2C_Mem_Read+0x248>)
 8009ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009aea:	88f8      	ldrh	r0, [r7, #6]
 8009aec:	893a      	ldrh	r2, [r7, #8]
 8009aee:	8979      	ldrh	r1, [r7, #10]
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	9301      	str	r3, [sp, #4]
 8009af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4603      	mov	r3, r0
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fb2c 	bl	800a158 <I2C_RequestMemoryRead>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e1ec      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d113      	bne.n	8009b3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b12:	2300      	movs	r3, #0
 8009b14:	61fb      	str	r3, [r7, #28]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	695b      	ldr	r3, [r3, #20]
 8009b1c:	61fb      	str	r3, [r7, #28]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	61fb      	str	r3, [r7, #28]
 8009b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	e1c0      	b.n	8009ebc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d11e      	bne.n	8009b80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b52:	b672      	cpsid	i
}
 8009b54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b56:	2300      	movs	r3, #0
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b7c:	b662      	cpsie	i
}
 8009b7e:	e035      	b.n	8009bec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d11e      	bne.n	8009bc6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b98:	b672      	cpsid	i
}
 8009b9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	617b      	str	r3, [r7, #20]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009bc2:	b662      	cpsie	i
}
 8009bc4:	e012      	b.n	8009bec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bd4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009bec:	e166      	b.n	8009ebc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	f200 811f 	bhi.w	8009e36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d123      	bne.n	8009c48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f000 fd39 	bl	800a67c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e167      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	691a      	ldr	r2, [r3, #16]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1e:	b2d2      	uxtb	r2, r2
 8009c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c30:	3b01      	subs	r3, #1
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c46:	e139      	b.n	8009ebc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d152      	bne.n	8009cf6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c56:	2200      	movs	r2, #0
 8009c58:	4906      	ldr	r1, [pc, #24]	; (8009c74 <HAL_I2C_Mem_Read+0x24c>)
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 fb64 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d008      	beq.n	8009c78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e13c      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
 8009c6a:	bf00      	nop
 8009c6c:	00100002 	.word	0x00100002
 8009c70:	ffff0000 	.word	0xffff0000
 8009c74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009c78:	b672      	cpsid	i
}
 8009c7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691a      	ldr	r2, [r3, #16]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009cbe:	b662      	cpsie	i
}
 8009cc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	691a      	ldr	r2, [r3, #16]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	3b01      	subs	r3, #1
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009cf4:	e0e2      	b.n	8009ebc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	497b      	ldr	r1, [pc, #492]	; (8009eec <HAL_I2C_Mem_Read+0x4c4>)
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 fb11 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e0e9      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d20:	b672      	cpsid	i
}
 8009d22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	691a      	ldr	r2, [r3, #16]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	b2d2      	uxtb	r2, r2
 8009d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009d56:	4b66      	ldr	r3, [pc, #408]	; (8009ef0 <HAL_I2C_Mem_Read+0x4c8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	08db      	lsrs	r3, r3, #3
 8009d5c:	4a65      	ldr	r2, [pc, #404]	; (8009ef4 <HAL_I2C_Mem_Read+0x4cc>)
 8009d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d62:	0a1a      	lsrs	r2, r3, #8
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	00da      	lsls	r2, r3, #3
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d118      	bne.n	8009dae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2220      	movs	r2, #32
 8009d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	f043 0220 	orr.w	r2, r3, #32
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009d9e:	b662      	cpsie	i
}
 8009da0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e09a      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	d1d9      	bne.n	8009d70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	691a      	ldr	r2, [r3, #16]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de8:	3b01      	subs	r3, #1
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009dfe:	b662      	cpsie	i
}
 8009e00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	691a      	ldr	r2, [r3, #16]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	b2d2      	uxtb	r2, r2
 8009e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	1c5a      	adds	r2, r3, #1
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e34:	e042      	b.n	8009ebc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 fc1e 	bl	800a67c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e04c      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e54:	b2d2      	uxtb	r2, r2
 8009e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e66:	3b01      	subs	r3, #1
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	3b01      	subs	r3, #1
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	d118      	bne.n	8009ebc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	691a      	ldr	r2, [r3, #16]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	b2d2      	uxtb	r2, r2
 8009e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f47f ae94 	bne.w	8009bee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e000      	b.n	8009ee4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009ee2:	2302      	movs	r3, #2
  }
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3728      	adds	r7, #40	; 0x28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	00010004 	.word	0x00010004
 8009ef0:	200000b4 	.word	0x200000b4
 8009ef4:	14f8b589 	.word	0x14f8b589

08009ef8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f06:	b2db      	uxtb	r3, r3
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bc80      	pop	{r7}
 8009f10:	4770      	bx	lr

08009f12 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bc80      	pop	{r7}
 8009f26:	4770      	bx	lr

08009f28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	607a      	str	r2, [r7, #4]
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	460b      	mov	r3, r1
 8009f36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d006      	beq.n	8009f52 <I2C_MasterRequestWrite+0x2a>
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d003      	beq.n	8009f52 <I2C_MasterRequestWrite+0x2a>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f50:	d108      	bne.n	8009f64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	e00b      	b.n	8009f7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	2b12      	cmp	r3, #18
 8009f6a:	d107      	bne.n	8009f7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f9cd 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00d      	beq.n	8009fb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fa2:	d103      	bne.n	8009fac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e035      	b.n	800a01c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fb8:	d108      	bne.n	8009fcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fba:	897b      	ldrh	r3, [r7, #10]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fc8:	611a      	str	r2, [r3, #16]
 8009fca:	e01b      	b.n	800a004 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009fcc:	897b      	ldrh	r3, [r7, #10]
 8009fce:	11db      	asrs	r3, r3, #7
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	f003 0306 	and.w	r3, r3, #6
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	f063 030f 	orn	r3, r3, #15
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	490e      	ldr	r1, [pc, #56]	; (800a024 <I2C_MasterRequestWrite+0xfc>)
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 fa16 	bl	800a41c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e010      	b.n	800a01c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009ffa:	897b      	ldrh	r3, [r7, #10]
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	4907      	ldr	r1, [pc, #28]	; (800a028 <I2C_MasterRequestWrite+0x100>)
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fa06 	bl	800a41c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	00010008 	.word	0x00010008
 800a028:	00010002 	.word	0x00010002

0800a02c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af02      	add	r7, sp, #8
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	4608      	mov	r0, r1
 800a036:	4611      	mov	r1, r2
 800a038:	461a      	mov	r2, r3
 800a03a:	4603      	mov	r3, r0
 800a03c:	817b      	strh	r3, [r7, #10]
 800a03e:	460b      	mov	r3, r1
 800a040:	813b      	strh	r3, [r7, #8]
 800a042:	4613      	mov	r3, r2
 800a044:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f960 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00d      	beq.n	800a08a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07c:	d103      	bne.n	800a086 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e05f      	b.n	800a14a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a08a:	897b      	ldrh	r3, [r7, #10]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	461a      	mov	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	6a3a      	ldr	r2, [r7, #32]
 800a09e:	492d      	ldr	r1, [pc, #180]	; (800a154 <I2C_RequestMemoryWrite+0x128>)
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f9bb 	bl	800a41c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e04c      	b.n	800a14a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c8:	6a39      	ldr	r1, [r7, #32]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fa46 	bl	800a55c <I2C_WaitOnTXEFlagUntilTimeout>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00d      	beq.n	800a0f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d107      	bne.n	800a0ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e02b      	b.n	800a14a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0f2:	88fb      	ldrh	r3, [r7, #6]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d105      	bne.n	800a104 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0f8:	893b      	ldrh	r3, [r7, #8]
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	611a      	str	r2, [r3, #16]
 800a102:	e021      	b.n	800a148 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a104:	893b      	ldrh	r3, [r7, #8]
 800a106:	0a1b      	lsrs	r3, r3, #8
 800a108:	b29b      	uxth	r3, r3
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a114:	6a39      	ldr	r1, [r7, #32]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 fa20 	bl	800a55c <I2C_WaitOnTXEFlagUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00d      	beq.n	800a13e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	2b04      	cmp	r3, #4
 800a128:	d107      	bne.n	800a13a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e005      	b.n	800a14a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a13e:	893b      	ldrh	r3, [r7, #8]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	00010002 	.word	0x00010002

0800a158 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af02      	add	r7, sp, #8
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	4608      	mov	r0, r1
 800a162:	4611      	mov	r1, r2
 800a164:	461a      	mov	r2, r3
 800a166:	4603      	mov	r3, r0
 800a168:	817b      	strh	r3, [r7, #10]
 800a16a:	460b      	mov	r3, r1
 800a16c:	813b      	strh	r3, [r7, #8]
 800a16e:	4613      	mov	r3, r2
 800a170:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a180:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	2200      	movs	r2, #0
 800a19a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 f8c2 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00d      	beq.n	800a1c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b8:	d103      	bne.n	800a1c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e0aa      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1c6:	897b      	ldrh	r3, [r7, #10]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	6a3a      	ldr	r2, [r7, #32]
 800a1da:	4952      	ldr	r1, [pc, #328]	; (800a324 <I2C_RequestMemoryRead+0x1cc>)
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f91d 	bl	800a41c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e097      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a204:	6a39      	ldr	r1, [r7, #32]
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 f9a8 	bl	800a55c <I2C_WaitOnTXEFlagUntilTimeout>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00d      	beq.n	800a22e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	2b04      	cmp	r3, #4
 800a218:	d107      	bne.n	800a22a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e076      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d105      	bne.n	800a240 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a234:	893b      	ldrh	r3, [r7, #8]
 800a236:	b2da      	uxtb	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	611a      	str	r2, [r3, #16]
 800a23e:	e021      	b.n	800a284 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a240:	893b      	ldrh	r3, [r7, #8]
 800a242:	0a1b      	lsrs	r3, r3, #8
 800a244:	b29b      	uxth	r3, r3
 800a246:	b2da      	uxtb	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a250:	6a39      	ldr	r1, [r7, #32]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 f982 	bl	800a55c <I2C_WaitOnTXEFlagUntilTimeout>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00d      	beq.n	800a27a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a262:	2b04      	cmp	r3, #4
 800a264:	d107      	bne.n	800a276 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e050      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a27a:	893b      	ldrh	r3, [r7, #8]
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a286:	6a39      	ldr	r1, [r7, #32]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 f967 	bl	800a55c <I2C_WaitOnTXEFlagUntilTimeout>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00d      	beq.n	800a2b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d107      	bne.n	800a2ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e035      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 f82b 	bl	800a328 <I2C_WaitOnFlagUntilTimeout>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00d      	beq.n	800a2f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e6:	d103      	bne.n	800a2f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e013      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a2f4:	897b      	ldrh	r3, [r7, #10]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f043 0301 	orr.w	r3, r3, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	6a3a      	ldr	r2, [r7, #32]
 800a308:	4906      	ldr	r1, [pc, #24]	; (800a324 <I2C_RequestMemoryRead+0x1cc>)
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 f886 	bl	800a41c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	00010002 	.word	0x00010002

0800a328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	4613      	mov	r3, r2
 800a336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a338:	e048      	b.n	800a3cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a340:	d044      	beq.n	800a3cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a342:	f7fe f9e3 	bl	800870c <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d302      	bcc.n	800a358 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d139      	bne.n	800a3cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	0c1b      	lsrs	r3, r3, #16
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d10d      	bne.n	800a37e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	43da      	mvns	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	4013      	ands	r3, r2
 800a36e:	b29b      	uxth	r3, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	bf0c      	ite	eq
 800a374:	2301      	moveq	r3, #1
 800a376:	2300      	movne	r3, #0
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	461a      	mov	r2, r3
 800a37c:	e00c      	b.n	800a398 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	43da      	mvns	r2, r3
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	4013      	ands	r3, r2
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bf0c      	ite	eq
 800a390:	2301      	moveq	r3, #1
 800a392:	2300      	movne	r3, #0
 800a394:	b2db      	uxtb	r3, r3
 800a396:	461a      	mov	r2, r3
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d116      	bne.n	800a3cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	f043 0220 	orr.w	r2, r3, #32
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e023      	b.n	800a414 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d10d      	bne.n	800a3f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	43da      	mvns	r2, r3
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bf0c      	ite	eq
 800a3e8:	2301      	moveq	r3, #1
 800a3ea:	2300      	movne	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	e00c      	b.n	800a40c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	43da      	mvns	r2, r3
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	2b00      	cmp	r3, #0
 800a402:	bf0c      	ite	eq
 800a404:	2301      	moveq	r3, #1
 800a406:	2300      	movne	r3, #0
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	461a      	mov	r2, r3
 800a40c:	79fb      	ldrb	r3, [r7, #7]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d093      	beq.n	800a33a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a42a:	e071      	b.n	800a510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a43a:	d123      	bne.n	800a484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a44a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2220      	movs	r2, #32
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a470:	f043 0204 	orr.w	r2, r3, #4
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e067      	b.n	800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a48a:	d041      	beq.n	800a510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a48c:	f7fe f93e 	bl	800870c <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d302      	bcc.n	800a4a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d136      	bne.n	800a510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	0c1b      	lsrs	r3, r3, #16
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d10c      	bne.n	800a4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	43da      	mvns	r2, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bf14      	ite	ne
 800a4be:	2301      	movne	r3, #1
 800a4c0:	2300      	moveq	r3, #0
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	e00b      	b.n	800a4de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	43da      	mvns	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bf14      	ite	ne
 800a4d8:	2301      	movne	r3, #1
 800a4da:	2300      	moveq	r3, #0
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d016      	beq.n	800a510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fc:	f043 0220 	orr.w	r2, r3, #32
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e021      	b.n	800a554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	0c1b      	lsrs	r3, r3, #16
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b01      	cmp	r3, #1
 800a518:	d10c      	bne.n	800a534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	695b      	ldr	r3, [r3, #20]
 800a520:	43da      	mvns	r2, r3
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	4013      	ands	r3, r2
 800a526:	b29b      	uxth	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bf14      	ite	ne
 800a52c:	2301      	movne	r3, #1
 800a52e:	2300      	moveq	r3, #0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	e00b      	b.n	800a54c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	43da      	mvns	r2, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	4013      	ands	r3, r2
 800a540:	b29b      	uxth	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	bf14      	ite	ne
 800a546:	2301      	movne	r3, #1
 800a548:	2300      	moveq	r3, #0
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f47f af6d 	bne.w	800a42c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a568:	e034      	b.n	800a5d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f000 f8e3 	bl	800a736 <I2C_IsAcknowledgeFailed>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e034      	b.n	800a5e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a580:	d028      	beq.n	800a5d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a582:	f7fe f8c3 	bl	800870c <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d302      	bcc.n	800a598 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d11d      	bne.n	800a5d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a2:	2b80      	cmp	r3, #128	; 0x80
 800a5a4:	d016      	beq.n	800a5d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c0:	f043 0220 	orr.w	r2, r3, #32
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e007      	b.n	800a5e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5de:	2b80      	cmp	r3, #128	; 0x80
 800a5e0:	d1c3      	bne.n	800a56a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5f8:	e034      	b.n	800a664 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 f89b 	bl	800a736 <I2C_IsAcknowledgeFailed>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e034      	b.n	800a674 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a610:	d028      	beq.n	800a664 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a612:	f7fe f87b 	bl	800870c <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d302      	bcc.n	800a628 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d11d      	bne.n	800a664 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	f003 0304 	and.w	r3, r3, #4
 800a632:	2b04      	cmp	r3, #4
 800a634:	d016      	beq.n	800a664 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2220      	movs	r2, #32
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	f043 0220 	orr.w	r2, r3, #32
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e007      	b.n	800a674 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d1c3      	bne.n	800a5fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a688:	e049      	b.n	800a71e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	f003 0310 	and.w	r3, r3, #16
 800a694:	2b10      	cmp	r3, #16
 800a696:	d119      	bne.n	800a6cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f06f 0210 	mvn.w	r2, #16
 800a6a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e030      	b.n	800a72e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6cc:	f7fe f81e 	bl	800870c <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d302      	bcc.n	800a6e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d11d      	bne.n	800a71e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ec:	2b40      	cmp	r3, #64	; 0x40
 800a6ee:	d016      	beq.n	800a71e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	f043 0220 	orr.w	r2, r3, #32
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e007      	b.n	800a72e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a728:	2b40      	cmp	r3, #64	; 0x40
 800a72a:	d1ae      	bne.n	800a68a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a74c:	d11b      	bne.n	800a786 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a756:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2220      	movs	r2, #32
 800a762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a772:	f043 0204 	orr.w	r2, r3, #4
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e000      	b.n	800a788 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr
	...

0800a794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e272      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 8087 	beq.w	800a8c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a7b4:	4b92      	ldr	r3, [pc, #584]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	f003 030c 	and.w	r3, r3, #12
 800a7bc:	2b04      	cmp	r3, #4
 800a7be:	d00c      	beq.n	800a7da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a7c0:	4b8f      	ldr	r3, [pc, #572]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f003 030c 	and.w	r3, r3, #12
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d112      	bne.n	800a7f2 <HAL_RCC_OscConfig+0x5e>
 800a7cc:	4b8c      	ldr	r3, [pc, #560]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7d8:	d10b      	bne.n	800a7f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7da:	4b89      	ldr	r3, [pc, #548]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d06c      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x12c>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d168      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e24c      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7fa:	d106      	bne.n	800a80a <HAL_RCC_OscConfig+0x76>
 800a7fc:	4b80      	ldr	r3, [pc, #512]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a7f      	ldr	r2, [pc, #508]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	e02e      	b.n	800a868 <HAL_RCC_OscConfig+0xd4>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10c      	bne.n	800a82c <HAL_RCC_OscConfig+0x98>
 800a812:	4b7b      	ldr	r3, [pc, #492]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a7a      	ldr	r2, [pc, #488]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	4b78      	ldr	r3, [pc, #480]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a77      	ldr	r2, [pc, #476]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	e01d      	b.n	800a868 <HAL_RCC_OscConfig+0xd4>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a834:	d10c      	bne.n	800a850 <HAL_RCC_OscConfig+0xbc>
 800a836:	4b72      	ldr	r3, [pc, #456]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a71      	ldr	r2, [pc, #452]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a83c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	4b6f      	ldr	r3, [pc, #444]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a6e      	ldr	r2, [pc, #440]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	e00b      	b.n	800a868 <HAL_RCC_OscConfig+0xd4>
 800a850:	4b6b      	ldr	r3, [pc, #428]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a6a      	ldr	r2, [pc, #424]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	4b68      	ldr	r3, [pc, #416]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a67      	ldr	r2, [pc, #412]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d013      	beq.n	800a898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a870:	f7fd ff4c 	bl	800870c <HAL_GetTick>
 800a874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a876:	e008      	b.n	800a88a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a878:	f7fd ff48 	bl	800870c <HAL_GetTick>
 800a87c:	4602      	mov	r2, r0
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	2b64      	cmp	r3, #100	; 0x64
 800a884:	d901      	bls.n	800a88a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a886:	2303      	movs	r3, #3
 800a888:	e200      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a88a:	4b5d      	ldr	r3, [pc, #372]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0f0      	beq.n	800a878 <HAL_RCC_OscConfig+0xe4>
 800a896:	e014      	b.n	800a8c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a898:	f7fd ff38 	bl	800870c <HAL_GetTick>
 800a89c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a89e:	e008      	b.n	800a8b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8a0:	f7fd ff34 	bl	800870c <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	2b64      	cmp	r3, #100	; 0x64
 800a8ac:	d901      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e1ec      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8b2:	4b53      	ldr	r3, [pc, #332]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1f0      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x10c>
 800a8be:	e000      	b.n	800a8c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d063      	beq.n	800a996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a8ce:	4b4c      	ldr	r3, [pc, #304]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f003 030c 	and.w	r3, r3, #12
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00b      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a8da:	4b49      	ldr	r3, [pc, #292]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f003 030c 	and.w	r3, r3, #12
 800a8e2:	2b08      	cmp	r3, #8
 800a8e4:	d11c      	bne.n	800a920 <HAL_RCC_OscConfig+0x18c>
 800a8e6:	4b46      	ldr	r3, [pc, #280]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d116      	bne.n	800a920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8f2:	4b43      	ldr	r3, [pc, #268]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d005      	beq.n	800a90a <HAL_RCC_OscConfig+0x176>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d001      	beq.n	800a90a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e1c0      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a90a:	4b3d      	ldr	r3, [pc, #244]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	4939      	ldr	r1, [pc, #228]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a91a:	4313      	orrs	r3, r2
 800a91c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a91e:	e03a      	b.n	800a996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d020      	beq.n	800a96a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a928:	4b36      	ldr	r3, [pc, #216]	; (800aa04 <HAL_RCC_OscConfig+0x270>)
 800a92a:	2201      	movs	r2, #1
 800a92c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a92e:	f7fd feed 	bl	800870c <HAL_GetTick>
 800a932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a934:	e008      	b.n	800a948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a936:	f7fd fee9 	bl	800870c <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	2b02      	cmp	r3, #2
 800a942:	d901      	bls.n	800a948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e1a1      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a948:	4b2d      	ldr	r3, [pc, #180]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0f0      	beq.n	800a936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a954:	4b2a      	ldr	r3, [pc, #168]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	00db      	lsls	r3, r3, #3
 800a962:	4927      	ldr	r1, [pc, #156]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a964:	4313      	orrs	r3, r2
 800a966:	600b      	str	r3, [r1, #0]
 800a968:	e015      	b.n	800a996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a96a:	4b26      	ldr	r3, [pc, #152]	; (800aa04 <HAL_RCC_OscConfig+0x270>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a970:	f7fd fecc 	bl	800870c <HAL_GetTick>
 800a974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a976:	e008      	b.n	800a98a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a978:	f7fd fec8 	bl	800870c <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b02      	cmp	r3, #2
 800a984:	d901      	bls.n	800a98a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e180      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a98a:	4b1d      	ldr	r3, [pc, #116]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1f0      	bne.n	800a978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d03a      	beq.n	800aa18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d019      	beq.n	800a9de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9aa:	4b17      	ldr	r3, [pc, #92]	; (800aa08 <HAL_RCC_OscConfig+0x274>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9b0:	f7fd feac 	bl	800870c <HAL_GetTick>
 800a9b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9b8:	f7fd fea8 	bl	800870c <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e160      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	; (800aa00 <HAL_RCC_OscConfig+0x26c>)
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	f003 0302 	and.w	r3, r3, #2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0f0      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	f000 face 	bl	800af78 <RCC_Delay>
 800a9dc:	e01c      	b.n	800aa18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9de:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <HAL_RCC_OscConfig+0x274>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9e4:	f7fd fe92 	bl	800870c <HAL_GetTick>
 800a9e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9ea:	e00f      	b.n	800aa0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9ec:	f7fd fe8e 	bl	800870c <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d908      	bls.n	800aa0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e146      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
 800a9fe:	bf00      	nop
 800aa00:	40021000 	.word	0x40021000
 800aa04:	42420000 	.word	0x42420000
 800aa08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa0c:	4b92      	ldr	r3, [pc, #584]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	f003 0302 	and.w	r3, r3, #2
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e9      	bne.n	800a9ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0304 	and.w	r3, r3, #4
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 80a6 	beq.w	800ab72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa26:	2300      	movs	r3, #0
 800aa28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa2a:	4b8b      	ldr	r3, [pc, #556]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10d      	bne.n	800aa52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa36:	4b88      	ldr	r3, [pc, #544]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	4a87      	ldr	r2, [pc, #540]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aa3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa40:	61d3      	str	r3, [r2, #28]
 800aa42:	4b85      	ldr	r3, [pc, #532]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa4a:	60bb      	str	r3, [r7, #8]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa52:	4b82      	ldr	r3, [pc, #520]	; (800ac5c <HAL_RCC_OscConfig+0x4c8>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d118      	bne.n	800aa90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa5e:	4b7f      	ldr	r3, [pc, #508]	; (800ac5c <HAL_RCC_OscConfig+0x4c8>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a7e      	ldr	r2, [pc, #504]	; (800ac5c <HAL_RCC_OscConfig+0x4c8>)
 800aa64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa6a:	f7fd fe4f 	bl	800870c <HAL_GetTick>
 800aa6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa70:	e008      	b.n	800aa84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa72:	f7fd fe4b 	bl	800870c <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	2b64      	cmp	r3, #100	; 0x64
 800aa7e:	d901      	bls.n	800aa84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e103      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa84:	4b75      	ldr	r3, [pc, #468]	; (800ac5c <HAL_RCC_OscConfig+0x4c8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0f0      	beq.n	800aa72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d106      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x312>
 800aa98:	4b6f      	ldr	r3, [pc, #444]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	4a6e      	ldr	r2, [pc, #440]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aa9e:	f043 0301 	orr.w	r3, r3, #1
 800aaa2:	6213      	str	r3, [r2, #32]
 800aaa4:	e02d      	b.n	800ab02 <HAL_RCC_OscConfig+0x36e>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10c      	bne.n	800aac8 <HAL_RCC_OscConfig+0x334>
 800aaae:	4b6a      	ldr	r3, [pc, #424]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	4a69      	ldr	r2, [pc, #420]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	6213      	str	r3, [r2, #32]
 800aaba:	4b67      	ldr	r3, [pc, #412]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	4a66      	ldr	r2, [pc, #408]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aac0:	f023 0304 	bic.w	r3, r3, #4
 800aac4:	6213      	str	r3, [r2, #32]
 800aac6:	e01c      	b.n	800ab02 <HAL_RCC_OscConfig+0x36e>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	2b05      	cmp	r3, #5
 800aace:	d10c      	bne.n	800aaea <HAL_RCC_OscConfig+0x356>
 800aad0:	4b61      	ldr	r3, [pc, #388]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	4a60      	ldr	r2, [pc, #384]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aad6:	f043 0304 	orr.w	r3, r3, #4
 800aada:	6213      	str	r3, [r2, #32]
 800aadc:	4b5e      	ldr	r3, [pc, #376]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	4a5d      	ldr	r2, [pc, #372]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	6213      	str	r3, [r2, #32]
 800aae8:	e00b      	b.n	800ab02 <HAL_RCC_OscConfig+0x36e>
 800aaea:	4b5b      	ldr	r3, [pc, #364]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	4a5a      	ldr	r2, [pc, #360]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aaf0:	f023 0301 	bic.w	r3, r3, #1
 800aaf4:	6213      	str	r3, [r2, #32]
 800aaf6:	4b58      	ldr	r3, [pc, #352]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	4a57      	ldr	r2, [pc, #348]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800aafc:	f023 0304 	bic.w	r3, r3, #4
 800ab00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d015      	beq.n	800ab36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab0a:	f7fd fdff 	bl	800870c <HAL_GetTick>
 800ab0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab10:	e00a      	b.n	800ab28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab12:	f7fd fdfb 	bl	800870c <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d901      	bls.n	800ab28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e0b1      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab28:	4b4b      	ldr	r3, [pc, #300]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	f003 0302 	and.w	r3, r3, #2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0ee      	beq.n	800ab12 <HAL_RCC_OscConfig+0x37e>
 800ab34:	e014      	b.n	800ab60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab36:	f7fd fde9 	bl	800870c <HAL_GetTick>
 800ab3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab3c:	e00a      	b.n	800ab54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab3e:	f7fd fde5 	bl	800870c <HAL_GetTick>
 800ab42:	4602      	mov	r2, r0
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d901      	bls.n	800ab54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e09b      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab54:	4b40      	ldr	r3, [pc, #256]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1ee      	bne.n	800ab3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d105      	bne.n	800ab72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab66:	4b3c      	ldr	r3, [pc, #240]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	4a3b      	ldr	r2, [pc, #236]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800ab6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 8087 	beq.w	800ac8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab7c:	4b36      	ldr	r3, [pc, #216]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f003 030c 	and.w	r3, r3, #12
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d061      	beq.n	800ac4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d146      	bne.n	800ac1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab90:	4b33      	ldr	r3, [pc, #204]	; (800ac60 <HAL_RCC_OscConfig+0x4cc>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab96:	f7fd fdb9 	bl	800870c <HAL_GetTick>
 800ab9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab9c:	e008      	b.n	800abb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab9e:	f7fd fdb5 	bl	800870c <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d901      	bls.n	800abb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e06d      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abb0:	4b29      	ldr	r3, [pc, #164]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1f0      	bne.n	800ab9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc4:	d108      	bne.n	800abd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800abc6:	4b24      	ldr	r3, [pc, #144]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	4921      	ldr	r1, [pc, #132]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800abd4:	4313      	orrs	r3, r2
 800abd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abd8:	4b1f      	ldr	r3, [pc, #124]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a19      	ldr	r1, [r3, #32]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe8:	430b      	orrs	r3, r1
 800abea:	491b      	ldr	r1, [pc, #108]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800abec:	4313      	orrs	r3, r2
 800abee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800abf0:	4b1b      	ldr	r3, [pc, #108]	; (800ac60 <HAL_RCC_OscConfig+0x4cc>)
 800abf2:	2201      	movs	r2, #1
 800abf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abf6:	f7fd fd89 	bl	800870c <HAL_GetTick>
 800abfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800abfc:	e008      	b.n	800ac10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abfe:	f7fd fd85 	bl	800870c <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d901      	bls.n	800ac10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e03d      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac10:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d0f0      	beq.n	800abfe <HAL_RCC_OscConfig+0x46a>
 800ac1c:	e035      	b.n	800ac8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac1e:	4b10      	ldr	r3, [pc, #64]	; (800ac60 <HAL_RCC_OscConfig+0x4cc>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac24:	f7fd fd72 	bl	800870c <HAL_GetTick>
 800ac28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac2a:	e008      	b.n	800ac3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac2c:	f7fd fd6e 	bl	800870c <HAL_GetTick>
 800ac30:	4602      	mov	r2, r0
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d901      	bls.n	800ac3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	e026      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac3e:	4b06      	ldr	r3, [pc, #24]	; (800ac58 <HAL_RCC_OscConfig+0x4c4>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1f0      	bne.n	800ac2c <HAL_RCC_OscConfig+0x498>
 800ac4a:	e01e      	b.n	800ac8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d107      	bne.n	800ac64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e019      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
 800ac58:	40021000 	.word	0x40021000
 800ac5c:	40007000 	.word	0x40007000
 800ac60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ac64:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <HAL_RCC_OscConfig+0x500>)
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d106      	bne.n	800ac86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d001      	beq.n	800ac8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3718      	adds	r7, #24
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	40021000 	.word	0x40021000

0800ac98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e0d0      	b.n	800ae4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acac:	4b6a      	ldr	r3, [pc, #424]	; (800ae58 <HAL_RCC_ClockConfig+0x1c0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0307 	and.w	r3, r3, #7
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d910      	bls.n	800acdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acba:	4b67      	ldr	r3, [pc, #412]	; (800ae58 <HAL_RCC_ClockConfig+0x1c0>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f023 0207 	bic.w	r2, r3, #7
 800acc2:	4965      	ldr	r1, [pc, #404]	; (800ae58 <HAL_RCC_ClockConfig+0x1c0>)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acca:	4b63      	ldr	r3, [pc, #396]	; (800ae58 <HAL_RCC_ClockConfig+0x1c0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 0307 	and.w	r3, r3, #7
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d001      	beq.n	800acdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e0b8      	b.n	800ae4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 0302 	and.w	r3, r3, #2
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d020      	beq.n	800ad2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 0304 	and.w	r3, r3, #4
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800acf4:	4b59      	ldr	r3, [pc, #356]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	4a58      	ldr	r2, [pc, #352]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800acfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800acfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 0308 	and.w	r3, r3, #8
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d005      	beq.n	800ad18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad0c:	4b53      	ldr	r3, [pc, #332]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4a52      	ldr	r2, [pc, #328]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad18:	4b50      	ldr	r3, [pc, #320]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	494d      	ldr	r1, [pc, #308]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d040      	beq.n	800adb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d107      	bne.n	800ad4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad3e:	4b47      	ldr	r3, [pc, #284]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d115      	bne.n	800ad76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e07f      	b.n	800ae4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d107      	bne.n	800ad66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad56:	4b41      	ldr	r3, [pc, #260]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d109      	bne.n	800ad76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e073      	b.n	800ae4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad66:	4b3d      	ldr	r3, [pc, #244]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d101      	bne.n	800ad76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e06b      	b.n	800ae4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad76:	4b39      	ldr	r3, [pc, #228]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f023 0203 	bic.w	r2, r3, #3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	4936      	ldr	r1, [pc, #216]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ad84:	4313      	orrs	r3, r2
 800ad86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad88:	f7fd fcc0 	bl	800870c <HAL_GetTick>
 800ad8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad8e:	e00a      	b.n	800ada6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad90:	f7fd fcbc 	bl	800870c <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d901      	bls.n	800ada6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e053      	b.n	800ae4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ada6:	4b2d      	ldr	r3, [pc, #180]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f003 020c 	and.w	r2, r3, #12
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d1eb      	bne.n	800ad90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800adb8:	4b27      	ldr	r3, [pc, #156]	; (800ae58 <HAL_RCC_ClockConfig+0x1c0>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d210      	bcs.n	800ade8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adc6:	4b24      	ldr	r3, [pc, #144]	; (800ae58 <HAL_RCC_ClockConfig+0x1c0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f023 0207 	bic.w	r2, r3, #7
 800adce:	4922      	ldr	r1, [pc, #136]	; (800ae58 <HAL_RCC_ClockConfig+0x1c0>)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	4313      	orrs	r3, r2
 800add4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800add6:	4b20      	ldr	r3, [pc, #128]	; (800ae58 <HAL_RCC_ClockConfig+0x1c0>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0307 	and.w	r3, r3, #7
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d001      	beq.n	800ade8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e032      	b.n	800ae4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d008      	beq.n	800ae06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800adf4:	4b19      	ldr	r3, [pc, #100]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	4916      	ldr	r1, [pc, #88]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0308 	and.w	r3, r3, #8
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d009      	beq.n	800ae26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae12:	4b12      	ldr	r3, [pc, #72]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	490e      	ldr	r1, [pc, #56]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ae22:	4313      	orrs	r3, r2
 800ae24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae26:	f000 f821 	bl	800ae6c <HAL_RCC_GetSysClockFreq>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <HAL_RCC_ClockConfig+0x1c4>)
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	091b      	lsrs	r3, r3, #4
 800ae32:	f003 030f 	and.w	r3, r3, #15
 800ae36:	490a      	ldr	r1, [pc, #40]	; (800ae60 <HAL_RCC_ClockConfig+0x1c8>)
 800ae38:	5ccb      	ldrb	r3, [r1, r3]
 800ae3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3e:	4a09      	ldr	r2, [pc, #36]	; (800ae64 <HAL_RCC_ClockConfig+0x1cc>)
 800ae40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ae42:	4b09      	ldr	r3, [pc, #36]	; (800ae68 <HAL_RCC_ClockConfig+0x1d0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fd fc1e 	bl	8008688 <HAL_InitTick>

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	40022000 	.word	0x40022000
 800ae5c:	40021000 	.word	0x40021000
 800ae60:	0800dd14 	.word	0x0800dd14
 800ae64:	200000b4 	.word	0x200000b4
 800ae68:	200000b8 	.word	0x200000b8

0800ae6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	2300      	movs	r3, #0
 800ae78:	60bb      	str	r3, [r7, #8]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	617b      	str	r3, [r7, #20]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ae86:	4b1e      	ldr	r3, [pc, #120]	; (800af00 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f003 030c 	and.w	r3, r3, #12
 800ae92:	2b04      	cmp	r3, #4
 800ae94:	d002      	beq.n	800ae9c <HAL_RCC_GetSysClockFreq+0x30>
 800ae96:	2b08      	cmp	r3, #8
 800ae98:	d003      	beq.n	800aea2 <HAL_RCC_GetSysClockFreq+0x36>
 800ae9a:	e027      	b.n	800aeec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ae9c:	4b19      	ldr	r3, [pc, #100]	; (800af04 <HAL_RCC_GetSysClockFreq+0x98>)
 800ae9e:	613b      	str	r3, [r7, #16]
      break;
 800aea0:	e027      	b.n	800aef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	0c9b      	lsrs	r3, r3, #18
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	4a17      	ldr	r2, [pc, #92]	; (800af08 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aeac:	5cd3      	ldrb	r3, [r2, r3]
 800aeae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d010      	beq.n	800aedc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aeba:	4b11      	ldr	r3, [pc, #68]	; (800af00 <HAL_RCC_GetSysClockFreq+0x94>)
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	0c5b      	lsrs	r3, r3, #17
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	4a11      	ldr	r2, [pc, #68]	; (800af0c <HAL_RCC_GetSysClockFreq+0xa0>)
 800aec6:	5cd3      	ldrb	r3, [r2, r3]
 800aec8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a0d      	ldr	r2, [pc, #52]	; (800af04 <HAL_RCC_GetSysClockFreq+0x98>)
 800aece:	fb03 f202 	mul.w	r2, r3, r2
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	e004      	b.n	800aee6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a0c      	ldr	r2, [pc, #48]	; (800af10 <HAL_RCC_GetSysClockFreq+0xa4>)
 800aee0:	fb02 f303 	mul.w	r3, r2, r3
 800aee4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	613b      	str	r3, [r7, #16]
      break;
 800aeea:	e002      	b.n	800aef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <HAL_RCC_GetSysClockFreq+0x98>)
 800aeee:	613b      	str	r3, [r7, #16]
      break;
 800aef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aef2:	693b      	ldr	r3, [r7, #16]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	371c      	adds	r7, #28
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bc80      	pop	{r7}
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	40021000 	.word	0x40021000
 800af04:	007a1200 	.word	0x007a1200
 800af08:	0800dd2c 	.word	0x0800dd2c
 800af0c:	0800dd3c 	.word	0x0800dd3c
 800af10:	003d0900 	.word	0x003d0900

0800af14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af14:	b480      	push	{r7}
 800af16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af18:	4b02      	ldr	r3, [pc, #8]	; (800af24 <HAL_RCC_GetHCLKFreq+0x10>)
 800af1a:	681b      	ldr	r3, [r3, #0]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	46bd      	mov	sp, r7
 800af20:	bc80      	pop	{r7}
 800af22:	4770      	bx	lr
 800af24:	200000b4 	.word	0x200000b4

0800af28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af2c:	f7ff fff2 	bl	800af14 <HAL_RCC_GetHCLKFreq>
 800af30:	4602      	mov	r2, r0
 800af32:	4b05      	ldr	r3, [pc, #20]	; (800af48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	0a1b      	lsrs	r3, r3, #8
 800af38:	f003 0307 	and.w	r3, r3, #7
 800af3c:	4903      	ldr	r1, [pc, #12]	; (800af4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800af3e:	5ccb      	ldrb	r3, [r1, r3]
 800af40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af44:	4618      	mov	r0, r3
 800af46:	bd80      	pop	{r7, pc}
 800af48:	40021000 	.word	0x40021000
 800af4c:	0800dd24 	.word	0x0800dd24

0800af50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af54:	f7ff ffde 	bl	800af14 <HAL_RCC_GetHCLKFreq>
 800af58:	4602      	mov	r2, r0
 800af5a:	4b05      	ldr	r3, [pc, #20]	; (800af70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	0adb      	lsrs	r3, r3, #11
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	4903      	ldr	r1, [pc, #12]	; (800af74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af66:	5ccb      	ldrb	r3, [r1, r3]
 800af68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	40021000 	.word	0x40021000
 800af74:	0800dd24 	.word	0x0800dd24

0800af78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800af80:	4b0a      	ldr	r3, [pc, #40]	; (800afac <RCC_Delay+0x34>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a0a      	ldr	r2, [pc, #40]	; (800afb0 <RCC_Delay+0x38>)
 800af86:	fba2 2303 	umull	r2, r3, r2, r3
 800af8a:	0a5b      	lsrs	r3, r3, #9
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	fb02 f303 	mul.w	r3, r2, r3
 800af92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800af94:	bf00      	nop
  }
  while (Delay --);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	1e5a      	subs	r2, r3, #1
 800af9a:	60fa      	str	r2, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1f9      	bne.n	800af94 <RCC_Delay+0x1c>
}
 800afa0:	bf00      	nop
 800afa2:	bf00      	nop
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bc80      	pop	{r7}
 800afaa:	4770      	bx	lr
 800afac:	200000b4 	.word	0x200000b4
 800afb0:	10624dd3 	.word	0x10624dd3

0800afb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e041      	b.n	800b04a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d106      	bne.n	800afe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7fd fa26 	bl	800842c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	3304      	adds	r3, #4
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f000 fa82 	bl	800b4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b01      	cmp	r3, #1
 800b066:	d001      	beq.n	800b06c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e044      	b.n	800b0f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2202      	movs	r2, #2
 800b070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f042 0201 	orr.w	r2, r2, #1
 800b082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a1d      	ldr	r2, [pc, #116]	; (800b100 <HAL_TIM_Base_Start_IT+0xac>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d018      	beq.n	800b0c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a1c      	ldr	r2, [pc, #112]	; (800b104 <HAL_TIM_Base_Start_IT+0xb0>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d013      	beq.n	800b0c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0a0:	d00e      	beq.n	800b0c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a18      	ldr	r2, [pc, #96]	; (800b108 <HAL_TIM_Base_Start_IT+0xb4>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d009      	beq.n	800b0c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a16      	ldr	r2, [pc, #88]	; (800b10c <HAL_TIM_Base_Start_IT+0xb8>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d004      	beq.n	800b0c0 <HAL_TIM_Base_Start_IT+0x6c>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a15      	ldr	r2, [pc, #84]	; (800b110 <HAL_TIM_Base_Start_IT+0xbc>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d111      	bne.n	800b0e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f003 0307 	and.w	r3, r3, #7
 800b0ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b06      	cmp	r3, #6
 800b0d0:	d010      	beq.n	800b0f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f042 0201 	orr.w	r2, r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e2:	e007      	b.n	800b0f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f042 0201 	orr.w	r2, r2, #1
 800b0f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bc80      	pop	{r7}
 800b0fe:	4770      	bx	lr
 800b100:	40012c00 	.word	0x40012c00
 800b104:	40013400 	.word	0x40013400
 800b108:	40000400 	.word	0x40000400
 800b10c:	40000800 	.word	0x40000800
 800b110:	40000c00 	.word	0x40000c00

0800b114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b02      	cmp	r3, #2
 800b128:	d122      	bne.n	800b170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	f003 0302 	and.w	r3, r3, #2
 800b134:	2b02      	cmp	r3, #2
 800b136:	d11b      	bne.n	800b170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f06f 0202 	mvn.w	r2, #2
 800b140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	f003 0303 	and.w	r3, r3, #3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f9b4 	bl	800b4c4 <HAL_TIM_IC_CaptureCallback>
 800b15c:	e005      	b.n	800b16a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f9a7 	bl	800b4b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f9b6 	bl	800b4d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	f003 0304 	and.w	r3, r3, #4
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	d122      	bne.n	800b1c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d11b      	bne.n	800b1c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f06f 0204 	mvn.w	r2, #4
 800b194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2202      	movs	r2, #2
 800b19a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f98a 	bl	800b4c4 <HAL_TIM_IC_CaptureCallback>
 800b1b0:	e005      	b.n	800b1be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f97d 	bl	800b4b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f98c 	bl	800b4d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	f003 0308 	and.w	r3, r3, #8
 800b1ce:	2b08      	cmp	r3, #8
 800b1d0:	d122      	bne.n	800b218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f003 0308 	and.w	r3, r3, #8
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	d11b      	bne.n	800b218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f06f 0208 	mvn.w	r2, #8
 800b1e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2204      	movs	r2, #4
 800b1ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	69db      	ldr	r3, [r3, #28]
 800b1f6:	f003 0303 	and.w	r3, r3, #3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f960 	bl	800b4c4 <HAL_TIM_IC_CaptureCallback>
 800b204:	e005      	b.n	800b212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f953 	bl	800b4b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f962 	bl	800b4d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	f003 0310 	and.w	r3, r3, #16
 800b222:	2b10      	cmp	r3, #16
 800b224:	d122      	bne.n	800b26c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f003 0310 	and.w	r3, r3, #16
 800b230:	2b10      	cmp	r3, #16
 800b232:	d11b      	bne.n	800b26c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f06f 0210 	mvn.w	r2, #16
 800b23c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2208      	movs	r2, #8
 800b242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f936 	bl	800b4c4 <HAL_TIM_IC_CaptureCallback>
 800b258:	e005      	b.n	800b266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f929 	bl	800b4b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f938 	bl	800b4d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	2b01      	cmp	r3, #1
 800b278:	d10e      	bne.n	800b298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b01      	cmp	r3, #1
 800b286:	d107      	bne.n	800b298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f06f 0201 	mvn.w	r2, #1
 800b290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7fc fd62 	bl	8007d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a2:	2b80      	cmp	r3, #128	; 0x80
 800b2a4:	d10e      	bne.n	800b2c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b0:	2b80      	cmp	r3, #128	; 0x80
 800b2b2:	d107      	bne.n	800b2c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 faa1 	bl	800b806 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ce:	2b40      	cmp	r3, #64	; 0x40
 800b2d0:	d10e      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2dc:	2b40      	cmp	r3, #64	; 0x40
 800b2de:	d107      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f8fc 	bl	800b4e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	f003 0320 	and.w	r3, r3, #32
 800b2fa:	2b20      	cmp	r3, #32
 800b2fc:	d10e      	bne.n	800b31c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f003 0320 	and.w	r3, r3, #32
 800b308:	2b20      	cmp	r3, #32
 800b30a:	d107      	bne.n	800b31c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f06f 0220 	mvn.w	r2, #32
 800b314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fa6c 	bl	800b7f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d101      	bne.n	800b340 <HAL_TIM_ConfigClockSource+0x1c>
 800b33c:	2302      	movs	r3, #2
 800b33e:	e0b4      	b.n	800b4aa <HAL_TIM_ConfigClockSource+0x186>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b35e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b378:	d03e      	beq.n	800b3f8 <HAL_TIM_ConfigClockSource+0xd4>
 800b37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b37e:	f200 8087 	bhi.w	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b386:	f000 8086 	beq.w	800b496 <HAL_TIM_ConfigClockSource+0x172>
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b38e:	d87f      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b390:	2b70      	cmp	r3, #112	; 0x70
 800b392:	d01a      	beq.n	800b3ca <HAL_TIM_ConfigClockSource+0xa6>
 800b394:	2b70      	cmp	r3, #112	; 0x70
 800b396:	d87b      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b398:	2b60      	cmp	r3, #96	; 0x60
 800b39a:	d050      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x11a>
 800b39c:	2b60      	cmp	r3, #96	; 0x60
 800b39e:	d877      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3a0:	2b50      	cmp	r3, #80	; 0x50
 800b3a2:	d03c      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0xfa>
 800b3a4:	2b50      	cmp	r3, #80	; 0x50
 800b3a6:	d873      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3a8:	2b40      	cmp	r3, #64	; 0x40
 800b3aa:	d058      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0x13a>
 800b3ac:	2b40      	cmp	r3, #64	; 0x40
 800b3ae:	d86f      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b0:	2b30      	cmp	r3, #48	; 0x30
 800b3b2:	d064      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15a>
 800b3b4:	2b30      	cmp	r3, #48	; 0x30
 800b3b6:	d86b      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b8:	2b20      	cmp	r3, #32
 800b3ba:	d060      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15a>
 800b3bc:	2b20      	cmp	r3, #32
 800b3be:	d867      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d05c      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15a>
 800b3c4:	2b10      	cmp	r3, #16
 800b3c6:	d05a      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15a>
 800b3c8:	e062      	b.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3da:	f000 f980 	bl	800b6de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b3ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	609a      	str	r2, [r3, #8]
      break;
 800b3f6:	e04f      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b408:	f000 f969 	bl	800b6de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b41a:	609a      	str	r2, [r3, #8]
      break;
 800b41c:	e03c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b42a:	461a      	mov	r2, r3
 800b42c:	f000 f8e0 	bl	800b5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2150      	movs	r1, #80	; 0x50
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f937 	bl	800b6aa <TIM_ITRx_SetConfig>
      break;
 800b43c:	e02c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b44a:	461a      	mov	r2, r3
 800b44c:	f000 f8fe 	bl	800b64c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2160      	movs	r1, #96	; 0x60
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f927 	bl	800b6aa <TIM_ITRx_SetConfig>
      break;
 800b45c:	e01c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b46a:	461a      	mov	r2, r3
 800b46c:	f000 f8c0 	bl	800b5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2140      	movs	r1, #64	; 0x40
 800b476:	4618      	mov	r0, r3
 800b478:	f000 f917 	bl	800b6aa <TIM_ITRx_SetConfig>
      break;
 800b47c:	e00c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4619      	mov	r1, r3
 800b488:	4610      	mov	r0, r2
 800b48a:	f000 f90e 	bl	800b6aa <TIM_ITRx_SetConfig>
      break;
 800b48e:	e003      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]
      break;
 800b494:	e000      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4ba:	bf00      	nop
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bc80      	pop	{r7}
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr

0800b4d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b083      	sub	sp, #12
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4de:	bf00      	nop
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bc80      	pop	{r7}
 800b4e6:	4770      	bx	lr

0800b4e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bc80      	pop	{r7}
 800b4f8:	4770      	bx	lr
	...

0800b4fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4a33      	ldr	r2, [pc, #204]	; (800b5dc <TIM_Base_SetConfig+0xe0>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d013      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a32      	ldr	r2, [pc, #200]	; (800b5e0 <TIM_Base_SetConfig+0xe4>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d00f      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b522:	d00b      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a2f      	ldr	r2, [pc, #188]	; (800b5e4 <TIM_Base_SetConfig+0xe8>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d007      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a2e      	ldr	r2, [pc, #184]	; (800b5e8 <TIM_Base_SetConfig+0xec>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d003      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a2d      	ldr	r2, [pc, #180]	; (800b5ec <TIM_Base_SetConfig+0xf0>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d108      	bne.n	800b54e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a22      	ldr	r2, [pc, #136]	; (800b5dc <TIM_Base_SetConfig+0xe0>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d013      	beq.n	800b57e <TIM_Base_SetConfig+0x82>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a21      	ldr	r2, [pc, #132]	; (800b5e0 <TIM_Base_SetConfig+0xe4>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d00f      	beq.n	800b57e <TIM_Base_SetConfig+0x82>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b564:	d00b      	beq.n	800b57e <TIM_Base_SetConfig+0x82>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a1e      	ldr	r2, [pc, #120]	; (800b5e4 <TIM_Base_SetConfig+0xe8>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d007      	beq.n	800b57e <TIM_Base_SetConfig+0x82>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a1d      	ldr	r2, [pc, #116]	; (800b5e8 <TIM_Base_SetConfig+0xec>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d003      	beq.n	800b57e <TIM_Base_SetConfig+0x82>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4a1c      	ldr	r2, [pc, #112]	; (800b5ec <TIM_Base_SetConfig+0xf0>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d108      	bne.n	800b590 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	689a      	ldr	r2, [r3, #8]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a09      	ldr	r2, [pc, #36]	; (800b5dc <TIM_Base_SetConfig+0xe0>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d003      	beq.n	800b5c4 <TIM_Base_SetConfig+0xc8>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a08      	ldr	r2, [pc, #32]	; (800b5e0 <TIM_Base_SetConfig+0xe4>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d103      	bne.n	800b5cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	691a      	ldr	r2, [r3, #16]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	615a      	str	r2, [r3, #20]
}
 800b5d2:	bf00      	nop
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bc80      	pop	{r7}
 800b5da:	4770      	bx	lr
 800b5dc:	40012c00 	.word	0x40012c00
 800b5e0:	40013400 	.word	0x40013400
 800b5e4:	40000400 	.word	0x40000400
 800b5e8:	40000800 	.word	0x40000800
 800b5ec:	40000c00 	.word	0x40000c00

0800b5f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6a1b      	ldr	r3, [r3, #32]
 800b600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	f023 0201 	bic.w	r2, r3, #1
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b61a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	4313      	orrs	r3, r2
 800b624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f023 030a 	bic.w	r3, r3, #10
 800b62c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	4313      	orrs	r3, r2
 800b634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	693a      	ldr	r2, [r7, #16]
 800b63a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	621a      	str	r2, [r3, #32]
}
 800b642:	bf00      	nop
 800b644:	371c      	adds	r7, #28
 800b646:	46bd      	mov	sp, r7
 800b648:	bc80      	pop	{r7}
 800b64a:	4770      	bx	lr

0800b64c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	f023 0210 	bic.w	r2, r3, #16
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	031b      	lsls	r3, r3, #12
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	4313      	orrs	r3, r2
 800b680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b688:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	011b      	lsls	r3, r3, #4
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	4313      	orrs	r3, r2
 800b692:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	621a      	str	r2, [r3, #32]
}
 800b6a0:	bf00      	nop
 800b6a2:	371c      	adds	r7, #28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bc80      	pop	{r7}
 800b6a8:	4770      	bx	lr

0800b6aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b085      	sub	sp, #20
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	f043 0307 	orr.w	r3, r3, #7
 800b6cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	609a      	str	r2, [r3, #8]
}
 800b6d4:	bf00      	nop
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bc80      	pop	{r7}
 800b6dc:	4770      	bx	lr

0800b6de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b087      	sub	sp, #28
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	607a      	str	r2, [r7, #4]
 800b6ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	021a      	lsls	r2, r3, #8
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	431a      	orrs	r2, r3
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	4313      	orrs	r3, r2
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4313      	orrs	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	609a      	str	r2, [r3, #8]
}
 800b712:	bf00      	nop
 800b714:	371c      	adds	r7, #28
 800b716:	46bd      	mov	sp, r7
 800b718:	bc80      	pop	{r7}
 800b71a:	4770      	bx	lr

0800b71c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d101      	bne.n	800b734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b730:	2302      	movs	r3, #2
 800b732:	e050      	b.n	800b7d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2202      	movs	r2, #2
 800b740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b75a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	4313      	orrs	r3, r2
 800b764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a1b      	ldr	r2, [pc, #108]	; (800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d018      	beq.n	800b7aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a19      	ldr	r2, [pc, #100]	; (800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d013      	beq.n	800b7aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b78a:	d00e      	beq.n	800b7aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d009      	beq.n	800b7aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a14      	ldr	r2, [pc, #80]	; (800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d004      	beq.n	800b7aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a12      	ldr	r2, [pc, #72]	; (800b7f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d10c      	bne.n	800b7c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3714      	adds	r7, #20
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bc80      	pop	{r7}
 800b7de:	4770      	bx	lr
 800b7e0:	40012c00 	.word	0x40012c00
 800b7e4:	40013400 	.word	0x40013400
 800b7e8:	40000400 	.word	0x40000400
 800b7ec:	40000800 	.word	0x40000800
 800b7f0:	40000c00 	.word	0x40000c00

0800b7f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	bc80      	pop	{r7}
 800b804:	4770      	bx	lr

0800b806 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	bc80      	pop	{r7}
 800b816:	4770      	bx	lr

0800b818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e042      	b.n	800b8b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7fc fe1a 	bl	8008478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2224      	movs	r2, #36	; 0x24
 800b848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b85a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fcb5 	bl	800c1cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	691a      	ldr	r2, [r3, #16]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	695a      	ldr	r2, [r3, #20]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68da      	ldr	r2, [r3, #12]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2220      	movs	r2, #32
 800b89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b20      	cmp	r3, #32
 800b8d0:	d121      	bne.n	800b916 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <HAL_UART_Transmit_IT+0x26>
 800b8d8:	88fb      	ldrh	r3, [r7, #6]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e01a      	b.n	800b918 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	88fa      	ldrh	r2, [r7, #6]
 800b8ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	88fa      	ldrh	r2, [r7, #6]
 800b8f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2221      	movs	r2, #33	; 0x21
 800b8fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68da      	ldr	r2, [r3, #12]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b910:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	e000      	b.n	800b918 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b916:	2302      	movs	r3, #2
  }
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bc80      	pop	{r7}
 800b920:	4770      	bx	lr
	...

0800b924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b0ba      	sub	sp, #232	; 0xe8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b950:	2300      	movs	r3, #0
 800b952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b95a:	f003 030f 	and.w	r3, r3, #15
 800b95e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10f      	bne.n	800b98a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b96a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b96e:	f003 0320 	and.w	r3, r3, #32
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <HAL_UART_IRQHandler+0x66>
 800b976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b97a:	f003 0320 	and.w	r3, r3, #32
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fb63 	bl	800c04e <UART_Receive_IT>
      return;
 800b988:	e25b      	b.n	800be42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b98a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 80de 	beq.w	800bb50 <HAL_UART_IRQHandler+0x22c>
 800b994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d106      	bne.n	800b9ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 80d1 	beq.w	800bb50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00b      	beq.n	800b9d2 <HAL_UART_IRQHandler+0xae>
 800b9ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d005      	beq.n	800b9d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ca:	f043 0201 	orr.w	r2, r3, #1
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d6:	f003 0304 	and.w	r3, r3, #4
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00b      	beq.n	800b9f6 <HAL_UART_IRQHandler+0xd2>
 800b9de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d005      	beq.n	800b9f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ee:	f043 0202 	orr.w	r2, r3, #2
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00b      	beq.n	800ba1a <HAL_UART_IRQHandler+0xf6>
 800ba02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d005      	beq.n	800ba1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba12:	f043 0204 	orr.w	r2, r3, #4
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba1e:	f003 0308 	and.w	r3, r3, #8
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d011      	beq.n	800ba4a <HAL_UART_IRQHandler+0x126>
 800ba26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba2a:	f003 0320 	and.w	r3, r3, #32
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d105      	bne.n	800ba3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d005      	beq.n	800ba4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba42:	f043 0208 	orr.w	r2, r3, #8
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f000 81f2 	beq.w	800be38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba58:	f003 0320 	and.w	r3, r3, #32
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d008      	beq.n	800ba72 <HAL_UART_IRQHandler+0x14e>
 800ba60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba64:	f003 0320 	and.w	r3, r3, #32
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 faee 	bl	800c04e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	695b      	ldr	r3, [r3, #20]
 800ba78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bf14      	ite	ne
 800ba80:	2301      	movne	r3, #1
 800ba82:	2300      	moveq	r3, #0
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8e:	f003 0308 	and.w	r3, r3, #8
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d103      	bne.n	800ba9e <HAL_UART_IRQHandler+0x17a>
 800ba96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d04f      	beq.n	800bb3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f9f8 	bl	800be94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d041      	beq.n	800bb36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3314      	adds	r3, #20
 800bab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bac0:	e853 3f00 	ldrex	r3, [r3]
 800bac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bacc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3314      	adds	r3, #20
 800bada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800baea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800baf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1d9      	bne.n	800bab2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d013      	beq.n	800bb2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb0a:	4a7e      	ldr	r2, [pc, #504]	; (800bd04 <HAL_UART_IRQHandler+0x3e0>)
 800bb0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fd f86c 	bl	8008bf0 <HAL_DMA_Abort_IT>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d016      	beq.n	800bb4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb28:	4610      	mov	r0, r2
 800bb2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb2c:	e00e      	b.n	800bb4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f99c 	bl	800be6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb34:	e00a      	b.n	800bb4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f998 	bl	800be6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb3c:	e006      	b.n	800bb4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f994 	bl	800be6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bb4a:	e175      	b.n	800be38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb4c:	bf00      	nop
    return;
 800bb4e:	e173      	b.n	800be38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	f040 814f 	bne.w	800bdf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bb5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb5e:	f003 0310 	and.w	r3, r3, #16
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 8148 	beq.w	800bdf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb6c:	f003 0310 	and.w	r3, r3, #16
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 8141 	beq.w	800bdf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb76:	2300      	movs	r3, #0
 800bb78:	60bb      	str	r3, [r7, #8]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	60bb      	str	r3, [r7, #8]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	60bb      	str	r3, [r7, #8]
 800bb8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 80b6 	beq.w	800bd08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 8145 	beq.w	800be3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	f080 813e 	bcs.w	800be3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	2b20      	cmp	r3, #32
 800bbd0:	f000 8088 	beq.w	800bce4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	330c      	adds	r3, #12
 800bbda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bbe2:	e853 3f00 	ldrex	r3, [r3]
 800bbe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bbea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	330c      	adds	r3, #12
 800bbfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc10:	e841 2300 	strex	r3, r2, [r1]
 800bc14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1d9      	bne.n	800bbd4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3314      	adds	r3, #20
 800bc26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc2a:	e853 3f00 	ldrex	r3, [r3]
 800bc2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc32:	f023 0301 	bic.w	r3, r3, #1
 800bc36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3314      	adds	r3, #20
 800bc40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc50:	e841 2300 	strex	r3, r2, [r1]
 800bc54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1e1      	bne.n	800bc20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	3314      	adds	r3, #20
 800bc62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc66:	e853 3f00 	ldrex	r3, [r3]
 800bc6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3314      	adds	r3, #20
 800bc7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc80:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc88:	e841 2300 	strex	r3, r2, [r1]
 800bc8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e3      	bne.n	800bc5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2220      	movs	r2, #32
 800bc98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	330c      	adds	r3, #12
 800bca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcac:	e853 3f00 	ldrex	r3, [r3]
 800bcb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcb4:	f023 0310 	bic.w	r3, r3, #16
 800bcb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	330c      	adds	r3, #12
 800bcc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bcc6:	65ba      	str	r2, [r7, #88]	; 0x58
 800bcc8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcce:	e841 2300 	strex	r3, r2, [r1]
 800bcd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bcd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1e3      	bne.n	800bca2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fc ff4b 	bl	8008b7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2202      	movs	r2, #2
 800bce8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	1ad3      	subs	r3, r2, r3
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f8bf 	bl	800be7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd00:	e09c      	b.n	800be3c <HAL_UART_IRQHandler+0x518>
 800bd02:	bf00      	nop
 800bd04:	0800bf59 	.word	0x0800bf59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 808e 	beq.w	800be40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f000 8089 	beq.w	800be40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	330c      	adds	r3, #12
 800bd34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd38:	e853 3f00 	ldrex	r3, [r3]
 800bd3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	330c      	adds	r3, #12
 800bd4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd52:	647a      	str	r2, [r7, #68]	; 0x44
 800bd54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd5a:	e841 2300 	strex	r3, r2, [r1]
 800bd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1e3      	bne.n	800bd2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3314      	adds	r3, #20
 800bd6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	e853 3f00 	ldrex	r3, [r3]
 800bd74:	623b      	str	r3, [r7, #32]
   return(result);
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	f023 0301 	bic.w	r3, r3, #1
 800bd7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3314      	adds	r3, #20
 800bd86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bd8a:	633a      	str	r2, [r7, #48]	; 0x30
 800bd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd92:	e841 2300 	strex	r3, r2, [r1]
 800bd96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1e3      	bne.n	800bd66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2220      	movs	r2, #32
 800bda2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	330c      	adds	r3, #12
 800bdb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	e853 3f00 	ldrex	r3, [r3]
 800bdba:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 0310 	bic.w	r3, r3, #16
 800bdc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	330c      	adds	r3, #12
 800bdcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bdd0:	61fa      	str	r2, [r7, #28]
 800bdd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	69b9      	ldr	r1, [r7, #24]
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	617b      	str	r3, [r7, #20]
   return(result);
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e3      	bne.n	800bdac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2202      	movs	r2, #2
 800bde8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bdea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 f844 	bl	800be7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bdf6:	e023      	b.n	800be40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bdf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be00:	2b00      	cmp	r3, #0
 800be02:	d009      	beq.n	800be18 <HAL_UART_IRQHandler+0x4f4>
 800be04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f8b5 	bl	800bf80 <UART_Transmit_IT>
    return;
 800be16:	e014      	b.n	800be42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00e      	beq.n	800be42 <HAL_UART_IRQHandler+0x51e>
 800be24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d008      	beq.n	800be42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f8f4 	bl	800c01e <UART_EndTransmit_IT>
    return;
 800be36:	e004      	b.n	800be42 <HAL_UART_IRQHandler+0x51e>
    return;
 800be38:	bf00      	nop
 800be3a:	e002      	b.n	800be42 <HAL_UART_IRQHandler+0x51e>
      return;
 800be3c:	bf00      	nop
 800be3e:	e000      	b.n	800be42 <HAL_UART_IRQHandler+0x51e>
      return;
 800be40:	bf00      	nop
  }
}
 800be42:	37e8      	adds	r7, #232	; 0xe8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	bc80      	pop	{r7}
 800be58:	4770      	bx	lr

0800be5a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be62:	bf00      	nop
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	bc80      	pop	{r7}
 800be6a:	4770      	bx	lr

0800be6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	bc80      	pop	{r7}
 800be7c:	4770      	bx	lr

0800be7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	460b      	mov	r3, r1
 800be88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be8a:	bf00      	nop
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	bc80      	pop	{r7}
 800be92:	4770      	bx	lr

0800be94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be94:	b480      	push	{r7}
 800be96:	b095      	sub	sp, #84	; 0x54
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	330c      	adds	r3, #12
 800bea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea6:	e853 3f00 	ldrex	r3, [r3]
 800beaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	330c      	adds	r3, #12
 800beba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bebc:	643a      	str	r2, [r7, #64]	; 0x40
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bec4:	e841 2300 	strex	r3, r2, [r1]
 800bec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1e5      	bne.n	800be9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3314      	adds	r3, #20
 800bed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	e853 3f00 	ldrex	r3, [r3]
 800bede:	61fb      	str	r3, [r7, #28]
   return(result);
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	f023 0301 	bic.w	r3, r3, #1
 800bee6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3314      	adds	r3, #20
 800beee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bef8:	e841 2300 	strex	r3, r2, [r1]
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1e5      	bne.n	800bed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d119      	bne.n	800bf40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	330c      	adds	r3, #12
 800bf12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f023 0310 	bic.w	r3, r3, #16
 800bf22:	647b      	str	r3, [r7, #68]	; 0x44
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	330c      	adds	r3, #12
 800bf2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf2c:	61ba      	str	r2, [r7, #24]
 800bf2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	6979      	ldr	r1, [r7, #20]
 800bf32:	69ba      	ldr	r2, [r7, #24]
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	613b      	str	r3, [r7, #16]
   return(result);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e5      	bne.n	800bf0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2220      	movs	r2, #32
 800bf44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf4e:	bf00      	nop
 800bf50:	3754      	adds	r7, #84	; 0x54
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bc80      	pop	{r7}
 800bf56:	4770      	bx	lr

0800bf58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f7ff ff7a 	bl	800be6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf78:	bf00      	nop
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b21      	cmp	r3, #33	; 0x21
 800bf92:	d13e      	bne.n	800c012 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf9c:	d114      	bne.n	800bfc8 <UART_Transmit_IT+0x48>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d110      	bne.n	800bfc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a1b      	ldr	r3, [r3, #32]
 800bfaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	1c9a      	adds	r2, r3, #2
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	621a      	str	r2, [r3, #32]
 800bfc6:	e008      	b.n	800bfda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	1c59      	adds	r1, r3, #1
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	6211      	str	r1, [r2, #32]
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10f      	bne.n	800c00e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68da      	ldr	r2, [r3, #12]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bffc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68da      	ldr	r2, [r3, #12]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c00c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c00e:	2300      	movs	r3, #0
 800c010:	e000      	b.n	800c014 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c012:	2302      	movs	r3, #2
  }
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	bc80      	pop	{r7}
 800c01c:	4770      	bx	lr

0800c01e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68da      	ldr	r2, [r3, #12]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c034:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2220      	movs	r2, #32
 800c03a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff ff02 	bl	800be48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b08c      	sub	sp, #48	; 0x30
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b22      	cmp	r3, #34	; 0x22
 800c060:	f040 80ae 	bne.w	800c1c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c06c:	d117      	bne.n	800c09e <UART_Receive_IT+0x50>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d113      	bne.n	800c09e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c076:	2300      	movs	r3, #0
 800c078:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c07e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	b29b      	uxth	r3, r3
 800c088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c096:	1c9a      	adds	r2, r3, #2
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	629a      	str	r2, [r3, #40]	; 0x28
 800c09c:	e026      	b.n	800c0ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b0:	d007      	beq.n	800c0c2 <UART_Receive_IT+0x74>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10a      	bne.n	800c0d0 <UART_Receive_IT+0x82>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d106      	bne.n	800c0d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0cc:	701a      	strb	r2, [r3, #0]
 800c0ce:	e008      	b.n	800c0e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d15d      	bne.n	800c1bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68da      	ldr	r2, [r3, #12]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f022 0220 	bic.w	r2, r2, #32
 800c10e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68da      	ldr	r2, [r3, #12]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c11e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	695a      	ldr	r2, [r3, #20]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f022 0201 	bic.w	r2, r2, #1
 800c12e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2220      	movs	r2, #32
 800c134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c142:	2b01      	cmp	r3, #1
 800c144:	d135      	bne.n	800c1b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	330c      	adds	r3, #12
 800c152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	e853 3f00 	ldrex	r3, [r3]
 800c15a:	613b      	str	r3, [r7, #16]
   return(result);
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	f023 0310 	bic.w	r3, r3, #16
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	330c      	adds	r3, #12
 800c16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c16c:	623a      	str	r2, [r7, #32]
 800c16e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c170:	69f9      	ldr	r1, [r7, #28]
 800c172:	6a3a      	ldr	r2, [r7, #32]
 800c174:	e841 2300 	strex	r3, r2, [r1]
 800c178:	61bb      	str	r3, [r7, #24]
   return(result);
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1e5      	bne.n	800c14c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 0310 	and.w	r3, r3, #16
 800c18a:	2b10      	cmp	r3, #16
 800c18c:	d10a      	bne.n	800c1a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c18e:	2300      	movs	r3, #0
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	60fb      	str	r3, [r7, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff fe67 	bl	800be7e <HAL_UARTEx_RxEventCallback>
 800c1b0:	e002      	b.n	800c1b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7ff fe51 	bl	800be5a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e002      	b.n	800c1c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e000      	b.n	800c1c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c1c0:	2302      	movs	r3, #2
  }
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3730      	adds	r7, #48	; 0x30
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68da      	ldr	r2, [r3, #12]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	430a      	orrs	r2, r1
 800c1e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	431a      	orrs	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c206:	f023 030c 	bic.w	r3, r3, #12
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	6812      	ldr	r2, [r2, #0]
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	430b      	orrs	r3, r1
 800c212:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699a      	ldr	r2, [r3, #24]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	430a      	orrs	r2, r1
 800c228:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a2c      	ldr	r2, [pc, #176]	; (800c2e0 <UART_SetConfig+0x114>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d103      	bne.n	800c23c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c234:	f7fe fe8c 	bl	800af50 <HAL_RCC_GetPCLK2Freq>
 800c238:	60f8      	str	r0, [r7, #12]
 800c23a:	e002      	b.n	800c242 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c23c:	f7fe fe74 	bl	800af28 <HAL_RCC_GetPCLK1Freq>
 800c240:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009a      	lsls	r2, r3, #2
 800c24c:	441a      	add	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	fbb2 f3f3 	udiv	r3, r2, r3
 800c258:	4a22      	ldr	r2, [pc, #136]	; (800c2e4 <UART_SetConfig+0x118>)
 800c25a:	fba2 2303 	umull	r2, r3, r2, r3
 800c25e:	095b      	lsrs	r3, r3, #5
 800c260:	0119      	lsls	r1, r3, #4
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	4613      	mov	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4413      	add	r3, r2
 800c26a:	009a      	lsls	r2, r3, #2
 800c26c:	441a      	add	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	fbb2 f2f3 	udiv	r2, r2, r3
 800c278:	4b1a      	ldr	r3, [pc, #104]	; (800c2e4 <UART_SetConfig+0x118>)
 800c27a:	fba3 0302 	umull	r0, r3, r3, r2
 800c27e:	095b      	lsrs	r3, r3, #5
 800c280:	2064      	movs	r0, #100	; 0x64
 800c282:	fb00 f303 	mul.w	r3, r0, r3
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	011b      	lsls	r3, r3, #4
 800c28a:	3332      	adds	r3, #50	; 0x32
 800c28c:	4a15      	ldr	r2, [pc, #84]	; (800c2e4 <UART_SetConfig+0x118>)
 800c28e:	fba2 2303 	umull	r2, r3, r2, r3
 800c292:	095b      	lsrs	r3, r3, #5
 800c294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c298:	4419      	add	r1, r3
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	4613      	mov	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	009a      	lsls	r2, r3, #2
 800c2a4:	441a      	add	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2b0:	4b0c      	ldr	r3, [pc, #48]	; (800c2e4 <UART_SetConfig+0x118>)
 800c2b2:	fba3 0302 	umull	r0, r3, r3, r2
 800c2b6:	095b      	lsrs	r3, r3, #5
 800c2b8:	2064      	movs	r0, #100	; 0x64
 800c2ba:	fb00 f303 	mul.w	r3, r0, r3
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	011b      	lsls	r3, r3, #4
 800c2c2:	3332      	adds	r3, #50	; 0x32
 800c2c4:	4a07      	ldr	r2, [pc, #28]	; (800c2e4 <UART_SetConfig+0x118>)
 800c2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ca:	095b      	lsrs	r3, r3, #5
 800c2cc:	f003 020f 	and.w	r2, r3, #15
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	440a      	add	r2, r1
 800c2d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c2d8:	bf00      	nop
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	40013800 	.word	0x40013800
 800c2e4:	51eb851f 	.word	0x51eb851f

0800c2e8 <__itoa>:
 800c2e8:	1e93      	subs	r3, r2, #2
 800c2ea:	2b22      	cmp	r3, #34	; 0x22
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	d904      	bls.n	800c2fc <__itoa+0x14>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	461c      	mov	r4, r3
 800c2f6:	700b      	strb	r3, [r1, #0]
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	bd10      	pop	{r4, pc}
 800c2fc:	2a0a      	cmp	r2, #10
 800c2fe:	d109      	bne.n	800c314 <__itoa+0x2c>
 800c300:	2800      	cmp	r0, #0
 800c302:	da07      	bge.n	800c314 <__itoa+0x2c>
 800c304:	232d      	movs	r3, #45	; 0x2d
 800c306:	700b      	strb	r3, [r1, #0]
 800c308:	2101      	movs	r1, #1
 800c30a:	4240      	negs	r0, r0
 800c30c:	4421      	add	r1, r4
 800c30e:	f000 f90d 	bl	800c52c <__utoa>
 800c312:	e7f1      	b.n	800c2f8 <__itoa+0x10>
 800c314:	2100      	movs	r1, #0
 800c316:	e7f9      	b.n	800c30c <__itoa+0x24>

0800c318 <itoa>:
 800c318:	f7ff bfe6 	b.w	800c2e8 <__itoa>

0800c31c <malloc>:
 800c31c:	4b02      	ldr	r3, [pc, #8]	; (800c328 <malloc+0xc>)
 800c31e:	4601      	mov	r1, r0
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	f000 b823 	b.w	800c36c <_malloc_r>
 800c326:	bf00      	nop
 800c328:	2000010c 	.word	0x2000010c

0800c32c <sbrk_aligned>:
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	4e0e      	ldr	r6, [pc, #56]	; (800c368 <sbrk_aligned+0x3c>)
 800c330:	460c      	mov	r4, r1
 800c332:	6831      	ldr	r1, [r6, #0]
 800c334:	4605      	mov	r5, r0
 800c336:	b911      	cbnz	r1, 800c33e <sbrk_aligned+0x12>
 800c338:	f000 f952 	bl	800c5e0 <_sbrk_r>
 800c33c:	6030      	str	r0, [r6, #0]
 800c33e:	4621      	mov	r1, r4
 800c340:	4628      	mov	r0, r5
 800c342:	f000 f94d 	bl	800c5e0 <_sbrk_r>
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	d00a      	beq.n	800c360 <sbrk_aligned+0x34>
 800c34a:	1cc4      	adds	r4, r0, #3
 800c34c:	f024 0403 	bic.w	r4, r4, #3
 800c350:	42a0      	cmp	r0, r4
 800c352:	d007      	beq.n	800c364 <sbrk_aligned+0x38>
 800c354:	1a21      	subs	r1, r4, r0
 800c356:	4628      	mov	r0, r5
 800c358:	f000 f942 	bl	800c5e0 <_sbrk_r>
 800c35c:	3001      	adds	r0, #1
 800c35e:	d101      	bne.n	800c364 <sbrk_aligned+0x38>
 800c360:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c364:	4620      	mov	r0, r4
 800c366:	bd70      	pop	{r4, r5, r6, pc}
 800c368:	200003a8 	.word	0x200003a8

0800c36c <_malloc_r>:
 800c36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c370:	1ccd      	adds	r5, r1, #3
 800c372:	f025 0503 	bic.w	r5, r5, #3
 800c376:	3508      	adds	r5, #8
 800c378:	2d0c      	cmp	r5, #12
 800c37a:	bf38      	it	cc
 800c37c:	250c      	movcc	r5, #12
 800c37e:	2d00      	cmp	r5, #0
 800c380:	4607      	mov	r7, r0
 800c382:	db01      	blt.n	800c388 <_malloc_r+0x1c>
 800c384:	42a9      	cmp	r1, r5
 800c386:	d905      	bls.n	800c394 <_malloc_r+0x28>
 800c388:	230c      	movs	r3, #12
 800c38a:	2600      	movs	r6, #0
 800c38c:	603b      	str	r3, [r7, #0]
 800c38e:	4630      	mov	r0, r6
 800c390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c394:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c468 <_malloc_r+0xfc>
 800c398:	f000 f89c 	bl	800c4d4 <__malloc_lock>
 800c39c:	f8d8 3000 	ldr.w	r3, [r8]
 800c3a0:	461c      	mov	r4, r3
 800c3a2:	bb5c      	cbnz	r4, 800c3fc <_malloc_r+0x90>
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	f7ff ffc0 	bl	800c32c <sbrk_aligned>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	d155      	bne.n	800c45e <_malloc_r+0xf2>
 800c3b2:	f8d8 4000 	ldr.w	r4, [r8]
 800c3b6:	4626      	mov	r6, r4
 800c3b8:	2e00      	cmp	r6, #0
 800c3ba:	d145      	bne.n	800c448 <_malloc_r+0xdc>
 800c3bc:	2c00      	cmp	r4, #0
 800c3be:	d048      	beq.n	800c452 <_malloc_r+0xe6>
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	eb04 0903 	add.w	r9, r4, r3
 800c3ca:	f000 f909 	bl	800c5e0 <_sbrk_r>
 800c3ce:	4581      	cmp	r9, r0
 800c3d0:	d13f      	bne.n	800c452 <_malloc_r+0xe6>
 800c3d2:	6821      	ldr	r1, [r4, #0]
 800c3d4:	4638      	mov	r0, r7
 800c3d6:	1a6d      	subs	r5, r5, r1
 800c3d8:	4629      	mov	r1, r5
 800c3da:	f7ff ffa7 	bl	800c32c <sbrk_aligned>
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d037      	beq.n	800c452 <_malloc_r+0xe6>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	442b      	add	r3, r5
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d038      	beq.n	800c462 <_malloc_r+0xf6>
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	42a2      	cmp	r2, r4
 800c3f4:	d12b      	bne.n	800c44e <_malloc_r+0xe2>
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	605a      	str	r2, [r3, #4]
 800c3fa:	e00f      	b.n	800c41c <_malloc_r+0xb0>
 800c3fc:	6822      	ldr	r2, [r4, #0]
 800c3fe:	1b52      	subs	r2, r2, r5
 800c400:	d41f      	bmi.n	800c442 <_malloc_r+0xd6>
 800c402:	2a0b      	cmp	r2, #11
 800c404:	d917      	bls.n	800c436 <_malloc_r+0xca>
 800c406:	1961      	adds	r1, r4, r5
 800c408:	42a3      	cmp	r3, r4
 800c40a:	6025      	str	r5, [r4, #0]
 800c40c:	bf18      	it	ne
 800c40e:	6059      	strne	r1, [r3, #4]
 800c410:	6863      	ldr	r3, [r4, #4]
 800c412:	bf08      	it	eq
 800c414:	f8c8 1000 	streq.w	r1, [r8]
 800c418:	5162      	str	r2, [r4, r5]
 800c41a:	604b      	str	r3, [r1, #4]
 800c41c:	4638      	mov	r0, r7
 800c41e:	f104 060b 	add.w	r6, r4, #11
 800c422:	f000 f85d 	bl	800c4e0 <__malloc_unlock>
 800c426:	f026 0607 	bic.w	r6, r6, #7
 800c42a:	1d23      	adds	r3, r4, #4
 800c42c:	1af2      	subs	r2, r6, r3
 800c42e:	d0ae      	beq.n	800c38e <_malloc_r+0x22>
 800c430:	1b9b      	subs	r3, r3, r6
 800c432:	50a3      	str	r3, [r4, r2]
 800c434:	e7ab      	b.n	800c38e <_malloc_r+0x22>
 800c436:	42a3      	cmp	r3, r4
 800c438:	6862      	ldr	r2, [r4, #4]
 800c43a:	d1dd      	bne.n	800c3f8 <_malloc_r+0x8c>
 800c43c:	f8c8 2000 	str.w	r2, [r8]
 800c440:	e7ec      	b.n	800c41c <_malloc_r+0xb0>
 800c442:	4623      	mov	r3, r4
 800c444:	6864      	ldr	r4, [r4, #4]
 800c446:	e7ac      	b.n	800c3a2 <_malloc_r+0x36>
 800c448:	4634      	mov	r4, r6
 800c44a:	6876      	ldr	r6, [r6, #4]
 800c44c:	e7b4      	b.n	800c3b8 <_malloc_r+0x4c>
 800c44e:	4613      	mov	r3, r2
 800c450:	e7cc      	b.n	800c3ec <_malloc_r+0x80>
 800c452:	230c      	movs	r3, #12
 800c454:	4638      	mov	r0, r7
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	f000 f842 	bl	800c4e0 <__malloc_unlock>
 800c45c:	e797      	b.n	800c38e <_malloc_r+0x22>
 800c45e:	6025      	str	r5, [r4, #0]
 800c460:	e7dc      	b.n	800c41c <_malloc_r+0xb0>
 800c462:	605b      	str	r3, [r3, #4]
 800c464:	deff      	udf	#255	; 0xff
 800c466:	bf00      	nop
 800c468:	200003a4 	.word	0x200003a4

0800c46c <sniprintf>:
 800c46c:	b40c      	push	{r2, r3}
 800c46e:	b530      	push	{r4, r5, lr}
 800c470:	4b17      	ldr	r3, [pc, #92]	; (800c4d0 <sniprintf+0x64>)
 800c472:	1e0c      	subs	r4, r1, #0
 800c474:	681d      	ldr	r5, [r3, #0]
 800c476:	b09d      	sub	sp, #116	; 0x74
 800c478:	da08      	bge.n	800c48c <sniprintf+0x20>
 800c47a:	238b      	movs	r3, #139	; 0x8b
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c480:	602b      	str	r3, [r5, #0]
 800c482:	b01d      	add	sp, #116	; 0x74
 800c484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c488:	b002      	add	sp, #8
 800c48a:	4770      	bx	lr
 800c48c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c490:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c494:	bf0c      	ite	eq
 800c496:	4623      	moveq	r3, r4
 800c498:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c49c:	9304      	str	r3, [sp, #16]
 800c49e:	9307      	str	r3, [sp, #28]
 800c4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4a4:	9002      	str	r0, [sp, #8]
 800c4a6:	9006      	str	r0, [sp, #24]
 800c4a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	ab21      	add	r3, sp, #132	; 0x84
 800c4b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c4b2:	a902      	add	r1, sp, #8
 800c4b4:	9301      	str	r3, [sp, #4]
 800c4b6:	f000 f979 	bl	800c7ac <_svfiprintf_r>
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	bfbc      	itt	lt
 800c4be:	238b      	movlt	r3, #139	; 0x8b
 800c4c0:	602b      	strlt	r3, [r5, #0]
 800c4c2:	2c00      	cmp	r4, #0
 800c4c4:	d0dd      	beq.n	800c482 <sniprintf+0x16>
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	9b02      	ldr	r3, [sp, #8]
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	e7d9      	b.n	800c482 <sniprintf+0x16>
 800c4ce:	bf00      	nop
 800c4d0:	2000010c 	.word	0x2000010c

0800c4d4 <__malloc_lock>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	; (800c4dc <__malloc_lock+0x8>)
 800c4d6:	f000 b8bd 	b.w	800c654 <__retarget_lock_acquire_recursive>
 800c4da:	bf00      	nop
 800c4dc:	200004e4 	.word	0x200004e4

0800c4e0 <__malloc_unlock>:
 800c4e0:	4801      	ldr	r0, [pc, #4]	; (800c4e8 <__malloc_unlock+0x8>)
 800c4e2:	f000 b8b8 	b.w	800c656 <__retarget_lock_release_recursive>
 800c4e6:	bf00      	nop
 800c4e8:	200004e4 	.word	0x200004e4

0800c4ec <siprintf>:
 800c4ec:	b40e      	push	{r1, r2, r3}
 800c4ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4f2:	b500      	push	{lr}
 800c4f4:	b09c      	sub	sp, #112	; 0x70
 800c4f6:	ab1d      	add	r3, sp, #116	; 0x74
 800c4f8:	9002      	str	r0, [sp, #8]
 800c4fa:	9006      	str	r0, [sp, #24]
 800c4fc:	9107      	str	r1, [sp, #28]
 800c4fe:	9104      	str	r1, [sp, #16]
 800c500:	4808      	ldr	r0, [pc, #32]	; (800c524 <siprintf+0x38>)
 800c502:	4909      	ldr	r1, [pc, #36]	; (800c528 <siprintf+0x3c>)
 800c504:	f853 2b04 	ldr.w	r2, [r3], #4
 800c508:	9105      	str	r1, [sp, #20]
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	a902      	add	r1, sp, #8
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	f000 f94c 	bl	800c7ac <_svfiprintf_r>
 800c514:	2200      	movs	r2, #0
 800c516:	9b02      	ldr	r3, [sp, #8]
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	b01c      	add	sp, #112	; 0x70
 800c51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c520:	b003      	add	sp, #12
 800c522:	4770      	bx	lr
 800c524:	2000010c 	.word	0x2000010c
 800c528:	ffff0208 	.word	0xffff0208

0800c52c <__utoa>:
 800c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52e:	b08b      	sub	sp, #44	; 0x2c
 800c530:	4605      	mov	r5, r0
 800c532:	460b      	mov	r3, r1
 800c534:	466e      	mov	r6, sp
 800c536:	4c1d      	ldr	r4, [pc, #116]	; (800c5ac <__utoa+0x80>)
 800c538:	f104 0c20 	add.w	ip, r4, #32
 800c53c:	4637      	mov	r7, r6
 800c53e:	6820      	ldr	r0, [r4, #0]
 800c540:	6861      	ldr	r1, [r4, #4]
 800c542:	3408      	adds	r4, #8
 800c544:	c703      	stmia	r7!, {r0, r1}
 800c546:	4564      	cmp	r4, ip
 800c548:	463e      	mov	r6, r7
 800c54a:	d1f7      	bne.n	800c53c <__utoa+0x10>
 800c54c:	7921      	ldrb	r1, [r4, #4]
 800c54e:	6820      	ldr	r0, [r4, #0]
 800c550:	7139      	strb	r1, [r7, #4]
 800c552:	1e91      	subs	r1, r2, #2
 800c554:	2922      	cmp	r1, #34	; 0x22
 800c556:	6038      	str	r0, [r7, #0]
 800c558:	f04f 0100 	mov.w	r1, #0
 800c55c:	d904      	bls.n	800c568 <__utoa+0x3c>
 800c55e:	7019      	strb	r1, [r3, #0]
 800c560:	460b      	mov	r3, r1
 800c562:	4618      	mov	r0, r3
 800c564:	b00b      	add	sp, #44	; 0x2c
 800c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c568:	1e58      	subs	r0, r3, #1
 800c56a:	4684      	mov	ip, r0
 800c56c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c570:	fb02 5617 	mls	r6, r2, r7, r5
 800c574:	3628      	adds	r6, #40	; 0x28
 800c576:	446e      	add	r6, sp
 800c578:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c57c:	460c      	mov	r4, r1
 800c57e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c582:	462e      	mov	r6, r5
 800c584:	42b2      	cmp	r2, r6
 800c586:	463d      	mov	r5, r7
 800c588:	f101 0101 	add.w	r1, r1, #1
 800c58c:	d9ee      	bls.n	800c56c <__utoa+0x40>
 800c58e:	2200      	movs	r2, #0
 800c590:	545a      	strb	r2, [r3, r1]
 800c592:	1919      	adds	r1, r3, r4
 800c594:	1aa5      	subs	r5, r4, r2
 800c596:	42aa      	cmp	r2, r5
 800c598:	dae3      	bge.n	800c562 <__utoa+0x36>
 800c59a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c59e:	780e      	ldrb	r6, [r1, #0]
 800c5a0:	3201      	adds	r2, #1
 800c5a2:	7006      	strb	r6, [r0, #0]
 800c5a4:	f801 5901 	strb.w	r5, [r1], #-1
 800c5a8:	e7f4      	b.n	800c594 <__utoa+0x68>
 800c5aa:	bf00      	nop
 800c5ac:	0800dd3e 	.word	0x0800dd3e

0800c5b0 <strcat>:
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	7814      	ldrb	r4, [r2, #0]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	3201      	adds	r2, #1
 800c5ba:	2c00      	cmp	r4, #0
 800c5bc:	d1fa      	bne.n	800c5b4 <strcat+0x4>
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5c8:	2a00      	cmp	r2, #0
 800c5ca:	d1f9      	bne.n	800c5c0 <strcat+0x10>
 800c5cc:	bd10      	pop	{r4, pc}

0800c5ce <memset>:
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	4402      	add	r2, r0
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d100      	bne.n	800c5d8 <memset+0xa>
 800c5d6:	4770      	bx	lr
 800c5d8:	f803 1b01 	strb.w	r1, [r3], #1
 800c5dc:	e7f9      	b.n	800c5d2 <memset+0x4>
	...

0800c5e0 <_sbrk_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	4d05      	ldr	r5, [pc, #20]	; (800c5fc <_sbrk_r+0x1c>)
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	4608      	mov	r0, r1
 800c5ea:	602b      	str	r3, [r5, #0]
 800c5ec:	f7fb ffd4 	bl	8008598 <_sbrk>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	d102      	bne.n	800c5fa <_sbrk_r+0x1a>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	b103      	cbz	r3, 800c5fa <_sbrk_r+0x1a>
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	200004e8 	.word	0x200004e8

0800c600 <__errno>:
 800c600:	4b01      	ldr	r3, [pc, #4]	; (800c608 <__errno+0x8>)
 800c602:	6818      	ldr	r0, [r3, #0]
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	2000010c 	.word	0x2000010c

0800c60c <__libc_init_array>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	2600      	movs	r6, #0
 800c610:	4d0c      	ldr	r5, [pc, #48]	; (800c644 <__libc_init_array+0x38>)
 800c612:	4c0d      	ldr	r4, [pc, #52]	; (800c648 <__libc_init_array+0x3c>)
 800c614:	1b64      	subs	r4, r4, r5
 800c616:	10a4      	asrs	r4, r4, #2
 800c618:	42a6      	cmp	r6, r4
 800c61a:	d109      	bne.n	800c630 <__libc_init_array+0x24>
 800c61c:	f000 fbc6 	bl	800cdac <_init>
 800c620:	2600      	movs	r6, #0
 800c622:	4d0a      	ldr	r5, [pc, #40]	; (800c64c <__libc_init_array+0x40>)
 800c624:	4c0a      	ldr	r4, [pc, #40]	; (800c650 <__libc_init_array+0x44>)
 800c626:	1b64      	subs	r4, r4, r5
 800c628:	10a4      	asrs	r4, r4, #2
 800c62a:	42a6      	cmp	r6, r4
 800c62c:	d105      	bne.n	800c63a <__libc_init_array+0x2e>
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
 800c630:	f855 3b04 	ldr.w	r3, [r5], #4
 800c634:	4798      	blx	r3
 800c636:	3601      	adds	r6, #1
 800c638:	e7ee      	b.n	800c618 <__libc_init_array+0xc>
 800c63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63e:	4798      	blx	r3
 800c640:	3601      	adds	r6, #1
 800c642:	e7f2      	b.n	800c62a <__libc_init_array+0x1e>
 800c644:	0800dd98 	.word	0x0800dd98
 800c648:	0800dd98 	.word	0x0800dd98
 800c64c:	0800dd98 	.word	0x0800dd98
 800c650:	0800dd9c 	.word	0x0800dd9c

0800c654 <__retarget_lock_acquire_recursive>:
 800c654:	4770      	bx	lr

0800c656 <__retarget_lock_release_recursive>:
 800c656:	4770      	bx	lr

0800c658 <strcpy>:
 800c658:	4603      	mov	r3, r0
 800c65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c65e:	f803 2b01 	strb.w	r2, [r3], #1
 800c662:	2a00      	cmp	r2, #0
 800c664:	d1f9      	bne.n	800c65a <strcpy+0x2>
 800c666:	4770      	bx	lr

0800c668 <_free_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4605      	mov	r5, r0
 800c66c:	2900      	cmp	r1, #0
 800c66e:	d040      	beq.n	800c6f2 <_free_r+0x8a>
 800c670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c674:	1f0c      	subs	r4, r1, #4
 800c676:	2b00      	cmp	r3, #0
 800c678:	bfb8      	it	lt
 800c67a:	18e4      	addlt	r4, r4, r3
 800c67c:	f7ff ff2a 	bl	800c4d4 <__malloc_lock>
 800c680:	4a1c      	ldr	r2, [pc, #112]	; (800c6f4 <_free_r+0x8c>)
 800c682:	6813      	ldr	r3, [r2, #0]
 800c684:	b933      	cbnz	r3, 800c694 <_free_r+0x2c>
 800c686:	6063      	str	r3, [r4, #4]
 800c688:	6014      	str	r4, [r2, #0]
 800c68a:	4628      	mov	r0, r5
 800c68c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c690:	f7ff bf26 	b.w	800c4e0 <__malloc_unlock>
 800c694:	42a3      	cmp	r3, r4
 800c696:	d908      	bls.n	800c6aa <_free_r+0x42>
 800c698:	6820      	ldr	r0, [r4, #0]
 800c69a:	1821      	adds	r1, r4, r0
 800c69c:	428b      	cmp	r3, r1
 800c69e:	bf01      	itttt	eq
 800c6a0:	6819      	ldreq	r1, [r3, #0]
 800c6a2:	685b      	ldreq	r3, [r3, #4]
 800c6a4:	1809      	addeq	r1, r1, r0
 800c6a6:	6021      	streq	r1, [r4, #0]
 800c6a8:	e7ed      	b.n	800c686 <_free_r+0x1e>
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	b10b      	cbz	r3, 800c6b4 <_free_r+0x4c>
 800c6b0:	42a3      	cmp	r3, r4
 800c6b2:	d9fa      	bls.n	800c6aa <_free_r+0x42>
 800c6b4:	6811      	ldr	r1, [r2, #0]
 800c6b6:	1850      	adds	r0, r2, r1
 800c6b8:	42a0      	cmp	r0, r4
 800c6ba:	d10b      	bne.n	800c6d4 <_free_r+0x6c>
 800c6bc:	6820      	ldr	r0, [r4, #0]
 800c6be:	4401      	add	r1, r0
 800c6c0:	1850      	adds	r0, r2, r1
 800c6c2:	4283      	cmp	r3, r0
 800c6c4:	6011      	str	r1, [r2, #0]
 800c6c6:	d1e0      	bne.n	800c68a <_free_r+0x22>
 800c6c8:	6818      	ldr	r0, [r3, #0]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	4408      	add	r0, r1
 800c6ce:	6010      	str	r0, [r2, #0]
 800c6d0:	6053      	str	r3, [r2, #4]
 800c6d2:	e7da      	b.n	800c68a <_free_r+0x22>
 800c6d4:	d902      	bls.n	800c6dc <_free_r+0x74>
 800c6d6:	230c      	movs	r3, #12
 800c6d8:	602b      	str	r3, [r5, #0]
 800c6da:	e7d6      	b.n	800c68a <_free_r+0x22>
 800c6dc:	6820      	ldr	r0, [r4, #0]
 800c6de:	1821      	adds	r1, r4, r0
 800c6e0:	428b      	cmp	r3, r1
 800c6e2:	bf01      	itttt	eq
 800c6e4:	6819      	ldreq	r1, [r3, #0]
 800c6e6:	685b      	ldreq	r3, [r3, #4]
 800c6e8:	1809      	addeq	r1, r1, r0
 800c6ea:	6021      	streq	r1, [r4, #0]
 800c6ec:	6063      	str	r3, [r4, #4]
 800c6ee:	6054      	str	r4, [r2, #4]
 800c6f0:	e7cb      	b.n	800c68a <_free_r+0x22>
 800c6f2:	bd38      	pop	{r3, r4, r5, pc}
 800c6f4:	200003a4 	.word	0x200003a4

0800c6f8 <__ssputs_r>:
 800c6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6fc:	461f      	mov	r7, r3
 800c6fe:	688e      	ldr	r6, [r1, #8]
 800c700:	4682      	mov	sl, r0
 800c702:	42be      	cmp	r6, r7
 800c704:	460c      	mov	r4, r1
 800c706:	4690      	mov	r8, r2
 800c708:	680b      	ldr	r3, [r1, #0]
 800c70a:	d82c      	bhi.n	800c766 <__ssputs_r+0x6e>
 800c70c:	898a      	ldrh	r2, [r1, #12]
 800c70e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c712:	d026      	beq.n	800c762 <__ssputs_r+0x6a>
 800c714:	6965      	ldr	r5, [r4, #20]
 800c716:	6909      	ldr	r1, [r1, #16]
 800c718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c71c:	eba3 0901 	sub.w	r9, r3, r1
 800c720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c724:	1c7b      	adds	r3, r7, #1
 800c726:	444b      	add	r3, r9
 800c728:	106d      	asrs	r5, r5, #1
 800c72a:	429d      	cmp	r5, r3
 800c72c:	bf38      	it	cc
 800c72e:	461d      	movcc	r5, r3
 800c730:	0553      	lsls	r3, r2, #21
 800c732:	d527      	bpl.n	800c784 <__ssputs_r+0x8c>
 800c734:	4629      	mov	r1, r5
 800c736:	f7ff fe19 	bl	800c36c <_malloc_r>
 800c73a:	4606      	mov	r6, r0
 800c73c:	b360      	cbz	r0, 800c798 <__ssputs_r+0xa0>
 800c73e:	464a      	mov	r2, r9
 800c740:	6921      	ldr	r1, [r4, #16]
 800c742:	f000 fb1c 	bl	800cd7e <memcpy>
 800c746:	89a3      	ldrh	r3, [r4, #12]
 800c748:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c750:	81a3      	strh	r3, [r4, #12]
 800c752:	6126      	str	r6, [r4, #16]
 800c754:	444e      	add	r6, r9
 800c756:	6026      	str	r6, [r4, #0]
 800c758:	463e      	mov	r6, r7
 800c75a:	6165      	str	r5, [r4, #20]
 800c75c:	eba5 0509 	sub.w	r5, r5, r9
 800c760:	60a5      	str	r5, [r4, #8]
 800c762:	42be      	cmp	r6, r7
 800c764:	d900      	bls.n	800c768 <__ssputs_r+0x70>
 800c766:	463e      	mov	r6, r7
 800c768:	4632      	mov	r2, r6
 800c76a:	4641      	mov	r1, r8
 800c76c:	6820      	ldr	r0, [r4, #0]
 800c76e:	f000 fade 	bl	800cd2e <memmove>
 800c772:	2000      	movs	r0, #0
 800c774:	68a3      	ldr	r3, [r4, #8]
 800c776:	1b9b      	subs	r3, r3, r6
 800c778:	60a3      	str	r3, [r4, #8]
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	4433      	add	r3, r6
 800c77e:	6023      	str	r3, [r4, #0]
 800c780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c784:	462a      	mov	r2, r5
 800c786:	f000 faa3 	bl	800ccd0 <_realloc_r>
 800c78a:	4606      	mov	r6, r0
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d1e0      	bne.n	800c752 <__ssputs_r+0x5a>
 800c790:	4650      	mov	r0, sl
 800c792:	6921      	ldr	r1, [r4, #16]
 800c794:	f7ff ff68 	bl	800c668 <_free_r>
 800c798:	230c      	movs	r3, #12
 800c79a:	f8ca 3000 	str.w	r3, [sl]
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	e7e9      	b.n	800c780 <__ssputs_r+0x88>

0800c7ac <_svfiprintf_r>:
 800c7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b0:	4698      	mov	r8, r3
 800c7b2:	898b      	ldrh	r3, [r1, #12]
 800c7b4:	4607      	mov	r7, r0
 800c7b6:	061b      	lsls	r3, r3, #24
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	4614      	mov	r4, r2
 800c7bc:	b09d      	sub	sp, #116	; 0x74
 800c7be:	d50e      	bpl.n	800c7de <_svfiprintf_r+0x32>
 800c7c0:	690b      	ldr	r3, [r1, #16]
 800c7c2:	b963      	cbnz	r3, 800c7de <_svfiprintf_r+0x32>
 800c7c4:	2140      	movs	r1, #64	; 0x40
 800c7c6:	f7ff fdd1 	bl	800c36c <_malloc_r>
 800c7ca:	6028      	str	r0, [r5, #0]
 800c7cc:	6128      	str	r0, [r5, #16]
 800c7ce:	b920      	cbnz	r0, 800c7da <_svfiprintf_r+0x2e>
 800c7d0:	230c      	movs	r3, #12
 800c7d2:	603b      	str	r3, [r7, #0]
 800c7d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7d8:	e0d0      	b.n	800c97c <_svfiprintf_r+0x1d0>
 800c7da:	2340      	movs	r3, #64	; 0x40
 800c7dc:	616b      	str	r3, [r5, #20]
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e2:	2320      	movs	r3, #32
 800c7e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7e8:	2330      	movs	r3, #48	; 0x30
 800c7ea:	f04f 0901 	mov.w	r9, #1
 800c7ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7f2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c994 <_svfiprintf_r+0x1e8>
 800c7f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7fa:	4623      	mov	r3, r4
 800c7fc:	469a      	mov	sl, r3
 800c7fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c802:	b10a      	cbz	r2, 800c808 <_svfiprintf_r+0x5c>
 800c804:	2a25      	cmp	r2, #37	; 0x25
 800c806:	d1f9      	bne.n	800c7fc <_svfiprintf_r+0x50>
 800c808:	ebba 0b04 	subs.w	fp, sl, r4
 800c80c:	d00b      	beq.n	800c826 <_svfiprintf_r+0x7a>
 800c80e:	465b      	mov	r3, fp
 800c810:	4622      	mov	r2, r4
 800c812:	4629      	mov	r1, r5
 800c814:	4638      	mov	r0, r7
 800c816:	f7ff ff6f 	bl	800c6f8 <__ssputs_r>
 800c81a:	3001      	adds	r0, #1
 800c81c:	f000 80a9 	beq.w	800c972 <_svfiprintf_r+0x1c6>
 800c820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c822:	445a      	add	r2, fp
 800c824:	9209      	str	r2, [sp, #36]	; 0x24
 800c826:	f89a 3000 	ldrb.w	r3, [sl]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f000 80a1 	beq.w	800c972 <_svfiprintf_r+0x1c6>
 800c830:	2300      	movs	r3, #0
 800c832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c83a:	f10a 0a01 	add.w	sl, sl, #1
 800c83e:	9304      	str	r3, [sp, #16]
 800c840:	9307      	str	r3, [sp, #28]
 800c842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c846:	931a      	str	r3, [sp, #104]	; 0x68
 800c848:	4654      	mov	r4, sl
 800c84a:	2205      	movs	r2, #5
 800c84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c850:	4850      	ldr	r0, [pc, #320]	; (800c994 <_svfiprintf_r+0x1e8>)
 800c852:	f000 fa86 	bl	800cd62 <memchr>
 800c856:	9a04      	ldr	r2, [sp, #16]
 800c858:	b9d8      	cbnz	r0, 800c892 <_svfiprintf_r+0xe6>
 800c85a:	06d0      	lsls	r0, r2, #27
 800c85c:	bf44      	itt	mi
 800c85e:	2320      	movmi	r3, #32
 800c860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c864:	0711      	lsls	r1, r2, #28
 800c866:	bf44      	itt	mi
 800c868:	232b      	movmi	r3, #43	; 0x2b
 800c86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c86e:	f89a 3000 	ldrb.w	r3, [sl]
 800c872:	2b2a      	cmp	r3, #42	; 0x2a
 800c874:	d015      	beq.n	800c8a2 <_svfiprintf_r+0xf6>
 800c876:	4654      	mov	r4, sl
 800c878:	2000      	movs	r0, #0
 800c87a:	f04f 0c0a 	mov.w	ip, #10
 800c87e:	9a07      	ldr	r2, [sp, #28]
 800c880:	4621      	mov	r1, r4
 800c882:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c886:	3b30      	subs	r3, #48	; 0x30
 800c888:	2b09      	cmp	r3, #9
 800c88a:	d94d      	bls.n	800c928 <_svfiprintf_r+0x17c>
 800c88c:	b1b0      	cbz	r0, 800c8bc <_svfiprintf_r+0x110>
 800c88e:	9207      	str	r2, [sp, #28]
 800c890:	e014      	b.n	800c8bc <_svfiprintf_r+0x110>
 800c892:	eba0 0308 	sub.w	r3, r0, r8
 800c896:	fa09 f303 	lsl.w	r3, r9, r3
 800c89a:	4313      	orrs	r3, r2
 800c89c:	46a2      	mov	sl, r4
 800c89e:	9304      	str	r3, [sp, #16]
 800c8a0:	e7d2      	b.n	800c848 <_svfiprintf_r+0x9c>
 800c8a2:	9b03      	ldr	r3, [sp, #12]
 800c8a4:	1d19      	adds	r1, r3, #4
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	9103      	str	r1, [sp, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	bfbb      	ittet	lt
 800c8ae:	425b      	neglt	r3, r3
 800c8b0:	f042 0202 	orrlt.w	r2, r2, #2
 800c8b4:	9307      	strge	r3, [sp, #28]
 800c8b6:	9307      	strlt	r3, [sp, #28]
 800c8b8:	bfb8      	it	lt
 800c8ba:	9204      	strlt	r2, [sp, #16]
 800c8bc:	7823      	ldrb	r3, [r4, #0]
 800c8be:	2b2e      	cmp	r3, #46	; 0x2e
 800c8c0:	d10c      	bne.n	800c8dc <_svfiprintf_r+0x130>
 800c8c2:	7863      	ldrb	r3, [r4, #1]
 800c8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c6:	d134      	bne.n	800c932 <_svfiprintf_r+0x186>
 800c8c8:	9b03      	ldr	r3, [sp, #12]
 800c8ca:	3402      	adds	r4, #2
 800c8cc:	1d1a      	adds	r2, r3, #4
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	9203      	str	r2, [sp, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bfb8      	it	lt
 800c8d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8da:	9305      	str	r3, [sp, #20]
 800c8dc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c998 <_svfiprintf_r+0x1ec>
 800c8e0:	2203      	movs	r2, #3
 800c8e2:	4650      	mov	r0, sl
 800c8e4:	7821      	ldrb	r1, [r4, #0]
 800c8e6:	f000 fa3c 	bl	800cd62 <memchr>
 800c8ea:	b138      	cbz	r0, 800c8fc <_svfiprintf_r+0x150>
 800c8ec:	2240      	movs	r2, #64	; 0x40
 800c8ee:	9b04      	ldr	r3, [sp, #16]
 800c8f0:	eba0 000a 	sub.w	r0, r0, sl
 800c8f4:	4082      	lsls	r2, r0
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	3401      	adds	r4, #1
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c900:	2206      	movs	r2, #6
 800c902:	4826      	ldr	r0, [pc, #152]	; (800c99c <_svfiprintf_r+0x1f0>)
 800c904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c908:	f000 fa2b 	bl	800cd62 <memchr>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d038      	beq.n	800c982 <_svfiprintf_r+0x1d6>
 800c910:	4b23      	ldr	r3, [pc, #140]	; (800c9a0 <_svfiprintf_r+0x1f4>)
 800c912:	bb1b      	cbnz	r3, 800c95c <_svfiprintf_r+0x1b0>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	3307      	adds	r3, #7
 800c918:	f023 0307 	bic.w	r3, r3, #7
 800c91c:	3308      	adds	r3, #8
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c922:	4433      	add	r3, r6
 800c924:	9309      	str	r3, [sp, #36]	; 0x24
 800c926:	e768      	b.n	800c7fa <_svfiprintf_r+0x4e>
 800c928:	460c      	mov	r4, r1
 800c92a:	2001      	movs	r0, #1
 800c92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c930:	e7a6      	b.n	800c880 <_svfiprintf_r+0xd4>
 800c932:	2300      	movs	r3, #0
 800c934:	f04f 0c0a 	mov.w	ip, #10
 800c938:	4619      	mov	r1, r3
 800c93a:	3401      	adds	r4, #1
 800c93c:	9305      	str	r3, [sp, #20]
 800c93e:	4620      	mov	r0, r4
 800c940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c944:	3a30      	subs	r2, #48	; 0x30
 800c946:	2a09      	cmp	r2, #9
 800c948:	d903      	bls.n	800c952 <_svfiprintf_r+0x1a6>
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0c6      	beq.n	800c8dc <_svfiprintf_r+0x130>
 800c94e:	9105      	str	r1, [sp, #20]
 800c950:	e7c4      	b.n	800c8dc <_svfiprintf_r+0x130>
 800c952:	4604      	mov	r4, r0
 800c954:	2301      	movs	r3, #1
 800c956:	fb0c 2101 	mla	r1, ip, r1, r2
 800c95a:	e7f0      	b.n	800c93e <_svfiprintf_r+0x192>
 800c95c:	ab03      	add	r3, sp, #12
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	462a      	mov	r2, r5
 800c962:	4638      	mov	r0, r7
 800c964:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <_svfiprintf_r+0x1f8>)
 800c966:	a904      	add	r1, sp, #16
 800c968:	f3af 8000 	nop.w
 800c96c:	1c42      	adds	r2, r0, #1
 800c96e:	4606      	mov	r6, r0
 800c970:	d1d6      	bne.n	800c920 <_svfiprintf_r+0x174>
 800c972:	89ab      	ldrh	r3, [r5, #12]
 800c974:	065b      	lsls	r3, r3, #25
 800c976:	f53f af2d 	bmi.w	800c7d4 <_svfiprintf_r+0x28>
 800c97a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c97c:	b01d      	add	sp, #116	; 0x74
 800c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c982:	ab03      	add	r3, sp, #12
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	462a      	mov	r2, r5
 800c988:	4638      	mov	r0, r7
 800c98a:	4b06      	ldr	r3, [pc, #24]	; (800c9a4 <_svfiprintf_r+0x1f8>)
 800c98c:	a904      	add	r1, sp, #16
 800c98e:	f000 f87d 	bl	800ca8c <_printf_i>
 800c992:	e7eb      	b.n	800c96c <_svfiprintf_r+0x1c0>
 800c994:	0800dd63 	.word	0x0800dd63
 800c998:	0800dd69 	.word	0x0800dd69
 800c99c:	0800dd6d 	.word	0x0800dd6d
 800c9a0:	00000000 	.word	0x00000000
 800c9a4:	0800c6f9 	.word	0x0800c6f9

0800c9a8 <_printf_common>:
 800c9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ac:	4616      	mov	r6, r2
 800c9ae:	4699      	mov	r9, r3
 800c9b0:	688a      	ldr	r2, [r1, #8]
 800c9b2:	690b      	ldr	r3, [r1, #16]
 800c9b4:	4607      	mov	r7, r0
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	bfb8      	it	lt
 800c9ba:	4613      	movlt	r3, r2
 800c9bc:	6033      	str	r3, [r6, #0]
 800c9be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9c8:	b10a      	cbz	r2, 800c9ce <_printf_common+0x26>
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	6033      	str	r3, [r6, #0]
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	0699      	lsls	r1, r3, #26
 800c9d2:	bf42      	ittt	mi
 800c9d4:	6833      	ldrmi	r3, [r6, #0]
 800c9d6:	3302      	addmi	r3, #2
 800c9d8:	6033      	strmi	r3, [r6, #0]
 800c9da:	6825      	ldr	r5, [r4, #0]
 800c9dc:	f015 0506 	ands.w	r5, r5, #6
 800c9e0:	d106      	bne.n	800c9f0 <_printf_common+0x48>
 800c9e2:	f104 0a19 	add.w	sl, r4, #25
 800c9e6:	68e3      	ldr	r3, [r4, #12]
 800c9e8:	6832      	ldr	r2, [r6, #0]
 800c9ea:	1a9b      	subs	r3, r3, r2
 800c9ec:	42ab      	cmp	r3, r5
 800c9ee:	dc2b      	bgt.n	800ca48 <_printf_common+0xa0>
 800c9f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9f4:	1e13      	subs	r3, r2, #0
 800c9f6:	6822      	ldr	r2, [r4, #0]
 800c9f8:	bf18      	it	ne
 800c9fa:	2301      	movne	r3, #1
 800c9fc:	0692      	lsls	r2, r2, #26
 800c9fe:	d430      	bmi.n	800ca62 <_printf_common+0xba>
 800ca00:	4649      	mov	r1, r9
 800ca02:	4638      	mov	r0, r7
 800ca04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca08:	47c0      	blx	r8
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	d023      	beq.n	800ca56 <_printf_common+0xae>
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	6922      	ldr	r2, [r4, #16]
 800ca12:	f003 0306 	and.w	r3, r3, #6
 800ca16:	2b04      	cmp	r3, #4
 800ca18:	bf14      	ite	ne
 800ca1a:	2500      	movne	r5, #0
 800ca1c:	6833      	ldreq	r3, [r6, #0]
 800ca1e:	f04f 0600 	mov.w	r6, #0
 800ca22:	bf08      	it	eq
 800ca24:	68e5      	ldreq	r5, [r4, #12]
 800ca26:	f104 041a 	add.w	r4, r4, #26
 800ca2a:	bf08      	it	eq
 800ca2c:	1aed      	subeq	r5, r5, r3
 800ca2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca32:	bf08      	it	eq
 800ca34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	bfc4      	itt	gt
 800ca3c:	1a9b      	subgt	r3, r3, r2
 800ca3e:	18ed      	addgt	r5, r5, r3
 800ca40:	42b5      	cmp	r5, r6
 800ca42:	d11a      	bne.n	800ca7a <_printf_common+0xd2>
 800ca44:	2000      	movs	r0, #0
 800ca46:	e008      	b.n	800ca5a <_printf_common+0xb2>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	4652      	mov	r2, sl
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	4638      	mov	r0, r7
 800ca50:	47c0      	blx	r8
 800ca52:	3001      	adds	r0, #1
 800ca54:	d103      	bne.n	800ca5e <_printf_common+0xb6>
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca5e:	3501      	adds	r5, #1
 800ca60:	e7c1      	b.n	800c9e6 <_printf_common+0x3e>
 800ca62:	2030      	movs	r0, #48	; 0x30
 800ca64:	18e1      	adds	r1, r4, r3
 800ca66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca70:	4422      	add	r2, r4
 800ca72:	3302      	adds	r3, #2
 800ca74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca78:	e7c2      	b.n	800ca00 <_printf_common+0x58>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	4649      	mov	r1, r9
 800ca80:	4638      	mov	r0, r7
 800ca82:	47c0      	blx	r8
 800ca84:	3001      	adds	r0, #1
 800ca86:	d0e6      	beq.n	800ca56 <_printf_common+0xae>
 800ca88:	3601      	adds	r6, #1
 800ca8a:	e7d9      	b.n	800ca40 <_printf_common+0x98>

0800ca8c <_printf_i>:
 800ca8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca90:	7e0f      	ldrb	r7, [r1, #24]
 800ca92:	4691      	mov	r9, r2
 800ca94:	2f78      	cmp	r7, #120	; 0x78
 800ca96:	4680      	mov	r8, r0
 800ca98:	460c      	mov	r4, r1
 800ca9a:	469a      	mov	sl, r3
 800ca9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caa2:	d807      	bhi.n	800cab4 <_printf_i+0x28>
 800caa4:	2f62      	cmp	r7, #98	; 0x62
 800caa6:	d80a      	bhi.n	800cabe <_printf_i+0x32>
 800caa8:	2f00      	cmp	r7, #0
 800caaa:	f000 80d5 	beq.w	800cc58 <_printf_i+0x1cc>
 800caae:	2f58      	cmp	r7, #88	; 0x58
 800cab0:	f000 80c1 	beq.w	800cc36 <_printf_i+0x1aa>
 800cab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cabc:	e03a      	b.n	800cb34 <_printf_i+0xa8>
 800cabe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cac2:	2b15      	cmp	r3, #21
 800cac4:	d8f6      	bhi.n	800cab4 <_printf_i+0x28>
 800cac6:	a101      	add	r1, pc, #4	; (adr r1, 800cacc <_printf_i+0x40>)
 800cac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cacc:	0800cb25 	.word	0x0800cb25
 800cad0:	0800cb39 	.word	0x0800cb39
 800cad4:	0800cab5 	.word	0x0800cab5
 800cad8:	0800cab5 	.word	0x0800cab5
 800cadc:	0800cab5 	.word	0x0800cab5
 800cae0:	0800cab5 	.word	0x0800cab5
 800cae4:	0800cb39 	.word	0x0800cb39
 800cae8:	0800cab5 	.word	0x0800cab5
 800caec:	0800cab5 	.word	0x0800cab5
 800caf0:	0800cab5 	.word	0x0800cab5
 800caf4:	0800cab5 	.word	0x0800cab5
 800caf8:	0800cc3f 	.word	0x0800cc3f
 800cafc:	0800cb65 	.word	0x0800cb65
 800cb00:	0800cbf9 	.word	0x0800cbf9
 800cb04:	0800cab5 	.word	0x0800cab5
 800cb08:	0800cab5 	.word	0x0800cab5
 800cb0c:	0800cc61 	.word	0x0800cc61
 800cb10:	0800cab5 	.word	0x0800cab5
 800cb14:	0800cb65 	.word	0x0800cb65
 800cb18:	0800cab5 	.word	0x0800cab5
 800cb1c:	0800cab5 	.word	0x0800cab5
 800cb20:	0800cc01 	.word	0x0800cc01
 800cb24:	682b      	ldr	r3, [r5, #0]
 800cb26:	1d1a      	adds	r2, r3, #4
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	602a      	str	r2, [r5, #0]
 800cb2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb34:	2301      	movs	r3, #1
 800cb36:	e0a0      	b.n	800cc7a <_printf_i+0x1ee>
 800cb38:	6820      	ldr	r0, [r4, #0]
 800cb3a:	682b      	ldr	r3, [r5, #0]
 800cb3c:	0607      	lsls	r7, r0, #24
 800cb3e:	f103 0104 	add.w	r1, r3, #4
 800cb42:	6029      	str	r1, [r5, #0]
 800cb44:	d501      	bpl.n	800cb4a <_printf_i+0xbe>
 800cb46:	681e      	ldr	r6, [r3, #0]
 800cb48:	e003      	b.n	800cb52 <_printf_i+0xc6>
 800cb4a:	0646      	lsls	r6, r0, #25
 800cb4c:	d5fb      	bpl.n	800cb46 <_printf_i+0xba>
 800cb4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb52:	2e00      	cmp	r6, #0
 800cb54:	da03      	bge.n	800cb5e <_printf_i+0xd2>
 800cb56:	232d      	movs	r3, #45	; 0x2d
 800cb58:	4276      	negs	r6, r6
 800cb5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb5e:	230a      	movs	r3, #10
 800cb60:	4859      	ldr	r0, [pc, #356]	; (800ccc8 <_printf_i+0x23c>)
 800cb62:	e012      	b.n	800cb8a <_printf_i+0xfe>
 800cb64:	682b      	ldr	r3, [r5, #0]
 800cb66:	6820      	ldr	r0, [r4, #0]
 800cb68:	1d19      	adds	r1, r3, #4
 800cb6a:	6029      	str	r1, [r5, #0]
 800cb6c:	0605      	lsls	r5, r0, #24
 800cb6e:	d501      	bpl.n	800cb74 <_printf_i+0xe8>
 800cb70:	681e      	ldr	r6, [r3, #0]
 800cb72:	e002      	b.n	800cb7a <_printf_i+0xee>
 800cb74:	0641      	lsls	r1, r0, #25
 800cb76:	d5fb      	bpl.n	800cb70 <_printf_i+0xe4>
 800cb78:	881e      	ldrh	r6, [r3, #0]
 800cb7a:	2f6f      	cmp	r7, #111	; 0x6f
 800cb7c:	bf0c      	ite	eq
 800cb7e:	2308      	moveq	r3, #8
 800cb80:	230a      	movne	r3, #10
 800cb82:	4851      	ldr	r0, [pc, #324]	; (800ccc8 <_printf_i+0x23c>)
 800cb84:	2100      	movs	r1, #0
 800cb86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb8a:	6865      	ldr	r5, [r4, #4]
 800cb8c:	2d00      	cmp	r5, #0
 800cb8e:	bfa8      	it	ge
 800cb90:	6821      	ldrge	r1, [r4, #0]
 800cb92:	60a5      	str	r5, [r4, #8]
 800cb94:	bfa4      	itt	ge
 800cb96:	f021 0104 	bicge.w	r1, r1, #4
 800cb9a:	6021      	strge	r1, [r4, #0]
 800cb9c:	b90e      	cbnz	r6, 800cba2 <_printf_i+0x116>
 800cb9e:	2d00      	cmp	r5, #0
 800cba0:	d04b      	beq.n	800cc3a <_printf_i+0x1ae>
 800cba2:	4615      	mov	r5, r2
 800cba4:	fbb6 f1f3 	udiv	r1, r6, r3
 800cba8:	fb03 6711 	mls	r7, r3, r1, r6
 800cbac:	5dc7      	ldrb	r7, [r0, r7]
 800cbae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbb2:	4637      	mov	r7, r6
 800cbb4:	42bb      	cmp	r3, r7
 800cbb6:	460e      	mov	r6, r1
 800cbb8:	d9f4      	bls.n	800cba4 <_printf_i+0x118>
 800cbba:	2b08      	cmp	r3, #8
 800cbbc:	d10b      	bne.n	800cbd6 <_printf_i+0x14a>
 800cbbe:	6823      	ldr	r3, [r4, #0]
 800cbc0:	07de      	lsls	r6, r3, #31
 800cbc2:	d508      	bpl.n	800cbd6 <_printf_i+0x14a>
 800cbc4:	6923      	ldr	r3, [r4, #16]
 800cbc6:	6861      	ldr	r1, [r4, #4]
 800cbc8:	4299      	cmp	r1, r3
 800cbca:	bfde      	ittt	le
 800cbcc:	2330      	movle	r3, #48	; 0x30
 800cbce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbd2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cbd6:	1b52      	subs	r2, r2, r5
 800cbd8:	6122      	str	r2, [r4, #16]
 800cbda:	464b      	mov	r3, r9
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4640      	mov	r0, r8
 800cbe0:	f8cd a000 	str.w	sl, [sp]
 800cbe4:	aa03      	add	r2, sp, #12
 800cbe6:	f7ff fedf 	bl	800c9a8 <_printf_common>
 800cbea:	3001      	adds	r0, #1
 800cbec:	d14a      	bne.n	800cc84 <_printf_i+0x1f8>
 800cbee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbf2:	b004      	add	sp, #16
 800cbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	f043 0320 	orr.w	r3, r3, #32
 800cbfe:	6023      	str	r3, [r4, #0]
 800cc00:	2778      	movs	r7, #120	; 0x78
 800cc02:	4832      	ldr	r0, [pc, #200]	; (800cccc <_printf_i+0x240>)
 800cc04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	6829      	ldr	r1, [r5, #0]
 800cc0c:	061f      	lsls	r7, r3, #24
 800cc0e:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc12:	d402      	bmi.n	800cc1a <_printf_i+0x18e>
 800cc14:	065f      	lsls	r7, r3, #25
 800cc16:	bf48      	it	mi
 800cc18:	b2b6      	uxthmi	r6, r6
 800cc1a:	07df      	lsls	r7, r3, #31
 800cc1c:	bf48      	it	mi
 800cc1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc22:	6029      	str	r1, [r5, #0]
 800cc24:	bf48      	it	mi
 800cc26:	6023      	strmi	r3, [r4, #0]
 800cc28:	b91e      	cbnz	r6, 800cc32 <_printf_i+0x1a6>
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	f023 0320 	bic.w	r3, r3, #32
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	2310      	movs	r3, #16
 800cc34:	e7a6      	b.n	800cb84 <_printf_i+0xf8>
 800cc36:	4824      	ldr	r0, [pc, #144]	; (800ccc8 <_printf_i+0x23c>)
 800cc38:	e7e4      	b.n	800cc04 <_printf_i+0x178>
 800cc3a:	4615      	mov	r5, r2
 800cc3c:	e7bd      	b.n	800cbba <_printf_i+0x12e>
 800cc3e:	682b      	ldr	r3, [r5, #0]
 800cc40:	6826      	ldr	r6, [r4, #0]
 800cc42:	1d18      	adds	r0, r3, #4
 800cc44:	6961      	ldr	r1, [r4, #20]
 800cc46:	6028      	str	r0, [r5, #0]
 800cc48:	0635      	lsls	r5, r6, #24
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	d501      	bpl.n	800cc52 <_printf_i+0x1c6>
 800cc4e:	6019      	str	r1, [r3, #0]
 800cc50:	e002      	b.n	800cc58 <_printf_i+0x1cc>
 800cc52:	0670      	lsls	r0, r6, #25
 800cc54:	d5fb      	bpl.n	800cc4e <_printf_i+0x1c2>
 800cc56:	8019      	strh	r1, [r3, #0]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	4615      	mov	r5, r2
 800cc5c:	6123      	str	r3, [r4, #16]
 800cc5e:	e7bc      	b.n	800cbda <_printf_i+0x14e>
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	2100      	movs	r1, #0
 800cc64:	1d1a      	adds	r2, r3, #4
 800cc66:	602a      	str	r2, [r5, #0]
 800cc68:	681d      	ldr	r5, [r3, #0]
 800cc6a:	6862      	ldr	r2, [r4, #4]
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	f000 f878 	bl	800cd62 <memchr>
 800cc72:	b108      	cbz	r0, 800cc78 <_printf_i+0x1ec>
 800cc74:	1b40      	subs	r0, r0, r5
 800cc76:	6060      	str	r0, [r4, #4]
 800cc78:	6863      	ldr	r3, [r4, #4]
 800cc7a:	6123      	str	r3, [r4, #16]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc82:	e7aa      	b.n	800cbda <_printf_i+0x14e>
 800cc84:	462a      	mov	r2, r5
 800cc86:	4649      	mov	r1, r9
 800cc88:	4640      	mov	r0, r8
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	47d0      	blx	sl
 800cc8e:	3001      	adds	r0, #1
 800cc90:	d0ad      	beq.n	800cbee <_printf_i+0x162>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	079b      	lsls	r3, r3, #30
 800cc96:	d413      	bmi.n	800ccc0 <_printf_i+0x234>
 800cc98:	68e0      	ldr	r0, [r4, #12]
 800cc9a:	9b03      	ldr	r3, [sp, #12]
 800cc9c:	4298      	cmp	r0, r3
 800cc9e:	bfb8      	it	lt
 800cca0:	4618      	movlt	r0, r3
 800cca2:	e7a6      	b.n	800cbf2 <_printf_i+0x166>
 800cca4:	2301      	movs	r3, #1
 800cca6:	4632      	mov	r2, r6
 800cca8:	4649      	mov	r1, r9
 800ccaa:	4640      	mov	r0, r8
 800ccac:	47d0      	blx	sl
 800ccae:	3001      	adds	r0, #1
 800ccb0:	d09d      	beq.n	800cbee <_printf_i+0x162>
 800ccb2:	3501      	adds	r5, #1
 800ccb4:	68e3      	ldr	r3, [r4, #12]
 800ccb6:	9903      	ldr	r1, [sp, #12]
 800ccb8:	1a5b      	subs	r3, r3, r1
 800ccba:	42ab      	cmp	r3, r5
 800ccbc:	dcf2      	bgt.n	800cca4 <_printf_i+0x218>
 800ccbe:	e7eb      	b.n	800cc98 <_printf_i+0x20c>
 800ccc0:	2500      	movs	r5, #0
 800ccc2:	f104 0619 	add.w	r6, r4, #25
 800ccc6:	e7f5      	b.n	800ccb4 <_printf_i+0x228>
 800ccc8:	0800dd74 	.word	0x0800dd74
 800cccc:	0800dd85 	.word	0x0800dd85

0800ccd0 <_realloc_r>:
 800ccd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd4:	4680      	mov	r8, r0
 800ccd6:	4614      	mov	r4, r2
 800ccd8:	460e      	mov	r6, r1
 800ccda:	b921      	cbnz	r1, 800cce6 <_realloc_r+0x16>
 800ccdc:	4611      	mov	r1, r2
 800ccde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cce2:	f7ff bb43 	b.w	800c36c <_malloc_r>
 800cce6:	b92a      	cbnz	r2, 800ccf4 <_realloc_r+0x24>
 800cce8:	f7ff fcbe 	bl	800c668 <_free_r>
 800ccec:	4625      	mov	r5, r4
 800ccee:	4628      	mov	r0, r5
 800ccf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf4:	f000 f851 	bl	800cd9a <_malloc_usable_size_r>
 800ccf8:	4284      	cmp	r4, r0
 800ccfa:	4607      	mov	r7, r0
 800ccfc:	d802      	bhi.n	800cd04 <_realloc_r+0x34>
 800ccfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd02:	d812      	bhi.n	800cd2a <_realloc_r+0x5a>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4640      	mov	r0, r8
 800cd08:	f7ff fb30 	bl	800c36c <_malloc_r>
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d0ed      	beq.n	800ccee <_realloc_r+0x1e>
 800cd12:	42bc      	cmp	r4, r7
 800cd14:	4622      	mov	r2, r4
 800cd16:	4631      	mov	r1, r6
 800cd18:	bf28      	it	cs
 800cd1a:	463a      	movcs	r2, r7
 800cd1c:	f000 f82f 	bl	800cd7e <memcpy>
 800cd20:	4631      	mov	r1, r6
 800cd22:	4640      	mov	r0, r8
 800cd24:	f7ff fca0 	bl	800c668 <_free_r>
 800cd28:	e7e1      	b.n	800ccee <_realloc_r+0x1e>
 800cd2a:	4635      	mov	r5, r6
 800cd2c:	e7df      	b.n	800ccee <_realloc_r+0x1e>

0800cd2e <memmove>:
 800cd2e:	4288      	cmp	r0, r1
 800cd30:	b510      	push	{r4, lr}
 800cd32:	eb01 0402 	add.w	r4, r1, r2
 800cd36:	d902      	bls.n	800cd3e <memmove+0x10>
 800cd38:	4284      	cmp	r4, r0
 800cd3a:	4623      	mov	r3, r4
 800cd3c:	d807      	bhi.n	800cd4e <memmove+0x20>
 800cd3e:	1e43      	subs	r3, r0, #1
 800cd40:	42a1      	cmp	r1, r4
 800cd42:	d008      	beq.n	800cd56 <memmove+0x28>
 800cd44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd48:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd4c:	e7f8      	b.n	800cd40 <memmove+0x12>
 800cd4e:	4601      	mov	r1, r0
 800cd50:	4402      	add	r2, r0
 800cd52:	428a      	cmp	r2, r1
 800cd54:	d100      	bne.n	800cd58 <memmove+0x2a>
 800cd56:	bd10      	pop	{r4, pc}
 800cd58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd60:	e7f7      	b.n	800cd52 <memmove+0x24>

0800cd62 <memchr>:
 800cd62:	4603      	mov	r3, r0
 800cd64:	b510      	push	{r4, lr}
 800cd66:	b2c9      	uxtb	r1, r1
 800cd68:	4402      	add	r2, r0
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	d101      	bne.n	800cd74 <memchr+0x12>
 800cd70:	2000      	movs	r0, #0
 800cd72:	e003      	b.n	800cd7c <memchr+0x1a>
 800cd74:	7804      	ldrb	r4, [r0, #0]
 800cd76:	3301      	adds	r3, #1
 800cd78:	428c      	cmp	r4, r1
 800cd7a:	d1f6      	bne.n	800cd6a <memchr+0x8>
 800cd7c:	bd10      	pop	{r4, pc}

0800cd7e <memcpy>:
 800cd7e:	440a      	add	r2, r1
 800cd80:	4291      	cmp	r1, r2
 800cd82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cd86:	d100      	bne.n	800cd8a <memcpy+0xc>
 800cd88:	4770      	bx	lr
 800cd8a:	b510      	push	{r4, lr}
 800cd8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd90:	4291      	cmp	r1, r2
 800cd92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd96:	d1f9      	bne.n	800cd8c <memcpy+0xe>
 800cd98:	bd10      	pop	{r4, pc}

0800cd9a <_malloc_usable_size_r>:
 800cd9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd9e:	1f18      	subs	r0, r3, #4
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bfbc      	itt	lt
 800cda4:	580b      	ldrlt	r3, [r1, r0]
 800cda6:	18c0      	addlt	r0, r0, r3
 800cda8:	4770      	bx	lr
	...

0800cdac <_init>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	bf00      	nop
 800cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb2:	bc08      	pop	{r3}
 800cdb4:	469e      	mov	lr, r3
 800cdb6:	4770      	bx	lr

0800cdb8 <_fini>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	bf00      	nop
 800cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdbe:	bc08      	pop	{r3}
 800cdc0:	469e      	mov	lr, r3
 800cdc2:	4770      	bx	lr
