
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc44  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  0800ce28  0800ce28  0001ce28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de1c  0800de1c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800de1c  0800de1c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de1c  0800de1c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de1c  0800de1c  0001de1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de20  0800de20  0001de20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800de24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  200000fc  0800df20  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800df20  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a8f  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000354e  00000000  00000000  00036bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  0003a148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6b  00000000  00000000  0003b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003c24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c39d  00000000  00000000  000588f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee9c  00000000  00000000  00074c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000526c  00000000  00000000  00113b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce10 	.word	0x0800ce10

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800ce10 	.word	0x0800ce10

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc50 	bl	8009af4 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fac8 	bl	80087ec <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003bc 	.word	0x200003bc
 80004c0:	2000020e 	.word	0x2000020e
 80004c4:	20000235 	.word	0x20000235
 80004c8:	20000238 	.word	0x20000238
 80004cc:	20000239 	.word	0x20000239
 80004d0:	2000023a 	.word	0x2000023a
 80004d4:	2000023b 	.word	0x2000023b
 80004d8:	2000023c 	.word	0x2000023c
 80004dc:	2000023d 	.word	0x2000023d
 80004e0:	2000024d 	.word	0x2000024d
 80004e4:	2000023e 	.word	0x2000023e
 80004e8:	2000024e 	.word	0x2000024e
 80004ec:	2000023f 	.word	0x2000023f
 80004f0:	2000024f 	.word	0x2000024f
 80004f4:	20000242 	.word	0x20000242
 80004f8:	20000243 	.word	0x20000243
 80004fc:	20000244 	.word	0x20000244
 8000500:	20000245 	.word	0x20000245
 8000504:	20000246 	.word	0x20000246
 8000508:	20000247 	.word	0x20000247
 800050c:	20000248 	.word	0x20000248
 8000510:	20000249 	.word	0x20000249
 8000514:	2000024a 	.word	0x2000024a
 8000518:	2000024b 	.word	0x2000024b
 800051c:	2000024c 	.word	0x2000024c
 8000520:	20000250 	.word	0x20000250
 8000524:	20000252 	.word	0x20000252
 8000528:	20000230 	.word	0x20000230
 800052c:	20000231 	.word	0x20000231
 8000530:	20000232 	.word	0x20000232
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000233 	.word	0x20000233
 8000540:	20000255 	.word	0x20000255
 8000544:	20000253 	.word	0x20000253
 8000548:	20000241 	.word	0x20000241
 800054c:	20000254 	.word	0x20000254
 8000550:	20000240 	.word	0x20000240
 8000554:	20000256 	.word	0x20000256
 8000558:	20000257 	.word	0x20000257
 800055c:	20000258 	.word	0x20000258
 8000560:	20000259 	.word	0x20000259
 8000564:	2000025a 	.word	0x2000025a
 8000568:	2000025b 	.word	0x2000025b
 800056c:	2000025c 	.word	0x2000025c
 8000570:	2000025d 	.word	0x2000025d
 8000574:	2000025e 	.word	0x2000025e
 8000578:	2000025f 	.word	0x2000025f
 800057c:	2000020d 	.word	0x2000020d
	}

	if(kapi1AcSure>5) {
 8000580:	4b6e      	ldr	r3, [pc, #440]	; (800073c <eepromKontrol+0x508>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b6c      	ldr	r3, [pc, #432]	; (800073c <eepromKontrol+0x508>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b6c      	ldr	r3, [pc, #432]	; (8000740 <eepromKontrol+0x50c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b6a      	ldr	r3, [pc, #424]	; (8000740 <eepromKontrol+0x50c>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b69      	ldr	r3, [pc, #420]	; (8000744 <eepromKontrol+0x510>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b67      	ldr	r3, [pc, #412]	; (8000744 <eepromKontrol+0x510>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b67      	ldr	r3, [pc, #412]	; (8000748 <eepromKontrol+0x514>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b65      	ldr	r3, [pc, #404]	; (8000748 <eepromKontrol+0x514>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b64      	ldr	r3, [pc, #400]	; (800074c <eepromKontrol+0x518>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b62      	ldr	r3, [pc, #392]	; (800074c <eepromKontrol+0x518>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b62      	ldr	r3, [pc, #392]	; (8000750 <eepromKontrol+0x51c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b60      	ldr	r3, [pc, #384]	; (8000750 <eepromKontrol+0x51c>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5f      	ldr	r3, [pc, #380]	; (8000754 <eepromKontrol+0x520>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5d      	ldr	r3, [pc, #372]	; (8000754 <eepromKontrol+0x520>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <eepromKontrol+0x524>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b5b      	ldr	r3, [pc, #364]	; (8000758 <eepromKontrol+0x524>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b5a      	ldr	r3, [pc, #360]	; (800075c <eepromKontrol+0x528>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b58      	ldr	r3, [pc, #352]	; (800075c <eepromKontrol+0x528>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <eepromKontrol+0x52c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <eepromKontrol+0x52c>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b55      	ldr	r3, [pc, #340]	; (8000764 <eepromKontrol+0x530>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b53      	ldr	r3, [pc, #332]	; (8000764 <eepromKontrol+0x530>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b53      	ldr	r3, [pc, #332]	; (8000768 <eepromKontrol+0x534>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b51      	ldr	r3, [pc, #324]	; (8000768 <eepromKontrol+0x534>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b50      	ldr	r3, [pc, #320]	; (800076c <eepromKontrol+0x538>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4e      	ldr	r3, [pc, #312]	; (800076c <eepromKontrol+0x538>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4e      	ldr	r3, [pc, #312]	; (8000770 <eepromKontrol+0x53c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b4c      	ldr	r3, [pc, #304]	; (8000770 <eepromKontrol+0x53c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <eepromKontrol+0x540>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b49      	ldr	r3, [pc, #292]	; (8000774 <eepromKontrol+0x540>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b49      	ldr	r3, [pc, #292]	; (8000778 <eepromKontrol+0x544>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b47      	ldr	r3, [pc, #284]	; (8000778 <eepromKontrol+0x544>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b46      	ldr	r3, [pc, #280]	; (800077c <eepromKontrol+0x548>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b44      	ldr	r3, [pc, #272]	; (800077c <eepromKontrol+0x548>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b44      	ldr	r3, [pc, #272]	; (8000780 <eepromKontrol+0x54c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b42      	ldr	r3, [pc, #264]	; (8000780 <eepromKontrol+0x54c>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b41      	ldr	r3, [pc, #260]	; (8000784 <eepromKontrol+0x550>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <eepromKontrol+0x550>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <eepromKontrol+0x554>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <eepromKontrol+0x554>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <eepromKontrol+0x558>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b3a      	ldr	r3, [pc, #232]	; (800078c <eepromKontrol+0x558>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <eepromKontrol+0x55c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b38      	ldr	r3, [pc, #224]	; (8000790 <eepromKontrol+0x55c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineIDInt, &eepromData[idStartPos], machineIDCharacterLimit); //destination, source, size
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <eepromKontrol+0x560>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a37      	ldr	r2, [pc, #220]	; (8000798 <eepromKontrol+0x564>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b37      	ldr	r3, [pc, #220]	; (800079c <eepromKontrol+0x568>)
 80006be:	6814      	ldr	r4, [r2, #0]
 80006c0:	6850      	ldr	r0, [r2, #4]
 80006c2:	6891      	ldr	r1, [r2, #8]
 80006c4:	601c      	str	r4, [r3, #0]
 80006c6:	6058      	str	r0, [r3, #4]
 80006c8:	6099      	str	r1, [r3, #8]
 80006ca:	7b12      	ldrb	r2, [r2, #12]
 80006cc:	731a      	strb	r2, [r3, #12]
	convertArrays(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 f86e 	bl	80007b0 <convertArrays>
	HAL_Delay(250);
 80006d4:	20fa      	movs	r0, #250	; 0xfa
 80006d6:	f008 f889 	bl	80087ec <HAL_Delay>
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit); //destination, source, size
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <eepromKontrol+0x56c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a2e      	ldr	r2, [pc, #184]	; (8000798 <eepromKontrol+0x564>)
 80006e0:	441a      	add	r2, r3
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <eepromKontrol+0x570>)
 80006e4:	6811      	ldr	r1, [r2, #0]
 80006e6:	6855      	ldr	r5, [r2, #4]
 80006e8:	6894      	ldr	r4, [r2, #8]
 80006ea:	68d0      	ldr	r0, [r2, #12]
 80006ec:	6019      	str	r1, [r3, #0]
 80006ee:	605d      	str	r5, [r3, #4]
 80006f0:	609c      	str	r4, [r3, #8]
 80006f2:	60d8      	str	r0, [r3, #12]
 80006f4:	6911      	ldr	r1, [r2, #16]
 80006f6:	6119      	str	r1, [r3, #16]
 80006f8:	7d12      	ldrb	r2, [r2, #20]
 80006fa:	751a      	strb	r2, [r3, #20]
	convertArrays(2);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f000 f857 	bl	80007b0 <convertArrays>
	HAL_Delay(250);
 8000702:	20fa      	movs	r0, #250	; 0xfa
 8000704:	f008 f872 	bl	80087ec <HAL_Delay>
	memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit); //destination, source, size
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <eepromKontrol+0x574>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a22      	ldr	r2, [pc, #136]	; (8000798 <eepromKontrol+0x564>)
 800070e:	441a      	add	r2, r3
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <eepromKontrol+0x578>)
 8000712:	6811      	ldr	r1, [r2, #0]
 8000714:	6855      	ldr	r5, [r2, #4]
 8000716:	6894      	ldr	r4, [r2, #8]
 8000718:	68d0      	ldr	r0, [r2, #12]
 800071a:	6019      	str	r1, [r3, #0]
 800071c:	605d      	str	r5, [r3, #4]
 800071e:	609c      	str	r4, [r3, #8]
 8000720:	60d8      	str	r0, [r3, #12]
 8000722:	6911      	ldr	r1, [r2, #16]
 8000724:	6119      	str	r1, [r3, #16]
 8000726:	7d12      	ldrb	r2, [r2, #20]
 8000728:	751a      	strb	r2, [r3, #20]
	convertArrays(3);
 800072a:	2003      	movs	r0, #3
 800072c:	f000 f840 	bl	80007b0 <convertArrays>
	HAL_Delay(250);
 8000730:	20fa      	movs	r0, #250	; 0xfa
 8000732:	f008 f85b 	bl	80087ec <HAL_Delay>
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bdb0      	pop	{r4, r5, r7, pc}
 800073c:	2000024d 	.word	0x2000024d
 8000740:	2000023e 	.word	0x2000023e
 8000744:	2000024e 	.word	0x2000024e
 8000748:	2000023f 	.word	0x2000023f
 800074c:	20000241 	.word	0x20000241
 8000750:	2000024f 	.word	0x2000024f
 8000754:	20000242 	.word	0x20000242
 8000758:	20000243 	.word	0x20000243
 800075c:	20000244 	.word	0x20000244
 8000760:	20000245 	.word	0x20000245
 8000764:	20000246 	.word	0x20000246
 8000768:	20000247 	.word	0x20000247
 800076c:	20000248 	.word	0x20000248
 8000770:	20000249 	.word	0x20000249
 8000774:	2000024a 	.word	0x2000024a
 8000778:	2000024b 	.word	0x2000024b
 800077c:	2000024c 	.word	0x2000024c
 8000780:	20000250 	.word	0x20000250
 8000784:	20000252 	.word	0x20000252
 8000788:	20000254 	.word	0x20000254
 800078c:	20000255 	.word	0x20000255
 8000790:	20000253 	.word	0x20000253
 8000794:	20000004 	.word	0x20000004
 8000798:	20000118 	.word	0x20000118
 800079c:	200001d0 	.word	0x200001d0
 80007a0:	20000008 	.word	0x20000008
 80007a4:	200001e0 	.word	0x200001e0
 80007a8:	2000000c 	.word	0x2000000c
 80007ac:	200001f8 	.word	0x200001f8

080007b0 <convertArrays>:

void convertArrays(int state) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d122      	bne.n	8000804 <convertArrays+0x54>
		memset(machineID, 0, machineID[0]);
 80007be:	4b37      	ldr	r3, [pc, #220]	; (800089c <convertArrays+0xec>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	4835      	ldr	r0, [pc, #212]	; (800089c <convertArrays+0xec>)
 80007c8:	f00b ff33 	bl	800c632 <memset>
		int eepromVal = idStartPos;
 80007cc:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <convertArrays+0xf0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<12; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	e011      	b.n	80007fc <convertArrays+0x4c>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 80007d8:	4a32      	ldr	r2, [pc, #200]	; (80008a4 <convertArrays+0xf4>)
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <convertArrays+0xf8>)
 80007e4:	5c99      	ldrb	r1, [r3, r2]
 80007e6:	4a2d      	ldr	r2, [pc, #180]	; (800089c <convertArrays+0xec>)
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	4413      	add	r3, r2
 80007ec:	460a      	mov	r2, r1
 80007ee:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	3301      	adds	r3, #1
 80007f4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<12; i++) {
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	2b0b      	cmp	r3, #11
 8000800:	ddea      	ble.n	80007d8 <convertArrays+0x28>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];

			eepromVal++;
		}
	}
}
 8000802:	e047      	b.n	8000894 <convertArrays+0xe4>
	} else if(state == 2) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d122      	bne.n	8000850 <convertArrays+0xa0>
		memset(wifiSSID, 0, wifiSSID[0]);
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <convertArrays+0xfc>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	4826      	ldr	r0, [pc, #152]	; (80008ac <convertArrays+0xfc>)
 8000814:	f00b ff0d 	bl	800c632 <memset>
		int eepromVal = ssidStartPos;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <convertArrays+0x100>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e011      	b.n	8000848 <convertArrays+0x98>
			wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000824:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <convertArrays+0xf4>)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <convertArrays+0x104>)
 8000830:	5c99      	ldrb	r1, [r3, r2]
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <convertArrays+0xfc>)
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	4413      	add	r3, r2
 8000838:	460a      	mov	r2, r1
 800083a:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	3301      	adds	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	3301      	adds	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	2b13      	cmp	r3, #19
 800084c:	ddea      	ble.n	8000824 <convertArrays+0x74>
}
 800084e:	e021      	b.n	8000894 <convertArrays+0xe4>
		memset(wifiPass, 0, wifiPass[0]);
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <convertArrays+0x108>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	4817      	ldr	r0, [pc, #92]	; (80008b8 <convertArrays+0x108>)
 800085a:	f00b feea 	bl	800c632 <memset>
		int eepromVal = passStartPos;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <convertArrays+0x10c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	e011      	b.n	800088e <convertArrays+0xde>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <convertArrays+0xf4>)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <convertArrays+0x104>)
 8000876:	5c99      	ldrb	r1, [r3, r2]
 8000878:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <convertArrays+0x108>)
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	4413      	add	r3, r2
 800087e:	460a      	mov	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3301      	adds	r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b13      	cmp	r3, #19
 8000892:	ddea      	ble.n	800086a <convertArrays+0xba>
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000190 	.word	0x20000190
 80008a0:	20000004 	.word	0x20000004
 80008a4:	20000118 	.word	0x20000118
 80008a8:	20000010 	.word	0x20000010
 80008ac:	200001a0 	.word	0x200001a0
 80008b0:	20000008 	.word	0x20000008
 80008b4:	2000001c 	.word	0x2000001c
 80008b8:	200001b8 	.word	0x200001b8
 80008bc:	2000000c 	.word	0x2000000c

080008c0 <resetEEPROM4Wifi>:
	} else {
		//wifi pass convert
	}
}

void resetEEPROM4Wifi(int state) {
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d11e      	bne.n	800090c <resetEEPROM4Wifi+0x4c>
		int eepromVal = idStartPos;
 80008ce:	4b32      	ldr	r3, [pc, #200]	; (8000998 <resetEEPROM4Wifi+0xd8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	e014      	b.n	8000904 <resetEEPROM4Wifi+0x44>
			machineID[i] = '\0';
 80008da:	4a30      	ldr	r2, [pc, #192]	; (800099c <resetEEPROM4Wifi+0xdc>)
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	4413      	add	r3, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
			machineIDInt[i] = '\0';
 80008e4:	4a2e      	ldr	r2, [pc, #184]	; (80009a0 <resetEEPROM4Wifi+0xe0>)
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	4413      	add	r3, r2
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008ee:	4a2d      	ldr	r2, [pc, #180]	; (80009a4 <resetEEPROM4Wifi+0xe4>)
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	4413      	add	r3, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	3301      	adds	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	3301      	adds	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	2b0c      	cmp	r3, #12
 8000908:	dde7      	ble.n	80008da <resetEEPROM4Wifi+0x1a>
			wifiPassInt[i] = '\0';
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 800090a:	e03f      	b.n	800098c <resetEEPROM4Wifi+0xcc>
	} else if(state == 2) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d11e      	bne.n	8000950 <resetEEPROM4Wifi+0x90>
		int eepromVal = ssidStartPos;
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <resetEEPROM4Wifi+0xe8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	e014      	b.n	8000948 <resetEEPROM4Wifi+0x88>
			wifiSSID[i] = '\0';
 800091e:	4a23      	ldr	r2, [pc, #140]	; (80009ac <resetEEPROM4Wifi+0xec>)
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	4413      	add	r3, r2
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
			wifiSSIDInt[i] = '\0';
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <resetEEPROM4Wifi+0xf0>)
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	4413      	add	r3, r2
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000932:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <resetEEPROM4Wifi+0xe4>)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	4413      	add	r3, r2
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	3301      	adds	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	3301      	adds	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	2b14      	cmp	r3, #20
 800094c:	dde7      	ble.n	800091e <resetEEPROM4Wifi+0x5e>
}
 800094e:	e01d      	b.n	800098c <resetEEPROM4Wifi+0xcc>
		int eepromVal = passStartPos;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <resetEEPROM4Wifi+0xf4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	e014      	b.n	8000986 <resetEEPROM4Wifi+0xc6>
			wifiPass[i] = '\0';
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <resetEEPROM4Wifi+0xf8>)
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4413      	add	r3, r2
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
			wifiPassInt[i] = '\0';
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <resetEEPROM4Wifi+0xfc>)
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4413      	add	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000970:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <resetEEPROM4Wifi+0xe4>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4413      	add	r3, r2
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3301      	adds	r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2b14      	cmp	r3, #20
 800098a:	dde7      	ble.n	800095c <resetEEPROM4Wifi+0x9c>
}
 800098c:	bf00      	nop
 800098e:	3724      	adds	r7, #36	; 0x24
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000004 	.word	0x20000004
 800099c:	20000190 	.word	0x20000190
 80009a0:	200001d0 	.word	0x200001d0
 80009a4:	20000118 	.word	0x20000118
 80009a8:	20000008 	.word	0x20000008
 80009ac:	200001a0 	.word	0x200001a0
 80009b0:	200001e0 	.word	0x200001e0
 80009b4:	2000000c 	.word	0x2000000c
 80009b8:	200001b8 	.word	0x200001b8
 80009bc:	200001f8 	.word	0x200001f8

080009c0 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b0c9      	sub	sp, #292	; 0x124
 80009c4:	af04      	add	r7, sp, #16
 80009c6:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80009ca:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80009ce:	6020      	str	r0, [r4, #0]
 80009d0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80009d4:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80009d8:	6001      	str	r1, [r0, #0]
 80009da:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80009de:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80009e2:	600a      	str	r2, [r1, #0]
 80009e4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009e8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009ec:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009ee:	4a36      	ldr	r2, [pc, #216]	; (8000ac8 <sendMachineData+0x108>)
 80009f0:	4936      	ldr	r1, [pc, #216]	; (8000acc <sendMachineData+0x10c>)
 80009f2:	4837      	ldr	r0, [pc, #220]	; (8000ad0 <sendMachineData+0x110>)
 80009f4:	f00b fdac 	bl	800c550 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f8:	4835      	ldr	r0, [pc, #212]	; (8000ad0 <sendMachineData+0x110>)
 80009fa:	f7ff fc13 	bl	8000224 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a0a:	4931      	ldr	r1, [pc, #196]	; (8000ad0 <sendMachineData+0x110>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	f00a ffb9 	bl	800b984 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a12:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a16:	f007 fee9 	bl	80087ec <HAL_Delay>

	sprintf(local_txA,
 8000a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a22:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a26:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000a2a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000a2e:	4929      	ldr	r1, [pc, #164]	; (8000ad4 <sendMachineData+0x114>)
 8000a30:	9102      	str	r1, [sp, #8]
 8000a32:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000a36:	9101      	str	r1, [sp, #4]
 8000a38:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a3c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a40:	6809      	ldr	r1, [r1, #0]
 8000a42:	9100      	str	r1, [sp, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	4923      	ldr	r1, [pc, #140]	; (8000ad8 <sendMachineData+0x118>)
 8000a4a:	f00b fd81 	bl	800c550 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbe6 	bl	8000224 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a66:	491d      	ldr	r1, [pc, #116]	; (8000adc <sendMachineData+0x11c>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f00b fd71 	bl	800c550 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fbd6 	bl	8000224 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	f107 0110 	add.w	r1, r7, #16
 8000a80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	f00a ff7b 	bl	800b984 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a8e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a92:	f007 feab 	bl	80087ec <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fbc2 	bl	8000224 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000aa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	f00a ff67 	bl	800b984 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000ab6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aba:	f007 fe97 	bl	80087ec <HAL_Delay>
}
 8000abe:	bf00      	nop
 8000ac0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	0800ce78 	.word	0x0800ce78
 8000acc:	0800ce88 	.word	0x0800ce88
 8000ad0:	20000298 	.word	0x20000298
 8000ad4:	0800cf1c 	.word	0x0800cf1c
 8000ad8:	0800cea8 	.word	0x0800cea8
 8000adc:	0800cf30 	.word	0x0800cf30

08000ae0 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af04      	add	r7, sp, #16
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <hata2EEPROM+0xa4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <hata2EEPROM+0xa8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a25      	ldr	r2, [pc, #148]	; (8000b8c <hata2EEPROM+0xac>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000afe:	f000 f92b 	bl	8000d58 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000b02:	e000      	b.n	8000b06 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000b04:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	e012      	b.n	8000b32 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <hata2EEPROM+0xa8>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <hata2EEPROM+0xac>)
 8000b16:	5cd3      	ldrb	r3, [r2, r3]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d107      	bne.n	8000b2c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <hata2EEPROM+0xa8>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	4919      	ldr	r1, [pc, #100]	; (8000b8c <hata2EEPROM+0xac>)
 8000b26:	79fa      	ldrb	r2, [r7, #7]
 8000b28:	54ca      	strb	r2, [r1, r3]
					break;
 8000b2a:	e007      	b.n	8000b3c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <hata2EEPROM+0xa4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbe7      	blt.n	8000b0c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <hata2EEPROM+0xa8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	b299      	uxth	r1, r3
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <hata2EEPROM+0xa4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	b298      	uxth	r0, r3
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <hata2EEPROM+0xa8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <hata2EEPROM+0xac>)
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <hata2EEPROM+0xa4>)
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	b292      	uxth	r2, r2
 8000b56:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b5a:	9402      	str	r4, [sp, #8]
 8000b5c:	9201      	str	r2, [sp, #4]
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	4603      	mov	r3, r0
 8000b62:	460a      	mov	r2, r1
 8000b64:	21a0      	movs	r1, #160	; 0xa0
 8000b66:	480a      	ldr	r0, [pc, #40]	; (8000b90 <hata2EEPROM+0xb0>)
 8000b68:	f008 feca 	bl	8009900 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b70:	f007 fe3c 	bl	80087ec <HAL_Delay>
	eepromKontrol(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fb5d 	bl	8000234 <eepromKontrol>
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000098 	.word	0x20000098
 8000b88:	2000009c 	.word	0x2000009c
 8000b8c:	20000118 	.word	0x20000118
 8000b90:	200003bc 	.word	0x200003bc

08000b94 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d11d      	bne.n	8000be0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000ba4:	4b62      	ldr	r3, [pc, #392]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000bac:	4a61      	ldr	r2, [pc, #388]	; (8000d34 <hataKoduLcdGoster+0x1a0>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f007 f8c5 	bl	8007d40 <lcd_print>
 8000bb6:	e008      	b.n	8000bca <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000bb8:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d104      	bne.n	8000bca <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000bc0:	4a5d      	ldr	r2, [pc, #372]	; (8000d38 <hataKoduLcdGoster+0x1a4>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f007 f8bb 	bl	8007d40 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000bca:	4a5c      	ldr	r2, [pc, #368]	; (8000d3c <hataKoduLcdGoster+0x1a8>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f007 f8b6 	bl	8007d40 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bd4:	4a5a      	ldr	r2, [pc, #360]	; (8000d40 <hataKoduLcdGoster+0x1ac>)
 8000bd6:	2107      	movs	r1, #7
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f007 f8b1 	bl	8007d40 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bde:	e0a3      	b.n	8000d28 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d11d      	bne.n	8000c22 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000be6:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d105      	bne.n	8000bfa <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000bee:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <hataKoduLcdGoster+0x1a0>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f007 f8a4 	bl	8007d40 <lcd_print>
 8000bf8:	e008      	b.n	8000c0c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d104      	bne.n	8000c0c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000c02:	4a4d      	ldr	r2, [pc, #308]	; (8000d38 <hataKoduLcdGoster+0x1a4>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	2001      	movs	r0, #1
 8000c08:	f007 f89a 	bl	8007d40 <lcd_print>
		lcd_print(2, 2, "2");
 8000c0c:	4a4d      	ldr	r2, [pc, #308]	; (8000d44 <hataKoduLcdGoster+0x1b0>)
 8000c0e:	2102      	movs	r1, #2
 8000c10:	2002      	movs	r0, #2
 8000c12:	f007 f895 	bl	8007d40 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c16:	4a4a      	ldr	r2, [pc, #296]	; (8000d40 <hataKoduLcdGoster+0x1ac>)
 8000c18:	2107      	movs	r1, #7
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f007 f890 	bl	8007d40 <lcd_print>
}
 8000c20:	e082      	b.n	8000d28 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d11d      	bne.n	8000c64 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000c28:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d105      	bne.n	8000c3c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c30:	4a40      	ldr	r2, [pc, #256]	; (8000d34 <hataKoduLcdGoster+0x1a0>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	2001      	movs	r0, #1
 8000c36:	f007 f883 	bl	8007d40 <lcd_print>
 8000c3a:	e008      	b.n	8000c4e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c3c:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d104      	bne.n	8000c4e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c44:	4a3c      	ldr	r2, [pc, #240]	; (8000d38 <hataKoduLcdGoster+0x1a4>)
 8000c46:	2101      	movs	r1, #1
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f007 f879 	bl	8007d40 <lcd_print>
		lcd_print(2, 3, "3");
 8000c4e:	4a3e      	ldr	r2, [pc, #248]	; (8000d48 <hataKoduLcdGoster+0x1b4>)
 8000c50:	2103      	movs	r1, #3
 8000c52:	2002      	movs	r0, #2
 8000c54:	f007 f874 	bl	8007d40 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c58:	4a39      	ldr	r2, [pc, #228]	; (8000d40 <hataKoduLcdGoster+0x1ac>)
 8000c5a:	2107      	movs	r1, #7
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f007 f86f 	bl	8007d40 <lcd_print>
}
 8000c62:	e061      	b.n	8000d28 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d11d      	bne.n	8000ca6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d105      	bne.n	8000c7e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c72:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <hataKoduLcdGoster+0x1a0>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	2001      	movs	r0, #1
 8000c78:	f007 f862 	bl	8007d40 <lcd_print>
 8000c7c:	e008      	b.n	8000c90 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d104      	bne.n	8000c90 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c86:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <hataKoduLcdGoster+0x1a4>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f007 f858 	bl	8007d40 <lcd_print>
		lcd_print(2, 4, "4");
 8000c90:	4a2e      	ldr	r2, [pc, #184]	; (8000d4c <hataKoduLcdGoster+0x1b8>)
 8000c92:	2104      	movs	r1, #4
 8000c94:	2002      	movs	r0, #2
 8000c96:	f007 f853 	bl	8007d40 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c9a:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <hataKoduLcdGoster+0x1ac>)
 8000c9c:	2107      	movs	r1, #7
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f007 f84e 	bl	8007d40 <lcd_print>
}
 8000ca4:	e040      	b.n	8000d28 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	d11d      	bne.n	8000ce8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d105      	bne.n	8000cc0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <hataKoduLcdGoster+0x1a0>)
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f007 f841 	bl	8007d40 <lcd_print>
 8000cbe:	e008      	b.n	8000cd2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <hataKoduLcdGoster+0x1a4>)
 8000cca:	2101      	movs	r1, #1
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f007 f837 	bl	8007d40 <lcd_print>
		lcd_print(2, 5, "5");
 8000cd2:	4a1f      	ldr	r2, [pc, #124]	; (8000d50 <hataKoduLcdGoster+0x1bc>)
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f007 f832 	bl	8007d40 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cdc:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <hataKoduLcdGoster+0x1ac>)
 8000cde:	2107      	movs	r1, #7
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f007 f82d 	bl	8007d40 <lcd_print>
}
 8000ce6:	e01f      	b.n	8000d28 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d11c      	bne.n	8000d28 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <hataKoduLcdGoster+0x1a0>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f007 f820 	bl	8007d40 <lcd_print>
 8000d00:	e008      	b.n	8000d14 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <hataKoduLcdGoster+0x19c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d104      	bne.n	8000d14 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <hataKoduLcdGoster+0x1a4>)
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f007 f816 	bl	8007d40 <lcd_print>
		lcd_print(2, 6, "6");
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <hataKoduLcdGoster+0x1c0>)
 8000d16:	2106      	movs	r1, #6
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f007 f811 	bl	8007d40 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <hataKoduLcdGoster+0x1ac>)
 8000d20:	2107      	movs	r1, #7
 8000d22:	2002      	movs	r0, #2
 8000d24:	f007 f80c 	bl	8007d40 <lcd_print>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000255 	.word	0x20000255
 8000d34:	0800cfbc 	.word	0x0800cfbc
 8000d38:	0800cfcc 	.word	0x0800cfcc
 8000d3c:	0800cfdc 	.word	0x0800cfdc
 8000d40:	0800cfe0 	.word	0x0800cfe0
 8000d44:	0800cfec 	.word	0x0800cfec
 8000d48:	0800cff0 	.word	0x0800cff0
 8000d4c:	0800cff4 	.word	0x0800cff4
 8000d50:	0800cff8 	.word	0x0800cff8
 8000d54:	0800cffc 	.word	0x0800cffc

08000d58 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e009      	b.n	8000d78 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <eepromDataFillWithEmpty+0x38>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6c:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <eepromDataFillWithEmpty+0x3c>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3301      	adds	r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <eepromDataFillWithEmpty+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	dbf0      	blt.n	8000d64 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000070 	.word	0x20000070
 8000d94:	20000118 	.word	0x20000118
 8000d98:	20000098 	.word	0x20000098

08000d9c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000dae:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <i2cTest+0x154>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b4e      	ldr	r3, [pc, #312]	; (8000ef0 <i2cTest+0x154>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0201 	bic.w	r2, r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000dbe:	484c      	ldr	r0, [pc, #304]	; (8000ef0 <i2cTest+0x154>)
 8000dc0:	f008 fc70 	bl	80096a4 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000dc8:	2311      	movs	r3, #17
 8000dca:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4846      	ldr	r0, [pc, #280]	; (8000ef4 <i2cTest+0x158>)
 8000dda:	f008 f877 	bl	8008ecc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	4844      	ldr	r0, [pc, #272]	; (8000ef4 <i2cTest+0x158>)
 8000de4:	f008 fae9 	bl	80093ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	4841      	ldr	r0, [pc, #260]	; (8000ef4 <i2cTest+0x158>)
 8000dee:	f008 fae4 	bl	80093ba <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f007 fcfa 	bl	80087ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000df8:	bf00      	nop
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	483d      	ldr	r0, [pc, #244]	; (8000ef4 <i2cTest+0x158>)
 8000dfe:	f008 fac5 	bl	800938c <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d006      	beq.n	8000e16 <i2cTest+0x7a>
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	483a      	ldr	r0, [pc, #232]	; (8000ef4 <i2cTest+0x158>)
 8000e0c:	f008 fabe 	bl	800938c <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d1f1      	bne.n	8000dfa <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	4836      	ldr	r0, [pc, #216]	; (8000ef4 <i2cTest+0x158>)
 8000e1c:	f008 facd 	bl	80093ba <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000e20:	200a      	movs	r0, #10
 8000e22:	f007 fce3 	bl	80087ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e26:	bf00      	nop
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	4832      	ldr	r0, [pc, #200]	; (8000ef4 <i2cTest+0x158>)
 8000e2c:	f008 faae 	bl	800938c <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d0f8      	beq.n	8000e28 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <i2cTest+0x158>)
 8000e3c:	f008 fabd 	bl	80093ba <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e40:	200a      	movs	r0, #10
 8000e42:	f007 fcd3 	bl	80087ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e46:	bf00      	nop
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	482a      	ldr	r0, [pc, #168]	; (8000ef4 <i2cTest+0x158>)
 8000e4c:	f008 fa9e 	bl	800938c <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d0f8      	beq.n	8000e48 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <i2cTest+0x158>)
 8000e5c:	f008 faad 	bl	80093ba <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f007 fcc3 	bl	80087ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e66:	bf00      	nop
 8000e68:	2140      	movs	r1, #64	; 0x40
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <i2cTest+0x158>)
 8000e6c:	f008 fa8e 	bl	800938c <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d1f8      	bne.n	8000e68 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	481e      	ldr	r0, [pc, #120]	; (8000ef4 <i2cTest+0x158>)
 8000e7c:	f008 fa9d 	bl	80093ba <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e80:	200a      	movs	r0, #10
 8000e82:	f007 fcb3 	bl	80087ec <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e86:	bf00      	nop
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <i2cTest+0x158>)
 8000e8c:	f008 fa7e 	bl	800938c <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d1f8      	bne.n	8000e88 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e96:	23c0      	movs	r3, #192	; 0xc0
 8000e98:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e9a:	2312      	movs	r3, #18
 8000e9c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <i2cTest+0x158>)
 8000eac:	f008 f80e 	bl	8008ecc <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <i2cTest+0x154>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <i2cTest+0x154>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ebe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <i2cTest+0x154>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <i2cTest+0x154>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ece:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <i2cTest+0x154>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <i2cTest+0x154>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <i2cTest+0x154>)
 8000ee2:	f008 fa9b 	bl	800941c <HAL_I2C_Init>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200003bc 	.word	0x200003bc
 8000ef4:	40010c00 	.word	0x40010c00

08000ef8 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000f02:	20c8      	movs	r0, #200	; 0xc8
 8000f04:	f007 fc72 	bl	80087ec <HAL_Delay>
	lcd_clear();
 8000f08:	f006 ff46 	bl	8007d98 <lcd_clear>
	if(type == 1 && page == 0) {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d143      	bne.n	8000f9a <printTemplate+0xa2>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d140      	bne.n	8000f9a <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000f18:	4a9d      	ldr	r2, [pc, #628]	; (8001190 <printTemplate+0x298>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f006 ff0f 	bl	8007d40 <lcd_print>
		lcd_print(2, 3, "0");
 8000f22:	4a9c      	ldr	r2, [pc, #624]	; (8001194 <printTemplate+0x29c>)
 8000f24:	2103      	movs	r1, #3
 8000f26:	2002      	movs	r0, #2
 8000f28:	f006 ff0a 	bl	8007d40 <lcd_print>
		lcd_print(2, 4, "1");
 8000f2c:	4a9a      	ldr	r2, [pc, #616]	; (8001198 <printTemplate+0x2a0>)
 8000f2e:	2104      	movs	r1, #4
 8000f30:	2002      	movs	r0, #2
 8000f32:	f006 ff05 	bl	8007d40 <lcd_print>
		lcd_print(2, 5, "2");
 8000f36:	4a99      	ldr	r2, [pc, #612]	; (800119c <printTemplate+0x2a4>)
 8000f38:	2105      	movs	r1, #5
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f006 ff00 	bl	8007d40 <lcd_print>
		lcd_print(2, 6, "3");
 8000f40:	4a97      	ldr	r2, [pc, #604]	; (80011a0 <printTemplate+0x2a8>)
 8000f42:	2106      	movs	r1, #6
 8000f44:	2002      	movs	r0, #2
 8000f46:	f006 fefb 	bl	8007d40 <lcd_print>
		lcd_print(2, 7, "4");
 8000f4a:	4a96      	ldr	r2, [pc, #600]	; (80011a4 <printTemplate+0x2ac>)
 8000f4c:	2107      	movs	r1, #7
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f006 fef6 	bl	8007d40 <lcd_print>
		lcd_print(2, 10, "5");
 8000f54:	4a94      	ldr	r2, [pc, #592]	; (80011a8 <printTemplate+0x2b0>)
 8000f56:	210a      	movs	r1, #10
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f006 fef1 	bl	8007d40 <lcd_print>
		lcd_print(2, 11, "6");
 8000f5e:	4a93      	ldr	r2, [pc, #588]	; (80011ac <printTemplate+0x2b4>)
 8000f60:	210b      	movs	r1, #11
 8000f62:	2002      	movs	r0, #2
 8000f64:	f006 feec 	bl	8007d40 <lcd_print>
		lcd_print(2, 12, "7");
 8000f68:	4a91      	ldr	r2, [pc, #580]	; (80011b0 <printTemplate+0x2b8>)
 8000f6a:	210c      	movs	r1, #12
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f006 fee7 	bl	8007d40 <lcd_print>
		lcd_print(2, 13, "8");
 8000f72:	4a90      	ldr	r2, [pc, #576]	; (80011b4 <printTemplate+0x2bc>)
 8000f74:	210d      	movs	r1, #13
 8000f76:	2002      	movs	r0, #2
 8000f78:	f006 fee2 	bl	8007d40 <lcd_print>
		lcd_print(2, 14, "9");
 8000f7c:	4a8e      	ldr	r2, [pc, #568]	; (80011b8 <printTemplate+0x2c0>)
 8000f7e:	210e      	movs	r1, #14
 8000f80:	2002      	movs	r0, #2
 8000f82:	f006 fedd 	bl	8007d40 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f86:	4a8d      	ldr	r2, [pc, #564]	; (80011bc <printTemplate+0x2c4>)
 8000f88:	2105      	movs	r1, #5
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f006 fed8 	bl	8007d40 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f90:	2103      	movs	r1, #3
 8000f92:	2002      	movs	r0, #2
 8000f94:	f006 feb5 	bl	8007d02 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f98:	e0f5      	b.n	8001186 <printTemplate+0x28e>
	} else if(type == 2) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d178      	bne.n	8001092 <printTemplate+0x19a>
		if(page == 1) {
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d114      	bne.n	8000fd0 <printTemplate+0xd8>
			lcd_clear();
 8000fa6:	f006 fef7 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	; 0x64
 8000fac:	f007 fc1e 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fb0:	4a83      	ldr	r2, [pc, #524]	; (80011c0 <printTemplate+0x2c8>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f006 fec3 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fba:	4a82      	ldr	r2, [pc, #520]	; (80011c4 <printTemplate+0x2cc>)
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f006 febe 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fc4:	4a80      	ldr	r2, [pc, #512]	; (80011c8 <printTemplate+0x2d0>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f006 feb9 	bl	8007d40 <lcd_print>
}
 8000fce:	e0da      	b.n	8001186 <printTemplate+0x28e>
		} else if(page == 2) {
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d114      	bne.n	8001000 <printTemplate+0x108>
			lcd_clear();
 8000fd6:	f006 fedf 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f007 fc06 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fe0:	4a77      	ldr	r2, [pc, #476]	; (80011c0 <printTemplate+0x2c8>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f006 feab 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fea:	4a76      	ldr	r2, [pc, #472]	; (80011c4 <printTemplate+0x2cc>)
 8000fec:	2107      	movs	r1, #7
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f006 fea6 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ff4:	4a75      	ldr	r2, [pc, #468]	; (80011cc <printTemplate+0x2d4>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f006 fea1 	bl	8007d40 <lcd_print>
}
 8000ffe:	e0c2      	b.n	8001186 <printTemplate+0x28e>
		} else if(page == 3) {
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d114      	bne.n	8001030 <printTemplate+0x138>
			lcd_clear();
 8001006:	f006 fec7 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 800100a:	2064      	movs	r0, #100	; 0x64
 800100c:	f007 fbee 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001010:	4a6b      	ldr	r2, [pc, #428]	; (80011c0 <printTemplate+0x2c8>)
 8001012:	2101      	movs	r1, #1
 8001014:	2001      	movs	r0, #1
 8001016:	f006 fe93 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800101a:	4a6a      	ldr	r2, [pc, #424]	; (80011c4 <printTemplate+0x2cc>)
 800101c:	2107      	movs	r1, #7
 800101e:	2001      	movs	r0, #1
 8001020:	f006 fe8e 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001024:	4a6a      	ldr	r2, [pc, #424]	; (80011d0 <printTemplate+0x2d8>)
 8001026:	2101      	movs	r1, #1
 8001028:	2002      	movs	r0, #2
 800102a:	f006 fe89 	bl	8007d40 <lcd_print>
}
 800102e:	e0aa      	b.n	8001186 <printTemplate+0x28e>
		} else if(page == 4) {
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d114      	bne.n	8001060 <printTemplate+0x168>
			lcd_clear();
 8001036:	f006 feaf 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f007 fbd6 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001040:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <printTemplate+0x2c8>)
 8001042:	2101      	movs	r1, #1
 8001044:	2001      	movs	r0, #1
 8001046:	f006 fe7b 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800104a:	4a5e      	ldr	r2, [pc, #376]	; (80011c4 <printTemplate+0x2cc>)
 800104c:	2107      	movs	r1, #7
 800104e:	2001      	movs	r0, #1
 8001050:	f006 fe76 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001054:	4a5f      	ldr	r2, [pc, #380]	; (80011d4 <printTemplate+0x2dc>)
 8001056:	2101      	movs	r1, #1
 8001058:	2002      	movs	r0, #2
 800105a:	f006 fe71 	bl	8007d40 <lcd_print>
}
 800105e:	e092      	b.n	8001186 <printTemplate+0x28e>
		} else if(page == 5) {
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b05      	cmp	r3, #5
 8001064:	f040 808f 	bne.w	8001186 <printTemplate+0x28e>
			lcd_clear();
 8001068:	f006 fe96 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f007 fbbd 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001072:	4a53      	ldr	r2, [pc, #332]	; (80011c0 <printTemplate+0x2c8>)
 8001074:	2101      	movs	r1, #1
 8001076:	2001      	movs	r0, #1
 8001078:	f006 fe62 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800107c:	4a51      	ldr	r2, [pc, #324]	; (80011c4 <printTemplate+0x2cc>)
 800107e:	2107      	movs	r1, #7
 8001080:	2001      	movs	r0, #1
 8001082:	f006 fe5d 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001086:	4a54      	ldr	r2, [pc, #336]	; (80011d8 <printTemplate+0x2e0>)
 8001088:	2101      	movs	r1, #1
 800108a:	2002      	movs	r0, #2
 800108c:	f006 fe58 	bl	8007d40 <lcd_print>
}
 8001090:	e079      	b.n	8001186 <printTemplate+0x28e>
	} else if(type == 3) {
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d176      	bne.n	8001186 <printTemplate+0x28e>
		if(page == 1) {
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d114      	bne.n	80010c8 <printTemplate+0x1d0>
			lcd_clear();
 800109e:	f006 fe7b 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 80010a2:	2064      	movs	r0, #100	; 0x64
 80010a4:	f007 fba2 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010a8:	4a4c      	ldr	r2, [pc, #304]	; (80011dc <printTemplate+0x2e4>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	2001      	movs	r0, #1
 80010ae:	f006 fe47 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010b2:	4a4b      	ldr	r2, [pc, #300]	; (80011e0 <printTemplate+0x2e8>)
 80010b4:	2107      	movs	r1, #7
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fe42 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010bc:	4a42      	ldr	r2, [pc, #264]	; (80011c8 <printTemplate+0x2d0>)
 80010be:	2101      	movs	r1, #1
 80010c0:	2002      	movs	r0, #2
 80010c2:	f006 fe3d 	bl	8007d40 <lcd_print>
}
 80010c6:	e05e      	b.n	8001186 <printTemplate+0x28e>
		} else if(page == 2) {
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d114      	bne.n	80010f8 <printTemplate+0x200>
			lcd_clear();
 80010ce:	f006 fe63 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	; 0x64
 80010d4:	f007 fb8a 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010d8:	4a40      	ldr	r2, [pc, #256]	; (80011dc <printTemplate+0x2e4>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2001      	movs	r0, #1
 80010de:	f006 fe2f 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010e2:	4a3f      	ldr	r2, [pc, #252]	; (80011e0 <printTemplate+0x2e8>)
 80010e4:	2107      	movs	r1, #7
 80010e6:	2001      	movs	r0, #1
 80010e8:	f006 fe2a 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010ec:	4a37      	ldr	r2, [pc, #220]	; (80011cc <printTemplate+0x2d4>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	2002      	movs	r0, #2
 80010f2:	f006 fe25 	bl	8007d40 <lcd_print>
}
 80010f6:	e046      	b.n	8001186 <printTemplate+0x28e>
		} else if(page == 3) {
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d114      	bne.n	8001128 <printTemplate+0x230>
			lcd_clear();
 80010fe:	f006 fe4b 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f007 fb72 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001108:	4a34      	ldr	r2, [pc, #208]	; (80011dc <printTemplate+0x2e4>)
 800110a:	2101      	movs	r1, #1
 800110c:	2001      	movs	r0, #1
 800110e:	f006 fe17 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001112:	4a33      	ldr	r2, [pc, #204]	; (80011e0 <printTemplate+0x2e8>)
 8001114:	2107      	movs	r1, #7
 8001116:	2001      	movs	r0, #1
 8001118:	f006 fe12 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 800111c:	4a2c      	ldr	r2, [pc, #176]	; (80011d0 <printTemplate+0x2d8>)
 800111e:	2101      	movs	r1, #1
 8001120:	2002      	movs	r0, #2
 8001122:	f006 fe0d 	bl	8007d40 <lcd_print>
}
 8001126:	e02e      	b.n	8001186 <printTemplate+0x28e>
		} else if(page == 4) {
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d114      	bne.n	8001158 <printTemplate+0x260>
			lcd_clear();
 800112e:	f006 fe33 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f007 fb5a 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001138:	4a28      	ldr	r2, [pc, #160]	; (80011dc <printTemplate+0x2e4>)
 800113a:	2101      	movs	r1, #1
 800113c:	2001      	movs	r0, #1
 800113e:	f006 fdff 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001142:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <printTemplate+0x2e8>)
 8001144:	2107      	movs	r1, #7
 8001146:	2001      	movs	r0, #1
 8001148:	f006 fdfa 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <printTemplate+0x2dc>)
 800114e:	2101      	movs	r1, #1
 8001150:	2002      	movs	r0, #2
 8001152:	f006 fdf5 	bl	8007d40 <lcd_print>
}
 8001156:	e016      	b.n	8001186 <printTemplate+0x28e>
		} else if(page == 5) {
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b05      	cmp	r3, #5
 800115c:	d113      	bne.n	8001186 <printTemplate+0x28e>
			lcd_clear();
 800115e:	f006 fe1b 	bl	8007d98 <lcd_clear>
			HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f007 fb42 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001168:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <printTemplate+0x2e4>)
 800116a:	2101      	movs	r1, #1
 800116c:	2001      	movs	r0, #1
 800116e:	f006 fde7 	bl	8007d40 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <printTemplate+0x2e8>)
 8001174:	2107      	movs	r1, #7
 8001176:	2001      	movs	r0, #1
 8001178:	f006 fde2 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <printTemplate+0x2e0>)
 800117e:	2101      	movs	r1, #1
 8001180:	2002      	movs	r0, #2
 8001182:	f006 fddd 	bl	8007d40 <lcd_print>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0800d000 	.word	0x0800d000
 8001194:	0800d008 	.word	0x0800d008
 8001198:	0800d00c 	.word	0x0800d00c
 800119c:	0800d010 	.word	0x0800d010
 80011a0:	0800d014 	.word	0x0800d014
 80011a4:	0800d018 	.word	0x0800d018
 80011a8:	0800d01c 	.word	0x0800d01c
 80011ac:	0800d020 	.word	0x0800d020
 80011b0:	0800d024 	.word	0x0800d024
 80011b4:	0800d028 	.word	0x0800d028
 80011b8:	0800d02c 	.word	0x0800d02c
 80011bc:	20000190 	.word	0x20000190
 80011c0:	0800d030 	.word	0x0800d030
 80011c4:	200001a0 	.word	0x200001a0
 80011c8:	0800d038 	.word	0x0800d038
 80011cc:	0800d04c 	.word	0x0800d04c
 80011d0:	0800d060 	.word	0x0800d060
 80011d4:	0800d074 	.word	0x0800d074
 80011d8:	0800d088 	.word	0x0800d088
 80011dc:	0800d09c 	.word	0x0800d09c
 80011e0:	200001b8 	.word	0x200001b8

080011e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011e8:	f3bf 8f4f 	dsb	sy
}
 80011ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <__NVIC_SystemReset+0x24>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011f6:	4904      	ldr	r1, [pc, #16]	; (8001208 <__NVIC_SystemReset+0x24>)
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_SystemReset+0x28>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011fe:	f3bf 8f4f 	dsb	sy
}
 8001202:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <__NVIC_SystemReset+0x20>
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	05fa0004 	.word	0x05fa0004

08001210 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b092      	sub	sp, #72	; 0x48
 8001214:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001216:	2101      	movs	r1, #1
 8001218:	488e      	ldr	r0, [pc, #568]	; (8001454 <menu+0x244>)
 800121a:	f008 f8b7 	bl	800938c <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	f040 808e 	bne.w	8001342 <menu+0x132>
 8001226:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <menu+0x248>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	f083 0301 	eor.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8086 	beq.w	8001342 <menu+0x132>
		menuSayac = menuSayac+1;
 8001236:	4b89      	ldr	r3, [pc, #548]	; (800145c <menu+0x24c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b87      	ldr	r3, [pc, #540]	; (800145c <menu+0x24c>)
 8001240:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001242:	4b86      	ldr	r3, [pc, #536]	; (800145c <menu+0x24c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b24      	cmp	r3, #36	; 0x24
 8001248:	d102      	bne.n	8001250 <menu+0x40>
			menuSayac = 1;
 800124a:	4b84      	ldr	r3, [pc, #528]	; (800145c <menu+0x24c>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001250:	4b82      	ldr	r3, [pc, #520]	; (800145c <menu+0x24c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d106      	bne.n	8001266 <menu+0x56>
 8001258:	4b81      	ldr	r3, [pc, #516]	; (8001460 <menu+0x250>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <menu+0x56>
			menuSayac = 21;
 8001260:	4b7e      	ldr	r3, [pc, #504]	; (800145c <menu+0x24c>)
 8001262:	2215      	movs	r2, #21
 8001264:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001266:	4b7d      	ldr	r3, [pc, #500]	; (800145c <menu+0x24c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d106      	bne.n	800127c <menu+0x6c>
 800126e:	4b7d      	ldr	r3, [pc, #500]	; (8001464 <menu+0x254>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <menu+0x6c>
			menuSayac = 16;
 8001276:	4b79      	ldr	r3, [pc, #484]	; (800145c <menu+0x24c>)
 8001278:	2210      	movs	r2, #16
 800127a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800127c:	4b77      	ldr	r3, [pc, #476]	; (800145c <menu+0x24c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b0d      	cmp	r3, #13
 8001282:	d106      	bne.n	8001292 <menu+0x82>
 8001284:	4b77      	ldr	r3, [pc, #476]	; (8001464 <menu+0x254>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d102      	bne.n	8001292 <menu+0x82>
			menuSayac = 16;
 800128c:	4b73      	ldr	r3, [pc, #460]	; (800145c <menu+0x24c>)
 800128e:	2210      	movs	r2, #16
 8001290:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001292:	4b72      	ldr	r3, [pc, #456]	; (800145c <menu+0x24c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b09      	cmp	r3, #9
 8001298:	d106      	bne.n	80012a8 <menu+0x98>
 800129a:	4b72      	ldr	r3, [pc, #456]	; (8001464 <menu+0x254>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d102      	bne.n	80012a8 <menu+0x98>
			menuSayac = 13;
 80012a2:	4b6e      	ldr	r3, [pc, #440]	; (800145c <menu+0x24c>)
 80012a4:	220d      	movs	r2, #13
 80012a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80012a8:	4b6c      	ldr	r3, [pc, #432]	; (800145c <menu+0x24c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	d10a      	bne.n	80012c6 <menu+0xb6>
 80012b0:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <menu+0x258>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d003      	beq.n	80012c0 <menu+0xb0>
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <menu+0x258>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d102      	bne.n	80012c6 <menu+0xb6>
			menuSayac = 11;
 80012c0:	4b66      	ldr	r3, [pc, #408]	; (800145c <menu+0x24c>)
 80012c2:	220b      	movs	r2, #11
 80012c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80012c6:	4b65      	ldr	r3, [pc, #404]	; (800145c <menu+0x24c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d10e      	bne.n	80012ec <menu+0xdc>
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <menu+0x25c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d003      	beq.n	80012de <menu+0xce>
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <menu+0x25c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d106      	bne.n	80012ec <menu+0xdc>
 80012de:	4b61      	ldr	r3, [pc, #388]	; (8001464 <menu+0x254>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d102      	bne.n	80012ec <menu+0xdc>
			menuSayac = 16;
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <menu+0x24c>)
 80012e8:	2210      	movs	r2, #16
 80012ea:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80012ec:	4b5b      	ldr	r3, [pc, #364]	; (800145c <menu+0x24c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d10e      	bne.n	8001312 <menu+0x102>
 80012f4:	4b5d      	ldr	r3, [pc, #372]	; (800146c <menu+0x25c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d003      	beq.n	8001304 <menu+0xf4>
 80012fc:	4b5b      	ldr	r3, [pc, #364]	; (800146c <menu+0x25c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d106      	bne.n	8001312 <menu+0x102>
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <menu+0x254>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d102      	bne.n	8001312 <menu+0x102>
			menuSayac = 13;
 800130c:	4b53      	ldr	r3, [pc, #332]	; (800145c <menu+0x24c>)
 800130e:	220d      	movs	r2, #13
 8001310:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001312:	4b52      	ldr	r3, [pc, #328]	; (800145c <menu+0x24c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	d106      	bne.n	8001328 <menu+0x118>
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <menu+0x260>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d102      	bne.n	8001328 <menu+0x118>
			menuSayac = 16;
 8001322:	4b4e      	ldr	r3, [pc, #312]	; (800145c <menu+0x24c>)
 8001324:	2210      	movs	r2, #16
 8001326:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001328:	4b4c      	ldr	r3, [pc, #304]	; (800145c <menu+0x24c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b18      	cmp	r3, #24
 800132e:	d106      	bne.n	800133e <menu+0x12e>
 8001330:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <menu+0x250>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <menu+0x12e>
			menuSayac = 26;
 8001338:	4b48      	ldr	r3, [pc, #288]	; (800145c <menu+0x24c>)
 800133a:	221a      	movs	r2, #26
 800133c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800133e:	f003 fbff 	bl	8004b40 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001342:	2108      	movs	r1, #8
 8001344:	484b      	ldr	r0, [pc, #300]	; (8001474 <menu+0x264>)
 8001346:	f008 f821 	bl	800938c <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	d175      	bne.n	800143c <menu+0x22c>
 8001350:	4b41      	ldr	r3, [pc, #260]	; (8001458 <menu+0x248>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	f083 0301 	eor.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d06e      	beq.n	800143c <menu+0x22c>
		if (menuSayac <= 1) {
 800135e:	4b3f      	ldr	r3, [pc, #252]	; (800145c <menu+0x24c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d802      	bhi.n	800136c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <menu+0x24c>)
 8001368:	2224      	movs	r2, #36	; 0x24
 800136a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800136c:	4b3b      	ldr	r3, [pc, #236]	; (800145c <menu+0x24c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <menu+0x24c>)
 8001376:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001378:	4b38      	ldr	r3, [pc, #224]	; (800145c <menu+0x24c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b14      	cmp	r3, #20
 800137e:	d106      	bne.n	800138e <menu+0x17e>
 8001380:	4b37      	ldr	r3, [pc, #220]	; (8001460 <menu+0x250>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <menu+0x17e>
			menuSayac = 17;
 8001388:	4b34      	ldr	r3, [pc, #208]	; (800145c <menu+0x24c>)
 800138a:	2211      	movs	r2, #17
 800138c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <menu+0x24c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	d106      	bne.n	80013a4 <menu+0x194>
 8001396:	4b33      	ldr	r3, [pc, #204]	; (8001464 <menu+0x254>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <menu+0x194>
			menuSayac = 7;
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <menu+0x24c>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <menu+0x24c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d106      	bne.n	80013ba <menu+0x1aa>
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <menu+0x254>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d102      	bne.n	80013ba <menu+0x1aa>
			menuSayac = 12;
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <menu+0x24c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <menu+0x24c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b0c      	cmp	r3, #12
 80013c0:	d106      	bne.n	80013d0 <menu+0x1c0>
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <menu+0x254>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d102      	bne.n	80013d0 <menu+0x1c0>
			menuSayac = 8;
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <menu+0x24c>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <menu+0x24c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b0a      	cmp	r3, #10
 80013d6:	d10a      	bne.n	80013ee <menu+0x1de>
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <menu+0x258>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d003      	beq.n	80013e8 <menu+0x1d8>
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <menu+0x258>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d102      	bne.n	80013ee <menu+0x1de>
			menuSayac = 9;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <menu+0x24c>)
 80013ea:	2209      	movs	r2, #9
 80013ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <menu+0x24c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d10a      	bne.n	800140c <menu+0x1fc>
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <menu+0x25c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d003      	beq.n	8001406 <menu+0x1f6>
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <menu+0x25c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d102      	bne.n	800140c <menu+0x1fc>
			menuSayac = 11;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <menu+0x24c>)
 8001408:	220b      	movs	r2, #11
 800140a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <menu+0x24c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d106      	bne.n	8001422 <menu+0x212>
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <menu+0x260>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d102      	bne.n	8001422 <menu+0x212>
			menuSayac = 14;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <menu+0x24c>)
 800141e:	220e      	movs	r2, #14
 8001420:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <menu+0x24c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b19      	cmp	r3, #25
 8001428:	d106      	bne.n	8001438 <menu+0x228>
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <menu+0x250>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <menu+0x228>
			menuSayac = 23;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <menu+0x24c>)
 8001434:	2217      	movs	r2, #23
 8001436:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001438:	f003 fb82 	bl	8004b40 <bekle>
	}

	if (menuSayac == 0) {
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <menu+0x24c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d133      	bne.n	80014ac <menu+0x29c>
		if(dilSecim == 0) {
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <menu+0x268>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d121      	bne.n	8001490 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800144c:	4a0b      	ldr	r2, [pc, #44]	; (800147c <menu+0x26c>)
 800144e:	2101      	movs	r1, #1
 8001450:	2001      	movs	r0, #1
 8001452:	e015      	b.n	8001480 <menu+0x270>
 8001454:	40010800 	.word	0x40010800
 8001458:	20000263 	.word	0x20000263
 800145c:	20000234 	.word	0x20000234
 8001460:	20000243 	.word	0x20000243
 8001464:	2000023c 	.word	0x2000023c
 8001468:	2000023d 	.word	0x2000023d
 800146c:	2000023e 	.word	0x2000023e
 8001470:	2000023f 	.word	0x2000023f
 8001474:	40011000 	.word	0x40011000
 8001478:	20000255 	.word	0x20000255
 800147c:	0800d0a4 	.word	0x0800d0a4
 8001480:	f006 fc5e 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001484:	4a94      	ldr	r2, [pc, #592]	; (80016d8 <menu+0x4c8>)
 8001486:	2101      	movs	r1, #1
 8001488:	2002      	movs	r0, #2
 800148a:	f006 fc59 	bl	8007d40 <lcd_print>
 800148e:	e00d      	b.n	80014ac <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001490:	4b92      	ldr	r3, [pc, #584]	; (80016dc <menu+0x4cc>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d109      	bne.n	80014ac <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001498:	4a91      	ldr	r2, [pc, #580]	; (80016e0 <menu+0x4d0>)
 800149a:	2101      	movs	r1, #1
 800149c:	2001      	movs	r0, #1
 800149e:	f006 fc4f 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80014a2:	4a90      	ldr	r2, [pc, #576]	; (80016e4 <menu+0x4d4>)
 80014a4:	2101      	movs	r1, #1
 80014a6:	2002      	movs	r0, #2
 80014a8:	f006 fc4a 	bl	8007d40 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80014ac:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <menu+0x4d8>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	f040 82b5 	bne.w	8001a20 <menu+0x810>
		if(dilSecim == 0) {
 80014b6:	4b89      	ldr	r3, [pc, #548]	; (80016dc <menu+0x4cc>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80014be:	4a8b      	ldr	r2, [pc, #556]	; (80016ec <menu+0x4dc>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	2001      	movs	r0, #1
 80014c4:	f006 fc3c 	bl	8007d40 <lcd_print>
 80014c8:	e008      	b.n	80014dc <menu+0x2cc>
		} else if(dilSecim == 1) {
 80014ca:	4b84      	ldr	r3, [pc, #528]	; (80016dc <menu+0x4cc>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d104      	bne.n	80014dc <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80014d2:	4a87      	ldr	r2, [pc, #540]	; (80016f0 <menu+0x4e0>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	2001      	movs	r0, #1
 80014d8:	f006 fc32 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80014dc:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <menu+0x4e4>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d123      	bne.n	800152c <menu+0x31c>
			if(dilSecim == 0) {
 80014e4:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <menu+0x4cc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80014ec:	4a82      	ldr	r2, [pc, #520]	; (80016f8 <menu+0x4e8>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	2002      	movs	r0, #2
 80014f2:	f006 fc25 	bl	8007d40 <lcd_print>
 80014f6:	e008      	b.n	800150a <menu+0x2fa>

			} else if(dilSecim == 1) {
 80014f8:	4b78      	ldr	r3, [pc, #480]	; (80016dc <menu+0x4cc>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d104      	bne.n	800150a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001500:	4a7e      	ldr	r2, [pc, #504]	; (80016fc <menu+0x4ec>)
 8001502:	2101      	movs	r1, #1
 8001504:	2002      	movs	r0, #2
 8001506:	f006 fc1b 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800150a:	4a7d      	ldr	r2, [pc, #500]	; (8001700 <menu+0x4f0>)
 800150c:	210f      	movs	r1, #15
 800150e:	2002      	movs	r0, #2
 8001510:	f006 fc16 	bl	8007d40 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001514:	4b7b      	ldr	r3, [pc, #492]	; (8001704 <menu+0x4f4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	220a      	movs	r2, #10
 800151a:	497b      	ldr	r1, [pc, #492]	; (8001708 <menu+0x4f8>)
 800151c:	4618      	mov	r0, r3
 800151e:	f00a ff61 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 8001522:	4a79      	ldr	r2, [pc, #484]	; (8001708 <menu+0x4f8>)
 8001524:	210e      	movs	r1, #14
 8001526:	2002      	movs	r0, #2
 8001528:	f006 fc0a 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800152c:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <menu+0x4e4>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d123      	bne.n	800157c <menu+0x36c>
			if(dilSecim == 0) {
 8001534:	4b69      	ldr	r3, [pc, #420]	; (80016dc <menu+0x4cc>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800153c:	4a73      	ldr	r2, [pc, #460]	; (800170c <menu+0x4fc>)
 800153e:	2101      	movs	r1, #1
 8001540:	2002      	movs	r0, #2
 8001542:	f006 fbfd 	bl	8007d40 <lcd_print>
 8001546:	e008      	b.n	800155a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001548:	4b64      	ldr	r3, [pc, #400]	; (80016dc <menu+0x4cc>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d104      	bne.n	800155a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001550:	4a6f      	ldr	r2, [pc, #444]	; (8001710 <menu+0x500>)
 8001552:	2101      	movs	r1, #1
 8001554:	2002      	movs	r0, #2
 8001556:	f006 fbf3 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800155a:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <menu+0x504>)
 800155c:	210f      	movs	r1, #15
 800155e:	2002      	movs	r0, #2
 8001560:	f006 fbee 	bl	8007d40 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001564:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <menu+0x508>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	220a      	movs	r2, #10
 800156a:	4967      	ldr	r1, [pc, #412]	; (8001708 <menu+0x4f8>)
 800156c:	4618      	mov	r0, r3
 800156e:	f00a ff39 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 8001572:	4a65      	ldr	r2, [pc, #404]	; (8001708 <menu+0x4f8>)
 8001574:	210e      	movs	r1, #14
 8001576:	2002      	movs	r0, #2
 8001578:	f006 fbe2 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800157c:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <menu+0x4e4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d123      	bne.n	80015cc <menu+0x3bc>
			if(dilSecim == 0) {
 8001584:	4b55      	ldr	r3, [pc, #340]	; (80016dc <menu+0x4cc>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800158c:	4a63      	ldr	r2, [pc, #396]	; (800171c <menu+0x50c>)
 800158e:	2101      	movs	r1, #1
 8001590:	2002      	movs	r0, #2
 8001592:	f006 fbd5 	bl	8007d40 <lcd_print>
 8001596:	e008      	b.n	80015aa <menu+0x39a>
			} else if(dilSecim == 1) {
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <menu+0x4cc>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d104      	bne.n	80015aa <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80015a0:	4a5f      	ldr	r2, [pc, #380]	; (8001720 <menu+0x510>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	2002      	movs	r0, #2
 80015a6:	f006 fbcb 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015aa:	4a5a      	ldr	r2, [pc, #360]	; (8001714 <menu+0x504>)
 80015ac:	210f      	movs	r1, #15
 80015ae:	2002      	movs	r0, #2
 80015b0:	f006 fbc6 	bl	8007d40 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <menu+0x514>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	220a      	movs	r2, #10
 80015ba:	4953      	ldr	r1, [pc, #332]	; (8001708 <menu+0x4f8>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f00a ff11 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 80015c2:	4a51      	ldr	r2, [pc, #324]	; (8001708 <menu+0x4f8>)
 80015c4:	210e      	movs	r1, #14
 80015c6:	2002      	movs	r0, #2
 80015c8:	f006 fbba 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80015cc:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <menu+0x4e4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d123      	bne.n	800161c <menu+0x40c>
			if(dilSecim == 0) {
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <menu+0x4cc>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d105      	bne.n	80015e8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <menu+0x518>)
 80015de:	2101      	movs	r1, #1
 80015e0:	2002      	movs	r0, #2
 80015e2:	f006 fbad 	bl	8007d40 <lcd_print>
 80015e6:	e008      	b.n	80015fa <menu+0x3ea>
			} else if(dilSecim == 1) {
 80015e8:	4b3c      	ldr	r3, [pc, #240]	; (80016dc <menu+0x4cc>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d104      	bne.n	80015fa <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80015f0:	4a4e      	ldr	r2, [pc, #312]	; (800172c <menu+0x51c>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	2002      	movs	r0, #2
 80015f6:	f006 fba3 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015fa:	4a46      	ldr	r2, [pc, #280]	; (8001714 <menu+0x504>)
 80015fc:	210f      	movs	r1, #15
 80015fe:	2002      	movs	r0, #2
 8001600:	f006 fb9e 	bl	8007d40 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <menu+0x520>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	220a      	movs	r2, #10
 800160a:	493f      	ldr	r1, [pc, #252]	; (8001708 <menu+0x4f8>)
 800160c:	4618      	mov	r0, r3
 800160e:	f00a fee9 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 8001612:	4a3d      	ldr	r2, [pc, #244]	; (8001708 <menu+0x4f8>)
 8001614:	210e      	movs	r1, #14
 8001616:	2002      	movs	r0, #2
 8001618:	f006 fb92 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <menu+0x4e4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d123      	bne.n	800166c <menu+0x45c>
			if(dilSecim == 0) {
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <menu+0x4cc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d105      	bne.n	8001638 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800162c:	4a41      	ldr	r2, [pc, #260]	; (8001734 <menu+0x524>)
 800162e:	2101      	movs	r1, #1
 8001630:	2002      	movs	r0, #2
 8001632:	f006 fb85 	bl	8007d40 <lcd_print>
 8001636:	e008      	b.n	800164a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <menu+0x4cc>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d104      	bne.n	800164a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001640:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <menu+0x528>)
 8001642:	2101      	movs	r1, #1
 8001644:	2002      	movs	r0, #2
 8001646:	f006 fb7b 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800164a:	4a32      	ldr	r2, [pc, #200]	; (8001714 <menu+0x504>)
 800164c:	210f      	movs	r1, #15
 800164e:	2002      	movs	r0, #2
 8001650:	f006 fb76 	bl	8007d40 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <menu+0x52c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	220a      	movs	r2, #10
 800165a:	492b      	ldr	r1, [pc, #172]	; (8001708 <menu+0x4f8>)
 800165c:	4618      	mov	r0, r3
 800165e:	f00a fec1 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 8001662:	4a29      	ldr	r2, [pc, #164]	; (8001708 <menu+0x4f8>)
 8001664:	210e      	movs	r1, #14
 8001666:	2002      	movs	r0, #2
 8001668:	f006 fb6a 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <menu+0x4e4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d123      	bne.n	80016bc <menu+0x4ac>
			if(dilSecim == 0) {
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <menu+0x4cc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800167c:	4a30      	ldr	r2, [pc, #192]	; (8001740 <menu+0x530>)
 800167e:	2101      	movs	r1, #1
 8001680:	2002      	movs	r0, #2
 8001682:	f006 fb5d 	bl	8007d40 <lcd_print>
 8001686:	e008      	b.n	800169a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <menu+0x4cc>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d104      	bne.n	800169a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001690:	4a2c      	ldr	r2, [pc, #176]	; (8001744 <menu+0x534>)
 8001692:	2101      	movs	r1, #1
 8001694:	2002      	movs	r0, #2
 8001696:	f006 fb53 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800169a:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <menu+0x504>)
 800169c:	210f      	movs	r1, #15
 800169e:	2002      	movs	r0, #2
 80016a0:	f006 fb4e 	bl	8007d40 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <menu+0x538>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	220a      	movs	r2, #10
 80016aa:	4917      	ldr	r1, [pc, #92]	; (8001708 <menu+0x4f8>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00a fe99 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 80016b2:	4a15      	ldr	r2, [pc, #84]	; (8001708 <menu+0x4f8>)
 80016b4:	210e      	movs	r1, #14
 80016b6:	2002      	movs	r0, #2
 80016b8:	f006 fb42 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <menu+0x4e4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b06      	cmp	r3, #6
 80016c2:	d15f      	bne.n	8001784 <menu+0x574>
			if(dilSecim == 0) {
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <menu+0x4cc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d141      	bne.n	8001750 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80016cc:	4a1f      	ldr	r2, [pc, #124]	; (800174c <menu+0x53c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2002      	movs	r0, #2
 80016d2:	f006 fb35 	bl	8007d40 <lcd_print>
 80016d6:	e044      	b.n	8001762 <menu+0x552>
 80016d8:	0800d0b8 	.word	0x0800d0b8
 80016dc:	20000255 	.word	0x20000255
 80016e0:	0800d0cc 	.word	0x0800d0cc
 80016e4:	0800d0e0 	.word	0x0800d0e0
 80016e8:	20000234 	.word	0x20000234
 80016ec:	0800d0f4 	.word	0x0800d0f4
 80016f0:	0800d108 	.word	0x0800d108
 80016f4:	20000236 	.word	0x20000236
 80016f8:	0800d11c 	.word	0x0800d11c
 80016fc:	0800d12c 	.word	0x0800d12c
 8001700:	0800d13c 	.word	0x0800d13c
 8001704:	20000256 	.word	0x20000256
 8001708:	20000188 	.word	0x20000188
 800170c:	0800d140 	.word	0x0800d140
 8001710:	0800d150 	.word	0x0800d150
 8001714:	0800d160 	.word	0x0800d160
 8001718:	20000257 	.word	0x20000257
 800171c:	0800d164 	.word	0x0800d164
 8001720:	0800d174 	.word	0x0800d174
 8001724:	20000258 	.word	0x20000258
 8001728:	0800d184 	.word	0x0800d184
 800172c:	0800d194 	.word	0x0800d194
 8001730:	20000259 	.word	0x20000259
 8001734:	0800d1a4 	.word	0x0800d1a4
 8001738:	0800d1b4 	.word	0x0800d1b4
 800173c:	2000025a 	.word	0x2000025a
 8001740:	0800d1c4 	.word	0x0800d1c4
 8001744:	0800d1d4 	.word	0x0800d1d4
 8001748:	2000025b 	.word	0x2000025b
 800174c:	0800d1e4 	.word	0x0800d1e4
			} else if(dilSecim == 1) {
 8001750:	4b4f      	ldr	r3, [pc, #316]	; (8001890 <menu+0x680>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d104      	bne.n	8001762 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001758:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <menu+0x684>)
 800175a:	2101      	movs	r1, #1
 800175c:	2002      	movs	r0, #2
 800175e:	f006 faef 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001762:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <menu+0x688>)
 8001764:	210f      	movs	r1, #15
 8001766:	2002      	movs	r0, #2
 8001768:	f006 faea 	bl	8007d40 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <menu+0x68c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	220a      	movs	r2, #10
 8001772:	494b      	ldr	r1, [pc, #300]	; (80018a0 <menu+0x690>)
 8001774:	4618      	mov	r0, r3
 8001776:	f00a fe35 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 800177a:	4a49      	ldr	r2, [pc, #292]	; (80018a0 <menu+0x690>)
 800177c:	210e      	movs	r1, #14
 800177e:	2002      	movs	r0, #2
 8001780:	f006 fade 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001784:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <menu+0x694>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b07      	cmp	r3, #7
 800178a:	d123      	bne.n	80017d4 <menu+0x5c4>
			if(dilSecim == 0) {
 800178c:	4b40      	ldr	r3, [pc, #256]	; (8001890 <menu+0x680>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001794:	4a44      	ldr	r2, [pc, #272]	; (80018a8 <menu+0x698>)
 8001796:	2101      	movs	r1, #1
 8001798:	2002      	movs	r0, #2
 800179a:	f006 fad1 	bl	8007d40 <lcd_print>
 800179e:	e008      	b.n	80017b2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80017a0:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <menu+0x680>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d104      	bne.n	80017b2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80017a8:	4a40      	ldr	r2, [pc, #256]	; (80018ac <menu+0x69c>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	2002      	movs	r0, #2
 80017ae:	f006 fac7 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017b2:	4a39      	ldr	r2, [pc, #228]	; (8001898 <menu+0x688>)
 80017b4:	210f      	movs	r1, #15
 80017b6:	2002      	movs	r0, #2
 80017b8:	f006 fac2 	bl	8007d40 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80017bc:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <menu+0x6a0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	220a      	movs	r2, #10
 80017c2:	4937      	ldr	r1, [pc, #220]	; (80018a0 <menu+0x690>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00a fe0d 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 80017ca:	4a35      	ldr	r2, [pc, #212]	; (80018a0 <menu+0x690>)
 80017cc:	210e      	movs	r1, #14
 80017ce:	2002      	movs	r0, #2
 80017d0:	f006 fab6 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80017d4:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <menu+0x694>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d123      	bne.n	8001824 <menu+0x614>
			if(dilSecim == 0) {
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <menu+0x680>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80017e4:	4a33      	ldr	r2, [pc, #204]	; (80018b4 <menu+0x6a4>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2002      	movs	r0, #2
 80017ea:	f006 faa9 	bl	8007d40 <lcd_print>
 80017ee:	e008      	b.n	8001802 <menu+0x5f2>
			} else if(dilSecim == 1) {
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <menu+0x680>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d104      	bne.n	8001802 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80017f8:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <menu+0x6a8>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	2002      	movs	r0, #2
 80017fe:	f006 fa9f 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001802:	4a25      	ldr	r2, [pc, #148]	; (8001898 <menu+0x688>)
 8001804:	210f      	movs	r1, #15
 8001806:	2002      	movs	r0, #2
 8001808:	f006 fa9a 	bl	8007d40 <lcd_print>
			itoa(hataKayit9, snum, 10);
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <menu+0x6ac>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	220a      	movs	r2, #10
 8001812:	4923      	ldr	r1, [pc, #140]	; (80018a0 <menu+0x690>)
 8001814:	4618      	mov	r0, r3
 8001816:	f00a fde5 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <menu+0x690>)
 800181c:	210e      	movs	r1, #14
 800181e:	2002      	movs	r0, #2
 8001820:	f006 fa8e 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <menu+0x694>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b09      	cmp	r3, #9
 800182a:	d123      	bne.n	8001874 <menu+0x664>
			if(dilSecim == 0) {
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <menu+0x680>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001834:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <menu+0x6b0>)
 8001836:	2101      	movs	r1, #1
 8001838:	2002      	movs	r0, #2
 800183a:	f006 fa81 	bl	8007d40 <lcd_print>
 800183e:	e008      	b.n	8001852 <menu+0x642>
			} else if(dilSecim == 1) {
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <menu+0x680>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d104      	bne.n	8001852 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001848:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <menu+0x6b4>)
 800184a:	2101      	movs	r1, #1
 800184c:	2002      	movs	r0, #2
 800184e:	f006 fa77 	bl	8007d40 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001852:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <menu+0x6b8>)
 8001854:	2110      	movs	r1, #16
 8001856:	2002      	movs	r0, #2
 8001858:	f006 fa72 	bl	8007d40 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <menu+0x6bc>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	220a      	movs	r2, #10
 8001862:	490f      	ldr	r1, [pc, #60]	; (80018a0 <menu+0x690>)
 8001864:	4618      	mov	r0, r3
 8001866:	f00a fdbd 	bl	800c3e4 <itoa>
			lcd_print(2, 15, snum);
 800186a:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <menu+0x690>)
 800186c:	210f      	movs	r1, #15
 800186e:	2002      	movs	r0, #2
 8001870:	f006 fa66 	bl	8007d40 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <menu+0x694>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b0a      	cmp	r3, #10
 800187a:	d134      	bne.n	80018e6 <menu+0x6d6>
			if(dilSecim == 0) {
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <menu+0x680>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d127      	bne.n	80018d4 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <menu+0x6c0>)
 8001886:	2101      	movs	r1, #1
 8001888:	2002      	movs	r0, #2
 800188a:	f006 fa59 	bl	8007d40 <lcd_print>
 800188e:	e02a      	b.n	80018e6 <menu+0x6d6>
 8001890:	20000255 	.word	0x20000255
 8001894:	0800d1f4 	.word	0x0800d1f4
 8001898:	0800d160 	.word	0x0800d160
 800189c:	2000025c 	.word	0x2000025c
 80018a0:	20000188 	.word	0x20000188
 80018a4:	20000236 	.word	0x20000236
 80018a8:	0800d204 	.word	0x0800d204
 80018ac:	0800d214 	.word	0x0800d214
 80018b0:	2000025d 	.word	0x2000025d
 80018b4:	0800d224 	.word	0x0800d224
 80018b8:	0800d234 	.word	0x0800d234
 80018bc:	2000025e 	.word	0x2000025e
 80018c0:	0800d244 	.word	0x0800d244
 80018c4:	0800d254 	.word	0x0800d254
 80018c8:	0800d264 	.word	0x0800d264
 80018cc:	2000025f 	.word	0x2000025f
 80018d0:	0800d268 	.word	0x0800d268
			} else if(dilSecim == 1) {
 80018d4:	4b82      	ldr	r3, [pc, #520]	; (8001ae0 <menu+0x8d0>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d104      	bne.n	80018e6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80018dc:	4a81      	ldr	r2, [pc, #516]	; (8001ae4 <menu+0x8d4>)
 80018de:	2101      	movs	r1, #1
 80018e0:	2002      	movs	r0, #2
 80018e2:	f006 fa2d 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018e6:	2102      	movs	r1, #2
 80018e8:	487f      	ldr	r0, [pc, #508]	; (8001ae8 <menu+0x8d8>)
 80018ea:	f007 fd4f 	bl	800938c <HAL_GPIO_ReadPin>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d119      	bne.n	8001928 <menu+0x718>
 80018f4:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <menu+0x8dc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	f083 0301 	eor.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d012      	beq.n	8001928 <menu+0x718>
 8001902:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <menu+0x8e0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10e      	bne.n	8001928 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800190a:	4b7a      	ldr	r3, [pc, #488]	; (8001af4 <menu+0x8e4>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b78      	ldr	r3, [pc, #480]	; (8001af4 <menu+0x8e4>)
 8001914:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001916:	4b77      	ldr	r3, [pc, #476]	; (8001af4 <menu+0x8e4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d902      	bls.n	8001924 <menu+0x714>
				hataGostermeSirasi = 0;
 800191e:	4b75      	ldr	r3, [pc, #468]	; (8001af4 <menu+0x8e4>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001924:	f003 f90c 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001928:	2104      	movs	r1, #4
 800192a:	486f      	ldr	r0, [pc, #444]	; (8001ae8 <menu+0x8d8>)
 800192c:	f007 fd2e 	bl	800938c <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	d119      	bne.n	800196a <menu+0x75a>
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <menu+0x8dc>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d012      	beq.n	800196a <menu+0x75a>
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <menu+0x8e0>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10e      	bne.n	800196a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800194c:	4b69      	ldr	r3, [pc, #420]	; (8001af4 <menu+0x8e4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3b01      	subs	r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <menu+0x8e4>)
 8001956:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001958:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <menu+0x8e4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b0b      	cmp	r3, #11
 800195e:	d902      	bls.n	8001966 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001960:	4b64      	ldr	r3, [pc, #400]	; (8001af4 <menu+0x8e4>)
 8001962:	220a      	movs	r2, #10
 8001964:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001966:	f003 f8eb 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800196a:	2108      	movs	r1, #8
 800196c:	485e      	ldr	r0, [pc, #376]	; (8001ae8 <menu+0x8d8>)
 800196e:	f007 fd0d 	bl	800938c <HAL_GPIO_ReadPin>
 8001972:	4603      	mov	r3, r0
 8001974:	2b01      	cmp	r3, #1
 8001976:	d153      	bne.n	8001a20 <menu+0x810>
 8001978:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <menu+0x8dc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f083 0301 	eor.w	r3, r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d04c      	beq.n	8001a20 <menu+0x810>
 8001986:	4b5b      	ldr	r3, [pc, #364]	; (8001af4 <menu+0x8e4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b0a      	cmp	r3, #10
 800198c:	d148      	bne.n	8001a20 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 800198e:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <menu+0x8e8>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	4b59      	ldr	r3, [pc, #356]	; (8001afc <menu+0x8ec>)
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <menu+0x8f0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <menu+0x8ec>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80019aa:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <menu+0x8f4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	4b52      	ldr	r3, [pc, #328]	; (8001afc <menu+0x8ec>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <menu+0x8f8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <menu+0x8ec>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80019c6:	4b51      	ldr	r3, [pc, #324]	; (8001b0c <menu+0x8fc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <menu+0x8ec>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <menu+0x900>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	4b48      	ldr	r3, [pc, #288]	; (8001afc <menu+0x8ec>)
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80019e2:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <menu+0x904>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	4b44      	ldr	r3, [pc, #272]	; (8001afc <menu+0x8ec>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80019f0:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <menu+0x908>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <menu+0x8ec>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <menu+0x90c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <menu+0x8ec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <menu+0x910>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <menu+0x8ec>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001a1a:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <menu+0x914>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <menu+0x918>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	f040 80fc 	bne.w	8001c22 <menu+0xa12>
		if(dilSecim == 0) {
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <menu+0x8d0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001a32:	4a3e      	ldr	r2, [pc, #248]	; (8001b2c <menu+0x91c>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	2001      	movs	r0, #1
 8001a38:	f006 f982 	bl	8007d40 <lcd_print>
 8001a3c:	e008      	b.n	8001a50 <menu+0x840>
		} else if(dilSecim == 1) {
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <menu+0x8d0>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d104      	bne.n	8001a50 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001a46:	4a3a      	ldr	r2, [pc, #232]	; (8001b30 <menu+0x920>)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f006 f978 	bl	8007d40 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <menu+0x8e0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d003      	beq.n	8001a60 <menu+0x850>
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <menu+0x8e0>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d112      	bne.n	8001a86 <menu+0x876>
			if(dilSecim == 0) {
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <menu+0x8d0>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001a68:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <menu+0x924>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f006 f967 	bl	8007d40 <lcd_print>
 8001a72:	e008      	b.n	8001a86 <menu+0x876>
			} else if(dilSecim == 1) {
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <menu+0x8d0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d104      	bne.n	8001a86 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001a7c:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <menu+0x928>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2002      	movs	r0, #2
 8001a82:	f006 f95d 	bl	8007d40 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <menu+0x92c>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <menu+0x8ac>
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <menu+0x8e0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d112      	bne.n	8001abc <menu+0x8ac>
			if(dilSecim == 0) {
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <menu+0x8d0>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a9e:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <menu+0x930>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f006 f94c 	bl	8007d40 <lcd_print>
 8001aa8:	e008      	b.n	8001abc <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <menu+0x8d0>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d104      	bne.n	8001abc <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001ab2:	4a24      	ldr	r2, [pc, #144]	; (8001b44 <menu+0x934>)
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f006 f942 	bl	8007d40 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <menu+0x92c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d14c      	bne.n	8001b5e <menu+0x94e>
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <menu+0x8e0>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d148      	bne.n	8001b5e <menu+0x94e>
			if(dilSecim == 0) {
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <menu+0x8d0>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d13b      	bne.n	8001b4c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <menu+0x938>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f006 f931 	bl	8007d40 <lcd_print>
 8001ade:	e03e      	b.n	8001b5e <menu+0x94e>
 8001ae0:	20000255 	.word	0x20000255
 8001ae4:	0800d27c 	.word	0x0800d27c
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	20000263 	.word	0x20000263
 8001af0:	20000243 	.word	0x20000243
 8001af4:	20000236 	.word	0x20000236
 8001af8:	20000256 	.word	0x20000256
 8001afc:	20000118 	.word	0x20000118
 8001b00:	20000257 	.word	0x20000257
 8001b04:	20000258 	.word	0x20000258
 8001b08:	20000259 	.word	0x20000259
 8001b0c:	2000025a 	.word	0x2000025a
 8001b10:	2000025b 	.word	0x2000025b
 8001b14:	2000025c 	.word	0x2000025c
 8001b18:	2000025d 	.word	0x2000025d
 8001b1c:	2000025e 	.word	0x2000025e
 8001b20:	2000025f 	.word	0x2000025f
 8001b24:	20000260 	.word	0x20000260
 8001b28:	20000234 	.word	0x20000234
 8001b2c:	0800d290 	.word	0x0800d290
 8001b30:	0800d2a4 	.word	0x0800d2a4
 8001b34:	0800d2b8 	.word	0x0800d2b8
 8001b38:	0800d2cc 	.word	0x0800d2cc
 8001b3c:	20000235 	.word	0x20000235
 8001b40:	0800d2e0 	.word	0x0800d2e0
 8001b44:	0800d2f0 	.word	0x0800d2f0
 8001b48:	0800d300 	.word	0x0800d300
			} else if(dilSecim == 1) {
 8001b4c:	4b98      	ldr	r3, [pc, #608]	; (8001db0 <menu+0xba0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d104      	bne.n	8001b5e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001b54:	4a97      	ldr	r2, [pc, #604]	; (8001db4 <menu+0xba4>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f006 f8f1 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4895      	ldr	r0, [pc, #596]	; (8001db8 <menu+0xba8>)
 8001b62:	f007 fc13 	bl	800938c <HAL_GPIO_ReadPin>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d119      	bne.n	8001ba0 <menu+0x990>
 8001b6c:	4b93      	ldr	r3, [pc, #588]	; (8001dbc <menu+0xbac>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d012      	beq.n	8001ba0 <menu+0x990>
 8001b7a:	4b91      	ldr	r3, [pc, #580]	; (8001dc0 <menu+0xbb0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10e      	bne.n	8001ba0 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b82:	4b90      	ldr	r3, [pc, #576]	; (8001dc4 <menu+0xbb4>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b8e      	ldr	r3, [pc, #568]	; (8001dc4 <menu+0xbb4>)
 8001b8c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b8e:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <menu+0xbb4>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d902      	bls.n	8001b9c <menu+0x98c>
				calismaSekli = 0;
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <menu+0xbb4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b9c:	f002 ffd0 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	4885      	ldr	r0, [pc, #532]	; (8001db8 <menu+0xba8>)
 8001ba4:	f007 fbf2 	bl	800938c <HAL_GPIO_ReadPin>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d119      	bne.n	8001be2 <menu+0x9d2>
 8001bae:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <menu+0xbac>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d012      	beq.n	8001be2 <menu+0x9d2>
 8001bbc:	4b80      	ldr	r3, [pc, #512]	; (8001dc0 <menu+0xbb0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10e      	bne.n	8001be2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001bc4:	4b7f      	ldr	r3, [pc, #508]	; (8001dc4 <menu+0xbb4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <menu+0xbb4>)
 8001bce:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001bd0:	4b7c      	ldr	r3, [pc, #496]	; (8001dc4 <menu+0xbb4>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <menu+0x9ce>
	    		calismaSekli = 1;
 8001bd8:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <menu+0xbb4>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001bde:	f002 ffaf 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001be2:	2108      	movs	r1, #8
 8001be4:	4874      	ldr	r0, [pc, #464]	; (8001db8 <menu+0xba8>)
 8001be6:	f007 fbd1 	bl	800938c <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d118      	bne.n	8001c22 <menu+0xa12>
 8001bf0:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <menu+0xbac>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d011      	beq.n	8001c22 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001bfe:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <menu+0xbb4>)
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	4b71      	ldr	r3, [pc, #452]	; (8001dc8 <menu+0xbb8>)
 8001c04:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001c06:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <menu+0xbb4>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d106      	bne.n	8001c1c <menu+0xa0c>
				altLimit = 1;
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <menu+0xbbc>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c14:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <menu+0xbbc>)
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <menu+0xbb8>)
 8001c1a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001c1c:	4b6c      	ldr	r3, [pc, #432]	; (8001dd0 <menu+0xbc0>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001c22:	4b6c      	ldr	r3, [pc, #432]	; (8001dd4 <menu+0xbc4>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	f040 8083 	bne.w	8001d32 <menu+0xb22>
		if(dilSecim == 0) {
 8001c2c:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <menu+0xba0>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001c34:	4a68      	ldr	r2, [pc, #416]	; (8001dd8 <menu+0xbc8>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f006 f881 	bl	8007d40 <lcd_print>
 8001c3e:	e008      	b.n	8001c52 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001c40:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <menu+0xba0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d104      	bne.n	8001c52 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001c48:	4a64      	ldr	r2, [pc, #400]	; (8001ddc <menu+0xbcc>)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f006 f877 	bl	8007d40 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001c52:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <menu+0xbd0>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d113      	bne.n	8001c82 <menu+0xa72>
			if(dilSecim == 0) {
 8001c5a:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <menu+0xba0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001c62:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <menu+0xbd4>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	2002      	movs	r0, #2
 8001c68:	f006 f86a 	bl	8007d40 <lcd_print>
 8001c6c:	e012      	b.n	8001c94 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001c6e:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <menu+0xba0>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d10e      	bne.n	8001c94 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001c76:	4a5c      	ldr	r2, [pc, #368]	; (8001de8 <menu+0xbd8>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	2002      	movs	r0, #2
 8001c7c:	f006 f860 	bl	8007d40 <lcd_print>
 8001c80:	e008      	b.n	8001c94 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c82:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <menu+0xbd0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c8a:	4a58      	ldr	r2, [pc, #352]	; (8001dec <menu+0xbdc>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f006 f856 	bl	8007d40 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c94:	2102      	movs	r1, #2
 8001c96:	4848      	ldr	r0, [pc, #288]	; (8001db8 <menu+0xba8>)
 8001c98:	f007 fb78 	bl	800938c <HAL_GPIO_ReadPin>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d115      	bne.n	8001cce <menu+0xabe>
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <menu+0xbac>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001cb0:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <menu+0xbd0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <menu+0xbd0>)
 8001cba:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001cbc:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <menu+0xbd0>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d902      	bls.n	8001cca <menu+0xaba>
				emniyetCercevesi = 0;
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <menu+0xbd0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cca:	f002 ff39 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cce:	2104      	movs	r1, #4
 8001cd0:	4839      	ldr	r0, [pc, #228]	; (8001db8 <menu+0xba8>)
 8001cd2:	f007 fb5b 	bl	800938c <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d115      	bne.n	8001d08 <menu+0xaf8>
 8001cdc:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <menu+0xbac>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00e      	beq.n	8001d08 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <menu+0xbd0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <menu+0xbd0>)
 8001cf4:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <menu+0xbd0>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <menu+0xbd0>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d04:	f002 ff1c 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001d08:	2108      	movs	r1, #8
 8001d0a:	482b      	ldr	r0, [pc, #172]	; (8001db8 <menu+0xba8>)
 8001d0c:	f007 fb3e 	bl	800938c <HAL_GPIO_ReadPin>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d10d      	bne.n	8001d32 <menu+0xb22>
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <menu+0xbac>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	f083 0301 	eor.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <menu+0xbd0>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <menu+0xbb8>)
 8001d2a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <menu+0xbc0>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001d32:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <menu+0xbc4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	f040 80ba 	bne.w	8001eb0 <menu+0xca0>
		if(dilSecim == 0) {
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <menu+0xba0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001d44:	4a2a      	ldr	r2, [pc, #168]	; (8001df0 <menu+0xbe0>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f005 fff9 	bl	8007d40 <lcd_print>
 8001d4e:	e008      	b.n	8001d62 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <menu+0xba0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d104      	bne.n	8001d62 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001d58:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <menu+0xbe4>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f005 ffef 	bl	8007d40 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <menu+0xbe8>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d113      	bne.n	8001d92 <menu+0xb82>
			if(dilSecim == 0) {
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <menu+0xba0>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001d72:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <menu+0xbd4>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	2002      	movs	r0, #2
 8001d78:	f005 ffe2 	bl	8007d40 <lcd_print>
 8001d7c:	e049      	b.n	8001e12 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <menu+0xba0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d145      	bne.n	8001e12 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d86:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <menu+0xbd8>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f005 ffd8 	bl	8007d40 <lcd_print>
 8001d90:	e03f      	b.n	8001e12 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <menu+0xbe8>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d13b      	bne.n	8001e12 <menu+0xc02>
			if(dilSecim == 0) {
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <menu+0xba0>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12e      	bne.n	8001e00 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001da2:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <menu+0xbec>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	2002      	movs	r0, #2
 8001da8:	f005 ffca 	bl	8007d40 <lcd_print>
 8001dac:	e031      	b.n	8001e12 <menu+0xc02>
 8001dae:	bf00      	nop
 8001db0:	20000255 	.word	0x20000255
 8001db4:	0800d310 	.word	0x0800d310
 8001db8:	40010800 	.word	0x40010800
 8001dbc:	20000263 	.word	0x20000263
 8001dc0:	20000243 	.word	0x20000243
 8001dc4:	20000235 	.word	0x20000235
 8001dc8:	20000118 	.word	0x20000118
 8001dcc:	2000023a 	.word	0x2000023a
 8001dd0:	20000260 	.word	0x20000260
 8001dd4:	20000234 	.word	0x20000234
 8001dd8:	0800d320 	.word	0x0800d320
 8001ddc:	0800d334 	.word	0x0800d334
 8001de0:	20000238 	.word	0x20000238
 8001de4:	0800d348 	.word	0x0800d348
 8001de8:	0800d35c 	.word	0x0800d35c
 8001dec:	0800d370 	.word	0x0800d370
 8001df0:	0800d380 	.word	0x0800d380
 8001df4:	0800d394 	.word	0x0800d394
 8001df8:	20000239 	.word	0x20000239
 8001dfc:	0800d3a8 	.word	0x0800d3a8
			} else if(dilSecim == 1) {
 8001e00:	4b92      	ldr	r3, [pc, #584]	; (800204c <menu+0xe3c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d104      	bne.n	8001e12 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001e08:	4a91      	ldr	r2, [pc, #580]	; (8002050 <menu+0xe40>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f005 ff97 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e12:	2102      	movs	r1, #2
 8001e14:	488f      	ldr	r0, [pc, #572]	; (8002054 <menu+0xe44>)
 8001e16:	f007 fab9 	bl	800938c <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d115      	bne.n	8001e4c <menu+0xc3c>
 8001e20:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <menu+0xe48>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00e      	beq.n	8001e4c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001e2e:	4b8b      	ldr	r3, [pc, #556]	; (800205c <menu+0xe4c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b89      	ldr	r3, [pc, #548]	; (800205c <menu+0xe4c>)
 8001e38:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001e3a:	4b88      	ldr	r3, [pc, #544]	; (800205c <menu+0xe4c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d902      	bls.n	8001e48 <menu+0xc38>
				yavaslamaLimit = 0;
 8001e42:	4b86      	ldr	r3, [pc, #536]	; (800205c <menu+0xe4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e48:	f002 fe7a 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	4881      	ldr	r0, [pc, #516]	; (8002054 <menu+0xe44>)
 8001e50:	f007 fa9c 	bl	800938c <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d115      	bne.n	8001e86 <menu+0xc76>
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <menu+0xe48>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00e      	beq.n	8001e86 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001e68:	4b7c      	ldr	r3, [pc, #496]	; (800205c <menu+0xe4c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b7a      	ldr	r3, [pc, #488]	; (800205c <menu+0xe4c>)
 8001e72:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001e74:	4b79      	ldr	r3, [pc, #484]	; (800205c <menu+0xe4c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001e7c:	4b77      	ldr	r3, [pc, #476]	; (800205c <menu+0xe4c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e82:	f002 fe5d 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e86:	2108      	movs	r1, #8
 8001e88:	4872      	ldr	r0, [pc, #456]	; (8002054 <menu+0xe44>)
 8001e8a:	f007 fa7f 	bl	800938c <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d10d      	bne.n	8001eb0 <menu+0xca0>
 8001e94:	4b70      	ldr	r3, [pc, #448]	; (8002058 <menu+0xe48>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	f083 0301 	eor.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001ea2:	4b6e      	ldr	r3, [pc, #440]	; (800205c <menu+0xe4c>)
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b6e      	ldr	r3, [pc, #440]	; (8002060 <menu+0xe50>)
 8001ea8:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001eaa:	4b6e      	ldr	r3, [pc, #440]	; (8002064 <menu+0xe54>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001eb0:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <menu+0xe58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	f040 80b9 	bne.w	800202c <menu+0xe1c>
		if(dilSecim == 0) {
 8001eba:	4b64      	ldr	r3, [pc, #400]	; (800204c <menu+0xe3c>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d105      	bne.n	8001ece <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001ec2:	4a6a      	ldr	r2, [pc, #424]	; (800206c <menu+0xe5c>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f005 ff3a 	bl	8007d40 <lcd_print>
 8001ecc:	e008      	b.n	8001ee0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <menu+0xe3c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d104      	bne.n	8001ee0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001ed6:	4a66      	ldr	r2, [pc, #408]	; (8002070 <menu+0xe60>)
 8001ed8:	2101      	movs	r1, #1
 8001eda:	2001      	movs	r0, #1
 8001edc:	f005 ff30 	bl	8007d40 <lcd_print>
		}

		if(altLimit == 0) {
 8001ee0:	4b64      	ldr	r3, [pc, #400]	; (8002074 <menu+0xe64>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d113      	bne.n	8001f10 <menu+0xd00>
			if(dilSecim == 0) {
 8001ee8:	4b58      	ldr	r3, [pc, #352]	; (800204c <menu+0xe3c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001ef0:	4a61      	ldr	r2, [pc, #388]	; (8002078 <menu+0xe68>)
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f005 ff23 	bl	8007d40 <lcd_print>
 8001efa:	e020      	b.n	8001f3e <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <menu+0xe3c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d11c      	bne.n	8001f3e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001f04:	4a5d      	ldr	r2, [pc, #372]	; (800207c <menu+0xe6c>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f005 ff19 	bl	8007d40 <lcd_print>
 8001f0e:	e016      	b.n	8001f3e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001f10:	4b58      	ldr	r3, [pc, #352]	; (8002074 <menu+0xe64>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d112      	bne.n	8001f3e <menu+0xd2e>
			if(dilSecim == 0){
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <menu+0xe3c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001f20:	4a57      	ldr	r2, [pc, #348]	; (8002080 <menu+0xe70>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	2002      	movs	r0, #2
 8001f26:	f005 ff0b 	bl	8007d40 <lcd_print>
 8001f2a:	e008      	b.n	8001f3e <menu+0xd2e>
			} else if(dilSecim == 1){
 8001f2c:	4b47      	ldr	r3, [pc, #284]	; (800204c <menu+0xe3c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d104      	bne.n	8001f3e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001f34:	4a46      	ldr	r2, [pc, #280]	; (8002050 <menu+0xe40>)
 8001f36:	2101      	movs	r1, #1
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f005 ff01 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4844      	ldr	r0, [pc, #272]	; (8002054 <menu+0xe44>)
 8001f42:	f007 fa23 	bl	800938c <HAL_GPIO_ReadPin>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d119      	bne.n	8001f80 <menu+0xd70>
 8001f4c:	4b42      	ldr	r3, [pc, #264]	; (8002058 <menu+0xe48>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f083 0301 	eor.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d012      	beq.n	8001f80 <menu+0xd70>
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <menu+0xe74>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10e      	bne.n	8001f80 <menu+0xd70>
			altLimit = altLimit + 1;
 8001f62:	4b44      	ldr	r3, [pc, #272]	; (8002074 <menu+0xe64>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b42      	ldr	r3, [pc, #264]	; (8002074 <menu+0xe64>)
 8001f6c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <menu+0xe64>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d902      	bls.n	8001f7c <menu+0xd6c>
				altLimit = 0;
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <menu+0xe64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f7c:	f002 fde0 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f80:	2104      	movs	r1, #4
 8001f82:	4834      	ldr	r0, [pc, #208]	; (8002054 <menu+0xe44>)
 8001f84:	f007 fa02 	bl	800938c <HAL_GPIO_ReadPin>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d119      	bne.n	8001fc2 <menu+0xdb2>
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <menu+0xe48>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d012      	beq.n	8001fc2 <menu+0xdb2>
 8001f9c:	4b39      	ldr	r3, [pc, #228]	; (8002084 <menu+0xe74>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10e      	bne.n	8001fc2 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <menu+0xe64>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <menu+0xe64>)
 8001fae:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001fb0:	4b30      	ldr	r3, [pc, #192]	; (8002074 <menu+0xe64>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <menu+0xdae>
		   		altLimit = 1;
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <menu+0xe64>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fbe:	f002 fdbf 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fc2:	2108      	movs	r1, #8
 8001fc4:	4823      	ldr	r0, [pc, #140]	; (8002054 <menu+0xe44>)
 8001fc6:	f007 f9e1 	bl	800938c <HAL_GPIO_ReadPin>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d12d      	bne.n	800202c <menu+0xe1c>
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <menu+0xe48>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	f083 0301 	eor.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d026      	beq.n	800202c <menu+0xe1c>
			eepromData[5] = altLimit;
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <menu+0xe64>)
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <menu+0xe50>)
 8001fe4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <menu+0xe64>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d110      	bne.n	8002010 <menu+0xe00>
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <menu+0xe78>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <menu+0xdee>
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <menu+0xe78>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d108      	bne.n	8002010 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <menu+0xe78>)
 8002000:	2203      	movs	r2, #3
 8002002:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <menu+0xe78>)
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <menu+0xe50>)
 800200a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800200e:	e00a      	b.n	8002026 <menu+0xe16>
			} else if(altLimit == 0) {
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <menu+0xe64>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <menu+0xe16>
				platformSilindirTipi = 0;
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <menu+0xe7c>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <menu+0xe7c>)
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <menu+0xe50>)
 8002024:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <menu+0xe54>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <menu+0xe58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b06      	cmp	r3, #6
 8002032:	f040 80b6 	bne.w	80021a2 <menu+0xf92>
		if(dilSecim == 0) {
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <menu+0xe3c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d12a      	bne.n	8002094 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800203e:	4a14      	ldr	r2, [pc, #80]	; (8002090 <menu+0xe80>)
 8002040:	2101      	movs	r1, #1
 8002042:	2001      	movs	r0, #1
 8002044:	f005 fe7c 	bl	8007d40 <lcd_print>
 8002048:	e02d      	b.n	80020a6 <menu+0xe96>
 800204a:	bf00      	nop
 800204c:	20000255 	.word	0x20000255
 8002050:	0800d3bc 	.word	0x0800d3bc
 8002054:	40010800 	.word	0x40010800
 8002058:	20000263 	.word	0x20000263
 800205c:	20000239 	.word	0x20000239
 8002060:	20000118 	.word	0x20000118
 8002064:	20000260 	.word	0x20000260
 8002068:	20000234 	.word	0x20000234
 800206c:	0800d3d0 	.word	0x0800d3d0
 8002070:	0800d3e4 	.word	0x0800d3e4
 8002074:	2000023a 	.word	0x2000023a
 8002078:	0800d348 	.word	0x0800d348
 800207c:	0800d35c 	.word	0x0800d35c
 8002080:	0800d3a8 	.word	0x0800d3a8
 8002084:	20000235 	.word	0x20000235
 8002088:	20000241 	.word	0x20000241
 800208c:	20000247 	.word	0x20000247
 8002090:	0800d3f8 	.word	0x0800d3f8
		} else if(dilSecim == 1){
 8002094:	4b7a      	ldr	r3, [pc, #488]	; (8002280 <menu+0x1070>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d104      	bne.n	80020a6 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800209c:	4a79      	ldr	r2, [pc, #484]	; (8002284 <menu+0x1074>)
 800209e:	2101      	movs	r1, #1
 80020a0:	2001      	movs	r0, #1
 80020a2:	f005 fe4d 	bl	8007d40 <lcd_print>
		}
		if(basincSalteri == 0){
 80020a6:	4b78      	ldr	r3, [pc, #480]	; (8002288 <menu+0x1078>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d113      	bne.n	80020d6 <menu+0xec6>
			if(dilSecim == 0) {
 80020ae:	4b74      	ldr	r3, [pc, #464]	; (8002280 <menu+0x1070>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80020b6:	4a75      	ldr	r2, [pc, #468]	; (800228c <menu+0x107c>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	2002      	movs	r0, #2
 80020bc:	f005 fe40 	bl	8007d40 <lcd_print>
 80020c0:	e020      	b.n	8002104 <menu+0xef4>
			} else if(dilSecim == 1){
 80020c2:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <menu+0x1070>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d11c      	bne.n	8002104 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80020ca:	4a71      	ldr	r2, [pc, #452]	; (8002290 <menu+0x1080>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	2002      	movs	r0, #2
 80020d0:	f005 fe36 	bl	8007d40 <lcd_print>
 80020d4:	e016      	b.n	8002104 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80020d6:	4b6c      	ldr	r3, [pc, #432]	; (8002288 <menu+0x1078>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d112      	bne.n	8002104 <menu+0xef4>
			if(dilSecim == 0) {
 80020de:	4b68      	ldr	r3, [pc, #416]	; (8002280 <menu+0x1070>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80020e6:	4a6b      	ldr	r2, [pc, #428]	; (8002294 <menu+0x1084>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	2002      	movs	r0, #2
 80020ec:	f005 fe28 	bl	8007d40 <lcd_print>
 80020f0:	e008      	b.n	8002104 <menu+0xef4>
			} else if(dilSecim == 1) {
 80020f2:	4b63      	ldr	r3, [pc, #396]	; (8002280 <menu+0x1070>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d104      	bne.n	8002104 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80020fa:	4a67      	ldr	r2, [pc, #412]	; (8002298 <menu+0x1088>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	2002      	movs	r0, #2
 8002100:	f005 fe1e 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002104:	2102      	movs	r1, #2
 8002106:	4865      	ldr	r0, [pc, #404]	; (800229c <menu+0x108c>)
 8002108:	f007 f940 	bl	800938c <HAL_GPIO_ReadPin>
 800210c:	4603      	mov	r3, r0
 800210e:	2b01      	cmp	r3, #1
 8002110:	d115      	bne.n	800213e <menu+0xf2e>
 8002112:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <menu+0x1090>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f083 0301 	eor.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <menu+0x1078>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b57      	ldr	r3, [pc, #348]	; (8002288 <menu+0x1078>)
 800212a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800212c:	4b56      	ldr	r3, [pc, #344]	; (8002288 <menu+0x1078>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d902      	bls.n	800213a <menu+0xf2a>
				basincSalteri = 0;
 8002134:	4b54      	ldr	r3, [pc, #336]	; (8002288 <menu+0x1078>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800213a:	f002 fd01 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800213e:	2104      	movs	r1, #4
 8002140:	4856      	ldr	r0, [pc, #344]	; (800229c <menu+0x108c>)
 8002142:	f007 f923 	bl	800938c <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	2b01      	cmp	r3, #1
 800214a:	d115      	bne.n	8002178 <menu+0xf68>
 800214c:	4b54      	ldr	r3, [pc, #336]	; (80022a0 <menu+0x1090>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00e      	beq.n	8002178 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800215a:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <menu+0x1078>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	3b01      	subs	r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b49      	ldr	r3, [pc, #292]	; (8002288 <menu+0x1078>)
 8002164:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002166:	4b48      	ldr	r3, [pc, #288]	; (8002288 <menu+0x1078>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <menu+0xf64>
		   		basincSalteri = 1;
 800216e:	4b46      	ldr	r3, [pc, #280]	; (8002288 <menu+0x1078>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002174:	f002 fce4 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002178:	2108      	movs	r1, #8
 800217a:	4848      	ldr	r0, [pc, #288]	; (800229c <menu+0x108c>)
 800217c:	f007 f906 	bl	800938c <HAL_GPIO_ReadPin>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	d10d      	bne.n	80021a2 <menu+0xf92>
 8002186:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <menu+0x1090>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002194:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <menu+0x1078>)
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <menu+0x1094>)
 800219a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800219c:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <menu+0x1098>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80021a2:	4b42      	ldr	r3, [pc, #264]	; (80022ac <menu+0x109c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b07      	cmp	r3, #7
 80021a8:	f040 80f5 	bne.w	8002396 <menu+0x1186>
		if(dilSecim == 0) {
 80021ac:	4b34      	ldr	r3, [pc, #208]	; (8002280 <menu+0x1070>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80021b4:	4a3e      	ldr	r2, [pc, #248]	; (80022b0 <menu+0x10a0>)
 80021b6:	2101      	movs	r1, #1
 80021b8:	2001      	movs	r0, #1
 80021ba:	f005 fdc1 	bl	8007d40 <lcd_print>
 80021be:	e008      	b.n	80021d2 <menu+0xfc2>
		} else if(dilSecim == 1){
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <menu+0x1070>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d104      	bne.n	80021d2 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80021c8:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <menu+0x10a4>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	2001      	movs	r0, #1
 80021ce:	f005 fdb7 	bl	8007d40 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <menu+0x10a8>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d113      	bne.n	8002202 <menu+0xff2>
			if(dilSecim == 0) {
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <menu+0x1070>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80021e2:	4a2a      	ldr	r2, [pc, #168]	; (800228c <menu+0x107c>)
 80021e4:	2101      	movs	r1, #1
 80021e6:	2002      	movs	r0, #2
 80021e8:	f005 fdaa 	bl	8007d40 <lcd_print>
 80021ec:	e079      	b.n	80022e2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <menu+0x1070>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d175      	bne.n	80022e2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80021f6:	4a26      	ldr	r2, [pc, #152]	; (8002290 <menu+0x1080>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	2002      	movs	r0, #2
 80021fc:	f005 fda0 	bl	8007d40 <lcd_print>
 8002200:	e06f      	b.n	80022e2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <menu+0x10a8>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d113      	bne.n	8002232 <menu+0x1022>
			if(dilSecim == 0) {
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <menu+0x1070>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002212:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <menu+0x10ac>)
 8002214:	2101      	movs	r1, #1
 8002216:	2002      	movs	r0, #2
 8002218:	f005 fd92 	bl	8007d40 <lcd_print>
 800221c:	e061      	b.n	80022e2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <menu+0x1070>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d15d      	bne.n	80022e2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002226:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <menu+0x10b0>)
 8002228:	2101      	movs	r1, #1
 800222a:	2002      	movs	r0, #2
 800222c:	f005 fd88 	bl	8007d40 <lcd_print>
 8002230:	e057      	b.n	80022e2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <menu+0x10a8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d113      	bne.n	8002262 <menu+0x1052>
			if(dilSecim == 0) {
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <menu+0x1070>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002242:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <menu+0x10b4>)
 8002244:	2101      	movs	r1, #1
 8002246:	2002      	movs	r0, #2
 8002248:	f005 fd7a 	bl	8007d40 <lcd_print>
 800224c:	e049      	b.n	80022e2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <menu+0x1070>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d145      	bne.n	80022e2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <menu+0x10b8>)
 8002258:	2101      	movs	r1, #1
 800225a:	2002      	movs	r0, #2
 800225c:	f005 fd70 	bl	8007d40 <lcd_print>
 8002260:	e03f      	b.n	80022e2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <menu+0x10a8>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d13b      	bne.n	80022e2 <menu+0x10d2>
			if(dilSecim == 0) {
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <menu+0x1070>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d12e      	bne.n	80022d0 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002272:	4a16      	ldr	r2, [pc, #88]	; (80022cc <menu+0x10bc>)
 8002274:	2101      	movs	r1, #1
 8002276:	2002      	movs	r0, #2
 8002278:	f005 fd62 	bl	8007d40 <lcd_print>
 800227c:	e031      	b.n	80022e2 <menu+0x10d2>
 800227e:	bf00      	nop
 8002280:	20000255 	.word	0x20000255
 8002284:	0800d408 	.word	0x0800d408
 8002288:	2000023b 	.word	0x2000023b
 800228c:	0800d348 	.word	0x0800d348
 8002290:	0800d35c 	.word	0x0800d35c
 8002294:	0800d3a8 	.word	0x0800d3a8
 8002298:	0800d3bc 	.word	0x0800d3bc
 800229c:	40010800 	.word	0x40010800
 80022a0:	20000263 	.word	0x20000263
 80022a4:	20000118 	.word	0x20000118
 80022a8:	20000260 	.word	0x20000260
 80022ac:	20000234 	.word	0x20000234
 80022b0:	0800d418 	.word	0x0800d418
 80022b4:	0800d42c 	.word	0x0800d42c
 80022b8:	2000023c 	.word	0x2000023c
 80022bc:	0800d440 	.word	0x0800d440
 80022c0:	0800d454 	.word	0x0800d454
 80022c4:	0800d468 	.word	0x0800d468
 80022c8:	0800d47c 	.word	0x0800d47c
 80022cc:	0800d490 	.word	0x0800d490
			} else if(dilSecim == 1){
 80022d0:	4b99      	ldr	r3, [pc, #612]	; (8002538 <menu+0x1328>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d104      	bne.n	80022e2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80022d8:	4a98      	ldr	r2, [pc, #608]	; (800253c <menu+0x132c>)
 80022da:	2101      	movs	r1, #1
 80022dc:	2002      	movs	r0, #2
 80022de:	f005 fd2f 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022e2:	2102      	movs	r1, #2
 80022e4:	4896      	ldr	r0, [pc, #600]	; (8002540 <menu+0x1330>)
 80022e6:	f007 f851 	bl	800938c <HAL_GPIO_ReadPin>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d115      	bne.n	800231c <menu+0x110c>
 80022f0:	4b94      	ldr	r3, [pc, #592]	; (8002544 <menu+0x1334>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f083 0301 	eor.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80022fe:	4b92      	ldr	r3, [pc, #584]	; (8002548 <menu+0x1338>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b90      	ldr	r3, [pc, #576]	; (8002548 <menu+0x1338>)
 8002308:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800230a:	4b8f      	ldr	r3, [pc, #572]	; (8002548 <menu+0x1338>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d902      	bls.n	8002318 <menu+0x1108>
				kapiSecimleri = 0;
 8002312:	4b8d      	ldr	r3, [pc, #564]	; (8002548 <menu+0x1338>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002318:	f002 fc12 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800231c:	2104      	movs	r1, #4
 800231e:	4888      	ldr	r0, [pc, #544]	; (8002540 <menu+0x1330>)
 8002320:	f007 f834 	bl	800938c <HAL_GPIO_ReadPin>
 8002324:	4603      	mov	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d115      	bne.n	8002356 <menu+0x1146>
 800232a:	4b86      	ldr	r3, [pc, #536]	; (8002544 <menu+0x1334>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002338:	4b83      	ldr	r3, [pc, #524]	; (8002548 <menu+0x1338>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3b01      	subs	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b81      	ldr	r3, [pc, #516]	; (8002548 <menu+0x1338>)
 8002342:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002344:	4b80      	ldr	r3, [pc, #512]	; (8002548 <menu+0x1338>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d902      	bls.n	8002352 <menu+0x1142>
		   		kapiSecimleri = 3;
 800234c:	4b7e      	ldr	r3, [pc, #504]	; (8002548 <menu+0x1338>)
 800234e:	2203      	movs	r2, #3
 8002350:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002352:	f002 fbf5 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002356:	2108      	movs	r1, #8
 8002358:	4879      	ldr	r0, [pc, #484]	; (8002540 <menu+0x1330>)
 800235a:	f007 f817 	bl	800938c <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d118      	bne.n	8002396 <menu+0x1186>
 8002364:	4b77      	ldr	r3, [pc, #476]	; (8002544 <menu+0x1334>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f083 0301 	eor.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d011      	beq.n	8002396 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002372:	4b75      	ldr	r3, [pc, #468]	; (8002548 <menu+0x1338>)
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	4b75      	ldr	r3, [pc, #468]	; (800254c <menu+0x133c>)
 8002378:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800237a:	4b73      	ldr	r3, [pc, #460]	; (8002548 <menu+0x1338>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <menu+0x1180>
				altLimit = 1;
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <menu+0x1340>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002388:	4b71      	ldr	r3, [pc, #452]	; (8002550 <menu+0x1340>)
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	4b6f      	ldr	r3, [pc, #444]	; (800254c <menu+0x133c>)
 800238e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002390:	4b70      	ldr	r3, [pc, #448]	; (8002554 <menu+0x1344>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002396:	4b70      	ldr	r3, [pc, #448]	; (8002558 <menu+0x1348>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b08      	cmp	r3, #8
 800239c:	f040 8092 	bne.w	80024c4 <menu+0x12b4>
		if(dilSecim == 0) {
 80023a0:	4b65      	ldr	r3, [pc, #404]	; (8002538 <menu+0x1328>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d105      	bne.n	80023b4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80023a8:	4a6c      	ldr	r2, [pc, #432]	; (800255c <menu+0x134c>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	2001      	movs	r0, #1
 80023ae:	f005 fcc7 	bl	8007d40 <lcd_print>
 80023b2:	e008      	b.n	80023c6 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80023b4:	4b60      	ldr	r3, [pc, #384]	; (8002538 <menu+0x1328>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d104      	bne.n	80023c6 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80023bc:	4a68      	ldr	r2, [pc, #416]	; (8002560 <menu+0x1350>)
 80023be:	2101      	movs	r1, #1
 80023c0:	2001      	movs	r0, #1
 80023c2:	f005 fcbd 	bl	8007d40 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <menu+0x1354>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d113      	bne.n	80023f6 <menu+0x11e6>
			if(dilSecim == 0) {
 80023ce:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <menu+0x1328>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80023d6:	4a64      	ldr	r2, [pc, #400]	; (8002568 <menu+0x1358>)
 80023d8:	2101      	movs	r1, #1
 80023da:	2002      	movs	r0, #2
 80023dc:	f005 fcb0 	bl	8007d40 <lcd_print>
 80023e0:	e020      	b.n	8002424 <menu+0x1214>
			} else if(dilSecim == 1) {
 80023e2:	4b55      	ldr	r3, [pc, #340]	; (8002538 <menu+0x1328>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d11c      	bne.n	8002424 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80023ea:	4a60      	ldr	r2, [pc, #384]	; (800256c <menu+0x135c>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	2002      	movs	r0, #2
 80023f0:	f005 fca6 	bl	8007d40 <lcd_print>
 80023f4:	e016      	b.n	8002424 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <menu+0x1354>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d112      	bne.n	8002424 <menu+0x1214>
			if(dilSecim == 0){
 80023fe:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <menu+0x1328>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002406:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <menu+0x1360>)
 8002408:	2101      	movs	r1, #1
 800240a:	2002      	movs	r0, #2
 800240c:	f005 fc98 	bl	8007d40 <lcd_print>
 8002410:	e008      	b.n	8002424 <menu+0x1214>
			} else if(dilSecim == 1){
 8002412:	4b49      	ldr	r3, [pc, #292]	; (8002538 <menu+0x1328>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d104      	bne.n	8002424 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800241a:	4a56      	ldr	r2, [pc, #344]	; (8002574 <menu+0x1364>)
 800241c:	2101      	movs	r1, #1
 800241e:	2002      	movs	r0, #2
 8002420:	f005 fc8e 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002424:	2102      	movs	r1, #2
 8002426:	4846      	ldr	r0, [pc, #280]	; (8002540 <menu+0x1330>)
 8002428:	f006 ffb0 	bl	800938c <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	2b01      	cmp	r3, #1
 8002430:	d115      	bne.n	800245e <menu+0x124e>
 8002432:	4b44      	ldr	r3, [pc, #272]	; (8002544 <menu+0x1334>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	f083 0301 	eor.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <menu+0x1354>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <menu+0x1354>)
 800244a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800244c:	4b45      	ldr	r3, [pc, #276]	; (8002564 <menu+0x1354>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d902      	bls.n	800245a <menu+0x124a>
				kapiAcTipi = 0;
 8002454:	4b43      	ldr	r3, [pc, #268]	; (8002564 <menu+0x1354>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800245a:	f002 fb71 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800245e:	2104      	movs	r1, #4
 8002460:	4837      	ldr	r0, [pc, #220]	; (8002540 <menu+0x1330>)
 8002462:	f006 ff93 	bl	800938c <HAL_GPIO_ReadPin>
 8002466:	4603      	mov	r3, r0
 8002468:	2b01      	cmp	r3, #1
 800246a:	d115      	bne.n	8002498 <menu+0x1288>
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <menu+0x1334>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00e      	beq.n	8002498 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800247a:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <menu+0x1354>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	3b01      	subs	r3, #1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <menu+0x1354>)
 8002484:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <menu+0x1354>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <menu+0x1284>
		   		kapiAcTipi = 1;
 800248e:	4b35      	ldr	r3, [pc, #212]	; (8002564 <menu+0x1354>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002494:	f002 fb54 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002498:	2108      	movs	r1, #8
 800249a:	4829      	ldr	r0, [pc, #164]	; (8002540 <menu+0x1330>)
 800249c:	f006 ff76 	bl	800938c <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10e      	bne.n	80024c4 <menu+0x12b4>
 80024a6:	4b27      	ldr	r3, [pc, #156]	; (8002544 <menu+0x1334>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	f083 0301 	eor.w	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <menu+0x1354>)
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <menu+0x133c>)
 80024ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80024be:	4b25      	ldr	r3, [pc, #148]	; (8002554 <menu+0x1344>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <menu+0x1348>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	f040 80b9 	bne.w	8002640 <menu+0x1430>
		if(dilSecim == 0){
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <menu+0x1328>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80024d6:	4a28      	ldr	r2, [pc, #160]	; (8002578 <menu+0x1368>)
 80024d8:	2101      	movs	r1, #1
 80024da:	2001      	movs	r0, #1
 80024dc:	f005 fc30 	bl	8007d40 <lcd_print>
 80024e0:	e008      	b.n	80024f4 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <menu+0x1328>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d104      	bne.n	80024f4 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80024ea:	4a24      	ldr	r2, [pc, #144]	; (800257c <menu+0x136c>)
 80024ec:	2101      	movs	r1, #1
 80024ee:	2001      	movs	r0, #1
 80024f0:	f005 fc26 	bl	8007d40 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <menu+0x1370>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <menu+0x1374>)
 80024fe:	2101      	movs	r1, #1
 8002500:	2002      	movs	r0, #2
 8002502:	f005 fc1d 	bl	8007d40 <lcd_print>
 8002506:	e04c      	b.n	80025a2 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <menu+0x1370>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d13f      	bne.n	8002590 <menu+0x1380>
			if(dilSecim == 0){
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <menu+0x1328>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <menu+0x1378>)
 800251a:	2101      	movs	r1, #1
 800251c:	2002      	movs	r0, #2
 800251e:	f005 fc0f 	bl	8007d40 <lcd_print>
 8002522:	e03e      	b.n	80025a2 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <menu+0x1328>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d13a      	bne.n	80025a2 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800252c:	4a17      	ldr	r2, [pc, #92]	; (800258c <menu+0x137c>)
 800252e:	2101      	movs	r1, #1
 8002530:	2002      	movs	r0, #2
 8002532:	f005 fc05 	bl	8007d40 <lcd_print>
 8002536:	e034      	b.n	80025a2 <menu+0x1392>
 8002538:	20000255 	.word	0x20000255
 800253c:	0800d4a4 	.word	0x0800d4a4
 8002540:	40010800 	.word	0x40010800
 8002544:	20000263 	.word	0x20000263
 8002548:	2000023c 	.word	0x2000023c
 800254c:	20000118 	.word	0x20000118
 8002550:	2000023a 	.word	0x2000023a
 8002554:	20000260 	.word	0x20000260
 8002558:	20000234 	.word	0x20000234
 800255c:	0800d4b8 	.word	0x0800d4b8
 8002560:	0800d4cc 	.word	0x0800d4cc
 8002564:	20000240 	.word	0x20000240
 8002568:	0800d4e0 	.word	0x0800d4e0
 800256c:	0800d4f0 	.word	0x0800d4f0
 8002570:	0800d500 	.word	0x0800d500
 8002574:	0800d514 	.word	0x0800d514
 8002578:	0800d528 	.word	0x0800d528
 800257c:	0800d53c 	.word	0x0800d53c
 8002580:	2000023d 	.word	0x2000023d
 8002584:	0800d550 	.word	0x0800d550
 8002588:	0800d564 	.word	0x0800d564
 800258c:	0800d574 	.word	0x0800d574
			}
		} else if(kapi1Tip == 2) {
 8002590:	4b8a      	ldr	r3, [pc, #552]	; (80027bc <menu+0x15ac>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d104      	bne.n	80025a2 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002598:	4a89      	ldr	r2, [pc, #548]	; (80027c0 <menu+0x15b0>)
 800259a:	2101      	movs	r1, #1
 800259c:	2002      	movs	r0, #2
 800259e:	f005 fbcf 	bl	8007d40 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025a2:	2102      	movs	r1, #2
 80025a4:	4887      	ldr	r0, [pc, #540]	; (80027c4 <menu+0x15b4>)
 80025a6:	f006 fef1 	bl	800938c <HAL_GPIO_ReadPin>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d115      	bne.n	80025dc <menu+0x13cc>
 80025b0:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <menu+0x15b8>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	f083 0301 	eor.w	r3, r3, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00e      	beq.n	80025dc <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80025be:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <menu+0x15ac>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b7d      	ldr	r3, [pc, #500]	; (80027bc <menu+0x15ac>)
 80025c8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80025ca:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <menu+0x15ac>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d902      	bls.n	80025d8 <menu+0x13c8>
				kapi1Tip = 0;
 80025d2:	4b7a      	ldr	r3, [pc, #488]	; (80027bc <menu+0x15ac>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025d8:	f002 fab2 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025dc:	2104      	movs	r1, #4
 80025de:	4879      	ldr	r0, [pc, #484]	; (80027c4 <menu+0x15b4>)
 80025e0:	f006 fed4 	bl	800938c <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d115      	bne.n	8002616 <menu+0x1406>
 80025ea:	4b77      	ldr	r3, [pc, #476]	; (80027c8 <menu+0x15b8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00e      	beq.n	8002616 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80025f8:	4b70      	ldr	r3, [pc, #448]	; (80027bc <menu+0x15ac>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <menu+0x15ac>)
 8002602:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002604:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <menu+0x15ac>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d902      	bls.n	8002612 <menu+0x1402>
		   		kapi1Tip = 2;
 800260c:	4b6b      	ldr	r3, [pc, #428]	; (80027bc <menu+0x15ac>)
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002612:	f002 fa95 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002616:	2108      	movs	r1, #8
 8002618:	486a      	ldr	r0, [pc, #424]	; (80027c4 <menu+0x15b4>)
 800261a:	f006 feb7 	bl	800938c <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10d      	bne.n	8002640 <menu+0x1430>
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <menu+0x15b8>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f083 0301 	eor.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002632:	4b62      	ldr	r3, [pc, #392]	; (80027bc <menu+0x15ac>)
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <menu+0x15bc>)
 8002638:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800263a:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <menu+0x15c0>)
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002640:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <menu+0x15c4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b0a      	cmp	r3, #10
 8002646:	d17f      	bne.n	8002748 <menu+0x1538>
		if(dilSecim == 0) {
 8002648:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <menu+0x15c8>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002650:	4a62      	ldr	r2, [pc, #392]	; (80027dc <menu+0x15cc>)
 8002652:	2101      	movs	r1, #1
 8002654:	2001      	movs	r0, #1
 8002656:	f005 fb73 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800265a:	4a61      	ldr	r2, [pc, #388]	; (80027e0 <menu+0x15d0>)
 800265c:	2101      	movs	r1, #1
 800265e:	2002      	movs	r0, #2
 8002660:	f005 fb6e 	bl	8007d40 <lcd_print>
 8002664:	e00d      	b.n	8002682 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002666:	4b5c      	ldr	r3, [pc, #368]	; (80027d8 <menu+0x15c8>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d109      	bne.n	8002682 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800266e:	4a5d      	ldr	r2, [pc, #372]	; (80027e4 <menu+0x15d4>)
 8002670:	2101      	movs	r1, #1
 8002672:	2001      	movs	r0, #1
 8002674:	f005 fb64 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002678:	4a5b      	ldr	r2, [pc, #364]	; (80027e8 <menu+0x15d8>)
 800267a:	2101      	movs	r1, #1
 800267c:	2002      	movs	r0, #2
 800267e:	f005 fb5f 	bl	8007d40 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002682:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <menu+0x15dc>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	220a      	movs	r2, #10
 8002688:	4959      	ldr	r1, [pc, #356]	; (80027f0 <menu+0x15e0>)
 800268a:	4618      	mov	r0, r3
 800268c:	f009 feaa 	bl	800c3e4 <itoa>
		lcd_print(2,16,snum);
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <menu+0x15e0>)
 8002692:	2110      	movs	r1, #16
 8002694:	2002      	movs	r0, #2
 8002696:	f005 fb53 	bl	8007d40 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800269a:	2102      	movs	r1, #2
 800269c:	4849      	ldr	r0, [pc, #292]	; (80027c4 <menu+0x15b4>)
 800269e:	f006 fe75 	bl	800938c <HAL_GPIO_ReadPin>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d119      	bne.n	80026dc <menu+0x14cc>
 80026a8:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <menu+0x15b8>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	f083 0301 	eor.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <menu+0x14cc>
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <menu+0x15ac>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10e      	bne.n	80026dc <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80026be:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <menu+0x15dc>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	3301      	adds	r3, #1
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <menu+0x15dc>)
 80026c8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80026ca:	4b48      	ldr	r3, [pc, #288]	; (80027ec <menu+0x15dc>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d902      	bls.n	80026d8 <menu+0x14c8>
				kapi1AcSure = 0;
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <menu+0x15dc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026d8:	f002 fa32 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80026dc:	2104      	movs	r1, #4
 80026de:	4839      	ldr	r0, [pc, #228]	; (80027c4 <menu+0x15b4>)
 80026e0:	f006 fe54 	bl	800938c <HAL_GPIO_ReadPin>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d119      	bne.n	800271e <menu+0x150e>
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <menu+0x15b8>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	f083 0301 	eor.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d012      	beq.n	800271e <menu+0x150e>
 80026f8:	4b30      	ldr	r3, [pc, #192]	; (80027bc <menu+0x15ac>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10e      	bne.n	800271e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <menu+0x15dc>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	3b01      	subs	r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4b38      	ldr	r3, [pc, #224]	; (80027ec <menu+0x15dc>)
 800270a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800270c:	4b37      	ldr	r3, [pc, #220]	; (80027ec <menu+0x15dc>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b06      	cmp	r3, #6
 8002712:	d902      	bls.n	800271a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002714:	4b35      	ldr	r3, [pc, #212]	; (80027ec <menu+0x15dc>)
 8002716:	2205      	movs	r2, #5
 8002718:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800271a:	f002 fa11 	bl	8004b40 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800271e:	2108      	movs	r1, #8
 8002720:	4828      	ldr	r0, [pc, #160]	; (80027c4 <menu+0x15b4>)
 8002722:	f006 fe33 	bl	800938c <HAL_GPIO_ReadPin>
 8002726:	4603      	mov	r3, r0
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10d      	bne.n	8002748 <menu+0x1538>
 800272c:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <menu+0x15b8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	f083 0301 	eor.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <menu+0x15dc>)
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <menu+0x15bc>)
 8002740:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <menu+0x15c0>)
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <menu+0x15c4>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b0b      	cmp	r3, #11
 800274e:	f040 80b5 	bne.w	80028bc <menu+0x16ac>
		if(dilSecim == 0) {
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <menu+0x15c8>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800275a:	4a26      	ldr	r2, [pc, #152]	; (80027f4 <menu+0x15e4>)
 800275c:	2101      	movs	r1, #1
 800275e:	2001      	movs	r0, #1
 8002760:	f005 faee 	bl	8007d40 <lcd_print>
 8002764:	e008      	b.n	8002778 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <menu+0x15c8>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d104      	bne.n	8002778 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <menu+0x15e8>)
 8002770:	2101      	movs	r1, #1
 8002772:	2001      	movs	r0, #1
 8002774:	f005 fae4 	bl	8007d40 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <menu+0x15ec>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <menu+0x15f0>)
 8002782:	2101      	movs	r1, #1
 8002784:	2002      	movs	r0, #2
 8002786:	f005 fadb 	bl	8007d40 <lcd_print>
 800278a:	e048      	b.n	800281e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <menu+0x15ec>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d13b      	bne.n	800280c <menu+0x15fc>
			if(dilSecim == 0) {
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <menu+0x15c8>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d105      	bne.n	80027a8 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <menu+0x15f4>)
 800279e:	2101      	movs	r1, #1
 80027a0:	2002      	movs	r0, #2
 80027a2:	f005 facd 	bl	8007d40 <lcd_print>
 80027a6:	e03a      	b.n	800281e <menu+0x160e>
			} else if(dilSecim == 1) {
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <menu+0x15c8>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d136      	bne.n	800281e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80027b0:	4a15      	ldr	r2, [pc, #84]	; (8002808 <menu+0x15f8>)
 80027b2:	2101      	movs	r1, #1
 80027b4:	2002      	movs	r0, #2
 80027b6:	f005 fac3 	bl	8007d40 <lcd_print>
 80027ba:	e030      	b.n	800281e <menu+0x160e>
 80027bc:	2000023d 	.word	0x2000023d
 80027c0:	0800d588 	.word	0x0800d588
 80027c4:	40010800 	.word	0x40010800
 80027c8:	20000263 	.word	0x20000263
 80027cc:	20000118 	.word	0x20000118
 80027d0:	20000260 	.word	0x20000260
 80027d4:	20000234 	.word	0x20000234
 80027d8:	20000255 	.word	0x20000255
 80027dc:	0800d598 	.word	0x0800d598
 80027e0:	0800d5ac 	.word	0x0800d5ac
 80027e4:	0800d5bc 	.word	0x0800d5bc
 80027e8:	0800d5d0 	.word	0x0800d5d0
 80027ec:	2000024d 	.word	0x2000024d
 80027f0:	20000188 	.word	0x20000188
 80027f4:	0800d5e0 	.word	0x0800d5e0
 80027f8:	0800d5f4 	.word	0x0800d5f4
 80027fc:	2000023e 	.word	0x2000023e
 8002800:	0800d550 	.word	0x0800d550
 8002804:	0800d564 	.word	0x0800d564
 8002808:	0800d574 	.word	0x0800d574
			}
		} else if(kapi2Tip == 2) {
 800280c:	4b8a      	ldr	r3, [pc, #552]	; (8002a38 <menu+0x1828>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d104      	bne.n	800281e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002814:	4a89      	ldr	r2, [pc, #548]	; (8002a3c <menu+0x182c>)
 8002816:	2101      	movs	r1, #1
 8002818:	2002      	movs	r0, #2
 800281a:	f005 fa91 	bl	8007d40 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800281e:	2102      	movs	r1, #2
 8002820:	4887      	ldr	r0, [pc, #540]	; (8002a40 <menu+0x1830>)
 8002822:	f006 fdb3 	bl	800938c <HAL_GPIO_ReadPin>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d115      	bne.n	8002858 <menu+0x1648>
 800282c:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <menu+0x1834>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00e      	beq.n	8002858 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800283a:	4b7f      	ldr	r3, [pc, #508]	; (8002a38 <menu+0x1828>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b7d      	ldr	r3, [pc, #500]	; (8002a38 <menu+0x1828>)
 8002844:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002846:	4b7c      	ldr	r3, [pc, #496]	; (8002a38 <menu+0x1828>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d902      	bls.n	8002854 <menu+0x1644>
				kapi2Tip = 0;
 800284e:	4b7a      	ldr	r3, [pc, #488]	; (8002a38 <menu+0x1828>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002854:	f002 f974 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002858:	2104      	movs	r1, #4
 800285a:	4879      	ldr	r0, [pc, #484]	; (8002a40 <menu+0x1830>)
 800285c:	f006 fd96 	bl	800938c <HAL_GPIO_ReadPin>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d115      	bne.n	8002892 <menu+0x1682>
 8002866:	4b77      	ldr	r3, [pc, #476]	; (8002a44 <menu+0x1834>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00e      	beq.n	8002892 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <menu+0x1828>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	3b01      	subs	r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <menu+0x1828>)
 800287e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002880:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <menu+0x1828>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d902      	bls.n	800288e <menu+0x167e>
		   		kapi2Tip = 2;
 8002888:	4b6b      	ldr	r3, [pc, #428]	; (8002a38 <menu+0x1828>)
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800288e:	f002 f957 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002892:	2108      	movs	r1, #8
 8002894:	486a      	ldr	r0, [pc, #424]	; (8002a40 <menu+0x1830>)
 8002896:	f006 fd79 	bl	800938c <HAL_GPIO_ReadPin>
 800289a:	4603      	mov	r3, r0
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10d      	bne.n	80028bc <menu+0x16ac>
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <menu+0x1834>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f083 0301 	eor.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <menu+0x1828>)
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <menu+0x1838>)
 80028b4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80028b6:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <menu+0x183c>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <menu+0x1840>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d17f      	bne.n	80029c4 <menu+0x17b4>
		if(dilSecim == 0) {
 80028c4:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <menu+0x1844>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80028cc:	4a62      	ldr	r2, [pc, #392]	; (8002a58 <menu+0x1848>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2001      	movs	r0, #1
 80028d2:	f005 fa35 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028d6:	4a61      	ldr	r2, [pc, #388]	; (8002a5c <menu+0x184c>)
 80028d8:	2101      	movs	r1, #1
 80028da:	2002      	movs	r0, #2
 80028dc:	f005 fa30 	bl	8007d40 <lcd_print>
 80028e0:	e00d      	b.n	80028fe <menu+0x16ee>
		} else if(dilSecim == 1) {
 80028e2:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <menu+0x1844>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d109      	bne.n	80028fe <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80028ea:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <menu+0x1850>)
 80028ec:	2101      	movs	r1, #1
 80028ee:	2001      	movs	r0, #1
 80028f0:	f005 fa26 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028f4:	4a5b      	ldr	r2, [pc, #364]	; (8002a64 <menu+0x1854>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	2002      	movs	r0, #2
 80028fa:	f005 fa21 	bl	8007d40 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 80028fe:	4b5a      	ldr	r3, [pc, #360]	; (8002a68 <menu+0x1858>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	220a      	movs	r2, #10
 8002904:	4959      	ldr	r1, [pc, #356]	; (8002a6c <menu+0x185c>)
 8002906:	4618      	mov	r0, r3
 8002908:	f009 fd6c 	bl	800c3e4 <itoa>
		lcd_print(2,16,snum);
 800290c:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <menu+0x185c>)
 800290e:	2110      	movs	r1, #16
 8002910:	2002      	movs	r0, #2
 8002912:	f005 fa15 	bl	8007d40 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002916:	2102      	movs	r1, #2
 8002918:	4849      	ldr	r0, [pc, #292]	; (8002a40 <menu+0x1830>)
 800291a:	f006 fd37 	bl	800938c <HAL_GPIO_ReadPin>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d119      	bne.n	8002958 <menu+0x1748>
 8002924:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <menu+0x1834>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f083 0301 	eor.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d012      	beq.n	8002958 <menu+0x1748>
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <menu+0x1828>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 800293a:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <menu+0x1858>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	3301      	adds	r3, #1
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <menu+0x1858>)
 8002944:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <menu+0x1858>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d902      	bls.n	8002954 <menu+0x1744>
				kapi2AcSure = 0;
 800294e:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <menu+0x1858>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002954:	f002 f8f4 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002958:	2104      	movs	r1, #4
 800295a:	4839      	ldr	r0, [pc, #228]	; (8002a40 <menu+0x1830>)
 800295c:	f006 fd16 	bl	800938c <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d119      	bne.n	800299a <menu+0x178a>
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <menu+0x1834>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <menu+0x178a>
 8002974:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <menu+0x1828>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10e      	bne.n	800299a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <menu+0x1858>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	3b01      	subs	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <menu+0x1858>)
 8002986:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <menu+0x1858>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b06      	cmp	r3, #6
 800298e:	d902      	bls.n	8002996 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002990:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <menu+0x1858>)
 8002992:	2205      	movs	r2, #5
 8002994:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002996:	f002 f8d3 	bl	8004b40 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800299a:	2108      	movs	r1, #8
 800299c:	4828      	ldr	r0, [pc, #160]	; (8002a40 <menu+0x1830>)
 800299e:	f006 fcf5 	bl	800938c <HAL_GPIO_ReadPin>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10d      	bne.n	80029c4 <menu+0x17b4>
 80029a8:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <menu+0x1834>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <menu+0x1858>)
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <menu+0x1838>)
 80029bc:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <menu+0x183c>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <menu+0x1840>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b0d      	cmp	r3, #13
 80029ca:	f040 80b5 	bne.w	8002b38 <menu+0x1928>
		if(dilSecim == 0) {
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <menu+0x1844>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80029d6:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <menu+0x1860>)
 80029d8:	2101      	movs	r1, #1
 80029da:	2001      	movs	r0, #1
 80029dc:	f005 f9b0 	bl	8007d40 <lcd_print>
 80029e0:	e008      	b.n	80029f4 <menu+0x17e4>
		} else if(dilSecim == 1){
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <menu+0x1844>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d104      	bne.n	80029f4 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <menu+0x1864>)
 80029ec:	2101      	movs	r1, #1
 80029ee:	2001      	movs	r0, #1
 80029f0:	f005 f9a6 	bl	8007d40 <lcd_print>
		}

		if(kapitablaTip == 0) {
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <menu+0x1868>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <menu+0x186c>)
 80029fe:	2101      	movs	r1, #1
 8002a00:	2002      	movs	r0, #2
 8002a02:	f005 f99d 	bl	8007d40 <lcd_print>
 8002a06:	e048      	b.n	8002a9a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <menu+0x1868>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d13b      	bne.n	8002a88 <menu+0x1878>
			if(dilSecim == 0) {
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <menu+0x1844>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <menu+0x1870>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f005 f98f 	bl	8007d40 <lcd_print>
 8002a22:	e03a      	b.n	8002a9a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <menu+0x1844>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d136      	bne.n	8002a9a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002a2c:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <menu+0x1874>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f005 f985 	bl	8007d40 <lcd_print>
 8002a36:	e030      	b.n	8002a9a <menu+0x188a>
 8002a38:	2000023e 	.word	0x2000023e
 8002a3c:	0800d588 	.word	0x0800d588
 8002a40:	40010800 	.word	0x40010800
 8002a44:	20000263 	.word	0x20000263
 8002a48:	20000118 	.word	0x20000118
 8002a4c:	20000260 	.word	0x20000260
 8002a50:	20000234 	.word	0x20000234
 8002a54:	20000255 	.word	0x20000255
 8002a58:	0800d608 	.word	0x0800d608
 8002a5c:	0800d5ac 	.word	0x0800d5ac
 8002a60:	0800d61c 	.word	0x0800d61c
 8002a64:	0800d5d0 	.word	0x0800d5d0
 8002a68:	2000024e 	.word	0x2000024e
 8002a6c:	20000188 	.word	0x20000188
 8002a70:	0800d630 	.word	0x0800d630
 8002a74:	0800d644 	.word	0x0800d644
 8002a78:	2000023f 	.word	0x2000023f
 8002a7c:	0800d550 	.word	0x0800d550
 8002a80:	0800d564 	.word	0x0800d564
 8002a84:	0800d574 	.word	0x0800d574
			}
		} else if(kapitablaTip == 2) {
 8002a88:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <menu+0x19e8>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d104      	bne.n	8002a9a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a90:	4a5a      	ldr	r2, [pc, #360]	; (8002bfc <menu+0x19ec>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	2002      	movs	r0, #2
 8002a96:	f005 f953 	bl	8007d40 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	4858      	ldr	r0, [pc, #352]	; (8002c00 <menu+0x19f0>)
 8002a9e:	f006 fc75 	bl	800938c <HAL_GPIO_ReadPin>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d115      	bne.n	8002ad4 <menu+0x18c4>
 8002aa8:	4b56      	ldr	r3, [pc, #344]	; (8002c04 <menu+0x19f4>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00e      	beq.n	8002ad4 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002ab6:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <menu+0x19e8>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <menu+0x19e8>)
 8002ac0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002ac2:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <menu+0x19e8>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <menu+0x18c0>
				kapitablaTip = 0;
 8002aca:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <menu+0x19e8>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ad0:	f002 f836 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad4:	2104      	movs	r1, #4
 8002ad6:	484a      	ldr	r0, [pc, #296]	; (8002c00 <menu+0x19f0>)
 8002ad8:	f006 fc58 	bl	800938c <HAL_GPIO_ReadPin>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d115      	bne.n	8002b0e <menu+0x18fe>
 8002ae2:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <menu+0x19f4>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	f083 0301 	eor.w	r3, r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002af0:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <menu+0x19e8>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <menu+0x19e8>)
 8002afa:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002afc:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <menu+0x19e8>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d902      	bls.n	8002b0a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002b04:	4b3c      	ldr	r3, [pc, #240]	; (8002bf8 <menu+0x19e8>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b0a:	f002 f819 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0e:	2108      	movs	r1, #8
 8002b10:	483b      	ldr	r0, [pc, #236]	; (8002c00 <menu+0x19f0>)
 8002b12:	f006 fc3b 	bl	800938c <HAL_GPIO_ReadPin>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10d      	bne.n	8002b38 <menu+0x1928>
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <menu+0x19f4>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <menu+0x19e8>)
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <menu+0x19f8>)
 8002b30:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002b32:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <menu+0x19fc>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <menu+0x1a00>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b0e      	cmp	r3, #14
 8002b3e:	f040 80f2 	bne.w	8002d26 <menu+0x1b16>
		if(dilSecim == 0) {
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <menu+0x1a04>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002b4a:	4a33      	ldr	r2, [pc, #204]	; (8002c18 <menu+0x1a08>)
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f005 f8f6 	bl	8007d40 <lcd_print>
 8002b54:	e008      	b.n	8002b68 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002b56:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <menu+0x1a04>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d104      	bne.n	8002b68 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002b5e:	4a2f      	ldr	r2, [pc, #188]	; (8002c1c <menu+0x1a0c>)
 8002b60:	2101      	movs	r1, #1
 8002b62:	2001      	movs	r0, #1
 8002b64:	f005 f8ec 	bl	8007d40 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002b68:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <menu+0x1a10>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d113      	bne.n	8002b98 <menu+0x1988>
			if(dilSecim == 0){
 8002b70:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <menu+0x1a04>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b78:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <menu+0x1a14>)
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	f005 f8df 	bl	8007d40 <lcd_print>
 8002b82:	e071      	b.n	8002c68 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b84:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <menu+0x1a04>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d16d      	bne.n	8002c68 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b8c:	4a26      	ldr	r2, [pc, #152]	; (8002c28 <menu+0x1a18>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	2002      	movs	r0, #2
 8002b92:	f005 f8d5 	bl	8007d40 <lcd_print>
 8002b96:	e067      	b.n	8002c68 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b98:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <menu+0x1a10>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d112      	bne.n	8002bc6 <menu+0x19b6>
			if(dilSecim == 0){
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <menu+0x1a04>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002ba8:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <menu+0x1a1c>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	2002      	movs	r0, #2
 8002bae:	f005 f8c7 	bl	8007d40 <lcd_print>
			}
			if(dilSecim == 1){
 8002bb2:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <menu+0x1a04>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d156      	bne.n	8002c68 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <menu+0x1a20>)
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f005 f8be 	bl	8007d40 <lcd_print>
 8002bc4:	e050      	b.n	8002c68 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <menu+0x1a10>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d136      	bne.n	8002c3c <menu+0x1a2c>
			if(dilSecim == 0){
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <menu+0x1a04>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002bd6:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <menu+0x1a24>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f005 f8b0 	bl	8007d40 <lcd_print>
 8002be0:	e042      	b.n	8002c68 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <menu+0x1a04>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d13e      	bne.n	8002c68 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <menu+0x1a28>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f005 f8a6 	bl	8007d40 <lcd_print>
 8002bf4:	e038      	b.n	8002c68 <menu+0x1a58>
 8002bf6:	bf00      	nop
 8002bf8:	2000023f 	.word	0x2000023f
 8002bfc:	0800d588 	.word	0x0800d588
 8002c00:	40010800 	.word	0x40010800
 8002c04:	20000263 	.word	0x20000263
 8002c08:	20000118 	.word	0x20000118
 8002c0c:	20000260 	.word	0x20000260
 8002c10:	20000234 	.word	0x20000234
 8002c14:	20000255 	.word	0x20000255
 8002c18:	0800d658 	.word	0x0800d658
 8002c1c:	0800d66c 	.word	0x0800d66c
 8002c20:	20000241 	.word	0x20000241
 8002c24:	0800d680 	.word	0x0800d680
 8002c28:	0800d690 	.word	0x0800d690
 8002c2c:	0800d6a0 	.word	0x0800d6a0
 8002c30:	0800d6b0 	.word	0x0800d6b0
 8002c34:	0800d6c0 	.word	0x0800d6c0
 8002c38:	0800d6d4 	.word	0x0800d6d4
			}
		} else if(kapiTablaAcKonum == 3) {
 8002c3c:	4b9b      	ldr	r3, [pc, #620]	; (8002eac <menu+0x1c9c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d111      	bne.n	8002c68 <menu+0x1a58>
			if(dilSecim == 0) {
 8002c44:	4b9a      	ldr	r3, [pc, #616]	; (8002eb0 <menu+0x1ca0>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002c4c:	4a99      	ldr	r2, [pc, #612]	; (8002eb4 <menu+0x1ca4>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2002      	movs	r0, #2
 8002c52:	f005 f875 	bl	8007d40 <lcd_print>
			}
			if(dilSecim == 1) {
 8002c56:	4b96      	ldr	r3, [pc, #600]	; (8002eb0 <menu+0x1ca0>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d104      	bne.n	8002c68 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002c5e:	4a96      	ldr	r2, [pc, #600]	; (8002eb8 <menu+0x1ca8>)
 8002c60:	2101      	movs	r1, #1
 8002c62:	2002      	movs	r0, #2
 8002c64:	f005 f86c 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4894      	ldr	r0, [pc, #592]	; (8002ebc <menu+0x1cac>)
 8002c6c:	f006 fb8e 	bl	800938c <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d115      	bne.n	8002ca2 <menu+0x1a92>
 8002c76:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <menu+0x1cb0>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f083 0301 	eor.w	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00e      	beq.n	8002ca2 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c84:	4b89      	ldr	r3, [pc, #548]	; (8002eac <menu+0x1c9c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	4b87      	ldr	r3, [pc, #540]	; (8002eac <menu+0x1c9c>)
 8002c8e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c90:	4b86      	ldr	r3, [pc, #536]	; (8002eac <menu+0x1c9c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d902      	bls.n	8002c9e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c98:	4b84      	ldr	r3, [pc, #528]	; (8002eac <menu+0x1c9c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c9e:	f001 ff4f 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	4885      	ldr	r0, [pc, #532]	; (8002ebc <menu+0x1cac>)
 8002ca6:	f006 fb71 	bl	800938c <HAL_GPIO_ReadPin>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d115      	bne.n	8002cdc <menu+0x1acc>
 8002cb0:	4b83      	ldr	r3, [pc, #524]	; (8002ec0 <menu+0x1cb0>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00e      	beq.n	8002cdc <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002cbe:	4b7b      	ldr	r3, [pc, #492]	; (8002eac <menu+0x1c9c>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b79      	ldr	r3, [pc, #484]	; (8002eac <menu+0x1c9c>)
 8002cc8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002cca:	4b78      	ldr	r3, [pc, #480]	; (8002eac <menu+0x1c9c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d902      	bls.n	8002cd8 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002cd2:	4b76      	ldr	r3, [pc, #472]	; (8002eac <menu+0x1c9c>)
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cd8:	f001 ff32 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cdc:	2108      	movs	r1, #8
 8002cde:	4877      	ldr	r0, [pc, #476]	; (8002ebc <menu+0x1cac>)
 8002ce0:	f006 fb54 	bl	800938c <HAL_GPIO_ReadPin>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d11d      	bne.n	8002d26 <menu+0x1b16>
 8002cea:	4b75      	ldr	r3, [pc, #468]	; (8002ec0 <menu+0x1cb0>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d016      	beq.n	8002d26 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002cf8:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <menu+0x1c9c>)
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <menu+0x1cb4>)
 8002cfe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002d02:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <menu+0x1c9c>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <menu+0x1b02>
 8002d0a:	4b68      	ldr	r3, [pc, #416]	; (8002eac <menu+0x1c9c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d106      	bne.n	8002d20 <menu+0x1b10>
				altLimit = 1;
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <menu+0x1cb8>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d18:	4b6b      	ldr	r3, [pc, #428]	; (8002ec8 <menu+0x1cb8>)
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	4b69      	ldr	r3, [pc, #420]	; (8002ec4 <menu+0x1cb4>)
 8002d1e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <menu+0x1cbc>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002d26:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <menu+0x1cc0>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d17f      	bne.n	8002e2e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002d2e:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <menu+0x1ca0>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002d36:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <menu+0x1cc4>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f005 f800 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d40:	4a65      	ldr	r2, [pc, #404]	; (8002ed8 <menu+0x1cc8>)
 8002d42:	2101      	movs	r1, #1
 8002d44:	2002      	movs	r0, #2
 8002d46:	f004 fffb 	bl	8007d40 <lcd_print>
 8002d4a:	e00d      	b.n	8002d68 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002d4c:	4b58      	ldr	r3, [pc, #352]	; (8002eb0 <menu+0x1ca0>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d109      	bne.n	8002d68 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002d54:	4a61      	ldr	r2, [pc, #388]	; (8002edc <menu+0x1ccc>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f004 fff1 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d5e:	4a60      	ldr	r2, [pc, #384]	; (8002ee0 <menu+0x1cd0>)
 8002d60:	2101      	movs	r1, #1
 8002d62:	2002      	movs	r0, #2
 8002d64:	f004 ffec 	bl	8007d40 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002d68:	4b5e      	ldr	r3, [pc, #376]	; (8002ee4 <menu+0x1cd4>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	220a      	movs	r2, #10
 8002d6e:	495e      	ldr	r1, [pc, #376]	; (8002ee8 <menu+0x1cd8>)
 8002d70:	4618      	mov	r0, r3
 8002d72:	f009 fb37 	bl	800c3e4 <itoa>
		lcd_print(2,16,snum);
 8002d76:	4a5c      	ldr	r2, [pc, #368]	; (8002ee8 <menu+0x1cd8>)
 8002d78:	2110      	movs	r1, #16
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f004 ffe0 	bl	8007d40 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d80:	2102      	movs	r1, #2
 8002d82:	484e      	ldr	r0, [pc, #312]	; (8002ebc <menu+0x1cac>)
 8002d84:	f006 fb02 	bl	800938c <HAL_GPIO_ReadPin>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d119      	bne.n	8002dc2 <menu+0x1bb2>
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <menu+0x1cb0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	f083 0301 	eor.w	r3, r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <menu+0x1bb2>
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <menu+0x1cdc>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10e      	bne.n	8002dc2 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002da4:	4b4f      	ldr	r3, [pc, #316]	; (8002ee4 <menu+0x1cd4>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <menu+0x1cd4>)
 8002dae:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002db0:	4b4c      	ldr	r3, [pc, #304]	; (8002ee4 <menu+0x1cd4>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d902      	bls.n	8002dbe <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <menu+0x1cd4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dbe:	f001 febf 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	483d      	ldr	r0, [pc, #244]	; (8002ebc <menu+0x1cac>)
 8002dc6:	f006 fae1 	bl	800938c <HAL_GPIO_ReadPin>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d119      	bne.n	8002e04 <menu+0x1bf4>
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <menu+0x1cb0>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d012      	beq.n	8002e04 <menu+0x1bf4>
 8002dde:	4b43      	ldr	r3, [pc, #268]	; (8002eec <menu+0x1cdc>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10e      	bne.n	8002e04 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002de6:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <menu+0x1cd4>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <menu+0x1cd4>)
 8002df0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002df2:	4b3c      	ldr	r3, [pc, #240]	; (8002ee4 <menu+0x1cd4>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <menu+0x1cd4>)
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002e00:	f001 fe9e 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e04:	2108      	movs	r1, #8
 8002e06:	482d      	ldr	r0, [pc, #180]	; (8002ebc <menu+0x1cac>)
 8002e08:	f006 fac0 	bl	800938c <HAL_GPIO_ReadPin>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d10d      	bne.n	8002e2e <menu+0x1c1e>
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <menu+0x1cb0>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	f083 0301 	eor.w	r3, r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002e20:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <menu+0x1cd4>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <menu+0x1cb4>)
 8002e26:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <menu+0x1cbc>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002e2e:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <menu+0x1cc0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	f040 80bc 	bne.w	8002fb0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <menu+0x1ca0>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002e40:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <menu+0x1ce0>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	2001      	movs	r0, #1
 8002e46:	f004 ff7b 	bl	8007d40 <lcd_print>
 8002e4a:	e008      	b.n	8002e5e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <menu+0x1ca0>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d104      	bne.n	8002e5e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <menu+0x1ce4>)
 8002e56:	2101      	movs	r1, #1
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f004 ff71 	bl	8007d40 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <menu+0x1ce8>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d113      	bne.n	8002e8e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <menu+0x1ca0>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002e6e:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <menu+0x1ca4>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	2002      	movs	r0, #2
 8002e74:	f004 ff64 	bl	8007d40 <lcd_print>
 8002e78:	e04b      	b.n	8002f12 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <menu+0x1ca0>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d147      	bne.n	8002f12 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e82:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <menu+0x1ca8>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	2002      	movs	r0, #2
 8002e88:	f004 ff5a 	bl	8007d40 <lcd_print>
 8002e8c:	e041      	b.n	8002f12 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <menu+0x1ce8>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d13d      	bne.n	8002f12 <menu+0x1d02>
			if(dilSecim == 0) {
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <menu+0x1ca0>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d130      	bne.n	8002f00 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e9e:	4a17      	ldr	r2, [pc, #92]	; (8002efc <menu+0x1cec>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f004 ff4c 	bl	8007d40 <lcd_print>
 8002ea8:	e033      	b.n	8002f12 <menu+0x1d02>
 8002eaa:	bf00      	nop
 8002eac:	20000241 	.word	0x20000241
 8002eb0:	20000255 	.word	0x20000255
 8002eb4:	0800d348 	.word	0x0800d348
 8002eb8:	0800d35c 	.word	0x0800d35c
 8002ebc:	40010800 	.word	0x40010800
 8002ec0:	20000263 	.word	0x20000263
 8002ec4:	20000118 	.word	0x20000118
 8002ec8:	2000023a 	.word	0x2000023a
 8002ecc:	20000260 	.word	0x20000260
 8002ed0:	20000234 	.word	0x20000234
 8002ed4:	0800d6e8 	.word	0x0800d6e8
 8002ed8:	0800d5ac 	.word	0x0800d5ac
 8002edc:	0800d6fc 	.word	0x0800d6fc
 8002ee0:	0800d5d0 	.word	0x0800d5d0
 8002ee4:	2000024f 	.word	0x2000024f
 8002ee8:	20000188 	.word	0x20000188
 8002eec:	2000023f 	.word	0x2000023f
 8002ef0:	0800d710 	.word	0x0800d710
 8002ef4:	0800d724 	.word	0x0800d724
 8002ef8:	20000242 	.word	0x20000242
 8002efc:	0800d3a8 	.word	0x0800d3a8
			} else if(dilSecim == 1) {
 8002f00:	4b99      	ldr	r3, [pc, #612]	; (8003168 <menu+0x1f58>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d104      	bne.n	8002f12 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002f08:	4a98      	ldr	r2, [pc, #608]	; (800316c <menu+0x1f5c>)
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f004 ff17 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f12:	2102      	movs	r1, #2
 8002f14:	4896      	ldr	r0, [pc, #600]	; (8003170 <menu+0x1f60>)
 8002f16:	f006 fa39 	bl	800938c <HAL_GPIO_ReadPin>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d115      	bne.n	8002f4c <menu+0x1d3c>
 8002f20:	4b94      	ldr	r3, [pc, #592]	; (8003174 <menu+0x1f64>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	f083 0301 	eor.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00e      	beq.n	8002f4c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002f2e:	4b92      	ldr	r3, [pc, #584]	; (8003178 <menu+0x1f68>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4b90      	ldr	r3, [pc, #576]	; (8003178 <menu+0x1f68>)
 8002f38:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002f3a:	4b8f      	ldr	r3, [pc, #572]	; (8003178 <menu+0x1f68>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d902      	bls.n	8002f48 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002f42:	4b8d      	ldr	r3, [pc, #564]	; (8003178 <menu+0x1f68>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f48:	f001 fdfa 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	4888      	ldr	r0, [pc, #544]	; (8003170 <menu+0x1f60>)
 8002f50:	f006 fa1c 	bl	800938c <HAL_GPIO_ReadPin>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d115      	bne.n	8002f86 <menu+0x1d76>
 8002f5a:	4b86      	ldr	r3, [pc, #536]	; (8003174 <menu+0x1f64>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	f083 0301 	eor.w	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002f68:	4b83      	ldr	r3, [pc, #524]	; (8003178 <menu+0x1f68>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	4b81      	ldr	r3, [pc, #516]	; (8003178 <menu+0x1f68>)
 8002f72:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002f74:	4b80      	ldr	r3, [pc, #512]	; (8003178 <menu+0x1f68>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002f7c:	4b7e      	ldr	r3, [pc, #504]	; (8003178 <menu+0x1f68>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f82:	f001 fddd 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f86:	2108      	movs	r1, #8
 8002f88:	4879      	ldr	r0, [pc, #484]	; (8003170 <menu+0x1f60>)
 8002f8a:	f006 f9ff 	bl	800938c <HAL_GPIO_ReadPin>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10d      	bne.n	8002fb0 <menu+0x1da0>
 8002f94:	4b77      	ldr	r3, [pc, #476]	; (8003174 <menu+0x1f64>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	f083 0301 	eor.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d006      	beq.n	8002fb0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002fa2:	4b75      	ldr	r3, [pc, #468]	; (8003178 <menu+0x1f68>)
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	4b75      	ldr	r3, [pc, #468]	; (800317c <menu+0x1f6c>)
 8002fa8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002faa:	4b75      	ldr	r3, [pc, #468]	; (8003180 <menu+0x1f70>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002fb0:	4b74      	ldr	r3, [pc, #464]	; (8003184 <menu+0x1f74>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b11      	cmp	r3, #17
 8002fb6:	f040 80c3 	bne.w	8003140 <menu+0x1f30>
		if(dilSecim == 0) {
 8002fba:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <menu+0x1f58>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002fc2:	4a71      	ldr	r2, [pc, #452]	; (8003188 <menu+0x1f78>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f004 feba 	bl	8007d40 <lcd_print>
 8002fcc:	e008      	b.n	8002fe0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002fce:	4b66      	ldr	r3, [pc, #408]	; (8003168 <menu+0x1f58>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d104      	bne.n	8002fe0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002fd6:	4a6d      	ldr	r2, [pc, #436]	; (800318c <menu+0x1f7c>)
 8002fd8:	2101      	movs	r1, #1
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f004 feb0 	bl	8007d40 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	; (8003190 <menu+0x1f80>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d113      	bne.n	8003010 <menu+0x1e00>
			if(dilSecim == 0){
 8002fe8:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <menu+0x1f58>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002ff0:	4a68      	ldr	r2, [pc, #416]	; (8003194 <menu+0x1f84>)
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	f004 fea3 	bl	8007d40 <lcd_print>
 8002ffa:	e038      	b.n	800306e <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002ffc:	4b5a      	ldr	r3, [pc, #360]	; (8003168 <menu+0x1f58>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d134      	bne.n	800306e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003004:	4a64      	ldr	r2, [pc, #400]	; (8003198 <menu+0x1f88>)
 8003006:	2101      	movs	r1, #1
 8003008:	2002      	movs	r0, #2
 800300a:	f004 fe99 	bl	8007d40 <lcd_print>
 800300e:	e02e      	b.n	800306e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003010:	4b5f      	ldr	r3, [pc, #380]	; (8003190 <menu+0x1f80>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d113      	bne.n	8003040 <menu+0x1e30>
			if(dilSecim == 0){
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <menu+0x1f58>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003020:	4a5e      	ldr	r2, [pc, #376]	; (800319c <menu+0x1f8c>)
 8003022:	2101      	movs	r1, #1
 8003024:	2002      	movs	r0, #2
 8003026:	f004 fe8b 	bl	8007d40 <lcd_print>
 800302a:	e020      	b.n	800306e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800302c:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <menu+0x1f58>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d11c      	bne.n	800306e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003034:	4a5a      	ldr	r2, [pc, #360]	; (80031a0 <menu+0x1f90>)
 8003036:	2101      	movs	r1, #1
 8003038:	2002      	movs	r0, #2
 800303a:	f004 fe81 	bl	8007d40 <lcd_print>
 800303e:	e016      	b.n	800306e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <menu+0x1f80>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d112      	bne.n	800306e <menu+0x1e5e>
			if(dilSecim == 0) {
 8003048:	4b47      	ldr	r3, [pc, #284]	; (8003168 <menu+0x1f58>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <menu+0x1f94>)
 8003052:	2101      	movs	r1, #1
 8003054:	2002      	movs	r0, #2
 8003056:	f004 fe73 	bl	8007d40 <lcd_print>
 800305a:	e008      	b.n	800306e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800305c:	4b42      	ldr	r3, [pc, #264]	; (8003168 <menu+0x1f58>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d104      	bne.n	800306e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003064:	4a50      	ldr	r2, [pc, #320]	; (80031a8 <menu+0x1f98>)
 8003066:	2101      	movs	r1, #1
 8003068:	2002      	movs	r0, #2
 800306a:	f004 fe69 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800306e:	2102      	movs	r1, #2
 8003070:	483f      	ldr	r0, [pc, #252]	; (8003170 <menu+0x1f60>)
 8003072:	f006 f98b 	bl	800938c <HAL_GPIO_ReadPin>
 8003076:	4603      	mov	r3, r0
 8003078:	2b01      	cmp	r3, #1
 800307a:	d115      	bne.n	80030a8 <menu+0x1e98>
 800307c:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <menu+0x1f64>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	f083 0301 	eor.w	r3, r3, #1
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00e      	beq.n	80030a8 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800308a:	4b41      	ldr	r3, [pc, #260]	; (8003190 <menu+0x1f80>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <menu+0x1f80>)
 8003094:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003096:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <menu+0x1f80>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d902      	bls.n	80030a4 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800309e:	4b3c      	ldr	r3, [pc, #240]	; (8003190 <menu+0x1f80>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030a4:	f001 fd4c 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030a8:	2104      	movs	r1, #4
 80030aa:	4831      	ldr	r0, [pc, #196]	; (8003170 <menu+0x1f60>)
 80030ac:	f006 f96e 	bl	800938c <HAL_GPIO_ReadPin>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d115      	bne.n	80030e2 <menu+0x1ed2>
 80030b6:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <menu+0x1f64>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	f083 0301 	eor.w	r3, r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <menu+0x1f80>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	4b30      	ldr	r3, [pc, #192]	; (8003190 <menu+0x1f80>)
 80030ce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80030d0:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <menu+0x1f80>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d902      	bls.n	80030de <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <menu+0x1f80>)
 80030da:	2202      	movs	r2, #2
 80030dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030de:	f001 fd2f 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030e2:	2108      	movs	r1, #8
 80030e4:	4822      	ldr	r0, [pc, #136]	; (8003170 <menu+0x1f60>)
 80030e6:	f006 f951 	bl	800938c <HAL_GPIO_ReadPin>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d127      	bne.n	8003140 <menu+0x1f30>
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <menu+0x1f64>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f083 0301 	eor.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d020      	beq.n	8003140 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <menu+0x1f80>)
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <menu+0x1f6c>)
 8003104:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <menu+0x1f80>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <menu+0x1f06>
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <menu+0x1f80>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d106      	bne.n	8003124 <menu+0x1f14>
				calismaSekli = 0;
 8003116:	4b25      	ldr	r3, [pc, #148]	; (80031ac <menu+0x1f9c>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800311c:	4b23      	ldr	r3, [pc, #140]	; (80031ac <menu+0x1f9c>)
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	4b16      	ldr	r3, [pc, #88]	; (800317c <menu+0x1f6c>)
 8003122:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <menu+0x1f80>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d106      	bne.n	800313a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <menu+0x1fa0>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003132:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <menu+0x1fa0>)
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <menu+0x1f6c>)
 8003138:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <menu+0x1f70>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <menu+0x1f74>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b12      	cmp	r3, #18
 8003146:	f040 80d5 	bne.w	80032f4 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <menu+0x1f80>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d13c      	bne.n	80031cc <menu+0x1fbc>
			if(dilSecim == 0) {
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <menu+0x1f58>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12e      	bne.n	80031b8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800315a:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <menu+0x1fa4>)
 800315c:	2101      	movs	r1, #1
 800315e:	2001      	movs	r0, #1
 8003160:	f004 fdee 	bl	8007d40 <lcd_print>
 8003164:	e048      	b.n	80031f8 <menu+0x1fe8>
 8003166:	bf00      	nop
 8003168:	20000255 	.word	0x20000255
 800316c:	0800d3bc 	.word	0x0800d3bc
 8003170:	40010800 	.word	0x40010800
 8003174:	20000263 	.word	0x20000263
 8003178:	20000242 	.word	0x20000242
 800317c:	20000118 	.word	0x20000118
 8003180:	20000260 	.word	0x20000260
 8003184:	20000234 	.word	0x20000234
 8003188:	0800d738 	.word	0x0800d738
 800318c:	0800d74c 	.word	0x0800d74c
 8003190:	20000243 	.word	0x20000243
 8003194:	0800d760 	.word	0x0800d760
 8003198:	0800d770 	.word	0x0800d770
 800319c:	0800d780 	.word	0x0800d780
 80031a0:	0800d790 	.word	0x0800d790
 80031a4:	0800d348 	.word	0x0800d348
 80031a8:	0800d35c 	.word	0x0800d35c
 80031ac:	20000235 	.word	0x20000235
 80031b0:	20000246 	.word	0x20000246
 80031b4:	0800d7a0 	.word	0x0800d7a0
			} else if(dilSecim == 1) {
 80031b8:	4b7b      	ldr	r3, [pc, #492]	; (80033a8 <menu+0x2198>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d11b      	bne.n	80031f8 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80031c0:	4a7a      	ldr	r2, [pc, #488]	; (80033ac <menu+0x219c>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2001      	movs	r0, #1
 80031c6:	f004 fdbb 	bl	8007d40 <lcd_print>
 80031ca:	e015      	b.n	80031f8 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031cc:	4b78      	ldr	r3, [pc, #480]	; (80033b0 <menu+0x21a0>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d111      	bne.n	80031f8 <menu+0x1fe8>
			if(dilSecim == 0){
 80031d4:	4b74      	ldr	r3, [pc, #464]	; (80033a8 <menu+0x2198>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80031dc:	4a75      	ldr	r2, [pc, #468]	; (80033b4 <menu+0x21a4>)
 80031de:	2101      	movs	r1, #1
 80031e0:	2001      	movs	r0, #1
 80031e2:	f004 fdad 	bl	8007d40 <lcd_print>
			}
			if(dilSecim == 1){
 80031e6:	4b70      	ldr	r3, [pc, #448]	; (80033a8 <menu+0x2198>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d104      	bne.n	80031f8 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80031ee:	4a72      	ldr	r2, [pc, #456]	; (80033b8 <menu+0x21a8>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	2001      	movs	r0, #1
 80031f4:	f004 fda4 	bl	8007d40 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80031f8:	4b70      	ldr	r3, [pc, #448]	; (80033bc <menu+0x21ac>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d113      	bne.n	8003228 <menu+0x2018>
			if(dilSecim == 0) {
 8003200:	4b69      	ldr	r3, [pc, #420]	; (80033a8 <menu+0x2198>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003208:	4a6d      	ldr	r2, [pc, #436]	; (80033c0 <menu+0x21b0>)
 800320a:	2101      	movs	r1, #1
 800320c:	2002      	movs	r0, #2
 800320e:	f004 fd97 	bl	8007d40 <lcd_print>
 8003212:	e020      	b.n	8003256 <menu+0x2046>
			} else if(dilSecim == 1){
 8003214:	4b64      	ldr	r3, [pc, #400]	; (80033a8 <menu+0x2198>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d11c      	bne.n	8003256 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800321c:	4a69      	ldr	r2, [pc, #420]	; (80033c4 <menu+0x21b4>)
 800321e:	2101      	movs	r1, #1
 8003220:	2002      	movs	r0, #2
 8003222:	f004 fd8d 	bl	8007d40 <lcd_print>
 8003226:	e016      	b.n	8003256 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003228:	4b64      	ldr	r3, [pc, #400]	; (80033bc <menu+0x21ac>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d112      	bne.n	8003256 <menu+0x2046>
			if(dilSecim == 0){
 8003230:	4b5d      	ldr	r3, [pc, #372]	; (80033a8 <menu+0x2198>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003238:	4a63      	ldr	r2, [pc, #396]	; (80033c8 <menu+0x21b8>)
 800323a:	2101      	movs	r1, #1
 800323c:	2002      	movs	r0, #2
 800323e:	f004 fd7f 	bl	8007d40 <lcd_print>
 8003242:	e008      	b.n	8003256 <menu+0x2046>
			} else if(dilSecim == 1){
 8003244:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <menu+0x2198>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d104      	bne.n	8003256 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800324c:	4a5f      	ldr	r2, [pc, #380]	; (80033cc <menu+0x21bc>)
 800324e:	2101      	movs	r1, #1
 8003250:	2002      	movs	r0, #2
 8003252:	f004 fd75 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003256:	2102      	movs	r1, #2
 8003258:	485d      	ldr	r0, [pc, #372]	; (80033d0 <menu+0x21c0>)
 800325a:	f006 f897 	bl	800938c <HAL_GPIO_ReadPin>
 800325e:	4603      	mov	r3, r0
 8003260:	2b01      	cmp	r3, #1
 8003262:	d115      	bne.n	8003290 <menu+0x2080>
 8003264:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <menu+0x21c4>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	f083 0301 	eor.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00e      	beq.n	8003290 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003272:	4b52      	ldr	r3, [pc, #328]	; (80033bc <menu+0x21ac>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4b50      	ldr	r3, [pc, #320]	; (80033bc <menu+0x21ac>)
 800327c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800327e:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <menu+0x21ac>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d902      	bls.n	800328c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003286:	4b4d      	ldr	r3, [pc, #308]	; (80033bc <menu+0x21ac>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800328c:	f001 fc58 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003290:	2104      	movs	r1, #4
 8003292:	484f      	ldr	r0, [pc, #316]	; (80033d0 <menu+0x21c0>)
 8003294:	f006 f87a 	bl	800938c <HAL_GPIO_ReadPin>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	d115      	bne.n	80032ca <menu+0x20ba>
 800329e:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <menu+0x21c4>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	f083 0301 	eor.w	r3, r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00e      	beq.n	80032ca <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80032ac:	4b43      	ldr	r3, [pc, #268]	; (80033bc <menu+0x21ac>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	4b41      	ldr	r3, [pc, #260]	; (80033bc <menu+0x21ac>)
 80032b6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80032b8:	4b40      	ldr	r3, [pc, #256]	; (80033bc <menu+0x21ac>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80032c0:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <menu+0x21ac>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032c6:	f001 fc3b 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ca:	2108      	movs	r1, #8
 80032cc:	4840      	ldr	r0, [pc, #256]	; (80033d0 <menu+0x21c0>)
 80032ce:	f006 f85d 	bl	800938c <HAL_GPIO_ReadPin>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d10d      	bne.n	80032f4 <menu+0x20e4>
 80032d8:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <menu+0x21c4>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	f083 0301 	eor.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d006      	beq.n	80032f4 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80032e6:	4b35      	ldr	r3, [pc, #212]	; (80033bc <menu+0x21ac>)
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <menu+0x21c8>)
 80032ec:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <menu+0x21cc>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80032f4:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <menu+0x21d0>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b13      	cmp	r3, #19
 80032fa:	f040 80d5 	bne.w	80034a8 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <menu+0x21a0>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d113      	bne.n	800332e <menu+0x211e>
			if(dilSecim == 0) {
 8003306:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <menu+0x2198>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800330e:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <menu+0x21d4>)
 8003310:	2101      	movs	r1, #1
 8003312:	2001      	movs	r0, #1
 8003314:	f004 fd14 	bl	8007d40 <lcd_print>
 8003318:	e01f      	b.n	800335a <menu+0x214a>
			} else if(dilSecim == 1) {
 800331a:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <menu+0x2198>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d11b      	bne.n	800335a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003322:	4a31      	ldr	r2, [pc, #196]	; (80033e8 <menu+0x21d8>)
 8003324:	2101      	movs	r1, #1
 8003326:	2001      	movs	r0, #1
 8003328:	f004 fd0a 	bl	8007d40 <lcd_print>
 800332c:	e015      	b.n	800335a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <menu+0x21a0>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d111      	bne.n	800335a <menu+0x214a>
			if(dilSecim == 0) {
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <menu+0x2198>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d104      	bne.n	8003348 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800333e:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <menu+0x21dc>)
 8003340:	2101      	movs	r1, #1
 8003342:	2001      	movs	r0, #1
 8003344:	f004 fcfc 	bl	8007d40 <lcd_print>
			}
			if(dilSecim == 1) {
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <menu+0x2198>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d104      	bne.n	800335a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003350:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <menu+0x21e0>)
 8003352:	2101      	movs	r1, #1
 8003354:	2001      	movs	r0, #1
 8003356:	f004 fcf3 	bl	8007d40 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <menu+0x21e4>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d113      	bne.n	800338a <menu+0x217a>
			if(dilSecim == 0) {
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <menu+0x2198>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d105      	bne.n	8003376 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800336a:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <menu+0x21b0>)
 800336c:	2101      	movs	r1, #1
 800336e:	2002      	movs	r0, #2
 8003370:	f004 fce6 	bl	8007d40 <lcd_print>
 8003374:	e049      	b.n	800340a <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003376:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <menu+0x2198>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d145      	bne.n	800340a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800337e:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <menu+0x21b4>)
 8003380:	2101      	movs	r1, #1
 8003382:	2002      	movs	r0, #2
 8003384:	f004 fcdc 	bl	8007d40 <lcd_print>
 8003388:	e03f      	b.n	800340a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <menu+0x21e4>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d13b      	bne.n	800340a <menu+0x21fa>
			if(dilSecim == 0) {
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <menu+0x2198>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d12e      	bne.n	80033f8 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800339a:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <menu+0x21b8>)
 800339c:	2101      	movs	r1, #1
 800339e:	2002      	movs	r0, #2
 80033a0:	f004 fcce 	bl	8007d40 <lcd_print>
 80033a4:	e031      	b.n	800340a <menu+0x21fa>
 80033a6:	bf00      	nop
 80033a8:	20000255 	.word	0x20000255
 80033ac:	0800d7b4 	.word	0x0800d7b4
 80033b0:	20000243 	.word	0x20000243
 80033b4:	0800d7c4 	.word	0x0800d7c4
 80033b8:	0800d7d8 	.word	0x0800d7d8
 80033bc:	20000244 	.word	0x20000244
 80033c0:	0800d348 	.word	0x0800d348
 80033c4:	0800d35c 	.word	0x0800d35c
 80033c8:	0800d3a8 	.word	0x0800d3a8
 80033cc:	0800d3bc 	.word	0x0800d3bc
 80033d0:	40010800 	.word	0x40010800
 80033d4:	20000263 	.word	0x20000263
 80033d8:	20000118 	.word	0x20000118
 80033dc:	20000260 	.word	0x20000260
 80033e0:	20000234 	.word	0x20000234
 80033e4:	0800d7ec 	.word	0x0800d7ec
 80033e8:	0800d800 	.word	0x0800d800
 80033ec:	0800d814 	.word	0x0800d814
 80033f0:	0800d828 	.word	0x0800d828
 80033f4:	20000245 	.word	0x20000245
			} else if(dilSecim == 1) {
 80033f8:	4b90      	ldr	r3, [pc, #576]	; (800363c <menu+0x242c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d104      	bne.n	800340a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003400:	4a8f      	ldr	r2, [pc, #572]	; (8003640 <menu+0x2430>)
 8003402:	2101      	movs	r1, #1
 8003404:	2002      	movs	r0, #2
 8003406:	f004 fc9b 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800340a:	2102      	movs	r1, #2
 800340c:	488d      	ldr	r0, [pc, #564]	; (8003644 <menu+0x2434>)
 800340e:	f005 ffbd 	bl	800938c <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d115      	bne.n	8003444 <menu+0x2234>
 8003418:	4b8b      	ldr	r3, [pc, #556]	; (8003648 <menu+0x2438>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f083 0301 	eor.w	r3, r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00e      	beq.n	8003444 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003426:	4b89      	ldr	r3, [pc, #548]	; (800364c <menu+0x243c>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4b87      	ldr	r3, [pc, #540]	; (800364c <menu+0x243c>)
 8003430:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003432:	4b86      	ldr	r3, [pc, #536]	; (800364c <menu+0x243c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d902      	bls.n	8003440 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800343a:	4b84      	ldr	r3, [pc, #528]	; (800364c <menu+0x243c>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003440:	f001 fb7e 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003444:	2104      	movs	r1, #4
 8003446:	487f      	ldr	r0, [pc, #508]	; (8003644 <menu+0x2434>)
 8003448:	f005 ffa0 	bl	800938c <HAL_GPIO_ReadPin>
 800344c:	4603      	mov	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d115      	bne.n	800347e <menu+0x226e>
 8003452:	4b7d      	ldr	r3, [pc, #500]	; (8003648 <menu+0x2438>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003460:	4b7a      	ldr	r3, [pc, #488]	; (800364c <menu+0x243c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	3b01      	subs	r3, #1
 8003466:	b2da      	uxtb	r2, r3
 8003468:	4b78      	ldr	r3, [pc, #480]	; (800364c <menu+0x243c>)
 800346a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800346c:	4b77      	ldr	r3, [pc, #476]	; (800364c <menu+0x243c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003474:	4b75      	ldr	r3, [pc, #468]	; (800364c <menu+0x243c>)
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800347a:	f001 fb61 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800347e:	2108      	movs	r1, #8
 8003480:	4870      	ldr	r0, [pc, #448]	; (8003644 <menu+0x2434>)
 8003482:	f005 ff83 	bl	800938c <HAL_GPIO_ReadPin>
 8003486:	4603      	mov	r3, r0
 8003488:	2b01      	cmp	r3, #1
 800348a:	d10d      	bne.n	80034a8 <menu+0x2298>
 800348c:	4b6e      	ldr	r3, [pc, #440]	; (8003648 <menu+0x2438>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	f083 0301 	eor.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <menu+0x243c>)
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	4b6c      	ldr	r3, [pc, #432]	; (8003650 <menu+0x2440>)
 80034a0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80034a2:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <menu+0x2444>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80034a8:	4b6b      	ldr	r3, [pc, #428]	; (8003658 <menu+0x2448>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b14      	cmp	r3, #20
 80034ae:	f040 80b5 	bne.w	800361c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80034b2:	4b6a      	ldr	r3, [pc, #424]	; (800365c <menu+0x244c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d113      	bne.n	80034e2 <menu+0x22d2>
			if(dilSecim == 0) {
 80034ba:	4b60      	ldr	r3, [pc, #384]	; (800363c <menu+0x242c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80034c2:	4a67      	ldr	r2, [pc, #412]	; (8003660 <menu+0x2450>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2001      	movs	r0, #1
 80034c8:	f004 fc3a 	bl	8007d40 <lcd_print>
 80034cc:	e020      	b.n	8003510 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034ce:	4b5b      	ldr	r3, [pc, #364]	; (800363c <menu+0x242c>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d11c      	bne.n	8003510 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80034d6:	4a63      	ldr	r2, [pc, #396]	; (8003664 <menu+0x2454>)
 80034d8:	2101      	movs	r1, #1
 80034da:	2001      	movs	r0, #1
 80034dc:	f004 fc30 	bl	8007d40 <lcd_print>
 80034e0:	e016      	b.n	8003510 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80034e2:	4b5e      	ldr	r3, [pc, #376]	; (800365c <menu+0x244c>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d112      	bne.n	8003510 <menu+0x2300>
			if(dilSecim == 0) {
 80034ea:	4b54      	ldr	r3, [pc, #336]	; (800363c <menu+0x242c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80034f2:	4a5d      	ldr	r2, [pc, #372]	; (8003668 <menu+0x2458>)
 80034f4:	2101      	movs	r1, #1
 80034f6:	2001      	movs	r0, #1
 80034f8:	f004 fc22 	bl	8007d40 <lcd_print>
 80034fc:	e008      	b.n	8003510 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034fe:	4b4f      	ldr	r3, [pc, #316]	; (800363c <menu+0x242c>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d104      	bne.n	8003510 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003506:	4a59      	ldr	r2, [pc, #356]	; (800366c <menu+0x245c>)
 8003508:	2101      	movs	r1, #1
 800350a:	2001      	movs	r0, #1
 800350c:	f004 fc18 	bl	8007d40 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003510:	4b57      	ldr	r3, [pc, #348]	; (8003670 <menu+0x2460>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <menu+0x2330>
			if(dilSecim == 0) {
 8003518:	4b48      	ldr	r3, [pc, #288]	; (800363c <menu+0x242c>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003520:	4a54      	ldr	r2, [pc, #336]	; (8003674 <menu+0x2464>)
 8003522:	2101      	movs	r1, #1
 8003524:	2002      	movs	r0, #2
 8003526:	f004 fc0b 	bl	8007d40 <lcd_print>
 800352a:	e020      	b.n	800356e <menu+0x235e>
			} else if(dilSecim == 1) {
 800352c:	4b43      	ldr	r3, [pc, #268]	; (800363c <menu+0x242c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d11c      	bne.n	800356e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003534:	4a50      	ldr	r2, [pc, #320]	; (8003678 <menu+0x2468>)
 8003536:	2101      	movs	r1, #1
 8003538:	2002      	movs	r0, #2
 800353a:	f004 fc01 	bl	8007d40 <lcd_print>
 800353e:	e016      	b.n	800356e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <menu+0x2460>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d112      	bne.n	800356e <menu+0x235e>
			if(dilSecim == 0) {
 8003548:	4b3c      	ldr	r3, [pc, #240]	; (800363c <menu+0x242c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003550:	4a4a      	ldr	r2, [pc, #296]	; (800367c <menu+0x246c>)
 8003552:	2101      	movs	r1, #1
 8003554:	2002      	movs	r0, #2
 8003556:	f004 fbf3 	bl	8007d40 <lcd_print>
 800355a:	e008      	b.n	800356e <menu+0x235e>
			} else if(dilSecim == 1) {
 800355c:	4b37      	ldr	r3, [pc, #220]	; (800363c <menu+0x242c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d104      	bne.n	800356e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003564:	4a46      	ldr	r2, [pc, #280]	; (8003680 <menu+0x2470>)
 8003566:	2101      	movs	r1, #1
 8003568:	2002      	movs	r0, #2
 800356a:	f004 fbe9 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800356e:	2102      	movs	r1, #2
 8003570:	4834      	ldr	r0, [pc, #208]	; (8003644 <menu+0x2434>)
 8003572:	f005 ff0b 	bl	800938c <HAL_GPIO_ReadPin>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d119      	bne.n	80035b0 <menu+0x23a0>
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <menu+0x2438>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f083 0301 	eor.w	r3, r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <menu+0x23a0>
 800358a:	4b34      	ldr	r3, [pc, #208]	; (800365c <menu+0x244c>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d10e      	bne.n	80035b0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003592:	4b37      	ldr	r3, [pc, #220]	; (8003670 <menu+0x2460>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4b35      	ldr	r3, [pc, #212]	; (8003670 <menu+0x2460>)
 800359c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800359e:	4b34      	ldr	r3, [pc, #208]	; (8003670 <menu+0x2460>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d902      	bls.n	80035ac <menu+0x239c>
				devirmeSilindirTipi = 0;
 80035a6:	4b32      	ldr	r3, [pc, #200]	; (8003670 <menu+0x2460>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035ac:	f001 fac8 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80035b0:	2104      	movs	r1, #4
 80035b2:	4824      	ldr	r0, [pc, #144]	; (8003644 <menu+0x2434>)
 80035b4:	f005 feea 	bl	800938c <HAL_GPIO_ReadPin>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d119      	bne.n	80035f2 <menu+0x23e2>
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <menu+0x2438>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	f083 0301 	eor.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <menu+0x23e2>
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <menu+0x244c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d10e      	bne.n	80035f2 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80035d4:	4b26      	ldr	r3, [pc, #152]	; (8003670 <menu+0x2460>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <menu+0x2460>)
 80035de:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80035e0:	4b23      	ldr	r3, [pc, #140]	; (8003670 <menu+0x2460>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <menu+0x2460>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035ee:	f001 faa7 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035f2:	2108      	movs	r1, #8
 80035f4:	4813      	ldr	r0, [pc, #76]	; (8003644 <menu+0x2434>)
 80035f6:	f005 fec9 	bl	800938c <HAL_GPIO_ReadPin>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10d      	bne.n	800361c <menu+0x240c>
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <menu+0x2438>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	f083 0301 	eor.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <menu+0x2460>)
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <menu+0x2440>)
 8003614:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <menu+0x2444>)
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <menu+0x2448>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b15      	cmp	r3, #21
 8003622:	f040 80c2 	bne.w	80037aa <menu+0x259a>
		if(dilSecim == 0) {
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <menu+0x242c>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d12c      	bne.n	8003688 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <menu+0x2474>)
 8003630:	2101      	movs	r1, #1
 8003632:	2001      	movs	r0, #1
 8003634:	f004 fb84 	bl	8007d40 <lcd_print>
 8003638:	e02f      	b.n	800369a <menu+0x248a>
 800363a:	bf00      	nop
 800363c:	20000255 	.word	0x20000255
 8003640:	0800d3bc 	.word	0x0800d3bc
 8003644:	40010800 	.word	0x40010800
 8003648:	20000263 	.word	0x20000263
 800364c:	20000245 	.word	0x20000245
 8003650:	20000118 	.word	0x20000118
 8003654:	20000260 	.word	0x20000260
 8003658:	20000234 	.word	0x20000234
 800365c:	20000243 	.word	0x20000243
 8003660:	0800d83c 	.word	0x0800d83c
 8003664:	0800d850 	.word	0x0800d850
 8003668:	0800d864 	.word	0x0800d864
 800366c:	0800d878 	.word	0x0800d878
 8003670:	20000246 	.word	0x20000246
 8003674:	0800d88c 	.word	0x0800d88c
 8003678:	0800d8a0 	.word	0x0800d8a0
 800367c:	0800d8b0 	.word	0x0800d8b0
 8003680:	0800d8c4 	.word	0x0800d8c4
 8003684:	0800d8d4 	.word	0x0800d8d4
		} else if(dilSecim == 1) {
 8003688:	4b9c      	ldr	r3, [pc, #624]	; (80038fc <menu+0x26ec>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d104      	bne.n	800369a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003690:	4a9b      	ldr	r2, [pc, #620]	; (8003900 <menu+0x26f0>)
 8003692:	2101      	movs	r1, #1
 8003694:	2001      	movs	r0, #1
 8003696:	f004 fb53 	bl	8007d40 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800369a:	4b9a      	ldr	r3, [pc, #616]	; (8003904 <menu+0x26f4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d112      	bne.n	80036c8 <menu+0x24b8>
			if(dilSecim == 0) {
 80036a2:	4b96      	ldr	r3, [pc, #600]	; (80038fc <menu+0x26ec>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80036aa:	4a97      	ldr	r2, [pc, #604]	; (8003908 <menu+0x26f8>)
 80036ac:	2101      	movs	r1, #1
 80036ae:	2002      	movs	r0, #2
 80036b0:	f004 fb46 	bl	8007d40 <lcd_print>
			}
			if(dilSecim == 1) {
 80036b4:	4b91      	ldr	r3, [pc, #580]	; (80038fc <menu+0x26ec>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d11c      	bne.n	80036f6 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80036bc:	4a93      	ldr	r2, [pc, #588]	; (800390c <menu+0x26fc>)
 80036be:	2101      	movs	r1, #1
 80036c0:	2002      	movs	r0, #2
 80036c2:	f004 fb3d 	bl	8007d40 <lcd_print>
 80036c6:	e016      	b.n	80036f6 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80036c8:	4b8e      	ldr	r3, [pc, #568]	; (8003904 <menu+0x26f4>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d112      	bne.n	80036f6 <menu+0x24e6>
			if(dilSecim == 0) {
 80036d0:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <menu+0x26ec>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80036d8:	4a8d      	ldr	r2, [pc, #564]	; (8003910 <menu+0x2700>)
 80036da:	2101      	movs	r1, #1
 80036dc:	2002      	movs	r0, #2
 80036de:	f004 fb2f 	bl	8007d40 <lcd_print>
 80036e2:	e008      	b.n	80036f6 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80036e4:	4b85      	ldr	r3, [pc, #532]	; (80038fc <menu+0x26ec>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d104      	bne.n	80036f6 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80036ec:	4a89      	ldr	r2, [pc, #548]	; (8003914 <menu+0x2704>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	2002      	movs	r0, #2
 80036f2:	f004 fb25 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f6:	2102      	movs	r1, #2
 80036f8:	4887      	ldr	r0, [pc, #540]	; (8003918 <menu+0x2708>)
 80036fa:	f005 fe47 	bl	800938c <HAL_GPIO_ReadPin>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b01      	cmp	r3, #1
 8003702:	d115      	bne.n	8003730 <menu+0x2520>
 8003704:	4b85      	ldr	r3, [pc, #532]	; (800391c <menu+0x270c>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f083 0301 	eor.w	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00e      	beq.n	8003730 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003712:	4b7c      	ldr	r3, [pc, #496]	; (8003904 <menu+0x26f4>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b7a      	ldr	r3, [pc, #488]	; (8003904 <menu+0x26f4>)
 800371c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800371e:	4b79      	ldr	r3, [pc, #484]	; (8003904 <menu+0x26f4>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d902      	bls.n	800372c <menu+0x251c>
				platformSilindirTipi = 0;
 8003726:	4b77      	ldr	r3, [pc, #476]	; (8003904 <menu+0x26f4>)
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800372c:	f001 fa08 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003730:	2104      	movs	r1, #4
 8003732:	4879      	ldr	r0, [pc, #484]	; (8003918 <menu+0x2708>)
 8003734:	f005 fe2a 	bl	800938c <HAL_GPIO_ReadPin>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d115      	bne.n	800376a <menu+0x255a>
 800373e:	4b77      	ldr	r3, [pc, #476]	; (800391c <menu+0x270c>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	f083 0301 	eor.w	r3, r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00e      	beq.n	800376a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800374c:	4b6d      	ldr	r3, [pc, #436]	; (8003904 <menu+0x26f4>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	4b6b      	ldr	r3, [pc, #428]	; (8003904 <menu+0x26f4>)
 8003756:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003758:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <menu+0x26f4>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003760:	4b68      	ldr	r3, [pc, #416]	; (8003904 <menu+0x26f4>)
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003766:	f001 f9eb 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800376a:	2108      	movs	r1, #8
 800376c:	486a      	ldr	r0, [pc, #424]	; (8003918 <menu+0x2708>)
 800376e:	f005 fe0d 	bl	800938c <HAL_GPIO_ReadPin>
 8003772:	4603      	mov	r3, r0
 8003774:	2b01      	cmp	r3, #1
 8003776:	d118      	bne.n	80037aa <menu+0x259a>
 8003778:	4b68      	ldr	r3, [pc, #416]	; (800391c <menu+0x270c>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	f083 0301 	eor.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d011      	beq.n	80037aa <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003786:	4b5f      	ldr	r3, [pc, #380]	; (8003904 <menu+0x26f4>)
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <menu+0x2710>)
 800378c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800378e:	4b5d      	ldr	r3, [pc, #372]	; (8003904 <menu+0x26f4>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d106      	bne.n	80037a4 <menu+0x2594>
				altLimit = 1;
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <menu+0x2714>)
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800379c:	4b61      	ldr	r3, [pc, #388]	; (8003924 <menu+0x2714>)
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	4b5f      	ldr	r3, [pc, #380]	; (8003920 <menu+0x2710>)
 80037a2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80037a4:	4b60      	ldr	r3, [pc, #384]	; (8003928 <menu+0x2718>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80037aa:	4b60      	ldr	r3, [pc, #384]	; (800392c <menu+0x271c>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b16      	cmp	r3, #22
 80037b0:	f040 8081 	bne.w	80038b6 <menu+0x26a6>
		if(dilSecim == 0) {
 80037b4:	4b51      	ldr	r3, [pc, #324]	; (80038fc <menu+0x26ec>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80037bc:	4a5c      	ldr	r2, [pc, #368]	; (8003930 <menu+0x2720>)
 80037be:	2101      	movs	r1, #1
 80037c0:	2001      	movs	r0, #1
 80037c2:	f004 fabd 	bl	8007d40 <lcd_print>
 80037c6:	e008      	b.n	80037da <menu+0x25ca>
		} else if(dilSecim == 1) {
 80037c8:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <menu+0x26ec>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d104      	bne.n	80037da <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80037d0:	4a58      	ldr	r2, [pc, #352]	; (8003934 <menu+0x2724>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	2001      	movs	r0, #1
 80037d6:	f004 fab3 	bl	8007d40 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80037da:	4b48      	ldr	r3, [pc, #288]	; (80038fc <menu+0x26ec>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80037e2:	4a55      	ldr	r2, [pc, #340]	; (8003938 <menu+0x2728>)
 80037e4:	2101      	movs	r1, #1
 80037e6:	2002      	movs	r0, #2
 80037e8:	f004 faaa 	bl	8007d40 <lcd_print>
 80037ec:	e008      	b.n	8003800 <menu+0x25f0>
			} else if(dilSecim == 1){
 80037ee:	4b43      	ldr	r3, [pc, #268]	; (80038fc <menu+0x26ec>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d104      	bne.n	8003800 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80037f6:	4a51      	ldr	r2, [pc, #324]	; (800393c <menu+0x272c>)
 80037f8:	2101      	movs	r1, #1
 80037fa:	2002      	movs	r0, #2
 80037fc:	f004 faa0 	bl	8007d40 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003800:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <menu+0x2730>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	220a      	movs	r2, #10
 8003806:	494f      	ldr	r1, [pc, #316]	; (8003944 <menu+0x2734>)
 8003808:	4618      	mov	r0, r3
 800380a:	f008 fdeb 	bl	800c3e4 <itoa>
		lcd_print(2,16,snum);
 800380e:	4a4d      	ldr	r2, [pc, #308]	; (8003944 <menu+0x2734>)
 8003810:	2110      	movs	r1, #16
 8003812:	2002      	movs	r0, #2
 8003814:	f004 fa94 	bl	8007d40 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003818:	2102      	movs	r1, #2
 800381a:	483f      	ldr	r0, [pc, #252]	; (8003918 <menu+0x2708>)
 800381c:	f005 fdb6 	bl	800938c <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	d115      	bne.n	8003852 <menu+0x2642>
 8003826:	4b3d      	ldr	r3, [pc, #244]	; (800391c <menu+0x270c>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	f083 0301 	eor.w	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003834:	4b42      	ldr	r3, [pc, #264]	; (8003940 <menu+0x2730>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	4b40      	ldr	r3, [pc, #256]	; (8003940 <menu+0x2730>)
 800383e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003840:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <menu+0x2730>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b05      	cmp	r3, #5
 8003846:	d902      	bls.n	800384e <menu+0x263e>
				yukariValfTmr = 0;
 8003848:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <menu+0x2730>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800384e:	f001 f977 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003852:	2104      	movs	r1, #4
 8003854:	4830      	ldr	r0, [pc, #192]	; (8003918 <menu+0x2708>)
 8003856:	f005 fd99 	bl	800938c <HAL_GPIO_ReadPin>
 800385a:	4603      	mov	r3, r0
 800385c:	2b01      	cmp	r3, #1
 800385e:	d115      	bne.n	800388c <menu+0x267c>
 8003860:	4b2e      	ldr	r3, [pc, #184]	; (800391c <menu+0x270c>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	f083 0301 	eor.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800386e:	4b34      	ldr	r3, [pc, #208]	; (8003940 <menu+0x2730>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4b32      	ldr	r3, [pc, #200]	; (8003940 <menu+0x2730>)
 8003878:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800387a:	4b31      	ldr	r3, [pc, #196]	; (8003940 <menu+0x2730>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b06      	cmp	r3, #6
 8003880:	d902      	bls.n	8003888 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003882:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <menu+0x2730>)
 8003884:	2205      	movs	r2, #5
 8003886:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003888:	f001 f95a 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800388c:	2108      	movs	r1, #8
 800388e:	4822      	ldr	r0, [pc, #136]	; (8003918 <menu+0x2708>)
 8003890:	f005 fd7c 	bl	800938c <HAL_GPIO_ReadPin>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10d      	bne.n	80038b6 <menu+0x26a6>
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <menu+0x270c>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d006      	beq.n	80038b6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <menu+0x2730>)
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <menu+0x2710>)
 80038ae:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80038b0:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <menu+0x2718>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <menu+0x271c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b17      	cmp	r3, #23
 80038bc:	f040 80ac 	bne.w	8003a18 <menu+0x2808>
		if(dilSecim == 0) {
 80038c0:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <menu+0x26ec>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80038c8:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <menu+0x2738>)
 80038ca:	2101      	movs	r1, #1
 80038cc:	2001      	movs	r0, #1
 80038ce:	f004 fa37 	bl	8007d40 <lcd_print>
 80038d2:	e008      	b.n	80038e6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <menu+0x26ec>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d104      	bne.n	80038e6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <menu+0x273c>)
 80038de:	2101      	movs	r1, #1
 80038e0:	2001      	movs	r0, #1
 80038e2:	f004 fa2d 	bl	8007d40 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <menu+0x26ec>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d130      	bne.n	8003950 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80038ee:	4a12      	ldr	r2, [pc, #72]	; (8003938 <menu+0x2728>)
 80038f0:	2101      	movs	r1, #1
 80038f2:	2002      	movs	r0, #2
 80038f4:	f004 fa24 	bl	8007d40 <lcd_print>
 80038f8:	e033      	b.n	8003962 <menu+0x2752>
 80038fa:	bf00      	nop
 80038fc:	20000255 	.word	0x20000255
 8003900:	0800d8e8 	.word	0x0800d8e8
 8003904:	20000247 	.word	0x20000247
 8003908:	0800d88c 	.word	0x0800d88c
 800390c:	0800d8a0 	.word	0x0800d8a0
 8003910:	0800d8b0 	.word	0x0800d8b0
 8003914:	0800d8c4 	.word	0x0800d8c4
 8003918:	40010800 	.word	0x40010800
 800391c:	20000263 	.word	0x20000263
 8003920:	20000118 	.word	0x20000118
 8003924:	2000023a 	.word	0x2000023a
 8003928:	20000260 	.word	0x20000260
 800392c:	20000234 	.word	0x20000234
 8003930:	0800d8f8 	.word	0x0800d8f8
 8003934:	0800d90c 	.word	0x0800d90c
 8003938:	0800d5ac 	.word	0x0800d5ac
 800393c:	0800d920 	.word	0x0800d920
 8003940:	20000248 	.word	0x20000248
 8003944:	20000188 	.word	0x20000188
 8003948:	0800d930 	.word	0x0800d930
 800394c:	0800d944 	.word	0x0800d944
			} else if(dilSecim == 1) {
 8003950:	4b98      	ldr	r3, [pc, #608]	; (8003bb4 <menu+0x29a4>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d104      	bne.n	8003962 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003958:	4a97      	ldr	r2, [pc, #604]	; (8003bb8 <menu+0x29a8>)
 800395a:	2101      	movs	r1, #1
 800395c:	2002      	movs	r0, #2
 800395e:	f004 f9ef 	bl	8007d40 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003962:	4b96      	ldr	r3, [pc, #600]	; (8003bbc <menu+0x29ac>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	220a      	movs	r2, #10
 8003968:	4995      	ldr	r1, [pc, #596]	; (8003bc0 <menu+0x29b0>)
 800396a:	4618      	mov	r0, r3
 800396c:	f008 fd3a 	bl	800c3e4 <itoa>
		lcd_print(2,16,snum);
 8003970:	4a93      	ldr	r2, [pc, #588]	; (8003bc0 <menu+0x29b0>)
 8003972:	2110      	movs	r1, #16
 8003974:	2002      	movs	r0, #2
 8003976:	f004 f9e3 	bl	8007d40 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800397a:	2102      	movs	r1, #2
 800397c:	4891      	ldr	r0, [pc, #580]	; (8003bc4 <menu+0x29b4>)
 800397e:	f005 fd05 	bl	800938c <HAL_GPIO_ReadPin>
 8003982:	4603      	mov	r3, r0
 8003984:	2b01      	cmp	r3, #1
 8003986:	d115      	bne.n	80039b4 <menu+0x27a4>
 8003988:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <menu+0x29b8>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	f083 0301 	eor.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00e      	beq.n	80039b4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003996:	4b89      	ldr	r3, [pc, #548]	; (8003bbc <menu+0x29ac>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	3301      	adds	r3, #1
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4b87      	ldr	r3, [pc, #540]	; (8003bbc <menu+0x29ac>)
 80039a0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80039a2:	4b86      	ldr	r3, [pc, #536]	; (8003bbc <menu+0x29ac>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d902      	bls.n	80039b0 <menu+0x27a0>
				asagiValfTmr = 0;
 80039aa:	4b84      	ldr	r3, [pc, #528]	; (8003bbc <menu+0x29ac>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039b0:	f001 f8c6 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039b4:	2104      	movs	r1, #4
 80039b6:	4883      	ldr	r0, [pc, #524]	; (8003bc4 <menu+0x29b4>)
 80039b8:	f005 fce8 	bl	800938c <HAL_GPIO_ReadPin>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d115      	bne.n	80039ee <menu+0x27de>
 80039c2:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <menu+0x29b8>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00e      	beq.n	80039ee <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80039d0:	4b7a      	ldr	r3, [pc, #488]	; (8003bbc <menu+0x29ac>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	4b78      	ldr	r3, [pc, #480]	; (8003bbc <menu+0x29ac>)
 80039da:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80039dc:	4b77      	ldr	r3, [pc, #476]	; (8003bbc <menu+0x29ac>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d902      	bls.n	80039ea <menu+0x27da>
		   		asagiValfTmr = 5;
 80039e4:	4b75      	ldr	r3, [pc, #468]	; (8003bbc <menu+0x29ac>)
 80039e6:	2205      	movs	r2, #5
 80039e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039ea:	f001 f8a9 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ee:	2108      	movs	r1, #8
 80039f0:	4874      	ldr	r0, [pc, #464]	; (8003bc4 <menu+0x29b4>)
 80039f2:	f005 fccb 	bl	800938c <HAL_GPIO_ReadPin>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10d      	bne.n	8003a18 <menu+0x2808>
 80039fc:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <menu+0x29b8>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	f083 0301 	eor.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003a0a:	4b6c      	ldr	r3, [pc, #432]	; (8003bbc <menu+0x29ac>)
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <menu+0x29bc>)
 8003a10:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003a12:	4b6f      	ldr	r3, [pc, #444]	; (8003bd0 <menu+0x29c0>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003a18:	4b6e      	ldr	r3, [pc, #440]	; (8003bd4 <menu+0x29c4>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b18      	cmp	r3, #24
 8003a1e:	f040 809d 	bne.w	8003b5c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003a22:	4b6d      	ldr	r3, [pc, #436]	; (8003bd8 <menu+0x29c8>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d113      	bne.n	8003a52 <menu+0x2842>
			if(dilSecim == 0) {
 8003a2a:	4b62      	ldr	r3, [pc, #392]	; (8003bb4 <menu+0x29a4>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003a32:	4a6a      	ldr	r2, [pc, #424]	; (8003bdc <menu+0x29cc>)
 8003a34:	2101      	movs	r1, #1
 8003a36:	2001      	movs	r0, #1
 8003a38:	f004 f982 	bl	8007d40 <lcd_print>
 8003a3c:	e020      	b.n	8003a80 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a3e:	4b5d      	ldr	r3, [pc, #372]	; (8003bb4 <menu+0x29a4>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d11c      	bne.n	8003a80 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003a46:	4a66      	ldr	r2, [pc, #408]	; (8003be0 <menu+0x29d0>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f004 f978 	bl	8007d40 <lcd_print>
 8003a50:	e016      	b.n	8003a80 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a52:	4b61      	ldr	r3, [pc, #388]	; (8003bd8 <menu+0x29c8>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d112      	bne.n	8003a80 <menu+0x2870>
			if(dilSecim == 0) {
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <menu+0x29a4>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003a62:	4a60      	ldr	r2, [pc, #384]	; (8003be4 <menu+0x29d4>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	2001      	movs	r0, #1
 8003a68:	f004 f96a 	bl	8007d40 <lcd_print>
 8003a6c:	e008      	b.n	8003a80 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a6e:	4b51      	ldr	r3, [pc, #324]	; (8003bb4 <menu+0x29a4>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d104      	bne.n	8003a80 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003a76:	4a5c      	ldr	r2, [pc, #368]	; (8003be8 <menu+0x29d8>)
 8003a78:	2101      	movs	r1, #1
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f004 f960 	bl	8007d40 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a80:	4b4c      	ldr	r3, [pc, #304]	; (8003bb4 <menu+0x29a4>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a88:	4a58      	ldr	r2, [pc, #352]	; (8003bec <menu+0x29dc>)
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	2002      	movs	r0, #2
 8003a8e:	f004 f957 	bl	8007d40 <lcd_print>
 8003a92:	e008      	b.n	8003aa6 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a94:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <menu+0x29a4>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d104      	bne.n	8003aa6 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a9c:	4a46      	ldr	r2, [pc, #280]	; (8003bb8 <menu+0x29a8>)
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2002      	movs	r0, #2
 8003aa2:	f004 f94d 	bl	8007d40 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003aa6:	4b52      	ldr	r3, [pc, #328]	; (8003bf0 <menu+0x29e0>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	220a      	movs	r2, #10
 8003aac:	4944      	ldr	r1, [pc, #272]	; (8003bc0 <menu+0x29b0>)
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f008 fc98 	bl	800c3e4 <itoa>
		lcd_print(2, 16, snum);
 8003ab4:	4a42      	ldr	r2, [pc, #264]	; (8003bc0 <menu+0x29b0>)
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	2002      	movs	r0, #2
 8003aba:	f004 f941 	bl	8007d40 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003abe:	2102      	movs	r1, #2
 8003ac0:	4840      	ldr	r0, [pc, #256]	; (8003bc4 <menu+0x29b4>)
 8003ac2:	f005 fc63 	bl	800938c <HAL_GPIO_ReadPin>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d115      	bne.n	8003af8 <menu+0x28e8>
 8003acc:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <menu+0x29b8>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	f083 0301 	eor.w	r3, r3, #1
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00e      	beq.n	8003af8 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003ada:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <menu+0x29e0>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <menu+0x29e0>)
 8003ae4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003ae6:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <menu+0x29e0>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d902      	bls.n	8003af4 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003aee:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <menu+0x29e0>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003af4:	f001 f824 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003af8:	2104      	movs	r1, #4
 8003afa:	4832      	ldr	r0, [pc, #200]	; (8003bc4 <menu+0x29b4>)
 8003afc:	f005 fc46 	bl	800938c <HAL_GPIO_ReadPin>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d115      	bne.n	8003b32 <menu+0x2922>
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <menu+0x29b8>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003b14:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <menu+0x29e0>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <menu+0x29e0>)
 8003b1e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003b20:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <menu+0x29e0>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b06      	cmp	r3, #6
 8003b26:	d902      	bls.n	8003b2e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003b28:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <menu+0x29e0>)
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b2e:	f001 f807 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b32:	2108      	movs	r1, #8
 8003b34:	4823      	ldr	r0, [pc, #140]	; (8003bc4 <menu+0x29b4>)
 8003b36:	f005 fc29 	bl	800938c <HAL_GPIO_ReadPin>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10d      	bne.n	8003b5c <menu+0x294c>
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <menu+0x29b8>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	f083 0301 	eor.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003b4e:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <menu+0x29e0>)
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <menu+0x29bc>)
 8003b54:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <menu+0x29c0>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <menu+0x29c4>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b19      	cmp	r3, #25
 8003b62:	f040 80c4 	bne.w	8003cee <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003b66:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <menu+0x29c8>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d113      	bne.n	8003b96 <menu+0x2986>
			if(dilSecim == 0) {
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <menu+0x29a4>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003b76:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <menu+0x29e4>)
 8003b78:	2101      	movs	r1, #1
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f004 f8e0 	bl	8007d40 <lcd_print>
 8003b80:	e047      	b.n	8003c12 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <menu+0x29a4>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d143      	bne.n	8003c12 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b8a:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <menu+0x29e8>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f004 f8d6 	bl	8007d40 <lcd_print>
 8003b94:	e03d      	b.n	8003c12 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <menu+0x29c8>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d139      	bne.n	8003c12 <menu+0x2a02>
			if(dilSecim == 0) {
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <menu+0x29a4>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d12c      	bne.n	8003c00 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003ba6:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <menu+0x29ec>)
 8003ba8:	2101      	movs	r1, #1
 8003baa:	2001      	movs	r0, #1
 8003bac:	f004 f8c8 	bl	8007d40 <lcd_print>
 8003bb0:	e02f      	b.n	8003c12 <menu+0x2a02>
 8003bb2:	bf00      	nop
 8003bb4:	20000255 	.word	0x20000255
 8003bb8:	0800d920 	.word	0x0800d920
 8003bbc:	20000249 	.word	0x20000249
 8003bc0:	20000188 	.word	0x20000188
 8003bc4:	40010800 	.word	0x40010800
 8003bc8:	20000263 	.word	0x20000263
 8003bcc:	20000118 	.word	0x20000118
 8003bd0:	20000260 	.word	0x20000260
 8003bd4:	20000234 	.word	0x20000234
 8003bd8:	20000243 	.word	0x20000243
 8003bdc:	0800d958 	.word	0x0800d958
 8003be0:	0800d96c 	.word	0x0800d96c
 8003be4:	0800d980 	.word	0x0800d980
 8003be8:	0800d994 	.word	0x0800d994
 8003bec:	0800d5ac 	.word	0x0800d5ac
 8003bf0:	2000024a 	.word	0x2000024a
 8003bf4:	0800d9a8 	.word	0x0800d9a8
 8003bf8:	0800d9bc 	.word	0x0800d9bc
 8003bfc:	0800d9d0 	.word	0x0800d9d0
			} else if(dilSecim == 1) {
 8003c00:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <menu+0x2bc0>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d104      	bne.n	8003c12 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003c08:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <menu+0x2bc4>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f004 f897 	bl	8007d40 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003c12:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <menu+0x2bc0>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c1a:	4a6f      	ldr	r2, [pc, #444]	; (8003dd8 <menu+0x2bc8>)
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	2002      	movs	r0, #2
 8003c20:	f004 f88e 	bl	8007d40 <lcd_print>
 8003c24:	e008      	b.n	8003c38 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003c26:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <menu+0x2bc0>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d104      	bne.n	8003c38 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003c2e:	4a6b      	ldr	r2, [pc, #428]	; (8003ddc <menu+0x2bcc>)
 8003c30:	2101      	movs	r1, #1
 8003c32:	2002      	movs	r0, #2
 8003c34:	f004 f884 	bl	8007d40 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003c38:	4b69      	ldr	r3, [pc, #420]	; (8003de0 <menu+0x2bd0>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	220a      	movs	r2, #10
 8003c3e:	4969      	ldr	r1, [pc, #420]	; (8003de4 <menu+0x2bd4>)
 8003c40:	4618      	mov	r0, r3
 8003c42:	f008 fbcf 	bl	800c3e4 <itoa>
		lcd_print(2,16,snum);
 8003c46:	4a67      	ldr	r2, [pc, #412]	; (8003de4 <menu+0x2bd4>)
 8003c48:	2110      	movs	r1, #16
 8003c4a:	2002      	movs	r0, #2
 8003c4c:	f004 f878 	bl	8007d40 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c50:	2102      	movs	r1, #2
 8003c52:	4865      	ldr	r0, [pc, #404]	; (8003de8 <menu+0x2bd8>)
 8003c54:	f005 fb9a 	bl	800938c <HAL_GPIO_ReadPin>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d115      	bne.n	8003c8a <menu+0x2a7a>
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <menu+0x2bdc>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	f083 0301 	eor.w	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003c6c:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <menu+0x2bd0>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4b5a      	ldr	r3, [pc, #360]	; (8003de0 <menu+0x2bd0>)
 8003c76:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003c78:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <menu+0x2bd0>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d902      	bls.n	8003c86 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c80:	4b57      	ldr	r3, [pc, #348]	; (8003de0 <menu+0x2bd0>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c86:	f000 ff5b 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	4856      	ldr	r0, [pc, #344]	; (8003de8 <menu+0x2bd8>)
 8003c8e:	f005 fb7d 	bl	800938c <HAL_GPIO_ReadPin>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d115      	bne.n	8003cc4 <menu+0x2ab4>
 8003c98:	4b54      	ldr	r3, [pc, #336]	; (8003dec <menu+0x2bdc>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	f083 0301 	eor.w	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00e      	beq.n	8003cc4 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003ca6:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <menu+0x2bd0>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4b4c      	ldr	r3, [pc, #304]	; (8003de0 <menu+0x2bd0>)
 8003cb0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003cb2:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <menu+0x2bd0>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d902      	bls.n	8003cc0 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003cba:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <menu+0x2bd0>)
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cc0:	f000 ff3e 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc4:	2108      	movs	r1, #8
 8003cc6:	4848      	ldr	r0, [pc, #288]	; (8003de8 <menu+0x2bd8>)
 8003cc8:	f005 fb60 	bl	800938c <HAL_GPIO_ReadPin>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10d      	bne.n	8003cee <menu+0x2ade>
 8003cd2:	4b46      	ldr	r3, [pc, #280]	; (8003dec <menu+0x2bdc>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f083 0301 	eor.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003ce0:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <menu+0x2bd0>)
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <menu+0x2be0>)
 8003ce6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003ce8:	4b42      	ldr	r3, [pc, #264]	; (8003df4 <menu+0x2be4>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003cee:	4b42      	ldr	r3, [pc, #264]	; (8003df8 <menu+0x2be8>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b1a      	cmp	r3, #26
 8003cf4:	f040 80ec 	bne.w	8003ed0 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <menu+0x2bc0>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003d00:	4a3e      	ldr	r2, [pc, #248]	; (8003dfc <menu+0x2bec>)
 8003d02:	2101      	movs	r1, #1
 8003d04:	2001      	movs	r0, #1
 8003d06:	f004 f81b 	bl	8007d40 <lcd_print>
 8003d0a:	e008      	b.n	8003d1e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003d0c:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <menu+0x2bc0>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d104      	bne.n	8003d1e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003d14:	4a3a      	ldr	r2, [pc, #232]	; (8003e00 <menu+0x2bf0>)
 8003d16:	2101      	movs	r1, #1
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f004 f811 	bl	8007d40 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <menu+0x2bf4>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b63      	cmp	r3, #99	; 0x63
 8003d24:	d91e      	bls.n	8003d64 <menu+0x2b54>
			if(dilSecim == 0) {
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <menu+0x2bc0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d104      	bne.n	8003d38 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <menu+0x2bc8>)
 8003d30:	2101      	movs	r1, #1
 8003d32:	2002      	movs	r0, #2
 8003d34:	f004 f804 	bl	8007d40 <lcd_print>
			}
			if(dilSecim == 1) {
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <menu+0x2bc0>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d104      	bne.n	8003d4a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <menu+0x2bcc>)
 8003d42:	2101      	movs	r1, #1
 8003d44:	2002      	movs	r0, #2
 8003d46:	f003 fffb 	bl	8007d40 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <menu+0x2bf4>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	220a      	movs	r2, #10
 8003d50:	4924      	ldr	r1, [pc, #144]	; (8003de4 <menu+0x2bd4>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	f008 fb46 	bl	800c3e4 <itoa>
			lcd_print(2,14,snum);
 8003d58:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <menu+0x2bd4>)
 8003d5a:	210e      	movs	r1, #14
 8003d5c:	2002      	movs	r0, #2
 8003d5e:	f003 ffef 	bl	8007d40 <lcd_print>
 8003d62:	e066      	b.n	8003e32 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <menu+0x2bf4>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d923      	bls.n	8003db4 <menu+0x2ba4>
 8003d6c:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <menu+0x2bf4>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b63      	cmp	r3, #99	; 0x63
 8003d72:	d81f      	bhi.n	8003db4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003d74:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <menu+0x2bc0>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d7c:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <menu+0x2bc8>)
 8003d7e:	2101      	movs	r1, #1
 8003d80:	2002      	movs	r0, #2
 8003d82:	f003 ffdd 	bl	8007d40 <lcd_print>
 8003d86:	e008      	b.n	8003d9a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <menu+0x2bc0>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d104      	bne.n	8003d9a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d90:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <menu+0x2bcc>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	2002      	movs	r0, #2
 8003d96:	f003 ffd3 	bl	8007d40 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <menu+0x2bf4>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	220a      	movs	r2, #10
 8003da0:	4910      	ldr	r1, [pc, #64]	; (8003de4 <menu+0x2bd4>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f008 fb1e 	bl	800c3e4 <itoa>
			lcd_print(2, 15, snum);
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <menu+0x2bd4>)
 8003daa:	210f      	movs	r1, #15
 8003dac:	2002      	movs	r0, #2
 8003dae:	f003 ffc7 	bl	8007d40 <lcd_print>
 8003db2:	e03e      	b.n	8003e32 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <menu+0x2bf4>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b09      	cmp	r3, #9
 8003dba:	d83a      	bhi.n	8003e32 <menu+0x2c22>
			if(dilSecim == 0) {
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <menu+0x2bc0>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d121      	bne.n	8003e08 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dc4:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <menu+0x2bc8>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	2002      	movs	r0, #2
 8003dca:	f003 ffb9 	bl	8007d40 <lcd_print>
 8003dce:	e024      	b.n	8003e1a <menu+0x2c0a>
 8003dd0:	20000255 	.word	0x20000255
 8003dd4:	0800d9e4 	.word	0x0800d9e4
 8003dd8:	0800d5ac 	.word	0x0800d5ac
 8003ddc:	0800d920 	.word	0x0800d920
 8003de0:	2000024b 	.word	0x2000024b
 8003de4:	20000188 	.word	0x20000188
 8003de8:	40010800 	.word	0x40010800
 8003dec:	20000263 	.word	0x20000263
 8003df0:	20000118 	.word	0x20000118
 8003df4:	20000260 	.word	0x20000260
 8003df8:	20000234 	.word	0x20000234
 8003dfc:	0800d9f8 	.word	0x0800d9f8
 8003e00:	0800da0c 	.word	0x0800da0c
 8003e04:	2000024c 	.word	0x2000024c
			} else if(dilSecim == 1) {
 8003e08:	4b8f      	ldr	r3, [pc, #572]	; (8004048 <menu+0x2e38>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d104      	bne.n	8003e1a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003e10:	4a8e      	ldr	r2, [pc, #568]	; (800404c <menu+0x2e3c>)
 8003e12:	2101      	movs	r1, #1
 8003e14:	2002      	movs	r0, #2
 8003e16:	f003 ff93 	bl	8007d40 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e1a:	4b8d      	ldr	r3, [pc, #564]	; (8004050 <menu+0x2e40>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	220a      	movs	r2, #10
 8003e20:	498c      	ldr	r1, [pc, #560]	; (8004054 <menu+0x2e44>)
 8003e22:	4618      	mov	r0, r3
 8003e24:	f008 fade 	bl	800c3e4 <itoa>
			lcd_print(2, 16, snum);
 8003e28:	4a8a      	ldr	r2, [pc, #552]	; (8004054 <menu+0x2e44>)
 8003e2a:	2110      	movs	r1, #16
 8003e2c:	2002      	movs	r0, #2
 8003e2e:	f003 ff87 	bl	8007d40 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e32:	2102      	movs	r1, #2
 8003e34:	4888      	ldr	r0, [pc, #544]	; (8004058 <menu+0x2e48>)
 8003e36:	f005 faa9 	bl	800938c <HAL_GPIO_ReadPin>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d115      	bne.n	8003e6c <menu+0x2c5c>
 8003e40:	4b86      	ldr	r3, [pc, #536]	; (800405c <menu+0x2e4c>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f083 0301 	eor.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00e      	beq.n	8003e6c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003e4e:	4b80      	ldr	r3, [pc, #512]	; (8004050 <menu+0x2e40>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b7e      	ldr	r3, [pc, #504]	; (8004050 <menu+0x2e40>)
 8003e58:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003e5a:	4b7d      	ldr	r3, [pc, #500]	; (8004050 <menu+0x2e40>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2bb4      	cmp	r3, #180	; 0xb4
 8003e60:	d902      	bls.n	8003e68 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003e62:	4b7b      	ldr	r3, [pc, #492]	; (8004050 <menu+0x2e40>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e68:	f000 fe6a 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e6c:	2104      	movs	r1, #4
 8003e6e:	487a      	ldr	r0, [pc, #488]	; (8004058 <menu+0x2e48>)
 8003e70:	f005 fa8c 	bl	800938c <HAL_GPIO_ReadPin>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d115      	bne.n	8003ea6 <menu+0x2c96>
 8003e7a:	4b78      	ldr	r3, [pc, #480]	; (800405c <menu+0x2e4c>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	f083 0301 	eor.w	r3, r3, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00e      	beq.n	8003ea6 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e88:	4b71      	ldr	r3, [pc, #452]	; (8004050 <menu+0x2e40>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	4b6f      	ldr	r3, [pc, #444]	; (8004050 <menu+0x2e40>)
 8003e92:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e94:	4b6e      	ldr	r3, [pc, #440]	; (8004050 <menu+0x2e40>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2bb5      	cmp	r3, #181	; 0xb5
 8003e9a:	d902      	bls.n	8003ea2 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e9c:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <menu+0x2e40>)
 8003e9e:	22b4      	movs	r2, #180	; 0xb4
 8003ea0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ea2:	f000 fe4d 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ea6:	2108      	movs	r1, #8
 8003ea8:	486b      	ldr	r0, [pc, #428]	; (8004058 <menu+0x2e48>)
 8003eaa:	f005 fa6f 	bl	800938c <HAL_GPIO_ReadPin>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10d      	bne.n	8003ed0 <menu+0x2cc0>
 8003eb4:	4b69      	ldr	r3, [pc, #420]	; (800405c <menu+0x2e4c>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	f083 0301 	eor.w	r3, r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d006      	beq.n	8003ed0 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003ec2:	4b63      	ldr	r3, [pc, #396]	; (8004050 <menu+0x2e40>)
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	4b66      	ldr	r3, [pc, #408]	; (8004060 <menu+0x2e50>)
 8003ec8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003eca:	4b66      	ldr	r3, [pc, #408]	; (8004064 <menu+0x2e54>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003ed0:	4b65      	ldr	r3, [pc, #404]	; (8004068 <menu+0x2e58>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b1b      	cmp	r3, #27
 8003ed6:	f040 8083 	bne.w	8003fe0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003eda:	4a64      	ldr	r2, [pc, #400]	; (800406c <menu+0x2e5c>)
 8003edc:	2101      	movs	r1, #1
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f003 ff2e 	bl	8007d40 <lcd_print>

		if(buzzer == 0) {
 8003ee4:	4b62      	ldr	r3, [pc, #392]	; (8004070 <menu+0x2e60>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d113      	bne.n	8003f14 <menu+0x2d04>
			if(dilSecim == 0) {
 8003eec:	4b56      	ldr	r3, [pc, #344]	; (8004048 <menu+0x2e38>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003ef4:	4a5f      	ldr	r2, [pc, #380]	; (8004074 <menu+0x2e64>)
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	2002      	movs	r0, #2
 8003efa:	f003 ff21 	bl	8007d40 <lcd_print>
 8003efe:	e020      	b.n	8003f42 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f00:	4b51      	ldr	r3, [pc, #324]	; (8004048 <menu+0x2e38>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d11c      	bne.n	8003f42 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003f08:	4a5b      	ldr	r2, [pc, #364]	; (8004078 <menu+0x2e68>)
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f003 ff17 	bl	8007d40 <lcd_print>
 8003f12:	e016      	b.n	8003f42 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003f14:	4b56      	ldr	r3, [pc, #344]	; (8004070 <menu+0x2e60>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d112      	bne.n	8003f42 <menu+0x2d32>
			if(dilSecim == 0) {
 8003f1c:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <menu+0x2e38>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003f24:	4a55      	ldr	r2, [pc, #340]	; (800407c <menu+0x2e6c>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	2002      	movs	r0, #2
 8003f2a:	f003 ff09 	bl	8007d40 <lcd_print>
 8003f2e:	e008      	b.n	8003f42 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f30:	4b45      	ldr	r3, [pc, #276]	; (8004048 <menu+0x2e38>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d104      	bne.n	8003f42 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003f38:	4a51      	ldr	r2, [pc, #324]	; (8004080 <menu+0x2e70>)
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f003 feff 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f42:	2102      	movs	r1, #2
 8003f44:	4844      	ldr	r0, [pc, #272]	; (8004058 <menu+0x2e48>)
 8003f46:	f005 fa21 	bl	800938c <HAL_GPIO_ReadPin>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d115      	bne.n	8003f7c <menu+0x2d6c>
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <menu+0x2e4c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	f083 0301 	eor.w	r3, r3, #1
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00e      	beq.n	8003f7c <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003f5e:	4b44      	ldr	r3, [pc, #272]	; (8004070 <menu+0x2e60>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <menu+0x2e60>)
 8003f68:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <menu+0x2e60>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d902      	bls.n	8003f78 <menu+0x2d68>
				buzzer = 0;
 8003f72:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <menu+0x2e60>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f78:	f000 fde2 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	4836      	ldr	r0, [pc, #216]	; (8004058 <menu+0x2e48>)
 8003f80:	f005 fa04 	bl	800938c <HAL_GPIO_ReadPin>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d115      	bne.n	8003fb6 <menu+0x2da6>
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <menu+0x2e4c>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	f083 0301 	eor.w	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <menu+0x2e60>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b33      	ldr	r3, [pc, #204]	; (8004070 <menu+0x2e60>)
 8003fa2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <menu+0x2e60>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <menu+0x2da2>
		   		buzzer = 1;
 8003fac:	4b30      	ldr	r3, [pc, #192]	; (8004070 <menu+0x2e60>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fb2:	f000 fdc5 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fb6:	2108      	movs	r1, #8
 8003fb8:	4827      	ldr	r0, [pc, #156]	; (8004058 <menu+0x2e48>)
 8003fba:	f005 f9e7 	bl	800938c <HAL_GPIO_ReadPin>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10d      	bne.n	8003fe0 <menu+0x2dd0>
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <menu+0x2e4c>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	f083 0301 	eor.w	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003fd2:	4b27      	ldr	r3, [pc, #156]	; (8004070 <menu+0x2e60>)
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <menu+0x2e50>)
 8003fd8:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <menu+0x2e54>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <menu+0x2e58>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b1c      	cmp	r3, #28
 8003fe6:	f040 80ab 	bne.w	8004140 <menu+0x2f30>
		calismaSayModu = 0;
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <menu+0x2e74>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003ff0:	4a25      	ldr	r2, [pc, #148]	; (8004088 <menu+0x2e78>)
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f003 fea3 	bl	8007d40 <lcd_print>

		if(demoMode == 0) {
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <menu+0x2e7c>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d113      	bne.n	800402a <menu+0x2e1a>
			if(dilSecim == 0) {
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <menu+0x2e38>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <menu+0x2e64>)
 800400c:	2101      	movs	r1, #1
 800400e:	2002      	movs	r0, #2
 8004010:	f003 fe96 	bl	8007d40 <lcd_print>
 8004014:	e045      	b.n	80040a2 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <menu+0x2e38>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d141      	bne.n	80040a2 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800401e:	4a16      	ldr	r2, [pc, #88]	; (8004078 <menu+0x2e68>)
 8004020:	2101      	movs	r1, #1
 8004022:	2002      	movs	r0, #2
 8004024:	f003 fe8c 	bl	8007d40 <lcd_print>
 8004028:	e03b      	b.n	80040a2 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <menu+0x2e7c>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d137      	bne.n	80040a2 <menu+0x2e92>
			if(dilSecim == 0){
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <menu+0x2e38>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d12a      	bne.n	8004090 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <menu+0x2e6c>)
 800403c:	2101      	movs	r1, #1
 800403e:	2002      	movs	r0, #2
 8004040:	f003 fe7e 	bl	8007d40 <lcd_print>
 8004044:	e02d      	b.n	80040a2 <menu+0x2e92>
 8004046:	bf00      	nop
 8004048:	20000255 	.word	0x20000255
 800404c:	0800d920 	.word	0x0800d920
 8004050:	2000024c 	.word	0x2000024c
 8004054:	20000188 	.word	0x20000188
 8004058:	40010800 	.word	0x40010800
 800405c:	20000263 	.word	0x20000263
 8004060:	20000118 	.word	0x20000118
 8004064:	20000260 	.word	0x20000260
 8004068:	20000234 	.word	0x20000234
 800406c:	0800da20 	.word	0x0800da20
 8004070:	20000250 	.word	0x20000250
 8004074:	0800d348 	.word	0x0800d348
 8004078:	0800d35c 	.word	0x0800d35c
 800407c:	0800d3a8 	.word	0x0800d3a8
 8004080:	0800d3bc 	.word	0x0800d3bc
 8004084:	20000254 	.word	0x20000254
 8004088:	0800da34 	.word	0x0800da34
 800408c:	20000252 	.word	0x20000252
			} else if(dilSecim == 1) {
 8004090:	4b71      	ldr	r3, [pc, #452]	; (8004258 <menu+0x3048>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d104      	bne.n	80040a2 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004098:	4a70      	ldr	r2, [pc, #448]	; (800425c <menu+0x304c>)
 800409a:	2101      	movs	r1, #1
 800409c:	2002      	movs	r0, #2
 800409e:	f003 fe4f 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040a2:	2102      	movs	r1, #2
 80040a4:	486e      	ldr	r0, [pc, #440]	; (8004260 <menu+0x3050>)
 80040a6:	f005 f971 	bl	800938c <HAL_GPIO_ReadPin>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d115      	bne.n	80040dc <menu+0x2ecc>
 80040b0:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <menu+0x3054>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	f083 0301 	eor.w	r3, r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00e      	beq.n	80040dc <menu+0x2ecc>
			demoMode = demoMode + 1;
 80040be:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <menu+0x3058>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	3301      	adds	r3, #1
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4b68      	ldr	r3, [pc, #416]	; (8004268 <menu+0x3058>)
 80040c8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80040ca:	4b67      	ldr	r3, [pc, #412]	; (8004268 <menu+0x3058>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d902      	bls.n	80040d8 <menu+0x2ec8>
				demoMode = 0;
 80040d2:	4b65      	ldr	r3, [pc, #404]	; (8004268 <menu+0x3058>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040d8:	f000 fd32 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040dc:	2104      	movs	r1, #4
 80040de:	4860      	ldr	r0, [pc, #384]	; (8004260 <menu+0x3050>)
 80040e0:	f005 f954 	bl	800938c <HAL_GPIO_ReadPin>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d115      	bne.n	8004116 <menu+0x2f06>
 80040ea:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <menu+0x3054>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	f083 0301 	eor.w	r3, r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00e      	beq.n	8004116 <menu+0x2f06>
			demoMode = demoMode - 1;
 80040f8:	4b5b      	ldr	r3, [pc, #364]	; (8004268 <menu+0x3058>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <menu+0x3058>)
 8004102:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004104:	4b58      	ldr	r3, [pc, #352]	; (8004268 <menu+0x3058>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <menu+0x2f02>
		   		demoMode = 1;
 800410c:	4b56      	ldr	r3, [pc, #344]	; (8004268 <menu+0x3058>)
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004112:	f000 fd15 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004116:	2108      	movs	r1, #8
 8004118:	4851      	ldr	r0, [pc, #324]	; (8004260 <menu+0x3050>)
 800411a:	f005 f937 	bl	800938c <HAL_GPIO_ReadPin>
 800411e:	4603      	mov	r3, r0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10d      	bne.n	8004140 <menu+0x2f30>
 8004124:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <menu+0x3054>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f083 0301 	eor.w	r3, r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004132:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <menu+0x3058>)
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	4b4d      	ldr	r3, [pc, #308]	; (800426c <menu+0x305c>)
 8004138:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800413a:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <menu+0x3060>)
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004140:	4b4c      	ldr	r3, [pc, #304]	; (8004274 <menu+0x3064>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b1d      	cmp	r3, #29
 8004146:	f040 8132 	bne.w	80043ae <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800414a:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <menu+0x3068>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d113      	bne.n	800417a <menu+0x2f6a>
 8004152:	4b4a      	ldr	r3, [pc, #296]	; (800427c <menu+0x306c>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <menu+0x2f6a>
 800415a:	4b49      	ldr	r3, [pc, #292]	; (8004280 <menu+0x3070>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <menu+0x2f6a>
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <menu+0x3074>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <menu+0x2f6a>
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <menu+0x3078>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004172:	4b46      	ldr	r3, [pc, #280]	; (800428c <menu+0x307c>)
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e002      	b.n	8004180 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800417a:	4b44      	ldr	r3, [pc, #272]	; (800428c <menu+0x307c>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004180:	4b43      	ldr	r3, [pc, #268]	; (8004290 <menu+0x3080>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d154      	bne.n	8004232 <menu+0x3022>
			if(dilSecim == 0) {
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <menu+0x3048>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004190:	4a40      	ldr	r2, [pc, #256]	; (8004294 <menu+0x3084>)
 8004192:	2101      	movs	r1, #1
 8004194:	2001      	movs	r0, #1
 8004196:	f003 fdd3 	bl	8007d40 <lcd_print>
 800419a:	e008      	b.n	80041ae <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <menu+0x3048>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d104      	bne.n	80041ae <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80041a4:	4a3c      	ldr	r2, [pc, #240]	; (8004298 <menu+0x3088>)
 80041a6:	2101      	movs	r1, #1
 80041a8:	2001      	movs	r0, #1
 80041aa:	f003 fdc9 	bl	8007d40 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <menu+0x3078>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	220a      	movs	r2, #10
 80041b4:	4939      	ldr	r1, [pc, #228]	; (800429c <menu+0x308c>)
 80041b6:	4618      	mov	r0, r3
 80041b8:	f008 f914 	bl	800c3e4 <itoa>
			lcd_print(2, 12, snum);
 80041bc:	4a37      	ldr	r2, [pc, #220]	; (800429c <menu+0x308c>)
 80041be:	210c      	movs	r1, #12
 80041c0:	2002      	movs	r0, #2
 80041c2:	f003 fdbd 	bl	8007d40 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80041c6:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <menu+0x3074>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	220a      	movs	r2, #10
 80041cc:	4933      	ldr	r1, [pc, #204]	; (800429c <menu+0x308c>)
 80041ce:	4618      	mov	r0, r3
 80041d0:	f008 f908 	bl	800c3e4 <itoa>
			lcd_print(2, 13, snum);
 80041d4:	4a31      	ldr	r2, [pc, #196]	; (800429c <menu+0x308c>)
 80041d6:	210d      	movs	r1, #13
 80041d8:	2002      	movs	r0, #2
 80041da:	f003 fdb1 	bl	8007d40 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80041de:	4b28      	ldr	r3, [pc, #160]	; (8004280 <menu+0x3070>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	220a      	movs	r2, #10
 80041e4:	492d      	ldr	r1, [pc, #180]	; (800429c <menu+0x308c>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f008 f8fc 	bl	800c3e4 <itoa>
			lcd_print(2, 14, snum);
 80041ec:	4a2b      	ldr	r2, [pc, #172]	; (800429c <menu+0x308c>)
 80041ee:	210e      	movs	r1, #14
 80041f0:	2002      	movs	r0, #2
 80041f2:	f003 fda5 	bl	8007d40 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80041f6:	4b21      	ldr	r3, [pc, #132]	; (800427c <menu+0x306c>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	220a      	movs	r2, #10
 80041fc:	4927      	ldr	r1, [pc, #156]	; (800429c <menu+0x308c>)
 80041fe:	4618      	mov	r0, r3
 8004200:	f008 f8f0 	bl	800c3e4 <itoa>
			lcd_print(2, 15, snum);
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <menu+0x308c>)
 8004206:	210f      	movs	r1, #15
 8004208:	2002      	movs	r0, #2
 800420a:	f003 fd99 	bl	8007d40 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <menu+0x3068>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	220a      	movs	r2, #10
 8004214:	4921      	ldr	r1, [pc, #132]	; (800429c <menu+0x308c>)
 8004216:	4618      	mov	r0, r3
 8004218:	f008 f8e4 	bl	800c3e4 <itoa>
			lcd_print(2, 16, snum);
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <menu+0x308c>)
 800421e:	2110      	movs	r1, #16
 8004220:	2002      	movs	r0, #2
 8004222:	f003 fd8d 	bl	8007d40 <lcd_print>

			lcd_print(2, 1, "           ");
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <menu+0x3090>)
 8004228:	2101      	movs	r1, #1
 800422a:	2002      	movs	r0, #2
 800422c:	f003 fd88 	bl	8007d40 <lcd_print>
 8004230:	e048      	b.n	80042c4 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004232:	4b17      	ldr	r3, [pc, #92]	; (8004290 <menu+0x3080>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d144      	bne.n	80042c4 <menu+0x30b4>
			if(dilSecim == 0) {
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <menu+0x3048>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d132      	bne.n	80042a8 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004242:	4a14      	ldr	r2, [pc, #80]	; (8004294 <menu+0x3084>)
 8004244:	2101      	movs	r1, #1
 8004246:	2001      	movs	r0, #1
 8004248:	f003 fd7a 	bl	8007d40 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <menu+0x3094>)
 800424e:	2101      	movs	r1, #1
 8004250:	2002      	movs	r0, #2
 8004252:	f003 fd75 	bl	8007d40 <lcd_print>
 8004256:	e035      	b.n	80042c4 <menu+0x30b4>
 8004258:	20000255 	.word	0x20000255
 800425c:	0800d3bc 	.word	0x0800d3bc
 8004260:	40010800 	.word	0x40010800
 8004264:	20000263 	.word	0x20000263
 8004268:	20000252 	.word	0x20000252
 800426c:	20000118 	.word	0x20000118
 8004270:	20000260 	.word	0x20000260
 8004274:	20000234 	.word	0x20000234
 8004278:	20000231 	.word	0x20000231
 800427c:	20000232 	.word	0x20000232
 8004280:	20000000 	.word	0x20000000
 8004284:	20000001 	.word	0x20000001
 8004288:	20000233 	.word	0x20000233
 800428c:	20000275 	.word	0x20000275
 8004290:	20000254 	.word	0x20000254
 8004294:	0800da44 	.word	0x0800da44
 8004298:	0800da58 	.word	0x0800da58
 800429c:	20000188 	.word	0x20000188
 80042a0:	0800da6c 	.word	0x0800da6c
 80042a4:	0800da78 	.word	0x0800da78
			} else if(dilSecim == 1) {
 80042a8:	4b94      	ldr	r3, [pc, #592]	; (80044fc <menu+0x32ec>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d109      	bne.n	80042c4 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80042b0:	4a93      	ldr	r2, [pc, #588]	; (8004500 <menu+0x32f0>)
 80042b2:	2101      	movs	r1, #1
 80042b4:	2001      	movs	r0, #1
 80042b6:	f003 fd43 	bl	8007d40 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80042ba:	4a92      	ldr	r2, [pc, #584]	; (8004504 <menu+0x32f4>)
 80042bc:	2101      	movs	r1, #1
 80042be:	2002      	movs	r0, #2
 80042c0:	f003 fd3e 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042c4:	2102      	movs	r1, #2
 80042c6:	4890      	ldr	r0, [pc, #576]	; (8004508 <menu+0x32f8>)
 80042c8:	f005 f860 	bl	800938c <HAL_GPIO_ReadPin>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d119      	bne.n	8004306 <menu+0x30f6>
 80042d2:	4b8e      	ldr	r3, [pc, #568]	; (800450c <menu+0x32fc>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f083 0301 	eor.w	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d012      	beq.n	8004306 <menu+0x30f6>
 80042e0:	4b8b      	ldr	r3, [pc, #556]	; (8004510 <menu+0x3300>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80042e8:	4b8a      	ldr	r3, [pc, #552]	; (8004514 <menu+0x3304>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	3301      	adds	r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b88      	ldr	r3, [pc, #544]	; (8004514 <menu+0x3304>)
 80042f2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80042f4:	4b87      	ldr	r3, [pc, #540]	; (8004514 <menu+0x3304>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d902      	bls.n	8004302 <menu+0x30f2>
				calismaSayModu = 0;
 80042fc:	4b85      	ldr	r3, [pc, #532]	; (8004514 <menu+0x3304>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004302:	f000 fc1d 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004306:	2104      	movs	r1, #4
 8004308:	487f      	ldr	r0, [pc, #508]	; (8004508 <menu+0x32f8>)
 800430a:	f005 f83f 	bl	800938c <HAL_GPIO_ReadPin>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d119      	bne.n	8004348 <menu+0x3138>
 8004314:	4b7d      	ldr	r3, [pc, #500]	; (800450c <menu+0x32fc>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	f083 0301 	eor.w	r3, r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d012      	beq.n	8004348 <menu+0x3138>
 8004322:	4b7b      	ldr	r3, [pc, #492]	; (8004510 <menu+0x3300>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00e      	beq.n	8004348 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800432a:	4b7a      	ldr	r3, [pc, #488]	; (8004514 <menu+0x3304>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	3b01      	subs	r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b78      	ldr	r3, [pc, #480]	; (8004514 <menu+0x3304>)
 8004334:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004336:	4b77      	ldr	r3, [pc, #476]	; (8004514 <menu+0x3304>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <menu+0x3134>
		   		calismaSayModu = 1;
 800433e:	4b75      	ldr	r3, [pc, #468]	; (8004514 <menu+0x3304>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004344:	f000 fbfc 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004348:	2108      	movs	r1, #8
 800434a:	486f      	ldr	r0, [pc, #444]	; (8004508 <menu+0x32f8>)
 800434c:	f005 f81e 	bl	800938c <HAL_GPIO_ReadPin>
 8004350:	4603      	mov	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d12b      	bne.n	80043ae <menu+0x319e>
 8004356:	4b6d      	ldr	r3, [pc, #436]	; (800450c <menu+0x32fc>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	f083 0301 	eor.w	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d024      	beq.n	80043ae <menu+0x319e>
			eepromData[32] = 0;
 8004364:	4b6c      	ldr	r3, [pc, #432]	; (8004518 <menu+0x3308>)
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800436c:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <menu+0x3308>)
 800436e:	2200      	movs	r2, #0
 8004370:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004372:	4b69      	ldr	r3, [pc, #420]	; (8004518 <menu+0x3308>)
 8004374:	2200      	movs	r2, #0
 8004376:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004378:	4b67      	ldr	r3, [pc, #412]	; (8004518 <menu+0x3308>)
 800437a:	2200      	movs	r2, #0
 800437c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800437e:	4b66      	ldr	r3, [pc, #408]	; (8004518 <menu+0x3308>)
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004384:	4b65      	ldr	r3, [pc, #404]	; (800451c <menu+0x330c>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800438a:	4b65      	ldr	r3, [pc, #404]	; (8004520 <menu+0x3310>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004390:	4b64      	ldr	r3, [pc, #400]	; (8004524 <menu+0x3314>)
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004396:	4b64      	ldr	r3, [pc, #400]	; (8004528 <menu+0x3318>)
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800439c:	4b63      	ldr	r3, [pc, #396]	; (800452c <menu+0x331c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <menu+0x3304>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80043a8:	4b61      	ldr	r3, [pc, #388]	; (8004530 <menu+0x3320>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80043ae:	4b61      	ldr	r3, [pc, #388]	; (8004534 <menu+0x3324>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b1e      	cmp	r3, #30
 80043b4:	d16f      	bne.n	8004496 <menu+0x3286>
		calismaSayModu = 0;
 80043b6:	4b57      	ldr	r3, [pc, #348]	; (8004514 <menu+0x3304>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80043bc:	4b4f      	ldr	r3, [pc, #316]	; (80044fc <menu+0x32ec>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80043c4:	4a5c      	ldr	r2, [pc, #368]	; (8004538 <menu+0x3328>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	2001      	movs	r0, #1
 80043ca:	f003 fcb9 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80043ce:	4a5b      	ldr	r2, [pc, #364]	; (800453c <menu+0x332c>)
 80043d0:	2101      	movs	r1, #1
 80043d2:	2002      	movs	r0, #2
 80043d4:	f003 fcb4 	bl	8007d40 <lcd_print>
 80043d8:	e00d      	b.n	80043f6 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80043da:	4b48      	ldr	r3, [pc, #288]	; (80044fc <menu+0x32ec>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d109      	bne.n	80043f6 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80043e2:	4a57      	ldr	r2, [pc, #348]	; (8004540 <menu+0x3330>)
 80043e4:	2101      	movs	r1, #1
 80043e6:	2001      	movs	r0, #1
 80043e8:	f003 fcaa 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80043ec:	4a55      	ldr	r2, [pc, #340]	; (8004544 <menu+0x3334>)
 80043ee:	2101      	movs	r1, #1
 80043f0:	2002      	movs	r0, #2
 80043f2:	f003 fca5 	bl	8007d40 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043f6:	2102      	movs	r1, #2
 80043f8:	4843      	ldr	r0, [pc, #268]	; (8004508 <menu+0x32f8>)
 80043fa:	f004 ffc7 	bl	800938c <HAL_GPIO_ReadPin>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b01      	cmp	r3, #1
 8004402:	d115      	bne.n	8004430 <menu+0x3220>
 8004404:	4b41      	ldr	r3, [pc, #260]	; (800450c <menu+0x32fc>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	f083 0301 	eor.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00e      	beq.n	8004430 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004412:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <menu+0x32ec>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4b38      	ldr	r3, [pc, #224]	; (80044fc <menu+0x32ec>)
 800441c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800441e:	4b37      	ldr	r3, [pc, #220]	; (80044fc <menu+0x32ec>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d902      	bls.n	800442c <menu+0x321c>
				dilSecim = 0;
 8004426:	4b35      	ldr	r3, [pc, #212]	; (80044fc <menu+0x32ec>)
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800442c:	f000 fb88 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004430:	2104      	movs	r1, #4
 8004432:	4835      	ldr	r0, [pc, #212]	; (8004508 <menu+0x32f8>)
 8004434:	f004 ffaa 	bl	800938c <HAL_GPIO_ReadPin>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d115      	bne.n	800446a <menu+0x325a>
 800443e:	4b33      	ldr	r3, [pc, #204]	; (800450c <menu+0x32fc>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f083 0301 	eor.w	r3, r3, #1
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00e      	beq.n	800446a <menu+0x325a>
			dilSecim = dilSecim - 1;
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <menu+0x32ec>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <menu+0x32ec>)
 8004456:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <menu+0x32ec>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <menu+0x3256>
		   		dilSecim = 1;
 8004460:	4b26      	ldr	r3, [pc, #152]	; (80044fc <menu+0x32ec>)
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004466:	f000 fb6b 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800446a:	2108      	movs	r1, #8
 800446c:	4826      	ldr	r0, [pc, #152]	; (8004508 <menu+0x32f8>)
 800446e:	f004 ff8d 	bl	800938c <HAL_GPIO_ReadPin>
 8004472:	4603      	mov	r3, r0
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10e      	bne.n	8004496 <menu+0x3286>
 8004478:	4b24      	ldr	r3, [pc, #144]	; (800450c <menu+0x32fc>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	f083 0301 	eor.w	r3, r3, #1
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <menu+0x32ec>)
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <menu+0x3308>)
 800448c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <menu+0x3320>)
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004496:	4b27      	ldr	r3, [pc, #156]	; (8004534 <menu+0x3324>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b1f      	cmp	r3, #31
 800449c:	f040 80b7 	bne.w	800460e <menu+0x33fe>
		calismaSayModu = 0;
 80044a0:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <menu+0x3304>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80044a6:	4a28      	ldr	r2, [pc, #160]	; (8004548 <menu+0x3338>)
 80044a8:	2101      	movs	r1, #1
 80044aa:	2001      	movs	r0, #1
 80044ac:	f003 fc48 	bl	8007d40 <lcd_print>

		if(iotMode == 0) {
 80044b0:	4b26      	ldr	r3, [pc, #152]	; (800454c <menu+0x333c>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d113      	bne.n	80044e0 <menu+0x32d0>
			if(dilSecim == 0) {
 80044b8:	4b10      	ldr	r3, [pc, #64]	; (80044fc <menu+0x32ec>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80044c0:	4a23      	ldr	r2, [pc, #140]	; (8004550 <menu+0x3340>)
 80044c2:	2101      	movs	r1, #1
 80044c4:	2002      	movs	r0, #2
 80044c6:	f003 fc3b 	bl	8007d40 <lcd_print>
 80044ca:	e050      	b.n	800456e <menu+0x335e>
			} else if(dilSecim == 1) {
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <menu+0x32ec>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d14c      	bne.n	800456e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80044d4:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <menu+0x3344>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	2002      	movs	r0, #2
 80044da:	f003 fc31 	bl	8007d40 <lcd_print>
 80044de:	e046      	b.n	800456e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <menu+0x333c>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d142      	bne.n	800456e <menu+0x335e>
			if(dilSecim == 0) {
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <menu+0x32ec>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d135      	bne.n	800455c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <menu+0x3348>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	2002      	movs	r0, #2
 80044f6:	f003 fc23 	bl	8007d40 <lcd_print>
 80044fa:	e038      	b.n	800456e <menu+0x335e>
 80044fc:	20000255 	.word	0x20000255
 8004500:	0800da58 	.word	0x0800da58
 8004504:	0800da8c 	.word	0x0800da8c
 8004508:	40010800 	.word	0x40010800
 800450c:	20000263 	.word	0x20000263
 8004510:	20000275 	.word	0x20000275
 8004514:	20000254 	.word	0x20000254
 8004518:	20000118 	.word	0x20000118
 800451c:	20000233 	.word	0x20000233
 8004520:	20000001 	.word	0x20000001
 8004524:	20000000 	.word	0x20000000
 8004528:	20000232 	.word	0x20000232
 800452c:	20000231 	.word	0x20000231
 8004530:	20000260 	.word	0x20000260
 8004534:	20000234 	.word	0x20000234
 8004538:	0800daa0 	.word	0x0800daa0
 800453c:	0800dab4 	.word	0x0800dab4
 8004540:	0800dac8 	.word	0x0800dac8
 8004544:	0800dadc 	.word	0x0800dadc
 8004548:	0800daf0 	.word	0x0800daf0
 800454c:	20000253 	.word	0x20000253
 8004550:	0800d348 	.word	0x0800d348
 8004554:	0800d35c 	.word	0x0800d35c
 8004558:	0800d3a8 	.word	0x0800d3a8
			} else if(dilSecim == 1) {
 800455c:	4ba3      	ldr	r3, [pc, #652]	; (80047ec <menu+0x35dc>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d104      	bne.n	800456e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004564:	4aa2      	ldr	r2, [pc, #648]	; (80047f0 <menu+0x35e0>)
 8004566:	2101      	movs	r1, #1
 8004568:	2002      	movs	r0, #2
 800456a:	f003 fbe9 	bl	8007d40 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800456e:	2102      	movs	r1, #2
 8004570:	48a0      	ldr	r0, [pc, #640]	; (80047f4 <menu+0x35e4>)
 8004572:	f004 ff0b 	bl	800938c <HAL_GPIO_ReadPin>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d115      	bne.n	80045a8 <menu+0x3398>
 800457c:	4b9e      	ldr	r3, [pc, #632]	; (80047f8 <menu+0x35e8>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	f083 0301 	eor.w	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <menu+0x3398>
			iotMode = iotMode + 1;
 800458a:	4b9c      	ldr	r3, [pc, #624]	; (80047fc <menu+0x35ec>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	3301      	adds	r3, #1
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4b9a      	ldr	r3, [pc, #616]	; (80047fc <menu+0x35ec>)
 8004594:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004596:	4b99      	ldr	r3, [pc, #612]	; (80047fc <menu+0x35ec>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d902      	bls.n	80045a4 <menu+0x3394>
				iotMode = 0;
 800459e:	4b97      	ldr	r3, [pc, #604]	; (80047fc <menu+0x35ec>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80045a4:	f000 facc 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045a8:	2104      	movs	r1, #4
 80045aa:	4892      	ldr	r0, [pc, #584]	; (80047f4 <menu+0x35e4>)
 80045ac:	f004 feee 	bl	800938c <HAL_GPIO_ReadPin>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d115      	bne.n	80045e2 <menu+0x33d2>
 80045b6:	4b90      	ldr	r3, [pc, #576]	; (80047f8 <menu+0x35e8>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f083 0301 	eor.w	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <menu+0x33d2>
			iotMode = iotMode - 1;
 80045c4:	4b8d      	ldr	r3, [pc, #564]	; (80047fc <menu+0x35ec>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	4b8b      	ldr	r3, [pc, #556]	; (80047fc <menu+0x35ec>)
 80045ce:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80045d0:	4b8a      	ldr	r3, [pc, #552]	; (80047fc <menu+0x35ec>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <menu+0x33ce>
		   		iotMode = 1;
 80045d8:	4b88      	ldr	r3, [pc, #544]	; (80047fc <menu+0x35ec>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80045de:	f000 faaf 	bl	8004b40 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045e2:	2108      	movs	r1, #8
 80045e4:	4883      	ldr	r0, [pc, #524]	; (80047f4 <menu+0x35e4>)
 80045e6:	f004 fed1 	bl	800938c <HAL_GPIO_ReadPin>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10e      	bne.n	800460e <menu+0x33fe>
 80045f0:	4b81      	ldr	r3, [pc, #516]	; (80047f8 <menu+0x35e8>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	f083 0301 	eor.w	r3, r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <menu+0x33fe>
			eepromData[48] = iotMode;
 80045fe:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <menu+0x35ec>)
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	4b7f      	ldr	r3, [pc, #508]	; (8004800 <menu+0x35f0>)
 8004604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004608:	4b7e      	ldr	r3, [pc, #504]	; (8004804 <menu+0x35f4>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800460e:	4b7e      	ldr	r3, [pc, #504]	; (8004808 <menu+0x35f8>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b20      	cmp	r3, #32
 8004614:	d14b      	bne.n	80046ae <menu+0x349e>
		calismaSayModu = 0;
 8004616:	4b7d      	ldr	r3, [pc, #500]	; (800480c <menu+0x35fc>)
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 800461c:	2001      	movs	r0, #1
 800461e:	f7fc f8c7 	bl	80007b0 <convertArrays>
		HAL_Delay(50);
 8004622:	2032      	movs	r0, #50	; 0x32
 8004624:	f004 f8e2 	bl	80087ec <HAL_Delay>

		if(dilSecim == 0) {
 8004628:	4b70      	ldr	r3, [pc, #448]	; (80047ec <menu+0x35dc>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <menu+0x342c>
			lcd_print(1, 1, "MAKINE ID       ");
 8004630:	4a77      	ldr	r2, [pc, #476]	; (8004810 <menu+0x3600>)
 8004632:	2101      	movs	r1, #1
 8004634:	2001      	movs	r0, #1
 8004636:	f003 fb83 	bl	8007d40 <lcd_print>
 800463a:	e004      	b.n	8004646 <menu+0x3436>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 800463c:	4a75      	ldr	r2, [pc, #468]	; (8004814 <menu+0x3604>)
 800463e:	2101      	movs	r1, #1
 8004640:	2001      	movs	r0, #1
 8004642:	f003 fb7d 	bl	8007d40 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8004646:	4a74      	ldr	r2, [pc, #464]	; (8004818 <menu+0x3608>)
 8004648:	2101      	movs	r1, #1
 800464a:	2002      	movs	r0, #2
 800464c:	f003 fb78 	bl	8007d40 <lcd_print>
		lcd_print(2, 13, "    ");
 8004650:	4a72      	ldr	r2, [pc, #456]	; (800481c <menu+0x360c>)
 8004652:	210d      	movs	r1, #13
 8004654:	2002      	movs	r0, #2
 8004656:	f003 fb73 	bl	8007d40 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800465a:	2102      	movs	r1, #2
 800465c:	4865      	ldr	r0, [pc, #404]	; (80047f4 <menu+0x35e4>)
 800465e:	f004 fe95 	bl	800938c <HAL_GPIO_ReadPin>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d122      	bne.n	80046ae <menu+0x349e>
 8004668:	2104      	movs	r1, #4
 800466a:	4862      	ldr	r0, [pc, #392]	; (80047f4 <menu+0x35e4>)
 800466c:	f004 fe8e 	bl	800938c <HAL_GPIO_ReadPin>
 8004670:	4603      	mov	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d11b      	bne.n	80046ae <menu+0x349e>
 8004676:	4b60      	ldr	r3, [pc, #384]	; (80047f8 <menu+0x35e8>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f083 0301 	eor.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d014      	beq.n	80046ae <menu+0x349e>
			takeMachineID();
 8004684:	f002 fb68 	bl	8006d58 <takeMachineID>

			convertArrays(1);
 8004688:	2001      	movs	r0, #1
 800468a:	f7fc f891 	bl	80007b0 <convertArrays>
			HAL_Delay(50);
 800468e:	2032      	movs	r0, #50	; 0x32
 8004690:	f004 f8ac 	bl	80087ec <HAL_Delay>

			HAL_Delay(250);
 8004694:	20fa      	movs	r0, #250	; 0xfa
 8004696:	f004 f8a9 	bl	80087ec <HAL_Delay>
			lcd_print(2, 1, machineID);
 800469a:	4a5f      	ldr	r2, [pc, #380]	; (8004818 <menu+0x3608>)
 800469c:	2101      	movs	r1, #1
 800469e:	2002      	movs	r0, #2
 80046a0:	f003 fb4e 	bl	8007d40 <lcd_print>
			lcd_print(2, 13, "    ");
 80046a4:	4a5d      	ldr	r2, [pc, #372]	; (800481c <menu+0x360c>)
 80046a6:	210d      	movs	r1, #13
 80046a8:	2002      	movs	r0, #2
 80046aa:	f003 fb49 	bl	8007d40 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 80046ae:	4b56      	ldr	r3, [pc, #344]	; (8004808 <menu+0x35f8>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b21      	cmp	r3, #33	; 0x21
 80046b4:	f040 80cb 	bne.w	800484e <menu+0x363e>
		calismaSayModu = 0;
 80046b8:	4b54      	ldr	r3, [pc, #336]	; (800480c <menu+0x35fc>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
		int ssidLength = strlen(wifiSSID);
 80046be:	4858      	ldr	r0, [pc, #352]	; (8004820 <menu+0x3610>)
 80046c0:	f7fb fdb0 	bl	8000224 <strlen>
 80046c4:	4603      	mov	r3, r0
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34

		convertArrays(2);
 80046c8:	2002      	movs	r0, #2
 80046ca:	f7fc f871 	bl	80007b0 <convertArrays>
		HAL_Delay(50);
 80046ce:	2032      	movs	r0, #50	; 0x32
 80046d0:	f004 f88c 	bl	80087ec <HAL_Delay>

		lcd_print(1, 1, "WIFI SSID       ");
 80046d4:	4a53      	ldr	r2, [pc, #332]	; (8004824 <menu+0x3614>)
 80046d6:	2101      	movs	r1, #1
 80046d8:	2001      	movs	r0, #1
 80046da:	f003 fb31 	bl	8007d40 <lcd_print>
		if(ssidLength == 16) {
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d105      	bne.n	80046f0 <menu+0x34e0>
			lcd_print(2, 1, wifiSSID);
 80046e4:	4a4e      	ldr	r2, [pc, #312]	; (8004820 <menu+0x3610>)
 80046e6:	2101      	movs	r1, #1
 80046e8:	2002      	movs	r0, #2
 80046ea:	f003 fb29 	bl	8007d40 <lcd_print>
 80046ee:	e030      	b.n	8004752 <menu+0x3542>
		} else if(ssidLength < 16) {
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	dc15      	bgt.n	8004722 <menu+0x3512>
			for(int i=0; i<16-ssidLength; i++) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	633b      	str	r3, [r7, #48]	; 0x30
 80046fa:	e00b      	b.n	8004714 <menu+0x3504>
				lcd_delete_char(2, ssidLength);
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4619      	mov	r1, r3
 8004702:	2002      	movs	r0, #2
 8004704:	f003 fb52 	bl	8007dac <lcd_delete_char>
				ssidLength++;
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	3301      	adds	r3, #1
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
			for(int i=0; i<16-ssidLength; i++) {
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	3301      	adds	r3, #1
 8004712:	633b      	str	r3, [r7, #48]	; 0x30
 8004714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004716:	f1c3 0310 	rsb	r3, r3, #16
 800471a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471c:	429a      	cmp	r2, r3
 800471e:	dbed      	blt.n	80046fc <menu+0x34ec>
 8004720:	e017      	b.n	8004752 <menu+0x3542>
			}
		} else {
			int lcdVal = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c

			//Eğer ssid 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 8004726:	2300      	movs	r3, #0
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 800472a:	e00f      	b.n	800474c <menu+0x353c>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	b2d9      	uxtb	r1, r3
 8004730:	4a3b      	ldr	r2, [pc, #236]	; (8004820 <menu+0x3610>)
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	4413      	add	r3, r2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	2002      	movs	r0, #2
 800473c:	f003 fb15 	bl	8007d6a <lcd_print_char>
				lcdVal++;
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	3301      	adds	r3, #1
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(int i=0; i<16; i++) {
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	3301      	adds	r3, #1
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	2b0f      	cmp	r3, #15
 8004750:	ddec      	ble.n	800472c <menu+0x351c>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004752:	2102      	movs	r1, #2
 8004754:	4827      	ldr	r0, [pc, #156]	; (80047f4 <menu+0x35e4>)
 8004756:	f004 fe19 	bl	800938c <HAL_GPIO_ReadPin>
 800475a:	4603      	mov	r3, r0
 800475c:	2b01      	cmp	r3, #1
 800475e:	d176      	bne.n	800484e <menu+0x363e>
 8004760:	2104      	movs	r1, #4
 8004762:	4824      	ldr	r0, [pc, #144]	; (80047f4 <menu+0x35e4>)
 8004764:	f004 fe12 	bl	800938c <HAL_GPIO_ReadPin>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d16f      	bne.n	800484e <menu+0x363e>
 800476e:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <menu+0x35e8>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	f083 0301 	eor.w	r3, r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d068      	beq.n	800484e <menu+0x363e>
			takeWifiSSID();
 800477c:	f002 fc8a 	bl	8007094 <takeWifiSSID>

			convertArrays(2);
 8004780:	2002      	movs	r0, #2
 8004782:	f7fc f815 	bl	80007b0 <convertArrays>
			HAL_Delay(50);
 8004786:	2032      	movs	r0, #50	; 0x32
 8004788:	f004 f830 	bl	80087ec <HAL_Delay>

			ssidLength = strlen(wifiSSID);
 800478c:	4824      	ldr	r0, [pc, #144]	; (8004820 <menu+0x3610>)
 800478e:	f7fb fd49 	bl	8000224 <strlen>
 8004792:	4603      	mov	r3, r0
 8004794:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_Delay(250);
 8004796:	20fa      	movs	r0, #250	; 0xfa
 8004798:	f004 f828 	bl	80087ec <HAL_Delay>
			if(ssidLength == 16) {
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d105      	bne.n	80047ae <menu+0x359e>
				lcd_print(2, 1, wifiSSID);
 80047a2:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <menu+0x3610>)
 80047a4:	2101      	movs	r1, #1
 80047a6:	2002      	movs	r0, #2
 80047a8:	f003 faca 	bl	8007d40 <lcd_print>
 80047ac:	e04f      	b.n	800484e <menu+0x363e>
			} else if(ssidLength < 16) {
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	2b0f      	cmp	r3, #15
 80047b2:	dc15      	bgt.n	80047e0 <menu+0x35d0>
				for(int i=0; i<16-ssidLength; i++) {
 80047b4:	2300      	movs	r3, #0
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
 80047b8:	e00b      	b.n	80047d2 <menu+0x35c2>
					lcd_delete_char(2, ssidLength);
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	4619      	mov	r1, r3
 80047c0:	2002      	movs	r0, #2
 80047c2:	f003 faf3 	bl	8007dac <lcd_delete_char>
					ssidLength++;
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	3301      	adds	r3, #1
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
				for(int i=0; i<16-ssidLength; i++) {
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	3301      	adds	r3, #1
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	f1c3 0310 	rsb	r3, r3, #16
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	429a      	cmp	r2, r3
 80047dc:	dbed      	blt.n	80047ba <menu+0x35aa>
 80047de:	e036      	b.n	800484e <menu+0x363e>
				}
			} else {
				int lcdVal = 1;
 80047e0:	2301      	movs	r3, #1
 80047e2:	623b      	str	r3, [r7, #32]

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e02e      	b.n	8004848 <menu+0x3638>
 80047ea:	bf00      	nop
 80047ec:	20000255 	.word	0x20000255
 80047f0:	0800d3bc 	.word	0x0800d3bc
 80047f4:	40010800 	.word	0x40010800
 80047f8:	20000263 	.word	0x20000263
 80047fc:	20000253 	.word	0x20000253
 8004800:	20000118 	.word	0x20000118
 8004804:	20000260 	.word	0x20000260
 8004808:	20000234 	.word	0x20000234
 800480c:	20000254 	.word	0x20000254
 8004810:	0800db04 	.word	0x0800db04
 8004814:	0800db18 	.word	0x0800db18
 8004818:	20000190 	.word	0x20000190
 800481c:	0800db2c 	.word	0x0800db2c
 8004820:	200001a0 	.word	0x200001a0
 8004824:	0800db34 	.word	0x0800db34
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	b2d9      	uxtb	r1, r3
 800482c:	4a8b      	ldr	r2, [pc, #556]	; (8004a5c <menu+0x384c>)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	2002      	movs	r0, #2
 8004838:	f003 fa97 	bl	8007d6a <lcd_print_char>
					lcdVal++;
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	3301      	adds	r3, #1
 8004840:	623b      	str	r3, [r7, #32]
				for(int i=0; i<16; i++) {
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3301      	adds	r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	ddec      	ble.n	8004828 <menu+0x3618>
				}
			}
		}
	}

	if (menuSayac == 34) {
 800484e:	4b84      	ldr	r3, [pc, #528]	; (8004a60 <menu+0x3850>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b22      	cmp	r3, #34	; 0x22
 8004854:	f040 80ac 	bne.w	80049b0 <menu+0x37a0>
		calismaSayModu = 0;
 8004858:	4b82      	ldr	r3, [pc, #520]	; (8004a64 <menu+0x3854>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
		int passLength = strlen(wifiPass);
 800485e:	4882      	ldr	r0, [pc, #520]	; (8004a68 <menu+0x3858>)
 8004860:	f7fb fce0 	bl	8000224 <strlen>
 8004864:	4603      	mov	r3, r0
 8004866:	61bb      	str	r3, [r7, #24]

		convertArrays(3);
 8004868:	2003      	movs	r0, #3
 800486a:	f7fb ffa1 	bl	80007b0 <convertArrays>
		HAL_Delay(50);
 800486e:	2032      	movs	r0, #50	; 0x32
 8004870:	f003 ffbc 	bl	80087ec <HAL_Delay>

		lcd_print(1, 1, "WIFI PASS       ");
 8004874:	4a7d      	ldr	r2, [pc, #500]	; (8004a6c <menu+0x385c>)
 8004876:	2101      	movs	r1, #1
 8004878:	2001      	movs	r0, #1
 800487a:	f003 fa61 	bl	8007d40 <lcd_print>
		if(passLength == 16) {
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b10      	cmp	r3, #16
 8004882:	d105      	bne.n	8004890 <menu+0x3680>
			lcd_print(2, 1, wifiPass);
 8004884:	4a78      	ldr	r2, [pc, #480]	; (8004a68 <menu+0x3858>)
 8004886:	2101      	movs	r1, #1
 8004888:	2002      	movs	r0, #2
 800488a:	f003 fa59 	bl	8007d40 <lcd_print>
 800488e:	e030      	b.n	80048f2 <menu+0x36e2>
		} else if(passLength < 16) {
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b0f      	cmp	r3, #15
 8004894:	dc15      	bgt.n	80048c2 <menu+0x36b2>
			for(int i=0; i<16-passLength; i++) {
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e00b      	b.n	80048b4 <menu+0x36a4>
				lcd_delete_char(2, passLength);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	2002      	movs	r0, #2
 80048a4:	f003 fa82 	bl	8007dac <lcd_delete_char>
				passLength++;
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	3301      	adds	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
			for(int i=0; i<16-passLength; i++) {
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	3301      	adds	r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f1c3 0310 	rsb	r3, r3, #16
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	429a      	cmp	r2, r3
 80048be:	dbed      	blt.n	800489c <menu+0x368c>
 80048c0:	e017      	b.n	80048f2 <menu+0x36e2>
			}
		} else {
			int lcdVal = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	613b      	str	r3, [r7, #16]

			//Eğer pass 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	e00f      	b.n	80048ec <menu+0x36dc>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	b2d9      	uxtb	r1, r3
 80048d0:	4a65      	ldr	r2, [pc, #404]	; (8004a68 <menu+0x3858>)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	2002      	movs	r0, #2
 80048dc:	f003 fa45 	bl	8007d6a <lcd_print_char>
				lcdVal++;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	3301      	adds	r3, #1
 80048e4:	613b      	str	r3, [r7, #16]
			for(int i=0; i<16; i++) {
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b0f      	cmp	r3, #15
 80048f0:	ddec      	ble.n	80048cc <menu+0x36bc>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048f2:	2102      	movs	r1, #2
 80048f4:	485e      	ldr	r0, [pc, #376]	; (8004a70 <menu+0x3860>)
 80048f6:	f004 fd49 	bl	800938c <HAL_GPIO_ReadPin>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d157      	bne.n	80049b0 <menu+0x37a0>
 8004900:	2104      	movs	r1, #4
 8004902:	485b      	ldr	r0, [pc, #364]	; (8004a70 <menu+0x3860>)
 8004904:	f004 fd42 	bl	800938c <HAL_GPIO_ReadPin>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d150      	bne.n	80049b0 <menu+0x37a0>
 800490e:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <menu+0x3864>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	f083 0301 	eor.w	r3, r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d049      	beq.n	80049b0 <menu+0x37a0>
			takeWifiPass();
 800491c:	f002 fd5c 	bl	80073d8 <takeWifiPass>

			convertArrays(3);
 8004920:	2003      	movs	r0, #3
 8004922:	f7fb ff45 	bl	80007b0 <convertArrays>
			HAL_Delay(50);
 8004926:	2032      	movs	r0, #50	; 0x32
 8004928:	f003 ff60 	bl	80087ec <HAL_Delay>

			passLength = strlen(wifiPass);
 800492c:	484e      	ldr	r0, [pc, #312]	; (8004a68 <menu+0x3858>)
 800492e:	f7fb fc79 	bl	8000224 <strlen>
 8004932:	4603      	mov	r3, r0
 8004934:	61bb      	str	r3, [r7, #24]

			HAL_Delay(250);
 8004936:	20fa      	movs	r0, #250	; 0xfa
 8004938:	f003 ff58 	bl	80087ec <HAL_Delay>
			if(passLength == 16) {
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b10      	cmp	r3, #16
 8004940:	d105      	bne.n	800494e <menu+0x373e>
				lcd_print(2, 1, wifiPass);
 8004942:	4a49      	ldr	r2, [pc, #292]	; (8004a68 <menu+0x3858>)
 8004944:	2101      	movs	r1, #1
 8004946:	2002      	movs	r0, #2
 8004948:	f003 f9fa 	bl	8007d40 <lcd_print>
 800494c:	e030      	b.n	80049b0 <menu+0x37a0>
			} else if(passLength < 16) {
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b0f      	cmp	r3, #15
 8004952:	dc15      	bgt.n	8004980 <menu+0x3770>
				for(int i=0; i<16-passLength; i++) {
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	e00b      	b.n	8004972 <menu+0x3762>
					lcd_delete_char(2, passLength);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4619      	mov	r1, r3
 8004960:	2002      	movs	r0, #2
 8004962:	f003 fa23 	bl	8007dac <lcd_delete_char>
					passLength++;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	3301      	adds	r3, #1
 800496a:	61bb      	str	r3, [r7, #24]
				for(int i=0; i<16-passLength; i++) {
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	3301      	adds	r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f1c3 0310 	rsb	r3, r3, #16
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	dbed      	blt.n	800495a <menu+0x374a>
 800497e:	e017      	b.n	80049b0 <menu+0x37a0>
				}
			} else {
				int lcdVal = 1;
 8004980:	2301      	movs	r3, #1
 8004982:	607b      	str	r3, [r7, #4]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 8004984:	2300      	movs	r3, #0
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	e00f      	b.n	80049aa <menu+0x379a>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	b2d9      	uxtb	r1, r3
 800498e:	4a36      	ldr	r2, [pc, #216]	; (8004a68 <menu+0x3858>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4413      	add	r3, r2
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	2002      	movs	r0, #2
 800499a:	f003 f9e6 	bl	8007d6a <lcd_print_char>
					lcdVal++;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3301      	adds	r3, #1
 80049a2:	607b      	str	r3, [r7, #4]
				for(int i=0; i<16; i++) {
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b0f      	cmp	r3, #15
 80049ae:	ddec      	ble.n	800498a <menu+0x377a>
				}
			}
		}
	}

	if (menuSayac == 35) {
 80049b0:	4b2b      	ldr	r3, [pc, #172]	; (8004a60 <menu+0x3850>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b23      	cmp	r3, #35	; 0x23
 80049b6:	d14d      	bne.n	8004a54 <menu+0x3844>
		if(dilSecim == 0) {
 80049b8:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <menu+0x3868>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <menu+0x37c6>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80049c0:	4a2e      	ldr	r2, [pc, #184]	; (8004a7c <menu+0x386c>)
 80049c2:	2101      	movs	r1, #1
 80049c4:	2001      	movs	r0, #1
 80049c6:	f003 f9bb 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80049ca:	4a2d      	ldr	r2, [pc, #180]	; (8004a80 <menu+0x3870>)
 80049cc:	2101      	movs	r1, #1
 80049ce:	2002      	movs	r0, #2
 80049d0:	f003 f9b6 	bl	8007d40 <lcd_print>
 80049d4:	e00d      	b.n	80049f2 <menu+0x37e2>
		} else if(dilSecim == 1) {
 80049d6:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <menu+0x3868>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d109      	bne.n	80049f2 <menu+0x37e2>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80049de:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <menu+0x3874>)
 80049e0:	2101      	movs	r1, #1
 80049e2:	2001      	movs	r0, #1
 80049e4:	f003 f9ac 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80049e8:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <menu+0x3878>)
 80049ea:	2101      	movs	r1, #1
 80049ec:	2002      	movs	r0, #2
 80049ee:	f003 f9a7 	bl	8007d40 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80049f2:	2108      	movs	r1, #8
 80049f4:	481e      	ldr	r0, [pc, #120]	; (8004a70 <menu+0x3860>)
 80049f6:	f004 fcc9 	bl	800938c <HAL_GPIO_ReadPin>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d129      	bne.n	8004a54 <menu+0x3844>
			menuGiris = 0;
 8004a00:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <menu+0x387c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004a06:	bf00      	nop
 8004a08:	4821      	ldr	r0, [pc, #132]	; (8004a90 <menu+0x3880>)
 8004a0a:	f005 fae8 	bl	8009fde <HAL_I2C_GetError>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d0f9      	beq.n	8004a08 <menu+0x37f8>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004a14:	bf00      	nop
 8004a16:	481e      	ldr	r0, [pc, #120]	; (8004a90 <menu+0x3880>)
 8004a18:	f005 fad4 	bl	8009fc4 <HAL_I2C_GetState>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d1f9      	bne.n	8004a16 <menu+0x3806>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004a22:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	236e      	movs	r3, #110	; 0x6e
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <menu+0x3884>)
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	236e      	movs	r3, #110	; 0x6e
 8004a32:	2200      	movs	r2, #0
 8004a34:	21a0      	movs	r1, #160	; 0xa0
 8004a36:	4816      	ldr	r0, [pc, #88]	; (8004a90 <menu+0x3880>)
 8004a38:	f004 ff62 	bl	8009900 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004a3c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004a40:	f003 fed4 	bl	80087ec <HAL_Delay>

			lcd_clear();
 8004a44:	f003 f9a8 	bl	8007d98 <lcd_clear>
			HAL_Delay(500);
 8004a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a4c:	f003 fece 	bl	80087ec <HAL_Delay>
			NVIC_SystemReset();
 8004a50:	f7fc fbc8 	bl	80011e4 <__NVIC_SystemReset>
		}
	}
}
 8004a54:	bf00      	nop
 8004a56:	3738      	adds	r7, #56	; 0x38
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	200001a0 	.word	0x200001a0
 8004a60:	20000234 	.word	0x20000234
 8004a64:	20000254 	.word	0x20000254
 8004a68:	200001b8 	.word	0x200001b8
 8004a6c:	0800db48 	.word	0x0800db48
 8004a70:	40010800 	.word	0x40010800
 8004a74:	20000263 	.word	0x20000263
 8004a78:	20000255 	.word	0x20000255
 8004a7c:	0800db5c 	.word	0x0800db5c
 8004a80:	0800db70 	.word	0x0800db70
 8004a84:	0800db84 	.word	0x0800db84
 8004a88:	0800db98 	.word	0x0800db98
 8004a8c:	20000251 	.word	0x20000251
 8004a90:	200003bc 	.word	0x200003bc
 8004a94:	20000118 	.word	0x20000118

08004a98 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d105      	bne.n	8004ab4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004aa8:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <lcdUpdate+0x9c>)
 8004aaa:	2101      	movs	r1, #1
 8004aac:	2002      	movs	r0, #2
 8004aae:	f003 f947 	bl	8007d40 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004ab2:	e03b      	b.n	8004b2c <lcdUpdate+0x94>
	} else if(y==2) {
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d105      	bne.n	8004ac6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004aba:	4a1e      	ldr	r2, [pc, #120]	; (8004b34 <lcdUpdate+0x9c>)
 8004abc:	2102      	movs	r1, #2
 8004abe:	2002      	movs	r0, #2
 8004ac0:	f003 f93e 	bl	8007d40 <lcd_print>
}
 8004ac4:	e032      	b.n	8004b2c <lcdUpdate+0x94>
	} else if(y==3) {
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d105      	bne.n	8004ad8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004acc:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <lcdUpdate+0x9c>)
 8004ace:	2103      	movs	r1, #3
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	f003 f935 	bl	8007d40 <lcd_print>
}
 8004ad6:	e029      	b.n	8004b2c <lcdUpdate+0x94>
	} else if(y==4) {
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d105      	bne.n	8004aea <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004ade:	4a15      	ldr	r2, [pc, #84]	; (8004b34 <lcdUpdate+0x9c>)
 8004ae0:	2104      	movs	r1, #4
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	f003 f92c 	bl	8007d40 <lcd_print>
}
 8004ae8:	e020      	b.n	8004b2c <lcdUpdate+0x94>
	} else if(y==5) {
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d105      	bne.n	8004afc <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004af0:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <lcdUpdate+0x9c>)
 8004af2:	2105      	movs	r1, #5
 8004af4:	2002      	movs	r0, #2
 8004af6:	f003 f923 	bl	8007d40 <lcd_print>
}
 8004afa:	e017      	b.n	8004b2c <lcdUpdate+0x94>
	} else if(y==6) {
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d105      	bne.n	8004b0e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004b02:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <lcdUpdate+0x9c>)
 8004b04:	2106      	movs	r1, #6
 8004b06:	2002      	movs	r0, #2
 8004b08:	f003 f91a 	bl	8007d40 <lcd_print>
}
 8004b0c:	e00e      	b.n	8004b2c <lcdUpdate+0x94>
	} else if (y==7) {
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	2b07      	cmp	r3, #7
 8004b12:	d10b      	bne.n	8004b2c <lcdUpdate+0x94>
		lcd_clear();
 8004b14:	f003 f940 	bl	8007d98 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004b18:	4a07      	ldr	r2, [pc, #28]	; (8004b38 <lcdUpdate+0xa0>)
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	f003 f90f 	bl	8007d40 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004b22:	4a06      	ldr	r2, [pc, #24]	; (8004b3c <lcdUpdate+0xa4>)
 8004b24:	2106      	movs	r1, #6
 8004b26:	2002      	movs	r0, #2
 8004b28:	f003 f90a 	bl	8007d40 <lcd_print>
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	0800dbac 	.word	0x0800dbac
 8004b38:	0800dbb0 	.word	0x0800dbb0
 8004b3c:	0800dbb8 	.word	0x0800dbb8

08004b40 <bekle>:

void bekle() {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
	timer1=millis;
 8004b44:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <bekle+0x124>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a47      	ldr	r2, [pc, #284]	; (8004c68 <bekle+0x128>)
 8004b4a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b4c:	e002      	b.n	8004b54 <bekle+0x14>
    	butonKontrol = 1;
 8004b4e:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <bekle+0x12c>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b54:	2101      	movs	r1, #1
 8004b56:	4846      	ldr	r0, [pc, #280]	; (8004c70 <bekle+0x130>)
 8004b58:	f004 fc18 	bl	800938c <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d109      	bne.n	8004b76 <bekle+0x36>
 8004b62:	4b40      	ldr	r3, [pc, #256]	; (8004c64 <bekle+0x124>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b40      	ldr	r3, [pc, #256]	; (8004c68 <bekle+0x128>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d0ef      	beq.n	8004b4e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b6e:	e002      	b.n	8004b76 <bekle+0x36>
    	butonKontrol = 1;
 8004b70:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <bekle+0x12c>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b76:	2108      	movs	r1, #8
 8004b78:	483e      	ldr	r0, [pc, #248]	; (8004c74 <bekle+0x134>)
 8004b7a:	f004 fc07 	bl	800938c <HAL_GPIO_ReadPin>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d109      	bne.n	8004b98 <bekle+0x58>
 8004b84:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <bekle+0x124>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b37      	ldr	r3, [pc, #220]	; (8004c68 <bekle+0x128>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d0ef      	beq.n	8004b70 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b90:	e002      	b.n	8004b98 <bekle+0x58>
    	butonKontrol = 1;
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <bekle+0x12c>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4835      	ldr	r0, [pc, #212]	; (8004c70 <bekle+0x130>)
 8004b9c:	f004 fbf6 	bl	800938c <HAL_GPIO_ReadPin>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d109      	bne.n	8004bba <bekle+0x7a>
 8004ba6:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <bekle+0x124>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <bekle+0x128>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d0ef      	beq.n	8004b92 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bb2:	e002      	b.n	8004bba <bekle+0x7a>
    	butonKontrol = 1;
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <bekle+0x12c>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bba:	2104      	movs	r1, #4
 8004bbc:	482c      	ldr	r0, [pc, #176]	; (8004c70 <bekle+0x130>)
 8004bbe:	f004 fbe5 	bl	800938c <HAL_GPIO_ReadPin>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d109      	bne.n	8004bdc <bekle+0x9c>
 8004bc8:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <bekle+0x124>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <bekle+0x128>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0ef      	beq.n	8004bb4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bd4:	e002      	b.n	8004bdc <bekle+0x9c>
    	butonKontrol = 1;
 8004bd6:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <bekle+0x12c>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bdc:	2108      	movs	r1, #8
 8004bde:	4824      	ldr	r0, [pc, #144]	; (8004c70 <bekle+0x130>)
 8004be0:	f004 fbd4 	bl	800938c <HAL_GPIO_ReadPin>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d109      	bne.n	8004bfe <bekle+0xbe>
 8004bea:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <bekle+0x124>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b1e      	ldr	r3, [pc, #120]	; (8004c68 <bekle+0x128>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d0ef      	beq.n	8004bd6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bf6:	e002      	b.n	8004bfe <bekle+0xbe>
    	butonKontrol = 1;
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <bekle+0x12c>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bfe:	2180      	movs	r1, #128	; 0x80
 8004c00:	481c      	ldr	r0, [pc, #112]	; (8004c74 <bekle+0x134>)
 8004c02:	f004 fbc3 	bl	800938c <HAL_GPIO_ReadPin>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <bekle+0xe0>
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <bekle+0x124>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <bekle+0x128>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d0ef      	beq.n	8004bf8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c18:	e002      	b.n	8004c20 <bekle+0xe0>
    	butonKontrol = 1;
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <bekle+0x12c>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c24:	4813      	ldr	r0, [pc, #76]	; (8004c74 <bekle+0x134>)
 8004c26:	f004 fbb1 	bl	800938c <HAL_GPIO_ReadPin>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <bekle+0x104>
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <bekle+0x124>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <bekle+0x128>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d0ee      	beq.n	8004c1a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c3c:	e002      	b.n	8004c44 <bekle+0x104>
    	butonKontrol = 1;
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <bekle+0x12c>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c48:	480a      	ldr	r0, [pc, #40]	; (8004c74 <bekle+0x134>)
 8004c4a:	f004 fb9f 	bl	800938c <HAL_GPIO_ReadPin>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <bekle+0x120>
 8004c54:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <bekle+0x124>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b03      	ldr	r3, [pc, #12]	; (8004c68 <bekle+0x128>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d0ee      	beq.n	8004c3e <bekle+0xfe>
    }

}
 8004c60:	bf00      	nop
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000210 	.word	0x20000210
 8004c68:	20000218 	.word	0x20000218
 8004c6c:	20000263 	.word	0x20000263
 8004c70:	40010800 	.word	0x40010800
 8004c74:	40011000 	.word	0x40011000

08004c78 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c7c:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <checkLCDBacklight+0x24>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <checkLCDBacklight+0x28>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b3b      	cmp	r3, #59	; 0x3b
 8004c88:	d903      	bls.n	8004c92 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	f003 f8a4 	bl	8007dd8 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c90:	e002      	b.n	8004c98 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c92:	2001      	movs	r0, #1
 8004c94:	f003 f8a0 	bl	8007dd8 <lcd_backlight>
}
 8004c98:	bf00      	nop
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000210 	.word	0x20000210
 8004ca0:	2000022c 	.word	0x2000022c

08004ca4 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <checkBasincSalteri+0x54>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <checkBasincSalteri+0x12>
		basincVar=1;
 8004cb0:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <checkBasincSalteri+0x58>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <checkBasincSalteri+0x54>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d119      	bne.n	8004cf2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004cbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cc2:	480f      	ldr	r0, [pc, #60]	; (8004d00 <checkBasincSalteri+0x5c>)
 8004cc4:	f004 fb62 	bl	800938c <HAL_GPIO_ReadPin>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <checkBasincSalteri+0x60>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <checkBasincSalteri+0x64>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d90a      	bls.n	8004cf2 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <checkBasincSalteri+0x58>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004ce2:	e006      	b.n	8004cf2 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <checkBasincSalteri+0x60>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <checkBasincSalteri+0x64>)
 8004cea:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <checkBasincSalteri+0x58>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	2000023b 	.word	0x2000023b
 8004cfc:	20000237 	.word	0x20000237
 8004d00:	40011000 	.word	0x40011000
 8004d04:	20000210 	.word	0x20000210
 8004d08:	20000228 	.word	0x20000228

08004d0c <checkBasGonder>:

void checkBasGonder() {
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d10:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <checkBasGonder+0x74>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10b      	bne.n	8004d30 <checkBasGonder+0x24>
 8004d18:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <checkBasGonder+0x78>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <checkBasGonder+0x24>
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <checkBasGonder+0x7c>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004d28:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <checkBasGonder+0x80>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e009      	b.n	8004d44 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004d30:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <checkBasGonder+0x78>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	f083 0301 	eor.w	r3, r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004d3e:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <checkBasGonder+0x80>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d44:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <checkBasGonder+0x74>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10b      	bne.n	8004d64 <checkBasGonder+0x58>
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <checkBasGonder+0x84>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <checkBasGonder+0x58>
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <checkBasGonder+0x7c>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <checkBasGonder+0x88>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004d62:	e009      	b.n	8004d78 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004d64:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <checkBasGonder+0x84>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f083 0301 	eor.w	r3, r3, #1
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004d72:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <checkBasGonder+0x88>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	20000235 	.word	0x20000235
 8004d84:	20000269 	.word	0x20000269
 8004d88:	20000243 	.word	0x20000243
 8004d8c:	20000270 	.word	0x20000270
 8004d90:	2000026c 	.word	0x2000026c
 8004d94:	20000271 	.word	0x20000271

08004d98 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d9c:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <checkKapiSecimleri+0x98>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004da4:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <checkKapiSecimleri+0x9c>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004daa:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <checkKapiSecimleri+0x98>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d10e      	bne.n	8004dd0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004db6:	4820      	ldr	r0, [pc, #128]	; (8004e38 <checkKapiSecimleri+0xa0>)
 8004db8:	f004 fae8 	bl	800938c <HAL_GPIO_ReadPin>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004dc2:	4b1c      	ldr	r3, [pc, #112]	; (8004e34 <checkKapiSecimleri+0x9c>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e002      	b.n	8004dd0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <checkKapiSecimleri+0x9c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004dd0:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <checkKapiSecimleri+0x98>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d10e      	bne.n	8004df6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ddc:	4816      	ldr	r0, [pc, #88]	; (8004e38 <checkKapiSecimleri+0xa0>)
 8004dde:	f004 fad5 	bl	800938c <HAL_GPIO_ReadPin>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <checkKapiSecimleri+0x9c>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e002      	b.n	8004df6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004df0:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <checkKapiSecimleri+0x9c>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004df6:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <checkKapiSecimleri+0x98>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d116      	bne.n	8004e2c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e02:	480d      	ldr	r0, [pc, #52]	; (8004e38 <checkKapiSecimleri+0xa0>)
 8004e04:	f004 fac2 	bl	800938c <HAL_GPIO_ReadPin>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <checkKapiSecimleri+0x8e>
 8004e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e12:	4809      	ldr	r0, [pc, #36]	; (8004e38 <checkKapiSecimleri+0xa0>)
 8004e14:	f004 faba 	bl	800938c <HAL_GPIO_ReadPin>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <checkKapiSecimleri+0x9c>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004e24:	e002      	b.n	8004e2c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004e26:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <checkKapiSecimleri+0x9c>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	2000023c 	.word	0x2000023c
 8004e34:	20000287 	.word	0x20000287
 8004e38:	40010800 	.word	0x40010800

08004e3c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004e40:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <checkAktifCalisma+0x190>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f041 833e 	bne.w	80064c6 <checkAktifCalisma+0x168a>
 8004e4a:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <checkAktifCalisma+0x194>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f041 8339 	bne.w	80064c6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004e54:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <checkAktifCalisma+0x198>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d11a      	bne.n	8004e92 <checkAktifCalisma+0x56>
 8004e5c:	4b5e      	ldr	r3, [pc, #376]	; (8004fd8 <checkAktifCalisma+0x19c>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d116      	bne.n	8004e92 <checkAktifCalisma+0x56>
 8004e64:	4b5d      	ldr	r3, [pc, #372]	; (8004fdc <checkAktifCalisma+0x1a0>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <checkAktifCalisma+0x46>
 8004e6c:	4b5c      	ldr	r3, [pc, #368]	; (8004fe0 <checkAktifCalisma+0x1a4>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f083 0301 	eor.w	r3, r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <checkAktifCalisma+0x46>
 8004e7a:	4b5a      	ldr	r3, [pc, #360]	; (8004fe4 <checkAktifCalisma+0x1a8>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d007      	beq.n	8004e92 <checkAktifCalisma+0x56>
 8004e82:	4b59      	ldr	r3, [pc, #356]	; (8004fe8 <checkAktifCalisma+0x1ac>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d018      	beq.n	8004ebc <checkAktifCalisma+0x80>
 8004e8a:	4b58      	ldr	r3, [pc, #352]	; (8004fec <checkAktifCalisma+0x1b0>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d114      	bne.n	8004ebc <checkAktifCalisma+0x80>
 8004e92:	4b57      	ldr	r3, [pc, #348]	; (8004ff0 <checkAktifCalisma+0x1b4>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d010      	beq.n	8004ebc <checkAktifCalisma+0x80>
 8004e9a:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <checkAktifCalisma+0x1b8>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ea8:	4853      	ldr	r0, [pc, #332]	; (8004ff8 <checkAktifCalisma+0x1bc>)
 8004eaa:	f004 fa86 	bl	80093ba <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004eae:	4b53      	ldr	r3, [pc, #332]	; (8004ffc <checkAktifCalisma+0x1c0>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004eb4:	4b52      	ldr	r3, [pc, #328]	; (8005000 <checkAktifCalisma+0x1c4>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	e008      	b.n	8004ece <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ec2:	484d      	ldr	r0, [pc, #308]	; (8004ff8 <checkAktifCalisma+0x1bc>)
 8004ec4:	f004 fa79 	bl	80093ba <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004ec8:	4b4c      	ldr	r3, [pc, #304]	; (8004ffc <checkAktifCalisma+0x1c0>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004ece:	4b40      	ldr	r3, [pc, #256]	; (8004fd0 <checkAktifCalisma+0x194>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d160      	bne.n	8004f98 <checkAktifCalisma+0x15c>
 8004ed6:	4b46      	ldr	r3, [pc, #280]	; (8004ff0 <checkAktifCalisma+0x1b4>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d05c      	beq.n	8004f98 <checkAktifCalisma+0x15c>
 8004ede:	4b45      	ldr	r3, [pc, #276]	; (8004ff4 <checkAktifCalisma+0x1b8>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d058      	beq.n	8004f98 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004eea:	4843      	ldr	r0, [pc, #268]	; (8004ff8 <checkAktifCalisma+0x1bc>)
 8004eec:	f004 fa4e 	bl	800938c <HAL_GPIO_ReadPin>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <checkAktifCalisma+0xc2>
 8004ef6:	4b43      	ldr	r3, [pc, #268]	; (8005004 <checkAktifCalisma+0x1c8>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d04c      	beq.n	8004f98 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004efe:	2102      	movs	r1, #2
 8004f00:	4841      	ldr	r0, [pc, #260]	; (8005008 <checkAktifCalisma+0x1cc>)
 8004f02:	f004 fa43 	bl	800938c <HAL_GPIO_ReadPin>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d145      	bne.n	8004f98 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004f0c:	4b3f      	ldr	r3, [pc, #252]	; (800500c <checkAktifCalisma+0x1d0>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d041      	beq.n	8004f98 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f18:	4837      	ldr	r0, [pc, #220]	; (8004ff8 <checkAktifCalisma+0x1bc>)
 8004f1a:	f004 fa37 	bl	800938c <HAL_GPIO_ReadPin>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d10e      	bne.n	8004f42 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f28:	4833      	ldr	r0, [pc, #204]	; (8004ff8 <checkAktifCalisma+0x1bc>)
 8004f2a:	f004 fa2f 	bl	800938c <HAL_GPIO_ReadPin>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d106      	bne.n	8004f42 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004f34:	2140      	movs	r1, #64	; 0x40
 8004f36:	4834      	ldr	r0, [pc, #208]	; (8005008 <checkAktifCalisma+0x1cc>)
 8004f38:	f004 fa28 	bl	800938c <HAL_GPIO_ReadPin>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d003      	beq.n	8004f4a <checkAktifCalisma+0x10e>
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <checkAktifCalisma+0x198>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d026      	beq.n	8004f98 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <checkAktifCalisma+0x1a0>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	f083 0301 	eor.w	r3, r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004f58:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <checkAktifCalisma+0x19c>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f083 0301 	eor.w	r3, r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d018      	beq.n	8004f98 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <checkAktifCalisma+0x1ac>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f083 0301 	eor.w	r3, r3, #1
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d011      	beq.n	8004f98 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004f74:	4b26      	ldr	r3, [pc, #152]	; (8005010 <checkAktifCalisma+0x1d4>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f083 0301 	eor.w	r3, r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f82:	4b24      	ldr	r3, [pc, #144]	; (8005014 <checkAktifCalisma+0x1d8>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f90:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <checkAktifCalisma+0x198>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f98:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <checkAktifCalisma+0x198>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <checkAktifCalisma+0x198>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d03a      	beq.n	800501c <checkAktifCalisma+0x1e0>
 8004fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004faa:	4817      	ldr	r0, [pc, #92]	; (8005008 <checkAktifCalisma+0x1cc>)
 8004fac:	f004 f9ee 	bl	800938c <HAL_GPIO_ReadPin>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d132      	bne.n	800501c <checkAktifCalisma+0x1e0>
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <checkAktifCalisma+0x1dc>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d02e      	beq.n	800501c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fc4:	480c      	ldr	r0, [pc, #48]	; (8004ff8 <checkAktifCalisma+0x1bc>)
 8004fc6:	f004 f9f8 	bl	80093ba <HAL_GPIO_WritePin>
 8004fca:	e02d      	b.n	8005028 <checkAktifCalisma+0x1ec>
 8004fcc:	20000252 	.word	0x20000252
 8004fd0:	20000251 	.word	0x20000251
 8004fd4:	20000269 	.word	0x20000269
 8004fd8:	2000026a 	.word	0x2000026a
 8004fdc:	2000026c 	.word	0x2000026c
 8004fe0:	20000264 	.word	0x20000264
 8004fe4:	20000247 	.word	0x20000247
 8004fe8:	2000026b 	.word	0x2000026b
 8004fec:	20000246 	.word	0x20000246
 8004ff0:	20000286 	.word	0x20000286
 8004ff4:	20000287 	.word	0x20000287
 8004ff8:	40010c00 	.word	0x40010c00
 8004ffc:	20000288 	.word	0x20000288
 8005000:	20000273 	.word	0x20000273
 8005004:	20000270 	.word	0x20000270
 8005008:	40011000 	.word	0x40011000
 800500c:	20000237 	.word	0x20000237
 8005010:	2000026e 	.word	0x2000026e
 8005014:	2000026f 	.word	0x2000026f
 8005018:	20000242 	.word	0x20000242
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005022:	4860      	ldr	r0, [pc, #384]	; (80051a4 <checkAktifCalisma+0x368>)
 8005024:	f004 f9c9 	bl	80093ba <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005028:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <checkAktifCalisma+0x36c>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <checkAktifCalisma+0x21c>
 8005030:	4b5e      	ldr	r3, [pc, #376]	; (80051ac <checkAktifCalisma+0x370>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d007      	beq.n	8005048 <checkAktifCalisma+0x20c>
 8005038:	4b5c      	ldr	r3, [pc, #368]	; (80051ac <checkAktifCalisma+0x370>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d003      	beq.n	8005048 <checkAktifCalisma+0x20c>
 8005040:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <checkAktifCalisma+0x374>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005048:	2201      	movs	r2, #1
 800504a:	2104      	movs	r1, #4
 800504c:	4855      	ldr	r0, [pc, #340]	; (80051a4 <checkAktifCalisma+0x368>)
 800504e:	f004 f9b4 	bl	80093ba <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005052:	4b58      	ldr	r3, [pc, #352]	; (80051b4 <checkAktifCalisma+0x378>)
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005058:	4b56      	ldr	r3, [pc, #344]	; (80051b4 <checkAktifCalisma+0x378>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02f      	beq.n	80050c0 <checkAktifCalisma+0x284>
 8005060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005064:	484f      	ldr	r0, [pc, #316]	; (80051a4 <checkAktifCalisma+0x368>)
 8005066:	f004 f991 	bl	800938c <HAL_GPIO_ReadPin>
 800506a:	4603      	mov	r3, r0
 800506c:	2b01      	cmp	r3, #1
 800506e:	d106      	bne.n	800507e <checkAktifCalisma+0x242>
 8005070:	4b51      	ldr	r3, [pc, #324]	; (80051b8 <checkAktifCalisma+0x37c>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f083 0301 	eor.w	r3, r3, #1
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <checkAktifCalisma+0x250>
 800507e:	2102      	movs	r1, #2
 8005080:	484e      	ldr	r0, [pc, #312]	; (80051bc <checkAktifCalisma+0x380>)
 8005082:	f004 f983 	bl	800938c <HAL_GPIO_ReadPin>
 8005086:	4603      	mov	r3, r0
 8005088:	2b01      	cmp	r3, #1
 800508a:	d119      	bne.n	80050c0 <checkAktifCalisma+0x284>
 800508c:	4b4c      	ldr	r3, [pc, #304]	; (80051c0 <checkAktifCalisma+0x384>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <checkAktifCalisma+0x284>
 8005094:	4b4b      	ldr	r3, [pc, #300]	; (80051c4 <checkAktifCalisma+0x388>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d011      	beq.n	80050c0 <checkAktifCalisma+0x284>
 800509c:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <checkAktifCalisma+0x38c>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <checkAktifCalisma+0x284>
 80050a4:	4b49      	ldr	r3, [pc, #292]	; (80051cc <checkAktifCalisma+0x390>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	f083 0301 	eor.w	r3, r3, #1
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <checkAktifCalisma+0x284>
			timer2=millis;
 80050b2:	4b47      	ldr	r3, [pc, #284]	; (80051d0 <checkAktifCalisma+0x394>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a47      	ldr	r2, [pc, #284]	; (80051d4 <checkAktifCalisma+0x398>)
 80050b8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80050ba:	4b44      	ldr	r3, [pc, #272]	; (80051cc <checkAktifCalisma+0x390>)
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80050c0:	4b43      	ldr	r3, [pc, #268]	; (80051d0 <checkAktifCalisma+0x394>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b43      	ldr	r3, [pc, #268]	; (80051d4 <checkAktifCalisma+0x398>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	4a43      	ldr	r2, [pc, #268]	; (80051d8 <checkAktifCalisma+0x39c>)
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d303      	bcc.n	80050da <checkAktifCalisma+0x29e>
 80050d2:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <checkAktifCalisma+0x390>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d111      	bne.n	80050fe <checkAktifCalisma+0x2c2>
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <checkAktifCalisma+0x384>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	f083 0301 	eor.w	r3, r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <checkAktifCalisma+0x2c2>
 80050e8:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <checkAktifCalisma+0x388>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	f083 0301 	eor.w	r3, r3, #1
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <checkAktifCalisma+0x2c2>
 80050f6:	4b34      	ldr	r3, [pc, #208]	; (80051c8 <checkAktifCalisma+0x38c>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80050fe:	2200      	movs	r2, #0
 8005100:	2104      	movs	r1, #4
 8005102:	4828      	ldr	r0, [pc, #160]	; (80051a4 <checkAktifCalisma+0x368>)
 8005104:	f004 f959 	bl	80093ba <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005108:	4b2a      	ldr	r3, [pc, #168]	; (80051b4 <checkAktifCalisma+0x378>)
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800510e:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <checkAktifCalisma+0x390>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005114:	4b31      	ldr	r3, [pc, #196]	; (80051dc <checkAktifCalisma+0x3a0>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d102      	bne.n	8005122 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 800511c:	4b30      	ldr	r3, [pc, #192]	; (80051e0 <checkAktifCalisma+0x3a4>)
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005122:	4b2e      	ldr	r3, [pc, #184]	; (80051dc <checkAktifCalisma+0x3a0>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d116      	bne.n	8005158 <checkAktifCalisma+0x31c>
 800512a:	4b2e      	ldr	r3, [pc, #184]	; (80051e4 <checkAktifCalisma+0x3a8>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d112      	bne.n	8005158 <checkAktifCalisma+0x31c>
 8005132:	2101      	movs	r1, #1
 8005134:	4821      	ldr	r0, [pc, #132]	; (80051bc <checkAktifCalisma+0x380>)
 8005136:	f004 f929 	bl	800938c <HAL_GPIO_ReadPin>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <checkAktifCalisma+0x31c>
 8005140:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005144:	4817      	ldr	r0, [pc, #92]	; (80051a4 <checkAktifCalisma+0x368>)
 8005146:	f004 f921 	bl	800938c <HAL_GPIO_ReadPin>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005150:	4b23      	ldr	r3, [pc, #140]	; (80051e0 <checkAktifCalisma+0x3a4>)
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e011      	b.n	800517c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005158:	4b20      	ldr	r3, [pc, #128]	; (80051dc <checkAktifCalisma+0x3a0>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10d      	bne.n	800517c <checkAktifCalisma+0x340>
 8005160:	2101      	movs	r1, #1
 8005162:	4816      	ldr	r0, [pc, #88]	; (80051bc <checkAktifCalisma+0x380>)
 8005164:	f004 f912 	bl	800938c <HAL_GPIO_ReadPin>
 8005168:	4603      	mov	r3, r0
 800516a:	2b01      	cmp	r3, #1
 800516c:	d106      	bne.n	800517c <checkAktifCalisma+0x340>
 800516e:	4b1d      	ldr	r3, [pc, #116]	; (80051e4 <checkAktifCalisma+0x3a8>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <checkAktifCalisma+0x3a4>)
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800517c:	4b17      	ldr	r3, [pc, #92]	; (80051dc <checkAktifCalisma+0x3a0>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d134      	bne.n	80051ee <checkAktifCalisma+0x3b2>
 8005184:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <checkAktifCalisma+0x3a8>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d130      	bne.n	80051ee <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800518c:	2101      	movs	r1, #1
 800518e:	480b      	ldr	r0, [pc, #44]	; (80051bc <checkAktifCalisma+0x380>)
 8005190:	f004 f8fc 	bl	800938c <HAL_GPIO_ReadPin>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d126      	bne.n	80051e8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <checkAktifCalisma+0x3a4>)
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e025      	b.n	80051ee <checkAktifCalisma+0x3b2>
 80051a2:	bf00      	nop
 80051a4:	40010c00 	.word	0x40010c00
 80051a8:	20000269 	.word	0x20000269
 80051ac:	20000243 	.word	0x20000243
 80051b0:	20000247 	.word	0x20000247
 80051b4:	2000026d 	.word	0x2000026d
 80051b8:	20000270 	.word	0x20000270
 80051bc:	40011000 	.word	0x40011000
 80051c0:	20000286 	.word	0x20000286
 80051c4:	20000287 	.word	0x20000287
 80051c8:	20000237 	.word	0x20000237
 80051cc:	20000265 	.word	0x20000265
 80051d0:	20000210 	.word	0x20000210
 80051d4:	2000021c 	.word	0x2000021c
 80051d8:	20000248 	.word	0x20000248
 80051dc:	20000238 	.word	0x20000238
 80051e0:	2000028b 	.word	0x2000028b
 80051e4:	20000235 	.word	0x20000235
			} else {
				cerceveVar=0;
 80051e8:	4b7f      	ldr	r3, [pc, #508]	; (80053e8 <checkAktifCalisma+0x5ac>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80051ee:	4b7f      	ldr	r3, [pc, #508]	; (80053ec <checkAktifCalisma+0x5b0>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d17c      	bne.n	80052f0 <checkAktifCalisma+0x4b4>
 80051f6:	4b7e      	ldr	r3, [pc, #504]	; (80053f0 <checkAktifCalisma+0x5b4>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d078      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
 80051fe:	4b7d      	ldr	r3, [pc, #500]	; (80053f4 <checkAktifCalisma+0x5b8>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d074      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800520a:	487b      	ldr	r0, [pc, #492]	; (80053f8 <checkAktifCalisma+0x5bc>)
 800520c:	f004 f8be 	bl	800938c <HAL_GPIO_ReadPin>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <checkAktifCalisma+0x3e2>
 8005216:	4b79      	ldr	r3, [pc, #484]	; (80053fc <checkAktifCalisma+0x5c0>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d068      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800521e:	4b72      	ldr	r3, [pc, #456]	; (80053e8 <checkAktifCalisma+0x5ac>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d064      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <checkAktifCalisma+0x5c4>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	f083 0301 	eor.w	r3, r3, #1
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d05d      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005234:	2104      	movs	r1, #4
 8005236:	4873      	ldr	r0, [pc, #460]	; (8005404 <checkAktifCalisma+0x5c8>)
 8005238:	f004 f8a8 	bl	800938c <HAL_GPIO_ReadPin>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <checkAktifCalisma+0x40e>
 8005242:	4b71      	ldr	r3, [pc, #452]	; (8005408 <checkAktifCalisma+0x5cc>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d152      	bne.n	80052f0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800524a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800524e:	486a      	ldr	r0, [pc, #424]	; (80053f8 <checkAktifCalisma+0x5bc>)
 8005250:	f004 f89c 	bl	800938c <HAL_GPIO_ReadPin>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d10e      	bne.n	8005278 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800525a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800525e:	4866      	ldr	r0, [pc, #408]	; (80053f8 <checkAktifCalisma+0x5bc>)
 8005260:	f004 f894 	bl	800938c <HAL_GPIO_ReadPin>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d106      	bne.n	8005278 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800526a:	2140      	movs	r1, #64	; 0x40
 800526c:	4865      	ldr	r0, [pc, #404]	; (8005404 <checkAktifCalisma+0x5c8>)
 800526e:	f004 f88d 	bl	800938c <HAL_GPIO_ReadPin>
 8005272:	4603      	mov	r3, r0
 8005274:	2b01      	cmp	r3, #1
 8005276:	d003      	beq.n	8005280 <checkAktifCalisma+0x444>
 8005278:	4b64      	ldr	r3, [pc, #400]	; (800540c <checkAktifCalisma+0x5d0>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d037      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005280:	4b63      	ldr	r3, [pc, #396]	; (8005410 <checkAktifCalisma+0x5d4>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f083 0301 	eor.w	r3, r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d030      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800528e:	4b61      	ldr	r3, [pc, #388]	; (8005414 <checkAktifCalisma+0x5d8>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	f083 0301 	eor.w	r3, r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d029      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800529c:	4b5e      	ldr	r3, [pc, #376]	; (8005418 <checkAktifCalisma+0x5dc>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f083 0301 	eor.w	r3, r3, #1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d022      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80052aa:	4b5c      	ldr	r3, [pc, #368]	; (800541c <checkAktifCalisma+0x5e0>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f083 0301 	eor.w	r3, r3, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80052b8:	4b59      	ldr	r3, [pc, #356]	; (8005420 <checkAktifCalisma+0x5e4>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f083 0301 	eor.w	r3, r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d014      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80052c6:	4b57      	ldr	r3, [pc, #348]	; (8005424 <checkAktifCalisma+0x5e8>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f083 0301 	eor.w	r3, r3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80052d4:	2201      	movs	r2, #1
 80052d6:	2102      	movs	r1, #2
 80052d8:	4847      	ldr	r0, [pc, #284]	; (80053f8 <checkAktifCalisma+0x5bc>)
 80052da:	f004 f86e 	bl	80093ba <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80052de:	4b4b      	ldr	r3, [pc, #300]	; (800540c <checkAktifCalisma+0x5d0>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80052e4:	4b50      	ldr	r3, [pc, #320]	; (8005428 <checkAktifCalisma+0x5ec>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80052ea:	4b50      	ldr	r3, [pc, #320]	; (800542c <checkAktifCalisma+0x5f0>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80052f0:	4b46      	ldr	r3, [pc, #280]	; (800540c <checkAktifCalisma+0x5d0>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d033      	beq.n	8005360 <checkAktifCalisma+0x524>
 80052f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052fc:	483e      	ldr	r0, [pc, #248]	; (80053f8 <checkAktifCalisma+0x5bc>)
 80052fe:	f004 f845 	bl	800938c <HAL_GPIO_ReadPin>
 8005302:	4603      	mov	r3, r0
 8005304:	2b01      	cmp	r3, #1
 8005306:	d106      	bne.n	8005316 <checkAktifCalisma+0x4da>
 8005308:	4b3c      	ldr	r3, [pc, #240]	; (80053fc <checkAktifCalisma+0x5c0>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	f083 0301 	eor.w	r3, r3, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <checkAktifCalisma+0x4f0>
 8005316:	2104      	movs	r1, #4
 8005318:	483a      	ldr	r0, [pc, #232]	; (8005404 <checkAktifCalisma+0x5c8>)
 800531a:	f004 f837 	bl	800938c <HAL_GPIO_ReadPin>
 800531e:	4603      	mov	r3, r0
 8005320:	2b01      	cmp	r3, #1
 8005322:	d11d      	bne.n	8005360 <checkAktifCalisma+0x524>
 8005324:	4b38      	ldr	r3, [pc, #224]	; (8005408 <checkAktifCalisma+0x5cc>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d019      	beq.n	8005360 <checkAktifCalisma+0x524>
 800532c:	4b30      	ldr	r3, [pc, #192]	; (80053f0 <checkAktifCalisma+0x5b4>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d015      	beq.n	8005360 <checkAktifCalisma+0x524>
 8005334:	4b2f      	ldr	r3, [pc, #188]	; (80053f4 <checkAktifCalisma+0x5b8>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d011      	beq.n	8005360 <checkAktifCalisma+0x524>
 800533c:	4b2a      	ldr	r3, [pc, #168]	; (80053e8 <checkAktifCalisma+0x5ac>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <checkAktifCalisma+0x524>
 8005344:	4b3a      	ldr	r3, [pc, #232]	; (8005430 <checkAktifCalisma+0x5f4>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f083 0301 	eor.w	r3, r3, #1
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d006      	beq.n	8005360 <checkAktifCalisma+0x524>
			timer2=millis;
 8005352:	4b38      	ldr	r3, [pc, #224]	; (8005434 <checkAktifCalisma+0x5f8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a38      	ldr	r2, [pc, #224]	; (8005438 <checkAktifCalisma+0x5fc>)
 8005358:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800535a:	4b35      	ldr	r3, [pc, #212]	; (8005430 <checkAktifCalisma+0x5f4>)
 800535c:	2201      	movs	r2, #1
 800535e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005360:	4b34      	ldr	r3, [pc, #208]	; (8005434 <checkAktifCalisma+0x5f8>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4b34      	ldr	r3, [pc, #208]	; (8005438 <checkAktifCalisma+0x5fc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	4a34      	ldr	r2, [pc, #208]	; (800543c <checkAktifCalisma+0x600>)
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	4293      	cmp	r3, r2
 8005370:	d303      	bcc.n	800537a <checkAktifCalisma+0x53e>
 8005372:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <checkAktifCalisma+0x5f4>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d114      	bne.n	80053a4 <checkAktifCalisma+0x568>
 800537a:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <checkAktifCalisma+0x5b4>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	f083 0301 	eor.w	r3, r3, #1
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10d      	bne.n	80053a4 <checkAktifCalisma+0x568>
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <checkAktifCalisma+0x5b8>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	f083 0301 	eor.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <checkAktifCalisma+0x568>
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <checkAktifCalisma+0x5ac>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80053a4:	2200      	movs	r2, #0
 80053a6:	2102      	movs	r1, #2
 80053a8:	4813      	ldr	r0, [pc, #76]	; (80053f8 <checkAktifCalisma+0x5bc>)
 80053aa:	f004 f806 	bl	80093ba <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80053ae:	4b17      	ldr	r3, [pc, #92]	; (800540c <checkAktifCalisma+0x5d0>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80053b4:	4b1e      	ldr	r3, [pc, #120]	; (8005430 <checkAktifCalisma+0x5f4>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <checkAktifCalisma+0x5d0>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d040      	beq.n	8005444 <checkAktifCalisma+0x608>
 80053c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053c6:	480f      	ldr	r0, [pc, #60]	; (8005404 <checkAktifCalisma+0x5c8>)
 80053c8:	f003 ffe0 	bl	800938c <HAL_GPIO_ReadPin>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d138      	bne.n	8005444 <checkAktifCalisma+0x608>
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <checkAktifCalisma+0x604>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d034      	beq.n	8005444 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80053da:	2201      	movs	r2, #1
 80053dc:	2101      	movs	r1, #1
 80053de:	4806      	ldr	r0, [pc, #24]	; (80053f8 <checkAktifCalisma+0x5bc>)
 80053e0:	f003 ffeb 	bl	80093ba <HAL_GPIO_WritePin>
 80053e4:	e033      	b.n	800544e <checkAktifCalisma+0x612>
 80053e6:	bf00      	nop
 80053e8:	2000028b 	.word	0x2000028b
 80053ec:	20000251 	.word	0x20000251
 80053f0:	20000286 	.word	0x20000286
 80053f4:	20000287 	.word	0x20000287
 80053f8:	40010c00 	.word	0x40010c00
 80053fc:	20000271 	.word	0x20000271
 8005400:	20000285 	.word	0x20000285
 8005404:	40011000 	.word	0x40011000
 8005408:	2000023a 	.word	0x2000023a
 800540c:	2000026c 	.word	0x2000026c
 8005410:	20000269 	.word	0x20000269
 8005414:	2000026d 	.word	0x2000026d
 8005418:	2000026a 	.word	0x2000026a
 800541c:	2000026b 	.word	0x2000026b
 8005420:	2000026e 	.word	0x2000026e
 8005424:	2000026f 	.word	0x2000026f
 8005428:	20000274 	.word	0x20000274
 800542c:	20000295 	.word	0x20000295
 8005430:	20000264 	.word	0x20000264
 8005434:	20000210 	.word	0x20000210
 8005438:	2000021c 	.word	0x2000021c
 800543c:	20000249 	.word	0x20000249
 8005440:	20000239 	.word	0x20000239
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005444:	2200      	movs	r2, #0
 8005446:	2101      	movs	r1, #1
 8005448:	4836      	ldr	r0, [pc, #216]	; (8005524 <checkAktifCalisma+0x6e8>)
 800544a:	f003 ffb6 	bl	80093ba <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <checkAktifCalisma+0x6ec>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 8080 	bne.w	8005558 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005458:	4b34      	ldr	r3, [pc, #208]	; (800552c <checkAktifCalisma+0x6f0>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d003      	beq.n	8005468 <checkAktifCalisma+0x62c>
 8005460:	4b32      	ldr	r3, [pc, #200]	; (800552c <checkAktifCalisma+0x6f0>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d177      	bne.n	8005558 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005468:	4b31      	ldr	r3, [pc, #196]	; (8005530 <checkAktifCalisma+0x6f4>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d073      	beq.n	8005558 <checkAktifCalisma+0x71c>
 8005470:	4b30      	ldr	r3, [pc, #192]	; (8005534 <checkAktifCalisma+0x6f8>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d06f      	beq.n	8005558 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800547c:	4829      	ldr	r0, [pc, #164]	; (8005524 <checkAktifCalisma+0x6e8>)
 800547e:	f003 ff85 	bl	800938c <HAL_GPIO_ReadPin>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d167      	bne.n	8005558 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005488:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800548c:	482a      	ldr	r0, [pc, #168]	; (8005538 <checkAktifCalisma+0x6fc>)
 800548e:	f003 ff7d 	bl	800938c <HAL_GPIO_ReadPin>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <checkAktifCalisma+0x664>
 8005498:	4b28      	ldr	r3, [pc, #160]	; (800553c <checkAktifCalisma+0x700>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d15b      	bne.n	8005558 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	4825      	ldr	r0, [pc, #148]	; (8005538 <checkAktifCalisma+0x6fc>)
 80054a4:	f003 ff72 	bl	800938c <HAL_GPIO_ReadPin>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d10f      	bne.n	80054ce <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80054ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054b2:	481c      	ldr	r0, [pc, #112]	; (8005524 <checkAktifCalisma+0x6e8>)
 80054b4:	f003 ff6a 	bl	800938c <HAL_GPIO_ReadPin>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d107      	bne.n	80054ce <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80054be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054c2:	4818      	ldr	r0, [pc, #96]	; (8005524 <checkAktifCalisma+0x6e8>)
 80054c4:	f003 ff62 	bl	800938c <HAL_GPIO_ReadPin>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d003      	beq.n	80054d6 <checkAktifCalisma+0x69a>
 80054ce:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <checkAktifCalisma+0x704>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d040      	beq.n	8005558 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <checkAktifCalisma+0x708>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	f083 0301 	eor.w	r3, r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d039      	beq.n	8005558 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80054e4:	4b18      	ldr	r3, [pc, #96]	; (8005548 <checkAktifCalisma+0x70c>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f083 0301 	eor.w	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d032      	beq.n	8005558 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <checkAktifCalisma+0x710>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	f083 0301 	eor.w	r3, r3, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d02b      	beq.n	8005558 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005500:	4b13      	ldr	r3, [pc, #76]	; (8005550 <checkAktifCalisma+0x714>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f083 0301 	eor.w	r3, r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d024      	beq.n	8005558 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <checkAktifCalisma+0x718>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	f083 0301 	eor.w	r3, r3, #1
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01d      	beq.n	8005558 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800551c:	4b08      	ldr	r3, [pc, #32]	; (8005540 <checkAktifCalisma+0x704>)
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e01c      	b.n	800555e <checkAktifCalisma+0x722>
 8005524:	40010c00 	.word	0x40010c00
 8005528:	20000251 	.word	0x20000251
 800552c:	20000243 	.word	0x20000243
 8005530:	20000286 	.word	0x20000286
 8005534:	20000287 	.word	0x20000287
 8005538:	40011000 	.word	0x40011000
 800553c:	20000244 	.word	0x20000244
 8005540:	2000026a 	.word	0x2000026a
 8005544:	20000269 	.word	0x20000269
 8005548:	2000026d 	.word	0x2000026d
 800554c:	2000026c 	.word	0x2000026c
 8005550:	2000026b 	.word	0x2000026b
 8005554:	2000026f 	.word	0x2000026f
		} else {
			devmotoryukaricalisiyor=0;
 8005558:	4b64      	ldr	r3, [pc, #400]	; (80056ec <checkAktifCalisma+0x8b0>)
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800555e:	4b63      	ldr	r3, [pc, #396]	; (80056ec <checkAktifCalisma+0x8b0>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005566:	2201      	movs	r2, #1
 8005568:	2120      	movs	r1, #32
 800556a:	4861      	ldr	r0, [pc, #388]	; (80056f0 <checkAktifCalisma+0x8b4>)
 800556c:	f003 ff25 	bl	80093ba <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005570:	4b60      	ldr	r3, [pc, #384]	; (80056f4 <checkAktifCalisma+0x8b8>)
 8005572:	2201      	movs	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005576:	4b5f      	ldr	r3, [pc, #380]	; (80056f4 <checkAktifCalisma+0x8b8>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d025      	beq.n	80055ca <checkAktifCalisma+0x78e>
 800557e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005582:	485d      	ldr	r0, [pc, #372]	; (80056f8 <checkAktifCalisma+0x8bc>)
 8005584:	f003 ff02 	bl	800938c <HAL_GPIO_ReadPin>
 8005588:	4603      	mov	r3, r0
 800558a:	2b01      	cmp	r3, #1
 800558c:	d007      	beq.n	800559e <checkAktifCalisma+0x762>
 800558e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005592:	4857      	ldr	r0, [pc, #348]	; (80056f0 <checkAktifCalisma+0x8b4>)
 8005594:	f003 fefa 	bl	800938c <HAL_GPIO_ReadPin>
 8005598:	4603      	mov	r3, r0
 800559a:	2b01      	cmp	r3, #1
 800559c:	d115      	bne.n	80055ca <checkAktifCalisma+0x78e>
 800559e:	4b57      	ldr	r3, [pc, #348]	; (80056fc <checkAktifCalisma+0x8c0>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d011      	beq.n	80055ca <checkAktifCalisma+0x78e>
 80055a6:	4b56      	ldr	r3, [pc, #344]	; (8005700 <checkAktifCalisma+0x8c4>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <checkAktifCalisma+0x78e>
 80055ae:	4b55      	ldr	r3, [pc, #340]	; (8005704 <checkAktifCalisma+0x8c8>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f083 0301 	eor.w	r3, r3, #1
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d006      	beq.n	80055ca <checkAktifCalisma+0x78e>
			timer2=millis;
 80055bc:	4b52      	ldr	r3, [pc, #328]	; (8005708 <checkAktifCalisma+0x8cc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a52      	ldr	r2, [pc, #328]	; (800570c <checkAktifCalisma+0x8d0>)
 80055c2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80055c4:	4b4f      	ldr	r3, [pc, #316]	; (8005704 <checkAktifCalisma+0x8c8>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055ca:	4b4f      	ldr	r3, [pc, #316]	; (8005708 <checkAktifCalisma+0x8cc>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b4f      	ldr	r3, [pc, #316]	; (800570c <checkAktifCalisma+0x8d0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	4a4e      	ldr	r2, [pc, #312]	; (8005710 <checkAktifCalisma+0x8d4>)
 80055d6:	7812      	ldrb	r2, [r2, #0]
 80055d8:	4293      	cmp	r3, r2
 80055da:	d303      	bcc.n	80055e4 <checkAktifCalisma+0x7a8>
 80055dc:	4b49      	ldr	r3, [pc, #292]	; (8005704 <checkAktifCalisma+0x8c8>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10d      	bne.n	8005600 <checkAktifCalisma+0x7c4>
 80055e4:	4b45      	ldr	r3, [pc, #276]	; (80056fc <checkAktifCalisma+0x8c0>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f083 0301 	eor.w	r3, r3, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <checkAktifCalisma+0x7c4>
 80055f2:	4b43      	ldr	r3, [pc, #268]	; (8005700 <checkAktifCalisma+0x8c4>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f083 0301 	eor.w	r3, r3, #1
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005600:	2200      	movs	r2, #0
 8005602:	2120      	movs	r1, #32
 8005604:	483a      	ldr	r0, [pc, #232]	; (80056f0 <checkAktifCalisma+0x8b4>)
 8005606:	f003 fed8 	bl	80093ba <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800560a:	4b3a      	ldr	r3, [pc, #232]	; (80056f4 <checkAktifCalisma+0x8b8>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005610:	4b3c      	ldr	r3, [pc, #240]	; (8005704 <checkAktifCalisma+0x8c8>)
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005616:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <checkAktifCalisma+0x8d8>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f040 8088 	bne.w	8005730 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005620:	4b3d      	ldr	r3, [pc, #244]	; (8005718 <checkAktifCalisma+0x8dc>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d003      	beq.n	8005630 <checkAktifCalisma+0x7f4>
 8005628:	4b3b      	ldr	r3, [pc, #236]	; (8005718 <checkAktifCalisma+0x8dc>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d17f      	bne.n	8005730 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005630:	4b32      	ldr	r3, [pc, #200]	; (80056fc <checkAktifCalisma+0x8c0>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d07b      	beq.n	8005730 <checkAktifCalisma+0x8f4>
 8005638:	4b31      	ldr	r3, [pc, #196]	; (8005700 <checkAktifCalisma+0x8c4>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d077      	beq.n	8005730 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005640:	2140      	movs	r1, #64	; 0x40
 8005642:	482b      	ldr	r0, [pc, #172]	; (80056f0 <checkAktifCalisma+0x8b4>)
 8005644:	f003 fea2 	bl	800938c <HAL_GPIO_ReadPin>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d170      	bne.n	8005730 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800564e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005652:	4827      	ldr	r0, [pc, #156]	; (80056f0 <checkAktifCalisma+0x8b4>)
 8005654:	f003 fe9a 	bl	800938c <HAL_GPIO_ReadPin>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <checkAktifCalisma+0x82a>
 800565e:	4b2f      	ldr	r3, [pc, #188]	; (800571c <checkAktifCalisma+0x8e0>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d164      	bne.n	8005730 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800566a:	4823      	ldr	r0, [pc, #140]	; (80056f8 <checkAktifCalisma+0x8bc>)
 800566c:	f003 fe8e 	bl	800938c <HAL_GPIO_ReadPin>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d10f      	bne.n	8005696 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800567a:	481f      	ldr	r0, [pc, #124]	; (80056f8 <checkAktifCalisma+0x8bc>)
 800567c:	f003 fe86 	bl	800938c <HAL_GPIO_ReadPin>
 8005680:	4603      	mov	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800568a:	481b      	ldr	r0, [pc, #108]	; (80056f8 <checkAktifCalisma+0x8bc>)
 800568c:	f003 fe7e 	bl	800938c <HAL_GPIO_ReadPin>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d003      	beq.n	800569e <checkAktifCalisma+0x862>
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <checkAktifCalisma+0x8e4>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d048      	beq.n	8005730 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800569e:	4b21      	ldr	r3, [pc, #132]	; (8005724 <checkAktifCalisma+0x8e8>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	f083 0301 	eor.w	r3, r3, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d041      	beq.n	8005730 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <checkAktifCalisma+0x8ec>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	f083 0301 	eor.w	r3, r3, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d03a      	beq.n	8005730 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80056ba:	4b1c      	ldr	r3, [pc, #112]	; (800572c <checkAktifCalisma+0x8f0>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	f083 0301 	eor.w	r3, r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d033      	beq.n	8005730 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <checkAktifCalisma+0x8b8>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f083 0301 	eor.w	r3, r3, #1
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d02c      	beq.n	8005730 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80056d6:	4b05      	ldr	r3, [pc, #20]	; (80056ec <checkAktifCalisma+0x8b0>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f083 0301 	eor.w	r3, r3, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d025      	beq.n	8005730 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80056e4:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <checkAktifCalisma+0x8e4>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e024      	b.n	8005736 <checkAktifCalisma+0x8fa>
 80056ec:	2000026a 	.word	0x2000026a
 80056f0:	40011000 	.word	0x40011000
 80056f4:	2000026e 	.word	0x2000026e
 80056f8:	40010c00 	.word	0x40010c00
 80056fc:	20000286 	.word	0x20000286
 8005700:	20000287 	.word	0x20000287
 8005704:	20000266 	.word	0x20000266
 8005708:	20000210 	.word	0x20000210
 800570c:	2000021c 	.word	0x2000021c
 8005710:	2000024a 	.word	0x2000024a
 8005714:	20000251 	.word	0x20000251
 8005718:	20000243 	.word	0x20000243
 800571c:	20000245 	.word	0x20000245
 8005720:	2000026b 	.word	0x2000026b
 8005724:	20000269 	.word	0x20000269
 8005728:	2000026d 	.word	0x2000026d
 800572c:	2000026c 	.word	0x2000026c
		} else {
			devmotorasagicalisiyor=0;
 8005730:	4b96      	ldr	r3, [pc, #600]	; (800598c <checkAktifCalisma+0xb50>)
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005736:	4b95      	ldr	r3, [pc, #596]	; (800598c <checkAktifCalisma+0xb50>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800573e:	2201      	movs	r2, #1
 8005740:	2110      	movs	r1, #16
 8005742:	4893      	ldr	r0, [pc, #588]	; (8005990 <checkAktifCalisma+0xb54>)
 8005744:	f003 fe39 	bl	80093ba <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005748:	4b92      	ldr	r3, [pc, #584]	; (8005994 <checkAktifCalisma+0xb58>)
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800574e:	4b91      	ldr	r3, [pc, #580]	; (8005994 <checkAktifCalisma+0xb58>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d024      	beq.n	80057a0 <checkAktifCalisma+0x964>
 8005756:	2140      	movs	r1, #64	; 0x40
 8005758:	488d      	ldr	r0, [pc, #564]	; (8005990 <checkAktifCalisma+0xb54>)
 800575a:	f003 fe17 	bl	800938c <HAL_GPIO_ReadPin>
 800575e:	4603      	mov	r3, r0
 8005760:	2b01      	cmp	r3, #1
 8005762:	d007      	beq.n	8005774 <checkAktifCalisma+0x938>
 8005764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005768:	4889      	ldr	r0, [pc, #548]	; (8005990 <checkAktifCalisma+0xb54>)
 800576a:	f003 fe0f 	bl	800938c <HAL_GPIO_ReadPin>
 800576e:	4603      	mov	r3, r0
 8005770:	2b01      	cmp	r3, #1
 8005772:	d115      	bne.n	80057a0 <checkAktifCalisma+0x964>
 8005774:	4b88      	ldr	r3, [pc, #544]	; (8005998 <checkAktifCalisma+0xb5c>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d011      	beq.n	80057a0 <checkAktifCalisma+0x964>
 800577c:	4b87      	ldr	r3, [pc, #540]	; (800599c <checkAktifCalisma+0xb60>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00d      	beq.n	80057a0 <checkAktifCalisma+0x964>
 8005784:	4b86      	ldr	r3, [pc, #536]	; (80059a0 <checkAktifCalisma+0xb64>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f083 0301 	eor.w	r3, r3, #1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d006      	beq.n	80057a0 <checkAktifCalisma+0x964>
			timer2=millis;
 8005792:	4b84      	ldr	r3, [pc, #528]	; (80059a4 <checkAktifCalisma+0xb68>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a84      	ldr	r2, [pc, #528]	; (80059a8 <checkAktifCalisma+0xb6c>)
 8005798:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800579a:	4b81      	ldr	r3, [pc, #516]	; (80059a0 <checkAktifCalisma+0xb64>)
 800579c:	2201      	movs	r2, #1
 800579e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80057a0:	4b80      	ldr	r3, [pc, #512]	; (80059a4 <checkAktifCalisma+0xb68>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	4b80      	ldr	r3, [pc, #512]	; (80059a8 <checkAktifCalisma+0xb6c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	4a80      	ldr	r2, [pc, #512]	; (80059ac <checkAktifCalisma+0xb70>)
 80057ac:	7812      	ldrb	r2, [r2, #0]
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d303      	bcc.n	80057ba <checkAktifCalisma+0x97e>
 80057b2:	4b7b      	ldr	r3, [pc, #492]	; (80059a0 <checkAktifCalisma+0xb64>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10d      	bne.n	80057d6 <checkAktifCalisma+0x99a>
 80057ba:	4b77      	ldr	r3, [pc, #476]	; (8005998 <checkAktifCalisma+0xb5c>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	f083 0301 	eor.w	r3, r3, #1
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <checkAktifCalisma+0x99a>
 80057c8:	4b74      	ldr	r3, [pc, #464]	; (800599c <checkAktifCalisma+0xb60>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f083 0301 	eor.w	r3, r3, #1
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80057d6:	2200      	movs	r2, #0
 80057d8:	2110      	movs	r1, #16
 80057da:	486d      	ldr	r0, [pc, #436]	; (8005990 <checkAktifCalisma+0xb54>)
 80057dc:	f003 fded 	bl	80093ba <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80057e0:	4b6c      	ldr	r3, [pc, #432]	; (8005994 <checkAktifCalisma+0xb58>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80057e6:	4b6e      	ldr	r3, [pc, #440]	; (80059a0 <checkAktifCalisma+0xb64>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80057ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057f0:	486f      	ldr	r0, [pc, #444]	; (80059b0 <checkAktifCalisma+0xb74>)
 80057f2:	f003 fdcb 	bl	800938c <HAL_GPIO_ReadPin>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d120      	bne.n	800583e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80057fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005800:	486b      	ldr	r0, [pc, #428]	; (80059b0 <checkAktifCalisma+0xb74>)
 8005802:	f003 fdc3 	bl	800938c <HAL_GPIO_ReadPin>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d118      	bne.n	800583e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800580c:	2104      	movs	r1, #4
 800580e:	4868      	ldr	r0, [pc, #416]	; (80059b0 <checkAktifCalisma+0xb74>)
 8005810:	f003 fdbc 	bl	800938c <HAL_GPIO_ReadPin>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d111      	bne.n	800583e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800581a:	2102      	movs	r1, #2
 800581c:	4864      	ldr	r0, [pc, #400]	; (80059b0 <checkAktifCalisma+0xb74>)
 800581e:	f003 fdb5 	bl	800938c <HAL_GPIO_ReadPin>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005828:	2101      	movs	r1, #1
 800582a:	4861      	ldr	r0, [pc, #388]	; (80059b0 <checkAktifCalisma+0xb74>)
 800582c:	f003 fdae 	bl	800938c <HAL_GPIO_ReadPin>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d103      	bne.n	800583e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005836:	4b5f      	ldr	r3, [pc, #380]	; (80059b4 <checkAktifCalisma+0xb78>)
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e002      	b.n	8005844 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800583e:	4b5d      	ldr	r3, [pc, #372]	; (80059b4 <checkAktifCalisma+0xb78>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005844:	4b5c      	ldr	r3, [pc, #368]	; (80059b8 <checkAktifCalisma+0xb7c>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d144      	bne.n	80058d6 <checkAktifCalisma+0xa9a>
 800584c:	4b5b      	ldr	r3, [pc, #364]	; (80059bc <checkAktifCalisma+0xb80>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d003      	beq.n	800585c <checkAktifCalisma+0xa20>
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <checkAktifCalisma+0xb80>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d13c      	bne.n	80058d6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800585c:	2180      	movs	r1, #128	; 0x80
 800585e:	484c      	ldr	r0, [pc, #304]	; (8005990 <checkAktifCalisma+0xb54>)
 8005860:	f003 fd94 	bl	800938c <HAL_GPIO_ReadPin>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <checkAktifCalisma+0xa36>
 800586a:	4b55      	ldr	r3, [pc, #340]	; (80059c0 <checkAktifCalisma+0xb84>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <checkAktifCalisma+0xa4e>
 8005872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005876:	484e      	ldr	r0, [pc, #312]	; (80059b0 <checkAktifCalisma+0xb74>)
 8005878:	f003 fd88 	bl	800938c <HAL_GPIO_ReadPin>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d129      	bne.n	80058d6 <checkAktifCalisma+0xa9a>
 8005882:	4b4f      	ldr	r3, [pc, #316]	; (80059c0 <checkAktifCalisma+0xb84>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d125      	bne.n	80058d6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800588a:	2104      	movs	r1, #4
 800588c:	4840      	ldr	r0, [pc, #256]	; (8005990 <checkAktifCalisma+0xb54>)
 800588e:	f003 fd7d 	bl	800938c <HAL_GPIO_ReadPin>
 8005892:	4603      	mov	r3, r0
 8005894:	2b01      	cmp	r3, #1
 8005896:	d003      	beq.n	80058a0 <checkAktifCalisma+0xa64>
 8005898:	4b4a      	ldr	r3, [pc, #296]	; (80059c4 <checkAktifCalisma+0xb88>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11a      	bne.n	80058d6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058a0:	2102      	movs	r1, #2
 80058a2:	483b      	ldr	r0, [pc, #236]	; (8005990 <checkAktifCalisma+0xb54>)
 80058a4:	f003 fd72 	bl	800938c <HAL_GPIO_ReadPin>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d113      	bne.n	80058d6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80058ae:	4b46      	ldr	r3, [pc, #280]	; (80059c8 <checkAktifCalisma+0xb8c>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f083 0301 	eor.w	r3, r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00c      	beq.n	80058d6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80058bc:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <checkAktifCalisma+0xb78>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80058c4:	4b41      	ldr	r3, [pc, #260]	; (80059cc <checkAktifCalisma+0xb90>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058ca:	4b36      	ldr	r3, [pc, #216]	; (80059a4 <checkAktifCalisma+0xb68>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a40      	ldr	r2, [pc, #256]	; (80059d0 <checkAktifCalisma+0xb94>)
 80058d0:	6013      	str	r3, [r2, #0]
			bekle();
 80058d2:	f7ff f935 	bl	8004b40 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80058d6:	4b33      	ldr	r3, [pc, #204]	; (80059a4 <checkAktifCalisma+0xb68>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b3d      	ldr	r3, [pc, #244]	; (80059d0 <checkAktifCalisma+0xb94>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	4a3c      	ldr	r2, [pc, #240]	; (80059d4 <checkAktifCalisma+0xb98>)
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d211      	bcs.n	800590c <checkAktifCalisma+0xad0>
 80058e8:	2104      	movs	r1, #4
 80058ea:	4829      	ldr	r0, [pc, #164]	; (8005990 <checkAktifCalisma+0xb54>)
 80058ec:	f003 fd4e 	bl	800938c <HAL_GPIO_ReadPin>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <checkAktifCalisma+0xad0>
 80058f6:	4b33      	ldr	r3, [pc, #204]	; (80059c4 <checkAktifCalisma+0xb88>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <checkAktifCalisma+0xad0>
 80058fe:	4b2d      	ldr	r3, [pc, #180]	; (80059b4 <checkAktifCalisma+0xb78>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f083 0301 	eor.w	r3, r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800590c:	4b2f      	ldr	r3, [pc, #188]	; (80059cc <checkAktifCalisma+0xb90>)
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005912:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <checkAktifCalisma+0xb7c>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d160      	bne.n	80059dc <checkAktifCalisma+0xba0>
 800591a:	4b28      	ldr	r3, [pc, #160]	; (80059bc <checkAktifCalisma+0xb80>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d003      	beq.n	800592a <checkAktifCalisma+0xaee>
 8005922:	4b26      	ldr	r3, [pc, #152]	; (80059bc <checkAktifCalisma+0xb80>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d158      	bne.n	80059dc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800592a:	2104      	movs	r1, #4
 800592c:	4818      	ldr	r0, [pc, #96]	; (8005990 <checkAktifCalisma+0xb54>)
 800592e:	f003 fd2d 	bl	800938c <HAL_GPIO_ReadPin>
 8005932:	4603      	mov	r3, r0
 8005934:	2b01      	cmp	r3, #1
 8005936:	d003      	beq.n	8005940 <checkAktifCalisma+0xb04>
 8005938:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <checkAktifCalisma+0xb88>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d14d      	bne.n	80059dc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005940:	2102      	movs	r1, #2
 8005942:	4813      	ldr	r0, [pc, #76]	; (8005990 <checkAktifCalisma+0xb54>)
 8005944:	f003 fd22 	bl	800938c <HAL_GPIO_ReadPin>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d146      	bne.n	80059dc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	480f      	ldr	r0, [pc, #60]	; (8005990 <checkAktifCalisma+0xb54>)
 8005952:	f003 fd1b 	bl	800938c <HAL_GPIO_ReadPin>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <checkAktifCalisma+0xb28>
 800595c:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <checkAktifCalisma+0xb84>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <checkAktifCalisma+0xb40>
 8005964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005968:	4811      	ldr	r0, [pc, #68]	; (80059b0 <checkAktifCalisma+0xb74>)
 800596a:	f003 fd0f 	bl	800938c <HAL_GPIO_ReadPin>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d133      	bne.n	80059dc <checkAktifCalisma+0xba0>
 8005974:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <checkAktifCalisma+0xb84>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d12f      	bne.n	80059dc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800597c:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <checkAktifCalisma+0xb78>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d02b      	beq.n	80059dc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <checkAktifCalisma+0xb9c>)
 8005986:	2201      	movs	r2, #1
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	e02a      	b.n	80059e2 <checkAktifCalisma+0xba6>
 800598c:	2000026b 	.word	0x2000026b
 8005990:	40011000 	.word	0x40011000
 8005994:	2000026f 	.word	0x2000026f
 8005998:	20000286 	.word	0x20000286
 800599c:	20000287 	.word	0x20000287
 80059a0:	20000267 	.word	0x20000267
 80059a4:	20000210 	.word	0x20000210
 80059a8:	2000021c 	.word	0x2000021c
 80059ac:	2000024a 	.word	0x2000024a
 80059b0:	40010c00 	.word	0x40010c00
 80059b4:	20000276 	.word	0x20000276
 80059b8:	2000023d 	.word	0x2000023d
 80059bc:	2000023c 	.word	0x2000023c
 80059c0:	20000240 	.word	0x20000240
 80059c4:	2000023a 	.word	0x2000023a
 80059c8:	20000263 	.word	0x20000263
 80059cc:	20000277 	.word	0x20000277
 80059d0:	20000214 	.word	0x20000214
 80059d4:	2000024d 	.word	0x2000024d
 80059d8:	20000278 	.word	0x20000278
		} else {
			kapi1butonkontrol=0;
 80059dc:	4b8b      	ldr	r3, [pc, #556]	; (8005c0c <checkAktifCalisma+0xdd0>)
 80059de:	2200      	movs	r2, #0
 80059e0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059e2:	4b8b      	ldr	r3, [pc, #556]	; (8005c10 <checkAktifCalisma+0xdd4>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d121      	bne.n	8005a2e <checkAktifCalisma+0xbf2>
 80059ea:	4b8a      	ldr	r3, [pc, #552]	; (8005c14 <checkAktifCalisma+0xdd8>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d003      	beq.n	80059fa <checkAktifCalisma+0xbbe>
 80059f2:	4b88      	ldr	r3, [pc, #544]	; (8005c14 <checkAktifCalisma+0xdd8>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d119      	bne.n	8005a2e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059fa:	2104      	movs	r1, #4
 80059fc:	4886      	ldr	r0, [pc, #536]	; (8005c18 <checkAktifCalisma+0xddc>)
 80059fe:	f003 fcc5 	bl	800938c <HAL_GPIO_ReadPin>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d003      	beq.n	8005a10 <checkAktifCalisma+0xbd4>
 8005a08:	4b84      	ldr	r3, [pc, #528]	; (8005c1c <checkAktifCalisma+0xde0>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10e      	bne.n	8005a2e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a10:	2102      	movs	r1, #2
 8005a12:	4881      	ldr	r0, [pc, #516]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005a14:	f003 fcba 	bl	800938c <HAL_GPIO_ReadPin>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d107      	bne.n	8005a2e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005a1e:	4b80      	ldr	r3, [pc, #512]	; (8005c20 <checkAktifCalisma+0xde4>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005a26:	4b7f      	ldr	r3, [pc, #508]	; (8005c24 <checkAktifCalisma+0xde8>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	e002      	b.n	8005a34 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005a2e:	4b7d      	ldr	r3, [pc, #500]	; (8005c24 <checkAktifCalisma+0xde8>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005a34:	4b75      	ldr	r3, [pc, #468]	; (8005c0c <checkAktifCalisma+0xdd0>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d107      	bne.n	8005a4c <checkAktifCalisma+0xc10>
 8005a3c:	4b79      	ldr	r3, [pc, #484]	; (8005c24 <checkAktifCalisma+0xde8>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <checkAktifCalisma+0xc10>
 8005a44:	4b78      	ldr	r3, [pc, #480]	; (8005c28 <checkAktifCalisma+0xdec>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	4876      	ldr	r0, [pc, #472]	; (8005c2c <checkAktifCalisma+0xdf0>)
 8005a52:	f003 fcb2 	bl	80093ba <HAL_GPIO_WritePin>
 8005a56:	e004      	b.n	8005a62 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2180      	movs	r1, #128	; 0x80
 8005a5c:	4873      	ldr	r0, [pc, #460]	; (8005c2c <checkAktifCalisma+0xdf0>)
 8005a5e:	f003 fcac 	bl	80093ba <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a62:	4b73      	ldr	r3, [pc, #460]	; (8005c30 <checkAktifCalisma+0xdf4>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d141      	bne.n	8005aee <checkAktifCalisma+0xcb2>
 8005a6a:	4b6a      	ldr	r3, [pc, #424]	; (8005c14 <checkAktifCalisma+0xdd8>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d003      	beq.n	8005a7a <checkAktifCalisma+0xc3e>
 8005a72:	4b68      	ldr	r3, [pc, #416]	; (8005c14 <checkAktifCalisma+0xdd8>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d139      	bne.n	8005aee <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a7e:	4866      	ldr	r0, [pc, #408]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005a80:	f003 fc84 	bl	800938c <HAL_GPIO_ReadPin>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <checkAktifCalisma+0xc56>
 8005a8a:	4b6a      	ldr	r3, [pc, #424]	; (8005c34 <checkAktifCalisma+0xdf8>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <checkAktifCalisma+0xc6e>
 8005a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a96:	4868      	ldr	r0, [pc, #416]	; (8005c38 <checkAktifCalisma+0xdfc>)
 8005a98:	f003 fc78 	bl	800938c <HAL_GPIO_ReadPin>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d125      	bne.n	8005aee <checkAktifCalisma+0xcb2>
 8005aa2:	4b64      	ldr	r3, [pc, #400]	; (8005c34 <checkAktifCalisma+0xdf8>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d121      	bne.n	8005aee <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005aaa:	2102      	movs	r1, #2
 8005aac:	485a      	ldr	r0, [pc, #360]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005aae:	f003 fc6d 	bl	800938c <HAL_GPIO_ReadPin>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d11a      	bne.n	8005aee <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ab8:	2104      	movs	r1, #4
 8005aba:	4857      	ldr	r0, [pc, #348]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005abc:	f003 fc66 	bl	800938c <HAL_GPIO_ReadPin>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d113      	bne.n	8005aee <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005ac6:	4b56      	ldr	r3, [pc, #344]	; (8005c20 <checkAktifCalisma+0xde4>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005ace:	4b5b      	ldr	r3, [pc, #364]	; (8005c3c <checkAktifCalisma+0xe00>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f083 0301 	eor.w	r3, r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005adc:	4b58      	ldr	r3, [pc, #352]	; (8005c40 <checkAktifCalisma+0xe04>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005ae2:	4b58      	ldr	r3, [pc, #352]	; (8005c44 <checkAktifCalisma+0xe08>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a58      	ldr	r2, [pc, #352]	; (8005c48 <checkAktifCalisma+0xe0c>)
 8005ae8:	6013      	str	r3, [r2, #0]
			bekle();
 8005aea:	f7ff f829 	bl	8004b40 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005aee:	4b55      	ldr	r3, [pc, #340]	; (8005c44 <checkAktifCalisma+0xe08>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b55      	ldr	r3, [pc, #340]	; (8005c48 <checkAktifCalisma+0xe0c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	4a54      	ldr	r2, [pc, #336]	; (8005c4c <checkAktifCalisma+0xe10>)
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d20d      	bcs.n	8005b1c <checkAktifCalisma+0xce0>
 8005b00:	2102      	movs	r1, #2
 8005b02:	4845      	ldr	r0, [pc, #276]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005b04:	f003 fc42 	bl	800938c <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d006      	beq.n	8005b1c <checkAktifCalisma+0xce0>
 8005b0e:	4b44      	ldr	r3, [pc, #272]	; (8005c20 <checkAktifCalisma+0xde4>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f083 0301 	eor.w	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005b1c:	4b48      	ldr	r3, [pc, #288]	; (8005c40 <checkAktifCalisma+0xe04>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b22:	4b43      	ldr	r3, [pc, #268]	; (8005c30 <checkAktifCalisma+0xdf4>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d135      	bne.n	8005b96 <checkAktifCalisma+0xd5a>
 8005b2a:	4b3a      	ldr	r3, [pc, #232]	; (8005c14 <checkAktifCalisma+0xdd8>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d003      	beq.n	8005b3a <checkAktifCalisma+0xcfe>
 8005b32:	4b38      	ldr	r3, [pc, #224]	; (8005c14 <checkAktifCalisma+0xdd8>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d12d      	bne.n	8005b96 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b3e:	4836      	ldr	r0, [pc, #216]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005b40:	f003 fc24 	bl	800938c <HAL_GPIO_ReadPin>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <checkAktifCalisma+0xd16>
 8005b4a:	4b3a      	ldr	r3, [pc, #232]	; (8005c34 <checkAktifCalisma+0xdf8>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00b      	beq.n	8005b6a <checkAktifCalisma+0xd2e>
 8005b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b56:	4838      	ldr	r0, [pc, #224]	; (8005c38 <checkAktifCalisma+0xdfc>)
 8005b58:	f003 fc18 	bl	800938c <HAL_GPIO_ReadPin>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d119      	bne.n	8005b96 <checkAktifCalisma+0xd5a>
 8005b62:	4b34      	ldr	r3, [pc, #208]	; (8005c34 <checkAktifCalisma+0xdf8>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d115      	bne.n	8005b96 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	482a      	ldr	r0, [pc, #168]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005b6e:	f003 fc0d 	bl	800938c <HAL_GPIO_ReadPin>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10e      	bne.n	8005b96 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b78:	2104      	movs	r1, #4
 8005b7a:	4827      	ldr	r0, [pc, #156]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005b7c:	f003 fc06 	bl	800938c <HAL_GPIO_ReadPin>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d107      	bne.n	8005b96 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b86:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <checkAktifCalisma+0xde4>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b8e:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <checkAktifCalisma+0xe14>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	e002      	b.n	8005b9c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b96:	4b2e      	ldr	r3, [pc, #184]	; (8005c50 <checkAktifCalisma+0xe14>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b9c:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <checkAktifCalisma+0xdf4>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d11d      	bne.n	8005be0 <checkAktifCalisma+0xda4>
 8005ba4:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <checkAktifCalisma+0xdd8>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d003      	beq.n	8005bb4 <checkAktifCalisma+0xd78>
 8005bac:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <checkAktifCalisma+0xdd8>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d115      	bne.n	8005be0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	4818      	ldr	r0, [pc, #96]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005bb8:	f003 fbe8 	bl	800938c <HAL_GPIO_ReadPin>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10e      	bne.n	8005be0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bc2:	2104      	movs	r1, #4
 8005bc4:	4814      	ldr	r0, [pc, #80]	; (8005c18 <checkAktifCalisma+0xddc>)
 8005bc6:	f003 fbe1 	bl	800938c <HAL_GPIO_ReadPin>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <checkAktifCalisma+0xde4>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <checkAktifCalisma+0xe18>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	e002      	b.n	8005be6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005be0:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <checkAktifCalisma+0xe18>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <checkAktifCalisma+0xe14>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <checkAktifCalisma+0xdc2>
 8005bee:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <checkAktifCalisma+0xe18>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d103      	bne.n	8005bfe <checkAktifCalisma+0xdc2>
 8005bf6:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <checkAktifCalisma+0xe04>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d02c      	beq.n	8005c58 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005bfe:	2201      	movs	r2, #1
 8005c00:	2140      	movs	r1, #64	; 0x40
 8005c02:	480a      	ldr	r0, [pc, #40]	; (8005c2c <checkAktifCalisma+0xdf0>)
 8005c04:	f003 fbd9 	bl	80093ba <HAL_GPIO_WritePin>
 8005c08:	e02b      	b.n	8005c62 <checkAktifCalisma+0xe26>
 8005c0a:	bf00      	nop
 8005c0c:	20000278 	.word	0x20000278
 8005c10:	2000023d 	.word	0x2000023d
 8005c14:	2000023c 	.word	0x2000023c
 8005c18:	40011000 	.word	0x40011000
 8005c1c:	2000023a 	.word	0x2000023a
 8005c20:	20000276 	.word	0x20000276
 8005c24:	20000279 	.word	0x20000279
 8005c28:	20000277 	.word	0x20000277
 8005c2c:	40010800 	.word	0x40010800
 8005c30:	2000023e 	.word	0x2000023e
 8005c34:	20000240 	.word	0x20000240
 8005c38:	40010c00 	.word	0x40010c00
 8005c3c:	20000263 	.word	0x20000263
 8005c40:	2000027a 	.word	0x2000027a
 8005c44:	20000210 	.word	0x20000210
 8005c48:	20000214 	.word	0x20000214
 8005c4c:	2000024e 	.word	0x2000024e
 8005c50:	2000027b 	.word	0x2000027b
 8005c54:	2000027c 	.word	0x2000027c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2140      	movs	r1, #64	; 0x40
 8005c5c:	488d      	ldr	r0, [pc, #564]	; (8005e94 <checkAktifCalisma+0x1058>)
 8005c5e:	f003 fbac 	bl	80093ba <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005c62:	4b8d      	ldr	r3, [pc, #564]	; (8005e98 <checkAktifCalisma+0x105c>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <checkAktifCalisma+0xe36>
 8005c6a:	4b8b      	ldr	r3, [pc, #556]	; (8005e98 <checkAktifCalisma+0x105c>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d115      	bne.n	8005c9e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c72:	2104      	movs	r1, #4
 8005c74:	4889      	ldr	r0, [pc, #548]	; (8005e9c <checkAktifCalisma+0x1060>)
 8005c76:	f003 fb89 	bl	800938c <HAL_GPIO_ReadPin>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d003      	beq.n	8005c88 <checkAktifCalisma+0xe4c>
 8005c80:	4b87      	ldr	r3, [pc, #540]	; (8005ea0 <checkAktifCalisma+0x1064>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c88:	2102      	movs	r1, #2
 8005c8a:	4884      	ldr	r0, [pc, #528]	; (8005e9c <checkAktifCalisma+0x1060>)
 8005c8c:	f003 fb7e 	bl	800938c <HAL_GPIO_ReadPin>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c96:	4b83      	ldr	r3, [pc, #524]	; (8005ea4 <checkAktifCalisma+0x1068>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e002      	b.n	8005ca4 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c9e:	4b81      	ldr	r3, [pc, #516]	; (8005ea4 <checkAktifCalisma+0x1068>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005ca4:	4b7c      	ldr	r3, [pc, #496]	; (8005e98 <checkAktifCalisma+0x105c>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d003      	beq.n	8005cb4 <checkAktifCalisma+0xe78>
 8005cac:	4b7a      	ldr	r3, [pc, #488]	; (8005e98 <checkAktifCalisma+0x105c>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d111      	bne.n	8005cd8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4879      	ldr	r0, [pc, #484]	; (8005e9c <checkAktifCalisma+0x1060>)
 8005cb8:	f003 fb68 	bl	800938c <HAL_GPIO_ReadPin>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10a      	bne.n	8005cd8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005cc2:	2104      	movs	r1, #4
 8005cc4:	4875      	ldr	r0, [pc, #468]	; (8005e9c <checkAktifCalisma+0x1060>)
 8005cc6:	f003 fb61 	bl	800938c <HAL_GPIO_ReadPin>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005cd0:	4b75      	ldr	r3, [pc, #468]	; (8005ea8 <checkAktifCalisma+0x106c>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e002      	b.n	8005cde <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005cd8:	4b73      	ldr	r3, [pc, #460]	; (8005ea8 <checkAktifCalisma+0x106c>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005cde:	4b71      	ldr	r3, [pc, #452]	; (8005ea4 <checkAktifCalisma+0x1068>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00f      	beq.n	8005d06 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005ce6:	4b71      	ldr	r3, [pc, #452]	; (8005eac <checkAktifCalisma+0x1070>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d10b      	bne.n	8005d06 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cf2:	486f      	ldr	r0, [pc, #444]	; (8005eb0 <checkAktifCalisma+0x1074>)
 8005cf4:	f003 fb4a 	bl	800938c <HAL_GPIO_ReadPin>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005cfe:	4b6d      	ldr	r3, [pc, #436]	; (8005eb4 <checkAktifCalisma+0x1078>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e002      	b.n	8005d0c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005d06:	4b6b      	ldr	r3, [pc, #428]	; (8005eb4 <checkAktifCalisma+0x1078>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005d0c:	4b66      	ldr	r3, [pc, #408]	; (8005ea8 <checkAktifCalisma+0x106c>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00f      	beq.n	8005d34 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005d14:	4b65      	ldr	r3, [pc, #404]	; (8005eac <checkAktifCalisma+0x1070>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10b      	bne.n	8005d34 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d20:	4863      	ldr	r0, [pc, #396]	; (8005eb0 <checkAktifCalisma+0x1074>)
 8005d22:	f003 fb33 	bl	800938c <HAL_GPIO_ReadPin>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005d2c:	4b62      	ldr	r3, [pc, #392]	; (8005eb8 <checkAktifCalisma+0x107c>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005d34:	4b60      	ldr	r3, [pc, #384]	; (8005eb8 <checkAktifCalisma+0x107c>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d3a:	4b60      	ldr	r3, [pc, #384]	; (8005ebc <checkAktifCalisma+0x1080>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d137      	bne.n	8005db2 <checkAktifCalisma+0xf76>
 8005d42:	4b5f      	ldr	r3, [pc, #380]	; (8005ec0 <checkAktifCalisma+0x1084>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d003      	beq.n	8005d52 <checkAktifCalisma+0xf16>
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	; (8005ec0 <checkAktifCalisma+0x1084>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d12f      	bne.n	8005db2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d52:	4b54      	ldr	r3, [pc, #336]	; (8005ea4 <checkAktifCalisma+0x1068>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <checkAktifCalisma+0xf26>
 8005d5a:	4b53      	ldr	r3, [pc, #332]	; (8005ea8 <checkAktifCalisma+0x106c>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d027      	beq.n	8005db2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d66:	484d      	ldr	r0, [pc, #308]	; (8005e9c <checkAktifCalisma+0x1060>)
 8005d68:	f003 fb10 	bl	800938c <HAL_GPIO_ReadPin>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d103      	bne.n	8005d7a <checkAktifCalisma+0xf3e>
 8005d72:	4b4e      	ldr	r3, [pc, #312]	; (8005eac <checkAktifCalisma+0x1070>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d7a:	4b4e      	ldr	r3, [pc, #312]	; (8005eb4 <checkAktifCalisma+0x1078>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <checkAktifCalisma+0xf4e>
 8005d82:	4b4d      	ldr	r3, [pc, #308]	; (8005eb8 <checkAktifCalisma+0x107c>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d013      	beq.n	8005db2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d8a:	4b4e      	ldr	r3, [pc, #312]	; (8005ec4 <checkAktifCalisma+0x1088>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00f      	beq.n	8005db2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d92:	4b4d      	ldr	r3, [pc, #308]	; (8005ec8 <checkAktifCalisma+0x108c>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f083 0301 	eor.w	r3, r3, #1
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005da0:	4b4a      	ldr	r3, [pc, #296]	; (8005ecc <checkAktifCalisma+0x1090>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005da6:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <checkAktifCalisma+0x1094>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4a      	ldr	r2, [pc, #296]	; (8005ed4 <checkAktifCalisma+0x1098>)
 8005dac:	6013      	str	r3, [r2, #0]
			bekle();
 8005dae:	f7fe fec7 	bl	8004b40 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005db2:	4b47      	ldr	r3, [pc, #284]	; (8005ed0 <checkAktifCalisma+0x1094>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b47      	ldr	r3, [pc, #284]	; (8005ed4 <checkAktifCalisma+0x1098>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	4a46      	ldr	r2, [pc, #280]	; (8005ed8 <checkAktifCalisma+0x109c>)
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d214      	bcs.n	8005dee <checkAktifCalisma+0xfb2>
 8005dc4:	4b37      	ldr	r3, [pc, #220]	; (8005ea4 <checkAktifCalisma+0x1068>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f083 0301 	eor.w	r3, r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d006      	beq.n	8005de0 <checkAktifCalisma+0xfa4>
 8005dd2:	4b35      	ldr	r3, [pc, #212]	; (8005ea8 <checkAktifCalisma+0x106c>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f083 0301 	eor.w	r3, r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <checkAktifCalisma+0xfb2>
 8005de0:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <checkAktifCalisma+0x1088>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	f083 0301 	eor.w	r3, r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005dee:	4b37      	ldr	r3, [pc, #220]	; (8005ecc <checkAktifCalisma+0x1090>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005df4:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <checkAktifCalisma+0x1080>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d12b      	bne.n	8005e54 <checkAktifCalisma+0x1018>
 8005dfc:	4b30      	ldr	r3, [pc, #192]	; (8005ec0 <checkAktifCalisma+0x1084>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d003      	beq.n	8005e0c <checkAktifCalisma+0xfd0>
 8005e04:	4b2e      	ldr	r3, [pc, #184]	; (8005ec0 <checkAktifCalisma+0x1084>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d123      	bne.n	8005e54 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e0c:	4b25      	ldr	r3, [pc, #148]	; (8005ea4 <checkAktifCalisma+0x1068>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d103      	bne.n	8005e1c <checkAktifCalisma+0xfe0>
 8005e14:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <checkAktifCalisma+0x106c>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e20:	481e      	ldr	r0, [pc, #120]	; (8005e9c <checkAktifCalisma+0x1060>)
 8005e22:	f003 fab3 	bl	800938c <HAL_GPIO_ReadPin>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <checkAktifCalisma+0xff8>
 8005e2c:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <checkAktifCalisma+0x1070>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e34:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <checkAktifCalisma+0x1078>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d103      	bne.n	8005e44 <checkAktifCalisma+0x1008>
 8005e3c:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <checkAktifCalisma+0x107c>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005e44:	4b1f      	ldr	r3, [pc, #124]	; (8005ec4 <checkAktifCalisma+0x1088>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005e4c:	4b23      	ldr	r3, [pc, #140]	; (8005edc <checkAktifCalisma+0x10a0>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e002      	b.n	8005e5a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005e54:	4b21      	ldr	r3, [pc, #132]	; (8005edc <checkAktifCalisma+0x10a0>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e5a:	4b18      	ldr	r3, [pc, #96]	; (8005ebc <checkAktifCalisma+0x1080>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d140      	bne.n	8005ee4 <checkAktifCalisma+0x10a8>
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <checkAktifCalisma+0x1084>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d003      	beq.n	8005e72 <checkAktifCalisma+0x1036>
 8005e6a:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <checkAktifCalisma+0x1084>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d138      	bne.n	8005ee4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <checkAktifCalisma+0x1068>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <checkAktifCalisma+0x1046>
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <checkAktifCalisma+0x106c>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d030      	beq.n	8005ee4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e82:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <checkAktifCalisma+0x1088>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d02c      	beq.n	8005ee4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e8a:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <checkAktifCalisma+0x10a4>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e02b      	b.n	8005eea <checkAktifCalisma+0x10ae>
 8005e92:	bf00      	nop
 8005e94:	40010800 	.word	0x40010800
 8005e98:	20000241 	.word	0x20000241
 8005e9c:	40011000 	.word	0x40011000
 8005ea0:	2000023a 	.word	0x2000023a
 8005ea4:	20000280 	.word	0x20000280
 8005ea8:	20000281 	.word	0x20000281
 8005eac:	20000240 	.word	0x20000240
 8005eb0:	40010c00 	.word	0x40010c00
 8005eb4:	20000290 	.word	0x20000290
 8005eb8:	20000291 	.word	0x20000291
 8005ebc:	2000023f 	.word	0x2000023f
 8005ec0:	2000023c 	.word	0x2000023c
 8005ec4:	20000276 	.word	0x20000276
 8005ec8:	20000263 	.word	0x20000263
 8005ecc:	2000027d 	.word	0x2000027d
 8005ed0:	20000210 	.word	0x20000210
 8005ed4:	20000214 	.word	0x20000214
 8005ed8:	2000024f 	.word	0x2000024f
 8005edc:	2000027e 	.word	0x2000027e
 8005ee0:	2000027f 	.word	0x2000027f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005ee4:	4b8b      	ldr	r3, [pc, #556]	; (8006114 <checkAktifCalisma+0x12d8>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005eea:	4b8b      	ldr	r3, [pc, #556]	; (8006118 <checkAktifCalisma+0x12dc>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <checkAktifCalisma+0x10c6>
 8005ef2:	4b8a      	ldr	r3, [pc, #552]	; (800611c <checkAktifCalisma+0x12e0>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <checkAktifCalisma+0x10c6>
 8005efa:	4b86      	ldr	r3, [pc, #536]	; (8006114 <checkAktifCalisma+0x12d8>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005f02:	2201      	movs	r2, #1
 8005f04:	2120      	movs	r1, #32
 8005f06:	4886      	ldr	r0, [pc, #536]	; (8006120 <checkAktifCalisma+0x12e4>)
 8005f08:	f003 fa57 	bl	80093ba <HAL_GPIO_WritePin>
 8005f0c:	e004      	b.n	8005f18 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2120      	movs	r1, #32
 8005f12:	4883      	ldr	r0, [pc, #524]	; (8006120 <checkAktifCalisma+0x12e4>)
 8005f14:	f003 fa51 	bl	80093ba <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005f18:	4b82      	ldr	r3, [pc, #520]	; (8006124 <checkAktifCalisma+0x12e8>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00e      	beq.n	8005f3e <checkAktifCalisma+0x1102>
 8005f20:	2102      	movs	r1, #2
 8005f22:	4881      	ldr	r0, [pc, #516]	; (8006128 <checkAktifCalisma+0x12ec>)
 8005f24:	f003 fa32 	bl	800938c <HAL_GPIO_ReadPin>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d107      	bne.n	8005f3e <checkAktifCalisma+0x1102>
 8005f2e:	4b7f      	ldr	r3, [pc, #508]	; (800612c <checkAktifCalisma+0x12f0>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d103      	bne.n	8005f3e <checkAktifCalisma+0x1102>
 8005f36:	4b7e      	ldr	r3, [pc, #504]	; (8006130 <checkAktifCalisma+0x12f4>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d112      	bne.n	8005f64 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005f3e:	4b7d      	ldr	r3, [pc, #500]	; (8006134 <checkAktifCalisma+0x12f8>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d066      	beq.n	8006014 <checkAktifCalisma+0x11d8>
 8005f46:	2104      	movs	r1, #4
 8005f48:	4877      	ldr	r0, [pc, #476]	; (8006128 <checkAktifCalisma+0x12ec>)
 8005f4a:	f003 fa1f 	bl	800938c <HAL_GPIO_ReadPin>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d15f      	bne.n	8006014 <checkAktifCalisma+0x11d8>
 8005f54:	4b75      	ldr	r3, [pc, #468]	; (800612c <checkAktifCalisma+0x12f0>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d05b      	beq.n	8006014 <checkAktifCalisma+0x11d8>
 8005f5c:	4b74      	ldr	r3, [pc, #464]	; (8006130 <checkAktifCalisma+0x12f4>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d057      	beq.n	8006014 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005f64:	4b74      	ldr	r3, [pc, #464]	; (8006138 <checkAktifCalisma+0x12fc>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	4b72      	ldr	r3, [pc, #456]	; (8006138 <checkAktifCalisma+0x12fc>)
 8005f6e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005f70:	4b71      	ldr	r3, [pc, #452]	; (8006138 <checkAktifCalisma+0x12fc>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b09      	cmp	r3, #9
 8005f76:	d908      	bls.n	8005f8a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f78:	4b6f      	ldr	r3, [pc, #444]	; (8006138 <checkAktifCalisma+0x12fc>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f7e:	4b6f      	ldr	r3, [pc, #444]	; (800613c <checkAktifCalisma+0x1300>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	4b6d      	ldr	r3, [pc, #436]	; (800613c <checkAktifCalisma+0x1300>)
 8005f88:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f8a:	4b6c      	ldr	r3, [pc, #432]	; (800613c <checkAktifCalisma+0x1300>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b09      	cmp	r3, #9
 8005f90:	d908      	bls.n	8005fa4 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f92:	4b6a      	ldr	r3, [pc, #424]	; (800613c <checkAktifCalisma+0x1300>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f98:	4b69      	ldr	r3, [pc, #420]	; (8006140 <checkAktifCalisma+0x1304>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b67      	ldr	r3, [pc, #412]	; (8006140 <checkAktifCalisma+0x1304>)
 8005fa2:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005fa4:	4b66      	ldr	r3, [pc, #408]	; (8006140 <checkAktifCalisma+0x1304>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b09      	cmp	r3, #9
 8005faa:	d908      	bls.n	8005fbe <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005fac:	4b64      	ldr	r3, [pc, #400]	; (8006140 <checkAktifCalisma+0x1304>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005fb2:	4b64      	ldr	r3, [pc, #400]	; (8006144 <checkAktifCalisma+0x1308>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	4b62      	ldr	r3, [pc, #392]	; (8006144 <checkAktifCalisma+0x1308>)
 8005fbc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005fbe:	4b61      	ldr	r3, [pc, #388]	; (8006144 <checkAktifCalisma+0x1308>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d908      	bls.n	8005fd8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005fc6:	4b5f      	ldr	r3, [pc, #380]	; (8006144 <checkAktifCalisma+0x1308>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005fcc:	4b5e      	ldr	r3, [pc, #376]	; (8006148 <checkAktifCalisma+0x130c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	4b5c      	ldr	r3, [pc, #368]	; (8006148 <checkAktifCalisma+0x130c>)
 8005fd6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005fd8:	4b5b      	ldr	r3, [pc, #364]	; (8006148 <checkAktifCalisma+0x130c>)
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	4b5b      	ldr	r3, [pc, #364]	; (800614c <checkAktifCalisma+0x1310>)
 8005fde:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005fe2:	4b58      	ldr	r3, [pc, #352]	; (8006144 <checkAktifCalisma+0x1308>)
 8005fe4:	781a      	ldrb	r2, [r3, #0]
 8005fe6:	4b59      	ldr	r3, [pc, #356]	; (800614c <checkAktifCalisma+0x1310>)
 8005fe8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005fea:	4b55      	ldr	r3, [pc, #340]	; (8006140 <checkAktifCalisma+0x1304>)
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	4b57      	ldr	r3, [pc, #348]	; (800614c <checkAktifCalisma+0x1310>)
 8005ff0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005ff2:	4b52      	ldr	r3, [pc, #328]	; (800613c <checkAktifCalisma+0x1300>)
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	4b55      	ldr	r3, [pc, #340]	; (800614c <checkAktifCalisma+0x1310>)
 8005ff8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005ffa:	4b4f      	ldr	r3, [pc, #316]	; (8006138 <checkAktifCalisma+0x12fc>)
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	4b53      	ldr	r3, [pc, #332]	; (800614c <checkAktifCalisma+0x1310>)
 8006000:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006002:	4b53      	ldr	r3, [pc, #332]	; (8006150 <checkAktifCalisma+0x1314>)
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006008:	4b46      	ldr	r3, [pc, #280]	; (8006124 <checkAktifCalisma+0x12e8>)
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800600e:	4b49      	ldr	r3, [pc, #292]	; (8006134 <checkAktifCalisma+0x12f8>)
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006018:	484e      	ldr	r0, [pc, #312]	; (8006154 <checkAktifCalisma+0x1318>)
 800601a:	f003 f9b7 	bl	800938c <HAL_GPIO_ReadPin>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d016      	beq.n	8006052 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006024:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006028:	484a      	ldr	r0, [pc, #296]	; (8006154 <checkAktifCalisma+0x1318>)
 800602a:	f003 f9af 	bl	800938c <HAL_GPIO_ReadPin>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00e      	beq.n	8006052 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006038:	4846      	ldr	r0, [pc, #280]	; (8006154 <checkAktifCalisma+0x1318>)
 800603a:	f003 f9a7 	bl	800938c <HAL_GPIO_ReadPin>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006044:	2140      	movs	r1, #64	; 0x40
 8006046:	4838      	ldr	r0, [pc, #224]	; (8006128 <checkAktifCalisma+0x12ec>)
 8006048:	f003 f9a0 	bl	800938c <HAL_GPIO_ReadPin>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <checkAktifCalisma+0x121e>
			startBasili=1;
 8006052:	4b41      	ldr	r3, [pc, #260]	; (8006158 <checkAktifCalisma+0x131c>)
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e002      	b.n	8006060 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800605a:	4b3f      	ldr	r3, [pc, #252]	; (8006158 <checkAktifCalisma+0x131c>)
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006060:	4b3d      	ldr	r3, [pc, #244]	; (8006158 <checkAktifCalisma+0x131c>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d016      	beq.n	8006096 <checkAktifCalisma+0x125a>
 8006068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800606c:	4839      	ldr	r0, [pc, #228]	; (8006154 <checkAktifCalisma+0x1318>)
 800606e:	f003 f98d 	bl	800938c <HAL_GPIO_ReadPin>
 8006072:	4603      	mov	r3, r0
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10e      	bne.n	8006096 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006078:	4b38      	ldr	r3, [pc, #224]	; (800615c <checkAktifCalisma+0x1320>)
 800607a:	2201      	movs	r2, #1
 800607c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800607e:	2001      	movs	r0, #1
 8006080:	f7fa fd88 	bl	8000b94 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006084:	2001      	movs	r0, #1
 8006086:	f7fa fd2b 	bl	8000ae0 <hata2EEPROM>
			convertAndSendData();
 800608a:	f001 fc57 	bl	800793c <convertAndSendData>
			acilstophatasi=1;
 800608e:	4b34      	ldr	r3, [pc, #208]	; (8006160 <checkAktifCalisma+0x1324>)
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e018      	b.n	80060c8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006096:	4b32      	ldr	r3, [pc, #200]	; (8006160 <checkAktifCalisma+0x1324>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d014      	beq.n	80060c8 <checkAktifCalisma+0x128c>
 800609e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060a2:	482c      	ldr	r0, [pc, #176]	; (8006154 <checkAktifCalisma+0x1318>)
 80060a4:	f003 f972 	bl	800938c <HAL_GPIO_ReadPin>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <checkAktifCalisma+0x128c>
 80060ae:	4b2a      	ldr	r3, [pc, #168]	; (8006158 <checkAktifCalisma+0x131c>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	f083 0301 	eor.w	r3, r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80060bc:	4b28      	ldr	r3, [pc, #160]	; (8006160 <checkAktifCalisma+0x1324>)
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80060c2:	2001      	movs	r0, #1
 80060c4:	f7fe fce8 	bl	8004a98 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80060c8:	4b26      	ldr	r3, [pc, #152]	; (8006164 <checkAktifCalisma+0x1328>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f083 0301 	eor.w	r3, r3, #1
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d04e      	beq.n	8006174 <checkAktifCalisma+0x1338>
 80060d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060da:	481e      	ldr	r0, [pc, #120]	; (8006154 <checkAktifCalisma+0x1318>)
 80060dc:	f003 f956 	bl	800938c <HAL_GPIO_ReadPin>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <checkAktifCalisma+0x12b2>
 80060e6:	4b20      	ldr	r3, [pc, #128]	; (8006168 <checkAktifCalisma+0x132c>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d042      	beq.n	8006174 <checkAktifCalisma+0x1338>
 80060ee:	4b1f      	ldr	r3, [pc, #124]	; (800616c <checkAktifCalisma+0x1330>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d13e      	bne.n	8006174 <checkAktifCalisma+0x1338>
			hataVar=1;
 80060f6:	4b19      	ldr	r3, [pc, #100]	; (800615c <checkAktifCalisma+0x1320>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80060fc:	2002      	movs	r0, #2
 80060fe:	f7fa fd49 	bl	8000b94 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006102:	2002      	movs	r0, #2
 8006104:	f7fa fcec 	bl	8000ae0 <hata2EEPROM>
			convertAndSendData();
 8006108:	f001 fc18 	bl	800793c <convertAndSendData>
			emniyetCercevesihatasi=1;
 800610c:	4b18      	ldr	r3, [pc, #96]	; (8006170 <checkAktifCalisma+0x1334>)
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e047      	b.n	80061a4 <checkAktifCalisma+0x1368>
 8006114:	2000027f 	.word	0x2000027f
 8006118:	2000027e 	.word	0x2000027e
 800611c:	2000027d 	.word	0x2000027d
 8006120:	40010800 	.word	0x40010800
 8006124:	20000273 	.word	0x20000273
 8006128:	40011000 	.word	0x40011000
 800612c:	2000023a 	.word	0x2000023a
 8006130:	20000276 	.word	0x20000276
 8006134:	20000274 	.word	0x20000274
 8006138:	20000231 	.word	0x20000231
 800613c:	20000232 	.word	0x20000232
 8006140:	20000000 	.word	0x20000000
 8006144:	20000001 	.word	0x20000001
 8006148:	20000233 	.word	0x20000233
 800614c:	20000118 	.word	0x20000118
 8006150:	20000260 	.word	0x20000260
 8006154:	40010c00 	.word	0x40010c00
 8006158:	20000282 	.word	0x20000282
 800615c:	20000289 	.word	0x20000289
 8006160:	20000284 	.word	0x20000284
 8006164:	2000028b 	.word	0x2000028b
 8006168:	20000295 	.word	0x20000295
 800616c:	20000238 	.word	0x20000238
 8006170:	20000285 	.word	0x20000285
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006174:	4b9b      	ldr	r3, [pc, #620]	; (80063e4 <checkAktifCalisma+0x15a8>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d013      	beq.n	80061a4 <checkAktifCalisma+0x1368>
 800617c:	4b9a      	ldr	r3, [pc, #616]	; (80063e8 <checkAktifCalisma+0x15ac>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00f      	beq.n	80061a4 <checkAktifCalisma+0x1368>
 8006184:	4b99      	ldr	r3, [pc, #612]	; (80063ec <checkAktifCalisma+0x15b0>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f083 0301 	eor.w	r3, r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006192:	4b94      	ldr	r3, [pc, #592]	; (80063e4 <checkAktifCalisma+0x15a8>)
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006198:	4b95      	ldr	r3, [pc, #596]	; (80063f0 <checkAktifCalisma+0x15b4>)
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800619e:	2002      	movs	r0, #2
 80061a0:	f7fe fc7a 	bl	8004a98 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80061a4:	4b93      	ldr	r3, [pc, #588]	; (80063f4 <checkAktifCalisma+0x15b8>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d11e      	bne.n	80061ea <checkAktifCalisma+0x13ae>
 80061ac:	4b92      	ldr	r3, [pc, #584]	; (80063f8 <checkAktifCalisma+0x15bc>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d11a      	bne.n	80061ea <checkAktifCalisma+0x13ae>
 80061b4:	4b91      	ldr	r3, [pc, #580]	; (80063fc <checkAktifCalisma+0x15c0>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d016      	beq.n	80061ea <checkAktifCalisma+0x13ae>
 80061bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061c0:	488f      	ldr	r0, [pc, #572]	; (8006400 <checkAktifCalisma+0x15c4>)
 80061c2:	f003 f8e3 	bl	800938c <HAL_GPIO_ReadPin>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d10e      	bne.n	80061ea <checkAktifCalisma+0x13ae>
			hataVar=1;
 80061cc:	4b8d      	ldr	r3, [pc, #564]	; (8006404 <checkAktifCalisma+0x15c8>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80061d2:	2003      	movs	r0, #3
 80061d4:	f7fa fcde 	bl	8000b94 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80061d8:	2003      	movs	r0, #3
 80061da:	f7fa fc81 	bl	8000ae0 <hata2EEPROM>
			convertAndSendData();
 80061de:	f001 fbad 	bl	800793c <convertAndSendData>
			basinchatasi=1;
 80061e2:	4b89      	ldr	r3, [pc, #548]	; (8006408 <checkAktifCalisma+0x15cc>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e015      	b.n	8006216 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80061ea:	4b87      	ldr	r3, [pc, #540]	; (8006408 <checkAktifCalisma+0x15cc>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d011      	beq.n	8006216 <checkAktifCalisma+0x13da>
 80061f2:	4b80      	ldr	r3, [pc, #512]	; (80063f4 <checkAktifCalisma+0x15b8>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d10d      	bne.n	8006216 <checkAktifCalisma+0x13da>
 80061fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061fe:	4883      	ldr	r0, [pc, #524]	; (800640c <checkAktifCalisma+0x15d0>)
 8006200:	f003 f8c4 	bl	800938c <HAL_GPIO_ReadPin>
 8006204:	4603      	mov	r3, r0
 8006206:	2b01      	cmp	r3, #1
 8006208:	d105      	bne.n	8006216 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800620a:	4b7f      	ldr	r3, [pc, #508]	; (8006408 <checkAktifCalisma+0x15cc>)
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006210:	2003      	movs	r0, #3
 8006212:	f7fe fc41 	bl	8004a98 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006216:	4b7e      	ldr	r3, [pc, #504]	; (8006410 <checkAktifCalisma+0x15d4>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <checkAktifCalisma+0x13ea>
 800621e:	4b7d      	ldr	r3, [pc, #500]	; (8006414 <checkAktifCalisma+0x15d8>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01e      	beq.n	8006264 <checkAktifCalisma+0x1428>
 8006226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800622a:	487b      	ldr	r0, [pc, #492]	; (8006418 <checkAktifCalisma+0x15dc>)
 800622c:	f003 f8ae 	bl	800938c <HAL_GPIO_ReadPin>
 8006230:	4603      	mov	r3, r0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d116      	bne.n	8006264 <checkAktifCalisma+0x1428>
 8006236:	4b79      	ldr	r3, [pc, #484]	; (800641c <checkAktifCalisma+0x15e0>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d003      	beq.n	8006246 <checkAktifCalisma+0x140a>
 800623e:	4b77      	ldr	r3, [pc, #476]	; (800641c <checkAktifCalisma+0x15e0>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b03      	cmp	r3, #3
 8006244:	d10e      	bne.n	8006264 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006246:	4b6f      	ldr	r3, [pc, #444]	; (8006404 <checkAktifCalisma+0x15c8>)
 8006248:	2201      	movs	r2, #1
 800624a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800624c:	2004      	movs	r0, #4
 800624e:	f7fa fca1 	bl	8000b94 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006252:	2004      	movs	r0, #4
 8006254:	f7fa fc44 	bl	8000ae0 <hata2EEPROM>
			convertAndSendData();
 8006258:	f001 fb70 	bl	800793c <convertAndSendData>
			katkapisivicihatasi=1;
 800625c:	4b70      	ldr	r3, [pc, #448]	; (8006420 <checkAktifCalisma+0x15e4>)
 800625e:	2201      	movs	r2, #1
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	e01f      	b.n	80062a4 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006264:	4b6e      	ldr	r3, [pc, #440]	; (8006420 <checkAktifCalisma+0x15e4>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01b      	beq.n	80062a4 <checkAktifCalisma+0x1468>
 800626c:	4b6d      	ldr	r3, [pc, #436]	; (8006424 <checkAktifCalisma+0x15e8>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d017      	beq.n	80062a4 <checkAktifCalisma+0x1468>
 8006274:	4b66      	ldr	r3, [pc, #408]	; (8006410 <checkAktifCalisma+0x15d4>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f083 0301 	eor.w	r3, r3, #1
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d010      	beq.n	80062a4 <checkAktifCalisma+0x1468>
 8006282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006286:	4864      	ldr	r0, [pc, #400]	; (8006418 <checkAktifCalisma+0x15dc>)
 8006288:	f003 f880 	bl	800938c <HAL_GPIO_ReadPin>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d108      	bne.n	80062a4 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006292:	4b63      	ldr	r3, [pc, #396]	; (8006420 <checkAktifCalisma+0x15e4>)
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006298:	4b5e      	ldr	r3, [pc, #376]	; (8006414 <checkAktifCalisma+0x15d8>)
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800629e:	2004      	movs	r0, #4
 80062a0:	f7fe fbfa 	bl	8004a98 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062a4:	4b5a      	ldr	r3, [pc, #360]	; (8006410 <checkAktifCalisma+0x15d4>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d103      	bne.n	80062b4 <checkAktifCalisma+0x1478>
 80062ac:	4b5e      	ldr	r3, [pc, #376]	; (8006428 <checkAktifCalisma+0x15ec>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01e      	beq.n	80062f2 <checkAktifCalisma+0x14b6>
 80062b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062b8:	4857      	ldr	r0, [pc, #348]	; (8006418 <checkAktifCalisma+0x15dc>)
 80062ba:	f003 f867 	bl	800938c <HAL_GPIO_ReadPin>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d116      	bne.n	80062f2 <checkAktifCalisma+0x14b6>
 80062c4:	4b55      	ldr	r3, [pc, #340]	; (800641c <checkAktifCalisma+0x15e0>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d003      	beq.n	80062d4 <checkAktifCalisma+0x1498>
 80062cc:	4b53      	ldr	r3, [pc, #332]	; (800641c <checkAktifCalisma+0x15e0>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d10e      	bne.n	80062f2 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80062d4:	4b4b      	ldr	r3, [pc, #300]	; (8006404 <checkAktifCalisma+0x15c8>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80062da:	2005      	movs	r0, #5
 80062dc:	f7fa fc5a 	bl	8000b94 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80062e0:	2005      	movs	r0, #5
 80062e2:	f7fa fbfd 	bl	8000ae0 <hata2EEPROM>
			convertAndSendData();
 80062e6:	f001 fb29 	bl	800793c <convertAndSendData>
			tablakapisivicihatasi=1;
 80062ea:	4b50      	ldr	r3, [pc, #320]	; (800642c <checkAktifCalisma+0x15f0>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	e023      	b.n	800633a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80062f2:	4b4e      	ldr	r3, [pc, #312]	; (800642c <checkAktifCalisma+0x15f0>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01f      	beq.n	800633a <checkAktifCalisma+0x14fe>
 80062fa:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <checkAktifCalisma+0x15e8>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d01b      	beq.n	800633a <checkAktifCalisma+0x14fe>
 8006302:	4b43      	ldr	r3, [pc, #268]	; (8006410 <checkAktifCalisma+0x15d4>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	f083 0301 	eor.w	r3, r3, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d014      	beq.n	800633a <checkAktifCalisma+0x14fe>
 8006310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006314:	4840      	ldr	r0, [pc, #256]	; (8006418 <checkAktifCalisma+0x15dc>)
 8006316:	f003 f839 	bl	800938c <HAL_GPIO_ReadPin>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10c      	bne.n	800633a <checkAktifCalisma+0x14fe>
 8006320:	4b40      	ldr	r3, [pc, #256]	; (8006424 <checkAktifCalisma+0x15e8>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d008      	beq.n	800633a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006328:	4b40      	ldr	r3, [pc, #256]	; (800642c <checkAktifCalisma+0x15f0>)
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800632e:	4b3e      	ldr	r3, [pc, #248]	; (8006428 <checkAktifCalisma+0x15ec>)
 8006330:	2200      	movs	r2, #0
 8006332:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006334:	2005      	movs	r0, #5
 8006336:	f7fe fbaf 	bl	8004a98 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800633a:	4b30      	ldr	r3, [pc, #192]	; (80063fc <checkAktifCalisma+0x15c0>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d107      	bne.n	8006352 <checkAktifCalisma+0x1516>
 8006342:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <checkAktifCalisma+0x15b0>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <checkAktifCalisma+0x1516>
 800634a:	4b39      	ldr	r3, [pc, #228]	; (8006430 <checkAktifCalisma+0x15f4>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d016      	beq.n	8006380 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006352:	4b38      	ldr	r3, [pc, #224]	; (8006434 <checkAktifCalisma+0x15f8>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b38      	ldr	r3, [pc, #224]	; (8006438 <checkAktifCalisma+0x15fc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	4a37      	ldr	r2, [pc, #220]	; (800643c <checkAktifCalisma+0x1600>)
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	4293      	cmp	r3, r2
 8006362:	d30d      	bcc.n	8006380 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006364:	4b27      	ldr	r3, [pc, #156]	; (8006404 <checkAktifCalisma+0x15c8>)
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800636a:	2006      	movs	r0, #6
 800636c:	f7fa fc12 	bl	8000b94 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006370:	2006      	movs	r0, #6
 8006372:	f7fa fbb5 	bl	8000ae0 <hata2EEPROM>
			  	convertAndSendData();
 8006376:	f001 fae1 	bl	800793c <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800637a:	4b31      	ldr	r3, [pc, #196]	; (8006440 <checkAktifCalisma+0x1604>)
 800637c:	2201      	movs	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006380:	4b2f      	ldr	r3, [pc, #188]	; (8006440 <checkAktifCalisma+0x1604>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d013      	beq.n	80063b0 <checkAktifCalisma+0x1574>
 8006388:	2108      	movs	r1, #8
 800638a:	4823      	ldr	r0, [pc, #140]	; (8006418 <checkAktifCalisma+0x15dc>)
 800638c:	f002 fffe 	bl	800938c <HAL_GPIO_ReadPin>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <checkAktifCalisma+0x1574>
 8006396:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <checkAktifCalisma+0x15d4>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f083 0301 	eor.w	r3, r3, #1
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80063a4:	4b26      	ldr	r3, [pc, #152]	; (8006440 <checkAktifCalisma+0x1604>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80063aa:	2006      	movs	r0, #6
 80063ac:	f7fe fb74 	bl	8004a98 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80063b0:	4b24      	ldr	r3, [pc, #144]	; (8006444 <checkAktifCalisma+0x1608>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10b      	bne.n	80063d0 <checkAktifCalisma+0x1594>
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <checkAktifCalisma+0x15b0>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d107      	bne.n	80063d0 <checkAktifCalisma+0x1594>
 80063c0:	4b21      	ldr	r3, [pc, #132]	; (8006448 <checkAktifCalisma+0x160c>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <checkAktifCalisma+0x1594>
 80063c8:	4b19      	ldr	r3, [pc, #100]	; (8006430 <checkAktifCalisma+0x15f4>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d03f      	beq.n	8006450 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80063d0:	4b1e      	ldr	r3, [pc, #120]	; (800644c <checkAktifCalisma+0x1610>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80063d6:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <checkAktifCalisma+0x15d8>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <checkAktifCalisma+0x15ec>)
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e03c      	b.n	800645e <checkAktifCalisma+0x1622>
 80063e4:	20000285 	.word	0x20000285
 80063e8:	2000028b 	.word	0x2000028b
 80063ec:	2000026c 	.word	0x2000026c
 80063f0:	20000295 	.word	0x20000295
 80063f4:	20000237 	.word	0x20000237
 80063f8:	2000023b 	.word	0x2000023b
 80063fc:	20000288 	.word	0x20000288
 8006400:	40011000 	.word	0x40011000
 8006404:	20000289 	.word	0x20000289
 8006408:	20000292 	.word	0x20000292
 800640c:	40010c00 	.word	0x40010c00
 8006410:	20000282 	.word	0x20000282
 8006414:	20000296 	.word	0x20000296
 8006418:	40010800 	.word	0x40010800
 800641c:	2000023c 	.word	0x2000023c
 8006420:	20000293 	.word	0x20000293
 8006424:	20000276 	.word	0x20000276
 8006428:	20000297 	.word	0x20000297
 800642c:	20000294 	.word	0x20000294
 8006430:	2000026b 	.word	0x2000026b
 8006434:	20000210 	.word	0x20000210
 8006438:	20000224 	.word	0x20000224
 800643c:	2000024c 	.word	0x2000024c
 8006440:	20000283 	.word	0x20000283
 8006444:	20000269 	.word	0x20000269
 8006448:	2000026a 	.word	0x2000026a
 800644c:	2000028a 	.word	0x2000028a
		} else {
			makineCalisiyor=1;
 8006450:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <checkAktifCalisma+0x1690>)
 8006452:	2201      	movs	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006456:	4b1e      	ldr	r3, [pc, #120]	; (80064d0 <checkAktifCalisma+0x1694>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1e      	ldr	r2, [pc, #120]	; (80064d4 <checkAktifCalisma+0x1698>)
 800645c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800645e:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <checkAktifCalisma+0x169c>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d02f      	beq.n	80064c6 <checkAktifCalisma+0x168a>
 8006466:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <checkAktifCalisma+0x16a0>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	f083 0301 	eor.w	r3, r3, #1
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d028      	beq.n	80064c6 <checkAktifCalisma+0x168a>
 8006474:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <checkAktifCalisma+0x16a4>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f083 0301 	eor.w	r3, r3, #1
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d021      	beq.n	80064c6 <checkAktifCalisma+0x168a>
 8006482:	4b18      	ldr	r3, [pc, #96]	; (80064e4 <checkAktifCalisma+0x16a8>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f083 0301 	eor.w	r3, r3, #1
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01a      	beq.n	80064c6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006490:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <checkAktifCalisma+0x16ac>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f083 0301 	eor.w	r3, r3, #1
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d013      	beq.n	80064c6 <checkAktifCalisma+0x168a>
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <checkAktifCalisma+0x16b0>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f083 0301 	eor.w	r3, r3, #1
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <checkAktifCalisma+0x168a>
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <checkAktifCalisma+0x16b4>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f083 0301 	eor.w	r3, r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <checkAktifCalisma+0x168a>
			hataVar=0;
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <checkAktifCalisma+0x169c>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80064c0:	2007      	movs	r0, #7
 80064c2:	f7fe fae9 	bl	8004a98 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80064c6:	bf00      	nop
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	2000028a 	.word	0x2000028a
 80064d0:	20000210 	.word	0x20000210
 80064d4:	20000224 	.word	0x20000224
 80064d8:	20000289 	.word	0x20000289
 80064dc:	20000284 	.word	0x20000284
 80064e0:	20000285 	.word	0x20000285
 80064e4:	20000292 	.word	0x20000292
 80064e8:	20000293 	.word	0x20000293
 80064ec:	20000294 	.word	0x20000294
 80064f0:	20000283 	.word	0x20000283

080064f4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80064f8:	4b8b      	ldr	r3, [pc, #556]	; (8006728 <checkDemoModCalisma+0x234>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	f040 8229 	bne.w	8006954 <checkDemoModCalisma+0x460>
 8006502:	4b8a      	ldr	r3, [pc, #552]	; (800672c <checkDemoModCalisma+0x238>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8224 	beq.w	8006954 <checkDemoModCalisma+0x460>
 800650c:	4b88      	ldr	r3, [pc, #544]	; (8006730 <checkDemoModCalisma+0x23c>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f040 821f 	bne.w	8006954 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006516:	2102      	movs	r1, #2
 8006518:	4886      	ldr	r0, [pc, #536]	; (8006734 <checkDemoModCalisma+0x240>)
 800651a:	f002 ff37 	bl	800938c <HAL_GPIO_ReadPin>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11d      	bne.n	8006560 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006524:	4b84      	ldr	r3, [pc, #528]	; (8006738 <checkDemoModCalisma+0x244>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f083 0301 	eor.w	r3, r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d016      	beq.n	8006560 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006532:	4b82      	ldr	r3, [pc, #520]	; (800673c <checkDemoModCalisma+0x248>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f083 0301 	eor.w	r3, r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00f      	beq.n	8006560 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006540:	4b7f      	ldr	r3, [pc, #508]	; (8006740 <checkDemoModCalisma+0x24c>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f083 0301 	eor.w	r3, r3, #1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d008      	beq.n	8006560 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800654e:	2201      	movs	r2, #1
 8006550:	2104      	movs	r1, #4
 8006552:	487c      	ldr	r0, [pc, #496]	; (8006744 <checkDemoModCalisma+0x250>)
 8006554:	f002 ff31 	bl	80093ba <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006558:	4b7b      	ldr	r3, [pc, #492]	; (8006748 <checkDemoModCalisma+0x254>)
 800655a:	2201      	movs	r2, #1
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	e00e      	b.n	800657e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006560:	2102      	movs	r1, #2
 8006562:	4874      	ldr	r0, [pc, #464]	; (8006734 <checkDemoModCalisma+0x240>)
 8006564:	f002 ff12 	bl	800938c <HAL_GPIO_ReadPin>
 8006568:	4603      	mov	r3, r0
 800656a:	2b01      	cmp	r3, #1
 800656c:	d107      	bne.n	800657e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800656e:	2200      	movs	r2, #0
 8006570:	2104      	movs	r1, #4
 8006572:	4874      	ldr	r0, [pc, #464]	; (8006744 <checkDemoModCalisma+0x250>)
 8006574:	f002 ff21 	bl	80093ba <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006578:	4b73      	ldr	r3, [pc, #460]	; (8006748 <checkDemoModCalisma+0x254>)
 800657a:	2200      	movs	r2, #0
 800657c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800657e:	4b72      	ldr	r3, [pc, #456]	; (8006748 <checkDemoModCalisma+0x254>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <checkDemoModCalisma+0xaa>
 8006586:	4b6d      	ldr	r3, [pc, #436]	; (800673c <checkDemoModCalisma+0x248>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d107      	bne.n	800659e <checkDemoModCalisma+0xaa>
 800658e:	4b6c      	ldr	r3, [pc, #432]	; (8006740 <checkDemoModCalisma+0x24c>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <checkDemoModCalisma+0xaa>
 8006596:	4b68      	ldr	r3, [pc, #416]	; (8006738 <checkDemoModCalisma+0x244>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00c      	beq.n	80065b8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800659e:	2201      	movs	r2, #1
 80065a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065a4:	4867      	ldr	r0, [pc, #412]	; (8006744 <checkDemoModCalisma+0x250>)
 80065a6:	f002 ff08 	bl	80093ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065aa:	2201      	movs	r2, #1
 80065ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065b0:	4864      	ldr	r0, [pc, #400]	; (8006744 <checkDemoModCalisma+0x250>)
 80065b2:	f002 ff02 	bl	80093ba <HAL_GPIO_WritePin>
 80065b6:	e00b      	b.n	80065d0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80065b8:	2200      	movs	r2, #0
 80065ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065be:	4861      	ldr	r0, [pc, #388]	; (8006744 <checkDemoModCalisma+0x250>)
 80065c0:	f002 fefb 	bl	80093ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065c4:	2200      	movs	r2, #0
 80065c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065ca:	485e      	ldr	r0, [pc, #376]	; (8006744 <checkDemoModCalisma+0x250>)
 80065cc:	f002 fef5 	bl	80093ba <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065d0:	2102      	movs	r1, #2
 80065d2:	4858      	ldr	r0, [pc, #352]	; (8006734 <checkDemoModCalisma+0x240>)
 80065d4:	f002 feda 	bl	800938c <HAL_GPIO_ReadPin>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d10d      	bne.n	80065fa <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065e2:	4854      	ldr	r0, [pc, #336]	; (8006734 <checkDemoModCalisma+0x240>)
 80065e4:	f002 fed2 	bl	800938c <HAL_GPIO_ReadPin>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d105      	bne.n	80065fa <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80065ee:	4b56      	ldr	r3, [pc, #344]	; (8006748 <checkDemoModCalisma+0x254>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f083 0301 	eor.w	r3, r3, #1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065fa:	2102      	movs	r1, #2
 80065fc:	484d      	ldr	r0, [pc, #308]	; (8006734 <checkDemoModCalisma+0x240>)
 80065fe:	f002 fec5 	bl	800938c <HAL_GPIO_ReadPin>
 8006602:	4603      	mov	r3, r0
 8006604:	2b01      	cmp	r3, #1
 8006606:	d125      	bne.n	8006654 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800660c:	4849      	ldr	r0, [pc, #292]	; (8006734 <checkDemoModCalisma+0x240>)
 800660e:	f002 febd 	bl	800938c <HAL_GPIO_ReadPin>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d11d      	bne.n	8006654 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006618:	4b4b      	ldr	r3, [pc, #300]	; (8006748 <checkDemoModCalisma+0x254>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f083 0301 	eor.w	r3, r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006626:	4b44      	ldr	r3, [pc, #272]	; (8006738 <checkDemoModCalisma+0x244>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	f083 0301 	eor.w	r3, r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00f      	beq.n	8006654 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006634:	4b42      	ldr	r3, [pc, #264]	; (8006740 <checkDemoModCalisma+0x24c>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f083 0301 	eor.w	r3, r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d008      	beq.n	8006654 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006642:	2201      	movs	r2, #1
 8006644:	2120      	movs	r1, #32
 8006646:	483b      	ldr	r0, [pc, #236]	; (8006734 <checkDemoModCalisma+0x240>)
 8006648:	f002 feb7 	bl	80093ba <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800664c:	4b3b      	ldr	r3, [pc, #236]	; (800673c <checkDemoModCalisma+0x248>)
 800664e:	2201      	movs	r2, #1
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	e007      	b.n	8006664 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006654:	2200      	movs	r2, #0
 8006656:	2120      	movs	r1, #32
 8006658:	4836      	ldr	r0, [pc, #216]	; (8006734 <checkDemoModCalisma+0x240>)
 800665a:	f002 feae 	bl	80093ba <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800665e:	4b37      	ldr	r3, [pc, #220]	; (800673c <checkDemoModCalisma+0x248>)
 8006660:	2200      	movs	r2, #0
 8006662:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006664:	2102      	movs	r1, #2
 8006666:	4833      	ldr	r0, [pc, #204]	; (8006734 <checkDemoModCalisma+0x240>)
 8006668:	f002 fe90 	bl	800938c <HAL_GPIO_ReadPin>
 800666c:	4603      	mov	r3, r0
 800666e:	2b01      	cmp	r3, #1
 8006670:	d125      	bne.n	80066be <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006676:	482f      	ldr	r0, [pc, #188]	; (8006734 <checkDemoModCalisma+0x240>)
 8006678:	f002 fe88 	bl	800938c <HAL_GPIO_ReadPin>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d11d      	bne.n	80066be <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006682:	4b31      	ldr	r3, [pc, #196]	; (8006748 <checkDemoModCalisma+0x254>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f083 0301 	eor.w	r3, r3, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d016      	beq.n	80066be <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006690:	4b2a      	ldr	r3, [pc, #168]	; (800673c <checkDemoModCalisma+0x248>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	f083 0301 	eor.w	r3, r3, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00f      	beq.n	80066be <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800669e:	4b26      	ldr	r3, [pc, #152]	; (8006738 <checkDemoModCalisma+0x244>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f083 0301 	eor.w	r3, r3, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80066ac:	2201      	movs	r2, #1
 80066ae:	2110      	movs	r1, #16
 80066b0:	4820      	ldr	r0, [pc, #128]	; (8006734 <checkDemoModCalisma+0x240>)
 80066b2:	f002 fe82 	bl	80093ba <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80066b6:	4b22      	ldr	r3, [pc, #136]	; (8006740 <checkDemoModCalisma+0x24c>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	e007      	b.n	80066ce <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066be:	2200      	movs	r2, #0
 80066c0:	2110      	movs	r1, #16
 80066c2:	481c      	ldr	r0, [pc, #112]	; (8006734 <checkDemoModCalisma+0x240>)
 80066c4:	f002 fe79 	bl	80093ba <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80066c8:	4b1d      	ldr	r3, [pc, #116]	; (8006740 <checkDemoModCalisma+0x24c>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80066ce:	2104      	movs	r1, #4
 80066d0:	4818      	ldr	r0, [pc, #96]	; (8006734 <checkDemoModCalisma+0x240>)
 80066d2:	f002 fe5b 	bl	800938c <HAL_GPIO_ReadPin>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d139      	bne.n	8006750 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80066dc:	4b1a      	ldr	r3, [pc, #104]	; (8006748 <checkDemoModCalisma+0x254>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f083 0301 	eor.w	r3, r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d032      	beq.n	8006750 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <checkDemoModCalisma+0x24c>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f083 0301 	eor.w	r3, r3, #1
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d02b      	beq.n	8006750 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80066f8:	4b10      	ldr	r3, [pc, #64]	; (800673c <checkDemoModCalisma+0x248>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	f083 0301 	eor.w	r3, r3, #1
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d024      	beq.n	8006750 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006706:	2201      	movs	r2, #1
 8006708:	2102      	movs	r1, #2
 800670a:	480e      	ldr	r0, [pc, #56]	; (8006744 <checkDemoModCalisma+0x250>)
 800670c:	f002 fe55 	bl	80093ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006710:	2201      	movs	r2, #1
 8006712:	2101      	movs	r1, #1
 8006714:	480b      	ldr	r0, [pc, #44]	; (8006744 <checkDemoModCalisma+0x250>)
 8006716:	f002 fe50 	bl	80093ba <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <checkDemoModCalisma+0x244>)
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <checkDemoModCalisma+0x258>)
 8006722:	2201      	movs	r2, #1
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e027      	b.n	8006778 <checkDemoModCalisma+0x284>
 8006728:	20000252 	.word	0x20000252
 800672c:	20000286 	.word	0x20000286
 8006730:	20000251 	.word	0x20000251
 8006734:	40011000 	.word	0x40011000
 8006738:	2000028d 	.word	0x2000028d
 800673c:	2000028e 	.word	0x2000028e
 8006740:	2000028f 	.word	0x2000028f
 8006744:	40010c00 	.word	0x40010c00
 8006748:	2000028c 	.word	0x2000028c
 800674c:	20000272 	.word	0x20000272
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006750:	2104      	movs	r1, #4
 8006752:	48a0      	ldr	r0, [pc, #640]	; (80069d4 <checkDemoModCalisma+0x4e0>)
 8006754:	f002 fe1a 	bl	800938c <HAL_GPIO_ReadPin>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d10c      	bne.n	8006778 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800675e:	2200      	movs	r2, #0
 8006760:	2102      	movs	r1, #2
 8006762:	489d      	ldr	r0, [pc, #628]	; (80069d8 <checkDemoModCalisma+0x4e4>)
 8006764:	f002 fe29 	bl	80093ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006768:	2200      	movs	r2, #0
 800676a:	2101      	movs	r1, #1
 800676c:	489a      	ldr	r0, [pc, #616]	; (80069d8 <checkDemoModCalisma+0x4e4>)
 800676e:	f002 fe24 	bl	80093ba <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006772:	4b9a      	ldr	r3, [pc, #616]	; (80069dc <checkDemoModCalisma+0x4e8>)
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006778:	2104      	movs	r1, #4
 800677a:	4896      	ldr	r0, [pc, #600]	; (80069d4 <checkDemoModCalisma+0x4e0>)
 800677c:	f002 fe06 	bl	800938c <HAL_GPIO_ReadPin>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d10d      	bne.n	80067a2 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006786:	2201      	movs	r2, #1
 8006788:	2180      	movs	r1, #128	; 0x80
 800678a:	4895      	ldr	r0, [pc, #596]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 800678c:	f002 fe15 	bl	80093ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006790:	2201      	movs	r2, #1
 8006792:	2120      	movs	r1, #32
 8006794:	4892      	ldr	r0, [pc, #584]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 8006796:	f002 fe10 	bl	80093ba <HAL_GPIO_WritePin>
			timer3 = millis;
 800679a:	4b92      	ldr	r3, [pc, #584]	; (80069e4 <checkDemoModCalisma+0x4f0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a92      	ldr	r2, [pc, #584]	; (80069e8 <checkDemoModCalisma+0x4f4>)
 80067a0:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067a2:	4b90      	ldr	r3, [pc, #576]	; (80069e4 <checkDemoModCalisma+0x4f0>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b90      	ldr	r3, [pc, #576]	; (80069e8 <checkDemoModCalisma+0x4f4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d909      	bls.n	80067c4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067b0:	2200      	movs	r2, #0
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	488a      	ldr	r0, [pc, #552]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 80067b6:	f002 fe00 	bl	80093ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2120      	movs	r1, #32
 80067be:	4888      	ldr	r0, [pc, #544]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 80067c0:	f002 fdfb 	bl	80093ba <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80067c4:	2102      	movs	r1, #2
 80067c6:	4883      	ldr	r0, [pc, #524]	; (80069d4 <checkDemoModCalisma+0x4e0>)
 80067c8:	f002 fde0 	bl	800938c <HAL_GPIO_ReadPin>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d108      	bne.n	80067e4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80067d2:	2201      	movs	r2, #1
 80067d4:	2140      	movs	r1, #64	; 0x40
 80067d6:	4882      	ldr	r0, [pc, #520]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 80067d8:	f002 fdef 	bl	80093ba <HAL_GPIO_WritePin>
			timer3 = millis;
 80067dc:	4b81      	ldr	r3, [pc, #516]	; (80069e4 <checkDemoModCalisma+0x4f0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a81      	ldr	r2, [pc, #516]	; (80069e8 <checkDemoModCalisma+0x4f4>)
 80067e2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067e4:	4b7f      	ldr	r3, [pc, #508]	; (80069e4 <checkDemoModCalisma+0x4f0>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b7f      	ldr	r3, [pc, #508]	; (80069e8 <checkDemoModCalisma+0x4f4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d904      	bls.n	80067fc <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2140      	movs	r1, #64	; 0x40
 80067f6:	487a      	ldr	r0, [pc, #488]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 80067f8:	f002 fddf 	bl	80093ba <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80067fc:	4b7b      	ldr	r3, [pc, #492]	; (80069ec <checkDemoModCalisma+0x4f8>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d058      	beq.n	80068b6 <checkDemoModCalisma+0x3c2>
 8006804:	4b7a      	ldr	r3, [pc, #488]	; (80069f0 <checkDemoModCalisma+0x4fc>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d054      	beq.n	80068b6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800680c:	4b79      	ldr	r3, [pc, #484]	; (80069f4 <checkDemoModCalisma+0x500>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	4b77      	ldr	r3, [pc, #476]	; (80069f4 <checkDemoModCalisma+0x500>)
 8006816:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006818:	4b76      	ldr	r3, [pc, #472]	; (80069f4 <checkDemoModCalisma+0x500>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b09      	cmp	r3, #9
 800681e:	d908      	bls.n	8006832 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006820:	4b74      	ldr	r3, [pc, #464]	; (80069f4 <checkDemoModCalisma+0x500>)
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006826:	4b74      	ldr	r3, [pc, #464]	; (80069f8 <checkDemoModCalisma+0x504>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	b2da      	uxtb	r2, r3
 800682e:	4b72      	ldr	r3, [pc, #456]	; (80069f8 <checkDemoModCalisma+0x504>)
 8006830:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006832:	4b71      	ldr	r3, [pc, #452]	; (80069f8 <checkDemoModCalisma+0x504>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b09      	cmp	r3, #9
 8006838:	d908      	bls.n	800684c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800683a:	4b6f      	ldr	r3, [pc, #444]	; (80069f8 <checkDemoModCalisma+0x504>)
 800683c:	2200      	movs	r2, #0
 800683e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006840:	4b6e      	ldr	r3, [pc, #440]	; (80069fc <checkDemoModCalisma+0x508>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	4b6c      	ldr	r3, [pc, #432]	; (80069fc <checkDemoModCalisma+0x508>)
 800684a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800684c:	4b6b      	ldr	r3, [pc, #428]	; (80069fc <checkDemoModCalisma+0x508>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b09      	cmp	r3, #9
 8006852:	d908      	bls.n	8006866 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006854:	4b69      	ldr	r3, [pc, #420]	; (80069fc <checkDemoModCalisma+0x508>)
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800685a:	4b69      	ldr	r3, [pc, #420]	; (8006a00 <checkDemoModCalisma+0x50c>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	3301      	adds	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	4b67      	ldr	r3, [pc, #412]	; (8006a00 <checkDemoModCalisma+0x50c>)
 8006864:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006866:	4b66      	ldr	r3, [pc, #408]	; (8006a00 <checkDemoModCalisma+0x50c>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b09      	cmp	r3, #9
 800686c:	d908      	bls.n	8006880 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800686e:	4b64      	ldr	r3, [pc, #400]	; (8006a00 <checkDemoModCalisma+0x50c>)
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006874:	4b63      	ldr	r3, [pc, #396]	; (8006a04 <checkDemoModCalisma+0x510>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	b2da      	uxtb	r2, r3
 800687c:	4b61      	ldr	r3, [pc, #388]	; (8006a04 <checkDemoModCalisma+0x510>)
 800687e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006880:	4b60      	ldr	r3, [pc, #384]	; (8006a04 <checkDemoModCalisma+0x510>)
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	4b60      	ldr	r3, [pc, #384]	; (8006a08 <checkDemoModCalisma+0x514>)
 8006886:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800688a:	4b5d      	ldr	r3, [pc, #372]	; (8006a00 <checkDemoModCalisma+0x50c>)
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	4b5e      	ldr	r3, [pc, #376]	; (8006a08 <checkDemoModCalisma+0x514>)
 8006890:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006892:	4b5a      	ldr	r3, [pc, #360]	; (80069fc <checkDemoModCalisma+0x508>)
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	4b5c      	ldr	r3, [pc, #368]	; (8006a08 <checkDemoModCalisma+0x514>)
 8006898:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800689a:	4b57      	ldr	r3, [pc, #348]	; (80069f8 <checkDemoModCalisma+0x504>)
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	4b5a      	ldr	r3, [pc, #360]	; (8006a08 <checkDemoModCalisma+0x514>)
 80068a0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80068a2:	4b54      	ldr	r3, [pc, #336]	; (80069f4 <checkDemoModCalisma+0x500>)
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	4b58      	ldr	r3, [pc, #352]	; (8006a08 <checkDemoModCalisma+0x514>)
 80068a8:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80068aa:	4b58      	ldr	r3, [pc, #352]	; (8006a0c <checkDemoModCalisma+0x518>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80068b0:	4b4f      	ldr	r3, [pc, #316]	; (80069f0 <checkDemoModCalisma+0x4fc>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80068b6:	4b56      	ldr	r3, [pc, #344]	; (8006a10 <checkDemoModCalisma+0x51c>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 8087 	bne.w	80069ce <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80068c0:	4a54      	ldr	r2, [pc, #336]	; (8006a14 <checkDemoModCalisma+0x520>)
 80068c2:	2101      	movs	r1, #1
 80068c4:	2002      	movs	r0, #2
 80068c6:	f001 fa3b 	bl	8007d40 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80068ca:	4a53      	ldr	r2, [pc, #332]	; (8006a18 <checkDemoModCalisma+0x524>)
 80068cc:	2101      	movs	r1, #1
 80068ce:	2001      	movs	r0, #1
 80068d0:	f001 fa36 	bl	8007d40 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80068d4:	4b4b      	ldr	r3, [pc, #300]	; (8006a04 <checkDemoModCalisma+0x510>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	220a      	movs	r2, #10
 80068da:	4950      	ldr	r1, [pc, #320]	; (8006a1c <checkDemoModCalisma+0x528>)
 80068dc:	4618      	mov	r0, r3
 80068de:	f005 fd81 	bl	800c3e4 <itoa>
			lcd_print(2,12,snum);
 80068e2:	4a4e      	ldr	r2, [pc, #312]	; (8006a1c <checkDemoModCalisma+0x528>)
 80068e4:	210c      	movs	r1, #12
 80068e6:	2002      	movs	r0, #2
 80068e8:	f001 fa2a 	bl	8007d40 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80068ec:	4b44      	ldr	r3, [pc, #272]	; (8006a00 <checkDemoModCalisma+0x50c>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	220a      	movs	r2, #10
 80068f2:	494a      	ldr	r1, [pc, #296]	; (8006a1c <checkDemoModCalisma+0x528>)
 80068f4:	4618      	mov	r0, r3
 80068f6:	f005 fd75 	bl	800c3e4 <itoa>
			lcd_print(2,13,snum);
 80068fa:	4a48      	ldr	r2, [pc, #288]	; (8006a1c <checkDemoModCalisma+0x528>)
 80068fc:	210d      	movs	r1, #13
 80068fe:	2002      	movs	r0, #2
 8006900:	f001 fa1e 	bl	8007d40 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006904:	4b3d      	ldr	r3, [pc, #244]	; (80069fc <checkDemoModCalisma+0x508>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	220a      	movs	r2, #10
 800690a:	4944      	ldr	r1, [pc, #272]	; (8006a1c <checkDemoModCalisma+0x528>)
 800690c:	4618      	mov	r0, r3
 800690e:	f005 fd69 	bl	800c3e4 <itoa>
			lcd_print(2,14,snum);
 8006912:	4a42      	ldr	r2, [pc, #264]	; (8006a1c <checkDemoModCalisma+0x528>)
 8006914:	210e      	movs	r1, #14
 8006916:	2002      	movs	r0, #2
 8006918:	f001 fa12 	bl	8007d40 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800691c:	4b36      	ldr	r3, [pc, #216]	; (80069f8 <checkDemoModCalisma+0x504>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	220a      	movs	r2, #10
 8006922:	493e      	ldr	r1, [pc, #248]	; (8006a1c <checkDemoModCalisma+0x528>)
 8006924:	4618      	mov	r0, r3
 8006926:	f005 fd5d 	bl	800c3e4 <itoa>
			lcd_print(2,15,snum);
 800692a:	4a3c      	ldr	r2, [pc, #240]	; (8006a1c <checkDemoModCalisma+0x528>)
 800692c:	210f      	movs	r1, #15
 800692e:	2002      	movs	r0, #2
 8006930:	f001 fa06 	bl	8007d40 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006934:	4b2f      	ldr	r3, [pc, #188]	; (80069f4 <checkDemoModCalisma+0x500>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	220a      	movs	r2, #10
 800693a:	4938      	ldr	r1, [pc, #224]	; (8006a1c <checkDemoModCalisma+0x528>)
 800693c:	4618      	mov	r0, r3
 800693e:	f005 fd51 	bl	800c3e4 <itoa>
			lcd_print(2,16,snum);
 8006942:	4a36      	ldr	r2, [pc, #216]	; (8006a1c <checkDemoModCalisma+0x528>)
 8006944:	2110      	movs	r1, #16
 8006946:	2002      	movs	r0, #2
 8006948:	f001 f9fa 	bl	8007d40 <lcd_print>
			mesajYazildi=1;
 800694c:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <checkDemoModCalisma+0x52c>)
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006952:	e03c      	b.n	80069ce <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006954:	4b33      	ldr	r3, [pc, #204]	; (8006a24 <checkDemoModCalisma+0x530>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d003      	beq.n	8006964 <checkDemoModCalisma+0x470>
 800695c:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <checkDemoModCalisma+0x51c>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d134      	bne.n	80069ce <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006964:	2200      	movs	r2, #0
 8006966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800696a:	481b      	ldr	r0, [pc, #108]	; (80069d8 <checkDemoModCalisma+0x4e4>)
 800696c:	f002 fd25 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006970:	2200      	movs	r2, #0
 8006972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006976:	4818      	ldr	r0, [pc, #96]	; (80069d8 <checkDemoModCalisma+0x4e4>)
 8006978:	f002 fd1f 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800697c:	2200      	movs	r2, #0
 800697e:	2104      	movs	r1, #4
 8006980:	4815      	ldr	r0, [pc, #84]	; (80069d8 <checkDemoModCalisma+0x4e4>)
 8006982:	f002 fd1a 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006986:	2200      	movs	r2, #0
 8006988:	2102      	movs	r1, #2
 800698a:	4813      	ldr	r0, [pc, #76]	; (80069d8 <checkDemoModCalisma+0x4e4>)
 800698c:	f002 fd15 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006990:	2200      	movs	r2, #0
 8006992:	2101      	movs	r1, #1
 8006994:	4810      	ldr	r0, [pc, #64]	; (80069d8 <checkDemoModCalisma+0x4e4>)
 8006996:	f002 fd10 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800699a:	2200      	movs	r2, #0
 800699c:	2120      	movs	r1, #32
 800699e:	480d      	ldr	r0, [pc, #52]	; (80069d4 <checkDemoModCalisma+0x4e0>)
 80069a0:	f002 fd0b 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80069a4:	2200      	movs	r2, #0
 80069a6:	2110      	movs	r1, #16
 80069a8:	480a      	ldr	r0, [pc, #40]	; (80069d4 <checkDemoModCalisma+0x4e0>)
 80069aa:	f002 fd06 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80069ae:	2200      	movs	r2, #0
 80069b0:	2180      	movs	r1, #128	; 0x80
 80069b2:	480b      	ldr	r0, [pc, #44]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 80069b4:	f002 fd01 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80069b8:	2200      	movs	r2, #0
 80069ba:	2140      	movs	r1, #64	; 0x40
 80069bc:	4808      	ldr	r0, [pc, #32]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 80069be:	f002 fcfc 	bl	80093ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069c2:	2200      	movs	r2, #0
 80069c4:	2120      	movs	r1, #32
 80069c6:	4806      	ldr	r0, [pc, #24]	; (80069e0 <checkDemoModCalisma+0x4ec>)
 80069c8:	f002 fcf7 	bl	80093ba <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80069cc:	e7ff      	b.n	80069ce <checkDemoModCalisma+0x4da>
 80069ce:	bf00      	nop
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40011000 	.word	0x40011000
 80069d8:	40010c00 	.word	0x40010c00
 80069dc:	2000028d 	.word	0x2000028d
 80069e0:	40010800 	.word	0x40010800
 80069e4:	20000210 	.word	0x20000210
 80069e8:	20000220 	.word	0x20000220
 80069ec:	2000028c 	.word	0x2000028c
 80069f0:	20000272 	.word	0x20000272
 80069f4:	20000231 	.word	0x20000231
 80069f8:	20000232 	.word	0x20000232
 80069fc:	20000000 	.word	0x20000000
 8006a00:	20000001 	.word	0x20000001
 8006a04:	20000233 	.word	0x20000233
 8006a08:	20000118 	.word	0x20000118
 8006a0c:	20000260 	.word	0x20000260
 8006a10:	20000251 	.word	0x20000251
 8006a14:	0800dbbc 	.word	0x0800dbbc
 8006a18:	0800dbc8 	.word	0x0800dbc8
 8006a1c:	20000188 	.word	0x20000188
 8006a20:	20000268 	.word	0x20000268
 8006a24:	20000252 	.word	0x20000252

08006a28 <mainLoop>:

void mainLoop() {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006a2e:	f7fe f923 	bl	8004c78 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006a32:	2101      	movs	r1, #1
 8006a34:	48ac      	ldr	r0, [pc, #688]	; (8006ce8 <mainLoop+0x2c0>)
 8006a36:	f002 fca9 	bl	800938c <HAL_GPIO_ReadPin>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d136      	bne.n	8006aae <mainLoop+0x86>
 8006a40:	2108      	movs	r1, #8
 8006a42:	48aa      	ldr	r0, [pc, #680]	; (8006cec <mainLoop+0x2c4>)
 8006a44:	f002 fca2 	bl	800938c <HAL_GPIO_ReadPin>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d12f      	bne.n	8006aae <mainLoop+0x86>
 8006a4e:	2102      	movs	r1, #2
 8006a50:	48a5      	ldr	r0, [pc, #660]	; (8006ce8 <mainLoop+0x2c0>)
 8006a52:	f002 fc9b 	bl	800938c <HAL_GPIO_ReadPin>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d128      	bne.n	8006aae <mainLoop+0x86>
 8006a5c:	2104      	movs	r1, #4
 8006a5e:	48a2      	ldr	r0, [pc, #648]	; (8006ce8 <mainLoop+0x2c0>)
 8006a60:	f002 fc94 	bl	800938c <HAL_GPIO_ReadPin>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d121      	bne.n	8006aae <mainLoop+0x86>
 8006a6a:	2108      	movs	r1, #8
 8006a6c:	489e      	ldr	r0, [pc, #632]	; (8006ce8 <mainLoop+0x2c0>)
 8006a6e:	f002 fc8d 	bl	800938c <HAL_GPIO_ReadPin>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11a      	bne.n	8006aae <mainLoop+0x86>
 8006a78:	2180      	movs	r1, #128	; 0x80
 8006a7a:	489c      	ldr	r0, [pc, #624]	; (8006cec <mainLoop+0x2c4>)
 8006a7c:	f002 fc86 	bl	800938c <HAL_GPIO_ReadPin>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d113      	bne.n	8006aae <mainLoop+0x86>
 8006a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a8a:	4898      	ldr	r0, [pc, #608]	; (8006cec <mainLoop+0x2c4>)
 8006a8c:	f002 fc7e 	bl	800938c <HAL_GPIO_ReadPin>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d10b      	bne.n	8006aae <mainLoop+0x86>
 8006a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a9a:	4894      	ldr	r0, [pc, #592]	; (8006cec <mainLoop+0x2c4>)
 8006a9c:	f002 fc76 	bl	800938c <HAL_GPIO_ReadPin>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d103      	bne.n	8006aae <mainLoop+0x86>
			butonKontrol=0;
 8006aa6:	4b92      	ldr	r3, [pc, #584]	; (8006cf0 <mainLoop+0x2c8>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	e003      	b.n	8006ab6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006aae:	4b91      	ldr	r3, [pc, #580]	; (8006cf4 <mainLoop+0x2cc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a91      	ldr	r2, [pc, #580]	; (8006cf8 <mainLoop+0x2d0>)
 8006ab4:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006ab6:	4b91      	ldr	r3, [pc, #580]	; (8006cfc <mainLoop+0x2d4>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d03a      	beq.n	8006b34 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006abe:	bf00      	nop
 8006ac0:	488f      	ldr	r0, [pc, #572]	; (8006d00 <mainLoop+0x2d8>)
 8006ac2:	f003 fa8c 	bl	8009fde <HAL_I2C_GetError>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d0f9      	beq.n	8006ac0 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006acc:	bf00      	nop
 8006ace:	488c      	ldr	r0, [pc, #560]	; (8006d00 <mainLoop+0x2d8>)
 8006ad0:	f003 fa78 	bl	8009fc4 <HAL_I2C_GetState>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d1f9      	bne.n	8006ace <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ada:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ade:	9302      	str	r3, [sp, #8]
 8006ae0:	236e      	movs	r3, #110	; 0x6e
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	4b87      	ldr	r3, [pc, #540]	; (8006d04 <mainLoop+0x2dc>)
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	236e      	movs	r3, #110	; 0x6e
 8006aea:	2200      	movs	r2, #0
 8006aec:	21a0      	movs	r1, #160	; 0xa0
 8006aee:	4884      	ldr	r0, [pc, #528]	; (8006d00 <mainLoop+0x2d8>)
 8006af0:	f002 ff06 	bl	8009900 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006af8:	f001 fe78 	bl	80087ec <HAL_Delay>

		  hafizaYaz=0;
 8006afc:	4b7f      	ldr	r3, [pc, #508]	; (8006cfc <mainLoop+0x2d4>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006b02:	4b81      	ldr	r3, [pc, #516]	; (8006d08 <mainLoop+0x2e0>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006b0a:	4a80      	ldr	r2, [pc, #512]	; (8006d0c <mainLoop+0x2e4>)
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	2002      	movs	r0, #2
 8006b10:	f001 f916 	bl	8007d40 <lcd_print>
 8006b14:	e008      	b.n	8006b28 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006b16:	4b7c      	ldr	r3, [pc, #496]	; (8006d08 <mainLoop+0x2e0>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d104      	bne.n	8006b28 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006b1e:	4a7c      	ldr	r2, [pc, #496]	; (8006d10 <mainLoop+0x2e8>)
 8006b20:	2101      	movs	r1, #1
 8006b22:	2002      	movs	r0, #2
 8006b24:	f001 f90c 	bl	8007d40 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b2c:	f001 fe5e 	bl	80087ec <HAL_Delay>
		  lcd_clear();
 8006b30:	f001 f932 	bl	8007d98 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006b34:	4b77      	ldr	r3, [pc, #476]	; (8006d14 <mainLoop+0x2ec>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	f083 0301 	eor.w	r3, r3, #1
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d06d      	beq.n	8006c1e <mainLoop+0x1f6>
 8006b42:	486f      	ldr	r0, [pc, #444]	; (8006d00 <mainLoop+0x2d8>)
 8006b44:	f003 fa3e 	bl	8009fc4 <HAL_I2C_GetState>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d167      	bne.n	8006c1e <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006b4e:	4b72      	ldr	r3, [pc, #456]	; (8006d18 <mainLoop+0x2f0>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	f083 0301 	eor.w	r3, r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d044      	beq.n	8006be6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006b5c:	4a6f      	ldr	r2, [pc, #444]	; (8006d1c <mainLoop+0x2f4>)
 8006b5e:	2101      	movs	r1, #1
 8006b60:	2001      	movs	r0, #1
 8006b62:	f001 f8ed 	bl	8007d40 <lcd_print>
			  if(dilSecim==0) {
 8006b66:	4b68      	ldr	r3, [pc, #416]	; (8006d08 <mainLoop+0x2e0>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d105      	bne.n	8006b7a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006b6e:	4a6c      	ldr	r2, [pc, #432]	; (8006d20 <mainLoop+0x2f8>)
 8006b70:	2101      	movs	r1, #1
 8006b72:	2002      	movs	r0, #2
 8006b74:	f001 f8e4 	bl	8007d40 <lcd_print>
 8006b78:	e008      	b.n	8006b8c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006b7a:	4b63      	ldr	r3, [pc, #396]	; (8006d08 <mainLoop+0x2e0>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d104      	bne.n	8006b8c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006b82:	4a68      	ldr	r2, [pc, #416]	; (8006d24 <mainLoop+0x2fc>)
 8006b84:	2101      	movs	r1, #1
 8006b86:	2002      	movs	r0, #2
 8006b88:	f001 f8da 	bl	8007d40 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b90:	f001 fe2c 	bl	80087ec <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b94:	bf00      	nop
 8006b96:	485a      	ldr	r0, [pc, #360]	; (8006d00 <mainLoop+0x2d8>)
 8006b98:	f003 fa21 	bl	8009fde <HAL_I2C_GetError>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d0f9      	beq.n	8006b96 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006ba2:	e003      	b.n	8006bac <mainLoop+0x184>
				  HAL_Delay(1000);
 8006ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ba8:	f001 fe20 	bl	80087ec <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006bac:	4854      	ldr	r0, [pc, #336]	; (8006d00 <mainLoop+0x2d8>)
 8006bae:	f003 fa09 	bl	8009fc4 <HAL_I2C_GetState>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d1f5      	bne.n	8006ba4 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006bb8:	4b53      	ldr	r3, [pc, #332]	; (8006d08 <mainLoop+0x2e0>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d105      	bne.n	8006bcc <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006bc0:	4a59      	ldr	r2, [pc, #356]	; (8006d28 <mainLoop+0x300>)
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	2002      	movs	r0, #2
 8006bc6:	f001 f8bb 	bl	8007d40 <lcd_print>
 8006bca:	e008      	b.n	8006bde <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006bcc:	4b4e      	ldr	r3, [pc, #312]	; (8006d08 <mainLoop+0x2e0>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d104      	bne.n	8006bde <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006bd4:	4a55      	ldr	r2, [pc, #340]	; (8006d2c <mainLoop+0x304>)
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	2002      	movs	r0, #2
 8006bda:	f001 f8b1 	bl	8007d40 <lcd_print>
			  }

			  ilkOkuma=1;
 8006bde:	4b4e      	ldr	r3, [pc, #312]	; (8006d18 <mainLoop+0x2f0>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	e014      	b.n	8006c10 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006be6:	4b48      	ldr	r3, [pc, #288]	; (8006d08 <mainLoop+0x2e0>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d105      	bne.n	8006bfa <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006bee:	4a50      	ldr	r2, [pc, #320]	; (8006d30 <mainLoop+0x308>)
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	2002      	movs	r0, #2
 8006bf4:	f001 f8a4 	bl	8007d40 <lcd_print>
 8006bf8:	e008      	b.n	8006c0c <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006bfa:	4b43      	ldr	r3, [pc, #268]	; (8006d08 <mainLoop+0x2e0>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d104      	bne.n	8006c0c <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006c02:	4a4c      	ldr	r2, [pc, #304]	; (8006d34 <mainLoop+0x30c>)
 8006c04:	2101      	movs	r1, #1
 8006c06:	2002      	movs	r0, #2
 8006c08:	f001 f89a 	bl	8007d40 <lcd_print>
			  }
			  lcd_clear();
 8006c0c:	f001 f8c4 	bl	8007d98 <lcd_clear>
		  }

		  lcd_clear();
 8006c10:	f001 f8c2 	bl	8007d98 <lcd_clear>

		  eepromKontrol();
 8006c14:	f7f9 fb0e 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006c18:	4b3e      	ldr	r3, [pc, #248]	; (8006d14 <mainLoop+0x2ec>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006c1e:	4b46      	ldr	r3, [pc, #280]	; (8006d38 <mainLoop+0x310>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d11c      	bne.n	8006c60 <mainLoop+0x238>
 8006c26:	4b45      	ldr	r3, [pc, #276]	; (8006d3c <mainLoop+0x314>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f083 0301 	eor.w	r3, r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d015      	beq.n	8006c60 <mainLoop+0x238>
 8006c34:	4b42      	ldr	r3, [pc, #264]	; (8006d40 <mainLoop+0x318>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d111      	bne.n	8006c60 <mainLoop+0x238>
			lcd_clear();
 8006c3c:	f001 f8ac 	bl	8007d98 <lcd_clear>
			HAL_Delay(10);
 8006c40:	200a      	movs	r0, #10
 8006c42:	f001 fdd3 	bl	80087ec <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006c46:	4a3f      	ldr	r2, [pc, #252]	; (8006d44 <mainLoop+0x31c>)
 8006c48:	2101      	movs	r1, #1
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	f001 f878 	bl	8007d40 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006c50:	4a3d      	ldr	r2, [pc, #244]	; (8006d48 <mainLoop+0x320>)
 8006c52:	2101      	movs	r1, #1
 8006c54:	2002      	movs	r0, #2
 8006c56:	f001 f873 	bl	8007d40 <lcd_print>
			mesajYazildi=1;
 8006c5a:	4b38      	ldr	r3, [pc, #224]	; (8006d3c <mainLoop+0x314>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006c60:	4b35      	ldr	r3, [pc, #212]	; (8006d38 <mainLoop+0x310>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d112      	bne.n	8006c8e <mainLoop+0x266>
 8006c68:	2102      	movs	r1, #2
 8006c6a:	481f      	ldr	r0, [pc, #124]	; (8006ce8 <mainLoop+0x2c0>)
 8006c6c:	f002 fb8e 	bl	800938c <HAL_GPIO_ReadPin>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d10b      	bne.n	8006c8e <mainLoop+0x266>
 8006c76:	2104      	movs	r1, #4
 8006c78:	481b      	ldr	r0, [pc, #108]	; (8006ce8 <mainLoop+0x2c0>)
 8006c7a:	f002 fb87 	bl	800938c <HAL_GPIO_ReadPin>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d104      	bne.n	8006c8e <mainLoop+0x266>
			menuGiris=1;
 8006c84:	4b2c      	ldr	r3, [pc, #176]	; (8006d38 <mainLoop+0x310>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c8a:	f001 f885 	bl	8007d98 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c8e:	4b2a      	ldr	r3, [pc, #168]	; (8006d38 <mainLoop+0x310>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <mainLoop+0x272>
			menu();
 8006c96:	f7fa fabb 	bl	8001210 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c9e:	4813      	ldr	r0, [pc, #76]	; (8006cec <mainLoop+0x2c4>)
 8006ca0:	f002 fba3 	bl	80093ea <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ca8:	4828      	ldr	r0, [pc, #160]	; (8006d4c <mainLoop+0x324>)
 8006caa:	f002 fb6f 	bl	800938c <HAL_GPIO_ReadPin>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <mainLoop+0x2a2>
 8006cb4:	4b26      	ldr	r3, [pc, #152]	; (8006d50 <mainLoop+0x328>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f083 0301 	eor.w	r3, r3, #1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <mainLoop+0x2a2>
			stopVar=1;
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <mainLoop+0x32c>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	e002      	b.n	8006cd0 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006cca:	4b22      	ldr	r3, [pc, #136]	; (8006d54 <mainLoop+0x32c>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006cd0:	f7fd ffe8 	bl	8004ca4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006cd4:	f7fe f81a 	bl	8004d0c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006cd8:	f7fe f85e 	bl	8004d98 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006cdc:	f7fe f8ae 	bl	8004e3c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006ce0:	f7ff fc08 	bl	80064f4 <checkDemoModCalisma>
		checkLCDBacklight();
 8006ce4:	e6a3      	b.n	8006a2e <mainLoop+0x6>
 8006ce6:	bf00      	nop
 8006ce8:	40010800 	.word	0x40010800
 8006cec:	40011000 	.word	0x40011000
 8006cf0:	20000263 	.word	0x20000263
 8006cf4:	20000210 	.word	0x20000210
 8006cf8:	2000022c 	.word	0x2000022c
 8006cfc:	20000260 	.word	0x20000260
 8006d00:	200003bc 	.word	0x200003bc
 8006d04:	20000118 	.word	0x20000118
 8006d08:	20000255 	.word	0x20000255
 8006d0c:	0800dbdc 	.word	0x0800dbdc
 8006d10:	0800dbf0 	.word	0x0800dbf0
 8006d14:	20000261 	.word	0x20000261
 8006d18:	20000262 	.word	0x20000262
 8006d1c:	0800dc04 	.word	0x0800dc04
 8006d20:	0800dc18 	.word	0x0800dc18
 8006d24:	0800dc2c 	.word	0x0800dc2c
 8006d28:	0800dc40 	.word	0x0800dc40
 8006d2c:	0800dc54 	.word	0x0800dc54
 8006d30:	0800dc68 	.word	0x0800dc68
 8006d34:	0800dc7c 	.word	0x0800dc7c
 8006d38:	20000251 	.word	0x20000251
 8006d3c:	20000268 	.word	0x20000268
 8006d40:	20000252 	.word	0x20000252
 8006d44:	0800dc90 	.word	0x0800dc90
 8006d48:	0800dca4 	.word	0x0800dca4
 8006d4c:	40010c00 	.word	0x40010c00
 8006d50:	20000289 	.word	0x20000289
 8006d54:	20000286 	.word	0x20000286

08006d58 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006d58:	b590      	push	{r4, r7, lr}
 8006d5a:	b089      	sub	sp, #36	; 0x24
 8006d5c:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006d5e:	2001      	movs	r0, #1
 8006d60:	f001 f84c 	bl	8007dfc <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006d64:	2305      	movs	r3, #5
 8006d66:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006d68:	2303      	movs	r3, #3
 8006d6a:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006d70:	4ba6      	ldr	r3, [pc, #664]	; (800700c <takeMachineID+0x2b4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	603b      	str	r3, [r7, #0]

    resetEEPROM4Wifi(1);
 8006d76:	2001      	movs	r0, #1
 8006d78:	f7f9 fda2 	bl	80008c0 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006d7c:	2064      	movs	r0, #100	; 0x64
 8006d7e:	f001 fd35 	bl	80087ec <HAL_Delay>

    printTemplate(1, 0);
 8006d82:	2100      	movs	r1, #0
 8006d84:	2001      	movs	r0, #1
 8006d86:	f7fa f8b7 	bl	8000ef8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d8a:	2108      	movs	r1, #8
 8006d8c:	48a0      	ldr	r0, [pc, #640]	; (8007010 <takeMachineID+0x2b8>)
 8006d8e:	f002 fafd 	bl	800938c <HAL_GPIO_ReadPin>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d138      	bne.n	8006e0a <takeMachineID+0xb2>
        	lcd_cursor(0);
 8006d98:	2000      	movs	r0, #0
 8006d9a:	f001 f82f 	bl	8007dfc <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006d9e:	489d      	ldr	r0, [pc, #628]	; (8007014 <takeMachineID+0x2bc>)
 8006da0:	f7f9 fa40 	bl	8000224 <strlen>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b0d      	cmp	r3, #13
 8006da8:	d010      	beq.n	8006dcc <takeMachineID+0x74>
        		lcd_clear();
 8006daa:	f000 fff5 	bl	8007d98 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006dae:	4a9a      	ldr	r2, [pc, #616]	; (8007018 <takeMachineID+0x2c0>)
 8006db0:	2101      	movs	r1, #1
 8006db2:	2001      	movs	r0, #1
 8006db4:	f000 ffc4 	bl	8007d40 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006db8:	4a98      	ldr	r2, [pc, #608]	; (800701c <takeMachineID+0x2c4>)
 8006dba:	2101      	movs	r1, #1
 8006dbc:	2002      	movs	r0, #2
 8006dbe:	f000 ffbf 	bl	8007d40 <lcd_print>
        		HAL_Delay(1200);
 8006dc2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006dc6:	f001 fd11 	bl	80087ec <HAL_Delay>
        		goto mainSection;
 8006dca:	e7c8      	b.n	8006d5e <takeMachineID+0x6>
        	} else {
        		memcpy(&eepromData[idStartPos], machineIDInt, machineIDCharacterLimit); //destination, source, size
 8006dcc:	4b8f      	ldr	r3, [pc, #572]	; (800700c <takeMachineID+0x2b4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a93      	ldr	r2, [pc, #588]	; (8007020 <takeMachineID+0x2c8>)
 8006dd2:	4413      	add	r3, r2
 8006dd4:	4a93      	ldr	r2, [pc, #588]	; (8007024 <takeMachineID+0x2cc>)
 8006dd6:	6814      	ldr	r4, [r2, #0]
 8006dd8:	6850      	ldr	r0, [r2, #4]
 8006dda:	6891      	ldr	r1, [r2, #8]
 8006ddc:	601c      	str	r4, [r3, #0]
 8006dde:	6058      	str	r0, [r3, #4]
 8006de0:	6099      	str	r1, [r3, #8]
 8006de2:	7b12      	ldrb	r2, [r2, #12]
 8006de4:	731a      	strb	r2, [r3, #12]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006de6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006dea:	9302      	str	r3, [sp, #8]
 8006dec:	236e      	movs	r3, #110	; 0x6e
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	4b8b      	ldr	r3, [pc, #556]	; (8007020 <takeMachineID+0x2c8>)
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	236e      	movs	r3, #110	; 0x6e
 8006df6:	2200      	movs	r2, #0
 8006df8:	21a0      	movs	r1, #160	; 0xa0
 8006dfa:	488b      	ldr	r0, [pc, #556]	; (8007028 <takeMachineID+0x2d0>)
 8006dfc:	f002 fd80 	bl	8009900 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e04:	f001 fcf2 	bl	80087ec <HAL_Delay>

            	break;
 8006e08:	e13e      	b.n	8007088 <takeMachineID+0x330>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	4880      	ldr	r0, [pc, #512]	; (8007010 <takeMachineID+0x2b8>)
 8006e0e:	f002 fabd 	bl	800938c <HAL_GPIO_ReadPin>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d111      	bne.n	8006e3c <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	d102      	bne.n	8006e24 <takeMachineID+0xcc>
        		cursorPosition = 10;
 8006e1e:	230a      	movs	r3, #10
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	e008      	b.n	8006e36 <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b0e      	cmp	r3, #14
 8006e28:	d102      	bne.n	8006e30 <takeMachineID+0xd8>
                cursorPosition = 3;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	e002      	b.n	8006e36 <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	3301      	adds	r3, #1
 8006e34:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006e36:	2096      	movs	r0, #150	; 0x96
 8006e38:	f001 fcd8 	bl	80087ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006e3c:	2108      	movs	r1, #8
 8006e3e:	487b      	ldr	r0, [pc, #492]	; (800702c <takeMachineID+0x2d4>)
 8006e40:	f002 faa4 	bl	800938c <HAL_GPIO_ReadPin>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d111      	bne.n	8006e6e <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d102      	bne.n	8006e56 <takeMachineID+0xfe>
                cursorPosition = 14;
 8006e50:	230e      	movs	r3, #14
 8006e52:	60bb      	str	r3, [r7, #8]
 8006e54:	e008      	b.n	8006e68 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b0a      	cmp	r3, #10
 8006e5a:	d102      	bne.n	8006e62 <takeMachineID+0x10a>
            	cursorPosition = 7;
 8006e5c:	2307      	movs	r3, #7
 8006e5e:	60bb      	str	r3, [r7, #8]
 8006e60:	e002      	b.n	8006e68 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006e68:	2096      	movs	r0, #150	; 0x96
 8006e6a:	f001 fcbf 	bl	80087ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e6e:	2102      	movs	r1, #2
 8006e70:	4867      	ldr	r0, [pc, #412]	; (8007010 <takeMachineID+0x2b8>)
 8006e72:	f002 fa8b 	bl	800938c <HAL_GPIO_ReadPin>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	f040 80ab 	bne.w	8006fd4 <takeMachineID+0x27c>
        	if(cursorPosition == 3) {
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d10a      	bne.n	8006e9a <takeMachineID+0x142>
        		machineID[arrayPos] = '0';
 8006e84:	4a63      	ldr	r2, [pc, #396]	; (8007014 <takeMachineID+0x2bc>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	2230      	movs	r2, #48	; 0x30
 8006e8c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006e8e:	4a64      	ldr	r2, [pc, #400]	; (8007020 <takeMachineID+0x2c8>)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	4413      	add	r3, r2
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e07c      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 4) {
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d10a      	bne.n	8006eb6 <takeMachineID+0x15e>
        		machineID[arrayPos] = '1';
 8006ea0:	4a5c      	ldr	r2, [pc, #368]	; (8007014 <takeMachineID+0x2bc>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	2231      	movs	r2, #49	; 0x31
 8006ea8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006eaa:	4a5d      	ldr	r2, [pc, #372]	; (8007020 <takeMachineID+0x2c8>)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	4413      	add	r3, r2
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	701a      	strb	r2, [r3, #0]
 8006eb4:	e06e      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 5) {
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d10a      	bne.n	8006ed2 <takeMachineID+0x17a>
        		machineID[arrayPos] = '2';
 8006ebc:	4a55      	ldr	r2, [pc, #340]	; (8007014 <takeMachineID+0x2bc>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	2232      	movs	r2, #50	; 0x32
 8006ec4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006ec6:	4a56      	ldr	r2, [pc, #344]	; (8007020 <takeMachineID+0x2c8>)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	4413      	add	r3, r2
 8006ecc:	2202      	movs	r2, #2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	e060      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 6) {
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b06      	cmp	r3, #6
 8006ed6:	d10a      	bne.n	8006eee <takeMachineID+0x196>
        		machineID[arrayPos] = '3';
 8006ed8:	4a4e      	ldr	r2, [pc, #312]	; (8007014 <takeMachineID+0x2bc>)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	2233      	movs	r2, #51	; 0x33
 8006ee0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006ee2:	4a4f      	ldr	r2, [pc, #316]	; (8007020 <takeMachineID+0x2c8>)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	2203      	movs	r2, #3
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	e052      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 7) {
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b07      	cmp	r3, #7
 8006ef2:	d10a      	bne.n	8006f0a <takeMachineID+0x1b2>
        		machineID[arrayPos] = '4';
 8006ef4:	4a47      	ldr	r2, [pc, #284]	; (8007014 <takeMachineID+0x2bc>)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	2234      	movs	r2, #52	; 0x34
 8006efc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006efe:	4a48      	ldr	r2, [pc, #288]	; (8007020 <takeMachineID+0x2c8>)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	4413      	add	r3, r2
 8006f04:	2204      	movs	r2, #4
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e044      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 10) {
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b0a      	cmp	r3, #10
 8006f0e:	d10a      	bne.n	8006f26 <takeMachineID+0x1ce>
        		machineID[arrayPos] = '5';
 8006f10:	4a40      	ldr	r2, [pc, #256]	; (8007014 <takeMachineID+0x2bc>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	2235      	movs	r2, #53	; 0x35
 8006f18:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006f1a:	4a41      	ldr	r2, [pc, #260]	; (8007020 <takeMachineID+0x2c8>)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	4413      	add	r3, r2
 8006f20:	2205      	movs	r2, #5
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	e036      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 11) {
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b0b      	cmp	r3, #11
 8006f2a:	d10a      	bne.n	8006f42 <takeMachineID+0x1ea>
        		machineID[arrayPos] = '6';
 8006f2c:	4a39      	ldr	r2, [pc, #228]	; (8007014 <takeMachineID+0x2bc>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	2236      	movs	r2, #54	; 0x36
 8006f34:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006f36:	4a3a      	ldr	r2, [pc, #232]	; (8007020 <takeMachineID+0x2c8>)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	2206      	movs	r2, #6
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	e028      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 12) {
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b0c      	cmp	r3, #12
 8006f46:	d10a      	bne.n	8006f5e <takeMachineID+0x206>
        		machineID[arrayPos] = '7';
 8006f48:	4a32      	ldr	r2, [pc, #200]	; (8007014 <takeMachineID+0x2bc>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2237      	movs	r2, #55	; 0x37
 8006f50:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006f52:	4a33      	ldr	r2, [pc, #204]	; (8007020 <takeMachineID+0x2c8>)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	4413      	add	r3, r2
 8006f58:	2207      	movs	r2, #7
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e01a      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 13) {
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b0d      	cmp	r3, #13
 8006f62:	d10a      	bne.n	8006f7a <takeMachineID+0x222>
        		machineID[arrayPos] = '8';
 8006f64:	4a2b      	ldr	r2, [pc, #172]	; (8007014 <takeMachineID+0x2bc>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4413      	add	r3, r2
 8006f6a:	2238      	movs	r2, #56	; 0x38
 8006f6c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006f6e:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <takeMachineID+0x2c8>)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	4413      	add	r3, r2
 8006f74:	2208      	movs	r2, #8
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e00c      	b.n	8006f94 <takeMachineID+0x23c>
        	} else if(cursorPosition == 14) {
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b0e      	cmp	r3, #14
 8006f7e:	d109      	bne.n	8006f94 <takeMachineID+0x23c>
        		machineID[arrayPos] = '9';
 8006f80:	4a24      	ldr	r2, [pc, #144]	; (8007014 <takeMachineID+0x2bc>)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	2239      	movs	r2, #57	; 0x39
 8006f88:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006f8a:	4a25      	ldr	r2, [pc, #148]	; (8007020 <takeMachineID+0x2c8>)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	4413      	add	r3, r2
 8006f90:	2209      	movs	r2, #9
 8006f92:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	b2d9      	uxtb	r1, r3
 8006f98:	4a1e      	ldr	r2, [pc, #120]	; (8007014 <takeMachineID+0x2bc>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	f000 fee1 	bl	8007d6a <lcd_print_char>

        	writeLoc++;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3301      	adds	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	603b      	str	r3, [r7, #0]

        	machineID[arrayPos] = '\0';
 8006fba:	4a16      	ldr	r2, [pc, #88]	; (8007014 <takeMachineID+0x2bc>)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = '\0';
 8006fc4:	4a16      	ldr	r2, [pc, #88]	; (8007020 <takeMachineID+0x2c8>)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	4413      	add	r3, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]

        	HAL_Delay(150);
 8006fce:	2096      	movs	r0, #150	; 0x96
 8006fd0:	f001 fc0c 	bl	80087ec <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006fd4:	2104      	movs	r1, #4
 8006fd6:	480e      	ldr	r0, [pc, #56]	; (8007010 <takeMachineID+0x2b8>)
 8006fd8:	f002 f9d8 	bl	800938c <HAL_GPIO_ReadPin>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d14b      	bne.n	800707a <takeMachineID+0x322>
            if(strlen(machineID) >= 1) {
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <takeMachineID+0x2bc>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d044      	beq.n	8007074 <takeMachineID+0x31c>
                machineID[arrayPos] = '\0';
 8006fea:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <takeMachineID+0x2bc>)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4413      	add	r3, r2
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006ff4:	4a0a      	ldr	r2, [pc, #40]	; (8007020 <takeMachineID+0x2c8>)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b05      	cmp	r3, #5
 8007002:	dd15      	ble.n	8007030 <takeMachineID+0x2d8>
                	writeLoc--;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3b01      	subs	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e016      	b.n	800703a <takeMachineID+0x2e2>
 800700c:	20000004 	.word	0x20000004
 8007010:	40010800 	.word	0x40010800
 8007014:	20000190 	.word	0x20000190
 8007018:	0800dcb8 	.word	0x0800dcb8
 800701c:	0800dccc 	.word	0x0800dccc
 8007020:	20000118 	.word	0x20000118
 8007024:	200001d0 	.word	0x200001d0
 8007028:	200003bc 	.word	0x200003bc
 800702c:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b04      	cmp	r3, #4
 8007034:	dc01      	bgt.n	800703a <takeMachineID+0x2e2>
                	writeLoc = 5;
 8007036:	2305      	movs	r3, #5
 8007038:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	dd06      	ble.n	800704e <takeMachineID+0x2f6>
                	arrayPos--;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3b01      	subs	r3, #1
 8007044:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	3b01      	subs	r3, #1
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	e007      	b.n	800705e <takeMachineID+0x306>
                } else if(arrayPos < 0) {
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	da04      	bge.n	800705e <takeMachineID+0x306>
                	arrayPos = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007058:	4b0d      	ldr	r3, [pc, #52]	; (8007090 <takeMachineID+0x338>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	3304      	adds	r3, #4
 8007064:	b2db      	uxtb	r3, r3
 8007066:	4619      	mov	r1, r3
 8007068:	2001      	movs	r0, #1
 800706a:	f000 fe9f 	bl	8007dac <lcd_delete_char>
                HAL_Delay(50);
 800706e:	2032      	movs	r0, #50	; 0x32
 8007070:	f001 fbbc 	bl	80087ec <HAL_Delay>
            }

            HAL_Delay(150);
 8007074:	2096      	movs	r0, #150	; 0x96
 8007076:	f001 fbb9 	bl	80087ec <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	4619      	mov	r1, r3
 8007080:	2002      	movs	r0, #2
 8007082:	f000 fe3e 	bl	8007d02 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007086:	e680      	b.n	8006d8a <takeMachineID+0x32>
    }
}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	bd90      	pop	{r4, r7, pc}
 8007090:	20000004 	.word	0x20000004

08007094 <takeWifiSSID>:

void takeWifiSSID() {
 8007094:	b5b0      	push	{r4, r5, r7, lr}
 8007096:	b08a      	sub	sp, #40	; 0x28
 8007098:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 800709a:	2001      	movs	r0, #1
 800709c:	f000 feae 	bl	8007dfc <lcd_cursor>

    resetEEPROM4Wifi(2);
 80070a0:	2002      	movs	r0, #2
 80070a2:	f7f9 fc0d 	bl	80008c0 <resetEEPROM4Wifi>
    HAL_Delay(100);
 80070a6:	2064      	movs	r0, #100	; 0x64
 80070a8:	f001 fba0 	bl	80087ec <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80070b0:	2307      	movs	r3, #7
 80070b2:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80070b4:	2301      	movs	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80070b8:	2300      	movs	r3, #0
 80070ba:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80070bc:	4baa      	ldr	r3, [pc, #680]	; (8007368 <takeWifiSSID+0x2d4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80070c2:	2101      	movs	r1, #1
 80070c4:	2002      	movs	r0, #2
 80070c6:	f7f9 ff17 	bl	8000ef8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80070ca:	2108      	movs	r1, #8
 80070cc:	48a7      	ldr	r0, [pc, #668]	; (800736c <takeWifiSSID+0x2d8>)
 80070ce:	f002 f95d 	bl	800938c <HAL_GPIO_ReadPin>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d13c      	bne.n	8007152 <takeWifiSSID+0xbe>
            lcd_cursor(0);
 80070d8:	2000      	movs	r0, #0
 80070da:	f000 fe8f 	bl	8007dfc <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80070de:	48a4      	ldr	r0, [pc, #656]	; (8007370 <takeWifiSSID+0x2dc>)
 80070e0:	f7f9 f8a0 	bl	8000224 <strlen>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b14      	cmp	r3, #20
 80070e8:	d910      	bls.n	800710c <takeWifiSSID+0x78>
                lcd_clear();
 80070ea:	f000 fe55 	bl	8007d98 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80070ee:	4aa1      	ldr	r2, [pc, #644]	; (8007374 <takeWifiSSID+0x2e0>)
 80070f0:	2101      	movs	r1, #1
 80070f2:	2001      	movs	r0, #1
 80070f4:	f000 fe24 	bl	8007d40 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80070f8:	4a9f      	ldr	r2, [pc, #636]	; (8007378 <takeWifiSSID+0x2e4>)
 80070fa:	2101      	movs	r1, #1
 80070fc:	2002      	movs	r0, #2
 80070fe:	f000 fe1f 	bl	8007d40 <lcd_print>
                HAL_Delay(1250);
 8007102:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007106:	f001 fb71 	bl	80087ec <HAL_Delay>
                goto mainSSIDSection;
 800710a:	e7c6      	b.n	800709a <takeWifiSSID+0x6>
            } else {
            	memcpy(&eepromData[ssidStartPos], wifiSSIDInt, wifiCharacterLimit); //destination, source, size
 800710c:	4b96      	ldr	r3, [pc, #600]	; (8007368 <takeWifiSSID+0x2d4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a9a      	ldr	r2, [pc, #616]	; (800737c <takeWifiSSID+0x2e8>)
 8007112:	4413      	add	r3, r2
 8007114:	4a9a      	ldr	r2, [pc, #616]	; (8007380 <takeWifiSSID+0x2ec>)
 8007116:	6811      	ldr	r1, [r2, #0]
 8007118:	6855      	ldr	r5, [r2, #4]
 800711a:	6894      	ldr	r4, [r2, #8]
 800711c:	68d0      	ldr	r0, [r2, #12]
 800711e:	6019      	str	r1, [r3, #0]
 8007120:	605d      	str	r5, [r3, #4]
 8007122:	609c      	str	r4, [r3, #8]
 8007124:	60d8      	str	r0, [r3, #12]
 8007126:	6911      	ldr	r1, [r2, #16]
 8007128:	6119      	str	r1, [r3, #16]
 800712a:	7d12      	ldrb	r2, [r2, #20]
 800712c:	751a      	strb	r2, [r3, #20]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800712e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007132:	9302      	str	r3, [sp, #8]
 8007134:	236e      	movs	r3, #110	; 0x6e
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	4b90      	ldr	r3, [pc, #576]	; (800737c <takeWifiSSID+0x2e8>)
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	236e      	movs	r3, #110	; 0x6e
 800713e:	2200      	movs	r2, #0
 8007140:	21a0      	movs	r1, #160	; 0xa0
 8007142:	4890      	ldr	r0, [pc, #576]	; (8007384 <takeWifiSSID+0x2f0>)
 8007144:	f002 fbdc 	bl	8009900 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800714c:	f001 fb4e 	bl	80087ec <HAL_Delay>

            	break;
 8007150:	e13b      	b.n	80073ca <takeWifiSSID+0x336>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007152:	2101      	movs	r1, #1
 8007154:	4885      	ldr	r0, [pc, #532]	; (800736c <takeWifiSSID+0x2d8>)
 8007156:	f002 f919 	bl	800938c <HAL_GPIO_ReadPin>
 800715a:	4603      	mov	r3, r0
 800715c:	2b01      	cmp	r3, #1
 800715e:	d14d      	bne.n	80071fc <takeWifiSSID+0x168>
        	if(cursorPosition > 80) {
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b50      	cmp	r3, #80	; 0x50
 8007164:	dd01      	ble.n	800716a <takeWifiSSID+0xd6>
        		cursorPosition = 1;
 8007166:	2301      	movs	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b10      	cmp	r3, #16
 800716e:	d13f      	bne.n	80071f0 <takeWifiSSID+0x15c>
            	if(page == 1) {
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d109      	bne.n	800718a <takeWifiSSID+0xf6>
            		cursorPosition = 1;
 8007176:	2301      	movs	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
            		page++;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	3301      	adds	r3, #1
 800717e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007180:	2102      	movs	r1, #2
 8007182:	2002      	movs	r0, #2
 8007184:	f7f9 feb8 	bl	8000ef8 <printTemplate>
 8007188:	e035      	b.n	80071f6 <takeWifiSSID+0x162>
            	} else if(page == 2) {
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d109      	bne.n	80071a4 <takeWifiSSID+0x110>
            		cursorPosition = 1;
 8007190:	2301      	movs	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
            		page++;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	3301      	adds	r3, #1
 8007198:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800719a:	2103      	movs	r1, #3
 800719c:	2002      	movs	r0, #2
 800719e:	f7f9 feab 	bl	8000ef8 <printTemplate>
 80071a2:	e028      	b.n	80071f6 <takeWifiSSID+0x162>
            	} else if(page == 3) {
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d109      	bne.n	80071be <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]
            		page++;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	3301      	adds	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80071b4:	2104      	movs	r1, #4
 80071b6:	2002      	movs	r0, #2
 80071b8:	f7f9 fe9e 	bl	8000ef8 <printTemplate>
 80071bc:	e01b      	b.n	80071f6 <takeWifiSSID+0x162>
            	} else if(page == 4) {
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d109      	bne.n	80071d8 <takeWifiSSID+0x144>
            		cursorPosition = 1;
 80071c4:	2301      	movs	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
            		page++;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	3301      	adds	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80071ce:	2105      	movs	r1, #5
 80071d0:	2002      	movs	r0, #2
 80071d2:	f7f9 fe91 	bl	8000ef8 <printTemplate>
 80071d6:	e00e      	b.n	80071f6 <takeWifiSSID+0x162>
            	} else if(page == 5) {
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b05      	cmp	r3, #5
 80071dc:	d10b      	bne.n	80071f6 <takeWifiSSID+0x162>
            		cursorPosition = 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80071e6:	2101      	movs	r1, #1
 80071e8:	2002      	movs	r0, #2
 80071ea:	f7f9 fe85 	bl	8000ef8 <printTemplate>
 80071ee:	e002      	b.n	80071f6 <takeWifiSSID+0x162>
            	}
            } else {
            	cursorPosition++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80071f6:	2096      	movs	r0, #150	; 0x96
 80071f8:	f001 faf8 	bl	80087ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80071fc:	2108      	movs	r1, #8
 80071fe:	4862      	ldr	r0, [pc, #392]	; (8007388 <takeWifiSSID+0x2f4>)
 8007200:	f002 f8c4 	bl	800938c <HAL_GPIO_ReadPin>
 8007204:	4603      	mov	r3, r0
 8007206:	2b01      	cmp	r3, #1
 8007208:	d149      	bne.n	800729e <takeWifiSSID+0x20a>
        	if(cursorPosition < 1) {
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dc01      	bgt.n	8007214 <takeWifiSSID+0x180>
        		cursorPosition = 80;
 8007210:	2350      	movs	r3, #80	; 0x50
 8007212:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d13b      	bne.n	8007292 <takeWifiSSID+0x1fe>
            	if(page == 1) {
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d108      	bne.n	8007232 <takeWifiSSID+0x19e>
            		cursorPosition = 16;
 8007220:	2310      	movs	r3, #16
 8007222:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007224:	2305      	movs	r3, #5
 8007226:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007228:	2105      	movs	r1, #5
 800722a:	2002      	movs	r0, #2
 800722c:	f7f9 fe64 	bl	8000ef8 <printTemplate>
 8007230:	e032      	b.n	8007298 <takeWifiSSID+0x204>
            	} else if(page == 2) {
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d108      	bne.n	800724a <takeWifiSSID+0x1b6>
            		cursorPosition = 16;
 8007238:	2310      	movs	r3, #16
 800723a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800723c:	2301      	movs	r3, #1
 800723e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007240:	2101      	movs	r1, #1
 8007242:	2002      	movs	r0, #2
 8007244:	f7f9 fe58 	bl	8000ef8 <printTemplate>
 8007248:	e026      	b.n	8007298 <takeWifiSSID+0x204>
            	} else if(page == 3) {
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d108      	bne.n	8007262 <takeWifiSSID+0x1ce>
            		cursorPosition = 16;
 8007250:	2310      	movs	r3, #16
 8007252:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007254:	2302      	movs	r3, #2
 8007256:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007258:	2102      	movs	r1, #2
 800725a:	2002      	movs	r0, #2
 800725c:	f7f9 fe4c 	bl	8000ef8 <printTemplate>
 8007260:	e01a      	b.n	8007298 <takeWifiSSID+0x204>
            	} else if(page == 4) {
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b04      	cmp	r3, #4
 8007266:	d108      	bne.n	800727a <takeWifiSSID+0x1e6>
            		cursorPosition = 16;
 8007268:	2310      	movs	r3, #16
 800726a:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800726c:	2303      	movs	r3, #3
 800726e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007270:	2103      	movs	r1, #3
 8007272:	2002      	movs	r0, #2
 8007274:	f7f9 fe40 	bl	8000ef8 <printTemplate>
 8007278:	e00e      	b.n	8007298 <takeWifiSSID+0x204>
            	} else if(page == 5) {
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b05      	cmp	r3, #5
 800727e:	d10b      	bne.n	8007298 <takeWifiSSID+0x204>
            		cursorPosition = 16;
 8007280:	2310      	movs	r3, #16
 8007282:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007284:	2304      	movs	r3, #4
 8007286:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007288:	2104      	movs	r1, #4
 800728a:	2002      	movs	r0, #2
 800728c:	f7f9 fe34 	bl	8000ef8 <printTemplate>
 8007290:	e002      	b.n	8007298 <takeWifiSSID+0x204>
            	}
            } else {
            	cursorPosition--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3b01      	subs	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007298:	2096      	movs	r0, #150	; 0x96
 800729a:	f001 faa7 	bl	80087ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800729e:	2102      	movs	r1, #2
 80072a0:	4832      	ldr	r0, [pc, #200]	; (800736c <takeWifiSSID+0x2d8>)
 80072a2:	f002 f873 	bl	800938c <HAL_GPIO_ReadPin>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d131      	bne.n	8007310 <takeWifiSSID+0x27c>
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b2d9      	uxtb	r1, r3
 80072b4:	4a32      	ldr	r2, [pc, #200]	; (8007380 <takeWifiSSID+0x2ec>)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	4413      	add	r3, r2
 80072ba:	460a      	mov	r2, r1
 80072bc:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b2d9      	uxtb	r1, r3
 80072c6:	4a2d      	ldr	r2, [pc, #180]	; (800737c <takeWifiSSID+0x2e8>)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4413      	add	r3, r2
 80072cc:	460a      	mov	r2, r1
 80072ce:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition - 1]);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	b2d9      	uxtb	r1, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	4a2c      	ldr	r2, [pc, #176]	; (800738c <takeWifiSSID+0x2f8>)
 80072da:	5cd3      	ldrb	r3, [r2, r3]
 80072dc:	461a      	mov	r2, r3
 80072de:	2001      	movs	r0, #1
 80072e0:	f000 fd43 	bl	8007d6a <lcd_print_char>

            writeLoc++;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3301      	adds	r3, #1
 80072e8:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	3301      	adds	r3, #1
 80072ee:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3301      	adds	r3, #1
 80072f4:	607b      	str	r3, [r7, #4]

            wifiSSIDInt[arrayPosition] = '\0';
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <takeWifiSSID+0x2ec>)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4413      	add	r3, r2
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 8007300:	4a1e      	ldr	r2, [pc, #120]	; (800737c <takeWifiSSID+0x2e8>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800730a:	2096      	movs	r0, #150	; 0x96
 800730c:	f001 fa6e 	bl	80087ec <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007310:	2104      	movs	r1, #4
 8007312:	4816      	ldr	r0, [pc, #88]	; (800736c <takeWifiSSID+0x2d8>)
 8007314:	f002 f83a 	bl	800938c <HAL_GPIO_ReadPin>
 8007318:	4603      	mov	r3, r0
 800731a:	2b01      	cmp	r3, #1
 800731c:	d14e      	bne.n	80073bc <takeWifiSSID+0x328>
        	if(strlen(wifiSSID) >= 1) {
 800731e:	4b14      	ldr	r3, [pc, #80]	; (8007370 <takeWifiSSID+0x2dc>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d047      	beq.n	80073b6 <takeWifiSSID+0x322>
        		wifiSSIDInt[arrayPosition] = '\0';
 8007326:	4a16      	ldr	r2, [pc, #88]	; (8007380 <takeWifiSSID+0x2ec>)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4413      	add	r3, r2
 800732c:	2200      	movs	r2, #0
 800732e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 8007330:	4a12      	ldr	r2, [pc, #72]	; (800737c <takeWifiSSID+0x2e8>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4413      	add	r3, r2
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b07      	cmp	r3, #7
 800733e:	dd03      	ble.n	8007348 <takeWifiSSID+0x2b4>
        			writeLoc--;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	3b01      	subs	r3, #1
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	e004      	b.n	8007352 <takeWifiSSID+0x2be>
        		} else if(writeLoc < 7) {
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2b06      	cmp	r3, #6
 800734c:	dc01      	bgt.n	8007352 <takeWifiSSID+0x2be>
        			writeLoc = 7;
 800734e:	2307      	movs	r3, #7
 8007350:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	dd1b      	ble.n	8007390 <takeWifiSSID+0x2fc>
        			arrayPosition--;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	3b01      	subs	r3, #1
 800735c:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3b01      	subs	r3, #1
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	e01c      	b.n	80073a0 <takeWifiSSID+0x30c>
 8007366:	bf00      	nop
 8007368:	20000008 	.word	0x20000008
 800736c:	40010800 	.word	0x40010800
 8007370:	200001a0 	.word	0x200001a0
 8007374:	0800dce0 	.word	0x0800dce0
 8007378:	0800dcf4 	.word	0x0800dcf4
 800737c:	20000118 	.word	0x20000118
 8007380:	200001e0 	.word	0x200001e0
 8007384:	200003bc 	.word	0x200003bc
 8007388:	40011000 	.word	0x40011000
 800738c:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	da04      	bge.n	80073a0 <takeWifiSSID+0x30c>
        			arrayPosition = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800739a:	4b0e      	ldr	r3, [pc, #56]	; (80073d4 <takeWifiSSID+0x340>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	3306      	adds	r3, #6
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	2001      	movs	r0, #1
 80073ac:	f000 fcfe 	bl	8007dac <lcd_delete_char>
        		HAL_Delay(50);
 80073b0:	2032      	movs	r0, #50	; 0x32
 80073b2:	f001 fa1b 	bl	80087ec <HAL_Delay>
        	}

        	HAL_Delay(150);
 80073b6:	2096      	movs	r0, #150	; 0x96
 80073b8:	f001 fa18 	bl	80087ec <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	4619      	mov	r1, r3
 80073c2:	2002      	movs	r0, #2
 80073c4:	f000 fc9d 	bl	8007d02 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073c8:	e67f      	b.n	80070ca <takeWifiSSID+0x36>
    }
}
 80073ca:	bf00      	nop
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bdb0      	pop	{r4, r5, r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000008 	.word	0x20000008

080073d8 <takeWifiPass>:

void takeWifiPass() {
 80073d8:	b5b0      	push	{r4, r5, r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af04      	add	r7, sp, #16
	mainPASSSection:

    lcd_cursor(1);
 80073de:	2001      	movs	r0, #1
 80073e0:	f000 fd0c 	bl	8007dfc <lcd_cursor>

    resetEEPROM4Wifi(3);
 80073e4:	2003      	movs	r0, #3
 80073e6:	f7f9 fa6b 	bl	80008c0 <resetEEPROM4Wifi>
    HAL_Delay(100);
 80073ea:	2064      	movs	r0, #100	; 0x64
 80073ec:	f001 f9fe 	bl	80087ec <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80073f0:	2301      	movs	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 80073f4:	2307      	movs	r3, #7
 80073f6:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 80073f8:	2301      	movs	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 80073fc:	2300      	movs	r3, #0
 80073fe:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 8007400:	4b75      	ldr	r3, [pc, #468]	; (80075d8 <takeWifiPass+0x200>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007406:	2101      	movs	r1, #1
 8007408:	2003      	movs	r0, #3
 800740a:	f7f9 fd75 	bl	8000ef8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800740e:	2108      	movs	r1, #8
 8007410:	4872      	ldr	r0, [pc, #456]	; (80075dc <takeWifiPass+0x204>)
 8007412:	f001 ffbb 	bl	800938c <HAL_GPIO_ReadPin>
 8007416:	4603      	mov	r3, r0
 8007418:	2b01      	cmp	r3, #1
 800741a:	d13c      	bne.n	8007496 <takeWifiPass+0xbe>
            lcd_cursor(0);
 800741c:	2000      	movs	r0, #0
 800741e:	f000 fced 	bl	8007dfc <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007422:	486f      	ldr	r0, [pc, #444]	; (80075e0 <takeWifiPass+0x208>)
 8007424:	f7f8 fefe 	bl	8000224 <strlen>
 8007428:	4603      	mov	r3, r0
 800742a:	2b14      	cmp	r3, #20
 800742c:	d910      	bls.n	8007450 <takeWifiPass+0x78>
                lcd_clear();
 800742e:	f000 fcb3 	bl	8007d98 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007432:	4a6c      	ldr	r2, [pc, #432]	; (80075e4 <takeWifiPass+0x20c>)
 8007434:	2101      	movs	r1, #1
 8007436:	2001      	movs	r0, #1
 8007438:	f000 fc82 	bl	8007d40 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800743c:	4a6a      	ldr	r2, [pc, #424]	; (80075e8 <takeWifiPass+0x210>)
 800743e:	2101      	movs	r1, #1
 8007440:	2002      	movs	r0, #2
 8007442:	f000 fc7d 	bl	8007d40 <lcd_print>
                HAL_Delay(1200);
 8007446:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800744a:	f001 f9cf 	bl	80087ec <HAL_Delay>
                goto mainPASSSection;
 800744e:	e7c6      	b.n	80073de <takeWifiPass+0x6>
            } else {
            	memcpy(&eepromData[passStartPos], wifiPassInt, wifiCharacterLimit); //destination, source, size
 8007450:	4b61      	ldr	r3, [pc, #388]	; (80075d8 <takeWifiPass+0x200>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a65      	ldr	r2, [pc, #404]	; (80075ec <takeWifiPass+0x214>)
 8007456:	4413      	add	r3, r2
 8007458:	4a65      	ldr	r2, [pc, #404]	; (80075f0 <takeWifiPass+0x218>)
 800745a:	6811      	ldr	r1, [r2, #0]
 800745c:	6855      	ldr	r5, [r2, #4]
 800745e:	6894      	ldr	r4, [r2, #8]
 8007460:	68d0      	ldr	r0, [r2, #12]
 8007462:	6019      	str	r1, [r3, #0]
 8007464:	605d      	str	r5, [r3, #4]
 8007466:	609c      	str	r4, [r3, #8]
 8007468:	60d8      	str	r0, [r3, #12]
 800746a:	6911      	ldr	r1, [r2, #16]
 800746c:	6119      	str	r1, [r3, #16]
 800746e:	7d12      	ldrb	r2, [r2, #20]
 8007470:	751a      	strb	r2, [r3, #20]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007472:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	236e      	movs	r3, #110	; 0x6e
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	4b5b      	ldr	r3, [pc, #364]	; (80075ec <takeWifiPass+0x214>)
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	236e      	movs	r3, #110	; 0x6e
 8007482:	2200      	movs	r2, #0
 8007484:	21a0      	movs	r1, #160	; 0xa0
 8007486:	485b      	ldr	r0, [pc, #364]	; (80075f4 <takeWifiPass+0x21c>)
 8007488:	f002 fa3a 	bl	8009900 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 800748c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007490:	f001 f9ac 	bl	80087ec <HAL_Delay>

            	break;
 8007494:	e124      	b.n	80076e0 <takeWifiPass+0x308>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007496:	2101      	movs	r1, #1
 8007498:	4850      	ldr	r0, [pc, #320]	; (80075dc <takeWifiPass+0x204>)
 800749a:	f001 ff77 	bl	800938c <HAL_GPIO_ReadPin>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d14d      	bne.n	8007540 <takeWifiPass+0x168>
        	if(cursorPosition > 80) {
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b50      	cmp	r3, #80	; 0x50
 80074a8:	dd01      	ble.n	80074ae <takeWifiPass+0xd6>
        	    cursorPosition = 1;
 80074aa:	2301      	movs	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d13f      	bne.n	8007534 <takeWifiPass+0x15c>
            	if(page == 1) {
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d109      	bne.n	80074ce <takeWifiPass+0xf6>
            		cursorPosition = 1;
 80074ba:	2301      	movs	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
            		page++;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	3301      	adds	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80074c4:	2102      	movs	r1, #2
 80074c6:	2003      	movs	r0, #3
 80074c8:	f7f9 fd16 	bl	8000ef8 <printTemplate>
 80074cc:	e035      	b.n	800753a <takeWifiPass+0x162>
            	} else if(page == 2) {
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d109      	bne.n	80074e8 <takeWifiPass+0x110>
            		cursorPosition = 1;
 80074d4:	2301      	movs	r3, #1
 80074d6:	60fb      	str	r3, [r7, #12]
            		page++;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3301      	adds	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80074de:	2103      	movs	r1, #3
 80074e0:	2003      	movs	r0, #3
 80074e2:	f7f9 fd09 	bl	8000ef8 <printTemplate>
 80074e6:	e028      	b.n	800753a <takeWifiPass+0x162>
            	} else if(page == 3) {
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d109      	bne.n	8007502 <takeWifiPass+0x12a>
            		cursorPosition = 1;
 80074ee:	2301      	movs	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
            		page++;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	3301      	adds	r3, #1
 80074f6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80074f8:	2104      	movs	r1, #4
 80074fa:	2003      	movs	r0, #3
 80074fc:	f7f9 fcfc 	bl	8000ef8 <printTemplate>
 8007500:	e01b      	b.n	800753a <takeWifiPass+0x162>
            	} else if(page == 4) {
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b04      	cmp	r3, #4
 8007506:	d109      	bne.n	800751c <takeWifiPass+0x144>
            		cursorPosition = 1;
 8007508:	2301      	movs	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
            		page++;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	3301      	adds	r3, #1
 8007510:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007512:	2105      	movs	r1, #5
 8007514:	2003      	movs	r0, #3
 8007516:	f7f9 fcef 	bl	8000ef8 <printTemplate>
 800751a:	e00e      	b.n	800753a <takeWifiPass+0x162>
            	} else if(page == 5) {
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b05      	cmp	r3, #5
 8007520:	d10b      	bne.n	800753a <takeWifiPass+0x162>
            		cursorPosition = 1;
 8007522:	2301      	movs	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800752a:	2101      	movs	r1, #1
 800752c:	2003      	movs	r0, #3
 800752e:	f7f9 fce3 	bl	8000ef8 <printTemplate>
 8007532:	e002      	b.n	800753a <takeWifiPass+0x162>
            	}
            } else {
            	cursorPosition++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3301      	adds	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800753a:	2096      	movs	r0, #150	; 0x96
 800753c:	f001 f956 	bl	80087ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007540:	2108      	movs	r1, #8
 8007542:	482d      	ldr	r0, [pc, #180]	; (80075f8 <takeWifiPass+0x220>)
 8007544:	f001 ff22 	bl	800938c <HAL_GPIO_ReadPin>
 8007548:	4603      	mov	r3, r0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d15c      	bne.n	8007608 <takeWifiPass+0x230>
        	if(cursorPosition < 1) {
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	dc01      	bgt.n	8007558 <takeWifiPass+0x180>
        	    cursorPosition = 80;
 8007554:	2350      	movs	r3, #80	; 0x50
 8007556:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d14e      	bne.n	80075fc <takeWifiPass+0x224>
            	if(page == 1) {
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d108      	bne.n	8007576 <takeWifiPass+0x19e>
            		cursorPosition = 16;
 8007564:	2310      	movs	r3, #16
 8007566:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007568:	2305      	movs	r3, #5
 800756a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800756c:	2105      	movs	r1, #5
 800756e:	2003      	movs	r0, #3
 8007570:	f7f9 fcc2 	bl	8000ef8 <printTemplate>
 8007574:	e045      	b.n	8007602 <takeWifiPass+0x22a>
            	} else if(page == 2) {
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d108      	bne.n	800758e <takeWifiPass+0x1b6>
            		cursorPosition = 16;
 800757c:	2310      	movs	r3, #16
 800757e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007580:	2301      	movs	r3, #1
 8007582:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007584:	2101      	movs	r1, #1
 8007586:	2003      	movs	r0, #3
 8007588:	f7f9 fcb6 	bl	8000ef8 <printTemplate>
 800758c:	e039      	b.n	8007602 <takeWifiPass+0x22a>
            	} else if(page == 3) {
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b03      	cmp	r3, #3
 8007592:	d108      	bne.n	80075a6 <takeWifiPass+0x1ce>
            		cursorPosition = 16;
 8007594:	2310      	movs	r3, #16
 8007596:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007598:	2302      	movs	r3, #2
 800759a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800759c:	2102      	movs	r1, #2
 800759e:	2003      	movs	r0, #3
 80075a0:	f7f9 fcaa 	bl	8000ef8 <printTemplate>
 80075a4:	e02d      	b.n	8007602 <takeWifiPass+0x22a>
            	} else if(page == 4) {
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d108      	bne.n	80075be <takeWifiPass+0x1e6>
            		cursorPosition = 16;
 80075ac:	2310      	movs	r3, #16
 80075ae:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80075b0:	2303      	movs	r3, #3
 80075b2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80075b4:	2103      	movs	r1, #3
 80075b6:	2003      	movs	r0, #3
 80075b8:	f7f9 fc9e 	bl	8000ef8 <printTemplate>
 80075bc:	e021      	b.n	8007602 <takeWifiPass+0x22a>
            	} else if(page == 5) {
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b05      	cmp	r3, #5
 80075c2:	d11e      	bne.n	8007602 <takeWifiPass+0x22a>
            		cursorPosition = 16;
 80075c4:	2310      	movs	r3, #16
 80075c6:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80075c8:	2304      	movs	r3, #4
 80075ca:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80075cc:	2104      	movs	r1, #4
 80075ce:	2003      	movs	r0, #3
 80075d0:	f7f9 fc92 	bl	8000ef8 <printTemplate>
 80075d4:	e015      	b.n	8007602 <takeWifiPass+0x22a>
 80075d6:	bf00      	nop
 80075d8:	2000000c 	.word	0x2000000c
 80075dc:	40010800 	.word	0x40010800
 80075e0:	200001b8 	.word	0x200001b8
 80075e4:	0800dce0 	.word	0x0800dce0
 80075e8:	0800dd08 	.word	0x0800dd08
 80075ec:	20000118 	.word	0x20000118
 80075f0:	200001f8 	.word	0x200001f8
 80075f4:	200003bc 	.word	0x200003bc
 80075f8:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3b01      	subs	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007602:	2096      	movs	r0, #150	; 0x96
 8007604:	f001 f8f2 	bl	80087ec <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007608:	2102      	movs	r1, #2
 800760a:	4837      	ldr	r0, [pc, #220]	; (80076e8 <takeWifiPass+0x310>)
 800760c:	f001 febe 	bl	800938c <HAL_GPIO_ReadPin>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	d131      	bne.n	800767a <takeWifiPass+0x2a2>
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b2d9      	uxtb	r1, r3
 800761e:	4a33      	ldr	r2, [pc, #204]	; (80076ec <takeWifiPass+0x314>)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4413      	add	r3, r2
 8007624:	460a      	mov	r2, r1
 8007626:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b2d9      	uxtb	r1, r3
 8007630:	4a2f      	ldr	r2, [pc, #188]	; (80076f0 <takeWifiPass+0x318>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4413      	add	r3, r2
 8007636:	460a      	mov	r2, r1
 8007638:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	b2d9      	uxtb	r1, r3
 800763e:	4a2d      	ldr	r2, [pc, #180]	; (80076f4 <takeWifiPass+0x31c>)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4413      	add	r3, r2
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	2001      	movs	r0, #1
 800764a:	f000 fb8e 	bl	8007d6a <lcd_print_char>

            writeLoc++;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	3301      	adds	r3, #1
 8007652:	613b      	str	r3, [r7, #16]
            arrayPos++;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	3301      	adds	r3, #1
 8007658:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3301      	adds	r3, #1
 800765e:	607b      	str	r3, [r7, #4]

            wifiPassInt[arrayPos] = '\0';
 8007660:	4a22      	ldr	r2, [pc, #136]	; (80076ec <takeWifiPass+0x314>)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4413      	add	r3, r2
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 800766a:	4a21      	ldr	r2, [pc, #132]	; (80076f0 <takeWifiPass+0x318>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4413      	add	r3, r2
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007674:	2096      	movs	r0, #150	; 0x96
 8007676:	f001 f8b9 	bl	80087ec <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800767a:	2104      	movs	r1, #4
 800767c:	481a      	ldr	r0, [pc, #104]	; (80076e8 <takeWifiPass+0x310>)
 800767e:	f001 fe85 	bl	800938c <HAL_GPIO_ReadPin>
 8007682:	4603      	mov	r3, r0
 8007684:	2b01      	cmp	r3, #1
 8007686:	d124      	bne.n	80076d2 <takeWifiPass+0x2fa>
            if(strlen(wifiPass) >= 1) {
 8007688:	4b1a      	ldr	r3, [pc, #104]	; (80076f4 <takeWifiPass+0x31c>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01d      	beq.n	80076cc <takeWifiPass+0x2f4>
            	wifiPassInt[arrayPos] = '\0';
 8007690:	4a16      	ldr	r2, [pc, #88]	; (80076ec <takeWifiPass+0x314>)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4413      	add	r3, r2
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <takeWifiPass+0x318>)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	3306      	adds	r3, #6
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	4619      	mov	r1, r3
 80076c0:	2001      	movs	r0, #1
 80076c2:	f000 fb73 	bl	8007dac <lcd_delete_char>
            	HAL_Delay(50);
 80076c6:	2032      	movs	r0, #50	; 0x32
 80076c8:	f001 f890 	bl	80087ec <HAL_Delay>
            }

            HAL_Delay(150);
 80076cc:	2096      	movs	r0, #150	; 0x96
 80076ce:	f001 f88d 	bl	80087ec <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	4619      	mov	r1, r3
 80076d8:	2002      	movs	r0, #2
 80076da:	f000 fb12 	bl	8007d02 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80076de:	e696      	b.n	800740e <takeWifiPass+0x36>
    }
}
 80076e0:	bf00      	nop
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bdb0      	pop	{r4, r5, r7, pc}
 80076e8:	40010800 	.word	0x40010800
 80076ec:	200001f8 	.word	0x200001f8
 80076f0:	20000118 	.word	0x20000118
 80076f4:	200001b8 	.word	0x200001b8

080076f8 <mergeData>:

char* mergeData() {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b09c      	sub	sp, #112	; 0x70
 80076fc:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80076fe:	2300      	movs	r3, #0
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007702:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007706:	2228      	movs	r2, #40	; 0x28
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f004 ff91 	bl	800c632 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007710:	4b67      	ldr	r3, [pc, #412]	; (80078b0 <mergeData+0x1b8>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	713b      	strb	r3, [r7, #4]
 8007716:	4b67      	ldr	r3, [pc, #412]	; (80078b4 <mergeData+0x1bc>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	717b      	strb	r3, [r7, #5]
 800771c:	4b66      	ldr	r3, [pc, #408]	; (80078b8 <mergeData+0x1c0>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	71bb      	strb	r3, [r7, #6]
 8007722:	4b66      	ldr	r3, [pc, #408]	; (80078bc <mergeData+0x1c4>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
 8007728:	4b65      	ldr	r3, [pc, #404]	; (80078c0 <mergeData+0x1c8>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	723b      	strb	r3, [r7, #8]
 800772e:	4b65      	ldr	r3, [pc, #404]	; (80078c4 <mergeData+0x1cc>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	727b      	strb	r3, [r7, #9]
 8007734:	4b64      	ldr	r3, [pc, #400]	; (80078c8 <mergeData+0x1d0>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	72bb      	strb	r3, [r7, #10]
 800773a:	4b64      	ldr	r3, [pc, #400]	; (80078cc <mergeData+0x1d4>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	72fb      	strb	r3, [r7, #11]
 8007740:	4b63      	ldr	r3, [pc, #396]	; (80078d0 <mergeData+0x1d8>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	733b      	strb	r3, [r7, #12]
 8007746:	4b63      	ldr	r3, [pc, #396]	; (80078d4 <mergeData+0x1dc>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	737b      	strb	r3, [r7, #13]
 800774c:	4b62      	ldr	r3, [pc, #392]	; (80078d8 <mergeData+0x1e0>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	73bb      	strb	r3, [r7, #14]
 8007752:	4b62      	ldr	r3, [pc, #392]	; (80078dc <mergeData+0x1e4>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	4b61      	ldr	r3, [pc, #388]	; (80078e0 <mergeData+0x1e8>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	743b      	strb	r3, [r7, #16]
 800775e:	4b61      	ldr	r3, [pc, #388]	; (80078e4 <mergeData+0x1ec>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	747b      	strb	r3, [r7, #17]
 8007764:	4b60      	ldr	r3, [pc, #384]	; (80078e8 <mergeData+0x1f0>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	74bb      	strb	r3, [r7, #18]
 800776a:	4b60      	ldr	r3, [pc, #384]	; (80078ec <mergeData+0x1f4>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	74fb      	strb	r3, [r7, #19]
 8007770:	4b5f      	ldr	r3, [pc, #380]	; (80078f0 <mergeData+0x1f8>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	753b      	strb	r3, [r7, #20]
 8007776:	4b5f      	ldr	r3, [pc, #380]	; (80078f4 <mergeData+0x1fc>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	757b      	strb	r3, [r7, #21]
 800777c:	4b5e      	ldr	r3, [pc, #376]	; (80078f8 <mergeData+0x200>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	75bb      	strb	r3, [r7, #22]
 8007782:	4b5e      	ldr	r3, [pc, #376]	; (80078fc <mergeData+0x204>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	75fb      	strb	r3, [r7, #23]
 8007788:	4b5d      	ldr	r3, [pc, #372]	; (8007900 <mergeData+0x208>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	763b      	strb	r3, [r7, #24]
 800778e:	4b5d      	ldr	r3, [pc, #372]	; (8007904 <mergeData+0x20c>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	767b      	strb	r3, [r7, #25]
 8007794:	4b5c      	ldr	r3, [pc, #368]	; (8007908 <mergeData+0x210>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	76bb      	strb	r3, [r7, #26]
 800779a:	4b5c      	ldr	r3, [pc, #368]	; (800790c <mergeData+0x214>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	76fb      	strb	r3, [r7, #27]
 80077a0:	4b5b      	ldr	r3, [pc, #364]	; (8007910 <mergeData+0x218>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	773b      	strb	r3, [r7, #28]
 80077a6:	4b5b      	ldr	r3, [pc, #364]	; (8007914 <mergeData+0x21c>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	777b      	strb	r3, [r7, #29]
 80077ac:	4b5a      	ldr	r3, [pc, #360]	; (8007918 <mergeData+0x220>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	77bb      	strb	r3, [r7, #30]
 80077b2:	4b5a      	ldr	r3, [pc, #360]	; (800791c <mergeData+0x224>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	4b59      	ldr	r3, [pc, #356]	; (8007920 <mergeData+0x228>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	f887 3020 	strb.w	r3, [r7, #32]
 80077c0:	4b58      	ldr	r3, [pc, #352]	; (8007924 <mergeData+0x22c>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80077c8:	4b57      	ldr	r3, [pc, #348]	; (8007928 <mergeData+0x230>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077d0:	4b56      	ldr	r3, [pc, #344]	; (800792c <mergeData+0x234>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d8:	4b55      	ldr	r3, [pc, #340]	; (8007930 <mergeData+0x238>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80077e0:	4b54      	ldr	r3, [pc, #336]	; (8007934 <mergeData+0x23c>)
 80077e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80077e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80077ea:	4b52      	ldr	r3, [pc, #328]	; (8007934 <mergeData+0x23c>)
 80077ec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80077f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80077f4:	4b4f      	ldr	r3, [pc, #316]	; (8007934 <mergeData+0x23c>)
 80077f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80077fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80077fe:	4b4d      	ldr	r3, [pc, #308]	; (8007934 <mergeData+0x23c>)
 8007800:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007804:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007808:	4b4a      	ldr	r3, [pc, #296]	; (8007934 <mergeData+0x23c>)
 800780a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800780e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007812:	4b48      	ldr	r3, [pc, #288]	; (8007934 <mergeData+0x23c>)
 8007814:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 800781c:	4b45      	ldr	r3, [pc, #276]	; (8007934 <mergeData+0x23c>)
 800781e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007826:	4b43      	ldr	r3, [pc, #268]	; (8007934 <mergeData+0x23c>)
 8007828:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800782c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007830:	4b40      	ldr	r3, [pc, #256]	; (8007934 <mergeData+0x23c>)
 8007832:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007836:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800783a:	4b3e      	ldr	r3, [pc, #248]	; (8007934 <mergeData+0x23c>)
 800783c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007840:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007844:	2306      	movs	r3, #6
 8007846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800784a:	2300      	movs	r3, #0
 800784c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800784e:	e015      	b.n	800787c <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007850:	1d3a      	adds	r2, r7, #4
 8007852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007854:	4413      	add	r3, r2
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800785e:	4936      	ldr	r1, [pc, #216]	; (8007938 <mergeData+0x240>)
 8007860:	4618      	mov	r0, r3
 8007862:	f004 fe75 	bl	800c550 <siprintf>
	    strcat(combinedString, temp);
 8007866:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800786a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f004 fecf 	bl	800c614 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007878:	3301      	adds	r3, #1
 800787a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800787c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800787e:	2b2b      	cmp	r3, #43	; 0x2b
 8007880:	d9e6      	bls.n	8007850 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007882:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007886:	4618      	mov	r0, r3
 8007888:	f7f8 fccc 	bl	8000224 <strlen>
 800788c:	4603      	mov	r3, r0
 800788e:	3301      	adds	r3, #1
 8007890:	4618      	mov	r0, r3
 8007892:	f004 fda9 	bl	800c3e8 <malloc>
 8007896:	4603      	mov	r3, r0
 8007898:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800789a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800789e:	4619      	mov	r1, r3
 80078a0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80078a2:	f004 ff0b 	bl	800c6bc <strcpy>
	return result;
 80078a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3770      	adds	r7, #112	; 0x70
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20000243 	.word	0x20000243
 80078b4:	20000235 	.word	0x20000235
 80078b8:	20000238 	.word	0x20000238
 80078bc:	20000239 	.word	0x20000239
 80078c0:	2000023a 	.word	0x2000023a
 80078c4:	20000241 	.word	0x20000241
 80078c8:	2000023b 	.word	0x2000023b
 80078cc:	2000023c 	.word	0x2000023c
 80078d0:	20000240 	.word	0x20000240
 80078d4:	2000023d 	.word	0x2000023d
 80078d8:	2000024d 	.word	0x2000024d
 80078dc:	2000023e 	.word	0x2000023e
 80078e0:	2000024e 	.word	0x2000024e
 80078e4:	2000023f 	.word	0x2000023f
 80078e8:	2000024f 	.word	0x2000024f
 80078ec:	20000242 	.word	0x20000242
 80078f0:	20000244 	.word	0x20000244
 80078f4:	20000245 	.word	0x20000245
 80078f8:	20000246 	.word	0x20000246
 80078fc:	20000247 	.word	0x20000247
 8007900:	20000248 	.word	0x20000248
 8007904:	20000249 	.word	0x20000249
 8007908:	2000024a 	.word	0x2000024a
 800790c:	2000024b 	.word	0x2000024b
 8007910:	2000024c 	.word	0x2000024c
 8007914:	20000250 	.word	0x20000250
 8007918:	20000252 	.word	0x20000252
 800791c:	20000231 	.word	0x20000231
 8007920:	20000232 	.word	0x20000232
 8007924:	20000000 	.word	0x20000000
 8007928:	20000001 	.word	0x20000001
 800792c:	20000233 	.word	0x20000233
 8007930:	20000255 	.word	0x20000255
 8007934:	20000118 	.word	0x20000118
 8007938:	0800dd1c 	.word	0x0800dd1c

0800793c <convertAndSendData>:

void convertAndSendData() {
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <convertAndSendData+0x60>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 800794a:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <convertAndSendData+0x64>)
 800794c:	2101      	movs	r1, #1
 800794e:	2001      	movs	r0, #1
 8007950:	f000 f9f6 	bl	8007d40 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <convertAndSendData+0x68>)
 8007956:	2101      	movs	r1, #1
 8007958:	2002      	movs	r0, #2
 800795a:	f000 f9f1 	bl	8007d40 <lcd_print>
 800795e:	e009      	b.n	8007974 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007960:	4a11      	ldr	r2, [pc, #68]	; (80079a8 <convertAndSendData+0x6c>)
 8007962:	2101      	movs	r1, #1
 8007964:	2001      	movs	r0, #1
 8007966:	f000 f9eb 	bl	8007d40 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <convertAndSendData+0x70>)
 800796c:	2101      	movs	r1, #1
 800796e:	2002      	movs	r0, #2
 8007970:	f000 f9e6 	bl	8007d40 <lcd_print>
	}

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8007974:	f7ff fec0 	bl	80076f8 <mergeData>
 8007978:	4603      	mov	r3, r0
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <convertAndSendData+0x74>)
 800797e:	4a0d      	ldr	r2, [pc, #52]	; (80079b4 <convertAndSendData+0x78>)
 8007980:	490d      	ldr	r1, [pc, #52]	; (80079b8 <convertAndSendData+0x7c>)
 8007982:	480e      	ldr	r0, [pc, #56]	; (80079bc <convertAndSendData+0x80>)
 8007984:	f7f9 f81c 	bl	80009c0 <sendMachineData>

	HAL_Delay(500);
 8007988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800798c:	f000 ff2e 	bl	80087ec <HAL_Delay>
	lcd_clear();
 8007990:	f000 fa02 	bl	8007d98 <lcd_clear>
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000255 	.word	0x20000255
 80079a0:	0800dd20 	.word	0x0800dd20
 80079a4:	0800dd34 	.word	0x0800dd34
 80079a8:	0800dd48 	.word	0x0800dd48
 80079ac:	0800dd5c 	.word	0x0800dd5c
 80079b0:	200001b8 	.word	0x200001b8
 80079b4:	200001a0 	.word	0x200001a0
 80079b8:	20000190 	.word	0x20000190
 80079bc:	20000458 	.word	0x20000458

080079c0 <iotSetup>:

void iotSetup() {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80079c4:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <iotSetup+0x40>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 80079cc:	480d      	ldr	r0, [pc, #52]	; (8007a04 <iotSetup+0x44>)
 80079ce:	f7f8 fc29 	bl	8000224 <strlen>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b0d      	cmp	r3, #13
 80079d6:	d001      	beq.n	80079dc <iotSetup+0x1c>
			takeMachineID();
 80079d8:	f7ff f9be 	bl	8006d58 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 80079dc:	480a      	ldr	r0, [pc, #40]	; (8007a08 <iotSetup+0x48>)
 80079de:	f7f8 fc21 	bl	8000224 <strlen>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d801      	bhi.n	80079ec <iotSetup+0x2c>
			takeWifiSSID();
 80079e8:	f7ff fb54 	bl	8007094 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 80079ec:	4807      	ldr	r0, [pc, #28]	; (8007a0c <iotSetup+0x4c>)
 80079ee:	f7f8 fc19 	bl	8000224 <strlen>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d801      	bhi.n	80079fc <iotSetup+0x3c>
			takeWifiPass();
 80079f8:	f7ff fcee 	bl	80073d8 <takeWifiPass>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
	HAL_Delay(500);
	convertAndSendData();*/
}
 80079fc:	bf00      	nop
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000253 	.word	0x20000253
 8007a04:	20000190 	.word	0x20000190
 8007a08:	200001a0 	.word	0x200001a0
 8007a0c:	200001b8 	.word	0x200001b8

08007a10 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	f023 030f 	bic.w	r3, r3, #15
 8007a20:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a28:	7b7b      	ldrb	r3, [r7, #13]
 8007a2a:	f043 030c 	orr.w	r3, r3, #12
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a32:	7b7b      	ldrb	r3, [r7, #13]
 8007a34:	f043 0308 	orr.w	r3, r3, #8
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a3c:	7b3b      	ldrb	r3, [r7, #12]
 8007a3e:	f043 030c 	orr.w	r3, r3, #12
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007a46:	7b3b      	ldrb	r3, [r7, #12]
 8007a48:	f043 0308 	orr.w	r3, r3, #8
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a50:	bf00      	nop
 8007a52:	4825      	ldr	r0, [pc, #148]	; (8007ae8 <lcd_send_cmd+0xd8>)
 8007a54:	f002 fac3 	bl	8009fde <HAL_I2C_GetError>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d0f9      	beq.n	8007a52 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a5e:	bf00      	nop
 8007a60:	4821      	ldr	r0, [pc, #132]	; (8007ae8 <lcd_send_cmd+0xd8>)
 8007a62:	f002 faaf 	bl	8009fc4 <HAL_I2C_GetState>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d1f9      	bne.n	8007a60 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a6c:	4b1f      	ldr	r3, [pc, #124]	; (8007aec <lcd_send_cmd+0xdc>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d116      	bne.n	8007aa2 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e00f      	b.n	8007a9a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	443b      	add	r3, r7
 8007a80:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	f022 0208 	bic.w	r2, r2, #8
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	3310      	adds	r3, #16
 8007a8e:	443b      	add	r3, r7
 8007a90:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	3301      	adds	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d9ec      	bls.n	8007a7a <lcd_send_cmd+0x6a>
 8007aa0:	e015      	b.n	8007ace <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73bb      	strb	r3, [r7, #14]
 8007aa6:	e00f      	b.n	8007ac8 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	3310      	adds	r3, #16
 8007aac:	443b      	add	r3, r7
 8007aae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	f042 0208 	orr.w	r2, r2, #8
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	3310      	adds	r3, #16
 8007abc:	443b      	add	r3, r7
 8007abe:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	73bb      	strb	r3, [r7, #14]
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d9ec      	bls.n	8007aa8 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007ace:	f107 0208 	add.w	r2, r7, #8
 8007ad2:	2364      	movs	r3, #100	; 0x64
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	2304      	movs	r3, #4
 8007ad8:	214e      	movs	r1, #78	; 0x4e
 8007ada:	4803      	ldr	r0, [pc, #12]	; (8007ae8 <lcd_send_cmd+0xd8>)
 8007adc:	f001 fe12 	bl	8009704 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007ae0:	bf00      	nop
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	200003bc 	.word	0x200003bc
 8007aec:	20000392 	.word	0x20000392

08007af0 <lcd_send_data>:

void lcd_send_data (char data) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	f023 030f 	bic.w	r3, r3, #15
 8007b00:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b08:	7b7b      	ldrb	r3, [r7, #13]
 8007b0a:	f043 030d 	orr.w	r3, r3, #13
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b12:	7b7b      	ldrb	r3, [r7, #13]
 8007b14:	f043 0309 	orr.w	r3, r3, #9
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b1c:	7b3b      	ldrb	r3, [r7, #12]
 8007b1e:	f043 030d 	orr.w	r3, r3, #13
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b26:	7b3b      	ldrb	r3, [r7, #12]
 8007b28:	f043 0309 	orr.w	r3, r3, #9
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b30:	bf00      	nop
 8007b32:	4825      	ldr	r0, [pc, #148]	; (8007bc8 <lcd_send_data+0xd8>)
 8007b34:	f002 fa53 	bl	8009fde <HAL_I2C_GetError>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d0f9      	beq.n	8007b32 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b3e:	bf00      	nop
 8007b40:	4821      	ldr	r0, [pc, #132]	; (8007bc8 <lcd_send_data+0xd8>)
 8007b42:	f002 fa3f 	bl	8009fc4 <HAL_I2C_GetState>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d1f9      	bne.n	8007b40 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b4c:	4b1f      	ldr	r3, [pc, #124]	; (8007bcc <lcd_send_data+0xdc>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d116      	bne.n	8007b82 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
 8007b58:	e00f      	b.n	8007b7a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	3310      	adds	r3, #16
 8007b5e:	443b      	add	r3, r7
 8007b60:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	f022 0208 	bic.w	r2, r2, #8
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	443b      	add	r3, r7
 8007b70:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	3301      	adds	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d9ec      	bls.n	8007b5a <lcd_send_data+0x6a>
 8007b80:	e015      	b.n	8007bae <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b82:	2300      	movs	r3, #0
 8007b84:	73bb      	strb	r3, [r7, #14]
 8007b86:	e00f      	b.n	8007ba8 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	3310      	adds	r3, #16
 8007b8c:	443b      	add	r3, r7
 8007b8e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	f042 0208 	orr.w	r2, r2, #8
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	3310      	adds	r3, #16
 8007b9c:	443b      	add	r3, r7
 8007b9e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	73bb      	strb	r3, [r7, #14]
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d9ec      	bls.n	8007b88 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007bae:	f107 0208 	add.w	r2, r7, #8
 8007bb2:	2364      	movs	r3, #100	; 0x64
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	2304      	movs	r3, #4
 8007bb8:	214e      	movs	r1, #78	; 0x4e
 8007bba:	4803      	ldr	r0, [pc, #12]	; (8007bc8 <lcd_send_data+0xd8>)
 8007bbc:	f001 fda2 	bl	8009704 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	200003bc 	.word	0x200003bc
 8007bcc:	20000392 	.word	0x20000392

08007bd0 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007bd8:	e006      	b.n	8007be8 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff ff84 	bl	8007af0 <lcd_send_data>
	while (*str) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1f4      	bne.n	8007bda <lcd_send_string+0xa>
	}
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <lcd_send_char>:

void lcd_send_char(char ch) {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	4603      	mov	r3, r0
 8007c04:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	f023 030f 	bic.w	r3, r3, #15
 8007c0c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c14:	7b7b      	ldrb	r3, [r7, #13]
 8007c16:	f043 030d 	orr.w	r3, r3, #13
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c1e:	7b7b      	ldrb	r3, [r7, #13]
 8007c20:	f043 0309 	orr.w	r3, r3, #9
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c28:	7b3b      	ldrb	r3, [r7, #12]
 8007c2a:	f043 030d 	orr.w	r3, r3, #13
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c32:	7b3b      	ldrb	r3, [r7, #12]
 8007c34:	f043 0309 	orr.w	r3, r3, #9
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c3c:	bf00      	nop
 8007c3e:	4825      	ldr	r0, [pc, #148]	; (8007cd4 <lcd_send_char+0xd8>)
 8007c40:	f002 f9cd 	bl	8009fde <HAL_I2C_GetError>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d0f9      	beq.n	8007c3e <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c4a:	bf00      	nop
 8007c4c:	4821      	ldr	r0, [pc, #132]	; (8007cd4 <lcd_send_char+0xd8>)
 8007c4e:	f002 f9b9 	bl	8009fc4 <HAL_I2C_GetState>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d1f9      	bne.n	8007c4c <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007c58:	4b1f      	ldr	r3, [pc, #124]	; (8007cd8 <lcd_send_char+0xdc>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d116      	bne.n	8007c8e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]
 8007c64:	e00f      	b.n	8007c86 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	3310      	adds	r3, #16
 8007c6a:	443b      	add	r3, r7
 8007c6c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	f022 0208 	bic.w	r2, r2, #8
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	3310      	adds	r3, #16
 8007c7a:	443b      	add	r3, r7
 8007c7c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	3301      	adds	r3, #1
 8007c84:	73fb      	strb	r3, [r7, #15]
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d9ec      	bls.n	8007c66 <lcd_send_char+0x6a>
 8007c8c:	e015      	b.n	8007cba <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73bb      	strb	r3, [r7, #14]
 8007c92:	e00f      	b.n	8007cb4 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	3310      	adds	r3, #16
 8007c98:	443b      	add	r3, r7
 8007c9a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	f042 0208 	orr.w	r2, r2, #8
 8007ca4:	b2d2      	uxtb	r2, r2
 8007ca6:	3310      	adds	r3, #16
 8007ca8:	443b      	add	r3, r7
 8007caa:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	73bb      	strb	r3, [r7, #14]
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d9ec      	bls.n	8007c94 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007cba:	f107 0208 	add.w	r2, r7, #8
 8007cbe:	2364      	movs	r3, #100	; 0x64
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	2304      	movs	r3, #4
 8007cc4:	214e      	movs	r1, #78	; 0x4e
 8007cc6:	4803      	ldr	r0, [pc, #12]	; (8007cd4 <lcd_send_char+0xd8>)
 8007cc8:	f001 fd1c 	bl	8009704 <HAL_I2C_Master_Transmit>
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200003bc 	.word	0x200003bc
 8007cd8:	20000392 	.word	0x20000392

08007cdc <lcd_init>:

void lcd_init (void) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007ce0:	2002      	movs	r0, #2
 8007ce2:	f7ff fe95 	bl	8007a10 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007ce6:	2028      	movs	r0, #40	; 0x28
 8007ce8:	f7ff fe92 	bl	8007a10 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007cec:	200c      	movs	r0, #12
 8007cee:	f7ff fe8f 	bl	8007a10 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007cf2:	2080      	movs	r0, #128	; 0x80
 8007cf4:	f7ff fe8c 	bl	8007a10 <lcd_send_cmd>
	lcd_backlight(1);
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	f000 f86d 	bl	8007dd8 <lcd_backlight>
}
 8007cfe:	bf00      	nop
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	4603      	mov	r3, r0
 8007d0a:	460a      	mov	r2, r1
 8007d0c:	71fb      	strb	r3, [r7, #7]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d12:	79fb      	ldrb	r3, [r7, #7]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d106      	bne.n	8007d26 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d18:	79bb      	ldrb	r3, [r7, #6]
 8007d1a:	337f      	adds	r3, #127	; 0x7f
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fe76 	bl	8007a10 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d24:	e008      	b.n	8007d38 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d105      	bne.n	8007d38 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d2c:	79bb      	ldrb	r3, [r7, #6]
 8007d2e:	3b41      	subs	r3, #65	; 0x41
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fe6c 	bl	8007a10 <lcd_send_cmd>
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	603a      	str	r2, [r7, #0]
 8007d4a:	71fb      	strb	r3, [r7, #7]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007d50:	79ba      	ldrb	r2, [r7, #6]
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff ffd3 	bl	8007d02 <lcd_gotoxy>
	lcd_send_string(str);
 8007d5c:	6838      	ldr	r0, [r7, #0]
 8007d5e:	f7ff ff37 	bl	8007bd0 <lcd_send_string>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	4603      	mov	r3, r0
 8007d72:	71fb      	strb	r3, [r7, #7]
 8007d74:	460b      	mov	r3, r1
 8007d76:	71bb      	strb	r3, [r7, #6]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007d7c:	79ba      	ldrb	r2, [r7, #6]
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	4611      	mov	r1, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff ffbd 	bl	8007d02 <lcd_gotoxy>
    lcd_send_char(ch);
 8007d88:	797b      	ldrb	r3, [r7, #5]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff ff36 	bl	8007bfc <lcd_send_char>
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <lcd_clear>:

void lcd_clear(void) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007d9c:	2001      	movs	r0, #1
 8007d9e:	f7ff fe37 	bl	8007a10 <lcd_send_cmd>
    HAL_Delay(2);
 8007da2:	2002      	movs	r0, #2
 8007da4:	f000 fd22 	bl	80087ec <HAL_Delay>
}
 8007da8:	bf00      	nop
 8007daa:	bd80      	pop	{r7, pc}

08007dac <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	460a      	mov	r2, r1
 8007db6:	71fb      	strb	r3, [r7, #7]
 8007db8:	4613      	mov	r3, r2
 8007dba:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007dbc:	79ba      	ldrb	r2, [r7, #6]
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff ff9d 	bl	8007d02 <lcd_gotoxy>

    lcd_send_char(' ');
 8007dc8:	2020      	movs	r0, #32
 8007dca:	f7ff ff17 	bl	8007bfc <lcd_send_char>
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007de2:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <lcd_backlight+0x20>)
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007de8:	2000      	movs	r0, #0
 8007dea:	f7ff fe11 	bl	8007a10 <lcd_send_cmd>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000392 	.word	0x20000392

08007dfc <lcd_cursor>:

void lcd_cursor(int state) {
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d106      	bne.n	8007e18 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e0a:	200e      	movs	r0, #14
 8007e0c:	f7ff fe00 	bl	8007a10 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e10:	200f      	movs	r0, #15
 8007e12:	f7ff fdfd 	bl	8007a10 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e16:	e002      	b.n	8007e1e <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e18:	200c      	movs	r0, #12
 8007e1a:	f7ff fdf9 	bl	8007a10 <lcd_send_cmd>
}
 8007e1e:	bf00      	nop
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	4a03      	ldr	r2, [pc, #12]	; (8007e44 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e38:	6013      	str	r3, [r2, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr
 8007e44:	20000210 	.word	0x20000210

08007e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e4c:	f000 fc6c 	bl	8008728 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007e50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e54:	f000 fcca 	bl	80087ec <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e58:	f000 f89c 	bl	8007f94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e5c:	f000 f9be 	bl	80081dc <MX_GPIO_Init>
  MX_CAN_Init();
 8007e60:	f000 f8de 	bl	8008020 <MX_CAN_Init>
  MX_I2C1_Init();
 8007e64:	f000 f910 	bl	8008088 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007e68:	f000 f93c 	bl	80080e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007e6c:	f000 f98c 	bl	8008188 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007e70:	2201      	movs	r2, #1
 8007e72:	2140      	movs	r1, #64	; 0x40
 8007e74:	483e      	ldr	r0, [pc, #248]	; (8007f70 <main+0x128>)
 8007e76:	f001 faa0 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	2180      	movs	r1, #128	; 0x80
 8007e7e:	483c      	ldr	r0, [pc, #240]	; (8007f70 <main+0x128>)
 8007e80:	f001 fa9b 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007e84:	200a      	movs	r0, #10
 8007e86:	f000 fcb1 	bl	80087ec <HAL_Delay>
  lcd_init();
 8007e8a:	f7ff ff27 	bl	8007cdc <lcd_init>
  HAL_Delay(10);
 8007e8e:	200a      	movs	r0, #10
 8007e90:	f000 fcac 	bl	80087ec <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e94:	4837      	ldr	r0, [pc, #220]	; (8007f74 <main+0x12c>)
 8007e96:	f003 f943 	bl	800b120 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e9a:	bf00      	nop
 8007e9c:	4836      	ldr	r0, [pc, #216]	; (8007f78 <main+0x130>)
 8007e9e:	f002 f89e 	bl	8009fde <HAL_I2C_GetError>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d0f9      	beq.n	8007e9c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ea8:	bf00      	nop
 8007eaa:	4833      	ldr	r0, [pc, #204]	; (8007f78 <main+0x130>)
 8007eac:	f002 f88a 	bl	8009fc4 <HAL_I2C_GetState>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d1f9      	bne.n	8007eaa <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ebc:	482c      	ldr	r0, [pc, #176]	; (8007f70 <main+0x128>)
 8007ebe:	f001 fa7c 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ec8:	4829      	ldr	r0, [pc, #164]	; (8007f70 <main+0x128>)
 8007eca:	f001 fa76 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2104      	movs	r1, #4
 8007ed2:	4827      	ldr	r0, [pc, #156]	; (8007f70 <main+0x128>)
 8007ed4:	f001 fa71 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2102      	movs	r1, #2
 8007edc:	4824      	ldr	r0, [pc, #144]	; (8007f70 <main+0x128>)
 8007ede:	f001 fa6c 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	4822      	ldr	r0, [pc, #136]	; (8007f70 <main+0x128>)
 8007ee8:	f001 fa67 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007eec:	2200      	movs	r2, #0
 8007eee:	2120      	movs	r1, #32
 8007ef0:	4822      	ldr	r0, [pc, #136]	; (8007f7c <main+0x134>)
 8007ef2:	f001 fa62 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2110      	movs	r1, #16
 8007efa:	4820      	ldr	r0, [pc, #128]	; (8007f7c <main+0x134>)
 8007efc:	f001 fa5d 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f00:	2200      	movs	r2, #0
 8007f02:	2180      	movs	r1, #128	; 0x80
 8007f04:	481e      	ldr	r0, [pc, #120]	; (8007f80 <main+0x138>)
 8007f06:	f001 fa58 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2140      	movs	r1, #64	; 0x40
 8007f0e:	481c      	ldr	r0, [pc, #112]	; (8007f80 <main+0x138>)
 8007f10:	f001 fa53 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f14:	2200      	movs	r2, #0
 8007f16:	2120      	movs	r1, #32
 8007f18:	4819      	ldr	r0, [pc, #100]	; (8007f80 <main+0x138>)
 8007f1a:	f001 fa4e 	bl	80093ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2110      	movs	r1, #16
 8007f22:	4817      	ldr	r0, [pc, #92]	; (8007f80 <main+0x138>)
 8007f24:	f001 fa49 	bl	80093ba <HAL_GPIO_WritePin>

  i2cTest();
 8007f28:	f7f8 ff38 	bl	8000d9c <i2cTest>
  HAL_Delay(100);
 8007f2c:	2064      	movs	r0, #100	; 0x64
 8007f2e:	f000 fc5d 	bl	80087ec <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f32:	4a14      	ldr	r2, [pc, #80]	; (8007f84 <main+0x13c>)
 8007f34:	2101      	movs	r1, #1
 8007f36:	2001      	movs	r0, #1
 8007f38:	f7ff ff02 	bl	8007d40 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f3c:	4a12      	ldr	r2, [pc, #72]	; (8007f88 <main+0x140>)
 8007f3e:	2101      	movs	r1, #1
 8007f40:	2002      	movs	r0, #2
 8007f42:	f7ff fefd 	bl	8007d40 <lcd_print>
  HAL_Delay(1000);
 8007f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f4a:	f000 fc4f 	bl	80087ec <HAL_Delay>
  lcd_clear();
 8007f4e:	f7ff ff23 	bl	8007d98 <lcd_clear>

  eepromKontrol();
 8007f52:	f7f8 f96f 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f5a:	f000 fc47 	bl	80087ec <HAL_Delay>

  backLightTimer = millis;
 8007f5e:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <main+0x144>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a0b      	ldr	r2, [pc, #44]	; (8007f90 <main+0x148>)
 8007f64:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007f66:	f7ff fd2b 	bl	80079c0 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f6a:	f7fe fd5d 	bl	8006a28 <mainLoop>
 8007f6e:	e7fc      	b.n	8007f6a <main+0x122>
 8007f70:	40010c00 	.word	0x40010c00
 8007f74:	20000410 	.word	0x20000410
 8007f78:	200003bc 	.word	0x200003bc
 8007f7c:	40011000 	.word	0x40011000
 8007f80:	40010800 	.word	0x40010800
 8007f84:	0800dd70 	.word	0x0800dd70
 8007f88:	0800dd84 	.word	0x0800dd84
 8007f8c:	20000210 	.word	0x20000210
 8007f90:	2000022c 	.word	0x2000022c

08007f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b090      	sub	sp, #64	; 0x40
 8007f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f9a:	f107 0318 	add.w	r3, r7, #24
 8007f9e:	2228      	movs	r2, #40	; 0x28
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f004 fb45 	bl	800c632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fa8:	1d3b      	adds	r3, r7, #4
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	605a      	str	r2, [r3, #4]
 8007fb0:	609a      	str	r2, [r3, #8]
 8007fb2:	60da      	str	r2, [r3, #12]
 8007fb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fd8:	f107 0318 	add.w	r3, r7, #24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f002 fc3f 	bl	800a860 <HAL_RCC_OscConfig>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007fe8:	f000 f9a2 	bl	8008330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fec:	230f      	movs	r3, #15
 8007fee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008002:	1d3b      	adds	r3, r7, #4
 8008004:	2102      	movs	r1, #2
 8008006:	4618      	mov	r0, r3
 8008008:	f002 feac 	bl	800ad64 <HAL_RCC_ClockConfig>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008012:	f000 f98d 	bl	8008330 <Error_Handler>
  }
}
 8008016:	bf00      	nop
 8008018:	3740      	adds	r7, #64	; 0x40
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008024:	4b16      	ldr	r3, [pc, #88]	; (8008080 <MX_CAN_Init+0x60>)
 8008026:	4a17      	ldr	r2, [pc, #92]	; (8008084 <MX_CAN_Init+0x64>)
 8008028:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800802a:	4b15      	ldr	r3, [pc, #84]	; (8008080 <MX_CAN_Init+0x60>)
 800802c:	2210      	movs	r2, #16
 800802e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008030:	4b13      	ldr	r3, [pc, #76]	; (8008080 <MX_CAN_Init+0x60>)
 8008032:	2200      	movs	r2, #0
 8008034:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008036:	4b12      	ldr	r3, [pc, #72]	; (8008080 <MX_CAN_Init+0x60>)
 8008038:	2200      	movs	r2, #0
 800803a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <MX_CAN_Init+0x60>)
 800803e:	2200      	movs	r2, #0
 8008040:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <MX_CAN_Init+0x60>)
 8008044:	2200      	movs	r2, #0
 8008046:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008048:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <MX_CAN_Init+0x60>)
 800804a:	2200      	movs	r2, #0
 800804c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800804e:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <MX_CAN_Init+0x60>)
 8008050:	2200      	movs	r2, #0
 8008052:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <MX_CAN_Init+0x60>)
 8008056:	2200      	movs	r2, #0
 8008058:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800805a:	4b09      	ldr	r3, [pc, #36]	; (8008080 <MX_CAN_Init+0x60>)
 800805c:	2200      	movs	r2, #0
 800805e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008060:	4b07      	ldr	r3, [pc, #28]	; (8008080 <MX_CAN_Init+0x60>)
 8008062:	2200      	movs	r2, #0
 8008064:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008066:	4b06      	ldr	r3, [pc, #24]	; (8008080 <MX_CAN_Init+0x60>)
 8008068:	2200      	movs	r2, #0
 800806a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800806c:	4804      	ldr	r0, [pc, #16]	; (8008080 <MX_CAN_Init+0x60>)
 800806e:	f000 fbe1 	bl	8008834 <HAL_CAN_Init>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008078:	f000 f95a 	bl	8008330 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800807c:	bf00      	nop
 800807e:	bd80      	pop	{r7, pc}
 8008080:	20000394 	.word	0x20000394
 8008084:	40006400 	.word	0x40006400

08008088 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <MX_I2C1_Init+0x50>)
 800808e:	4a13      	ldr	r2, [pc, #76]	; (80080dc <MX_I2C1_Init+0x54>)
 8008090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008092:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <MX_I2C1_Init+0x50>)
 8008094:	4a12      	ldr	r2, [pc, #72]	; (80080e0 <MX_I2C1_Init+0x58>)
 8008096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008098:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <MX_I2C1_Init+0x50>)
 800809a:	2200      	movs	r2, #0
 800809c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800809e:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <MX_I2C1_Init+0x50>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <MX_I2C1_Init+0x50>)
 80080a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <MX_I2C1_Init+0x50>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <MX_I2C1_Init+0x50>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080b8:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <MX_I2C1_Init+0x50>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080be:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <MX_I2C1_Init+0x50>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080c4:	4804      	ldr	r0, [pc, #16]	; (80080d8 <MX_I2C1_Init+0x50>)
 80080c6:	f001 f9a9 	bl	800941c <HAL_I2C_Init>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080d0:	f000 f92e 	bl	8008330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80080d4:	bf00      	nop
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	200003bc 	.word	0x200003bc
 80080dc:	40005400 	.word	0x40005400
 80080e0:	00061a80 	.word	0x00061a80

080080e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080ea:	f107 0308 	add.w	r3, r7, #8
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	605a      	str	r2, [r3, #4]
 80080f4:	609a      	str	r2, [r3, #8]
 80080f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080f8:	463b      	mov	r3, r7
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008100:	4b1f      	ldr	r3, [pc, #124]	; (8008180 <MX_TIM1_Init+0x9c>)
 8008102:	4a20      	ldr	r2, [pc, #128]	; (8008184 <MX_TIM1_Init+0xa0>)
 8008104:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008106:	4b1e      	ldr	r3, [pc, #120]	; (8008180 <MX_TIM1_Init+0x9c>)
 8008108:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800810c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800810e:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <MX_TIM1_Init+0x9c>)
 8008110:	2200      	movs	r2, #0
 8008112:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008114:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <MX_TIM1_Init+0x9c>)
 8008116:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800811a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800811c:	4b18      	ldr	r3, [pc, #96]	; (8008180 <MX_TIM1_Init+0x9c>)
 800811e:	2200      	movs	r2, #0
 8008120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008122:	4b17      	ldr	r3, [pc, #92]	; (8008180 <MX_TIM1_Init+0x9c>)
 8008124:	2200      	movs	r2, #0
 8008126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008128:	4b15      	ldr	r3, [pc, #84]	; (8008180 <MX_TIM1_Init+0x9c>)
 800812a:	2200      	movs	r2, #0
 800812c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800812e:	4814      	ldr	r0, [pc, #80]	; (8008180 <MX_TIM1_Init+0x9c>)
 8008130:	f002 ffa6 	bl	800b080 <HAL_TIM_Base_Init>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800813a:	f000 f8f9 	bl	8008330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800813e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008142:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008144:	f107 0308 	add.w	r3, r7, #8
 8008148:	4619      	mov	r1, r3
 800814a:	480d      	ldr	r0, [pc, #52]	; (8008180 <MX_TIM1_Init+0x9c>)
 800814c:	f003 f950 	bl	800b3f0 <HAL_TIM_ConfigClockSource>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008156:	f000 f8eb 	bl	8008330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800815a:	2300      	movs	r3, #0
 800815c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008162:	463b      	mov	r3, r7
 8008164:	4619      	mov	r1, r3
 8008166:	4806      	ldr	r0, [pc, #24]	; (8008180 <MX_TIM1_Init+0x9c>)
 8008168:	f003 fb3e 	bl	800b7e8 <HAL_TIMEx_MasterConfigSynchronization>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008172:	f000 f8dd 	bl	8008330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008176:	bf00      	nop
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000410 	.word	0x20000410
 8008184:	40012c00 	.word	0x40012c00

08008188 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800818c:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 800818e:	4a12      	ldr	r2, [pc, #72]	; (80081d8 <MX_USART1_UART_Init+0x50>)
 8008190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008192:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 8008194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800819a:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 800819c:	2200      	movs	r2, #0
 800819e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081a0:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081ae:	220c      	movs	r2, #12
 80081b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081b2:	4b08      	ldr	r3, [pc, #32]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081b8:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081be:	4805      	ldr	r0, [pc, #20]	; (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081c0:	f003 fb90 	bl	800b8e4 <HAL_UART_Init>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80081ca:	f000 f8b1 	bl	8008330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081ce:	bf00      	nop
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000458 	.word	0x20000458
 80081d8:	40013800 	.word	0x40013800

080081dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081e2:	f107 0310 	add.w	r3, r7, #16
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	605a      	str	r2, [r3, #4]
 80081ec:	609a      	str	r2, [r3, #8]
 80081ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80081f0:	4b4b      	ldr	r3, [pc, #300]	; (8008320 <MX_GPIO_Init+0x144>)
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	4a4a      	ldr	r2, [pc, #296]	; (8008320 <MX_GPIO_Init+0x144>)
 80081f6:	f043 0310 	orr.w	r3, r3, #16
 80081fa:	6193      	str	r3, [r2, #24]
 80081fc:	4b48      	ldr	r3, [pc, #288]	; (8008320 <MX_GPIO_Init+0x144>)
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008208:	4b45      	ldr	r3, [pc, #276]	; (8008320 <MX_GPIO_Init+0x144>)
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	4a44      	ldr	r2, [pc, #272]	; (8008320 <MX_GPIO_Init+0x144>)
 800820e:	f043 0320 	orr.w	r3, r3, #32
 8008212:	6193      	str	r3, [r2, #24]
 8008214:	4b42      	ldr	r3, [pc, #264]	; (8008320 <MX_GPIO_Init+0x144>)
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008220:	4b3f      	ldr	r3, [pc, #252]	; (8008320 <MX_GPIO_Init+0x144>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	4a3e      	ldr	r2, [pc, #248]	; (8008320 <MX_GPIO_Init+0x144>)
 8008226:	f043 0304 	orr.w	r3, r3, #4
 800822a:	6193      	str	r3, [r2, #24]
 800822c:	4b3c      	ldr	r3, [pc, #240]	; (8008320 <MX_GPIO_Init+0x144>)
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	607b      	str	r3, [r7, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008238:	4b39      	ldr	r3, [pc, #228]	; (8008320 <MX_GPIO_Init+0x144>)
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	4a38      	ldr	r2, [pc, #224]	; (8008320 <MX_GPIO_Init+0x144>)
 800823e:	f043 0308 	orr.w	r3, r3, #8
 8008242:	6193      	str	r3, [r2, #24]
 8008244:	4b36      	ldr	r3, [pc, #216]	; (8008320 <MX_GPIO_Init+0x144>)
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	603b      	str	r3, [r7, #0]
 800824e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008250:	2200      	movs	r2, #0
 8008252:	21f0      	movs	r1, #240	; 0xf0
 8008254:	4833      	ldr	r0, [pc, #204]	; (8008324 <MX_GPIO_Init+0x148>)
 8008256:	f001 f8b0 	bl	80093ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800825a:	2200      	movs	r2, #0
 800825c:	f241 0130 	movw	r1, #4144	; 0x1030
 8008260:	4831      	ldr	r0, [pc, #196]	; (8008328 <MX_GPIO_Init+0x14c>)
 8008262:	f001 f8aa 	bl	80093ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008266:	2200      	movs	r2, #0
 8008268:	f640 4107 	movw	r1, #3079	; 0xc07
 800826c:	482f      	ldr	r0, [pc, #188]	; (800832c <MX_GPIO_Init+0x150>)
 800826e:	f001 f8a4 	bl	80093ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008272:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008276:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800827c:	2300      	movs	r3, #0
 800827e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008280:	f107 0310 	add.w	r3, r7, #16
 8008284:	4619      	mov	r1, r3
 8008286:	4828      	ldr	r0, [pc, #160]	; (8008328 <MX_GPIO_Init+0x14c>)
 8008288:	f000 fe20 	bl	8008ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800828c:	f248 130f 	movw	r3, #33039	; 0x810f
 8008290:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008296:	2300      	movs	r3, #0
 8008298:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	4619      	mov	r1, r3
 80082a0:	4820      	ldr	r0, [pc, #128]	; (8008324 <MX_GPIO_Init+0x148>)
 80082a2:	f000 fe13 	bl	8008ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80082a6:	23f0      	movs	r3, #240	; 0xf0
 80082a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082aa:	2301      	movs	r3, #1
 80082ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082b2:	2302      	movs	r3, #2
 80082b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b6:	f107 0310 	add.w	r3, r7, #16
 80082ba:	4619      	mov	r1, r3
 80082bc:	4819      	ldr	r0, [pc, #100]	; (8008324 <MX_GPIO_Init+0x148>)
 80082be:	f000 fe05 	bl	8008ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80082c2:	f241 0330 	movw	r3, #4144	; 0x1030
 80082c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082c8:	2301      	movs	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082d0:	2302      	movs	r3, #2
 80082d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082d4:	f107 0310 	add.w	r3, r7, #16
 80082d8:	4619      	mov	r1, r3
 80082da:	4813      	ldr	r0, [pc, #76]	; (8008328 <MX_GPIO_Init+0x14c>)
 80082dc:	f000 fdf6 	bl	8008ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082e0:	f640 4307 	movw	r3, #3079	; 0xc07
 80082e4:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082e6:	2301      	movs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ee:	2302      	movs	r3, #2
 80082f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082f2:	f107 0310 	add.w	r3, r7, #16
 80082f6:	4619      	mov	r1, r3
 80082f8:	480c      	ldr	r0, [pc, #48]	; (800832c <MX_GPIO_Init+0x150>)
 80082fa:	f000 fde7 	bl	8008ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80082fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008308:	2300      	movs	r3, #0
 800830a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800830c:	f107 0310 	add.w	r3, r7, #16
 8008310:	4619      	mov	r1, r3
 8008312:	4806      	ldr	r0, [pc, #24]	; (800832c <MX_GPIO_Init+0x150>)
 8008314:	f000 fdda 	bl	8008ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008318:	bf00      	nop
 800831a:	3720      	adds	r7, #32
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40021000 	.word	0x40021000
 8008324:	40010800 	.word	0x40010800
 8008328:	40011000 	.word	0x40011000
 800832c:	40010c00 	.word	0x40010c00

08008330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <HAL_MspInit+0x5c>)
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_MspInit+0x5c>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6193      	str	r3, [r2, #24]
 800834e:	4b12      	ldr	r3, [pc, #72]	; (8008398 <HAL_MspInit+0x5c>)
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	60bb      	str	r3, [r7, #8]
 8008358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <HAL_MspInit+0x5c>)
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	4a0e      	ldr	r2, [pc, #56]	; (8008398 <HAL_MspInit+0x5c>)
 8008360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008364:	61d3      	str	r3, [r2, #28]
 8008366:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <HAL_MspInit+0x5c>)
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008372:	4b0a      	ldr	r3, [pc, #40]	; (800839c <HAL_MspInit+0x60>)
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	4a04      	ldr	r2, [pc, #16]	; (800839c <HAL_MspInit+0x60>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr
 8008398:	40021000 	.word	0x40021000
 800839c:	40010000 	.word	0x40010000

080083a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083a8:	f107 0310 	add.w	r3, r7, #16
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	605a      	str	r2, [r3, #4]
 80083b2:	609a      	str	r2, [r3, #8]
 80083b4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a1c      	ldr	r2, [pc, #112]	; (800842c <HAL_CAN_MspInit+0x8c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d131      	bne.n	8008424 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80083c0:	4b1b      	ldr	r3, [pc, #108]	; (8008430 <HAL_CAN_MspInit+0x90>)
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	4a1a      	ldr	r2, [pc, #104]	; (8008430 <HAL_CAN_MspInit+0x90>)
 80083c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083ca:	61d3      	str	r3, [r2, #28]
 80083cc:	4b18      	ldr	r3, [pc, #96]	; (8008430 <HAL_CAN_MspInit+0x90>)
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <HAL_CAN_MspInit+0x90>)
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	4a14      	ldr	r2, [pc, #80]	; (8008430 <HAL_CAN_MspInit+0x90>)
 80083de:	f043 0304 	orr.w	r3, r3, #4
 80083e2:	6193      	str	r3, [r2, #24]
 80083e4:	4b12      	ldr	r3, [pc, #72]	; (8008430 <HAL_CAN_MspInit+0x90>)
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	60bb      	str	r3, [r7, #8]
 80083ee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80083f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083fe:	f107 0310 	add.w	r3, r7, #16
 8008402:	4619      	mov	r1, r3
 8008404:	480b      	ldr	r0, [pc, #44]	; (8008434 <HAL_CAN_MspInit+0x94>)
 8008406:	f000 fd61 	bl	8008ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800840a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800840e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008410:	2302      	movs	r3, #2
 8008412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008414:	2303      	movs	r3, #3
 8008416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008418:	f107 0310 	add.w	r3, r7, #16
 800841c:	4619      	mov	r1, r3
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <HAL_CAN_MspInit+0x94>)
 8008420:	f000 fd54 	bl	8008ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008424:	bf00      	nop
 8008426:	3720      	adds	r7, #32
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40006400 	.word	0x40006400
 8008430:	40021000 	.word	0x40021000
 8008434:	40010800 	.word	0x40010800

08008438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008440:	f107 0310 	add.w	r3, r7, #16
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	609a      	str	r2, [r3, #8]
 800844c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a15      	ldr	r2, [pc, #84]	; (80084a8 <HAL_I2C_MspInit+0x70>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d123      	bne.n	80084a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008458:	4b14      	ldr	r3, [pc, #80]	; (80084ac <HAL_I2C_MspInit+0x74>)
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <HAL_I2C_MspInit+0x74>)
 800845e:	f043 0308 	orr.w	r3, r3, #8
 8008462:	6193      	str	r3, [r2, #24]
 8008464:	4b11      	ldr	r3, [pc, #68]	; (80084ac <HAL_I2C_MspInit+0x74>)
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008470:	23c0      	movs	r3, #192	; 0xc0
 8008472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008474:	2312      	movs	r3, #18
 8008476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008478:	2303      	movs	r3, #3
 800847a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800847c:	f107 0310 	add.w	r3, r7, #16
 8008480:	4619      	mov	r1, r3
 8008482:	480b      	ldr	r0, [pc, #44]	; (80084b0 <HAL_I2C_MspInit+0x78>)
 8008484:	f000 fd22 	bl	8008ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008488:	4b08      	ldr	r3, [pc, #32]	; (80084ac <HAL_I2C_MspInit+0x74>)
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	4a07      	ldr	r2, [pc, #28]	; (80084ac <HAL_I2C_MspInit+0x74>)
 800848e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008492:	61d3      	str	r3, [r2, #28]
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <HAL_I2C_MspInit+0x74>)
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800849c:	60bb      	str	r3, [r7, #8]
 800849e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084a0:	bf00      	nop
 80084a2:	3720      	adds	r7, #32
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40005400 	.word	0x40005400
 80084ac:	40021000 	.word	0x40021000
 80084b0:	40010c00 	.word	0x40010c00

080084b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <HAL_I2C_MspDeInit+0x38>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d10d      	bne.n	80084e2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80084c6:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <HAL_I2C_MspDeInit+0x3c>)
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <HAL_I2C_MspDeInit+0x3c>)
 80084cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084d0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80084d2:	2140      	movs	r1, #64	; 0x40
 80084d4:	4807      	ldr	r0, [pc, #28]	; (80084f4 <HAL_I2C_MspDeInit+0x40>)
 80084d6:	f000 fe8d 	bl	80091f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80084da:	2180      	movs	r1, #128	; 0x80
 80084dc:	4805      	ldr	r0, [pc, #20]	; (80084f4 <HAL_I2C_MspDeInit+0x40>)
 80084de:	f000 fe89 	bl	80091f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	40005400 	.word	0x40005400
 80084f0:	40021000 	.word	0x40021000
 80084f4:	40010c00 	.word	0x40010c00

080084f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a0d      	ldr	r2, [pc, #52]	; (800853c <HAL_TIM_Base_MspInit+0x44>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d113      	bne.n	8008532 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800850a:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <HAL_TIM_Base_MspInit+0x48>)
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	4a0c      	ldr	r2, [pc, #48]	; (8008540 <HAL_TIM_Base_MspInit+0x48>)
 8008510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008514:	6193      	str	r3, [r2, #24]
 8008516:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <HAL_TIM_Base_MspInit+0x48>)
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008522:	2200      	movs	r2, #0
 8008524:	2100      	movs	r1, #0
 8008526:	2019      	movs	r0, #25
 8008528:	f000 fb57 	bl	8008bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800852c:	2019      	movs	r0, #25
 800852e:	f000 fb70 	bl	8008c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40012c00 	.word	0x40012c00
 8008540:	40021000 	.word	0x40021000

08008544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800854c:	f107 0310 	add.w	r3, r7, #16
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	609a      	str	r2, [r3, #8]
 8008558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a20      	ldr	r2, [pc, #128]	; (80085e0 <HAL_UART_MspInit+0x9c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d139      	bne.n	80085d8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008564:	4b1f      	ldr	r3, [pc, #124]	; (80085e4 <HAL_UART_MspInit+0xa0>)
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	4a1e      	ldr	r2, [pc, #120]	; (80085e4 <HAL_UART_MspInit+0xa0>)
 800856a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800856e:	6193      	str	r3, [r2, #24]
 8008570:	4b1c      	ldr	r3, [pc, #112]	; (80085e4 <HAL_UART_MspInit+0xa0>)
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800857c:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <HAL_UART_MspInit+0xa0>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	4a18      	ldr	r2, [pc, #96]	; (80085e4 <HAL_UART_MspInit+0xa0>)
 8008582:	f043 0304 	orr.w	r3, r3, #4
 8008586:	6193      	str	r3, [r2, #24]
 8008588:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <HAL_UART_MspInit+0xa0>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	60bb      	str	r3, [r7, #8]
 8008592:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800859a:	2302      	movs	r3, #2
 800859c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800859e:	2303      	movs	r3, #3
 80085a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a2:	f107 0310 	add.w	r3, r7, #16
 80085a6:	4619      	mov	r1, r3
 80085a8:	480f      	ldr	r0, [pc, #60]	; (80085e8 <HAL_UART_MspInit+0xa4>)
 80085aa:	f000 fc8f 	bl	8008ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085b4:	2300      	movs	r3, #0
 80085b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b8:	2300      	movs	r3, #0
 80085ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085bc:	f107 0310 	add.w	r3, r7, #16
 80085c0:	4619      	mov	r1, r3
 80085c2:	4809      	ldr	r0, [pc, #36]	; (80085e8 <HAL_UART_MspInit+0xa4>)
 80085c4:	f000 fc82 	bl	8008ecc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80085c8:	2200      	movs	r2, #0
 80085ca:	2100      	movs	r1, #0
 80085cc:	2025      	movs	r0, #37	; 0x25
 80085ce:	f000 fb04 	bl	8008bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085d2:	2025      	movs	r0, #37	; 0x25
 80085d4:	f000 fb1d 	bl	8008c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085d8:	bf00      	nop
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40013800 	.word	0x40013800
 80085e4:	40021000 	.word	0x40021000
 80085e8:	40010800 	.word	0x40010800

080085ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80085f0:	e7fe      	b.n	80085f0 <NMI_Handler+0x4>

080085f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085f2:	b480      	push	{r7}
 80085f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085f6:	e7fe      	b.n	80085f6 <HardFault_Handler+0x4>

080085f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085fc:	e7fe      	b.n	80085fc <MemManage_Handler+0x4>

080085fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085fe:	b480      	push	{r7}
 8008600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008602:	e7fe      	b.n	8008602 <BusFault_Handler+0x4>

08008604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008608:	e7fe      	b.n	8008608 <UsageFault_Handler+0x4>

0800860a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800860a:	b480      	push	{r7}
 800860c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800860e:	bf00      	nop
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr

08008616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008616:	b480      	push	{r7}
 8008618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800861a:	bf00      	nop
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr

08008622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008622:	b480      	push	{r7}
 8008624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008626:	bf00      	nop
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008632:	f000 f8bf 	bl	80087b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008636:	bf00      	nop
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008640:	4802      	ldr	r0, [pc, #8]	; (800864c <TIM1_UP_IRQHandler+0x10>)
 8008642:	f002 fdcd 	bl	800b1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008646:	bf00      	nop
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000410 	.word	0x20000410

08008650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008654:	4802      	ldr	r0, [pc, #8]	; (8008660 <USART1_IRQHandler+0x10>)
 8008656:	f003 f9cb 	bl	800b9f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800865a:	bf00      	nop
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000458 	.word	0x20000458

08008664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800866c:	4a14      	ldr	r2, [pc, #80]	; (80086c0 <_sbrk+0x5c>)
 800866e:	4b15      	ldr	r3, [pc, #84]	; (80086c4 <_sbrk+0x60>)
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008678:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <_sbrk+0x64>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008680:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <_sbrk+0x64>)
 8008682:	4a12      	ldr	r2, [pc, #72]	; (80086cc <_sbrk+0x68>)
 8008684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008686:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <_sbrk+0x64>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4413      	add	r3, r2
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	429a      	cmp	r2, r3
 8008692:	d207      	bcs.n	80086a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008694:	f003 ffe6 	bl	800c664 <__errno>
 8008698:	4603      	mov	r3, r0
 800869a:	220c      	movs	r2, #12
 800869c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800869e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086a2:	e009      	b.n	80086b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086a4:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <_sbrk+0x64>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <_sbrk+0x64>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	4a05      	ldr	r2, [pc, #20]	; (80086c8 <_sbrk+0x64>)
 80086b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	2000c000 	.word	0x2000c000
 80086c4:	00000400 	.word	0x00000400
 80086c8:	200004a0 	.word	0x200004a0
 80086cc:	200005f0 	.word	0x200005f0

080086d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086dc:	480c      	ldr	r0, [pc, #48]	; (8008710 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80086de:	490d      	ldr	r1, [pc, #52]	; (8008714 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80086e0:	4a0d      	ldr	r2, [pc, #52]	; (8008718 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80086e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086e4:	e002      	b.n	80086ec <LoopCopyDataInit>

080086e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086ea:	3304      	adds	r3, #4

080086ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086f0:	d3f9      	bcc.n	80086e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086f2:	4a0a      	ldr	r2, [pc, #40]	; (800871c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80086f4:	4c0a      	ldr	r4, [pc, #40]	; (8008720 <LoopFillZerobss+0x22>)
  movs r3, #0
 80086f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086f8:	e001      	b.n	80086fe <LoopFillZerobss>

080086fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086fc:	3204      	adds	r2, #4

080086fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008700:	d3fb      	bcc.n	80086fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008702:	f7ff ffe5 	bl	80086d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008706:	f003 ffb3 	bl	800c670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800870a:	f7ff fb9d 	bl	8007e48 <main>
  bx lr
 800870e:	4770      	bx	lr
  ldr r0, =_sdata
 8008710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008714:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8008718:	0800de24 	.word	0x0800de24
  ldr r2, =_sbss
 800871c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8008720:	200005f0 	.word	0x200005f0

08008724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008724:	e7fe      	b.n	8008724 <ADC1_2_IRQHandler>
	...

08008728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800872c:	4b08      	ldr	r3, [pc, #32]	; (8008750 <HAL_Init+0x28>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a07      	ldr	r2, [pc, #28]	; (8008750 <HAL_Init+0x28>)
 8008732:	f043 0310 	orr.w	r3, r3, #16
 8008736:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008738:	2003      	movs	r0, #3
 800873a:	f000 fa43 	bl	8008bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800873e:	200f      	movs	r0, #15
 8008740:	f000 f808 	bl	8008754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008744:	f7ff fdfa 	bl	800833c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40022000 	.word	0x40022000

08008754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800875c:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <HAL_InitTick+0x54>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4b12      	ldr	r3, [pc, #72]	; (80087ac <HAL_InitTick+0x58>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	4619      	mov	r1, r3
 8008766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800876a:	fbb3 f3f1 	udiv	r3, r3, r1
 800876e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fa5b 	bl	8008c2e <HAL_SYSTICK_Config>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e00e      	b.n	80087a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b0f      	cmp	r3, #15
 8008786:	d80a      	bhi.n	800879e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008788:	2200      	movs	r2, #0
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008790:	f000 fa23 	bl	8008bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008794:	4a06      	ldr	r2, [pc, #24]	; (80087b0 <HAL_InitTick+0x5c>)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e000      	b.n	80087a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	200000a0 	.word	0x200000a0
 80087ac:	200000a8 	.word	0x200000a8
 80087b0:	200000a4 	.word	0x200000a4

080087b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <HAL_IncTick+0x1c>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <HAL_IncTick+0x20>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4413      	add	r3, r2
 80087c4:	4a03      	ldr	r2, [pc, #12]	; (80087d4 <HAL_IncTick+0x20>)
 80087c6:	6013      	str	r3, [r2, #0]
}
 80087c8:	bf00      	nop
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr
 80087d0:	200000a8 	.word	0x200000a8
 80087d4:	200004a4 	.word	0x200004a4

080087d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  return uwTick;
 80087dc:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <HAL_GetTick+0x10>)
 80087de:	681b      	ldr	r3, [r3, #0]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc80      	pop	{r7}
 80087e6:	4770      	bx	lr
 80087e8:	200004a4 	.word	0x200004a4

080087ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087f4:	f7ff fff0 	bl	80087d8 <HAL_GetTick>
 80087f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008804:	d005      	beq.n	8008812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008806:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <HAL_Delay+0x44>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008812:	bf00      	nop
 8008814:	f7ff ffe0 	bl	80087d8 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	429a      	cmp	r2, r3
 8008822:	d8f7      	bhi.n	8008814 <HAL_Delay+0x28>
  {
  }
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200000a8 	.word	0x200000a8

08008834 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e0ed      	b.n	8008a22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff fda4 	bl	80083a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0201 	orr.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008868:	f7ff ffb6 	bl	80087d8 <HAL_GetTick>
 800886c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800886e:	e012      	b.n	8008896 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008870:	f7ff ffb2 	bl	80087d8 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b0a      	cmp	r3, #10
 800887c:	d90b      	bls.n	8008896 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2205      	movs	r2, #5
 800888e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e0c5      	b.n	8008a22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0e5      	beq.n	8008870 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0202 	bic.w	r2, r2, #2
 80088b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088b4:	f7ff ff90 	bl	80087d8 <HAL_GetTick>
 80088b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088ba:	e012      	b.n	80088e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088bc:	f7ff ff8c 	bl	80087d8 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b0a      	cmp	r3, #10
 80088c8:	d90b      	bls.n	80088e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2205      	movs	r2, #5
 80088da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e09f      	b.n	8008a22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7e1b      	ldrb	r3, [r3, #24]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d108      	bne.n	800890a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	e007      	b.n	800891a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7e5b      	ldrb	r3, [r3, #25]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d108      	bne.n	8008934 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	e007      	b.n	8008944 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008942:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	7e9b      	ldrb	r3, [r3, #26]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d108      	bne.n	800895e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0220 	orr.w	r2, r2, #32
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	e007      	b.n	800896e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0220 	bic.w	r2, r2, #32
 800896c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7edb      	ldrb	r3, [r3, #27]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d108      	bne.n	8008988 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0210 	bic.w	r2, r2, #16
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	e007      	b.n	8008998 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0210 	orr.w	r2, r2, #16
 8008996:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7f1b      	ldrb	r3, [r3, #28]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d108      	bne.n	80089b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0208 	orr.w	r2, r2, #8
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	e007      	b.n	80089c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0208 	bic.w	r2, r2, #8
 80089c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7f5b      	ldrb	r3, [r3, #29]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d108      	bne.n	80089dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0204 	orr.w	r2, r2, #4
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e007      	b.n	80089ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0204 	bic.w	r2, r2, #4
 80089ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	431a      	orrs	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	ea42 0103 	orr.w	r1, r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	1e5a      	subs	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <__NVIC_SetPriorityGrouping>:
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <__NVIC_SetPriorityGrouping+0x44>)
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a48:	4013      	ands	r3, r2
 8008a4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a5e:	4a04      	ldr	r2, [pc, #16]	; (8008a70 <__NVIC_SetPriorityGrouping+0x44>)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	60d3      	str	r3, [r2, #12]
}
 8008a64:	bf00      	nop
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	e000ed00 	.word	0xe000ed00

08008a74 <__NVIC_GetPriorityGrouping>:
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <__NVIC_GetPriorityGrouping+0x18>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	f003 0307 	and.w	r3, r3, #7
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bc80      	pop	{r7}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	e000ed00 	.word	0xe000ed00

08008a90 <__NVIC_EnableIRQ>:
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	db0b      	blt.n	8008aba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	f003 021f 	and.w	r2, r3, #31
 8008aa8:	4906      	ldr	r1, [pc, #24]	; (8008ac4 <__NVIC_EnableIRQ+0x34>)
 8008aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr
 8008ac4:	e000e100 	.word	0xe000e100

08008ac8 <__NVIC_SetPriority>:
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	db0a      	blt.n	8008af2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	490c      	ldr	r1, [pc, #48]	; (8008b14 <__NVIC_SetPriority+0x4c>)
 8008ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ae6:	0112      	lsls	r2, r2, #4
 8008ae8:	b2d2      	uxtb	r2, r2
 8008aea:	440b      	add	r3, r1
 8008aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008af0:	e00a      	b.n	8008b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	4908      	ldr	r1, [pc, #32]	; (8008b18 <__NVIC_SetPriority+0x50>)
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	3b04      	subs	r3, #4
 8008b00:	0112      	lsls	r2, r2, #4
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	440b      	add	r3, r1
 8008b06:	761a      	strb	r2, [r3, #24]
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	e000e100 	.word	0xe000e100
 8008b18:	e000ed00 	.word	0xe000ed00

08008b1c <NVIC_EncodePriority>:
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b089      	sub	sp, #36	; 0x24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f1c3 0307 	rsb	r3, r3, #7
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	bf28      	it	cs
 8008b3a:	2304      	movcs	r3, #4
 8008b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	3304      	adds	r3, #4
 8008b42:	2b06      	cmp	r3, #6
 8008b44:	d902      	bls.n	8008b4c <NVIC_EncodePriority+0x30>
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	3b03      	subs	r3, #3
 8008b4a:	e000      	b.n	8008b4e <NVIC_EncodePriority+0x32>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	43da      	mvns	r2, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	401a      	ands	r2, r3
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6e:	43d9      	mvns	r1, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b74:	4313      	orrs	r3, r2
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3724      	adds	r7, #36	; 0x24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b90:	d301      	bcc.n	8008b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b92:	2301      	movs	r3, #1
 8008b94:	e00f      	b.n	8008bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b96:	4a0a      	ldr	r2, [pc, #40]	; (8008bc0 <SysTick_Config+0x40>)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b9e:	210f      	movs	r1, #15
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ba4:	f7ff ff90 	bl	8008ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <SysTick_Config+0x40>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bae:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <SysTick_Config+0x40>)
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	e000e010 	.word	0xe000e010

08008bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff ff2d 	bl	8008a2c <__NVIC_SetPriorityGrouping>
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b086      	sub	sp, #24
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	4603      	mov	r3, r0
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bec:	f7ff ff42 	bl	8008a74 <__NVIC_GetPriorityGrouping>
 8008bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	6978      	ldr	r0, [r7, #20]
 8008bf8:	f7ff ff90 	bl	8008b1c <NVIC_EncodePriority>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c02:	4611      	mov	r1, r2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff ff5f 	bl	8008ac8 <__NVIC_SetPriority>
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	4603      	mov	r3, r0
 8008c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff ff35 	bl	8008a90 <__NVIC_EnableIRQ>
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff ffa2 	bl	8008b80 <SysTick_Config>
 8008c3c:	4603      	mov	r3, r0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d008      	beq.n	8008c70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2204      	movs	r2, #4
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e020      	b.n	8008cb2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f022 020e 	bic.w	r2, r2, #14
 8008c7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0201 	bic.w	r2, r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c98:	2101      	movs	r1, #1
 8008c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8008c9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr

08008cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d005      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	73fb      	strb	r3, [r7, #15]
 8008cde:	e0d6      	b.n	8008e8e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 020e 	bic.w	r2, r2, #14
 8008cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0201 	bic.w	r2, r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	4b64      	ldr	r3, [pc, #400]	; (8008e98 <HAL_DMA_Abort_IT+0x1dc>)
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d958      	bls.n	8008dbe <HAL_DMA_Abort_IT+0x102>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a62      	ldr	r2, [pc, #392]	; (8008e9c <HAL_DMA_Abort_IT+0x1e0>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d04f      	beq.n	8008db6 <HAL_DMA_Abort_IT+0xfa>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a61      	ldr	r2, [pc, #388]	; (8008ea0 <HAL_DMA_Abort_IT+0x1e4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d048      	beq.n	8008db2 <HAL_DMA_Abort_IT+0xf6>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a5f      	ldr	r2, [pc, #380]	; (8008ea4 <HAL_DMA_Abort_IT+0x1e8>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d040      	beq.n	8008dac <HAL_DMA_Abort_IT+0xf0>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a5e      	ldr	r2, [pc, #376]	; (8008ea8 <HAL_DMA_Abort_IT+0x1ec>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d038      	beq.n	8008da6 <HAL_DMA_Abort_IT+0xea>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a5c      	ldr	r2, [pc, #368]	; (8008eac <HAL_DMA_Abort_IT+0x1f0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d030      	beq.n	8008da0 <HAL_DMA_Abort_IT+0xe4>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a5b      	ldr	r2, [pc, #364]	; (8008eb0 <HAL_DMA_Abort_IT+0x1f4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d028      	beq.n	8008d9a <HAL_DMA_Abort_IT+0xde>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a52      	ldr	r2, [pc, #328]	; (8008e98 <HAL_DMA_Abort_IT+0x1dc>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d020      	beq.n	8008d94 <HAL_DMA_Abort_IT+0xd8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a57      	ldr	r2, [pc, #348]	; (8008eb4 <HAL_DMA_Abort_IT+0x1f8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d019      	beq.n	8008d90 <HAL_DMA_Abort_IT+0xd4>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a55      	ldr	r2, [pc, #340]	; (8008eb8 <HAL_DMA_Abort_IT+0x1fc>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d012      	beq.n	8008d8c <HAL_DMA_Abort_IT+0xd0>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a54      	ldr	r2, [pc, #336]	; (8008ebc <HAL_DMA_Abort_IT+0x200>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d00a      	beq.n	8008d86 <HAL_DMA_Abort_IT+0xca>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a52      	ldr	r2, [pc, #328]	; (8008ec0 <HAL_DMA_Abort_IT+0x204>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d102      	bne.n	8008d80 <HAL_DMA_Abort_IT+0xc4>
 8008d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d7e:	e01b      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d84:	e018      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d8a:	e015      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	e013      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e011      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d98:	e00e      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008d9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d9e:	e00b      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008da4:	e008      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008daa:	e005      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db0:	e002      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008db2:	2310      	movs	r3, #16
 8008db4:	e000      	b.n	8008db8 <HAL_DMA_Abort_IT+0xfc>
 8008db6:	2301      	movs	r3, #1
 8008db8:	4a42      	ldr	r2, [pc, #264]	; (8008ec4 <HAL_DMA_Abort_IT+0x208>)
 8008dba:	6053      	str	r3, [r2, #4]
 8008dbc:	e057      	b.n	8008e6e <HAL_DMA_Abort_IT+0x1b2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a36      	ldr	r2, [pc, #216]	; (8008e9c <HAL_DMA_Abort_IT+0x1e0>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d04f      	beq.n	8008e68 <HAL_DMA_Abort_IT+0x1ac>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a34      	ldr	r2, [pc, #208]	; (8008ea0 <HAL_DMA_Abort_IT+0x1e4>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d048      	beq.n	8008e64 <HAL_DMA_Abort_IT+0x1a8>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a33      	ldr	r2, [pc, #204]	; (8008ea4 <HAL_DMA_Abort_IT+0x1e8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d040      	beq.n	8008e5e <HAL_DMA_Abort_IT+0x1a2>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a31      	ldr	r2, [pc, #196]	; (8008ea8 <HAL_DMA_Abort_IT+0x1ec>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d038      	beq.n	8008e58 <HAL_DMA_Abort_IT+0x19c>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a30      	ldr	r2, [pc, #192]	; (8008eac <HAL_DMA_Abort_IT+0x1f0>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d030      	beq.n	8008e52 <HAL_DMA_Abort_IT+0x196>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a2e      	ldr	r2, [pc, #184]	; (8008eb0 <HAL_DMA_Abort_IT+0x1f4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d028      	beq.n	8008e4c <HAL_DMA_Abort_IT+0x190>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a26      	ldr	r2, [pc, #152]	; (8008e98 <HAL_DMA_Abort_IT+0x1dc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d020      	beq.n	8008e46 <HAL_DMA_Abort_IT+0x18a>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a2a      	ldr	r2, [pc, #168]	; (8008eb4 <HAL_DMA_Abort_IT+0x1f8>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d019      	beq.n	8008e42 <HAL_DMA_Abort_IT+0x186>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a29      	ldr	r2, [pc, #164]	; (8008eb8 <HAL_DMA_Abort_IT+0x1fc>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d012      	beq.n	8008e3e <HAL_DMA_Abort_IT+0x182>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a27      	ldr	r2, [pc, #156]	; (8008ebc <HAL_DMA_Abort_IT+0x200>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00a      	beq.n	8008e38 <HAL_DMA_Abort_IT+0x17c>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a26      	ldr	r2, [pc, #152]	; (8008ec0 <HAL_DMA_Abort_IT+0x204>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d102      	bne.n	8008e32 <HAL_DMA_Abort_IT+0x176>
 8008e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e30:	e01b      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e36:	e018      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e3c:	e015      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e3e:	2310      	movs	r3, #16
 8008e40:	e013      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e011      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e4a:	e00e      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e50:	e00b      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e56:	e008      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e5c:	e005      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e62:	e002      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e64:	2310      	movs	r3, #16
 8008e66:	e000      	b.n	8008e6a <HAL_DMA_Abort_IT+0x1ae>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4a17      	ldr	r2, [pc, #92]	; (8008ec8 <HAL_DMA_Abort_IT+0x20c>)
 8008e6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
    } 
  }
  return status;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	40020080 	.word	0x40020080
 8008e9c:	40020008 	.word	0x40020008
 8008ea0:	4002001c 	.word	0x4002001c
 8008ea4:	40020030 	.word	0x40020030
 8008ea8:	40020044 	.word	0x40020044
 8008eac:	40020058 	.word	0x40020058
 8008eb0:	4002006c 	.word	0x4002006c
 8008eb4:	40020408 	.word	0x40020408
 8008eb8:	4002041c 	.word	0x4002041c
 8008ebc:	40020430 	.word	0x40020430
 8008ec0:	40020444 	.word	0x40020444
 8008ec4:	40020400 	.word	0x40020400
 8008ec8:	40020000 	.word	0x40020000

08008ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b08b      	sub	sp, #44	; 0x2c
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008eda:	2300      	movs	r3, #0
 8008edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ede:	e179      	b.n	80091d4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	f040 8168 	bne.w	80091ce <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	4a96      	ldr	r2, [pc, #600]	; (800915c <HAL_GPIO_Init+0x290>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d05e      	beq.n	8008fc6 <HAL_GPIO_Init+0xfa>
 8008f08:	4a94      	ldr	r2, [pc, #592]	; (800915c <HAL_GPIO_Init+0x290>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d875      	bhi.n	8008ffa <HAL_GPIO_Init+0x12e>
 8008f0e:	4a94      	ldr	r2, [pc, #592]	; (8009160 <HAL_GPIO_Init+0x294>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d058      	beq.n	8008fc6 <HAL_GPIO_Init+0xfa>
 8008f14:	4a92      	ldr	r2, [pc, #584]	; (8009160 <HAL_GPIO_Init+0x294>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d86f      	bhi.n	8008ffa <HAL_GPIO_Init+0x12e>
 8008f1a:	4a92      	ldr	r2, [pc, #584]	; (8009164 <HAL_GPIO_Init+0x298>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d052      	beq.n	8008fc6 <HAL_GPIO_Init+0xfa>
 8008f20:	4a90      	ldr	r2, [pc, #576]	; (8009164 <HAL_GPIO_Init+0x298>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d869      	bhi.n	8008ffa <HAL_GPIO_Init+0x12e>
 8008f26:	4a90      	ldr	r2, [pc, #576]	; (8009168 <HAL_GPIO_Init+0x29c>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d04c      	beq.n	8008fc6 <HAL_GPIO_Init+0xfa>
 8008f2c:	4a8e      	ldr	r2, [pc, #568]	; (8009168 <HAL_GPIO_Init+0x29c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d863      	bhi.n	8008ffa <HAL_GPIO_Init+0x12e>
 8008f32:	4a8e      	ldr	r2, [pc, #568]	; (800916c <HAL_GPIO_Init+0x2a0>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d046      	beq.n	8008fc6 <HAL_GPIO_Init+0xfa>
 8008f38:	4a8c      	ldr	r2, [pc, #560]	; (800916c <HAL_GPIO_Init+0x2a0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d85d      	bhi.n	8008ffa <HAL_GPIO_Init+0x12e>
 8008f3e:	2b12      	cmp	r3, #18
 8008f40:	d82a      	bhi.n	8008f98 <HAL_GPIO_Init+0xcc>
 8008f42:	2b12      	cmp	r3, #18
 8008f44:	d859      	bhi.n	8008ffa <HAL_GPIO_Init+0x12e>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <HAL_GPIO_Init+0x80>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008fc7 	.word	0x08008fc7
 8008f50:	08008fa1 	.word	0x08008fa1
 8008f54:	08008fb3 	.word	0x08008fb3
 8008f58:	08008ff5 	.word	0x08008ff5
 8008f5c:	08008ffb 	.word	0x08008ffb
 8008f60:	08008ffb 	.word	0x08008ffb
 8008f64:	08008ffb 	.word	0x08008ffb
 8008f68:	08008ffb 	.word	0x08008ffb
 8008f6c:	08008ffb 	.word	0x08008ffb
 8008f70:	08008ffb 	.word	0x08008ffb
 8008f74:	08008ffb 	.word	0x08008ffb
 8008f78:	08008ffb 	.word	0x08008ffb
 8008f7c:	08008ffb 	.word	0x08008ffb
 8008f80:	08008ffb 	.word	0x08008ffb
 8008f84:	08008ffb 	.word	0x08008ffb
 8008f88:	08008ffb 	.word	0x08008ffb
 8008f8c:	08008ffb 	.word	0x08008ffb
 8008f90:	08008fa9 	.word	0x08008fa9
 8008f94:	08008fbd 	.word	0x08008fbd
 8008f98:	4a75      	ldr	r2, [pc, #468]	; (8009170 <HAL_GPIO_Init+0x2a4>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d013      	beq.n	8008fc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f9e:	e02c      	b.n	8008ffa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	623b      	str	r3, [r7, #32]
          break;
 8008fa6:	e029      	b.n	8008ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	3304      	adds	r3, #4
 8008fae:	623b      	str	r3, [r7, #32]
          break;
 8008fb0:	e024      	b.n	8008ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	623b      	str	r3, [r7, #32]
          break;
 8008fba:	e01f      	b.n	8008ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	330c      	adds	r3, #12
 8008fc2:	623b      	str	r3, [r7, #32]
          break;
 8008fc4:	e01a      	b.n	8008ffc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d102      	bne.n	8008fd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008fce:	2304      	movs	r3, #4
 8008fd0:	623b      	str	r3, [r7, #32]
          break;
 8008fd2:	e013      	b.n	8008ffc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d105      	bne.n	8008fe8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fdc:	2308      	movs	r3, #8
 8008fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	611a      	str	r2, [r3, #16]
          break;
 8008fe6:	e009      	b.n	8008ffc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fe8:	2308      	movs	r3, #8
 8008fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	615a      	str	r2, [r3, #20]
          break;
 8008ff2:	e003      	b.n	8008ffc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	623b      	str	r3, [r7, #32]
          break;
 8008ff8:	e000      	b.n	8008ffc <HAL_GPIO_Init+0x130>
          break;
 8008ffa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2bff      	cmp	r3, #255	; 0xff
 8009000:	d801      	bhi.n	8009006 <HAL_GPIO_Init+0x13a>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	e001      	b.n	800900a <HAL_GPIO_Init+0x13e>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3304      	adds	r3, #4
 800900a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2bff      	cmp	r3, #255	; 0xff
 8009010:	d802      	bhi.n	8009018 <HAL_GPIO_Init+0x14c>
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	e002      	b.n	800901e <HAL_GPIO_Init+0x152>
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	3b08      	subs	r3, #8
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	210f      	movs	r1, #15
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	fa01 f303 	lsl.w	r3, r1, r3
 800902c:	43db      	mvns	r3, r3
 800902e:	401a      	ands	r2, r3
 8009030:	6a39      	ldr	r1, [r7, #32]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	fa01 f303 	lsl.w	r3, r1, r3
 8009038:	431a      	orrs	r2, r3
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 80c1 	beq.w	80091ce <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800904c:	4b49      	ldr	r3, [pc, #292]	; (8009174 <HAL_GPIO_Init+0x2a8>)
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	4a48      	ldr	r2, [pc, #288]	; (8009174 <HAL_GPIO_Init+0x2a8>)
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	6193      	str	r3, [r2, #24]
 8009058:	4b46      	ldr	r3, [pc, #280]	; (8009174 <HAL_GPIO_Init+0x2a8>)
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009064:	4a44      	ldr	r2, [pc, #272]	; (8009178 <HAL_GPIO_Init+0x2ac>)
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	089b      	lsrs	r3, r3, #2
 800906a:	3302      	adds	r3, #2
 800906c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009070:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	220f      	movs	r2, #15
 800907c:	fa02 f303 	lsl.w	r3, r2, r3
 8009080:	43db      	mvns	r3, r3
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	4013      	ands	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a3c      	ldr	r2, [pc, #240]	; (800917c <HAL_GPIO_Init+0x2b0>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d01f      	beq.n	80090d0 <HAL_GPIO_Init+0x204>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a3b      	ldr	r2, [pc, #236]	; (8009180 <HAL_GPIO_Init+0x2b4>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d019      	beq.n	80090cc <HAL_GPIO_Init+0x200>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a3a      	ldr	r2, [pc, #232]	; (8009184 <HAL_GPIO_Init+0x2b8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d013      	beq.n	80090c8 <HAL_GPIO_Init+0x1fc>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a39      	ldr	r2, [pc, #228]	; (8009188 <HAL_GPIO_Init+0x2bc>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00d      	beq.n	80090c4 <HAL_GPIO_Init+0x1f8>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a38      	ldr	r2, [pc, #224]	; (800918c <HAL_GPIO_Init+0x2c0>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d007      	beq.n	80090c0 <HAL_GPIO_Init+0x1f4>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a37      	ldr	r2, [pc, #220]	; (8009190 <HAL_GPIO_Init+0x2c4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d101      	bne.n	80090bc <HAL_GPIO_Init+0x1f0>
 80090b8:	2305      	movs	r3, #5
 80090ba:	e00a      	b.n	80090d2 <HAL_GPIO_Init+0x206>
 80090bc:	2306      	movs	r3, #6
 80090be:	e008      	b.n	80090d2 <HAL_GPIO_Init+0x206>
 80090c0:	2304      	movs	r3, #4
 80090c2:	e006      	b.n	80090d2 <HAL_GPIO_Init+0x206>
 80090c4:	2303      	movs	r3, #3
 80090c6:	e004      	b.n	80090d2 <HAL_GPIO_Init+0x206>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e002      	b.n	80090d2 <HAL_GPIO_Init+0x206>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <HAL_GPIO_Init+0x206>
 80090d0:	2300      	movs	r3, #0
 80090d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d4:	f002 0203 	and.w	r2, r2, #3
 80090d8:	0092      	lsls	r2, r2, #2
 80090da:	4093      	lsls	r3, r2
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80090e2:	4925      	ldr	r1, [pc, #148]	; (8009178 <HAL_GPIO_Init+0x2ac>)
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	089b      	lsrs	r3, r3, #2
 80090e8:	3302      	adds	r3, #2
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d006      	beq.n	800910a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80090fc:	4b25      	ldr	r3, [pc, #148]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	4924      	ldr	r1, [pc, #144]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	4313      	orrs	r3, r2
 8009106:	608b      	str	r3, [r1, #8]
 8009108:	e006      	b.n	8009118 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800910a:	4b22      	ldr	r3, [pc, #136]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	43db      	mvns	r3, r3
 8009112:	4920      	ldr	r1, [pc, #128]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 8009114:	4013      	ands	r3, r2
 8009116:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d006      	beq.n	8009132 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009124:	4b1b      	ldr	r3, [pc, #108]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 8009126:	68da      	ldr	r2, [r3, #12]
 8009128:	491a      	ldr	r1, [pc, #104]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	4313      	orrs	r3, r2
 800912e:	60cb      	str	r3, [r1, #12]
 8009130:	e006      	b.n	8009140 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009132:	4b18      	ldr	r3, [pc, #96]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	43db      	mvns	r3, r3
 800913a:	4916      	ldr	r1, [pc, #88]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 800913c:	4013      	ands	r3, r2
 800913e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d025      	beq.n	8009198 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800914c:	4b11      	ldr	r3, [pc, #68]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	4910      	ldr	r1, [pc, #64]	; (8009194 <HAL_GPIO_Init+0x2c8>)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	4313      	orrs	r3, r2
 8009156:	604b      	str	r3, [r1, #4]
 8009158:	e025      	b.n	80091a6 <HAL_GPIO_Init+0x2da>
 800915a:	bf00      	nop
 800915c:	10320000 	.word	0x10320000
 8009160:	10310000 	.word	0x10310000
 8009164:	10220000 	.word	0x10220000
 8009168:	10210000 	.word	0x10210000
 800916c:	10120000 	.word	0x10120000
 8009170:	10110000 	.word	0x10110000
 8009174:	40021000 	.word	0x40021000
 8009178:	40010000 	.word	0x40010000
 800917c:	40010800 	.word	0x40010800
 8009180:	40010c00 	.word	0x40010c00
 8009184:	40011000 	.word	0x40011000
 8009188:	40011400 	.word	0x40011400
 800918c:	40011800 	.word	0x40011800
 8009190:	40011c00 	.word	0x40011c00
 8009194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009198:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <HAL_GPIO_Init+0x324>)
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	43db      	mvns	r3, r3
 80091a0:	4913      	ldr	r1, [pc, #76]	; (80091f0 <HAL_GPIO_Init+0x324>)
 80091a2:	4013      	ands	r3, r2
 80091a4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d006      	beq.n	80091c0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80091b2:	4b0f      	ldr	r3, [pc, #60]	; (80091f0 <HAL_GPIO_Init+0x324>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	490e      	ldr	r1, [pc, #56]	; (80091f0 <HAL_GPIO_Init+0x324>)
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	600b      	str	r3, [r1, #0]
 80091be:	e006      	b.n	80091ce <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80091c0:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <HAL_GPIO_Init+0x324>)
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	43db      	mvns	r3, r3
 80091c8:	4909      	ldr	r1, [pc, #36]	; (80091f0 <HAL_GPIO_Init+0x324>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	3301      	adds	r3, #1
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	fa22 f303 	lsr.w	r3, r2, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f47f ae7e 	bne.w	8008ee0 <HAL_GPIO_Init+0x14>
  }
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop
 80091e8:	372c      	adds	r7, #44	; 0x2c
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr
 80091f0:	40010400 	.word	0x40010400

080091f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b089      	sub	sp, #36	; 0x24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091fe:	2300      	movs	r3, #0
 8009200:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009202:	e0a6      	b.n	8009352 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009204:	2201      	movs	r2, #1
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	fa02 f303 	lsl.w	r3, r2, r3
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	4013      	ands	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 8099 	beq.w	800934c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800921a:	4a54      	ldr	r2, [pc, #336]	; (800936c <HAL_GPIO_DeInit+0x178>)
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	089b      	lsrs	r3, r3, #2
 8009220:	3302      	adds	r3, #2
 8009222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009226:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	220f      	movs	r2, #15
 8009232:	fa02 f303 	lsl.w	r3, r2, r3
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	4013      	ands	r3, r2
 800923a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a4c      	ldr	r2, [pc, #304]	; (8009370 <HAL_GPIO_DeInit+0x17c>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d01f      	beq.n	8009284 <HAL_GPIO_DeInit+0x90>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a4b      	ldr	r2, [pc, #300]	; (8009374 <HAL_GPIO_DeInit+0x180>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d019      	beq.n	8009280 <HAL_GPIO_DeInit+0x8c>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a4a      	ldr	r2, [pc, #296]	; (8009378 <HAL_GPIO_DeInit+0x184>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d013      	beq.n	800927c <HAL_GPIO_DeInit+0x88>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a49      	ldr	r2, [pc, #292]	; (800937c <HAL_GPIO_DeInit+0x188>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00d      	beq.n	8009278 <HAL_GPIO_DeInit+0x84>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a48      	ldr	r2, [pc, #288]	; (8009380 <HAL_GPIO_DeInit+0x18c>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d007      	beq.n	8009274 <HAL_GPIO_DeInit+0x80>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a47      	ldr	r2, [pc, #284]	; (8009384 <HAL_GPIO_DeInit+0x190>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d101      	bne.n	8009270 <HAL_GPIO_DeInit+0x7c>
 800926c:	2305      	movs	r3, #5
 800926e:	e00a      	b.n	8009286 <HAL_GPIO_DeInit+0x92>
 8009270:	2306      	movs	r3, #6
 8009272:	e008      	b.n	8009286 <HAL_GPIO_DeInit+0x92>
 8009274:	2304      	movs	r3, #4
 8009276:	e006      	b.n	8009286 <HAL_GPIO_DeInit+0x92>
 8009278:	2303      	movs	r3, #3
 800927a:	e004      	b.n	8009286 <HAL_GPIO_DeInit+0x92>
 800927c:	2302      	movs	r3, #2
 800927e:	e002      	b.n	8009286 <HAL_GPIO_DeInit+0x92>
 8009280:	2301      	movs	r3, #1
 8009282:	e000      	b.n	8009286 <HAL_GPIO_DeInit+0x92>
 8009284:	2300      	movs	r3, #0
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	f002 0203 	and.w	r2, r2, #3
 800928c:	0092      	lsls	r2, r2, #2
 800928e:	4093      	lsls	r3, r2
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	429a      	cmp	r2, r3
 8009294:	d132      	bne.n	80092fc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009296:	4b3c      	ldr	r3, [pc, #240]	; (8009388 <HAL_GPIO_DeInit+0x194>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	43db      	mvns	r3, r3
 800929e:	493a      	ldr	r1, [pc, #232]	; (8009388 <HAL_GPIO_DeInit+0x194>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80092a4:	4b38      	ldr	r3, [pc, #224]	; (8009388 <HAL_GPIO_DeInit+0x194>)
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	43db      	mvns	r3, r3
 80092ac:	4936      	ldr	r1, [pc, #216]	; (8009388 <HAL_GPIO_DeInit+0x194>)
 80092ae:	4013      	ands	r3, r2
 80092b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80092b2:	4b35      	ldr	r3, [pc, #212]	; (8009388 <HAL_GPIO_DeInit+0x194>)
 80092b4:	68da      	ldr	r2, [r3, #12]
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	43db      	mvns	r3, r3
 80092ba:	4933      	ldr	r1, [pc, #204]	; (8009388 <HAL_GPIO_DeInit+0x194>)
 80092bc:	4013      	ands	r3, r2
 80092be:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80092c0:	4b31      	ldr	r3, [pc, #196]	; (8009388 <HAL_GPIO_DeInit+0x194>)
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	43db      	mvns	r3, r3
 80092c8:	492f      	ldr	r1, [pc, #188]	; (8009388 <HAL_GPIO_DeInit+0x194>)
 80092ca:	4013      	ands	r3, r2
 80092cc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	220f      	movs	r2, #15
 80092d8:	fa02 f303 	lsl.w	r3, r2, r3
 80092dc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80092de:	4a23      	ldr	r2, [pc, #140]	; (800936c <HAL_GPIO_DeInit+0x178>)
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	089b      	lsrs	r3, r3, #2
 80092e4:	3302      	adds	r3, #2
 80092e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	43da      	mvns	r2, r3
 80092ee:	481f      	ldr	r0, [pc, #124]	; (800936c <HAL_GPIO_DeInit+0x178>)
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	089b      	lsrs	r3, r3, #2
 80092f4:	400a      	ands	r2, r1
 80092f6:	3302      	adds	r3, #2
 80092f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	2bff      	cmp	r3, #255	; 0xff
 8009300:	d801      	bhi.n	8009306 <HAL_GPIO_DeInit+0x112>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	e001      	b.n	800930a <HAL_GPIO_DeInit+0x116>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3304      	adds	r3, #4
 800930a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	2bff      	cmp	r3, #255	; 0xff
 8009310:	d802      	bhi.n	8009318 <HAL_GPIO_DeInit+0x124>
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	e002      	b.n	800931e <HAL_GPIO_DeInit+0x12a>
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	3b08      	subs	r3, #8
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	210f      	movs	r1, #15
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	fa01 f303 	lsl.w	r3, r1, r3
 800932c:	43db      	mvns	r3, r3
 800932e:	401a      	ands	r2, r3
 8009330:	2104      	movs	r1, #4
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	fa01 f303 	lsl.w	r3, r1, r3
 8009338:	431a      	orrs	r2, r3
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	43db      	mvns	r3, r3
 8009346:	401a      	ands	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	3301      	adds	r3, #1
 8009350:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	fa22 f303 	lsr.w	r3, r2, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	f47f af52 	bne.w	8009204 <HAL_GPIO_DeInit+0x10>
  }
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	3724      	adds	r7, #36	; 0x24
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr
 800936c:	40010000 	.word	0x40010000
 8009370:	40010800 	.word	0x40010800
 8009374:	40010c00 	.word	0x40010c00
 8009378:	40011000 	.word	0x40011000
 800937c:	40011400 	.word	0x40011400
 8009380:	40011800 	.word	0x40011800
 8009384:	40011c00 	.word	0x40011c00
 8009388:	40010400 	.word	0x40010400

0800938c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	887b      	ldrh	r3, [r7, #2]
 800939e:	4013      	ands	r3, r2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093a4:	2301      	movs	r3, #1
 80093a6:	73fb      	strb	r3, [r7, #15]
 80093a8:	e001      	b.n	80093ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bc80      	pop	{r7}
 80093b8:	4770      	bx	lr

080093ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	807b      	strh	r3, [r7, #2]
 80093c6:	4613      	mov	r3, r2
 80093c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093ca:	787b      	ldrb	r3, [r7, #1]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093d0:	887a      	ldrh	r2, [r7, #2]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093d6:	e003      	b.n	80093e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093d8:	887b      	ldrh	r3, [r7, #2]
 80093da:	041a      	lsls	r2, r3, #16
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	611a      	str	r2, [r3, #16]
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr

080093ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b085      	sub	sp, #20
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80093fc:	887a      	ldrh	r2, [r7, #2]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	4013      	ands	r3, r2
 8009402:	041a      	lsls	r2, r3, #16
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	43d9      	mvns	r1, r3
 8009408:	887b      	ldrh	r3, [r7, #2]
 800940a:	400b      	ands	r3, r1
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	611a      	str	r2, [r3, #16]
}
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e12b      	b.n	8009686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d106      	bne.n	8009448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7fe fff8 	bl	8008438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2224      	movs	r2, #36	; 0x24
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0201 	bic.w	r2, r2, #1
 800945e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800946e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800947e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009480:	f001 fdb8 	bl	800aff4 <HAL_RCC_GetPCLK1Freq>
 8009484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	4a81      	ldr	r2, [pc, #516]	; (8009690 <HAL_I2C_Init+0x274>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d807      	bhi.n	80094a0 <HAL_I2C_Init+0x84>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4a80      	ldr	r2, [pc, #512]	; (8009694 <HAL_I2C_Init+0x278>)
 8009494:	4293      	cmp	r3, r2
 8009496:	bf94      	ite	ls
 8009498:	2301      	movls	r3, #1
 800949a:	2300      	movhi	r3, #0
 800949c:	b2db      	uxtb	r3, r3
 800949e:	e006      	b.n	80094ae <HAL_I2C_Init+0x92>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4a7d      	ldr	r2, [pc, #500]	; (8009698 <HAL_I2C_Init+0x27c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	bf94      	ite	ls
 80094a8:	2301      	movls	r3, #1
 80094aa:	2300      	movhi	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e0e7      	b.n	8009686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	4a78      	ldr	r2, [pc, #480]	; (800969c <HAL_I2C_Init+0x280>)
 80094ba:	fba2 2303 	umull	r2, r3, r2, r3
 80094be:	0c9b      	lsrs	r3, r3, #18
 80094c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6a1b      	ldr	r3, [r3, #32]
 80094dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	4a6a      	ldr	r2, [pc, #424]	; (8009690 <HAL_I2C_Init+0x274>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d802      	bhi.n	80094f0 <HAL_I2C_Init+0xd4>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	3301      	adds	r3, #1
 80094ee:	e009      	b.n	8009504 <HAL_I2C_Init+0xe8>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
 80094fa:	4a69      	ldr	r2, [pc, #420]	; (80096a0 <HAL_I2C_Init+0x284>)
 80094fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009500:	099b      	lsrs	r3, r3, #6
 8009502:	3301      	adds	r3, #1
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6812      	ldr	r2, [r2, #0]
 8009508:	430b      	orrs	r3, r1
 800950a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009516:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	495c      	ldr	r1, [pc, #368]	; (8009690 <HAL_I2C_Init+0x274>)
 8009520:	428b      	cmp	r3, r1
 8009522:	d819      	bhi.n	8009558 <HAL_I2C_Init+0x13c>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	1e59      	subs	r1, r3, #1
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009532:	1c59      	adds	r1, r3, #1
 8009534:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009538:	400b      	ands	r3, r1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <HAL_I2C_Init+0x138>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	1e59      	subs	r1, r3, #1
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	fbb1 f3f3 	udiv	r3, r1, r3
 800954c:	3301      	adds	r3, #1
 800954e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009552:	e051      	b.n	80095f8 <HAL_I2C_Init+0x1dc>
 8009554:	2304      	movs	r3, #4
 8009556:	e04f      	b.n	80095f8 <HAL_I2C_Init+0x1dc>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d111      	bne.n	8009584 <HAL_I2C_Init+0x168>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	1e58      	subs	r0, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6859      	ldr	r1, [r3, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	440b      	add	r3, r1
 800956e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009572:	3301      	adds	r3, #1
 8009574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf0c      	ite	eq
 800957c:	2301      	moveq	r3, #1
 800957e:	2300      	movne	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	e012      	b.n	80095aa <HAL_I2C_Init+0x18e>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	1e58      	subs	r0, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6859      	ldr	r1, [r3, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	0099      	lsls	r1, r3, #2
 8009594:	440b      	add	r3, r1
 8009596:	fbb0 f3f3 	udiv	r3, r0, r3
 800959a:	3301      	adds	r3, #1
 800959c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bf0c      	ite	eq
 80095a4:	2301      	moveq	r3, #1
 80095a6:	2300      	movne	r3, #0
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <HAL_I2C_Init+0x196>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e022      	b.n	80095f8 <HAL_I2C_Init+0x1dc>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10e      	bne.n	80095d8 <HAL_I2C_Init+0x1bc>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	1e58      	subs	r0, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6859      	ldr	r1, [r3, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	440b      	add	r3, r1
 80095c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80095cc:	3301      	adds	r3, #1
 80095ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d6:	e00f      	b.n	80095f8 <HAL_I2C_Init+0x1dc>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	1e58      	subs	r0, r3, #1
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6859      	ldr	r1, [r3, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	440b      	add	r3, r1
 80095e6:	0099      	lsls	r1, r3, #2
 80095e8:	440b      	add	r3, r1
 80095ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80095ee:	3301      	adds	r3, #1
 80095f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	6809      	ldr	r1, [r1, #0]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	69da      	ldr	r2, [r3, #28]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	431a      	orrs	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009626:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6911      	ldr	r1, [r2, #16]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	68d2      	ldr	r2, [r2, #12]
 8009632:	4311      	orrs	r1, r2
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	6812      	ldr	r2, [r2, #0]
 8009638:	430b      	orrs	r3, r1
 800963a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	695a      	ldr	r2, [r3, #20]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0201 	orr.w	r2, r2, #1
 8009666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2220      	movs	r2, #32
 8009672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	000186a0 	.word	0x000186a0
 8009694:	001e847f 	.word	0x001e847f
 8009698:	003d08ff 	.word	0x003d08ff
 800969c:	431bde83 	.word	0x431bde83
 80096a0:	10624dd3 	.word	0x10624dd3

080096a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e021      	b.n	80096fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2224      	movs	r2, #36	; 0x24
 80096ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0201 	bic.w	r2, r2, #1
 80096cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7fe fef0 	bl	80084b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af02      	add	r7, sp, #8
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	607a      	str	r2, [r7, #4]
 800970e:	461a      	mov	r2, r3
 8009710:	460b      	mov	r3, r1
 8009712:	817b      	strh	r3, [r7, #10]
 8009714:	4613      	mov	r3, r2
 8009716:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009718:	f7ff f85e 	bl	80087d8 <HAL_GetTick>
 800971c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b20      	cmp	r3, #32
 8009728:	f040 80e0 	bne.w	80098ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	2319      	movs	r3, #25
 8009732:	2201      	movs	r2, #1
 8009734:	4970      	ldr	r1, [pc, #448]	; (80098f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 fe5c 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009742:	2302      	movs	r3, #2
 8009744:	e0d3      	b.n	80098ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800974c:	2b01      	cmp	r3, #1
 800974e:	d101      	bne.n	8009754 <HAL_I2C_Master_Transmit+0x50>
 8009750:	2302      	movs	r3, #2
 8009752:	e0cc      	b.n	80098ee <HAL_I2C_Master_Transmit+0x1ea>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b01      	cmp	r3, #1
 8009768:	d007      	beq.n	800977a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0201 	orr.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009788:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2221      	movs	r2, #33	; 0x21
 800978e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2210      	movs	r2, #16
 8009796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	893a      	ldrh	r2, [r7, #8]
 80097aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4a50      	ldr	r2, [pc, #320]	; (80098fc <HAL_I2C_Master_Transmit+0x1f8>)
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097bc:	8979      	ldrh	r1, [r7, #10]
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	6a3a      	ldr	r2, [r7, #32]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 fc16 	bl	8009ff4 <I2C_MasterRequestWrite>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e08d      	b.n	80098ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80097e8:	e066      	b.n	80098b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	6a39      	ldr	r1, [r7, #32]
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 ff1a 	bl	800a628 <I2C_WaitOnTXEFlagUntilTimeout>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00d      	beq.n	8009816 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fe:	2b04      	cmp	r3, #4
 8009800:	d107      	bne.n	8009812 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009810:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e06b      	b.n	80098ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	781a      	ldrb	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009830:	b29b      	uxth	r3, r3
 8009832:	3b01      	subs	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b04      	cmp	r3, #4
 8009852:	d11b      	bne.n	800988c <HAL_I2C_Master_Transmit+0x188>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009858:	2b00      	cmp	r3, #0
 800985a:	d017      	beq.n	800988c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	781a      	ldrb	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009876:	b29b      	uxth	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009884:	3b01      	subs	r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	6a39      	ldr	r1, [r7, #32]
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 ff11 	bl	800a6b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00d      	beq.n	80098b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d107      	bne.n	80098b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e01a      	b.n	80098ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d194      	bne.n	80097ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	e000      	b.n	80098ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80098ec:	2302      	movs	r3, #2
  }
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	00100002 	.word	0x00100002
 80098fc:	ffff0000 	.word	0xffff0000

08009900 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af02      	add	r7, sp, #8
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	4608      	mov	r0, r1
 800990a:	4611      	mov	r1, r2
 800990c:	461a      	mov	r2, r3
 800990e:	4603      	mov	r3, r0
 8009910:	817b      	strh	r3, [r7, #10]
 8009912:	460b      	mov	r3, r1
 8009914:	813b      	strh	r3, [r7, #8]
 8009916:	4613      	mov	r3, r2
 8009918:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800991a:	f7fe ff5d 	bl	80087d8 <HAL_GetTick>
 800991e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b20      	cmp	r3, #32
 800992a:	f040 80d9 	bne.w	8009ae0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	2319      	movs	r3, #25
 8009934:	2201      	movs	r2, #1
 8009936:	496d      	ldr	r1, [pc, #436]	; (8009aec <HAL_I2C_Mem_Write+0x1ec>)
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 fd5b 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009944:	2302      	movs	r3, #2
 8009946:	e0cc      	b.n	8009ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_I2C_Mem_Write+0x56>
 8009952:	2302      	movs	r3, #2
 8009954:	e0c5      	b.n	8009ae2 <HAL_I2C_Mem_Write+0x1e2>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b01      	cmp	r3, #1
 800996a:	d007      	beq.n	800997c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0201 	orr.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800998a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2221      	movs	r2, #33	; 0x21
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2240      	movs	r2, #64	; 0x40
 8009998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6a3a      	ldr	r2, [r7, #32]
 80099a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4a4d      	ldr	r2, [pc, #308]	; (8009af0 <HAL_I2C_Mem_Write+0x1f0>)
 80099bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099be:	88f8      	ldrh	r0, [r7, #6]
 80099c0:	893a      	ldrh	r2, [r7, #8]
 80099c2:	8979      	ldrh	r1, [r7, #10]
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	4603      	mov	r3, r0
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 fb92 	bl	800a0f8 <I2C_RequestMemoryWrite>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d052      	beq.n	8009a80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e081      	b.n	8009ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 fe20 	bl	800a628 <I2C_WaitOnTXEFlagUntilTimeout>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00d      	beq.n	8009a0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	2b04      	cmp	r3, #4
 80099f4:	d107      	bne.n	8009a06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e06b      	b.n	8009ae2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a24:	3b01      	subs	r3, #1
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	3b01      	subs	r3, #1
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	695b      	ldr	r3, [r3, #20]
 8009a40:	f003 0304 	and.w	r3, r3, #4
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d11b      	bne.n	8009a80 <HAL_I2C_Mem_Write+0x180>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d017      	beq.n	8009a80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	781a      	ldrb	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1aa      	bne.n	80099de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 fe13 	bl	800a6b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00d      	beq.n	8009ab4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	d107      	bne.n	8009ab0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e016      	b.n	8009ae2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	e000      	b.n	8009ae2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009ae0:	2302      	movs	r3, #2
  }
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	00100002 	.word	0x00100002
 8009af0:	ffff0000 	.word	0xffff0000

08009af4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08c      	sub	sp, #48	; 0x30
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	461a      	mov	r2, r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	817b      	strh	r3, [r7, #10]
 8009b06:	460b      	mov	r3, r1
 8009b08:	813b      	strh	r3, [r7, #8]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b12:	f7fe fe61 	bl	80087d8 <HAL_GetTick>
 8009b16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	f040 8244 	bne.w	8009fae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	2319      	movs	r3, #25
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4982      	ldr	r1, [pc, #520]	; (8009d38 <HAL_I2C_Mem_Read+0x244>)
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fc5f 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	e237      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d101      	bne.n	8009b4e <HAL_I2C_Mem_Read+0x5a>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e230      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d007      	beq.n	8009b74 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0201 	orr.w	r2, r2, #1
 8009b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2222      	movs	r2, #34	; 0x22
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2240      	movs	r2, #64	; 0x40
 8009b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4a62      	ldr	r2, [pc, #392]	; (8009d3c <HAL_I2C_Mem_Read+0x248>)
 8009bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bb6:	88f8      	ldrh	r0, [r7, #6]
 8009bb8:	893a      	ldrh	r2, [r7, #8]
 8009bba:	8979      	ldrh	r1, [r7, #10]
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 fb2c 	bl	800a224 <I2C_RequestMemoryRead>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e1ec      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d113      	bne.n	8009c06 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	61fb      	str	r3, [r7, #28]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e1c0      	b.n	8009f88 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d11e      	bne.n	8009c4c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c1e:	b672      	cpsid	i
}
 8009c20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c22:	2300      	movs	r3, #0
 8009c24:	61bb      	str	r3, [r7, #24]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c48:	b662      	cpsie	i
}
 8009c4a:	e035      	b.n	8009cb8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d11e      	bne.n	8009c92 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c64:	b672      	cpsid	i
}
 8009c66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c68:	2300      	movs	r3, #0
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	617b      	str	r3, [r7, #20]
 8009c7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c8e:	b662      	cpsie	i
}
 8009c90:	e012      	b.n	8009cb8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ca0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	613b      	str	r3, [r7, #16]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	613b      	str	r3, [r7, #16]
 8009cb6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009cb8:	e166      	b.n	8009f88 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	f200 811f 	bhi.w	8009f02 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d123      	bne.n	8009d14 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fd39 	bl	800a748 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e167      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	691a      	ldr	r2, [r3, #16]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cea:	b2d2      	uxtb	r2, r2
 8009cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d12:	e139      	b.n	8009f88 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d152      	bne.n	8009dc2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d22:	2200      	movs	r2, #0
 8009d24:	4906      	ldr	r1, [pc, #24]	; (8009d40 <HAL_I2C_Mem_Read+0x24c>)
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fb64 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d008      	beq.n	8009d44 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e13c      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
 8009d36:	bf00      	nop
 8009d38:	00100002 	.word	0x00100002
 8009d3c:	ffff0000 	.word	0xffff0000
 8009d40:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d44:	b672      	cpsid	i
}
 8009d46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	691a      	ldr	r2, [r3, #16]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d74:	3b01      	subs	r3, #1
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d8a:	b662      	cpsie	i
}
 8009d8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	b2d2      	uxtb	r2, r2
 8009d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009daa:	3b01      	subs	r3, #1
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	3b01      	subs	r3, #1
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009dc0:	e0e2      	b.n	8009f88 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc8:	2200      	movs	r2, #0
 8009dca:	497b      	ldr	r1, [pc, #492]	; (8009fb8 <HAL_I2C_Mem_Read+0x4c4>)
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 fb11 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d001      	beq.n	8009ddc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e0e9      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dec:	b672      	cpsid	i
}
 8009dee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691a      	ldr	r2, [r3, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e22:	4b66      	ldr	r3, [pc, #408]	; (8009fbc <HAL_I2C_Mem_Read+0x4c8>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	08db      	lsrs	r3, r3, #3
 8009e28:	4a65      	ldr	r2, [pc, #404]	; (8009fc0 <HAL_I2C_Mem_Read+0x4cc>)
 8009e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2e:	0a1a      	lsrs	r2, r3, #8
 8009e30:	4613      	mov	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	00da      	lsls	r2, r3, #3
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d118      	bne.n	8009e7a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2220      	movs	r2, #32
 8009e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e62:	f043 0220 	orr.w	r2, r3, #32
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e6a:	b662      	cpsie	i
}
 8009e6c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e09a      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	f003 0304 	and.w	r3, r3, #4
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	d1d9      	bne.n	8009e3c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009eca:	b662      	cpsie	i
}
 8009ecc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	691a      	ldr	r2, [r3, #16]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eea:	3b01      	subs	r3, #1
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f00:	e042      	b.n	8009f88 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 fc1e 	bl	800a748 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e04c      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	b2d2      	uxtb	r2, r2
 8009f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	f003 0304 	and.w	r3, r3, #4
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d118      	bne.n	8009f88 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	691a      	ldr	r2, [r3, #16]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	3b01      	subs	r3, #1
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f47f ae94 	bne.w	8009cba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e000      	b.n	8009fb0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009fae:	2302      	movs	r3, #2
  }
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3728      	adds	r7, #40	; 0x28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	00010004 	.word	0x00010004
 8009fbc:	200000a0 	.word	0x200000a0
 8009fc0:	14f8b589 	.word	0x14f8b589

08009fc4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd2:	b2db      	uxtb	r3, r3
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bc80      	pop	{r7}
 8009fdc:	4770      	bx	lr

08009fde <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bc80      	pop	{r7}
 8009ff2:	4770      	bx	lr

08009ff4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af02      	add	r7, sp, #8
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	607a      	str	r2, [r7, #4]
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	460b      	mov	r3, r1
 800a002:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2b08      	cmp	r3, #8
 800a00e:	d006      	beq.n	800a01e <I2C_MasterRequestWrite+0x2a>
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d003      	beq.n	800a01e <I2C_MasterRequestWrite+0x2a>
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a01c:	d108      	bne.n	800a030 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	e00b      	b.n	800a048 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a034:	2b12      	cmp	r3, #18
 800a036:	d107      	bne.n	800a048 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a046:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 f9cd 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00d      	beq.n	800a07c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a06e:	d103      	bne.n	800a078 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a076:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e035      	b.n	800a0e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a084:	d108      	bne.n	800a098 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a086:	897b      	ldrh	r3, [r7, #10]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a094:	611a      	str	r2, [r3, #16]
 800a096:	e01b      	b.n	800a0d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a098:	897b      	ldrh	r3, [r7, #10]
 800a09a:	11db      	asrs	r3, r3, #7
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	f003 0306 	and.w	r3, r3, #6
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f063 030f 	orn	r3, r3, #15
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	490e      	ldr	r1, [pc, #56]	; (800a0f0 <I2C_MasterRequestWrite+0xfc>)
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 fa16 	bl	800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e010      	b.n	800a0e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0c6:	897b      	ldrh	r3, [r7, #10]
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	4907      	ldr	r1, [pc, #28]	; (800a0f4 <I2C_MasterRequestWrite+0x100>)
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fa06 	bl	800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	00010008 	.word	0x00010008
 800a0f4:	00010002 	.word	0x00010002

0800a0f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	4608      	mov	r0, r1
 800a102:	4611      	mov	r1, r2
 800a104:	461a      	mov	r2, r3
 800a106:	4603      	mov	r3, r0
 800a108:	817b      	strh	r3, [r7, #10]
 800a10a:	460b      	mov	r3, r1
 800a10c:	813b      	strh	r3, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	2200      	movs	r2, #0
 800a12a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 f960 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00d      	beq.n	800a156 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a148:	d103      	bne.n	800a152 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e05f      	b.n	800a216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a156:	897b      	ldrh	r3, [r7, #10]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	461a      	mov	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	6a3a      	ldr	r2, [r7, #32]
 800a16a:	492d      	ldr	r1, [pc, #180]	; (800a220 <I2C_RequestMemoryWrite+0x128>)
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f9bb 	bl	800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e04c      	b.n	800a216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a17c:	2300      	movs	r3, #0
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a194:	6a39      	ldr	r1, [r7, #32]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fa46 	bl	800a628 <I2C_WaitOnTXEFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00d      	beq.n	800a1be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d107      	bne.n	800a1ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e02b      	b.n	800a216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1be:	88fb      	ldrh	r3, [r7, #6]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d105      	bne.n	800a1d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1c4:	893b      	ldrh	r3, [r7, #8]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	611a      	str	r2, [r3, #16]
 800a1ce:	e021      	b.n	800a214 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	0a1b      	lsrs	r3, r3, #8
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e0:	6a39      	ldr	r1, [r7, #32]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 fa20 	bl	800a628 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00d      	beq.n	800a20a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d107      	bne.n	800a206 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e005      	b.n	800a216 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a20a:	893b      	ldrh	r3, [r7, #8]
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	00010002 	.word	0x00010002

0800a224 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af02      	add	r7, sp, #8
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	461a      	mov	r2, r3
 800a232:	4603      	mov	r3, r0
 800a234:	817b      	strh	r3, [r7, #10]
 800a236:	460b      	mov	r3, r1
 800a238:	813b      	strh	r3, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a24c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a25c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	2200      	movs	r2, #0
 800a266:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 f8c2 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00d      	beq.n	800a292 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a284:	d103      	bne.n	800a28e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a28c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e0aa      	b.n	800a3e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a292:	897b      	ldrh	r3, [r7, #10]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	461a      	mov	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	6a3a      	ldr	r2, [r7, #32]
 800a2a6:	4952      	ldr	r1, [pc, #328]	; (800a3f0 <I2C_RequestMemoryRead+0x1cc>)
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 f91d 	bl	800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e097      	b.n	800a3e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d0:	6a39      	ldr	r1, [r7, #32]
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f9a8 	bl	800a628 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00d      	beq.n	800a2fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d107      	bne.n	800a2f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e076      	b.n	800a3e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d105      	bne.n	800a30c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a300:	893b      	ldrh	r3, [r7, #8]
 800a302:	b2da      	uxtb	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	611a      	str	r2, [r3, #16]
 800a30a:	e021      	b.n	800a350 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a30c:	893b      	ldrh	r3, [r7, #8]
 800a30e:	0a1b      	lsrs	r3, r3, #8
 800a310:	b29b      	uxth	r3, r3
 800a312:	b2da      	uxtb	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31c:	6a39      	ldr	r1, [r7, #32]
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 f982 	bl	800a628 <I2C_WaitOnTXEFlagUntilTimeout>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00d      	beq.n	800a346 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d107      	bne.n	800a342 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a340:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e050      	b.n	800a3e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a346:	893b      	ldrh	r3, [r7, #8]
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a352:	6a39      	ldr	r1, [r7, #32]
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 f967 	bl	800a628 <I2C_WaitOnTXEFlagUntilTimeout>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00d      	beq.n	800a37c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	2b04      	cmp	r3, #4
 800a366:	d107      	bne.n	800a378 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a376:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e035      	b.n	800a3e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a38a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	2200      	movs	r2, #0
 800a394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 f82b 	bl	800a3f4 <I2C_WaitOnFlagUntilTimeout>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00d      	beq.n	800a3c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3b2:	d103      	bne.n	800a3bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e013      	b.n	800a3e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3c0:	897b      	ldrh	r3, [r7, #10]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	f043 0301 	orr.w	r3, r3, #1
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	6a3a      	ldr	r2, [r7, #32]
 800a3d4:	4906      	ldr	r1, [pc, #24]	; (800a3f0 <I2C_RequestMemoryRead+0x1cc>)
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f886 	bl	800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e000      	b.n	800a3e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	00010002 	.word	0x00010002

0800a3f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	4613      	mov	r3, r2
 800a402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a404:	e048      	b.n	800a498 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a40c:	d044      	beq.n	800a498 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a40e:	f7fe f9e3 	bl	80087d8 <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d302      	bcc.n	800a424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d139      	bne.n	800a498 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	0c1b      	lsrs	r3, r3, #16
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d10d      	bne.n	800a44a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	43da      	mvns	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4013      	ands	r3, r2
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	bf0c      	ite	eq
 800a440:	2301      	moveq	r3, #1
 800a442:	2300      	movne	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	461a      	mov	r2, r3
 800a448:	e00c      	b.n	800a464 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	43da      	mvns	r2, r3
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	4013      	ands	r3, r2
 800a456:	b29b      	uxth	r3, r3
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bf0c      	ite	eq
 800a45c:	2301      	moveq	r3, #1
 800a45e:	2300      	movne	r3, #0
 800a460:	b2db      	uxtb	r3, r3
 800a462:	461a      	mov	r2, r3
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	429a      	cmp	r2, r3
 800a468:	d116      	bne.n	800a498 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	f043 0220 	orr.w	r2, r3, #32
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e023      	b.n	800a4e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	0c1b      	lsrs	r3, r3, #16
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d10d      	bne.n	800a4be <I2C_WaitOnFlagUntilTimeout+0xca>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	43da      	mvns	r2, r3
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bf0c      	ite	eq
 800a4b4:	2301      	moveq	r3, #1
 800a4b6:	2300      	movne	r3, #0
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	e00c      	b.n	800a4d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	43da      	mvns	r2, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	bf0c      	ite	eq
 800a4d0:	2301      	moveq	r3, #1
 800a4d2:	2300      	movne	r3, #0
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d093      	beq.n	800a406 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4f6:	e071      	b.n	800a5dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a506:	d123      	bne.n	800a550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a516:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a520:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2220      	movs	r2, #32
 800a52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53c:	f043 0204 	orr.w	r2, r3, #4
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e067      	b.n	800a620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a556:	d041      	beq.n	800a5dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a558:	f7fe f93e 	bl	80087d8 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	429a      	cmp	r2, r3
 800a566:	d302      	bcc.n	800a56e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d136      	bne.n	800a5dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	0c1b      	lsrs	r3, r3, #16
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d10c      	bne.n	800a592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	43da      	mvns	r2, r3
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4013      	ands	r3, r2
 800a584:	b29b      	uxth	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	bf14      	ite	ne
 800a58a:	2301      	movne	r3, #1
 800a58c:	2300      	moveq	r3, #0
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	e00b      	b.n	800a5aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	43da      	mvns	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4013      	ands	r3, r2
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bf14      	ite	ne
 800a5a4:	2301      	movne	r3, #1
 800a5a6:	2300      	moveq	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d016      	beq.n	800a5dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c8:	f043 0220 	orr.w	r2, r3, #32
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e021      	b.n	800a620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	0c1b      	lsrs	r3, r3, #16
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d10c      	bne.n	800a600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	43da      	mvns	r2, r3
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bf14      	ite	ne
 800a5f8:	2301      	movne	r3, #1
 800a5fa:	2300      	moveq	r3, #0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	e00b      	b.n	800a618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	43da      	mvns	r2, r3
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	4013      	ands	r3, r2
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	bf14      	ite	ne
 800a612:	2301      	movne	r3, #1
 800a614:	2300      	moveq	r3, #0
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f47f af6d 	bne.w	800a4f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a634:	e034      	b.n	800a6a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f000 f8e3 	bl	800a802 <I2C_IsAcknowledgeFailed>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e034      	b.n	800a6b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a64c:	d028      	beq.n	800a6a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a64e:	f7fe f8c3 	bl	80087d8 <HAL_GetTick>
 800a652:	4602      	mov	r2, r0
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d302      	bcc.n	800a664 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d11d      	bne.n	800a6a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a66e:	2b80      	cmp	r3, #128	; 0x80
 800a670:	d016      	beq.n	800a6a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68c:	f043 0220 	orr.w	r2, r3, #32
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e007      	b.n	800a6b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6aa:	2b80      	cmp	r3, #128	; 0x80
 800a6ac:	d1c3      	bne.n	800a636 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6c4:	e034      	b.n	800a730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 f89b 	bl	800a802 <I2C_IsAcknowledgeFailed>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e034      	b.n	800a740 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6dc:	d028      	beq.n	800a730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6de:	f7fe f87b 	bl	80087d8 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d302      	bcc.n	800a6f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d11d      	bne.n	800a730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	f003 0304 	and.w	r3, r3, #4
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	d016      	beq.n	800a730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71c:	f043 0220 	orr.w	r2, r3, #32
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e007      	b.n	800a740 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d1c3      	bne.n	800a6c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a754:	e049      	b.n	800a7ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	f003 0310 	and.w	r3, r3, #16
 800a760:	2b10      	cmp	r3, #16
 800a762:	d119      	bne.n	800a798 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f06f 0210 	mvn.w	r2, #16
 800a76c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2220      	movs	r2, #32
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e030      	b.n	800a7fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a798:	f7fe f81e 	bl	80087d8 <HAL_GetTick>
 800a79c:	4602      	mov	r2, r0
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d302      	bcc.n	800a7ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d11d      	bne.n	800a7ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b8:	2b40      	cmp	r3, #64	; 0x40
 800a7ba:	d016      	beq.n	800a7ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	f043 0220 	orr.w	r2, r3, #32
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e007      	b.n	800a7fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f4:	2b40      	cmp	r3, #64	; 0x40
 800a7f6:	d1ae      	bne.n	800a756 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a818:	d11b      	bne.n	800a852 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a822:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	f043 0204 	orr.w	r2, r3, #4
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	bc80      	pop	{r7}
 800a85c:	4770      	bx	lr
	...

0800a860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e272      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 8087 	beq.w	800a98e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a880:	4b92      	ldr	r3, [pc, #584]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f003 030c 	and.w	r3, r3, #12
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d00c      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a88c:	4b8f      	ldr	r3, [pc, #572]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f003 030c 	and.w	r3, r3, #12
 800a894:	2b08      	cmp	r3, #8
 800a896:	d112      	bne.n	800a8be <HAL_RCC_OscConfig+0x5e>
 800a898:	4b8c      	ldr	r3, [pc, #560]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8a4:	d10b      	bne.n	800a8be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8a6:	4b89      	ldr	r3, [pc, #548]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d06c      	beq.n	800a98c <HAL_RCC_OscConfig+0x12c>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d168      	bne.n	800a98c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e24c      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c6:	d106      	bne.n	800a8d6 <HAL_RCC_OscConfig+0x76>
 800a8c8:	4b80      	ldr	r3, [pc, #512]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a7f      	ldr	r2, [pc, #508]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a8ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	e02e      	b.n	800a934 <HAL_RCC_OscConfig+0xd4>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10c      	bne.n	800a8f8 <HAL_RCC_OscConfig+0x98>
 800a8de:	4b7b      	ldr	r3, [pc, #492]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a7a      	ldr	r2, [pc, #488]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a8e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	4b78      	ldr	r3, [pc, #480]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a77      	ldr	r2, [pc, #476]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a8f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	e01d      	b.n	800a934 <HAL_RCC_OscConfig+0xd4>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a900:	d10c      	bne.n	800a91c <HAL_RCC_OscConfig+0xbc>
 800a902:	4b72      	ldr	r3, [pc, #456]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a71      	ldr	r2, [pc, #452]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	4b6f      	ldr	r3, [pc, #444]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a6e      	ldr	r2, [pc, #440]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	e00b      	b.n	800a934 <HAL_RCC_OscConfig+0xd4>
 800a91c:	4b6b      	ldr	r3, [pc, #428]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a6a      	ldr	r2, [pc, #424]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	4b68      	ldr	r3, [pc, #416]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a67      	ldr	r2, [pc, #412]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a92e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a932:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d013      	beq.n	800a964 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a93c:	f7fd ff4c 	bl	80087d8 <HAL_GetTick>
 800a940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a942:	e008      	b.n	800a956 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a944:	f7fd ff48 	bl	80087d8 <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	2b64      	cmp	r3, #100	; 0x64
 800a950:	d901      	bls.n	800a956 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e200      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a956:	4b5d      	ldr	r3, [pc, #372]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0f0      	beq.n	800a944 <HAL_RCC_OscConfig+0xe4>
 800a962:	e014      	b.n	800a98e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a964:	f7fd ff38 	bl	80087d8 <HAL_GetTick>
 800a968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a96a:	e008      	b.n	800a97e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a96c:	f7fd ff34 	bl	80087d8 <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	2b64      	cmp	r3, #100	; 0x64
 800a978:	d901      	bls.n	800a97e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e1ec      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a97e:	4b53      	ldr	r3, [pc, #332]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1f0      	bne.n	800a96c <HAL_RCC_OscConfig+0x10c>
 800a98a:	e000      	b.n	800a98e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a98c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0302 	and.w	r3, r3, #2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d063      	beq.n	800aa62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a99a:	4b4c      	ldr	r3, [pc, #304]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f003 030c 	and.w	r3, r3, #12
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00b      	beq.n	800a9be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a9a6:	4b49      	ldr	r3, [pc, #292]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f003 030c 	and.w	r3, r3, #12
 800a9ae:	2b08      	cmp	r3, #8
 800a9b0:	d11c      	bne.n	800a9ec <HAL_RCC_OscConfig+0x18c>
 800a9b2:	4b46      	ldr	r3, [pc, #280]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d116      	bne.n	800a9ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9be:	4b43      	ldr	r3, [pc, #268]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d005      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x176>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d001      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e1c0      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9d6:	4b3d      	ldr	r3, [pc, #244]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	4939      	ldr	r1, [pc, #228]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9ea:	e03a      	b.n	800aa62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d020      	beq.n	800aa36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9f4:	4b36      	ldr	r3, [pc, #216]	; (800aad0 <HAL_RCC_OscConfig+0x270>)
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9fa:	f7fd feed 	bl	80087d8 <HAL_GetTick>
 800a9fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa00:	e008      	b.n	800aa14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa02:	f7fd fee9 	bl	80087d8 <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d901      	bls.n	800aa14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e1a1      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa14:	4b2d      	ldr	r3, [pc, #180]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d0f0      	beq.n	800aa02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa20:	4b2a      	ldr	r3, [pc, #168]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	00db      	lsls	r3, r3, #3
 800aa2e:	4927      	ldr	r1, [pc, #156]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	600b      	str	r3, [r1, #0]
 800aa34:	e015      	b.n	800aa62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa36:	4b26      	ldr	r3, [pc, #152]	; (800aad0 <HAL_RCC_OscConfig+0x270>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa3c:	f7fd fecc 	bl	80087d8 <HAL_GetTick>
 800aa40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa42:	e008      	b.n	800aa56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa44:	f7fd fec8 	bl	80087d8 <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d901      	bls.n	800aa56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e180      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa56:	4b1d      	ldr	r3, [pc, #116]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f0      	bne.n	800aa44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 0308 	and.w	r3, r3, #8
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d03a      	beq.n	800aae4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d019      	beq.n	800aaaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa76:	4b17      	ldr	r3, [pc, #92]	; (800aad4 <HAL_RCC_OscConfig+0x274>)
 800aa78:	2201      	movs	r2, #1
 800aa7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa7c:	f7fd feac 	bl	80087d8 <HAL_GetTick>
 800aa80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa82:	e008      	b.n	800aa96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa84:	f7fd fea8 	bl	80087d8 <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d901      	bls.n	800aa96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e160      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa96:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <HAL_RCC_OscConfig+0x26c>)
 800aa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9a:	f003 0302 	and.w	r3, r3, #2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0f0      	beq.n	800aa84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	f000 face 	bl	800b044 <RCC_Delay>
 800aaa8:	e01c      	b.n	800aae4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aaaa:	4b0a      	ldr	r3, [pc, #40]	; (800aad4 <HAL_RCC_OscConfig+0x274>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aab0:	f7fd fe92 	bl	80087d8 <HAL_GetTick>
 800aab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aab6:	e00f      	b.n	800aad8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aab8:	f7fd fe8e 	bl	80087d8 <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d908      	bls.n	800aad8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e146      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
 800aaca:	bf00      	nop
 800aacc:	40021000 	.word	0x40021000
 800aad0:	42420000 	.word	0x42420000
 800aad4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aad8:	4b92      	ldr	r3, [pc, #584]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	f003 0302 	and.w	r3, r3, #2
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e9      	bne.n	800aab8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0304 	and.w	r3, r3, #4
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 80a6 	beq.w	800ac3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aaf6:	4b8b      	ldr	r3, [pc, #556]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10d      	bne.n	800ab1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab02:	4b88      	ldr	r3, [pc, #544]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	4a87      	ldr	r2, [pc, #540]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab0c:	61d3      	str	r3, [r2, #28]
 800ab0e:	4b85      	ldr	r3, [pc, #532]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab16:	60bb      	str	r3, [r7, #8]
 800ab18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab1e:	4b82      	ldr	r3, [pc, #520]	; (800ad28 <HAL_RCC_OscConfig+0x4c8>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d118      	bne.n	800ab5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab2a:	4b7f      	ldr	r3, [pc, #508]	; (800ad28 <HAL_RCC_OscConfig+0x4c8>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a7e      	ldr	r2, [pc, #504]	; (800ad28 <HAL_RCC_OscConfig+0x4c8>)
 800ab30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab36:	f7fd fe4f 	bl	80087d8 <HAL_GetTick>
 800ab3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab3c:	e008      	b.n	800ab50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab3e:	f7fd fe4b 	bl	80087d8 <HAL_GetTick>
 800ab42:	4602      	mov	r2, r0
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	2b64      	cmp	r3, #100	; 0x64
 800ab4a:	d901      	bls.n	800ab50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e103      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab50:	4b75      	ldr	r3, [pc, #468]	; (800ad28 <HAL_RCC_OscConfig+0x4c8>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0f0      	beq.n	800ab3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d106      	bne.n	800ab72 <HAL_RCC_OscConfig+0x312>
 800ab64:	4b6f      	ldr	r3, [pc, #444]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	4a6e      	ldr	r2, [pc, #440]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	6213      	str	r3, [r2, #32]
 800ab70:	e02d      	b.n	800abce <HAL_RCC_OscConfig+0x36e>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10c      	bne.n	800ab94 <HAL_RCC_OscConfig+0x334>
 800ab7a:	4b6a      	ldr	r3, [pc, #424]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	4a69      	ldr	r2, [pc, #420]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab80:	f023 0301 	bic.w	r3, r3, #1
 800ab84:	6213      	str	r3, [r2, #32]
 800ab86:	4b67      	ldr	r3, [pc, #412]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	4a66      	ldr	r2, [pc, #408]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	f023 0304 	bic.w	r3, r3, #4
 800ab90:	6213      	str	r3, [r2, #32]
 800ab92:	e01c      	b.n	800abce <HAL_RCC_OscConfig+0x36e>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	2b05      	cmp	r3, #5
 800ab9a:	d10c      	bne.n	800abb6 <HAL_RCC_OscConfig+0x356>
 800ab9c:	4b61      	ldr	r3, [pc, #388]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	4a60      	ldr	r2, [pc, #384]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800aba2:	f043 0304 	orr.w	r3, r3, #4
 800aba6:	6213      	str	r3, [r2, #32]
 800aba8:	4b5e      	ldr	r3, [pc, #376]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	4a5d      	ldr	r2, [pc, #372]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800abae:	f043 0301 	orr.w	r3, r3, #1
 800abb2:	6213      	str	r3, [r2, #32]
 800abb4:	e00b      	b.n	800abce <HAL_RCC_OscConfig+0x36e>
 800abb6:	4b5b      	ldr	r3, [pc, #364]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	4a5a      	ldr	r2, [pc, #360]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800abbc:	f023 0301 	bic.w	r3, r3, #1
 800abc0:	6213      	str	r3, [r2, #32]
 800abc2:	4b58      	ldr	r3, [pc, #352]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	4a57      	ldr	r2, [pc, #348]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800abc8:	f023 0304 	bic.w	r3, r3, #4
 800abcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d015      	beq.n	800ac02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abd6:	f7fd fdff 	bl	80087d8 <HAL_GetTick>
 800abda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abdc:	e00a      	b.n	800abf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abde:	f7fd fdfb 	bl	80087d8 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abec:	4293      	cmp	r3, r2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e0b1      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abf4:	4b4b      	ldr	r3, [pc, #300]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0ee      	beq.n	800abde <HAL_RCC_OscConfig+0x37e>
 800ac00:	e014      	b.n	800ac2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac02:	f7fd fde9 	bl	80087d8 <HAL_GetTick>
 800ac06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac08:	e00a      	b.n	800ac20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac0a:	f7fd fde5 	bl	80087d8 <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d901      	bls.n	800ac20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e09b      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac20:	4b40      	ldr	r3, [pc, #256]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1ee      	bne.n	800ac0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d105      	bne.n	800ac3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac32:	4b3c      	ldr	r3, [pc, #240]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	4a3b      	ldr	r2, [pc, #236]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ac38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 8087 	beq.w	800ad56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac48:	4b36      	ldr	r3, [pc, #216]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f003 030c 	and.w	r3, r3, #12
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d061      	beq.n	800ad18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d146      	bne.n	800acea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac5c:	4b33      	ldr	r3, [pc, #204]	; (800ad2c <HAL_RCC_OscConfig+0x4cc>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac62:	f7fd fdb9 	bl	80087d8 <HAL_GetTick>
 800ac66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac68:	e008      	b.n	800ac7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac6a:	f7fd fdb5 	bl	80087d8 <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d901      	bls.n	800ac7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e06d      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac7c:	4b29      	ldr	r3, [pc, #164]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1f0      	bne.n	800ac6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac90:	d108      	bne.n	800aca4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac92:	4b24      	ldr	r3, [pc, #144]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	4921      	ldr	r1, [pc, #132]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800aca0:	4313      	orrs	r3, r2
 800aca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aca4:	4b1f      	ldr	r3, [pc, #124]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a19      	ldr	r1, [r3, #32]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	430b      	orrs	r3, r1
 800acb6:	491b      	ldr	r1, [pc, #108]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800acb8:	4313      	orrs	r3, r2
 800acba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acbc:	4b1b      	ldr	r3, [pc, #108]	; (800ad2c <HAL_RCC_OscConfig+0x4cc>)
 800acbe:	2201      	movs	r2, #1
 800acc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acc2:	f7fd fd89 	bl	80087d8 <HAL_GetTick>
 800acc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acc8:	e008      	b.n	800acdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acca:	f7fd fd85 	bl	80087d8 <HAL_GetTick>
 800acce:	4602      	mov	r2, r0
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d901      	bls.n	800acdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800acd8:	2303      	movs	r3, #3
 800acda:	e03d      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acdc:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0f0      	beq.n	800acca <HAL_RCC_OscConfig+0x46a>
 800ace8:	e035      	b.n	800ad56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acea:	4b10      	ldr	r3, [pc, #64]	; (800ad2c <HAL_RCC_OscConfig+0x4cc>)
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acf0:	f7fd fd72 	bl	80087d8 <HAL_GetTick>
 800acf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acf6:	e008      	b.n	800ad0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acf8:	f7fd fd6e 	bl	80087d8 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d901      	bls.n	800ad0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e026      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad0a:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <HAL_RCC_OscConfig+0x4c4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1f0      	bne.n	800acf8 <HAL_RCC_OscConfig+0x498>
 800ad16:	e01e      	b.n	800ad56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d107      	bne.n	800ad30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e019      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
 800ad24:	40021000 	.word	0x40021000
 800ad28:	40007000 	.word	0x40007000
 800ad2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <HAL_RCC_OscConfig+0x500>)
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d106      	bne.n	800ad52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d001      	beq.n	800ad56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	40021000 	.word	0x40021000

0800ad64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e0d0      	b.n	800af1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad78:	4b6a      	ldr	r3, [pc, #424]	; (800af24 <HAL_RCC_ClockConfig+0x1c0>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0307 	and.w	r3, r3, #7
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d910      	bls.n	800ada8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad86:	4b67      	ldr	r3, [pc, #412]	; (800af24 <HAL_RCC_ClockConfig+0x1c0>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f023 0207 	bic.w	r2, r3, #7
 800ad8e:	4965      	ldr	r1, [pc, #404]	; (800af24 <HAL_RCC_ClockConfig+0x1c0>)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad96:	4b63      	ldr	r3, [pc, #396]	; (800af24 <HAL_RCC_ClockConfig+0x1c0>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0307 	and.w	r3, r3, #7
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d001      	beq.n	800ada8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e0b8      	b.n	800af1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0302 	and.w	r3, r3, #2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d020      	beq.n	800adf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d005      	beq.n	800adcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800adc0:	4b59      	ldr	r3, [pc, #356]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	4a58      	ldr	r2, [pc, #352]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800adc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800adca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0308 	and.w	r3, r3, #8
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800add8:	4b53      	ldr	r3, [pc, #332]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	4a52      	ldr	r2, [pc, #328]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800adde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ade2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ade4:	4b50      	ldr	r3, [pc, #320]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	494d      	ldr	r1, [pc, #308]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800adf2:	4313      	orrs	r3, r2
 800adf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d040      	beq.n	800ae84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d107      	bne.n	800ae1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae0a:	4b47      	ldr	r3, [pc, #284]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d115      	bne.n	800ae42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e07f      	b.n	800af1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d107      	bne.n	800ae32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae22:	4b41      	ldr	r3, [pc, #260]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e073      	b.n	800af1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae32:	4b3d      	ldr	r3, [pc, #244]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e06b      	b.n	800af1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae42:	4b39      	ldr	r3, [pc, #228]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	f023 0203 	bic.w	r2, r3, #3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	4936      	ldr	r1, [pc, #216]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800ae50:	4313      	orrs	r3, r2
 800ae52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae54:	f7fd fcc0 	bl	80087d8 <HAL_GetTick>
 800ae58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae5a:	e00a      	b.n	800ae72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae5c:	f7fd fcbc 	bl	80087d8 <HAL_GetTick>
 800ae60:	4602      	mov	r2, r0
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e053      	b.n	800af1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae72:	4b2d      	ldr	r3, [pc, #180]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f003 020c 	and.w	r2, r3, #12
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d1eb      	bne.n	800ae5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae84:	4b27      	ldr	r3, [pc, #156]	; (800af24 <HAL_RCC_ClockConfig+0x1c0>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0307 	and.w	r3, r3, #7
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d210      	bcs.n	800aeb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae92:	4b24      	ldr	r3, [pc, #144]	; (800af24 <HAL_RCC_ClockConfig+0x1c0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f023 0207 	bic.w	r2, r3, #7
 800ae9a:	4922      	ldr	r1, [pc, #136]	; (800af24 <HAL_RCC_ClockConfig+0x1c0>)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aea2:	4b20      	ldr	r3, [pc, #128]	; (800af24 <HAL_RCC_ClockConfig+0x1c0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d001      	beq.n	800aeb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e032      	b.n	800af1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d008      	beq.n	800aed2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aec0:	4b19      	ldr	r3, [pc, #100]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	4916      	ldr	r1, [pc, #88]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0308 	and.w	r3, r3, #8
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d009      	beq.n	800aef2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aede:	4b12      	ldr	r3, [pc, #72]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	490e      	ldr	r1, [pc, #56]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aef2:	f000 f821 	bl	800af38 <HAL_RCC_GetSysClockFreq>
 800aef6:	4602      	mov	r2, r0
 800aef8:	4b0b      	ldr	r3, [pc, #44]	; (800af28 <HAL_RCC_ClockConfig+0x1c4>)
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	091b      	lsrs	r3, r3, #4
 800aefe:	f003 030f 	and.w	r3, r3, #15
 800af02:	490a      	ldr	r1, [pc, #40]	; (800af2c <HAL_RCC_ClockConfig+0x1c8>)
 800af04:	5ccb      	ldrb	r3, [r1, r3]
 800af06:	fa22 f303 	lsr.w	r3, r2, r3
 800af0a:	4a09      	ldr	r2, [pc, #36]	; (800af30 <HAL_RCC_ClockConfig+0x1cc>)
 800af0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af0e:	4b09      	ldr	r3, [pc, #36]	; (800af34 <HAL_RCC_ClockConfig+0x1d0>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4618      	mov	r0, r3
 800af14:	f7fd fc1e 	bl	8008754 <HAL_InitTick>

  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	40022000 	.word	0x40022000
 800af28:	40021000 	.word	0x40021000
 800af2c:	0800dd98 	.word	0x0800dd98
 800af30:	200000a0 	.word	0x200000a0
 800af34:	200000a4 	.word	0x200000a4

0800af38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	2300      	movs	r3, #0
 800af44:	60bb      	str	r3, [r7, #8]
 800af46:	2300      	movs	r3, #0
 800af48:	617b      	str	r3, [r7, #20]
 800af4a:	2300      	movs	r3, #0
 800af4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af4e:	2300      	movs	r3, #0
 800af50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af52:	4b1e      	ldr	r3, [pc, #120]	; (800afcc <HAL_RCC_GetSysClockFreq+0x94>)
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f003 030c 	and.w	r3, r3, #12
 800af5e:	2b04      	cmp	r3, #4
 800af60:	d002      	beq.n	800af68 <HAL_RCC_GetSysClockFreq+0x30>
 800af62:	2b08      	cmp	r3, #8
 800af64:	d003      	beq.n	800af6e <HAL_RCC_GetSysClockFreq+0x36>
 800af66:	e027      	b.n	800afb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af68:	4b19      	ldr	r3, [pc, #100]	; (800afd0 <HAL_RCC_GetSysClockFreq+0x98>)
 800af6a:	613b      	str	r3, [r7, #16]
      break;
 800af6c:	e027      	b.n	800afbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	0c9b      	lsrs	r3, r3, #18
 800af72:	f003 030f 	and.w	r3, r3, #15
 800af76:	4a17      	ldr	r2, [pc, #92]	; (800afd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af78:	5cd3      	ldrb	r3, [r2, r3]
 800af7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d010      	beq.n	800afa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af86:	4b11      	ldr	r3, [pc, #68]	; (800afcc <HAL_RCC_GetSysClockFreq+0x94>)
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	0c5b      	lsrs	r3, r3, #17
 800af8c:	f003 0301 	and.w	r3, r3, #1
 800af90:	4a11      	ldr	r2, [pc, #68]	; (800afd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800af92:	5cd3      	ldrb	r3, [r2, r3]
 800af94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a0d      	ldr	r2, [pc, #52]	; (800afd0 <HAL_RCC_GetSysClockFreq+0x98>)
 800af9a:	fb03 f202 	mul.w	r2, r3, r2
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa4:	617b      	str	r3, [r7, #20]
 800afa6:	e004      	b.n	800afb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a0c      	ldr	r2, [pc, #48]	; (800afdc <HAL_RCC_GetSysClockFreq+0xa4>)
 800afac:	fb02 f303 	mul.w	r3, r2, r3
 800afb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	613b      	str	r3, [r7, #16]
      break;
 800afb6:	e002      	b.n	800afbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800afb8:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <HAL_RCC_GetSysClockFreq+0x98>)
 800afba:	613b      	str	r3, [r7, #16]
      break;
 800afbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800afbe:	693b      	ldr	r3, [r7, #16]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	371c      	adds	r7, #28
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bc80      	pop	{r7}
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	40021000 	.word	0x40021000
 800afd0:	007a1200 	.word	0x007a1200
 800afd4:	0800ddb0 	.word	0x0800ddb0
 800afd8:	0800ddc0 	.word	0x0800ddc0
 800afdc:	003d0900 	.word	0x003d0900

0800afe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afe0:	b480      	push	{r7}
 800afe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <HAL_RCC_GetHCLKFreq+0x10>)
 800afe6:	681b      	ldr	r3, [r3, #0]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	46bd      	mov	sp, r7
 800afec:	bc80      	pop	{r7}
 800afee:	4770      	bx	lr
 800aff0:	200000a0 	.word	0x200000a0

0800aff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aff8:	f7ff fff2 	bl	800afe0 <HAL_RCC_GetHCLKFreq>
 800affc:	4602      	mov	r2, r0
 800affe:	4b05      	ldr	r3, [pc, #20]	; (800b014 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	0a1b      	lsrs	r3, r3, #8
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	4903      	ldr	r1, [pc, #12]	; (800b018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b00a:	5ccb      	ldrb	r3, [r1, r3]
 800b00c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b010:	4618      	mov	r0, r3
 800b012:	bd80      	pop	{r7, pc}
 800b014:	40021000 	.word	0x40021000
 800b018:	0800dda8 	.word	0x0800dda8

0800b01c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b020:	f7ff ffde 	bl	800afe0 <HAL_RCC_GetHCLKFreq>
 800b024:	4602      	mov	r2, r0
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	0adb      	lsrs	r3, r3, #11
 800b02c:	f003 0307 	and.w	r3, r3, #7
 800b030:	4903      	ldr	r1, [pc, #12]	; (800b040 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b032:	5ccb      	ldrb	r3, [r1, r3]
 800b034:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b038:	4618      	mov	r0, r3
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	40021000 	.word	0x40021000
 800b040:	0800dda8 	.word	0x0800dda8

0800b044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <RCC_Delay+0x34>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a0a      	ldr	r2, [pc, #40]	; (800b07c <RCC_Delay+0x38>)
 800b052:	fba2 2303 	umull	r2, r3, r2, r3
 800b056:	0a5b      	lsrs	r3, r3, #9
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	fb02 f303 	mul.w	r3, r2, r3
 800b05e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b060:	bf00      	nop
  }
  while (Delay --);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1e5a      	subs	r2, r3, #1
 800b066:	60fa      	str	r2, [r7, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1f9      	bne.n	800b060 <RCC_Delay+0x1c>
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	bc80      	pop	{r7}
 800b076:	4770      	bx	lr
 800b078:	200000a0 	.word	0x200000a0
 800b07c:	10624dd3 	.word	0x10624dd3

0800b080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e041      	b.n	800b116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d106      	bne.n	800b0ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7fd fa26 	bl	80084f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	4619      	mov	r1, r3
 800b0be:	4610      	mov	r0, r2
 800b0c0:	f000 fa82 	bl	800b5c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b01      	cmp	r3, #1
 800b132:	d001      	beq.n	800b138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e044      	b.n	800b1c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68da      	ldr	r2, [r3, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f042 0201 	orr.w	r2, r2, #1
 800b14e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a1d      	ldr	r2, [pc, #116]	; (800b1cc <HAL_TIM_Base_Start_IT+0xac>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d018      	beq.n	800b18c <HAL_TIM_Base_Start_IT+0x6c>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a1c      	ldr	r2, [pc, #112]	; (800b1d0 <HAL_TIM_Base_Start_IT+0xb0>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d013      	beq.n	800b18c <HAL_TIM_Base_Start_IT+0x6c>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b16c:	d00e      	beq.n	800b18c <HAL_TIM_Base_Start_IT+0x6c>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a18      	ldr	r2, [pc, #96]	; (800b1d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d009      	beq.n	800b18c <HAL_TIM_Base_Start_IT+0x6c>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a16      	ldr	r2, [pc, #88]	; (800b1d8 <HAL_TIM_Base_Start_IT+0xb8>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d004      	beq.n	800b18c <HAL_TIM_Base_Start_IT+0x6c>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a15      	ldr	r2, [pc, #84]	; (800b1dc <HAL_TIM_Base_Start_IT+0xbc>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d111      	bne.n	800b1b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	f003 0307 	and.w	r3, r3, #7
 800b196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b06      	cmp	r3, #6
 800b19c:	d010      	beq.n	800b1c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f042 0201 	orr.w	r2, r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ae:	e007      	b.n	800b1c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0201 	orr.w	r2, r2, #1
 800b1be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bc80      	pop	{r7}
 800b1ca:	4770      	bx	lr
 800b1cc:	40012c00 	.word	0x40012c00
 800b1d0:	40013400 	.word	0x40013400
 800b1d4:	40000400 	.word	0x40000400
 800b1d8:	40000800 	.word	0x40000800
 800b1dc:	40000c00 	.word	0x40000c00

0800b1e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	f003 0302 	and.w	r3, r3, #2
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d122      	bne.n	800b23c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b02      	cmp	r3, #2
 800b202:	d11b      	bne.n	800b23c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f06f 0202 	mvn.w	r2, #2
 800b20c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	f003 0303 	and.w	r3, r3, #3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f9b4 	bl	800b590 <HAL_TIM_IC_CaptureCallback>
 800b228:	e005      	b.n	800b236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f9a7 	bl	800b57e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f9b6 	bl	800b5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	f003 0304 	and.w	r3, r3, #4
 800b246:	2b04      	cmp	r3, #4
 800b248:	d122      	bne.n	800b290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b04      	cmp	r3, #4
 800b256:	d11b      	bne.n	800b290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f06f 0204 	mvn.w	r2, #4
 800b260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2202      	movs	r2, #2
 800b266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f98a 	bl	800b590 <HAL_TIM_IC_CaptureCallback>
 800b27c:	e005      	b.n	800b28a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f97d 	bl	800b57e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f98c 	bl	800b5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f003 0308 	and.w	r3, r3, #8
 800b29a:	2b08      	cmp	r3, #8
 800b29c:	d122      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0308 	and.w	r3, r3, #8
 800b2a8:	2b08      	cmp	r3, #8
 800b2aa:	d11b      	bne.n	800b2e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0208 	mvn.w	r2, #8
 800b2b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2204      	movs	r2, #4
 800b2ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f960 	bl	800b590 <HAL_TIM_IC_CaptureCallback>
 800b2d0:	e005      	b.n	800b2de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f953 	bl	800b57e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f962 	bl	800b5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	f003 0310 	and.w	r3, r3, #16
 800b2ee:	2b10      	cmp	r3, #16
 800b2f0:	d122      	bne.n	800b338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f003 0310 	and.w	r3, r3, #16
 800b2fc:	2b10      	cmp	r3, #16
 800b2fe:	d11b      	bne.n	800b338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f06f 0210 	mvn.w	r2, #16
 800b308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2208      	movs	r2, #8
 800b30e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f936 	bl	800b590 <HAL_TIM_IC_CaptureCallback>
 800b324:	e005      	b.n	800b332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f929 	bl	800b57e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f938 	bl	800b5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b01      	cmp	r3, #1
 800b344:	d10e      	bne.n	800b364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	2b01      	cmp	r3, #1
 800b352:	d107      	bne.n	800b364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f06f 0201 	mvn.w	r2, #1
 800b35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7fc fd62 	bl	8007e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b36e:	2b80      	cmp	r3, #128	; 0x80
 800b370:	d10e      	bne.n	800b390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37c:	2b80      	cmp	r3, #128	; 0x80
 800b37e:	d107      	bne.n	800b390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 faa1 	bl	800b8d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39a:	2b40      	cmp	r3, #64	; 0x40
 800b39c:	d10e      	bne.n	800b3bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a8:	2b40      	cmp	r3, #64	; 0x40
 800b3aa:	d107      	bne.n	800b3bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f8fc 	bl	800b5b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	f003 0320 	and.w	r3, r3, #32
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	d10e      	bne.n	800b3e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	f003 0320 	and.w	r3, r3, #32
 800b3d4:	2b20      	cmp	r3, #32
 800b3d6:	d107      	bne.n	800b3e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f06f 0220 	mvn.w	r2, #32
 800b3e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fa6c 	bl	800b8c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b404:	2b01      	cmp	r3, #1
 800b406:	d101      	bne.n	800b40c <HAL_TIM_ConfigClockSource+0x1c>
 800b408:	2302      	movs	r3, #2
 800b40a:	e0b4      	b.n	800b576 <HAL_TIM_ConfigClockSource+0x186>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2202      	movs	r2, #2
 800b418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b42a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b444:	d03e      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0xd4>
 800b446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b44a:	f200 8087 	bhi.w	800b55c <HAL_TIM_ConfigClockSource+0x16c>
 800b44e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b452:	f000 8086 	beq.w	800b562 <HAL_TIM_ConfigClockSource+0x172>
 800b456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45a:	d87f      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x16c>
 800b45c:	2b70      	cmp	r3, #112	; 0x70
 800b45e:	d01a      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0xa6>
 800b460:	2b70      	cmp	r3, #112	; 0x70
 800b462:	d87b      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x16c>
 800b464:	2b60      	cmp	r3, #96	; 0x60
 800b466:	d050      	beq.n	800b50a <HAL_TIM_ConfigClockSource+0x11a>
 800b468:	2b60      	cmp	r3, #96	; 0x60
 800b46a:	d877      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x16c>
 800b46c:	2b50      	cmp	r3, #80	; 0x50
 800b46e:	d03c      	beq.n	800b4ea <HAL_TIM_ConfigClockSource+0xfa>
 800b470:	2b50      	cmp	r3, #80	; 0x50
 800b472:	d873      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x16c>
 800b474:	2b40      	cmp	r3, #64	; 0x40
 800b476:	d058      	beq.n	800b52a <HAL_TIM_ConfigClockSource+0x13a>
 800b478:	2b40      	cmp	r3, #64	; 0x40
 800b47a:	d86f      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x16c>
 800b47c:	2b30      	cmp	r3, #48	; 0x30
 800b47e:	d064      	beq.n	800b54a <HAL_TIM_ConfigClockSource+0x15a>
 800b480:	2b30      	cmp	r3, #48	; 0x30
 800b482:	d86b      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x16c>
 800b484:	2b20      	cmp	r3, #32
 800b486:	d060      	beq.n	800b54a <HAL_TIM_ConfigClockSource+0x15a>
 800b488:	2b20      	cmp	r3, #32
 800b48a:	d867      	bhi.n	800b55c <HAL_TIM_ConfigClockSource+0x16c>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d05c      	beq.n	800b54a <HAL_TIM_ConfigClockSource+0x15a>
 800b490:	2b10      	cmp	r3, #16
 800b492:	d05a      	beq.n	800b54a <HAL_TIM_ConfigClockSource+0x15a>
 800b494:	e062      	b.n	800b55c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4a6:	f000 f980 	bl	800b7aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	609a      	str	r2, [r3, #8]
      break;
 800b4c2:	e04f      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4d4:	f000 f969 	bl	800b7aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689a      	ldr	r2, [r3, #8]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4e6:	609a      	str	r2, [r3, #8]
      break;
 800b4e8:	e03c      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f000 f8e0 	bl	800b6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2150      	movs	r1, #80	; 0x50
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f937 	bl	800b776 <TIM_ITRx_SetConfig>
      break;
 800b508:	e02c      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b516:	461a      	mov	r2, r3
 800b518:	f000 f8fe 	bl	800b718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2160      	movs	r1, #96	; 0x60
 800b522:	4618      	mov	r0, r3
 800b524:	f000 f927 	bl	800b776 <TIM_ITRx_SetConfig>
      break;
 800b528:	e01c      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b536:	461a      	mov	r2, r3
 800b538:	f000 f8c0 	bl	800b6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2140      	movs	r1, #64	; 0x40
 800b542:	4618      	mov	r0, r3
 800b544:	f000 f917 	bl	800b776 <TIM_ITRx_SetConfig>
      break;
 800b548:	e00c      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4619      	mov	r1, r3
 800b554:	4610      	mov	r0, r2
 800b556:	f000 f90e 	bl	800b776 <TIM_ITRx_SetConfig>
      break;
 800b55a:	e003      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	73fb      	strb	r3, [r7, #15]
      break;
 800b560:	e000      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b574:	7bfb      	ldrb	r3, [r7, #15]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bc80      	pop	{r7}
 800b58e:	4770      	bx	lr

0800b590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bc80      	pop	{r7}
 800b5a0:	4770      	bx	lr

0800b5a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b083      	sub	sp, #12
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bc80      	pop	{r7}
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bc80      	pop	{r7}
 800b5c4:	4770      	bx	lr
	...

0800b5c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a33      	ldr	r2, [pc, #204]	; (800b6a8 <TIM_Base_SetConfig+0xe0>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d013      	beq.n	800b608 <TIM_Base_SetConfig+0x40>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a32      	ldr	r2, [pc, #200]	; (800b6ac <TIM_Base_SetConfig+0xe4>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d00f      	beq.n	800b608 <TIM_Base_SetConfig+0x40>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ee:	d00b      	beq.n	800b608 <TIM_Base_SetConfig+0x40>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a2f      	ldr	r2, [pc, #188]	; (800b6b0 <TIM_Base_SetConfig+0xe8>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d007      	beq.n	800b608 <TIM_Base_SetConfig+0x40>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a2e      	ldr	r2, [pc, #184]	; (800b6b4 <TIM_Base_SetConfig+0xec>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d003      	beq.n	800b608 <TIM_Base_SetConfig+0x40>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a2d      	ldr	r2, [pc, #180]	; (800b6b8 <TIM_Base_SetConfig+0xf0>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d108      	bne.n	800b61a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b60e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	4313      	orrs	r3, r2
 800b618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a22      	ldr	r2, [pc, #136]	; (800b6a8 <TIM_Base_SetConfig+0xe0>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d013      	beq.n	800b64a <TIM_Base_SetConfig+0x82>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a21      	ldr	r2, [pc, #132]	; (800b6ac <TIM_Base_SetConfig+0xe4>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d00f      	beq.n	800b64a <TIM_Base_SetConfig+0x82>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b630:	d00b      	beq.n	800b64a <TIM_Base_SetConfig+0x82>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a1e      	ldr	r2, [pc, #120]	; (800b6b0 <TIM_Base_SetConfig+0xe8>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d007      	beq.n	800b64a <TIM_Base_SetConfig+0x82>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a1d      	ldr	r2, [pc, #116]	; (800b6b4 <TIM_Base_SetConfig+0xec>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d003      	beq.n	800b64a <TIM_Base_SetConfig+0x82>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a1c      	ldr	r2, [pc, #112]	; (800b6b8 <TIM_Base_SetConfig+0xf0>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d108      	bne.n	800b65c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	4313      	orrs	r3, r2
 800b668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a09      	ldr	r2, [pc, #36]	; (800b6a8 <TIM_Base_SetConfig+0xe0>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d003      	beq.n	800b690 <TIM_Base_SetConfig+0xc8>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a08      	ldr	r2, [pc, #32]	; (800b6ac <TIM_Base_SetConfig+0xe4>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d103      	bne.n	800b698 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	691a      	ldr	r2, [r3, #16]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	615a      	str	r2, [r3, #20]
}
 800b69e:	bf00      	nop
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bc80      	pop	{r7}
 800b6a6:	4770      	bx	lr
 800b6a8:	40012c00 	.word	0x40012c00
 800b6ac:	40013400 	.word	0x40013400
 800b6b0:	40000400 	.word	0x40000400
 800b6b4:	40000800 	.word	0x40000800
 800b6b8:	40000c00 	.word	0x40000c00

0800b6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b087      	sub	sp, #28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	f023 0201 	bic.w	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	011b      	lsls	r3, r3, #4
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f023 030a 	bic.w	r3, r3, #10
 800b6f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	621a      	str	r2, [r3, #32]
}
 800b70e:	bf00      	nop
 800b710:	371c      	adds	r7, #28
 800b712:	46bd      	mov	sp, r7
 800b714:	bc80      	pop	{r7}
 800b716:	4770      	bx	lr

0800b718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	f023 0210 	bic.w	r2, r3, #16
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	031b      	lsls	r3, r3, #12
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b754:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	621a      	str	r2, [r3, #32]
}
 800b76c:	bf00      	nop
 800b76e:	371c      	adds	r7, #28
 800b770:	46bd      	mov	sp, r7
 800b772:	bc80      	pop	{r7}
 800b774:	4770      	bx	lr

0800b776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b776:	b480      	push	{r7}
 800b778:	b085      	sub	sp, #20
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b78c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	4313      	orrs	r3, r2
 800b794:	f043 0307 	orr.w	r3, r3, #7
 800b798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	609a      	str	r2, [r3, #8]
}
 800b7a0:	bf00      	nop
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bc80      	pop	{r7}
 800b7a8:	4770      	bx	lr

0800b7aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b087      	sub	sp, #28
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
 800b7b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	021a      	lsls	r2, r3, #8
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	431a      	orrs	r2, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	609a      	str	r2, [r3, #8]
}
 800b7de:	bf00      	nop
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bc80      	pop	{r7}
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e050      	b.n	800b8a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a1b      	ldr	r2, [pc, #108]	; (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d018      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a19      	ldr	r2, [pc, #100]	; (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d013      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b856:	d00e      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a15      	ldr	r2, [pc, #84]	; (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d009      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a14      	ldr	r2, [pc, #80]	; (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d004      	beq.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a12      	ldr	r2, [pc, #72]	; (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d10c      	bne.n	800b890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b87c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	4313      	orrs	r3, r2
 800b886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bc80      	pop	{r7}
 800b8aa:	4770      	bx	lr
 800b8ac:	40012c00 	.word	0x40012c00
 800b8b0:	40013400 	.word	0x40013400
 800b8b4:	40000400 	.word	0x40000400
 800b8b8:	40000800 	.word	0x40000800
 800b8bc:	40000c00 	.word	0x40000c00

0800b8c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bc80      	pop	{r7}
 800b8d0:	4770      	bx	lr

0800b8d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8da:	bf00      	nop
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bc80      	pop	{r7}
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e042      	b.n	800b97c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d106      	bne.n	800b910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7fc fe1a 	bl	8008544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2224      	movs	r2, #36	; 0x24
 800b914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68da      	ldr	r2, [r3, #12]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fcb5 	bl	800c298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	691a      	ldr	r2, [r3, #16]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b93c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	695a      	ldr	r2, [r3, #20]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b94c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68da      	ldr	r2, [r3, #12]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b95c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2220      	movs	r2, #32
 800b968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2220      	movs	r2, #32
 800b970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b20      	cmp	r3, #32
 800b99c:	d121      	bne.n	800b9e2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <HAL_UART_Transmit_IT+0x26>
 800b9a4:	88fb      	ldrh	r3, [r7, #6]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e01a      	b.n	800b9e4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	88fa      	ldrh	r2, [r7, #6]
 800b9b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	88fa      	ldrh	r2, [r7, #6]
 800b9be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2221      	movs	r2, #33	; 0x21
 800b9ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68da      	ldr	r2, [r3, #12]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e000      	b.n	800b9e4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b9e2:	2302      	movs	r3, #2
  }
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr
	...

0800b9f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b0ba      	sub	sp, #232	; 0xe8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba26:	f003 030f 	and.w	r3, r3, #15
 800ba2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10f      	bne.n	800ba56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba3a:	f003 0320 	and.w	r3, r3, #32
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d009      	beq.n	800ba56 <HAL_UART_IRQHandler+0x66>
 800ba42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fb63 	bl	800c11a <UART_Receive_IT>
      return;
 800ba54:	e25b      	b.n	800bf0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 80de 	beq.w	800bc1c <HAL_UART_IRQHandler+0x22c>
 800ba60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d106      	bne.n	800ba7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 80d1 	beq.w	800bc1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00b      	beq.n	800ba9e <HAL_UART_IRQHandler+0xae>
 800ba86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d005      	beq.n	800ba9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba96:	f043 0201 	orr.w	r2, r3, #1
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa2:	f003 0304 	and.w	r3, r3, #4
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00b      	beq.n	800bac2 <HAL_UART_IRQHandler+0xd2>
 800baaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baae:	f003 0301 	and.w	r3, r3, #1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d005      	beq.n	800bac2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baba:	f043 0202 	orr.w	r2, r3, #2
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00b      	beq.n	800bae6 <HAL_UART_IRQHandler+0xf6>
 800bace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d005      	beq.n	800bae6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bade:	f043 0204 	orr.w	r2, r3, #4
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baea:	f003 0308 	and.w	r3, r3, #8
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d011      	beq.n	800bb16 <HAL_UART_IRQHandler+0x126>
 800baf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf6:	f003 0320 	and.w	r3, r3, #32
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d105      	bne.n	800bb0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bafe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d005      	beq.n	800bb16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb0e:	f043 0208 	orr.w	r2, r3, #8
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f000 81f2 	beq.w	800bf04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb24:	f003 0320 	and.w	r3, r3, #32
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d008      	beq.n	800bb3e <HAL_UART_IRQHandler+0x14e>
 800bb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb30:	f003 0320 	and.w	r3, r3, #32
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 faee 	bl	800c11a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bf14      	ite	ne
 800bb4c:	2301      	movne	r3, #1
 800bb4e:	2300      	moveq	r3, #0
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb5a:	f003 0308 	and.w	r3, r3, #8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d103      	bne.n	800bb6a <HAL_UART_IRQHandler+0x17a>
 800bb62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d04f      	beq.n	800bc0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f9f8 	bl	800bf60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d041      	beq.n	800bc02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3314      	adds	r3, #20
 800bb84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb8c:	e853 3f00 	ldrex	r3, [r3]
 800bb90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3314      	adds	r3, #20
 800bba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbba:	e841 2300 	strex	r3, r2, [r1]
 800bbbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1d9      	bne.n	800bb7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d013      	beq.n	800bbfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd6:	4a7e      	ldr	r2, [pc, #504]	; (800bdd0 <HAL_UART_IRQHandler+0x3e0>)
 800bbd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fd f86c 	bl	8008cbc <HAL_DMA_Abort_IT>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d016      	beq.n	800bc18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf8:	e00e      	b.n	800bc18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f99c 	bl	800bf38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc00:	e00a      	b.n	800bc18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f998 	bl	800bf38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc08:	e006      	b.n	800bc18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f994 	bl	800bf38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc16:	e175      	b.n	800bf04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc18:	bf00      	nop
    return;
 800bc1a:	e173      	b.n	800bf04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	f040 814f 	bne.w	800bec4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc2a:	f003 0310 	and.w	r3, r3, #16
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f000 8148 	beq.w	800bec4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc38:	f003 0310 	and.w	r3, r3, #16
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8141 	beq.w	800bec4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc42:	2300      	movs	r3, #0
 800bc44:	60bb      	str	r3, [r7, #8]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60bb      	str	r3, [r7, #8]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	60bb      	str	r3, [r7, #8]
 800bc56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 80b6 	beq.w	800bdd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 8145 	beq.w	800bf08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc86:	429a      	cmp	r2, r3
 800bc88:	f080 813e 	bcs.w	800bf08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	f000 8088 	beq.w	800bdb0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	330c      	adds	r3, #12
 800bca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcae:	e853 3f00 	ldrex	r3, [r3]
 800bcb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bcb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	330c      	adds	r3, #12
 800bcc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bccc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bcd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bcd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bcdc:	e841 2300 	strex	r3, r2, [r1]
 800bce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1d9      	bne.n	800bca0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3314      	adds	r3, #20
 800bcf2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcf6:	e853 3f00 	ldrex	r3, [r3]
 800bcfa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcfe:	f023 0301 	bic.w	r3, r3, #1
 800bd02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3314      	adds	r3, #20
 800bd0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd1c:	e841 2300 	strex	r3, r2, [r1]
 800bd20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1e1      	bne.n	800bcec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3314      	adds	r3, #20
 800bd2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3314      	adds	r3, #20
 800bd48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd54:	e841 2300 	strex	r3, r2, [r1]
 800bd58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e3      	bne.n	800bd28 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2220      	movs	r2, #32
 800bd64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	330c      	adds	r3, #12
 800bd74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd80:	f023 0310 	bic.w	r3, r3, #16
 800bd84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	330c      	adds	r3, #12
 800bd8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd92:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bda0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e3      	bne.n	800bd6e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fc ff4b 	bl	8008c46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f8bf 	bl	800bf4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bdcc:	e09c      	b.n	800bf08 <HAL_UART_IRQHandler+0x518>
 800bdce:	bf00      	nop
 800bdd0:	0800c025 	.word	0x0800c025
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f000 808e 	beq.w	800bf0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bdf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 8089 	beq.w	800bf0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	330c      	adds	r3, #12
 800be00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	e853 3f00 	ldrex	r3, [r3]
 800be08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	330c      	adds	r3, #12
 800be1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be1e:	647a      	str	r2, [r7, #68]	; 0x44
 800be20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be26:	e841 2300 	strex	r3, r2, [r1]
 800be2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1e3      	bne.n	800bdfa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	3314      	adds	r3, #20
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	e853 3f00 	ldrex	r3, [r3]
 800be40:	623b      	str	r3, [r7, #32]
   return(result);
 800be42:	6a3b      	ldr	r3, [r7, #32]
 800be44:	f023 0301 	bic.w	r3, r3, #1
 800be48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3314      	adds	r3, #20
 800be52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be56:	633a      	str	r2, [r7, #48]	; 0x30
 800be58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e3      	bne.n	800be32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	330c      	adds	r3, #12
 800be7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	e853 3f00 	ldrex	r3, [r3]
 800be86:	60fb      	str	r3, [r7, #12]
   return(result);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f023 0310 	bic.w	r3, r3, #16
 800be8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	330c      	adds	r3, #12
 800be98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be9c:	61fa      	str	r2, [r7, #28]
 800be9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea0:	69b9      	ldr	r1, [r7, #24]
 800bea2:	69fa      	ldr	r2, [r7, #28]
 800bea4:	e841 2300 	strex	r3, r2, [r1]
 800bea8:	617b      	str	r3, [r7, #20]
   return(result);
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1e3      	bne.n	800be78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2202      	movs	r2, #2
 800beb4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800beb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800beba:	4619      	mov	r1, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f844 	bl	800bf4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bec2:	e023      	b.n	800bf0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800becc:	2b00      	cmp	r3, #0
 800bece:	d009      	beq.n	800bee4 <HAL_UART_IRQHandler+0x4f4>
 800bed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d003      	beq.n	800bee4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f8b5 	bl	800c04c <UART_Transmit_IT>
    return;
 800bee2:	e014      	b.n	800bf0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00e      	beq.n	800bf0e <HAL_UART_IRQHandler+0x51e>
 800bef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d008      	beq.n	800bf0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 f8f4 	bl	800c0ea <UART_EndTransmit_IT>
    return;
 800bf02:	e004      	b.n	800bf0e <HAL_UART_IRQHandler+0x51e>
    return;
 800bf04:	bf00      	nop
 800bf06:	e002      	b.n	800bf0e <HAL_UART_IRQHandler+0x51e>
      return;
 800bf08:	bf00      	nop
 800bf0a:	e000      	b.n	800bf0e <HAL_UART_IRQHandler+0x51e>
      return;
 800bf0c:	bf00      	nop
  }
}
 800bf0e:	37e8      	adds	r7, #232	; 0xe8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bc80      	pop	{r7}
 800bf24:	4770      	bx	lr

0800bf26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b083      	sub	sp, #12
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bc80      	pop	{r7}
 800bf36:	4770      	bx	lr

0800bf38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bc80      	pop	{r7}
 800bf48:	4770      	bx	lr

0800bf4a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	460b      	mov	r3, r1
 800bf54:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bc80      	pop	{r7}
 800bf5e:	4770      	bx	lr

0800bf60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b095      	sub	sp, #84	; 0x54
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	330c      	adds	r3, #12
 800bf6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf72:	e853 3f00 	ldrex	r3, [r3]
 800bf76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	330c      	adds	r3, #12
 800bf86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf88:	643a      	str	r2, [r7, #64]	; 0x40
 800bf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf90:	e841 2300 	strex	r3, r2, [r1]
 800bf94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1e5      	bne.n	800bf68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3314      	adds	r3, #20
 800bfa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	e853 3f00 	ldrex	r3, [r3]
 800bfaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	f023 0301 	bic.w	r3, r3, #1
 800bfb2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3314      	adds	r3, #20
 800bfba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfc4:	e841 2300 	strex	r3, r2, [r1]
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e5      	bne.n	800bf9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d119      	bne.n	800c00c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	330c      	adds	r3, #12
 800bfde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	e853 3f00 	ldrex	r3, [r3]
 800bfe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	f023 0310 	bic.w	r3, r3, #16
 800bfee:	647b      	str	r3, [r7, #68]	; 0x44
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	330c      	adds	r3, #12
 800bff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bff8:	61ba      	str	r2, [r7, #24]
 800bffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffc:	6979      	ldr	r1, [r7, #20]
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	e841 2300 	strex	r3, r2, [r1]
 800c004:	613b      	str	r3, [r7, #16]
   return(result);
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1e5      	bne.n	800bfd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2220      	movs	r2, #32
 800c010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c01a:	bf00      	nop
 800c01c:	3754      	adds	r7, #84	; 0x54
 800c01e:	46bd      	mov	sp, r7
 800c020:	bc80      	pop	{r7}
 800c022:	4770      	bx	lr

0800c024 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7ff ff7a 	bl	800bf38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c044:	bf00      	nop
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b21      	cmp	r3, #33	; 0x21
 800c05e:	d13e      	bne.n	800c0de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c068:	d114      	bne.n	800c094 <UART_Transmit_IT+0x48>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d110      	bne.n	800c094 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c086:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	1c9a      	adds	r2, r3, #2
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	621a      	str	r2, [r3, #32]
 800c092:	e008      	b.n	800c0a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	1c59      	adds	r1, r3, #1
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	6211      	str	r1, [r2, #32]
 800c09e:	781a      	ldrb	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10f      	bne.n	800c0da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68da      	ldr	r2, [r3, #12]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e000      	b.n	800c0e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0de:	2302      	movs	r3, #2
  }
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bc80      	pop	{r7}
 800c0e8:	4770      	bx	lr

0800c0ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68da      	ldr	r2, [r3, #12]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2220      	movs	r2, #32
 800c106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff ff02 	bl	800bf14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b08c      	sub	sp, #48	; 0x30
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b22      	cmp	r3, #34	; 0x22
 800c12c:	f040 80ae 	bne.w	800c28c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c138:	d117      	bne.n	800c16a <UART_Receive_IT+0x50>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d113      	bne.n	800c16a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c142:	2300      	movs	r3, #0
 800c144:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	b29b      	uxth	r3, r3
 800c154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c158:	b29a      	uxth	r2, r3
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c162:	1c9a      	adds	r2, r3, #2
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	629a      	str	r2, [r3, #40]	; 0x28
 800c168:	e026      	b.n	800c1b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c170:	2300      	movs	r3, #0
 800c172:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17c:	d007      	beq.n	800c18e <UART_Receive_IT+0x74>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <UART_Receive_IT+0x82>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	b2da      	uxtb	r2, r3
 800c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c198:	701a      	strb	r2, [r3, #0]
 800c19a:	e008      	b.n	800c1ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b2:	1c5a      	adds	r2, r3, #1
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d15d      	bne.n	800c288 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68da      	ldr	r2, [r3, #12]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f022 0220 	bic.w	r2, r2, #32
 800c1da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68da      	ldr	r2, [r3, #12]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	695a      	ldr	r2, [r3, #20]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f022 0201 	bic.w	r2, r2, #1
 800c1fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2220      	movs	r2, #32
 800c200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d135      	bne.n	800c27e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	330c      	adds	r3, #12
 800c21e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	e853 3f00 	ldrex	r3, [r3]
 800c226:	613b      	str	r3, [r7, #16]
   return(result);
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	f023 0310 	bic.w	r3, r3, #16
 800c22e:	627b      	str	r3, [r7, #36]	; 0x24
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	330c      	adds	r3, #12
 800c236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c238:	623a      	str	r2, [r7, #32]
 800c23a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23c:	69f9      	ldr	r1, [r7, #28]
 800c23e:	6a3a      	ldr	r2, [r7, #32]
 800c240:	e841 2300 	strex	r3, r2, [r1]
 800c244:	61bb      	str	r3, [r7, #24]
   return(result);
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1e5      	bne.n	800c218 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0310 	and.w	r3, r3, #16
 800c256:	2b10      	cmp	r3, #16
 800c258:	d10a      	bne.n	800c270 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c25a:	2300      	movs	r3, #0
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7ff fe67 	bl	800bf4a <HAL_UARTEx_RxEventCallback>
 800c27c:	e002      	b.n	800c284 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff fe51 	bl	800bf26 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	e002      	b.n	800c28e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	e000      	b.n	800c28e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c28c:	2302      	movs	r3, #2
  }
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3730      	adds	r7, #48	; 0x30
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68da      	ldr	r2, [r3, #12]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	689a      	ldr	r2, [r3, #8]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	431a      	orrs	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	695b      	ldr	r3, [r3, #20]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c2d2:	f023 030c 	bic.w	r3, r3, #12
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	6812      	ldr	r2, [r2, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	699a      	ldr	r2, [r3, #24]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a2c      	ldr	r2, [pc, #176]	; (800c3ac <UART_SetConfig+0x114>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d103      	bne.n	800c308 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c300:	f7fe fe8c 	bl	800b01c <HAL_RCC_GetPCLK2Freq>
 800c304:	60f8      	str	r0, [r7, #12]
 800c306:	e002      	b.n	800c30e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c308:	f7fe fe74 	bl	800aff4 <HAL_RCC_GetPCLK1Freq>
 800c30c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	4613      	mov	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4413      	add	r3, r2
 800c316:	009a      	lsls	r2, r3, #2
 800c318:	441a      	add	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	fbb2 f3f3 	udiv	r3, r2, r3
 800c324:	4a22      	ldr	r2, [pc, #136]	; (800c3b0 <UART_SetConfig+0x118>)
 800c326:	fba2 2303 	umull	r2, r3, r2, r3
 800c32a:	095b      	lsrs	r3, r3, #5
 800c32c:	0119      	lsls	r1, r3, #4
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	4613      	mov	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	009a      	lsls	r2, r3, #2
 800c338:	441a      	add	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	fbb2 f2f3 	udiv	r2, r2, r3
 800c344:	4b1a      	ldr	r3, [pc, #104]	; (800c3b0 <UART_SetConfig+0x118>)
 800c346:	fba3 0302 	umull	r0, r3, r3, r2
 800c34a:	095b      	lsrs	r3, r3, #5
 800c34c:	2064      	movs	r0, #100	; 0x64
 800c34e:	fb00 f303 	mul.w	r3, r0, r3
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	011b      	lsls	r3, r3, #4
 800c356:	3332      	adds	r3, #50	; 0x32
 800c358:	4a15      	ldr	r2, [pc, #84]	; (800c3b0 <UART_SetConfig+0x118>)
 800c35a:	fba2 2303 	umull	r2, r3, r2, r3
 800c35e:	095b      	lsrs	r3, r3, #5
 800c360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c364:	4419      	add	r1, r3
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	4613      	mov	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	009a      	lsls	r2, r3, #2
 800c370:	441a      	add	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	fbb2 f2f3 	udiv	r2, r2, r3
 800c37c:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <UART_SetConfig+0x118>)
 800c37e:	fba3 0302 	umull	r0, r3, r3, r2
 800c382:	095b      	lsrs	r3, r3, #5
 800c384:	2064      	movs	r0, #100	; 0x64
 800c386:	fb00 f303 	mul.w	r3, r0, r3
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	011b      	lsls	r3, r3, #4
 800c38e:	3332      	adds	r3, #50	; 0x32
 800c390:	4a07      	ldr	r2, [pc, #28]	; (800c3b0 <UART_SetConfig+0x118>)
 800c392:	fba2 2303 	umull	r2, r3, r2, r3
 800c396:	095b      	lsrs	r3, r3, #5
 800c398:	f003 020f 	and.w	r2, r3, #15
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	440a      	add	r2, r1
 800c3a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c3a4:	bf00      	nop
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	40013800 	.word	0x40013800
 800c3b0:	51eb851f 	.word	0x51eb851f

0800c3b4 <__itoa>:
 800c3b4:	1e93      	subs	r3, r2, #2
 800c3b6:	2b22      	cmp	r3, #34	; 0x22
 800c3b8:	b510      	push	{r4, lr}
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	d904      	bls.n	800c3c8 <__itoa+0x14>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	461c      	mov	r4, r3
 800c3c2:	700b      	strb	r3, [r1, #0]
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	bd10      	pop	{r4, pc}
 800c3c8:	2a0a      	cmp	r2, #10
 800c3ca:	d109      	bne.n	800c3e0 <__itoa+0x2c>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	da07      	bge.n	800c3e0 <__itoa+0x2c>
 800c3d0:	232d      	movs	r3, #45	; 0x2d
 800c3d2:	700b      	strb	r3, [r1, #0]
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	4240      	negs	r0, r0
 800c3d8:	4421      	add	r1, r4
 800c3da:	f000 f8d9 	bl	800c590 <__utoa>
 800c3de:	e7f1      	b.n	800c3c4 <__itoa+0x10>
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	e7f9      	b.n	800c3d8 <__itoa+0x24>

0800c3e4 <itoa>:
 800c3e4:	f7ff bfe6 	b.w	800c3b4 <__itoa>

0800c3e8 <malloc>:
 800c3e8:	4b02      	ldr	r3, [pc, #8]	; (800c3f4 <malloc+0xc>)
 800c3ea:	4601      	mov	r1, r0
 800c3ec:	6818      	ldr	r0, [r3, #0]
 800c3ee:	f000 b823 	b.w	800c438 <_malloc_r>
 800c3f2:	bf00      	nop
 800c3f4:	200000f8 	.word	0x200000f8

0800c3f8 <sbrk_aligned>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	4e0e      	ldr	r6, [pc, #56]	; (800c434 <sbrk_aligned+0x3c>)
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	6831      	ldr	r1, [r6, #0]
 800c400:	4605      	mov	r5, r0
 800c402:	b911      	cbnz	r1, 800c40a <sbrk_aligned+0x12>
 800c404:	f000 f91e 	bl	800c644 <_sbrk_r>
 800c408:	6030      	str	r0, [r6, #0]
 800c40a:	4621      	mov	r1, r4
 800c40c:	4628      	mov	r0, r5
 800c40e:	f000 f919 	bl	800c644 <_sbrk_r>
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	d00a      	beq.n	800c42c <sbrk_aligned+0x34>
 800c416:	1cc4      	adds	r4, r0, #3
 800c418:	f024 0403 	bic.w	r4, r4, #3
 800c41c:	42a0      	cmp	r0, r4
 800c41e:	d007      	beq.n	800c430 <sbrk_aligned+0x38>
 800c420:	1a21      	subs	r1, r4, r0
 800c422:	4628      	mov	r0, r5
 800c424:	f000 f90e 	bl	800c644 <_sbrk_r>
 800c428:	3001      	adds	r0, #1
 800c42a:	d101      	bne.n	800c430 <sbrk_aligned+0x38>
 800c42c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c430:	4620      	mov	r0, r4
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	200004ac 	.word	0x200004ac

0800c438 <_malloc_r>:
 800c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c43c:	1ccd      	adds	r5, r1, #3
 800c43e:	f025 0503 	bic.w	r5, r5, #3
 800c442:	3508      	adds	r5, #8
 800c444:	2d0c      	cmp	r5, #12
 800c446:	bf38      	it	cc
 800c448:	250c      	movcc	r5, #12
 800c44a:	2d00      	cmp	r5, #0
 800c44c:	4607      	mov	r7, r0
 800c44e:	db01      	blt.n	800c454 <_malloc_r+0x1c>
 800c450:	42a9      	cmp	r1, r5
 800c452:	d905      	bls.n	800c460 <_malloc_r+0x28>
 800c454:	230c      	movs	r3, #12
 800c456:	2600      	movs	r6, #0
 800c458:	603b      	str	r3, [r7, #0]
 800c45a:	4630      	mov	r0, r6
 800c45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c460:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c534 <_malloc_r+0xfc>
 800c464:	f000 f868 	bl	800c538 <__malloc_lock>
 800c468:	f8d8 3000 	ldr.w	r3, [r8]
 800c46c:	461c      	mov	r4, r3
 800c46e:	bb5c      	cbnz	r4, 800c4c8 <_malloc_r+0x90>
 800c470:	4629      	mov	r1, r5
 800c472:	4638      	mov	r0, r7
 800c474:	f7ff ffc0 	bl	800c3f8 <sbrk_aligned>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	4604      	mov	r4, r0
 800c47c:	d155      	bne.n	800c52a <_malloc_r+0xf2>
 800c47e:	f8d8 4000 	ldr.w	r4, [r8]
 800c482:	4626      	mov	r6, r4
 800c484:	2e00      	cmp	r6, #0
 800c486:	d145      	bne.n	800c514 <_malloc_r+0xdc>
 800c488:	2c00      	cmp	r4, #0
 800c48a:	d048      	beq.n	800c51e <_malloc_r+0xe6>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	4631      	mov	r1, r6
 800c490:	4638      	mov	r0, r7
 800c492:	eb04 0903 	add.w	r9, r4, r3
 800c496:	f000 f8d5 	bl	800c644 <_sbrk_r>
 800c49a:	4581      	cmp	r9, r0
 800c49c:	d13f      	bne.n	800c51e <_malloc_r+0xe6>
 800c49e:	6821      	ldr	r1, [r4, #0]
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	1a6d      	subs	r5, r5, r1
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	f7ff ffa7 	bl	800c3f8 <sbrk_aligned>
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	d037      	beq.n	800c51e <_malloc_r+0xe6>
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	442b      	add	r3, r5
 800c4b2:	6023      	str	r3, [r4, #0]
 800c4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d038      	beq.n	800c52e <_malloc_r+0xf6>
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	42a2      	cmp	r2, r4
 800c4c0:	d12b      	bne.n	800c51a <_malloc_r+0xe2>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	605a      	str	r2, [r3, #4]
 800c4c6:	e00f      	b.n	800c4e8 <_malloc_r+0xb0>
 800c4c8:	6822      	ldr	r2, [r4, #0]
 800c4ca:	1b52      	subs	r2, r2, r5
 800c4cc:	d41f      	bmi.n	800c50e <_malloc_r+0xd6>
 800c4ce:	2a0b      	cmp	r2, #11
 800c4d0:	d917      	bls.n	800c502 <_malloc_r+0xca>
 800c4d2:	1961      	adds	r1, r4, r5
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	6025      	str	r5, [r4, #0]
 800c4d8:	bf18      	it	ne
 800c4da:	6059      	strne	r1, [r3, #4]
 800c4dc:	6863      	ldr	r3, [r4, #4]
 800c4de:	bf08      	it	eq
 800c4e0:	f8c8 1000 	streq.w	r1, [r8]
 800c4e4:	5162      	str	r2, [r4, r5]
 800c4e6:	604b      	str	r3, [r1, #4]
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	f104 060b 	add.w	r6, r4, #11
 800c4ee:	f000 f829 	bl	800c544 <__malloc_unlock>
 800c4f2:	f026 0607 	bic.w	r6, r6, #7
 800c4f6:	1d23      	adds	r3, r4, #4
 800c4f8:	1af2      	subs	r2, r6, r3
 800c4fa:	d0ae      	beq.n	800c45a <_malloc_r+0x22>
 800c4fc:	1b9b      	subs	r3, r3, r6
 800c4fe:	50a3      	str	r3, [r4, r2]
 800c500:	e7ab      	b.n	800c45a <_malloc_r+0x22>
 800c502:	42a3      	cmp	r3, r4
 800c504:	6862      	ldr	r2, [r4, #4]
 800c506:	d1dd      	bne.n	800c4c4 <_malloc_r+0x8c>
 800c508:	f8c8 2000 	str.w	r2, [r8]
 800c50c:	e7ec      	b.n	800c4e8 <_malloc_r+0xb0>
 800c50e:	4623      	mov	r3, r4
 800c510:	6864      	ldr	r4, [r4, #4]
 800c512:	e7ac      	b.n	800c46e <_malloc_r+0x36>
 800c514:	4634      	mov	r4, r6
 800c516:	6876      	ldr	r6, [r6, #4]
 800c518:	e7b4      	b.n	800c484 <_malloc_r+0x4c>
 800c51a:	4613      	mov	r3, r2
 800c51c:	e7cc      	b.n	800c4b8 <_malloc_r+0x80>
 800c51e:	230c      	movs	r3, #12
 800c520:	4638      	mov	r0, r7
 800c522:	603b      	str	r3, [r7, #0]
 800c524:	f000 f80e 	bl	800c544 <__malloc_unlock>
 800c528:	e797      	b.n	800c45a <_malloc_r+0x22>
 800c52a:	6025      	str	r5, [r4, #0]
 800c52c:	e7dc      	b.n	800c4e8 <_malloc_r+0xb0>
 800c52e:	605b      	str	r3, [r3, #4]
 800c530:	deff      	udf	#255	; 0xff
 800c532:	bf00      	nop
 800c534:	200004a8 	.word	0x200004a8

0800c538 <__malloc_lock>:
 800c538:	4801      	ldr	r0, [pc, #4]	; (800c540 <__malloc_lock+0x8>)
 800c53a:	f000 b8bd 	b.w	800c6b8 <__retarget_lock_acquire_recursive>
 800c53e:	bf00      	nop
 800c540:	200005e8 	.word	0x200005e8

0800c544 <__malloc_unlock>:
 800c544:	4801      	ldr	r0, [pc, #4]	; (800c54c <__malloc_unlock+0x8>)
 800c546:	f000 b8b8 	b.w	800c6ba <__retarget_lock_release_recursive>
 800c54a:	bf00      	nop
 800c54c:	200005e8 	.word	0x200005e8

0800c550 <siprintf>:
 800c550:	b40e      	push	{r1, r2, r3}
 800c552:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c556:	b500      	push	{lr}
 800c558:	b09c      	sub	sp, #112	; 0x70
 800c55a:	ab1d      	add	r3, sp, #116	; 0x74
 800c55c:	9002      	str	r0, [sp, #8]
 800c55e:	9006      	str	r0, [sp, #24]
 800c560:	9107      	str	r1, [sp, #28]
 800c562:	9104      	str	r1, [sp, #16]
 800c564:	4808      	ldr	r0, [pc, #32]	; (800c588 <siprintf+0x38>)
 800c566:	4909      	ldr	r1, [pc, #36]	; (800c58c <siprintf+0x3c>)
 800c568:	f853 2b04 	ldr.w	r2, [r3], #4
 800c56c:	9105      	str	r1, [sp, #20]
 800c56e:	6800      	ldr	r0, [r0, #0]
 800c570:	a902      	add	r1, sp, #8
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	f000 f94c 	bl	800c810 <_svfiprintf_r>
 800c578:	2200      	movs	r2, #0
 800c57a:	9b02      	ldr	r3, [sp, #8]
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	b01c      	add	sp, #112	; 0x70
 800c580:	f85d eb04 	ldr.w	lr, [sp], #4
 800c584:	b003      	add	sp, #12
 800c586:	4770      	bx	lr
 800c588:	200000f8 	.word	0x200000f8
 800c58c:	ffff0208 	.word	0xffff0208

0800c590 <__utoa>:
 800c590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c592:	b08b      	sub	sp, #44	; 0x2c
 800c594:	4605      	mov	r5, r0
 800c596:	460b      	mov	r3, r1
 800c598:	466e      	mov	r6, sp
 800c59a:	4c1d      	ldr	r4, [pc, #116]	; (800c610 <__utoa+0x80>)
 800c59c:	f104 0c20 	add.w	ip, r4, #32
 800c5a0:	4637      	mov	r7, r6
 800c5a2:	6820      	ldr	r0, [r4, #0]
 800c5a4:	6861      	ldr	r1, [r4, #4]
 800c5a6:	3408      	adds	r4, #8
 800c5a8:	c703      	stmia	r7!, {r0, r1}
 800c5aa:	4564      	cmp	r4, ip
 800c5ac:	463e      	mov	r6, r7
 800c5ae:	d1f7      	bne.n	800c5a0 <__utoa+0x10>
 800c5b0:	7921      	ldrb	r1, [r4, #4]
 800c5b2:	6820      	ldr	r0, [r4, #0]
 800c5b4:	7139      	strb	r1, [r7, #4]
 800c5b6:	1e91      	subs	r1, r2, #2
 800c5b8:	2922      	cmp	r1, #34	; 0x22
 800c5ba:	6038      	str	r0, [r7, #0]
 800c5bc:	f04f 0100 	mov.w	r1, #0
 800c5c0:	d904      	bls.n	800c5cc <__utoa+0x3c>
 800c5c2:	7019      	strb	r1, [r3, #0]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	b00b      	add	sp, #44	; 0x2c
 800c5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5cc:	1e58      	subs	r0, r3, #1
 800c5ce:	4684      	mov	ip, r0
 800c5d0:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5d4:	fb02 5617 	mls	r6, r2, r7, r5
 800c5d8:	3628      	adds	r6, #40	; 0x28
 800c5da:	446e      	add	r6, sp
 800c5dc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5e6:	462e      	mov	r6, r5
 800c5e8:	42b2      	cmp	r2, r6
 800c5ea:	463d      	mov	r5, r7
 800c5ec:	f101 0101 	add.w	r1, r1, #1
 800c5f0:	d9ee      	bls.n	800c5d0 <__utoa+0x40>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	545a      	strb	r2, [r3, r1]
 800c5f6:	1919      	adds	r1, r3, r4
 800c5f8:	1aa5      	subs	r5, r4, r2
 800c5fa:	42aa      	cmp	r2, r5
 800c5fc:	dae3      	bge.n	800c5c6 <__utoa+0x36>
 800c5fe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c602:	780e      	ldrb	r6, [r1, #0]
 800c604:	3201      	adds	r2, #1
 800c606:	7006      	strb	r6, [r0, #0]
 800c608:	f801 5901 	strb.w	r5, [r1], #-1
 800c60c:	e7f4      	b.n	800c5f8 <__utoa+0x68>
 800c60e:	bf00      	nop
 800c610:	0800ddc2 	.word	0x0800ddc2

0800c614 <strcat>:
 800c614:	4602      	mov	r2, r0
 800c616:	b510      	push	{r4, lr}
 800c618:	7814      	ldrb	r4, [r2, #0]
 800c61a:	4613      	mov	r3, r2
 800c61c:	3201      	adds	r2, #1
 800c61e:	2c00      	cmp	r4, #0
 800c620:	d1fa      	bne.n	800c618 <strcat+0x4>
 800c622:	3b01      	subs	r3, #1
 800c624:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c628:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c62c:	2a00      	cmp	r2, #0
 800c62e:	d1f9      	bne.n	800c624 <strcat+0x10>
 800c630:	bd10      	pop	{r4, pc}

0800c632 <memset>:
 800c632:	4603      	mov	r3, r0
 800c634:	4402      	add	r2, r0
 800c636:	4293      	cmp	r3, r2
 800c638:	d100      	bne.n	800c63c <memset+0xa>
 800c63a:	4770      	bx	lr
 800c63c:	f803 1b01 	strb.w	r1, [r3], #1
 800c640:	e7f9      	b.n	800c636 <memset+0x4>
	...

0800c644 <_sbrk_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	2300      	movs	r3, #0
 800c648:	4d05      	ldr	r5, [pc, #20]	; (800c660 <_sbrk_r+0x1c>)
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	602b      	str	r3, [r5, #0]
 800c650:	f7fc f808 	bl	8008664 <_sbrk>
 800c654:	1c43      	adds	r3, r0, #1
 800c656:	d102      	bne.n	800c65e <_sbrk_r+0x1a>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	b103      	cbz	r3, 800c65e <_sbrk_r+0x1a>
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
 800c660:	200005ec 	.word	0x200005ec

0800c664 <__errno>:
 800c664:	4b01      	ldr	r3, [pc, #4]	; (800c66c <__errno+0x8>)
 800c666:	6818      	ldr	r0, [r3, #0]
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	200000f8 	.word	0x200000f8

0800c670 <__libc_init_array>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	2600      	movs	r6, #0
 800c674:	4d0c      	ldr	r5, [pc, #48]	; (800c6a8 <__libc_init_array+0x38>)
 800c676:	4c0d      	ldr	r4, [pc, #52]	; (800c6ac <__libc_init_array+0x3c>)
 800c678:	1b64      	subs	r4, r4, r5
 800c67a:	10a4      	asrs	r4, r4, #2
 800c67c:	42a6      	cmp	r6, r4
 800c67e:	d109      	bne.n	800c694 <__libc_init_array+0x24>
 800c680:	f000 fbc6 	bl	800ce10 <_init>
 800c684:	2600      	movs	r6, #0
 800c686:	4d0a      	ldr	r5, [pc, #40]	; (800c6b0 <__libc_init_array+0x40>)
 800c688:	4c0a      	ldr	r4, [pc, #40]	; (800c6b4 <__libc_init_array+0x44>)
 800c68a:	1b64      	subs	r4, r4, r5
 800c68c:	10a4      	asrs	r4, r4, #2
 800c68e:	42a6      	cmp	r6, r4
 800c690:	d105      	bne.n	800c69e <__libc_init_array+0x2e>
 800c692:	bd70      	pop	{r4, r5, r6, pc}
 800c694:	f855 3b04 	ldr.w	r3, [r5], #4
 800c698:	4798      	blx	r3
 800c69a:	3601      	adds	r6, #1
 800c69c:	e7ee      	b.n	800c67c <__libc_init_array+0xc>
 800c69e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6a2:	4798      	blx	r3
 800c6a4:	3601      	adds	r6, #1
 800c6a6:	e7f2      	b.n	800c68e <__libc_init_array+0x1e>
 800c6a8:	0800de1c 	.word	0x0800de1c
 800c6ac:	0800de1c 	.word	0x0800de1c
 800c6b0:	0800de1c 	.word	0x0800de1c
 800c6b4:	0800de20 	.word	0x0800de20

0800c6b8 <__retarget_lock_acquire_recursive>:
 800c6b8:	4770      	bx	lr

0800c6ba <__retarget_lock_release_recursive>:
 800c6ba:	4770      	bx	lr

0800c6bc <strcpy>:
 800c6bc:	4603      	mov	r3, r0
 800c6be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6c2:	f803 2b01 	strb.w	r2, [r3], #1
 800c6c6:	2a00      	cmp	r2, #0
 800c6c8:	d1f9      	bne.n	800c6be <strcpy+0x2>
 800c6ca:	4770      	bx	lr

0800c6cc <_free_r>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	2900      	cmp	r1, #0
 800c6d2:	d040      	beq.n	800c756 <_free_r+0x8a>
 800c6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6d8:	1f0c      	subs	r4, r1, #4
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bfb8      	it	lt
 800c6de:	18e4      	addlt	r4, r4, r3
 800c6e0:	f7ff ff2a 	bl	800c538 <__malloc_lock>
 800c6e4:	4a1c      	ldr	r2, [pc, #112]	; (800c758 <_free_r+0x8c>)
 800c6e6:	6813      	ldr	r3, [r2, #0]
 800c6e8:	b933      	cbnz	r3, 800c6f8 <_free_r+0x2c>
 800c6ea:	6063      	str	r3, [r4, #4]
 800c6ec:	6014      	str	r4, [r2, #0]
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6f4:	f7ff bf26 	b.w	800c544 <__malloc_unlock>
 800c6f8:	42a3      	cmp	r3, r4
 800c6fa:	d908      	bls.n	800c70e <_free_r+0x42>
 800c6fc:	6820      	ldr	r0, [r4, #0]
 800c6fe:	1821      	adds	r1, r4, r0
 800c700:	428b      	cmp	r3, r1
 800c702:	bf01      	itttt	eq
 800c704:	6819      	ldreq	r1, [r3, #0]
 800c706:	685b      	ldreq	r3, [r3, #4]
 800c708:	1809      	addeq	r1, r1, r0
 800c70a:	6021      	streq	r1, [r4, #0]
 800c70c:	e7ed      	b.n	800c6ea <_free_r+0x1e>
 800c70e:	461a      	mov	r2, r3
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	b10b      	cbz	r3, 800c718 <_free_r+0x4c>
 800c714:	42a3      	cmp	r3, r4
 800c716:	d9fa      	bls.n	800c70e <_free_r+0x42>
 800c718:	6811      	ldr	r1, [r2, #0]
 800c71a:	1850      	adds	r0, r2, r1
 800c71c:	42a0      	cmp	r0, r4
 800c71e:	d10b      	bne.n	800c738 <_free_r+0x6c>
 800c720:	6820      	ldr	r0, [r4, #0]
 800c722:	4401      	add	r1, r0
 800c724:	1850      	adds	r0, r2, r1
 800c726:	4283      	cmp	r3, r0
 800c728:	6011      	str	r1, [r2, #0]
 800c72a:	d1e0      	bne.n	800c6ee <_free_r+0x22>
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	4408      	add	r0, r1
 800c732:	6010      	str	r0, [r2, #0]
 800c734:	6053      	str	r3, [r2, #4]
 800c736:	e7da      	b.n	800c6ee <_free_r+0x22>
 800c738:	d902      	bls.n	800c740 <_free_r+0x74>
 800c73a:	230c      	movs	r3, #12
 800c73c:	602b      	str	r3, [r5, #0]
 800c73e:	e7d6      	b.n	800c6ee <_free_r+0x22>
 800c740:	6820      	ldr	r0, [r4, #0]
 800c742:	1821      	adds	r1, r4, r0
 800c744:	428b      	cmp	r3, r1
 800c746:	bf01      	itttt	eq
 800c748:	6819      	ldreq	r1, [r3, #0]
 800c74a:	685b      	ldreq	r3, [r3, #4]
 800c74c:	1809      	addeq	r1, r1, r0
 800c74e:	6021      	streq	r1, [r4, #0]
 800c750:	6063      	str	r3, [r4, #4]
 800c752:	6054      	str	r4, [r2, #4]
 800c754:	e7cb      	b.n	800c6ee <_free_r+0x22>
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	200004a8 	.word	0x200004a8

0800c75c <__ssputs_r>:
 800c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c760:	461f      	mov	r7, r3
 800c762:	688e      	ldr	r6, [r1, #8]
 800c764:	4682      	mov	sl, r0
 800c766:	42be      	cmp	r6, r7
 800c768:	460c      	mov	r4, r1
 800c76a:	4690      	mov	r8, r2
 800c76c:	680b      	ldr	r3, [r1, #0]
 800c76e:	d82c      	bhi.n	800c7ca <__ssputs_r+0x6e>
 800c770:	898a      	ldrh	r2, [r1, #12]
 800c772:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c776:	d026      	beq.n	800c7c6 <__ssputs_r+0x6a>
 800c778:	6965      	ldr	r5, [r4, #20]
 800c77a:	6909      	ldr	r1, [r1, #16]
 800c77c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c780:	eba3 0901 	sub.w	r9, r3, r1
 800c784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c788:	1c7b      	adds	r3, r7, #1
 800c78a:	444b      	add	r3, r9
 800c78c:	106d      	asrs	r5, r5, #1
 800c78e:	429d      	cmp	r5, r3
 800c790:	bf38      	it	cc
 800c792:	461d      	movcc	r5, r3
 800c794:	0553      	lsls	r3, r2, #21
 800c796:	d527      	bpl.n	800c7e8 <__ssputs_r+0x8c>
 800c798:	4629      	mov	r1, r5
 800c79a:	f7ff fe4d 	bl	800c438 <_malloc_r>
 800c79e:	4606      	mov	r6, r0
 800c7a0:	b360      	cbz	r0, 800c7fc <__ssputs_r+0xa0>
 800c7a2:	464a      	mov	r2, r9
 800c7a4:	6921      	ldr	r1, [r4, #16]
 800c7a6:	f000 fb1c 	bl	800cde2 <memcpy>
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7b4:	81a3      	strh	r3, [r4, #12]
 800c7b6:	6126      	str	r6, [r4, #16]
 800c7b8:	444e      	add	r6, r9
 800c7ba:	6026      	str	r6, [r4, #0]
 800c7bc:	463e      	mov	r6, r7
 800c7be:	6165      	str	r5, [r4, #20]
 800c7c0:	eba5 0509 	sub.w	r5, r5, r9
 800c7c4:	60a5      	str	r5, [r4, #8]
 800c7c6:	42be      	cmp	r6, r7
 800c7c8:	d900      	bls.n	800c7cc <__ssputs_r+0x70>
 800c7ca:	463e      	mov	r6, r7
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	4641      	mov	r1, r8
 800c7d0:	6820      	ldr	r0, [r4, #0]
 800c7d2:	f000 fade 	bl	800cd92 <memmove>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	68a3      	ldr	r3, [r4, #8]
 800c7da:	1b9b      	subs	r3, r3, r6
 800c7dc:	60a3      	str	r3, [r4, #8]
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	4433      	add	r3, r6
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	f000 faa3 	bl	800cd34 <_realloc_r>
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d1e0      	bne.n	800c7b6 <__ssputs_r+0x5a>
 800c7f4:	4650      	mov	r0, sl
 800c7f6:	6921      	ldr	r1, [r4, #16]
 800c7f8:	f7ff ff68 	bl	800c6cc <_free_r>
 800c7fc:	230c      	movs	r3, #12
 800c7fe:	f8ca 3000 	str.w	r3, [sl]
 800c802:	89a3      	ldrh	r3, [r4, #12]
 800c804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c80c:	81a3      	strh	r3, [r4, #12]
 800c80e:	e7e9      	b.n	800c7e4 <__ssputs_r+0x88>

0800c810 <_svfiprintf_r>:
 800c810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c814:	4698      	mov	r8, r3
 800c816:	898b      	ldrh	r3, [r1, #12]
 800c818:	4607      	mov	r7, r0
 800c81a:	061b      	lsls	r3, r3, #24
 800c81c:	460d      	mov	r5, r1
 800c81e:	4614      	mov	r4, r2
 800c820:	b09d      	sub	sp, #116	; 0x74
 800c822:	d50e      	bpl.n	800c842 <_svfiprintf_r+0x32>
 800c824:	690b      	ldr	r3, [r1, #16]
 800c826:	b963      	cbnz	r3, 800c842 <_svfiprintf_r+0x32>
 800c828:	2140      	movs	r1, #64	; 0x40
 800c82a:	f7ff fe05 	bl	800c438 <_malloc_r>
 800c82e:	6028      	str	r0, [r5, #0]
 800c830:	6128      	str	r0, [r5, #16]
 800c832:	b920      	cbnz	r0, 800c83e <_svfiprintf_r+0x2e>
 800c834:	230c      	movs	r3, #12
 800c836:	603b      	str	r3, [r7, #0]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c83c:	e0d0      	b.n	800c9e0 <_svfiprintf_r+0x1d0>
 800c83e:	2340      	movs	r3, #64	; 0x40
 800c840:	616b      	str	r3, [r5, #20]
 800c842:	2300      	movs	r3, #0
 800c844:	9309      	str	r3, [sp, #36]	; 0x24
 800c846:	2320      	movs	r3, #32
 800c848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c84c:	2330      	movs	r3, #48	; 0x30
 800c84e:	f04f 0901 	mov.w	r9, #1
 800c852:	f8cd 800c 	str.w	r8, [sp, #12]
 800c856:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9f8 <_svfiprintf_r+0x1e8>
 800c85a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c85e:	4623      	mov	r3, r4
 800c860:	469a      	mov	sl, r3
 800c862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c866:	b10a      	cbz	r2, 800c86c <_svfiprintf_r+0x5c>
 800c868:	2a25      	cmp	r2, #37	; 0x25
 800c86a:	d1f9      	bne.n	800c860 <_svfiprintf_r+0x50>
 800c86c:	ebba 0b04 	subs.w	fp, sl, r4
 800c870:	d00b      	beq.n	800c88a <_svfiprintf_r+0x7a>
 800c872:	465b      	mov	r3, fp
 800c874:	4622      	mov	r2, r4
 800c876:	4629      	mov	r1, r5
 800c878:	4638      	mov	r0, r7
 800c87a:	f7ff ff6f 	bl	800c75c <__ssputs_r>
 800c87e:	3001      	adds	r0, #1
 800c880:	f000 80a9 	beq.w	800c9d6 <_svfiprintf_r+0x1c6>
 800c884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c886:	445a      	add	r2, fp
 800c888:	9209      	str	r2, [sp, #36]	; 0x24
 800c88a:	f89a 3000 	ldrb.w	r3, [sl]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f000 80a1 	beq.w	800c9d6 <_svfiprintf_r+0x1c6>
 800c894:	2300      	movs	r3, #0
 800c896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c89a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c89e:	f10a 0a01 	add.w	sl, sl, #1
 800c8a2:	9304      	str	r3, [sp, #16]
 800c8a4:	9307      	str	r3, [sp, #28]
 800c8a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c8ac:	4654      	mov	r4, sl
 800c8ae:	2205      	movs	r2, #5
 800c8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b4:	4850      	ldr	r0, [pc, #320]	; (800c9f8 <_svfiprintf_r+0x1e8>)
 800c8b6:	f000 fa86 	bl	800cdc6 <memchr>
 800c8ba:	9a04      	ldr	r2, [sp, #16]
 800c8bc:	b9d8      	cbnz	r0, 800c8f6 <_svfiprintf_r+0xe6>
 800c8be:	06d0      	lsls	r0, r2, #27
 800c8c0:	bf44      	itt	mi
 800c8c2:	2320      	movmi	r3, #32
 800c8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8c8:	0711      	lsls	r1, r2, #28
 800c8ca:	bf44      	itt	mi
 800c8cc:	232b      	movmi	r3, #43	; 0x2b
 800c8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d8:	d015      	beq.n	800c906 <_svfiprintf_r+0xf6>
 800c8da:	4654      	mov	r4, sl
 800c8dc:	2000      	movs	r0, #0
 800c8de:	f04f 0c0a 	mov.w	ip, #10
 800c8e2:	9a07      	ldr	r2, [sp, #28]
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ea:	3b30      	subs	r3, #48	; 0x30
 800c8ec:	2b09      	cmp	r3, #9
 800c8ee:	d94d      	bls.n	800c98c <_svfiprintf_r+0x17c>
 800c8f0:	b1b0      	cbz	r0, 800c920 <_svfiprintf_r+0x110>
 800c8f2:	9207      	str	r2, [sp, #28]
 800c8f4:	e014      	b.n	800c920 <_svfiprintf_r+0x110>
 800c8f6:	eba0 0308 	sub.w	r3, r0, r8
 800c8fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c8fe:	4313      	orrs	r3, r2
 800c900:	46a2      	mov	sl, r4
 800c902:	9304      	str	r3, [sp, #16]
 800c904:	e7d2      	b.n	800c8ac <_svfiprintf_r+0x9c>
 800c906:	9b03      	ldr	r3, [sp, #12]
 800c908:	1d19      	adds	r1, r3, #4
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	9103      	str	r1, [sp, #12]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bfbb      	ittet	lt
 800c912:	425b      	neglt	r3, r3
 800c914:	f042 0202 	orrlt.w	r2, r2, #2
 800c918:	9307      	strge	r3, [sp, #28]
 800c91a:	9307      	strlt	r3, [sp, #28]
 800c91c:	bfb8      	it	lt
 800c91e:	9204      	strlt	r2, [sp, #16]
 800c920:	7823      	ldrb	r3, [r4, #0]
 800c922:	2b2e      	cmp	r3, #46	; 0x2e
 800c924:	d10c      	bne.n	800c940 <_svfiprintf_r+0x130>
 800c926:	7863      	ldrb	r3, [r4, #1]
 800c928:	2b2a      	cmp	r3, #42	; 0x2a
 800c92a:	d134      	bne.n	800c996 <_svfiprintf_r+0x186>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	3402      	adds	r4, #2
 800c930:	1d1a      	adds	r2, r3, #4
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	9203      	str	r2, [sp, #12]
 800c936:	2b00      	cmp	r3, #0
 800c938:	bfb8      	it	lt
 800c93a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c93e:	9305      	str	r3, [sp, #20]
 800c940:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c9fc <_svfiprintf_r+0x1ec>
 800c944:	2203      	movs	r2, #3
 800c946:	4650      	mov	r0, sl
 800c948:	7821      	ldrb	r1, [r4, #0]
 800c94a:	f000 fa3c 	bl	800cdc6 <memchr>
 800c94e:	b138      	cbz	r0, 800c960 <_svfiprintf_r+0x150>
 800c950:	2240      	movs	r2, #64	; 0x40
 800c952:	9b04      	ldr	r3, [sp, #16]
 800c954:	eba0 000a 	sub.w	r0, r0, sl
 800c958:	4082      	lsls	r2, r0
 800c95a:	4313      	orrs	r3, r2
 800c95c:	3401      	adds	r4, #1
 800c95e:	9304      	str	r3, [sp, #16]
 800c960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c964:	2206      	movs	r2, #6
 800c966:	4826      	ldr	r0, [pc, #152]	; (800ca00 <_svfiprintf_r+0x1f0>)
 800c968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c96c:	f000 fa2b 	bl	800cdc6 <memchr>
 800c970:	2800      	cmp	r0, #0
 800c972:	d038      	beq.n	800c9e6 <_svfiprintf_r+0x1d6>
 800c974:	4b23      	ldr	r3, [pc, #140]	; (800ca04 <_svfiprintf_r+0x1f4>)
 800c976:	bb1b      	cbnz	r3, 800c9c0 <_svfiprintf_r+0x1b0>
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	3307      	adds	r3, #7
 800c97c:	f023 0307 	bic.w	r3, r3, #7
 800c980:	3308      	adds	r3, #8
 800c982:	9303      	str	r3, [sp, #12]
 800c984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c986:	4433      	add	r3, r6
 800c988:	9309      	str	r3, [sp, #36]	; 0x24
 800c98a:	e768      	b.n	800c85e <_svfiprintf_r+0x4e>
 800c98c:	460c      	mov	r4, r1
 800c98e:	2001      	movs	r0, #1
 800c990:	fb0c 3202 	mla	r2, ip, r2, r3
 800c994:	e7a6      	b.n	800c8e4 <_svfiprintf_r+0xd4>
 800c996:	2300      	movs	r3, #0
 800c998:	f04f 0c0a 	mov.w	ip, #10
 800c99c:	4619      	mov	r1, r3
 800c99e:	3401      	adds	r4, #1
 800c9a0:	9305      	str	r3, [sp, #20]
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a8:	3a30      	subs	r2, #48	; 0x30
 800c9aa:	2a09      	cmp	r2, #9
 800c9ac:	d903      	bls.n	800c9b6 <_svfiprintf_r+0x1a6>
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0c6      	beq.n	800c940 <_svfiprintf_r+0x130>
 800c9b2:	9105      	str	r1, [sp, #20]
 800c9b4:	e7c4      	b.n	800c940 <_svfiprintf_r+0x130>
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9be:	e7f0      	b.n	800c9a2 <_svfiprintf_r+0x192>
 800c9c0:	ab03      	add	r3, sp, #12
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	462a      	mov	r2, r5
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <_svfiprintf_r+0x1f8>)
 800c9ca:	a904      	add	r1, sp, #16
 800c9cc:	f3af 8000 	nop.w
 800c9d0:	1c42      	adds	r2, r0, #1
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	d1d6      	bne.n	800c984 <_svfiprintf_r+0x174>
 800c9d6:	89ab      	ldrh	r3, [r5, #12]
 800c9d8:	065b      	lsls	r3, r3, #25
 800c9da:	f53f af2d 	bmi.w	800c838 <_svfiprintf_r+0x28>
 800c9de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9e0:	b01d      	add	sp, #116	; 0x74
 800c9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e6:	ab03      	add	r3, sp, #12
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	462a      	mov	r2, r5
 800c9ec:	4638      	mov	r0, r7
 800c9ee:	4b06      	ldr	r3, [pc, #24]	; (800ca08 <_svfiprintf_r+0x1f8>)
 800c9f0:	a904      	add	r1, sp, #16
 800c9f2:	f000 f87d 	bl	800caf0 <_printf_i>
 800c9f6:	e7eb      	b.n	800c9d0 <_svfiprintf_r+0x1c0>
 800c9f8:	0800dde7 	.word	0x0800dde7
 800c9fc:	0800dded 	.word	0x0800dded
 800ca00:	0800ddf1 	.word	0x0800ddf1
 800ca04:	00000000 	.word	0x00000000
 800ca08:	0800c75d 	.word	0x0800c75d

0800ca0c <_printf_common>:
 800ca0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca10:	4616      	mov	r6, r2
 800ca12:	4699      	mov	r9, r3
 800ca14:	688a      	ldr	r2, [r1, #8]
 800ca16:	690b      	ldr	r3, [r1, #16]
 800ca18:	4607      	mov	r7, r0
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	bfb8      	it	lt
 800ca1e:	4613      	movlt	r3, r2
 800ca20:	6033      	str	r3, [r6, #0]
 800ca22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca26:	460c      	mov	r4, r1
 800ca28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca2c:	b10a      	cbz	r2, 800ca32 <_printf_common+0x26>
 800ca2e:	3301      	adds	r3, #1
 800ca30:	6033      	str	r3, [r6, #0]
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	0699      	lsls	r1, r3, #26
 800ca36:	bf42      	ittt	mi
 800ca38:	6833      	ldrmi	r3, [r6, #0]
 800ca3a:	3302      	addmi	r3, #2
 800ca3c:	6033      	strmi	r3, [r6, #0]
 800ca3e:	6825      	ldr	r5, [r4, #0]
 800ca40:	f015 0506 	ands.w	r5, r5, #6
 800ca44:	d106      	bne.n	800ca54 <_printf_common+0x48>
 800ca46:	f104 0a19 	add.w	sl, r4, #25
 800ca4a:	68e3      	ldr	r3, [r4, #12]
 800ca4c:	6832      	ldr	r2, [r6, #0]
 800ca4e:	1a9b      	subs	r3, r3, r2
 800ca50:	42ab      	cmp	r3, r5
 800ca52:	dc2b      	bgt.n	800caac <_printf_common+0xa0>
 800ca54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca58:	1e13      	subs	r3, r2, #0
 800ca5a:	6822      	ldr	r2, [r4, #0]
 800ca5c:	bf18      	it	ne
 800ca5e:	2301      	movne	r3, #1
 800ca60:	0692      	lsls	r2, r2, #26
 800ca62:	d430      	bmi.n	800cac6 <_printf_common+0xba>
 800ca64:	4649      	mov	r1, r9
 800ca66:	4638      	mov	r0, r7
 800ca68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca6c:	47c0      	blx	r8
 800ca6e:	3001      	adds	r0, #1
 800ca70:	d023      	beq.n	800caba <_printf_common+0xae>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	6922      	ldr	r2, [r4, #16]
 800ca76:	f003 0306 	and.w	r3, r3, #6
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	bf14      	ite	ne
 800ca7e:	2500      	movne	r5, #0
 800ca80:	6833      	ldreq	r3, [r6, #0]
 800ca82:	f04f 0600 	mov.w	r6, #0
 800ca86:	bf08      	it	eq
 800ca88:	68e5      	ldreq	r5, [r4, #12]
 800ca8a:	f104 041a 	add.w	r4, r4, #26
 800ca8e:	bf08      	it	eq
 800ca90:	1aed      	subeq	r5, r5, r3
 800ca92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca96:	bf08      	it	eq
 800ca98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	bfc4      	itt	gt
 800caa0:	1a9b      	subgt	r3, r3, r2
 800caa2:	18ed      	addgt	r5, r5, r3
 800caa4:	42b5      	cmp	r5, r6
 800caa6:	d11a      	bne.n	800cade <_printf_common+0xd2>
 800caa8:	2000      	movs	r0, #0
 800caaa:	e008      	b.n	800cabe <_printf_common+0xb2>
 800caac:	2301      	movs	r3, #1
 800caae:	4652      	mov	r2, sl
 800cab0:	4649      	mov	r1, r9
 800cab2:	4638      	mov	r0, r7
 800cab4:	47c0      	blx	r8
 800cab6:	3001      	adds	r0, #1
 800cab8:	d103      	bne.n	800cac2 <_printf_common+0xb6>
 800caba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac2:	3501      	adds	r5, #1
 800cac4:	e7c1      	b.n	800ca4a <_printf_common+0x3e>
 800cac6:	2030      	movs	r0, #48	; 0x30
 800cac8:	18e1      	adds	r1, r4, r3
 800caca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cace:	1c5a      	adds	r2, r3, #1
 800cad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cad4:	4422      	add	r2, r4
 800cad6:	3302      	adds	r3, #2
 800cad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cadc:	e7c2      	b.n	800ca64 <_printf_common+0x58>
 800cade:	2301      	movs	r3, #1
 800cae0:	4622      	mov	r2, r4
 800cae2:	4649      	mov	r1, r9
 800cae4:	4638      	mov	r0, r7
 800cae6:	47c0      	blx	r8
 800cae8:	3001      	adds	r0, #1
 800caea:	d0e6      	beq.n	800caba <_printf_common+0xae>
 800caec:	3601      	adds	r6, #1
 800caee:	e7d9      	b.n	800caa4 <_printf_common+0x98>

0800caf0 <_printf_i>:
 800caf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf4:	7e0f      	ldrb	r7, [r1, #24]
 800caf6:	4691      	mov	r9, r2
 800caf8:	2f78      	cmp	r7, #120	; 0x78
 800cafa:	4680      	mov	r8, r0
 800cafc:	460c      	mov	r4, r1
 800cafe:	469a      	mov	sl, r3
 800cb00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb06:	d807      	bhi.n	800cb18 <_printf_i+0x28>
 800cb08:	2f62      	cmp	r7, #98	; 0x62
 800cb0a:	d80a      	bhi.n	800cb22 <_printf_i+0x32>
 800cb0c:	2f00      	cmp	r7, #0
 800cb0e:	f000 80d5 	beq.w	800ccbc <_printf_i+0x1cc>
 800cb12:	2f58      	cmp	r7, #88	; 0x58
 800cb14:	f000 80c1 	beq.w	800cc9a <_printf_i+0x1aa>
 800cb18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb20:	e03a      	b.n	800cb98 <_printf_i+0xa8>
 800cb22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb26:	2b15      	cmp	r3, #21
 800cb28:	d8f6      	bhi.n	800cb18 <_printf_i+0x28>
 800cb2a:	a101      	add	r1, pc, #4	; (adr r1, 800cb30 <_printf_i+0x40>)
 800cb2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb30:	0800cb89 	.word	0x0800cb89
 800cb34:	0800cb9d 	.word	0x0800cb9d
 800cb38:	0800cb19 	.word	0x0800cb19
 800cb3c:	0800cb19 	.word	0x0800cb19
 800cb40:	0800cb19 	.word	0x0800cb19
 800cb44:	0800cb19 	.word	0x0800cb19
 800cb48:	0800cb9d 	.word	0x0800cb9d
 800cb4c:	0800cb19 	.word	0x0800cb19
 800cb50:	0800cb19 	.word	0x0800cb19
 800cb54:	0800cb19 	.word	0x0800cb19
 800cb58:	0800cb19 	.word	0x0800cb19
 800cb5c:	0800cca3 	.word	0x0800cca3
 800cb60:	0800cbc9 	.word	0x0800cbc9
 800cb64:	0800cc5d 	.word	0x0800cc5d
 800cb68:	0800cb19 	.word	0x0800cb19
 800cb6c:	0800cb19 	.word	0x0800cb19
 800cb70:	0800ccc5 	.word	0x0800ccc5
 800cb74:	0800cb19 	.word	0x0800cb19
 800cb78:	0800cbc9 	.word	0x0800cbc9
 800cb7c:	0800cb19 	.word	0x0800cb19
 800cb80:	0800cb19 	.word	0x0800cb19
 800cb84:	0800cc65 	.word	0x0800cc65
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	1d1a      	adds	r2, r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	602a      	str	r2, [r5, #0]
 800cb90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e0a0      	b.n	800ccde <_printf_i+0x1ee>
 800cb9c:	6820      	ldr	r0, [r4, #0]
 800cb9e:	682b      	ldr	r3, [r5, #0]
 800cba0:	0607      	lsls	r7, r0, #24
 800cba2:	f103 0104 	add.w	r1, r3, #4
 800cba6:	6029      	str	r1, [r5, #0]
 800cba8:	d501      	bpl.n	800cbae <_printf_i+0xbe>
 800cbaa:	681e      	ldr	r6, [r3, #0]
 800cbac:	e003      	b.n	800cbb6 <_printf_i+0xc6>
 800cbae:	0646      	lsls	r6, r0, #25
 800cbb0:	d5fb      	bpl.n	800cbaa <_printf_i+0xba>
 800cbb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cbb6:	2e00      	cmp	r6, #0
 800cbb8:	da03      	bge.n	800cbc2 <_printf_i+0xd2>
 800cbba:	232d      	movs	r3, #45	; 0x2d
 800cbbc:	4276      	negs	r6, r6
 800cbbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbc2:	230a      	movs	r3, #10
 800cbc4:	4859      	ldr	r0, [pc, #356]	; (800cd2c <_printf_i+0x23c>)
 800cbc6:	e012      	b.n	800cbee <_printf_i+0xfe>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	6820      	ldr	r0, [r4, #0]
 800cbcc:	1d19      	adds	r1, r3, #4
 800cbce:	6029      	str	r1, [r5, #0]
 800cbd0:	0605      	lsls	r5, r0, #24
 800cbd2:	d501      	bpl.n	800cbd8 <_printf_i+0xe8>
 800cbd4:	681e      	ldr	r6, [r3, #0]
 800cbd6:	e002      	b.n	800cbde <_printf_i+0xee>
 800cbd8:	0641      	lsls	r1, r0, #25
 800cbda:	d5fb      	bpl.n	800cbd4 <_printf_i+0xe4>
 800cbdc:	881e      	ldrh	r6, [r3, #0]
 800cbde:	2f6f      	cmp	r7, #111	; 0x6f
 800cbe0:	bf0c      	ite	eq
 800cbe2:	2308      	moveq	r3, #8
 800cbe4:	230a      	movne	r3, #10
 800cbe6:	4851      	ldr	r0, [pc, #324]	; (800cd2c <_printf_i+0x23c>)
 800cbe8:	2100      	movs	r1, #0
 800cbea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbee:	6865      	ldr	r5, [r4, #4]
 800cbf0:	2d00      	cmp	r5, #0
 800cbf2:	bfa8      	it	ge
 800cbf4:	6821      	ldrge	r1, [r4, #0]
 800cbf6:	60a5      	str	r5, [r4, #8]
 800cbf8:	bfa4      	itt	ge
 800cbfa:	f021 0104 	bicge.w	r1, r1, #4
 800cbfe:	6021      	strge	r1, [r4, #0]
 800cc00:	b90e      	cbnz	r6, 800cc06 <_printf_i+0x116>
 800cc02:	2d00      	cmp	r5, #0
 800cc04:	d04b      	beq.n	800cc9e <_printf_i+0x1ae>
 800cc06:	4615      	mov	r5, r2
 800cc08:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc0c:	fb03 6711 	mls	r7, r3, r1, r6
 800cc10:	5dc7      	ldrb	r7, [r0, r7]
 800cc12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc16:	4637      	mov	r7, r6
 800cc18:	42bb      	cmp	r3, r7
 800cc1a:	460e      	mov	r6, r1
 800cc1c:	d9f4      	bls.n	800cc08 <_printf_i+0x118>
 800cc1e:	2b08      	cmp	r3, #8
 800cc20:	d10b      	bne.n	800cc3a <_printf_i+0x14a>
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	07de      	lsls	r6, r3, #31
 800cc26:	d508      	bpl.n	800cc3a <_printf_i+0x14a>
 800cc28:	6923      	ldr	r3, [r4, #16]
 800cc2a:	6861      	ldr	r1, [r4, #4]
 800cc2c:	4299      	cmp	r1, r3
 800cc2e:	bfde      	ittt	le
 800cc30:	2330      	movle	r3, #48	; 0x30
 800cc32:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc3a:	1b52      	subs	r2, r2, r5
 800cc3c:	6122      	str	r2, [r4, #16]
 800cc3e:	464b      	mov	r3, r9
 800cc40:	4621      	mov	r1, r4
 800cc42:	4640      	mov	r0, r8
 800cc44:	f8cd a000 	str.w	sl, [sp]
 800cc48:	aa03      	add	r2, sp, #12
 800cc4a:	f7ff fedf 	bl	800ca0c <_printf_common>
 800cc4e:	3001      	adds	r0, #1
 800cc50:	d14a      	bne.n	800cce8 <_printf_i+0x1f8>
 800cc52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc56:	b004      	add	sp, #16
 800cc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	f043 0320 	orr.w	r3, r3, #32
 800cc62:	6023      	str	r3, [r4, #0]
 800cc64:	2778      	movs	r7, #120	; 0x78
 800cc66:	4832      	ldr	r0, [pc, #200]	; (800cd30 <_printf_i+0x240>)
 800cc68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	6829      	ldr	r1, [r5, #0]
 800cc70:	061f      	lsls	r7, r3, #24
 800cc72:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc76:	d402      	bmi.n	800cc7e <_printf_i+0x18e>
 800cc78:	065f      	lsls	r7, r3, #25
 800cc7a:	bf48      	it	mi
 800cc7c:	b2b6      	uxthmi	r6, r6
 800cc7e:	07df      	lsls	r7, r3, #31
 800cc80:	bf48      	it	mi
 800cc82:	f043 0320 	orrmi.w	r3, r3, #32
 800cc86:	6029      	str	r1, [r5, #0]
 800cc88:	bf48      	it	mi
 800cc8a:	6023      	strmi	r3, [r4, #0]
 800cc8c:	b91e      	cbnz	r6, 800cc96 <_printf_i+0x1a6>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	f023 0320 	bic.w	r3, r3, #32
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	2310      	movs	r3, #16
 800cc98:	e7a6      	b.n	800cbe8 <_printf_i+0xf8>
 800cc9a:	4824      	ldr	r0, [pc, #144]	; (800cd2c <_printf_i+0x23c>)
 800cc9c:	e7e4      	b.n	800cc68 <_printf_i+0x178>
 800cc9e:	4615      	mov	r5, r2
 800cca0:	e7bd      	b.n	800cc1e <_printf_i+0x12e>
 800cca2:	682b      	ldr	r3, [r5, #0]
 800cca4:	6826      	ldr	r6, [r4, #0]
 800cca6:	1d18      	adds	r0, r3, #4
 800cca8:	6961      	ldr	r1, [r4, #20]
 800ccaa:	6028      	str	r0, [r5, #0]
 800ccac:	0635      	lsls	r5, r6, #24
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	d501      	bpl.n	800ccb6 <_printf_i+0x1c6>
 800ccb2:	6019      	str	r1, [r3, #0]
 800ccb4:	e002      	b.n	800ccbc <_printf_i+0x1cc>
 800ccb6:	0670      	lsls	r0, r6, #25
 800ccb8:	d5fb      	bpl.n	800ccb2 <_printf_i+0x1c2>
 800ccba:	8019      	strh	r1, [r3, #0]
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4615      	mov	r5, r2
 800ccc0:	6123      	str	r3, [r4, #16]
 800ccc2:	e7bc      	b.n	800cc3e <_printf_i+0x14e>
 800ccc4:	682b      	ldr	r3, [r5, #0]
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	1d1a      	adds	r2, r3, #4
 800ccca:	602a      	str	r2, [r5, #0]
 800cccc:	681d      	ldr	r5, [r3, #0]
 800ccce:	6862      	ldr	r2, [r4, #4]
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	f000 f878 	bl	800cdc6 <memchr>
 800ccd6:	b108      	cbz	r0, 800ccdc <_printf_i+0x1ec>
 800ccd8:	1b40      	subs	r0, r0, r5
 800ccda:	6060      	str	r0, [r4, #4]
 800ccdc:	6863      	ldr	r3, [r4, #4]
 800ccde:	6123      	str	r3, [r4, #16]
 800cce0:	2300      	movs	r3, #0
 800cce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cce6:	e7aa      	b.n	800cc3e <_printf_i+0x14e>
 800cce8:	462a      	mov	r2, r5
 800ccea:	4649      	mov	r1, r9
 800ccec:	4640      	mov	r0, r8
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	47d0      	blx	sl
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d0ad      	beq.n	800cc52 <_printf_i+0x162>
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	079b      	lsls	r3, r3, #30
 800ccfa:	d413      	bmi.n	800cd24 <_printf_i+0x234>
 800ccfc:	68e0      	ldr	r0, [r4, #12]
 800ccfe:	9b03      	ldr	r3, [sp, #12]
 800cd00:	4298      	cmp	r0, r3
 800cd02:	bfb8      	it	lt
 800cd04:	4618      	movlt	r0, r3
 800cd06:	e7a6      	b.n	800cc56 <_printf_i+0x166>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	4632      	mov	r2, r6
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	4640      	mov	r0, r8
 800cd10:	47d0      	blx	sl
 800cd12:	3001      	adds	r0, #1
 800cd14:	d09d      	beq.n	800cc52 <_printf_i+0x162>
 800cd16:	3501      	adds	r5, #1
 800cd18:	68e3      	ldr	r3, [r4, #12]
 800cd1a:	9903      	ldr	r1, [sp, #12]
 800cd1c:	1a5b      	subs	r3, r3, r1
 800cd1e:	42ab      	cmp	r3, r5
 800cd20:	dcf2      	bgt.n	800cd08 <_printf_i+0x218>
 800cd22:	e7eb      	b.n	800ccfc <_printf_i+0x20c>
 800cd24:	2500      	movs	r5, #0
 800cd26:	f104 0619 	add.w	r6, r4, #25
 800cd2a:	e7f5      	b.n	800cd18 <_printf_i+0x228>
 800cd2c:	0800ddf8 	.word	0x0800ddf8
 800cd30:	0800de09 	.word	0x0800de09

0800cd34 <_realloc_r>:
 800cd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd38:	4680      	mov	r8, r0
 800cd3a:	4614      	mov	r4, r2
 800cd3c:	460e      	mov	r6, r1
 800cd3e:	b921      	cbnz	r1, 800cd4a <_realloc_r+0x16>
 800cd40:	4611      	mov	r1, r2
 800cd42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd46:	f7ff bb77 	b.w	800c438 <_malloc_r>
 800cd4a:	b92a      	cbnz	r2, 800cd58 <_realloc_r+0x24>
 800cd4c:	f7ff fcbe 	bl	800c6cc <_free_r>
 800cd50:	4625      	mov	r5, r4
 800cd52:	4628      	mov	r0, r5
 800cd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd58:	f000 f851 	bl	800cdfe <_malloc_usable_size_r>
 800cd5c:	4284      	cmp	r4, r0
 800cd5e:	4607      	mov	r7, r0
 800cd60:	d802      	bhi.n	800cd68 <_realloc_r+0x34>
 800cd62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd66:	d812      	bhi.n	800cd8e <_realloc_r+0x5a>
 800cd68:	4621      	mov	r1, r4
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	f7ff fb64 	bl	800c438 <_malloc_r>
 800cd70:	4605      	mov	r5, r0
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d0ed      	beq.n	800cd52 <_realloc_r+0x1e>
 800cd76:	42bc      	cmp	r4, r7
 800cd78:	4622      	mov	r2, r4
 800cd7a:	4631      	mov	r1, r6
 800cd7c:	bf28      	it	cs
 800cd7e:	463a      	movcs	r2, r7
 800cd80:	f000 f82f 	bl	800cde2 <memcpy>
 800cd84:	4631      	mov	r1, r6
 800cd86:	4640      	mov	r0, r8
 800cd88:	f7ff fca0 	bl	800c6cc <_free_r>
 800cd8c:	e7e1      	b.n	800cd52 <_realloc_r+0x1e>
 800cd8e:	4635      	mov	r5, r6
 800cd90:	e7df      	b.n	800cd52 <_realloc_r+0x1e>

0800cd92 <memmove>:
 800cd92:	4288      	cmp	r0, r1
 800cd94:	b510      	push	{r4, lr}
 800cd96:	eb01 0402 	add.w	r4, r1, r2
 800cd9a:	d902      	bls.n	800cda2 <memmove+0x10>
 800cd9c:	4284      	cmp	r4, r0
 800cd9e:	4623      	mov	r3, r4
 800cda0:	d807      	bhi.n	800cdb2 <memmove+0x20>
 800cda2:	1e43      	subs	r3, r0, #1
 800cda4:	42a1      	cmp	r1, r4
 800cda6:	d008      	beq.n	800cdba <memmove+0x28>
 800cda8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdb0:	e7f8      	b.n	800cda4 <memmove+0x12>
 800cdb2:	4601      	mov	r1, r0
 800cdb4:	4402      	add	r2, r0
 800cdb6:	428a      	cmp	r2, r1
 800cdb8:	d100      	bne.n	800cdbc <memmove+0x2a>
 800cdba:	bd10      	pop	{r4, pc}
 800cdbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdc4:	e7f7      	b.n	800cdb6 <memmove+0x24>

0800cdc6 <memchr>:
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	b2c9      	uxtb	r1, r1
 800cdcc:	4402      	add	r2, r0
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	d101      	bne.n	800cdd8 <memchr+0x12>
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	e003      	b.n	800cde0 <memchr+0x1a>
 800cdd8:	7804      	ldrb	r4, [r0, #0]
 800cdda:	3301      	adds	r3, #1
 800cddc:	428c      	cmp	r4, r1
 800cdde:	d1f6      	bne.n	800cdce <memchr+0x8>
 800cde0:	bd10      	pop	{r4, pc}

0800cde2 <memcpy>:
 800cde2:	440a      	add	r2, r1
 800cde4:	4291      	cmp	r1, r2
 800cde6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdea:	d100      	bne.n	800cdee <memcpy+0xc>
 800cdec:	4770      	bx	lr
 800cdee:	b510      	push	{r4, lr}
 800cdf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf4:	4291      	cmp	r1, r2
 800cdf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdfa:	d1f9      	bne.n	800cdf0 <memcpy+0xe>
 800cdfc:	bd10      	pop	{r4, pc}

0800cdfe <_malloc_usable_size_r>:
 800cdfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce02:	1f18      	subs	r0, r3, #4
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	bfbc      	itt	lt
 800ce08:	580b      	ldrlt	r3, [r1, r0]
 800ce0a:	18c0      	addlt	r0, r0, r3
 800ce0c:	4770      	bx	lr
	...

0800ce10 <_init>:
 800ce10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce12:	bf00      	nop
 800ce14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce16:	bc08      	pop	{r3}
 800ce18:	469e      	mov	lr, r3
 800ce1a:	4770      	bx	lr

0800ce1c <_fini>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	bf00      	nop
 800ce20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce22:	bc08      	pop	{r3}
 800ce24:	469e      	mov	lr, r3
 800ce26:	4770      	bx	lr
