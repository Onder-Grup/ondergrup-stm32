
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5e8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800d7cc  0800d7cc  0001d7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6d0  0800e6d0  00020a10  2**0
                  CONTENTS
  4 .ARM          00000000  0800e6d0  0800e6d0  00020a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e6d0  0800e6d0  00020a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6d0  0800e6d0  0001e6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6d4  0800e6d4  0001e6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a10  20000000  0800e6d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000a10  0800f0e8  00020a10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  0800f0e8  0002102c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a39  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013614  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026e6  00000000  00000000  00034090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0f  00000000  00000000  00037938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  00038747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018985  00000000  00000000  00053649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fda8  00000000  00000000  0006bfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005204  00000000  00000000  0010bd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a10 	.word	0x20000a10
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d7b4 	.word	0x0800d7b4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a14 	.word	0x20000a14
 8000220:	0800d7b4 	.word	0x0800d7b4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c fe98 	bl	800cf78 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00c f866 	bl	800c328 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 ff96 	bl	8009190 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c fe86 	bl	800cf78 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00c f854 	bl	800c328 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 ff84 	bl	8009190 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c fe74 	bl	800cf78 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00c f842 	bl	800c328 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 ff72 	bl	8009190 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c fe62 	bl	800cf78 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00c f830 	bl	800c328 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 ff60 	bl	8009190 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c fe6d 	bl	800cfc8 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c fe5a 	bl	800cfc8 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c fe1e 	bl	800cf78 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b ffec 	bl	800c328 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 ff1c 	bl	8009190 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d7cc 	.word	0x0800d7cc
 8000364:	20000a2c 	.word	0x20000a2c
 8000368:	0800d7dc 	.word	0x0800d7dc
 800036c:	0800d7e8 	.word	0x0800d7e8
 8000370:	0800d7f0 	.word	0x0800d7f0
 8000374:	0800d800 	.word	0x0800d800
 8000378:	0800d80c 	.word	0x0800d80c
 800037c:	0800d810 	.word	0x0800d810
 8000380:	0800d814 	.word	0x0800d814

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c fde3 	bl	800cf78 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00b ffae 	bl	800c328 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 fede 	bl	8009190 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c fdc1 	bl	800cf78 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c fdb1 	bl	800cf78 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b ff79 	bl	800c328 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 fea9 	bl	8009190 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b ff65 	bl	800c328 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 fe95 	bl	8009190 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800d818 	.word	0x0800d818
 8000474:	0800d828 	.word	0x0800d828
 8000478:	20000a2c 	.word	0x20000a2c
 800047c:	0800d8a4 	.word	0x0800d8a4
 8000480:	0800d848 	.word	0x0800d848
 8000484:	0800d8b8 	.word	0x0800d8b8

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f00a fa59 	bl	800a982 <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f00a fa45 	bl	800a968 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 fda8 	bl	800a0a8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000df8 	.word	0x20000df8
 8000564:	20000b26 	.word	0x20000b26

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f00a f9e9 	bl	800a982 <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f00a f9d5 	bl	800a968 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 fd38 	bl	800a0a8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000df8 	.word	0x20000df8
 8000644:	20000b26 	.word	0x20000b26

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f00a f963 	bl	800a982 <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f00a f94f 	bl	800a968 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f009 fcb2 	bl	800a0a8 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000df8 	.word	0x20000df8
 8000750:	20000b26 	.word	0x20000b26

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f891 	bl	8000898 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f008 fcb8 	bl	8009190 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_clear_line>:

void lcd_clear_line(int line) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	if(line == 1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d105      	bne.n	800083e <lcd_clear_line+0x1a>
		lcd_line1();
 8000832:	f000 f822 	bl	800087a <lcd_line1>
		lcd_send_cmd(0x01);
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fe26 	bl	8000488 <lcd_send_cmd>
	}  else {
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}
 800083c:	e004      	b.n	8000848 <lcd_clear_line+0x24>
		lcd_line2();
 800083e:	f000 f823 	bl	8000888 <lcd_line2>
		lcd_send_cmd(0x01);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fe20 	bl	8000488 <lcd_send_cmd>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <lcd_delete_char>:

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff87 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 800086c:	2020      	movs	r0, #32
 800086e:	f7ff ff01 	bl	8000674 <lcd_send_char>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <lcd_line1>:

void lcd_line1(void) {
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	f7ff fe02 	bl	8000488 <lcd_send_cmd>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <lcd_line2>:

void lcd_line2(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0xC0);
 800088c:	20c0      	movs	r0, #192	; 0xc0
 800088e:	f7ff fdfb 	bl	8000488 <lcd_send_cmd>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <lcd_backlight>:

void lcd_backlight(char state) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <lcd_backlight+0x20>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fded 	bl	8000488 <lcd_send_cmd>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000b26 	.word	0x20000b26

080008bc <lcd_cursor>:

void lcd_cursor(int state) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d106      	bne.n	80008d8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80008ca:	200e      	movs	r0, #14
 80008cc:	f7ff fddc 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80008d0:	200f      	movs	r0, #15
 80008d2:	f7ff fdd9 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80008d6:	e002      	b.n	80008de <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80008d8:	200c      	movs	r0, #12
 80008da:	f7ff fdd5 	bl	8000488 <lcd_send_cmd>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ec:	f3bf 8f4f 	dsb	sy
}
 80008f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <__NVIC_SystemReset+0x24>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008fa:	4904      	ldr	r1, [pc, #16]	; (800090c <__NVIC_SystemReset+0x24>)
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_SystemReset+0x28>)
 80008fe:	4313      	orrs	r3, r2
 8000900:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000902:	f3bf 8f4f 	dsb	sy
}
 8000906:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <__NVIC_SystemReset+0x20>
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	05fa0004 	.word	0x05fa0004

08000914 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fc81 	bl	8000224 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	3301      	adds	r3, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f00c fa30 	bl	800cd8c <malloc>
 800092c:	4603      	mov	r3, r0
 800092e:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <copyText+0x2a>
        strcpy(result, text);
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f00c fb91 	bl	800d060 <strcpy>
    }
    return result;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af02      	add	r7, sp, #8
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f008 fc1c 	bl	8009190 <HAL_Delay>
	lcd_clear();
 8000958:	f7ff ff5a 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d143      	bne.n	80009ea <printTemplate+0xa2>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d140      	bne.n	80009ea <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000968:	4ab4      	ldr	r2, [pc, #720]	; (8000c3c <printTemplate+0x2f4>)
 800096a:	2101      	movs	r1, #1
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ff23 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 8000972:	4ab3      	ldr	r2, [pc, #716]	; (8000c40 <printTemplate+0x2f8>)
 8000974:	2103      	movs	r1, #3
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff ff1e 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 800097c:	4ab1      	ldr	r2, [pc, #708]	; (8000c44 <printTemplate+0x2fc>)
 800097e:	2104      	movs	r1, #4
 8000980:	2002      	movs	r0, #2
 8000982:	f7ff ff19 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 8000986:	4ab0      	ldr	r2, [pc, #704]	; (8000c48 <printTemplate+0x300>)
 8000988:	2105      	movs	r1, #5
 800098a:	2002      	movs	r0, #2
 800098c:	f7ff ff14 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000990:	4aae      	ldr	r2, [pc, #696]	; (8000c4c <printTemplate+0x304>)
 8000992:	2106      	movs	r1, #6
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff ff0f 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 800099a:	4aad      	ldr	r2, [pc, #692]	; (8000c50 <printTemplate+0x308>)
 800099c:	2107      	movs	r1, #7
 800099e:	2002      	movs	r0, #2
 80009a0:	f7ff ff0a 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 80009a4:	4aab      	ldr	r2, [pc, #684]	; (8000c54 <printTemplate+0x30c>)
 80009a6:	210a      	movs	r1, #10
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff ff05 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 80009ae:	4aaa      	ldr	r2, [pc, #680]	; (8000c58 <printTemplate+0x310>)
 80009b0:	210b      	movs	r1, #11
 80009b2:	2002      	movs	r0, #2
 80009b4:	f7ff ff00 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 80009b8:	4aa8      	ldr	r2, [pc, #672]	; (8000c5c <printTemplate+0x314>)
 80009ba:	210c      	movs	r1, #12
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff fefb 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 80009c2:	4aa7      	ldr	r2, [pc, #668]	; (8000c60 <printTemplate+0x318>)
 80009c4:	210d      	movs	r1, #13
 80009c6:	2002      	movs	r0, #2
 80009c8:	f7ff fef6 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 80009cc:	4aa5      	ldr	r2, [pc, #660]	; (8000c64 <printTemplate+0x31c>)
 80009ce:	210e      	movs	r1, #14
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fef1 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 80009d6:	4aa4      	ldr	r2, [pc, #656]	; (8000c68 <printTemplate+0x320>)
 80009d8:	2105      	movs	r1, #5
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff feec 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 80009e0:	2103      	movs	r1, #3
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fec9 	bl	800077a <lcd_gotoxy>
				slideText(wifiPass, 7, 1, 1, 1, "PASS: ");
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80009e8:	e1cc      	b.n	8000d84 <printTemplate+0x43c>
	} else if(type == 2) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	f040 80ce 	bne.w	8000b8e <printTemplate+0x246>
		if(page == 1) {
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d125      	bne.n	8000a44 <printTemplate+0xfc>
			lcd_clear();
 80009f8:	f7ff ff0a 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f008 fbc7 	bl	8009190 <HAL_Delay>
			if(strlen(wifiSSID) <= 10) {
 8000a02:	489a      	ldr	r0, [pc, #616]	; (8000c6c <printTemplate+0x324>)
 8000a04:	f7ff fc0e 	bl	8000224 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b0a      	cmp	r3, #10
 8000a0c:	d80a      	bhi.n	8000a24 <printTemplate+0xdc>
				lcd_print(1, 1, "SSID: ");
 8000a0e:	4a98      	ldr	r2, [pc, #608]	; (8000c70 <printTemplate+0x328>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff fed0 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiSSID);
 8000a18:	4a94      	ldr	r2, [pc, #592]	; (8000c6c <printTemplate+0x324>)
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fecb 	bl	80007b8 <lcd_print>
 8000a22:	e009      	b.n	8000a38 <printTemplate+0xf0>
				slideText(wifiSSID, 7, 1, 1, 1, "SSID: ");
 8000a24:	4b92      	ldr	r3, [pc, #584]	; (8000c70 <printTemplate+0x328>)
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2107      	movs	r1, #7
 8000a32:	488e      	ldr	r0, [pc, #568]	; (8000c6c <printTemplate+0x324>)
 8000a34:	f000 fdd0 	bl	80015d8 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000a38:	4a8e      	ldr	r2, [pc, #568]	; (8000c74 <printTemplate+0x32c>)
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f7ff febb 	bl	80007b8 <lcd_print>
}
 8000a42:	e19f      	b.n	8000d84 <printTemplate+0x43c>
		} else if(page == 2) {
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d125      	bne.n	8000a96 <printTemplate+0x14e>
			lcd_clear();
 8000a4a:	f7ff fee1 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f008 fb9e 	bl	8009190 <HAL_Delay>
			if(strlen(wifiSSID) <= 10) {
 8000a54:	4885      	ldr	r0, [pc, #532]	; (8000c6c <printTemplate+0x324>)
 8000a56:	f7ff fbe5 	bl	8000224 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d80a      	bhi.n	8000a76 <printTemplate+0x12e>
				lcd_print(1, 1, "SSID: ");
 8000a60:	4a83      	ldr	r2, [pc, #524]	; (8000c70 <printTemplate+0x328>)
 8000a62:	2101      	movs	r1, #1
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fea7 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiSSID);
 8000a6a:	4a80      	ldr	r2, [pc, #512]	; (8000c6c <printTemplate+0x324>)
 8000a6c:	2107      	movs	r1, #7
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff fea2 	bl	80007b8 <lcd_print>
 8000a74:	e009      	b.n	8000a8a <printTemplate+0x142>
				slideText(wifiSSID, 7, 1, 1, 1, "SSID: ");
 8000a76:	4b7e      	ldr	r3, [pc, #504]	; (8000c70 <printTemplate+0x328>)
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	2201      	movs	r2, #1
 8000a82:	2107      	movs	r1, #7
 8000a84:	4879      	ldr	r0, [pc, #484]	; (8000c6c <printTemplate+0x324>)
 8000a86:	f000 fda7 	bl	80015d8 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000a8a:	4a7b      	ldr	r2, [pc, #492]	; (8000c78 <printTemplate+0x330>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff fe92 	bl	80007b8 <lcd_print>
}
 8000a94:	e176      	b.n	8000d84 <printTemplate+0x43c>
		} else if(page == 3) {
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d125      	bne.n	8000ae8 <printTemplate+0x1a0>
			lcd_clear();
 8000a9c:	f7ff feb8 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000aa0:	2064      	movs	r0, #100	; 0x64
 8000aa2:	f008 fb75 	bl	8009190 <HAL_Delay>
			if(strlen(wifiSSID) <= 10) {
 8000aa6:	4871      	ldr	r0, [pc, #452]	; (8000c6c <printTemplate+0x324>)
 8000aa8:	f7ff fbbc 	bl	8000224 <strlen>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b0a      	cmp	r3, #10
 8000ab0:	d80a      	bhi.n	8000ac8 <printTemplate+0x180>
				lcd_print(1, 1, "SSID: ");
 8000ab2:	4a6f      	ldr	r2, [pc, #444]	; (8000c70 <printTemplate+0x328>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff fe7e 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiSSID);
 8000abc:	4a6b      	ldr	r2, [pc, #428]	; (8000c6c <printTemplate+0x324>)
 8000abe:	2107      	movs	r1, #7
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fe79 	bl	80007b8 <lcd_print>
 8000ac6:	e009      	b.n	8000adc <printTemplate+0x194>
				slideText(wifiSSID, 7, 1, 1, 1, "SSID: ");
 8000ac8:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <printTemplate+0x328>)
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	2301      	movs	r3, #1
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2107      	movs	r1, #7
 8000ad6:	4865      	ldr	r0, [pc, #404]	; (8000c6c <printTemplate+0x324>)
 8000ad8:	f000 fd7e 	bl	80015d8 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000adc:	4a67      	ldr	r2, [pc, #412]	; (8000c7c <printTemplate+0x334>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff fe69 	bl	80007b8 <lcd_print>
}
 8000ae6:	e14d      	b.n	8000d84 <printTemplate+0x43c>
		} else if(page == 4) {
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d125      	bne.n	8000b3a <printTemplate+0x1f2>
			lcd_clear();
 8000aee:	f7ff fe8f 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000af2:	2064      	movs	r0, #100	; 0x64
 8000af4:	f008 fb4c 	bl	8009190 <HAL_Delay>
			if(strlen(wifiSSID) <= 10) {
 8000af8:	485c      	ldr	r0, [pc, #368]	; (8000c6c <printTemplate+0x324>)
 8000afa:	f7ff fb93 	bl	8000224 <strlen>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b0a      	cmp	r3, #10
 8000b02:	d80a      	bhi.n	8000b1a <printTemplate+0x1d2>
				lcd_print(1, 1, "SSID: ");
 8000b04:	4a5a      	ldr	r2, [pc, #360]	; (8000c70 <printTemplate+0x328>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fe55 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiSSID);
 8000b0e:	4a57      	ldr	r2, [pc, #348]	; (8000c6c <printTemplate+0x324>)
 8000b10:	2107      	movs	r1, #7
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fe50 	bl	80007b8 <lcd_print>
 8000b18:	e009      	b.n	8000b2e <printTemplate+0x1e6>
				slideText(wifiSSID, 7, 1, 1, 1, "SSID: ");
 8000b1a:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <printTemplate+0x328>)
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2301      	movs	r3, #1
 8000b24:	2201      	movs	r2, #1
 8000b26:	2107      	movs	r1, #7
 8000b28:	4850      	ldr	r0, [pc, #320]	; (8000c6c <printTemplate+0x324>)
 8000b2a:	f000 fd55 	bl	80015d8 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b2e:	4a54      	ldr	r2, [pc, #336]	; (8000c80 <printTemplate+0x338>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	2002      	movs	r0, #2
 8000b34:	f7ff fe40 	bl	80007b8 <lcd_print>
}
 8000b38:	e124      	b.n	8000d84 <printTemplate+0x43c>
		} else if(page == 5) {
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2b05      	cmp	r3, #5
 8000b3e:	f040 8121 	bne.w	8000d84 <printTemplate+0x43c>
			lcd_clear();
 8000b42:	f7ff fe65 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b46:	2064      	movs	r0, #100	; 0x64
 8000b48:	f008 fb22 	bl	8009190 <HAL_Delay>
			if(strlen(wifiSSID) <= 10) {
 8000b4c:	4847      	ldr	r0, [pc, #284]	; (8000c6c <printTemplate+0x324>)
 8000b4e:	f7ff fb69 	bl	8000224 <strlen>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b0a      	cmp	r3, #10
 8000b56:	d80a      	bhi.n	8000b6e <printTemplate+0x226>
				lcd_print(1, 1, "SSID: ");
 8000b58:	4a45      	ldr	r2, [pc, #276]	; (8000c70 <printTemplate+0x328>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f7ff fe2b 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiSSID);
 8000b62:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <printTemplate+0x324>)
 8000b64:	2107      	movs	r1, #7
 8000b66:	2001      	movs	r0, #1
 8000b68:	f7ff fe26 	bl	80007b8 <lcd_print>
 8000b6c:	e009      	b.n	8000b82 <printTemplate+0x23a>
				slideText(wifiSSID, 7, 1, 1, 1, "SSID: ");
 8000b6e:	4b40      	ldr	r3, [pc, #256]	; (8000c70 <printTemplate+0x328>)
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	2301      	movs	r3, #1
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2107      	movs	r1, #7
 8000b7c:	483b      	ldr	r0, [pc, #236]	; (8000c6c <printTemplate+0x324>)
 8000b7e:	f000 fd2b 	bl	80015d8 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b82:	4a40      	ldr	r2, [pc, #256]	; (8000c84 <printTemplate+0x33c>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	2002      	movs	r0, #2
 8000b88:	f7ff fe16 	bl	80007b8 <lcd_print>
}
 8000b8c:	e0fa      	b.n	8000d84 <printTemplate+0x43c>
	} else if(type == 3) {
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	f040 80f7 	bne.w	8000d84 <printTemplate+0x43c>
		if(page == 1) {
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d125      	bne.n	8000be8 <printTemplate+0x2a0>
			lcd_clear();
 8000b9c:	f7ff fe38 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ba0:	2064      	movs	r0, #100	; 0x64
 8000ba2:	f008 faf5 	bl	8009190 <HAL_Delay>
			if(strlen(wifiPass) <= 10) {
 8000ba6:	4838      	ldr	r0, [pc, #224]	; (8000c88 <printTemplate+0x340>)
 8000ba8:	f7ff fb3c 	bl	8000224 <strlen>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b0a      	cmp	r3, #10
 8000bb0:	d80a      	bhi.n	8000bc8 <printTemplate+0x280>
				lcd_print(1, 1, "PASS: ");
 8000bb2:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <printTemplate+0x344>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fdfe 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiPass);
 8000bbc:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <printTemplate+0x340>)
 8000bbe:	2107      	movs	r1, #7
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fdf9 	bl	80007b8 <lcd_print>
 8000bc6:	e009      	b.n	8000bdc <printTemplate+0x294>
				slideText(wifiPass, 7, 1, 1, 1, "PASS: ");
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <printTemplate+0x344>)
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	482c      	ldr	r0, [pc, #176]	; (8000c88 <printTemplate+0x340>)
 8000bd8:	f000 fcfe 	bl	80015d8 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000bdc:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <printTemplate+0x32c>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff fde9 	bl	80007b8 <lcd_print>
}
 8000be6:	e0cd      	b.n	8000d84 <printTemplate+0x43c>
		} else if(page == 2) {
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d150      	bne.n	8000c90 <printTemplate+0x348>
			lcd_clear();
 8000bee:	f7ff fe0f 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000bf2:	2064      	movs	r0, #100	; 0x64
 8000bf4:	f008 facc 	bl	8009190 <HAL_Delay>
			if(strlen(wifiPass) <= 10) {
 8000bf8:	4823      	ldr	r0, [pc, #140]	; (8000c88 <printTemplate+0x340>)
 8000bfa:	f7ff fb13 	bl	8000224 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b0a      	cmp	r3, #10
 8000c02:	d80a      	bhi.n	8000c1a <printTemplate+0x2d2>
				lcd_print(1, 1, "PASS: ");
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <printTemplate+0x344>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fdd5 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiPass);
 8000c0e:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <printTemplate+0x340>)
 8000c10:	2107      	movs	r1, #7
 8000c12:	2001      	movs	r0, #1
 8000c14:	f7ff fdd0 	bl	80007b8 <lcd_print>
 8000c18:	e009      	b.n	8000c2e <printTemplate+0x2e6>
				slideText(wifiPass, 7, 1, 1, 1, "PASS: ");
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <printTemplate+0x344>)
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2301      	movs	r3, #1
 8000c24:	2201      	movs	r2, #1
 8000c26:	2107      	movs	r1, #7
 8000c28:	4817      	ldr	r0, [pc, #92]	; (8000c88 <printTemplate+0x340>)
 8000c2a:	f000 fcd5 	bl	80015d8 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <printTemplate+0x330>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	2002      	movs	r0, #2
 8000c34:	f7ff fdc0 	bl	80007b8 <lcd_print>
}
 8000c38:	e0a4      	b.n	8000d84 <printTemplate+0x43c>
 8000c3a:	bf00      	nop
 8000c3c:	0800d91c 	.word	0x0800d91c
 8000c40:	0800d924 	.word	0x0800d924
 8000c44:	0800d928 	.word	0x0800d928
 8000c48:	0800d92c 	.word	0x0800d92c
 8000c4c:	0800d930 	.word	0x0800d930
 8000c50:	0800d934 	.word	0x0800d934
 8000c54:	0800d938 	.word	0x0800d938
 8000c58:	0800d93c 	.word	0x0800d93c
 8000c5c:	0800d940 	.word	0x0800d940
 8000c60:	0800d944 	.word	0x0800d944
 8000c64:	0800d948 	.word	0x0800d948
 8000c68:	20000be4 	.word	0x20000be4
 8000c6c:	20000bf0 	.word	0x20000bf0
 8000c70:	0800d94c 	.word	0x0800d94c
 8000c74:	0800d954 	.word	0x0800d954
 8000c78:	0800d968 	.word	0x0800d968
 8000c7c:	0800d97c 	.word	0x0800d97c
 8000c80:	0800d990 	.word	0x0800d990
 8000c84:	0800d9a4 	.word	0x0800d9a4
 8000c88:	20000c14 	.word	0x20000c14
 8000c8c:	0800d9b8 	.word	0x0800d9b8
		} else if(page == 3) {
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d125      	bne.n	8000ce2 <printTemplate+0x39a>
			lcd_clear();
 8000c96:	f7ff fdbb 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000c9a:	2064      	movs	r0, #100	; 0x64
 8000c9c:	f008 fa78 	bl	8009190 <HAL_Delay>
			if(strlen(wifiPass) <= 10) {
 8000ca0:	483a      	ldr	r0, [pc, #232]	; (8000d8c <printTemplate+0x444>)
 8000ca2:	f7ff fabf 	bl	8000224 <strlen>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b0a      	cmp	r3, #10
 8000caa:	d80a      	bhi.n	8000cc2 <printTemplate+0x37a>
				lcd_print(1, 1, "PASS: ");
 8000cac:	4a38      	ldr	r2, [pc, #224]	; (8000d90 <printTemplate+0x448>)
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fd81 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiPass);
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <printTemplate+0x444>)
 8000cb8:	2107      	movs	r1, #7
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fd7c 	bl	80007b8 <lcd_print>
 8000cc0:	e009      	b.n	8000cd6 <printTemplate+0x38e>
				slideText(wifiPass, 7, 1, 1, 1, "PASS: ");
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <printTemplate+0x448>)
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2107      	movs	r1, #7
 8000cd0:	482e      	ldr	r0, [pc, #184]	; (8000d8c <printTemplate+0x444>)
 8000cd2:	f000 fc81 	bl	80015d8 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <printTemplate+0x44c>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff fd6c 	bl	80007b8 <lcd_print>
}
 8000ce0:	e050      	b.n	8000d84 <printTemplate+0x43c>
		} else if(page == 4) {
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d125      	bne.n	8000d34 <printTemplate+0x3ec>
			lcd_clear();
 8000ce8:	f7ff fd92 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000cec:	2064      	movs	r0, #100	; 0x64
 8000cee:	f008 fa4f 	bl	8009190 <HAL_Delay>
			if(strlen(wifiPass) <= 10) {
 8000cf2:	4826      	ldr	r0, [pc, #152]	; (8000d8c <printTemplate+0x444>)
 8000cf4:	f7ff fa96 	bl	8000224 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	d80a      	bhi.n	8000d14 <printTemplate+0x3cc>
				lcd_print(1, 1, "PASS: ");
 8000cfe:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <printTemplate+0x448>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fd58 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiPass);
 8000d08:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <printTemplate+0x444>)
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff fd53 	bl	80007b8 <lcd_print>
 8000d12:	e009      	b.n	8000d28 <printTemplate+0x3e0>
				slideText(wifiPass, 7, 1, 1, 1, "PASS: ");
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <printTemplate+0x448>)
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2107      	movs	r1, #7
 8000d22:	481a      	ldr	r0, [pc, #104]	; (8000d8c <printTemplate+0x444>)
 8000d24:	f000 fc58 	bl	80015d8 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <printTemplate+0x450>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fd43 	bl	80007b8 <lcd_print>
}
 8000d32:	e027      	b.n	8000d84 <printTemplate+0x43c>
		} else if(page == 5) {
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d124      	bne.n	8000d84 <printTemplate+0x43c>
			lcd_clear();
 8000d3a:	f7ff fd69 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000d3e:	2064      	movs	r0, #100	; 0x64
 8000d40:	f008 fa26 	bl	8009190 <HAL_Delay>
			if(strlen(wifiPass) <= 10) {
 8000d44:	4811      	ldr	r0, [pc, #68]	; (8000d8c <printTemplate+0x444>)
 8000d46:	f7ff fa6d 	bl	8000224 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b0a      	cmp	r3, #10
 8000d4e:	d80a      	bhi.n	8000d66 <printTemplate+0x41e>
				lcd_print(1, 1, "PASS: ");
 8000d50:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <printTemplate+0x448>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff fd2f 	bl	80007b8 <lcd_print>
				lcd_print(1, 7, wifiPass);
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <printTemplate+0x444>)
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fd2a 	bl	80007b8 <lcd_print>
 8000d64:	e009      	b.n	8000d7a <printTemplate+0x432>
				slideText(wifiPass, 7, 1, 1, 1, "PASS: ");
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <printTemplate+0x448>)
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	2201      	movs	r2, #1
 8000d72:	2107      	movs	r1, #7
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <printTemplate+0x444>)
 8000d76:	f000 fc2f 	bl	80015d8 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <printTemplate+0x454>)
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff fd1a 	bl	80007b8 <lcd_print>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000c14 	.word	0x20000c14
 8000d90:	0800d9b8 	.word	0x0800d9b8
 8000d94:	0800d97c 	.word	0x0800d97c
 8000d98:	0800d990 	.word	0x0800d990
 8000d9c:	0800d9a4 	.word	0x0800d9a4

08000da0 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    return characters[cursorPosition];
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <getCharFromCursorPosition+0x1c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000960 	.word	0x20000960

08000dc0 <takeMachineID>:
			machineID[i] = '9';
		}
	}
}

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fd76 	bl	80008bc <lcd_cursor>

	if(state == 0) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4880      	ldr	r0, [pc, #512]	; (8000fdc <takeMachineID+0x21c>)
 8000ddc:	f00c f8ec 	bl	800cfb8 <memset>
	}

    int cursorPosition = 3;
 8000de0:	2303      	movs	r3, #3
 8000de2:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000de8:	2305      	movs	r3, #5
 8000dea:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000dec:	2100      	movs	r1, #0
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff fdaa 	bl	8000948 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000df4:	2108      	movs	r1, #8
 8000df6:	487a      	ldr	r0, [pc, #488]	; (8000fe0 <takeMachineID+0x220>)
 8000df8:	f008 ff9a 	bl	8009d30 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d103      	bne.n	8000e0a <takeMachineID+0x4a>
        	lcd_cursor(0);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fd5a 	bl	80008bc <lcd_cursor>

            break;
 8000e08:	e0e4      	b.n	8000fd4 <takeMachineID+0x214>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4874      	ldr	r0, [pc, #464]	; (8000fe0 <takeMachineID+0x220>)
 8000e0e:	f008 ff8f 	bl	8009d30 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d112      	bne.n	8000e3e <takeMachineID+0x7e>
        	if(cursorPosition == 7) {
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2b07      	cmp	r3, #7
 8000e1c:	d102      	bne.n	8000e24 <takeMachineID+0x64>
        		cursorPosition = 10;
 8000e1e:	230a      	movs	r3, #10
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e008      	b.n	8000e36 <takeMachineID+0x76>
        	} else if (cursorPosition == 14) {
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b0e      	cmp	r3, #14
 8000e28:	d102      	bne.n	8000e30 <takeMachineID+0x70>
                cursorPosition = 3;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e002      	b.n	8000e36 <takeMachineID+0x76>
            } else {
            	cursorPosition++;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000e36:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e3a:	f008 f9a9 	bl	8009190 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000e3e:	2108      	movs	r1, #8
 8000e40:	4868      	ldr	r0, [pc, #416]	; (8000fe4 <takeMachineID+0x224>)
 8000e42:	f008 ff75 	bl	8009d30 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d112      	bne.n	8000e72 <takeMachineID+0xb2>
            if (cursorPosition == 3) {
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d102      	bne.n	8000e58 <takeMachineID+0x98>
                cursorPosition = 14;
 8000e52:	230e      	movs	r3, #14
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e008      	b.n	8000e6a <takeMachineID+0xaa>
            } else if(cursorPosition == 10) {
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d102      	bne.n	8000e64 <takeMachineID+0xa4>
            	cursorPosition = 7;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e002      	b.n	8000e6a <takeMachineID+0xaa>
            } else {
            	cursorPosition--;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000e6a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e6e:	f008 f98f 	bl	8009190 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000e72:	2102      	movs	r1, #2
 8000e74:	485a      	ldr	r0, [pc, #360]	; (8000fe0 <takeMachineID+0x220>)
 8000e76:	f008 ff5b 	bl	8009d30 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d16c      	bne.n	8000f5a <takeMachineID+0x19a>
        	if(cursorPosition == 3) {
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d105      	bne.n	8000e92 <takeMachineID+0xd2>
        		machineID[machineIDLoc] = '0';
 8000e86:	4a55      	ldr	r2, [pc, #340]	; (8000fdc <takeMachineID+0x21c>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	2230      	movs	r2, #48	; 0x30
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	e04f      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 4) {
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d105      	bne.n	8000ea4 <takeMachineID+0xe4>
        		machineID[machineIDLoc] = '1';
 8000e98:	4a50      	ldr	r2, [pc, #320]	; (8000fdc <takeMachineID+0x21c>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2231      	movs	r2, #49	; 0x31
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e046      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 5) {
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d105      	bne.n	8000eb6 <takeMachineID+0xf6>
        		machineID[machineIDLoc] = '2';
 8000eaa:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <takeMachineID+0x21c>)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4413      	add	r3, r2
 8000eb0:	2232      	movs	r2, #50	; 0x32
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	e03d      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 6) {
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b06      	cmp	r3, #6
 8000eba:	d105      	bne.n	8000ec8 <takeMachineID+0x108>
        		machineID[machineIDLoc] = '3';
 8000ebc:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <takeMachineID+0x21c>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2233      	movs	r2, #51	; 0x33
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e034      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 7) {
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b07      	cmp	r3, #7
 8000ecc:	d105      	bne.n	8000eda <takeMachineID+0x11a>
        		machineID[machineIDLoc] = '4';
 8000ece:	4a43      	ldr	r2, [pc, #268]	; (8000fdc <takeMachineID+0x21c>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2234      	movs	r2, #52	; 0x34
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e02b      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 10) {
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b0a      	cmp	r3, #10
 8000ede:	d105      	bne.n	8000eec <takeMachineID+0x12c>
        		machineID[machineIDLoc] = '5';
 8000ee0:	4a3e      	ldr	r2, [pc, #248]	; (8000fdc <takeMachineID+0x21c>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	2235      	movs	r2, #53	; 0x35
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	e022      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 11) {
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b0b      	cmp	r3, #11
 8000ef0:	d105      	bne.n	8000efe <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '6';
 8000ef2:	4a3a      	ldr	r2, [pc, #232]	; (8000fdc <takeMachineID+0x21c>)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	2236      	movs	r2, #54	; 0x36
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e019      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 12) {
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2b0c      	cmp	r3, #12
 8000f02:	d105      	bne.n	8000f10 <takeMachineID+0x150>
        		machineID[machineIDLoc] = '7';
 8000f04:	4a35      	ldr	r2, [pc, #212]	; (8000fdc <takeMachineID+0x21c>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4413      	add	r3, r2
 8000f0a:	2237      	movs	r2, #55	; 0x37
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e010      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 13) {
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2b0d      	cmp	r3, #13
 8000f14:	d105      	bne.n	8000f22 <takeMachineID+0x162>
        		machineID[machineIDLoc] = '8';
 8000f16:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <takeMachineID+0x21c>)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	2238      	movs	r2, #56	; 0x38
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e007      	b.n	8000f32 <takeMachineID+0x172>
        	} else if(cursorPosition == 14) {
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b0e      	cmp	r3, #14
 8000f26:	d104      	bne.n	8000f32 <takeMachineID+0x172>
        		machineID[machineIDLoc] = '9';
 8000f28:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <takeMachineID+0x21c>)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2239      	movs	r2, #57	; 0x39
 8000f30:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	b2d9      	uxtb	r1, r3
 8000f36:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <takeMachineID+0x21c>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff fc4e 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000f52:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f56:	f008 f91b 	bl	8009190 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <takeMachineID+0x220>)
 8000f5e:	f008 fee7 	bl	8009d30 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d12e      	bne.n	8000fc6 <takeMachineID+0x206>
            if(strlen(machineID) >= 1) {
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <takeMachineID+0x21c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d027      	beq.n	8000fc0 <takeMachineID+0x200>

                machineID[machineIDLoc] = '\0';
 8000f70:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <takeMachineID+0x21c>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4413      	add	r3, r2
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	3304      	adds	r3, #4
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4619      	mov	r1, r3
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fc63 	bl	8000850 <lcd_delete_char>
                HAL_Delay(50);
 8000f8a:	2032      	movs	r0, #50	; 0x32
 8000f8c:	f008 f900 	bl	8009190 <HAL_Delay>

                if(writeLoc > 5) {
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	dd03      	ble.n	8000f9e <takeMachineID+0x1de>
                	writeLoc--;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e004      	b.n	8000fa8 <takeMachineID+0x1e8>
                } else if(writeLoc < 5) {
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	dc01      	bgt.n	8000fa8 <takeMachineID+0x1e8>
                	writeLoc = 5;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dd03      	ble.n	8000fb6 <takeMachineID+0x1f6>
                	machineIDLoc--;
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	e004      	b.n	8000fc0 <takeMachineID+0x200>
                } else if(machineIDLoc < 0) {
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da01      	bge.n	8000fc0 <takeMachineID+0x200>
                	machineIDLoc = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000fc0:	20fa      	movs	r0, #250	; 0xfa
 8000fc2:	f008 f8e5 	bl	8009190 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f7ff fbd4 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fd2:	e70f      	b.n	8000df4 <takeMachineID+0x34>
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000be4 	.word	0x20000be4
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40011000 	.word	0x40011000

08000fe8 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    lcd_cursor(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff fc63 	bl	80008bc <lcd_cursor>

    if(state == 0) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000ffc:	2221      	movs	r2, #33	; 0x21
 8000ffe:	2100      	movs	r1, #0
 8001000:	48a1      	ldr	r0, [pc, #644]	; (8001288 <takeWifiSSID+0x2a0>)
 8001002:	f00b ffd9 	bl	800cfb8 <memset>
    }

    int realCharPos = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 800100a:	4ba0      	ldr	r3, [pc, #640]	; (800128c <takeWifiSSID+0x2a4>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]
    page = 1;
 8001010:	4b9f      	ldr	r3, [pc, #636]	; (8001290 <takeWifiSSID+0x2a8>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 800101a:	2307      	movs	r3, #7
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(2, 1);
 800101e:	2101      	movs	r1, #1
 8001020:	2002      	movs	r0, #2
 8001022:	f7ff fc91 	bl	8000948 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001026:	2108      	movs	r1, #8
 8001028:	489a      	ldr	r0, [pc, #616]	; (8001294 <takeWifiSSID+0x2ac>)
 800102a:	f008 fe81 	bl	8009d30 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d103      	bne.n	800103c <takeWifiSSID+0x54>
            lcd_cursor(0);
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff fc41 	bl	80008bc <lcd_cursor>

            break;
 800103a:	e14b      	b.n	80012d4 <takeWifiSSID+0x2ec>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800103c:	2101      	movs	r1, #1
 800103e:	4895      	ldr	r0, [pc, #596]	; (8001294 <takeWifiSSID+0x2ac>)
 8001040:	f008 fe76 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d166      	bne.n	8001118 <takeWifiSSID+0x130>
        	realCharPos++;
 800104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104c:	3301      	adds	r3, #1
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 8001050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001052:	2b50      	cmp	r3, #80	; 0x50
 8001054:	dd01      	ble.n	800105a <takeWifiSSID+0x72>
        		realCharPos = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 800105a:	4b8c      	ldr	r3, [pc, #560]	; (800128c <takeWifiSSID+0x2a4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b10      	cmp	r3, #16
 8001060:	d152      	bne.n	8001108 <takeWifiSSID+0x120>
            	if(page == 1) {
 8001062:	4b8b      	ldr	r3, [pc, #556]	; (8001290 <takeWifiSSID+0x2a8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10c      	bne.n	8001084 <takeWifiSSID+0x9c>
            		cursorPosition = 1;
 800106a:	4b88      	ldr	r3, [pc, #544]	; (800128c <takeWifiSSID+0x2a4>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]
            		page++;
 8001070:	4b87      	ldr	r3, [pc, #540]	; (8001290 <takeWifiSSID+0x2a8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a86      	ldr	r2, [pc, #536]	; (8001290 <takeWifiSSID+0x2a8>)
 8001078:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 800107a:	2102      	movs	r1, #2
 800107c:	2002      	movs	r0, #2
 800107e:	f7ff fc63 	bl	8000948 <printTemplate>
 8001082:	e046      	b.n	8001112 <takeWifiSSID+0x12a>
            	} else if(page == 2) {
 8001084:	4b82      	ldr	r3, [pc, #520]	; (8001290 <takeWifiSSID+0x2a8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d10c      	bne.n	80010a6 <takeWifiSSID+0xbe>
            		cursorPosition = 1;
 800108c:	4b7f      	ldr	r3, [pc, #508]	; (800128c <takeWifiSSID+0x2a4>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
            		page++;
 8001092:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <takeWifiSSID+0x2a8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a7d      	ldr	r2, [pc, #500]	; (8001290 <takeWifiSSID+0x2a8>)
 800109a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 800109c:	2103      	movs	r1, #3
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff fc52 	bl	8000948 <printTemplate>
 80010a4:	e035      	b.n	8001112 <takeWifiSSID+0x12a>
            	} else if(page == 3) {
 80010a6:	4b7a      	ldr	r3, [pc, #488]	; (8001290 <takeWifiSSID+0x2a8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d10c      	bne.n	80010c8 <takeWifiSSID+0xe0>
            		cursorPosition = 1;
 80010ae:	4b77      	ldr	r3, [pc, #476]	; (800128c <takeWifiSSID+0x2a4>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
            		page++;
 80010b4:	4b76      	ldr	r3, [pc, #472]	; (8001290 <takeWifiSSID+0x2a8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a75      	ldr	r2, [pc, #468]	; (8001290 <takeWifiSSID+0x2a8>)
 80010bc:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80010be:	2104      	movs	r1, #4
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff fc41 	bl	8000948 <printTemplate>
 80010c6:	e024      	b.n	8001112 <takeWifiSSID+0x12a>
            	} else if(page == 4) {
 80010c8:	4b71      	ldr	r3, [pc, #452]	; (8001290 <takeWifiSSID+0x2a8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d10c      	bne.n	80010ea <takeWifiSSID+0x102>
            		cursorPosition = 1;
 80010d0:	4b6e      	ldr	r3, [pc, #440]	; (800128c <takeWifiSSID+0x2a4>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
            		page++;
 80010d6:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <takeWifiSSID+0x2a8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a6c      	ldr	r2, [pc, #432]	; (8001290 <takeWifiSSID+0x2a8>)
 80010de:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 80010e0:	2105      	movs	r1, #5
 80010e2:	2002      	movs	r0, #2
 80010e4:	f7ff fc30 	bl	8000948 <printTemplate>
 80010e8:	e013      	b.n	8001112 <takeWifiSSID+0x12a>
            	} else if(page == 5) {
 80010ea:	4b69      	ldr	r3, [pc, #420]	; (8001290 <takeWifiSSID+0x2a8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d10f      	bne.n	8001112 <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 80010f2:	4b66      	ldr	r3, [pc, #408]	; (800128c <takeWifiSSID+0x2a4>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
            		page = 1;
 80010f8:	4b65      	ldr	r3, [pc, #404]	; (8001290 <takeWifiSSID+0x2a8>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80010fe:	2101      	movs	r1, #1
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff fc21 	bl	8000948 <printTemplate>
 8001106:	e004      	b.n	8001112 <takeWifiSSID+0x12a>
            	}
            } else {
            	cursorPosition++;
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <takeWifiSSID+0x2a4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a5f      	ldr	r2, [pc, #380]	; (800128c <takeWifiSSID+0x2a4>)
 8001110:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001112:	20fa      	movs	r0, #250	; 0xfa
 8001114:	f008 f83c 	bl	8009190 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001118:	2108      	movs	r1, #8
 800111a:	485f      	ldr	r0, [pc, #380]	; (8001298 <takeWifiSSID+0x2b0>)
 800111c:	f008 fe08 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d15e      	bne.n	80011e4 <takeWifiSSID+0x1fc>
        	realCharPos--;
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001128:	3b01      	subs	r3, #1
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	2b00      	cmp	r3, #0
 8001130:	dc01      	bgt.n	8001136 <takeWifiSSID+0x14e>
        		realCharPos = 80;
 8001132:	2350      	movs	r3, #80	; 0x50
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 8001136:	4b55      	ldr	r3, [pc, #340]	; (800128c <takeWifiSSID+0x2a4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d14a      	bne.n	80011d4 <takeWifiSSID+0x1ec>
            	if(page == 1) {
 800113e:	4b54      	ldr	r3, [pc, #336]	; (8001290 <takeWifiSSID+0x2a8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10a      	bne.n	800115c <takeWifiSSID+0x174>
            		cursorPosition = 16;
 8001146:	4b51      	ldr	r3, [pc, #324]	; (800128c <takeWifiSSID+0x2a4>)
 8001148:	2210      	movs	r2, #16
 800114a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <takeWifiSSID+0x2a8>)
 800114e:	2205      	movs	r2, #5
 8001150:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8001152:	2105      	movs	r1, #5
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff fbf7 	bl	8000948 <printTemplate>
 800115a:	e040      	b.n	80011de <takeWifiSSID+0x1f6>
            	} else if(page == 2) {
 800115c:	4b4c      	ldr	r3, [pc, #304]	; (8001290 <takeWifiSSID+0x2a8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d10a      	bne.n	800117a <takeWifiSSID+0x192>
            		cursorPosition = 16;
 8001164:	4b49      	ldr	r3, [pc, #292]	; (800128c <takeWifiSSID+0x2a4>)
 8001166:	2210      	movs	r2, #16
 8001168:	601a      	str	r2, [r3, #0]
            		page = 1;
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <takeWifiSSID+0x2a8>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001170:	2101      	movs	r1, #1
 8001172:	2002      	movs	r0, #2
 8001174:	f7ff fbe8 	bl	8000948 <printTemplate>
 8001178:	e031      	b.n	80011de <takeWifiSSID+0x1f6>
            	} else if(page == 3) {
 800117a:	4b45      	ldr	r3, [pc, #276]	; (8001290 <takeWifiSSID+0x2a8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d10a      	bne.n	8001198 <takeWifiSSID+0x1b0>
            		cursorPosition = 16;
 8001182:	4b42      	ldr	r3, [pc, #264]	; (800128c <takeWifiSSID+0x2a4>)
 8001184:	2210      	movs	r2, #16
 8001186:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001188:	4b41      	ldr	r3, [pc, #260]	; (8001290 <takeWifiSSID+0x2a8>)
 800118a:	2202      	movs	r2, #2
 800118c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 800118e:	2102      	movs	r1, #2
 8001190:	2002      	movs	r0, #2
 8001192:	f7ff fbd9 	bl	8000948 <printTemplate>
 8001196:	e022      	b.n	80011de <takeWifiSSID+0x1f6>
            	} else if(page == 4) {
 8001198:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <takeWifiSSID+0x2a8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d10a      	bne.n	80011b6 <takeWifiSSID+0x1ce>
            		cursorPosition = 16;
 80011a0:	4b3a      	ldr	r3, [pc, #232]	; (800128c <takeWifiSSID+0x2a4>)
 80011a2:	2210      	movs	r2, #16
 80011a4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011a6:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <takeWifiSSID+0x2a8>)
 80011a8:	2203      	movs	r2, #3
 80011aa:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80011ac:	2103      	movs	r1, #3
 80011ae:	2002      	movs	r0, #2
 80011b0:	f7ff fbca 	bl	8000948 <printTemplate>
 80011b4:	e013      	b.n	80011de <takeWifiSSID+0x1f6>
            	} else if(page == 5) {
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <takeWifiSSID+0x2a8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d10f      	bne.n	80011de <takeWifiSSID+0x1f6>
            		cursorPosition = 16;
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <takeWifiSSID+0x2a4>)
 80011c0:	2210      	movs	r2, #16
 80011c2:	601a      	str	r2, [r3, #0]
            		page = 4;
 80011c4:	4b32      	ldr	r3, [pc, #200]	; (8001290 <takeWifiSSID+0x2a8>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80011ca:	2104      	movs	r1, #4
 80011cc:	2002      	movs	r0, #2
 80011ce:	f7ff fbbb 	bl	8000948 <printTemplate>
 80011d2:	e004      	b.n	80011de <takeWifiSSID+0x1f6>
            	}
            } else {
            	cursorPosition--;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <takeWifiSSID+0x2a4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3b01      	subs	r3, #1
 80011da:	4a2c      	ldr	r2, [pc, #176]	; (800128c <takeWifiSSID+0x2a4>)
 80011dc:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80011de:	20fa      	movs	r0, #250	; 0xfa
 80011e0:	f007 ffd6 	bl	8009190 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80011e4:	2102      	movs	r1, #2
 80011e6:	482b      	ldr	r0, [pc, #172]	; (8001294 <takeWifiSSID+0x2ac>)
 80011e8:	f008 fda2 	bl	8009d30 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d128      	bne.n	8001244 <takeWifiSSID+0x25c>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 80011f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f4:	3b01      	subs	r3, #1
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fdd2 	bl	8000da0 <getCharFromCursorPosition>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4619      	mov	r1, r3
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <takeWifiSSID+0x2a0>)
 8001202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001204:	4413      	add	r3, r2
 8001206:	460a      	mov	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <takeWifiSSID+0x2a0>)
 8001210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff fae2 	bl	80007e2 <lcd_print_char>

            realCharPosLoc[wifiNameLoc] = realCharPos-1;
 800121e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3b01      	subs	r3, #1
 8001224:	b2d9      	uxtb	r1, r3
 8001226:	f107 0208 	add.w	r2, r7, #8
 800122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122c:	4413      	add	r3, r2
 800122e:	460a      	mov	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	3301      	adds	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiNameLoc++;
 8001238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123a:	3301      	adds	r3, #1
 800123c:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 800123e:	20fa      	movs	r0, #250	; 0xfa
 8001240:	f007 ffa6 	bl	8009190 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001244:	2104      	movs	r1, #4
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <takeWifiSSID+0x2ac>)
 8001248:	f008 fd72 	bl	8009d30 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d138      	bne.n	80012c4 <takeWifiSSID+0x2dc>
        	if(strlen(wifiSSID) >= 1) {
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <takeWifiSSID+0x2a0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d031      	beq.n	80012be <takeWifiSSID+0x2d6>
        		wifiSSID[wifiNameLoc] = '\0';
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <takeWifiSSID+0x2a0>)
 800125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125e:	4413      	add	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3306      	adds	r3, #6
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4619      	mov	r1, r3
 800126e:	2001      	movs	r0, #1
 8001270:	f7ff faee 	bl	8000850 <lcd_delete_char>
        		HAL_Delay(50);
 8001274:	2032      	movs	r0, #50	; 0x32
 8001276:	f007 ff8b 	bl	8009190 <HAL_Delay>
        		if(writeLoc > 7) {
 800127a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127c:	2b07      	cmp	r3, #7
 800127e:	dd0d      	ble.n	800129c <takeWifiSSID+0x2b4>
        			writeLoc--;
 8001280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001282:	3b01      	subs	r3, #1
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001286:	e00e      	b.n	80012a6 <takeWifiSSID+0x2be>
 8001288:	20000bf0 	.word	0x20000bf0
 800128c:	20000944 	.word	0x20000944
 8001290:	20000948 	.word	0x20000948
 8001294:	40010800 	.word	0x40010800
 8001298:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 800129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129e:	2b06      	cmp	r3, #6
 80012a0:	dc01      	bgt.n	80012a6 <takeWifiSSID+0x2be>
        			writeLoc = 7;
 80012a2:	2307      	movs	r3, #7
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        		}

        		if(wifiNameLoc > 0) {
 80012a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	dd03      	ble.n	80012b4 <takeWifiSSID+0x2cc>
        			wifiNameLoc--;
 80012ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ae:	3b01      	subs	r3, #1
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
 80012b2:	e004      	b.n	80012be <takeWifiSSID+0x2d6>
        		} else if(wifiNameLoc < 0) {
 80012b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da01      	bge.n	80012be <takeWifiSSID+0x2d6>
        			wifiNameLoc = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
        		}
        	}

        	HAL_Delay(250);
 80012be:	20fa      	movs	r0, #250	; 0xfa
 80012c0:	f007 ff66 	bl	8009190 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <takeWifiSSID+0x2f4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff fa54 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012d2:	e6a8      	b.n	8001026 <takeWifiSSID+0x3e>
    }
}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000944 	.word	0x20000944

080012e0 <takeWifiPass>:

void takeWifiPass(int state) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    lcd_cursor(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff fae7 	bl	80008bc <lcd_cursor>

    if(state == 0) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d104      	bne.n	80012fe <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 80012f4:	2221      	movs	r2, #33	; 0x21
 80012f6:	2100      	movs	r1, #0
 80012f8:	48a1      	ldr	r0, [pc, #644]	; (8001580 <takeWifiPass+0x2a0>)
 80012fa:	f00b fe5d 	bl	800cfb8 <memset>
    }

    int realCharPos = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8001302:	4ba0      	ldr	r3, [pc, #640]	; (8001584 <takeWifiPass+0x2a4>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
    page = 1;
 8001308:	4b9f      	ldr	r3, [pc, #636]	; (8001588 <takeWifiPass+0x2a8>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8001312:	2307      	movs	r3, #7
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(3, 1);
 8001316:	2101      	movs	r1, #1
 8001318:	2003      	movs	r0, #3
 800131a:	f7ff fb15 	bl	8000948 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800131e:	2108      	movs	r1, #8
 8001320:	489a      	ldr	r0, [pc, #616]	; (800158c <takeWifiPass+0x2ac>)
 8001322:	f008 fd05 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d103      	bne.n	8001334 <takeWifiPass+0x54>
            lcd_cursor(0);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fac5 	bl	80008bc <lcd_cursor>

            break;
 8001332:	e14b      	b.n	80015cc <takeWifiPass+0x2ec>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001334:	2101      	movs	r1, #1
 8001336:	4895      	ldr	r0, [pc, #596]	; (800158c <takeWifiPass+0x2ac>)
 8001338:	f008 fcfa 	bl	8009d30 <HAL_GPIO_ReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d166      	bne.n	8001410 <takeWifiPass+0x130>
        	realCharPos++;
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	3301      	adds	r3, #1
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	2b50      	cmp	r3, #80	; 0x50
 800134c:	dd01      	ble.n	8001352 <takeWifiPass+0x72>
        	    realCharPos = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 8001352:	4b8c      	ldr	r3, [pc, #560]	; (8001584 <takeWifiPass+0x2a4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d152      	bne.n	8001400 <takeWifiPass+0x120>
            	if(page == 1) {
 800135a:	4b8b      	ldr	r3, [pc, #556]	; (8001588 <takeWifiPass+0x2a8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10c      	bne.n	800137c <takeWifiPass+0x9c>
            		cursorPosition = 1;
 8001362:	4b88      	ldr	r3, [pc, #544]	; (8001584 <takeWifiPass+0x2a4>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
            		page++;
 8001368:	4b87      	ldr	r3, [pc, #540]	; (8001588 <takeWifiPass+0x2a8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a86      	ldr	r2, [pc, #536]	; (8001588 <takeWifiPass+0x2a8>)
 8001370:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001372:	2102      	movs	r1, #2
 8001374:	2003      	movs	r0, #3
 8001376:	f7ff fae7 	bl	8000948 <printTemplate>
 800137a:	e046      	b.n	800140a <takeWifiPass+0x12a>
            	} else if(page == 2) {
 800137c:	4b82      	ldr	r3, [pc, #520]	; (8001588 <takeWifiPass+0x2a8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d10c      	bne.n	800139e <takeWifiPass+0xbe>
            		cursorPosition = 1;
 8001384:	4b7f      	ldr	r3, [pc, #508]	; (8001584 <takeWifiPass+0x2a4>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
            		page++;
 800138a:	4b7f      	ldr	r3, [pc, #508]	; (8001588 <takeWifiPass+0x2a8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	4a7d      	ldr	r2, [pc, #500]	; (8001588 <takeWifiPass+0x2a8>)
 8001392:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001394:	2103      	movs	r1, #3
 8001396:	2003      	movs	r0, #3
 8001398:	f7ff fad6 	bl	8000948 <printTemplate>
 800139c:	e035      	b.n	800140a <takeWifiPass+0x12a>
            	} else if(page == 3) {
 800139e:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <takeWifiPass+0x2a8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d10c      	bne.n	80013c0 <takeWifiPass+0xe0>
            		cursorPosition = 1;
 80013a6:	4b77      	ldr	r3, [pc, #476]	; (8001584 <takeWifiPass+0x2a4>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
            		page++;
 80013ac:	4b76      	ldr	r3, [pc, #472]	; (8001588 <takeWifiPass+0x2a8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a75      	ldr	r2, [pc, #468]	; (8001588 <takeWifiPass+0x2a8>)
 80013b4:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80013b6:	2104      	movs	r1, #4
 80013b8:	2003      	movs	r0, #3
 80013ba:	f7ff fac5 	bl	8000948 <printTemplate>
 80013be:	e024      	b.n	800140a <takeWifiPass+0x12a>
            	} else if(page == 4) {
 80013c0:	4b71      	ldr	r3, [pc, #452]	; (8001588 <takeWifiPass+0x2a8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d10c      	bne.n	80013e2 <takeWifiPass+0x102>
            		cursorPosition = 1;
 80013c8:	4b6e      	ldr	r3, [pc, #440]	; (8001584 <takeWifiPass+0x2a4>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
            		page++;
 80013ce:	4b6e      	ldr	r3, [pc, #440]	; (8001588 <takeWifiPass+0x2a8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a6c      	ldr	r2, [pc, #432]	; (8001588 <takeWifiPass+0x2a8>)
 80013d6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80013d8:	2105      	movs	r1, #5
 80013da:	2003      	movs	r0, #3
 80013dc:	f7ff fab4 	bl	8000948 <printTemplate>
 80013e0:	e013      	b.n	800140a <takeWifiPass+0x12a>
            	} else if(page == 5) {
 80013e2:	4b69      	ldr	r3, [pc, #420]	; (8001588 <takeWifiPass+0x2a8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d10f      	bne.n	800140a <takeWifiPass+0x12a>
            		cursorPosition = 1;
 80013ea:	4b66      	ldr	r3, [pc, #408]	; (8001584 <takeWifiPass+0x2a4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
            		page = 1;
 80013f0:	4b65      	ldr	r3, [pc, #404]	; (8001588 <takeWifiPass+0x2a8>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2003      	movs	r0, #3
 80013fa:	f7ff faa5 	bl	8000948 <printTemplate>
 80013fe:	e004      	b.n	800140a <takeWifiPass+0x12a>
            	}
            } else {
            	cursorPosition++;
 8001400:	4b60      	ldr	r3, [pc, #384]	; (8001584 <takeWifiPass+0x2a4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a5f      	ldr	r2, [pc, #380]	; (8001584 <takeWifiPass+0x2a4>)
 8001408:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800140a:	20fa      	movs	r0, #250	; 0xfa
 800140c:	f007 fec0 	bl	8009190 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001410:	2108      	movs	r1, #8
 8001412:	485f      	ldr	r0, [pc, #380]	; (8001590 <takeWifiPass+0x2b0>)
 8001414:	f008 fc8c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b01      	cmp	r3, #1
 800141c:	d15e      	bne.n	80014dc <takeWifiPass+0x1fc>
        	realCharPos--;
 800141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001420:	3b01      	subs	r3, #1
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 8001424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001426:	2b00      	cmp	r3, #0
 8001428:	dc01      	bgt.n	800142e <takeWifiPass+0x14e>
        	    realCharPos = 80;
 800142a:	2350      	movs	r3, #80	; 0x50
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 800142e:	4b55      	ldr	r3, [pc, #340]	; (8001584 <takeWifiPass+0x2a4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d14a      	bne.n	80014cc <takeWifiPass+0x1ec>
            	if(page == 1) {
 8001436:	4b54      	ldr	r3, [pc, #336]	; (8001588 <takeWifiPass+0x2a8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10a      	bne.n	8001454 <takeWifiPass+0x174>
            		cursorPosition = 16;
 800143e:	4b51      	ldr	r3, [pc, #324]	; (8001584 <takeWifiPass+0x2a4>)
 8001440:	2210      	movs	r2, #16
 8001442:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <takeWifiPass+0x2a8>)
 8001446:	2205      	movs	r2, #5
 8001448:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800144a:	2105      	movs	r1, #5
 800144c:	2003      	movs	r0, #3
 800144e:	f7ff fa7b 	bl	8000948 <printTemplate>
 8001452:	e040      	b.n	80014d6 <takeWifiPass+0x1f6>
            	} else if(page == 2) {
 8001454:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <takeWifiPass+0x2a8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d10a      	bne.n	8001472 <takeWifiPass+0x192>
            		cursorPosition = 16;
 800145c:	4b49      	ldr	r3, [pc, #292]	; (8001584 <takeWifiPass+0x2a4>)
 800145e:	2210      	movs	r2, #16
 8001460:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001462:	4b49      	ldr	r3, [pc, #292]	; (8001588 <takeWifiPass+0x2a8>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001468:	2101      	movs	r1, #1
 800146a:	2003      	movs	r0, #3
 800146c:	f7ff fa6c 	bl	8000948 <printTemplate>
 8001470:	e031      	b.n	80014d6 <takeWifiPass+0x1f6>
            	} else if(page == 3) {
 8001472:	4b45      	ldr	r3, [pc, #276]	; (8001588 <takeWifiPass+0x2a8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d10a      	bne.n	8001490 <takeWifiPass+0x1b0>
            		cursorPosition = 16;
 800147a:	4b42      	ldr	r3, [pc, #264]	; (8001584 <takeWifiPass+0x2a4>)
 800147c:	2210      	movs	r2, #16
 800147e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001480:	4b41      	ldr	r3, [pc, #260]	; (8001588 <takeWifiPass+0x2a8>)
 8001482:	2202      	movs	r2, #2
 8001484:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001486:	2102      	movs	r1, #2
 8001488:	2003      	movs	r0, #3
 800148a:	f7ff fa5d 	bl	8000948 <printTemplate>
 800148e:	e022      	b.n	80014d6 <takeWifiPass+0x1f6>
            	} else if(page == 4) {
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <takeWifiPass+0x2a8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d10a      	bne.n	80014ae <takeWifiPass+0x1ce>
            		cursorPosition = 16;
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <takeWifiPass+0x2a4>)
 800149a:	2210      	movs	r2, #16
 800149c:	601a      	str	r2, [r3, #0]
            		page = 3;
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <takeWifiPass+0x2a8>)
 80014a0:	2203      	movs	r2, #3
 80014a2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80014a4:	2103      	movs	r1, #3
 80014a6:	2003      	movs	r0, #3
 80014a8:	f7ff fa4e 	bl	8000948 <printTemplate>
 80014ac:	e013      	b.n	80014d6 <takeWifiPass+0x1f6>
            	} else if(page == 5) {
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <takeWifiPass+0x2a8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b05      	cmp	r3, #5
 80014b4:	d10f      	bne.n	80014d6 <takeWifiPass+0x1f6>
            		cursorPosition = 16;
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <takeWifiPass+0x2a4>)
 80014b8:	2210      	movs	r2, #16
 80014ba:	601a      	str	r2, [r3, #0]
            		page = 4;
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <takeWifiPass+0x2a8>)
 80014be:	2204      	movs	r2, #4
 80014c0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80014c2:	2104      	movs	r1, #4
 80014c4:	2003      	movs	r0, #3
 80014c6:	f7ff fa3f 	bl	8000948 <printTemplate>
 80014ca:	e004      	b.n	80014d6 <takeWifiPass+0x1f6>
            	}
            } else {
            	cursorPosition--;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <takeWifiPass+0x2a4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <takeWifiPass+0x2a4>)
 80014d4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80014d6:	20fa      	movs	r0, #250	; 0xfa
 80014d8:	f007 fe5a 	bl	8009190 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80014dc:	2102      	movs	r1, #2
 80014de:	482b      	ldr	r0, [pc, #172]	; (800158c <takeWifiPass+0x2ac>)
 80014e0:	f008 fc26 	bl	8009d30 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d128      	bne.n	800153c <takeWifiPass+0x25c>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fc56 	bl	8000da0 <getCharFromCursorPosition>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4a21      	ldr	r2, [pc, #132]	; (8001580 <takeWifiPass+0x2a0>)
 80014fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fc:	4413      	add	r3, r2
 80014fe:	460a      	mov	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	b2d9      	uxtb	r1, r3
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <takeWifiPass+0x2a0>)
 8001508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff f966 	bl	80007e2 <lcd_print_char>

            realCharPosLoc[wifiPassLoc] = realCharPos-1;
 8001516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3b01      	subs	r3, #1
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	f107 0208 	add.w	r2, r7, #8
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	4413      	add	r3, r2
 8001526:	460a      	mov	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 800152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152c:	3301      	adds	r3, #1
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiPassLoc++;
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	3301      	adds	r3, #1
 8001534:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 8001536:	20fa      	movs	r0, #250	; 0xfa
 8001538:	f007 fe2a 	bl	8009190 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800153c:	2104      	movs	r1, #4
 800153e:	4813      	ldr	r0, [pc, #76]	; (800158c <takeWifiPass+0x2ac>)
 8001540:	f008 fbf6 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d138      	bne.n	80015bc <takeWifiPass+0x2dc>
            if(strlen(wifiPass) >= 1) {
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <takeWifiPass+0x2a0>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d031      	beq.n	80015b6 <takeWifiPass+0x2d6>
            	wifiPass[wifiPassLoc] = '\0';
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <takeWifiPass+0x2a0>)
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	4413      	add	r3, r2
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3306      	adds	r3, #6
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4619      	mov	r1, r3
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff f972 	bl	8000850 <lcd_delete_char>
            	HAL_Delay(50);
 800156c:	2032      	movs	r0, #50	; 0x32
 800156e:	f007 fe0f 	bl	8009190 <HAL_Delay>

            	if(writeLoc > 7) {
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	2b07      	cmp	r3, #7
 8001576:	dd0d      	ble.n	8001594 <takeWifiPass+0x2b4>
            		writeLoc--;
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	3b01      	subs	r3, #1
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157e:	e00e      	b.n	800159e <takeWifiPass+0x2be>
 8001580:	20000c14 	.word	0x20000c14
 8001584:	20000944 	.word	0x20000944
 8001588:	20000948 	.word	0x20000948
 800158c:	40010800 	.word	0x40010800
 8001590:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 8001594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001596:	2b06      	cmp	r3, #6
 8001598:	dc01      	bgt.n	800159e <takeWifiPass+0x2be>
            		writeLoc = 7;
 800159a:	2307      	movs	r3, #7
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
            	}

            	if(wifiPassLoc > 0) {
 800159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	dd03      	ble.n	80015ac <takeWifiPass+0x2cc>
            		wifiPassLoc--;
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a6:	3b01      	subs	r3, #1
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
 80015aa:	e004      	b.n	80015b6 <takeWifiPass+0x2d6>
            	} else if(wifiPassLoc < 0) {
 80015ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da01      	bge.n	80015b6 <takeWifiPass+0x2d6>
            		wifiPassLoc = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
            	}
            }

            HAL_Delay(250);
 80015b6:	20fa      	movs	r0, #250	; 0xfa
 80015b8:	f007 fdea 	bl	8009190 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <takeWifiPass+0x2f4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4619      	mov	r1, r3
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff f8d8 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80015ca:	e6a8      	b.n	800131e <takeWifiPass+0x3e>
    }
}
 80015cc:	bf00      	nop
 80015ce:	3738      	adds	r7, #56	; 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000944 	.word	0x20000944

080015d8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int defaultStartPos, int defaultStartLine, const char* defaultText) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
	//lcd_gotoxy(startLine, startPos);

	lcd_clear_line(startLine);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff f91c 	bl	8000824 <lcd_clear_line>

	lcd_print(defaultStartLine, defaultStartPos, defaultText);
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	b2d1      	uxtb	r1, r2
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f8de 	bl	80007b8 <lcd_print>

	for(int z=0; z < strlen(text); z++) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e023      	b.n	800164a <slideText+0x72>
		for(int i=startPos + z; i < strlen(text); i++) {
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	4413      	add	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	e014      	b.n	8001636 <slideText+0x5e>
			lcd_print_char(startLine, i-z, text[i]);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	b2d8      	uxtb	r0, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b2d9      	uxtb	r1, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	f7ff f8dc 	bl	80007e2 <lcd_print_char>
			HAL_Delay(50);
 800162a:	2032      	movs	r0, #50	; 0x32
 800162c:	f007 fdb0 	bl	8009190 <HAL_Delay>
		for(int i=startPos + z; i < strlen(text); i++) {
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	3301      	adds	r3, #1
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7fe fdf4 	bl	8000224 <strlen>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8e3      	bhi.n	800160c <slideText+0x34>
	for(int z=0; z < strlen(text); z++) {
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7fe fdea 	bl	8000224 <strlen>
 8001650:	4602      	mov	r2, r0
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8d4      	bhi.n	8001602 <slideText+0x2a>
		}
	}
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af02      	add	r7, sp, #8
 800166a:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800166c:	2101      	movs	r1, #1
 800166e:	488f      	ldr	r0, [pc, #572]	; (80018ac <menu+0x248>)
 8001670:	f008 fb5e 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001674:	4603      	mov	r3, r0
 8001676:	2b01      	cmp	r3, #1
 8001678:	f040 808e 	bne.w	8001798 <menu+0x134>
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <menu+0x24c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	f083 0301 	eor.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8086 	beq.w	8001798 <menu+0x134>
		menuSayac = menuSayac+1;
 800168c:	4b89      	ldr	r3, [pc, #548]	; (80018b4 <menu+0x250>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b87      	ldr	r3, [pc, #540]	; (80018b4 <menu+0x250>)
 8001696:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001698:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <menu+0x250>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b24      	cmp	r3, #36	; 0x24
 800169e:	d102      	bne.n	80016a6 <menu+0x42>
			menuSayac = 1;
 80016a0:	4b84      	ldr	r3, [pc, #528]	; (80018b4 <menu+0x250>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80016a6:	4b83      	ldr	r3, [pc, #524]	; (80018b4 <menu+0x250>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b12      	cmp	r3, #18
 80016ac:	d106      	bne.n	80016bc <menu+0x58>
 80016ae:	4b82      	ldr	r3, [pc, #520]	; (80018b8 <menu+0x254>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <menu+0x58>
			menuSayac = 21;
 80016b6:	4b7f      	ldr	r3, [pc, #508]	; (80018b4 <menu+0x250>)
 80016b8:	2215      	movs	r2, #21
 80016ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80016bc:	4b7d      	ldr	r3, [pc, #500]	; (80018b4 <menu+0x250>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d106      	bne.n	80016d2 <menu+0x6e>
 80016c4:	4b7d      	ldr	r3, [pc, #500]	; (80018bc <menu+0x258>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <menu+0x6e>
			menuSayac = 16;
 80016cc:	4b79      	ldr	r3, [pc, #484]	; (80018b4 <menu+0x250>)
 80016ce:	2210      	movs	r2, #16
 80016d0:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80016d2:	4b78      	ldr	r3, [pc, #480]	; (80018b4 <menu+0x250>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b0d      	cmp	r3, #13
 80016d8:	d106      	bne.n	80016e8 <menu+0x84>
 80016da:	4b78      	ldr	r3, [pc, #480]	; (80018bc <menu+0x258>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d102      	bne.n	80016e8 <menu+0x84>
			menuSayac = 16;
 80016e2:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <menu+0x250>)
 80016e4:	2210      	movs	r2, #16
 80016e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80016e8:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <menu+0x250>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b09      	cmp	r3, #9
 80016ee:	d106      	bne.n	80016fe <menu+0x9a>
 80016f0:	4b72      	ldr	r3, [pc, #456]	; (80018bc <menu+0x258>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d102      	bne.n	80016fe <menu+0x9a>
			menuSayac = 13;
 80016f8:	4b6e      	ldr	r3, [pc, #440]	; (80018b4 <menu+0x250>)
 80016fa:	220d      	movs	r2, #13
 80016fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80016fe:	4b6d      	ldr	r3, [pc, #436]	; (80018b4 <menu+0x250>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b0a      	cmp	r3, #10
 8001704:	d10a      	bne.n	800171c <menu+0xb8>
 8001706:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <menu+0x25c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d003      	beq.n	8001716 <menu+0xb2>
 800170e:	4b6c      	ldr	r3, [pc, #432]	; (80018c0 <menu+0x25c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d102      	bne.n	800171c <menu+0xb8>
			menuSayac = 11;
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <menu+0x250>)
 8001718:	220b      	movs	r2, #11
 800171a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800171c:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <menu+0x250>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b0c      	cmp	r3, #12
 8001722:	d10e      	bne.n	8001742 <menu+0xde>
 8001724:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <menu+0x260>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d003      	beq.n	8001734 <menu+0xd0>
 800172c:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <menu+0x260>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d106      	bne.n	8001742 <menu+0xde>
 8001734:	4b61      	ldr	r3, [pc, #388]	; (80018bc <menu+0x258>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <menu+0xde>
			menuSayac = 16;
 800173c:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <menu+0x250>)
 800173e:	2210      	movs	r2, #16
 8001740:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <menu+0x250>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d10e      	bne.n	8001768 <menu+0x104>
 800174a:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <menu+0x260>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d003      	beq.n	800175a <menu+0xf6>
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <menu+0x260>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d106      	bne.n	8001768 <menu+0x104>
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <menu+0x258>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d102      	bne.n	8001768 <menu+0x104>
			menuSayac = 13;
 8001762:	4b54      	ldr	r3, [pc, #336]	; (80018b4 <menu+0x250>)
 8001764:	220d      	movs	r2, #13
 8001766:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001768:	4b52      	ldr	r3, [pc, #328]	; (80018b4 <menu+0x250>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d106      	bne.n	800177e <menu+0x11a>
 8001770:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <menu+0x264>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <menu+0x11a>
			menuSayac = 16;
 8001778:	4b4e      	ldr	r3, [pc, #312]	; (80018b4 <menu+0x250>)
 800177a:	2210      	movs	r2, #16
 800177c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800177e:	4b4d      	ldr	r3, [pc, #308]	; (80018b4 <menu+0x250>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b18      	cmp	r3, #24
 8001784:	d106      	bne.n	8001794 <menu+0x130>
 8001786:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <menu+0x254>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <menu+0x130>
			menuSayac = 26;
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <menu+0x250>)
 8001790:	221a      	movs	r2, #26
 8001792:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001794:	f004 fcf0 	bl	8006178 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001798:	2108      	movs	r1, #8
 800179a:	484c      	ldr	r0, [pc, #304]	; (80018cc <menu+0x268>)
 800179c:	f008 fac8 	bl	8009d30 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d175      	bne.n	8001892 <menu+0x22e>
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <menu+0x24c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	f083 0301 	eor.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d06e      	beq.n	8001892 <menu+0x22e>
		if (menuSayac <= 1) {
 80017b4:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <menu+0x250>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d802      	bhi.n	80017c2 <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80017bc:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <menu+0x250>)
 80017be:	2224      	movs	r2, #36	; 0x24
 80017c0:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80017c2:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <menu+0x250>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <menu+0x250>)
 80017cc:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <menu+0x250>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b14      	cmp	r3, #20
 80017d4:	d106      	bne.n	80017e4 <menu+0x180>
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <menu+0x254>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <menu+0x180>
			menuSayac = 17;
 80017de:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <menu+0x250>)
 80017e0:	2211      	movs	r2, #17
 80017e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80017e4:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <menu+0x250>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d106      	bne.n	80017fa <menu+0x196>
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <menu+0x258>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <menu+0x196>
			menuSayac = 7;
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <menu+0x250>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <menu+0x250>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	d106      	bne.n	8001810 <menu+0x1ac>
 8001802:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <menu+0x258>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d102      	bne.n	8001810 <menu+0x1ac>
			menuSayac = 12;
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <menu+0x250>)
 800180c:	220c      	movs	r2, #12
 800180e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <menu+0x250>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b0c      	cmp	r3, #12
 8001816:	d106      	bne.n	8001826 <menu+0x1c2>
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <menu+0x258>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d102      	bne.n	8001826 <menu+0x1c2>
			menuSayac = 8;
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <menu+0x250>)
 8001822:	2208      	movs	r2, #8
 8001824:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <menu+0x250>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b0a      	cmp	r3, #10
 800182c:	d10a      	bne.n	8001844 <menu+0x1e0>
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <menu+0x25c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d003      	beq.n	800183e <menu+0x1da>
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <menu+0x25c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d102      	bne.n	8001844 <menu+0x1e0>
			menuSayac = 9;
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <menu+0x250>)
 8001840:	2209      	movs	r2, #9
 8001842:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <menu+0x250>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d10a      	bne.n	8001862 <menu+0x1fe>
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <menu+0x260>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d003      	beq.n	800185c <menu+0x1f8>
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <menu+0x260>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d102      	bne.n	8001862 <menu+0x1fe>
			menuSayac = 11;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <menu+0x250>)
 800185e:	220b      	movs	r2, #11
 8001860:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <menu+0x250>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	d106      	bne.n	8001878 <menu+0x214>
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <menu+0x264>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d102      	bne.n	8001878 <menu+0x214>
			menuSayac = 14;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <menu+0x250>)
 8001874:	220e      	movs	r2, #14
 8001876:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <menu+0x250>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b19      	cmp	r3, #25
 800187e:	d106      	bne.n	800188e <menu+0x22a>
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <menu+0x254>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <menu+0x22a>
			menuSayac = 23;
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <menu+0x250>)
 800188a:	2217      	movs	r2, #23
 800188c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800188e:	f004 fc73 	bl	8006178 <bekle>
	}

	if (menuSayac == 0) {
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <menu+0x250>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d134      	bne.n	8001904 <menu+0x2a0>
		if(dilSecim == 0) {
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <menu+0x26c>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d122      	bne.n	80018e8 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <menu+0x270>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	2001      	movs	r0, #1
 80018a8:	e016      	b.n	80018d8 <menu+0x274>
 80018aa:	bf00      	nop
 80018ac:	40010800 	.word	0x40010800
 80018b0:	20000c68 	.word	0x20000c68
 80018b4:	20000c39 	.word	0x20000c39
 80018b8:	20000c48 	.word	0x20000c48
 80018bc:	20000c41 	.word	0x20000c41
 80018c0:	20000c42 	.word	0x20000c42
 80018c4:	20000c43 	.word	0x20000c43
 80018c8:	20000c44 	.word	0x20000c44
 80018cc:	40011000 	.word	0x40011000
 80018d0:	20000c5a 	.word	0x20000c5a
 80018d4:	0800d9c0 	.word	0x0800d9c0
 80018d8:	f7fe ff6e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80018dc:	4a94      	ldr	r2, [pc, #592]	; (8001b30 <menu+0x4cc>)
 80018de:	2101      	movs	r1, #1
 80018e0:	2002      	movs	r0, #2
 80018e2:	f7fe ff69 	bl	80007b8 <lcd_print>
 80018e6:	e00d      	b.n	8001904 <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 80018e8:	4b92      	ldr	r3, [pc, #584]	; (8001b34 <menu+0x4d0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d109      	bne.n	8001904 <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 80018f0:	4a91      	ldr	r2, [pc, #580]	; (8001b38 <menu+0x4d4>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7fe ff5f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80018fa:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <menu+0x4d8>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2002      	movs	r0, #2
 8001900:	f7fe ff5a 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001904:	4b8e      	ldr	r3, [pc, #568]	; (8001b40 <menu+0x4dc>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 82b5 	bne.w	8001e78 <menu+0x814>
		if(dilSecim == 0) {
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <menu+0x4d0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001916:	4a8b      	ldr	r2, [pc, #556]	; (8001b44 <menu+0x4e0>)
 8001918:	2101      	movs	r1, #1
 800191a:	2001      	movs	r0, #1
 800191c:	f7fe ff4c 	bl	80007b8 <lcd_print>
 8001920:	e008      	b.n	8001934 <menu+0x2d0>
		} else if(dilSecim == 1) {
 8001922:	4b84      	ldr	r3, [pc, #528]	; (8001b34 <menu+0x4d0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d104      	bne.n	8001934 <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800192a:	4a87      	ldr	r2, [pc, #540]	; (8001b48 <menu+0x4e4>)
 800192c:	2101      	movs	r1, #1
 800192e:	2001      	movs	r0, #1
 8001930:	f7fe ff42 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001934:	4b85      	ldr	r3, [pc, #532]	; (8001b4c <menu+0x4e8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d123      	bne.n	8001984 <menu+0x320>
			if(dilSecim == 0) {
 800193c:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <menu+0x4d0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001944:	4a82      	ldr	r2, [pc, #520]	; (8001b50 <menu+0x4ec>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f7fe ff35 	bl	80007b8 <lcd_print>
 800194e:	e008      	b.n	8001962 <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001950:	4b78      	ldr	r3, [pc, #480]	; (8001b34 <menu+0x4d0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d104      	bne.n	8001962 <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 8001958:	4a7e      	ldr	r2, [pc, #504]	; (8001b54 <menu+0x4f0>)
 800195a:	2101      	movs	r1, #1
 800195c:	2002      	movs	r0, #2
 800195e:	f7fe ff2b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001962:	4a7d      	ldr	r2, [pc, #500]	; (8001b58 <menu+0x4f4>)
 8001964:	210f      	movs	r1, #15
 8001966:	2002      	movs	r0, #2
 8001968:	f7fe ff26 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800196c:	4b7b      	ldr	r3, [pc, #492]	; (8001b5c <menu+0x4f8>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	220a      	movs	r2, #10
 8001972:	497b      	ldr	r1, [pc, #492]	; (8001b60 <menu+0x4fc>)
 8001974:	4618      	mov	r0, r3
 8001976:	f00b fa07 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 800197a:	4a79      	ldr	r2, [pc, #484]	; (8001b60 <menu+0x4fc>)
 800197c:	210e      	movs	r1, #14
 800197e:	2002      	movs	r0, #2
 8001980:	f7fe ff1a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001984:	4b71      	ldr	r3, [pc, #452]	; (8001b4c <menu+0x4e8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d123      	bne.n	80019d4 <menu+0x370>
			if(dilSecim == 0) {
 800198c:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <menu+0x4d0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001994:	4a73      	ldr	r2, [pc, #460]	; (8001b64 <menu+0x500>)
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f7fe ff0d 	bl	80007b8 <lcd_print>
 800199e:	e008      	b.n	80019b2 <menu+0x34e>
			} else if(dilSecim == 1) {
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <menu+0x4d0>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d104      	bne.n	80019b2 <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 80019a8:	4a6f      	ldr	r2, [pc, #444]	; (8001b68 <menu+0x504>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	2002      	movs	r0, #2
 80019ae:	f7fe ff03 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019b2:	4a6e      	ldr	r2, [pc, #440]	; (8001b6c <menu+0x508>)
 80019b4:	210f      	movs	r1, #15
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7fe fefe 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80019bc:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <menu+0x50c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	220a      	movs	r2, #10
 80019c2:	4967      	ldr	r1, [pc, #412]	; (8001b60 <menu+0x4fc>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00b f9df 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <menu+0x4fc>)
 80019cc:	210e      	movs	r1, #14
 80019ce:	2002      	movs	r0, #2
 80019d0:	f7fe fef2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80019d4:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <menu+0x4e8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d123      	bne.n	8001a24 <menu+0x3c0>
			if(dilSecim == 0) {
 80019dc:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <menu+0x4d0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80019e4:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <menu+0x510>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	2002      	movs	r0, #2
 80019ea:	f7fe fee5 	bl	80007b8 <lcd_print>
 80019ee:	e008      	b.n	8001a02 <menu+0x39e>
			} else if(dilSecim == 1) {
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <menu+0x4d0>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d104      	bne.n	8001a02 <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 80019f8:	4a5f      	ldr	r2, [pc, #380]	; (8001b78 <menu+0x514>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	2002      	movs	r0, #2
 80019fe:	f7fe fedb 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a02:	4a5a      	ldr	r2, [pc, #360]	; (8001b6c <menu+0x508>)
 8001a04:	210f      	movs	r1, #15
 8001a06:	2002      	movs	r0, #2
 8001a08:	f7fe fed6 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <menu+0x518>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	220a      	movs	r2, #10
 8001a12:	4953      	ldr	r1, [pc, #332]	; (8001b60 <menu+0x4fc>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00b f9b7 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 8001a1a:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <menu+0x4fc>)
 8001a1c:	210e      	movs	r1, #14
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f7fe feca 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001a24:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <menu+0x4e8>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d123      	bne.n	8001a74 <menu+0x410>
			if(dilSecim == 0) {
 8001a2c:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <menu+0x4d0>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001a34:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <menu+0x51c>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7fe febd 	bl	80007b8 <lcd_print>
 8001a3e:	e008      	b.n	8001a52 <menu+0x3ee>
			} else if(dilSecim == 1) {
 8001a40:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <menu+0x4d0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d104      	bne.n	8001a52 <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <menu+0x520>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f7fe feb3 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a52:	4a46      	ldr	r2, [pc, #280]	; (8001b6c <menu+0x508>)
 8001a54:	210f      	movs	r1, #15
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7fe feae 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <menu+0x524>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	220a      	movs	r2, #10
 8001a62:	493f      	ldr	r1, [pc, #252]	; (8001b60 <menu+0x4fc>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00b f98f 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	; (8001b60 <menu+0x4fc>)
 8001a6c:	210e      	movs	r1, #14
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7fe fea2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <menu+0x4e8>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d123      	bne.n	8001ac4 <menu+0x460>
			if(dilSecim == 0) {
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <menu+0x4d0>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001a84:	4a41      	ldr	r2, [pc, #260]	; (8001b8c <menu+0x528>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f7fe fe95 	bl	80007b8 <lcd_print>
 8001a8e:	e008      	b.n	8001aa2 <menu+0x43e>
			} else if(dilSecim == 1) {
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <menu+0x4d0>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d104      	bne.n	8001aa2 <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 8001a98:	4a3d      	ldr	r2, [pc, #244]	; (8001b90 <menu+0x52c>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f7fe fe8b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001aa2:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <menu+0x508>)
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f7fe fe86 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <menu+0x530>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	492b      	ldr	r1, [pc, #172]	; (8001b60 <menu+0x4fc>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f00b f967 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 8001aba:	4a29      	ldr	r2, [pc, #164]	; (8001b60 <menu+0x4fc>)
 8001abc:	210e      	movs	r1, #14
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f7fe fe7a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <menu+0x4e8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d123      	bne.n	8001b14 <menu+0x4b0>
			if(dilSecim == 0) {
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <menu+0x4d0>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001ad4:	4a30      	ldr	r2, [pc, #192]	; (8001b98 <menu+0x534>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7fe fe6d 	bl	80007b8 <lcd_print>
 8001ade:	e008      	b.n	8001af2 <menu+0x48e>
			} else if(dilSecim == 1) {
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <menu+0x4d0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d104      	bne.n	8001af2 <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 8001ae8:	4a2c      	ldr	r2, [pc, #176]	; (8001b9c <menu+0x538>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7fe fe63 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <menu+0x508>)
 8001af4:	210f      	movs	r1, #15
 8001af6:	2002      	movs	r0, #2
 8001af8:	f7fe fe5e 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <menu+0x53c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	220a      	movs	r2, #10
 8001b02:	4917      	ldr	r1, [pc, #92]	; (8001b60 <menu+0x4fc>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00b f93f 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 8001b0a:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <menu+0x4fc>)
 8001b0c:	210e      	movs	r1, #14
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7fe fe52 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <menu+0x4e8>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b06      	cmp	r3, #6
 8001b1a:	d15f      	bne.n	8001bdc <menu+0x578>
			if(dilSecim == 0) {
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <menu+0x4d0>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d141      	bne.n	8001ba8 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <menu+0x540>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f7fe fe45 	bl	80007b8 <lcd_print>
 8001b2e:	e044      	b.n	8001bba <menu+0x556>
 8001b30:	0800d9d4 	.word	0x0800d9d4
 8001b34:	20000c5a 	.word	0x20000c5a
 8001b38:	0800d9e8 	.word	0x0800d9e8
 8001b3c:	0800d9fc 	.word	0x0800d9fc
 8001b40:	20000c39 	.word	0x20000c39
 8001b44:	0800da10 	.word	0x0800da10
 8001b48:	0800da24 	.word	0x0800da24
 8001b4c:	20000c3b 	.word	0x20000c3b
 8001b50:	0800da38 	.word	0x0800da38
 8001b54:	0800da48 	.word	0x0800da48
 8001b58:	0800da58 	.word	0x0800da58
 8001b5c:	20000c5b 	.word	0x20000c5b
 8001b60:	20000bbc 	.word	0x20000bbc
 8001b64:	0800da5c 	.word	0x0800da5c
 8001b68:	0800da6c 	.word	0x0800da6c
 8001b6c:	0800da7c 	.word	0x0800da7c
 8001b70:	20000c5c 	.word	0x20000c5c
 8001b74:	0800da80 	.word	0x0800da80
 8001b78:	0800da90 	.word	0x0800da90
 8001b7c:	20000c5d 	.word	0x20000c5d
 8001b80:	0800daa0 	.word	0x0800daa0
 8001b84:	0800dab0 	.word	0x0800dab0
 8001b88:	20000c5e 	.word	0x20000c5e
 8001b8c:	0800dac0 	.word	0x0800dac0
 8001b90:	0800dad0 	.word	0x0800dad0
 8001b94:	20000c5f 	.word	0x20000c5f
 8001b98:	0800dae0 	.word	0x0800dae0
 8001b9c:	0800daf0 	.word	0x0800daf0
 8001ba0:	20000c60 	.word	0x20000c60
 8001ba4:	0800db00 	.word	0x0800db00
			} else if(dilSecim == 1) {
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <menu+0x684>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d104      	bne.n	8001bba <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <menu+0x688>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f7fe fdff 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bba:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <menu+0x68c>)
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7fe fdfa 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <menu+0x690>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	220a      	movs	r2, #10
 8001bca:	494b      	ldr	r1, [pc, #300]	; (8001cf8 <menu+0x694>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00b f8db 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 8001bd2:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <menu+0x694>)
 8001bd4:	210e      	movs	r1, #14
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f7fe fdee 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001bdc:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <menu+0x698>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d123      	bne.n	8001c2c <menu+0x5c8>
			if(dilSecim == 0) {
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <menu+0x684>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001bec:	4a44      	ldr	r2, [pc, #272]	; (8001d00 <menu+0x69c>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7fe fde1 	bl	80007b8 <lcd_print>
 8001bf6:	e008      	b.n	8001c0a <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <menu+0x684>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d104      	bne.n	8001c0a <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001c00:	4a40      	ldr	r2, [pc, #256]	; (8001d04 <menu+0x6a0>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	2002      	movs	r0, #2
 8001c06:	f7fe fdd7 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c0a:	4a39      	ldr	r2, [pc, #228]	; (8001cf0 <menu+0x68c>)
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7fe fdd2 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001c14:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <menu+0x6a4>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	220a      	movs	r2, #10
 8001c1a:	4937      	ldr	r1, [pc, #220]	; (8001cf8 <menu+0x694>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00b f8b3 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 8001c22:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <menu+0x694>)
 8001c24:	210e      	movs	r1, #14
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7fe fdc6 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <menu+0x698>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d123      	bne.n	8001c7c <menu+0x618>
			if(dilSecim == 0) {
 8001c34:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <menu+0x684>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001c3c:	4a33      	ldr	r2, [pc, #204]	; (8001d0c <menu+0x6a8>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7fe fdb9 	bl	80007b8 <lcd_print>
 8001c46:	e008      	b.n	8001c5a <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <menu+0x684>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d104      	bne.n	8001c5a <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001c50:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <menu+0x6ac>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7fe fdaf 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c5a:	4a25      	ldr	r2, [pc, #148]	; (8001cf0 <menu+0x68c>)
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f7fe fdaa 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <menu+0x6b0>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	220a      	movs	r2, #10
 8001c6a:	4923      	ldr	r1, [pc, #140]	; (8001cf8 <menu+0x694>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00b f88b 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 8001c72:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <menu+0x694>)
 8001c74:	210e      	movs	r1, #14
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7fe fd9e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <menu+0x698>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	d123      	bne.n	8001ccc <menu+0x668>
			if(dilSecim == 0) {
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <menu+0x684>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001c8c:	4a22      	ldr	r2, [pc, #136]	; (8001d18 <menu+0x6b4>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	2002      	movs	r0, #2
 8001c92:	f7fe fd91 	bl	80007b8 <lcd_print>
 8001c96:	e008      	b.n	8001caa <menu+0x646>
			} else if(dilSecim == 1) {
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <menu+0x684>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d104      	bne.n	8001caa <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001ca0:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <menu+0x6b8>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f7fe fd87 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <menu+0x6bc>)
 8001cac:	2110      	movs	r1, #16
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f7fe fd82 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <menu+0x6c0>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	220a      	movs	r2, #10
 8001cba:	490f      	ldr	r1, [pc, #60]	; (8001cf8 <menu+0x694>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00b f863 	bl	800cd88 <itoa>
			lcd_print(2, 15, snum);
 8001cc2:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <menu+0x694>)
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f7fe fd76 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <menu+0x698>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b0a      	cmp	r3, #10
 8001cd2:	d134      	bne.n	8001d3e <menu+0x6da>
			if(dilSecim == 0) {
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <menu+0x684>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d127      	bne.n	8001d2c <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <menu+0x6c4>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f7fe fd69 	bl	80007b8 <lcd_print>
 8001ce6:	e02a      	b.n	8001d3e <menu+0x6da>
 8001ce8:	20000c5a 	.word	0x20000c5a
 8001cec:	0800db10 	.word	0x0800db10
 8001cf0:	0800da7c 	.word	0x0800da7c
 8001cf4:	20000c61 	.word	0x20000c61
 8001cf8:	20000bbc 	.word	0x20000bbc
 8001cfc:	20000c3b 	.word	0x20000c3b
 8001d00:	0800db20 	.word	0x0800db20
 8001d04:	0800db30 	.word	0x0800db30
 8001d08:	20000c62 	.word	0x20000c62
 8001d0c:	0800db40 	.word	0x0800db40
 8001d10:	0800db50 	.word	0x0800db50
 8001d14:	20000c63 	.word	0x20000c63
 8001d18:	0800db60 	.word	0x0800db60
 8001d1c:	0800db70 	.word	0x0800db70
 8001d20:	0800db80 	.word	0x0800db80
 8001d24:	20000c64 	.word	0x20000c64
 8001d28:	0800db84 	.word	0x0800db84
			} else if(dilSecim == 1) {
 8001d2c:	4b82      	ldr	r3, [pc, #520]	; (8001f38 <menu+0x8d4>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d104      	bne.n	8001d3e <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001d34:	4a81      	ldr	r2, [pc, #516]	; (8001f3c <menu+0x8d8>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f7fe fd3d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d3e:	2102      	movs	r1, #2
 8001d40:	487f      	ldr	r0, [pc, #508]	; (8001f40 <menu+0x8dc>)
 8001d42:	f007 fff5 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d119      	bne.n	8001d80 <menu+0x71c>
 8001d4c:	4b7d      	ldr	r3, [pc, #500]	; (8001f44 <menu+0x8e0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d012      	beq.n	8001d80 <menu+0x71c>
 8001d5a:	4b7b      	ldr	r3, [pc, #492]	; (8001f48 <menu+0x8e4>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10e      	bne.n	8001d80 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001d62:	4b7a      	ldr	r3, [pc, #488]	; (8001f4c <menu+0x8e8>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <menu+0x8e8>)
 8001d6c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001d6e:	4b77      	ldr	r3, [pc, #476]	; (8001f4c <menu+0x8e8>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b0a      	cmp	r3, #10
 8001d74:	d902      	bls.n	8001d7c <menu+0x718>
				hataGostermeSirasi = 0;
 8001d76:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <menu+0x8e8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d7c:	f004 f9fc 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d80:	2104      	movs	r1, #4
 8001d82:	486f      	ldr	r0, [pc, #444]	; (8001f40 <menu+0x8dc>)
 8001d84:	f007 ffd4 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d119      	bne.n	8001dc2 <menu+0x75e>
 8001d8e:	4b6d      	ldr	r3, [pc, #436]	; (8001f44 <menu+0x8e0>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f083 0301 	eor.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d012      	beq.n	8001dc2 <menu+0x75e>
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <menu+0x8e4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10e      	bne.n	8001dc2 <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001da4:	4b69      	ldr	r3, [pc, #420]	; (8001f4c <menu+0x8e8>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <menu+0x8e8>)
 8001dae:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001db0:	4b66      	ldr	r3, [pc, #408]	; (8001f4c <menu+0x8e8>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b0b      	cmp	r3, #11
 8001db6:	d902      	bls.n	8001dbe <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8001db8:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <menu+0x8e8>)
 8001dba:	220a      	movs	r2, #10
 8001dbc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001dbe:	f004 f9db 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	485e      	ldr	r0, [pc, #376]	; (8001f40 <menu+0x8dc>)
 8001dc6:	f007 ffb3 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d153      	bne.n	8001e78 <menu+0x814>
 8001dd0:	4b5c      	ldr	r3, [pc, #368]	; (8001f44 <menu+0x8e0>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d04c      	beq.n	8001e78 <menu+0x814>
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <menu+0x8e8>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d148      	bne.n	8001e78 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 8001de6:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <menu+0x8ec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <menu+0x8f0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001df4:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <menu+0x8f4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <menu+0x8f0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001e02:	4b56      	ldr	r3, [pc, #344]	; (8001f5c <menu+0x8f8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	4b52      	ldr	r3, [pc, #328]	; (8001f54 <menu+0x8f0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <menu+0x8fc>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
 8001e16:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <menu+0x8f0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001e1e:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <menu+0x900>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <menu+0x8f0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001e2c:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <menu+0x904>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	4b48      	ldr	r3, [pc, #288]	; (8001f54 <menu+0x8f0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001e3a:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <menu+0x908>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <menu+0x8f0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001e48:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <menu+0x90c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <menu+0x8f0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <menu+0x910>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <menu+0x8f0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001e64:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <menu+0x914>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <menu+0x8f0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001e72:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <menu+0x918>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001e78:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <menu+0x91c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f040 80fc 	bne.w	800207a <menu+0xa16>
		if(dilSecim == 0) {
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <menu+0x8d4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001e8a:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <menu+0x920>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f7fe fc92 	bl	80007b8 <lcd_print>
 8001e94:	e008      	b.n	8001ea8 <menu+0x844>
		} else if(dilSecim == 1) {
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <menu+0x8d4>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d104      	bne.n	8001ea8 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001e9e:	4a3a      	ldr	r2, [pc, #232]	; (8001f88 <menu+0x924>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7fe fc88 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <menu+0x8e4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d003      	beq.n	8001eb8 <menu+0x854>
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <menu+0x8e4>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d112      	bne.n	8001ede <menu+0x87a>
			if(dilSecim == 0) {
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <menu+0x8d4>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001ec0:	4a32      	ldr	r2, [pc, #200]	; (8001f8c <menu+0x928>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7fe fc77 	bl	80007b8 <lcd_print>
 8001eca:	e008      	b.n	8001ede <menu+0x87a>
			} else if(dilSecim == 1) {
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <menu+0x8d4>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d104      	bne.n	8001ede <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001ed4:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <menu+0x92c>)
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7fe fc6d 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <menu+0x930>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <menu+0x8b0>
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <menu+0x8e4>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d112      	bne.n	8001f14 <menu+0x8b0>
			if(dilSecim == 0) {
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <menu+0x8d4>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001ef6:	4a28      	ldr	r2, [pc, #160]	; (8001f98 <menu+0x934>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2002      	movs	r0, #2
 8001efc:	f7fe fc5c 	bl	80007b8 <lcd_print>
 8001f00:	e008      	b.n	8001f14 <menu+0x8b0>
			} else if(dilSecim == 1) {
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <menu+0x8d4>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d104      	bne.n	8001f14 <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 8001f0a:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <menu+0x938>)
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f7fe fc52 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <menu+0x930>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d14c      	bne.n	8001fb6 <menu+0x952>
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <menu+0x8e4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d148      	bne.n	8001fb6 <menu+0x952>
			if(dilSecim == 0) {
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <menu+0x8d4>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d13b      	bne.n	8001fa4 <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 8001f2c:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <menu+0x93c>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	2002      	movs	r0, #2
 8001f32:	f7fe fc41 	bl	80007b8 <lcd_print>
 8001f36:	e03e      	b.n	8001fb6 <menu+0x952>
 8001f38:	20000c5a 	.word	0x20000c5a
 8001f3c:	0800db98 	.word	0x0800db98
 8001f40:	40010800 	.word	0x40010800
 8001f44:	20000c68 	.word	0x20000c68
 8001f48:	20000c48 	.word	0x20000c48
 8001f4c:	20000c3b 	.word	0x20000c3b
 8001f50:	20000c5b 	.word	0x20000c5b
 8001f54:	20000b28 	.word	0x20000b28
 8001f58:	20000c5c 	.word	0x20000c5c
 8001f5c:	20000c5d 	.word	0x20000c5d
 8001f60:	20000c5e 	.word	0x20000c5e
 8001f64:	20000c5f 	.word	0x20000c5f
 8001f68:	20000c60 	.word	0x20000c60
 8001f6c:	20000c61 	.word	0x20000c61
 8001f70:	20000c62 	.word	0x20000c62
 8001f74:	20000c63 	.word	0x20000c63
 8001f78:	20000c64 	.word	0x20000c64
 8001f7c:	20000c65 	.word	0x20000c65
 8001f80:	20000c39 	.word	0x20000c39
 8001f84:	0800dbac 	.word	0x0800dbac
 8001f88:	0800dbc0 	.word	0x0800dbc0
 8001f8c:	0800dbd4 	.word	0x0800dbd4
 8001f90:	0800dbe8 	.word	0x0800dbe8
 8001f94:	20000c3a 	.word	0x20000c3a
 8001f98:	0800dbfc 	.word	0x0800dbfc
 8001f9c:	0800dc0c 	.word	0x0800dc0c
 8001fa0:	0800dc1c 	.word	0x0800dc1c
			} else if(dilSecim == 1) {
 8001fa4:	4b98      	ldr	r3, [pc, #608]	; (8002208 <menu+0xba4>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d104      	bne.n	8001fb6 <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 8001fac:	4a97      	ldr	r2, [pc, #604]	; (800220c <menu+0xba8>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7fe fc01 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	4895      	ldr	r0, [pc, #596]	; (8002210 <menu+0xbac>)
 8001fba:	f007 feb9 	bl	8009d30 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d119      	bne.n	8001ff8 <menu+0x994>
 8001fc4:	4b93      	ldr	r3, [pc, #588]	; (8002214 <menu+0xbb0>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	f083 0301 	eor.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d012      	beq.n	8001ff8 <menu+0x994>
 8001fd2:	4b91      	ldr	r3, [pc, #580]	; (8002218 <menu+0xbb4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10e      	bne.n	8001ff8 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 8001fda:	4b90      	ldr	r3, [pc, #576]	; (800221c <menu+0xbb8>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b8e      	ldr	r3, [pc, #568]	; (800221c <menu+0xbb8>)
 8001fe4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <menu+0xbb8>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d902      	bls.n	8001ff4 <menu+0x990>
				calismaSekli = 0;
 8001fee:	4b8b      	ldr	r3, [pc, #556]	; (800221c <menu+0xbb8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ff4:	f004 f8c0 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	4885      	ldr	r0, [pc, #532]	; (8002210 <menu+0xbac>)
 8001ffc:	f007 fe98 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002000:	4603      	mov	r3, r0
 8002002:	2b01      	cmp	r3, #1
 8002004:	d119      	bne.n	800203a <menu+0x9d6>
 8002006:	4b83      	ldr	r3, [pc, #524]	; (8002214 <menu+0xbb0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <menu+0x9d6>
 8002014:	4b80      	ldr	r3, [pc, #512]	; (8002218 <menu+0xbb4>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10e      	bne.n	800203a <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 800201c:	4b7f      	ldr	r3, [pc, #508]	; (800221c <menu+0xbb8>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b7d      	ldr	r3, [pc, #500]	; (800221c <menu+0xbb8>)
 8002026:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8002028:	4b7c      	ldr	r3, [pc, #496]	; (800221c <menu+0xbb8>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <menu+0x9d2>
	    		calismaSekli = 1;
 8002030:	4b7a      	ldr	r3, [pc, #488]	; (800221c <menu+0xbb8>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8002036:	f004 f89f 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800203a:	2108      	movs	r1, #8
 800203c:	4874      	ldr	r0, [pc, #464]	; (8002210 <menu+0xbac>)
 800203e:	f007 fe77 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b01      	cmp	r3, #1
 8002046:	d118      	bne.n	800207a <menu+0xa16>
 8002048:	4b72      	ldr	r3, [pc, #456]	; (8002214 <menu+0xbb0>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d011      	beq.n	800207a <menu+0xa16>
			eepromData[1] = calismaSekli;
 8002056:	4b71      	ldr	r3, [pc, #452]	; (800221c <menu+0xbb8>)
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b71      	ldr	r3, [pc, #452]	; (8002220 <menu+0xbbc>)
 800205c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800205e:	4b6f      	ldr	r3, [pc, #444]	; (800221c <menu+0xbb8>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d106      	bne.n	8002074 <menu+0xa10>
				altLimit = 1;
 8002066:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <menu+0xbc0>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800206c:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <menu+0xbc0>)
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	4b6b      	ldr	r3, [pc, #428]	; (8002220 <menu+0xbbc>)
 8002072:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002074:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <menu+0xbc4>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800207a:	4b6c      	ldr	r3, [pc, #432]	; (800222c <menu+0xbc8>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b03      	cmp	r3, #3
 8002080:	f040 8083 	bne.w	800218a <menu+0xb26>
		if(dilSecim == 0) {
 8002084:	4b60      	ldr	r3, [pc, #384]	; (8002208 <menu+0xba4>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 800208c:	4a68      	ldr	r2, [pc, #416]	; (8002230 <menu+0xbcc>)
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f7fe fb91 	bl	80007b8 <lcd_print>
 8002096:	e008      	b.n	80020aa <menu+0xa46>
		} else if(dilSecim == 1) {
 8002098:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <menu+0xba4>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d104      	bne.n	80020aa <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 80020a0:	4a64      	ldr	r2, [pc, #400]	; (8002234 <menu+0xbd0>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7fe fb87 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 80020aa:	4b63      	ldr	r3, [pc, #396]	; (8002238 <menu+0xbd4>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d113      	bne.n	80020da <menu+0xa76>
			if(dilSecim == 0) {
 80020b2:	4b55      	ldr	r3, [pc, #340]	; (8002208 <menu+0xba4>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 80020ba:	4a60      	ldr	r2, [pc, #384]	; (800223c <menu+0xbd8>)
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f7fe fb7a 	bl	80007b8 <lcd_print>
 80020c4:	e012      	b.n	80020ec <menu+0xa88>
			} else if(dilSecim == 1) {
 80020c6:	4b50      	ldr	r3, [pc, #320]	; (8002208 <menu+0xba4>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10e      	bne.n	80020ec <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 80020ce:	4a5c      	ldr	r2, [pc, #368]	; (8002240 <menu+0xbdc>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	2002      	movs	r0, #2
 80020d4:	f7fe fb70 	bl	80007b8 <lcd_print>
 80020d8:	e008      	b.n	80020ec <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 80020da:	4b57      	ldr	r3, [pc, #348]	; (8002238 <menu+0xbd4>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d104      	bne.n	80020ec <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 80020e2:	4a58      	ldr	r2, [pc, #352]	; (8002244 <menu+0xbe0>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	2002      	movs	r0, #2
 80020e8:	f7fe fb66 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ec:	2102      	movs	r1, #2
 80020ee:	4848      	ldr	r0, [pc, #288]	; (8002210 <menu+0xbac>)
 80020f0:	f007 fe1e 	bl	8009d30 <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d115      	bne.n	8002126 <menu+0xac2>
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <menu+0xbb0>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f083 0301 	eor.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00e      	beq.n	8002126 <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <menu+0xbd4>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b49      	ldr	r3, [pc, #292]	; (8002238 <menu+0xbd4>)
 8002112:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002114:	4b48      	ldr	r3, [pc, #288]	; (8002238 <menu+0xbd4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d902      	bls.n	8002122 <menu+0xabe>
				emniyetCercevesi = 0;
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <menu+0xbd4>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002122:	f004 f829 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002126:	2104      	movs	r1, #4
 8002128:	4839      	ldr	r0, [pc, #228]	; (8002210 <menu+0xbac>)
 800212a:	f007 fe01 	bl	8009d30 <HAL_GPIO_ReadPin>
 800212e:	4603      	mov	r3, r0
 8002130:	2b01      	cmp	r3, #1
 8002132:	d115      	bne.n	8002160 <menu+0xafc>
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <menu+0xbb0>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f083 0301 	eor.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00e      	beq.n	8002160 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <menu+0xbd4>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	3b01      	subs	r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <menu+0xbd4>)
 800214c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <menu+0xbd4>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <menu+0xaf8>
		   		emniyetCercevesi = 1;
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <menu+0xbd4>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800215c:	f004 f80c 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002160:	2108      	movs	r1, #8
 8002162:	482b      	ldr	r0, [pc, #172]	; (8002210 <menu+0xbac>)
 8002164:	f007 fde4 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10d      	bne.n	800218a <menu+0xb26>
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <menu+0xbb0>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f083 0301 	eor.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <menu+0xbd4>)
 800217e:	781a      	ldrb	r2, [r3, #0]
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <menu+0xbbc>)
 8002182:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <menu+0xbc4>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800218a:	4b28      	ldr	r3, [pc, #160]	; (800222c <menu+0xbc8>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b04      	cmp	r3, #4
 8002190:	f040 80ba 	bne.w	8002308 <menu+0xca4>
		if(dilSecim == 0) {
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <menu+0xba4>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800219c:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <menu+0xbe4>)
 800219e:	2101      	movs	r1, #1
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7fe fb09 	bl	80007b8 <lcd_print>
 80021a6:	e008      	b.n	80021ba <menu+0xb56>
		} else if(dilSecim == 1) {
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <menu+0xba4>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d104      	bne.n	80021ba <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80021b0:	4a26      	ldr	r2, [pc, #152]	; (800224c <menu+0xbe8>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7fe faff 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <menu+0xbec>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d113      	bne.n	80021ea <menu+0xb86>
			if(dilSecim == 0) {
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <menu+0xba4>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <menu+0xbd8>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f7fe faf2 	bl	80007b8 <lcd_print>
 80021d4:	e049      	b.n	800226a <menu+0xc06>
			} else if(dilSecim == 1) {
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <menu+0xba4>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d145      	bne.n	800226a <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <menu+0xbdc>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f7fe fae8 	bl	80007b8 <lcd_print>
 80021e8:	e03f      	b.n	800226a <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <menu+0xbec>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d13b      	bne.n	800226a <menu+0xc06>
			if(dilSecim == 0) {
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <menu+0xba4>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d12e      	bne.n	8002258 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <menu+0xbf0>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	2002      	movs	r0, #2
 8002200:	f7fe fada 	bl	80007b8 <lcd_print>
 8002204:	e031      	b.n	800226a <menu+0xc06>
 8002206:	bf00      	nop
 8002208:	20000c5a 	.word	0x20000c5a
 800220c:	0800dc2c 	.word	0x0800dc2c
 8002210:	40010800 	.word	0x40010800
 8002214:	20000c68 	.word	0x20000c68
 8002218:	20000c48 	.word	0x20000c48
 800221c:	20000c3a 	.word	0x20000c3a
 8002220:	20000b28 	.word	0x20000b28
 8002224:	20000c3f 	.word	0x20000c3f
 8002228:	20000c65 	.word	0x20000c65
 800222c:	20000c39 	.word	0x20000c39
 8002230:	0800dc3c 	.word	0x0800dc3c
 8002234:	0800dc50 	.word	0x0800dc50
 8002238:	20000c3d 	.word	0x20000c3d
 800223c:	0800dc64 	.word	0x0800dc64
 8002240:	0800dc78 	.word	0x0800dc78
 8002244:	0800dc8c 	.word	0x0800dc8c
 8002248:	0800dc9c 	.word	0x0800dc9c
 800224c:	0800dcb0 	.word	0x0800dcb0
 8002250:	20000c3e 	.word	0x20000c3e
 8002254:	0800dcc4 	.word	0x0800dcc4
			} else if(dilSecim == 1) {
 8002258:	4b92      	ldr	r3, [pc, #584]	; (80024a4 <menu+0xe40>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d104      	bne.n	800226a <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 8002260:	4a91      	ldr	r2, [pc, #580]	; (80024a8 <menu+0xe44>)
 8002262:	2101      	movs	r1, #1
 8002264:	2002      	movs	r0, #2
 8002266:	f7fe faa7 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800226a:	2102      	movs	r1, #2
 800226c:	488f      	ldr	r0, [pc, #572]	; (80024ac <menu+0xe48>)
 800226e:	f007 fd5f 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d115      	bne.n	80022a4 <menu+0xc40>
 8002278:	4b8d      	ldr	r3, [pc, #564]	; (80024b0 <menu+0xe4c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	f083 0301 	eor.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00e      	beq.n	80022a4 <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002286:	4b8b      	ldr	r3, [pc, #556]	; (80024b4 <menu+0xe50>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <menu+0xe50>)
 8002290:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002292:	4b88      	ldr	r3, [pc, #544]	; (80024b4 <menu+0xe50>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d902      	bls.n	80022a0 <menu+0xc3c>
				yavaslamaLimit = 0;
 800229a:	4b86      	ldr	r3, [pc, #536]	; (80024b4 <menu+0xe50>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022a0:	f003 ff6a 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a4:	2104      	movs	r1, #4
 80022a6:	4881      	ldr	r0, [pc, #516]	; (80024ac <menu+0xe48>)
 80022a8:	f007 fd42 	bl	8009d30 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <menu+0xc7a>
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <menu+0xe4c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 80022c0:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <menu+0xe50>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b7a      	ldr	r3, [pc, #488]	; (80024b4 <menu+0xe50>)
 80022ca:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80022cc:	4b79      	ldr	r3, [pc, #484]	; (80024b4 <menu+0xe50>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <menu+0xc76>
		   		yavaslamaLimit = 1;
 80022d4:	4b77      	ldr	r3, [pc, #476]	; (80024b4 <menu+0xe50>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022da:	f003 ff4d 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2108      	movs	r1, #8
 80022e0:	4872      	ldr	r0, [pc, #456]	; (80024ac <menu+0xe48>)
 80022e2:	f007 fd25 	bl	8009d30 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10d      	bne.n	8002308 <menu+0xca4>
 80022ec:	4b70      	ldr	r3, [pc, #448]	; (80024b0 <menu+0xe4c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 80022fa:	4b6e      	ldr	r3, [pc, #440]	; (80024b4 <menu+0xe50>)
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	4b6e      	ldr	r3, [pc, #440]	; (80024b8 <menu+0xe54>)
 8002300:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002302:	4b6e      	ldr	r3, [pc, #440]	; (80024bc <menu+0xe58>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002308:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <menu+0xe5c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b05      	cmp	r3, #5
 800230e:	f040 80b9 	bne.w	8002484 <menu+0xe20>
		if(dilSecim == 0) {
 8002312:	4b64      	ldr	r3, [pc, #400]	; (80024a4 <menu+0xe40>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 800231a:	4a6a      	ldr	r2, [pc, #424]	; (80024c4 <menu+0xe60>)
 800231c:	2101      	movs	r1, #1
 800231e:	2001      	movs	r0, #1
 8002320:	f7fe fa4a 	bl	80007b8 <lcd_print>
 8002324:	e008      	b.n	8002338 <menu+0xcd4>
		} else if(dilSecim == 1) {
 8002326:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <menu+0xe40>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d104      	bne.n	8002338 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800232e:	4a66      	ldr	r2, [pc, #408]	; (80024c8 <menu+0xe64>)
 8002330:	2101      	movs	r1, #1
 8002332:	2001      	movs	r0, #1
 8002334:	f7fe fa40 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 8002338:	4b64      	ldr	r3, [pc, #400]	; (80024cc <menu+0xe68>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d113      	bne.n	8002368 <menu+0xd04>
			if(dilSecim == 0) {
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <menu+0xe40>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 8002348:	4a61      	ldr	r2, [pc, #388]	; (80024d0 <menu+0xe6c>)
 800234a:	2101      	movs	r1, #1
 800234c:	2002      	movs	r0, #2
 800234e:	f7fe fa33 	bl	80007b8 <lcd_print>
 8002352:	e020      	b.n	8002396 <menu+0xd32>
			} else if(dilSecim == 1) {
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <menu+0xe40>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d11c      	bne.n	8002396 <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 800235c:	4a5d      	ldr	r2, [pc, #372]	; (80024d4 <menu+0xe70>)
 800235e:	2101      	movs	r1, #1
 8002360:	2002      	movs	r0, #2
 8002362:	f7fe fa29 	bl	80007b8 <lcd_print>
 8002366:	e016      	b.n	8002396 <menu+0xd32>
			}
		} else if(altLimit == 1) {
 8002368:	4b58      	ldr	r3, [pc, #352]	; (80024cc <menu+0xe68>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d112      	bne.n	8002396 <menu+0xd32>
			if(dilSecim == 0){
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <menu+0xe40>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 8002378:	4a57      	ldr	r2, [pc, #348]	; (80024d8 <menu+0xe74>)
 800237a:	2101      	movs	r1, #1
 800237c:	2002      	movs	r0, #2
 800237e:	f7fe fa1b 	bl	80007b8 <lcd_print>
 8002382:	e008      	b.n	8002396 <menu+0xd32>
			} else if(dilSecim == 1){
 8002384:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <menu+0xe40>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d104      	bne.n	8002396 <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 800238c:	4a46      	ldr	r2, [pc, #280]	; (80024a8 <menu+0xe44>)
 800238e:	2101      	movs	r1, #1
 8002390:	2002      	movs	r0, #2
 8002392:	f7fe fa11 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002396:	2102      	movs	r1, #2
 8002398:	4844      	ldr	r0, [pc, #272]	; (80024ac <menu+0xe48>)
 800239a:	f007 fcc9 	bl	8009d30 <HAL_GPIO_ReadPin>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d119      	bne.n	80023d8 <menu+0xd74>
 80023a4:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <menu+0xe4c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f083 0301 	eor.w	r3, r3, #1
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d012      	beq.n	80023d8 <menu+0xd74>
 80023b2:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <menu+0xe78>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <menu+0xd74>
			altLimit = altLimit + 1;
 80023ba:	4b44      	ldr	r3, [pc, #272]	; (80024cc <menu+0xe68>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b42      	ldr	r3, [pc, #264]	; (80024cc <menu+0xe68>)
 80023c4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <menu+0xe68>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d902      	bls.n	80023d4 <menu+0xd70>
				altLimit = 0;
 80023ce:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <menu+0xe68>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023d4:	f003 fed0 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80023d8:	2104      	movs	r1, #4
 80023da:	4834      	ldr	r0, [pc, #208]	; (80024ac <menu+0xe48>)
 80023dc:	f007 fca8 	bl	8009d30 <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d119      	bne.n	800241a <menu+0xdb6>
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <menu+0xe4c>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d012      	beq.n	800241a <menu+0xdb6>
 80023f4:	4b39      	ldr	r3, [pc, #228]	; (80024dc <menu+0xe78>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10e      	bne.n	800241a <menu+0xdb6>
			altLimit = altLimit - 1;
 80023fc:	4b33      	ldr	r3, [pc, #204]	; (80024cc <menu+0xe68>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	3b01      	subs	r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <menu+0xe68>)
 8002406:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002408:	4b30      	ldr	r3, [pc, #192]	; (80024cc <menu+0xe68>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <menu+0xdb2>
		   		altLimit = 1;
 8002410:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <menu+0xe68>)
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002416:	f003 feaf 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800241a:	2108      	movs	r1, #8
 800241c:	4823      	ldr	r0, [pc, #140]	; (80024ac <menu+0xe48>)
 800241e:	f007 fc87 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	d12d      	bne.n	8002484 <menu+0xe20>
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <menu+0xe4c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d026      	beq.n	8002484 <menu+0xe20>
			eepromData[5] = altLimit;
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <menu+0xe68>)
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <menu+0xe54>)
 800243c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <menu+0xe68>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d110      	bne.n	8002468 <menu+0xe04>
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <menu+0xe7c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <menu+0xdf2>
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <menu+0xe7c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d108      	bne.n	8002468 <menu+0xe04>
				kapiTablaAcKonum = 3;
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <menu+0xe7c>)
 8002458:	2203      	movs	r2, #3
 800245a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <menu+0xe7c>)
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <menu+0xe54>)
 8002462:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002466:	e00a      	b.n	800247e <menu+0xe1a>
			} else if(altLimit == 0) {
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <menu+0xe68>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <menu+0xe1a>
				platformSilindirTipi = 0;
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <menu+0xe80>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <menu+0xe80>)
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <menu+0xe54>)
 800247c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <menu+0xe58>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <menu+0xe5c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b06      	cmp	r3, #6
 800248a:	f040 80b6 	bne.w	80025fa <menu+0xf96>
		if(dilSecim == 0) {
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <menu+0xe40>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d12a      	bne.n	80024ec <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <menu+0xe84>)
 8002498:	2101      	movs	r1, #1
 800249a:	2001      	movs	r0, #1
 800249c:	f7fe f98c 	bl	80007b8 <lcd_print>
 80024a0:	e02d      	b.n	80024fe <menu+0xe9a>
 80024a2:	bf00      	nop
 80024a4:	20000c5a 	.word	0x20000c5a
 80024a8:	0800dcd8 	.word	0x0800dcd8
 80024ac:	40010800 	.word	0x40010800
 80024b0:	20000c68 	.word	0x20000c68
 80024b4:	20000c3e 	.word	0x20000c3e
 80024b8:	20000b28 	.word	0x20000b28
 80024bc:	20000c65 	.word	0x20000c65
 80024c0:	20000c39 	.word	0x20000c39
 80024c4:	0800dcec 	.word	0x0800dcec
 80024c8:	0800dd00 	.word	0x0800dd00
 80024cc:	20000c3f 	.word	0x20000c3f
 80024d0:	0800dc64 	.word	0x0800dc64
 80024d4:	0800dc78 	.word	0x0800dc78
 80024d8:	0800dcc4 	.word	0x0800dcc4
 80024dc:	20000c3a 	.word	0x20000c3a
 80024e0:	20000c46 	.word	0x20000c46
 80024e4:	20000c4c 	.word	0x20000c4c
 80024e8:	0800dd14 	.word	0x0800dd14
		} else if(dilSecim == 1){
 80024ec:	4b7a      	ldr	r3, [pc, #488]	; (80026d8 <menu+0x1074>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d104      	bne.n	80024fe <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80024f4:	4a79      	ldr	r2, [pc, #484]	; (80026dc <menu+0x1078>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7fe f95d 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 80024fe:	4b78      	ldr	r3, [pc, #480]	; (80026e0 <menu+0x107c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d113      	bne.n	800252e <menu+0xeca>
			if(dilSecim == 0) {
 8002506:	4b74      	ldr	r3, [pc, #464]	; (80026d8 <menu+0x1074>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 800250e:	4a75      	ldr	r2, [pc, #468]	; (80026e4 <menu+0x1080>)
 8002510:	2101      	movs	r1, #1
 8002512:	2002      	movs	r0, #2
 8002514:	f7fe f950 	bl	80007b8 <lcd_print>
 8002518:	e020      	b.n	800255c <menu+0xef8>
			} else if(dilSecim == 1){
 800251a:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <menu+0x1074>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d11c      	bne.n	800255c <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 8002522:	4a71      	ldr	r2, [pc, #452]	; (80026e8 <menu+0x1084>)
 8002524:	2101      	movs	r1, #1
 8002526:	2002      	movs	r0, #2
 8002528:	f7fe f946 	bl	80007b8 <lcd_print>
 800252c:	e016      	b.n	800255c <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <menu+0x107c>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d112      	bne.n	800255c <menu+0xef8>
			if(dilSecim == 0) {
 8002536:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <menu+0x1074>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 800253e:	4a6b      	ldr	r2, [pc, #428]	; (80026ec <menu+0x1088>)
 8002540:	2101      	movs	r1, #1
 8002542:	2002      	movs	r0, #2
 8002544:	f7fe f938 	bl	80007b8 <lcd_print>
 8002548:	e008      	b.n	800255c <menu+0xef8>
			} else if(dilSecim == 1) {
 800254a:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <menu+0x1074>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d104      	bne.n	800255c <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 8002552:	4a67      	ldr	r2, [pc, #412]	; (80026f0 <menu+0x108c>)
 8002554:	2101      	movs	r1, #1
 8002556:	2002      	movs	r0, #2
 8002558:	f7fe f92e 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800255c:	2102      	movs	r1, #2
 800255e:	4865      	ldr	r0, [pc, #404]	; (80026f4 <menu+0x1090>)
 8002560:	f007 fbe6 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d115      	bne.n	8002596 <menu+0xf32>
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <menu+0x1094>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <menu+0x107c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <menu+0x107c>)
 8002582:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002584:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <menu+0x107c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d902      	bls.n	8002592 <menu+0xf2e>
				basincSalteri = 0;
 800258c:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <menu+0x107c>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002592:	f003 fdf1 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002596:	2104      	movs	r1, #4
 8002598:	4856      	ldr	r0, [pc, #344]	; (80026f4 <menu+0x1090>)
 800259a:	f007 fbc9 	bl	8009d30 <HAL_GPIO_ReadPin>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d115      	bne.n	80025d0 <menu+0xf6c>
 80025a4:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <menu+0x1094>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00e      	beq.n	80025d0 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 80025b2:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <menu+0x107c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b49      	ldr	r3, [pc, #292]	; (80026e0 <menu+0x107c>)
 80025bc:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80025be:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <menu+0x107c>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <menu+0xf68>
		   		basincSalteri = 1;
 80025c6:	4b46      	ldr	r3, [pc, #280]	; (80026e0 <menu+0x107c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025cc:	f003 fdd4 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025d0:	2108      	movs	r1, #8
 80025d2:	4848      	ldr	r0, [pc, #288]	; (80026f4 <menu+0x1090>)
 80025d4:	f007 fbac 	bl	8009d30 <HAL_GPIO_ReadPin>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d10d      	bne.n	80025fa <menu+0xf96>
 80025de:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <menu+0x1094>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <menu+0xf96>
			eepromData[6] = basincSalteri;
 80025ec:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <menu+0x107c>)
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <menu+0x1098>)
 80025f2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80025f4:	4b42      	ldr	r3, [pc, #264]	; (8002700 <menu+0x109c>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80025fa:	4b42      	ldr	r3, [pc, #264]	; (8002704 <menu+0x10a0>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b07      	cmp	r3, #7
 8002600:	f040 80f5 	bne.w	80027ee <menu+0x118a>
		if(dilSecim == 0) {
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <menu+0x1074>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800260c:	4a3e      	ldr	r2, [pc, #248]	; (8002708 <menu+0x10a4>)
 800260e:	2101      	movs	r1, #1
 8002610:	2001      	movs	r0, #1
 8002612:	f7fe f8d1 	bl	80007b8 <lcd_print>
 8002616:	e008      	b.n	800262a <menu+0xfc6>
		} else if(dilSecim == 1){
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <menu+0x1074>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d104      	bne.n	800262a <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002620:	4a3a      	ldr	r2, [pc, #232]	; (800270c <menu+0x10a8>)
 8002622:	2101      	movs	r1, #1
 8002624:	2001      	movs	r0, #1
 8002626:	f7fe f8c7 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <menu+0x10ac>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d113      	bne.n	800265a <menu+0xff6>
			if(dilSecim == 0) {
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <menu+0x1074>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d105      	bne.n	8002646 <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 800263a:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <menu+0x1080>)
 800263c:	2101      	movs	r1, #1
 800263e:	2002      	movs	r0, #2
 8002640:	f7fe f8ba 	bl	80007b8 <lcd_print>
 8002644:	e079      	b.n	800273a <menu+0x10d6>
			} else if(dilSecim == 1){
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <menu+0x1074>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d175      	bne.n	800273a <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 800264e:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <menu+0x1084>)
 8002650:	2101      	movs	r1, #1
 8002652:	2002      	movs	r0, #2
 8002654:	f7fe f8b0 	bl	80007b8 <lcd_print>
 8002658:	e06f      	b.n	800273a <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 800265a:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <menu+0x10ac>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d113      	bne.n	800268a <menu+0x1026>
			if(dilSecim == 0) {
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <menu+0x1074>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 800266a:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <menu+0x10b0>)
 800266c:	2101      	movs	r1, #1
 800266e:	2002      	movs	r0, #2
 8002670:	f7fe f8a2 	bl	80007b8 <lcd_print>
 8002674:	e061      	b.n	800273a <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <menu+0x1074>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d15d      	bne.n	800273a <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 800267e:	4a26      	ldr	r2, [pc, #152]	; (8002718 <menu+0x10b4>)
 8002680:	2101      	movs	r1, #1
 8002682:	2002      	movs	r0, #2
 8002684:	f7fe f898 	bl	80007b8 <lcd_print>
 8002688:	e057      	b.n	800273a <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <menu+0x10ac>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d113      	bne.n	80026ba <menu+0x1056>
			if(dilSecim == 0) {
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <menu+0x1074>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 800269a:	4a20      	ldr	r2, [pc, #128]	; (800271c <menu+0x10b8>)
 800269c:	2101      	movs	r1, #1
 800269e:	2002      	movs	r0, #2
 80026a0:	f7fe f88a 	bl	80007b8 <lcd_print>
 80026a4:	e049      	b.n	800273a <menu+0x10d6>
			} else if(dilSecim == 1) {
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <menu+0x1074>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d145      	bne.n	800273a <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 80026ae:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <menu+0x10bc>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	2002      	movs	r0, #2
 80026b4:	f7fe f880 	bl	80007b8 <lcd_print>
 80026b8:	e03f      	b.n	800273a <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <menu+0x10ac>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d13b      	bne.n	800273a <menu+0x10d6>
			if(dilSecim == 0) {
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <menu+0x1074>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d12e      	bne.n	8002728 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <menu+0x10c0>)
 80026cc:	2101      	movs	r1, #1
 80026ce:	2002      	movs	r0, #2
 80026d0:	f7fe f872 	bl	80007b8 <lcd_print>
 80026d4:	e031      	b.n	800273a <menu+0x10d6>
 80026d6:	bf00      	nop
 80026d8:	20000c5a 	.word	0x20000c5a
 80026dc:	0800dd24 	.word	0x0800dd24
 80026e0:	20000c40 	.word	0x20000c40
 80026e4:	0800dc64 	.word	0x0800dc64
 80026e8:	0800dc78 	.word	0x0800dc78
 80026ec:	0800dcc4 	.word	0x0800dcc4
 80026f0:	0800dcd8 	.word	0x0800dcd8
 80026f4:	40010800 	.word	0x40010800
 80026f8:	20000c68 	.word	0x20000c68
 80026fc:	20000b28 	.word	0x20000b28
 8002700:	20000c65 	.word	0x20000c65
 8002704:	20000c39 	.word	0x20000c39
 8002708:	0800dd34 	.word	0x0800dd34
 800270c:	0800dd48 	.word	0x0800dd48
 8002710:	20000c41 	.word	0x20000c41
 8002714:	0800dd5c 	.word	0x0800dd5c
 8002718:	0800dd70 	.word	0x0800dd70
 800271c:	0800dd84 	.word	0x0800dd84
 8002720:	0800dd98 	.word	0x0800dd98
 8002724:	0800ddac 	.word	0x0800ddac
			} else if(dilSecim == 1){
 8002728:	4b99      	ldr	r3, [pc, #612]	; (8002990 <menu+0x132c>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d104      	bne.n	800273a <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002730:	4a98      	ldr	r2, [pc, #608]	; (8002994 <menu+0x1330>)
 8002732:	2101      	movs	r1, #1
 8002734:	2002      	movs	r0, #2
 8002736:	f7fe f83f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800273a:	2102      	movs	r1, #2
 800273c:	4896      	ldr	r0, [pc, #600]	; (8002998 <menu+0x1334>)
 800273e:	f007 faf7 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002742:	4603      	mov	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d115      	bne.n	8002774 <menu+0x1110>
 8002748:	4b94      	ldr	r3, [pc, #592]	; (800299c <menu+0x1338>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f083 0301 	eor.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00e      	beq.n	8002774 <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 8002756:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <menu+0x133c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	3301      	adds	r3, #1
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4b90      	ldr	r3, [pc, #576]	; (80029a0 <menu+0x133c>)
 8002760:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002762:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <menu+0x133c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d902      	bls.n	8002770 <menu+0x110c>
				kapiSecimleri = 0;
 800276a:	4b8d      	ldr	r3, [pc, #564]	; (80029a0 <menu+0x133c>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002770:	f003 fd02 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002774:	2104      	movs	r1, #4
 8002776:	4888      	ldr	r0, [pc, #544]	; (8002998 <menu+0x1334>)
 8002778:	f007 fada 	bl	8009d30 <HAL_GPIO_ReadPin>
 800277c:	4603      	mov	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d115      	bne.n	80027ae <menu+0x114a>
 8002782:	4b86      	ldr	r3, [pc, #536]	; (800299c <menu+0x1338>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	f083 0301 	eor.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00e      	beq.n	80027ae <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 8002790:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <menu+0x133c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3b01      	subs	r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b81      	ldr	r3, [pc, #516]	; (80029a0 <menu+0x133c>)
 800279a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800279c:	4b80      	ldr	r3, [pc, #512]	; (80029a0 <menu+0x133c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d902      	bls.n	80027aa <menu+0x1146>
		   		kapiSecimleri = 3;
 80027a4:	4b7e      	ldr	r3, [pc, #504]	; (80029a0 <menu+0x133c>)
 80027a6:	2203      	movs	r2, #3
 80027a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027aa:	f003 fce5 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ae:	2108      	movs	r1, #8
 80027b0:	4879      	ldr	r0, [pc, #484]	; (8002998 <menu+0x1334>)
 80027b2:	f007 fabd 	bl	8009d30 <HAL_GPIO_ReadPin>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d118      	bne.n	80027ee <menu+0x118a>
 80027bc:	4b77      	ldr	r3, [pc, #476]	; (800299c <menu+0x1338>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d011      	beq.n	80027ee <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 80027ca:	4b75      	ldr	r3, [pc, #468]	; (80029a0 <menu+0x133c>)
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <menu+0x1340>)
 80027d0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <menu+0x133c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <menu+0x1184>
				altLimit = 1;
 80027da:	4b73      	ldr	r3, [pc, #460]	; (80029a8 <menu+0x1344>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80027e0:	4b71      	ldr	r3, [pc, #452]	; (80029a8 <menu+0x1344>)
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <menu+0x1340>)
 80027e6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80027e8:	4b70      	ldr	r3, [pc, #448]	; (80029ac <menu+0x1348>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80027ee:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <menu+0x134c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	f040 8092 	bne.w	800291c <menu+0x12b8>
		if(dilSecim == 0) {
 80027f8:	4b65      	ldr	r3, [pc, #404]	; (8002990 <menu+0x132c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002800:	4a6c      	ldr	r2, [pc, #432]	; (80029b4 <menu+0x1350>)
 8002802:	2101      	movs	r1, #1
 8002804:	2001      	movs	r0, #1
 8002806:	f7fd ffd7 	bl	80007b8 <lcd_print>
 800280a:	e008      	b.n	800281e <menu+0x11ba>
		} else if(dilSecim == 1) {
 800280c:	4b60      	ldr	r3, [pc, #384]	; (8002990 <menu+0x132c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d104      	bne.n	800281e <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002814:	4a68      	ldr	r2, [pc, #416]	; (80029b8 <menu+0x1354>)
 8002816:	2101      	movs	r1, #1
 8002818:	2001      	movs	r0, #1
 800281a:	f7fd ffcd 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <menu+0x1358>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d113      	bne.n	800284e <menu+0x11ea>
			if(dilSecim == 0) {
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <menu+0x132c>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 800282e:	4a64      	ldr	r2, [pc, #400]	; (80029c0 <menu+0x135c>)
 8002830:	2101      	movs	r1, #1
 8002832:	2002      	movs	r0, #2
 8002834:	f7fd ffc0 	bl	80007b8 <lcd_print>
 8002838:	e020      	b.n	800287c <menu+0x1218>
			} else if(dilSecim == 1) {
 800283a:	4b55      	ldr	r3, [pc, #340]	; (8002990 <menu+0x132c>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d11c      	bne.n	800287c <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 8002842:	4a60      	ldr	r2, [pc, #384]	; (80029c4 <menu+0x1360>)
 8002844:	2101      	movs	r1, #1
 8002846:	2002      	movs	r0, #2
 8002848:	f7fd ffb6 	bl	80007b8 <lcd_print>
 800284c:	e016      	b.n	800287c <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 800284e:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <menu+0x1358>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d112      	bne.n	800287c <menu+0x1218>
			if(dilSecim == 0){
 8002856:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <menu+0x132c>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800285e:	4a5a      	ldr	r2, [pc, #360]	; (80029c8 <menu+0x1364>)
 8002860:	2101      	movs	r1, #1
 8002862:	2002      	movs	r0, #2
 8002864:	f7fd ffa8 	bl	80007b8 <lcd_print>
 8002868:	e008      	b.n	800287c <menu+0x1218>
			} else if(dilSecim == 1){
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <menu+0x132c>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d104      	bne.n	800287c <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 8002872:	4a56      	ldr	r2, [pc, #344]	; (80029cc <menu+0x1368>)
 8002874:	2101      	movs	r1, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fd ff9e 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800287c:	2102      	movs	r1, #2
 800287e:	4846      	ldr	r0, [pc, #280]	; (8002998 <menu+0x1334>)
 8002880:	f007 fa56 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d115      	bne.n	80028b6 <menu+0x1252>
 800288a:	4b44      	ldr	r3, [pc, #272]	; (800299c <menu+0x1338>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00e      	beq.n	80028b6 <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 8002898:	4b48      	ldr	r3, [pc, #288]	; (80029bc <menu+0x1358>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b46      	ldr	r3, [pc, #280]	; (80029bc <menu+0x1358>)
 80028a2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80028a4:	4b45      	ldr	r3, [pc, #276]	; (80029bc <menu+0x1358>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d902      	bls.n	80028b2 <menu+0x124e>
				kapiAcTipi = 0;
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <menu+0x1358>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028b2:	f003 fc61 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028b6:	2104      	movs	r1, #4
 80028b8:	4837      	ldr	r0, [pc, #220]	; (8002998 <menu+0x1334>)
 80028ba:	f007 fa39 	bl	8009d30 <HAL_GPIO_ReadPin>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d115      	bne.n	80028f0 <menu+0x128c>
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <menu+0x1338>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	f083 0301 	eor.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00e      	beq.n	80028f0 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <menu+0x1358>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b38      	ldr	r3, [pc, #224]	; (80029bc <menu+0x1358>)
 80028dc:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <menu+0x1358>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <menu+0x1288>
		   		kapiAcTipi = 1;
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <menu+0x1358>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028ec:	f003 fc44 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028f0:	2108      	movs	r1, #8
 80028f2:	4829      	ldr	r0, [pc, #164]	; (8002998 <menu+0x1334>)
 80028f4:	f007 fa1c 	bl	8009d30 <HAL_GPIO_ReadPin>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d10e      	bne.n	800291c <menu+0x12b8>
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <menu+0x1338>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	f083 0301 	eor.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <menu+0x1358>)
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <menu+0x1340>)
 8002912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002916:	4b25      	ldr	r3, [pc, #148]	; (80029ac <menu+0x1348>)
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <menu+0x134c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b09      	cmp	r3, #9
 8002922:	f040 80b9 	bne.w	8002a98 <menu+0x1434>
		if(dilSecim == 0){
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <menu+0x132c>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800292e:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <menu+0x136c>)
 8002930:	2101      	movs	r1, #1
 8002932:	2001      	movs	r0, #1
 8002934:	f7fd ff40 	bl	80007b8 <lcd_print>
 8002938:	e008      	b.n	800294c <menu+0x12e8>
		} else if(dilSecim == 1) {
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <menu+0x132c>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d104      	bne.n	800294c <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002942:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <menu+0x1370>)
 8002944:	2101      	movs	r1, #1
 8002946:	2001      	movs	r0, #1
 8002948:	f7fd ff36 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <menu+0x1374>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 8002954:	4a21      	ldr	r2, [pc, #132]	; (80029dc <menu+0x1378>)
 8002956:	2101      	movs	r1, #1
 8002958:	2002      	movs	r0, #2
 800295a:	f7fd ff2d 	bl	80007b8 <lcd_print>
 800295e:	e04c      	b.n	80029fa <menu+0x1396>
		} else if(kapi1Tip == 1) {
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <menu+0x1374>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d13f      	bne.n	80029e8 <menu+0x1384>
			if(dilSecim == 0){
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <menu+0x132c>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 8002970:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <menu+0x137c>)
 8002972:	2101      	movs	r1, #1
 8002974:	2002      	movs	r0, #2
 8002976:	f7fd ff1f 	bl	80007b8 <lcd_print>
 800297a:	e03e      	b.n	80029fa <menu+0x1396>
			} else if(dilSecim == 1) {
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <menu+0x132c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d13a      	bne.n	80029fa <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <menu+0x1380>)
 8002986:	2101      	movs	r1, #1
 8002988:	2002      	movs	r0, #2
 800298a:	f7fd ff15 	bl	80007b8 <lcd_print>
 800298e:	e034      	b.n	80029fa <menu+0x1396>
 8002990:	20000c5a 	.word	0x20000c5a
 8002994:	0800ddc0 	.word	0x0800ddc0
 8002998:	40010800 	.word	0x40010800
 800299c:	20000c68 	.word	0x20000c68
 80029a0:	20000c41 	.word	0x20000c41
 80029a4:	20000b28 	.word	0x20000b28
 80029a8:	20000c3f 	.word	0x20000c3f
 80029ac:	20000c65 	.word	0x20000c65
 80029b0:	20000c39 	.word	0x20000c39
 80029b4:	0800ddd4 	.word	0x0800ddd4
 80029b8:	0800dde8 	.word	0x0800dde8
 80029bc:	20000c45 	.word	0x20000c45
 80029c0:	0800ddfc 	.word	0x0800ddfc
 80029c4:	0800de0c 	.word	0x0800de0c
 80029c8:	0800de1c 	.word	0x0800de1c
 80029cc:	0800de30 	.word	0x0800de30
 80029d0:	0800de44 	.word	0x0800de44
 80029d4:	0800de58 	.word	0x0800de58
 80029d8:	20000c42 	.word	0x20000c42
 80029dc:	0800de6c 	.word	0x0800de6c
 80029e0:	0800de80 	.word	0x0800de80
 80029e4:	0800de90 	.word	0x0800de90
			}
		} else if(kapi1Tip == 2) {
 80029e8:	4b8a      	ldr	r3, [pc, #552]	; (8002c14 <menu+0x15b0>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d104      	bne.n	80029fa <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 80029f0:	4a89      	ldr	r2, [pc, #548]	; (8002c18 <menu+0x15b4>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f7fd fedf 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fa:	2102      	movs	r1, #2
 80029fc:	4887      	ldr	r0, [pc, #540]	; (8002c1c <menu+0x15b8>)
 80029fe:	f007 f997 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d115      	bne.n	8002a34 <menu+0x13d0>
 8002a08:	4b85      	ldr	r3, [pc, #532]	; (8002c20 <menu+0x15bc>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 8002a16:	4b7f      	ldr	r3, [pc, #508]	; (8002c14 <menu+0x15b0>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <menu+0x15b0>)
 8002a20:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002a22:	4b7c      	ldr	r3, [pc, #496]	; (8002c14 <menu+0x15b0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <menu+0x13cc>
				kapi1Tip = 0;
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	; (8002c14 <menu+0x15b0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a30:	f003 fba2 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a34:	2104      	movs	r1, #4
 8002a36:	4879      	ldr	r0, [pc, #484]	; (8002c1c <menu+0x15b8>)
 8002a38:	f007 f97a 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d115      	bne.n	8002a6e <menu+0x140a>
 8002a42:	4b77      	ldr	r3, [pc, #476]	; (8002c20 <menu+0x15bc>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00e      	beq.n	8002a6e <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8002a50:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <menu+0x15b0>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b6e      	ldr	r3, [pc, #440]	; (8002c14 <menu+0x15b0>)
 8002a5a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002a5c:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <menu+0x15b0>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d902      	bls.n	8002a6a <menu+0x1406>
		   		kapi1Tip = 2;
 8002a64:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <menu+0x15b0>)
 8002a66:	2202      	movs	r2, #2
 8002a68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a6a:	f003 fb85 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a6e:	2108      	movs	r1, #8
 8002a70:	486a      	ldr	r0, [pc, #424]	; (8002c1c <menu+0x15b8>)
 8002a72:	f007 f95d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10d      	bne.n	8002a98 <menu+0x1434>
 8002a7c:	4b68      	ldr	r3, [pc, #416]	; (8002c20 <menu+0x15bc>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 8002a8a:	4b62      	ldr	r3, [pc, #392]	; (8002c14 <menu+0x15b0>)
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	4b65      	ldr	r3, [pc, #404]	; (8002c24 <menu+0x15c0>)
 8002a90:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002a92:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <menu+0x15c4>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002a98:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <menu+0x15c8>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b0a      	cmp	r3, #10
 8002a9e:	d17f      	bne.n	8002ba0 <menu+0x153c>
		if(dilSecim == 0) {
 8002aa0:	4b63      	ldr	r3, [pc, #396]	; (8002c30 <menu+0x15cc>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002aa8:	4a62      	ldr	r2, [pc, #392]	; (8002c34 <menu+0x15d0>)
 8002aaa:	2101      	movs	r1, #1
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7fd fe83 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ab2:	4a61      	ldr	r2, [pc, #388]	; (8002c38 <menu+0x15d4>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2002      	movs	r0, #2
 8002ab8:	f7fd fe7e 	bl	80007b8 <lcd_print>
 8002abc:	e00d      	b.n	8002ada <menu+0x1476>
		} else if(dilSecim == 1) {
 8002abe:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <menu+0x15cc>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d109      	bne.n	8002ada <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002ac6:	4a5d      	ldr	r2, [pc, #372]	; (8002c3c <menu+0x15d8>)
 8002ac8:	2101      	movs	r1, #1
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7fd fe74 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ad0:	4a5b      	ldr	r2, [pc, #364]	; (8002c40 <menu+0x15dc>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f7fd fe6f 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002ada:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <menu+0x15e0>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	220a      	movs	r2, #10
 8002ae0:	4959      	ldr	r1, [pc, #356]	; (8002c48 <menu+0x15e4>)
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f00a f950 	bl	800cd88 <itoa>
		lcd_print(2,16,snum);
 8002ae8:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <menu+0x15e4>)
 8002aea:	2110      	movs	r1, #16
 8002aec:	2002      	movs	r0, #2
 8002aee:	f7fd fe63 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002af2:	2102      	movs	r1, #2
 8002af4:	4849      	ldr	r0, [pc, #292]	; (8002c1c <menu+0x15b8>)
 8002af6:	f007 f91b 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d119      	bne.n	8002b34 <menu+0x14d0>
 8002b00:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <menu+0x15bc>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d012      	beq.n	8002b34 <menu+0x14d0>
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <menu+0x15b0>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10e      	bne.n	8002b34 <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 8002b16:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <menu+0x15e0>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <menu+0x15e0>)
 8002b20:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <menu+0x15e0>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d902      	bls.n	8002b30 <menu+0x14cc>
				kapi1AcSure = 0;
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <menu+0x15e0>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b30:	f003 fb22 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002b34:	2104      	movs	r1, #4
 8002b36:	4839      	ldr	r0, [pc, #228]	; (8002c1c <menu+0x15b8>)
 8002b38:	f007 f8fa 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d119      	bne.n	8002b76 <menu+0x1512>
 8002b42:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <menu+0x15bc>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <menu+0x1512>
 8002b50:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <menu+0x15b0>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10e      	bne.n	8002b76 <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8002b58:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <menu+0x15e0>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <menu+0x15e0>)
 8002b62:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002b64:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <menu+0x15e0>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b06      	cmp	r3, #6
 8002b6a:	d902      	bls.n	8002b72 <menu+0x150e>
		   		kapi1AcSure = 5;
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <menu+0x15e0>)
 8002b6e:	2205      	movs	r2, #5
 8002b70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b72:	f003 fb01 	bl	8006178 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b76:	2108      	movs	r1, #8
 8002b78:	4828      	ldr	r0, [pc, #160]	; (8002c1c <menu+0x15b8>)
 8002b7a:	f007 f8d9 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d10d      	bne.n	8002ba0 <menu+0x153c>
 8002b84:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <menu+0x15bc>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <menu+0x15e0>)
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <menu+0x15c0>)
 8002b98:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002b9a:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <menu+0x15c4>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <menu+0x15c8>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b0b      	cmp	r3, #11
 8002ba6:	f040 80b5 	bne.w	8002d14 <menu+0x16b0>
		if(dilSecim == 0) {
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <menu+0x15cc>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002bb2:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <menu+0x15e8>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7fd fdfe 	bl	80007b8 <lcd_print>
 8002bbc:	e008      	b.n	8002bd0 <menu+0x156c>
		} else if(dilSecim == 1) {
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <menu+0x15cc>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d104      	bne.n	8002bd0 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002bc6:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <menu+0x15ec>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7fd fdf4 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002bd0:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <menu+0x15f0>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 8002bd8:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <menu+0x15f4>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f7fd fdeb 	bl	80007b8 <lcd_print>
 8002be2:	e048      	b.n	8002c76 <menu+0x1612>
		} else if(kapi2Tip == 1) {
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <menu+0x15f0>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d13b      	bne.n	8002c64 <menu+0x1600>
			if(dilSecim == 0) {
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <menu+0x15cc>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <menu+0x15f8>)
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	f7fd fddd 	bl	80007b8 <lcd_print>
 8002bfe:	e03a      	b.n	8002c76 <menu+0x1612>
			} else if(dilSecim == 1) {
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <menu+0x15cc>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d136      	bne.n	8002c76 <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <menu+0x15fc>)
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f7fd fdd3 	bl	80007b8 <lcd_print>
 8002c12:	e030      	b.n	8002c76 <menu+0x1612>
 8002c14:	20000c42 	.word	0x20000c42
 8002c18:	0800dea4 	.word	0x0800dea4
 8002c1c:	40010800 	.word	0x40010800
 8002c20:	20000c68 	.word	0x20000c68
 8002c24:	20000b28 	.word	0x20000b28
 8002c28:	20000c65 	.word	0x20000c65
 8002c2c:	20000c39 	.word	0x20000c39
 8002c30:	20000c5a 	.word	0x20000c5a
 8002c34:	0800deb4 	.word	0x0800deb4
 8002c38:	0800dec8 	.word	0x0800dec8
 8002c3c:	0800ded8 	.word	0x0800ded8
 8002c40:	0800deec 	.word	0x0800deec
 8002c44:	20000c52 	.word	0x20000c52
 8002c48:	20000bbc 	.word	0x20000bbc
 8002c4c:	0800defc 	.word	0x0800defc
 8002c50:	0800df10 	.word	0x0800df10
 8002c54:	20000c43 	.word	0x20000c43
 8002c58:	0800de6c 	.word	0x0800de6c
 8002c5c:	0800de80 	.word	0x0800de80
 8002c60:	0800de90 	.word	0x0800de90
			}
		} else if(kapi2Tip == 2) {
 8002c64:	4b8a      	ldr	r3, [pc, #552]	; (8002e90 <menu+0x182c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d104      	bne.n	8002c76 <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002c6c:	4a89      	ldr	r2, [pc, #548]	; (8002e94 <menu+0x1830>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2002      	movs	r0, #2
 8002c72:	f7fd fda1 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c76:	2102      	movs	r1, #2
 8002c78:	4887      	ldr	r0, [pc, #540]	; (8002e98 <menu+0x1834>)
 8002c7a:	f007 f859 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d115      	bne.n	8002cb0 <menu+0x164c>
 8002c84:	4b85      	ldr	r3, [pc, #532]	; (8002e9c <menu+0x1838>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00e      	beq.n	8002cb0 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <menu+0x182c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4b7d      	ldr	r3, [pc, #500]	; (8002e90 <menu+0x182c>)
 8002c9c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002c9e:	4b7c      	ldr	r3, [pc, #496]	; (8002e90 <menu+0x182c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <menu+0x1648>
				kapi2Tip = 0;
 8002ca6:	4b7a      	ldr	r3, [pc, #488]	; (8002e90 <menu+0x182c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cac:	f003 fa64 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	4879      	ldr	r0, [pc, #484]	; (8002e98 <menu+0x1834>)
 8002cb4:	f007 f83c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d115      	bne.n	8002cea <menu+0x1686>
 8002cbe:	4b77      	ldr	r3, [pc, #476]	; (8002e9c <menu+0x1838>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002ccc:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <menu+0x182c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b6e      	ldr	r3, [pc, #440]	; (8002e90 <menu+0x182c>)
 8002cd6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002cd8:	4b6d      	ldr	r3, [pc, #436]	; (8002e90 <menu+0x182c>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d902      	bls.n	8002ce6 <menu+0x1682>
		   		kapi2Tip = 2;
 8002ce0:	4b6b      	ldr	r3, [pc, #428]	; (8002e90 <menu+0x182c>)
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ce6:	f003 fa47 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cea:	2108      	movs	r1, #8
 8002cec:	486a      	ldr	r0, [pc, #424]	; (8002e98 <menu+0x1834>)
 8002cee:	f007 f81f 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10d      	bne.n	8002d14 <menu+0x16b0>
 8002cf8:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <menu+0x1838>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002d06:	4b62      	ldr	r3, [pc, #392]	; (8002e90 <menu+0x182c>)
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <menu+0x183c>)
 8002d0c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002d0e:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <menu+0x1840>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002d14:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <menu+0x1844>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b0c      	cmp	r3, #12
 8002d1a:	d17f      	bne.n	8002e1c <menu+0x17b8>
		if(dilSecim == 0) {
 8002d1c:	4b63      	ldr	r3, [pc, #396]	; (8002eac <menu+0x1848>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002d24:	4a62      	ldr	r2, [pc, #392]	; (8002eb0 <menu+0x184c>)
 8002d26:	2101      	movs	r1, #1
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f7fd fd45 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d2e:	4a61      	ldr	r2, [pc, #388]	; (8002eb4 <menu+0x1850>)
 8002d30:	2101      	movs	r1, #1
 8002d32:	2002      	movs	r0, #2
 8002d34:	f7fd fd40 	bl	80007b8 <lcd_print>
 8002d38:	e00d      	b.n	8002d56 <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002d3a:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <menu+0x1848>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d109      	bne.n	8002d56 <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002d42:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <menu+0x1854>)
 8002d44:	2101      	movs	r1, #1
 8002d46:	2001      	movs	r0, #1
 8002d48:	f7fd fd36 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d4c:	4a5b      	ldr	r2, [pc, #364]	; (8002ebc <menu+0x1858>)
 8002d4e:	2101      	movs	r1, #1
 8002d50:	2002      	movs	r0, #2
 8002d52:	f7fd fd31 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002d56:	4b5a      	ldr	r3, [pc, #360]	; (8002ec0 <menu+0x185c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	220a      	movs	r2, #10
 8002d5c:	4959      	ldr	r1, [pc, #356]	; (8002ec4 <menu+0x1860>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f00a f812 	bl	800cd88 <itoa>
		lcd_print(2,16,snum);
 8002d64:	4a57      	ldr	r2, [pc, #348]	; (8002ec4 <menu+0x1860>)
 8002d66:	2110      	movs	r1, #16
 8002d68:	2002      	movs	r0, #2
 8002d6a:	f7fd fd25 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002d6e:	2102      	movs	r1, #2
 8002d70:	4849      	ldr	r0, [pc, #292]	; (8002e98 <menu+0x1834>)
 8002d72:	f006 ffdd 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d119      	bne.n	8002db0 <menu+0x174c>
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <menu+0x1838>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	f083 0301 	eor.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d012      	beq.n	8002db0 <menu+0x174c>
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <menu+0x182c>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8002d92:	4b4b      	ldr	r3, [pc, #300]	; (8002ec0 <menu+0x185c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <menu+0x185c>)
 8002d9c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002d9e:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <menu+0x185c>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d902      	bls.n	8002dac <menu+0x1748>
				kapi2AcSure = 0;
 8002da6:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <menu+0x185c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dac:	f003 f9e4 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002db0:	2104      	movs	r1, #4
 8002db2:	4839      	ldr	r0, [pc, #228]	; (8002e98 <menu+0x1834>)
 8002db4:	f006 ffbc 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d119      	bne.n	8002df2 <menu+0x178e>
 8002dbe:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <menu+0x1838>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	f083 0301 	eor.w	r3, r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <menu+0x178e>
 8002dcc:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <menu+0x182c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10e      	bne.n	8002df2 <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8002dd4:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <menu+0x185c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <menu+0x185c>)
 8002dde:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002de0:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <menu+0x185c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d902      	bls.n	8002dee <menu+0x178a>
		   		kapi2AcSure = 5;
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <menu+0x185c>)
 8002dea:	2205      	movs	r2, #5
 8002dec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dee:	f003 f9c3 	bl	8006178 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df2:	2108      	movs	r1, #8
 8002df4:	4828      	ldr	r0, [pc, #160]	; (8002e98 <menu+0x1834>)
 8002df6:	f006 ff9b 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10d      	bne.n	8002e1c <menu+0x17b8>
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <menu+0x1838>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <menu+0x185c>)
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <menu+0x183c>)
 8002e14:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002e16:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <menu+0x1840>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002e1c:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <menu+0x1844>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b0d      	cmp	r3, #13
 8002e22:	f040 80b5 	bne.w	8002f90 <menu+0x192c>
		if(dilSecim == 0) {
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <menu+0x1848>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002e2e:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <menu+0x1864>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	2001      	movs	r0, #1
 8002e34:	f7fd fcc0 	bl	80007b8 <lcd_print>
 8002e38:	e008      	b.n	8002e4c <menu+0x17e8>
		} else if(dilSecim == 1){
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <menu+0x1848>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d104      	bne.n	8002e4c <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <menu+0x1868>)
 8002e44:	2101      	movs	r1, #1
 8002e46:	2001      	movs	r0, #1
 8002e48:	f7fd fcb6 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <menu+0x186c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8002e54:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <menu+0x1870>)
 8002e56:	2101      	movs	r1, #1
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f7fd fcad 	bl	80007b8 <lcd_print>
 8002e5e:	e048      	b.n	8002ef2 <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <menu+0x186c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d13b      	bne.n	8002ee0 <menu+0x187c>
			if(dilSecim == 0) {
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <menu+0x1848>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8002e70:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <menu+0x1874>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	2002      	movs	r0, #2
 8002e76:	f7fd fc9f 	bl	80007b8 <lcd_print>
 8002e7a:	e03a      	b.n	8002ef2 <menu+0x188e>
			} else if(dilSecim == 1) {
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <menu+0x1848>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d136      	bne.n	8002ef2 <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <menu+0x1878>)
 8002e86:	2101      	movs	r1, #1
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f7fd fc95 	bl	80007b8 <lcd_print>
 8002e8e:	e030      	b.n	8002ef2 <menu+0x188e>
 8002e90:	20000c43 	.word	0x20000c43
 8002e94:	0800dea4 	.word	0x0800dea4
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	20000c68 	.word	0x20000c68
 8002ea0:	20000b28 	.word	0x20000b28
 8002ea4:	20000c65 	.word	0x20000c65
 8002ea8:	20000c39 	.word	0x20000c39
 8002eac:	20000c5a 	.word	0x20000c5a
 8002eb0:	0800df24 	.word	0x0800df24
 8002eb4:	0800dec8 	.word	0x0800dec8
 8002eb8:	0800df38 	.word	0x0800df38
 8002ebc:	0800deec 	.word	0x0800deec
 8002ec0:	20000c53 	.word	0x20000c53
 8002ec4:	20000bbc 	.word	0x20000bbc
 8002ec8:	0800df4c 	.word	0x0800df4c
 8002ecc:	0800df60 	.word	0x0800df60
 8002ed0:	20000c44 	.word	0x20000c44
 8002ed4:	0800de6c 	.word	0x0800de6c
 8002ed8:	0800de80 	.word	0x0800de80
 8002edc:	0800de90 	.word	0x0800de90
			}
		} else if(kapitablaTip == 2) {
 8002ee0:	4b5b      	ldr	r3, [pc, #364]	; (8003050 <menu+0x19ec>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d104      	bne.n	8002ef2 <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 8002ee8:	4a5a      	ldr	r2, [pc, #360]	; (8003054 <menu+0x19f0>)
 8002eea:	2101      	movs	r1, #1
 8002eec:	2002      	movs	r0, #2
 8002eee:	f7fd fc63 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4858      	ldr	r0, [pc, #352]	; (8003058 <menu+0x19f4>)
 8002ef6:	f006 ff1b 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d115      	bne.n	8002f2c <menu+0x18c8>
 8002f00:	4b56      	ldr	r3, [pc, #344]	; (800305c <menu+0x19f8>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f083 0301 	eor.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00e      	beq.n	8002f2c <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 8002f0e:	4b50      	ldr	r3, [pc, #320]	; (8003050 <menu+0x19ec>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <menu+0x19ec>)
 8002f18:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <menu+0x19ec>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d902      	bls.n	8002f28 <menu+0x18c4>
				kapitablaTip = 0;
 8002f22:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <menu+0x19ec>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f28:	f003 f926 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	484a      	ldr	r0, [pc, #296]	; (8003058 <menu+0x19f4>)
 8002f30:	f006 fefe 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d115      	bne.n	8002f66 <menu+0x1902>
 8002f3a:	4b48      	ldr	r3, [pc, #288]	; (800305c <menu+0x19f8>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	f083 0301 	eor.w	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8002f48:	4b41      	ldr	r3, [pc, #260]	; (8003050 <menu+0x19ec>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <menu+0x19ec>)
 8002f52:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <menu+0x19ec>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d902      	bls.n	8002f62 <menu+0x18fe>
		   		kapitablaTip = 2;
 8002f5c:	4b3c      	ldr	r3, [pc, #240]	; (8003050 <menu+0x19ec>)
 8002f5e:	2202      	movs	r2, #2
 8002f60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f62:	f003 f909 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f66:	2108      	movs	r1, #8
 8002f68:	483b      	ldr	r0, [pc, #236]	; (8003058 <menu+0x19f4>)
 8002f6a:	f006 fee1 	bl	8009d30 <HAL_GPIO_ReadPin>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10d      	bne.n	8002f90 <menu+0x192c>
 8002f74:	4b39      	ldr	r3, [pc, #228]	; (800305c <menu+0x19f8>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	f083 0301 	eor.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8002f82:	4b33      	ldr	r3, [pc, #204]	; (8003050 <menu+0x19ec>)
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <menu+0x19fc>)
 8002f88:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <menu+0x1a00>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002f90:	4b35      	ldr	r3, [pc, #212]	; (8003068 <menu+0x1a04>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b0e      	cmp	r3, #14
 8002f96:	f040 80f2 	bne.w	800317e <menu+0x1b1a>
		if(dilSecim == 0) {
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <menu+0x1a08>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002fa2:	4a33      	ldr	r2, [pc, #204]	; (8003070 <menu+0x1a0c>)
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7fd fc06 	bl	80007b8 <lcd_print>
 8002fac:	e008      	b.n	8002fc0 <menu+0x195c>
		} else if(dilSecim == 1) {
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <menu+0x1a08>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d104      	bne.n	8002fc0 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002fb6:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <menu+0x1a10>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7fd fbfc 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <menu+0x1a14>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d113      	bne.n	8002ff0 <menu+0x198c>
			if(dilSecim == 0){
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <menu+0x1a08>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <menu+0x1a18>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f7fd fbef 	bl	80007b8 <lcd_print>
 8002fda:	e071      	b.n	80030c0 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <menu+0x1a08>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d16d      	bne.n	80030c0 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <menu+0x1a1c>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f7fd fbe5 	bl	80007b8 <lcd_print>
 8002fee:	e067      	b.n	80030c0 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <menu+0x1a14>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d112      	bne.n	800301e <menu+0x19ba>
			if(dilSecim == 0){
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <menu+0x1a08>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 8003000:	4a20      	ldr	r2, [pc, #128]	; (8003084 <menu+0x1a20>)
 8003002:	2101      	movs	r1, #1
 8003004:	2002      	movs	r0, #2
 8003006:	f7fd fbd7 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <menu+0x1a08>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d156      	bne.n	80030c0 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 8003012:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <menu+0x1a24>)
 8003014:	2101      	movs	r1, #1
 8003016:	2002      	movs	r0, #2
 8003018:	f7fd fbce 	bl	80007b8 <lcd_print>
 800301c:	e050      	b.n	80030c0 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <menu+0x1a14>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d136      	bne.n	8003094 <menu+0x1a30>
			if(dilSecim == 0){
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <menu+0x1a08>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <menu+0x1a28>)
 8003030:	2101      	movs	r1, #1
 8003032:	2002      	movs	r0, #2
 8003034:	f7fd fbc0 	bl	80007b8 <lcd_print>
 8003038:	e042      	b.n	80030c0 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <menu+0x1a08>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d13e      	bne.n	80030c0 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8003042:	4a13      	ldr	r2, [pc, #76]	; (8003090 <menu+0x1a2c>)
 8003044:	2101      	movs	r1, #1
 8003046:	2002      	movs	r0, #2
 8003048:	f7fd fbb6 	bl	80007b8 <lcd_print>
 800304c:	e038      	b.n	80030c0 <menu+0x1a5c>
 800304e:	bf00      	nop
 8003050:	20000c44 	.word	0x20000c44
 8003054:	0800dea4 	.word	0x0800dea4
 8003058:	40010800 	.word	0x40010800
 800305c:	20000c68 	.word	0x20000c68
 8003060:	20000b28 	.word	0x20000b28
 8003064:	20000c65 	.word	0x20000c65
 8003068:	20000c39 	.word	0x20000c39
 800306c:	20000c5a 	.word	0x20000c5a
 8003070:	0800df74 	.word	0x0800df74
 8003074:	0800df88 	.word	0x0800df88
 8003078:	20000c46 	.word	0x20000c46
 800307c:	0800df9c 	.word	0x0800df9c
 8003080:	0800dfac 	.word	0x0800dfac
 8003084:	0800dfbc 	.word	0x0800dfbc
 8003088:	0800dfcc 	.word	0x0800dfcc
 800308c:	0800dfdc 	.word	0x0800dfdc
 8003090:	0800dff0 	.word	0x0800dff0
			}
		} else if(kapiTablaAcKonum == 3) {
 8003094:	4b9b      	ldr	r3, [pc, #620]	; (8003304 <menu+0x1ca0>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d111      	bne.n	80030c0 <menu+0x1a5c>
			if(dilSecim == 0) {
 800309c:	4b9a      	ldr	r3, [pc, #616]	; (8003308 <menu+0x1ca4>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 80030a4:	4a99      	ldr	r2, [pc, #612]	; (800330c <menu+0x1ca8>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	2002      	movs	r0, #2
 80030aa:	f7fd fb85 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 80030ae:	4b96      	ldr	r3, [pc, #600]	; (8003308 <menu+0x1ca4>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d104      	bne.n	80030c0 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 80030b6:	4a96      	ldr	r2, [pc, #600]	; (8003310 <menu+0x1cac>)
 80030b8:	2101      	movs	r1, #1
 80030ba:	2002      	movs	r0, #2
 80030bc:	f7fd fb7c 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030c0:	2102      	movs	r1, #2
 80030c2:	4894      	ldr	r0, [pc, #592]	; (8003314 <menu+0x1cb0>)
 80030c4:	f006 fe34 	bl	8009d30 <HAL_GPIO_ReadPin>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d115      	bne.n	80030fa <menu+0x1a96>
 80030ce:	4b92      	ldr	r3, [pc, #584]	; (8003318 <menu+0x1cb4>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	f083 0301 	eor.w	r3, r3, #1
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80030dc:	4b89      	ldr	r3, [pc, #548]	; (8003304 <menu+0x1ca0>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b87      	ldr	r3, [pc, #540]	; (8003304 <menu+0x1ca0>)
 80030e6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80030e8:	4b86      	ldr	r3, [pc, #536]	; (8003304 <menu+0x1ca0>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <menu+0x1a92>
				kapiTablaAcKonum = 0;
 80030f0:	4b84      	ldr	r3, [pc, #528]	; (8003304 <menu+0x1ca0>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030f6:	f003 f83f 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030fa:	2104      	movs	r1, #4
 80030fc:	4885      	ldr	r0, [pc, #532]	; (8003314 <menu+0x1cb0>)
 80030fe:	f006 fe17 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d115      	bne.n	8003134 <menu+0x1ad0>
 8003108:	4b83      	ldr	r3, [pc, #524]	; (8003318 <menu+0x1cb4>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8003116:	4b7b      	ldr	r3, [pc, #492]	; (8003304 <menu+0x1ca0>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3b01      	subs	r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b79      	ldr	r3, [pc, #484]	; (8003304 <menu+0x1ca0>)
 8003120:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8003122:	4b78      	ldr	r3, [pc, #480]	; (8003304 <menu+0x1ca0>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d902      	bls.n	8003130 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <menu+0x1ca0>)
 800312c:	2202      	movs	r2, #2
 800312e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003130:	f003 f822 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003134:	2108      	movs	r1, #8
 8003136:	4877      	ldr	r0, [pc, #476]	; (8003314 <menu+0x1cb0>)
 8003138:	f006 fdfa 	bl	8009d30 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11d      	bne.n	800317e <menu+0x1b1a>
 8003142:	4b75      	ldr	r3, [pc, #468]	; (8003318 <menu+0x1cb4>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f083 0301 	eor.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <menu+0x1ca0>)
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	4b71      	ldr	r3, [pc, #452]	; (800331c <menu+0x1cb8>)
 8003156:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800315a:	4b6a      	ldr	r3, [pc, #424]	; (8003304 <menu+0x1ca0>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <menu+0x1b06>
 8003162:	4b68      	ldr	r3, [pc, #416]	; (8003304 <menu+0x1ca0>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d106      	bne.n	8003178 <menu+0x1b14>
				altLimit = 1;
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <menu+0x1cbc>)
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003170:	4b6b      	ldr	r3, [pc, #428]	; (8003320 <menu+0x1cbc>)
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	4b69      	ldr	r3, [pc, #420]	; (800331c <menu+0x1cb8>)
 8003176:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <menu+0x1cc0>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800317e:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <menu+0x1cc4>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b0f      	cmp	r3, #15
 8003184:	d17f      	bne.n	8003286 <menu+0x1c22>
		if(dilSecim == 0) {
 8003186:	4b60      	ldr	r3, [pc, #384]	; (8003308 <menu+0x1ca4>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800318e:	4a67      	ldr	r2, [pc, #412]	; (800332c <menu+0x1cc8>)
 8003190:	2101      	movs	r1, #1
 8003192:	2001      	movs	r0, #1
 8003194:	f7fd fb10 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003198:	4a65      	ldr	r2, [pc, #404]	; (8003330 <menu+0x1ccc>)
 800319a:	2101      	movs	r1, #1
 800319c:	2002      	movs	r0, #2
 800319e:	f7fd fb0b 	bl	80007b8 <lcd_print>
 80031a2:	e00d      	b.n	80031c0 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 80031a4:	4b58      	ldr	r3, [pc, #352]	; (8003308 <menu+0x1ca4>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d109      	bne.n	80031c0 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80031ac:	4a61      	ldr	r2, [pc, #388]	; (8003334 <menu+0x1cd0>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	2001      	movs	r0, #1
 80031b2:	f7fd fb01 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80031b6:	4a60      	ldr	r2, [pc, #384]	; (8003338 <menu+0x1cd4>)
 80031b8:	2101      	movs	r1, #1
 80031ba:	2002      	movs	r0, #2
 80031bc:	f7fd fafc 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80031c0:	4b5e      	ldr	r3, [pc, #376]	; (800333c <menu+0x1cd8>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	220a      	movs	r2, #10
 80031c6:	495e      	ldr	r1, [pc, #376]	; (8003340 <menu+0x1cdc>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f009 fddd 	bl	800cd88 <itoa>
		lcd_print(2,16,snum);
 80031ce:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <menu+0x1cdc>)
 80031d0:	2110      	movs	r1, #16
 80031d2:	2002      	movs	r0, #2
 80031d4:	f7fd faf0 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80031d8:	2102      	movs	r1, #2
 80031da:	484e      	ldr	r0, [pc, #312]	; (8003314 <menu+0x1cb0>)
 80031dc:	f006 fda8 	bl	8009d30 <HAL_GPIO_ReadPin>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d119      	bne.n	800321a <menu+0x1bb6>
 80031e6:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <menu+0x1cb4>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d012      	beq.n	800321a <menu+0x1bb6>
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <menu+0x1ce0>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10e      	bne.n	800321a <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80031fc:	4b4f      	ldr	r3, [pc, #316]	; (800333c <menu+0x1cd8>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	b2da      	uxtb	r2, r3
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <menu+0x1cd8>)
 8003206:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <menu+0x1cd8>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d902      	bls.n	8003216 <menu+0x1bb2>
				kapiTablaAcSure = 0;
 8003210:	4b4a      	ldr	r3, [pc, #296]	; (800333c <menu+0x1cd8>)
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003216:	f002 ffaf 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800321a:	2104      	movs	r1, #4
 800321c:	483d      	ldr	r0, [pc, #244]	; (8003314 <menu+0x1cb0>)
 800321e:	f006 fd87 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003222:	4603      	mov	r3, r0
 8003224:	2b01      	cmp	r3, #1
 8003226:	d119      	bne.n	800325c <menu+0x1bf8>
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <menu+0x1cb4>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	f083 0301 	eor.w	r3, r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d012      	beq.n	800325c <menu+0x1bf8>
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <menu+0x1ce0>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10e      	bne.n	800325c <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800323e:	4b3f      	ldr	r3, [pc, #252]	; (800333c <menu+0x1cd8>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	3b01      	subs	r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4b3d      	ldr	r3, [pc, #244]	; (800333c <menu+0x1cd8>)
 8003248:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800324a:	4b3c      	ldr	r3, [pc, #240]	; (800333c <menu+0x1cd8>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 8003252:	4b3a      	ldr	r3, [pc, #232]	; (800333c <menu+0x1cd8>)
 8003254:	2205      	movs	r2, #5
 8003256:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003258:	f002 ff8e 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800325c:	2108      	movs	r1, #8
 800325e:	482d      	ldr	r0, [pc, #180]	; (8003314 <menu+0x1cb0>)
 8003260:	f006 fd66 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10d      	bne.n	8003286 <menu+0x1c22>
 800326a:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <menu+0x1cb4>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d006      	beq.n	8003286 <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 8003278:	4b30      	ldr	r3, [pc, #192]	; (800333c <menu+0x1cd8>)
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <menu+0x1cb8>)
 800327e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <menu+0x1cc0>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <menu+0x1cc4>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b10      	cmp	r3, #16
 800328c:	f040 80bc 	bne.w	8003408 <menu+0x1da4>
		if(dilSecim == 0) {
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <menu+0x1ca4>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003298:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <menu+0x1ce4>)
 800329a:	2101      	movs	r1, #1
 800329c:	2001      	movs	r0, #1
 800329e:	f7fd fa8b 	bl	80007b8 <lcd_print>
 80032a2:	e008      	b.n	80032b6 <menu+0x1c52>
		} else if(dilSecim == 1) {
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <menu+0x1ca4>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d104      	bne.n	80032b6 <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80032ac:	4a27      	ldr	r2, [pc, #156]	; (800334c <menu+0x1ce8>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7fd fa81 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80032b6:	4b26      	ldr	r3, [pc, #152]	; (8003350 <menu+0x1cec>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d113      	bne.n	80032e6 <menu+0x1c82>
			if(dilSecim == 0) {
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <menu+0x1ca4>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 80032c6:	4a11      	ldr	r2, [pc, #68]	; (800330c <menu+0x1ca8>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	2002      	movs	r0, #2
 80032cc:	f7fd fa74 	bl	80007b8 <lcd_print>
 80032d0:	e04b      	b.n	800336a <menu+0x1d06>
			} else if(dilSecim == 1) {
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <menu+0x1ca4>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d147      	bne.n	800336a <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 80032da:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <menu+0x1cac>)
 80032dc:	2101      	movs	r1, #1
 80032de:	2002      	movs	r0, #2
 80032e0:	f7fd fa6a 	bl	80007b8 <lcd_print>
 80032e4:	e041      	b.n	800336a <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <menu+0x1cec>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d13d      	bne.n	800336a <menu+0x1d06>
			if(dilSecim == 0) {
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <menu+0x1ca4>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d130      	bne.n	8003358 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 80032f6:	4a17      	ldr	r2, [pc, #92]	; (8003354 <menu+0x1cf0>)
 80032f8:	2101      	movs	r1, #1
 80032fa:	2002      	movs	r0, #2
 80032fc:	f7fd fa5c 	bl	80007b8 <lcd_print>
 8003300:	e033      	b.n	800336a <menu+0x1d06>
 8003302:	bf00      	nop
 8003304:	20000c46 	.word	0x20000c46
 8003308:	20000c5a 	.word	0x20000c5a
 800330c:	0800dc64 	.word	0x0800dc64
 8003310:	0800dc78 	.word	0x0800dc78
 8003314:	40010800 	.word	0x40010800
 8003318:	20000c68 	.word	0x20000c68
 800331c:	20000b28 	.word	0x20000b28
 8003320:	20000c3f 	.word	0x20000c3f
 8003324:	20000c65 	.word	0x20000c65
 8003328:	20000c39 	.word	0x20000c39
 800332c:	0800e004 	.word	0x0800e004
 8003330:	0800dec8 	.word	0x0800dec8
 8003334:	0800e018 	.word	0x0800e018
 8003338:	0800deec 	.word	0x0800deec
 800333c:	20000c54 	.word	0x20000c54
 8003340:	20000bbc 	.word	0x20000bbc
 8003344:	20000c44 	.word	0x20000c44
 8003348:	0800e02c 	.word	0x0800e02c
 800334c:	0800e040 	.word	0x0800e040
 8003350:	20000c47 	.word	0x20000c47
 8003354:	0800dcc4 	.word	0x0800dcc4
			} else if(dilSecim == 1) {
 8003358:	4b99      	ldr	r3, [pc, #612]	; (80035c0 <menu+0x1f5c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d104      	bne.n	800336a <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 8003360:	4a98      	ldr	r2, [pc, #608]	; (80035c4 <menu+0x1f60>)
 8003362:	2101      	movs	r1, #1
 8003364:	2002      	movs	r0, #2
 8003366:	f7fd fa27 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800336a:	2102      	movs	r1, #2
 800336c:	4896      	ldr	r0, [pc, #600]	; (80035c8 <menu+0x1f64>)
 800336e:	f006 fcdf 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d115      	bne.n	80033a4 <menu+0x1d40>
 8003378:	4b94      	ldr	r3, [pc, #592]	; (80035cc <menu+0x1f68>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f083 0301 	eor.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003386:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <menu+0x1f6c>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b90      	ldr	r3, [pc, #576]	; (80035d0 <menu+0x1f6c>)
 8003390:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003392:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <menu+0x1f6c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d902      	bls.n	80033a0 <menu+0x1d3c>
				yukariYavasLimit = 0;
 800339a:	4b8d      	ldr	r3, [pc, #564]	; (80035d0 <menu+0x1f6c>)
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033a0:	f002 feea 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033a4:	2104      	movs	r1, #4
 80033a6:	4888      	ldr	r0, [pc, #544]	; (80035c8 <menu+0x1f64>)
 80033a8:	f006 fcc2 	bl	8009d30 <HAL_GPIO_ReadPin>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d115      	bne.n	80033de <menu+0x1d7a>
 80033b2:	4b86      	ldr	r3, [pc, #536]	; (80035cc <menu+0x1f68>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	f083 0301 	eor.w	r3, r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 80033c0:	4b83      	ldr	r3, [pc, #524]	; (80035d0 <menu+0x1f6c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <menu+0x1f6c>)
 80033ca:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80033cc:	4b80      	ldr	r3, [pc, #512]	; (80035d0 <menu+0x1f6c>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <menu+0x1d76>
		   		yukariYavasLimit = 1;
 80033d4:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <menu+0x1f6c>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033da:	f002 fecd 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033de:	2108      	movs	r1, #8
 80033e0:	4879      	ldr	r0, [pc, #484]	; (80035c8 <menu+0x1f64>)
 80033e2:	f006 fca5 	bl	8009d30 <HAL_GPIO_ReadPin>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d10d      	bne.n	8003408 <menu+0x1da4>
 80033ec:	4b77      	ldr	r3, [pc, #476]	; (80035cc <menu+0x1f68>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f083 0301 	eor.w	r3, r3, #1
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 80033fa:	4b75      	ldr	r3, [pc, #468]	; (80035d0 <menu+0x1f6c>)
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <menu+0x1f70>)
 8003400:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003402:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <menu+0x1f74>)
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003408:	4b74      	ldr	r3, [pc, #464]	; (80035dc <menu+0x1f78>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b11      	cmp	r3, #17
 800340e:	f040 80c3 	bne.w	8003598 <menu+0x1f34>
		if(dilSecim == 0) {
 8003412:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <menu+0x1f5c>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800341a:	4a71      	ldr	r2, [pc, #452]	; (80035e0 <menu+0x1f7c>)
 800341c:	2101      	movs	r1, #1
 800341e:	2001      	movs	r0, #1
 8003420:	f7fd f9ca 	bl	80007b8 <lcd_print>
 8003424:	e008      	b.n	8003438 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 8003426:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <menu+0x1f5c>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d104      	bne.n	8003438 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800342e:	4a6d      	ldr	r2, [pc, #436]	; (80035e4 <menu+0x1f80>)
 8003430:	2101      	movs	r1, #1
 8003432:	2001      	movs	r0, #1
 8003434:	f7fd f9c0 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003438:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <menu+0x1f84>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d113      	bne.n	8003468 <menu+0x1e04>
			if(dilSecim == 0){
 8003440:	4b5f      	ldr	r3, [pc, #380]	; (80035c0 <menu+0x1f5c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 8003448:	4a68      	ldr	r2, [pc, #416]	; (80035ec <menu+0x1f88>)
 800344a:	2101      	movs	r1, #1
 800344c:	2002      	movs	r0, #2
 800344e:	f7fd f9b3 	bl	80007b8 <lcd_print>
 8003452:	e038      	b.n	80034c6 <menu+0x1e62>
			} else if(dilSecim == 1){
 8003454:	4b5a      	ldr	r3, [pc, #360]	; (80035c0 <menu+0x1f5c>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d134      	bne.n	80034c6 <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 800345c:	4a64      	ldr	r2, [pc, #400]	; (80035f0 <menu+0x1f8c>)
 800345e:	2101      	movs	r1, #1
 8003460:	2002      	movs	r0, #2
 8003462:	f7fd f9a9 	bl	80007b8 <lcd_print>
 8003466:	e02e      	b.n	80034c6 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003468:	4b5f      	ldr	r3, [pc, #380]	; (80035e8 <menu+0x1f84>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d113      	bne.n	8003498 <menu+0x1e34>
			if(dilSecim == 0){
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <menu+0x1f5c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003478:	4a5e      	ldr	r2, [pc, #376]	; (80035f4 <menu+0x1f90>)
 800347a:	2101      	movs	r1, #1
 800347c:	2002      	movs	r0, #2
 800347e:	f7fd f99b 	bl	80007b8 <lcd_print>
 8003482:	e020      	b.n	80034c6 <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003484:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <menu+0x1f5c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d11c      	bne.n	80034c6 <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 800348c:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <menu+0x1f94>)
 800348e:	2101      	movs	r1, #1
 8003490:	2002      	movs	r0, #2
 8003492:	f7fd f991 	bl	80007b8 <lcd_print>
 8003496:	e016      	b.n	80034c6 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003498:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <menu+0x1f84>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d112      	bne.n	80034c6 <menu+0x1e62>
			if(dilSecim == 0) {
 80034a0:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <menu+0x1f5c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <menu+0x1f98>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	2002      	movs	r0, #2
 80034ae:	f7fd f983 	bl	80007b8 <lcd_print>
 80034b2:	e008      	b.n	80034c6 <menu+0x1e62>
			} else if(dilSecim == 1) {
 80034b4:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <menu+0x1f5c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d104      	bne.n	80034c6 <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 80034bc:	4a50      	ldr	r2, [pc, #320]	; (8003600 <menu+0x1f9c>)
 80034be:	2101      	movs	r1, #1
 80034c0:	2002      	movs	r0, #2
 80034c2:	f7fd f979 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034c6:	2102      	movs	r1, #2
 80034c8:	483f      	ldr	r0, [pc, #252]	; (80035c8 <menu+0x1f64>)
 80034ca:	f006 fc31 	bl	8009d30 <HAL_GPIO_ReadPin>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d115      	bne.n	8003500 <menu+0x1e9c>
 80034d4:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <menu+0x1f68>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	f083 0301 	eor.w	r3, r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00e      	beq.n	8003500 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <menu+0x1f84>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <menu+0x1f84>)
 80034ec:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80034ee:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <menu+0x1f84>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d902      	bls.n	80034fc <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 80034f6:	4b3c      	ldr	r3, [pc, #240]	; (80035e8 <menu+0x1f84>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034fc:	f002 fe3c 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003500:	2104      	movs	r1, #4
 8003502:	4831      	ldr	r0, [pc, #196]	; (80035c8 <menu+0x1f64>)
 8003504:	f006 fc14 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003508:	4603      	mov	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d115      	bne.n	800353a <menu+0x1ed6>
 800350e:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <menu+0x1f68>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	f083 0301 	eor.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00e      	beq.n	800353a <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <menu+0x1f84>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	3b01      	subs	r3, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <menu+0x1f84>)
 8003526:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003528:	4b2f      	ldr	r3, [pc, #188]	; (80035e8 <menu+0x1f84>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d902      	bls.n	8003536 <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <menu+0x1f84>)
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003536:	f002 fe1f 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800353a:	2108      	movs	r1, #8
 800353c:	4822      	ldr	r0, [pc, #136]	; (80035c8 <menu+0x1f64>)
 800353e:	f006 fbf7 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003542:	4603      	mov	r3, r0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d127      	bne.n	8003598 <menu+0x1f34>
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <menu+0x1f68>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	f083 0301 	eor.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d020      	beq.n	8003598 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <menu+0x1f84>)
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <menu+0x1f70>)
 800355c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <menu+0x1f84>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d003      	beq.n	800356e <menu+0x1f0a>
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <menu+0x1f84>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d106      	bne.n	800357c <menu+0x1f18>
				calismaSekli = 0;
 800356e:	4b25      	ldr	r3, [pc, #148]	; (8003604 <menu+0x1fa0>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003574:	4b23      	ldr	r3, [pc, #140]	; (8003604 <menu+0x1fa0>)
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <menu+0x1f70>)
 800357a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <menu+0x1f84>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 8003584:	4b20      	ldr	r3, [pc, #128]	; (8003608 <menu+0x1fa4>)
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <menu+0x1fa4>)
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <menu+0x1f70>)
 8003590:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <menu+0x1f74>)
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <menu+0x1f78>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b12      	cmp	r3, #18
 800359e:	f040 80d5 	bne.w	800374c <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <menu+0x1f84>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d13c      	bne.n	8003624 <menu+0x1fc0>
			if(dilSecim == 0) {
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <menu+0x1f5c>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d12e      	bne.n	8003610 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <menu+0x1fa8>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7fd f8fe 	bl	80007b8 <lcd_print>
 80035bc:	e048      	b.n	8003650 <menu+0x1fec>
 80035be:	bf00      	nop
 80035c0:	20000c5a 	.word	0x20000c5a
 80035c4:	0800dcd8 	.word	0x0800dcd8
 80035c8:	40010800 	.word	0x40010800
 80035cc:	20000c68 	.word	0x20000c68
 80035d0:	20000c47 	.word	0x20000c47
 80035d4:	20000b28 	.word	0x20000b28
 80035d8:	20000c65 	.word	0x20000c65
 80035dc:	20000c39 	.word	0x20000c39
 80035e0:	0800e054 	.word	0x0800e054
 80035e4:	0800e068 	.word	0x0800e068
 80035e8:	20000c48 	.word	0x20000c48
 80035ec:	0800e07c 	.word	0x0800e07c
 80035f0:	0800e08c 	.word	0x0800e08c
 80035f4:	0800e09c 	.word	0x0800e09c
 80035f8:	0800e0ac 	.word	0x0800e0ac
 80035fc:	0800dc64 	.word	0x0800dc64
 8003600:	0800dc78 	.word	0x0800dc78
 8003604:	20000c3a 	.word	0x20000c3a
 8003608:	20000c4b 	.word	0x20000c4b
 800360c:	0800e0bc 	.word	0x0800e0bc
			} else if(dilSecim == 1) {
 8003610:	4b7b      	ldr	r3, [pc, #492]	; (8003800 <menu+0x219c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d11b      	bne.n	8003650 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003618:	4a7a      	ldr	r2, [pc, #488]	; (8003804 <menu+0x21a0>)
 800361a:	2101      	movs	r1, #1
 800361c:	2001      	movs	r0, #1
 800361e:	f7fd f8cb 	bl	80007b8 <lcd_print>
 8003622:	e015      	b.n	8003650 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003624:	4b78      	ldr	r3, [pc, #480]	; (8003808 <menu+0x21a4>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d111      	bne.n	8003650 <menu+0x1fec>
			if(dilSecim == 0){
 800362c:	4b74      	ldr	r3, [pc, #464]	; (8003800 <menu+0x219c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003634:	4a75      	ldr	r2, [pc, #468]	; (800380c <menu+0x21a8>)
 8003636:	2101      	movs	r1, #1
 8003638:	2001      	movs	r0, #1
 800363a:	f7fd f8bd 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 800363e:	4b70      	ldr	r3, [pc, #448]	; (8003800 <menu+0x219c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d104      	bne.n	8003650 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003646:	4a72      	ldr	r2, [pc, #456]	; (8003810 <menu+0x21ac>)
 8003648:	2101      	movs	r1, #1
 800364a:	2001      	movs	r0, #1
 800364c:	f7fd f8b4 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003650:	4b70      	ldr	r3, [pc, #448]	; (8003814 <menu+0x21b0>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <menu+0x201c>
			if(dilSecim == 0) {
 8003658:	4b69      	ldr	r3, [pc, #420]	; (8003800 <menu+0x219c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 8003660:	4a6d      	ldr	r2, [pc, #436]	; (8003818 <menu+0x21b4>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f7fd f8a7 	bl	80007b8 <lcd_print>
 800366a:	e020      	b.n	80036ae <menu+0x204a>
			} else if(dilSecim == 1){
 800366c:	4b64      	ldr	r3, [pc, #400]	; (8003800 <menu+0x219c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d11c      	bne.n	80036ae <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 8003674:	4a69      	ldr	r2, [pc, #420]	; (800381c <menu+0x21b8>)
 8003676:	2101      	movs	r1, #1
 8003678:	2002      	movs	r0, #2
 800367a:	f7fd f89d 	bl	80007b8 <lcd_print>
 800367e:	e016      	b.n	80036ae <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003680:	4b64      	ldr	r3, [pc, #400]	; (8003814 <menu+0x21b0>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d112      	bne.n	80036ae <menu+0x204a>
			if(dilSecim == 0){
 8003688:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <menu+0x219c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 8003690:	4a63      	ldr	r2, [pc, #396]	; (8003820 <menu+0x21bc>)
 8003692:	2101      	movs	r1, #1
 8003694:	2002      	movs	r0, #2
 8003696:	f7fd f88f 	bl	80007b8 <lcd_print>
 800369a:	e008      	b.n	80036ae <menu+0x204a>
			} else if(dilSecim == 1){
 800369c:	4b58      	ldr	r3, [pc, #352]	; (8003800 <menu+0x219c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d104      	bne.n	80036ae <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 80036a4:	4a5f      	ldr	r2, [pc, #380]	; (8003824 <menu+0x21c0>)
 80036a6:	2101      	movs	r1, #1
 80036a8:	2002      	movs	r0, #2
 80036aa:	f7fd f885 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ae:	2102      	movs	r1, #2
 80036b0:	485d      	ldr	r0, [pc, #372]	; (8003828 <menu+0x21c4>)
 80036b2:	f006 fb3d 	bl	8009d30 <HAL_GPIO_ReadPin>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d115      	bne.n	80036e8 <menu+0x2084>
 80036bc:	4b5b      	ldr	r3, [pc, #364]	; (800382c <menu+0x21c8>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00e      	beq.n	80036e8 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80036ca:	4b52      	ldr	r3, [pc, #328]	; (8003814 <menu+0x21b0>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b50      	ldr	r3, [pc, #320]	; (8003814 <menu+0x21b0>)
 80036d4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80036d6:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <menu+0x21b0>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d902      	bls.n	80036e4 <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 80036de:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <menu+0x21b0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036e4:	f002 fd48 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036e8:	2104      	movs	r1, #4
 80036ea:	484f      	ldr	r0, [pc, #316]	; (8003828 <menu+0x21c4>)
 80036ec:	f006 fb20 	bl	8009d30 <HAL_GPIO_ReadPin>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d115      	bne.n	8003722 <menu+0x20be>
 80036f6:	4b4d      	ldr	r3, [pc, #308]	; (800382c <menu+0x21c8>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f083 0301 	eor.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003704:	4b43      	ldr	r3, [pc, #268]	; (8003814 <menu+0x21b0>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	3b01      	subs	r3, #1
 800370a:	b2da      	uxtb	r2, r3
 800370c:	4b41      	ldr	r3, [pc, #260]	; (8003814 <menu+0x21b0>)
 800370e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003710:	4b40      	ldr	r3, [pc, #256]	; (8003814 <menu+0x21b0>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 8003718:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <menu+0x21b0>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800371e:	f002 fd2b 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003722:	2108      	movs	r1, #8
 8003724:	4840      	ldr	r0, [pc, #256]	; (8003828 <menu+0x21c4>)
 8003726:	f006 fb03 	bl	8009d30 <HAL_GPIO_ReadPin>
 800372a:	4603      	mov	r3, r0
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10d      	bne.n	800374c <menu+0x20e8>
 8003730:	4b3e      	ldr	r3, [pc, #248]	; (800382c <menu+0x21c8>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	f083 0301 	eor.w	r3, r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 800373e:	4b35      	ldr	r3, [pc, #212]	; (8003814 <menu+0x21b0>)
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <menu+0x21cc>)
 8003744:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <menu+0x21d0>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800374c:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <menu+0x21d4>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b13      	cmp	r3, #19
 8003752:	f040 80d5 	bne.w	8003900 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 8003756:	4b2c      	ldr	r3, [pc, #176]	; (8003808 <menu+0x21a4>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d113      	bne.n	8003786 <menu+0x2122>
			if(dilSecim == 0) {
 800375e:	4b28      	ldr	r3, [pc, #160]	; (8003800 <menu+0x219c>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003766:	4a35      	ldr	r2, [pc, #212]	; (800383c <menu+0x21d8>)
 8003768:	2101      	movs	r1, #1
 800376a:	2001      	movs	r0, #1
 800376c:	f7fd f824 	bl	80007b8 <lcd_print>
 8003770:	e01f      	b.n	80037b2 <menu+0x214e>
			} else if(dilSecim == 1) {
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <menu+0x219c>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d11b      	bne.n	80037b2 <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800377a:	4a31      	ldr	r2, [pc, #196]	; (8003840 <menu+0x21dc>)
 800377c:	2101      	movs	r1, #1
 800377e:	2001      	movs	r0, #1
 8003780:	f7fd f81a 	bl	80007b8 <lcd_print>
 8003784:	e015      	b.n	80037b2 <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <menu+0x21a4>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d111      	bne.n	80037b2 <menu+0x214e>
			if(dilSecim == 0) {
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <menu+0x219c>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003796:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <menu+0x21e0>)
 8003798:	2101      	movs	r1, #1
 800379a:	2001      	movs	r0, #1
 800379c:	f7fd f80c 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <menu+0x219c>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d104      	bne.n	80037b2 <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80037a8:	4a27      	ldr	r2, [pc, #156]	; (8003848 <menu+0x21e4>)
 80037aa:	2101      	movs	r1, #1
 80037ac:	2001      	movs	r0, #1
 80037ae:	f7fd f803 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <menu+0x21e8>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <menu+0x217e>
			if(dilSecim == 0) {
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <menu+0x219c>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 80037c2:	4a15      	ldr	r2, [pc, #84]	; (8003818 <menu+0x21b4>)
 80037c4:	2101      	movs	r1, #1
 80037c6:	2002      	movs	r0, #2
 80037c8:	f7fc fff6 	bl	80007b8 <lcd_print>
 80037cc:	e049      	b.n	8003862 <menu+0x21fe>
			} else if(dilSecim == 1) {
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <menu+0x219c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d145      	bne.n	8003862 <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 80037d6:	4a11      	ldr	r2, [pc, #68]	; (800381c <menu+0x21b8>)
 80037d8:	2101      	movs	r1, #1
 80037da:	2002      	movs	r0, #2
 80037dc:	f7fc ffec 	bl	80007b8 <lcd_print>
 80037e0:	e03f      	b.n	8003862 <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <menu+0x21e8>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d13b      	bne.n	8003862 <menu+0x21fe>
			if(dilSecim == 0) {
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <menu+0x219c>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d12e      	bne.n	8003850 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 80037f2:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <menu+0x21bc>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	2002      	movs	r0, #2
 80037f8:	f7fc ffde 	bl	80007b8 <lcd_print>
 80037fc:	e031      	b.n	8003862 <menu+0x21fe>
 80037fe:	bf00      	nop
 8003800:	20000c5a 	.word	0x20000c5a
 8003804:	0800e0d0 	.word	0x0800e0d0
 8003808:	20000c48 	.word	0x20000c48
 800380c:	0800e0e0 	.word	0x0800e0e0
 8003810:	0800e0f4 	.word	0x0800e0f4
 8003814:	20000c49 	.word	0x20000c49
 8003818:	0800dc64 	.word	0x0800dc64
 800381c:	0800dc78 	.word	0x0800dc78
 8003820:	0800dcc4 	.word	0x0800dcc4
 8003824:	0800dcd8 	.word	0x0800dcd8
 8003828:	40010800 	.word	0x40010800
 800382c:	20000c68 	.word	0x20000c68
 8003830:	20000b28 	.word	0x20000b28
 8003834:	20000c65 	.word	0x20000c65
 8003838:	20000c39 	.word	0x20000c39
 800383c:	0800e108 	.word	0x0800e108
 8003840:	0800e11c 	.word	0x0800e11c
 8003844:	0800e130 	.word	0x0800e130
 8003848:	0800e144 	.word	0x0800e144
 800384c:	20000c4a 	.word	0x20000c4a
			} else if(dilSecim == 1) {
 8003850:	4b90      	ldr	r3, [pc, #576]	; (8003a94 <menu+0x2430>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d104      	bne.n	8003862 <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 8003858:	4a8f      	ldr	r2, [pc, #572]	; (8003a98 <menu+0x2434>)
 800385a:	2101      	movs	r1, #1
 800385c:	2002      	movs	r0, #2
 800385e:	f7fc ffab 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003862:	2102      	movs	r1, #2
 8003864:	488d      	ldr	r0, [pc, #564]	; (8003a9c <menu+0x2438>)
 8003866:	f006 fa63 	bl	8009d30 <HAL_GPIO_ReadPin>
 800386a:	4603      	mov	r3, r0
 800386c:	2b01      	cmp	r3, #1
 800386e:	d115      	bne.n	800389c <menu+0x2238>
 8003870:	4b8b      	ldr	r3, [pc, #556]	; (8003aa0 <menu+0x243c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	f083 0301 	eor.w	r3, r3, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00e      	beq.n	800389c <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800387e:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <menu+0x2440>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4b87      	ldr	r3, [pc, #540]	; (8003aa4 <menu+0x2440>)
 8003888:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800388a:	4b86      	ldr	r3, [pc, #536]	; (8003aa4 <menu+0x2440>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d902      	bls.n	8003898 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 8003892:	4b84      	ldr	r3, [pc, #528]	; (8003aa4 <menu+0x2440>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003898:	f002 fc6e 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800389c:	2104      	movs	r1, #4
 800389e:	487f      	ldr	r0, [pc, #508]	; (8003a9c <menu+0x2438>)
 80038a0:	f006 fa46 	bl	8009d30 <HAL_GPIO_ReadPin>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d115      	bne.n	80038d6 <menu+0x2272>
 80038aa:	4b7d      	ldr	r3, [pc, #500]	; (8003aa0 <menu+0x243c>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00e      	beq.n	80038d6 <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80038b8:	4b7a      	ldr	r3, [pc, #488]	; (8003aa4 <menu+0x2440>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	3b01      	subs	r3, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b78      	ldr	r3, [pc, #480]	; (8003aa4 <menu+0x2440>)
 80038c2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80038c4:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <menu+0x2440>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 80038cc:	4b75      	ldr	r3, [pc, #468]	; (8003aa4 <menu+0x2440>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038d2:	f002 fc51 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d6:	2108      	movs	r1, #8
 80038d8:	4870      	ldr	r0, [pc, #448]	; (8003a9c <menu+0x2438>)
 80038da:	f006 fa29 	bl	8009d30 <HAL_GPIO_ReadPin>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10d      	bne.n	8003900 <menu+0x229c>
 80038e4:	4b6e      	ldr	r3, [pc, #440]	; (8003aa0 <menu+0x243c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	f083 0301 	eor.w	r3, r3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d006      	beq.n	8003900 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 80038f2:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <menu+0x2440>)
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	4b6c      	ldr	r3, [pc, #432]	; (8003aa8 <menu+0x2444>)
 80038f8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <menu+0x2448>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003900:	4b6b      	ldr	r3, [pc, #428]	; (8003ab0 <menu+0x244c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b14      	cmp	r3, #20
 8003906:	f040 80b5 	bne.w	8003a74 <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 800390a:	4b6a      	ldr	r3, [pc, #424]	; (8003ab4 <menu+0x2450>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d113      	bne.n	800393a <menu+0x22d6>
			if(dilSecim == 0) {
 8003912:	4b60      	ldr	r3, [pc, #384]	; (8003a94 <menu+0x2430>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800391a:	4a67      	ldr	r2, [pc, #412]	; (8003ab8 <menu+0x2454>)
 800391c:	2101      	movs	r1, #1
 800391e:	2001      	movs	r0, #1
 8003920:	f7fc ff4a 	bl	80007b8 <lcd_print>
 8003924:	e020      	b.n	8003968 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003926:	4b5b      	ldr	r3, [pc, #364]	; (8003a94 <menu+0x2430>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d11c      	bne.n	8003968 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800392e:	4a63      	ldr	r2, [pc, #396]	; (8003abc <menu+0x2458>)
 8003930:	2101      	movs	r1, #1
 8003932:	2001      	movs	r0, #1
 8003934:	f7fc ff40 	bl	80007b8 <lcd_print>
 8003938:	e016      	b.n	8003968 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800393a:	4b5e      	ldr	r3, [pc, #376]	; (8003ab4 <menu+0x2450>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d112      	bne.n	8003968 <menu+0x2304>
			if(dilSecim == 0) {
 8003942:	4b54      	ldr	r3, [pc, #336]	; (8003a94 <menu+0x2430>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800394a:	4a5d      	ldr	r2, [pc, #372]	; (8003ac0 <menu+0x245c>)
 800394c:	2101      	movs	r1, #1
 800394e:	2001      	movs	r0, #1
 8003950:	f7fc ff32 	bl	80007b8 <lcd_print>
 8003954:	e008      	b.n	8003968 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003956:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <menu+0x2430>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d104      	bne.n	8003968 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800395e:	4a59      	ldr	r2, [pc, #356]	; (8003ac4 <menu+0x2460>)
 8003960:	2101      	movs	r1, #1
 8003962:	2001      	movs	r0, #1
 8003964:	f7fc ff28 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003968:	4b57      	ldr	r3, [pc, #348]	; (8003ac8 <menu+0x2464>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <menu+0x2334>
			if(dilSecim == 0) {
 8003970:	4b48      	ldr	r3, [pc, #288]	; (8003a94 <menu+0x2430>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 8003978:	4a54      	ldr	r2, [pc, #336]	; (8003acc <menu+0x2468>)
 800397a:	2101      	movs	r1, #1
 800397c:	2002      	movs	r0, #2
 800397e:	f7fc ff1b 	bl	80007b8 <lcd_print>
 8003982:	e020      	b.n	80039c6 <menu+0x2362>
			} else if(dilSecim == 1) {
 8003984:	4b43      	ldr	r3, [pc, #268]	; (8003a94 <menu+0x2430>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d11c      	bne.n	80039c6 <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 800398c:	4a50      	ldr	r2, [pc, #320]	; (8003ad0 <menu+0x246c>)
 800398e:	2101      	movs	r1, #1
 8003990:	2002      	movs	r0, #2
 8003992:	f7fc ff11 	bl	80007b8 <lcd_print>
 8003996:	e016      	b.n	80039c6 <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003998:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <menu+0x2464>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d112      	bne.n	80039c6 <menu+0x2362>
			if(dilSecim == 0) {
 80039a0:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <menu+0x2430>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 80039a8:	4a4a      	ldr	r2, [pc, #296]	; (8003ad4 <menu+0x2470>)
 80039aa:	2101      	movs	r1, #1
 80039ac:	2002      	movs	r0, #2
 80039ae:	f7fc ff03 	bl	80007b8 <lcd_print>
 80039b2:	e008      	b.n	80039c6 <menu+0x2362>
			} else if(dilSecim == 1) {
 80039b4:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <menu+0x2430>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d104      	bne.n	80039c6 <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 80039bc:	4a46      	ldr	r2, [pc, #280]	; (8003ad8 <menu+0x2474>)
 80039be:	2101      	movs	r1, #1
 80039c0:	2002      	movs	r0, #2
 80039c2:	f7fc fef9 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80039c6:	2102      	movs	r1, #2
 80039c8:	4834      	ldr	r0, [pc, #208]	; (8003a9c <menu+0x2438>)
 80039ca:	f006 f9b1 	bl	8009d30 <HAL_GPIO_ReadPin>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d119      	bne.n	8003a08 <menu+0x23a4>
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <menu+0x243c>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d012      	beq.n	8003a08 <menu+0x23a4>
 80039e2:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <menu+0x2450>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d10e      	bne.n	8003a08 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <menu+0x2464>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <menu+0x2464>)
 80039f4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80039f6:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <menu+0x2464>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d902      	bls.n	8003a04 <menu+0x23a0>
				devirmeSilindirTipi = 0;
 80039fe:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <menu+0x2464>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a04:	f002 fbb8 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4824      	ldr	r0, [pc, #144]	; (8003a9c <menu+0x2438>)
 8003a0c:	f006 f990 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d119      	bne.n	8003a4a <menu+0x23e6>
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <menu+0x243c>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	f083 0301 	eor.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <menu+0x23e6>
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <menu+0x2450>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d10e      	bne.n	8003a4a <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003a2c:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <menu+0x2464>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <menu+0x2464>)
 8003a36:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003a38:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <menu+0x2464>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8003a40:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <menu+0x2464>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a46:	f002 fb97 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a4a:	2108      	movs	r1, #8
 8003a4c:	4813      	ldr	r0, [pc, #76]	; (8003a9c <menu+0x2438>)
 8003a4e:	f006 f96f 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10d      	bne.n	8003a74 <menu+0x2410>
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <menu+0x243c>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	f083 0301 	eor.w	r3, r3, #1
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <menu+0x2464>)
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <menu+0x2444>)
 8003a6c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <menu+0x2448>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <menu+0x244c>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b15      	cmp	r3, #21
 8003a7a:	f040 80c2 	bne.w	8003c02 <menu+0x259e>
		if(dilSecim == 0) {
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <menu+0x2430>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d12c      	bne.n	8003ae0 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003a86:	4a15      	ldr	r2, [pc, #84]	; (8003adc <menu+0x2478>)
 8003a88:	2101      	movs	r1, #1
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f7fc fe94 	bl	80007b8 <lcd_print>
 8003a90:	e02f      	b.n	8003af2 <menu+0x248e>
 8003a92:	bf00      	nop
 8003a94:	20000c5a 	.word	0x20000c5a
 8003a98:	0800dcd8 	.word	0x0800dcd8
 8003a9c:	40010800 	.word	0x40010800
 8003aa0:	20000c68 	.word	0x20000c68
 8003aa4:	20000c4a 	.word	0x20000c4a
 8003aa8:	20000b28 	.word	0x20000b28
 8003aac:	20000c65 	.word	0x20000c65
 8003ab0:	20000c39 	.word	0x20000c39
 8003ab4:	20000c48 	.word	0x20000c48
 8003ab8:	0800e158 	.word	0x0800e158
 8003abc:	0800e16c 	.word	0x0800e16c
 8003ac0:	0800e180 	.word	0x0800e180
 8003ac4:	0800e194 	.word	0x0800e194
 8003ac8:	20000c4b 	.word	0x20000c4b
 8003acc:	0800e1a8 	.word	0x0800e1a8
 8003ad0:	0800e1bc 	.word	0x0800e1bc
 8003ad4:	0800e1cc 	.word	0x0800e1cc
 8003ad8:	0800e1e0 	.word	0x0800e1e0
 8003adc:	0800e1f0 	.word	0x0800e1f0
		} else if(dilSecim == 1) {
 8003ae0:	4b9c      	ldr	r3, [pc, #624]	; (8003d54 <menu+0x26f0>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d104      	bne.n	8003af2 <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003ae8:	4a9b      	ldr	r2, [pc, #620]	; (8003d58 <menu+0x26f4>)
 8003aea:	2101      	movs	r1, #1
 8003aec:	2001      	movs	r0, #1
 8003aee:	f7fc fe63 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003af2:	4b9a      	ldr	r3, [pc, #616]	; (8003d5c <menu+0x26f8>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d112      	bne.n	8003b20 <menu+0x24bc>
			if(dilSecim == 0) {
 8003afa:	4b96      	ldr	r3, [pc, #600]	; (8003d54 <menu+0x26f0>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d104      	bne.n	8003b0c <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 8003b02:	4a97      	ldr	r2, [pc, #604]	; (8003d60 <menu+0x26fc>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	2002      	movs	r0, #2
 8003b08:	f7fc fe56 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003b0c:	4b91      	ldr	r3, [pc, #580]	; (8003d54 <menu+0x26f0>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d11c      	bne.n	8003b4e <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 8003b14:	4a93      	ldr	r2, [pc, #588]	; (8003d64 <menu+0x2700>)
 8003b16:	2101      	movs	r1, #1
 8003b18:	2002      	movs	r0, #2
 8003b1a:	f7fc fe4d 	bl	80007b8 <lcd_print>
 8003b1e:	e016      	b.n	8003b4e <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003b20:	4b8e      	ldr	r3, [pc, #568]	; (8003d5c <menu+0x26f8>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d112      	bne.n	8003b4e <menu+0x24ea>
			if(dilSecim == 0) {
 8003b28:	4b8a      	ldr	r3, [pc, #552]	; (8003d54 <menu+0x26f0>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8003b30:	4a8d      	ldr	r2, [pc, #564]	; (8003d68 <menu+0x2704>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	2002      	movs	r0, #2
 8003b36:	f7fc fe3f 	bl	80007b8 <lcd_print>
 8003b3a:	e008      	b.n	8003b4e <menu+0x24ea>
			} else if(dilSecim == 1) {
 8003b3c:	4b85      	ldr	r3, [pc, #532]	; (8003d54 <menu+0x26f0>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d104      	bne.n	8003b4e <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 8003b44:	4a89      	ldr	r2, [pc, #548]	; (8003d6c <menu+0x2708>)
 8003b46:	2101      	movs	r1, #1
 8003b48:	2002      	movs	r0, #2
 8003b4a:	f7fc fe35 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4887      	ldr	r0, [pc, #540]	; (8003d70 <menu+0x270c>)
 8003b52:	f006 f8ed 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d115      	bne.n	8003b88 <menu+0x2524>
 8003b5c:	4b85      	ldr	r3, [pc, #532]	; (8003d74 <menu+0x2710>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	f083 0301 	eor.w	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00e      	beq.n	8003b88 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003b6a:	4b7c      	ldr	r3, [pc, #496]	; (8003d5c <menu+0x26f8>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4b7a      	ldr	r3, [pc, #488]	; (8003d5c <menu+0x26f8>)
 8003b74:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003b76:	4b79      	ldr	r3, [pc, #484]	; (8003d5c <menu+0x26f8>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d902      	bls.n	8003b84 <menu+0x2520>
				platformSilindirTipi = 0;
 8003b7e:	4b77      	ldr	r3, [pc, #476]	; (8003d5c <menu+0x26f8>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b84:	f002 faf8 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b88:	2104      	movs	r1, #4
 8003b8a:	4879      	ldr	r0, [pc, #484]	; (8003d70 <menu+0x270c>)
 8003b8c:	f006 f8d0 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d115      	bne.n	8003bc2 <menu+0x255e>
 8003b96:	4b77      	ldr	r3, [pc, #476]	; (8003d74 <menu+0x2710>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	f083 0301 	eor.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00e      	beq.n	8003bc2 <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003ba4:	4b6d      	ldr	r3, [pc, #436]	; (8003d5c <menu+0x26f8>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	4b6b      	ldr	r3, [pc, #428]	; (8003d5c <menu+0x26f8>)
 8003bae:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003bb0:	4b6a      	ldr	r3, [pc, #424]	; (8003d5c <menu+0x26f8>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <menu+0x255a>
		   		platformSilindirTipi = 1;
 8003bb8:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <menu+0x26f8>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003bbe:	f002 fadb 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bc2:	2108      	movs	r1, #8
 8003bc4:	486a      	ldr	r0, [pc, #424]	; (8003d70 <menu+0x270c>)
 8003bc6:	f006 f8b3 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d118      	bne.n	8003c02 <menu+0x259e>
 8003bd0:	4b68      	ldr	r3, [pc, #416]	; (8003d74 <menu+0x2710>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	f083 0301 	eor.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d011      	beq.n	8003c02 <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 8003bde:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <menu+0x26f8>)
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <menu+0x2714>)
 8003be4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003be6:	4b5d      	ldr	r3, [pc, #372]	; (8003d5c <menu+0x26f8>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d106      	bne.n	8003bfc <menu+0x2598>
				altLimit = 1;
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <menu+0x2718>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003bf4:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <menu+0x2718>)
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	4b5f      	ldr	r3, [pc, #380]	; (8003d78 <menu+0x2714>)
 8003bfa:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003bfc:	4b60      	ldr	r3, [pc, #384]	; (8003d80 <menu+0x271c>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003c02:	4b60      	ldr	r3, [pc, #384]	; (8003d84 <menu+0x2720>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b16      	cmp	r3, #22
 8003c08:	f040 8081 	bne.w	8003d0e <menu+0x26aa>
		if(dilSecim == 0) {
 8003c0c:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <menu+0x26f0>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003c14:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <menu+0x2724>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7fc fdcd 	bl	80007b8 <lcd_print>
 8003c1e:	e008      	b.n	8003c32 <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <menu+0x26f0>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d104      	bne.n	8003c32 <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003c28:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <menu+0x2728>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f7fc fdc3 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c32:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <menu+0x26f0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d105      	bne.n	8003c46 <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c3a:	4a55      	ldr	r2, [pc, #340]	; (8003d90 <menu+0x272c>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	2002      	movs	r0, #2
 8003c40:	f7fc fdba 	bl	80007b8 <lcd_print>
 8003c44:	e008      	b.n	8003c58 <menu+0x25f4>
			} else if(dilSecim == 1){
 8003c46:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <menu+0x26f0>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d104      	bne.n	8003c58 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003c4e:	4a51      	ldr	r2, [pc, #324]	; (8003d94 <menu+0x2730>)
 8003c50:	2101      	movs	r1, #1
 8003c52:	2002      	movs	r0, #2
 8003c54:	f7fc fdb0 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003c58:	4b4f      	ldr	r3, [pc, #316]	; (8003d98 <menu+0x2734>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	220a      	movs	r2, #10
 8003c5e:	494f      	ldr	r1, [pc, #316]	; (8003d9c <menu+0x2738>)
 8003c60:	4618      	mov	r0, r3
 8003c62:	f009 f891 	bl	800cd88 <itoa>
		lcd_print(2,16,snum);
 8003c66:	4a4d      	ldr	r2, [pc, #308]	; (8003d9c <menu+0x2738>)
 8003c68:	2110      	movs	r1, #16
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	f7fc fda4 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c70:	2102      	movs	r1, #2
 8003c72:	483f      	ldr	r0, [pc, #252]	; (8003d70 <menu+0x270c>)
 8003c74:	f006 f85c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d115      	bne.n	8003caa <menu+0x2646>
 8003c7e:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <menu+0x2710>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	f083 0301 	eor.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003c8c:	4b42      	ldr	r3, [pc, #264]	; (8003d98 <menu+0x2734>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	4b40      	ldr	r3, [pc, #256]	; (8003d98 <menu+0x2734>)
 8003c96:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003c98:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <menu+0x2734>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d902      	bls.n	8003ca6 <menu+0x2642>
				yukariValfTmr = 0;
 8003ca0:	4b3d      	ldr	r3, [pc, #244]	; (8003d98 <menu+0x2734>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ca6:	f002 fa67 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003caa:	2104      	movs	r1, #4
 8003cac:	4830      	ldr	r0, [pc, #192]	; (8003d70 <menu+0x270c>)
 8003cae:	f006 f83f 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d115      	bne.n	8003ce4 <menu+0x2680>
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <menu+0x2710>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f083 0301 	eor.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00e      	beq.n	8003ce4 <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003cc6:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <menu+0x2734>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <menu+0x2734>)
 8003cd0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <menu+0x2734>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003cda:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <menu+0x2734>)
 8003cdc:	2205      	movs	r2, #5
 8003cde:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ce0:	f002 fa4a 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ce4:	2108      	movs	r1, #8
 8003ce6:	4822      	ldr	r0, [pc, #136]	; (8003d70 <menu+0x270c>)
 8003ce8:	f006 f822 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d10d      	bne.n	8003d0e <menu+0x26aa>
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <menu+0x2710>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	f083 0301 	eor.w	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <menu+0x2734>)
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <menu+0x2714>)
 8003d06:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <menu+0x271c>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <menu+0x2720>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b17      	cmp	r3, #23
 8003d14:	f040 80ac 	bne.w	8003e70 <menu+0x280c>
		if(dilSecim == 0) {
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <menu+0x26f0>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003d20:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <menu+0x273c>)
 8003d22:	2101      	movs	r1, #1
 8003d24:	2001      	movs	r0, #1
 8003d26:	f7fc fd47 	bl	80007b8 <lcd_print>
 8003d2a:	e008      	b.n	8003d3e <menu+0x26da>
		} else if(dilSecim == 1) {
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <menu+0x26f0>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d104      	bne.n	8003d3e <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003d34:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <menu+0x2740>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f7fc fd3d 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <menu+0x26f0>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d130      	bne.n	8003da8 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <menu+0x272c>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2002      	movs	r0, #2
 8003d4c:	f7fc fd34 	bl	80007b8 <lcd_print>
 8003d50:	e033      	b.n	8003dba <menu+0x2756>
 8003d52:	bf00      	nop
 8003d54:	20000c5a 	.word	0x20000c5a
 8003d58:	0800e204 	.word	0x0800e204
 8003d5c:	20000c4c 	.word	0x20000c4c
 8003d60:	0800e1a8 	.word	0x0800e1a8
 8003d64:	0800e1bc 	.word	0x0800e1bc
 8003d68:	0800e1cc 	.word	0x0800e1cc
 8003d6c:	0800e1e0 	.word	0x0800e1e0
 8003d70:	40010800 	.word	0x40010800
 8003d74:	20000c68 	.word	0x20000c68
 8003d78:	20000b28 	.word	0x20000b28
 8003d7c:	20000c3f 	.word	0x20000c3f
 8003d80:	20000c65 	.word	0x20000c65
 8003d84:	20000c39 	.word	0x20000c39
 8003d88:	0800e214 	.word	0x0800e214
 8003d8c:	0800e228 	.word	0x0800e228
 8003d90:	0800dec8 	.word	0x0800dec8
 8003d94:	0800e23c 	.word	0x0800e23c
 8003d98:	20000c4d 	.word	0x20000c4d
 8003d9c:	20000bbc 	.word	0x20000bbc
 8003da0:	0800e24c 	.word	0x0800e24c
 8003da4:	0800e260 	.word	0x0800e260
			} else if(dilSecim == 1) {
 8003da8:	4b98      	ldr	r3, [pc, #608]	; (800400c <menu+0x29a8>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d104      	bne.n	8003dba <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8003db0:	4a97      	ldr	r2, [pc, #604]	; (8004010 <menu+0x29ac>)
 8003db2:	2101      	movs	r1, #1
 8003db4:	2002      	movs	r0, #2
 8003db6:	f7fc fcff 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003dba:	4b96      	ldr	r3, [pc, #600]	; (8004014 <menu+0x29b0>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	220a      	movs	r2, #10
 8003dc0:	4995      	ldr	r1, [pc, #596]	; (8004018 <menu+0x29b4>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f008 ffe0 	bl	800cd88 <itoa>
		lcd_print(2,16,snum);
 8003dc8:	4a93      	ldr	r2, [pc, #588]	; (8004018 <menu+0x29b4>)
 8003dca:	2110      	movs	r1, #16
 8003dcc:	2002      	movs	r0, #2
 8003dce:	f7fc fcf3 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	4891      	ldr	r0, [pc, #580]	; (800401c <menu+0x29b8>)
 8003dd6:	f005 ffab 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d115      	bne.n	8003e0c <menu+0x27a8>
 8003de0:	4b8f      	ldr	r3, [pc, #572]	; (8004020 <menu+0x29bc>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	f083 0301 	eor.w	r3, r3, #1
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00e      	beq.n	8003e0c <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 8003dee:	4b89      	ldr	r3, [pc, #548]	; (8004014 <menu+0x29b0>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	4b87      	ldr	r3, [pc, #540]	; (8004014 <menu+0x29b0>)
 8003df8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003dfa:	4b86      	ldr	r3, [pc, #536]	; (8004014 <menu+0x29b0>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d902      	bls.n	8003e08 <menu+0x27a4>
				asagiValfTmr = 0;
 8003e02:	4b84      	ldr	r3, [pc, #528]	; (8004014 <menu+0x29b0>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e08:	f002 f9b6 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	4883      	ldr	r0, [pc, #524]	; (800401c <menu+0x29b8>)
 8003e10:	f005 ff8e 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d115      	bne.n	8003e46 <menu+0x27e2>
 8003e1a:	4b81      	ldr	r3, [pc, #516]	; (8004020 <menu+0x29bc>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	f083 0301 	eor.w	r3, r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00e      	beq.n	8003e46 <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 8003e28:	4b7a      	ldr	r3, [pc, #488]	; (8004014 <menu+0x29b0>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	4b78      	ldr	r3, [pc, #480]	; (8004014 <menu+0x29b0>)
 8003e32:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003e34:	4b77      	ldr	r3, [pc, #476]	; (8004014 <menu+0x29b0>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d902      	bls.n	8003e42 <menu+0x27de>
		   		asagiValfTmr = 5;
 8003e3c:	4b75      	ldr	r3, [pc, #468]	; (8004014 <menu+0x29b0>)
 8003e3e:	2205      	movs	r2, #5
 8003e40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e42:	f002 f999 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e46:	2108      	movs	r1, #8
 8003e48:	4874      	ldr	r0, [pc, #464]	; (800401c <menu+0x29b8>)
 8003e4a:	f005 ff71 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10d      	bne.n	8003e70 <menu+0x280c>
 8003e54:	4b72      	ldr	r3, [pc, #456]	; (8004020 <menu+0x29bc>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f083 0301 	eor.w	r3, r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8003e62:	4b6c      	ldr	r3, [pc, #432]	; (8004014 <menu+0x29b0>)
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <menu+0x29c0>)
 8003e68:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003e6a:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <menu+0x29c4>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003e70:	4b6e      	ldr	r3, [pc, #440]	; (800402c <menu+0x29c8>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b18      	cmp	r3, #24
 8003e76:	f040 809d 	bne.w	8003fb4 <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8003e7a:	4b6d      	ldr	r3, [pc, #436]	; (8004030 <menu+0x29cc>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d113      	bne.n	8003eaa <menu+0x2846>
			if(dilSecim == 0) {
 8003e82:	4b62      	ldr	r3, [pc, #392]	; (800400c <menu+0x29a8>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003e8a:	4a6a      	ldr	r2, [pc, #424]	; (8004034 <menu+0x29d0>)
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f7fc fc92 	bl	80007b8 <lcd_print>
 8003e94:	e020      	b.n	8003ed8 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003e96:	4b5d      	ldr	r3, [pc, #372]	; (800400c <menu+0x29a8>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d11c      	bne.n	8003ed8 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003e9e:	4a66      	ldr	r2, [pc, #408]	; (8004038 <menu+0x29d4>)
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	f7fc fc88 	bl	80007b8 <lcd_print>
 8003ea8:	e016      	b.n	8003ed8 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003eaa:	4b61      	ldr	r3, [pc, #388]	; (8004030 <menu+0x29cc>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d112      	bne.n	8003ed8 <menu+0x2874>
			if(dilSecim == 0) {
 8003eb2:	4b56      	ldr	r3, [pc, #344]	; (800400c <menu+0x29a8>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003eba:	4a60      	ldr	r2, [pc, #384]	; (800403c <menu+0x29d8>)
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f7fc fc7a 	bl	80007b8 <lcd_print>
 8003ec4:	e008      	b.n	8003ed8 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003ec6:	4b51      	ldr	r3, [pc, #324]	; (800400c <menu+0x29a8>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d104      	bne.n	8003ed8 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003ece:	4a5c      	ldr	r2, [pc, #368]	; (8004040 <menu+0x29dc>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f7fc fc70 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003ed8:	4b4c      	ldr	r3, [pc, #304]	; (800400c <menu+0x29a8>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d105      	bne.n	8003eec <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ee0:	4a58      	ldr	r2, [pc, #352]	; (8004044 <menu+0x29e0>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f7fc fc67 	bl	80007b8 <lcd_print>
 8003eea:	e008      	b.n	8003efe <menu+0x289a>
			} else if(dilSecim == 1) {
 8003eec:	4b47      	ldr	r3, [pc, #284]	; (800400c <menu+0x29a8>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d104      	bne.n	8003efe <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 8003ef4:	4a46      	ldr	r2, [pc, #280]	; (8004010 <menu+0x29ac>)
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	2002      	movs	r0, #2
 8003efa:	f7fc fc5d 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003efe:	4b52      	ldr	r3, [pc, #328]	; (8004048 <menu+0x29e4>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	220a      	movs	r2, #10
 8003f04:	4944      	ldr	r1, [pc, #272]	; (8004018 <menu+0x29b4>)
 8003f06:	4618      	mov	r0, r3
 8003f08:	f008 ff3e 	bl	800cd88 <itoa>
		lcd_print(2, 16, snum);
 8003f0c:	4a42      	ldr	r2, [pc, #264]	; (8004018 <menu+0x29b4>)
 8003f0e:	2110      	movs	r1, #16
 8003f10:	2002      	movs	r0, #2
 8003f12:	f7fc fc51 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f16:	2102      	movs	r1, #2
 8003f18:	4840      	ldr	r0, [pc, #256]	; (800401c <menu+0x29b8>)
 8003f1a:	f005 ff09 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d115      	bne.n	8003f50 <menu+0x28ec>
 8003f24:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <menu+0x29bc>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f083 0301 	eor.w	r3, r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003f32:	4b45      	ldr	r3, [pc, #276]	; (8004048 <menu+0x29e4>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	3301      	adds	r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	4b43      	ldr	r3, [pc, #268]	; (8004048 <menu+0x29e4>)
 8003f3c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003f3e:	4b42      	ldr	r3, [pc, #264]	; (8004048 <menu+0x29e4>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d902      	bls.n	8003f4c <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8003f46:	4b40      	ldr	r3, [pc, #256]	; (8004048 <menu+0x29e4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f4c:	f002 f914 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f50:	2104      	movs	r1, #4
 8003f52:	4832      	ldr	r0, [pc, #200]	; (800401c <menu+0x29b8>)
 8003f54:	f005 feec 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d115      	bne.n	8003f8a <menu+0x2926>
 8003f5e:	4b30      	ldr	r3, [pc, #192]	; (8004020 <menu+0x29bc>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	f083 0301 	eor.w	r3, r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003f6c:	4b36      	ldr	r3, [pc, #216]	; (8004048 <menu+0x29e4>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b34      	ldr	r3, [pc, #208]	; (8004048 <menu+0x29e4>)
 8003f76:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003f78:	4b33      	ldr	r3, [pc, #204]	; (8004048 <menu+0x29e4>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	d902      	bls.n	8003f86 <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8003f80:	4b31      	ldr	r3, [pc, #196]	; (8004048 <menu+0x29e4>)
 8003f82:	2205      	movs	r2, #5
 8003f84:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f86:	f002 f8f7 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f8a:	2108      	movs	r1, #8
 8003f8c:	4823      	ldr	r0, [pc, #140]	; (800401c <menu+0x29b8>)
 8003f8e:	f005 fecf 	bl	8009d30 <HAL_GPIO_ReadPin>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10d      	bne.n	8003fb4 <menu+0x2950>
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <menu+0x29bc>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	f083 0301 	eor.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8003fa6:	4b28      	ldr	r3, [pc, #160]	; (8004048 <menu+0x29e4>)
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <menu+0x29c0>)
 8003fac:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <menu+0x29c4>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	; (800402c <menu+0x29c8>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b19      	cmp	r3, #25
 8003fba:	f040 80c4 	bne.w	8004146 <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <menu+0x29cc>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d113      	bne.n	8003fee <menu+0x298a>
			if(dilSecim == 0) {
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <menu+0x29a8>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <menu+0x29e8>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f7fc fbf0 	bl	80007b8 <lcd_print>
 8003fd8:	e047      	b.n	800406a <menu+0x2a06>
			} else if(dilSecim == 1) {
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <menu+0x29a8>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d143      	bne.n	800406a <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <menu+0x29ec>)
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	f7fc fbe6 	bl	80007b8 <lcd_print>
 8003fec:	e03d      	b.n	800406a <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <menu+0x29cc>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d139      	bne.n	800406a <menu+0x2a06>
			if(dilSecim == 0) {
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <menu+0x29a8>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d12c      	bne.n	8004058 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003ffe:	4a15      	ldr	r2, [pc, #84]	; (8004054 <menu+0x29f0>)
 8004000:	2101      	movs	r1, #1
 8004002:	2001      	movs	r0, #1
 8004004:	f7fc fbd8 	bl	80007b8 <lcd_print>
 8004008:	e02f      	b.n	800406a <menu+0x2a06>
 800400a:	bf00      	nop
 800400c:	20000c5a 	.word	0x20000c5a
 8004010:	0800e23c 	.word	0x0800e23c
 8004014:	20000c4e 	.word	0x20000c4e
 8004018:	20000bbc 	.word	0x20000bbc
 800401c:	40010800 	.word	0x40010800
 8004020:	20000c68 	.word	0x20000c68
 8004024:	20000b28 	.word	0x20000b28
 8004028:	20000c65 	.word	0x20000c65
 800402c:	20000c39 	.word	0x20000c39
 8004030:	20000c48 	.word	0x20000c48
 8004034:	0800e274 	.word	0x0800e274
 8004038:	0800e288 	.word	0x0800e288
 800403c:	0800e29c 	.word	0x0800e29c
 8004040:	0800e2b0 	.word	0x0800e2b0
 8004044:	0800dec8 	.word	0x0800dec8
 8004048:	20000c4f 	.word	0x20000c4f
 800404c:	0800e2c4 	.word	0x0800e2c4
 8004050:	0800e2d8 	.word	0x0800e2d8
 8004054:	0800e2ec 	.word	0x0800e2ec
			} else if(dilSecim == 1) {
 8004058:	4b73      	ldr	r3, [pc, #460]	; (8004228 <menu+0x2bc4>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d104      	bne.n	800406a <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8004060:	4a72      	ldr	r2, [pc, #456]	; (800422c <menu+0x2bc8>)
 8004062:	2101      	movs	r1, #1
 8004064:	2001      	movs	r0, #1
 8004066:	f7fc fba7 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 800406a:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <menu+0x2bc4>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8004072:	4a6f      	ldr	r2, [pc, #444]	; (8004230 <menu+0x2bcc>)
 8004074:	2101      	movs	r1, #1
 8004076:	2002      	movs	r0, #2
 8004078:	f7fc fb9e 	bl	80007b8 <lcd_print>
 800407c:	e008      	b.n	8004090 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 800407e:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <menu+0x2bc4>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d104      	bne.n	8004090 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8004086:	4a6b      	ldr	r2, [pc, #428]	; (8004234 <menu+0x2bd0>)
 8004088:	2101      	movs	r1, #1
 800408a:	2002      	movs	r0, #2
 800408c:	f7fc fb94 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8004090:	4b69      	ldr	r3, [pc, #420]	; (8004238 <menu+0x2bd4>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	220a      	movs	r2, #10
 8004096:	4969      	ldr	r1, [pc, #420]	; (800423c <menu+0x2bd8>)
 8004098:	4618      	mov	r0, r3
 800409a:	f008 fe75 	bl	800cd88 <itoa>
		lcd_print(2,16,snum);
 800409e:	4a67      	ldr	r2, [pc, #412]	; (800423c <menu+0x2bd8>)
 80040a0:	2110      	movs	r1, #16
 80040a2:	2002      	movs	r0, #2
 80040a4:	f7fc fb88 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040a8:	2102      	movs	r1, #2
 80040aa:	4865      	ldr	r0, [pc, #404]	; (8004240 <menu+0x2bdc>)
 80040ac:	f005 fe40 	bl	8009d30 <HAL_GPIO_ReadPin>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d115      	bne.n	80040e2 <menu+0x2a7e>
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <menu+0x2be0>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	f083 0301 	eor.w	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00e      	beq.n	80040e2 <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80040c4:	4b5c      	ldr	r3, [pc, #368]	; (8004238 <menu+0x2bd4>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	4b5a      	ldr	r3, [pc, #360]	; (8004238 <menu+0x2bd4>)
 80040ce:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80040d0:	4b59      	ldr	r3, [pc, #356]	; (8004238 <menu+0x2bd4>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d902      	bls.n	80040de <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 80040d8:	4b57      	ldr	r3, [pc, #348]	; (8004238 <menu+0x2bd4>)
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040de:	f002 f84b 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e2:	2104      	movs	r1, #4
 80040e4:	4856      	ldr	r0, [pc, #344]	; (8004240 <menu+0x2bdc>)
 80040e6:	f005 fe23 	bl	8009d30 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d115      	bne.n	800411c <menu+0x2ab8>
 80040f0:	4b54      	ldr	r3, [pc, #336]	; (8004244 <menu+0x2be0>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f083 0301 	eor.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80040fe:	4b4e      	ldr	r3, [pc, #312]	; (8004238 <menu+0x2bd4>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <menu+0x2bd4>)
 8004108:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800410a:	4b4b      	ldr	r3, [pc, #300]	; (8004238 <menu+0x2bd4>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b06      	cmp	r3, #6
 8004110:	d902      	bls.n	8004118 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 8004112:	4b49      	ldr	r3, [pc, #292]	; (8004238 <menu+0x2bd4>)
 8004114:	2205      	movs	r2, #5
 8004116:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004118:	f002 f82e 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800411c:	2108      	movs	r1, #8
 800411e:	4848      	ldr	r0, [pc, #288]	; (8004240 <menu+0x2bdc>)
 8004120:	f005 fe06 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10d      	bne.n	8004146 <menu+0x2ae2>
 800412a:	4b46      	ldr	r3, [pc, #280]	; (8004244 <menu+0x2be0>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f083 0301 	eor.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d006      	beq.n	8004146 <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004138:	4b3f      	ldr	r3, [pc, #252]	; (8004238 <menu+0x2bd4>)
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	4b42      	ldr	r3, [pc, #264]	; (8004248 <menu+0x2be4>)
 800413e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004140:	4b42      	ldr	r3, [pc, #264]	; (800424c <menu+0x2be8>)
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8004146:	4b42      	ldr	r3, [pc, #264]	; (8004250 <menu+0x2bec>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b1a      	cmp	r3, #26
 800414c:	f040 80ec 	bne.w	8004328 <menu+0x2cc4>
		if(dilSecim == 0) {
 8004150:	4b35      	ldr	r3, [pc, #212]	; (8004228 <menu+0x2bc4>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004158:	4a3e      	ldr	r2, [pc, #248]	; (8004254 <menu+0x2bf0>)
 800415a:	2101      	movs	r1, #1
 800415c:	2001      	movs	r0, #1
 800415e:	f7fc fb2b 	bl	80007b8 <lcd_print>
 8004162:	e008      	b.n	8004176 <menu+0x2b12>
		} else if(dilSecim == 1) {
 8004164:	4b30      	ldr	r3, [pc, #192]	; (8004228 <menu+0x2bc4>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d104      	bne.n	8004176 <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 800416c:	4a3a      	ldr	r2, [pc, #232]	; (8004258 <menu+0x2bf4>)
 800416e:	2101      	movs	r1, #1
 8004170:	2001      	movs	r0, #1
 8004172:	f7fc fb21 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <menu+0x2bf8>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b63      	cmp	r3, #99	; 0x63
 800417c:	d91e      	bls.n	80041bc <menu+0x2b58>
			if(dilSecim == 0) {
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <menu+0x2bc4>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d104      	bne.n	8004190 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 8004186:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <menu+0x2bcc>)
 8004188:	2101      	movs	r1, #1
 800418a:	2002      	movs	r0, #2
 800418c:	f7fc fb14 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <menu+0x2bc4>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d104      	bne.n	80041a2 <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <menu+0x2bd0>)
 800419a:	2101      	movs	r1, #1
 800419c:	2002      	movs	r0, #2
 800419e:	f7fc fb0b 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041a2:	4b2e      	ldr	r3, [pc, #184]	; (800425c <menu+0x2bf8>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	220a      	movs	r2, #10
 80041a8:	4924      	ldr	r1, [pc, #144]	; (800423c <menu+0x2bd8>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f008 fdec 	bl	800cd88 <itoa>
			lcd_print(2,14,snum);
 80041b0:	4a22      	ldr	r2, [pc, #136]	; (800423c <menu+0x2bd8>)
 80041b2:	210e      	movs	r1, #14
 80041b4:	2002      	movs	r0, #2
 80041b6:	f7fc faff 	bl	80007b8 <lcd_print>
 80041ba:	e066      	b.n	800428a <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80041bc:	4b27      	ldr	r3, [pc, #156]	; (800425c <menu+0x2bf8>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b09      	cmp	r3, #9
 80041c2:	d923      	bls.n	800420c <menu+0x2ba8>
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <menu+0x2bf8>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b63      	cmp	r3, #99	; 0x63
 80041ca:	d81f      	bhi.n	800420c <menu+0x2ba8>
			if(dilSecim == 0) {
 80041cc:	4b16      	ldr	r3, [pc, #88]	; (8004228 <menu+0x2bc4>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 80041d4:	4a16      	ldr	r2, [pc, #88]	; (8004230 <menu+0x2bcc>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	2002      	movs	r0, #2
 80041da:	f7fc faed 	bl	80007b8 <lcd_print>
 80041de:	e008      	b.n	80041f2 <menu+0x2b8e>
			} else if(dilSecim == 1) {
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <menu+0x2bc4>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d104      	bne.n	80041f2 <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 80041e8:	4a12      	ldr	r2, [pc, #72]	; (8004234 <menu+0x2bd0>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	2002      	movs	r0, #2
 80041ee:	f7fc fae3 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041f2:	4b1a      	ldr	r3, [pc, #104]	; (800425c <menu+0x2bf8>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	220a      	movs	r2, #10
 80041f8:	4910      	ldr	r1, [pc, #64]	; (800423c <menu+0x2bd8>)
 80041fa:	4618      	mov	r0, r3
 80041fc:	f008 fdc4 	bl	800cd88 <itoa>
			lcd_print(2, 15, snum);
 8004200:	4a0e      	ldr	r2, [pc, #56]	; (800423c <menu+0x2bd8>)
 8004202:	210f      	movs	r1, #15
 8004204:	2002      	movs	r0, #2
 8004206:	f7fc fad7 	bl	80007b8 <lcd_print>
 800420a:	e03e      	b.n	800428a <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <menu+0x2bf8>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b09      	cmp	r3, #9
 8004212:	d83a      	bhi.n	800428a <menu+0x2c26>
			if(dilSecim == 0) {
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <menu+0x2bc4>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d121      	bne.n	8004260 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <menu+0x2bcc>)
 800421e:	2101      	movs	r1, #1
 8004220:	2002      	movs	r0, #2
 8004222:	f7fc fac9 	bl	80007b8 <lcd_print>
 8004226:	e024      	b.n	8004272 <menu+0x2c0e>
 8004228:	20000c5a 	.word	0x20000c5a
 800422c:	0800e300 	.word	0x0800e300
 8004230:	0800dec8 	.word	0x0800dec8
 8004234:	0800e23c 	.word	0x0800e23c
 8004238:	20000c50 	.word	0x20000c50
 800423c:	20000bbc 	.word	0x20000bbc
 8004240:	40010800 	.word	0x40010800
 8004244:	20000c68 	.word	0x20000c68
 8004248:	20000b28 	.word	0x20000b28
 800424c:	20000c65 	.word	0x20000c65
 8004250:	20000c39 	.word	0x20000c39
 8004254:	0800e314 	.word	0x0800e314
 8004258:	0800e328 	.word	0x0800e328
 800425c:	20000c51 	.word	0x20000c51
			} else if(dilSecim == 1) {
 8004260:	4b8f      	ldr	r3, [pc, #572]	; (80044a0 <menu+0x2e3c>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d104      	bne.n	8004272 <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 8004268:	4a8e      	ldr	r2, [pc, #568]	; (80044a4 <menu+0x2e40>)
 800426a:	2101      	movs	r1, #1
 800426c:	2002      	movs	r0, #2
 800426e:	f7fc faa3 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004272:	4b8d      	ldr	r3, [pc, #564]	; (80044a8 <menu+0x2e44>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	220a      	movs	r2, #10
 8004278:	498c      	ldr	r1, [pc, #560]	; (80044ac <menu+0x2e48>)
 800427a:	4618      	mov	r0, r3
 800427c:	f008 fd84 	bl	800cd88 <itoa>
			lcd_print(2, 16, snum);
 8004280:	4a8a      	ldr	r2, [pc, #552]	; (80044ac <menu+0x2e48>)
 8004282:	2110      	movs	r1, #16
 8004284:	2002      	movs	r0, #2
 8004286:	f7fc fa97 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800428a:	2102      	movs	r1, #2
 800428c:	4888      	ldr	r0, [pc, #544]	; (80044b0 <menu+0x2e4c>)
 800428e:	f005 fd4f 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004292:	4603      	mov	r3, r0
 8004294:	2b01      	cmp	r3, #1
 8004296:	d115      	bne.n	80042c4 <menu+0x2c60>
 8004298:	4b86      	ldr	r3, [pc, #536]	; (80044b4 <menu+0x2e50>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f083 0301 	eor.w	r3, r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 80042a6:	4b80      	ldr	r3, [pc, #512]	; (80044a8 <menu+0x2e44>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b7e      	ldr	r3, [pc, #504]	; (80044a8 <menu+0x2e44>)
 80042b0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80042b2:	4b7d      	ldr	r3, [pc, #500]	; (80044a8 <menu+0x2e44>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2bb4      	cmp	r3, #180	; 0xb4
 80042b8:	d902      	bls.n	80042c0 <menu+0x2c5c>
				makineCalismaTmr = 0;
 80042ba:	4b7b      	ldr	r3, [pc, #492]	; (80044a8 <menu+0x2e44>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042c0:	f001 ff5a 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042c4:	2104      	movs	r1, #4
 80042c6:	487a      	ldr	r0, [pc, #488]	; (80044b0 <menu+0x2e4c>)
 80042c8:	f005 fd32 	bl	8009d30 <HAL_GPIO_ReadPin>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d115      	bne.n	80042fe <menu+0x2c9a>
 80042d2:	4b78      	ldr	r3, [pc, #480]	; (80044b4 <menu+0x2e50>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f083 0301 	eor.w	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 80042e0:	4b71      	ldr	r3, [pc, #452]	; (80044a8 <menu+0x2e44>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <menu+0x2e44>)
 80042ea:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80042ec:	4b6e      	ldr	r3, [pc, #440]	; (80044a8 <menu+0x2e44>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2bb5      	cmp	r3, #181	; 0xb5
 80042f2:	d902      	bls.n	80042fa <menu+0x2c96>
		   		makineCalismaTmr = 180;
 80042f4:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <menu+0x2e44>)
 80042f6:	22b4      	movs	r2, #180	; 0xb4
 80042f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042fa:	f001 ff3d 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042fe:	2108      	movs	r1, #8
 8004300:	486b      	ldr	r0, [pc, #428]	; (80044b0 <menu+0x2e4c>)
 8004302:	f005 fd15 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10d      	bne.n	8004328 <menu+0x2cc4>
 800430c:	4b69      	ldr	r3, [pc, #420]	; (80044b4 <menu+0x2e50>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f083 0301 	eor.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d006      	beq.n	8004328 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 800431a:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <menu+0x2e44>)
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <menu+0x2e54>)
 8004320:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004322:	4b66      	ldr	r3, [pc, #408]	; (80044bc <menu+0x2e58>)
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004328:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <menu+0x2e5c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b1b      	cmp	r3, #27
 800432e:	f040 8083 	bne.w	8004438 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 8004332:	4a64      	ldr	r2, [pc, #400]	; (80044c4 <menu+0x2e60>)
 8004334:	2101      	movs	r1, #1
 8004336:	2001      	movs	r0, #1
 8004338:	f7fc fa3e 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 800433c:	4b62      	ldr	r3, [pc, #392]	; (80044c8 <menu+0x2e64>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d113      	bne.n	800436c <menu+0x2d08>
			if(dilSecim == 0) {
 8004344:	4b56      	ldr	r3, [pc, #344]	; (80044a0 <menu+0x2e3c>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 800434c:	4a5f      	ldr	r2, [pc, #380]	; (80044cc <menu+0x2e68>)
 800434e:	2101      	movs	r1, #1
 8004350:	2002      	movs	r0, #2
 8004352:	f7fc fa31 	bl	80007b8 <lcd_print>
 8004356:	e020      	b.n	800439a <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004358:	4b51      	ldr	r3, [pc, #324]	; (80044a0 <menu+0x2e3c>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d11c      	bne.n	800439a <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 8004360:	4a5b      	ldr	r2, [pc, #364]	; (80044d0 <menu+0x2e6c>)
 8004362:	2101      	movs	r1, #1
 8004364:	2002      	movs	r0, #2
 8004366:	f7fc fa27 	bl	80007b8 <lcd_print>
 800436a:	e016      	b.n	800439a <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 800436c:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <menu+0x2e64>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d112      	bne.n	800439a <menu+0x2d36>
			if(dilSecim == 0) {
 8004374:	4b4a      	ldr	r3, [pc, #296]	; (80044a0 <menu+0x2e3c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 800437c:	4a55      	ldr	r2, [pc, #340]	; (80044d4 <menu+0x2e70>)
 800437e:	2101      	movs	r1, #1
 8004380:	2002      	movs	r0, #2
 8004382:	f7fc fa19 	bl	80007b8 <lcd_print>
 8004386:	e008      	b.n	800439a <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004388:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <menu+0x2e3c>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d104      	bne.n	800439a <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 8004390:	4a51      	ldr	r2, [pc, #324]	; (80044d8 <menu+0x2e74>)
 8004392:	2101      	movs	r1, #1
 8004394:	2002      	movs	r0, #2
 8004396:	f7fc fa0f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800439a:	2102      	movs	r1, #2
 800439c:	4844      	ldr	r0, [pc, #272]	; (80044b0 <menu+0x2e4c>)
 800439e:	f005 fcc7 	bl	8009d30 <HAL_GPIO_ReadPin>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d115      	bne.n	80043d4 <menu+0x2d70>
 80043a8:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <menu+0x2e50>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f083 0301 	eor.w	r3, r3, #1
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <menu+0x2d70>
			buzzer = buzzer + 1;
 80043b6:	4b44      	ldr	r3, [pc, #272]	; (80044c8 <menu+0x2e64>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <menu+0x2e64>)
 80043c0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80043c2:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <menu+0x2e64>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d902      	bls.n	80043d0 <menu+0x2d6c>
				buzzer = 0;
 80043ca:	4b3f      	ldr	r3, [pc, #252]	; (80044c8 <menu+0x2e64>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043d0:	f001 fed2 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043d4:	2104      	movs	r1, #4
 80043d6:	4836      	ldr	r0, [pc, #216]	; (80044b0 <menu+0x2e4c>)
 80043d8:	f005 fcaa 	bl	8009d30 <HAL_GPIO_ReadPin>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d115      	bne.n	800440e <menu+0x2daa>
 80043e2:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <menu+0x2e50>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00e      	beq.n	800440e <menu+0x2daa>
			buzzer = buzzer - 1;
 80043f0:	4b35      	ldr	r3, [pc, #212]	; (80044c8 <menu+0x2e64>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <menu+0x2e64>)
 80043fa:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <menu+0x2e64>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <menu+0x2da6>
		   		buzzer = 1;
 8004404:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <menu+0x2e64>)
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800440a:	f001 feb5 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800440e:	2108      	movs	r1, #8
 8004410:	4827      	ldr	r0, [pc, #156]	; (80044b0 <menu+0x2e4c>)
 8004412:	f005 fc8d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004416:	4603      	mov	r3, r0
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <menu+0x2dd4>
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <menu+0x2e50>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f083 0301 	eor.w	r3, r3, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <menu+0x2dd4>
			eepromData[25] = buzzer;
 800442a:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <menu+0x2e64>)
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <menu+0x2e54>)
 8004430:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004432:	4b22      	ldr	r3, [pc, #136]	; (80044bc <menu+0x2e58>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <menu+0x2e5c>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b1c      	cmp	r3, #28
 800443e:	f040 80ab 	bne.w	8004598 <menu+0x2f34>
		calismaSayModu = 0;
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <menu+0x2e78>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <menu+0x2e7c>)
 800444a:	2101      	movs	r1, #1
 800444c:	2001      	movs	r0, #1
 800444e:	f7fc f9b3 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <menu+0x2e80>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d113      	bne.n	8004482 <menu+0x2e1e>
			if(dilSecim == 0) {
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <menu+0x2e3c>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 8004462:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <menu+0x2e68>)
 8004464:	2101      	movs	r1, #1
 8004466:	2002      	movs	r0, #2
 8004468:	f7fc f9a6 	bl	80007b8 <lcd_print>
 800446c:	e045      	b.n	80044fa <menu+0x2e96>
			} else if(dilSecim == 1) {
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <menu+0x2e3c>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d141      	bne.n	80044fa <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <menu+0x2e6c>)
 8004478:	2101      	movs	r1, #1
 800447a:	2002      	movs	r0, #2
 800447c:	f7fc f99c 	bl	80007b8 <lcd_print>
 8004480:	e03b      	b.n	80044fa <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 8004482:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <menu+0x2e80>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d137      	bne.n	80044fa <menu+0x2e96>
			if(dilSecim == 0){
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <menu+0x2e3c>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d12a      	bne.n	80044e8 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 8004492:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <menu+0x2e70>)
 8004494:	2101      	movs	r1, #1
 8004496:	2002      	movs	r0, #2
 8004498:	f7fc f98e 	bl	80007b8 <lcd_print>
 800449c:	e02d      	b.n	80044fa <menu+0x2e96>
 800449e:	bf00      	nop
 80044a0:	20000c5a 	.word	0x20000c5a
 80044a4:	0800e23c 	.word	0x0800e23c
 80044a8:	20000c51 	.word	0x20000c51
 80044ac:	20000bbc 	.word	0x20000bbc
 80044b0:	40010800 	.word	0x40010800
 80044b4:	20000c68 	.word	0x20000c68
 80044b8:	20000b28 	.word	0x20000b28
 80044bc:	20000c65 	.word	0x20000c65
 80044c0:	20000c39 	.word	0x20000c39
 80044c4:	0800e33c 	.word	0x0800e33c
 80044c8:	20000c55 	.word	0x20000c55
 80044cc:	0800dc64 	.word	0x0800dc64
 80044d0:	0800dc78 	.word	0x0800dc78
 80044d4:	0800dcc4 	.word	0x0800dcc4
 80044d8:	0800dcd8 	.word	0x0800dcd8
 80044dc:	20000c59 	.word	0x20000c59
 80044e0:	0800e350 	.word	0x0800e350
 80044e4:	20000c57 	.word	0x20000c57
			} else if(dilSecim == 1) {
 80044e8:	4b71      	ldr	r3, [pc, #452]	; (80046b0 <menu+0x304c>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d104      	bne.n	80044fa <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 80044f0:	4a70      	ldr	r2, [pc, #448]	; (80046b4 <menu+0x3050>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	2002      	movs	r0, #2
 80044f6:	f7fc f95f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044fa:	2102      	movs	r1, #2
 80044fc:	486e      	ldr	r0, [pc, #440]	; (80046b8 <menu+0x3054>)
 80044fe:	f005 fc17 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004502:	4603      	mov	r3, r0
 8004504:	2b01      	cmp	r3, #1
 8004506:	d115      	bne.n	8004534 <menu+0x2ed0>
 8004508:	4b6c      	ldr	r3, [pc, #432]	; (80046bc <menu+0x3058>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	f083 0301 	eor.w	r3, r3, #1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <menu+0x2ed0>
			demoMode = demoMode + 1;
 8004516:	4b6a      	ldr	r3, [pc, #424]	; (80046c0 <menu+0x305c>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4b68      	ldr	r3, [pc, #416]	; (80046c0 <menu+0x305c>)
 8004520:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004522:	4b67      	ldr	r3, [pc, #412]	; (80046c0 <menu+0x305c>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d902      	bls.n	8004530 <menu+0x2ecc>
				demoMode = 0;
 800452a:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <menu+0x305c>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004530:	f001 fe22 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004534:	2104      	movs	r1, #4
 8004536:	4860      	ldr	r0, [pc, #384]	; (80046b8 <menu+0x3054>)
 8004538:	f005 fbfa 	bl	8009d30 <HAL_GPIO_ReadPin>
 800453c:	4603      	mov	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d115      	bne.n	800456e <menu+0x2f0a>
 8004542:	4b5e      	ldr	r3, [pc, #376]	; (80046bc <menu+0x3058>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	f083 0301 	eor.w	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004550:	4b5b      	ldr	r3, [pc, #364]	; (80046c0 <menu+0x305c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	3b01      	subs	r3, #1
 8004556:	b2da      	uxtb	r2, r3
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <menu+0x305c>)
 800455a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800455c:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <menu+0x305c>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <menu+0x2f06>
		   		demoMode = 1;
 8004564:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <menu+0x305c>)
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800456a:	f001 fe05 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800456e:	2108      	movs	r1, #8
 8004570:	4851      	ldr	r0, [pc, #324]	; (80046b8 <menu+0x3054>)
 8004572:	f005 fbdd 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10d      	bne.n	8004598 <menu+0x2f34>
 800457c:	4b4f      	ldr	r3, [pc, #316]	; (80046bc <menu+0x3058>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	f083 0301 	eor.w	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d006      	beq.n	8004598 <menu+0x2f34>
			eepromData[26] = demoMode;
 800458a:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <menu+0x305c>)
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <menu+0x3060>)
 8004590:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004592:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <menu+0x3064>)
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004598:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <menu+0x3068>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b1d      	cmp	r3, #29
 800459e:	f040 8132 	bne.w	8004806 <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80045a2:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <menu+0x306c>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d113      	bne.n	80045d2 <menu+0x2f6e>
 80045aa:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <menu+0x3070>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <menu+0x2f6e>
 80045b2:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <menu+0x3074>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <menu+0x2f6e>
 80045ba:	4b48      	ldr	r3, [pc, #288]	; (80046dc <menu+0x3078>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <menu+0x2f6e>
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <menu+0x307c>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <menu+0x2f6e>
			calismaSayisiYar = 0;
 80045ca:	4b46      	ldr	r3, [pc, #280]	; (80046e4 <menu+0x3080>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e002      	b.n	80045d8 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 80045d2:	4b44      	ldr	r3, [pc, #272]	; (80046e4 <menu+0x3080>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80045d8:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <menu+0x3084>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d154      	bne.n	800468a <menu+0x3026>
			if(dilSecim == 0) {
 80045e0:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <menu+0x304c>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80045e8:	4a40      	ldr	r2, [pc, #256]	; (80046ec <menu+0x3088>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7fc f8e3 	bl	80007b8 <lcd_print>
 80045f2:	e008      	b.n	8004606 <menu+0x2fa2>
			} else if(dilSecim == 1) {
 80045f4:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <menu+0x304c>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d104      	bne.n	8004606 <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 80045fc:	4a3c      	ldr	r2, [pc, #240]	; (80046f0 <menu+0x308c>)
 80045fe:	2101      	movs	r1, #1
 8004600:	2001      	movs	r0, #1
 8004602:	f7fc f8d9 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <menu+0x307c>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	220a      	movs	r2, #10
 800460c:	4939      	ldr	r1, [pc, #228]	; (80046f4 <menu+0x3090>)
 800460e:	4618      	mov	r0, r3
 8004610:	f008 fbba 	bl	800cd88 <itoa>
			lcd_print(2, 12, snum);
 8004614:	4a37      	ldr	r2, [pc, #220]	; (80046f4 <menu+0x3090>)
 8004616:	210c      	movs	r1, #12
 8004618:	2002      	movs	r0, #2
 800461a:	f7fc f8cd 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800461e:	4b2f      	ldr	r3, [pc, #188]	; (80046dc <menu+0x3078>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	220a      	movs	r2, #10
 8004624:	4933      	ldr	r1, [pc, #204]	; (80046f4 <menu+0x3090>)
 8004626:	4618      	mov	r0, r3
 8004628:	f008 fbae 	bl	800cd88 <itoa>
			lcd_print(2, 13, snum);
 800462c:	4a31      	ldr	r2, [pc, #196]	; (80046f4 <menu+0x3090>)
 800462e:	210d      	movs	r1, #13
 8004630:	2002      	movs	r0, #2
 8004632:	f7fc f8c1 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004636:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <menu+0x3074>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	220a      	movs	r2, #10
 800463c:	492d      	ldr	r1, [pc, #180]	; (80046f4 <menu+0x3090>)
 800463e:	4618      	mov	r0, r3
 8004640:	f008 fba2 	bl	800cd88 <itoa>
			lcd_print(2, 14, snum);
 8004644:	4a2b      	ldr	r2, [pc, #172]	; (80046f4 <menu+0x3090>)
 8004646:	210e      	movs	r1, #14
 8004648:	2002      	movs	r0, #2
 800464a:	f7fc f8b5 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800464e:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <menu+0x3070>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	220a      	movs	r2, #10
 8004654:	4927      	ldr	r1, [pc, #156]	; (80046f4 <menu+0x3090>)
 8004656:	4618      	mov	r0, r3
 8004658:	f008 fb96 	bl	800cd88 <itoa>
			lcd_print(2, 15, snum);
 800465c:	4a25      	ldr	r2, [pc, #148]	; (80046f4 <menu+0x3090>)
 800465e:	210f      	movs	r1, #15
 8004660:	2002      	movs	r0, #2
 8004662:	f7fc f8a9 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <menu+0x306c>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	220a      	movs	r2, #10
 800466c:	4921      	ldr	r1, [pc, #132]	; (80046f4 <menu+0x3090>)
 800466e:	4618      	mov	r0, r3
 8004670:	f008 fb8a 	bl	800cd88 <itoa>
			lcd_print(2, 16, snum);
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <menu+0x3090>)
 8004676:	2110      	movs	r1, #16
 8004678:	2002      	movs	r0, #2
 800467a:	f7fc f89d 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <menu+0x3094>)
 8004680:	2101      	movs	r1, #1
 8004682:	2002      	movs	r0, #2
 8004684:	f7fc f898 	bl	80007b8 <lcd_print>
 8004688:	e048      	b.n	800471c <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 800468a:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <menu+0x3084>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d144      	bne.n	800471c <menu+0x30b8>
			if(dilSecim == 0) {
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <menu+0x304c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d132      	bne.n	8004700 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800469a:	4a14      	ldr	r2, [pc, #80]	; (80046ec <menu+0x3088>)
 800469c:	2101      	movs	r1, #1
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fc f88a 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80046a4:	4a15      	ldr	r2, [pc, #84]	; (80046fc <menu+0x3098>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	2002      	movs	r0, #2
 80046aa:	f7fc f885 	bl	80007b8 <lcd_print>
 80046ae:	e035      	b.n	800471c <menu+0x30b8>
 80046b0:	20000c5a 	.word	0x20000c5a
 80046b4:	0800dcd8 	.word	0x0800dcd8
 80046b8:	40010800 	.word	0x40010800
 80046bc:	20000c68 	.word	0x20000c68
 80046c0:	20000c57 	.word	0x20000c57
 80046c4:	20000b28 	.word	0x20000b28
 80046c8:	20000c65 	.word	0x20000c65
 80046cc:	20000c39 	.word	0x20000c39
 80046d0:	20000c36 	.word	0x20000c36
 80046d4:	20000c37 	.word	0x20000c37
 80046d8:	200009b1 	.word	0x200009b1
 80046dc:	200009b2 	.word	0x200009b2
 80046e0:	20000c38 	.word	0x20000c38
 80046e4:	20000c7a 	.word	0x20000c7a
 80046e8:	20000c59 	.word	0x20000c59
 80046ec:	0800e360 	.word	0x0800e360
 80046f0:	0800e374 	.word	0x0800e374
 80046f4:	20000bbc 	.word	0x20000bbc
 80046f8:	0800e388 	.word	0x0800e388
 80046fc:	0800e394 	.word	0x0800e394
			} else if(dilSecim == 1) {
 8004700:	4b94      	ldr	r3, [pc, #592]	; (8004954 <menu+0x32f0>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d109      	bne.n	800471c <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 8004708:	4a93      	ldr	r2, [pc, #588]	; (8004958 <menu+0x32f4>)
 800470a:	2101      	movs	r1, #1
 800470c:	2001      	movs	r0, #1
 800470e:	f7fc f853 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004712:	4a92      	ldr	r2, [pc, #584]	; (800495c <menu+0x32f8>)
 8004714:	2101      	movs	r1, #1
 8004716:	2002      	movs	r0, #2
 8004718:	f7fc f84e 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800471c:	2102      	movs	r1, #2
 800471e:	4890      	ldr	r0, [pc, #576]	; (8004960 <menu+0x32fc>)
 8004720:	f005 fb06 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d119      	bne.n	800475e <menu+0x30fa>
 800472a:	4b8e      	ldr	r3, [pc, #568]	; (8004964 <menu+0x3300>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	f083 0301 	eor.w	r3, r3, #1
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d012      	beq.n	800475e <menu+0x30fa>
 8004738:	4b8b      	ldr	r3, [pc, #556]	; (8004968 <menu+0x3304>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00e      	beq.n	800475e <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004740:	4b8a      	ldr	r3, [pc, #552]	; (800496c <menu+0x3308>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	4b88      	ldr	r3, [pc, #544]	; (800496c <menu+0x3308>)
 800474a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800474c:	4b87      	ldr	r3, [pc, #540]	; (800496c <menu+0x3308>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d902      	bls.n	800475a <menu+0x30f6>
				calismaSayModu = 0;
 8004754:	4b85      	ldr	r3, [pc, #532]	; (800496c <menu+0x3308>)
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800475a:	f001 fd0d 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800475e:	2104      	movs	r1, #4
 8004760:	487f      	ldr	r0, [pc, #508]	; (8004960 <menu+0x32fc>)
 8004762:	f005 fae5 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004766:	4603      	mov	r3, r0
 8004768:	2b01      	cmp	r3, #1
 800476a:	d119      	bne.n	80047a0 <menu+0x313c>
 800476c:	4b7d      	ldr	r3, [pc, #500]	; (8004964 <menu+0x3300>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	f083 0301 	eor.w	r3, r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <menu+0x313c>
 800477a:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <menu+0x3304>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 8004782:	4b7a      	ldr	r3, [pc, #488]	; (800496c <menu+0x3308>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	3b01      	subs	r3, #1
 8004788:	b2da      	uxtb	r2, r3
 800478a:	4b78      	ldr	r3, [pc, #480]	; (800496c <menu+0x3308>)
 800478c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800478e:	4b77      	ldr	r3, [pc, #476]	; (800496c <menu+0x3308>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <menu+0x3138>
		   		calismaSayModu = 1;
 8004796:	4b75      	ldr	r3, [pc, #468]	; (800496c <menu+0x3308>)
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800479c:	f001 fcec 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80047a0:	2108      	movs	r1, #8
 80047a2:	486f      	ldr	r0, [pc, #444]	; (8004960 <menu+0x32fc>)
 80047a4:	f005 fac4 	bl	8009d30 <HAL_GPIO_ReadPin>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d12b      	bne.n	8004806 <menu+0x31a2>
 80047ae:	4b6d      	ldr	r3, [pc, #436]	; (8004964 <menu+0x3300>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f083 0301 	eor.w	r3, r3, #1
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d024      	beq.n	8004806 <menu+0x31a2>
			eepromData[32] = 0;
 80047bc:	4b6c      	ldr	r3, [pc, #432]	; (8004970 <menu+0x330c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80047c4:	4b6a      	ldr	r3, [pc, #424]	; (8004970 <menu+0x330c>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80047ca:	4b69      	ldr	r3, [pc, #420]	; (8004970 <menu+0x330c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80047d0:	4b67      	ldr	r3, [pc, #412]	; (8004970 <menu+0x330c>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80047d6:	4b66      	ldr	r3, [pc, #408]	; (8004970 <menu+0x330c>)
 80047d8:	2200      	movs	r2, #0
 80047da:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80047dc:	4b65      	ldr	r3, [pc, #404]	; (8004974 <menu+0x3310>)
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80047e2:	4b65      	ldr	r3, [pc, #404]	; (8004978 <menu+0x3314>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80047e8:	4b64      	ldr	r3, [pc, #400]	; (800497c <menu+0x3318>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80047ee:	4b64      	ldr	r3, [pc, #400]	; (8004980 <menu+0x331c>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80047f4:	4b63      	ldr	r3, [pc, #396]	; (8004984 <menu+0x3320>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80047fa:	4b5c      	ldr	r3, [pc, #368]	; (800496c <menu+0x3308>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004800:	4b61      	ldr	r3, [pc, #388]	; (8004988 <menu+0x3324>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004806:	4b61      	ldr	r3, [pc, #388]	; (800498c <menu+0x3328>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b1e      	cmp	r3, #30
 800480c:	d16f      	bne.n	80048ee <menu+0x328a>
		calismaSayModu = 0;
 800480e:	4b57      	ldr	r3, [pc, #348]	; (800496c <menu+0x3308>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004814:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <menu+0x32f0>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 800481c:	4a5c      	ldr	r2, [pc, #368]	; (8004990 <menu+0x332c>)
 800481e:	2101      	movs	r1, #1
 8004820:	2001      	movs	r0, #1
 8004822:	f7fb ffc9 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004826:	4a5b      	ldr	r2, [pc, #364]	; (8004994 <menu+0x3330>)
 8004828:	2101      	movs	r1, #1
 800482a:	2002      	movs	r0, #2
 800482c:	f7fb ffc4 	bl	80007b8 <lcd_print>
 8004830:	e00d      	b.n	800484e <menu+0x31ea>
		} else if(dilSecim == 1) {
 8004832:	4b48      	ldr	r3, [pc, #288]	; (8004954 <menu+0x32f0>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d109      	bne.n	800484e <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800483a:	4a57      	ldr	r2, [pc, #348]	; (8004998 <menu+0x3334>)
 800483c:	2101      	movs	r1, #1
 800483e:	2001      	movs	r0, #1
 8004840:	f7fb ffba 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004844:	4a55      	ldr	r2, [pc, #340]	; (800499c <menu+0x3338>)
 8004846:	2101      	movs	r1, #1
 8004848:	2002      	movs	r0, #2
 800484a:	f7fb ffb5 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800484e:	2102      	movs	r1, #2
 8004850:	4843      	ldr	r0, [pc, #268]	; (8004960 <menu+0x32fc>)
 8004852:	f005 fa6d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004856:	4603      	mov	r3, r0
 8004858:	2b01      	cmp	r3, #1
 800485a:	d115      	bne.n	8004888 <menu+0x3224>
 800485c:	4b41      	ldr	r3, [pc, #260]	; (8004964 <menu+0x3300>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f083 0301 	eor.w	r3, r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00e      	beq.n	8004888 <menu+0x3224>
			dilSecim = dilSecim + 1;
 800486a:	4b3a      	ldr	r3, [pc, #232]	; (8004954 <menu+0x32f0>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b38      	ldr	r3, [pc, #224]	; (8004954 <menu+0x32f0>)
 8004874:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <menu+0x32f0>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d902      	bls.n	8004884 <menu+0x3220>
				dilSecim = 0;
 800487e:	4b35      	ldr	r3, [pc, #212]	; (8004954 <menu+0x32f0>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004884:	f001 fc78 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004888:	2104      	movs	r1, #4
 800488a:	4835      	ldr	r0, [pc, #212]	; (8004960 <menu+0x32fc>)
 800488c:	f005 fa50 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004890:	4603      	mov	r3, r0
 8004892:	2b01      	cmp	r3, #1
 8004894:	d115      	bne.n	80048c2 <menu+0x325e>
 8004896:	4b33      	ldr	r3, [pc, #204]	; (8004964 <menu+0x3300>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	f083 0301 	eor.w	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <menu+0x325e>
			dilSecim = dilSecim - 1;
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <menu+0x32f0>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	4b29      	ldr	r3, [pc, #164]	; (8004954 <menu+0x32f0>)
 80048ae:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <menu+0x32f0>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <menu+0x325a>
		   		dilSecim = 1;
 80048b8:	4b26      	ldr	r3, [pc, #152]	; (8004954 <menu+0x32f0>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80048be:	f001 fc5b 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80048c2:	2108      	movs	r1, #8
 80048c4:	4826      	ldr	r0, [pc, #152]	; (8004960 <menu+0x32fc>)
 80048c6:	f005 fa33 	bl	8009d30 <HAL_GPIO_ReadPin>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10e      	bne.n	80048ee <menu+0x328a>
 80048d0:	4b24      	ldr	r3, [pc, #144]	; (8004964 <menu+0x3300>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f083 0301 	eor.w	r3, r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <menu+0x328a>
			eepromData[33] = dilSecim;
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <menu+0x32f0>)
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <menu+0x330c>)
 80048e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <menu+0x3324>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80048ee:	4b27      	ldr	r3, [pc, #156]	; (800498c <menu+0x3328>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b1f      	cmp	r3, #31
 80048f4:	f040 80b7 	bne.w	8004a66 <menu+0x3402>
		calismaSayModu = 0;
 80048f8:	4b1c      	ldr	r3, [pc, #112]	; (800496c <menu+0x3308>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80048fe:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <menu+0x333c>)
 8004900:	2101      	movs	r1, #1
 8004902:	2001      	movs	r0, #1
 8004904:	f7fb ff58 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 8004908:	4b26      	ldr	r3, [pc, #152]	; (80049a4 <menu+0x3340>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d113      	bne.n	8004938 <menu+0x32d4>
			if(dilSecim == 0) {
 8004910:	4b10      	ldr	r3, [pc, #64]	; (8004954 <menu+0x32f0>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004918:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <menu+0x3344>)
 800491a:	2101      	movs	r1, #1
 800491c:	2002      	movs	r0, #2
 800491e:	f7fb ff4b 	bl	80007b8 <lcd_print>
 8004922:	e050      	b.n	80049c6 <menu+0x3362>
			} else if(dilSecim == 1) {
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <menu+0x32f0>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d14c      	bne.n	80049c6 <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 800492c:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <menu+0x3348>)
 800492e:	2101      	movs	r1, #1
 8004930:	2002      	movs	r0, #2
 8004932:	f7fb ff41 	bl	80007b8 <lcd_print>
 8004936:	e046      	b.n	80049c6 <menu+0x3362>
			}
		} else if(iotMode == 1) {
 8004938:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <menu+0x3340>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d142      	bne.n	80049c6 <menu+0x3362>
			if(dilSecim == 0){
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <menu+0x32f0>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d135      	bne.n	80049b4 <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 8004948:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <menu+0x334c>)
 800494a:	2101      	movs	r1, #1
 800494c:	2002      	movs	r0, #2
 800494e:	f7fb ff33 	bl	80007b8 <lcd_print>
 8004952:	e038      	b.n	80049c6 <menu+0x3362>
 8004954:	20000c5a 	.word	0x20000c5a
 8004958:	0800e374 	.word	0x0800e374
 800495c:	0800e3a8 	.word	0x0800e3a8
 8004960:	40010800 	.word	0x40010800
 8004964:	20000c68 	.word	0x20000c68
 8004968:	20000c7a 	.word	0x20000c7a
 800496c:	20000c59 	.word	0x20000c59
 8004970:	20000b28 	.word	0x20000b28
 8004974:	20000c38 	.word	0x20000c38
 8004978:	200009b2 	.word	0x200009b2
 800497c:	200009b1 	.word	0x200009b1
 8004980:	20000c37 	.word	0x20000c37
 8004984:	20000c36 	.word	0x20000c36
 8004988:	20000c65 	.word	0x20000c65
 800498c:	20000c39 	.word	0x20000c39
 8004990:	0800e3bc 	.word	0x0800e3bc
 8004994:	0800e3d0 	.word	0x0800e3d0
 8004998:	0800e3e4 	.word	0x0800e3e4
 800499c:	0800e3f8 	.word	0x0800e3f8
 80049a0:	0800e40c 	.word	0x0800e40c
 80049a4:	20000c58 	.word	0x20000c58
 80049a8:	0800dc64 	.word	0x0800dc64
 80049ac:	0800dc78 	.word	0x0800dc78
 80049b0:	0800dcc4 	.word	0x0800dcc4
			} else if(dilSecim == 1) {
 80049b4:	4b8f      	ldr	r3, [pc, #572]	; (8004bf4 <menu+0x3590>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d104      	bne.n	80049c6 <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 80049bc:	4a8e      	ldr	r2, [pc, #568]	; (8004bf8 <menu+0x3594>)
 80049be:	2101      	movs	r1, #1
 80049c0:	2002      	movs	r0, #2
 80049c2:	f7fb fef9 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80049c6:	2102      	movs	r1, #2
 80049c8:	488c      	ldr	r0, [pc, #560]	; (8004bfc <menu+0x3598>)
 80049ca:	f005 f9b1 	bl	8009d30 <HAL_GPIO_ReadPin>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d115      	bne.n	8004a00 <menu+0x339c>
 80049d4:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <menu+0x359c>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	f083 0301 	eor.w	r3, r3, #1
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00e      	beq.n	8004a00 <menu+0x339c>
			iotMode = iotMode + 1;
 80049e2:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <menu+0x35a0>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b86      	ldr	r3, [pc, #536]	; (8004c04 <menu+0x35a0>)
 80049ec:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80049ee:	4b85      	ldr	r3, [pc, #532]	; (8004c04 <menu+0x35a0>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d902      	bls.n	80049fc <menu+0x3398>
				iotMode = 0;
 80049f6:	4b83      	ldr	r3, [pc, #524]	; (8004c04 <menu+0x35a0>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80049fc:	f001 fbbc 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a00:	2104      	movs	r1, #4
 8004a02:	487e      	ldr	r0, [pc, #504]	; (8004bfc <menu+0x3598>)
 8004a04:	f005 f994 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d115      	bne.n	8004a3a <menu+0x33d6>
 8004a0e:	4b7c      	ldr	r3, [pc, #496]	; (8004c00 <menu+0x359c>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	f083 0301 	eor.w	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <menu+0x33d6>
			iotMode = iotMode - 1;
 8004a1c:	4b79      	ldr	r3, [pc, #484]	; (8004c04 <menu+0x35a0>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	4b77      	ldr	r3, [pc, #476]	; (8004c04 <menu+0x35a0>)
 8004a26:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004a28:	4b76      	ldr	r3, [pc, #472]	; (8004c04 <menu+0x35a0>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <menu+0x33d2>
		   		iotMode = 1;
 8004a30:	4b74      	ldr	r3, [pc, #464]	; (8004c04 <menu+0x35a0>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004a36:	f001 fb9f 	bl	8006178 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a3a:	2108      	movs	r1, #8
 8004a3c:	486f      	ldr	r0, [pc, #444]	; (8004bfc <menu+0x3598>)
 8004a3e:	f005 f977 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10e      	bne.n	8004a66 <menu+0x3402>
 8004a48:	4b6d      	ldr	r3, [pc, #436]	; (8004c00 <menu+0x359c>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	f083 0301 	eor.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <menu+0x3402>
			eepromData[37] = iotMode;
 8004a56:	4b6b      	ldr	r3, [pc, #428]	; (8004c04 <menu+0x35a0>)
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	4b6b      	ldr	r3, [pc, #428]	; (8004c08 <menu+0x35a4>)
 8004a5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8004a60:	4b6a      	ldr	r3, [pc, #424]	; (8004c0c <menu+0x35a8>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004a66:	4b6a      	ldr	r3, [pc, #424]	; (8004c10 <menu+0x35ac>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d145      	bne.n	8004afa <menu+0x3496>
		calismaSayModu = 0;
 8004a6e:	4b69      	ldr	r3, [pc, #420]	; (8004c14 <menu+0x35b0>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004a74:	4a68      	ldr	r2, [pc, #416]	; (8004c18 <menu+0x35b4>)
 8004a76:	2101      	movs	r1, #1
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f7fb fe9d 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 8004a7e:	4a67      	ldr	r2, [pc, #412]	; (8004c1c <menu+0x35b8>)
 8004a80:	2101      	movs	r1, #1
 8004a82:	2002      	movs	r0, #2
 8004a84:	f7fb fe98 	bl	80007b8 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 8004a88:	4864      	ldr	r0, [pc, #400]	; (8004c1c <menu+0x35b8>)
 8004a8a:	f7fb fbcb 	bl	8000224 <strlen>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	3301      	adds	r3, #1
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4a62      	ldr	r2, [pc, #392]	; (8004c20 <menu+0x35bc>)
 8004a98:	4619      	mov	r1, r3
 8004a9a:	2002      	movs	r0, #2
 8004a9c:	f7fb fe8c 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004aa0:	2102      	movs	r1, #2
 8004aa2:	4856      	ldr	r0, [pc, #344]	; (8004bfc <menu+0x3598>)
 8004aa4:	f005 f944 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d125      	bne.n	8004afa <menu+0x3496>
 8004aae:	2104      	movs	r1, #4
 8004ab0:	4852      	ldr	r0, [pc, #328]	; (8004bfc <menu+0x3598>)
 8004ab2:	f005 f93d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d11e      	bne.n	8004afa <menu+0x3496>
 8004abc:	4b50      	ldr	r3, [pc, #320]	; (8004c00 <menu+0x359c>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	f083 0301 	eor.w	r3, r3, #1
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d017      	beq.n	8004afa <menu+0x3496>
			takeMachineID(0, &hi2c1);
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f7fc f976 	bl	8000dc0 <takeMachineID>

			lcd_print(2, 1, machineID);
 8004ad4:	4a51      	ldr	r2, [pc, #324]	; (8004c1c <menu+0x35b8>)
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	2002      	movs	r0, #2
 8004ada:	f7fb fe6d 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 8004ade:	484f      	ldr	r0, [pc, #316]	; (8004c1c <menu+0x35b8>)
 8004ae0:	f7fb fba0 	bl	8000224 <strlen>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	4a4c      	ldr	r2, [pc, #304]	; (8004c20 <menu+0x35bc>)
 8004aee:	4619      	mov	r1, r3
 8004af0:	2002      	movs	r0, #2
 8004af2:	f7fb fe61 	bl	80007b8 <lcd_print>

			bekle();
 8004af6:	f001 fb3f 	bl	8006178 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004afa:	4b45      	ldr	r3, [pc, #276]	; (8004c10 <menu+0x35ac>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b21      	cmp	r3, #33	; 0x21
 8004b00:	d154      	bne.n	8004bac <menu+0x3548>
		calismaSayModu = 0;
 8004b02:	4b44      	ldr	r3, [pc, #272]	; (8004c14 <menu+0x35b0>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]

		if(strlen(wifiSSID) <=16) {
 8004b08:	4846      	ldr	r0, [pc, #280]	; (8004c24 <menu+0x35c0>)
 8004b0a:	f7fb fb8b 	bl	8000224 <strlen>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d816      	bhi.n	8004b42 <menu+0x34de>
			lcd_print(1, 1, "WIFI SSID       ");
 8004b14:	4a44      	ldr	r2, [pc, #272]	; (8004c28 <menu+0x35c4>)
 8004b16:	2101      	movs	r1, #1
 8004b18:	2001      	movs	r0, #1
 8004b1a:	f7fb fe4d 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 8004b1e:	4a41      	ldr	r2, [pc, #260]	; (8004c24 <menu+0x35c0>)
 8004b20:	2101      	movs	r1, #1
 8004b22:	2002      	movs	r0, #2
 8004b24:	f7fb fe48 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004b28:	483e      	ldr	r0, [pc, #248]	; (8004c24 <menu+0x35c0>)
 8004b2a:	f7fb fb7b 	bl	8000224 <strlen>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	4a3a      	ldr	r2, [pc, #232]	; (8004c20 <menu+0x35bc>)
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2002      	movs	r0, #2
 8004b3c:	f7fb fe3c 	bl	80007b8 <lcd_print>
 8004b40:	e009      	b.n	8004b56 <menu+0x34f2>
		} else {
			slideText(wifiSSID, 1, 2, 1, 1, "WIFI SSID       ");
 8004b42:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <menu+0x35c4>)
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	2301      	movs	r3, #1
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4834      	ldr	r0, [pc, #208]	; (8004c24 <menu+0x35c0>)
 8004b52:	f7fc fd41 	bl	80015d8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b56:	2102      	movs	r1, #2
 8004b58:	4828      	ldr	r0, [pc, #160]	; (8004bfc <menu+0x3598>)
 8004b5a:	f005 f8e9 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d123      	bne.n	8004bac <menu+0x3548>
 8004b64:	2104      	movs	r1, #4
 8004b66:	4825      	ldr	r0, [pc, #148]	; (8004bfc <menu+0x3598>)
 8004b68:	f005 f8e2 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d11c      	bne.n	8004bac <menu+0x3548>
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <menu+0x359c>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f083 0301 	eor.w	r3, r3, #1
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <menu+0x3548>
			takeWifiSSID(0);
 8004b80:	2000      	movs	r0, #0
 8004b82:	f7fc fa31 	bl	8000fe8 <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 8004b86:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <menu+0x35c0>)
 8004b88:	2101      	movs	r1, #1
 8004b8a:	2002      	movs	r0, #2
 8004b8c:	f7fb fe14 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004b90:	4824      	ldr	r0, [pc, #144]	; (8004c24 <menu+0x35c0>)
 8004b92:	f7fb fb47 	bl	8000224 <strlen>
 8004b96:	4603      	mov	r3, r0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <menu+0x35bc>)
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	2002      	movs	r0, #2
 8004ba4:	f7fb fe08 	bl	80007b8 <lcd_print>

			bekle();
 8004ba8:	f001 fae6 	bl	8006178 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004bac:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <menu+0x35ac>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b22      	cmp	r3, #34	; 0x22
 8004bb2:	d174      	bne.n	8004c9e <menu+0x363a>
		calismaSayModu = 0;
 8004bb4:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <menu+0x35b0>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]

		if(strlen(wifiPass) <= 16) {
 8004bba:	481c      	ldr	r0, [pc, #112]	; (8004c2c <menu+0x35c8>)
 8004bbc:	f7fb fb32 	bl	8000224 <strlen>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d836      	bhi.n	8004c34 <menu+0x35d0>
			lcd_print(1, 1, "WIFI PASS       ");
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <menu+0x35cc>)
 8004bc8:	2101      	movs	r1, #1
 8004bca:	2001      	movs	r0, #1
 8004bcc:	f7fb fdf4 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, wifiPass);
 8004bd0:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <menu+0x35c8>)
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	2002      	movs	r0, #2
 8004bd6:	f7fb fdef 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004bda:	4814      	ldr	r0, [pc, #80]	; (8004c2c <menu+0x35c8>)
 8004bdc:	f7fb fb22 	bl	8000224 <strlen>
 8004be0:	4603      	mov	r3, r0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <menu+0x35bc>)
 8004bea:	4619      	mov	r1, r3
 8004bec:	2002      	movs	r0, #2
 8004bee:	f7fb fde3 	bl	80007b8 <lcd_print>
 8004bf2:	e029      	b.n	8004c48 <menu+0x35e4>
 8004bf4:	20000c5a 	.word	0x20000c5a
 8004bf8:	0800dcd8 	.word	0x0800dcd8
 8004bfc:	40010800 	.word	0x40010800
 8004c00:	20000c68 	.word	0x20000c68
 8004c04:	20000c58 	.word	0x20000c58
 8004c08:	20000b28 	.word	0x20000b28
 8004c0c:	20000c65 	.word	0x20000c65
 8004c10:	20000c39 	.word	0x20000c39
 8004c14:	20000c59 	.word	0x20000c59
 8004c18:	0800e420 	.word	0x0800e420
 8004c1c:	20000be4 	.word	0x20000be4
 8004c20:	2000094c 	.word	0x2000094c
 8004c24:	20000bf0 	.word	0x20000bf0
 8004c28:	0800e434 	.word	0x0800e434
 8004c2c:	20000c14 	.word	0x20000c14
 8004c30:	0800e448 	.word	0x0800e448
		} else {
			slideText(wifiPass, 1, 2, 1, 1, "WIFI PASS       ");
 8004c34:	4b35      	ldr	r3, [pc, #212]	; (8004d0c <menu+0x36a8>)
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	2202      	movs	r2, #2
 8004c40:	2101      	movs	r1, #1
 8004c42:	4833      	ldr	r0, [pc, #204]	; (8004d10 <menu+0x36ac>)
 8004c44:	f7fc fcc8 	bl	80015d8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4832      	ldr	r0, [pc, #200]	; (8004d14 <menu+0x36b0>)
 8004c4c:	f005 f870 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d123      	bne.n	8004c9e <menu+0x363a>
 8004c56:	2104      	movs	r1, #4
 8004c58:	482e      	ldr	r0, [pc, #184]	; (8004d14 <menu+0x36b0>)
 8004c5a:	f005 f869 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d11c      	bne.n	8004c9e <menu+0x363a>
 8004c64:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <menu+0x36b4>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f083 0301 	eor.w	r3, r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d015      	beq.n	8004c9e <menu+0x363a>
			takeWifiPass(0);
 8004c72:	2000      	movs	r0, #0
 8004c74:	f7fc fb34 	bl	80012e0 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 8004c78:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <menu+0x36ac>)
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7fb fd9b 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004c82:	4823      	ldr	r0, [pc, #140]	; (8004d10 <menu+0x36ac>)
 8004c84:	f7fb face 	bl	8000224 <strlen>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <menu+0x36b8>)
 8004c92:	4619      	mov	r1, r3
 8004c94:	2002      	movs	r0, #2
 8004c96:	f7fb fd8f 	bl	80007b8 <lcd_print>

			bekle();
 8004c9a:	f001 fa6d 	bl	8006178 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004c9e:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <menu+0x36bc>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b23      	cmp	r3, #35	; 0x23
 8004ca4:	d12e      	bne.n	8004d04 <menu+0x36a0>
		if(dilSecim == 0) {
 8004ca6:	4b1f      	ldr	r3, [pc, #124]	; (8004d24 <menu+0x36c0>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <menu+0x3660>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004cae:	4a1e      	ldr	r2, [pc, #120]	; (8004d28 <menu+0x36c4>)
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f7fb fd80 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004cb8:	4a1c      	ldr	r2, [pc, #112]	; (8004d2c <menu+0x36c8>)
 8004cba:	2101      	movs	r1, #1
 8004cbc:	2002      	movs	r0, #2
 8004cbe:	f7fb fd7b 	bl	80007b8 <lcd_print>
 8004cc2:	e00d      	b.n	8004ce0 <menu+0x367c>
		} else if(dilSecim == 1) {
 8004cc4:	4b17      	ldr	r3, [pc, #92]	; (8004d24 <menu+0x36c0>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d109      	bne.n	8004ce0 <menu+0x367c>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004ccc:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <menu+0x36cc>)
 8004cce:	2101      	movs	r1, #1
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f7fb fd71 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004cd6:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <menu+0x36d0>)
 8004cd8:	2101      	movs	r1, #1
 8004cda:	2002      	movs	r0, #2
 8004cdc:	f7fb fd6c 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004ce0:	2108      	movs	r1, #8
 8004ce2:	480c      	ldr	r0, [pc, #48]	; (8004d14 <menu+0x36b0>)
 8004ce4:	f005 f824 	bl	8009d30 <HAL_GPIO_ReadPin>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10a      	bne.n	8004d04 <menu+0x36a0>
			menuGiris = 0;
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <menu+0x36d4>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004cf4:	f7fb fd8c 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8004cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004cfc:	f004 fa48 	bl	8009190 <HAL_Delay>
			NVIC_SystemReset();
 8004d00:	f7fb fdf2 	bl	80008e8 <__NVIC_SystemReset>
		}
	}
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	0800e448 	.word	0x0800e448
 8004d10:	20000c14 	.word	0x20000c14
 8004d14:	40010800 	.word	0x40010800
 8004d18:	20000c68 	.word	0x20000c68
 8004d1c:	2000094c 	.word	0x2000094c
 8004d20:	20000c39 	.word	0x20000c39
 8004d24:	20000c5a 	.word	0x20000c5a
 8004d28:	0800e45c 	.word	0x0800e45c
 8004d2c:	0800e470 	.word	0x0800e470
 8004d30:	0800e484 	.word	0x0800e484
 8004d34:	0800e498 	.word	0x0800e498
 8004d38:	20000c56 	.word	0x20000c56

08004d3c <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004d46:	48a9      	ldr	r0, [pc, #676]	; (8004fec <loadMenuTexts+0x2b0>)
 8004d48:	f7fb fde4 	bl	8000914 <copyText>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4aa8      	ldr	r2, [pc, #672]	; (8004ff0 <loadMenuTexts+0x2b4>)
 8004d50:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004d52:	48a8      	ldr	r0, [pc, #672]	; (8004ff4 <loadMenuTexts+0x2b8>)
 8004d54:	f7fb fdde 	bl	8000914 <copyText>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4aa7      	ldr	r2, [pc, #668]	; (8004ff8 <loadMenuTexts+0x2bc>)
 8004d5c:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004d5e:	48a7      	ldr	r0, [pc, #668]	; (8004ffc <loadMenuTexts+0x2c0>)
 8004d60:	f7fb fdd8 	bl	8000914 <copyText>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4aa6      	ldr	r2, [pc, #664]	; (8005000 <loadMenuTexts+0x2c4>)
 8004d68:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004d6a:	48a6      	ldr	r0, [pc, #664]	; (8005004 <loadMenuTexts+0x2c8>)
 8004d6c:	f7fb fdd2 	bl	8000914 <copyText>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4aa5      	ldr	r2, [pc, #660]	; (8005008 <loadMenuTexts+0x2cc>)
 8004d74:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004d76:	48a5      	ldr	r0, [pc, #660]	; (800500c <loadMenuTexts+0x2d0>)
 8004d78:	f7fb fdcc 	bl	8000914 <copyText>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4aa4      	ldr	r2, [pc, #656]	; (8005010 <loadMenuTexts+0x2d4>)
 8004d80:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004d82:	48a4      	ldr	r0, [pc, #656]	; (8005014 <loadMenuTexts+0x2d8>)
 8004d84:	f7fb fdc6 	bl	8000914 <copyText>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4aa3      	ldr	r2, [pc, #652]	; (8005018 <loadMenuTexts+0x2dc>)
 8004d8c:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004d8e:	48a3      	ldr	r0, [pc, #652]	; (800501c <loadMenuTexts+0x2e0>)
 8004d90:	f7fb fdc0 	bl	8000914 <copyText>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4aa2      	ldr	r2, [pc, #648]	; (8005020 <loadMenuTexts+0x2e4>)
 8004d98:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f040 82d1 	bne.w	8005344 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004da2:	48a0      	ldr	r0, [pc, #640]	; (8005024 <loadMenuTexts+0x2e8>)
 8004da4:	f7fb fdb6 	bl	8000914 <copyText>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a9f      	ldr	r2, [pc, #636]	; (8005028 <loadMenuTexts+0x2ec>)
 8004dac:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004dae:	489f      	ldr	r0, [pc, #636]	; (800502c <loadMenuTexts+0x2f0>)
 8004db0:	f7fb fdb0 	bl	8000914 <copyText>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a9e      	ldr	r2, [pc, #632]	; (8005030 <loadMenuTexts+0x2f4>)
 8004db8:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004dba:	489e      	ldr	r0, [pc, #632]	; (8005034 <loadMenuTexts+0x2f8>)
 8004dbc:	f7fb fdaa 	bl	8000914 <copyText>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a9d      	ldr	r2, [pc, #628]	; (8005038 <loadMenuTexts+0x2fc>)
 8004dc4:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004dc6:	489d      	ldr	r0, [pc, #628]	; (800503c <loadMenuTexts+0x300>)
 8004dc8:	f7fb fda4 	bl	8000914 <copyText>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a9c      	ldr	r2, [pc, #624]	; (8005040 <loadMenuTexts+0x304>)
 8004dd0:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004dd2:	489c      	ldr	r0, [pc, #624]	; (8005044 <loadMenuTexts+0x308>)
 8004dd4:	f7fb fd9e 	bl	8000914 <copyText>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4a9b      	ldr	r2, [pc, #620]	; (8005048 <loadMenuTexts+0x30c>)
 8004ddc:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004dde:	489b      	ldr	r0, [pc, #620]	; (800504c <loadMenuTexts+0x310>)
 8004de0:	f7fb fd98 	bl	8000914 <copyText>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a9a      	ldr	r2, [pc, #616]	; (8005050 <loadMenuTexts+0x314>)
 8004de8:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004dea:	489a      	ldr	r0, [pc, #616]	; (8005054 <loadMenuTexts+0x318>)
 8004dec:	f7fb fd92 	bl	8000914 <copyText>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4a99      	ldr	r2, [pc, #612]	; (8005058 <loadMenuTexts+0x31c>)
 8004df4:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004df6:	4899      	ldr	r0, [pc, #612]	; (800505c <loadMenuTexts+0x320>)
 8004df8:	f7fb fd8c 	bl	8000914 <copyText>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4a98      	ldr	r2, [pc, #608]	; (8005060 <loadMenuTexts+0x324>)
 8004e00:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004e02:	4898      	ldr	r0, [pc, #608]	; (8005064 <loadMenuTexts+0x328>)
 8004e04:	f7fb fd86 	bl	8000914 <copyText>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4a97      	ldr	r2, [pc, #604]	; (8005068 <loadMenuTexts+0x32c>)
 8004e0c:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004e0e:	4897      	ldr	r0, [pc, #604]	; (800506c <loadMenuTexts+0x330>)
 8004e10:	f7fb fd80 	bl	8000914 <copyText>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4a96      	ldr	r2, [pc, #600]	; (8005070 <loadMenuTexts+0x334>)
 8004e18:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004e1a:	4896      	ldr	r0, [pc, #600]	; (8005074 <loadMenuTexts+0x338>)
 8004e1c:	f7fb fd7a 	bl	8000914 <copyText>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a95      	ldr	r2, [pc, #596]	; (8005078 <loadMenuTexts+0x33c>)
 8004e24:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004e26:	4895      	ldr	r0, [pc, #596]	; (800507c <loadMenuTexts+0x340>)
 8004e28:	f7fb fd74 	bl	8000914 <copyText>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4a94      	ldr	r2, [pc, #592]	; (8005080 <loadMenuTexts+0x344>)
 8004e30:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004e32:	4894      	ldr	r0, [pc, #592]	; (8005084 <loadMenuTexts+0x348>)
 8004e34:	f7fb fd6e 	bl	8000914 <copyText>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a93      	ldr	r2, [pc, #588]	; (8005088 <loadMenuTexts+0x34c>)
 8004e3c:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004e3e:	4893      	ldr	r0, [pc, #588]	; (800508c <loadMenuTexts+0x350>)
 8004e40:	f7fb fd68 	bl	8000914 <copyText>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a92      	ldr	r2, [pc, #584]	; (8005090 <loadMenuTexts+0x354>)
 8004e48:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004e4a:	4892      	ldr	r0, [pc, #584]	; (8005094 <loadMenuTexts+0x358>)
 8004e4c:	f7fb fd62 	bl	8000914 <copyText>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a91      	ldr	r2, [pc, #580]	; (8005098 <loadMenuTexts+0x35c>)
 8004e54:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004e56:	4891      	ldr	r0, [pc, #580]	; (800509c <loadMenuTexts+0x360>)
 8004e58:	f7fb fd5c 	bl	8000914 <copyText>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4a90      	ldr	r2, [pc, #576]	; (80050a0 <loadMenuTexts+0x364>)
 8004e60:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004e62:	4890      	ldr	r0, [pc, #576]	; (80050a4 <loadMenuTexts+0x368>)
 8004e64:	f7fb fd56 	bl	8000914 <copyText>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4a8f      	ldr	r2, [pc, #572]	; (80050a8 <loadMenuTexts+0x36c>)
 8004e6c:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004e6e:	488f      	ldr	r0, [pc, #572]	; (80050ac <loadMenuTexts+0x370>)
 8004e70:	f7fb fd50 	bl	8000914 <copyText>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4a8e      	ldr	r2, [pc, #568]	; (80050b0 <loadMenuTexts+0x374>)
 8004e78:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004e7a:	488e      	ldr	r0, [pc, #568]	; (80050b4 <loadMenuTexts+0x378>)
 8004e7c:	f7fb fd4a 	bl	8000914 <copyText>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4a8d      	ldr	r2, [pc, #564]	; (80050b8 <loadMenuTexts+0x37c>)
 8004e84:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004e86:	488d      	ldr	r0, [pc, #564]	; (80050bc <loadMenuTexts+0x380>)
 8004e88:	f7fb fd44 	bl	8000914 <copyText>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4a8c      	ldr	r2, [pc, #560]	; (80050c0 <loadMenuTexts+0x384>)
 8004e90:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004e92:	488c      	ldr	r0, [pc, #560]	; (80050c4 <loadMenuTexts+0x388>)
 8004e94:	f7fb fd3e 	bl	8000914 <copyText>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4a8b      	ldr	r2, [pc, #556]	; (80050c8 <loadMenuTexts+0x38c>)
 8004e9c:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004e9e:	488b      	ldr	r0, [pc, #556]	; (80050cc <loadMenuTexts+0x390>)
 8004ea0:	f7fb fd38 	bl	8000914 <copyText>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4a8a      	ldr	r2, [pc, #552]	; (80050d0 <loadMenuTexts+0x394>)
 8004ea8:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004eaa:	488a      	ldr	r0, [pc, #552]	; (80050d4 <loadMenuTexts+0x398>)
 8004eac:	f7fb fd32 	bl	8000914 <copyText>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a89      	ldr	r2, [pc, #548]	; (80050d8 <loadMenuTexts+0x39c>)
 8004eb4:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004eb6:	4889      	ldr	r0, [pc, #548]	; (80050dc <loadMenuTexts+0x3a0>)
 8004eb8:	f7fb fd2c 	bl	8000914 <copyText>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4a88      	ldr	r2, [pc, #544]	; (80050e0 <loadMenuTexts+0x3a4>)
 8004ec0:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004ec2:	4888      	ldr	r0, [pc, #544]	; (80050e4 <loadMenuTexts+0x3a8>)
 8004ec4:	f7fb fd26 	bl	8000914 <copyText>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4a87      	ldr	r2, [pc, #540]	; (80050e8 <loadMenuTexts+0x3ac>)
 8004ecc:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004ece:	4887      	ldr	r0, [pc, #540]	; (80050ec <loadMenuTexts+0x3b0>)
 8004ed0:	f7fb fd20 	bl	8000914 <copyText>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4a86      	ldr	r2, [pc, #536]	; (80050f0 <loadMenuTexts+0x3b4>)
 8004ed8:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004eda:	4886      	ldr	r0, [pc, #536]	; (80050f4 <loadMenuTexts+0x3b8>)
 8004edc:	f7fb fd1a 	bl	8000914 <copyText>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4a85      	ldr	r2, [pc, #532]	; (80050f8 <loadMenuTexts+0x3bc>)
 8004ee4:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004ee6:	4885      	ldr	r0, [pc, #532]	; (80050fc <loadMenuTexts+0x3c0>)
 8004ee8:	f7fb fd14 	bl	8000914 <copyText>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a84      	ldr	r2, [pc, #528]	; (8005100 <loadMenuTexts+0x3c4>)
 8004ef0:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004ef2:	4884      	ldr	r0, [pc, #528]	; (8005104 <loadMenuTexts+0x3c8>)
 8004ef4:	f7fb fd0e 	bl	8000914 <copyText>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4a83      	ldr	r2, [pc, #524]	; (8005108 <loadMenuTexts+0x3cc>)
 8004efc:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004efe:	4883      	ldr	r0, [pc, #524]	; (800510c <loadMenuTexts+0x3d0>)
 8004f00:	f7fb fd08 	bl	8000914 <copyText>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4a82      	ldr	r2, [pc, #520]	; (8005110 <loadMenuTexts+0x3d4>)
 8004f08:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004f0a:	4882      	ldr	r0, [pc, #520]	; (8005114 <loadMenuTexts+0x3d8>)
 8004f0c:	f7fb fd02 	bl	8000914 <copyText>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4a81      	ldr	r2, [pc, #516]	; (8005118 <loadMenuTexts+0x3dc>)
 8004f14:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004f16:	4881      	ldr	r0, [pc, #516]	; (800511c <loadMenuTexts+0x3e0>)
 8004f18:	f7fb fcfc 	bl	8000914 <copyText>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4a80      	ldr	r2, [pc, #512]	; (8005120 <loadMenuTexts+0x3e4>)
 8004f20:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004f22:	4880      	ldr	r0, [pc, #512]	; (8005124 <loadMenuTexts+0x3e8>)
 8004f24:	f7fb fcf6 	bl	8000914 <copyText>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4a7f      	ldr	r2, [pc, #508]	; (8005128 <loadMenuTexts+0x3ec>)
 8004f2c:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004f2e:	487f      	ldr	r0, [pc, #508]	; (800512c <loadMenuTexts+0x3f0>)
 8004f30:	f7fb fcf0 	bl	8000914 <copyText>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4a7e      	ldr	r2, [pc, #504]	; (8005130 <loadMenuTexts+0x3f4>)
 8004f38:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004f3a:	487e      	ldr	r0, [pc, #504]	; (8005134 <loadMenuTexts+0x3f8>)
 8004f3c:	f7fb fcea 	bl	8000914 <copyText>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4a7d      	ldr	r2, [pc, #500]	; (8005138 <loadMenuTexts+0x3fc>)
 8004f44:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004f46:	487d      	ldr	r0, [pc, #500]	; (800513c <loadMenuTexts+0x400>)
 8004f48:	f7fb fce4 	bl	8000914 <copyText>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4a7c      	ldr	r2, [pc, #496]	; (8005140 <loadMenuTexts+0x404>)
 8004f50:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004f52:	487c      	ldr	r0, [pc, #496]	; (8005144 <loadMenuTexts+0x408>)
 8004f54:	f7fb fcde 	bl	8000914 <copyText>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4a7b      	ldr	r2, [pc, #492]	; (8005148 <loadMenuTexts+0x40c>)
 8004f5c:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004f5e:	487b      	ldr	r0, [pc, #492]	; (800514c <loadMenuTexts+0x410>)
 8004f60:	f7fb fcd8 	bl	8000914 <copyText>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4a7a      	ldr	r2, [pc, #488]	; (8005150 <loadMenuTexts+0x414>)
 8004f68:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004f6a:	487a      	ldr	r0, [pc, #488]	; (8005154 <loadMenuTexts+0x418>)
 8004f6c:	f7fb fcd2 	bl	8000914 <copyText>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4a79      	ldr	r2, [pc, #484]	; (8005158 <loadMenuTexts+0x41c>)
 8004f74:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004f76:	4879      	ldr	r0, [pc, #484]	; (800515c <loadMenuTexts+0x420>)
 8004f78:	f7fb fccc 	bl	8000914 <copyText>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4a78      	ldr	r2, [pc, #480]	; (8005160 <loadMenuTexts+0x424>)
 8004f80:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004f82:	4878      	ldr	r0, [pc, #480]	; (8005164 <loadMenuTexts+0x428>)
 8004f84:	f7fb fcc6 	bl	8000914 <copyText>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4a77      	ldr	r2, [pc, #476]	; (8005168 <loadMenuTexts+0x42c>)
 8004f8c:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004f8e:	4877      	ldr	r0, [pc, #476]	; (800516c <loadMenuTexts+0x430>)
 8004f90:	f7fb fcc0 	bl	8000914 <copyText>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4a76      	ldr	r2, [pc, #472]	; (8005170 <loadMenuTexts+0x434>)
 8004f98:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004f9a:	4876      	ldr	r0, [pc, #472]	; (8005174 <loadMenuTexts+0x438>)
 8004f9c:	f7fb fcba 	bl	8000914 <copyText>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4a75      	ldr	r2, [pc, #468]	; (8005178 <loadMenuTexts+0x43c>)
 8004fa4:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004fa6:	4875      	ldr	r0, [pc, #468]	; (800517c <loadMenuTexts+0x440>)
 8004fa8:	f7fb fcb4 	bl	8000914 <copyText>
 8004fac:	4603      	mov	r3, r0
 8004fae:	4a74      	ldr	r2, [pc, #464]	; (8005180 <loadMenuTexts+0x444>)
 8004fb0:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004fb2:	4874      	ldr	r0, [pc, #464]	; (8005184 <loadMenuTexts+0x448>)
 8004fb4:	f7fb fcae 	bl	8000914 <copyText>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4a73      	ldr	r2, [pc, #460]	; (8005188 <loadMenuTexts+0x44c>)
 8004fbc:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004fbe:	4873      	ldr	r0, [pc, #460]	; (800518c <loadMenuTexts+0x450>)
 8004fc0:	f7fb fca8 	bl	8000914 <copyText>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4a72      	ldr	r2, [pc, #456]	; (8005190 <loadMenuTexts+0x454>)
 8004fc8:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004fca:	4872      	ldr	r0, [pc, #456]	; (8005194 <loadMenuTexts+0x458>)
 8004fcc:	f7fb fca2 	bl	8000914 <copyText>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4a71      	ldr	r2, [pc, #452]	; (8005198 <loadMenuTexts+0x45c>)
 8004fd4:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004fd6:	4871      	ldr	r0, [pc, #452]	; (800519c <loadMenuTexts+0x460>)
 8004fd8:	f7fb fc9c 	bl	8000914 <copyText>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	4a70      	ldr	r2, [pc, #448]	; (80051a0 <loadMenuTexts+0x464>)
 8004fe0:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004fe2:	4870      	ldr	r0, [pc, #448]	; (80051a4 <loadMenuTexts+0x468>)
 8004fe4:	f7fb fc96 	bl	8000914 <copyText>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	e0dd      	b.n	80051a8 <loadMenuTexts+0x46c>
 8004fec:	20000000 	.word	0x20000000
 8004ff0:	20000ca0 	.word	0x20000ca0
 8004ff4:	20000010 	.word	0x20000010
 8004ff8:	20000ca4 	.word	0x20000ca4
 8004ffc:	20000020 	.word	0x20000020
 8005000:	20000cfc 	.word	0x20000cfc
 8005004:	20000030 	.word	0x20000030
 8005008:	20000d2c 	.word	0x20000d2c
 800500c:	20000040 	.word	0x20000040
 8005010:	20000d34 	.word	0x20000d34
 8005014:	20000050 	.word	0x20000050
 8005018:	20000dac 	.word	0x20000dac
 800501c:	20000060 	.word	0x20000060
 8005020:	20000db0 	.word	0x20000db0
 8005024:	20000070 	.word	0x20000070
 8005028:	20000ca8 	.word	0x20000ca8
 800502c:	20000080 	.word	0x20000080
 8005030:	20000cac 	.word	0x20000cac
 8005034:	20000090 	.word	0x20000090
 8005038:	20000cb0 	.word	0x20000cb0
 800503c:	200000a0 	.word	0x200000a0
 8005040:	20000cb4 	.word	0x20000cb4
 8005044:	200000b0 	.word	0x200000b0
 8005048:	20000cb8 	.word	0x20000cb8
 800504c:	200000c0 	.word	0x200000c0
 8005050:	20000cbc 	.word	0x20000cbc
 8005054:	200000d0 	.word	0x200000d0
 8005058:	20000cc0 	.word	0x20000cc0
 800505c:	200000e0 	.word	0x200000e0
 8005060:	20000cc4 	.word	0x20000cc4
 8005064:	200000f0 	.word	0x200000f0
 8005068:	20000cc8 	.word	0x20000cc8
 800506c:	20000100 	.word	0x20000100
 8005070:	20000ccc 	.word	0x20000ccc
 8005074:	20000110 	.word	0x20000110
 8005078:	20000cd0 	.word	0x20000cd0
 800507c:	20000120 	.word	0x20000120
 8005080:	20000cd4 	.word	0x20000cd4
 8005084:	20000130 	.word	0x20000130
 8005088:	20000cd8 	.word	0x20000cd8
 800508c:	20000140 	.word	0x20000140
 8005090:	20000cdc 	.word	0x20000cdc
 8005094:	20000150 	.word	0x20000150
 8005098:	20000ce0 	.word	0x20000ce0
 800509c:	20000160 	.word	0x20000160
 80050a0:	20000ce4 	.word	0x20000ce4
 80050a4:	20000170 	.word	0x20000170
 80050a8:	20000ce8 	.word	0x20000ce8
 80050ac:	20000180 	.word	0x20000180
 80050b0:	20000cec 	.word	0x20000cec
 80050b4:	20000190 	.word	0x20000190
 80050b8:	20000cf0 	.word	0x20000cf0
 80050bc:	200001a0 	.word	0x200001a0
 80050c0:	20000cf4 	.word	0x20000cf4
 80050c4:	200001b0 	.word	0x200001b0
 80050c8:	20000cf8 	.word	0x20000cf8
 80050cc:	200001c0 	.word	0x200001c0
 80050d0:	20000d00 	.word	0x20000d00
 80050d4:	200001d0 	.word	0x200001d0
 80050d8:	20000d04 	.word	0x20000d04
 80050dc:	200001e0 	.word	0x200001e0
 80050e0:	20000d08 	.word	0x20000d08
 80050e4:	200001f0 	.word	0x200001f0
 80050e8:	20000d0c 	.word	0x20000d0c
 80050ec:	20000200 	.word	0x20000200
 80050f0:	20000d10 	.word	0x20000d10
 80050f4:	20000210 	.word	0x20000210
 80050f8:	20000d14 	.word	0x20000d14
 80050fc:	20000220 	.word	0x20000220
 8005100:	20000d18 	.word	0x20000d18
 8005104:	20000230 	.word	0x20000230
 8005108:	20000d1c 	.word	0x20000d1c
 800510c:	20000240 	.word	0x20000240
 8005110:	20000d20 	.word	0x20000d20
 8005114:	20000250 	.word	0x20000250
 8005118:	20000d24 	.word	0x20000d24
 800511c:	20000260 	.word	0x20000260
 8005120:	20000d28 	.word	0x20000d28
 8005124:	20000270 	.word	0x20000270
 8005128:	20000d30 	.word	0x20000d30
 800512c:	20000280 	.word	0x20000280
 8005130:	20000d38 	.word	0x20000d38
 8005134:	20000290 	.word	0x20000290
 8005138:	20000d3c 	.word	0x20000d3c
 800513c:	200002a0 	.word	0x200002a0
 8005140:	20000d40 	.word	0x20000d40
 8005144:	200002b0 	.word	0x200002b0
 8005148:	20000d44 	.word	0x20000d44
 800514c:	200002c0 	.word	0x200002c0
 8005150:	20000d48 	.word	0x20000d48
 8005154:	200002d0 	.word	0x200002d0
 8005158:	20000d4c 	.word	0x20000d4c
 800515c:	200002e0 	.word	0x200002e0
 8005160:	20000d50 	.word	0x20000d50
 8005164:	200002f0 	.word	0x200002f0
 8005168:	20000d54 	.word	0x20000d54
 800516c:	20000300 	.word	0x20000300
 8005170:	20000d58 	.word	0x20000d58
 8005174:	20000310 	.word	0x20000310
 8005178:	20000d5c 	.word	0x20000d5c
 800517c:	20000320 	.word	0x20000320
 8005180:	20000d60 	.word	0x20000d60
 8005184:	20000330 	.word	0x20000330
 8005188:	20000d64 	.word	0x20000d64
 800518c:	20000340 	.word	0x20000340
 8005190:	20000d68 	.word	0x20000d68
 8005194:	20000350 	.word	0x20000350
 8005198:	20000d6c 	.word	0x20000d6c
 800519c:	20000360 	.word	0x20000360
 80051a0:	20000d70 	.word	0x20000d70
 80051a4:	20000370 	.word	0x20000370
 80051a8:	4a3d      	ldr	r2, [pc, #244]	; (80052a0 <loadMenuTexts+0x564>)
 80051aa:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 80051ac:	483d      	ldr	r0, [pc, #244]	; (80052a4 <loadMenuTexts+0x568>)
 80051ae:	f7fb fbb1 	bl	8000914 <copyText>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a3c      	ldr	r2, [pc, #240]	; (80052a8 <loadMenuTexts+0x56c>)
 80051b6:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 80051b8:	483c      	ldr	r0, [pc, #240]	; (80052ac <loadMenuTexts+0x570>)
 80051ba:	f7fb fbab 	bl	8000914 <copyText>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <loadMenuTexts+0x574>)
 80051c2:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 80051c4:	483b      	ldr	r0, [pc, #236]	; (80052b4 <loadMenuTexts+0x578>)
 80051c6:	f7fb fba5 	bl	8000914 <copyText>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a3a      	ldr	r2, [pc, #232]	; (80052b8 <loadMenuTexts+0x57c>)
 80051ce:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 80051d0:	483a      	ldr	r0, [pc, #232]	; (80052bc <loadMenuTexts+0x580>)
 80051d2:	f7fb fb9f 	bl	8000914 <copyText>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a39      	ldr	r2, [pc, #228]	; (80052c0 <loadMenuTexts+0x584>)
 80051da:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 80051dc:	4839      	ldr	r0, [pc, #228]	; (80052c4 <loadMenuTexts+0x588>)
 80051de:	f7fb fb99 	bl	8000914 <copyText>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a38      	ldr	r2, [pc, #224]	; (80052c8 <loadMenuTexts+0x58c>)
 80051e6:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 80051e8:	4838      	ldr	r0, [pc, #224]	; (80052cc <loadMenuTexts+0x590>)
 80051ea:	f7fb fb93 	bl	8000914 <copyText>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4a37      	ldr	r2, [pc, #220]	; (80052d0 <loadMenuTexts+0x594>)
 80051f2:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 80051f4:	4837      	ldr	r0, [pc, #220]	; (80052d4 <loadMenuTexts+0x598>)
 80051f6:	f7fb fb8d 	bl	8000914 <copyText>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4a36      	ldr	r2, [pc, #216]	; (80052d8 <loadMenuTexts+0x59c>)
 80051fe:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005200:	4836      	ldr	r0, [pc, #216]	; (80052dc <loadMenuTexts+0x5a0>)
 8005202:	f7fb fb87 	bl	8000914 <copyText>
 8005206:	4603      	mov	r3, r0
 8005208:	4a35      	ldr	r2, [pc, #212]	; (80052e0 <loadMenuTexts+0x5a4>)
 800520a:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 800520c:	4835      	ldr	r0, [pc, #212]	; (80052e4 <loadMenuTexts+0x5a8>)
 800520e:	f7fb fb81 	bl	8000914 <copyText>
 8005212:	4603      	mov	r3, r0
 8005214:	4a34      	ldr	r2, [pc, #208]	; (80052e8 <loadMenuTexts+0x5ac>)
 8005216:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005218:	4834      	ldr	r0, [pc, #208]	; (80052ec <loadMenuTexts+0x5b0>)
 800521a:	f7fb fb7b 	bl	8000914 <copyText>
 800521e:	4603      	mov	r3, r0
 8005220:	4a33      	ldr	r2, [pc, #204]	; (80052f0 <loadMenuTexts+0x5b4>)
 8005222:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005224:	4833      	ldr	r0, [pc, #204]	; (80052f4 <loadMenuTexts+0x5b8>)
 8005226:	f7fb fb75 	bl	8000914 <copyText>
 800522a:	4603      	mov	r3, r0
 800522c:	4a32      	ldr	r2, [pc, #200]	; (80052f8 <loadMenuTexts+0x5bc>)
 800522e:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005230:	4832      	ldr	r0, [pc, #200]	; (80052fc <loadMenuTexts+0x5c0>)
 8005232:	f7fb fb6f 	bl	8000914 <copyText>
 8005236:	4603      	mov	r3, r0
 8005238:	4a31      	ldr	r2, [pc, #196]	; (8005300 <loadMenuTexts+0x5c4>)
 800523a:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 800523c:	4831      	ldr	r0, [pc, #196]	; (8005304 <loadMenuTexts+0x5c8>)
 800523e:	f7fb fb69 	bl	8000914 <copyText>
 8005242:	4603      	mov	r3, r0
 8005244:	4a30      	ldr	r2, [pc, #192]	; (8005308 <loadMenuTexts+0x5cc>)
 8005246:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005248:	4830      	ldr	r0, [pc, #192]	; (800530c <loadMenuTexts+0x5d0>)
 800524a:	f7fb fb63 	bl	8000914 <copyText>
 800524e:	4603      	mov	r3, r0
 8005250:	4a2f      	ldr	r2, [pc, #188]	; (8005310 <loadMenuTexts+0x5d4>)
 8005252:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8005254:	482f      	ldr	r0, [pc, #188]	; (8005314 <loadMenuTexts+0x5d8>)
 8005256:	f7fb fb5d 	bl	8000914 <copyText>
 800525a:	4603      	mov	r3, r0
 800525c:	4a2e      	ldr	r2, [pc, #184]	; (8005318 <loadMenuTexts+0x5dc>)
 800525e:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005260:	482e      	ldr	r0, [pc, #184]	; (800531c <loadMenuTexts+0x5e0>)
 8005262:	f7fb fb57 	bl	8000914 <copyText>
 8005266:	4603      	mov	r3, r0
 8005268:	4a2d      	ldr	r2, [pc, #180]	; (8005320 <loadMenuTexts+0x5e4>)
 800526a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 800526c:	482d      	ldr	r0, [pc, #180]	; (8005324 <loadMenuTexts+0x5e8>)
 800526e:	f7fb fb51 	bl	8000914 <copyText>
 8005272:	4603      	mov	r3, r0
 8005274:	4a2c      	ldr	r2, [pc, #176]	; (8005328 <loadMenuTexts+0x5ec>)
 8005276:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005278:	482c      	ldr	r0, [pc, #176]	; (800532c <loadMenuTexts+0x5f0>)
 800527a:	f7fb fb4b 	bl	8000914 <copyText>
 800527e:	4603      	mov	r3, r0
 8005280:	4a2b      	ldr	r2, [pc, #172]	; (8005330 <loadMenuTexts+0x5f4>)
 8005282:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8005284:	482b      	ldr	r0, [pc, #172]	; (8005334 <loadMenuTexts+0x5f8>)
 8005286:	f7fb fb45 	bl	8000914 <copyText>
 800528a:	4603      	mov	r3, r0
 800528c:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <loadMenuTexts+0x5fc>)
 800528e:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8005290:	482a      	ldr	r0, [pc, #168]	; (800533c <loadMenuTexts+0x600>)
 8005292:	f7fb fb3f 	bl	8000914 <copyText>
 8005296:	4603      	mov	r3, r0
 8005298:	4a29      	ldr	r2, [pc, #164]	; (8005340 <loadMenuTexts+0x604>)
 800529a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 800529c:	e2d3      	b.n	8005846 <loadMenuTexts+0xb0a>
 800529e:	bf00      	nop
 80052a0:	20000d74 	.word	0x20000d74
 80052a4:	20000380 	.word	0x20000380
 80052a8:	20000d78 	.word	0x20000d78
 80052ac:	20000390 	.word	0x20000390
 80052b0:	20000d7c 	.word	0x20000d7c
 80052b4:	200003a0 	.word	0x200003a0
 80052b8:	20000d80 	.word	0x20000d80
 80052bc:	200003b0 	.word	0x200003b0
 80052c0:	20000d84 	.word	0x20000d84
 80052c4:	200003c0 	.word	0x200003c0
 80052c8:	20000d88 	.word	0x20000d88
 80052cc:	200003d0 	.word	0x200003d0
 80052d0:	20000d8c 	.word	0x20000d8c
 80052d4:	200003e0 	.word	0x200003e0
 80052d8:	20000d90 	.word	0x20000d90
 80052dc:	200003f0 	.word	0x200003f0
 80052e0:	20000d94 	.word	0x20000d94
 80052e4:	20000400 	.word	0x20000400
 80052e8:	20000d98 	.word	0x20000d98
 80052ec:	20000410 	.word	0x20000410
 80052f0:	20000d9c 	.word	0x20000d9c
 80052f4:	20000420 	.word	0x20000420
 80052f8:	20000da0 	.word	0x20000da0
 80052fc:	20000430 	.word	0x20000430
 8005300:	20000da4 	.word	0x20000da4
 8005304:	20000440 	.word	0x20000440
 8005308:	20000da8 	.word	0x20000da8
 800530c:	20000450 	.word	0x20000450
 8005310:	20000db4 	.word	0x20000db4
 8005314:	20000460 	.word	0x20000460
 8005318:	20000db8 	.word	0x20000db8
 800531c:	20000470 	.word	0x20000470
 8005320:	20000dbc 	.word	0x20000dbc
 8005324:	20000480 	.word	0x20000480
 8005328:	20000dc0 	.word	0x20000dc0
 800532c:	20000490 	.word	0x20000490
 8005330:	20000dc4 	.word	0x20000dc4
 8005334:	200004a0 	.word	0x200004a0
 8005338:	20000dc8 	.word	0x20000dc8
 800533c:	200004b0 	.word	0x200004b0
 8005340:	20000dcc 	.word	0x20000dcc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8005344:	48a9      	ldr	r0, [pc, #676]	; (80055ec <loadMenuTexts+0x8b0>)
 8005346:	f7fb fae5 	bl	8000914 <copyText>
 800534a:	4603      	mov	r3, r0
 800534c:	4aa8      	ldr	r2, [pc, #672]	; (80055f0 <loadMenuTexts+0x8b4>)
 800534e:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005350:	48a8      	ldr	r0, [pc, #672]	; (80055f4 <loadMenuTexts+0x8b8>)
 8005352:	f7fb fadf 	bl	8000914 <copyText>
 8005356:	4603      	mov	r3, r0
 8005358:	4aa7      	ldr	r2, [pc, #668]	; (80055f8 <loadMenuTexts+0x8bc>)
 800535a:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 800535c:	48a7      	ldr	r0, [pc, #668]	; (80055fc <loadMenuTexts+0x8c0>)
 800535e:	f7fb fad9 	bl	8000914 <copyText>
 8005362:	4603      	mov	r3, r0
 8005364:	4aa6      	ldr	r2, [pc, #664]	; (8005600 <loadMenuTexts+0x8c4>)
 8005366:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005368:	48a6      	ldr	r0, [pc, #664]	; (8005604 <loadMenuTexts+0x8c8>)
 800536a:	f7fb fad3 	bl	8000914 <copyText>
 800536e:	4603      	mov	r3, r0
 8005370:	4aa5      	ldr	r2, [pc, #660]	; (8005608 <loadMenuTexts+0x8cc>)
 8005372:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8005374:	48a5      	ldr	r0, [pc, #660]	; (800560c <loadMenuTexts+0x8d0>)
 8005376:	f7fb facd 	bl	8000914 <copyText>
 800537a:	4603      	mov	r3, r0
 800537c:	4aa4      	ldr	r2, [pc, #656]	; (8005610 <loadMenuTexts+0x8d4>)
 800537e:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005380:	48a4      	ldr	r0, [pc, #656]	; (8005614 <loadMenuTexts+0x8d8>)
 8005382:	f7fb fac7 	bl	8000914 <copyText>
 8005386:	4603      	mov	r3, r0
 8005388:	4aa3      	ldr	r2, [pc, #652]	; (8005618 <loadMenuTexts+0x8dc>)
 800538a:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 800538c:	48a3      	ldr	r0, [pc, #652]	; (800561c <loadMenuTexts+0x8e0>)
 800538e:	f7fb fac1 	bl	8000914 <copyText>
 8005392:	4603      	mov	r3, r0
 8005394:	4aa2      	ldr	r2, [pc, #648]	; (8005620 <loadMenuTexts+0x8e4>)
 8005396:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005398:	48a2      	ldr	r0, [pc, #648]	; (8005624 <loadMenuTexts+0x8e8>)
 800539a:	f7fb fabb 	bl	8000914 <copyText>
 800539e:	4603      	mov	r3, r0
 80053a0:	4aa1      	ldr	r2, [pc, #644]	; (8005628 <loadMenuTexts+0x8ec>)
 80053a2:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80053a4:	48a1      	ldr	r0, [pc, #644]	; (800562c <loadMenuTexts+0x8f0>)
 80053a6:	f7fb fab5 	bl	8000914 <copyText>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4aa0      	ldr	r2, [pc, #640]	; (8005630 <loadMenuTexts+0x8f4>)
 80053ae:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80053b0:	48a0      	ldr	r0, [pc, #640]	; (8005634 <loadMenuTexts+0x8f8>)
 80053b2:	f7fb faaf 	bl	8000914 <copyText>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a9f      	ldr	r2, [pc, #636]	; (8005638 <loadMenuTexts+0x8fc>)
 80053ba:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80053bc:	489f      	ldr	r0, [pc, #636]	; (800563c <loadMenuTexts+0x900>)
 80053be:	f7fb faa9 	bl	8000914 <copyText>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4a9e      	ldr	r2, [pc, #632]	; (8005640 <loadMenuTexts+0x904>)
 80053c6:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80053c8:	489e      	ldr	r0, [pc, #632]	; (8005644 <loadMenuTexts+0x908>)
 80053ca:	f7fb faa3 	bl	8000914 <copyText>
 80053ce:	4603      	mov	r3, r0
 80053d0:	4a9d      	ldr	r2, [pc, #628]	; (8005648 <loadMenuTexts+0x90c>)
 80053d2:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80053d4:	489d      	ldr	r0, [pc, #628]	; (800564c <loadMenuTexts+0x910>)
 80053d6:	f7fb fa9d 	bl	8000914 <copyText>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a9c      	ldr	r2, [pc, #624]	; (8005650 <loadMenuTexts+0x914>)
 80053de:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80053e0:	489c      	ldr	r0, [pc, #624]	; (8005654 <loadMenuTexts+0x918>)
 80053e2:	f7fb fa97 	bl	8000914 <copyText>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a9b      	ldr	r2, [pc, #620]	; (8005658 <loadMenuTexts+0x91c>)
 80053ea:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 80053ec:	489b      	ldr	r0, [pc, #620]	; (800565c <loadMenuTexts+0x920>)
 80053ee:	f7fb fa91 	bl	8000914 <copyText>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4a9a      	ldr	r2, [pc, #616]	; (8005660 <loadMenuTexts+0x924>)
 80053f6:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 80053f8:	489a      	ldr	r0, [pc, #616]	; (8005664 <loadMenuTexts+0x928>)
 80053fa:	f7fb fa8b 	bl	8000914 <copyText>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a99      	ldr	r2, [pc, #612]	; (8005668 <loadMenuTexts+0x92c>)
 8005402:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005404:	4899      	ldr	r0, [pc, #612]	; (800566c <loadMenuTexts+0x930>)
 8005406:	f7fb fa85 	bl	8000914 <copyText>
 800540a:	4603      	mov	r3, r0
 800540c:	4a98      	ldr	r2, [pc, #608]	; (8005670 <loadMenuTexts+0x934>)
 800540e:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005410:	4898      	ldr	r0, [pc, #608]	; (8005674 <loadMenuTexts+0x938>)
 8005412:	f7fb fa7f 	bl	8000914 <copyText>
 8005416:	4603      	mov	r3, r0
 8005418:	4a97      	ldr	r2, [pc, #604]	; (8005678 <loadMenuTexts+0x93c>)
 800541a:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 800541c:	4897      	ldr	r0, [pc, #604]	; (800567c <loadMenuTexts+0x940>)
 800541e:	f7fb fa79 	bl	8000914 <copyText>
 8005422:	4603      	mov	r3, r0
 8005424:	4a96      	ldr	r2, [pc, #600]	; (8005680 <loadMenuTexts+0x944>)
 8005426:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005428:	4896      	ldr	r0, [pc, #600]	; (8005684 <loadMenuTexts+0x948>)
 800542a:	f7fb fa73 	bl	8000914 <copyText>
 800542e:	4603      	mov	r3, r0
 8005430:	4a95      	ldr	r2, [pc, #596]	; (8005688 <loadMenuTexts+0x94c>)
 8005432:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8005434:	4895      	ldr	r0, [pc, #596]	; (800568c <loadMenuTexts+0x950>)
 8005436:	f7fb fa6d 	bl	8000914 <copyText>
 800543a:	4603      	mov	r3, r0
 800543c:	4a94      	ldr	r2, [pc, #592]	; (8005690 <loadMenuTexts+0x954>)
 800543e:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005440:	4894      	ldr	r0, [pc, #592]	; (8005694 <loadMenuTexts+0x958>)
 8005442:	f7fb fa67 	bl	8000914 <copyText>
 8005446:	4603      	mov	r3, r0
 8005448:	4a93      	ldr	r2, [pc, #588]	; (8005698 <loadMenuTexts+0x95c>)
 800544a:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 800544c:	4893      	ldr	r0, [pc, #588]	; (800569c <loadMenuTexts+0x960>)
 800544e:	f7fb fa61 	bl	8000914 <copyText>
 8005452:	4603      	mov	r3, r0
 8005454:	4a92      	ldr	r2, [pc, #584]	; (80056a0 <loadMenuTexts+0x964>)
 8005456:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005458:	4892      	ldr	r0, [pc, #584]	; (80056a4 <loadMenuTexts+0x968>)
 800545a:	f7fb fa5b 	bl	8000914 <copyText>
 800545e:	4603      	mov	r3, r0
 8005460:	4a91      	ldr	r2, [pc, #580]	; (80056a8 <loadMenuTexts+0x96c>)
 8005462:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005464:	4891      	ldr	r0, [pc, #580]	; (80056ac <loadMenuTexts+0x970>)
 8005466:	f7fb fa55 	bl	8000914 <copyText>
 800546a:	4603      	mov	r3, r0
 800546c:	4a90      	ldr	r2, [pc, #576]	; (80056b0 <loadMenuTexts+0x974>)
 800546e:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005470:	4890      	ldr	r0, [pc, #576]	; (80056b4 <loadMenuTexts+0x978>)
 8005472:	f7fb fa4f 	bl	8000914 <copyText>
 8005476:	4603      	mov	r3, r0
 8005478:	4a8f      	ldr	r2, [pc, #572]	; (80056b8 <loadMenuTexts+0x97c>)
 800547a:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 800547c:	488f      	ldr	r0, [pc, #572]	; (80056bc <loadMenuTexts+0x980>)
 800547e:	f7fb fa49 	bl	8000914 <copyText>
 8005482:	4603      	mov	r3, r0
 8005484:	4a8e      	ldr	r2, [pc, #568]	; (80056c0 <loadMenuTexts+0x984>)
 8005486:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005488:	488e      	ldr	r0, [pc, #568]	; (80056c4 <loadMenuTexts+0x988>)
 800548a:	f7fb fa43 	bl	8000914 <copyText>
 800548e:	4603      	mov	r3, r0
 8005490:	4a8d      	ldr	r2, [pc, #564]	; (80056c8 <loadMenuTexts+0x98c>)
 8005492:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005494:	488d      	ldr	r0, [pc, #564]	; (80056cc <loadMenuTexts+0x990>)
 8005496:	f7fb fa3d 	bl	8000914 <copyText>
 800549a:	4603      	mov	r3, r0
 800549c:	4a8c      	ldr	r2, [pc, #560]	; (80056d0 <loadMenuTexts+0x994>)
 800549e:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80054a0:	488c      	ldr	r0, [pc, #560]	; (80056d4 <loadMenuTexts+0x998>)
 80054a2:	f7fb fa37 	bl	8000914 <copyText>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a8b      	ldr	r2, [pc, #556]	; (80056d8 <loadMenuTexts+0x99c>)
 80054aa:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80054ac:	488b      	ldr	r0, [pc, #556]	; (80056dc <loadMenuTexts+0x9a0>)
 80054ae:	f7fb fa31 	bl	8000914 <copyText>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4a8a      	ldr	r2, [pc, #552]	; (80056e0 <loadMenuTexts+0x9a4>)
 80054b6:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80054b8:	488a      	ldr	r0, [pc, #552]	; (80056e4 <loadMenuTexts+0x9a8>)
 80054ba:	f7fb fa2b 	bl	8000914 <copyText>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a89      	ldr	r2, [pc, #548]	; (80056e8 <loadMenuTexts+0x9ac>)
 80054c2:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80054c4:	4889      	ldr	r0, [pc, #548]	; (80056ec <loadMenuTexts+0x9b0>)
 80054c6:	f7fb fa25 	bl	8000914 <copyText>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a88      	ldr	r2, [pc, #544]	; (80056f0 <loadMenuTexts+0x9b4>)
 80054ce:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80054d0:	4888      	ldr	r0, [pc, #544]	; (80056f4 <loadMenuTexts+0x9b8>)
 80054d2:	f7fb fa1f 	bl	8000914 <copyText>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4a87      	ldr	r2, [pc, #540]	; (80056f8 <loadMenuTexts+0x9bc>)
 80054da:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80054dc:	4887      	ldr	r0, [pc, #540]	; (80056fc <loadMenuTexts+0x9c0>)
 80054de:	f7fb fa19 	bl	8000914 <copyText>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4a86      	ldr	r2, [pc, #536]	; (8005700 <loadMenuTexts+0x9c4>)
 80054e6:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 80054e8:	4886      	ldr	r0, [pc, #536]	; (8005704 <loadMenuTexts+0x9c8>)
 80054ea:	f7fb fa13 	bl	8000914 <copyText>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4a85      	ldr	r2, [pc, #532]	; (8005708 <loadMenuTexts+0x9cc>)
 80054f2:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 80054f4:	4885      	ldr	r0, [pc, #532]	; (800570c <loadMenuTexts+0x9d0>)
 80054f6:	f7fb fa0d 	bl	8000914 <copyText>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4a84      	ldr	r2, [pc, #528]	; (8005710 <loadMenuTexts+0x9d4>)
 80054fe:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005500:	4884      	ldr	r0, [pc, #528]	; (8005714 <loadMenuTexts+0x9d8>)
 8005502:	f7fb fa07 	bl	8000914 <copyText>
 8005506:	4603      	mov	r3, r0
 8005508:	4a83      	ldr	r2, [pc, #524]	; (8005718 <loadMenuTexts+0x9dc>)
 800550a:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 800550c:	4883      	ldr	r0, [pc, #524]	; (800571c <loadMenuTexts+0x9e0>)
 800550e:	f7fb fa01 	bl	8000914 <copyText>
 8005512:	4603      	mov	r3, r0
 8005514:	4a82      	ldr	r2, [pc, #520]	; (8005720 <loadMenuTexts+0x9e4>)
 8005516:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005518:	4882      	ldr	r0, [pc, #520]	; (8005724 <loadMenuTexts+0x9e8>)
 800551a:	f7fb f9fb 	bl	8000914 <copyText>
 800551e:	4603      	mov	r3, r0
 8005520:	4a81      	ldr	r2, [pc, #516]	; (8005728 <loadMenuTexts+0x9ec>)
 8005522:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005524:	4881      	ldr	r0, [pc, #516]	; (800572c <loadMenuTexts+0x9f0>)
 8005526:	f7fb f9f5 	bl	8000914 <copyText>
 800552a:	4603      	mov	r3, r0
 800552c:	4a80      	ldr	r2, [pc, #512]	; (8005730 <loadMenuTexts+0x9f4>)
 800552e:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005530:	4880      	ldr	r0, [pc, #512]	; (8005734 <loadMenuTexts+0x9f8>)
 8005532:	f7fb f9ef 	bl	8000914 <copyText>
 8005536:	4603      	mov	r3, r0
 8005538:	4a7f      	ldr	r2, [pc, #508]	; (8005738 <loadMenuTexts+0x9fc>)
 800553a:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 800553c:	487f      	ldr	r0, [pc, #508]	; (800573c <loadMenuTexts+0xa00>)
 800553e:	f7fb f9e9 	bl	8000914 <copyText>
 8005542:	4603      	mov	r3, r0
 8005544:	4a7e      	ldr	r2, [pc, #504]	; (8005740 <loadMenuTexts+0xa04>)
 8005546:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005548:	487e      	ldr	r0, [pc, #504]	; (8005744 <loadMenuTexts+0xa08>)
 800554a:	f7fb f9e3 	bl	8000914 <copyText>
 800554e:	4603      	mov	r3, r0
 8005550:	4a7d      	ldr	r2, [pc, #500]	; (8005748 <loadMenuTexts+0xa0c>)
 8005552:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8005554:	487d      	ldr	r0, [pc, #500]	; (800574c <loadMenuTexts+0xa10>)
 8005556:	f7fb f9dd 	bl	8000914 <copyText>
 800555a:	4603      	mov	r3, r0
 800555c:	4a7c      	ldr	r2, [pc, #496]	; (8005750 <loadMenuTexts+0xa14>)
 800555e:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005560:	487c      	ldr	r0, [pc, #496]	; (8005754 <loadMenuTexts+0xa18>)
 8005562:	f7fb f9d7 	bl	8000914 <copyText>
 8005566:	4603      	mov	r3, r0
 8005568:	4a7b      	ldr	r2, [pc, #492]	; (8005758 <loadMenuTexts+0xa1c>)
 800556a:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 800556c:	487b      	ldr	r0, [pc, #492]	; (800575c <loadMenuTexts+0xa20>)
 800556e:	f7fb f9d1 	bl	8000914 <copyText>
 8005572:	4603      	mov	r3, r0
 8005574:	4a7a      	ldr	r2, [pc, #488]	; (8005760 <loadMenuTexts+0xa24>)
 8005576:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005578:	487a      	ldr	r0, [pc, #488]	; (8005764 <loadMenuTexts+0xa28>)
 800557a:	f7fb f9cb 	bl	8000914 <copyText>
 800557e:	4603      	mov	r3, r0
 8005580:	4a79      	ldr	r2, [pc, #484]	; (8005768 <loadMenuTexts+0xa2c>)
 8005582:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8005584:	4879      	ldr	r0, [pc, #484]	; (800576c <loadMenuTexts+0xa30>)
 8005586:	f7fb f9c5 	bl	8000914 <copyText>
 800558a:	4603      	mov	r3, r0
 800558c:	4a78      	ldr	r2, [pc, #480]	; (8005770 <loadMenuTexts+0xa34>)
 800558e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005590:	4878      	ldr	r0, [pc, #480]	; (8005774 <loadMenuTexts+0xa38>)
 8005592:	f7fb f9bf 	bl	8000914 <copyText>
 8005596:	4603      	mov	r3, r0
 8005598:	4a77      	ldr	r2, [pc, #476]	; (8005778 <loadMenuTexts+0xa3c>)
 800559a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 800559c:	4877      	ldr	r0, [pc, #476]	; (800577c <loadMenuTexts+0xa40>)
 800559e:	f7fb f9b9 	bl	8000914 <copyText>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4a76      	ldr	r2, [pc, #472]	; (8005780 <loadMenuTexts+0xa44>)
 80055a6:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80055a8:	4876      	ldr	r0, [pc, #472]	; (8005784 <loadMenuTexts+0xa48>)
 80055aa:	f7fb f9b3 	bl	8000914 <copyText>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4a75      	ldr	r2, [pc, #468]	; (8005788 <loadMenuTexts+0xa4c>)
 80055b2:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80055b4:	4875      	ldr	r0, [pc, #468]	; (800578c <loadMenuTexts+0xa50>)
 80055b6:	f7fb f9ad 	bl	8000914 <copyText>
 80055ba:	4603      	mov	r3, r0
 80055bc:	4a74      	ldr	r2, [pc, #464]	; (8005790 <loadMenuTexts+0xa54>)
 80055be:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80055c0:	4874      	ldr	r0, [pc, #464]	; (8005794 <loadMenuTexts+0xa58>)
 80055c2:	f7fb f9a7 	bl	8000914 <copyText>
 80055c6:	4603      	mov	r3, r0
 80055c8:	4a73      	ldr	r2, [pc, #460]	; (8005798 <loadMenuTexts+0xa5c>)
 80055ca:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80055cc:	4873      	ldr	r0, [pc, #460]	; (800579c <loadMenuTexts+0xa60>)
 80055ce:	f7fb f9a1 	bl	8000914 <copyText>
 80055d2:	4603      	mov	r3, r0
 80055d4:	4a72      	ldr	r2, [pc, #456]	; (80057a0 <loadMenuTexts+0xa64>)
 80055d6:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80055d8:	4872      	ldr	r0, [pc, #456]	; (80057a4 <loadMenuTexts+0xa68>)
 80055da:	f7fb f99b 	bl	8000914 <copyText>
 80055de:	4603      	mov	r3, r0
 80055e0:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <loadMenuTexts+0xa6c>)
 80055e2:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 80055e4:	4871      	ldr	r0, [pc, #452]	; (80057ac <loadMenuTexts+0xa70>)
 80055e6:	f7fb f995 	bl	8000914 <copyText>
 80055ea:	e0e1      	b.n	80057b0 <loadMenuTexts+0xa74>
 80055ec:	200004c0 	.word	0x200004c0
 80055f0:	20000ca8 	.word	0x20000ca8
 80055f4:	200004d0 	.word	0x200004d0
 80055f8:	20000cac 	.word	0x20000cac
 80055fc:	200004e0 	.word	0x200004e0
 8005600:	20000cb0 	.word	0x20000cb0
 8005604:	200004f0 	.word	0x200004f0
 8005608:	20000cb4 	.word	0x20000cb4
 800560c:	20000500 	.word	0x20000500
 8005610:	20000cb8 	.word	0x20000cb8
 8005614:	20000510 	.word	0x20000510
 8005618:	20000cbc 	.word	0x20000cbc
 800561c:	20000520 	.word	0x20000520
 8005620:	20000cc0 	.word	0x20000cc0
 8005624:	20000530 	.word	0x20000530
 8005628:	20000cc4 	.word	0x20000cc4
 800562c:	20000540 	.word	0x20000540
 8005630:	20000cc8 	.word	0x20000cc8
 8005634:	20000550 	.word	0x20000550
 8005638:	20000ccc 	.word	0x20000ccc
 800563c:	20000560 	.word	0x20000560
 8005640:	20000cd0 	.word	0x20000cd0
 8005644:	20000570 	.word	0x20000570
 8005648:	20000cd4 	.word	0x20000cd4
 800564c:	20000580 	.word	0x20000580
 8005650:	20000cd8 	.word	0x20000cd8
 8005654:	20000590 	.word	0x20000590
 8005658:	20000cdc 	.word	0x20000cdc
 800565c:	200005a0 	.word	0x200005a0
 8005660:	20000ce0 	.word	0x20000ce0
 8005664:	200005b0 	.word	0x200005b0
 8005668:	20000ce4 	.word	0x20000ce4
 800566c:	200005c0 	.word	0x200005c0
 8005670:	20000ce8 	.word	0x20000ce8
 8005674:	200005d0 	.word	0x200005d0
 8005678:	20000cec 	.word	0x20000cec
 800567c:	200005e0 	.word	0x200005e0
 8005680:	20000cf0 	.word	0x20000cf0
 8005684:	200005f0 	.word	0x200005f0
 8005688:	20000cf4 	.word	0x20000cf4
 800568c:	20000600 	.word	0x20000600
 8005690:	20000cf8 	.word	0x20000cf8
 8005694:	20000610 	.word	0x20000610
 8005698:	20000d00 	.word	0x20000d00
 800569c:	20000620 	.word	0x20000620
 80056a0:	20000d04 	.word	0x20000d04
 80056a4:	20000630 	.word	0x20000630
 80056a8:	20000d08 	.word	0x20000d08
 80056ac:	20000640 	.word	0x20000640
 80056b0:	20000d0c 	.word	0x20000d0c
 80056b4:	20000650 	.word	0x20000650
 80056b8:	20000d10 	.word	0x20000d10
 80056bc:	20000660 	.word	0x20000660
 80056c0:	20000d14 	.word	0x20000d14
 80056c4:	20000670 	.word	0x20000670
 80056c8:	20000d18 	.word	0x20000d18
 80056cc:	20000680 	.word	0x20000680
 80056d0:	20000d1c 	.word	0x20000d1c
 80056d4:	20000690 	.word	0x20000690
 80056d8:	20000d20 	.word	0x20000d20
 80056dc:	200006a0 	.word	0x200006a0
 80056e0:	20000d24 	.word	0x20000d24
 80056e4:	200006b0 	.word	0x200006b0
 80056e8:	20000d28 	.word	0x20000d28
 80056ec:	200006c0 	.word	0x200006c0
 80056f0:	20000d30 	.word	0x20000d30
 80056f4:	200006d0 	.word	0x200006d0
 80056f8:	20000d38 	.word	0x20000d38
 80056fc:	200006e0 	.word	0x200006e0
 8005700:	20000d3c 	.word	0x20000d3c
 8005704:	200006f0 	.word	0x200006f0
 8005708:	20000d40 	.word	0x20000d40
 800570c:	20000700 	.word	0x20000700
 8005710:	20000d44 	.word	0x20000d44
 8005714:	20000710 	.word	0x20000710
 8005718:	20000d48 	.word	0x20000d48
 800571c:	20000720 	.word	0x20000720
 8005720:	20000d4c 	.word	0x20000d4c
 8005724:	20000730 	.word	0x20000730
 8005728:	20000d50 	.word	0x20000d50
 800572c:	20000740 	.word	0x20000740
 8005730:	20000d54 	.word	0x20000d54
 8005734:	20000750 	.word	0x20000750
 8005738:	20000d58 	.word	0x20000d58
 800573c:	20000760 	.word	0x20000760
 8005740:	20000d5c 	.word	0x20000d5c
 8005744:	20000770 	.word	0x20000770
 8005748:	20000d60 	.word	0x20000d60
 800574c:	20000780 	.word	0x20000780
 8005750:	20000d64 	.word	0x20000d64
 8005754:	20000790 	.word	0x20000790
 8005758:	20000d68 	.word	0x20000d68
 800575c:	200007a0 	.word	0x200007a0
 8005760:	20000d6c 	.word	0x20000d6c
 8005764:	200007b0 	.word	0x200007b0
 8005768:	20000d70 	.word	0x20000d70
 800576c:	200007c0 	.word	0x200007c0
 8005770:	20000d74 	.word	0x20000d74
 8005774:	200007d0 	.word	0x200007d0
 8005778:	20000d78 	.word	0x20000d78
 800577c:	200007e0 	.word	0x200007e0
 8005780:	20000d7c 	.word	0x20000d7c
 8005784:	200007f0 	.word	0x200007f0
 8005788:	20000d80 	.word	0x20000d80
 800578c:	20000800 	.word	0x20000800
 8005790:	20000d84 	.word	0x20000d84
 8005794:	20000810 	.word	0x20000810
 8005798:	20000d88 	.word	0x20000d88
 800579c:	20000820 	.word	0x20000820
 80057a0:	20000d8c 	.word	0x20000d8c
 80057a4:	20000830 	.word	0x20000830
 80057a8:	20000d90 	.word	0x20000d90
 80057ac:	20000840 	.word	0x20000840
 80057b0:	4603      	mov	r3, r0
 80057b2:	4a27      	ldr	r2, [pc, #156]	; (8005850 <loadMenuTexts+0xb14>)
 80057b4:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80057b6:	4827      	ldr	r0, [pc, #156]	; (8005854 <loadMenuTexts+0xb18>)
 80057b8:	f7fb f8ac 	bl	8000914 <copyText>
 80057bc:	4603      	mov	r3, r0
 80057be:	4a26      	ldr	r2, [pc, #152]	; (8005858 <loadMenuTexts+0xb1c>)
 80057c0:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80057c2:	4826      	ldr	r0, [pc, #152]	; (800585c <loadMenuTexts+0xb20>)
 80057c4:	f7fb f8a6 	bl	8000914 <copyText>
 80057c8:	4603      	mov	r3, r0
 80057ca:	4a25      	ldr	r2, [pc, #148]	; (8005860 <loadMenuTexts+0xb24>)
 80057cc:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80057ce:	4825      	ldr	r0, [pc, #148]	; (8005864 <loadMenuTexts+0xb28>)
 80057d0:	f7fb f8a0 	bl	8000914 <copyText>
 80057d4:	4603      	mov	r3, r0
 80057d6:	4a24      	ldr	r2, [pc, #144]	; (8005868 <loadMenuTexts+0xb2c>)
 80057d8:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80057da:	4824      	ldr	r0, [pc, #144]	; (800586c <loadMenuTexts+0xb30>)
 80057dc:	f7fb f89a 	bl	8000914 <copyText>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4a23      	ldr	r2, [pc, #140]	; (8005870 <loadMenuTexts+0xb34>)
 80057e4:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 80057e6:	4823      	ldr	r0, [pc, #140]	; (8005874 <loadMenuTexts+0xb38>)
 80057e8:	f7fb f894 	bl	8000914 <copyText>
 80057ec:	4603      	mov	r3, r0
 80057ee:	4a22      	ldr	r2, [pc, #136]	; (8005878 <loadMenuTexts+0xb3c>)
 80057f0:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 80057f2:	4822      	ldr	r0, [pc, #136]	; (800587c <loadMenuTexts+0xb40>)
 80057f4:	f7fb f88e 	bl	8000914 <copyText>
 80057f8:	4603      	mov	r3, r0
 80057fa:	4a21      	ldr	r2, [pc, #132]	; (8005880 <loadMenuTexts+0xb44>)
 80057fc:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80057fe:	4821      	ldr	r0, [pc, #132]	; (8005884 <loadMenuTexts+0xb48>)
 8005800:	f7fb f888 	bl	8000914 <copyText>
 8005804:	4603      	mov	r3, r0
 8005806:	4a20      	ldr	r2, [pc, #128]	; (8005888 <loadMenuTexts+0xb4c>)
 8005808:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800580a:	4820      	ldr	r0, [pc, #128]	; (800588c <loadMenuTexts+0xb50>)
 800580c:	f7fb f882 	bl	8000914 <copyText>
 8005810:	4603      	mov	r3, r0
 8005812:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <loadMenuTexts+0xb54>)
 8005814:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005816:	481f      	ldr	r0, [pc, #124]	; (8005894 <loadMenuTexts+0xb58>)
 8005818:	f7fb f87c 	bl	8000914 <copyText>
 800581c:	4603      	mov	r3, r0
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <loadMenuTexts+0xb5c>)
 8005820:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005822:	481e      	ldr	r0, [pc, #120]	; (800589c <loadMenuTexts+0xb60>)
 8005824:	f7fb f876 	bl	8000914 <copyText>
 8005828:	4603      	mov	r3, r0
 800582a:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <loadMenuTexts+0xb64>)
 800582c:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800582e:	481d      	ldr	r0, [pc, #116]	; (80058a4 <loadMenuTexts+0xb68>)
 8005830:	f7fb f870 	bl	8000914 <copyText>
 8005834:	4603      	mov	r3, r0
 8005836:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <loadMenuTexts+0xb6c>)
 8005838:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 800583a:	481c      	ldr	r0, [pc, #112]	; (80058ac <loadMenuTexts+0xb70>)
 800583c:	f7fb f86a 	bl	8000914 <copyText>
 8005840:	4603      	mov	r3, r0
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <loadMenuTexts+0xb74>)
 8005844:	6013      	str	r3, [r2, #0]
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000d94 	.word	0x20000d94
 8005854:	20000850 	.word	0x20000850
 8005858:	20000d98 	.word	0x20000d98
 800585c:	20000860 	.word	0x20000860
 8005860:	20000d9c 	.word	0x20000d9c
 8005864:	20000870 	.word	0x20000870
 8005868:	20000da0 	.word	0x20000da0
 800586c:	20000880 	.word	0x20000880
 8005870:	20000da4 	.word	0x20000da4
 8005874:	20000890 	.word	0x20000890
 8005878:	20000da8 	.word	0x20000da8
 800587c:	200008a0 	.word	0x200008a0
 8005880:	20000db4 	.word	0x20000db4
 8005884:	200008b0 	.word	0x200008b0
 8005888:	20000db8 	.word	0x20000db8
 800588c:	200008c0 	.word	0x200008c0
 8005890:	20000dbc 	.word	0x20000dbc
 8005894:	200008d0 	.word	0x200008d0
 8005898:	20000dc0 	.word	0x20000dc0
 800589c:	200008e0 	.word	0x200008e0
 80058a0:	20000dc4 	.word	0x20000dc4
 80058a4:	200008f0 	.word	0x200008f0
 80058a8:	20000dc8 	.word	0x20000dc8
 80058ac:	20000900 	.word	0x20000900
 80058b0:	20000dcc 	.word	0x20000dcc

080058b4 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80058c4:	4a22      	ldr	r2, [pc, #136]	; (8005950 <lcdUpdate+0x9c>)
 80058c6:	2101      	movs	r1, #1
 80058c8:	2002      	movs	r0, #2
 80058ca:	f7fa ff75 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80058ce:	e03b      	b.n	8005948 <lcdUpdate+0x94>
	} else if(y==2) {
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d105      	bne.n	80058e2 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80058d6:	4a1e      	ldr	r2, [pc, #120]	; (8005950 <lcdUpdate+0x9c>)
 80058d8:	2102      	movs	r1, #2
 80058da:	2002      	movs	r0, #2
 80058dc:	f7fa ff6c 	bl	80007b8 <lcd_print>
}
 80058e0:	e032      	b.n	8005948 <lcdUpdate+0x94>
	} else if(y==3) {
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d105      	bne.n	80058f4 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80058e8:	4a19      	ldr	r2, [pc, #100]	; (8005950 <lcdUpdate+0x9c>)
 80058ea:	2103      	movs	r1, #3
 80058ec:	2002      	movs	r0, #2
 80058ee:	f7fa ff63 	bl	80007b8 <lcd_print>
}
 80058f2:	e029      	b.n	8005948 <lcdUpdate+0x94>
	} else if(y==4) {
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d105      	bne.n	8005906 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80058fa:	4a15      	ldr	r2, [pc, #84]	; (8005950 <lcdUpdate+0x9c>)
 80058fc:	2104      	movs	r1, #4
 80058fe:	2002      	movs	r0, #2
 8005900:	f7fa ff5a 	bl	80007b8 <lcd_print>
}
 8005904:	e020      	b.n	8005948 <lcdUpdate+0x94>
	} else if(y==5) {
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	2b05      	cmp	r3, #5
 800590a:	d105      	bne.n	8005918 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800590c:	4a10      	ldr	r2, [pc, #64]	; (8005950 <lcdUpdate+0x9c>)
 800590e:	2105      	movs	r1, #5
 8005910:	2002      	movs	r0, #2
 8005912:	f7fa ff51 	bl	80007b8 <lcd_print>
}
 8005916:	e017      	b.n	8005948 <lcdUpdate+0x94>
	} else if(y==6) {
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	2b06      	cmp	r3, #6
 800591c:	d105      	bne.n	800592a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800591e:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <lcdUpdate+0x9c>)
 8005920:	2106      	movs	r1, #6
 8005922:	2002      	movs	r0, #2
 8005924:	f7fa ff48 	bl	80007b8 <lcd_print>
}
 8005928:	e00e      	b.n	8005948 <lcdUpdate+0x94>
	} else if (y==7) {
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	2b07      	cmp	r3, #7
 800592e:	d10b      	bne.n	8005948 <lcdUpdate+0x94>
		lcd_clear();
 8005930:	f7fa ff6e 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005934:	4a07      	ldr	r2, [pc, #28]	; (8005954 <lcdUpdate+0xa0>)
 8005936:	2101      	movs	r1, #1
 8005938:	2001      	movs	r0, #1
 800593a:	f7fa ff3d 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800593e:	4a06      	ldr	r2, [pc, #24]	; (8005958 <lcdUpdate+0xa4>)
 8005940:	2101      	movs	r1, #1
 8005942:	2002      	movs	r0, #2
 8005944:	f7fa ff38 	bl	80007b8 <lcd_print>
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	0800db80 	.word	0x0800db80
 8005954:	0800e4ac 	.word	0x0800e4ac
 8005958:	0800e4c0 	.word	0x0800e4c0

0800595c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d11d      	bne.n	80059a8 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 800596c:	4b62      	ldr	r3, [pc, #392]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005974:	4a61      	ldr	r2, [pc, #388]	; (8005afc <hataKoduLcdGoster+0x1a0>)
 8005976:	2101      	movs	r1, #1
 8005978:	2001      	movs	r0, #1
 800597a:	f7fa ff1d 	bl	80007b8 <lcd_print>
 800597e:	e008      	b.n	8005992 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005980:	4b5d      	ldr	r3, [pc, #372]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d104      	bne.n	8005992 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005988:	4a5d      	ldr	r2, [pc, #372]	; (8005b00 <hataKoduLcdGoster+0x1a4>)
 800598a:	2101      	movs	r1, #1
 800598c:	2001      	movs	r0, #1
 800598e:	f7fa ff13 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8005992:	4a5c      	ldr	r2, [pc, #368]	; (8005b04 <hataKoduLcdGoster+0x1a8>)
 8005994:	2101      	movs	r1, #1
 8005996:	2002      	movs	r0, #2
 8005998:	f7fa ff0e 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 800599c:	4a5a      	ldr	r2, [pc, #360]	; (8005b08 <hataKoduLcdGoster+0x1ac>)
 800599e:	2107      	movs	r1, #7
 80059a0:	2002      	movs	r0, #2
 80059a2:	f7fa ff09 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80059a6:	e0a3      	b.n	8005af0 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d11d      	bne.n	80059ea <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80059ae:	4b52      	ldr	r3, [pc, #328]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 80059b6:	4a51      	ldr	r2, [pc, #324]	; (8005afc <hataKoduLcdGoster+0x1a0>)
 80059b8:	2101      	movs	r1, #1
 80059ba:	2001      	movs	r0, #1
 80059bc:	f7fa fefc 	bl	80007b8 <lcd_print>
 80059c0:	e008      	b.n	80059d4 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80059c2:	4b4d      	ldr	r3, [pc, #308]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d104      	bne.n	80059d4 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059ca:	4a4d      	ldr	r2, [pc, #308]	; (8005b00 <hataKoduLcdGoster+0x1a4>)
 80059cc:	2101      	movs	r1, #1
 80059ce:	2001      	movs	r0, #1
 80059d0:	f7fa fef2 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 80059d4:	4a4d      	ldr	r2, [pc, #308]	; (8005b0c <hataKoduLcdGoster+0x1b0>)
 80059d6:	2102      	movs	r1, #2
 80059d8:	2002      	movs	r0, #2
 80059da:	f7fa feed 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80059de:	4a4a      	ldr	r2, [pc, #296]	; (8005b08 <hataKoduLcdGoster+0x1ac>)
 80059e0:	2107      	movs	r1, #7
 80059e2:	2002      	movs	r0, #2
 80059e4:	f7fa fee8 	bl	80007b8 <lcd_print>
}
 80059e8:	e082      	b.n	8005af0 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d11d      	bne.n	8005a2c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80059f0:	4b41      	ldr	r3, [pc, #260]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 80059f8:	4a40      	ldr	r2, [pc, #256]	; (8005afc <hataKoduLcdGoster+0x1a0>)
 80059fa:	2101      	movs	r1, #1
 80059fc:	2001      	movs	r0, #1
 80059fe:	f7fa fedb 	bl	80007b8 <lcd_print>
 8005a02:	e008      	b.n	8005a16 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005a04:	4b3c      	ldr	r3, [pc, #240]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d104      	bne.n	8005a16 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a0c:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <hataKoduLcdGoster+0x1a4>)
 8005a0e:	2101      	movs	r1, #1
 8005a10:	2001      	movs	r0, #1
 8005a12:	f7fa fed1 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 8005a16:	4a3e      	ldr	r2, [pc, #248]	; (8005b10 <hataKoduLcdGoster+0x1b4>)
 8005a18:	2103      	movs	r1, #3
 8005a1a:	2002      	movs	r0, #2
 8005a1c:	f7fa fecc 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a20:	4a39      	ldr	r2, [pc, #228]	; (8005b08 <hataKoduLcdGoster+0x1ac>)
 8005a22:	2107      	movs	r1, #7
 8005a24:	2002      	movs	r0, #2
 8005a26:	f7fa fec7 	bl	80007b8 <lcd_print>
}
 8005a2a:	e061      	b.n	8005af0 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d11d      	bne.n	8005a6e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005a32:	4b31      	ldr	r3, [pc, #196]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a3a:	4a30      	ldr	r2, [pc, #192]	; (8005afc <hataKoduLcdGoster+0x1a0>)
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	2001      	movs	r0, #1
 8005a40:	f7fa feba 	bl	80007b8 <lcd_print>
 8005a44:	e008      	b.n	8005a58 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005a46:	4b2c      	ldr	r3, [pc, #176]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d104      	bne.n	8005a58 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a4e:	4a2c      	ldr	r2, [pc, #176]	; (8005b00 <hataKoduLcdGoster+0x1a4>)
 8005a50:	2101      	movs	r1, #1
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7fa feb0 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 8005a58:	4a2e      	ldr	r2, [pc, #184]	; (8005b14 <hataKoduLcdGoster+0x1b8>)
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	2002      	movs	r0, #2
 8005a5e:	f7fa feab 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a62:	4a29      	ldr	r2, [pc, #164]	; (8005b08 <hataKoduLcdGoster+0x1ac>)
 8005a64:	2107      	movs	r1, #7
 8005a66:	2002      	movs	r0, #2
 8005a68:	f7fa fea6 	bl	80007b8 <lcd_print>
}
 8005a6c:	e040      	b.n	8005af0 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	2b05      	cmp	r3, #5
 8005a72:	d11d      	bne.n	8005ab0 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005a74:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d105      	bne.n	8005a88 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <hataKoduLcdGoster+0x1a0>)
 8005a7e:	2101      	movs	r1, #1
 8005a80:	2001      	movs	r0, #1
 8005a82:	f7fa fe99 	bl	80007b8 <lcd_print>
 8005a86:	e008      	b.n	8005a9a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005a88:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d104      	bne.n	8005a9a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a90:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <hataKoduLcdGoster+0x1a4>)
 8005a92:	2101      	movs	r1, #1
 8005a94:	2001      	movs	r0, #1
 8005a96:	f7fa fe8f 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 8005a9a:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <hataKoduLcdGoster+0x1bc>)
 8005a9c:	2105      	movs	r1, #5
 8005a9e:	2002      	movs	r0, #2
 8005aa0:	f7fa fe8a 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005aa4:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <hataKoduLcdGoster+0x1ac>)
 8005aa6:	2107      	movs	r1, #7
 8005aa8:	2002      	movs	r0, #2
 8005aaa:	f7fa fe85 	bl	80007b8 <lcd_print>
}
 8005aae:	e01f      	b.n	8005af0 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d11c      	bne.n	8005af0 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d105      	bne.n	8005aca <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005abe:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <hataKoduLcdGoster+0x1a0>)
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	f7fa fe78 	bl	80007b8 <lcd_print>
 8005ac8:	e008      	b.n	8005adc <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <hataKoduLcdGoster+0x19c>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d104      	bne.n	8005adc <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005ad2:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <hataKoduLcdGoster+0x1a4>)
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f7fa fe6e 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8005adc:	4a0f      	ldr	r2, [pc, #60]	; (8005b1c <hataKoduLcdGoster+0x1c0>)
 8005ade:	2106      	movs	r1, #6
 8005ae0:	2002      	movs	r0, #2
 8005ae2:	f7fa fe69 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005ae6:	4a08      	ldr	r2, [pc, #32]	; (8005b08 <hataKoduLcdGoster+0x1ac>)
 8005ae8:	2107      	movs	r1, #7
 8005aea:	2002      	movs	r0, #2
 8005aec:	f7fa fe64 	bl	80007b8 <lcd_print>
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000c5a 	.word	0x20000c5a
 8005afc:	0800e4d4 	.word	0x0800e4d4
 8005b00:	0800e4e8 	.word	0x0800e4e8
 8005b04:	0800d928 	.word	0x0800d928
 8005b08:	0800e4fc 	.word	0x0800e4fc
 8005b0c:	0800d92c 	.word	0x0800d92c
 8005b10:	0800d930 	.word	0x0800d930
 8005b14:	0800d934 	.word	0x0800d934
 8005b18:	0800d938 	.word	0x0800d938
 8005b1c:	0800d93c 	.word	0x0800d93c

08005b20 <convertAndSendData>:

void convertAndSendData() {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005b26:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <convertAndSendData+0x58>)
 8005b28:	2101      	movs	r1, #1
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	f7fa fe44 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005b30:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <convertAndSendData+0x5c>)
 8005b32:	2101      	movs	r1, #1
 8005b34:	2002      	movs	r0, #2
 8005b36:	f7fa fe3f 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	e00a      	b.n	8005b56 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005b40:	f002 fb3a 	bl	80081b8 <mergeData>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	490d      	ldr	r1, [pc, #52]	; (8005b80 <convertAndSendData+0x60>)
 8005b4a:	480e      	ldr	r0, [pc, #56]	; (8005b84 <convertAndSendData+0x64>)
 8005b4c:	f7fa fc1a 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3301      	adds	r3, #1
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	ddf1      	ble.n	8005b40 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b60:	f003 fb16 	bl	8009190 <HAL_Delay>
	lcd_clear();
 8005b64:	f7fa fe54 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b6c:	f003 fb10 	bl	8009190 <HAL_Delay>
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	0800e508 	.word	0x0800e508
 8005b7c:	0800e514 	.word	0x0800e514
 8005b80:	20000be4 	.word	0x20000be4
 8005b84:	20000e94 	.word	0x20000e94

08005b88 <eepromKontrol>:

void eepromKontrol(int type) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af04      	add	r7, sp, #16
 8005b8e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8005b90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005b94:	9302      	str	r3, [sp, #8]
 8005b96:	233f      	movs	r3, #63	; 0x3f
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	4b9c      	ldr	r3, [pc, #624]	; (8005e0c <eepromKontrol+0x284>)
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	233f      	movs	r3, #63	; 0x3f
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	21a0      	movs	r1, #160	; 0xa0
 8005ba4:	489a      	ldr	r0, [pc, #616]	; (8005e10 <eepromKontrol+0x288>)
 8005ba6:	f004 fc77 	bl	800a498 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8005baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bae:	f003 faef 	bl	8009190 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005bb2:	4b96      	ldr	r3, [pc, #600]	; (8005e0c <eepromKontrol+0x284>)
 8005bb4:	78da      	ldrb	r2, [r3, #3]
 8005bb6:	4b97      	ldr	r3, [pc, #604]	; (8005e14 <eepromKontrol+0x28c>)
 8005bb8:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005bba:	4b94      	ldr	r3, [pc, #592]	; (8005e0c <eepromKontrol+0x284>)
 8005bbc:	785a      	ldrb	r2, [r3, #1]
 8005bbe:	4b96      	ldr	r3, [pc, #600]	; (8005e18 <eepromKontrol+0x290>)
 8005bc0:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005bc2:	4b92      	ldr	r3, [pc, #584]	; (8005e0c <eepromKontrol+0x284>)
 8005bc4:	789a      	ldrb	r2, [r3, #2]
 8005bc6:	4b95      	ldr	r3, [pc, #596]	; (8005e1c <eepromKontrol+0x294>)
 8005bc8:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005bca:	4b90      	ldr	r3, [pc, #576]	; (8005e0c <eepromKontrol+0x284>)
 8005bcc:	791a      	ldrb	r2, [r3, #4]
 8005bce:	4b94      	ldr	r3, [pc, #592]	; (8005e20 <eepromKontrol+0x298>)
 8005bd0:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005bd2:	4b8e      	ldr	r3, [pc, #568]	; (8005e0c <eepromKontrol+0x284>)
 8005bd4:	795a      	ldrb	r2, [r3, #5]
 8005bd6:	4b93      	ldr	r3, [pc, #588]	; (8005e24 <eepromKontrol+0x29c>)
 8005bd8:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005bda:	4b8c      	ldr	r3, [pc, #560]	; (8005e0c <eepromKontrol+0x284>)
 8005bdc:	799a      	ldrb	r2, [r3, #6]
 8005bde:	4b92      	ldr	r3, [pc, #584]	; (8005e28 <eepromKontrol+0x2a0>)
 8005be0:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005be2:	4b8a      	ldr	r3, [pc, #552]	; (8005e0c <eepromKontrol+0x284>)
 8005be4:	79da      	ldrb	r2, [r3, #7]
 8005be6:	4b91      	ldr	r3, [pc, #580]	; (8005e2c <eepromKontrol+0x2a4>)
 8005be8:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005bea:	4b88      	ldr	r3, [pc, #544]	; (8005e0c <eepromKontrol+0x284>)
 8005bec:	7a1a      	ldrb	r2, [r3, #8]
 8005bee:	4b90      	ldr	r3, [pc, #576]	; (8005e30 <eepromKontrol+0x2a8>)
 8005bf0:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005bf2:	4b86      	ldr	r3, [pc, #536]	; (8005e0c <eepromKontrol+0x284>)
 8005bf4:	7a5a      	ldrb	r2, [r3, #9]
 8005bf6:	4b8f      	ldr	r3, [pc, #572]	; (8005e34 <eepromKontrol+0x2ac>)
 8005bf8:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005bfa:	4b84      	ldr	r3, [pc, #528]	; (8005e0c <eepromKontrol+0x284>)
 8005bfc:	7a9a      	ldrb	r2, [r3, #10]
 8005bfe:	4b8e      	ldr	r3, [pc, #568]	; (8005e38 <eepromKontrol+0x2b0>)
 8005c00:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005c02:	4b82      	ldr	r3, [pc, #520]	; (8005e0c <eepromKontrol+0x284>)
 8005c04:	7ada      	ldrb	r2, [r3, #11]
 8005c06:	4b8d      	ldr	r3, [pc, #564]	; (8005e3c <eepromKontrol+0x2b4>)
 8005c08:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005c0a:	4b80      	ldr	r3, [pc, #512]	; (8005e0c <eepromKontrol+0x284>)
 8005c0c:	7b1a      	ldrb	r2, [r3, #12]
 8005c0e:	4b8c      	ldr	r3, [pc, #560]	; (8005e40 <eepromKontrol+0x2b8>)
 8005c10:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005c12:	4b7e      	ldr	r3, [pc, #504]	; (8005e0c <eepromKontrol+0x284>)
 8005c14:	7b5a      	ldrb	r2, [r3, #13]
 8005c16:	4b8b      	ldr	r3, [pc, #556]	; (8005e44 <eepromKontrol+0x2bc>)
 8005c18:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005c1a:	4b7c      	ldr	r3, [pc, #496]	; (8005e0c <eepromKontrol+0x284>)
 8005c1c:	7b9a      	ldrb	r2, [r3, #14]
 8005c1e:	4b8a      	ldr	r3, [pc, #552]	; (8005e48 <eepromKontrol+0x2c0>)
 8005c20:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005c22:	4b7a      	ldr	r3, [pc, #488]	; (8005e0c <eepromKontrol+0x284>)
 8005c24:	7bda      	ldrb	r2, [r3, #15]
 8005c26:	4b89      	ldr	r3, [pc, #548]	; (8005e4c <eepromKontrol+0x2c4>)
 8005c28:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005c2a:	4b78      	ldr	r3, [pc, #480]	; (8005e0c <eepromKontrol+0x284>)
 8005c2c:	7c1a      	ldrb	r2, [r3, #16]
 8005c2e:	4b88      	ldr	r3, [pc, #544]	; (8005e50 <eepromKontrol+0x2c8>)
 8005c30:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005c32:	4b76      	ldr	r3, [pc, #472]	; (8005e0c <eepromKontrol+0x284>)
 8005c34:	7c5a      	ldrb	r2, [r3, #17]
 8005c36:	4b87      	ldr	r3, [pc, #540]	; (8005e54 <eepromKontrol+0x2cc>)
 8005c38:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005c3a:	4b74      	ldr	r3, [pc, #464]	; (8005e0c <eepromKontrol+0x284>)
 8005c3c:	7c9a      	ldrb	r2, [r3, #18]
 8005c3e:	4b86      	ldr	r3, [pc, #536]	; (8005e58 <eepromKontrol+0x2d0>)
 8005c40:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005c42:	4b72      	ldr	r3, [pc, #456]	; (8005e0c <eepromKontrol+0x284>)
 8005c44:	7cda      	ldrb	r2, [r3, #19]
 8005c46:	4b85      	ldr	r3, [pc, #532]	; (8005e5c <eepromKontrol+0x2d4>)
 8005c48:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005c4a:	4b70      	ldr	r3, [pc, #448]	; (8005e0c <eepromKontrol+0x284>)
 8005c4c:	7d1a      	ldrb	r2, [r3, #20]
 8005c4e:	4b84      	ldr	r3, [pc, #528]	; (8005e60 <eepromKontrol+0x2d8>)
 8005c50:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005c52:	4b6e      	ldr	r3, [pc, #440]	; (8005e0c <eepromKontrol+0x284>)
 8005c54:	7d5a      	ldrb	r2, [r3, #21]
 8005c56:	4b83      	ldr	r3, [pc, #524]	; (8005e64 <eepromKontrol+0x2dc>)
 8005c58:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005c5a:	4b6c      	ldr	r3, [pc, #432]	; (8005e0c <eepromKontrol+0x284>)
 8005c5c:	7d9a      	ldrb	r2, [r3, #22]
 8005c5e:	4b82      	ldr	r3, [pc, #520]	; (8005e68 <eepromKontrol+0x2e0>)
 8005c60:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005c62:	4b6a      	ldr	r3, [pc, #424]	; (8005e0c <eepromKontrol+0x284>)
 8005c64:	7dda      	ldrb	r2, [r3, #23]
 8005c66:	4b81      	ldr	r3, [pc, #516]	; (8005e6c <eepromKontrol+0x2e4>)
 8005c68:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005c6a:	4b68      	ldr	r3, [pc, #416]	; (8005e0c <eepromKontrol+0x284>)
 8005c6c:	7e1a      	ldrb	r2, [r3, #24]
 8005c6e:	4b80      	ldr	r3, [pc, #512]	; (8005e70 <eepromKontrol+0x2e8>)
 8005c70:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005c72:	4b66      	ldr	r3, [pc, #408]	; (8005e0c <eepromKontrol+0x284>)
 8005c74:	7e5a      	ldrb	r2, [r3, #25]
 8005c76:	4b7f      	ldr	r3, [pc, #508]	; (8005e74 <eepromKontrol+0x2ec>)
 8005c78:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005c7a:	4b64      	ldr	r3, [pc, #400]	; (8005e0c <eepromKontrol+0x284>)
 8005c7c:	7e9a      	ldrb	r2, [r3, #26]
 8005c7e:	4b7e      	ldr	r3, [pc, #504]	; (8005e78 <eepromKontrol+0x2f0>)
 8005c80:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005c82:	4b62      	ldr	r3, [pc, #392]	; (8005e0c <eepromKontrol+0x284>)
 8005c84:	7eda      	ldrb	r2, [r3, #27]
 8005c86:	4b7d      	ldr	r3, [pc, #500]	; (8005e7c <eepromKontrol+0x2f4>)
 8005c88:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005c8a:	4b60      	ldr	r3, [pc, #384]	; (8005e0c <eepromKontrol+0x284>)
 8005c8c:	7f1a      	ldrb	r2, [r3, #28]
 8005c8e:	4b7c      	ldr	r3, [pc, #496]	; (8005e80 <eepromKontrol+0x2f8>)
 8005c90:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005c92:	4b5e      	ldr	r3, [pc, #376]	; (8005e0c <eepromKontrol+0x284>)
 8005c94:	7f5a      	ldrb	r2, [r3, #29]
 8005c96:	4b7b      	ldr	r3, [pc, #492]	; (8005e84 <eepromKontrol+0x2fc>)
 8005c98:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005c9a:	4b5c      	ldr	r3, [pc, #368]	; (8005e0c <eepromKontrol+0x284>)
 8005c9c:	7f9a      	ldrb	r2, [r3, #30]
 8005c9e:	4b7a      	ldr	r3, [pc, #488]	; (8005e88 <eepromKontrol+0x300>)
 8005ca0:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005ca2:	4b5a      	ldr	r3, [pc, #360]	; (8005e0c <eepromKontrol+0x284>)
 8005ca4:	7fda      	ldrb	r2, [r3, #31]
 8005ca6:	4b79      	ldr	r3, [pc, #484]	; (8005e8c <eepromKontrol+0x304>)
 8005ca8:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005caa:	4b58      	ldr	r3, [pc, #352]	; (8005e0c <eepromKontrol+0x284>)
 8005cac:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005cb0:	4b77      	ldr	r3, [pc, #476]	; (8005e90 <eepromKontrol+0x308>)
 8005cb2:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005cb4:	4b55      	ldr	r3, [pc, #340]	; (8005e0c <eepromKontrol+0x284>)
 8005cb6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005cba:	4b76      	ldr	r3, [pc, #472]	; (8005e94 <eepromKontrol+0x30c>)
 8005cbc:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005cbe:	4b53      	ldr	r3, [pc, #332]	; (8005e0c <eepromKontrol+0x284>)
 8005cc0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005cc4:	4b74      	ldr	r3, [pc, #464]	; (8005e98 <eepromKontrol+0x310>)
 8005cc6:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005cc8:	4b50      	ldr	r3, [pc, #320]	; (8005e0c <eepromKontrol+0x284>)
 8005cca:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005cce:	4b73      	ldr	r3, [pc, #460]	; (8005e9c <eepromKontrol+0x314>)
 8005cd0:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005cd2:	4b4e      	ldr	r3, [pc, #312]	; (8005e0c <eepromKontrol+0x284>)
 8005cd4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005cd8:	4b71      	ldr	r3, [pc, #452]	; (8005ea0 <eepromKontrol+0x318>)
 8005cda:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005cdc:	4b4b      	ldr	r3, [pc, #300]	; (8005e0c <eepromKontrol+0x284>)
 8005cde:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005ce2:	4b70      	ldr	r3, [pc, #448]	; (8005ea4 <eepromKontrol+0x31c>)
 8005ce4:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005ce6:	4b49      	ldr	r3, [pc, #292]	; (8005e0c <eepromKontrol+0x284>)
 8005ce8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005cec:	4b6e      	ldr	r3, [pc, #440]	; (8005ea8 <eepromKontrol+0x320>)
 8005cee:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005cf0:	4b46      	ldr	r3, [pc, #280]	; (8005e0c <eepromKontrol+0x284>)
 8005cf2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005cf6:	4b6d      	ldr	r3, [pc, #436]	; (8005eac <eepromKontrol+0x324>)
 8005cf8:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005cfa:	4b44      	ldr	r3, [pc, #272]	; (8005e0c <eepromKontrol+0x284>)
 8005cfc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005d00:	4b6b      	ldr	r3, [pc, #428]	; (8005eb0 <eepromKontrol+0x328>)
 8005d02:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005d04:	4b41      	ldr	r3, [pc, #260]	; (8005e0c <eepromKontrol+0x284>)
 8005d06:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005d0a:	4b6a      	ldr	r3, [pc, #424]	; (8005eb4 <eepromKontrol+0x32c>)
 8005d0c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005d0e:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <eepromKontrol+0x284>)
 8005d10:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005d14:	4b68      	ldr	r3, [pc, #416]	; (8005eb8 <eepromKontrol+0x330>)
 8005d16:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005d18:	4b3c      	ldr	r3, [pc, #240]	; (8005e0c <eepromKontrol+0x284>)
 8005d1a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005d1e:	4b67      	ldr	r3, [pc, #412]	; (8005ebc <eepromKontrol+0x334>)
 8005d20:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005d22:	4b3a      	ldr	r3, [pc, #232]	; (8005e0c <eepromKontrol+0x284>)
 8005d24:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005d28:	4b65      	ldr	r3, [pc, #404]	; (8005ec0 <eepromKontrol+0x338>)
 8005d2a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005d2c:	4b37      	ldr	r3, [pc, #220]	; (8005e0c <eepromKontrol+0x284>)
 8005d2e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005d32:	4b64      	ldr	r3, [pc, #400]	; (8005ec4 <eepromKontrol+0x33c>)
 8005d34:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005d36:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <eepromKontrol+0x284>)
 8005d38:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005d3c:	4b62      	ldr	r3, [pc, #392]	; (8005ec8 <eepromKontrol+0x340>)
 8005d3e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005d40:	4b32      	ldr	r3, [pc, #200]	; (8005e0c <eepromKontrol+0x284>)
 8005d42:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005d46:	4b61      	ldr	r3, [pc, #388]	; (8005ecc <eepromKontrol+0x344>)
 8005d48:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005d4a:	4b52      	ldr	r3, [pc, #328]	; (8005e94 <eepromKontrol+0x30c>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fff4 	bl	8004d3c <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005d54:	4b4e      	ldr	r3, [pc, #312]	; (8005e90 <eepromKontrol+0x308>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b09      	cmp	r3, #9
 8005d5a:	d902      	bls.n	8005d62 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005d5c:	4b4c      	ldr	r3, [pc, #304]	; (8005e90 <eepromKontrol+0x308>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005d62:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <eepromKontrol+0x304>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	d902      	bls.n	8005d70 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005d6a:	4b48      	ldr	r3, [pc, #288]	; (8005e8c <eepromKontrol+0x304>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005d70:	4b45      	ldr	r3, [pc, #276]	; (8005e88 <eepromKontrol+0x300>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	d902      	bls.n	8005d7e <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005d78:	4b43      	ldr	r3, [pc, #268]	; (8005e88 <eepromKontrol+0x300>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005d7e:	4b41      	ldr	r3, [pc, #260]	; (8005e84 <eepromKontrol+0x2fc>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b09      	cmp	r3, #9
 8005d84:	d902      	bls.n	8005d8c <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005d86:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <eepromKontrol+0x2fc>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005d8c:	4b3c      	ldr	r3, [pc, #240]	; (8005e80 <eepromKontrol+0x2f8>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b09      	cmp	r3, #9
 8005d92:	d902      	bls.n	8005d9a <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005d94:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <eepromKontrol+0x2f8>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005d9a:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <eepromKontrol+0x290>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d902      	bls.n	8005da8 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005da2:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <eepromKontrol+0x290>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <eepromKontrol+0x294>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d902      	bls.n	8005db6 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005db0:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <eepromKontrol+0x294>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005db6:	4b1a      	ldr	r3, [pc, #104]	; (8005e20 <eepromKontrol+0x298>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d902      	bls.n	8005dc4 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005dbe:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <eepromKontrol+0x298>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005dc4:	4b17      	ldr	r3, [pc, #92]	; (8005e24 <eepromKontrol+0x29c>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d902      	bls.n	8005dd2 <eepromKontrol+0x24a>
	    altLimit=1;
 8005dcc:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <eepromKontrol+0x29c>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005dd2:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <eepromKontrol+0x2a0>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d902      	bls.n	8005de0 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <eepromKontrol+0x2a0>)
 8005ddc:	2201      	movs	r2, #1
 8005dde:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005de0:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <eepromKontrol+0x2a4>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d902      	bls.n	8005dee <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005de8:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <eepromKontrol+0x2a4>)
 8005dea:	2203      	movs	r2, #3
 8005dec:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005dee:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <eepromKontrol+0x31c>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d902      	bls.n	8005dfc <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005df6:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <eepromKontrol+0x31c>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <eepromKontrol+0x2a8>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d965      	bls.n	8005ed0 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <eepromKontrol+0x2a8>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	e061      	b.n	8005ed0 <eepromKontrol+0x348>
 8005e0c:	20000b28 	.word	0x20000b28
 8005e10:	20000df8 	.word	0x20000df8
 8005e14:	20000bb9 	.word	0x20000bb9
 8005e18:	20000c3a 	.word	0x20000c3a
 8005e1c:	20000c3d 	.word	0x20000c3d
 8005e20:	20000c3e 	.word	0x20000c3e
 8005e24:	20000c3f 	.word	0x20000c3f
 8005e28:	20000c40 	.word	0x20000c40
 8005e2c:	20000c41 	.word	0x20000c41
 8005e30:	20000c42 	.word	0x20000c42
 8005e34:	20000c52 	.word	0x20000c52
 8005e38:	20000c43 	.word	0x20000c43
 8005e3c:	20000c53 	.word	0x20000c53
 8005e40:	20000c44 	.word	0x20000c44
 8005e44:	20000c54 	.word	0x20000c54
 8005e48:	20000c47 	.word	0x20000c47
 8005e4c:	20000c48 	.word	0x20000c48
 8005e50:	20000c49 	.word	0x20000c49
 8005e54:	20000c4a 	.word	0x20000c4a
 8005e58:	20000c4b 	.word	0x20000c4b
 8005e5c:	20000c4c 	.word	0x20000c4c
 8005e60:	20000c4d 	.word	0x20000c4d
 8005e64:	20000c4e 	.word	0x20000c4e
 8005e68:	20000c4f 	.word	0x20000c4f
 8005e6c:	20000c50 	.word	0x20000c50
 8005e70:	20000c51 	.word	0x20000c51
 8005e74:	20000c55 	.word	0x20000c55
 8005e78:	20000c57 	.word	0x20000c57
 8005e7c:	20000c35 	.word	0x20000c35
 8005e80:	20000c36 	.word	0x20000c36
 8005e84:	20000c37 	.word	0x20000c37
 8005e88:	200009b1 	.word	0x200009b1
 8005e8c:	200009b2 	.word	0x200009b2
 8005e90:	20000c38 	.word	0x20000c38
 8005e94:	20000c5a 	.word	0x20000c5a
 8005e98:	20000c58 	.word	0x20000c58
 8005e9c:	20000c46 	.word	0x20000c46
 8005ea0:	20000c59 	.word	0x20000c59
 8005ea4:	20000c45 	.word	0x20000c45
 8005ea8:	20000c5b 	.word	0x20000c5b
 8005eac:	20000c5c 	.word	0x20000c5c
 8005eb0:	20000c5d 	.word	0x20000c5d
 8005eb4:	20000c5e 	.word	0x20000c5e
 8005eb8:	20000c5f 	.word	0x20000c5f
 8005ebc:	20000c60 	.word	0x20000c60
 8005ec0:	20000c61 	.word	0x20000c61
 8005ec4:	20000c62 	.word	0x20000c62
 8005ec8:	20000c63 	.word	0x20000c63
 8005ecc:	20000c64 	.word	0x20000c64
	}

	if(kapi1AcSure>5) {
 8005ed0:	4b55      	ldr	r3, [pc, #340]	; (8006028 <eepromKontrol+0x4a0>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b05      	cmp	r3, #5
 8005ed6:	d902      	bls.n	8005ede <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005ed8:	4b53      	ldr	r3, [pc, #332]	; (8006028 <eepromKontrol+0x4a0>)
 8005eda:	2205      	movs	r2, #5
 8005edc:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005ede:	4b53      	ldr	r3, [pc, #332]	; (800602c <eepromKontrol+0x4a4>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d902      	bls.n	8005eec <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005ee6:	4b51      	ldr	r3, [pc, #324]	; (800602c <eepromKontrol+0x4a4>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005eec:	4b50      	ldr	r3, [pc, #320]	; (8006030 <eepromKontrol+0x4a8>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	d902      	bls.n	8005efa <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005ef4:	4b4e      	ldr	r3, [pc, #312]	; (8006030 <eepromKontrol+0x4a8>)
 8005ef6:	2205      	movs	r2, #5
 8005ef8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005efa:	4b4e      	ldr	r3, [pc, #312]	; (8006034 <eepromKontrol+0x4ac>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d902      	bls.n	8005f08 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005f02:	4b4c      	ldr	r3, [pc, #304]	; (8006034 <eepromKontrol+0x4ac>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005f08:	4b4b      	ldr	r3, [pc, #300]	; (8006038 <eepromKontrol+0x4b0>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d902      	bls.n	8005f16 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005f10:	4b49      	ldr	r3, [pc, #292]	; (8006038 <eepromKontrol+0x4b0>)
 8005f12:	2202      	movs	r2, #2
 8005f14:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005f16:	4b49      	ldr	r3, [pc, #292]	; (800603c <eepromKontrol+0x4b4>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	d902      	bls.n	8005f24 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005f1e:	4b47      	ldr	r3, [pc, #284]	; (800603c <eepromKontrol+0x4b4>)
 8005f20:	2205      	movs	r2, #5
 8005f22:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005f24:	4b46      	ldr	r3, [pc, #280]	; (8006040 <eepromKontrol+0x4b8>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d902      	bls.n	8005f32 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005f2c:	4b44      	ldr	r3, [pc, #272]	; (8006040 <eepromKontrol+0x4b8>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005f32:	4b44      	ldr	r3, [pc, #272]	; (8006044 <eepromKontrol+0x4bc>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d902      	bls.n	8005f40 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005f3a:	4b42      	ldr	r3, [pc, #264]	; (8006044 <eepromKontrol+0x4bc>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005f40:	4b41      	ldr	r3, [pc, #260]	; (8006048 <eepromKontrol+0x4c0>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d902      	bls.n	8005f4e <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005f48:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <eepromKontrol+0x4c0>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005f4e:	4b3f      	ldr	r3, [pc, #252]	; (800604c <eepromKontrol+0x4c4>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d902      	bls.n	8005f5c <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005f56:	4b3d      	ldr	r3, [pc, #244]	; (800604c <eepromKontrol+0x4c4>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005f5c:	4b3c      	ldr	r3, [pc, #240]	; (8006050 <eepromKontrol+0x4c8>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d902      	bls.n	8005f6a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005f64:	4b3a      	ldr	r3, [pc, #232]	; (8006050 <eepromKontrol+0x4c8>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005f6a:	4b3a      	ldr	r3, [pc, #232]	; (8006054 <eepromKontrol+0x4cc>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d902      	bls.n	8005f78 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005f72:	4b38      	ldr	r3, [pc, #224]	; (8006054 <eepromKontrol+0x4cc>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005f78:	4b37      	ldr	r3, [pc, #220]	; (8006058 <eepromKontrol+0x4d0>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b05      	cmp	r3, #5
 8005f7e:	d902      	bls.n	8005f86 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005f80:	4b35      	ldr	r3, [pc, #212]	; (8006058 <eepromKontrol+0x4d0>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005f86:	4b35      	ldr	r3, [pc, #212]	; (800605c <eepromKontrol+0x4d4>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	d902      	bls.n	8005f94 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005f8e:	4b33      	ldr	r3, [pc, #204]	; (800605c <eepromKontrol+0x4d4>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005f94:	4b32      	ldr	r3, [pc, #200]	; (8006060 <eepromKontrol+0x4d8>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b05      	cmp	r3, #5
 8005f9a:	d902      	bls.n	8005fa2 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005f9c:	4b30      	ldr	r3, [pc, #192]	; (8006060 <eepromKontrol+0x4d8>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005fa2:	4b30      	ldr	r3, [pc, #192]	; (8006064 <eepromKontrol+0x4dc>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d902      	bls.n	8005fb0 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005faa:	4b2e      	ldr	r3, [pc, #184]	; (8006064 <eepromKontrol+0x4dc>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005fb0:	4b2d      	ldr	r3, [pc, #180]	; (8006068 <eepromKontrol+0x4e0>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2bb4      	cmp	r3, #180	; 0xb4
 8005fb6:	d902      	bls.n	8005fbe <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005fb8:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <eepromKontrol+0x4e0>)
 8005fba:	223c      	movs	r2, #60	; 0x3c
 8005fbc:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005fbe:	4b2b      	ldr	r3, [pc, #172]	; (800606c <eepromKontrol+0x4e4>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d902      	bls.n	8005fcc <eepromKontrol+0x444>
	    buzzer=0;
 8005fc6:	4b29      	ldr	r3, [pc, #164]	; (800606c <eepromKontrol+0x4e4>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005fcc:	4b28      	ldr	r3, [pc, #160]	; (8006070 <eepromKontrol+0x4e8>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d902      	bls.n	8005fda <eepromKontrol+0x452>
	    demoMode=0;
 8005fd4:	4b26      	ldr	r3, [pc, #152]	; (8006070 <eepromKontrol+0x4e8>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005fda:	4b26      	ldr	r3, [pc, #152]	; (8006074 <eepromKontrol+0x4ec>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d902      	bls.n	8005fe8 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005fe2:	4b24      	ldr	r3, [pc, #144]	; (8006074 <eepromKontrol+0x4ec>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005fe8:	4b23      	ldr	r3, [pc, #140]	; (8006078 <eepromKontrol+0x4f0>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d902      	bls.n	8005ff6 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005ff0:	4b21      	ldr	r3, [pc, #132]	; (8006078 <eepromKontrol+0x4f0>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005ff6:	4b21      	ldr	r3, [pc, #132]	; (800607c <eepromKontrol+0x4f4>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d902      	bls.n	8006004 <eepromKontrol+0x47c>
		iotMode=0;
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	; (800607c <eepromKontrol+0x4f4>)
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8006004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006008:	f003 f8c2 	bl	8009190 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 800600c:	4b1b      	ldr	r3, [pc, #108]	; (800607c <eepromKontrol+0x4f4>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d104      	bne.n	800601e <eepromKontrol+0x496>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <eepromKontrol+0x496>
		convertAndSendData();
 800601a:	f7ff fd81 	bl	8005b20 <convertAndSendData>
	}
}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000c52 	.word	0x20000c52
 800602c:	20000c43 	.word	0x20000c43
 8006030:	20000c53 	.word	0x20000c53
 8006034:	20000c44 	.word	0x20000c44
 8006038:	20000c46 	.word	0x20000c46
 800603c:	20000c54 	.word	0x20000c54
 8006040:	20000c47 	.word	0x20000c47
 8006044:	20000c48 	.word	0x20000c48
 8006048:	20000c49 	.word	0x20000c49
 800604c:	20000c4a 	.word	0x20000c4a
 8006050:	20000c4b 	.word	0x20000c4b
 8006054:	20000c4c 	.word	0x20000c4c
 8006058:	20000c4d 	.word	0x20000c4d
 800605c:	20000c4e 	.word	0x20000c4e
 8006060:	20000c4f 	.word	0x20000c4f
 8006064:	20000c50 	.word	0x20000c50
 8006068:	20000c51 	.word	0x20000c51
 800606c:	20000c55 	.word	0x20000c55
 8006070:	20000c57 	.word	0x20000c57
 8006074:	20000c59 	.word	0x20000c59
 8006078:	20000c5a 	.word	0x20000c5a
 800607c:	20000c58 	.word	0x20000c58

08006080 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8006080:	b590      	push	{r4, r7, lr}
 8006082:	b089      	sub	sp, #36	; 0x24
 8006084:	af04      	add	r7, sp, #16
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800608a:	4b26      	ldr	r3, [pc, #152]	; (8006124 <hata2EEPROM+0xa4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	1e5a      	subs	r2, r3, #1
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <hata2EEPROM+0xa8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4413      	add	r3, r2
 8006096:	4a25      	ldr	r2, [pc, #148]	; (800612c <hata2EEPROM+0xac>)
 8006098:	5cd3      	ldrb	r3, [r2, r3]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800609e:	f000 f849 	bl	8006134 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80060a2:	e000      	b.n	80060a6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80060a4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e012      	b.n	80060d2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80060ac:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <hata2EEPROM+0xa8>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	4a1d      	ldr	r2, [pc, #116]	; (800612c <hata2EEPROM+0xac>)
 80060b6:	5cd3      	ldrb	r3, [r2, r3]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d107      	bne.n	80060cc <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <hata2EEPROM+0xa8>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	4919      	ldr	r1, [pc, #100]	; (800612c <hata2EEPROM+0xac>)
 80060c6:	79fa      	ldrb	r2, [r7, #7]
 80060c8:	54ca      	strb	r2, [r1, r3]
					break;
 80060ca:	e007      	b.n	80060dc <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	4b14      	ldr	r3, [pc, #80]	; (8006124 <hata2EEPROM+0xa4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	dbe7      	blt.n	80060ac <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <hata2EEPROM+0xa8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	b299      	uxth	r1, r3
 80060e2:	4b10      	ldr	r3, [pc, #64]	; (8006124 <hata2EEPROM+0xa4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	b298      	uxth	r0, r3
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <hata2EEPROM+0xa8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a0f      	ldr	r2, [pc, #60]	; (800612c <hata2EEPROM+0xac>)
 80060ee:	4413      	add	r3, r2
 80060f0:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <hata2EEPROM+0xa4>)
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	b292      	uxth	r2, r2
 80060f6:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80060fa:	9402      	str	r4, [sp, #8]
 80060fc:	9201      	str	r2, [sp, #4]
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4603      	mov	r3, r0
 8006102:	460a      	mov	r2, r1
 8006104:	21a0      	movs	r1, #160	; 0xa0
 8006106:	480a      	ldr	r0, [pc, #40]	; (8006130 <hata2EEPROM+0xb0>)
 8006108:	f004 f8cc 	bl	800a2a4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800610c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006110:	f003 f83e 	bl	8009190 <HAL_Delay>
	eepromKontrol(1);
 8006114:	2001      	movs	r0, #1
 8006116:	f7ff fd37 	bl	8005b88 <eepromKontrol>
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bd90      	pop	{r4, r7, pc}
 8006122:	bf00      	nop
 8006124:	20000938 	.word	0x20000938
 8006128:	2000093c 	.word	0x2000093c
 800612c:	20000b28 	.word	0x20000b28
 8006130:	20000df8 	.word	0x20000df8

08006134 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800613a:	2300      	movs	r3, #0
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	e009      	b.n	8006154 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <eepromDataFillWithEmpty+0x38>)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <eepromDataFillWithEmpty+0x3c>)
 800614a:	2100      	movs	r1, #0
 800614c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3301      	adds	r3, #1
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <eepromDataFillWithEmpty+0x40>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	429a      	cmp	r2, r3
 800615c:	dbf0      	blt.n	8006140 <eepromDataFillWithEmpty+0xc>
	}
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000910 	.word	0x20000910
 8006170:	20000b28 	.word	0x20000b28
 8006174:	20000938 	.word	0x20000938

08006178 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
	timer1=millis;
 800617c:	4b47      	ldr	r3, [pc, #284]	; (800629c <bekle+0x124>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a47      	ldr	r2, [pc, #284]	; (80062a0 <bekle+0x128>)
 8006182:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006184:	e002      	b.n	800618c <bekle+0x14>
    	butonKontrol = 1;
 8006186:	4b47      	ldr	r3, [pc, #284]	; (80062a4 <bekle+0x12c>)
 8006188:	2201      	movs	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800618c:	2101      	movs	r1, #1
 800618e:	4846      	ldr	r0, [pc, #280]	; (80062a8 <bekle+0x130>)
 8006190:	f003 fdce 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006194:	4603      	mov	r3, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	d109      	bne.n	80061ae <bekle+0x36>
 800619a:	4b40      	ldr	r3, [pc, #256]	; (800629c <bekle+0x124>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <bekle+0x128>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d0ef      	beq.n	8006186 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061a6:	e002      	b.n	80061ae <bekle+0x36>
    	butonKontrol = 1;
 80061a8:	4b3e      	ldr	r3, [pc, #248]	; (80062a4 <bekle+0x12c>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061ae:	2108      	movs	r1, #8
 80061b0:	483e      	ldr	r0, [pc, #248]	; (80062ac <bekle+0x134>)
 80061b2:	f003 fdbd 	bl	8009d30 <HAL_GPIO_ReadPin>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d109      	bne.n	80061d0 <bekle+0x58>
 80061bc:	4b37      	ldr	r3, [pc, #220]	; (800629c <bekle+0x124>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	4b37      	ldr	r3, [pc, #220]	; (80062a0 <bekle+0x128>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d0ef      	beq.n	80061a8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061c8:	e002      	b.n	80061d0 <bekle+0x58>
    	butonKontrol = 1;
 80061ca:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <bekle+0x12c>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061d0:	2102      	movs	r1, #2
 80061d2:	4835      	ldr	r0, [pc, #212]	; (80062a8 <bekle+0x130>)
 80061d4:	f003 fdac 	bl	8009d30 <HAL_GPIO_ReadPin>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d109      	bne.n	80061f2 <bekle+0x7a>
 80061de:	4b2f      	ldr	r3, [pc, #188]	; (800629c <bekle+0x124>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b2f      	ldr	r3, [pc, #188]	; (80062a0 <bekle+0x128>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d0ef      	beq.n	80061ca <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061ea:	e002      	b.n	80061f2 <bekle+0x7a>
    	butonKontrol = 1;
 80061ec:	4b2d      	ldr	r3, [pc, #180]	; (80062a4 <bekle+0x12c>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80061f2:	2104      	movs	r1, #4
 80061f4:	482c      	ldr	r0, [pc, #176]	; (80062a8 <bekle+0x130>)
 80061f6:	f003 fd9b 	bl	8009d30 <HAL_GPIO_ReadPin>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d109      	bne.n	8006214 <bekle+0x9c>
 8006200:	4b26      	ldr	r3, [pc, #152]	; (800629c <bekle+0x124>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4b26      	ldr	r3, [pc, #152]	; (80062a0 <bekle+0x128>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d0ef      	beq.n	80061ec <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800620c:	e002      	b.n	8006214 <bekle+0x9c>
    	butonKontrol = 1;
 800620e:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <bekle+0x12c>)
 8006210:	2201      	movs	r2, #1
 8006212:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006214:	2108      	movs	r1, #8
 8006216:	4824      	ldr	r0, [pc, #144]	; (80062a8 <bekle+0x130>)
 8006218:	f003 fd8a 	bl	8009d30 <HAL_GPIO_ReadPin>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d109      	bne.n	8006236 <bekle+0xbe>
 8006222:	4b1e      	ldr	r3, [pc, #120]	; (800629c <bekle+0x124>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b1e      	ldr	r3, [pc, #120]	; (80062a0 <bekle+0x128>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d0ef      	beq.n	800620e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800622e:	e002      	b.n	8006236 <bekle+0xbe>
    	butonKontrol = 1;
 8006230:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <bekle+0x12c>)
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	481c      	ldr	r0, [pc, #112]	; (80062ac <bekle+0x134>)
 800623a:	f003 fd79 	bl	8009d30 <HAL_GPIO_ReadPin>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <bekle+0xe0>
 8006244:	4b15      	ldr	r3, [pc, #84]	; (800629c <bekle+0x124>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4b15      	ldr	r3, [pc, #84]	; (80062a0 <bekle+0x128>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d0ef      	beq.n	8006230 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006250:	e002      	b.n	8006258 <bekle+0xe0>
    	butonKontrol = 1;
 8006252:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <bekle+0x12c>)
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800625c:	4813      	ldr	r0, [pc, #76]	; (80062ac <bekle+0x134>)
 800625e:	f003 fd67 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <bekle+0x104>
 8006268:	4b0c      	ldr	r3, [pc, #48]	; (800629c <bekle+0x124>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <bekle+0x128>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d0ee      	beq.n	8006252 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006274:	e002      	b.n	800627c <bekle+0x104>
    	butonKontrol = 1;
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <bekle+0x12c>)
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800627c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006280:	480a      	ldr	r0, [pc, #40]	; (80062ac <bekle+0x134>)
 8006282:	f003 fd55 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d105      	bne.n	8006298 <bekle+0x120>
 800628c:	4b03      	ldr	r3, [pc, #12]	; (800629c <bekle+0x124>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <bekle+0x128>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d0ee      	beq.n	8006276 <bekle+0xfe>
    }

}
 8006298:	bf00      	nop
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20000bc4 	.word	0x20000bc4
 80062a0:	20000bcc 	.word	0x20000bcc
 80062a4:	20000c68 	.word	0x20000c68
 80062a8:	40010800 	.word	0x40010800
 80062ac:	40011000 	.word	0x40011000

080062b0 <i2cTest>:

void i2cTest() {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80062b6:	463b      	mov	r3, r7
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80062c2:	4b50      	ldr	r3, [pc, #320]	; (8006404 <i2cTest+0x154>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4b4e      	ldr	r3, [pc, #312]	; (8006404 <i2cTest+0x154>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80062d2:	484c      	ldr	r0, [pc, #304]	; (8006404 <i2cTest+0x154>)
 80062d4:	f003 feb8 	bl	800a048 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062d8:	23c0      	movs	r3, #192	; 0xc0
 80062da:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80062dc:	2311      	movs	r3, #17
 80062de:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80062e0:	2301      	movs	r3, #1
 80062e2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80062e4:	2303      	movs	r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80062e8:	463b      	mov	r3, r7
 80062ea:	4619      	mov	r1, r3
 80062ec:	4846      	ldr	r0, [pc, #280]	; (8006408 <i2cTest+0x158>)
 80062ee:	f003 fabf 	bl	8009870 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80062f2:	2201      	movs	r2, #1
 80062f4:	2140      	movs	r1, #64	; 0x40
 80062f6:	4844      	ldr	r0, [pc, #272]	; (8006408 <i2cTest+0x158>)
 80062f8:	f003 fd31 	bl	8009d5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80062fc:	2201      	movs	r2, #1
 80062fe:	2180      	movs	r1, #128	; 0x80
 8006300:	4841      	ldr	r0, [pc, #260]	; (8006408 <i2cTest+0x158>)
 8006302:	f003 fd2c 	bl	8009d5e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006306:	200a      	movs	r0, #10
 8006308:	f002 ff42 	bl	8009190 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800630c:	bf00      	nop
 800630e:	2140      	movs	r1, #64	; 0x40
 8006310:	483d      	ldr	r0, [pc, #244]	; (8006408 <i2cTest+0x158>)
 8006312:	f003 fd0d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006316:	4603      	mov	r3, r0
 8006318:	2b01      	cmp	r3, #1
 800631a:	d006      	beq.n	800632a <i2cTest+0x7a>
 800631c:	2180      	movs	r1, #128	; 0x80
 800631e:	483a      	ldr	r0, [pc, #232]	; (8006408 <i2cTest+0x158>)
 8006320:	f003 fd06 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d1f1      	bne.n	800630e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800632a:	2200      	movs	r2, #0
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	4836      	ldr	r0, [pc, #216]	; (8006408 <i2cTest+0x158>)
 8006330:	f003 fd15 	bl	8009d5e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006334:	200a      	movs	r0, #10
 8006336:	f002 ff2b 	bl	8009190 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800633a:	bf00      	nop
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	4832      	ldr	r0, [pc, #200]	; (8006408 <i2cTest+0x158>)
 8006340:	f003 fcf6 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006344:	4603      	mov	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d0f8      	beq.n	800633c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800634a:	2200      	movs	r2, #0
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	482e      	ldr	r0, [pc, #184]	; (8006408 <i2cTest+0x158>)
 8006350:	f003 fd05 	bl	8009d5e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006354:	200a      	movs	r0, #10
 8006356:	f002 ff1b 	bl	8009190 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800635a:	bf00      	nop
 800635c:	2140      	movs	r1, #64	; 0x40
 800635e:	482a      	ldr	r0, [pc, #168]	; (8006408 <i2cTest+0x158>)
 8006360:	f003 fce6 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006364:	4603      	mov	r3, r0
 8006366:	2b01      	cmp	r3, #1
 8006368:	d0f8      	beq.n	800635c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800636a:	2201      	movs	r2, #1
 800636c:	2140      	movs	r1, #64	; 0x40
 800636e:	4826      	ldr	r0, [pc, #152]	; (8006408 <i2cTest+0x158>)
 8006370:	f003 fcf5 	bl	8009d5e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006374:	200a      	movs	r0, #10
 8006376:	f002 ff0b 	bl	8009190 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800637a:	bf00      	nop
 800637c:	2140      	movs	r1, #64	; 0x40
 800637e:	4822      	ldr	r0, [pc, #136]	; (8006408 <i2cTest+0x158>)
 8006380:	f003 fcd6 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	d1f8      	bne.n	800637c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800638a:	2201      	movs	r2, #1
 800638c:	2180      	movs	r1, #128	; 0x80
 800638e:	481e      	ldr	r0, [pc, #120]	; (8006408 <i2cTest+0x158>)
 8006390:	f003 fce5 	bl	8009d5e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006394:	200a      	movs	r0, #10
 8006396:	f002 fefb 	bl	8009190 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800639a:	bf00      	nop
 800639c:	2180      	movs	r1, #128	; 0x80
 800639e:	481a      	ldr	r0, [pc, #104]	; (8006408 <i2cTest+0x158>)
 80063a0:	f003 fcc6 	bl	8009d30 <HAL_GPIO_ReadPin>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d1f8      	bne.n	800639c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80063aa:	23c0      	movs	r3, #192	; 0xc0
 80063ac:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80063ae:	2312      	movs	r3, #18
 80063b0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80063b2:	2301      	movs	r3, #1
 80063b4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80063b6:	2303      	movs	r3, #3
 80063b8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80063ba:	463b      	mov	r3, r7
 80063bc:	4619      	mov	r1, r3
 80063be:	4812      	ldr	r0, [pc, #72]	; (8006408 <i2cTest+0x158>)
 80063c0:	f003 fa56 	bl	8009870 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80063c4:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <i2cTest+0x154>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <i2cTest+0x154>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80063d4:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <i2cTest+0x154>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <i2cTest+0x154>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063e2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <i2cTest+0x154>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b06      	ldr	r3, [pc, #24]	; (8006404 <i2cTest+0x154>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80063f4:	4803      	ldr	r0, [pc, #12]	; (8006404 <i2cTest+0x154>)
 80063f6:	f003 fce3 	bl	8009dc0 <HAL_I2C_Init>
}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000df8 	.word	0x20000df8
 8006408:	40010c00 	.word	0x40010c00

0800640c <checkLCDBacklight>:

void checkLCDBacklight() {
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <checkLCDBacklight+0x34>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <checkLCDBacklight+0x38>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	1ad2      	subs	r2, r2, r3
 800641a:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <checkLCDBacklight+0x3c>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	4619      	mov	r1, r3
 8006420:	460b      	mov	r3, r1
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	429a      	cmp	r2, r3
 800642a:	d303      	bcc.n	8006434 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 800642c:	2000      	movs	r0, #0
 800642e:	f7fa fa33 	bl	8000898 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006432:	e002      	b.n	800643a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006434:	2001      	movs	r0, #1
 8006436:	f7fa fa2f 	bl	8000898 <lcd_backlight>
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000bc4 	.word	0x20000bc4
 8006444:	20000be0 	.word	0x20000be0
 8006448:	20000940 	.word	0x20000940

0800644c <checkBasincSalteri>:

void checkBasincSalteri() {
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006450:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <checkBasincSalteri+0x54>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <checkBasincSalteri+0x12>
		basincVar=1;
 8006458:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <checkBasincSalteri+0x58>)
 800645a:	2201      	movs	r2, #1
 800645c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800645e:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <checkBasincSalteri+0x54>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d119      	bne.n	800649a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8006466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800646a:	480f      	ldr	r0, [pc, #60]	; (80064a8 <checkBasincSalteri+0x5c>)
 800646c:	f003 fc60 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006476:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <checkBasincSalteri+0x60>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <checkBasincSalteri+0x64>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d90a      	bls.n	800649a <checkBasincSalteri+0x4e>
				basincVar=1;
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <checkBasincSalteri+0x58>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800648a:	e006      	b.n	800649a <checkBasincSalteri+0x4e>
			timer5=millis;
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <checkBasincSalteri+0x60>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a07      	ldr	r2, [pc, #28]	; (80064b0 <checkBasincSalteri+0x64>)
 8006492:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <checkBasincSalteri+0x58>)
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000c40 	.word	0x20000c40
 80064a4:	20000c3c 	.word	0x20000c3c
 80064a8:	40011000 	.word	0x40011000
 80064ac:	20000bc4 	.word	0x20000bc4
 80064b0:	20000bdc 	.word	0x20000bdc

080064b4 <checkBasGonder>:

void checkBasGonder() {
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80064b8:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <checkBasGonder+0x74>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10b      	bne.n	80064d8 <checkBasGonder+0x24>
 80064c0:	4b1a      	ldr	r3, [pc, #104]	; (800652c <checkBasGonder+0x78>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <checkBasGonder+0x24>
 80064c8:	4b19      	ldr	r3, [pc, #100]	; (8006530 <checkBasGonder+0x7c>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80064d0:	4b18      	ldr	r3, [pc, #96]	; (8006534 <checkBasGonder+0x80>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e009      	b.n	80064ec <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <checkBasGonder+0x78>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	f083 0301 	eor.w	r3, r3, #1
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80064e6:	4b13      	ldr	r3, [pc, #76]	; (8006534 <checkBasGonder+0x80>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <checkBasGonder+0x74>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d10b      	bne.n	800650c <checkBasGonder+0x58>
 80064f4:	4b10      	ldr	r3, [pc, #64]	; (8006538 <checkBasGonder+0x84>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <checkBasGonder+0x58>
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <checkBasGonder+0x7c>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006504:	4b0d      	ldr	r3, [pc, #52]	; (800653c <checkBasGonder+0x88>)
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800650a:	e009      	b.n	8006520 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <checkBasGonder+0x84>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	f083 0301 	eor.w	r3, r3, #1
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <checkBasGonder+0x88>)
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	20000c3a 	.word	0x20000c3a
 800652c:	20000c6e 	.word	0x20000c6e
 8006530:	20000c48 	.word	0x20000c48
 8006534:	20000c75 	.word	0x20000c75
 8006538:	20000c71 	.word	0x20000c71
 800653c:	20000c76 	.word	0x20000c76

08006540 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006544:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <checkKapiSecimleri+0x98>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800654c:	4b23      	ldr	r3, [pc, #140]	; (80065dc <checkKapiSecimleri+0x9c>)
 800654e:	2201      	movs	r2, #1
 8006550:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8006552:	4b21      	ldr	r3, [pc, #132]	; (80065d8 <checkKapiSecimleri+0x98>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10e      	bne.n	8006578 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800655a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800655e:	4820      	ldr	r0, [pc, #128]	; (80065e0 <checkKapiSecimleri+0xa0>)
 8006560:	f003 fbe6 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d103      	bne.n	8006572 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800656a:	4b1c      	ldr	r3, [pc, #112]	; (80065dc <checkKapiSecimleri+0x9c>)
 800656c:	2201      	movs	r2, #1
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	e002      	b.n	8006578 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8006572:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <checkKapiSecimleri+0x9c>)
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006578:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <checkKapiSecimleri+0x98>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d10e      	bne.n	800659e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006584:	4816      	ldr	r0, [pc, #88]	; (80065e0 <checkKapiSecimleri+0xa0>)
 8006586:	f003 fbd3 	bl	8009d30 <HAL_GPIO_ReadPin>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d103      	bne.n	8006598 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006590:	4b12      	ldr	r3, [pc, #72]	; (80065dc <checkKapiSecimleri+0x9c>)
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e002      	b.n	800659e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006598:	4b10      	ldr	r3, [pc, #64]	; (80065dc <checkKapiSecimleri+0x9c>)
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <checkKapiSecimleri+0x98>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d116      	bne.n	80065d4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80065a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065aa:	480d      	ldr	r0, [pc, #52]	; (80065e0 <checkKapiSecimleri+0xa0>)
 80065ac:	f003 fbc0 	bl	8009d30 <HAL_GPIO_ReadPin>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <checkKapiSecimleri+0x8e>
 80065b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065ba:	4809      	ldr	r0, [pc, #36]	; (80065e0 <checkKapiSecimleri+0xa0>)
 80065bc:	f003 fbb8 	bl	8009d30 <HAL_GPIO_ReadPin>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d103      	bne.n	80065ce <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <checkKapiSecimleri+0x9c>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80065cc:	e002      	b.n	80065d4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80065ce:	4b03      	ldr	r3, [pc, #12]	; (80065dc <checkKapiSecimleri+0x9c>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000c41 	.word	0x20000c41
 80065dc:	20000c8c 	.word	0x20000c8c
 80065e0:	40010800 	.word	0x40010800

080065e4 <checkAktifCalisma>:

void checkAktifCalisma() {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80065e8:	4b62      	ldr	r3, [pc, #392]	; (8006774 <checkAktifCalisma+0x190>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f041 8332 	bne.w	8007c56 <checkAktifCalisma+0x1672>
 80065f2:	4b61      	ldr	r3, [pc, #388]	; (8006778 <checkAktifCalisma+0x194>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f041 832d 	bne.w	8007c56 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80065fc:	4b5f      	ldr	r3, [pc, #380]	; (800677c <checkAktifCalisma+0x198>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d11a      	bne.n	800663a <checkAktifCalisma+0x56>
 8006604:	4b5e      	ldr	r3, [pc, #376]	; (8006780 <checkAktifCalisma+0x19c>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d116      	bne.n	800663a <checkAktifCalisma+0x56>
 800660c:	4b5d      	ldr	r3, [pc, #372]	; (8006784 <checkAktifCalisma+0x1a0>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <checkAktifCalisma+0x46>
 8006614:	4b5c      	ldr	r3, [pc, #368]	; (8006788 <checkAktifCalisma+0x1a4>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	f083 0301 	eor.w	r3, r3, #1
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <checkAktifCalisma+0x46>
 8006622:	4b5a      	ldr	r3, [pc, #360]	; (800678c <checkAktifCalisma+0x1a8>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d007      	beq.n	800663a <checkAktifCalisma+0x56>
 800662a:	4b59      	ldr	r3, [pc, #356]	; (8006790 <checkAktifCalisma+0x1ac>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d018      	beq.n	8006664 <checkAktifCalisma+0x80>
 8006632:	4b58      	ldr	r3, [pc, #352]	; (8006794 <checkAktifCalisma+0x1b0>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d114      	bne.n	8006664 <checkAktifCalisma+0x80>
 800663a:	4b57      	ldr	r3, [pc, #348]	; (8006798 <checkAktifCalisma+0x1b4>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d010      	beq.n	8006664 <checkAktifCalisma+0x80>
 8006642:	4b56      	ldr	r3, [pc, #344]	; (800679c <checkAktifCalisma+0x1b8>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800664a:	2201      	movs	r2, #1
 800664c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006650:	4853      	ldr	r0, [pc, #332]	; (80067a0 <checkAktifCalisma+0x1bc>)
 8006652:	f003 fb84 	bl	8009d5e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8006656:	4b53      	ldr	r3, [pc, #332]	; (80067a4 <checkAktifCalisma+0x1c0>)
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 800665c:	4b52      	ldr	r3, [pc, #328]	; (80067a8 <checkAktifCalisma+0x1c4>)
 800665e:	2201      	movs	r2, #1
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	e008      	b.n	8006676 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006664:	2200      	movs	r2, #0
 8006666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800666a:	484d      	ldr	r0, [pc, #308]	; (80067a0 <checkAktifCalisma+0x1bc>)
 800666c:	f003 fb77 	bl	8009d5e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006670:	4b4c      	ldr	r3, [pc, #304]	; (80067a4 <checkAktifCalisma+0x1c0>)
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006676:	4b40      	ldr	r3, [pc, #256]	; (8006778 <checkAktifCalisma+0x194>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d160      	bne.n	8006740 <checkAktifCalisma+0x15c>
 800667e:	4b46      	ldr	r3, [pc, #280]	; (8006798 <checkAktifCalisma+0x1b4>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d05c      	beq.n	8006740 <checkAktifCalisma+0x15c>
 8006686:	4b45      	ldr	r3, [pc, #276]	; (800679c <checkAktifCalisma+0x1b8>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d058      	beq.n	8006740 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800668e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006692:	4843      	ldr	r0, [pc, #268]	; (80067a0 <checkAktifCalisma+0x1bc>)
 8006694:	f003 fb4c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <checkAktifCalisma+0xc2>
 800669e:	4b43      	ldr	r3, [pc, #268]	; (80067ac <checkAktifCalisma+0x1c8>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d04c      	beq.n	8006740 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80066a6:	2102      	movs	r1, #2
 80066a8:	4841      	ldr	r0, [pc, #260]	; (80067b0 <checkAktifCalisma+0x1cc>)
 80066aa:	f003 fb41 	bl	8009d30 <HAL_GPIO_ReadPin>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d145      	bne.n	8006740 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80066b4:	4b3f      	ldr	r3, [pc, #252]	; (80067b4 <checkAktifCalisma+0x1d0>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d041      	beq.n	8006740 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80066bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066c0:	4837      	ldr	r0, [pc, #220]	; (80067a0 <checkAktifCalisma+0x1bc>)
 80066c2:	f003 fb35 	bl	8009d30 <HAL_GPIO_ReadPin>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d10e      	bne.n	80066ea <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80066cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066d0:	4833      	ldr	r0, [pc, #204]	; (80067a0 <checkAktifCalisma+0x1bc>)
 80066d2:	f003 fb2d 	bl	8009d30 <HAL_GPIO_ReadPin>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d106      	bne.n	80066ea <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80066dc:	2140      	movs	r1, #64	; 0x40
 80066de:	4834      	ldr	r0, [pc, #208]	; (80067b0 <checkAktifCalisma+0x1cc>)
 80066e0:	f003 fb26 	bl	8009d30 <HAL_GPIO_ReadPin>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d003      	beq.n	80066f2 <checkAktifCalisma+0x10e>
 80066ea:	4b24      	ldr	r3, [pc, #144]	; (800677c <checkAktifCalisma+0x198>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d026      	beq.n	8006740 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80066f2:	4b24      	ldr	r3, [pc, #144]	; (8006784 <checkAktifCalisma+0x1a0>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f083 0301 	eor.w	r3, r3, #1
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01f      	beq.n	8006740 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006700:	4b1f      	ldr	r3, [pc, #124]	; (8006780 <checkAktifCalisma+0x19c>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f083 0301 	eor.w	r3, r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d018      	beq.n	8006740 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <checkAktifCalisma+0x1ac>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f083 0301 	eor.w	r3, r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d011      	beq.n	8006740 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800671c:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <checkAktifCalisma+0x1d4>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	f083 0301 	eor.w	r3, r3, #1
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800672a:	4b24      	ldr	r3, [pc, #144]	; (80067bc <checkAktifCalisma+0x1d8>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	f083 0301 	eor.w	r3, r3, #1
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <checkAktifCalisma+0x198>)
 800673a:	2201      	movs	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e002      	b.n	8006746 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006740:	4b0e      	ldr	r3, [pc, #56]	; (800677c <checkAktifCalisma+0x198>)
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <checkAktifCalisma+0x198>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d03a      	beq.n	80067c4 <checkAktifCalisma+0x1e0>
 800674e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006752:	4817      	ldr	r0, [pc, #92]	; (80067b0 <checkAktifCalisma+0x1cc>)
 8006754:	f003 faec 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d132      	bne.n	80067c4 <checkAktifCalisma+0x1e0>
 800675e:	4b18      	ldr	r3, [pc, #96]	; (80067c0 <checkAktifCalisma+0x1dc>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d02e      	beq.n	80067c4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006766:	2201      	movs	r2, #1
 8006768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800676c:	480c      	ldr	r0, [pc, #48]	; (80067a0 <checkAktifCalisma+0x1bc>)
 800676e:	f003 faf6 	bl	8009d5e <HAL_GPIO_WritePin>
 8006772:	e02d      	b.n	80067d0 <checkAktifCalisma+0x1ec>
 8006774:	20000c57 	.word	0x20000c57
 8006778:	20000c56 	.word	0x20000c56
 800677c:	20000c6e 	.word	0x20000c6e
 8006780:	20000c6f 	.word	0x20000c6f
 8006784:	20000c71 	.word	0x20000c71
 8006788:	20000c69 	.word	0x20000c69
 800678c:	20000c4c 	.word	0x20000c4c
 8006790:	20000c70 	.word	0x20000c70
 8006794:	20000c4b 	.word	0x20000c4b
 8006798:	20000c8b 	.word	0x20000c8b
 800679c:	20000c8c 	.word	0x20000c8c
 80067a0:	40010c00 	.word	0x40010c00
 80067a4:	20000c8d 	.word	0x20000c8d
 80067a8:	20000c78 	.word	0x20000c78
 80067ac:	20000c75 	.word	0x20000c75
 80067b0:	40011000 	.word	0x40011000
 80067b4:	20000c3c 	.word	0x20000c3c
 80067b8:	20000c73 	.word	0x20000c73
 80067bc:	20000c74 	.word	0x20000c74
 80067c0:	20000c47 	.word	0x20000c47
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80067c4:	2200      	movs	r2, #0
 80067c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067ca:	4860      	ldr	r0, [pc, #384]	; (800694c <checkAktifCalisma+0x368>)
 80067cc:	f003 fac7 	bl	8009d5e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80067d0:	4b5f      	ldr	r3, [pc, #380]	; (8006950 <checkAktifCalisma+0x36c>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d013      	beq.n	8006800 <checkAktifCalisma+0x21c>
 80067d8:	4b5e      	ldr	r3, [pc, #376]	; (8006954 <checkAktifCalisma+0x370>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d007      	beq.n	80067f0 <checkAktifCalisma+0x20c>
 80067e0:	4b5c      	ldr	r3, [pc, #368]	; (8006954 <checkAktifCalisma+0x370>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d003      	beq.n	80067f0 <checkAktifCalisma+0x20c>
 80067e8:	4b5b      	ldr	r3, [pc, #364]	; (8006958 <checkAktifCalisma+0x374>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d107      	bne.n	8006800 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80067f0:	2201      	movs	r2, #1
 80067f2:	2104      	movs	r1, #4
 80067f4:	4855      	ldr	r0, [pc, #340]	; (800694c <checkAktifCalisma+0x368>)
 80067f6:	f003 fab2 	bl	8009d5e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80067fa:	4b58      	ldr	r3, [pc, #352]	; (800695c <checkAktifCalisma+0x378>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006800:	4b56      	ldr	r3, [pc, #344]	; (800695c <checkAktifCalisma+0x378>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02f      	beq.n	8006868 <checkAktifCalisma+0x284>
 8006808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800680c:	484f      	ldr	r0, [pc, #316]	; (800694c <checkAktifCalisma+0x368>)
 800680e:	f003 fa8f 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006812:	4603      	mov	r3, r0
 8006814:	2b01      	cmp	r3, #1
 8006816:	d106      	bne.n	8006826 <checkAktifCalisma+0x242>
 8006818:	4b51      	ldr	r3, [pc, #324]	; (8006960 <checkAktifCalisma+0x37c>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f083 0301 	eor.w	r3, r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <checkAktifCalisma+0x250>
 8006826:	2102      	movs	r1, #2
 8006828:	484e      	ldr	r0, [pc, #312]	; (8006964 <checkAktifCalisma+0x380>)
 800682a:	f003 fa81 	bl	8009d30 <HAL_GPIO_ReadPin>
 800682e:	4603      	mov	r3, r0
 8006830:	2b01      	cmp	r3, #1
 8006832:	d119      	bne.n	8006868 <checkAktifCalisma+0x284>
 8006834:	4b4c      	ldr	r3, [pc, #304]	; (8006968 <checkAktifCalisma+0x384>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <checkAktifCalisma+0x284>
 800683c:	4b4b      	ldr	r3, [pc, #300]	; (800696c <checkAktifCalisma+0x388>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d011      	beq.n	8006868 <checkAktifCalisma+0x284>
 8006844:	4b4a      	ldr	r3, [pc, #296]	; (8006970 <checkAktifCalisma+0x38c>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00d      	beq.n	8006868 <checkAktifCalisma+0x284>
 800684c:	4b49      	ldr	r3, [pc, #292]	; (8006974 <checkAktifCalisma+0x390>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f083 0301 	eor.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <checkAktifCalisma+0x284>
			timer2=millis;
 800685a:	4b47      	ldr	r3, [pc, #284]	; (8006978 <checkAktifCalisma+0x394>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a47      	ldr	r2, [pc, #284]	; (800697c <checkAktifCalisma+0x398>)
 8006860:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006862:	4b44      	ldr	r3, [pc, #272]	; (8006974 <checkAktifCalisma+0x390>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006868:	4b43      	ldr	r3, [pc, #268]	; (8006978 <checkAktifCalisma+0x394>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b43      	ldr	r3, [pc, #268]	; (800697c <checkAktifCalisma+0x398>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	4a43      	ldr	r2, [pc, #268]	; (8006980 <checkAktifCalisma+0x39c>)
 8006874:	7812      	ldrb	r2, [r2, #0]
 8006876:	4293      	cmp	r3, r2
 8006878:	d303      	bcc.n	8006882 <checkAktifCalisma+0x29e>
 800687a:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <checkAktifCalisma+0x390>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d111      	bne.n	80068a6 <checkAktifCalisma+0x2c2>
 8006882:	4b39      	ldr	r3, [pc, #228]	; (8006968 <checkAktifCalisma+0x384>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f083 0301 	eor.w	r3, r3, #1
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <checkAktifCalisma+0x2c2>
 8006890:	4b36      	ldr	r3, [pc, #216]	; (800696c <checkAktifCalisma+0x388>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f083 0301 	eor.w	r3, r3, #1
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <checkAktifCalisma+0x2c2>
 800689e:	4b34      	ldr	r3, [pc, #208]	; (8006970 <checkAktifCalisma+0x38c>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80068a6:	2200      	movs	r2, #0
 80068a8:	2104      	movs	r1, #4
 80068aa:	4828      	ldr	r0, [pc, #160]	; (800694c <checkAktifCalisma+0x368>)
 80068ac:	f003 fa57 	bl	8009d5e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80068b0:	4b2a      	ldr	r3, [pc, #168]	; (800695c <checkAktifCalisma+0x378>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80068b6:	4b2f      	ldr	r3, [pc, #188]	; (8006974 <checkAktifCalisma+0x390>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80068bc:	4b31      	ldr	r3, [pc, #196]	; (8006984 <checkAktifCalisma+0x3a0>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80068c4:	4b30      	ldr	r3, [pc, #192]	; (8006988 <checkAktifCalisma+0x3a4>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80068ca:	4b2e      	ldr	r3, [pc, #184]	; (8006984 <checkAktifCalisma+0x3a0>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d116      	bne.n	8006900 <checkAktifCalisma+0x31c>
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <checkAktifCalisma+0x3a8>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d112      	bne.n	8006900 <checkAktifCalisma+0x31c>
 80068da:	2101      	movs	r1, #1
 80068dc:	4821      	ldr	r0, [pc, #132]	; (8006964 <checkAktifCalisma+0x380>)
 80068de:	f003 fa27 	bl	8009d30 <HAL_GPIO_ReadPin>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <checkAktifCalisma+0x31c>
 80068e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068ec:	4817      	ldr	r0, [pc, #92]	; (800694c <checkAktifCalisma+0x368>)
 80068ee:	f003 fa1f 	bl	8009d30 <HAL_GPIO_ReadPin>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80068f8:	4b23      	ldr	r3, [pc, #140]	; (8006988 <checkAktifCalisma+0x3a4>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	e011      	b.n	8006924 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006900:	4b20      	ldr	r3, [pc, #128]	; (8006984 <checkAktifCalisma+0x3a0>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d10d      	bne.n	8006924 <checkAktifCalisma+0x340>
 8006908:	2101      	movs	r1, #1
 800690a:	4816      	ldr	r0, [pc, #88]	; (8006964 <checkAktifCalisma+0x380>)
 800690c:	f003 fa10 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006910:	4603      	mov	r3, r0
 8006912:	2b01      	cmp	r3, #1
 8006914:	d106      	bne.n	8006924 <checkAktifCalisma+0x340>
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <checkAktifCalisma+0x3a8>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800691e:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <checkAktifCalisma+0x3a4>)
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <checkAktifCalisma+0x3a0>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d134      	bne.n	8006996 <checkAktifCalisma+0x3b2>
 800692c:	4b17      	ldr	r3, [pc, #92]	; (800698c <checkAktifCalisma+0x3a8>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d130      	bne.n	8006996 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006934:	2101      	movs	r1, #1
 8006936:	480b      	ldr	r0, [pc, #44]	; (8006964 <checkAktifCalisma+0x380>)
 8006938:	f003 f9fa 	bl	8009d30 <HAL_GPIO_ReadPin>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d126      	bne.n	8006990 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006942:	4b11      	ldr	r3, [pc, #68]	; (8006988 <checkAktifCalisma+0x3a4>)
 8006944:	2201      	movs	r2, #1
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	e025      	b.n	8006996 <checkAktifCalisma+0x3b2>
 800694a:	bf00      	nop
 800694c:	40010c00 	.word	0x40010c00
 8006950:	20000c6e 	.word	0x20000c6e
 8006954:	20000c48 	.word	0x20000c48
 8006958:	20000c4c 	.word	0x20000c4c
 800695c:	20000c72 	.word	0x20000c72
 8006960:	20000c75 	.word	0x20000c75
 8006964:	40011000 	.word	0x40011000
 8006968:	20000c8b 	.word	0x20000c8b
 800696c:	20000c8c 	.word	0x20000c8c
 8006970:	20000c3c 	.word	0x20000c3c
 8006974:	20000c6a 	.word	0x20000c6a
 8006978:	20000bc4 	.word	0x20000bc4
 800697c:	20000bd0 	.word	0x20000bd0
 8006980:	20000c4d 	.word	0x20000c4d
 8006984:	20000c3d 	.word	0x20000c3d
 8006988:	20000c90 	.word	0x20000c90
 800698c:	20000c3a 	.word	0x20000c3a
			} else {
				cerceveVar=0;
 8006990:	4b7f      	ldr	r3, [pc, #508]	; (8006b90 <checkAktifCalisma+0x5ac>)
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006996:	4b7f      	ldr	r3, [pc, #508]	; (8006b94 <checkAktifCalisma+0x5b0>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d17c      	bne.n	8006a98 <checkAktifCalisma+0x4b4>
 800699e:	4b7e      	ldr	r3, [pc, #504]	; (8006b98 <checkAktifCalisma+0x5b4>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d078      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
 80069a6:	4b7d      	ldr	r3, [pc, #500]	; (8006b9c <checkAktifCalisma+0x5b8>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d074      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80069ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069b2:	487b      	ldr	r0, [pc, #492]	; (8006ba0 <checkAktifCalisma+0x5bc>)
 80069b4:	f003 f9bc 	bl	8009d30 <HAL_GPIO_ReadPin>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <checkAktifCalisma+0x3e2>
 80069be:	4b79      	ldr	r3, [pc, #484]	; (8006ba4 <checkAktifCalisma+0x5c0>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d068      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80069c6:	4b72      	ldr	r3, [pc, #456]	; (8006b90 <checkAktifCalisma+0x5ac>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d064      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
 80069ce:	4b76      	ldr	r3, [pc, #472]	; (8006ba8 <checkAktifCalisma+0x5c4>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f083 0301 	eor.w	r3, r3, #1
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d05d      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80069dc:	2104      	movs	r1, #4
 80069de:	4873      	ldr	r0, [pc, #460]	; (8006bac <checkAktifCalisma+0x5c8>)
 80069e0:	f003 f9a6 	bl	8009d30 <HAL_GPIO_ReadPin>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <checkAktifCalisma+0x40e>
 80069ea:	4b71      	ldr	r3, [pc, #452]	; (8006bb0 <checkAktifCalisma+0x5cc>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d152      	bne.n	8006a98 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80069f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069f6:	486a      	ldr	r0, [pc, #424]	; (8006ba0 <checkAktifCalisma+0x5bc>)
 80069f8:	f003 f99a 	bl	8009d30 <HAL_GPIO_ReadPin>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10e      	bne.n	8006a20 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a06:	4866      	ldr	r0, [pc, #408]	; (8006ba0 <checkAktifCalisma+0x5bc>)
 8006a08:	f003 f992 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d106      	bne.n	8006a20 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006a12:	2140      	movs	r1, #64	; 0x40
 8006a14:	4865      	ldr	r0, [pc, #404]	; (8006bac <checkAktifCalisma+0x5c8>)
 8006a16:	f003 f98b 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d003      	beq.n	8006a28 <checkAktifCalisma+0x444>
 8006a20:	4b64      	ldr	r3, [pc, #400]	; (8006bb4 <checkAktifCalisma+0x5d0>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d037      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006a28:	4b63      	ldr	r3, [pc, #396]	; (8006bb8 <checkAktifCalisma+0x5d4>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f083 0301 	eor.w	r3, r3, #1
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d030      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006a36:	4b61      	ldr	r3, [pc, #388]	; (8006bbc <checkAktifCalisma+0x5d8>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	f083 0301 	eor.w	r3, r3, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d029      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006a44:	4b5e      	ldr	r3, [pc, #376]	; (8006bc0 <checkAktifCalisma+0x5dc>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f083 0301 	eor.w	r3, r3, #1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d022      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006a52:	4b5c      	ldr	r3, [pc, #368]	; (8006bc4 <checkAktifCalisma+0x5e0>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f083 0301 	eor.w	r3, r3, #1
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01b      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006a60:	4b59      	ldr	r3, [pc, #356]	; (8006bc8 <checkAktifCalisma+0x5e4>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f083 0301 	eor.w	r3, r3, #1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d014      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006a6e:	4b57      	ldr	r3, [pc, #348]	; (8006bcc <checkAktifCalisma+0x5e8>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	f083 0301 	eor.w	r3, r3, #1
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00d      	beq.n	8006a98 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	2102      	movs	r1, #2
 8006a80:	4847      	ldr	r0, [pc, #284]	; (8006ba0 <checkAktifCalisma+0x5bc>)
 8006a82:	f003 f96c 	bl	8009d5e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006a86:	4b4b      	ldr	r3, [pc, #300]	; (8006bb4 <checkAktifCalisma+0x5d0>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006a8c:	4b50      	ldr	r3, [pc, #320]	; (8006bd0 <checkAktifCalisma+0x5ec>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006a92:	4b50      	ldr	r3, [pc, #320]	; (8006bd4 <checkAktifCalisma+0x5f0>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006a98:	4b46      	ldr	r3, [pc, #280]	; (8006bb4 <checkAktifCalisma+0x5d0>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d033      	beq.n	8006b08 <checkAktifCalisma+0x524>
 8006aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006aa4:	483e      	ldr	r0, [pc, #248]	; (8006ba0 <checkAktifCalisma+0x5bc>)
 8006aa6:	f003 f943 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d106      	bne.n	8006abe <checkAktifCalisma+0x4da>
 8006ab0:	4b3c      	ldr	r3, [pc, #240]	; (8006ba4 <checkAktifCalisma+0x5c0>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f083 0301 	eor.w	r3, r3, #1
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <checkAktifCalisma+0x4f0>
 8006abe:	2104      	movs	r1, #4
 8006ac0:	483a      	ldr	r0, [pc, #232]	; (8006bac <checkAktifCalisma+0x5c8>)
 8006ac2:	f003 f935 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d11d      	bne.n	8006b08 <checkAktifCalisma+0x524>
 8006acc:	4b38      	ldr	r3, [pc, #224]	; (8006bb0 <checkAktifCalisma+0x5cc>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d019      	beq.n	8006b08 <checkAktifCalisma+0x524>
 8006ad4:	4b30      	ldr	r3, [pc, #192]	; (8006b98 <checkAktifCalisma+0x5b4>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d015      	beq.n	8006b08 <checkAktifCalisma+0x524>
 8006adc:	4b2f      	ldr	r3, [pc, #188]	; (8006b9c <checkAktifCalisma+0x5b8>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d011      	beq.n	8006b08 <checkAktifCalisma+0x524>
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <checkAktifCalisma+0x5ac>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00d      	beq.n	8006b08 <checkAktifCalisma+0x524>
 8006aec:	4b3a      	ldr	r3, [pc, #232]	; (8006bd8 <checkAktifCalisma+0x5f4>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f083 0301 	eor.w	r3, r3, #1
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d006      	beq.n	8006b08 <checkAktifCalisma+0x524>
			timer2=millis;
 8006afa:	4b38      	ldr	r3, [pc, #224]	; (8006bdc <checkAktifCalisma+0x5f8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a38      	ldr	r2, [pc, #224]	; (8006be0 <checkAktifCalisma+0x5fc>)
 8006b00:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006b02:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <checkAktifCalisma+0x5f4>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006b08:	4b34      	ldr	r3, [pc, #208]	; (8006bdc <checkAktifCalisma+0x5f8>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	4b34      	ldr	r3, [pc, #208]	; (8006be0 <checkAktifCalisma+0x5fc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	4a34      	ldr	r2, [pc, #208]	; (8006be4 <checkAktifCalisma+0x600>)
 8006b14:	7812      	ldrb	r2, [r2, #0]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d303      	bcc.n	8006b22 <checkAktifCalisma+0x53e>
 8006b1a:	4b2f      	ldr	r3, [pc, #188]	; (8006bd8 <checkAktifCalisma+0x5f4>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d114      	bne.n	8006b4c <checkAktifCalisma+0x568>
 8006b22:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <checkAktifCalisma+0x5b4>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	f083 0301 	eor.w	r3, r3, #1
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10d      	bne.n	8006b4c <checkAktifCalisma+0x568>
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <checkAktifCalisma+0x5b8>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	f083 0301 	eor.w	r3, r3, #1
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <checkAktifCalisma+0x568>
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <checkAktifCalisma+0x5ac>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f083 0301 	eor.w	r3, r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2102      	movs	r1, #2
 8006b50:	4813      	ldr	r0, [pc, #76]	; (8006ba0 <checkAktifCalisma+0x5bc>)
 8006b52:	f003 f904 	bl	8009d5e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006b56:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <checkAktifCalisma+0x5d0>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006b5c:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <checkAktifCalisma+0x5f4>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <checkAktifCalisma+0x5d0>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d040      	beq.n	8006bec <checkAktifCalisma+0x608>
 8006b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b6e:	480f      	ldr	r0, [pc, #60]	; (8006bac <checkAktifCalisma+0x5c8>)
 8006b70:	f003 f8de 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d138      	bne.n	8006bec <checkAktifCalisma+0x608>
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <checkAktifCalisma+0x604>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d034      	beq.n	8006bec <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006b82:	2201      	movs	r2, #1
 8006b84:	2101      	movs	r1, #1
 8006b86:	4806      	ldr	r0, [pc, #24]	; (8006ba0 <checkAktifCalisma+0x5bc>)
 8006b88:	f003 f8e9 	bl	8009d5e <HAL_GPIO_WritePin>
 8006b8c:	e033      	b.n	8006bf6 <checkAktifCalisma+0x612>
 8006b8e:	bf00      	nop
 8006b90:	20000c90 	.word	0x20000c90
 8006b94:	20000c56 	.word	0x20000c56
 8006b98:	20000c8b 	.word	0x20000c8b
 8006b9c:	20000c8c 	.word	0x20000c8c
 8006ba0:	40010c00 	.word	0x40010c00
 8006ba4:	20000c76 	.word	0x20000c76
 8006ba8:	20000c8a 	.word	0x20000c8a
 8006bac:	40011000 	.word	0x40011000
 8006bb0:	20000c3f 	.word	0x20000c3f
 8006bb4:	20000c71 	.word	0x20000c71
 8006bb8:	20000c6e 	.word	0x20000c6e
 8006bbc:	20000c72 	.word	0x20000c72
 8006bc0:	20000c6f 	.word	0x20000c6f
 8006bc4:	20000c70 	.word	0x20000c70
 8006bc8:	20000c73 	.word	0x20000c73
 8006bcc:	20000c74 	.word	0x20000c74
 8006bd0:	20000c79 	.word	0x20000c79
 8006bd4:	20000c9a 	.word	0x20000c9a
 8006bd8:	20000c69 	.word	0x20000c69
 8006bdc:	20000bc4 	.word	0x20000bc4
 8006be0:	20000bd0 	.word	0x20000bd0
 8006be4:	20000c4e 	.word	0x20000c4e
 8006be8:	20000c3e 	.word	0x20000c3e
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006bec:	2200      	movs	r2, #0
 8006bee:	2101      	movs	r1, #1
 8006bf0:	4836      	ldr	r0, [pc, #216]	; (8006ccc <checkAktifCalisma+0x6e8>)
 8006bf2:	f003 f8b4 	bl	8009d5e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006bf6:	4b36      	ldr	r3, [pc, #216]	; (8006cd0 <checkAktifCalisma+0x6ec>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 8080 	bne.w	8006d00 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006c00:	4b34      	ldr	r3, [pc, #208]	; (8006cd4 <checkAktifCalisma+0x6f0>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d003      	beq.n	8006c10 <checkAktifCalisma+0x62c>
 8006c08:	4b32      	ldr	r3, [pc, #200]	; (8006cd4 <checkAktifCalisma+0x6f0>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d177      	bne.n	8006d00 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006c10:	4b31      	ldr	r3, [pc, #196]	; (8006cd8 <checkAktifCalisma+0x6f4>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d073      	beq.n	8006d00 <checkAktifCalisma+0x71c>
 8006c18:	4b30      	ldr	r3, [pc, #192]	; (8006cdc <checkAktifCalisma+0x6f8>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d06f      	beq.n	8006d00 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c24:	4829      	ldr	r0, [pc, #164]	; (8006ccc <checkAktifCalisma+0x6e8>)
 8006c26:	f003 f883 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d167      	bne.n	8006d00 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c34:	482a      	ldr	r0, [pc, #168]	; (8006ce0 <checkAktifCalisma+0x6fc>)
 8006c36:	f003 f87b 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <checkAktifCalisma+0x664>
 8006c40:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <checkAktifCalisma+0x700>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d15b      	bne.n	8006d00 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006c48:	2140      	movs	r1, #64	; 0x40
 8006c4a:	4825      	ldr	r0, [pc, #148]	; (8006ce0 <checkAktifCalisma+0x6fc>)
 8006c4c:	f003 f870 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d10f      	bne.n	8006c76 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c5a:	481c      	ldr	r0, [pc, #112]	; (8006ccc <checkAktifCalisma+0x6e8>)
 8006c5c:	f003 f868 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d107      	bne.n	8006c76 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c6a:	4818      	ldr	r0, [pc, #96]	; (8006ccc <checkAktifCalisma+0x6e8>)
 8006c6c:	f003 f860 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d003      	beq.n	8006c7e <checkAktifCalisma+0x69a>
 8006c76:	4b1c      	ldr	r3, [pc, #112]	; (8006ce8 <checkAktifCalisma+0x704>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d040      	beq.n	8006d00 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <checkAktifCalisma+0x708>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f083 0301 	eor.w	r3, r3, #1
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d039      	beq.n	8006d00 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006c8c:	4b18      	ldr	r3, [pc, #96]	; (8006cf0 <checkAktifCalisma+0x70c>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f083 0301 	eor.w	r3, r3, #1
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d032      	beq.n	8006d00 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006c9a:	4b16      	ldr	r3, [pc, #88]	; (8006cf4 <checkAktifCalisma+0x710>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f083 0301 	eor.w	r3, r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d02b      	beq.n	8006d00 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006ca8:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <checkAktifCalisma+0x714>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f083 0301 	eor.w	r3, r3, #1
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d024      	beq.n	8006d00 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006cb6:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <checkAktifCalisma+0x718>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	f083 0301 	eor.w	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01d      	beq.n	8006d00 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006cc4:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <checkAktifCalisma+0x704>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	e01c      	b.n	8006d06 <checkAktifCalisma+0x722>
 8006ccc:	40010c00 	.word	0x40010c00
 8006cd0:	20000c56 	.word	0x20000c56
 8006cd4:	20000c48 	.word	0x20000c48
 8006cd8:	20000c8b 	.word	0x20000c8b
 8006cdc:	20000c8c 	.word	0x20000c8c
 8006ce0:	40011000 	.word	0x40011000
 8006ce4:	20000c49 	.word	0x20000c49
 8006ce8:	20000c6f 	.word	0x20000c6f
 8006cec:	20000c6e 	.word	0x20000c6e
 8006cf0:	20000c72 	.word	0x20000c72
 8006cf4:	20000c71 	.word	0x20000c71
 8006cf8:	20000c70 	.word	0x20000c70
 8006cfc:	20000c74 	.word	0x20000c74
		} else {
			devmotoryukaricalisiyor=0;
 8006d00:	4b64      	ldr	r3, [pc, #400]	; (8006e94 <checkAktifCalisma+0x8b0>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006d06:	4b63      	ldr	r3, [pc, #396]	; (8006e94 <checkAktifCalisma+0x8b0>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006d0e:	2201      	movs	r2, #1
 8006d10:	2120      	movs	r1, #32
 8006d12:	4861      	ldr	r0, [pc, #388]	; (8006e98 <checkAktifCalisma+0x8b4>)
 8006d14:	f003 f823 	bl	8009d5e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006d18:	4b60      	ldr	r3, [pc, #384]	; (8006e9c <checkAktifCalisma+0x8b8>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006d1e:	4b5f      	ldr	r3, [pc, #380]	; (8006e9c <checkAktifCalisma+0x8b8>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d025      	beq.n	8006d72 <checkAktifCalisma+0x78e>
 8006d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d2a:	485d      	ldr	r0, [pc, #372]	; (8006ea0 <checkAktifCalisma+0x8bc>)
 8006d2c:	f003 f800 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d007      	beq.n	8006d46 <checkAktifCalisma+0x762>
 8006d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d3a:	4857      	ldr	r0, [pc, #348]	; (8006e98 <checkAktifCalisma+0x8b4>)
 8006d3c:	f002 fff8 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d115      	bne.n	8006d72 <checkAktifCalisma+0x78e>
 8006d46:	4b57      	ldr	r3, [pc, #348]	; (8006ea4 <checkAktifCalisma+0x8c0>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d011      	beq.n	8006d72 <checkAktifCalisma+0x78e>
 8006d4e:	4b56      	ldr	r3, [pc, #344]	; (8006ea8 <checkAktifCalisma+0x8c4>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00d      	beq.n	8006d72 <checkAktifCalisma+0x78e>
 8006d56:	4b55      	ldr	r3, [pc, #340]	; (8006eac <checkAktifCalisma+0x8c8>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f083 0301 	eor.w	r3, r3, #1
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d006      	beq.n	8006d72 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006d64:	4b52      	ldr	r3, [pc, #328]	; (8006eb0 <checkAktifCalisma+0x8cc>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a52      	ldr	r2, [pc, #328]	; (8006eb4 <checkAktifCalisma+0x8d0>)
 8006d6a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006d6c:	4b4f      	ldr	r3, [pc, #316]	; (8006eac <checkAktifCalisma+0x8c8>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006d72:	4b4f      	ldr	r3, [pc, #316]	; (8006eb0 <checkAktifCalisma+0x8cc>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b4f      	ldr	r3, [pc, #316]	; (8006eb4 <checkAktifCalisma+0x8d0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	4a4e      	ldr	r2, [pc, #312]	; (8006eb8 <checkAktifCalisma+0x8d4>)
 8006d7e:	7812      	ldrb	r2, [r2, #0]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d303      	bcc.n	8006d8c <checkAktifCalisma+0x7a8>
 8006d84:	4b49      	ldr	r3, [pc, #292]	; (8006eac <checkAktifCalisma+0x8c8>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10d      	bne.n	8006da8 <checkAktifCalisma+0x7c4>
 8006d8c:	4b45      	ldr	r3, [pc, #276]	; (8006ea4 <checkAktifCalisma+0x8c0>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f083 0301 	eor.w	r3, r3, #1
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <checkAktifCalisma+0x7c4>
 8006d9a:	4b43      	ldr	r3, [pc, #268]	; (8006ea8 <checkAktifCalisma+0x8c4>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	f083 0301 	eor.w	r3, r3, #1
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006da8:	2200      	movs	r2, #0
 8006daa:	2120      	movs	r1, #32
 8006dac:	483a      	ldr	r0, [pc, #232]	; (8006e98 <checkAktifCalisma+0x8b4>)
 8006dae:	f002 ffd6 	bl	8009d5e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006db2:	4b3a      	ldr	r3, [pc, #232]	; (8006e9c <checkAktifCalisma+0x8b8>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006db8:	4b3c      	ldr	r3, [pc, #240]	; (8006eac <checkAktifCalisma+0x8c8>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <checkAktifCalisma+0x8d8>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f040 8088 	bne.w	8006ed8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006dc8:	4b3d      	ldr	r3, [pc, #244]	; (8006ec0 <checkAktifCalisma+0x8dc>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d003      	beq.n	8006dd8 <checkAktifCalisma+0x7f4>
 8006dd0:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <checkAktifCalisma+0x8dc>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d17f      	bne.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006dd8:	4b32      	ldr	r3, [pc, #200]	; (8006ea4 <checkAktifCalisma+0x8c0>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d07b      	beq.n	8006ed8 <checkAktifCalisma+0x8f4>
 8006de0:	4b31      	ldr	r3, [pc, #196]	; (8006ea8 <checkAktifCalisma+0x8c4>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d077      	beq.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006de8:	2140      	movs	r1, #64	; 0x40
 8006dea:	482b      	ldr	r0, [pc, #172]	; (8006e98 <checkAktifCalisma+0x8b4>)
 8006dec:	f002 ffa0 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d170      	bne.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006df6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dfa:	4827      	ldr	r0, [pc, #156]	; (8006e98 <checkAktifCalisma+0x8b4>)
 8006dfc:	f002 ff98 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <checkAktifCalisma+0x82a>
 8006e06:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <checkAktifCalisma+0x8e0>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d164      	bne.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e12:	4823      	ldr	r0, [pc, #140]	; (8006ea0 <checkAktifCalisma+0x8bc>)
 8006e14:	f002 ff8c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d10f      	bne.n	8006e3e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e22:	481f      	ldr	r0, [pc, #124]	; (8006ea0 <checkAktifCalisma+0x8bc>)
 8006e24:	f002 ff84 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d107      	bne.n	8006e3e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e32:	481b      	ldr	r0, [pc, #108]	; (8006ea0 <checkAktifCalisma+0x8bc>)
 8006e34:	f002 ff7c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d003      	beq.n	8006e46 <checkAktifCalisma+0x862>
 8006e3e:	4b22      	ldr	r3, [pc, #136]	; (8006ec8 <checkAktifCalisma+0x8e4>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d048      	beq.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006e46:	4b21      	ldr	r3, [pc, #132]	; (8006ecc <checkAktifCalisma+0x8e8>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	f083 0301 	eor.w	r3, r3, #1
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d041      	beq.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006e54:	4b1e      	ldr	r3, [pc, #120]	; (8006ed0 <checkAktifCalisma+0x8ec>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f083 0301 	eor.w	r3, r3, #1
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d03a      	beq.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006e62:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <checkAktifCalisma+0x8f0>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f083 0301 	eor.w	r3, r3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d033      	beq.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <checkAktifCalisma+0x8b8>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f083 0301 	eor.w	r3, r3, #1
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d02c      	beq.n	8006ed8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <checkAktifCalisma+0x8b0>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f083 0301 	eor.w	r3, r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d025      	beq.n	8006ed8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <checkAktifCalisma+0x8e4>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e024      	b.n	8006ede <checkAktifCalisma+0x8fa>
 8006e94:	20000c6f 	.word	0x20000c6f
 8006e98:	40011000 	.word	0x40011000
 8006e9c:	20000c73 	.word	0x20000c73
 8006ea0:	40010c00 	.word	0x40010c00
 8006ea4:	20000c8b 	.word	0x20000c8b
 8006ea8:	20000c8c 	.word	0x20000c8c
 8006eac:	20000c6b 	.word	0x20000c6b
 8006eb0:	20000bc4 	.word	0x20000bc4
 8006eb4:	20000bd0 	.word	0x20000bd0
 8006eb8:	20000c4f 	.word	0x20000c4f
 8006ebc:	20000c56 	.word	0x20000c56
 8006ec0:	20000c48 	.word	0x20000c48
 8006ec4:	20000c4a 	.word	0x20000c4a
 8006ec8:	20000c70 	.word	0x20000c70
 8006ecc:	20000c6e 	.word	0x20000c6e
 8006ed0:	20000c72 	.word	0x20000c72
 8006ed4:	20000c71 	.word	0x20000c71
		} else {
			devmotorasagicalisiyor=0;
 8006ed8:	4b96      	ldr	r3, [pc, #600]	; (8007134 <checkAktifCalisma+0xb50>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006ede:	4b95      	ldr	r3, [pc, #596]	; (8007134 <checkAktifCalisma+0xb50>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	2110      	movs	r1, #16
 8006eea:	4893      	ldr	r0, [pc, #588]	; (8007138 <checkAktifCalisma+0xb54>)
 8006eec:	f002 ff37 	bl	8009d5e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006ef0:	4b92      	ldr	r3, [pc, #584]	; (800713c <checkAktifCalisma+0xb58>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006ef6:	4b91      	ldr	r3, [pc, #580]	; (800713c <checkAktifCalisma+0xb58>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d024      	beq.n	8006f48 <checkAktifCalisma+0x964>
 8006efe:	2140      	movs	r1, #64	; 0x40
 8006f00:	488d      	ldr	r0, [pc, #564]	; (8007138 <checkAktifCalisma+0xb54>)
 8006f02:	f002 ff15 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d007      	beq.n	8006f1c <checkAktifCalisma+0x938>
 8006f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f10:	4889      	ldr	r0, [pc, #548]	; (8007138 <checkAktifCalisma+0xb54>)
 8006f12:	f002 ff0d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d115      	bne.n	8006f48 <checkAktifCalisma+0x964>
 8006f1c:	4b88      	ldr	r3, [pc, #544]	; (8007140 <checkAktifCalisma+0xb5c>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d011      	beq.n	8006f48 <checkAktifCalisma+0x964>
 8006f24:	4b87      	ldr	r3, [pc, #540]	; (8007144 <checkAktifCalisma+0xb60>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00d      	beq.n	8006f48 <checkAktifCalisma+0x964>
 8006f2c:	4b86      	ldr	r3, [pc, #536]	; (8007148 <checkAktifCalisma+0xb64>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f083 0301 	eor.w	r3, r3, #1
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d006      	beq.n	8006f48 <checkAktifCalisma+0x964>
			timer2=millis;
 8006f3a:	4b84      	ldr	r3, [pc, #528]	; (800714c <checkAktifCalisma+0xb68>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a84      	ldr	r2, [pc, #528]	; (8007150 <checkAktifCalisma+0xb6c>)
 8006f40:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006f42:	4b81      	ldr	r3, [pc, #516]	; (8007148 <checkAktifCalisma+0xb64>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006f48:	4b80      	ldr	r3, [pc, #512]	; (800714c <checkAktifCalisma+0xb68>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	4b80      	ldr	r3, [pc, #512]	; (8007150 <checkAktifCalisma+0xb6c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	4a80      	ldr	r2, [pc, #512]	; (8007154 <checkAktifCalisma+0xb70>)
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d303      	bcc.n	8006f62 <checkAktifCalisma+0x97e>
 8006f5a:	4b7b      	ldr	r3, [pc, #492]	; (8007148 <checkAktifCalisma+0xb64>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <checkAktifCalisma+0x99a>
 8006f62:	4b77      	ldr	r3, [pc, #476]	; (8007140 <checkAktifCalisma+0xb5c>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f083 0301 	eor.w	r3, r3, #1
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <checkAktifCalisma+0x99a>
 8006f70:	4b74      	ldr	r3, [pc, #464]	; (8007144 <checkAktifCalisma+0xb60>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f083 0301 	eor.w	r3, r3, #1
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2110      	movs	r1, #16
 8006f82:	486d      	ldr	r0, [pc, #436]	; (8007138 <checkAktifCalisma+0xb54>)
 8006f84:	f002 feeb 	bl	8009d5e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006f88:	4b6c      	ldr	r3, [pc, #432]	; (800713c <checkAktifCalisma+0xb58>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006f8e:	4b6e      	ldr	r3, [pc, #440]	; (8007148 <checkAktifCalisma+0xb64>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006f94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f98:	486f      	ldr	r0, [pc, #444]	; (8007158 <checkAktifCalisma+0xb74>)
 8006f9a:	f002 fec9 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d120      	bne.n	8006fe6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fa8:	486b      	ldr	r0, [pc, #428]	; (8007158 <checkAktifCalisma+0xb74>)
 8006faa:	f002 fec1 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d118      	bne.n	8006fe6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006fb4:	2104      	movs	r1, #4
 8006fb6:	4868      	ldr	r0, [pc, #416]	; (8007158 <checkAktifCalisma+0xb74>)
 8006fb8:	f002 feba 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d111      	bne.n	8006fe6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	4864      	ldr	r0, [pc, #400]	; (8007158 <checkAktifCalisma+0xb74>)
 8006fc6:	f002 feb3 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	4861      	ldr	r0, [pc, #388]	; (8007158 <checkAktifCalisma+0xb74>)
 8006fd4:	f002 feac 	bl	8009d30 <HAL_GPIO_ReadPin>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006fde:	4b5f      	ldr	r3, [pc, #380]	; (800715c <checkAktifCalisma+0xb78>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e002      	b.n	8006fec <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006fe6:	4b5d      	ldr	r3, [pc, #372]	; (800715c <checkAktifCalisma+0xb78>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fec:	4b5c      	ldr	r3, [pc, #368]	; (8007160 <checkAktifCalisma+0xb7c>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d144      	bne.n	800707e <checkAktifCalisma+0xa9a>
 8006ff4:	4b5b      	ldr	r3, [pc, #364]	; (8007164 <checkAktifCalisma+0xb80>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d003      	beq.n	8007004 <checkAktifCalisma+0xa20>
 8006ffc:	4b59      	ldr	r3, [pc, #356]	; (8007164 <checkAktifCalisma+0xb80>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d13c      	bne.n	800707e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007004:	2180      	movs	r1, #128	; 0x80
 8007006:	484c      	ldr	r0, [pc, #304]	; (8007138 <checkAktifCalisma+0xb54>)
 8007008:	f002 fe92 	bl	8009d30 <HAL_GPIO_ReadPin>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d103      	bne.n	800701a <checkAktifCalisma+0xa36>
 8007012:	4b55      	ldr	r3, [pc, #340]	; (8007168 <checkAktifCalisma+0xb84>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <checkAktifCalisma+0xa4e>
 800701a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800701e:	484e      	ldr	r0, [pc, #312]	; (8007158 <checkAktifCalisma+0xb74>)
 8007020:	f002 fe86 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d129      	bne.n	800707e <checkAktifCalisma+0xa9a>
 800702a:	4b4f      	ldr	r3, [pc, #316]	; (8007168 <checkAktifCalisma+0xb84>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d125      	bne.n	800707e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007032:	2104      	movs	r1, #4
 8007034:	4840      	ldr	r0, [pc, #256]	; (8007138 <checkAktifCalisma+0xb54>)
 8007036:	f002 fe7b 	bl	8009d30 <HAL_GPIO_ReadPin>
 800703a:	4603      	mov	r3, r0
 800703c:	2b01      	cmp	r3, #1
 800703e:	d003      	beq.n	8007048 <checkAktifCalisma+0xa64>
 8007040:	4b4a      	ldr	r3, [pc, #296]	; (800716c <checkAktifCalisma+0xb88>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11a      	bne.n	800707e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007048:	2102      	movs	r1, #2
 800704a:	483b      	ldr	r0, [pc, #236]	; (8007138 <checkAktifCalisma+0xb54>)
 800704c:	f002 fe70 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d113      	bne.n	800707e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8007056:	4b46      	ldr	r3, [pc, #280]	; (8007170 <checkAktifCalisma+0xb8c>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	f083 0301 	eor.w	r3, r3, #1
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00c      	beq.n	800707e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8007064:	4b3d      	ldr	r3, [pc, #244]	; (800715c <checkAktifCalisma+0xb78>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800706c:	4b41      	ldr	r3, [pc, #260]	; (8007174 <checkAktifCalisma+0xb90>)
 800706e:	2201      	movs	r2, #1
 8007070:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007072:	4b36      	ldr	r3, [pc, #216]	; (800714c <checkAktifCalisma+0xb68>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a40      	ldr	r2, [pc, #256]	; (8007178 <checkAktifCalisma+0xb94>)
 8007078:	6013      	str	r3, [r2, #0]
			bekle();
 800707a:	f7ff f87d 	bl	8006178 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800707e:	4b33      	ldr	r3, [pc, #204]	; (800714c <checkAktifCalisma+0xb68>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4b3d      	ldr	r3, [pc, #244]	; (8007178 <checkAktifCalisma+0xb94>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	4a3c      	ldr	r2, [pc, #240]	; (800717c <checkAktifCalisma+0xb98>)
 800708a:	7812      	ldrb	r2, [r2, #0]
 800708c:	4293      	cmp	r3, r2
 800708e:	d211      	bcs.n	80070b4 <checkAktifCalisma+0xad0>
 8007090:	2104      	movs	r1, #4
 8007092:	4829      	ldr	r0, [pc, #164]	; (8007138 <checkAktifCalisma+0xb54>)
 8007094:	f002 fe4c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <checkAktifCalisma+0xad0>
 800709e:	4b33      	ldr	r3, [pc, #204]	; (800716c <checkAktifCalisma+0xb88>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d006      	beq.n	80070b4 <checkAktifCalisma+0xad0>
 80070a6:	4b2d      	ldr	r3, [pc, #180]	; (800715c <checkAktifCalisma+0xb78>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	f083 0301 	eor.w	r3, r3, #1
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80070b4:	4b2f      	ldr	r3, [pc, #188]	; (8007174 <checkAktifCalisma+0xb90>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070ba:	4b29      	ldr	r3, [pc, #164]	; (8007160 <checkAktifCalisma+0xb7c>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d160      	bne.n	8007184 <checkAktifCalisma+0xba0>
 80070c2:	4b28      	ldr	r3, [pc, #160]	; (8007164 <checkAktifCalisma+0xb80>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d003      	beq.n	80070d2 <checkAktifCalisma+0xaee>
 80070ca:	4b26      	ldr	r3, [pc, #152]	; (8007164 <checkAktifCalisma+0xb80>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d158      	bne.n	8007184 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80070d2:	2104      	movs	r1, #4
 80070d4:	4818      	ldr	r0, [pc, #96]	; (8007138 <checkAktifCalisma+0xb54>)
 80070d6:	f002 fe2b 	bl	8009d30 <HAL_GPIO_ReadPin>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d003      	beq.n	80070e8 <checkAktifCalisma+0xb04>
 80070e0:	4b22      	ldr	r3, [pc, #136]	; (800716c <checkAktifCalisma+0xb88>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d14d      	bne.n	8007184 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80070e8:	2102      	movs	r1, #2
 80070ea:	4813      	ldr	r0, [pc, #76]	; (8007138 <checkAktifCalisma+0xb54>)
 80070ec:	f002 fe20 	bl	8009d30 <HAL_GPIO_ReadPin>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d146      	bne.n	8007184 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80070f6:	2180      	movs	r1, #128	; 0x80
 80070f8:	480f      	ldr	r0, [pc, #60]	; (8007138 <checkAktifCalisma+0xb54>)
 80070fa:	f002 fe19 	bl	8009d30 <HAL_GPIO_ReadPin>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <checkAktifCalisma+0xb28>
 8007104:	4b18      	ldr	r3, [pc, #96]	; (8007168 <checkAktifCalisma+0xb84>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <checkAktifCalisma+0xb40>
 800710c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007110:	4811      	ldr	r0, [pc, #68]	; (8007158 <checkAktifCalisma+0xb74>)
 8007112:	f002 fe0d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d133      	bne.n	8007184 <checkAktifCalisma+0xba0>
 800711c:	4b12      	ldr	r3, [pc, #72]	; (8007168 <checkAktifCalisma+0xb84>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d12f      	bne.n	8007184 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <checkAktifCalisma+0xb78>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d02b      	beq.n	8007184 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800712c:	4b14      	ldr	r3, [pc, #80]	; (8007180 <checkAktifCalisma+0xb9c>)
 800712e:	2201      	movs	r2, #1
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e02a      	b.n	800718a <checkAktifCalisma+0xba6>
 8007134:	20000c70 	.word	0x20000c70
 8007138:	40011000 	.word	0x40011000
 800713c:	20000c74 	.word	0x20000c74
 8007140:	20000c8b 	.word	0x20000c8b
 8007144:	20000c8c 	.word	0x20000c8c
 8007148:	20000c6c 	.word	0x20000c6c
 800714c:	20000bc4 	.word	0x20000bc4
 8007150:	20000bd0 	.word	0x20000bd0
 8007154:	20000c4f 	.word	0x20000c4f
 8007158:	40010c00 	.word	0x40010c00
 800715c:	20000c7b 	.word	0x20000c7b
 8007160:	20000c42 	.word	0x20000c42
 8007164:	20000c41 	.word	0x20000c41
 8007168:	20000c45 	.word	0x20000c45
 800716c:	20000c3f 	.word	0x20000c3f
 8007170:	20000c68 	.word	0x20000c68
 8007174:	20000c7c 	.word	0x20000c7c
 8007178:	20000bc8 	.word	0x20000bc8
 800717c:	20000c52 	.word	0x20000c52
 8007180:	20000c7d 	.word	0x20000c7d
		} else {
			kapi1butonkontrol=0;
 8007184:	4b8b      	ldr	r3, [pc, #556]	; (80073b4 <checkAktifCalisma+0xdd0>)
 8007186:	2200      	movs	r2, #0
 8007188:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800718a:	4b8b      	ldr	r3, [pc, #556]	; (80073b8 <checkAktifCalisma+0xdd4>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d121      	bne.n	80071d6 <checkAktifCalisma+0xbf2>
 8007192:	4b8a      	ldr	r3, [pc, #552]	; (80073bc <checkAktifCalisma+0xdd8>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d003      	beq.n	80071a2 <checkAktifCalisma+0xbbe>
 800719a:	4b88      	ldr	r3, [pc, #544]	; (80073bc <checkAktifCalisma+0xdd8>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d119      	bne.n	80071d6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80071a2:	2104      	movs	r1, #4
 80071a4:	4886      	ldr	r0, [pc, #536]	; (80073c0 <checkAktifCalisma+0xddc>)
 80071a6:	f002 fdc3 	bl	8009d30 <HAL_GPIO_ReadPin>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d003      	beq.n	80071b8 <checkAktifCalisma+0xbd4>
 80071b0:	4b84      	ldr	r3, [pc, #528]	; (80073c4 <checkAktifCalisma+0xde0>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10e      	bne.n	80071d6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80071b8:	2102      	movs	r1, #2
 80071ba:	4881      	ldr	r0, [pc, #516]	; (80073c0 <checkAktifCalisma+0xddc>)
 80071bc:	f002 fdb8 	bl	8009d30 <HAL_GPIO_ReadPin>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d107      	bne.n	80071d6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80071c6:	4b80      	ldr	r3, [pc, #512]	; (80073c8 <checkAktifCalisma+0xde4>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80071ce:	4b7f      	ldr	r3, [pc, #508]	; (80073cc <checkAktifCalisma+0xde8>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	e002      	b.n	80071dc <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80071d6:	4b7d      	ldr	r3, [pc, #500]	; (80073cc <checkAktifCalisma+0xde8>)
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80071dc:	4b75      	ldr	r3, [pc, #468]	; (80073b4 <checkAktifCalisma+0xdd0>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d107      	bne.n	80071f4 <checkAktifCalisma+0xc10>
 80071e4:	4b79      	ldr	r3, [pc, #484]	; (80073cc <checkAktifCalisma+0xde8>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <checkAktifCalisma+0xc10>
 80071ec:	4b78      	ldr	r3, [pc, #480]	; (80073d0 <checkAktifCalisma+0xdec>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80071f4:	2201      	movs	r2, #1
 80071f6:	2180      	movs	r1, #128	; 0x80
 80071f8:	4876      	ldr	r0, [pc, #472]	; (80073d4 <checkAktifCalisma+0xdf0>)
 80071fa:	f002 fdb0 	bl	8009d5e <HAL_GPIO_WritePin>
 80071fe:	e004      	b.n	800720a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007200:	2200      	movs	r2, #0
 8007202:	2180      	movs	r1, #128	; 0x80
 8007204:	4873      	ldr	r0, [pc, #460]	; (80073d4 <checkAktifCalisma+0xdf0>)
 8007206:	f002 fdaa 	bl	8009d5e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800720a:	4b73      	ldr	r3, [pc, #460]	; (80073d8 <checkAktifCalisma+0xdf4>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d141      	bne.n	8007296 <checkAktifCalisma+0xcb2>
 8007212:	4b6a      	ldr	r3, [pc, #424]	; (80073bc <checkAktifCalisma+0xdd8>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d003      	beq.n	8007222 <checkAktifCalisma+0xc3e>
 800721a:	4b68      	ldr	r3, [pc, #416]	; (80073bc <checkAktifCalisma+0xdd8>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d139      	bne.n	8007296 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007226:	4866      	ldr	r0, [pc, #408]	; (80073c0 <checkAktifCalisma+0xddc>)
 8007228:	f002 fd82 	bl	8009d30 <HAL_GPIO_ReadPin>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d103      	bne.n	800723a <checkAktifCalisma+0xc56>
 8007232:	4b6a      	ldr	r3, [pc, #424]	; (80073dc <checkAktifCalisma+0xdf8>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <checkAktifCalisma+0xc6e>
 800723a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800723e:	4868      	ldr	r0, [pc, #416]	; (80073e0 <checkAktifCalisma+0xdfc>)
 8007240:	f002 fd76 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d125      	bne.n	8007296 <checkAktifCalisma+0xcb2>
 800724a:	4b64      	ldr	r3, [pc, #400]	; (80073dc <checkAktifCalisma+0xdf8>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d121      	bne.n	8007296 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007252:	2102      	movs	r1, #2
 8007254:	485a      	ldr	r0, [pc, #360]	; (80073c0 <checkAktifCalisma+0xddc>)
 8007256:	f002 fd6b 	bl	8009d30 <HAL_GPIO_ReadPin>
 800725a:	4603      	mov	r3, r0
 800725c:	2b01      	cmp	r3, #1
 800725e:	d11a      	bne.n	8007296 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007260:	2104      	movs	r1, #4
 8007262:	4857      	ldr	r0, [pc, #348]	; (80073c0 <checkAktifCalisma+0xddc>)
 8007264:	f002 fd64 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d113      	bne.n	8007296 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800726e:	4b56      	ldr	r3, [pc, #344]	; (80073c8 <checkAktifCalisma+0xde4>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00f      	beq.n	8007296 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8007276:	4b5b      	ldr	r3, [pc, #364]	; (80073e4 <checkAktifCalisma+0xe00>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	f083 0301 	eor.w	r3, r3, #1
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8007284:	4b58      	ldr	r3, [pc, #352]	; (80073e8 <checkAktifCalisma+0xe04>)
 8007286:	2201      	movs	r2, #1
 8007288:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800728a:	4b58      	ldr	r3, [pc, #352]	; (80073ec <checkAktifCalisma+0xe08>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a58      	ldr	r2, [pc, #352]	; (80073f0 <checkAktifCalisma+0xe0c>)
 8007290:	6013      	str	r3, [r2, #0]
			bekle();
 8007292:	f7fe ff71 	bl	8006178 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8007296:	4b55      	ldr	r3, [pc, #340]	; (80073ec <checkAktifCalisma+0xe08>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b55      	ldr	r3, [pc, #340]	; (80073f0 <checkAktifCalisma+0xe0c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	4a54      	ldr	r2, [pc, #336]	; (80073f4 <checkAktifCalisma+0xe10>)
 80072a2:	7812      	ldrb	r2, [r2, #0]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d20d      	bcs.n	80072c4 <checkAktifCalisma+0xce0>
 80072a8:	2102      	movs	r1, #2
 80072aa:	4845      	ldr	r0, [pc, #276]	; (80073c0 <checkAktifCalisma+0xddc>)
 80072ac:	f002 fd40 	bl	8009d30 <HAL_GPIO_ReadPin>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d006      	beq.n	80072c4 <checkAktifCalisma+0xce0>
 80072b6:	4b44      	ldr	r3, [pc, #272]	; (80073c8 <checkAktifCalisma+0xde4>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	f083 0301 	eor.w	r3, r3, #1
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80072c4:	4b48      	ldr	r3, [pc, #288]	; (80073e8 <checkAktifCalisma+0xe04>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80072ca:	4b43      	ldr	r3, [pc, #268]	; (80073d8 <checkAktifCalisma+0xdf4>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d135      	bne.n	800733e <checkAktifCalisma+0xd5a>
 80072d2:	4b3a      	ldr	r3, [pc, #232]	; (80073bc <checkAktifCalisma+0xdd8>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d003      	beq.n	80072e2 <checkAktifCalisma+0xcfe>
 80072da:	4b38      	ldr	r3, [pc, #224]	; (80073bc <checkAktifCalisma+0xdd8>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d12d      	bne.n	800733e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80072e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072e6:	4836      	ldr	r0, [pc, #216]	; (80073c0 <checkAktifCalisma+0xddc>)
 80072e8:	f002 fd22 	bl	8009d30 <HAL_GPIO_ReadPin>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <checkAktifCalisma+0xd16>
 80072f2:	4b3a      	ldr	r3, [pc, #232]	; (80073dc <checkAktifCalisma+0xdf8>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <checkAktifCalisma+0xd2e>
 80072fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072fe:	4838      	ldr	r0, [pc, #224]	; (80073e0 <checkAktifCalisma+0xdfc>)
 8007300:	f002 fd16 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d119      	bne.n	800733e <checkAktifCalisma+0xd5a>
 800730a:	4b34      	ldr	r3, [pc, #208]	; (80073dc <checkAktifCalisma+0xdf8>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d115      	bne.n	800733e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007312:	2102      	movs	r1, #2
 8007314:	482a      	ldr	r0, [pc, #168]	; (80073c0 <checkAktifCalisma+0xddc>)
 8007316:	f002 fd0b 	bl	8009d30 <HAL_GPIO_ReadPin>
 800731a:	4603      	mov	r3, r0
 800731c:	2b01      	cmp	r3, #1
 800731e:	d10e      	bne.n	800733e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007320:	2104      	movs	r1, #4
 8007322:	4827      	ldr	r0, [pc, #156]	; (80073c0 <checkAktifCalisma+0xddc>)
 8007324:	f002 fd04 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800732e:	4b26      	ldr	r3, [pc, #152]	; (80073c8 <checkAktifCalisma+0xde4>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8007336:	4b30      	ldr	r3, [pc, #192]	; (80073f8 <checkAktifCalisma+0xe14>)
 8007338:	2201      	movs	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e002      	b.n	8007344 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800733e:	4b2e      	ldr	r3, [pc, #184]	; (80073f8 <checkAktifCalisma+0xe14>)
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007344:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <checkAktifCalisma+0xdf4>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d11d      	bne.n	8007388 <checkAktifCalisma+0xda4>
 800734c:	4b1b      	ldr	r3, [pc, #108]	; (80073bc <checkAktifCalisma+0xdd8>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d003      	beq.n	800735c <checkAktifCalisma+0xd78>
 8007354:	4b19      	ldr	r3, [pc, #100]	; (80073bc <checkAktifCalisma+0xdd8>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b03      	cmp	r3, #3
 800735a:	d115      	bne.n	8007388 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800735c:	2102      	movs	r1, #2
 800735e:	4818      	ldr	r0, [pc, #96]	; (80073c0 <checkAktifCalisma+0xddc>)
 8007360:	f002 fce6 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007364:	4603      	mov	r3, r0
 8007366:	2b01      	cmp	r3, #1
 8007368:	d10e      	bne.n	8007388 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800736a:	2104      	movs	r1, #4
 800736c:	4814      	ldr	r0, [pc, #80]	; (80073c0 <checkAktifCalisma+0xddc>)
 800736e:	f002 fcdf 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007378:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <checkAktifCalisma+0xde4>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8007380:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <checkAktifCalisma+0xe18>)
 8007382:	2201      	movs	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e002      	b.n	800738e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007388:	4b1c      	ldr	r3, [pc, #112]	; (80073fc <checkAktifCalisma+0xe18>)
 800738a:	2200      	movs	r2, #0
 800738c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800738e:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <checkAktifCalisma+0xe14>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d107      	bne.n	80073a6 <checkAktifCalisma+0xdc2>
 8007396:	4b19      	ldr	r3, [pc, #100]	; (80073fc <checkAktifCalisma+0xe18>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <checkAktifCalisma+0xdc2>
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <checkAktifCalisma+0xe04>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d02c      	beq.n	8007400 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80073a6:	2201      	movs	r2, #1
 80073a8:	2140      	movs	r1, #64	; 0x40
 80073aa:	480a      	ldr	r0, [pc, #40]	; (80073d4 <checkAktifCalisma+0xdf0>)
 80073ac:	f002 fcd7 	bl	8009d5e <HAL_GPIO_WritePin>
 80073b0:	e02b      	b.n	800740a <checkAktifCalisma+0xe26>
 80073b2:	bf00      	nop
 80073b4:	20000c7d 	.word	0x20000c7d
 80073b8:	20000c42 	.word	0x20000c42
 80073bc:	20000c41 	.word	0x20000c41
 80073c0:	40011000 	.word	0x40011000
 80073c4:	20000c3f 	.word	0x20000c3f
 80073c8:	20000c7b 	.word	0x20000c7b
 80073cc:	20000c7e 	.word	0x20000c7e
 80073d0:	20000c7c 	.word	0x20000c7c
 80073d4:	40010800 	.word	0x40010800
 80073d8:	20000c43 	.word	0x20000c43
 80073dc:	20000c45 	.word	0x20000c45
 80073e0:	40010c00 	.word	0x40010c00
 80073e4:	20000c68 	.word	0x20000c68
 80073e8:	20000c7f 	.word	0x20000c7f
 80073ec:	20000bc4 	.word	0x20000bc4
 80073f0:	20000bc8 	.word	0x20000bc8
 80073f4:	20000c53 	.word	0x20000c53
 80073f8:	20000c80 	.word	0x20000c80
 80073fc:	20000c81 	.word	0x20000c81
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007400:	2200      	movs	r2, #0
 8007402:	2140      	movs	r1, #64	; 0x40
 8007404:	488d      	ldr	r0, [pc, #564]	; (800763c <checkAktifCalisma+0x1058>)
 8007406:	f002 fcaa 	bl	8009d5e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800740a:	4b8d      	ldr	r3, [pc, #564]	; (8007640 <checkAktifCalisma+0x105c>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <checkAktifCalisma+0xe36>
 8007412:	4b8b      	ldr	r3, [pc, #556]	; (8007640 <checkAktifCalisma+0x105c>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d115      	bne.n	8007446 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800741a:	2104      	movs	r1, #4
 800741c:	4889      	ldr	r0, [pc, #548]	; (8007644 <checkAktifCalisma+0x1060>)
 800741e:	f002 fc87 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007422:	4603      	mov	r3, r0
 8007424:	2b01      	cmp	r3, #1
 8007426:	d003      	beq.n	8007430 <checkAktifCalisma+0xe4c>
 8007428:	4b87      	ldr	r3, [pc, #540]	; (8007648 <checkAktifCalisma+0x1064>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007430:	2102      	movs	r1, #2
 8007432:	4884      	ldr	r0, [pc, #528]	; (8007644 <checkAktifCalisma+0x1060>)
 8007434:	f002 fc7c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800743e:	4b83      	ldr	r3, [pc, #524]	; (800764c <checkAktifCalisma+0x1068>)
 8007440:	2201      	movs	r2, #1
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	e002      	b.n	800744c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007446:	4b81      	ldr	r3, [pc, #516]	; (800764c <checkAktifCalisma+0x1068>)
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800744c:	4b7c      	ldr	r3, [pc, #496]	; (8007640 <checkAktifCalisma+0x105c>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d003      	beq.n	800745c <checkAktifCalisma+0xe78>
 8007454:	4b7a      	ldr	r3, [pc, #488]	; (8007640 <checkAktifCalisma+0x105c>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d111      	bne.n	8007480 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800745c:	2102      	movs	r1, #2
 800745e:	4879      	ldr	r0, [pc, #484]	; (8007644 <checkAktifCalisma+0x1060>)
 8007460:	f002 fc66 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d10a      	bne.n	8007480 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800746a:	2104      	movs	r1, #4
 800746c:	4875      	ldr	r0, [pc, #468]	; (8007644 <checkAktifCalisma+0x1060>)
 800746e:	f002 fc5f 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007478:	4b75      	ldr	r3, [pc, #468]	; (8007650 <checkAktifCalisma+0x106c>)
 800747a:	2201      	movs	r2, #1
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	e002      	b.n	8007486 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007480:	4b73      	ldr	r3, [pc, #460]	; (8007650 <checkAktifCalisma+0x106c>)
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007486:	4b71      	ldr	r3, [pc, #452]	; (800764c <checkAktifCalisma+0x1068>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00f      	beq.n	80074ae <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800748e:	4b71      	ldr	r3, [pc, #452]	; (8007654 <checkAktifCalisma+0x1070>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d10b      	bne.n	80074ae <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007496:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800749a:	486f      	ldr	r0, [pc, #444]	; (8007658 <checkAktifCalisma+0x1074>)
 800749c:	f002 fc48 	bl	8009d30 <HAL_GPIO_ReadPin>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d103      	bne.n	80074ae <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80074a6:	4b6d      	ldr	r3, [pc, #436]	; (800765c <checkAktifCalisma+0x1078>)
 80074a8:	2201      	movs	r2, #1
 80074aa:	701a      	strb	r2, [r3, #0]
 80074ac:	e002      	b.n	80074b4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80074ae:	4b6b      	ldr	r3, [pc, #428]	; (800765c <checkAktifCalisma+0x1078>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80074b4:	4b66      	ldr	r3, [pc, #408]	; (8007650 <checkAktifCalisma+0x106c>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00f      	beq.n	80074dc <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80074bc:	4b65      	ldr	r3, [pc, #404]	; (8007654 <checkAktifCalisma+0x1070>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d10b      	bne.n	80074dc <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80074c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80074c8:	4863      	ldr	r0, [pc, #396]	; (8007658 <checkAktifCalisma+0x1074>)
 80074ca:	f002 fc31 	bl	8009d30 <HAL_GPIO_ReadPin>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d103      	bne.n	80074dc <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80074d4:	4b62      	ldr	r3, [pc, #392]	; (8007660 <checkAktifCalisma+0x107c>)
 80074d6:	2201      	movs	r2, #1
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	e002      	b.n	80074e2 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 80074dc:	4b60      	ldr	r3, [pc, #384]	; (8007660 <checkAktifCalisma+0x107c>)
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80074e2:	4b60      	ldr	r3, [pc, #384]	; (8007664 <checkAktifCalisma+0x1080>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d137      	bne.n	800755a <checkAktifCalisma+0xf76>
 80074ea:	4b5f      	ldr	r3, [pc, #380]	; (8007668 <checkAktifCalisma+0x1084>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d003      	beq.n	80074fa <checkAktifCalisma+0xf16>
 80074f2:	4b5d      	ldr	r3, [pc, #372]	; (8007668 <checkAktifCalisma+0x1084>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d12f      	bne.n	800755a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80074fa:	4b54      	ldr	r3, [pc, #336]	; (800764c <checkAktifCalisma+0x1068>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <checkAktifCalisma+0xf26>
 8007502:	4b53      	ldr	r3, [pc, #332]	; (8007650 <checkAktifCalisma+0x106c>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d027      	beq.n	800755a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800750a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800750e:	484d      	ldr	r0, [pc, #308]	; (8007644 <checkAktifCalisma+0x1060>)
 8007510:	f002 fc0e 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <checkAktifCalisma+0xf3e>
 800751a:	4b4e      	ldr	r3, [pc, #312]	; (8007654 <checkAktifCalisma+0x1070>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007522:	4b4e      	ldr	r3, [pc, #312]	; (800765c <checkAktifCalisma+0x1078>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <checkAktifCalisma+0xf4e>
 800752a:	4b4d      	ldr	r3, [pc, #308]	; (8007660 <checkAktifCalisma+0x107c>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d013      	beq.n	800755a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007532:	4b4e      	ldr	r3, [pc, #312]	; (800766c <checkAktifCalisma+0x1088>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00f      	beq.n	800755a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800753a:	4b4d      	ldr	r3, [pc, #308]	; (8007670 <checkAktifCalisma+0x108c>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	f083 0301 	eor.w	r3, r3, #1
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007548:	4b4a      	ldr	r3, [pc, #296]	; (8007674 <checkAktifCalisma+0x1090>)
 800754a:	2201      	movs	r2, #1
 800754c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800754e:	4b4a      	ldr	r3, [pc, #296]	; (8007678 <checkAktifCalisma+0x1094>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a4a      	ldr	r2, [pc, #296]	; (800767c <checkAktifCalisma+0x1098>)
 8007554:	6013      	str	r3, [r2, #0]
			bekle();
 8007556:	f7fe fe0f 	bl	8006178 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800755a:	4b47      	ldr	r3, [pc, #284]	; (8007678 <checkAktifCalisma+0x1094>)
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4b47      	ldr	r3, [pc, #284]	; (800767c <checkAktifCalisma+0x1098>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	4a46      	ldr	r2, [pc, #280]	; (8007680 <checkAktifCalisma+0x109c>)
 8007566:	7812      	ldrb	r2, [r2, #0]
 8007568:	4293      	cmp	r3, r2
 800756a:	d214      	bcs.n	8007596 <checkAktifCalisma+0xfb2>
 800756c:	4b37      	ldr	r3, [pc, #220]	; (800764c <checkAktifCalisma+0x1068>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	f083 0301 	eor.w	r3, r3, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d006      	beq.n	8007588 <checkAktifCalisma+0xfa4>
 800757a:	4b35      	ldr	r3, [pc, #212]	; (8007650 <checkAktifCalisma+0x106c>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	f083 0301 	eor.w	r3, r3, #1
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <checkAktifCalisma+0xfb2>
 8007588:	4b38      	ldr	r3, [pc, #224]	; (800766c <checkAktifCalisma+0x1088>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f083 0301 	eor.w	r3, r3, #1
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <checkAktifCalisma+0x1090>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800759c:	4b31      	ldr	r3, [pc, #196]	; (8007664 <checkAktifCalisma+0x1080>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d12b      	bne.n	80075fc <checkAktifCalisma+0x1018>
 80075a4:	4b30      	ldr	r3, [pc, #192]	; (8007668 <checkAktifCalisma+0x1084>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d003      	beq.n	80075b4 <checkAktifCalisma+0xfd0>
 80075ac:	4b2e      	ldr	r3, [pc, #184]	; (8007668 <checkAktifCalisma+0x1084>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d123      	bne.n	80075fc <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80075b4:	4b25      	ldr	r3, [pc, #148]	; (800764c <checkAktifCalisma+0x1068>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <checkAktifCalisma+0xfe0>
 80075bc:	4b24      	ldr	r3, [pc, #144]	; (8007650 <checkAktifCalisma+0x106c>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01b      	beq.n	80075fc <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80075c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075c8:	481e      	ldr	r0, [pc, #120]	; (8007644 <checkAktifCalisma+0x1060>)
 80075ca:	f002 fbb1 	bl	8009d30 <HAL_GPIO_ReadPin>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <checkAktifCalisma+0xff8>
 80075d4:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <checkAktifCalisma+0x1070>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80075dc:	4b1f      	ldr	r3, [pc, #124]	; (800765c <checkAktifCalisma+0x1078>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <checkAktifCalisma+0x1008>
 80075e4:	4b1e      	ldr	r3, [pc, #120]	; (8007660 <checkAktifCalisma+0x107c>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80075ec:	4b1f      	ldr	r3, [pc, #124]	; (800766c <checkAktifCalisma+0x1088>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80075f4:	4b23      	ldr	r3, [pc, #140]	; (8007684 <checkAktifCalisma+0x10a0>)
 80075f6:	2201      	movs	r2, #1
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e002      	b.n	8007602 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80075fc:	4b21      	ldr	r3, [pc, #132]	; (8007684 <checkAktifCalisma+0x10a0>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007602:	4b18      	ldr	r3, [pc, #96]	; (8007664 <checkAktifCalisma+0x1080>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d140      	bne.n	800768c <checkAktifCalisma+0x10a8>
 800760a:	4b17      	ldr	r3, [pc, #92]	; (8007668 <checkAktifCalisma+0x1084>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b02      	cmp	r3, #2
 8007610:	d003      	beq.n	800761a <checkAktifCalisma+0x1036>
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <checkAktifCalisma+0x1084>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b03      	cmp	r3, #3
 8007618:	d138      	bne.n	800768c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <checkAktifCalisma+0x1068>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <checkAktifCalisma+0x1046>
 8007622:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <checkAktifCalisma+0x106c>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d030      	beq.n	800768c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <checkAktifCalisma+0x1088>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d02c      	beq.n	800768c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007632:	4b15      	ldr	r3, [pc, #84]	; (8007688 <checkAktifCalisma+0x10a4>)
 8007634:	2201      	movs	r2, #1
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	e02b      	b.n	8007692 <checkAktifCalisma+0x10ae>
 800763a:	bf00      	nop
 800763c:	40010800 	.word	0x40010800
 8007640:	20000c46 	.word	0x20000c46
 8007644:	40011000 	.word	0x40011000
 8007648:	20000c3f 	.word	0x20000c3f
 800764c:	20000c85 	.word	0x20000c85
 8007650:	20000c86 	.word	0x20000c86
 8007654:	20000c45 	.word	0x20000c45
 8007658:	40010c00 	.word	0x40010c00
 800765c:	20000c95 	.word	0x20000c95
 8007660:	20000c96 	.word	0x20000c96
 8007664:	20000c44 	.word	0x20000c44
 8007668:	20000c41 	.word	0x20000c41
 800766c:	20000c7b 	.word	0x20000c7b
 8007670:	20000c68 	.word	0x20000c68
 8007674:	20000c82 	.word	0x20000c82
 8007678:	20000bc4 	.word	0x20000bc4
 800767c:	20000bc8 	.word	0x20000bc8
 8007680:	20000c54 	.word	0x20000c54
 8007684:	20000c83 	.word	0x20000c83
 8007688:	20000c84 	.word	0x20000c84
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 800768c:	4b89      	ldr	r3, [pc, #548]	; (80078b4 <checkAktifCalisma+0x12d0>)
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8007692:	4b89      	ldr	r3, [pc, #548]	; (80078b8 <checkAktifCalisma+0x12d4>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d107      	bne.n	80076aa <checkAktifCalisma+0x10c6>
 800769a:	4b88      	ldr	r3, [pc, #544]	; (80078bc <checkAktifCalisma+0x12d8>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d103      	bne.n	80076aa <checkAktifCalisma+0x10c6>
 80076a2:	4b84      	ldr	r3, [pc, #528]	; (80078b4 <checkAktifCalisma+0x12d0>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80076aa:	2201      	movs	r2, #1
 80076ac:	2120      	movs	r1, #32
 80076ae:	4884      	ldr	r0, [pc, #528]	; (80078c0 <checkAktifCalisma+0x12dc>)
 80076b0:	f002 fb55 	bl	8009d5e <HAL_GPIO_WritePin>
 80076b4:	e004      	b.n	80076c0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80076b6:	2200      	movs	r2, #0
 80076b8:	2120      	movs	r1, #32
 80076ba:	4881      	ldr	r0, [pc, #516]	; (80078c0 <checkAktifCalisma+0x12dc>)
 80076bc:	f002 fb4f 	bl	8009d5e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80076c0:	4b80      	ldr	r3, [pc, #512]	; (80078c4 <checkAktifCalisma+0x12e0>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00e      	beq.n	80076e6 <checkAktifCalisma+0x1102>
 80076c8:	2102      	movs	r1, #2
 80076ca:	487f      	ldr	r0, [pc, #508]	; (80078c8 <checkAktifCalisma+0x12e4>)
 80076cc:	f002 fb30 	bl	8009d30 <HAL_GPIO_ReadPin>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d107      	bne.n	80076e6 <checkAktifCalisma+0x1102>
 80076d6:	4b7d      	ldr	r3, [pc, #500]	; (80078cc <checkAktifCalisma+0x12e8>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <checkAktifCalisma+0x1102>
 80076de:	4b7c      	ldr	r3, [pc, #496]	; (80078d0 <checkAktifCalisma+0x12ec>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d112      	bne.n	800770c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80076e6:	4b7b      	ldr	r3, [pc, #492]	; (80078d4 <checkAktifCalisma+0x12f0>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d066      	beq.n	80077bc <checkAktifCalisma+0x11d8>
 80076ee:	2104      	movs	r1, #4
 80076f0:	4875      	ldr	r0, [pc, #468]	; (80078c8 <checkAktifCalisma+0x12e4>)
 80076f2:	f002 fb1d 	bl	8009d30 <HAL_GPIO_ReadPin>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d15f      	bne.n	80077bc <checkAktifCalisma+0x11d8>
 80076fc:	4b73      	ldr	r3, [pc, #460]	; (80078cc <checkAktifCalisma+0x12e8>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d05b      	beq.n	80077bc <checkAktifCalisma+0x11d8>
 8007704:	4b72      	ldr	r3, [pc, #456]	; (80078d0 <checkAktifCalisma+0x12ec>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d057      	beq.n	80077bc <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800770c:	4b72      	ldr	r3, [pc, #456]	; (80078d8 <checkAktifCalisma+0x12f4>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	b2da      	uxtb	r2, r3
 8007714:	4b70      	ldr	r3, [pc, #448]	; (80078d8 <checkAktifCalisma+0x12f4>)
 8007716:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007718:	4b6f      	ldr	r3, [pc, #444]	; (80078d8 <checkAktifCalisma+0x12f4>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b09      	cmp	r3, #9
 800771e:	d908      	bls.n	8007732 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007720:	4b6d      	ldr	r3, [pc, #436]	; (80078d8 <checkAktifCalisma+0x12f4>)
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007726:	4b6d      	ldr	r3, [pc, #436]	; (80078dc <checkAktifCalisma+0x12f8>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	3301      	adds	r3, #1
 800772c:	b2da      	uxtb	r2, r3
 800772e:	4b6b      	ldr	r3, [pc, #428]	; (80078dc <checkAktifCalisma+0x12f8>)
 8007730:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007732:	4b6a      	ldr	r3, [pc, #424]	; (80078dc <checkAktifCalisma+0x12f8>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2b09      	cmp	r3, #9
 8007738:	d908      	bls.n	800774c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800773a:	4b68      	ldr	r3, [pc, #416]	; (80078dc <checkAktifCalisma+0x12f8>)
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007740:	4b67      	ldr	r3, [pc, #412]	; (80078e0 <checkAktifCalisma+0x12fc>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	b2da      	uxtb	r2, r3
 8007748:	4b65      	ldr	r3, [pc, #404]	; (80078e0 <checkAktifCalisma+0x12fc>)
 800774a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 800774c:	4b64      	ldr	r3, [pc, #400]	; (80078e0 <checkAktifCalisma+0x12fc>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b09      	cmp	r3, #9
 8007752:	d908      	bls.n	8007766 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007754:	4b62      	ldr	r3, [pc, #392]	; (80078e0 <checkAktifCalisma+0x12fc>)
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800775a:	4b62      	ldr	r3, [pc, #392]	; (80078e4 <checkAktifCalisma+0x1300>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	b2da      	uxtb	r2, r3
 8007762:	4b60      	ldr	r3, [pc, #384]	; (80078e4 <checkAktifCalisma+0x1300>)
 8007764:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007766:	4b5f      	ldr	r3, [pc, #380]	; (80078e4 <checkAktifCalisma+0x1300>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b09      	cmp	r3, #9
 800776c:	d908      	bls.n	8007780 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800776e:	4b5d      	ldr	r3, [pc, #372]	; (80078e4 <checkAktifCalisma+0x1300>)
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007774:	4b5c      	ldr	r3, [pc, #368]	; (80078e8 <checkAktifCalisma+0x1304>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	b2da      	uxtb	r2, r3
 800777c:	4b5a      	ldr	r3, [pc, #360]	; (80078e8 <checkAktifCalisma+0x1304>)
 800777e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007780:	4b59      	ldr	r3, [pc, #356]	; (80078e8 <checkAktifCalisma+0x1304>)
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	4b59      	ldr	r3, [pc, #356]	; (80078ec <checkAktifCalisma+0x1308>)
 8007786:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800778a:	4b56      	ldr	r3, [pc, #344]	; (80078e4 <checkAktifCalisma+0x1300>)
 800778c:	781a      	ldrb	r2, [r3, #0]
 800778e:	4b57      	ldr	r3, [pc, #348]	; (80078ec <checkAktifCalisma+0x1308>)
 8007790:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007792:	4b53      	ldr	r3, [pc, #332]	; (80078e0 <checkAktifCalisma+0x12fc>)
 8007794:	781a      	ldrb	r2, [r3, #0]
 8007796:	4b55      	ldr	r3, [pc, #340]	; (80078ec <checkAktifCalisma+0x1308>)
 8007798:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800779a:	4b50      	ldr	r3, [pc, #320]	; (80078dc <checkAktifCalisma+0x12f8>)
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	4b53      	ldr	r3, [pc, #332]	; (80078ec <checkAktifCalisma+0x1308>)
 80077a0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80077a2:	4b4d      	ldr	r3, [pc, #308]	; (80078d8 <checkAktifCalisma+0x12f4>)
 80077a4:	781a      	ldrb	r2, [r3, #0]
 80077a6:	4b51      	ldr	r3, [pc, #324]	; (80078ec <checkAktifCalisma+0x1308>)
 80077a8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80077aa:	4b51      	ldr	r3, [pc, #324]	; (80078f0 <checkAktifCalisma+0x130c>)
 80077ac:	2201      	movs	r2, #1
 80077ae:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80077b0:	4b44      	ldr	r3, [pc, #272]	; (80078c4 <checkAktifCalisma+0x12e0>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80077b6:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <checkAktifCalisma+0x12f0>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80077bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077c0:	484c      	ldr	r0, [pc, #304]	; (80078f4 <checkAktifCalisma+0x1310>)
 80077c2:	f002 fab5 	bl	8009d30 <HAL_GPIO_ReadPin>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d016      	beq.n	80077fa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80077cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80077d0:	4848      	ldr	r0, [pc, #288]	; (80078f4 <checkAktifCalisma+0x1310>)
 80077d2:	f002 faad 	bl	8009d30 <HAL_GPIO_ReadPin>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00e      	beq.n	80077fa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80077dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077e0:	4844      	ldr	r0, [pc, #272]	; (80078f4 <checkAktifCalisma+0x1310>)
 80077e2:	f002 faa5 	bl	8009d30 <HAL_GPIO_ReadPin>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80077ec:	2140      	movs	r1, #64	; 0x40
 80077ee:	4836      	ldr	r0, [pc, #216]	; (80078c8 <checkAktifCalisma+0x12e4>)
 80077f0:	f002 fa9e 	bl	8009d30 <HAL_GPIO_ReadPin>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <checkAktifCalisma+0x121e>
			startBasili=1;
 80077fa:	4b3f      	ldr	r3, [pc, #252]	; (80078f8 <checkAktifCalisma+0x1314>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e002      	b.n	8007808 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007802:	4b3d      	ldr	r3, [pc, #244]	; (80078f8 <checkAktifCalisma+0x1314>)
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007808:	4b3b      	ldr	r3, [pc, #236]	; (80078f8 <checkAktifCalisma+0x1314>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d014      	beq.n	800783a <checkAktifCalisma+0x1256>
 8007810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007814:	4837      	ldr	r0, [pc, #220]	; (80078f4 <checkAktifCalisma+0x1310>)
 8007816:	f002 fa8b 	bl	8009d30 <HAL_GPIO_ReadPin>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d10c      	bne.n	800783a <checkAktifCalisma+0x1256>
			hataVar=1;
 8007820:	4b36      	ldr	r3, [pc, #216]	; (80078fc <checkAktifCalisma+0x1318>)
 8007822:	2201      	movs	r2, #1
 8007824:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007826:	2001      	movs	r0, #1
 8007828:	f7fe f898 	bl	800595c <hataKoduLcdGoster>
			hata2EEPROM(1);
 800782c:	2001      	movs	r0, #1
 800782e:	f7fe fc27 	bl	8006080 <hata2EEPROM>
			acilstophatasi=1;
 8007832:	4b33      	ldr	r3, [pc, #204]	; (8007900 <checkAktifCalisma+0x131c>)
 8007834:	2201      	movs	r2, #1
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	e018      	b.n	800786c <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800783a:	4b31      	ldr	r3, [pc, #196]	; (8007900 <checkAktifCalisma+0x131c>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d014      	beq.n	800786c <checkAktifCalisma+0x1288>
 8007842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007846:	482b      	ldr	r0, [pc, #172]	; (80078f4 <checkAktifCalisma+0x1310>)
 8007848:	f002 fa72 	bl	8009d30 <HAL_GPIO_ReadPin>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10c      	bne.n	800786c <checkAktifCalisma+0x1288>
 8007852:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <checkAktifCalisma+0x1314>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	f083 0301 	eor.w	r3, r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007860:	4b27      	ldr	r3, [pc, #156]	; (8007900 <checkAktifCalisma+0x131c>)
 8007862:	2200      	movs	r2, #0
 8007864:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007866:	2001      	movs	r0, #1
 8007868:	f7fe f824 	bl	80058b4 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800786c:	4b25      	ldr	r3, [pc, #148]	; (8007904 <checkAktifCalisma+0x1320>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f083 0301 	eor.w	r3, r3, #1
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d04c      	beq.n	8007914 <checkAktifCalisma+0x1330>
 800787a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800787e:	481d      	ldr	r0, [pc, #116]	; (80078f4 <checkAktifCalisma+0x1310>)
 8007880:	f002 fa56 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <checkAktifCalisma+0x12ae>
 800788a:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <checkAktifCalisma+0x1324>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d040      	beq.n	8007914 <checkAktifCalisma+0x1330>
 8007892:	4b1e      	ldr	r3, [pc, #120]	; (800790c <checkAktifCalisma+0x1328>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d13c      	bne.n	8007914 <checkAktifCalisma+0x1330>
			hataVar=1;
 800789a:	4b18      	ldr	r3, [pc, #96]	; (80078fc <checkAktifCalisma+0x1318>)
 800789c:	2201      	movs	r2, #1
 800789e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80078a0:	2002      	movs	r0, #2
 80078a2:	f7fe f85b 	bl	800595c <hataKoduLcdGoster>
			hata2EEPROM(2);
 80078a6:	2002      	movs	r0, #2
 80078a8:	f7fe fbea 	bl	8006080 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80078ac:	4b18      	ldr	r3, [pc, #96]	; (8007910 <checkAktifCalisma+0x132c>)
 80078ae:	2201      	movs	r2, #1
 80078b0:	701a      	strb	r2, [r3, #0]
 80078b2:	e047      	b.n	8007944 <checkAktifCalisma+0x1360>
 80078b4:	20000c84 	.word	0x20000c84
 80078b8:	20000c83 	.word	0x20000c83
 80078bc:	20000c82 	.word	0x20000c82
 80078c0:	40010800 	.word	0x40010800
 80078c4:	20000c78 	.word	0x20000c78
 80078c8:	40011000 	.word	0x40011000
 80078cc:	20000c3f 	.word	0x20000c3f
 80078d0:	20000c7b 	.word	0x20000c7b
 80078d4:	20000c79 	.word	0x20000c79
 80078d8:	20000c36 	.word	0x20000c36
 80078dc:	20000c37 	.word	0x20000c37
 80078e0:	200009b1 	.word	0x200009b1
 80078e4:	200009b2 	.word	0x200009b2
 80078e8:	20000c38 	.word	0x20000c38
 80078ec:	20000b28 	.word	0x20000b28
 80078f0:	20000c65 	.word	0x20000c65
 80078f4:	40010c00 	.word	0x40010c00
 80078f8:	20000c87 	.word	0x20000c87
 80078fc:	20000c8e 	.word	0x20000c8e
 8007900:	20000c89 	.word	0x20000c89
 8007904:	20000c90 	.word	0x20000c90
 8007908:	20000c9a 	.word	0x20000c9a
 800790c:	20000c3d 	.word	0x20000c3d
 8007910:	20000c8a 	.word	0x20000c8a
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007914:	4b97      	ldr	r3, [pc, #604]	; (8007b74 <checkAktifCalisma+0x1590>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d013      	beq.n	8007944 <checkAktifCalisma+0x1360>
 800791c:	4b96      	ldr	r3, [pc, #600]	; (8007b78 <checkAktifCalisma+0x1594>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00f      	beq.n	8007944 <checkAktifCalisma+0x1360>
 8007924:	4b95      	ldr	r3, [pc, #596]	; (8007b7c <checkAktifCalisma+0x1598>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f083 0301 	eor.w	r3, r3, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007932:	4b90      	ldr	r3, [pc, #576]	; (8007b74 <checkAktifCalisma+0x1590>)
 8007934:	2200      	movs	r2, #0
 8007936:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007938:	4b91      	ldr	r3, [pc, #580]	; (8007b80 <checkAktifCalisma+0x159c>)
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800793e:	2002      	movs	r0, #2
 8007940:	f7fd ffb8 	bl	80058b4 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007944:	4b8f      	ldr	r3, [pc, #572]	; (8007b84 <checkAktifCalisma+0x15a0>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d11c      	bne.n	8007986 <checkAktifCalisma+0x13a2>
 800794c:	4b8e      	ldr	r3, [pc, #568]	; (8007b88 <checkAktifCalisma+0x15a4>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d118      	bne.n	8007986 <checkAktifCalisma+0x13a2>
 8007954:	4b8d      	ldr	r3, [pc, #564]	; (8007b8c <checkAktifCalisma+0x15a8>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d014      	beq.n	8007986 <checkAktifCalisma+0x13a2>
 800795c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007960:	488b      	ldr	r0, [pc, #556]	; (8007b90 <checkAktifCalisma+0x15ac>)
 8007962:	f002 f9e5 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007966:	4603      	mov	r3, r0
 8007968:	2b01      	cmp	r3, #1
 800796a:	d10c      	bne.n	8007986 <checkAktifCalisma+0x13a2>
			hataVar=1;
 800796c:	4b89      	ldr	r3, [pc, #548]	; (8007b94 <checkAktifCalisma+0x15b0>)
 800796e:	2201      	movs	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007972:	2003      	movs	r0, #3
 8007974:	f7fd fff2 	bl	800595c <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007978:	2003      	movs	r0, #3
 800797a:	f7fe fb81 	bl	8006080 <hata2EEPROM>
			basinchatasi=1;
 800797e:	4b86      	ldr	r3, [pc, #536]	; (8007b98 <checkAktifCalisma+0x15b4>)
 8007980:	2201      	movs	r2, #1
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	e015      	b.n	80079b2 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007986:	4b84      	ldr	r3, [pc, #528]	; (8007b98 <checkAktifCalisma+0x15b4>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d011      	beq.n	80079b2 <checkAktifCalisma+0x13ce>
 800798e:	4b7d      	ldr	r3, [pc, #500]	; (8007b84 <checkAktifCalisma+0x15a0>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d10d      	bne.n	80079b2 <checkAktifCalisma+0x13ce>
 8007996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800799a:	4880      	ldr	r0, [pc, #512]	; (8007b9c <checkAktifCalisma+0x15b8>)
 800799c:	f002 f9c8 	bl	8009d30 <HAL_GPIO_ReadPin>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d105      	bne.n	80079b2 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80079a6:	4b7c      	ldr	r3, [pc, #496]	; (8007b98 <checkAktifCalisma+0x15b4>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80079ac:	2003      	movs	r0, #3
 80079ae:	f7fd ff81 	bl	80058b4 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80079b2:	4b7b      	ldr	r3, [pc, #492]	; (8007ba0 <checkAktifCalisma+0x15bc>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d103      	bne.n	80079c2 <checkAktifCalisma+0x13de>
 80079ba:	4b7a      	ldr	r3, [pc, #488]	; (8007ba4 <checkAktifCalisma+0x15c0>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01c      	beq.n	80079fc <checkAktifCalisma+0x1418>
 80079c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079c6:	4878      	ldr	r0, [pc, #480]	; (8007ba8 <checkAktifCalisma+0x15c4>)
 80079c8:	f002 f9b2 	bl	8009d30 <HAL_GPIO_ReadPin>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d114      	bne.n	80079fc <checkAktifCalisma+0x1418>
 80079d2:	4b76      	ldr	r3, [pc, #472]	; (8007bac <checkAktifCalisma+0x15c8>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d003      	beq.n	80079e2 <checkAktifCalisma+0x13fe>
 80079da:	4b74      	ldr	r3, [pc, #464]	; (8007bac <checkAktifCalisma+0x15c8>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d10c      	bne.n	80079fc <checkAktifCalisma+0x1418>
			hataVar=1;
 80079e2:	4b6c      	ldr	r3, [pc, #432]	; (8007b94 <checkAktifCalisma+0x15b0>)
 80079e4:	2201      	movs	r2, #1
 80079e6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80079e8:	2004      	movs	r0, #4
 80079ea:	f7fd ffb7 	bl	800595c <hataKoduLcdGoster>
			hata2EEPROM(4);
 80079ee:	2004      	movs	r0, #4
 80079f0:	f7fe fb46 	bl	8006080 <hata2EEPROM>
			katkapisivicihatasi=1;
 80079f4:	4b6e      	ldr	r3, [pc, #440]	; (8007bb0 <checkAktifCalisma+0x15cc>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e01f      	b.n	8007a3c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80079fc:	4b6c      	ldr	r3, [pc, #432]	; (8007bb0 <checkAktifCalisma+0x15cc>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01b      	beq.n	8007a3c <checkAktifCalisma+0x1458>
 8007a04:	4b6b      	ldr	r3, [pc, #428]	; (8007bb4 <checkAktifCalisma+0x15d0>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d017      	beq.n	8007a3c <checkAktifCalisma+0x1458>
 8007a0c:	4b64      	ldr	r3, [pc, #400]	; (8007ba0 <checkAktifCalisma+0x15bc>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	f083 0301 	eor.w	r3, r3, #1
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d010      	beq.n	8007a3c <checkAktifCalisma+0x1458>
 8007a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a1e:	4862      	ldr	r0, [pc, #392]	; (8007ba8 <checkAktifCalisma+0x15c4>)
 8007a20:	f002 f986 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d108      	bne.n	8007a3c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8007a2a:	4b61      	ldr	r3, [pc, #388]	; (8007bb0 <checkAktifCalisma+0x15cc>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007a30:	4b5c      	ldr	r3, [pc, #368]	; (8007ba4 <checkAktifCalisma+0x15c0>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007a36:	2004      	movs	r0, #4
 8007a38:	f7fd ff3c 	bl	80058b4 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007a3c:	4b58      	ldr	r3, [pc, #352]	; (8007ba0 <checkAktifCalisma+0x15bc>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <checkAktifCalisma+0x1468>
 8007a44:	4b5c      	ldr	r3, [pc, #368]	; (8007bb8 <checkAktifCalisma+0x15d4>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01c      	beq.n	8007a86 <checkAktifCalisma+0x14a2>
 8007a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a50:	4855      	ldr	r0, [pc, #340]	; (8007ba8 <checkAktifCalisma+0x15c4>)
 8007a52:	f002 f96d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d114      	bne.n	8007a86 <checkAktifCalisma+0x14a2>
 8007a5c:	4b53      	ldr	r3, [pc, #332]	; (8007bac <checkAktifCalisma+0x15c8>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d003      	beq.n	8007a6c <checkAktifCalisma+0x1488>
 8007a64:	4b51      	ldr	r3, [pc, #324]	; (8007bac <checkAktifCalisma+0x15c8>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d10c      	bne.n	8007a86 <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007a6c:	4b49      	ldr	r3, [pc, #292]	; (8007b94 <checkAktifCalisma+0x15b0>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007a72:	2005      	movs	r0, #5
 8007a74:	f7fd ff72 	bl	800595c <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007a78:	2005      	movs	r0, #5
 8007a7a:	f7fe fb01 	bl	8006080 <hata2EEPROM>
			tablakapisivicihatasi=1;
 8007a7e:	4b4f      	ldr	r3, [pc, #316]	; (8007bbc <checkAktifCalisma+0x15d8>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e023      	b.n	8007ace <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007a86:	4b4d      	ldr	r3, [pc, #308]	; (8007bbc <checkAktifCalisma+0x15d8>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01f      	beq.n	8007ace <checkAktifCalisma+0x14ea>
 8007a8e:	4b49      	ldr	r3, [pc, #292]	; (8007bb4 <checkAktifCalisma+0x15d0>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01b      	beq.n	8007ace <checkAktifCalisma+0x14ea>
 8007a96:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <checkAktifCalisma+0x15bc>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	f083 0301 	eor.w	r3, r3, #1
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d014      	beq.n	8007ace <checkAktifCalisma+0x14ea>
 8007aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aa8:	483f      	ldr	r0, [pc, #252]	; (8007ba8 <checkAktifCalisma+0x15c4>)
 8007aaa:	f002 f941 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10c      	bne.n	8007ace <checkAktifCalisma+0x14ea>
 8007ab4:	4b3f      	ldr	r3, [pc, #252]	; (8007bb4 <checkAktifCalisma+0x15d0>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007abc:	4b3f      	ldr	r3, [pc, #252]	; (8007bbc <checkAktifCalisma+0x15d8>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007ac2:	4b3d      	ldr	r3, [pc, #244]	; (8007bb8 <checkAktifCalisma+0x15d4>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007ac8:	2005      	movs	r0, #5
 8007aca:	f7fd fef3 	bl	80058b4 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007ace:	4b2f      	ldr	r3, [pc, #188]	; (8007b8c <checkAktifCalisma+0x15a8>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d107      	bne.n	8007ae6 <checkAktifCalisma+0x1502>
 8007ad6:	4b29      	ldr	r3, [pc, #164]	; (8007b7c <checkAktifCalisma+0x1598>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <checkAktifCalisma+0x1502>
 8007ade:	4b38      	ldr	r3, [pc, #224]	; (8007bc0 <checkAktifCalisma+0x15dc>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d014      	beq.n	8007b10 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007ae6:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <checkAktifCalisma+0x15e0>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b37      	ldr	r3, [pc, #220]	; (8007bc8 <checkAktifCalisma+0x15e4>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	4a36      	ldr	r2, [pc, #216]	; (8007bcc <checkAktifCalisma+0x15e8>)
 8007af2:	7812      	ldrb	r2, [r2, #0]
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d30b      	bcc.n	8007b10 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007af8:	4b26      	ldr	r3, [pc, #152]	; (8007b94 <checkAktifCalisma+0x15b0>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007afe:	2006      	movs	r0, #6
 8007b00:	f7fd ff2c 	bl	800595c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007b04:	2006      	movs	r0, #6
 8007b06:	f7fe fabb 	bl	8006080 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007b0a:	4b31      	ldr	r3, [pc, #196]	; (8007bd0 <checkAktifCalisma+0x15ec>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007b10:	4b2f      	ldr	r3, [pc, #188]	; (8007bd0 <checkAktifCalisma+0x15ec>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d013      	beq.n	8007b40 <checkAktifCalisma+0x155c>
 8007b18:	2108      	movs	r1, #8
 8007b1a:	4823      	ldr	r0, [pc, #140]	; (8007ba8 <checkAktifCalisma+0x15c4>)
 8007b1c:	f002 f908 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00c      	beq.n	8007b40 <checkAktifCalisma+0x155c>
 8007b26:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <checkAktifCalisma+0x15bc>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	f083 0301 	eor.w	r3, r3, #1
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007b34:	4b26      	ldr	r3, [pc, #152]	; (8007bd0 <checkAktifCalisma+0x15ec>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007b3a:	2006      	movs	r0, #6
 8007b3c:	f7fd feba 	bl	80058b4 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007b40:	4b24      	ldr	r3, [pc, #144]	; (8007bd4 <checkAktifCalisma+0x15f0>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10b      	bne.n	8007b60 <checkAktifCalisma+0x157c>
 8007b48:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <checkAktifCalisma+0x1598>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d107      	bne.n	8007b60 <checkAktifCalisma+0x157c>
 8007b50:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <checkAktifCalisma+0x15f4>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d103      	bne.n	8007b60 <checkAktifCalisma+0x157c>
 8007b58:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <checkAktifCalisma+0x15dc>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d03f      	beq.n	8007be0 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007b60:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <checkAktifCalisma+0x15f8>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007b66:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <checkAktifCalisma+0x15c0>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007b6c:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <checkAktifCalisma+0x15d4>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e03c      	b.n	8007bee <checkAktifCalisma+0x160a>
 8007b74:	20000c8a 	.word	0x20000c8a
 8007b78:	20000c90 	.word	0x20000c90
 8007b7c:	20000c71 	.word	0x20000c71
 8007b80:	20000c9a 	.word	0x20000c9a
 8007b84:	20000c3c 	.word	0x20000c3c
 8007b88:	20000c40 	.word	0x20000c40
 8007b8c:	20000c8d 	.word	0x20000c8d
 8007b90:	40011000 	.word	0x40011000
 8007b94:	20000c8e 	.word	0x20000c8e
 8007b98:	20000c97 	.word	0x20000c97
 8007b9c:	40010c00 	.word	0x40010c00
 8007ba0:	20000c87 	.word	0x20000c87
 8007ba4:	20000c9b 	.word	0x20000c9b
 8007ba8:	40010800 	.word	0x40010800
 8007bac:	20000c41 	.word	0x20000c41
 8007bb0:	20000c98 	.word	0x20000c98
 8007bb4:	20000c7b 	.word	0x20000c7b
 8007bb8:	20000c9c 	.word	0x20000c9c
 8007bbc:	20000c99 	.word	0x20000c99
 8007bc0:	20000c70 	.word	0x20000c70
 8007bc4:	20000bc4 	.word	0x20000bc4
 8007bc8:	20000bd8 	.word	0x20000bd8
 8007bcc:	20000c51 	.word	0x20000c51
 8007bd0:	20000c88 	.word	0x20000c88
 8007bd4:	20000c6e 	.word	0x20000c6e
 8007bd8:	20000c6f 	.word	0x20000c6f
 8007bdc:	20000c8f 	.word	0x20000c8f
		} else {
			makineCalisiyor=1;
 8007be0:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <checkAktifCalisma+0x1678>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007be6:	4b1e      	ldr	r3, [pc, #120]	; (8007c60 <checkAktifCalisma+0x167c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <checkAktifCalisma+0x1680>)
 8007bec:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007bee:	4b1e      	ldr	r3, [pc, #120]	; (8007c68 <checkAktifCalisma+0x1684>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d02f      	beq.n	8007c56 <checkAktifCalisma+0x1672>
 8007bf6:	4b1d      	ldr	r3, [pc, #116]	; (8007c6c <checkAktifCalisma+0x1688>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	f083 0301 	eor.w	r3, r3, #1
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d028      	beq.n	8007c56 <checkAktifCalisma+0x1672>
 8007c04:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <checkAktifCalisma+0x168c>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f083 0301 	eor.w	r3, r3, #1
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d021      	beq.n	8007c56 <checkAktifCalisma+0x1672>
 8007c12:	4b18      	ldr	r3, [pc, #96]	; (8007c74 <checkAktifCalisma+0x1690>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	f083 0301 	eor.w	r3, r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01a      	beq.n	8007c56 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007c20:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <checkAktifCalisma+0x1694>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f083 0301 	eor.w	r3, r3, #1
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d013      	beq.n	8007c56 <checkAktifCalisma+0x1672>
 8007c2e:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <checkAktifCalisma+0x1698>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f083 0301 	eor.w	r3, r3, #1
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00c      	beq.n	8007c56 <checkAktifCalisma+0x1672>
 8007c3c:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <checkAktifCalisma+0x169c>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f083 0301 	eor.w	r3, r3, #1
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007c4a:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <checkAktifCalisma+0x1684>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007c50:	2007      	movs	r0, #7
 8007c52:	f7fd fe2f 	bl	80058b4 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007c56:	bf00      	nop
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000c8f 	.word	0x20000c8f
 8007c60:	20000bc4 	.word	0x20000bc4
 8007c64:	20000bd8 	.word	0x20000bd8
 8007c68:	20000c8e 	.word	0x20000c8e
 8007c6c:	20000c89 	.word	0x20000c89
 8007c70:	20000c8a 	.word	0x20000c8a
 8007c74:	20000c97 	.word	0x20000c97
 8007c78:	20000c98 	.word	0x20000c98
 8007c7c:	20000c99 	.word	0x20000c99
 8007c80:	20000c88 	.word	0x20000c88

08007c84 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007c88:	4b8b      	ldr	r3, [pc, #556]	; (8007eb8 <checkDemoModCalisma+0x234>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	f040 8229 	bne.w	80080e4 <checkDemoModCalisma+0x460>
 8007c92:	4b8a      	ldr	r3, [pc, #552]	; (8007ebc <checkDemoModCalisma+0x238>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 8224 	beq.w	80080e4 <checkDemoModCalisma+0x460>
 8007c9c:	4b88      	ldr	r3, [pc, #544]	; (8007ec0 <checkDemoModCalisma+0x23c>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f040 821f 	bne.w	80080e4 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	4886      	ldr	r0, [pc, #536]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007caa:	f002 f841 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d11d      	bne.n	8007cf0 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007cb4:	4b84      	ldr	r3, [pc, #528]	; (8007ec8 <checkDemoModCalisma+0x244>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	f083 0301 	eor.w	r3, r3, #1
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d016      	beq.n	8007cf0 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007cc2:	4b82      	ldr	r3, [pc, #520]	; (8007ecc <checkDemoModCalisma+0x248>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	f083 0301 	eor.w	r3, r3, #1
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00f      	beq.n	8007cf0 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007cd0:	4b7f      	ldr	r3, [pc, #508]	; (8007ed0 <checkDemoModCalisma+0x24c>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	f083 0301 	eor.w	r3, r3, #1
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d008      	beq.n	8007cf0 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007cde:	2201      	movs	r2, #1
 8007ce0:	2104      	movs	r1, #4
 8007ce2:	487c      	ldr	r0, [pc, #496]	; (8007ed4 <checkDemoModCalisma+0x250>)
 8007ce4:	f002 f83b 	bl	8009d5e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007ce8:	4b7b      	ldr	r3, [pc, #492]	; (8007ed8 <checkDemoModCalisma+0x254>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e00e      	b.n	8007d0e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	4874      	ldr	r0, [pc, #464]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007cf4:	f002 f81c 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d107      	bne.n	8007d0e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2104      	movs	r1, #4
 8007d02:	4874      	ldr	r0, [pc, #464]	; (8007ed4 <checkDemoModCalisma+0x250>)
 8007d04:	f002 f82b 	bl	8009d5e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007d08:	4b73      	ldr	r3, [pc, #460]	; (8007ed8 <checkDemoModCalisma+0x254>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007d0e:	4b72      	ldr	r3, [pc, #456]	; (8007ed8 <checkDemoModCalisma+0x254>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <checkDemoModCalisma+0xaa>
 8007d16:	4b6d      	ldr	r3, [pc, #436]	; (8007ecc <checkDemoModCalisma+0x248>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d107      	bne.n	8007d2e <checkDemoModCalisma+0xaa>
 8007d1e:	4b6c      	ldr	r3, [pc, #432]	; (8007ed0 <checkDemoModCalisma+0x24c>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <checkDemoModCalisma+0xaa>
 8007d26:	4b68      	ldr	r3, [pc, #416]	; (8007ec8 <checkDemoModCalisma+0x244>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d34:	4867      	ldr	r0, [pc, #412]	; (8007ed4 <checkDemoModCalisma+0x250>)
 8007d36:	f002 f812 	bl	8009d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d40:	4864      	ldr	r0, [pc, #400]	; (8007ed4 <checkDemoModCalisma+0x250>)
 8007d42:	f002 f80c 	bl	8009d5e <HAL_GPIO_WritePin>
 8007d46:	e00b      	b.n	8007d60 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d4e:	4861      	ldr	r0, [pc, #388]	; (8007ed4 <checkDemoModCalisma+0x250>)
 8007d50:	f002 f805 	bl	8009d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007d54:	2200      	movs	r2, #0
 8007d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d5a:	485e      	ldr	r0, [pc, #376]	; (8007ed4 <checkDemoModCalisma+0x250>)
 8007d5c:	f001 ffff 	bl	8009d5e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007d60:	2102      	movs	r1, #2
 8007d62:	4858      	ldr	r0, [pc, #352]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007d64:	f001 ffe4 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d10d      	bne.n	8007d8a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d72:	4854      	ldr	r0, [pc, #336]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007d74:	f001 ffdc 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d105      	bne.n	8007d8a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007d7e:	4b56      	ldr	r3, [pc, #344]	; (8007ed8 <checkDemoModCalisma+0x254>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	f083 0301 	eor.w	r3, r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007d8a:	2102      	movs	r1, #2
 8007d8c:	484d      	ldr	r0, [pc, #308]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007d8e:	f001 ffcf 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d125      	bne.n	8007de4 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d9c:	4849      	ldr	r0, [pc, #292]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007d9e:	f001 ffc7 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11d      	bne.n	8007de4 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007da8:	4b4b      	ldr	r3, [pc, #300]	; (8007ed8 <checkDemoModCalisma+0x254>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	f083 0301 	eor.w	r3, r3, #1
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d016      	beq.n	8007de4 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007db6:	4b44      	ldr	r3, [pc, #272]	; (8007ec8 <checkDemoModCalisma+0x244>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f083 0301 	eor.w	r3, r3, #1
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00f      	beq.n	8007de4 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007dc4:	4b42      	ldr	r3, [pc, #264]	; (8007ed0 <checkDemoModCalisma+0x24c>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f083 0301 	eor.w	r3, r3, #1
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d008      	beq.n	8007de4 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	2120      	movs	r1, #32
 8007dd6:	483b      	ldr	r0, [pc, #236]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007dd8:	f001 ffc1 	bl	8009d5e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007ddc:	4b3b      	ldr	r3, [pc, #236]	; (8007ecc <checkDemoModCalisma+0x248>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e007      	b.n	8007df4 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007de4:	2200      	movs	r2, #0
 8007de6:	2120      	movs	r1, #32
 8007de8:	4836      	ldr	r0, [pc, #216]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007dea:	f001 ffb8 	bl	8009d5e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007dee:	4b37      	ldr	r3, [pc, #220]	; (8007ecc <checkDemoModCalisma+0x248>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007df4:	2102      	movs	r1, #2
 8007df6:	4833      	ldr	r0, [pc, #204]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007df8:	f001 ff9a 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d125      	bne.n	8007e4e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e06:	482f      	ldr	r0, [pc, #188]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007e08:	f001 ff92 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d11d      	bne.n	8007e4e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007e12:	4b31      	ldr	r3, [pc, #196]	; (8007ed8 <checkDemoModCalisma+0x254>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f083 0301 	eor.w	r3, r3, #1
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d016      	beq.n	8007e4e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007e20:	4b2a      	ldr	r3, [pc, #168]	; (8007ecc <checkDemoModCalisma+0x248>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f083 0301 	eor.w	r3, r3, #1
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00f      	beq.n	8007e4e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007e2e:	4b26      	ldr	r3, [pc, #152]	; (8007ec8 <checkDemoModCalisma+0x244>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	f083 0301 	eor.w	r3, r3, #1
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	2110      	movs	r1, #16
 8007e40:	4820      	ldr	r0, [pc, #128]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007e42:	f001 ff8c 	bl	8009d5e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007e46:	4b22      	ldr	r3, [pc, #136]	; (8007ed0 <checkDemoModCalisma+0x24c>)
 8007e48:	2201      	movs	r2, #1
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	e007      	b.n	8007e5e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2110      	movs	r1, #16
 8007e52:	481c      	ldr	r0, [pc, #112]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007e54:	f001 ff83 	bl	8009d5e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <checkDemoModCalisma+0x24c>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007e5e:	2104      	movs	r1, #4
 8007e60:	4818      	ldr	r0, [pc, #96]	; (8007ec4 <checkDemoModCalisma+0x240>)
 8007e62:	f001 ff65 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d139      	bne.n	8007ee0 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ed8 <checkDemoModCalisma+0x254>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f083 0301 	eor.w	r3, r3, #1
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d032      	beq.n	8007ee0 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007e7a:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <checkDemoModCalisma+0x24c>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	f083 0301 	eor.w	r3, r3, #1
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d02b      	beq.n	8007ee0 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007e88:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <checkDemoModCalisma+0x248>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f083 0301 	eor.w	r3, r3, #1
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d024      	beq.n	8007ee0 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007e96:	2201      	movs	r2, #1
 8007e98:	2102      	movs	r1, #2
 8007e9a:	480e      	ldr	r0, [pc, #56]	; (8007ed4 <checkDemoModCalisma+0x250>)
 8007e9c:	f001 ff5f 	bl	8009d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	480b      	ldr	r0, [pc, #44]	; (8007ed4 <checkDemoModCalisma+0x250>)
 8007ea6:	f001 ff5a 	bl	8009d5e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007eaa:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <checkDemoModCalisma+0x244>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <checkDemoModCalisma+0x258>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	e027      	b.n	8007f08 <checkDemoModCalisma+0x284>
 8007eb8:	20000c57 	.word	0x20000c57
 8007ebc:	20000c8b 	.word	0x20000c8b
 8007ec0:	20000c56 	.word	0x20000c56
 8007ec4:	40011000 	.word	0x40011000
 8007ec8:	20000c92 	.word	0x20000c92
 8007ecc:	20000c93 	.word	0x20000c93
 8007ed0:	20000c94 	.word	0x20000c94
 8007ed4:	40010c00 	.word	0x40010c00
 8007ed8:	20000c91 	.word	0x20000c91
 8007edc:	20000c77 	.word	0x20000c77
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007ee0:	2104      	movs	r1, #4
 8007ee2:	48a0      	ldr	r0, [pc, #640]	; (8008164 <checkDemoModCalisma+0x4e0>)
 8007ee4:	f001 ff24 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d10c      	bne.n	8007f08 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2102      	movs	r1, #2
 8007ef2:	489d      	ldr	r0, [pc, #628]	; (8008168 <checkDemoModCalisma+0x4e4>)
 8007ef4:	f001 ff33 	bl	8009d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2101      	movs	r1, #1
 8007efc:	489a      	ldr	r0, [pc, #616]	; (8008168 <checkDemoModCalisma+0x4e4>)
 8007efe:	f001 ff2e 	bl	8009d5e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007f02:	4b9a      	ldr	r3, [pc, #616]	; (800816c <checkDemoModCalisma+0x4e8>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007f08:	2104      	movs	r1, #4
 8007f0a:	4896      	ldr	r0, [pc, #600]	; (8008164 <checkDemoModCalisma+0x4e0>)
 8007f0c:	f001 ff10 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d10d      	bne.n	8007f32 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007f16:	2201      	movs	r2, #1
 8007f18:	2180      	movs	r1, #128	; 0x80
 8007f1a:	4895      	ldr	r0, [pc, #596]	; (8008170 <checkDemoModCalisma+0x4ec>)
 8007f1c:	f001 ff1f 	bl	8009d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007f20:	2201      	movs	r2, #1
 8007f22:	2120      	movs	r1, #32
 8007f24:	4892      	ldr	r0, [pc, #584]	; (8008170 <checkDemoModCalisma+0x4ec>)
 8007f26:	f001 ff1a 	bl	8009d5e <HAL_GPIO_WritePin>
			timer3 = millis;
 8007f2a:	4b92      	ldr	r3, [pc, #584]	; (8008174 <checkDemoModCalisma+0x4f0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a92      	ldr	r2, [pc, #584]	; (8008178 <checkDemoModCalisma+0x4f4>)
 8007f30:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007f32:	4b90      	ldr	r3, [pc, #576]	; (8008174 <checkDemoModCalisma+0x4f0>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b90      	ldr	r3, [pc, #576]	; (8008178 <checkDemoModCalisma+0x4f4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d909      	bls.n	8007f54 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f40:	2200      	movs	r2, #0
 8007f42:	2180      	movs	r1, #128	; 0x80
 8007f44:	488a      	ldr	r0, [pc, #552]	; (8008170 <checkDemoModCalisma+0x4ec>)
 8007f46:	f001 ff0a 	bl	8009d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2120      	movs	r1, #32
 8007f4e:	4888      	ldr	r0, [pc, #544]	; (8008170 <checkDemoModCalisma+0x4ec>)
 8007f50:	f001 ff05 	bl	8009d5e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007f54:	2102      	movs	r1, #2
 8007f56:	4883      	ldr	r0, [pc, #524]	; (8008164 <checkDemoModCalisma+0x4e0>)
 8007f58:	f001 feea 	bl	8009d30 <HAL_GPIO_ReadPin>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d108      	bne.n	8007f74 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007f62:	2201      	movs	r2, #1
 8007f64:	2140      	movs	r1, #64	; 0x40
 8007f66:	4882      	ldr	r0, [pc, #520]	; (8008170 <checkDemoModCalisma+0x4ec>)
 8007f68:	f001 fef9 	bl	8009d5e <HAL_GPIO_WritePin>
			timer3 = millis;
 8007f6c:	4b81      	ldr	r3, [pc, #516]	; (8008174 <checkDemoModCalisma+0x4f0>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a81      	ldr	r2, [pc, #516]	; (8008178 <checkDemoModCalisma+0x4f4>)
 8007f72:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007f74:	4b7f      	ldr	r3, [pc, #508]	; (8008174 <checkDemoModCalisma+0x4f0>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	4b7f      	ldr	r3, [pc, #508]	; (8008178 <checkDemoModCalisma+0x4f4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d904      	bls.n	8007f8c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f82:	2200      	movs	r2, #0
 8007f84:	2140      	movs	r1, #64	; 0x40
 8007f86:	487a      	ldr	r0, [pc, #488]	; (8008170 <checkDemoModCalisma+0x4ec>)
 8007f88:	f001 fee9 	bl	8009d5e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007f8c:	4b7b      	ldr	r3, [pc, #492]	; (800817c <checkDemoModCalisma+0x4f8>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d058      	beq.n	8008046 <checkDemoModCalisma+0x3c2>
 8007f94:	4b7a      	ldr	r3, [pc, #488]	; (8008180 <checkDemoModCalisma+0x4fc>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d054      	beq.n	8008046 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007f9c:	4b79      	ldr	r3, [pc, #484]	; (8008184 <checkDemoModCalisma+0x500>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	4b77      	ldr	r3, [pc, #476]	; (8008184 <checkDemoModCalisma+0x500>)
 8007fa6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007fa8:	4b76      	ldr	r3, [pc, #472]	; (8008184 <checkDemoModCalisma+0x500>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b09      	cmp	r3, #9
 8007fae:	d908      	bls.n	8007fc2 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007fb0:	4b74      	ldr	r3, [pc, #464]	; (8008184 <checkDemoModCalisma+0x500>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007fb6:	4b74      	ldr	r3, [pc, #464]	; (8008188 <checkDemoModCalisma+0x504>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	4b72      	ldr	r3, [pc, #456]	; (8008188 <checkDemoModCalisma+0x504>)
 8007fc0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007fc2:	4b71      	ldr	r3, [pc, #452]	; (8008188 <checkDemoModCalisma+0x504>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	d908      	bls.n	8007fdc <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007fca:	4b6f      	ldr	r3, [pc, #444]	; (8008188 <checkDemoModCalisma+0x504>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007fd0:	4b6e      	ldr	r3, [pc, #440]	; (800818c <checkDemoModCalisma+0x508>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	4b6c      	ldr	r3, [pc, #432]	; (800818c <checkDemoModCalisma+0x508>)
 8007fda:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007fdc:	4b6b      	ldr	r3, [pc, #428]	; (800818c <checkDemoModCalisma+0x508>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b09      	cmp	r3, #9
 8007fe2:	d908      	bls.n	8007ff6 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007fe4:	4b69      	ldr	r3, [pc, #420]	; (800818c <checkDemoModCalisma+0x508>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007fea:	4b69      	ldr	r3, [pc, #420]	; (8008190 <checkDemoModCalisma+0x50c>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	4b67      	ldr	r3, [pc, #412]	; (8008190 <checkDemoModCalisma+0x50c>)
 8007ff4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007ff6:	4b66      	ldr	r3, [pc, #408]	; (8008190 <checkDemoModCalisma+0x50c>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	d908      	bls.n	8008010 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007ffe:	4b64      	ldr	r3, [pc, #400]	; (8008190 <checkDemoModCalisma+0x50c>)
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8008004:	4b63      	ldr	r3, [pc, #396]	; (8008194 <checkDemoModCalisma+0x510>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	3301      	adds	r3, #1
 800800a:	b2da      	uxtb	r2, r3
 800800c:	4b61      	ldr	r3, [pc, #388]	; (8008194 <checkDemoModCalisma+0x510>)
 800800e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8008010:	4b60      	ldr	r3, [pc, #384]	; (8008194 <checkDemoModCalisma+0x510>)
 8008012:	781a      	ldrb	r2, [r3, #0]
 8008014:	4b60      	ldr	r3, [pc, #384]	; (8008198 <checkDemoModCalisma+0x514>)
 8008016:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800801a:	4b5d      	ldr	r3, [pc, #372]	; (8008190 <checkDemoModCalisma+0x50c>)
 800801c:	781a      	ldrb	r2, [r3, #0]
 800801e:	4b5e      	ldr	r3, [pc, #376]	; (8008198 <checkDemoModCalisma+0x514>)
 8008020:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8008022:	4b5a      	ldr	r3, [pc, #360]	; (800818c <checkDemoModCalisma+0x508>)
 8008024:	781a      	ldrb	r2, [r3, #0]
 8008026:	4b5c      	ldr	r3, [pc, #368]	; (8008198 <checkDemoModCalisma+0x514>)
 8008028:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800802a:	4b57      	ldr	r3, [pc, #348]	; (8008188 <checkDemoModCalisma+0x504>)
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	4b5a      	ldr	r3, [pc, #360]	; (8008198 <checkDemoModCalisma+0x514>)
 8008030:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8008032:	4b54      	ldr	r3, [pc, #336]	; (8008184 <checkDemoModCalisma+0x500>)
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	4b58      	ldr	r3, [pc, #352]	; (8008198 <checkDemoModCalisma+0x514>)
 8008038:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800803a:	4b58      	ldr	r3, [pc, #352]	; (800819c <checkDemoModCalisma+0x518>)
 800803c:	2201      	movs	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8008040:	4b4f      	ldr	r3, [pc, #316]	; (8008180 <checkDemoModCalisma+0x4fc>)
 8008042:	2200      	movs	r2, #0
 8008044:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8008046:	4b56      	ldr	r3, [pc, #344]	; (80081a0 <checkDemoModCalisma+0x51c>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f040 8087 	bne.w	800815e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8008050:	4a54      	ldr	r2, [pc, #336]	; (80081a4 <checkDemoModCalisma+0x520>)
 8008052:	2101      	movs	r1, #1
 8008054:	2002      	movs	r0, #2
 8008056:	f7f8 fbaf 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800805a:	4a53      	ldr	r2, [pc, #332]	; (80081a8 <checkDemoModCalisma+0x524>)
 800805c:	2101      	movs	r1, #1
 800805e:	2001      	movs	r0, #1
 8008060:	f7f8 fbaa 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8008064:	4b4b      	ldr	r3, [pc, #300]	; (8008194 <checkDemoModCalisma+0x510>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	220a      	movs	r2, #10
 800806a:	4950      	ldr	r1, [pc, #320]	; (80081ac <checkDemoModCalisma+0x528>)
 800806c:	4618      	mov	r0, r3
 800806e:	f004 fe8b 	bl	800cd88 <itoa>
			lcd_print(2,12,snum);
 8008072:	4a4e      	ldr	r2, [pc, #312]	; (80081ac <checkDemoModCalisma+0x528>)
 8008074:	210c      	movs	r1, #12
 8008076:	2002      	movs	r0, #2
 8008078:	f7f8 fb9e 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 800807c:	4b44      	ldr	r3, [pc, #272]	; (8008190 <checkDemoModCalisma+0x50c>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	220a      	movs	r2, #10
 8008082:	494a      	ldr	r1, [pc, #296]	; (80081ac <checkDemoModCalisma+0x528>)
 8008084:	4618      	mov	r0, r3
 8008086:	f004 fe7f 	bl	800cd88 <itoa>
			lcd_print(2,13,snum);
 800808a:	4a48      	ldr	r2, [pc, #288]	; (80081ac <checkDemoModCalisma+0x528>)
 800808c:	210d      	movs	r1, #13
 800808e:	2002      	movs	r0, #2
 8008090:	f7f8 fb92 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8008094:	4b3d      	ldr	r3, [pc, #244]	; (800818c <checkDemoModCalisma+0x508>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	220a      	movs	r2, #10
 800809a:	4944      	ldr	r1, [pc, #272]	; (80081ac <checkDemoModCalisma+0x528>)
 800809c:	4618      	mov	r0, r3
 800809e:	f004 fe73 	bl	800cd88 <itoa>
			lcd_print(2,14,snum);
 80080a2:	4a42      	ldr	r2, [pc, #264]	; (80081ac <checkDemoModCalisma+0x528>)
 80080a4:	210e      	movs	r1, #14
 80080a6:	2002      	movs	r0, #2
 80080a8:	f7f8 fb86 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80080ac:	4b36      	ldr	r3, [pc, #216]	; (8008188 <checkDemoModCalisma+0x504>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	220a      	movs	r2, #10
 80080b2:	493e      	ldr	r1, [pc, #248]	; (80081ac <checkDemoModCalisma+0x528>)
 80080b4:	4618      	mov	r0, r3
 80080b6:	f004 fe67 	bl	800cd88 <itoa>
			lcd_print(2,15,snum);
 80080ba:	4a3c      	ldr	r2, [pc, #240]	; (80081ac <checkDemoModCalisma+0x528>)
 80080bc:	210f      	movs	r1, #15
 80080be:	2002      	movs	r0, #2
 80080c0:	f7f8 fb7a 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80080c4:	4b2f      	ldr	r3, [pc, #188]	; (8008184 <checkDemoModCalisma+0x500>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	220a      	movs	r2, #10
 80080ca:	4938      	ldr	r1, [pc, #224]	; (80081ac <checkDemoModCalisma+0x528>)
 80080cc:	4618      	mov	r0, r3
 80080ce:	f004 fe5b 	bl	800cd88 <itoa>
			lcd_print(2,16,snum);
 80080d2:	4a36      	ldr	r2, [pc, #216]	; (80081ac <checkDemoModCalisma+0x528>)
 80080d4:	2110      	movs	r1, #16
 80080d6:	2002      	movs	r0, #2
 80080d8:	f7f8 fb6e 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 80080dc:	4b34      	ldr	r3, [pc, #208]	; (80081b0 <checkDemoModCalisma+0x52c>)
 80080de:	2201      	movs	r2, #1
 80080e0:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80080e2:	e03c      	b.n	800815e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80080e4:	4b33      	ldr	r3, [pc, #204]	; (80081b4 <checkDemoModCalisma+0x530>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d003      	beq.n	80080f4 <checkDemoModCalisma+0x470>
 80080ec:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <checkDemoModCalisma+0x51c>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d134      	bne.n	800815e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80080f4:	2200      	movs	r2, #0
 80080f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080fa:	481b      	ldr	r0, [pc, #108]	; (8008168 <checkDemoModCalisma+0x4e4>)
 80080fc:	f001 fe2f 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008100:	2200      	movs	r2, #0
 8008102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008106:	4818      	ldr	r0, [pc, #96]	; (8008168 <checkDemoModCalisma+0x4e4>)
 8008108:	f001 fe29 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800810c:	2200      	movs	r2, #0
 800810e:	2104      	movs	r1, #4
 8008110:	4815      	ldr	r0, [pc, #84]	; (8008168 <checkDemoModCalisma+0x4e4>)
 8008112:	f001 fe24 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008116:	2200      	movs	r2, #0
 8008118:	2102      	movs	r1, #2
 800811a:	4813      	ldr	r0, [pc, #76]	; (8008168 <checkDemoModCalisma+0x4e4>)
 800811c:	f001 fe1f 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008120:	2200      	movs	r2, #0
 8008122:	2101      	movs	r1, #1
 8008124:	4810      	ldr	r0, [pc, #64]	; (8008168 <checkDemoModCalisma+0x4e4>)
 8008126:	f001 fe1a 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800812a:	2200      	movs	r2, #0
 800812c:	2120      	movs	r1, #32
 800812e:	480d      	ldr	r0, [pc, #52]	; (8008164 <checkDemoModCalisma+0x4e0>)
 8008130:	f001 fe15 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008134:	2200      	movs	r2, #0
 8008136:	2110      	movs	r1, #16
 8008138:	480a      	ldr	r0, [pc, #40]	; (8008164 <checkDemoModCalisma+0x4e0>)
 800813a:	f001 fe10 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800813e:	2200      	movs	r2, #0
 8008140:	2180      	movs	r1, #128	; 0x80
 8008142:	480b      	ldr	r0, [pc, #44]	; (8008170 <checkDemoModCalisma+0x4ec>)
 8008144:	f001 fe0b 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008148:	2200      	movs	r2, #0
 800814a:	2140      	movs	r1, #64	; 0x40
 800814c:	4808      	ldr	r0, [pc, #32]	; (8008170 <checkDemoModCalisma+0x4ec>)
 800814e:	f001 fe06 	bl	8009d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008152:	2200      	movs	r2, #0
 8008154:	2120      	movs	r1, #32
 8008156:	4806      	ldr	r0, [pc, #24]	; (8008170 <checkDemoModCalisma+0x4ec>)
 8008158:	f001 fe01 	bl	8009d5e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800815c:	e7ff      	b.n	800815e <checkDemoModCalisma+0x4da>
 800815e:	bf00      	nop
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40011000 	.word	0x40011000
 8008168:	40010c00 	.word	0x40010c00
 800816c:	20000c92 	.word	0x20000c92
 8008170:	40010800 	.word	0x40010800
 8008174:	20000bc4 	.word	0x20000bc4
 8008178:	20000bd4 	.word	0x20000bd4
 800817c:	20000c91 	.word	0x20000c91
 8008180:	20000c77 	.word	0x20000c77
 8008184:	20000c36 	.word	0x20000c36
 8008188:	20000c37 	.word	0x20000c37
 800818c:	200009b1 	.word	0x200009b1
 8008190:	200009b2 	.word	0x200009b2
 8008194:	20000c38 	.word	0x20000c38
 8008198:	20000b28 	.word	0x20000b28
 800819c:	20000c65 	.word	0x20000c65
 80081a0:	20000c56 	.word	0x20000c56
 80081a4:	0800e524 	.word	0x0800e524
 80081a8:	0800e530 	.word	0x0800e530
 80081ac:	20000bbc 	.word	0x20000bbc
 80081b0:	20000c6d 	.word	0x20000c6d
 80081b4:	20000c57 	.word	0x20000c57

080081b8 <mergeData>:

char* mergeData() {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b09e      	sub	sp, #120	; 0x78
 80081bc:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80081be:	2300      	movs	r3, #0
 80081c0:	643b      	str	r3, [r7, #64]	; 0x40
 80081c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80081c6:	2229      	movs	r2, #41	; 0x29
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f004 fef4 	bl	800cfb8 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80081d0:	4b6a      	ldr	r3, [pc, #424]	; (800837c <mergeData+0x1c4>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	713b      	strb	r3, [r7, #4]
 80081d6:	4b6a      	ldr	r3, [pc, #424]	; (8008380 <mergeData+0x1c8>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	717b      	strb	r3, [r7, #5]
 80081dc:	4b69      	ldr	r3, [pc, #420]	; (8008384 <mergeData+0x1cc>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	71bb      	strb	r3, [r7, #6]
 80081e2:	4b69      	ldr	r3, [pc, #420]	; (8008388 <mergeData+0x1d0>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
 80081e8:	4b68      	ldr	r3, [pc, #416]	; (800838c <mergeData+0x1d4>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	723b      	strb	r3, [r7, #8]
 80081ee:	4b68      	ldr	r3, [pc, #416]	; (8008390 <mergeData+0x1d8>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	727b      	strb	r3, [r7, #9]
 80081f4:	4b67      	ldr	r3, [pc, #412]	; (8008394 <mergeData+0x1dc>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	72bb      	strb	r3, [r7, #10]
 80081fa:	4b67      	ldr	r3, [pc, #412]	; (8008398 <mergeData+0x1e0>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	72fb      	strb	r3, [r7, #11]
 8008200:	4b66      	ldr	r3, [pc, #408]	; (800839c <mergeData+0x1e4>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	733b      	strb	r3, [r7, #12]
 8008206:	4b66      	ldr	r3, [pc, #408]	; (80083a0 <mergeData+0x1e8>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	737b      	strb	r3, [r7, #13]
 800820c:	4b65      	ldr	r3, [pc, #404]	; (80083a4 <mergeData+0x1ec>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	73bb      	strb	r3, [r7, #14]
 8008212:	4b65      	ldr	r3, [pc, #404]	; (80083a8 <mergeData+0x1f0>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	4b64      	ldr	r3, [pc, #400]	; (80083ac <mergeData+0x1f4>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	743b      	strb	r3, [r7, #16]
 800821e:	4b64      	ldr	r3, [pc, #400]	; (80083b0 <mergeData+0x1f8>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	747b      	strb	r3, [r7, #17]
 8008224:	4b63      	ldr	r3, [pc, #396]	; (80083b4 <mergeData+0x1fc>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	74bb      	strb	r3, [r7, #18]
 800822a:	4b63      	ldr	r3, [pc, #396]	; (80083b8 <mergeData+0x200>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	74fb      	strb	r3, [r7, #19]
 8008230:	4b62      	ldr	r3, [pc, #392]	; (80083bc <mergeData+0x204>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	753b      	strb	r3, [r7, #20]
 8008236:	4b62      	ldr	r3, [pc, #392]	; (80083c0 <mergeData+0x208>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	757b      	strb	r3, [r7, #21]
 800823c:	4b61      	ldr	r3, [pc, #388]	; (80083c4 <mergeData+0x20c>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	75bb      	strb	r3, [r7, #22]
 8008242:	4b61      	ldr	r3, [pc, #388]	; (80083c8 <mergeData+0x210>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	75fb      	strb	r3, [r7, #23]
 8008248:	4b60      	ldr	r3, [pc, #384]	; (80083cc <mergeData+0x214>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	763b      	strb	r3, [r7, #24]
 800824e:	4b60      	ldr	r3, [pc, #384]	; (80083d0 <mergeData+0x218>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	767b      	strb	r3, [r7, #25]
 8008254:	4b5f      	ldr	r3, [pc, #380]	; (80083d4 <mergeData+0x21c>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	76bb      	strb	r3, [r7, #26]
 800825a:	4b5f      	ldr	r3, [pc, #380]	; (80083d8 <mergeData+0x220>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	76fb      	strb	r3, [r7, #27]
 8008260:	4b5e      	ldr	r3, [pc, #376]	; (80083dc <mergeData+0x224>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	773b      	strb	r3, [r7, #28]
 8008266:	4b5e      	ldr	r3, [pc, #376]	; (80083e0 <mergeData+0x228>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	777b      	strb	r3, [r7, #29]
 800826c:	4b5d      	ldr	r3, [pc, #372]	; (80083e4 <mergeData+0x22c>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	77bb      	strb	r3, [r7, #30]
 8008272:	4b5d      	ldr	r3, [pc, #372]	; (80083e8 <mergeData+0x230>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	77fb      	strb	r3, [r7, #31]
 8008278:	4b5c      	ldr	r3, [pc, #368]	; (80083ec <mergeData+0x234>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	f887 3020 	strb.w	r3, [r7, #32]
 8008280:	4b5b      	ldr	r3, [pc, #364]	; (80083f0 <mergeData+0x238>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008288:	4b5a      	ldr	r3, [pc, #360]	; (80083f4 <mergeData+0x23c>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008290:	4b59      	ldr	r3, [pc, #356]	; (80083f8 <mergeData+0x240>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008298:	4b58      	ldr	r3, [pc, #352]	; (80083fc <mergeData+0x244>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80082a0:	4b57      	ldr	r3, [pc, #348]	; (8008400 <mergeData+0x248>)
 80082a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80082a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80082aa:	4b55      	ldr	r3, [pc, #340]	; (8008400 <mergeData+0x248>)
 80082ac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80082b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80082b4:	4b52      	ldr	r3, [pc, #328]	; (8008400 <mergeData+0x248>)
 80082b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80082ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80082be:	4b50      	ldr	r3, [pc, #320]	; (8008400 <mergeData+0x248>)
 80082c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80082c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80082c8:	4b4d      	ldr	r3, [pc, #308]	; (8008400 <mergeData+0x248>)
 80082ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80082ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80082d2:	4b4b      	ldr	r3, [pc, #300]	; (8008400 <mergeData+0x248>)
 80082d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80082d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80082dc:	4b48      	ldr	r3, [pc, #288]	; (8008400 <mergeData+0x248>)
 80082de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80082e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80082e6:	4b46      	ldr	r3, [pc, #280]	; (8008400 <mergeData+0x248>)
 80082e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80082ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80082f0:	4b43      	ldr	r3, [pc, #268]	; (8008400 <mergeData+0x248>)
 80082f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80082f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80082fa:	4b41      	ldr	r3, [pc, #260]	; (8008400 <mergeData+0x248>)
 80082fc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008300:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008304:	4b3e      	ldr	r3, [pc, #248]	; (8008400 <mergeData+0x248>)
 8008306:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800830a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800830e:	4b3d      	ldr	r3, [pc, #244]	; (8008404 <mergeData+0x24c>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008316:	2300      	movs	r3, #0
 8008318:	677b      	str	r3, [r7, #116]	; 0x74
 800831a:	e015      	b.n	8008348 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 800831c:	1d3a      	adds	r2, r7, #4
 800831e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008320:	4413      	add	r3, r2
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800832a:	4937      	ldr	r1, [pc, #220]	; (8008408 <mergeData+0x250>)
 800832c:	4618      	mov	r0, r3
 800832e:	f004 fe23 	bl	800cf78 <siprintf>
	    strcat(combinedString, temp);
 8008332:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008336:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f004 fe43 	bl	800cfc8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008344:	3301      	adds	r3, #1
 8008346:	677b      	str	r3, [r7, #116]	; 0x74
 8008348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800834a:	2b2c      	cmp	r3, #44	; 0x2c
 800834c:	d9e6      	bls.n	800831c <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800834e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008352:	4618      	mov	r0, r3
 8008354:	f7f7 ff66 	bl	8000224 <strlen>
 8008358:	4603      	mov	r3, r0
 800835a:	3301      	adds	r3, #1
 800835c:	4618      	mov	r0, r3
 800835e:	f004 fd15 	bl	800cd8c <malloc>
 8008362:	4603      	mov	r3, r0
 8008364:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8008366:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800836a:	4619      	mov	r1, r3
 800836c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800836e:	f004 fe77 	bl	800d060 <strcpy>
	return result;
 8008372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008374:	4618      	mov	r0, r3
 8008376:	3778      	adds	r7, #120	; 0x78
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000c48 	.word	0x20000c48
 8008380:	20000c3a 	.word	0x20000c3a
 8008384:	20000c3d 	.word	0x20000c3d
 8008388:	20000c3e 	.word	0x20000c3e
 800838c:	20000c3f 	.word	0x20000c3f
 8008390:	20000c46 	.word	0x20000c46
 8008394:	20000c40 	.word	0x20000c40
 8008398:	20000c41 	.word	0x20000c41
 800839c:	20000c45 	.word	0x20000c45
 80083a0:	20000c42 	.word	0x20000c42
 80083a4:	20000c52 	.word	0x20000c52
 80083a8:	20000c43 	.word	0x20000c43
 80083ac:	20000c53 	.word	0x20000c53
 80083b0:	20000c44 	.word	0x20000c44
 80083b4:	20000c54 	.word	0x20000c54
 80083b8:	20000c47 	.word	0x20000c47
 80083bc:	20000c49 	.word	0x20000c49
 80083c0:	20000c4a 	.word	0x20000c4a
 80083c4:	20000c4b 	.word	0x20000c4b
 80083c8:	20000c4c 	.word	0x20000c4c
 80083cc:	20000c4d 	.word	0x20000c4d
 80083d0:	20000c4e 	.word	0x20000c4e
 80083d4:	20000c4f 	.word	0x20000c4f
 80083d8:	20000c50 	.word	0x20000c50
 80083dc:	20000c51 	.word	0x20000c51
 80083e0:	20000c55 	.word	0x20000c55
 80083e4:	20000c57 	.word	0x20000c57
 80083e8:	20000c36 	.word	0x20000c36
 80083ec:	20000c37 	.word	0x20000c37
 80083f0:	200009b1 	.word	0x200009b1
 80083f4:	200009b2 	.word	0x200009b2
 80083f8:	20000c38 	.word	0x20000c38
 80083fc:	20000c5a 	.word	0x20000c5a
 8008400:	20000b28 	.word	0x20000b28
 8008404:	20000940 	.word	0x20000940
 8008408:	0800e544 	.word	0x0800e544

0800840c <mainLoop>:

void mainLoop() {
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008412:	f7fd fffb 	bl	800640c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8008416:	2101      	movs	r1, #1
 8008418:	48ac      	ldr	r0, [pc, #688]	; (80086cc <mainLoop+0x2c0>)
 800841a:	f001 fc89 	bl	8009d30 <HAL_GPIO_ReadPin>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d136      	bne.n	8008492 <mainLoop+0x86>
 8008424:	2108      	movs	r1, #8
 8008426:	48aa      	ldr	r0, [pc, #680]	; (80086d0 <mainLoop+0x2c4>)
 8008428:	f001 fc82 	bl	8009d30 <HAL_GPIO_ReadPin>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d12f      	bne.n	8008492 <mainLoop+0x86>
 8008432:	2102      	movs	r1, #2
 8008434:	48a5      	ldr	r0, [pc, #660]	; (80086cc <mainLoop+0x2c0>)
 8008436:	f001 fc7b 	bl	8009d30 <HAL_GPIO_ReadPin>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d128      	bne.n	8008492 <mainLoop+0x86>
 8008440:	2104      	movs	r1, #4
 8008442:	48a2      	ldr	r0, [pc, #648]	; (80086cc <mainLoop+0x2c0>)
 8008444:	f001 fc74 	bl	8009d30 <HAL_GPIO_ReadPin>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d121      	bne.n	8008492 <mainLoop+0x86>
 800844e:	2108      	movs	r1, #8
 8008450:	489e      	ldr	r0, [pc, #632]	; (80086cc <mainLoop+0x2c0>)
 8008452:	f001 fc6d 	bl	8009d30 <HAL_GPIO_ReadPin>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d11a      	bne.n	8008492 <mainLoop+0x86>
 800845c:	2180      	movs	r1, #128	; 0x80
 800845e:	489c      	ldr	r0, [pc, #624]	; (80086d0 <mainLoop+0x2c4>)
 8008460:	f001 fc66 	bl	8009d30 <HAL_GPIO_ReadPin>
 8008464:	4603      	mov	r3, r0
 8008466:	2b01      	cmp	r3, #1
 8008468:	d113      	bne.n	8008492 <mainLoop+0x86>
 800846a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800846e:	4898      	ldr	r0, [pc, #608]	; (80086d0 <mainLoop+0x2c4>)
 8008470:	f001 fc5e 	bl	8009d30 <HAL_GPIO_ReadPin>
 8008474:	4603      	mov	r3, r0
 8008476:	2b01      	cmp	r3, #1
 8008478:	d10b      	bne.n	8008492 <mainLoop+0x86>
 800847a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800847e:	4894      	ldr	r0, [pc, #592]	; (80086d0 <mainLoop+0x2c4>)
 8008480:	f001 fc56 	bl	8009d30 <HAL_GPIO_ReadPin>
 8008484:	4603      	mov	r3, r0
 8008486:	2b01      	cmp	r3, #1
 8008488:	d103      	bne.n	8008492 <mainLoop+0x86>
			butonKontrol=0;
 800848a:	4b92      	ldr	r3, [pc, #584]	; (80086d4 <mainLoop+0x2c8>)
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	e003      	b.n	800849a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8008492:	4b91      	ldr	r3, [pc, #580]	; (80086d8 <mainLoop+0x2cc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a91      	ldr	r2, [pc, #580]	; (80086dc <mainLoop+0x2d0>)
 8008498:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800849a:	4b91      	ldr	r3, [pc, #580]	; (80086e0 <mainLoop+0x2d4>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d039      	beq.n	8008516 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80084a2:	bf00      	nop
 80084a4:	488f      	ldr	r0, [pc, #572]	; (80086e4 <mainLoop+0x2d8>)
 80084a6:	f002 fa6c 	bl	800a982 <HAL_I2C_GetError>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d0f9      	beq.n	80084a4 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80084b0:	bf00      	nop
 80084b2:	488c      	ldr	r0, [pc, #560]	; (80086e4 <mainLoop+0x2d8>)
 80084b4:	f002 fa58 	bl	800a968 <HAL_I2C_GetState>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d1f9      	bne.n	80084b2 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80084be:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80084c2:	9302      	str	r3, [sp, #8]
 80084c4:	233f      	movs	r3, #63	; 0x3f
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	4b87      	ldr	r3, [pc, #540]	; (80086e8 <mainLoop+0x2dc>)
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	233f      	movs	r3, #63	; 0x3f
 80084ce:	2200      	movs	r2, #0
 80084d0:	21a0      	movs	r1, #160	; 0xa0
 80084d2:	4884      	ldr	r0, [pc, #528]	; (80086e4 <mainLoop+0x2d8>)
 80084d4:	f001 fee6 	bl	800a2a4 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 80084d8:	2005      	movs	r0, #5
 80084da:	f000 fe59 	bl	8009190 <HAL_Delay>

		  hafizaYaz=0;
 80084de:	4b80      	ldr	r3, [pc, #512]	; (80086e0 <mainLoop+0x2d4>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80084e4:	4b81      	ldr	r3, [pc, #516]	; (80086ec <mainLoop+0x2e0>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d105      	bne.n	80084f8 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 80084ec:	4a80      	ldr	r2, [pc, #512]	; (80086f0 <mainLoop+0x2e4>)
 80084ee:	2101      	movs	r1, #1
 80084f0:	2002      	movs	r0, #2
 80084f2:	f7f8 f961 	bl	80007b8 <lcd_print>
 80084f6:	e008      	b.n	800850a <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 80084f8:	4b7c      	ldr	r3, [pc, #496]	; (80086ec <mainLoop+0x2e0>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d104      	bne.n	800850a <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008500:	4a7c      	ldr	r2, [pc, #496]	; (80086f4 <mainLoop+0x2e8>)
 8008502:	2101      	movs	r1, #1
 8008504:	2002      	movs	r0, #2
 8008506:	f7f8 f957 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 800850a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800850e:	f000 fe3f 	bl	8009190 <HAL_Delay>
		  lcd_clear();
 8008512:	f7f8 f97d 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008516:	4b78      	ldr	r3, [pc, #480]	; (80086f8 <mainLoop+0x2ec>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f083 0301 	eor.w	r3, r3, #1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d06e      	beq.n	8008602 <mainLoop+0x1f6>
 8008524:	486f      	ldr	r0, [pc, #444]	; (80086e4 <mainLoop+0x2d8>)
 8008526:	f002 fa1f 	bl	800a968 <HAL_I2C_GetState>
 800852a:	4603      	mov	r3, r0
 800852c:	2b20      	cmp	r3, #32
 800852e:	d168      	bne.n	8008602 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008530:	4b72      	ldr	r3, [pc, #456]	; (80086fc <mainLoop+0x2f0>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f083 0301 	eor.w	r3, r3, #1
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d044      	beq.n	80085c8 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 800853e:	4a70      	ldr	r2, [pc, #448]	; (8008700 <mainLoop+0x2f4>)
 8008540:	2101      	movs	r1, #1
 8008542:	2001      	movs	r0, #1
 8008544:	f7f8 f938 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 8008548:	4b68      	ldr	r3, [pc, #416]	; (80086ec <mainLoop+0x2e0>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d105      	bne.n	800855c <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8008550:	4a6c      	ldr	r2, [pc, #432]	; (8008704 <mainLoop+0x2f8>)
 8008552:	2101      	movs	r1, #1
 8008554:	2002      	movs	r0, #2
 8008556:	f7f8 f92f 	bl	80007b8 <lcd_print>
 800855a:	e008      	b.n	800856e <mainLoop+0x162>
			  } else if(dilSecim==1) {
 800855c:	4b63      	ldr	r3, [pc, #396]	; (80086ec <mainLoop+0x2e0>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d104      	bne.n	800856e <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8008564:	4a68      	ldr	r2, [pc, #416]	; (8008708 <mainLoop+0x2fc>)
 8008566:	2101      	movs	r1, #1
 8008568:	2002      	movs	r0, #2
 800856a:	f7f8 f925 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 800856e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008572:	f000 fe0d 	bl	8009190 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008576:	bf00      	nop
 8008578:	485a      	ldr	r0, [pc, #360]	; (80086e4 <mainLoop+0x2d8>)
 800857a:	f002 fa02 	bl	800a982 <HAL_I2C_GetError>
 800857e:	4603      	mov	r3, r0
 8008580:	2b04      	cmp	r3, #4
 8008582:	d0f9      	beq.n	8008578 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008584:	e003      	b.n	800858e <mainLoop+0x182>
				  HAL_Delay(1000);
 8008586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800858a:	f000 fe01 	bl	8009190 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800858e:	4855      	ldr	r0, [pc, #340]	; (80086e4 <mainLoop+0x2d8>)
 8008590:	f002 f9ea 	bl	800a968 <HAL_I2C_GetState>
 8008594:	4603      	mov	r3, r0
 8008596:	2b20      	cmp	r3, #32
 8008598:	d1f5      	bne.n	8008586 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 800859a:	4b54      	ldr	r3, [pc, #336]	; (80086ec <mainLoop+0x2e0>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 80085a2:	4a5a      	ldr	r2, [pc, #360]	; (800870c <mainLoop+0x300>)
 80085a4:	2101      	movs	r1, #1
 80085a6:	2002      	movs	r0, #2
 80085a8:	f7f8 f906 	bl	80007b8 <lcd_print>
 80085ac:	e008      	b.n	80085c0 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 80085ae:	4b4f      	ldr	r3, [pc, #316]	; (80086ec <mainLoop+0x2e0>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d104      	bne.n	80085c0 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 80085b6:	4a56      	ldr	r2, [pc, #344]	; (8008710 <mainLoop+0x304>)
 80085b8:	2101      	movs	r1, #1
 80085ba:	2002      	movs	r0, #2
 80085bc:	f7f8 f8fc 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 80085c0:	4b4e      	ldr	r3, [pc, #312]	; (80086fc <mainLoop+0x2f0>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	e014      	b.n	80085f2 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 80085c8:	4b48      	ldr	r3, [pc, #288]	; (80086ec <mainLoop+0x2e0>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d105      	bne.n	80085dc <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 80085d0:	4a50      	ldr	r2, [pc, #320]	; (8008714 <mainLoop+0x308>)
 80085d2:	2101      	movs	r1, #1
 80085d4:	2002      	movs	r0, #2
 80085d6:	f7f8 f8ef 	bl	80007b8 <lcd_print>
 80085da:	e008      	b.n	80085ee <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 80085dc:	4b43      	ldr	r3, [pc, #268]	; (80086ec <mainLoop+0x2e0>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d104      	bne.n	80085ee <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 80085e4:	4a4c      	ldr	r2, [pc, #304]	; (8008718 <mainLoop+0x30c>)
 80085e6:	2101      	movs	r1, #1
 80085e8:	2002      	movs	r0, #2
 80085ea:	f7f8 f8e5 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 80085ee:	f7f8 f90f 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 80085f2:	f7f8 f90d 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 80085f6:	2001      	movs	r0, #1
 80085f8:	f7fd fac6 	bl	8005b88 <eepromKontrol>
		  hafizaOku=1;
 80085fc:	4b3e      	ldr	r3, [pc, #248]	; (80086f8 <mainLoop+0x2ec>)
 80085fe:	2201      	movs	r2, #1
 8008600:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008602:	4b46      	ldr	r3, [pc, #280]	; (800871c <mainLoop+0x310>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d11c      	bne.n	8008644 <mainLoop+0x238>
 800860a:	4b45      	ldr	r3, [pc, #276]	; (8008720 <mainLoop+0x314>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	f083 0301 	eor.w	r3, r3, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d015      	beq.n	8008644 <mainLoop+0x238>
 8008618:	4b42      	ldr	r3, [pc, #264]	; (8008724 <mainLoop+0x318>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d111      	bne.n	8008644 <mainLoop+0x238>
			lcd_clear();
 8008620:	f7f8 f8f6 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 8008624:	200a      	movs	r0, #10
 8008626:	f000 fdb3 	bl	8009190 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800862a:	4a3f      	ldr	r2, [pc, #252]	; (8008728 <mainLoop+0x31c>)
 800862c:	2101      	movs	r1, #1
 800862e:	2001      	movs	r0, #1
 8008630:	f7f8 f8c2 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008634:	4a3d      	ldr	r2, [pc, #244]	; (800872c <mainLoop+0x320>)
 8008636:	2101      	movs	r1, #1
 8008638:	2002      	movs	r0, #2
 800863a:	f7f8 f8bd 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 800863e:	4b38      	ldr	r3, [pc, #224]	; (8008720 <mainLoop+0x314>)
 8008640:	2201      	movs	r2, #1
 8008642:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008644:	4b35      	ldr	r3, [pc, #212]	; (800871c <mainLoop+0x310>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d112      	bne.n	8008672 <mainLoop+0x266>
 800864c:	2102      	movs	r1, #2
 800864e:	481f      	ldr	r0, [pc, #124]	; (80086cc <mainLoop+0x2c0>)
 8008650:	f001 fb6e 	bl	8009d30 <HAL_GPIO_ReadPin>
 8008654:	4603      	mov	r3, r0
 8008656:	2b01      	cmp	r3, #1
 8008658:	d10b      	bne.n	8008672 <mainLoop+0x266>
 800865a:	2104      	movs	r1, #4
 800865c:	481b      	ldr	r0, [pc, #108]	; (80086cc <mainLoop+0x2c0>)
 800865e:	f001 fb67 	bl	8009d30 <HAL_GPIO_ReadPin>
 8008662:	4603      	mov	r3, r0
 8008664:	2b01      	cmp	r3, #1
 8008666:	d104      	bne.n	8008672 <mainLoop+0x266>
			menuGiris=1;
 8008668:	4b2c      	ldr	r3, [pc, #176]	; (800871c <mainLoop+0x310>)
 800866a:	2201      	movs	r2, #1
 800866c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800866e:	f7f8 f8cf 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 8008672:	4b2a      	ldr	r3, [pc, #168]	; (800871c <mainLoop+0x310>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d102      	bne.n	8008680 <mainLoop+0x274>
			menu(&hi2c1);
 800867a:	481a      	ldr	r0, [pc, #104]	; (80086e4 <mainLoop+0x2d8>)
 800867c:	f7f8 fff2 	bl	8001664 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8008680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008684:	4812      	ldr	r0, [pc, #72]	; (80086d0 <mainLoop+0x2c4>)
 8008686:	f001 fb82 	bl	8009d8e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800868a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800868e:	4828      	ldr	r0, [pc, #160]	; (8008730 <mainLoop+0x324>)
 8008690:	f001 fb4e 	bl	8009d30 <HAL_GPIO_ReadPin>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <mainLoop+0x2a4>
 800869a:	4b26      	ldr	r3, [pc, #152]	; (8008734 <mainLoop+0x328>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	f083 0301 	eor.w	r3, r3, #1
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <mainLoop+0x2a4>
			stopVar=1;
 80086a8:	4b23      	ldr	r3, [pc, #140]	; (8008738 <mainLoop+0x32c>)
 80086aa:	2201      	movs	r2, #1
 80086ac:	701a      	strb	r2, [r3, #0]
 80086ae:	e002      	b.n	80086b6 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 80086b0:	4b21      	ldr	r3, [pc, #132]	; (8008738 <mainLoop+0x32c>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80086b6:	f7fd fec9 	bl	800644c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80086ba:	f7fd fefb 	bl	80064b4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80086be:	f7fd ff3f 	bl	8006540 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80086c2:	f7fd ff8f 	bl	80065e4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80086c6:	f7ff fadd 	bl	8007c84 <checkDemoModCalisma>
		checkLCDBacklight();
 80086ca:	e6a2      	b.n	8008412 <mainLoop+0x6>
 80086cc:	40010800 	.word	0x40010800
 80086d0:	40011000 	.word	0x40011000
 80086d4:	20000c68 	.word	0x20000c68
 80086d8:	20000bc4 	.word	0x20000bc4
 80086dc:	20000be0 	.word	0x20000be0
 80086e0:	20000c65 	.word	0x20000c65
 80086e4:	20000df8 	.word	0x20000df8
 80086e8:	20000b28 	.word	0x20000b28
 80086ec:	20000c5a 	.word	0x20000c5a
 80086f0:	0800e548 	.word	0x0800e548
 80086f4:	0800e55c 	.word	0x0800e55c
 80086f8:	20000c66 	.word	0x20000c66
 80086fc:	20000c67 	.word	0x20000c67
 8008700:	0800e570 	.word	0x0800e570
 8008704:	0800e584 	.word	0x0800e584
 8008708:	0800e598 	.word	0x0800e598
 800870c:	0800e5ac 	.word	0x0800e5ac
 8008710:	0800e5c0 	.word	0x0800e5c0
 8008714:	0800e5d4 	.word	0x0800e5d4
 8008718:	0800e5e8 	.word	0x0800e5e8
 800871c:	20000c56 	.word	0x20000c56
 8008720:	20000c6d 	.word	0x20000c6d
 8008724:	20000c57 	.word	0x20000c57
 8008728:	0800e4ac 	.word	0x0800e4ac
 800872c:	0800e4c0 	.word	0x0800e4c0
 8008730:	40010c00 	.word	0x40010c00
 8008734:	20000c8e 	.word	0x20000c8e
 8008738:	20000c8b 	.word	0x20000c8b

0800873c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a03      	ldr	r2, [pc, #12]	; (8008758 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800874c:	6013      	str	r3, [r2, #0]
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr
 8008758:	20000bc4 	.word	0x20000bc4

0800875c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008760:	f000 fcb4 	bl	80090cc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008764:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008768:	f000 fd12 	bl	8009190 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800876c:	f000 f8e4 	bl	8008938 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008770:	f000 fa06 	bl	8008b80 <MX_GPIO_Init>
  MX_CAN_Init();
 8008774:	f000 f926 	bl	80089c4 <MX_CAN_Init>
  MX_I2C1_Init();
 8008778:	f000 f958 	bl	8008a2c <MX_I2C1_Init>
  MX_TIM1_Init();
 800877c:	f000 f984 	bl	8008a88 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008780:	f000 f9d4 	bl	8008b2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008784:	2201      	movs	r2, #1
 8008786:	2140      	movs	r1, #64	; 0x40
 8008788:	485b      	ldr	r0, [pc, #364]	; (80088f8 <main+0x19c>)
 800878a:	f001 fae8 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800878e:	2201      	movs	r2, #1
 8008790:	2180      	movs	r1, #128	; 0x80
 8008792:	4859      	ldr	r0, [pc, #356]	; (80088f8 <main+0x19c>)
 8008794:	f001 fae3 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008798:	200a      	movs	r0, #10
 800879a:	f000 fcf9 	bl	8009190 <HAL_Delay>
  lcd_init();
 800879e:	f7f7 ffd9 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 80087a2:	200a      	movs	r0, #10
 80087a4:	f000 fcf4 	bl	8009190 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80087a8:	4854      	ldr	r0, [pc, #336]	; (80088fc <main+0x1a0>)
 80087aa:	f003 f98b 	bl	800bac4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80087ae:	bf00      	nop
 80087b0:	4853      	ldr	r0, [pc, #332]	; (8008900 <main+0x1a4>)
 80087b2:	f002 f8e6 	bl	800a982 <HAL_I2C_GetError>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d0f9      	beq.n	80087b0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80087bc:	bf00      	nop
 80087be:	4850      	ldr	r0, [pc, #320]	; (8008900 <main+0x1a4>)
 80087c0:	f002 f8d2 	bl	800a968 <HAL_I2C_GetState>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d1f9      	bne.n	80087be <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80087ca:	2200      	movs	r2, #0
 80087cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80087d0:	4849      	ldr	r0, [pc, #292]	; (80088f8 <main+0x19c>)
 80087d2:	f001 fac4 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80087d6:	2200      	movs	r2, #0
 80087d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087dc:	4846      	ldr	r0, [pc, #280]	; (80088f8 <main+0x19c>)
 80087de:	f001 fabe 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80087e2:	2200      	movs	r2, #0
 80087e4:	2104      	movs	r1, #4
 80087e6:	4844      	ldr	r0, [pc, #272]	; (80088f8 <main+0x19c>)
 80087e8:	f001 fab9 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80087ec:	2200      	movs	r2, #0
 80087ee:	2102      	movs	r1, #2
 80087f0:	4841      	ldr	r0, [pc, #260]	; (80088f8 <main+0x19c>)
 80087f2:	f001 fab4 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80087f6:	2200      	movs	r2, #0
 80087f8:	2101      	movs	r1, #1
 80087fa:	483f      	ldr	r0, [pc, #252]	; (80088f8 <main+0x19c>)
 80087fc:	f001 faaf 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008800:	2200      	movs	r2, #0
 8008802:	2120      	movs	r1, #32
 8008804:	483f      	ldr	r0, [pc, #252]	; (8008904 <main+0x1a8>)
 8008806:	f001 faaa 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800880a:	2200      	movs	r2, #0
 800880c:	2110      	movs	r1, #16
 800880e:	483d      	ldr	r0, [pc, #244]	; (8008904 <main+0x1a8>)
 8008810:	f001 faa5 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008814:	2200      	movs	r2, #0
 8008816:	2180      	movs	r1, #128	; 0x80
 8008818:	483b      	ldr	r0, [pc, #236]	; (8008908 <main+0x1ac>)
 800881a:	f001 faa0 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800881e:	2200      	movs	r2, #0
 8008820:	2140      	movs	r1, #64	; 0x40
 8008822:	4839      	ldr	r0, [pc, #228]	; (8008908 <main+0x1ac>)
 8008824:	f001 fa9b 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008828:	2200      	movs	r2, #0
 800882a:	2120      	movs	r1, #32
 800882c:	4836      	ldr	r0, [pc, #216]	; (8008908 <main+0x1ac>)
 800882e:	f001 fa96 	bl	8009d5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008832:	2200      	movs	r2, #0
 8008834:	2110      	movs	r1, #16
 8008836:	4834      	ldr	r0, [pc, #208]	; (8008908 <main+0x1ac>)
 8008838:	f001 fa91 	bl	8009d5e <HAL_GPIO_WritePin>

  i2cTest();
 800883c:	f7fd fd38 	bl	80062b0 <i2cTest>
  HAL_Delay(100);
 8008840:	2064      	movs	r0, #100	; 0x64
 8008842:	f000 fca5 	bl	8009190 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008846:	4a31      	ldr	r2, [pc, #196]	; (800890c <main+0x1b0>)
 8008848:	2101      	movs	r1, #1
 800884a:	2001      	movs	r0, #1
 800884c:	f7f7 ffb4 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008850:	4a2f      	ldr	r2, [pc, #188]	; (8008910 <main+0x1b4>)
 8008852:	2101      	movs	r1, #1
 8008854:	2002      	movs	r0, #2
 8008856:	f7f7 ffaf 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 800885a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800885e:	f000 fc97 	bl	8009190 <HAL_Delay>
  lcd_clear();
 8008862:	f7f7 ffd5 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8008866:	2000      	movs	r0, #0
 8008868:	f7fd f98e 	bl	8005b88 <eepromKontrol>

  if(strlen(machineID) == 0) {
 800886c:	4b29      	ldr	r3, [pc, #164]	; (8008914 <main+0x1b8>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d103      	bne.n	800887c <main+0x120>
	  takeMachineID(1, &hi2c1);
 8008874:	4922      	ldr	r1, [pc, #136]	; (8008900 <main+0x1a4>)
 8008876:	2001      	movs	r0, #1
 8008878:	f7f8 faa2 	bl	8000dc0 <takeMachineID>
  }

  lcd_clear();
 800887c:	f7f7 ffc8 	bl	8000810 <lcd_clear>
  HAL_Delay(500);
 8008880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008884:	f000 fc84 	bl	8009190 <HAL_Delay>

  if(iotMode == 1) {
 8008888:	4b23      	ldr	r3, [pc, #140]	; (8008918 <main+0x1bc>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d126      	bne.n	80088de <main+0x182>
	  if(strlen(wifiSSID) == 0) {
 8008890:	4b22      	ldr	r3, [pc, #136]	; (800891c <main+0x1c0>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d102      	bne.n	800889e <main+0x142>
		  takeWifiSSID(1);
 8008898:	2001      	movs	r0, #1
 800889a:	f7f8 fba5 	bl	8000fe8 <takeWifiSSID>
	  }

	  lcd_clear();
 800889e:	f7f7 ffb7 	bl	8000810 <lcd_clear>
	  HAL_Delay(500);
 80088a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088a6:	f000 fc73 	bl	8009190 <HAL_Delay>

	  if(strlen(wifiPass) == 0) {
 80088aa:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <main+0x1c4>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <main+0x15c>
		  takeWifiPass(1);
 80088b2:	2001      	movs	r0, #1
 80088b4:	f7f8 fd14 	bl	80012e0 <takeWifiPass>
	  }

	  lcd_print(1, 1, "Wifi Ayarlaniyor");
 80088b8:	4a1a      	ldr	r2, [pc, #104]	; (8008924 <main+0x1c8>)
 80088ba:	2101      	movs	r1, #1
 80088bc:	2001      	movs	r0, #1
 80088be:	f7f7 ff7b 	bl	80007b8 <lcd_print>
	  lcd_print(2, 1, "Lutfen Bekleyin ");
 80088c2:	4a19      	ldr	r2, [pc, #100]	; (8008928 <main+0x1cc>)
 80088c4:	2101      	movs	r1, #1
 80088c6:	2002      	movs	r0, #2
 80088c8:	f7f7 ff76 	bl	80007b8 <lcd_print>
	  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 80088cc:	4a14      	ldr	r2, [pc, #80]	; (8008920 <main+0x1c4>)
 80088ce:	4913      	ldr	r1, [pc, #76]	; (800891c <main+0x1c0>)
 80088d0:	4816      	ldr	r0, [pc, #88]	; (800892c <main+0x1d0>)
 80088d2:	f7f7 fcaf 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(500);
 80088d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088da:	f000 fc59 	bl	8009190 <HAL_Delay>
	  takeMachineID(0);
	  HAL_Delay(300);
	  idKontrol = checkMachineID(&huart1, machineID);
  }*/

  lcd_clear();
 80088de:	f7f7 ff97 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 80088e2:	20c8      	movs	r0, #200	; 0xc8
 80088e4:	f000 fc54 	bl	8009190 <HAL_Delay>

  backLightTimer = millis;
 80088e8:	4b11      	ldr	r3, [pc, #68]	; (8008930 <main+0x1d4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a11      	ldr	r2, [pc, #68]	; (8008934 <main+0x1d8>)
 80088ee:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80088f0:	f7ff fd8c 	bl	800840c <mainLoop>
 80088f4:	e7fc      	b.n	80088f0 <main+0x194>
 80088f6:	bf00      	nop
 80088f8:	40010c00 	.word	0x40010c00
 80088fc:	20000e4c 	.word	0x20000e4c
 8008900:	20000df8 	.word	0x20000df8
 8008904:	40011000 	.word	0x40011000
 8008908:	40010800 	.word	0x40010800
 800890c:	0800e5fc 	.word	0x0800e5fc
 8008910:	0800e610 	.word	0x0800e610
 8008914:	20000be4 	.word	0x20000be4
 8008918:	20000c58 	.word	0x20000c58
 800891c:	20000bf0 	.word	0x20000bf0
 8008920:	20000c14 	.word	0x20000c14
 8008924:	0800e624 	.word	0x0800e624
 8008928:	0800e638 	.word	0x0800e638
 800892c:	20000e94 	.word	0x20000e94
 8008930:	20000bc4 	.word	0x20000bc4
 8008934:	20000be0 	.word	0x20000be0

08008938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b090      	sub	sp, #64	; 0x40
 800893c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800893e:	f107 0318 	add.w	r3, r7, #24
 8008942:	2228      	movs	r2, #40	; 0x28
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f004 fb36 	bl	800cfb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800894c:	1d3b      	adds	r3, r7, #4
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	605a      	str	r2, [r3, #4]
 8008954:	609a      	str	r2, [r3, #8]
 8008956:	60da      	str	r2, [r3, #12]
 8008958:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800895a:	2301      	movs	r3, #1
 800895c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800895e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008962:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008964:	2300      	movs	r3, #0
 8008966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008968:	2301      	movs	r3, #1
 800896a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800896c:	2302      	movs	r3, #2
 800896e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008976:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800897c:	f107 0318 	add.w	r3, r7, #24
 8008980:	4618      	mov	r0, r3
 8008982:	f002 fc3f 	bl	800b204 <HAL_RCC_OscConfig>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800898c:	f000 f9a2 	bl	8008cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008990:	230f      	movs	r3, #15
 8008992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008994:	2302      	movs	r3, #2
 8008996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800899c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80089a6:	1d3b      	adds	r3, r7, #4
 80089a8:	2102      	movs	r1, #2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f002 feac 	bl	800b708 <HAL_RCC_ClockConfig>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80089b6:	f000 f98d 	bl	8008cd4 <Error_Handler>
  }
}
 80089ba:	bf00      	nop
 80089bc:	3740      	adds	r7, #64	; 0x40
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
	...

080089c4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80089c8:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <MX_CAN_Init+0x60>)
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <MX_CAN_Init+0x64>)
 80089cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80089ce:	4b15      	ldr	r3, [pc, #84]	; (8008a24 <MX_CAN_Init+0x60>)
 80089d0:	2210      	movs	r2, #16
 80089d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80089d4:	4b13      	ldr	r3, [pc, #76]	; (8008a24 <MX_CAN_Init+0x60>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80089da:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <MX_CAN_Init+0x60>)
 80089dc:	2200      	movs	r2, #0
 80089de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80089e0:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <MX_CAN_Init+0x60>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80089e6:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <MX_CAN_Init+0x60>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80089ec:	4b0d      	ldr	r3, [pc, #52]	; (8008a24 <MX_CAN_Init+0x60>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80089f2:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <MX_CAN_Init+0x60>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80089f8:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <MX_CAN_Init+0x60>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <MX_CAN_Init+0x60>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008a04:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <MX_CAN_Init+0x60>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008a0a:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <MX_CAN_Init+0x60>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008a10:	4804      	ldr	r0, [pc, #16]	; (8008a24 <MX_CAN_Init+0x60>)
 8008a12:	f000 fbe1 	bl	80091d8 <HAL_CAN_Init>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008a1c:	f000 f95a 	bl	8008cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008a20:	bf00      	nop
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20000dd0 	.word	0x20000dd0
 8008a28:	40006400 	.word	0x40006400

08008a2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008a30:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a32:	4a13      	ldr	r2, [pc, #76]	; (8008a80 <MX_I2C1_Init+0x54>)
 8008a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008a36:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a38:	4a12      	ldr	r2, [pc, #72]	; (8008a84 <MX_I2C1_Init+0x58>)
 8008a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008a42:	4b0e      	ldr	r3, [pc, #56]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a50:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a5c:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a68:	4804      	ldr	r0, [pc, #16]	; (8008a7c <MX_I2C1_Init+0x50>)
 8008a6a:	f001 f9a9 	bl	8009dc0 <HAL_I2C_Init>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008a74:	f000 f92e 	bl	8008cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008a78:	bf00      	nop
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20000df8 	.word	0x20000df8
 8008a80:	40005400 	.word	0x40005400
 8008a84:	00061a80 	.word	0x00061a80

08008a88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a8e:	f107 0308 	add.w	r3, r7, #8
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	605a      	str	r2, [r3, #4]
 8008a98:	609a      	str	r2, [r3, #8]
 8008a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a9c:	463b      	mov	r3, r7
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008aa4:	4b1f      	ldr	r3, [pc, #124]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008aa6:	4a20      	ldr	r2, [pc, #128]	; (8008b28 <MX_TIM1_Init+0xa0>)
 8008aa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008aaa:	4b1e      	ldr	r3, [pc, #120]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008aac:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008ab0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ab2:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008ab8:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008aba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008abe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ac0:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008ac6:	4b17      	ldr	r3, [pc, #92]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008acc:	4b15      	ldr	r3, [pc, #84]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008ad2:	4814      	ldr	r0, [pc, #80]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008ad4:	f002 ffa6 	bl	800ba24 <HAL_TIM_Base_Init>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008ade:	f000 f8f9 	bl	8008cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	4619      	mov	r1, r3
 8008aee:	480d      	ldr	r0, [pc, #52]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008af0:	f003 f950 	bl	800bd94 <HAL_TIM_ConfigClockSource>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008afa:	f000 f8eb 	bl	8008cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008afe:	2300      	movs	r3, #0
 8008b00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b02:	2300      	movs	r3, #0
 8008b04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008b06:	463b      	mov	r3, r7
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4806      	ldr	r0, [pc, #24]	; (8008b24 <MX_TIM1_Init+0x9c>)
 8008b0c:	f003 fb3e 	bl	800c18c <HAL_TIMEx_MasterConfigSynchronization>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008b16:	f000 f8dd 	bl	8008cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008b1a:	bf00      	nop
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000e4c 	.word	0x20000e4c
 8008b28:	40012c00 	.word	0x40012c00

08008b2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b32:	4a12      	ldr	r2, [pc, #72]	; (8008b7c <MX_USART1_UART_Init+0x50>)
 8008b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008b36:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008b3e:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008b44:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008b4a:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b52:	220c      	movs	r2, #12
 8008b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b56:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b5c:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008b62:	4805      	ldr	r0, [pc, #20]	; (8008b78 <MX_USART1_UART_Init+0x4c>)
 8008b64:	f003 fb90 	bl	800c288 <HAL_UART_Init>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008b6e:	f000 f8b1 	bl	8008cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000e94 	.word	0x20000e94
 8008b7c:	40013800 	.word	0x40013800

08008b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b86:	f107 0310 	add.w	r3, r7, #16
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	605a      	str	r2, [r3, #4]
 8008b90:	609a      	str	r2, [r3, #8]
 8008b92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b94:	4b4b      	ldr	r3, [pc, #300]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	4a4a      	ldr	r2, [pc, #296]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008b9a:	f043 0310 	orr.w	r3, r3, #16
 8008b9e:	6193      	str	r3, [r2, #24]
 8008ba0:	4b48      	ldr	r3, [pc, #288]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008bac:	4b45      	ldr	r3, [pc, #276]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	4a44      	ldr	r2, [pc, #272]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008bb2:	f043 0320 	orr.w	r3, r3, #32
 8008bb6:	6193      	str	r3, [r2, #24]
 8008bb8:	4b42      	ldr	r3, [pc, #264]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	f003 0320 	and.w	r3, r3, #32
 8008bc0:	60bb      	str	r3, [r7, #8]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bc4:	4b3f      	ldr	r3, [pc, #252]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	4a3e      	ldr	r2, [pc, #248]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008bca:	f043 0304 	orr.w	r3, r3, #4
 8008bce:	6193      	str	r3, [r2, #24]
 8008bd0:	4b3c      	ldr	r3, [pc, #240]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	607b      	str	r3, [r7, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bdc:	4b39      	ldr	r3, [pc, #228]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	4a38      	ldr	r2, [pc, #224]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008be2:	f043 0308 	orr.w	r3, r3, #8
 8008be6:	6193      	str	r3, [r2, #24]
 8008be8:	4b36      	ldr	r3, [pc, #216]	; (8008cc4 <MX_GPIO_Init+0x144>)
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	603b      	str	r3, [r7, #0]
 8008bf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	21f0      	movs	r1, #240	; 0xf0
 8008bf8:	4833      	ldr	r0, [pc, #204]	; (8008cc8 <MX_GPIO_Init+0x148>)
 8008bfa:	f001 f8b0 	bl	8009d5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f241 0130 	movw	r1, #4144	; 0x1030
 8008c04:	4831      	ldr	r0, [pc, #196]	; (8008ccc <MX_GPIO_Init+0x14c>)
 8008c06:	f001 f8aa 	bl	8009d5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008c10:	482f      	ldr	r0, [pc, #188]	; (8008cd0 <MX_GPIO_Init+0x150>)
 8008c12:	f001 f8a4 	bl	8009d5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008c16:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008c1a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c24:	f107 0310 	add.w	r3, r7, #16
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4828      	ldr	r0, [pc, #160]	; (8008ccc <MX_GPIO_Init+0x14c>)
 8008c2c:	f000 fe20 	bl	8009870 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008c30:	f248 130f 	movw	r3, #33039	; 0x810f
 8008c34:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c3e:	f107 0310 	add.w	r3, r7, #16
 8008c42:	4619      	mov	r1, r3
 8008c44:	4820      	ldr	r0, [pc, #128]	; (8008cc8 <MX_GPIO_Init+0x148>)
 8008c46:	f000 fe13 	bl	8009870 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008c4a:	23f0      	movs	r3, #240	; 0xf0
 8008c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c56:	2302      	movs	r3, #2
 8008c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c5a:	f107 0310 	add.w	r3, r7, #16
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4819      	ldr	r0, [pc, #100]	; (8008cc8 <MX_GPIO_Init+0x148>)
 8008c62:	f000 fe05 	bl	8009870 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008c66:	f241 0330 	movw	r3, #4144	; 0x1030
 8008c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c74:	2302      	movs	r3, #2
 8008c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c78:	f107 0310 	add.w	r3, r7, #16
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4813      	ldr	r0, [pc, #76]	; (8008ccc <MX_GPIO_Init+0x14c>)
 8008c80:	f000 fdf6 	bl	8009870 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008c84:	f640 4307 	movw	r3, #3079	; 0xc07
 8008c88:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c92:	2302      	movs	r3, #2
 8008c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c96:	f107 0310 	add.w	r3, r7, #16
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	480c      	ldr	r0, [pc, #48]	; (8008cd0 <MX_GPIO_Init+0x150>)
 8008c9e:	f000 fde7 	bl	8009870 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008ca2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cb0:	f107 0310 	add.w	r3, r7, #16
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4806      	ldr	r0, [pc, #24]	; (8008cd0 <MX_GPIO_Init+0x150>)
 8008cb8:	f000 fdda 	bl	8009870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008cbc:	bf00      	nop
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	40021000 	.word	0x40021000
 8008cc8:	40010800 	.word	0x40010800
 8008ccc:	40011000 	.word	0x40011000
 8008cd0:	40010c00 	.word	0x40010c00

08008cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008cd8:	bf00      	nop
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr

08008ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008ce6:	4b15      	ldr	r3, [pc, #84]	; (8008d3c <HAL_MspInit+0x5c>)
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	4a14      	ldr	r2, [pc, #80]	; (8008d3c <HAL_MspInit+0x5c>)
 8008cec:	f043 0301 	orr.w	r3, r3, #1
 8008cf0:	6193      	str	r3, [r2, #24]
 8008cf2:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <HAL_MspInit+0x5c>)
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	60bb      	str	r3, [r7, #8]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cfe:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <HAL_MspInit+0x5c>)
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	4a0e      	ldr	r2, [pc, #56]	; (8008d3c <HAL_MspInit+0x5c>)
 8008d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d08:	61d3      	str	r3, [r2, #28]
 8008d0a:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <HAL_MspInit+0x5c>)
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d12:	607b      	str	r3, [r7, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008d16:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <HAL_MspInit+0x60>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	4a04      	ldr	r2, [pc, #16]	; (8008d40 <HAL_MspInit+0x60>)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d32:	bf00      	nop
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc80      	pop	{r7}
 8008d3a:	4770      	bx	lr
 8008d3c:	40021000 	.word	0x40021000
 8008d40:	40010000 	.word	0x40010000

08008d44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d4c:	f107 0310 	add.w	r3, r7, #16
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	605a      	str	r2, [r3, #4]
 8008d56:	609a      	str	r2, [r3, #8]
 8008d58:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1c      	ldr	r2, [pc, #112]	; (8008dd0 <HAL_CAN_MspInit+0x8c>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d131      	bne.n	8008dc8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008d64:	4b1b      	ldr	r3, [pc, #108]	; (8008dd4 <HAL_CAN_MspInit+0x90>)
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	4a1a      	ldr	r2, [pc, #104]	; (8008dd4 <HAL_CAN_MspInit+0x90>)
 8008d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d6e:	61d3      	str	r3, [r2, #28]
 8008d70:	4b18      	ldr	r3, [pc, #96]	; (8008dd4 <HAL_CAN_MspInit+0x90>)
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d7c:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <HAL_CAN_MspInit+0x90>)
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	4a14      	ldr	r2, [pc, #80]	; (8008dd4 <HAL_CAN_MspInit+0x90>)
 8008d82:	f043 0304 	orr.w	r3, r3, #4
 8008d86:	6193      	str	r3, [r2, #24]
 8008d88:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <HAL_CAN_MspInit+0x90>)
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	60bb      	str	r3, [r7, #8]
 8008d92:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008da2:	f107 0310 	add.w	r3, r7, #16
 8008da6:	4619      	mov	r1, r3
 8008da8:	480b      	ldr	r0, [pc, #44]	; (8008dd8 <HAL_CAN_MspInit+0x94>)
 8008daa:	f000 fd61 	bl	8009870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008db4:	2302      	movs	r3, #2
 8008db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008db8:	2303      	movs	r3, #3
 8008dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dbc:	f107 0310 	add.w	r3, r7, #16
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <HAL_CAN_MspInit+0x94>)
 8008dc4:	f000 fd54 	bl	8009870 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008dc8:	bf00      	nop
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40006400 	.word	0x40006400
 8008dd4:	40021000 	.word	0x40021000
 8008dd8:	40010800 	.word	0x40010800

08008ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b088      	sub	sp, #32
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de4:	f107 0310 	add.w	r3, r7, #16
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	605a      	str	r2, [r3, #4]
 8008dee:	609a      	str	r2, [r3, #8]
 8008df0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <HAL_I2C_MspInit+0x70>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d123      	bne.n	8008e44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dfc:	4b14      	ldr	r3, [pc, #80]	; (8008e50 <HAL_I2C_MspInit+0x74>)
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	4a13      	ldr	r2, [pc, #76]	; (8008e50 <HAL_I2C_MspInit+0x74>)
 8008e02:	f043 0308 	orr.w	r3, r3, #8
 8008e06:	6193      	str	r3, [r2, #24]
 8008e08:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <HAL_I2C_MspInit+0x74>)
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f003 0308 	and.w	r3, r3, #8
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008e14:	23c0      	movs	r3, #192	; 0xc0
 8008e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008e18:	2312      	movs	r3, #18
 8008e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e20:	f107 0310 	add.w	r3, r7, #16
 8008e24:	4619      	mov	r1, r3
 8008e26:	480b      	ldr	r0, [pc, #44]	; (8008e54 <HAL_I2C_MspInit+0x78>)
 8008e28:	f000 fd22 	bl	8009870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008e2c:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <HAL_I2C_MspInit+0x74>)
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	4a07      	ldr	r2, [pc, #28]	; (8008e50 <HAL_I2C_MspInit+0x74>)
 8008e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e36:	61d3      	str	r3, [r2, #28]
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <HAL_I2C_MspInit+0x74>)
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e40:	60bb      	str	r3, [r7, #8]
 8008e42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008e44:	bf00      	nop
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	40005400 	.word	0x40005400
 8008e50:	40021000 	.word	0x40021000
 8008e54:	40010c00 	.word	0x40010c00

08008e58 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a0a      	ldr	r2, [pc, #40]	; (8008e90 <HAL_I2C_MspDeInit+0x38>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d10d      	bne.n	8008e86 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008e6a:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <HAL_I2C_MspDeInit+0x3c>)
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <HAL_I2C_MspDeInit+0x3c>)
 8008e70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e74:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008e76:	2140      	movs	r1, #64	; 0x40
 8008e78:	4807      	ldr	r0, [pc, #28]	; (8008e98 <HAL_I2C_MspDeInit+0x40>)
 8008e7a:	f000 fe8d 	bl	8009b98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008e7e:	2180      	movs	r1, #128	; 0x80
 8008e80:	4805      	ldr	r0, [pc, #20]	; (8008e98 <HAL_I2C_MspDeInit+0x40>)
 8008e82:	f000 fe89 	bl	8009b98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008e86:	bf00      	nop
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	40005400 	.word	0x40005400
 8008e94:	40021000 	.word	0x40021000
 8008e98:	40010c00 	.word	0x40010c00

08008e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a0d      	ldr	r2, [pc, #52]	; (8008ee0 <HAL_TIM_Base_MspInit+0x44>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d113      	bne.n	8008ed6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008eae:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <HAL_TIM_Base_MspInit+0x48>)
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ee4 <HAL_TIM_Base_MspInit+0x48>)
 8008eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008eb8:	6193      	str	r3, [r2, #24]
 8008eba:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <HAL_TIM_Base_MspInit+0x48>)
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2100      	movs	r1, #0
 8008eca:	2019      	movs	r0, #25
 8008ecc:	f000 fb57 	bl	800957e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008ed0:	2019      	movs	r0, #25
 8008ed2:	f000 fb70 	bl	80095b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	40012c00 	.word	0x40012c00
 8008ee4:	40021000 	.word	0x40021000

08008ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ef0:	f107 0310 	add.w	r3, r7, #16
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	609a      	str	r2, [r3, #8]
 8008efc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a20      	ldr	r2, [pc, #128]	; (8008f84 <HAL_UART_MspInit+0x9c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d139      	bne.n	8008f7c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008f08:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <HAL_UART_MspInit+0xa0>)
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <HAL_UART_MspInit+0xa0>)
 8008f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f12:	6193      	str	r3, [r2, #24]
 8008f14:	4b1c      	ldr	r3, [pc, #112]	; (8008f88 <HAL_UART_MspInit+0xa0>)
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f20:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <HAL_UART_MspInit+0xa0>)
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <HAL_UART_MspInit+0xa0>)
 8008f26:	f043 0304 	orr.w	r3, r3, #4
 8008f2a:	6193      	str	r3, [r2, #24]
 8008f2c:	4b16      	ldr	r3, [pc, #88]	; (8008f88 <HAL_UART_MspInit+0xa0>)
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	60bb      	str	r3, [r7, #8]
 8008f36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f3e:	2302      	movs	r3, #2
 8008f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f42:	2303      	movs	r3, #3
 8008f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f46:	f107 0310 	add.w	r3, r7, #16
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	480f      	ldr	r0, [pc, #60]	; (8008f8c <HAL_UART_MspInit+0xa4>)
 8008f4e:	f000 fc8f 	bl	8009870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f60:	f107 0310 	add.w	r3, r7, #16
 8008f64:	4619      	mov	r1, r3
 8008f66:	4809      	ldr	r0, [pc, #36]	; (8008f8c <HAL_UART_MspInit+0xa4>)
 8008f68:	f000 fc82 	bl	8009870 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2100      	movs	r1, #0
 8008f70:	2025      	movs	r0, #37	; 0x25
 8008f72:	f000 fb04 	bl	800957e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008f76:	2025      	movs	r0, #37	; 0x25
 8008f78:	f000 fb1d 	bl	80095b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008f7c:	bf00      	nop
 8008f7e:	3720      	adds	r7, #32
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	40013800 	.word	0x40013800
 8008f88:	40021000 	.word	0x40021000
 8008f8c:	40010800 	.word	0x40010800

08008f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f90:	b480      	push	{r7}
 8008f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008f94:	e7fe      	b.n	8008f94 <NMI_Handler+0x4>

08008f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f96:	b480      	push	{r7}
 8008f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f9a:	e7fe      	b.n	8008f9a <HardFault_Handler+0x4>

08008f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fa0:	e7fe      	b.n	8008fa0 <MemManage_Handler+0x4>

08008fa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fa6:	e7fe      	b.n	8008fa6 <BusFault_Handler+0x4>

08008fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fac:	e7fe      	b.n	8008fac <UsageFault_Handler+0x4>

08008fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008fb2:	bf00      	nop
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr

08008fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008fbe:	bf00      	nop
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr

08008fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008fca:	bf00      	nop
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr

08008fd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008fd6:	f000 f8bf 	bl	8009158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008fda:	bf00      	nop
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008fe4:	4802      	ldr	r0, [pc, #8]	; (8008ff0 <TIM1_UP_IRQHandler+0x10>)
 8008fe6:	f002 fdcd 	bl	800bb84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008fea:	bf00      	nop
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000e4c 	.word	0x20000e4c

08008ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ff8:	4802      	ldr	r0, [pc, #8]	; (8009004 <USART1_IRQHandler+0x10>)
 8008ffa:	f003 f9cb 	bl	800c394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ffe:	bf00      	nop
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000e94 	.word	0x20000e94

08009008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009010:	4a14      	ldr	r2, [pc, #80]	; (8009064 <_sbrk+0x5c>)
 8009012:	4b15      	ldr	r3, [pc, #84]	; (8009068 <_sbrk+0x60>)
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800901c:	4b13      	ldr	r3, [pc, #76]	; (800906c <_sbrk+0x64>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009024:	4b11      	ldr	r3, [pc, #68]	; (800906c <_sbrk+0x64>)
 8009026:	4a12      	ldr	r2, [pc, #72]	; (8009070 <_sbrk+0x68>)
 8009028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800902a:	4b10      	ldr	r3, [pc, #64]	; (800906c <_sbrk+0x64>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4413      	add	r3, r2
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	429a      	cmp	r2, r3
 8009036:	d207      	bcs.n	8009048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009038:	f003 ffe6 	bl	800d008 <__errno>
 800903c:	4603      	mov	r3, r0
 800903e:	220c      	movs	r2, #12
 8009040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009042:	f04f 33ff 	mov.w	r3, #4294967295
 8009046:	e009      	b.n	800905c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009048:	4b08      	ldr	r3, [pc, #32]	; (800906c <_sbrk+0x64>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <_sbrk+0x64>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4413      	add	r3, r2
 8009056:	4a05      	ldr	r2, [pc, #20]	; (800906c <_sbrk+0x64>)
 8009058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800905a:	68fb      	ldr	r3, [r7, #12]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	2000c000 	.word	0x2000c000
 8009068:	00000400 	.word	0x00000400
 800906c:	20000edc 	.word	0x20000edc
 8009070:	20001030 	.word	0x20001030

08009074 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009074:	b480      	push	{r7}
 8009076:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009078:	bf00      	nop
 800907a:	46bd      	mov	sp, r7
 800907c:	bc80      	pop	{r7}
 800907e:	4770      	bx	lr

08009080 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009080:	480c      	ldr	r0, [pc, #48]	; (80090b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009082:	490d      	ldr	r1, [pc, #52]	; (80090b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009084:	4a0d      	ldr	r2, [pc, #52]	; (80090bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009088:	e002      	b.n	8009090 <LoopCopyDataInit>

0800908a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800908a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800908c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800908e:	3304      	adds	r3, #4

08009090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009094:	d3f9      	bcc.n	800908a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009096:	4a0a      	ldr	r2, [pc, #40]	; (80090c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009098:	4c0a      	ldr	r4, [pc, #40]	; (80090c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800909a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800909c:	e001      	b.n	80090a2 <LoopFillZerobss>

0800909e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800909e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090a0:	3204      	adds	r2, #4

080090a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090a4:	d3fb      	bcc.n	800909e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80090a6:	f7ff ffe5 	bl	8009074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80090aa:	f003 ffb3 	bl	800d014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80090ae:	f7ff fb55 	bl	800875c <main>
  bx lr
 80090b2:	4770      	bx	lr
  ldr r0, =_sdata
 80090b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80090b8:	20000a10 	.word	0x20000a10
  ldr r2, =_sidata
 80090bc:	0800e6d8 	.word	0x0800e6d8
  ldr r2, =_sbss
 80090c0:	20000a10 	.word	0x20000a10
  ldr r4, =_ebss
 80090c4:	2000102c 	.word	0x2000102c

080090c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80090c8:	e7fe      	b.n	80090c8 <ADC1_2_IRQHandler>
	...

080090cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80090d0:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <HAL_Init+0x28>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a07      	ldr	r2, [pc, #28]	; (80090f4 <HAL_Init+0x28>)
 80090d6:	f043 0310 	orr.w	r3, r3, #16
 80090da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090dc:	2003      	movs	r0, #3
 80090de:	f000 fa43 	bl	8009568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80090e2:	200f      	movs	r0, #15
 80090e4:	f000 f808 	bl	80090f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80090e8:	f7ff fdfa 	bl	8008ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	40022000 	.word	0x40022000

080090f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009100:	4b12      	ldr	r3, [pc, #72]	; (800914c <HAL_InitTick+0x54>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	4b12      	ldr	r3, [pc, #72]	; (8009150 <HAL_InitTick+0x58>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	4619      	mov	r1, r3
 800910a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800910e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009112:	fbb2 f3f3 	udiv	r3, r2, r3
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fa5b 	bl	80095d2 <HAL_SYSTICK_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e00e      	b.n	8009144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b0f      	cmp	r3, #15
 800912a:	d80a      	bhi.n	8009142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800912c:	2200      	movs	r2, #0
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	f000 fa23 	bl	800957e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009138:	4a06      	ldr	r2, [pc, #24]	; (8009154 <HAL_InitTick+0x5c>)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	e000      	b.n	8009144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200009b4 	.word	0x200009b4
 8009150:	200009bc 	.word	0x200009bc
 8009154:	200009b8 	.word	0x200009b8

08009158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <HAL_IncTick+0x1c>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <HAL_IncTick+0x20>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4413      	add	r3, r2
 8009168:	4a03      	ldr	r2, [pc, #12]	; (8009178 <HAL_IncTick+0x20>)
 800916a:	6013      	str	r3, [r2, #0]
}
 800916c:	bf00      	nop
 800916e:	46bd      	mov	sp, r7
 8009170:	bc80      	pop	{r7}
 8009172:	4770      	bx	lr
 8009174:	200009bc 	.word	0x200009bc
 8009178:	20000ee0 	.word	0x20000ee0

0800917c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  return uwTick;
 8009180:	4b02      	ldr	r3, [pc, #8]	; (800918c <HAL_GetTick+0x10>)
 8009182:	681b      	ldr	r3, [r3, #0]
}
 8009184:	4618      	mov	r0, r3
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr
 800918c:	20000ee0 	.word	0x20000ee0

08009190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009198:	f7ff fff0 	bl	800917c <HAL_GetTick>
 800919c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d005      	beq.n	80091b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80091aa:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <HAL_Delay+0x44>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4413      	add	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80091b6:	bf00      	nop
 80091b8:	f7ff ffe0 	bl	800917c <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d8f7      	bhi.n	80091b8 <HAL_Delay+0x28>
  {
  }
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	200009bc 	.word	0x200009bc

080091d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e0ed      	b.n	80093c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff fda4 	bl	8008d44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800920c:	f7ff ffb6 	bl	800917c <HAL_GetTick>
 8009210:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009212:	e012      	b.n	800923a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009214:	f7ff ffb2 	bl	800917c <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b0a      	cmp	r3, #10
 8009220:	d90b      	bls.n	800923a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2205      	movs	r2, #5
 8009232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e0c5      	b.n	80093c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0e5      	beq.n	8009214 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0202 	bic.w	r2, r2, #2
 8009256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009258:	f7ff ff90 	bl	800917c <HAL_GetTick>
 800925c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800925e:	e012      	b.n	8009286 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009260:	f7ff ff8c 	bl	800917c <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	2b0a      	cmp	r3, #10
 800926c:	d90b      	bls.n	8009286 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2205      	movs	r2, #5
 800927e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e09f      	b.n	80093c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e5      	bne.n	8009260 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	7e1b      	ldrb	r3, [r3, #24]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d108      	bne.n	80092ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e007      	b.n	80092be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	7e5b      	ldrb	r3, [r3, #25]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d108      	bne.n	80092d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	e007      	b.n	80092e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	7e9b      	ldrb	r3, [r3, #26]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d108      	bne.n	8009302 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0220 	orr.w	r2, r2, #32
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e007      	b.n	8009312 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f022 0220 	bic.w	r2, r2, #32
 8009310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7edb      	ldrb	r3, [r3, #27]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d108      	bne.n	800932c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0210 	bic.w	r2, r2, #16
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	e007      	b.n	800933c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f042 0210 	orr.w	r2, r2, #16
 800933a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7f1b      	ldrb	r3, [r3, #28]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d108      	bne.n	8009356 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0208 	orr.w	r2, r2, #8
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e007      	b.n	8009366 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0208 	bic.w	r2, r2, #8
 8009364:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	7f5b      	ldrb	r3, [r3, #29]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d108      	bne.n	8009380 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f042 0204 	orr.w	r2, r2, #4
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	e007      	b.n	8009390 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0204 	bic.w	r2, r2, #4
 800938e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	431a      	orrs	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	ea42 0103 	orr.w	r1, r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	1e5a      	subs	r2, r3, #1
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <__NVIC_SetPriorityGrouping>:
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093e0:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <__NVIC_SetPriorityGrouping+0x44>)
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80093ec:	4013      	ands	r3, r2
 80093ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80093f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80093fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009402:	4a04      	ldr	r2, [pc, #16]	; (8009414 <__NVIC_SetPriorityGrouping+0x44>)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	60d3      	str	r3, [r2, #12]
}
 8009408:	bf00      	nop
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	e000ed00 	.word	0xe000ed00

08009418 <__NVIC_GetPriorityGrouping>:
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <__NVIC_GetPriorityGrouping+0x18>)
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	0a1b      	lsrs	r3, r3, #8
 8009422:	f003 0307 	and.w	r3, r3, #7
}
 8009426:	4618      	mov	r0, r3
 8009428:	46bd      	mov	sp, r7
 800942a:	bc80      	pop	{r7}
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	e000ed00 	.word	0xe000ed00

08009434 <__NVIC_EnableIRQ>:
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800943e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009442:	2b00      	cmp	r3, #0
 8009444:	db0b      	blt.n	800945e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	f003 021f 	and.w	r2, r3, #31
 800944c:	4906      	ldr	r1, [pc, #24]	; (8009468 <__NVIC_EnableIRQ+0x34>)
 800944e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	2001      	movs	r0, #1
 8009456:	fa00 f202 	lsl.w	r2, r0, r2
 800945a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	bc80      	pop	{r7}
 8009466:	4770      	bx	lr
 8009468:	e000e100 	.word	0xe000e100

0800946c <__NVIC_SetPriority>:
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	6039      	str	r1, [r7, #0]
 8009476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800947c:	2b00      	cmp	r3, #0
 800947e:	db0a      	blt.n	8009496 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	b2da      	uxtb	r2, r3
 8009484:	490c      	ldr	r1, [pc, #48]	; (80094b8 <__NVIC_SetPriority+0x4c>)
 8009486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800948a:	0112      	lsls	r2, r2, #4
 800948c:	b2d2      	uxtb	r2, r2
 800948e:	440b      	add	r3, r1
 8009490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009494:	e00a      	b.n	80094ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	b2da      	uxtb	r2, r3
 800949a:	4908      	ldr	r1, [pc, #32]	; (80094bc <__NVIC_SetPriority+0x50>)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	f003 030f 	and.w	r3, r3, #15
 80094a2:	3b04      	subs	r3, #4
 80094a4:	0112      	lsls	r2, r2, #4
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	440b      	add	r3, r1
 80094aa:	761a      	strb	r2, [r3, #24]
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bc80      	pop	{r7}
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	e000e100 	.word	0xe000e100
 80094bc:	e000ed00 	.word	0xe000ed00

080094c0 <NVIC_EncodePriority>:
{
 80094c0:	b480      	push	{r7}
 80094c2:	b089      	sub	sp, #36	; 0x24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	f1c3 0307 	rsb	r3, r3, #7
 80094da:	2b04      	cmp	r3, #4
 80094dc:	bf28      	it	cs
 80094de:	2304      	movcs	r3, #4
 80094e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	3304      	adds	r3, #4
 80094e6:	2b06      	cmp	r3, #6
 80094e8:	d902      	bls.n	80094f0 <NVIC_EncodePriority+0x30>
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	3b03      	subs	r3, #3
 80094ee:	e000      	b.n	80094f2 <NVIC_EncodePriority+0x32>
 80094f0:	2300      	movs	r3, #0
 80094f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094f4:	f04f 32ff 	mov.w	r2, #4294967295
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	fa02 f303 	lsl.w	r3, r2, r3
 80094fe:	43da      	mvns	r2, r3
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	401a      	ands	r2, r3
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009508:	f04f 31ff 	mov.w	r1, #4294967295
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	fa01 f303 	lsl.w	r3, r1, r3
 8009512:	43d9      	mvns	r1, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009518:	4313      	orrs	r3, r2
}
 800951a:	4618      	mov	r0, r3
 800951c:	3724      	adds	r7, #36	; 0x24
 800951e:	46bd      	mov	sp, r7
 8009520:	bc80      	pop	{r7}
 8009522:	4770      	bx	lr

08009524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3b01      	subs	r3, #1
 8009530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009534:	d301      	bcc.n	800953a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009536:	2301      	movs	r3, #1
 8009538:	e00f      	b.n	800955a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800953a:	4a0a      	ldr	r2, [pc, #40]	; (8009564 <SysTick_Config+0x40>)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3b01      	subs	r3, #1
 8009540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009542:	210f      	movs	r1, #15
 8009544:	f04f 30ff 	mov.w	r0, #4294967295
 8009548:	f7ff ff90 	bl	800946c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800954c:	4b05      	ldr	r3, [pc, #20]	; (8009564 <SysTick_Config+0x40>)
 800954e:	2200      	movs	r2, #0
 8009550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009552:	4b04      	ldr	r3, [pc, #16]	; (8009564 <SysTick_Config+0x40>)
 8009554:	2207      	movs	r2, #7
 8009556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	e000e010 	.word	0xe000e010

08009568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7ff ff2d 	bl	80093d0 <__NVIC_SetPriorityGrouping>
}
 8009576:	bf00      	nop
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800957e:	b580      	push	{r7, lr}
 8009580:	b086      	sub	sp, #24
 8009582:	af00      	add	r7, sp, #0
 8009584:	4603      	mov	r3, r0
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
 800958a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800958c:	2300      	movs	r3, #0
 800958e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009590:	f7ff ff42 	bl	8009418 <__NVIC_GetPriorityGrouping>
 8009594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	68b9      	ldr	r1, [r7, #8]
 800959a:	6978      	ldr	r0, [r7, #20]
 800959c:	f7ff ff90 	bl	80094c0 <NVIC_EncodePriority>
 80095a0:	4602      	mov	r2, r0
 80095a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff ff5f 	bl	800946c <__NVIC_SetPriority>
}
 80095ae:	bf00      	nop
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	4603      	mov	r3, r0
 80095be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80095c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff ff35 	bl	8009434 <__NVIC_EnableIRQ>
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff ffa2 	bl	8009524 <SysTick_Config>
 80095e0:	4603      	mov	r3, r0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d008      	beq.n	8009614 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2204      	movs	r2, #4
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e020      	b.n	8009656 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 020e 	bic.w	r2, r2, #14
 8009622:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0201 	bic.w	r2, r2, #1
 8009632:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963c:	2101      	movs	r1, #1
 800963e:	fa01 f202 	lsl.w	r2, r1, r2
 8009642:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009654:	7bfb      	ldrb	r3, [r7, #15]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	bc80      	pop	{r7}
 800965e:	4770      	bx	lr

08009660 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b02      	cmp	r3, #2
 8009676:	d005      	beq.n	8009684 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2204      	movs	r2, #4
 800967c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	e0d6      	b.n	8009832 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f022 020e 	bic.w	r2, r2, #14
 8009692:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0201 	bic.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	4b64      	ldr	r3, [pc, #400]	; (800983c <HAL_DMA_Abort_IT+0x1dc>)
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d958      	bls.n	8009762 <HAL_DMA_Abort_IT+0x102>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a62      	ldr	r2, [pc, #392]	; (8009840 <HAL_DMA_Abort_IT+0x1e0>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d04f      	beq.n	800975a <HAL_DMA_Abort_IT+0xfa>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a61      	ldr	r2, [pc, #388]	; (8009844 <HAL_DMA_Abort_IT+0x1e4>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d048      	beq.n	8009756 <HAL_DMA_Abort_IT+0xf6>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a5f      	ldr	r2, [pc, #380]	; (8009848 <HAL_DMA_Abort_IT+0x1e8>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d040      	beq.n	8009750 <HAL_DMA_Abort_IT+0xf0>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a5e      	ldr	r2, [pc, #376]	; (800984c <HAL_DMA_Abort_IT+0x1ec>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d038      	beq.n	800974a <HAL_DMA_Abort_IT+0xea>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a5c      	ldr	r2, [pc, #368]	; (8009850 <HAL_DMA_Abort_IT+0x1f0>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d030      	beq.n	8009744 <HAL_DMA_Abort_IT+0xe4>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a5b      	ldr	r2, [pc, #364]	; (8009854 <HAL_DMA_Abort_IT+0x1f4>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d028      	beq.n	800973e <HAL_DMA_Abort_IT+0xde>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a52      	ldr	r2, [pc, #328]	; (800983c <HAL_DMA_Abort_IT+0x1dc>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d020      	beq.n	8009738 <HAL_DMA_Abort_IT+0xd8>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a57      	ldr	r2, [pc, #348]	; (8009858 <HAL_DMA_Abort_IT+0x1f8>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d019      	beq.n	8009734 <HAL_DMA_Abort_IT+0xd4>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a55      	ldr	r2, [pc, #340]	; (800985c <HAL_DMA_Abort_IT+0x1fc>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d012      	beq.n	8009730 <HAL_DMA_Abort_IT+0xd0>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a54      	ldr	r2, [pc, #336]	; (8009860 <HAL_DMA_Abort_IT+0x200>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00a      	beq.n	800972a <HAL_DMA_Abort_IT+0xca>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a52      	ldr	r2, [pc, #328]	; (8009864 <HAL_DMA_Abort_IT+0x204>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d102      	bne.n	8009724 <HAL_DMA_Abort_IT+0xc4>
 800971e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009722:	e01b      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 8009724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009728:	e018      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 800972a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800972e:	e015      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 8009730:	2310      	movs	r3, #16
 8009732:	e013      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 8009734:	2301      	movs	r3, #1
 8009736:	e011      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 8009738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800973c:	e00e      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 800973e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009742:	e00b      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 8009744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009748:	e008      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 800974a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800974e:	e005      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 8009750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009754:	e002      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 8009756:	2310      	movs	r3, #16
 8009758:	e000      	b.n	800975c <HAL_DMA_Abort_IT+0xfc>
 800975a:	2301      	movs	r3, #1
 800975c:	4a42      	ldr	r2, [pc, #264]	; (8009868 <HAL_DMA_Abort_IT+0x208>)
 800975e:	6053      	str	r3, [r2, #4]
 8009760:	e057      	b.n	8009812 <HAL_DMA_Abort_IT+0x1b2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a36      	ldr	r2, [pc, #216]	; (8009840 <HAL_DMA_Abort_IT+0x1e0>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d04f      	beq.n	800980c <HAL_DMA_Abort_IT+0x1ac>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a34      	ldr	r2, [pc, #208]	; (8009844 <HAL_DMA_Abort_IT+0x1e4>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d048      	beq.n	8009808 <HAL_DMA_Abort_IT+0x1a8>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a33      	ldr	r2, [pc, #204]	; (8009848 <HAL_DMA_Abort_IT+0x1e8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d040      	beq.n	8009802 <HAL_DMA_Abort_IT+0x1a2>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a31      	ldr	r2, [pc, #196]	; (800984c <HAL_DMA_Abort_IT+0x1ec>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d038      	beq.n	80097fc <HAL_DMA_Abort_IT+0x19c>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a30      	ldr	r2, [pc, #192]	; (8009850 <HAL_DMA_Abort_IT+0x1f0>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d030      	beq.n	80097f6 <HAL_DMA_Abort_IT+0x196>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a2e      	ldr	r2, [pc, #184]	; (8009854 <HAL_DMA_Abort_IT+0x1f4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d028      	beq.n	80097f0 <HAL_DMA_Abort_IT+0x190>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a26      	ldr	r2, [pc, #152]	; (800983c <HAL_DMA_Abort_IT+0x1dc>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d020      	beq.n	80097ea <HAL_DMA_Abort_IT+0x18a>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a2a      	ldr	r2, [pc, #168]	; (8009858 <HAL_DMA_Abort_IT+0x1f8>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d019      	beq.n	80097e6 <HAL_DMA_Abort_IT+0x186>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a29      	ldr	r2, [pc, #164]	; (800985c <HAL_DMA_Abort_IT+0x1fc>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d012      	beq.n	80097e2 <HAL_DMA_Abort_IT+0x182>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a27      	ldr	r2, [pc, #156]	; (8009860 <HAL_DMA_Abort_IT+0x200>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d00a      	beq.n	80097dc <HAL_DMA_Abort_IT+0x17c>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a26      	ldr	r2, [pc, #152]	; (8009864 <HAL_DMA_Abort_IT+0x204>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d102      	bne.n	80097d6 <HAL_DMA_Abort_IT+0x176>
 80097d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097d4:	e01b      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 80097d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097da:	e018      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 80097dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097e0:	e015      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 80097e2:	2310      	movs	r3, #16
 80097e4:	e013      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 80097e6:	2301      	movs	r3, #1
 80097e8:	e011      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 80097ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097ee:	e00e      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 80097f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80097f4:	e00b      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 80097f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097fa:	e008      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 80097fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009800:	e005      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 8009802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009806:	e002      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 8009808:	2310      	movs	r3, #16
 800980a:	e000      	b.n	800980e <HAL_DMA_Abort_IT+0x1ae>
 800980c:	2301      	movs	r3, #1
 800980e:	4a17      	ldr	r2, [pc, #92]	; (800986c <HAL_DMA_Abort_IT+0x20c>)
 8009810:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
    } 
  }
  return status;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	40020080 	.word	0x40020080
 8009840:	40020008 	.word	0x40020008
 8009844:	4002001c 	.word	0x4002001c
 8009848:	40020030 	.word	0x40020030
 800984c:	40020044 	.word	0x40020044
 8009850:	40020058 	.word	0x40020058
 8009854:	4002006c 	.word	0x4002006c
 8009858:	40020408 	.word	0x40020408
 800985c:	4002041c 	.word	0x4002041c
 8009860:	40020430 	.word	0x40020430
 8009864:	40020444 	.word	0x40020444
 8009868:	40020400 	.word	0x40020400
 800986c:	40020000 	.word	0x40020000

08009870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009870:	b480      	push	{r7}
 8009872:	b08b      	sub	sp, #44	; 0x2c
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800987a:	2300      	movs	r3, #0
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800987e:	2300      	movs	r3, #0
 8009880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009882:	e179      	b.n	8009b78 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009884:	2201      	movs	r2, #1
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	4013      	ands	r3, r2
 8009896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	429a      	cmp	r2, r3
 800989e:	f040 8168 	bne.w	8009b72 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	4a96      	ldr	r2, [pc, #600]	; (8009b00 <HAL_GPIO_Init+0x290>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d05e      	beq.n	800996a <HAL_GPIO_Init+0xfa>
 80098ac:	4a94      	ldr	r2, [pc, #592]	; (8009b00 <HAL_GPIO_Init+0x290>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d875      	bhi.n	800999e <HAL_GPIO_Init+0x12e>
 80098b2:	4a94      	ldr	r2, [pc, #592]	; (8009b04 <HAL_GPIO_Init+0x294>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d058      	beq.n	800996a <HAL_GPIO_Init+0xfa>
 80098b8:	4a92      	ldr	r2, [pc, #584]	; (8009b04 <HAL_GPIO_Init+0x294>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d86f      	bhi.n	800999e <HAL_GPIO_Init+0x12e>
 80098be:	4a92      	ldr	r2, [pc, #584]	; (8009b08 <HAL_GPIO_Init+0x298>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d052      	beq.n	800996a <HAL_GPIO_Init+0xfa>
 80098c4:	4a90      	ldr	r2, [pc, #576]	; (8009b08 <HAL_GPIO_Init+0x298>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d869      	bhi.n	800999e <HAL_GPIO_Init+0x12e>
 80098ca:	4a90      	ldr	r2, [pc, #576]	; (8009b0c <HAL_GPIO_Init+0x29c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d04c      	beq.n	800996a <HAL_GPIO_Init+0xfa>
 80098d0:	4a8e      	ldr	r2, [pc, #568]	; (8009b0c <HAL_GPIO_Init+0x29c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d863      	bhi.n	800999e <HAL_GPIO_Init+0x12e>
 80098d6:	4a8e      	ldr	r2, [pc, #568]	; (8009b10 <HAL_GPIO_Init+0x2a0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d046      	beq.n	800996a <HAL_GPIO_Init+0xfa>
 80098dc:	4a8c      	ldr	r2, [pc, #560]	; (8009b10 <HAL_GPIO_Init+0x2a0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d85d      	bhi.n	800999e <HAL_GPIO_Init+0x12e>
 80098e2:	2b12      	cmp	r3, #18
 80098e4:	d82a      	bhi.n	800993c <HAL_GPIO_Init+0xcc>
 80098e6:	2b12      	cmp	r3, #18
 80098e8:	d859      	bhi.n	800999e <HAL_GPIO_Init+0x12e>
 80098ea:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <HAL_GPIO_Init+0x80>)
 80098ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f0:	0800996b 	.word	0x0800996b
 80098f4:	08009945 	.word	0x08009945
 80098f8:	08009957 	.word	0x08009957
 80098fc:	08009999 	.word	0x08009999
 8009900:	0800999f 	.word	0x0800999f
 8009904:	0800999f 	.word	0x0800999f
 8009908:	0800999f 	.word	0x0800999f
 800990c:	0800999f 	.word	0x0800999f
 8009910:	0800999f 	.word	0x0800999f
 8009914:	0800999f 	.word	0x0800999f
 8009918:	0800999f 	.word	0x0800999f
 800991c:	0800999f 	.word	0x0800999f
 8009920:	0800999f 	.word	0x0800999f
 8009924:	0800999f 	.word	0x0800999f
 8009928:	0800999f 	.word	0x0800999f
 800992c:	0800999f 	.word	0x0800999f
 8009930:	0800999f 	.word	0x0800999f
 8009934:	0800994d 	.word	0x0800994d
 8009938:	08009961 	.word	0x08009961
 800993c:	4a75      	ldr	r2, [pc, #468]	; (8009b14 <HAL_GPIO_Init+0x2a4>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d013      	beq.n	800996a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009942:	e02c      	b.n	800999e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	623b      	str	r3, [r7, #32]
          break;
 800994a:	e029      	b.n	80099a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	3304      	adds	r3, #4
 8009952:	623b      	str	r3, [r7, #32]
          break;
 8009954:	e024      	b.n	80099a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	3308      	adds	r3, #8
 800995c:	623b      	str	r3, [r7, #32]
          break;
 800995e:	e01f      	b.n	80099a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	330c      	adds	r3, #12
 8009966:	623b      	str	r3, [r7, #32]
          break;
 8009968:	e01a      	b.n	80099a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d102      	bne.n	8009978 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009972:	2304      	movs	r3, #4
 8009974:	623b      	str	r3, [r7, #32]
          break;
 8009976:	e013      	b.n	80099a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d105      	bne.n	800998c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009980:	2308      	movs	r3, #8
 8009982:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	69fa      	ldr	r2, [r7, #28]
 8009988:	611a      	str	r2, [r3, #16]
          break;
 800998a:	e009      	b.n	80099a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800998c:	2308      	movs	r3, #8
 800998e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	615a      	str	r2, [r3, #20]
          break;
 8009996:	e003      	b.n	80099a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009998:	2300      	movs	r3, #0
 800999a:	623b      	str	r3, [r7, #32]
          break;
 800999c:	e000      	b.n	80099a0 <HAL_GPIO_Init+0x130>
          break;
 800999e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2bff      	cmp	r3, #255	; 0xff
 80099a4:	d801      	bhi.n	80099aa <HAL_GPIO_Init+0x13a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	e001      	b.n	80099ae <HAL_GPIO_Init+0x13e>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3304      	adds	r3, #4
 80099ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	2bff      	cmp	r3, #255	; 0xff
 80099b4:	d802      	bhi.n	80099bc <HAL_GPIO_Init+0x14c>
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	e002      	b.n	80099c2 <HAL_GPIO_Init+0x152>
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	3b08      	subs	r3, #8
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	210f      	movs	r1, #15
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	fa01 f303 	lsl.w	r3, r1, r3
 80099d0:	43db      	mvns	r3, r3
 80099d2:	401a      	ands	r2, r3
 80099d4:	6a39      	ldr	r1, [r7, #32]
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	fa01 f303 	lsl.w	r3, r1, r3
 80099dc:	431a      	orrs	r2, r3
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 80c1 	beq.w	8009b72 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80099f0:	4b49      	ldr	r3, [pc, #292]	; (8009b18 <HAL_GPIO_Init+0x2a8>)
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	4a48      	ldr	r2, [pc, #288]	; (8009b18 <HAL_GPIO_Init+0x2a8>)
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	6193      	str	r3, [r2, #24]
 80099fc:	4b46      	ldr	r3, [pc, #280]	; (8009b18 <HAL_GPIO_Init+0x2a8>)
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	60bb      	str	r3, [r7, #8]
 8009a06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009a08:	4a44      	ldr	r2, [pc, #272]	; (8009b1c <HAL_GPIO_Init+0x2ac>)
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	089b      	lsrs	r3, r3, #2
 8009a0e:	3302      	adds	r3, #2
 8009a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	220f      	movs	r2, #15
 8009a20:	fa02 f303 	lsl.w	r3, r2, r3
 8009a24:	43db      	mvns	r3, r3
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4013      	ands	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a3c      	ldr	r2, [pc, #240]	; (8009b20 <HAL_GPIO_Init+0x2b0>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d01f      	beq.n	8009a74 <HAL_GPIO_Init+0x204>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a3b      	ldr	r2, [pc, #236]	; (8009b24 <HAL_GPIO_Init+0x2b4>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d019      	beq.n	8009a70 <HAL_GPIO_Init+0x200>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a3a      	ldr	r2, [pc, #232]	; (8009b28 <HAL_GPIO_Init+0x2b8>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d013      	beq.n	8009a6c <HAL_GPIO_Init+0x1fc>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a39      	ldr	r2, [pc, #228]	; (8009b2c <HAL_GPIO_Init+0x2bc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d00d      	beq.n	8009a68 <HAL_GPIO_Init+0x1f8>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a38      	ldr	r2, [pc, #224]	; (8009b30 <HAL_GPIO_Init+0x2c0>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d007      	beq.n	8009a64 <HAL_GPIO_Init+0x1f4>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a37      	ldr	r2, [pc, #220]	; (8009b34 <HAL_GPIO_Init+0x2c4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d101      	bne.n	8009a60 <HAL_GPIO_Init+0x1f0>
 8009a5c:	2305      	movs	r3, #5
 8009a5e:	e00a      	b.n	8009a76 <HAL_GPIO_Init+0x206>
 8009a60:	2306      	movs	r3, #6
 8009a62:	e008      	b.n	8009a76 <HAL_GPIO_Init+0x206>
 8009a64:	2304      	movs	r3, #4
 8009a66:	e006      	b.n	8009a76 <HAL_GPIO_Init+0x206>
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e004      	b.n	8009a76 <HAL_GPIO_Init+0x206>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e002      	b.n	8009a76 <HAL_GPIO_Init+0x206>
 8009a70:	2301      	movs	r3, #1
 8009a72:	e000      	b.n	8009a76 <HAL_GPIO_Init+0x206>
 8009a74:	2300      	movs	r3, #0
 8009a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a78:	f002 0203 	and.w	r2, r2, #3
 8009a7c:	0092      	lsls	r2, r2, #2
 8009a7e:	4093      	lsls	r3, r2
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009a86:	4925      	ldr	r1, [pc, #148]	; (8009b1c <HAL_GPIO_Init+0x2ac>)
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	089b      	lsrs	r3, r3, #2
 8009a8c:	3302      	adds	r3, #2
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d006      	beq.n	8009aae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009aa0:	4b25      	ldr	r3, [pc, #148]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	4924      	ldr	r1, [pc, #144]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	608b      	str	r3, [r1, #8]
 8009aac:	e006      	b.n	8009abc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009aae:	4b22      	ldr	r3, [pc, #136]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	43db      	mvns	r3, r3
 8009ab6:	4920      	ldr	r1, [pc, #128]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d006      	beq.n	8009ad6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009ac8:	4b1b      	ldr	r3, [pc, #108]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009aca:	68da      	ldr	r2, [r3, #12]
 8009acc:	491a      	ldr	r1, [pc, #104]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60cb      	str	r3, [r1, #12]
 8009ad4:	e006      	b.n	8009ae4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009ad6:	4b18      	ldr	r3, [pc, #96]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	43db      	mvns	r3, r3
 8009ade:	4916      	ldr	r1, [pc, #88]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d025      	beq.n	8009b3c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009af0:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	4910      	ldr	r1, [pc, #64]	; (8009b38 <HAL_GPIO_Init+0x2c8>)
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	604b      	str	r3, [r1, #4]
 8009afc:	e025      	b.n	8009b4a <HAL_GPIO_Init+0x2da>
 8009afe:	bf00      	nop
 8009b00:	10320000 	.word	0x10320000
 8009b04:	10310000 	.word	0x10310000
 8009b08:	10220000 	.word	0x10220000
 8009b0c:	10210000 	.word	0x10210000
 8009b10:	10120000 	.word	0x10120000
 8009b14:	10110000 	.word	0x10110000
 8009b18:	40021000 	.word	0x40021000
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40010800 	.word	0x40010800
 8009b24:	40010c00 	.word	0x40010c00
 8009b28:	40011000 	.word	0x40011000
 8009b2c:	40011400 	.word	0x40011400
 8009b30:	40011800 	.word	0x40011800
 8009b34:	40011c00 	.word	0x40011c00
 8009b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009b3c:	4b15      	ldr	r3, [pc, #84]	; (8009b94 <HAL_GPIO_Init+0x324>)
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	43db      	mvns	r3, r3
 8009b44:	4913      	ldr	r1, [pc, #76]	; (8009b94 <HAL_GPIO_Init+0x324>)
 8009b46:	4013      	ands	r3, r2
 8009b48:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d006      	beq.n	8009b64 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009b56:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <HAL_GPIO_Init+0x324>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	490e      	ldr	r1, [pc, #56]	; (8009b94 <HAL_GPIO_Init+0x324>)
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	600b      	str	r3, [r1, #0]
 8009b62:	e006      	b.n	8009b72 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009b64:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <HAL_GPIO_Init+0x324>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	43db      	mvns	r3, r3
 8009b6c:	4909      	ldr	r1, [pc, #36]	; (8009b94 <HAL_GPIO_Init+0x324>)
 8009b6e:	4013      	ands	r3, r2
 8009b70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	3301      	adds	r3, #1
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f47f ae7e 	bne.w	8009884 <HAL_GPIO_Init+0x14>
  }
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	372c      	adds	r7, #44	; 0x2c
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr
 8009b94:	40010400 	.word	0x40010400

08009b98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b089      	sub	sp, #36	; 0x24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009ba6:	e0a6      	b.n	8009cf6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009ba8:	2201      	movs	r2, #1
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 8099 	beq.w	8009cf0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009bbe:	4a54      	ldr	r2, [pc, #336]	; (8009d10 <HAL_GPIO_DeInit+0x178>)
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	089b      	lsrs	r3, r3, #2
 8009bc4:	3302      	adds	r3, #2
 8009bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bca:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	f003 0303 	and.w	r3, r3, #3
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	220f      	movs	r2, #15
 8009bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a4c      	ldr	r2, [pc, #304]	; (8009d14 <HAL_GPIO_DeInit+0x17c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d01f      	beq.n	8009c28 <HAL_GPIO_DeInit+0x90>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a4b      	ldr	r2, [pc, #300]	; (8009d18 <HAL_GPIO_DeInit+0x180>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d019      	beq.n	8009c24 <HAL_GPIO_DeInit+0x8c>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a4a      	ldr	r2, [pc, #296]	; (8009d1c <HAL_GPIO_DeInit+0x184>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d013      	beq.n	8009c20 <HAL_GPIO_DeInit+0x88>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a49      	ldr	r2, [pc, #292]	; (8009d20 <HAL_GPIO_DeInit+0x188>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d00d      	beq.n	8009c1c <HAL_GPIO_DeInit+0x84>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a48      	ldr	r2, [pc, #288]	; (8009d24 <HAL_GPIO_DeInit+0x18c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d007      	beq.n	8009c18 <HAL_GPIO_DeInit+0x80>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a47      	ldr	r2, [pc, #284]	; (8009d28 <HAL_GPIO_DeInit+0x190>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d101      	bne.n	8009c14 <HAL_GPIO_DeInit+0x7c>
 8009c10:	2305      	movs	r3, #5
 8009c12:	e00a      	b.n	8009c2a <HAL_GPIO_DeInit+0x92>
 8009c14:	2306      	movs	r3, #6
 8009c16:	e008      	b.n	8009c2a <HAL_GPIO_DeInit+0x92>
 8009c18:	2304      	movs	r3, #4
 8009c1a:	e006      	b.n	8009c2a <HAL_GPIO_DeInit+0x92>
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e004      	b.n	8009c2a <HAL_GPIO_DeInit+0x92>
 8009c20:	2302      	movs	r3, #2
 8009c22:	e002      	b.n	8009c2a <HAL_GPIO_DeInit+0x92>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <HAL_GPIO_DeInit+0x92>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	f002 0203 	and.w	r2, r2, #3
 8009c30:	0092      	lsls	r2, r2, #2
 8009c32:	4093      	lsls	r3, r2
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d132      	bne.n	8009ca0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009c3a:	4b3c      	ldr	r3, [pc, #240]	; (8009d2c <HAL_GPIO_DeInit+0x194>)
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	43db      	mvns	r3, r3
 8009c42:	493a      	ldr	r1, [pc, #232]	; (8009d2c <HAL_GPIO_DeInit+0x194>)
 8009c44:	4013      	ands	r3, r2
 8009c46:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009c48:	4b38      	ldr	r3, [pc, #224]	; (8009d2c <HAL_GPIO_DeInit+0x194>)
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	43db      	mvns	r3, r3
 8009c50:	4936      	ldr	r1, [pc, #216]	; (8009d2c <HAL_GPIO_DeInit+0x194>)
 8009c52:	4013      	ands	r3, r2
 8009c54:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009c56:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <HAL_GPIO_DeInit+0x194>)
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	43db      	mvns	r3, r3
 8009c5e:	4933      	ldr	r1, [pc, #204]	; (8009d2c <HAL_GPIO_DeInit+0x194>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009c64:	4b31      	ldr	r3, [pc, #196]	; (8009d2c <HAL_GPIO_DeInit+0x194>)
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	43db      	mvns	r3, r3
 8009c6c:	492f      	ldr	r1, [pc, #188]	; (8009d2c <HAL_GPIO_DeInit+0x194>)
 8009c6e:	4013      	ands	r3, r2
 8009c70:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	220f      	movs	r2, #15
 8009c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c80:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009c82:	4a23      	ldr	r2, [pc, #140]	; (8009d10 <HAL_GPIO_DeInit+0x178>)
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	089b      	lsrs	r3, r3, #2
 8009c88:	3302      	adds	r3, #2
 8009c8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	43da      	mvns	r2, r3
 8009c92:	481f      	ldr	r0, [pc, #124]	; (8009d10 <HAL_GPIO_DeInit+0x178>)
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	089b      	lsrs	r3, r3, #2
 8009c98:	400a      	ands	r2, r1
 8009c9a:	3302      	adds	r3, #2
 8009c9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	2bff      	cmp	r3, #255	; 0xff
 8009ca4:	d801      	bhi.n	8009caa <HAL_GPIO_DeInit+0x112>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	e001      	b.n	8009cae <HAL_GPIO_DeInit+0x116>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3304      	adds	r3, #4
 8009cae:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	2bff      	cmp	r3, #255	; 0xff
 8009cb4:	d802      	bhi.n	8009cbc <HAL_GPIO_DeInit+0x124>
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	e002      	b.n	8009cc2 <HAL_GPIO_DeInit+0x12a>
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	3b08      	subs	r3, #8
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	210f      	movs	r1, #15
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	401a      	ands	r2, r3
 8009cd4:	2104      	movs	r1, #4
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cdc:	431a      	orrs	r2, r3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	43db      	mvns	r3, r3
 8009cea:	401a      	ands	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f47f af52 	bne.w	8009ba8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop
 8009d08:	3724      	adds	r7, #36	; 0x24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bc80      	pop	{r7}
 8009d0e:	4770      	bx	lr
 8009d10:	40010000 	.word	0x40010000
 8009d14:	40010800 	.word	0x40010800
 8009d18:	40010c00 	.word	0x40010c00
 8009d1c:	40011000 	.word	0x40011000
 8009d20:	40011400 	.word	0x40011400
 8009d24:	40011800 	.word	0x40011800
 8009d28:	40011c00 	.word	0x40011c00
 8009d2c:	40010400 	.word	0x40010400

08009d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	887b      	ldrh	r3, [r7, #2]
 8009d42:	4013      	ands	r3, r2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	73fb      	strb	r3, [r7, #15]
 8009d4c:	e001      	b.n	8009d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bc80      	pop	{r7}
 8009d5c:	4770      	bx	lr

08009d5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	460b      	mov	r3, r1
 8009d68:	807b      	strh	r3, [r7, #2]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d6e:	787b      	ldrb	r3, [r7, #1]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d74:	887a      	ldrh	r2, [r7, #2]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009d7a:	e003      	b.n	8009d84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009d7c:	887b      	ldrh	r3, [r7, #2]
 8009d7e:	041a      	lsls	r2, r3, #16
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	611a      	str	r2, [r3, #16]
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr

08009d8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b085      	sub	sp, #20
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	460b      	mov	r3, r1
 8009d98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009da0:	887a      	ldrh	r2, [r7, #2]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4013      	ands	r3, r2
 8009da6:	041a      	lsls	r2, r3, #16
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	43d9      	mvns	r1, r3
 8009dac:	887b      	ldrh	r3, [r7, #2]
 8009dae:	400b      	ands	r3, r1
 8009db0:	431a      	orrs	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	611a      	str	r2, [r3, #16]
}
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bc80      	pop	{r7}
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e12b      	b.n	800a02a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d106      	bne.n	8009dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fe fff8 	bl	8008ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2224      	movs	r2, #36	; 0x24
 8009df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0201 	bic.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009e24:	f001 fdb8 	bl	800b998 <HAL_RCC_GetPCLK1Freq>
 8009e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	4a81      	ldr	r2, [pc, #516]	; (800a034 <HAL_I2C_Init+0x274>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d807      	bhi.n	8009e44 <HAL_I2C_Init+0x84>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4a80      	ldr	r2, [pc, #512]	; (800a038 <HAL_I2C_Init+0x278>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bf94      	ite	ls
 8009e3c:	2301      	movls	r3, #1
 8009e3e:	2300      	movhi	r3, #0
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	e006      	b.n	8009e52 <HAL_I2C_Init+0x92>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4a7d      	ldr	r2, [pc, #500]	; (800a03c <HAL_I2C_Init+0x27c>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	bf94      	ite	ls
 8009e4c:	2301      	movls	r3, #1
 8009e4e:	2300      	movhi	r3, #0
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e0e7      	b.n	800a02a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4a78      	ldr	r2, [pc, #480]	; (800a040 <HAL_I2C_Init+0x280>)
 8009e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e62:	0c9b      	lsrs	r3, r3, #18
 8009e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
 8009e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	4a6a      	ldr	r2, [pc, #424]	; (800a034 <HAL_I2C_Init+0x274>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d802      	bhi.n	8009e94 <HAL_I2C_Init+0xd4>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3301      	adds	r3, #1
 8009e92:	e009      	b.n	8009ea8 <HAL_I2C_Init+0xe8>
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009e9a:	fb02 f303 	mul.w	r3, r2, r3
 8009e9e:	4a69      	ldr	r2, [pc, #420]	; (800a044 <HAL_I2C_Init+0x284>)
 8009ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea4:	099b      	lsrs	r3, r3, #6
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	6812      	ldr	r2, [r2, #0]
 8009eac:	430b      	orrs	r3, r1
 8009eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009eba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	495c      	ldr	r1, [pc, #368]	; (800a034 <HAL_I2C_Init+0x274>)
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	d819      	bhi.n	8009efc <HAL_I2C_Init+0x13c>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	1e59      	subs	r1, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ed6:	1c59      	adds	r1, r3, #1
 8009ed8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009edc:	400b      	ands	r3, r1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <HAL_I2C_Init+0x138>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1e59      	subs	r1, r3, #1
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ef6:	e051      	b.n	8009f9c <HAL_I2C_Init+0x1dc>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	e04f      	b.n	8009f9c <HAL_I2C_Init+0x1dc>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d111      	bne.n	8009f28 <HAL_I2C_Init+0x168>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	1e58      	subs	r0, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6859      	ldr	r1, [r3, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	440b      	add	r3, r1
 8009f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f16:	3301      	adds	r3, #1
 8009f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	bf0c      	ite	eq
 8009f20:	2301      	moveq	r3, #1
 8009f22:	2300      	movne	r3, #0
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	e012      	b.n	8009f4e <HAL_I2C_Init+0x18e>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	1e58      	subs	r0, r3, #1
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6859      	ldr	r1, [r3, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	440b      	add	r3, r1
 8009f36:	0099      	lsls	r1, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f3e:	3301      	adds	r3, #1
 8009f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bf0c      	ite	eq
 8009f48:	2301      	moveq	r3, #1
 8009f4a:	2300      	movne	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <HAL_I2C_Init+0x196>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e022      	b.n	8009f9c <HAL_I2C_Init+0x1dc>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10e      	bne.n	8009f7c <HAL_I2C_Init+0x1bc>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	1e58      	subs	r0, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6859      	ldr	r1, [r3, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	440b      	add	r3, r1
 8009f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f70:	3301      	adds	r3, #1
 8009f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f7a:	e00f      	b.n	8009f9c <HAL_I2C_Init+0x1dc>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	1e58      	subs	r0, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6859      	ldr	r1, [r3, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	440b      	add	r3, r1
 8009f8a:	0099      	lsls	r1, r3, #2
 8009f8c:	440b      	add	r3, r1
 8009f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f92:	3301      	adds	r3, #1
 8009f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	6809      	ldr	r1, [r1, #0]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69da      	ldr	r2, [r3, #28]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	6911      	ldr	r1, [r2, #16]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	68d2      	ldr	r2, [r2, #12]
 8009fd6:	4311      	orrs	r1, r2
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6812      	ldr	r2, [r2, #0]
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	695a      	ldr	r2, [r3, #20]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 0201 	orr.w	r2, r2, #1
 800a00a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	000186a0 	.word	0x000186a0
 800a038:	001e847f 	.word	0x001e847f
 800a03c:	003d08ff 	.word	0x003d08ff
 800a040:	431bde83 	.word	0x431bde83
 800a044:	10624dd3 	.word	0x10624dd3

0800a048 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e021      	b.n	800a09e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2224      	movs	r2, #36	; 0x24
 800a05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0201 	bic.w	r2, r2, #1
 800a070:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7fe fef0 	bl	8008e58 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b088      	sub	sp, #32
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	817b      	strh	r3, [r7, #10]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a0bc:	f7ff f85e 	bl	800917c <HAL_GetTick>
 800a0c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	f040 80e0 	bne.w	800a290 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	2319      	movs	r3, #25
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	4970      	ldr	r1, [pc, #448]	; (800a29c <HAL_I2C_Master_Transmit+0x1f4>)
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 fe5c 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e0d3      	b.n	800a292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d101      	bne.n	800a0f8 <HAL_I2C_Master_Transmit+0x50>
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	e0cc      	b.n	800a292 <HAL_I2C_Master_Transmit+0x1ea>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d007      	beq.n	800a11e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0201 	orr.w	r2, r2, #1
 800a11c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a12c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2221      	movs	r2, #33	; 0x21
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2210      	movs	r2, #16
 800a13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	893a      	ldrh	r2, [r7, #8]
 800a14e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a154:	b29a      	uxth	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	4a50      	ldr	r2, [pc, #320]	; (800a2a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800a15e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a160:	8979      	ldrh	r1, [r7, #10]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	6a3a      	ldr	r2, [r7, #32]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 fc16 	bl	800a998 <I2C_MasterRequestWrite>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e08d      	b.n	800a292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a176:	2300      	movs	r3, #0
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	613b      	str	r3, [r7, #16]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	613b      	str	r3, [r7, #16]
 800a18a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a18c:	e066      	b.n	800a25c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	6a39      	ldr	r1, [r7, #32]
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 ff1a 	bl	800afcc <I2C_WaitOnTXEFlagUntilTimeout>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00d      	beq.n	800a1ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d107      	bne.n	800a1b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e06b      	b.n	800a292 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	781a      	ldrb	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	f003 0304 	and.w	r3, r3, #4
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	d11b      	bne.n	800a230 <HAL_I2C_Master_Transmit+0x188>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d017      	beq.n	800a230 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	781a      	ldrb	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	3b01      	subs	r3, #1
 800a21e:	b29a      	uxth	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a228:	3b01      	subs	r3, #1
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	6a39      	ldr	r1, [r7, #32]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 ff11 	bl	800b05c <I2C_WaitOnBTFFlagUntilTimeout>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00d      	beq.n	800a25c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a244:	2b04      	cmp	r3, #4
 800a246:	d107      	bne.n	800a258 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a256:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e01a      	b.n	800a292 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a260:	2b00      	cmp	r3, #0
 800a262:	d194      	bne.n	800a18e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2220      	movs	r2, #32
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	e000      	b.n	800a292 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a290:	2302      	movs	r3, #2
  }
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	00100002 	.word	0x00100002
 800a2a0:	ffff0000 	.word	0xffff0000

0800a2a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	817b      	strh	r3, [r7, #10]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	813b      	strh	r3, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a2be:	f7fe ff5d 	bl	800917c <HAL_GetTick>
 800a2c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b20      	cmp	r3, #32
 800a2ce:	f040 80d9 	bne.w	800a484 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	2319      	movs	r3, #25
 800a2d8:	2201      	movs	r2, #1
 800a2da:	496d      	ldr	r1, [pc, #436]	; (800a490 <HAL_I2C_Mem_Write+0x1ec>)
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f000 fd5b 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e0cc      	b.n	800a486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d101      	bne.n	800a2fa <HAL_I2C_Mem_Write+0x56>
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e0c5      	b.n	800a486 <HAL_I2C_Mem_Write+0x1e2>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d007      	beq.n	800a320 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f042 0201 	orr.w	r2, r2, #1
 800a31e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a32e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2221      	movs	r2, #33	; 0x21
 800a334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2240      	movs	r2, #64	; 0x40
 800a33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a3a      	ldr	r2, [r7, #32]
 800a34a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a356:	b29a      	uxth	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4a4d      	ldr	r2, [pc, #308]	; (800a494 <HAL_I2C_Mem_Write+0x1f0>)
 800a360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a362:	88f8      	ldrh	r0, [r7, #6]
 800a364:	893a      	ldrh	r2, [r7, #8]
 800a366:	8979      	ldrh	r1, [r7, #10]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	4603      	mov	r3, r0
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 fb92 	bl	800aa9c <I2C_RequestMemoryWrite>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d052      	beq.n	800a424 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e081      	b.n	800a486 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 fe20 	bl	800afcc <I2C_WaitOnTXEFlagUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00d      	beq.n	800a3ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	2b04      	cmp	r3, #4
 800a398:	d107      	bne.n	800a3aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e06b      	b.n	800a486 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	781a      	ldrb	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d11b      	bne.n	800a424 <HAL_I2C_Mem_Write+0x180>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d017      	beq.n	800a424 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	781a      	ldrb	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	1c5a      	adds	r2, r3, #1
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a40e:	3b01      	subs	r3, #1
 800a410:	b29a      	uxth	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	3b01      	subs	r3, #1
 800a41e:	b29a      	uxth	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1aa      	bne.n	800a382 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 fe13 	bl	800b05c <I2C_WaitOnBTFFlagUntilTimeout>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00d      	beq.n	800a458 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a440:	2b04      	cmp	r3, #4
 800a442:	d107      	bne.n	800a454 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a452:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e016      	b.n	800a486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	e000      	b.n	800a486 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a484:	2302      	movs	r3, #2
  }
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	00100002 	.word	0x00100002
 800a494:	ffff0000 	.word	0xffff0000

0800a498 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08c      	sub	sp, #48	; 0x30
 800a49c:	af02      	add	r7, sp, #8
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	817b      	strh	r3, [r7, #10]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	813b      	strh	r3, [r7, #8]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a4b6:	f7fe fe61 	bl	800917c <HAL_GetTick>
 800a4ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b20      	cmp	r3, #32
 800a4c6:	f040 8244 	bne.w	800a952 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	2319      	movs	r3, #25
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	4982      	ldr	r1, [pc, #520]	; (800a6dc <HAL_I2C_Mem_Read+0x244>)
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 fc5f 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e237      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d101      	bne.n	800a4f2 <HAL_I2C_Mem_Read+0x5a>
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e230      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	2b01      	cmp	r3, #1
 800a506:	d007      	beq.n	800a518 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0201 	orr.w	r2, r2, #1
 800a516:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a526:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2222      	movs	r2, #34	; 0x22
 800a52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2240      	movs	r2, #64	; 0x40
 800a534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a54e:	b29a      	uxth	r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4a62      	ldr	r2, [pc, #392]	; (800a6e0 <HAL_I2C_Mem_Read+0x248>)
 800a558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a55a:	88f8      	ldrh	r0, [r7, #6]
 800a55c:	893a      	ldrh	r2, [r7, #8]
 800a55e:	8979      	ldrh	r1, [r7, #10]
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	9301      	str	r3, [sp, #4]
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	4603      	mov	r3, r0
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f000 fb2c 	bl	800abc8 <I2C_RequestMemoryRead>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e1ec      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d113      	bne.n	800a5aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a582:	2300      	movs	r3, #0
 800a584:	61fb      	str	r3, [r7, #28]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	61fb      	str	r3, [r7, #28]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	61fb      	str	r3, [r7, #28]
 800a596:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	e1c0      	b.n	800a92c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d11e      	bne.n	800a5f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5c2:	b672      	cpsid	i
}
 800a5c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	61bb      	str	r3, [r7, #24]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	61bb      	str	r3, [r7, #24]
 800a5da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a5ec:	b662      	cpsie	i
}
 800a5ee:	e035      	b.n	800a65c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d11e      	bne.n	800a636 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a606:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a608:	b672      	cpsid	i
}
 800a60a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a630:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a632:	b662      	cpsie	i
}
 800a634:	e012      	b.n	800a65c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a644:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a646:	2300      	movs	r3, #0
 800a648:	613b      	str	r3, [r7, #16]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	613b      	str	r3, [r7, #16]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	613b      	str	r3, [r7, #16]
 800a65a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a65c:	e166      	b.n	800a92c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a662:	2b03      	cmp	r3, #3
 800a664:	f200 811f 	bhi.w	800a8a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d123      	bne.n	800a6b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 fd39 	bl	800b0ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e167      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6b6:	e139      	b.n	800a92c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d152      	bne.n	800a766 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	4906      	ldr	r1, [pc, #24]	; (800a6e4 <HAL_I2C_Mem_Read+0x24c>)
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 fb64 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d008      	beq.n	800a6e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e13c      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
 800a6da:	bf00      	nop
 800a6dc:	00100002 	.word	0x00100002
 800a6e0:	ffff0000 	.word	0xffff0000
 800a6e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a6e8:	b672      	cpsid	i
}
 800a6ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	691a      	ldr	r2, [r3, #16]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	b2d2      	uxtb	r2, r2
 800a708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a718:	3b01      	subs	r3, #1
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a724:	b29b      	uxth	r3, r3
 800a726:	3b01      	subs	r3, #1
 800a728:	b29a      	uxth	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a72e:	b662      	cpsie	i
}
 800a730:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	b2d2      	uxtb	r2, r2
 800a73e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a74e:	3b01      	subs	r3, #1
 800a750:	b29a      	uxth	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	3b01      	subs	r3, #1
 800a75e:	b29a      	uxth	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a764:	e0e2      	b.n	800a92c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	2200      	movs	r2, #0
 800a76e:	497b      	ldr	r1, [pc, #492]	; (800a95c <HAL_I2C_Mem_Read+0x4c4>)
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fb11 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e0e9      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a78e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a790:	b672      	cpsid	i
}
 800a792:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	691a      	ldr	r2, [r3, #16]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	b2d2      	uxtb	r2, r2
 800a7a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a7c6:	4b66      	ldr	r3, [pc, #408]	; (800a960 <HAL_I2C_Mem_Read+0x4c8>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	08db      	lsrs	r3, r3, #3
 800a7cc:	4a65      	ldr	r2, [pc, #404]	; (800a964 <HAL_I2C_Mem_Read+0x4cc>)
 800a7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d2:	0a1a      	lsrs	r2, r3, #8
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	00da      	lsls	r2, r3, #3
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d118      	bne.n	800a81e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a806:	f043 0220 	orr.w	r2, r3, #32
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a80e:	b662      	cpsie	i
}
 800a810:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e09a      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b04      	cmp	r3, #4
 800a82a:	d1d9      	bne.n	800a7e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a83a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	b2d2      	uxtb	r2, r2
 800a848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a858:	3b01      	subs	r3, #1
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a864:	b29b      	uxth	r3, r3
 800a866:	3b01      	subs	r3, #1
 800a868:	b29a      	uxth	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a86e:	b662      	cpsie	i
}
 800a870:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	691a      	ldr	r2, [r3, #16]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	b2d2      	uxtb	r2, r2
 800a87e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a88e:	3b01      	subs	r3, #1
 800a890:	b29a      	uxth	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	3b01      	subs	r3, #1
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a8a4:	e042      	b.n	800a92c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f000 fc1e 	bl	800b0ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e04c      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	691a      	ldr	r2, [r3, #16]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	b2d2      	uxtb	r2, r2
 800a8c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d118      	bne.n	800a92c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	691a      	ldr	r2, [r3, #16]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	b2d2      	uxtb	r2, r2
 800a906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	1c5a      	adds	r2, r3, #1
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a916:	3b01      	subs	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a922:	b29b      	uxth	r3, r3
 800a924:	3b01      	subs	r3, #1
 800a926:	b29a      	uxth	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a930:	2b00      	cmp	r3, #0
 800a932:	f47f ae94 	bne.w	800a65e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2220      	movs	r2, #32
 800a93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	e000      	b.n	800a954 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a952:	2302      	movs	r3, #2
  }
}
 800a954:	4618      	mov	r0, r3
 800a956:	3728      	adds	r7, #40	; 0x28
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	00010004 	.word	0x00010004
 800a960:	200009b4 	.word	0x200009b4
 800a964:	14f8b589 	.word	0x14f8b589

0800a968 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a976:	b2db      	uxtb	r3, r3
}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bc80      	pop	{r7}
 800a980:	4770      	bx	lr

0800a982 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	bc80      	pop	{r7}
 800a996:	4770      	bx	lr

0800a998 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af02      	add	r7, sp, #8
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	607a      	str	r2, [r7, #4]
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b08      	cmp	r3, #8
 800a9b2:	d006      	beq.n	800a9c2 <I2C_MasterRequestWrite+0x2a>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d003      	beq.n	800a9c2 <I2C_MasterRequestWrite+0x2a>
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a9c0:	d108      	bne.n	800a9d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	e00b      	b.n	800a9ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d8:	2b12      	cmp	r3, #18
 800a9da:	d107      	bne.n	800a9ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 f9cd 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00d      	beq.n	800aa20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa12:	d103      	bne.n	800aa1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e035      	b.n	800aa8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa28:	d108      	bne.n	800aa3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa2a:	897b      	ldrh	r3, [r7, #10]
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	461a      	mov	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa38:	611a      	str	r2, [r3, #16]
 800aa3a:	e01b      	b.n	800aa74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800aa3c:	897b      	ldrh	r3, [r7, #10]
 800aa3e:	11db      	asrs	r3, r3, #7
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	f003 0306 	and.w	r3, r3, #6
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	f063 030f 	orn	r3, r3, #15
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	490e      	ldr	r1, [pc, #56]	; (800aa94 <I2C_MasterRequestWrite+0xfc>)
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 fa16 	bl	800ae8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e010      	b.n	800aa8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800aa6a:	897b      	ldrh	r3, [r7, #10]
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	4907      	ldr	r1, [pc, #28]	; (800aa98 <I2C_MasterRequestWrite+0x100>)
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 fa06 	bl	800ae8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e000      	b.n	800aa8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	00010008 	.word	0x00010008
 800aa98:	00010002 	.word	0x00010002

0800aa9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af02      	add	r7, sp, #8
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	4611      	mov	r1, r2
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	4603      	mov	r3, r0
 800aaac:	817b      	strh	r3, [r7, #10]
 800aaae:	460b      	mov	r3, r1
 800aab0:	813b      	strh	r3, [r7, #8]
 800aab2:	4613      	mov	r3, r2
 800aab4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	2200      	movs	r2, #0
 800aace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 f960 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00d      	beq.n	800aafa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaec:	d103      	bne.n	800aaf6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e05f      	b.n	800abba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aafa:	897b      	ldrh	r3, [r7, #10]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	461a      	mov	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	6a3a      	ldr	r2, [r7, #32]
 800ab0e:	492d      	ldr	r1, [pc, #180]	; (800abc4 <I2C_RequestMemoryWrite+0x128>)
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 f9bb 	bl	800ae8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e04c      	b.n	800abba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab20:	2300      	movs	r3, #0
 800ab22:	617b      	str	r3, [r7, #20]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	617b      	str	r3, [r7, #20]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab38:	6a39      	ldr	r1, [r7, #32]
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 fa46 	bl	800afcc <I2C_WaitOnTXEFlagUntilTimeout>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00d      	beq.n	800ab62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	d107      	bne.n	800ab5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e02b      	b.n	800abba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab62:	88fb      	ldrh	r3, [r7, #6]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d105      	bne.n	800ab74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab68:	893b      	ldrh	r3, [r7, #8]
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	611a      	str	r2, [r3, #16]
 800ab72:	e021      	b.n	800abb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ab74:	893b      	ldrh	r3, [r7, #8]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab84:	6a39      	ldr	r1, [r7, #32]
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 fa20 	bl	800afcc <I2C_WaitOnTXEFlagUntilTimeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00d      	beq.n	800abae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	d107      	bne.n	800abaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e005      	b.n	800abba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abae:	893b      	ldrh	r3, [r7, #8]
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	00010002 	.word	0x00010002

0800abc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af02      	add	r7, sp, #8
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	4608      	mov	r0, r1
 800abd2:	4611      	mov	r1, r2
 800abd4:	461a      	mov	r2, r3
 800abd6:	4603      	mov	r3, r0
 800abd8:	817b      	strh	r3, [r7, #10]
 800abda:	460b      	mov	r3, r1
 800abdc:	813b      	strh	r3, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 f8c2 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00d      	beq.n	800ac36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac28:	d103      	bne.n	800ac32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac32:	2303      	movs	r3, #3
 800ac34:	e0aa      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac36:	897b      	ldrh	r3, [r7, #10]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ac44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac48:	6a3a      	ldr	r2, [r7, #32]
 800ac4a:	4952      	ldr	r1, [pc, #328]	; (800ad94 <I2C_RequestMemoryRead+0x1cc>)
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f91d 	bl	800ae8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e097      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	617b      	str	r3, [r7, #20]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac74:	6a39      	ldr	r1, [r7, #32]
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 f9a8 	bl	800afcc <I2C_WaitOnTXEFlagUntilTimeout>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00d      	beq.n	800ac9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d107      	bne.n	800ac9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e076      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d105      	bne.n	800acb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aca4:	893b      	ldrh	r3, [r7, #8]
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	611a      	str	r2, [r3, #16]
 800acae:	e021      	b.n	800acf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800acb0:	893b      	ldrh	r3, [r7, #8]
 800acb2:	0a1b      	lsrs	r3, r3, #8
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc0:	6a39      	ldr	r1, [r7, #32]
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 f982 	bl	800afcc <I2C_WaitOnTXEFlagUntilTimeout>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00d      	beq.n	800acea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	d107      	bne.n	800ace6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ace4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e050      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800acea:	893b      	ldrh	r3, [r7, #8]
 800acec:	b2da      	uxtb	r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acf6:	6a39      	ldr	r1, [r7, #32]
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f967 	bl	800afcc <I2C_WaitOnTXEFlagUntilTimeout>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00d      	beq.n	800ad20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	d107      	bne.n	800ad1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e035      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f000 f82b 	bl	800ad98 <I2C_WaitOnFlagUntilTimeout>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00d      	beq.n	800ad64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad56:	d103      	bne.n	800ad60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e013      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ad64:	897b      	ldrh	r3, [r7, #10]
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f043 0301 	orr.w	r3, r3, #1
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	6a3a      	ldr	r2, [r7, #32]
 800ad78:	4906      	ldr	r1, [pc, #24]	; (800ad94 <I2C_RequestMemoryRead+0x1cc>)
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 f886 	bl	800ae8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e000      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	00010002 	.word	0x00010002

0800ad98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	4613      	mov	r3, r2
 800ada6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ada8:	e048      	b.n	800ae3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d044      	beq.n	800ae3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb2:	f7fe f9e3 	bl	800917c <HAL_GetTick>
 800adb6:	4602      	mov	r2, r0
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d302      	bcc.n	800adc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d139      	bne.n	800ae3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	0c1b      	lsrs	r3, r3, #16
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b01      	cmp	r3, #1
 800add0:	d10d      	bne.n	800adee <I2C_WaitOnFlagUntilTimeout+0x56>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	695b      	ldr	r3, [r3, #20]
 800add8:	43da      	mvns	r2, r3
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	4013      	ands	r3, r2
 800adde:	b29b      	uxth	r3, r3
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	bf0c      	ite	eq
 800ade4:	2301      	moveq	r3, #1
 800ade6:	2300      	movne	r3, #0
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	461a      	mov	r2, r3
 800adec:	e00c      	b.n	800ae08 <I2C_WaitOnFlagUntilTimeout+0x70>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	43da      	mvns	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	4013      	ands	r3, r2
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bf0c      	ite	eq
 800ae00:	2301      	moveq	r3, #1
 800ae02:	2300      	movne	r3, #0
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	461a      	mov	r2, r3
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d116      	bne.n	800ae3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2220      	movs	r2, #32
 800ae18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae28:	f043 0220 	orr.w	r2, r3, #32
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e023      	b.n	800ae84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	0c1b      	lsrs	r3, r3, #16
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d10d      	bne.n	800ae62 <I2C_WaitOnFlagUntilTimeout+0xca>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	43da      	mvns	r2, r3
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	4013      	ands	r3, r2
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bf0c      	ite	eq
 800ae58:	2301      	moveq	r3, #1
 800ae5a:	2300      	movne	r3, #0
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	461a      	mov	r2, r3
 800ae60:	e00c      	b.n	800ae7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	43da      	mvns	r2, r3
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bf0c      	ite	eq
 800ae74:	2301      	moveq	r3, #1
 800ae76:	2300      	movne	r3, #0
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d093      	beq.n	800adaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ae9a:	e071      	b.n	800af80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeaa:	d123      	bne.n	800aef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2220      	movs	r2, #32
 800aed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee0:	f043 0204 	orr.w	r2, r3, #4
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e067      	b.n	800afc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	d041      	beq.n	800af80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aefc:	f7fe f93e 	bl	800917c <HAL_GetTick>
 800af00:	4602      	mov	r2, r0
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d302      	bcc.n	800af12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d136      	bne.n	800af80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	0c1b      	lsrs	r3, r3, #16
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d10c      	bne.n	800af36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	43da      	mvns	r2, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	4013      	ands	r3, r2
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	bf14      	ite	ne
 800af2e:	2301      	movne	r3, #1
 800af30:	2300      	moveq	r3, #0
 800af32:	b2db      	uxtb	r3, r3
 800af34:	e00b      	b.n	800af4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	43da      	mvns	r2, r3
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	4013      	ands	r3, r2
 800af42:	b29b      	uxth	r3, r3
 800af44:	2b00      	cmp	r3, #0
 800af46:	bf14      	ite	ne
 800af48:	2301      	movne	r3, #1
 800af4a:	2300      	moveq	r3, #0
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d016      	beq.n	800af80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6c:	f043 0220 	orr.w	r2, r3, #32
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e021      	b.n	800afc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b01      	cmp	r3, #1
 800af88:	d10c      	bne.n	800afa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	43da      	mvns	r2, r3
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	4013      	ands	r3, r2
 800af96:	b29b      	uxth	r3, r3
 800af98:	2b00      	cmp	r3, #0
 800af9a:	bf14      	ite	ne
 800af9c:	2301      	movne	r3, #1
 800af9e:	2300      	moveq	r3, #0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	e00b      	b.n	800afbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	43da      	mvns	r2, r3
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	4013      	ands	r3, r2
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	bf14      	ite	ne
 800afb6:	2301      	movne	r3, #1
 800afb8:	2300      	moveq	r3, #0
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f47f af6d 	bne.w	800ae9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800afd8:	e034      	b.n	800b044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f000 f8e3 	bl	800b1a6 <I2C_IsAcknowledgeFailed>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e034      	b.n	800b054 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff0:	d028      	beq.n	800b044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff2:	f7fe f8c3 	bl	800917c <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	429a      	cmp	r2, r3
 800b000:	d302      	bcc.n	800b008 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d11d      	bne.n	800b044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b012:	2b80      	cmp	r3, #128	; 0x80
 800b014:	d016      	beq.n	800b044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2220      	movs	r2, #32
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b030:	f043 0220 	orr.w	r2, r3, #32
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e007      	b.n	800b054 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04e:	2b80      	cmp	r3, #128	; 0x80
 800b050:	d1c3      	bne.n	800afda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b068:	e034      	b.n	800b0d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 f89b 	bl	800b1a6 <I2C_IsAcknowledgeFailed>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e034      	b.n	800b0e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b080:	d028      	beq.n	800b0d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b082:	f7fe f87b 	bl	800917c <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d302      	bcc.n	800b098 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d11d      	bne.n	800b0d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d016      	beq.n	800b0d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c0:	f043 0220 	orr.w	r2, r3, #32
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e007      	b.n	800b0e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d1c3      	bne.n	800b06a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0f8:	e049      	b.n	800b18e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	f003 0310 	and.w	r3, r3, #16
 800b104:	2b10      	cmp	r3, #16
 800b106:	d119      	bne.n	800b13c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f06f 0210 	mvn.w	r2, #16
 800b110:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2220      	movs	r2, #32
 800b11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e030      	b.n	800b19e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b13c:	f7fe f81e 	bl	800917c <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d302      	bcc.n	800b152 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d11d      	bne.n	800b18e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	695b      	ldr	r3, [r3, #20]
 800b158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b15c:	2b40      	cmp	r3, #64	; 0x40
 800b15e:	d016      	beq.n	800b18e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2220      	movs	r2, #32
 800b16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	f043 0220 	orr.w	r2, r3, #32
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e007      	b.n	800b19e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b198:	2b40      	cmp	r3, #64	; 0x40
 800b19a:	d1ae      	bne.n	800b0fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1bc:	d11b      	bne.n	800b1f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b1c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2220      	movs	r2, #32
 800b1d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	f043 0204 	orr.w	r2, r3, #4
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bc80      	pop	{r7}
 800b200:	4770      	bx	lr
	...

0800b204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e272      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 8087 	beq.w	800b332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b224:	4b92      	ldr	r3, [pc, #584]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	f003 030c 	and.w	r3, r3, #12
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	d00c      	beq.n	800b24a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b230:	4b8f      	ldr	r3, [pc, #572]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f003 030c 	and.w	r3, r3, #12
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d112      	bne.n	800b262 <HAL_RCC_OscConfig+0x5e>
 800b23c:	4b8c      	ldr	r3, [pc, #560]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b248:	d10b      	bne.n	800b262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b24a:	4b89      	ldr	r3, [pc, #548]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d06c      	beq.n	800b330 <HAL_RCC_OscConfig+0x12c>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d168      	bne.n	800b330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e24c      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b26a:	d106      	bne.n	800b27a <HAL_RCC_OscConfig+0x76>
 800b26c:	4b80      	ldr	r3, [pc, #512]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a7f      	ldr	r2, [pc, #508]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b276:	6013      	str	r3, [r2, #0]
 800b278:	e02e      	b.n	800b2d8 <HAL_RCC_OscConfig+0xd4>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10c      	bne.n	800b29c <HAL_RCC_OscConfig+0x98>
 800b282:	4b7b      	ldr	r3, [pc, #492]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a7a      	ldr	r2, [pc, #488]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	4b78      	ldr	r3, [pc, #480]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a77      	ldr	r2, [pc, #476]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	e01d      	b.n	800b2d8 <HAL_RCC_OscConfig+0xd4>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2a4:	d10c      	bne.n	800b2c0 <HAL_RCC_OscConfig+0xbc>
 800b2a6:	4b72      	ldr	r3, [pc, #456]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a71      	ldr	r2, [pc, #452]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	4b6f      	ldr	r3, [pc, #444]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a6e      	ldr	r2, [pc, #440]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	e00b      	b.n	800b2d8 <HAL_RCC_OscConfig+0xd4>
 800b2c0:	4b6b      	ldr	r3, [pc, #428]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a6a      	ldr	r2, [pc, #424]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	4b68      	ldr	r3, [pc, #416]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a67      	ldr	r2, [pc, #412]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b2d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d013      	beq.n	800b308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2e0:	f7fd ff4c 	bl	800917c <HAL_GetTick>
 800b2e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2e6:	e008      	b.n	800b2fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2e8:	f7fd ff48 	bl	800917c <HAL_GetTick>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	2b64      	cmp	r3, #100	; 0x64
 800b2f4:	d901      	bls.n	800b2fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e200      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2fa:	4b5d      	ldr	r3, [pc, #372]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0f0      	beq.n	800b2e8 <HAL_RCC_OscConfig+0xe4>
 800b306:	e014      	b.n	800b332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b308:	f7fd ff38 	bl	800917c <HAL_GetTick>
 800b30c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b30e:	e008      	b.n	800b322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b310:	f7fd ff34 	bl	800917c <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	2b64      	cmp	r3, #100	; 0x64
 800b31c:	d901      	bls.n	800b322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e1ec      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b322:	4b53      	ldr	r3, [pc, #332]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f0      	bne.n	800b310 <HAL_RCC_OscConfig+0x10c>
 800b32e:	e000      	b.n	800b332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0302 	and.w	r3, r3, #2
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d063      	beq.n	800b406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b33e:	4b4c      	ldr	r3, [pc, #304]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f003 030c 	and.w	r3, r3, #12
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00b      	beq.n	800b362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b34a:	4b49      	ldr	r3, [pc, #292]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f003 030c 	and.w	r3, r3, #12
 800b352:	2b08      	cmp	r3, #8
 800b354:	d11c      	bne.n	800b390 <HAL_RCC_OscConfig+0x18c>
 800b356:	4b46      	ldr	r3, [pc, #280]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d116      	bne.n	800b390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b362:	4b43      	ldr	r3, [pc, #268]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0302 	and.w	r3, r3, #2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d005      	beq.n	800b37a <HAL_RCC_OscConfig+0x176>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d001      	beq.n	800b37a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e1c0      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b37a:	4b3d      	ldr	r3, [pc, #244]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	4939      	ldr	r1, [pc, #228]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b38e:	e03a      	b.n	800b406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d020      	beq.n	800b3da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b398:	4b36      	ldr	r3, [pc, #216]	; (800b474 <HAL_RCC_OscConfig+0x270>)
 800b39a:	2201      	movs	r2, #1
 800b39c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b39e:	f7fd feed 	bl	800917c <HAL_GetTick>
 800b3a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3a4:	e008      	b.n	800b3b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3a6:	f7fd fee9 	bl	800917c <HAL_GetTick>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d901      	bls.n	800b3b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	e1a1      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3b8:	4b2d      	ldr	r3, [pc, #180]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0302 	and.w	r3, r3, #2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d0f0      	beq.n	800b3a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3c4:	4b2a      	ldr	r3, [pc, #168]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	4927      	ldr	r1, [pc, #156]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	600b      	str	r3, [r1, #0]
 800b3d8:	e015      	b.n	800b406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b3da:	4b26      	ldr	r3, [pc, #152]	; (800b474 <HAL_RCC_OscConfig+0x270>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3e0:	f7fd fecc 	bl	800917c <HAL_GetTick>
 800b3e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b3e6:	e008      	b.n	800b3fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3e8:	f7fd fec8 	bl	800917c <HAL_GetTick>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d901      	bls.n	800b3fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e180      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b3fa:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 0302 	and.w	r3, r3, #2
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1f0      	bne.n	800b3e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0308 	and.w	r3, r3, #8
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d03a      	beq.n	800b488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d019      	beq.n	800b44e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b41a:	4b17      	ldr	r3, [pc, #92]	; (800b478 <HAL_RCC_OscConfig+0x274>)
 800b41c:	2201      	movs	r2, #1
 800b41e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b420:	f7fd feac 	bl	800917c <HAL_GetTick>
 800b424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b426:	e008      	b.n	800b43a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b428:	f7fd fea8 	bl	800917c <HAL_GetTick>
 800b42c:	4602      	mov	r2, r0
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	2b02      	cmp	r3, #2
 800b434:	d901      	bls.n	800b43a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e160      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b43a:	4b0d      	ldr	r3, [pc, #52]	; (800b470 <HAL_RCC_OscConfig+0x26c>)
 800b43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b00      	cmp	r3, #0
 800b444:	d0f0      	beq.n	800b428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b446:	2001      	movs	r0, #1
 800b448:	f000 face 	bl	800b9e8 <RCC_Delay>
 800b44c:	e01c      	b.n	800b488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b44e:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <HAL_RCC_OscConfig+0x274>)
 800b450:	2200      	movs	r2, #0
 800b452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b454:	f7fd fe92 	bl	800917c <HAL_GetTick>
 800b458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b45a:	e00f      	b.n	800b47c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b45c:	f7fd fe8e 	bl	800917c <HAL_GetTick>
 800b460:	4602      	mov	r2, r0
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	2b02      	cmp	r3, #2
 800b468:	d908      	bls.n	800b47c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	e146      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
 800b46e:	bf00      	nop
 800b470:	40021000 	.word	0x40021000
 800b474:	42420000 	.word	0x42420000
 800b478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b47c:	4b92      	ldr	r3, [pc, #584]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e9      	bne.n	800b45c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 80a6 	beq.w	800b5e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b496:	2300      	movs	r3, #0
 800b498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b49a:	4b8b      	ldr	r3, [pc, #556]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10d      	bne.n	800b4c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b4a6:	4b88      	ldr	r3, [pc, #544]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	4a87      	ldr	r2, [pc, #540]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b4ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4b0:	61d3      	str	r3, [r2, #28]
 800b4b2:	4b85      	ldr	r3, [pc, #532]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4ba:	60bb      	str	r3, [r7, #8]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4c2:	4b82      	ldr	r3, [pc, #520]	; (800b6cc <HAL_RCC_OscConfig+0x4c8>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d118      	bne.n	800b500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b4ce:	4b7f      	ldr	r3, [pc, #508]	; (800b6cc <HAL_RCC_OscConfig+0x4c8>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a7e      	ldr	r2, [pc, #504]	; (800b6cc <HAL_RCC_OscConfig+0x4c8>)
 800b4d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4da:	f7fd fe4f 	bl	800917c <HAL_GetTick>
 800b4de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4e0:	e008      	b.n	800b4f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4e2:	f7fd fe4b 	bl	800917c <HAL_GetTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	2b64      	cmp	r3, #100	; 0x64
 800b4ee:	d901      	bls.n	800b4f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e103      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4f4:	4b75      	ldr	r3, [pc, #468]	; (800b6cc <HAL_RCC_OscConfig+0x4c8>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0f0      	beq.n	800b4e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d106      	bne.n	800b516 <HAL_RCC_OscConfig+0x312>
 800b508:	4b6f      	ldr	r3, [pc, #444]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	4a6e      	ldr	r2, [pc, #440]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b50e:	f043 0301 	orr.w	r3, r3, #1
 800b512:	6213      	str	r3, [r2, #32]
 800b514:	e02d      	b.n	800b572 <HAL_RCC_OscConfig+0x36e>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10c      	bne.n	800b538 <HAL_RCC_OscConfig+0x334>
 800b51e:	4b6a      	ldr	r3, [pc, #424]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b520:	6a1b      	ldr	r3, [r3, #32]
 800b522:	4a69      	ldr	r2, [pc, #420]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b524:	f023 0301 	bic.w	r3, r3, #1
 800b528:	6213      	str	r3, [r2, #32]
 800b52a:	4b67      	ldr	r3, [pc, #412]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	4a66      	ldr	r2, [pc, #408]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b530:	f023 0304 	bic.w	r3, r3, #4
 800b534:	6213      	str	r3, [r2, #32]
 800b536:	e01c      	b.n	800b572 <HAL_RCC_OscConfig+0x36e>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	2b05      	cmp	r3, #5
 800b53e:	d10c      	bne.n	800b55a <HAL_RCC_OscConfig+0x356>
 800b540:	4b61      	ldr	r3, [pc, #388]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	4a60      	ldr	r2, [pc, #384]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b546:	f043 0304 	orr.w	r3, r3, #4
 800b54a:	6213      	str	r3, [r2, #32]
 800b54c:	4b5e      	ldr	r3, [pc, #376]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b54e:	6a1b      	ldr	r3, [r3, #32]
 800b550:	4a5d      	ldr	r2, [pc, #372]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b552:	f043 0301 	orr.w	r3, r3, #1
 800b556:	6213      	str	r3, [r2, #32]
 800b558:	e00b      	b.n	800b572 <HAL_RCC_OscConfig+0x36e>
 800b55a:	4b5b      	ldr	r3, [pc, #364]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	4a5a      	ldr	r2, [pc, #360]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b560:	f023 0301 	bic.w	r3, r3, #1
 800b564:	6213      	str	r3, [r2, #32]
 800b566:	4b58      	ldr	r3, [pc, #352]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b568:	6a1b      	ldr	r3, [r3, #32]
 800b56a:	4a57      	ldr	r2, [pc, #348]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b56c:	f023 0304 	bic.w	r3, r3, #4
 800b570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d015      	beq.n	800b5a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b57a:	f7fd fdff 	bl	800917c <HAL_GetTick>
 800b57e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b580:	e00a      	b.n	800b598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b582:	f7fd fdfb 	bl	800917c <HAL_GetTick>
 800b586:	4602      	mov	r2, r0
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b590:	4293      	cmp	r3, r2
 800b592:	d901      	bls.n	800b598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e0b1      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b598:	4b4b      	ldr	r3, [pc, #300]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b59a:	6a1b      	ldr	r3, [r3, #32]
 800b59c:	f003 0302 	and.w	r3, r3, #2
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d0ee      	beq.n	800b582 <HAL_RCC_OscConfig+0x37e>
 800b5a4:	e014      	b.n	800b5d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b5a6:	f7fd fde9 	bl	800917c <HAL_GetTick>
 800b5aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5ac:	e00a      	b.n	800b5c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5ae:	f7fd fde5 	bl	800917c <HAL_GetTick>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d901      	bls.n	800b5c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	e09b      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5c4:	4b40      	ldr	r3, [pc, #256]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	f003 0302 	and.w	r3, r3, #2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1ee      	bne.n	800b5ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d105      	bne.n	800b5e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5d6:	4b3c      	ldr	r3, [pc, #240]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	4a3b      	ldr	r2, [pc, #236]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b5dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f000 8087 	beq.w	800b6fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b5ec:	4b36      	ldr	r3, [pc, #216]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	f003 030c 	and.w	r3, r3, #12
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	d061      	beq.n	800b6bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d146      	bne.n	800b68e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b600:	4b33      	ldr	r3, [pc, #204]	; (800b6d0 <HAL_RCC_OscConfig+0x4cc>)
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b606:	f7fd fdb9 	bl	800917c <HAL_GetTick>
 800b60a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b60c:	e008      	b.n	800b620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b60e:	f7fd fdb5 	bl	800917c <HAL_GetTick>
 800b612:	4602      	mov	r2, r0
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d901      	bls.n	800b620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e06d      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b620:	4b29      	ldr	r3, [pc, #164]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1f0      	bne.n	800b60e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b634:	d108      	bne.n	800b648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b636:	4b24      	ldr	r3, [pc, #144]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	4921      	ldr	r1, [pc, #132]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b644:	4313      	orrs	r3, r2
 800b646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b648:	4b1f      	ldr	r3, [pc, #124]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a19      	ldr	r1, [r3, #32]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b658:	430b      	orrs	r3, r1
 800b65a:	491b      	ldr	r1, [pc, #108]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b65c:	4313      	orrs	r3, r2
 800b65e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b660:	4b1b      	ldr	r3, [pc, #108]	; (800b6d0 <HAL_RCC_OscConfig+0x4cc>)
 800b662:	2201      	movs	r2, #1
 800b664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b666:	f7fd fd89 	bl	800917c <HAL_GetTick>
 800b66a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b66c:	e008      	b.n	800b680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b66e:	f7fd fd85 	bl	800917c <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d901      	bls.n	800b680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e03d      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b680:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d0f0      	beq.n	800b66e <HAL_RCC_OscConfig+0x46a>
 800b68c:	e035      	b.n	800b6fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b68e:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <HAL_RCC_OscConfig+0x4cc>)
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b694:	f7fd fd72 	bl	800917c <HAL_GetTick>
 800b698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b69a:	e008      	b.n	800b6ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b69c:	f7fd fd6e 	bl	800917c <HAL_GetTick>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d901      	bls.n	800b6ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e026      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b6ae:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <HAL_RCC_OscConfig+0x4c4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f0      	bne.n	800b69c <HAL_RCC_OscConfig+0x498>
 800b6ba:	e01e      	b.n	800b6fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	69db      	ldr	r3, [r3, #28]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d107      	bne.n	800b6d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e019      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
 800b6c8:	40021000 	.word	0x40021000
 800b6cc:	40007000 	.word	0x40007000
 800b6d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b6d4:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <HAL_RCC_OscConfig+0x500>)
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a1b      	ldr	r3, [r3, #32]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d106      	bne.n	800b6f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d001      	beq.n	800b6fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e000      	b.n	800b6fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3718      	adds	r7, #24
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	40021000 	.word	0x40021000

0800b708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	e0d0      	b.n	800b8be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b71c:	4b6a      	ldr	r3, [pc, #424]	; (800b8c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 0307 	and.w	r3, r3, #7
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	429a      	cmp	r2, r3
 800b728:	d910      	bls.n	800b74c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b72a:	4b67      	ldr	r3, [pc, #412]	; (800b8c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f023 0207 	bic.w	r2, r3, #7
 800b732:	4965      	ldr	r1, [pc, #404]	; (800b8c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	4313      	orrs	r3, r2
 800b738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b73a:	4b63      	ldr	r3, [pc, #396]	; (800b8c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0307 	and.w	r3, r3, #7
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d001      	beq.n	800b74c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	e0b8      	b.n	800b8be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d020      	beq.n	800b79a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0304 	and.w	r3, r3, #4
 800b760:	2b00      	cmp	r3, #0
 800b762:	d005      	beq.n	800b770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b764:	4b59      	ldr	r3, [pc, #356]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	4a58      	ldr	r2, [pc, #352]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b76a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b76e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d005      	beq.n	800b788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b77c:	4b53      	ldr	r3, [pc, #332]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	4a52      	ldr	r2, [pc, #328]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b788:	4b50      	ldr	r3, [pc, #320]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	494d      	ldr	r1, [pc, #308]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b796:	4313      	orrs	r3, r2
 800b798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d040      	beq.n	800b828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d107      	bne.n	800b7be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7ae:	4b47      	ldr	r3, [pc, #284]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d115      	bne.n	800b7e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e07f      	b.n	800b8be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d107      	bne.n	800b7d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7c6:	4b41      	ldr	r3, [pc, #260]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d109      	bne.n	800b7e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e073      	b.n	800b8be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7d6:	4b3d      	ldr	r3, [pc, #244]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e06b      	b.n	800b8be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b7e6:	4b39      	ldr	r3, [pc, #228]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f023 0203 	bic.w	r2, r3, #3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	4936      	ldr	r1, [pc, #216]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b7f8:	f7fd fcc0 	bl	800917c <HAL_GetTick>
 800b7fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7fe:	e00a      	b.n	800b816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b800:	f7fd fcbc 	bl	800917c <HAL_GetTick>
 800b804:	4602      	mov	r2, r0
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b80e:	4293      	cmp	r3, r2
 800b810:	d901      	bls.n	800b816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e053      	b.n	800b8be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b816:	4b2d      	ldr	r3, [pc, #180]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	f003 020c 	and.w	r2, r3, #12
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	429a      	cmp	r2, r3
 800b826:	d1eb      	bne.n	800b800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b828:	4b27      	ldr	r3, [pc, #156]	; (800b8c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 0307 	and.w	r3, r3, #7
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d210      	bcs.n	800b858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b836:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f023 0207 	bic.w	r2, r3, #7
 800b83e:	4922      	ldr	r1, [pc, #136]	; (800b8c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	4313      	orrs	r3, r2
 800b844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b846:	4b20      	ldr	r3, [pc, #128]	; (800b8c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0307 	and.w	r3, r3, #7
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	429a      	cmp	r2, r3
 800b852:	d001      	beq.n	800b858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	e032      	b.n	800b8be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d008      	beq.n	800b876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b864:	4b19      	ldr	r3, [pc, #100]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	4916      	ldr	r1, [pc, #88]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b872:	4313      	orrs	r3, r2
 800b874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0308 	and.w	r3, r3, #8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d009      	beq.n	800b896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b882:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	490e      	ldr	r1, [pc, #56]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b892:	4313      	orrs	r3, r2
 800b894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b896:	f000 f821 	bl	800b8dc <HAL_RCC_GetSysClockFreq>
 800b89a:	4602      	mov	r2, r0
 800b89c:	4b0b      	ldr	r3, [pc, #44]	; (800b8cc <HAL_RCC_ClockConfig+0x1c4>)
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	091b      	lsrs	r3, r3, #4
 800b8a2:	f003 030f 	and.w	r3, r3, #15
 800b8a6:	490a      	ldr	r1, [pc, #40]	; (800b8d0 <HAL_RCC_ClockConfig+0x1c8>)
 800b8a8:	5ccb      	ldrb	r3, [r1, r3]
 800b8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ae:	4a09      	ldr	r2, [pc, #36]	; (800b8d4 <HAL_RCC_ClockConfig+0x1cc>)
 800b8b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <HAL_RCC_ClockConfig+0x1d0>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fd fc1e 	bl	80090f8 <HAL_InitTick>

  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	40022000 	.word	0x40022000
 800b8cc:	40021000 	.word	0x40021000
 800b8d0:	0800e64c 	.word	0x0800e64c
 800b8d4:	200009b4 	.word	0x200009b4
 800b8d8:	200009b8 	.word	0x200009b8

0800b8dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60fb      	str	r3, [r7, #12]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60bb      	str	r3, [r7, #8]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b8f6:	4b1e      	ldr	r3, [pc, #120]	; (800b970 <HAL_RCC_GetSysClockFreq+0x94>)
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f003 030c 	and.w	r3, r3, #12
 800b902:	2b04      	cmp	r3, #4
 800b904:	d002      	beq.n	800b90c <HAL_RCC_GetSysClockFreq+0x30>
 800b906:	2b08      	cmp	r3, #8
 800b908:	d003      	beq.n	800b912 <HAL_RCC_GetSysClockFreq+0x36>
 800b90a:	e027      	b.n	800b95c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b90c:	4b19      	ldr	r3, [pc, #100]	; (800b974 <HAL_RCC_GetSysClockFreq+0x98>)
 800b90e:	613b      	str	r3, [r7, #16]
      break;
 800b910:	e027      	b.n	800b962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	0c9b      	lsrs	r3, r3, #18
 800b916:	f003 030f 	and.w	r3, r3, #15
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b91c:	5cd3      	ldrb	r3, [r2, r3]
 800b91e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d010      	beq.n	800b94c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b92a:	4b11      	ldr	r3, [pc, #68]	; (800b970 <HAL_RCC_GetSysClockFreq+0x94>)
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	0c5b      	lsrs	r3, r3, #17
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	4a11      	ldr	r2, [pc, #68]	; (800b97c <HAL_RCC_GetSysClockFreq+0xa0>)
 800b936:	5cd3      	ldrb	r3, [r2, r3]
 800b938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a0d      	ldr	r2, [pc, #52]	; (800b974 <HAL_RCC_GetSysClockFreq+0x98>)
 800b93e:	fb03 f202 	mul.w	r2, r3, r2
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	fbb2 f3f3 	udiv	r3, r2, r3
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	e004      	b.n	800b956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a0c      	ldr	r2, [pc, #48]	; (800b980 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b950:	fb02 f303 	mul.w	r3, r2, r3
 800b954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	613b      	str	r3, [r7, #16]
      break;
 800b95a:	e002      	b.n	800b962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b95c:	4b05      	ldr	r3, [pc, #20]	; (800b974 <HAL_RCC_GetSysClockFreq+0x98>)
 800b95e:	613b      	str	r3, [r7, #16]
      break;
 800b960:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b962:	693b      	ldr	r3, [r7, #16]
}
 800b964:	4618      	mov	r0, r3
 800b966:	371c      	adds	r7, #28
 800b968:	46bd      	mov	sp, r7
 800b96a:	bc80      	pop	{r7}
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	40021000 	.word	0x40021000
 800b974:	007a1200 	.word	0x007a1200
 800b978:	0800e664 	.word	0x0800e664
 800b97c:	0800e674 	.word	0x0800e674
 800b980:	003d0900 	.word	0x003d0900

0800b984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b988:	4b02      	ldr	r3, [pc, #8]	; (800b994 <HAL_RCC_GetHCLKFreq+0x10>)
 800b98a:	681b      	ldr	r3, [r3, #0]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	46bd      	mov	sp, r7
 800b990:	bc80      	pop	{r7}
 800b992:	4770      	bx	lr
 800b994:	200009b4 	.word	0x200009b4

0800b998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b99c:	f7ff fff2 	bl	800b984 <HAL_RCC_GetHCLKFreq>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	4b05      	ldr	r3, [pc, #20]	; (800b9b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	0a1b      	lsrs	r3, r3, #8
 800b9a8:	f003 0307 	and.w	r3, r3, #7
 800b9ac:	4903      	ldr	r1, [pc, #12]	; (800b9bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b9ae:	5ccb      	ldrb	r3, [r1, r3]
 800b9b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	40021000 	.word	0x40021000
 800b9bc:	0800e65c 	.word	0x0800e65c

0800b9c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b9c4:	f7ff ffde 	bl	800b984 <HAL_RCC_GetHCLKFreq>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	0adb      	lsrs	r3, r3, #11
 800b9d0:	f003 0307 	and.w	r3, r3, #7
 800b9d4:	4903      	ldr	r1, [pc, #12]	; (800b9e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b9d6:	5ccb      	ldrb	r3, [r1, r3]
 800b9d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	40021000 	.word	0x40021000
 800b9e4:	0800e65c 	.word	0x0800e65c

0800b9e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <RCC_Delay+0x34>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a0a      	ldr	r2, [pc, #40]	; (800ba20 <RCC_Delay+0x38>)
 800b9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fa:	0a5b      	lsrs	r3, r3, #9
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ba02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ba04:	bf00      	nop
  }
  while (Delay --);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	1e5a      	subs	r2, r3, #1
 800ba0a:	60fa      	str	r2, [r7, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1f9      	bne.n	800ba04 <RCC_Delay+0x1c>
}
 800ba10:	bf00      	nop
 800ba12:	bf00      	nop
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bc80      	pop	{r7}
 800ba1a:	4770      	bx	lr
 800ba1c:	200009b4 	.word	0x200009b4
 800ba20:	10624dd3 	.word	0x10624dd3

0800ba24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e041      	b.n	800baba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7fd fa26 	bl	8008e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2202      	movs	r2, #2
 800ba54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4619      	mov	r1, r3
 800ba62:	4610      	mov	r0, r2
 800ba64:	f000 fa82 	bl	800bf6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
	...

0800bac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d001      	beq.n	800badc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e044      	b.n	800bb66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2202      	movs	r2, #2
 800bae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68da      	ldr	r2, [r3, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f042 0201 	orr.w	r2, r2, #1
 800baf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a1d      	ldr	r2, [pc, #116]	; (800bb70 <HAL_TIM_Base_Start_IT+0xac>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d018      	beq.n	800bb30 <HAL_TIM_Base_Start_IT+0x6c>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a1c      	ldr	r2, [pc, #112]	; (800bb74 <HAL_TIM_Base_Start_IT+0xb0>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d013      	beq.n	800bb30 <HAL_TIM_Base_Start_IT+0x6c>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb10:	d00e      	beq.n	800bb30 <HAL_TIM_Base_Start_IT+0x6c>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a18      	ldr	r2, [pc, #96]	; (800bb78 <HAL_TIM_Base_Start_IT+0xb4>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d009      	beq.n	800bb30 <HAL_TIM_Base_Start_IT+0x6c>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a16      	ldr	r2, [pc, #88]	; (800bb7c <HAL_TIM_Base_Start_IT+0xb8>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d004      	beq.n	800bb30 <HAL_TIM_Base_Start_IT+0x6c>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a15      	ldr	r2, [pc, #84]	; (800bb80 <HAL_TIM_Base_Start_IT+0xbc>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d111      	bne.n	800bb54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	f003 0307 	and.w	r3, r3, #7
 800bb3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b06      	cmp	r3, #6
 800bb40:	d010      	beq.n	800bb64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f042 0201 	orr.w	r2, r2, #1
 800bb50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb52:	e007      	b.n	800bb64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f042 0201 	orr.w	r2, r2, #1
 800bb62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bc80      	pop	{r7}
 800bb6e:	4770      	bx	lr
 800bb70:	40012c00 	.word	0x40012c00
 800bb74:	40013400 	.word	0x40013400
 800bb78:	40000400 	.word	0x40000400
 800bb7c:	40000800 	.word	0x40000800
 800bb80:	40000c00 	.word	0x40000c00

0800bb84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	f003 0302 	and.w	r3, r3, #2
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d122      	bne.n	800bbe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d11b      	bne.n	800bbe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f06f 0202 	mvn.w	r2, #2
 800bbb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	f003 0303 	and.w	r3, r3, #3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f9b4 	bl	800bf34 <HAL_TIM_IC_CaptureCallback>
 800bbcc:	e005      	b.n	800bbda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f9a7 	bl	800bf22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f9b6 	bl	800bf46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b04      	cmp	r3, #4
 800bbec:	d122      	bne.n	800bc34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	f003 0304 	and.w	r3, r3, #4
 800bbf8:	2b04      	cmp	r3, #4
 800bbfa:	d11b      	bne.n	800bc34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f06f 0204 	mvn.w	r2, #4
 800bc04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2202      	movs	r2, #2
 800bc0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f98a 	bl	800bf34 <HAL_TIM_IC_CaptureCallback>
 800bc20:	e005      	b.n	800bc2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f97d 	bl	800bf22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f98c 	bl	800bf46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	f003 0308 	and.w	r3, r3, #8
 800bc3e:	2b08      	cmp	r3, #8
 800bc40:	d122      	bne.n	800bc88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f003 0308 	and.w	r3, r3, #8
 800bc4c:	2b08      	cmp	r3, #8
 800bc4e:	d11b      	bne.n	800bc88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f06f 0208 	mvn.w	r2, #8
 800bc58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2204      	movs	r2, #4
 800bc5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	f003 0303 	and.w	r3, r3, #3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f960 	bl	800bf34 <HAL_TIM_IC_CaptureCallback>
 800bc74:	e005      	b.n	800bc82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f953 	bl	800bf22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f962 	bl	800bf46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	f003 0310 	and.w	r3, r3, #16
 800bc92:	2b10      	cmp	r3, #16
 800bc94:	d122      	bne.n	800bcdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	f003 0310 	and.w	r3, r3, #16
 800bca0:	2b10      	cmp	r3, #16
 800bca2:	d11b      	bne.n	800bcdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f06f 0210 	mvn.w	r2, #16
 800bcac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2208      	movs	r2, #8
 800bcb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	69db      	ldr	r3, [r3, #28]
 800bcba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f936 	bl	800bf34 <HAL_TIM_IC_CaptureCallback>
 800bcc8:	e005      	b.n	800bcd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f929 	bl	800bf22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f938 	bl	800bf46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d10e      	bne.n	800bd08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f003 0301 	and.w	r3, r3, #1
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d107      	bne.n	800bd08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f06f 0201 	mvn.w	r2, #1
 800bd00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7fc fd1a 	bl	800873c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd12:	2b80      	cmp	r3, #128	; 0x80
 800bd14:	d10e      	bne.n	800bd34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd20:	2b80      	cmp	r3, #128	; 0x80
 800bd22:	d107      	bne.n	800bd34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 faa1 	bl	800c276 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd3e:	2b40      	cmp	r3, #64	; 0x40
 800bd40:	d10e      	bne.n	800bd60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd4c:	2b40      	cmp	r3, #64	; 0x40
 800bd4e:	d107      	bne.n	800bd60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f8fc 	bl	800bf58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b20      	cmp	r3, #32
 800bd6c:	d10e      	bne.n	800bd8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	f003 0320 	and.w	r3, r3, #32
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	d107      	bne.n	800bd8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f06f 0220 	mvn.w	r2, #32
 800bd84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fa6c 	bl	800c264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd8c:	bf00      	nop
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d101      	bne.n	800bdb0 <HAL_TIM_ConfigClockSource+0x1c>
 800bdac:	2302      	movs	r3, #2
 800bdae:	e0b4      	b.n	800bf1a <HAL_TIM_ConfigClockSource+0x186>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bdce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bde8:	d03e      	beq.n	800be68 <HAL_TIM_ConfigClockSource+0xd4>
 800bdea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdee:	f200 8087 	bhi.w	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800bdf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf6:	f000 8086 	beq.w	800bf06 <HAL_TIM_ConfigClockSource+0x172>
 800bdfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdfe:	d87f      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be00:	2b70      	cmp	r3, #112	; 0x70
 800be02:	d01a      	beq.n	800be3a <HAL_TIM_ConfigClockSource+0xa6>
 800be04:	2b70      	cmp	r3, #112	; 0x70
 800be06:	d87b      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be08:	2b60      	cmp	r3, #96	; 0x60
 800be0a:	d050      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x11a>
 800be0c:	2b60      	cmp	r3, #96	; 0x60
 800be0e:	d877      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be10:	2b50      	cmp	r3, #80	; 0x50
 800be12:	d03c      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0xfa>
 800be14:	2b50      	cmp	r3, #80	; 0x50
 800be16:	d873      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be18:	2b40      	cmp	r3, #64	; 0x40
 800be1a:	d058      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x13a>
 800be1c:	2b40      	cmp	r3, #64	; 0x40
 800be1e:	d86f      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be20:	2b30      	cmp	r3, #48	; 0x30
 800be22:	d064      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x15a>
 800be24:	2b30      	cmp	r3, #48	; 0x30
 800be26:	d86b      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be28:	2b20      	cmp	r3, #32
 800be2a:	d060      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x15a>
 800be2c:	2b20      	cmp	r3, #32
 800be2e:	d867      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be30:	2b00      	cmp	r3, #0
 800be32:	d05c      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x15a>
 800be34:	2b10      	cmp	r3, #16
 800be36:	d05a      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x15a>
 800be38:	e062      	b.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be4a:	f000 f980 	bl	800c14e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	609a      	str	r2, [r3, #8]
      break;
 800be66:	e04f      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be78:	f000 f969 	bl	800c14e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be8a:	609a      	str	r2, [r3, #8]
      break;
 800be8c:	e03c      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be9a:	461a      	mov	r2, r3
 800be9c:	f000 f8e0 	bl	800c060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2150      	movs	r1, #80	; 0x50
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 f937 	bl	800c11a <TIM_ITRx_SetConfig>
      break;
 800beac:	e02c      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800beba:	461a      	mov	r2, r3
 800bebc:	f000 f8fe 	bl	800c0bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2160      	movs	r1, #96	; 0x60
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 f927 	bl	800c11a <TIM_ITRx_SetConfig>
      break;
 800becc:	e01c      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800beda:	461a      	mov	r2, r3
 800bedc:	f000 f8c0 	bl	800c060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2140      	movs	r1, #64	; 0x40
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 f917 	bl	800c11a <TIM_ITRx_SetConfig>
      break;
 800beec:	e00c      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f000 f90e 	bl	800c11a <TIM_ITRx_SetConfig>
      break;
 800befe:	e003      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	73fb      	strb	r3, [r7, #15]
      break;
 800bf04:	e000      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bf06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b083      	sub	sp, #12
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf2a:	bf00      	nop
 800bf2c:	370c      	adds	r7, #12
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr

0800bf34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bc80      	pop	{r7}
 800bf44:	4770      	bx	lr

0800bf46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf4e:	bf00      	nop
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bc80      	pop	{r7}
 800bf56:	4770      	bx	lr

0800bf58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bc80      	pop	{r7}
 800bf68:	4770      	bx	lr
	...

0800bf6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a33      	ldr	r2, [pc, #204]	; (800c04c <TIM_Base_SetConfig+0xe0>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d013      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a32      	ldr	r2, [pc, #200]	; (800c050 <TIM_Base_SetConfig+0xe4>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d00f      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf92:	d00b      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a2f      	ldr	r2, [pc, #188]	; (800c054 <TIM_Base_SetConfig+0xe8>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d007      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a2e      	ldr	r2, [pc, #184]	; (800c058 <TIM_Base_SetConfig+0xec>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d003      	beq.n	800bfac <TIM_Base_SetConfig+0x40>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a2d      	ldr	r2, [pc, #180]	; (800c05c <TIM_Base_SetConfig+0xf0>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d108      	bne.n	800bfbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a22      	ldr	r2, [pc, #136]	; (800c04c <TIM_Base_SetConfig+0xe0>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d013      	beq.n	800bfee <TIM_Base_SetConfig+0x82>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a21      	ldr	r2, [pc, #132]	; (800c050 <TIM_Base_SetConfig+0xe4>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d00f      	beq.n	800bfee <TIM_Base_SetConfig+0x82>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfd4:	d00b      	beq.n	800bfee <TIM_Base_SetConfig+0x82>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a1e      	ldr	r2, [pc, #120]	; (800c054 <TIM_Base_SetConfig+0xe8>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d007      	beq.n	800bfee <TIM_Base_SetConfig+0x82>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a1d      	ldr	r2, [pc, #116]	; (800c058 <TIM_Base_SetConfig+0xec>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d003      	beq.n	800bfee <TIM_Base_SetConfig+0x82>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a1c      	ldr	r2, [pc, #112]	; (800c05c <TIM_Base_SetConfig+0xf0>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d108      	bne.n	800c000 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	689a      	ldr	r2, [r3, #8]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a09      	ldr	r2, [pc, #36]	; (800c04c <TIM_Base_SetConfig+0xe0>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d003      	beq.n	800c034 <TIM_Base_SetConfig+0xc8>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a08      	ldr	r2, [pc, #32]	; (800c050 <TIM_Base_SetConfig+0xe4>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d103      	bne.n	800c03c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	691a      	ldr	r2, [r3, #16]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	615a      	str	r2, [r3, #20]
}
 800c042:	bf00      	nop
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	bc80      	pop	{r7}
 800c04a:	4770      	bx	lr
 800c04c:	40012c00 	.word	0x40012c00
 800c050:	40013400 	.word	0x40013400
 800c054:	40000400 	.word	0x40000400
 800c058:	40000800 	.word	0x40000800
 800c05c:	40000c00 	.word	0x40000c00

0800c060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6a1b      	ldr	r3, [r3, #32]
 800c070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	f023 0201 	bic.w	r2, r3, #1
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c08a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	011b      	lsls	r3, r3, #4
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	4313      	orrs	r3, r2
 800c094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	f023 030a 	bic.w	r3, r3, #10
 800c09c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	621a      	str	r2, [r3, #32]
}
 800c0b2:	bf00      	nop
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bc80      	pop	{r7}
 800c0ba:	4770      	bx	lr

0800c0bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b087      	sub	sp, #28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6a1b      	ldr	r3, [r3, #32]
 800c0cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	f023 0210 	bic.w	r2, r3, #16
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c0e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	031b      	lsls	r3, r3, #12
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c0f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	011b      	lsls	r3, r3, #4
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	4313      	orrs	r3, r2
 800c102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	621a      	str	r2, [r3, #32]
}
 800c110:	bf00      	nop
 800c112:	371c      	adds	r7, #28
 800c114:	46bd      	mov	sp, r7
 800c116:	bc80      	pop	{r7}
 800c118:	4770      	bx	lr

0800c11a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b085      	sub	sp, #20
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	4313      	orrs	r3, r2
 800c138:	f043 0307 	orr.w	r3, r3, #7
 800c13c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	609a      	str	r2, [r3, #8]
}
 800c144:	bf00      	nop
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	bc80      	pop	{r7}
 800c14c:	4770      	bx	lr

0800c14e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c14e:	b480      	push	{r7}
 800c150:	b087      	sub	sp, #28
 800c152:	af00      	add	r7, sp, #0
 800c154:	60f8      	str	r0, [r7, #12]
 800c156:	60b9      	str	r1, [r7, #8]
 800c158:	607a      	str	r2, [r7, #4]
 800c15a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c168:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	021a      	lsls	r2, r3, #8
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	431a      	orrs	r2, r3
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	4313      	orrs	r3, r2
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	4313      	orrs	r3, r2
 800c17a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	609a      	str	r2, [r3, #8]
}
 800c182:	bf00      	nop
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	bc80      	pop	{r7}
 800c18a:	4770      	bx	lr

0800c18c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d101      	bne.n	800c1a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	e050      	b.n	800c246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a1b      	ldr	r2, [pc, #108]	; (800c250 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d018      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a19      	ldr	r2, [pc, #100]	; (800c254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d013      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1fa:	d00e      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a15      	ldr	r2, [pc, #84]	; (800c258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d009      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a14      	ldr	r2, [pc, #80]	; (800c25c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d004      	beq.n	800c21a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a12      	ldr	r2, [pc, #72]	; (800c260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d10c      	bne.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	4313      	orrs	r3, r2
 800c22a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bc80      	pop	{r7}
 800c24e:	4770      	bx	lr
 800c250:	40012c00 	.word	0x40012c00
 800c254:	40013400 	.word	0x40013400
 800c258:	40000400 	.word	0x40000400
 800c25c:	40000800 	.word	0x40000800
 800c260:	40000c00 	.word	0x40000c00

0800c264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	bc80      	pop	{r7}
 800c274:	4770      	bx	lr

0800c276 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c276:	b480      	push	{r7}
 800c278:	b083      	sub	sp, #12
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c27e:	bf00      	nop
 800c280:	370c      	adds	r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	bc80      	pop	{r7}
 800c286:	4770      	bx	lr

0800c288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e042      	b.n	800c320 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d106      	bne.n	800c2b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7fc fe1a 	bl	8008ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2224      	movs	r2, #36	; 0x24
 800c2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68da      	ldr	r2, [r3, #12]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fcb5 	bl	800cc3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	695a      	ldr	r2, [r3, #20]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	68da      	ldr	r2, [r3, #12]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2220      	movs	r2, #32
 800c30c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2220      	movs	r2, #32
 800c314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	4613      	mov	r3, r2
 800c334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b20      	cmp	r3, #32
 800c340:	d121      	bne.n	800c386 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <HAL_UART_Transmit_IT+0x26>
 800c348:	88fb      	ldrh	r3, [r7, #6]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	e01a      	b.n	800c388 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	88fa      	ldrh	r2, [r7, #6]
 800c35c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	88fa      	ldrh	r2, [r7, #6]
 800c362:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2221      	movs	r2, #33	; 0x21
 800c36e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68da      	ldr	r2, [r3, #12]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c380:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	e000      	b.n	800c388 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c386:	2302      	movs	r3, #2
  }
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bc80      	pop	{r7}
 800c390:	4770      	bx	lr
	...

0800c394 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b0ba      	sub	sp, #232	; 0xe8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ca:	f003 030f 	and.w	r3, r3, #15
 800c3ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c3d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10f      	bne.n	800c3fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3de:	f003 0320 	and.w	r3, r3, #32
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d009      	beq.n	800c3fa <HAL_UART_IRQHandler+0x66>
 800c3e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fb63 	bl	800cabe <UART_Receive_IT>
      return;
 800c3f8:	e25b      	b.n	800c8b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c3fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 80de 	beq.w	800c5c0 <HAL_UART_IRQHandler+0x22c>
 800c404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d106      	bne.n	800c41e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c414:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 80d1 	beq.w	800c5c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00b      	beq.n	800c442 <HAL_UART_IRQHandler+0xae>
 800c42a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c42e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c43a:	f043 0201 	orr.w	r2, r3, #1
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c446:	f003 0304 	and.w	r3, r3, #4
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <HAL_UART_IRQHandler+0xd2>
 800c44e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	2b00      	cmp	r3, #0
 800c458:	d005      	beq.n	800c466 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45e:	f043 0202 	orr.w	r2, r3, #2
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00b      	beq.n	800c48a <HAL_UART_IRQHandler+0xf6>
 800c472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d005      	beq.n	800c48a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c482:	f043 0204 	orr.w	r2, r3, #4
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c48e:	f003 0308 	and.w	r3, r3, #8
 800c492:	2b00      	cmp	r3, #0
 800c494:	d011      	beq.n	800c4ba <HAL_UART_IRQHandler+0x126>
 800c496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c49a:	f003 0320 	and.w	r3, r3, #32
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d105      	bne.n	800c4ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c4a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d005      	beq.n	800c4ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4b2:	f043 0208 	orr.w	r2, r3, #8
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f000 81f2 	beq.w	800c8a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c8:	f003 0320 	and.w	r3, r3, #32
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d008      	beq.n	800c4e2 <HAL_UART_IRQHandler+0x14e>
 800c4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4d4:	f003 0320 	and.w	r3, r3, #32
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 faee 	bl	800cabe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	695b      	ldr	r3, [r3, #20]
 800c4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bf14      	ite	ne
 800c4f0:	2301      	movne	r3, #1
 800c4f2:	2300      	moveq	r3, #0
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fe:	f003 0308 	and.w	r3, r3, #8
 800c502:	2b00      	cmp	r3, #0
 800c504:	d103      	bne.n	800c50e <HAL_UART_IRQHandler+0x17a>
 800c506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d04f      	beq.n	800c5ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f9f8 	bl	800c904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d041      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3314      	adds	r3, #20
 800c528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c530:	e853 3f00 	ldrex	r3, [r3]
 800c534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c53c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3314      	adds	r3, #20
 800c54a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c54e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c55a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1d9      	bne.n	800c522 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c572:	2b00      	cmp	r3, #0
 800c574:	d013      	beq.n	800c59e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c57a:	4a7e      	ldr	r2, [pc, #504]	; (800c774 <HAL_UART_IRQHandler+0x3e0>)
 800c57c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c582:	4618      	mov	r0, r3
 800c584:	f7fd f86c 	bl	8009660 <HAL_DMA_Abort_IT>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d016      	beq.n	800c5bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c598:	4610      	mov	r0, r2
 800c59a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c59c:	e00e      	b.n	800c5bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f99c 	bl	800c8dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5a4:	e00a      	b.n	800c5bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f998 	bl	800c8dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ac:	e006      	b.n	800c5bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f994 	bl	800c8dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c5ba:	e175      	b.n	800c8a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5bc:	bf00      	nop
    return;
 800c5be:	e173      	b.n	800c8a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	f040 814f 	bne.w	800c868 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5ce:	f003 0310 	and.w	r3, r3, #16
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 8148 	beq.w	800c868 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5dc:	f003 0310 	and.w	r3, r3, #16
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 8141 	beq.w	800c868 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	60bb      	str	r3, [r7, #8]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	60bb      	str	r3, [r7, #8]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	60bb      	str	r3, [r7, #8]
 800c5fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	695b      	ldr	r3, [r3, #20]
 800c602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 80b6 	beq.w	800c778 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 8145 	beq.w	800c8ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c62a:	429a      	cmp	r2, r3
 800c62c:	f080 813e 	bcs.w	800c8ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c636:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	2b20      	cmp	r3, #32
 800c640:	f000 8088 	beq.w	800c754 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	330c      	adds	r3, #12
 800c64a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c652:	e853 3f00 	ldrex	r3, [r3]
 800c656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c65a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c65e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c662:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	330c      	adds	r3, #12
 800c66c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c670:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c678:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c67c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c680:	e841 2300 	strex	r3, r2, [r1]
 800c684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1d9      	bne.n	800c644 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3314      	adds	r3, #20
 800c696:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c69a:	e853 3f00 	ldrex	r3, [r3]
 800c69e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c6a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6a2:	f023 0301 	bic.w	r3, r3, #1
 800c6a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3314      	adds	r3, #20
 800c6b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c6b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c6b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c6bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c6c0:	e841 2300 	strex	r3, r2, [r1]
 800c6c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c6c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1e1      	bne.n	800c690 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3314      	adds	r3, #20
 800c6d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6d6:	e853 3f00 	ldrex	r3, [r3]
 800c6da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c6dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3314      	adds	r3, #20
 800c6ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c6f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c6f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c6f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6f8:	e841 2300 	strex	r3, r2, [r1]
 800c6fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c6fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1e3      	bne.n	800c6cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2220      	movs	r2, #32
 800c708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	330c      	adds	r3, #12
 800c718:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c724:	f023 0310 	bic.w	r3, r3, #16
 800c728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	330c      	adds	r3, #12
 800c732:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c736:	65ba      	str	r2, [r7, #88]	; 0x58
 800c738:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c73c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c73e:	e841 2300 	strex	r3, r2, [r1]
 800c742:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1e3      	bne.n	800c712 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fc ff4b 	bl	80095ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2202      	movs	r2, #2
 800c758:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c762:	b29b      	uxth	r3, r3
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	b29b      	uxth	r3, r3
 800c768:	4619      	mov	r1, r3
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f8bf 	bl	800c8ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c770:	e09c      	b.n	800c8ac <HAL_UART_IRQHandler+0x518>
 800c772:	bf00      	nop
 800c774:	0800c9c9 	.word	0x0800c9c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c780:	b29b      	uxth	r3, r3
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 808e 	beq.w	800c8b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 8089 	beq.w	800c8b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	330c      	adds	r3, #12
 800c7a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	e853 3f00 	ldrex	r3, [r3]
 800c7ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	330c      	adds	r3, #12
 800c7be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c7c2:	647a      	str	r2, [r7, #68]	; 0x44
 800c7c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c7c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e3      	bne.n	800c79e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3314      	adds	r3, #20
 800c7dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	e853 3f00 	ldrex	r3, [r3]
 800c7e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	f023 0301 	bic.w	r3, r3, #1
 800c7ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3314      	adds	r3, #20
 800c7f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c7fa:	633a      	str	r2, [r7, #48]	; 0x30
 800c7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c802:	e841 2300 	strex	r3, r2, [r1]
 800c806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1e3      	bne.n	800c7d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2220      	movs	r2, #32
 800c812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	330c      	adds	r3, #12
 800c822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f023 0310 	bic.w	r3, r3, #16
 800c832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	330c      	adds	r3, #12
 800c83c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c840:	61fa      	str	r2, [r7, #28]
 800c842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c844:	69b9      	ldr	r1, [r7, #24]
 800c846:	69fa      	ldr	r2, [r7, #28]
 800c848:	e841 2300 	strex	r3, r2, [r1]
 800c84c:	617b      	str	r3, [r7, #20]
   return(result);
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1e3      	bne.n	800c81c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2202      	movs	r2, #2
 800c858:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c85a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f844 	bl	800c8ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c866:	e023      	b.n	800c8b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c86c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c870:	2b00      	cmp	r3, #0
 800c872:	d009      	beq.n	800c888 <HAL_UART_IRQHandler+0x4f4>
 800c874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f8b5 	bl	800c9f0 <UART_Transmit_IT>
    return;
 800c886:	e014      	b.n	800c8b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00e      	beq.n	800c8b2 <HAL_UART_IRQHandler+0x51e>
 800c894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d008      	beq.n	800c8b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f8f4 	bl	800ca8e <UART_EndTransmit_IT>
    return;
 800c8a6:	e004      	b.n	800c8b2 <HAL_UART_IRQHandler+0x51e>
    return;
 800c8a8:	bf00      	nop
 800c8aa:	e002      	b.n	800c8b2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c8ac:	bf00      	nop
 800c8ae:	e000      	b.n	800c8b2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c8b0:	bf00      	nop
  }
}
 800c8b2:	37e8      	adds	r7, #232	; 0xe8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bc80      	pop	{r7}
 800c8c8:	4770      	bx	lr

0800c8ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c8d2:	bf00      	nop
 800c8d4:	370c      	adds	r7, #12
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bc80      	pop	{r7}
 800c8da:	4770      	bx	lr

0800c8dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bc80      	pop	{r7}
 800c8ec:	4770      	bx	lr

0800c8ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b083      	sub	sp, #12
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c8fa:	bf00      	nop
 800c8fc:	370c      	adds	r7, #12
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bc80      	pop	{r7}
 800c902:	4770      	bx	lr

0800c904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c904:	b480      	push	{r7}
 800c906:	b095      	sub	sp, #84	; 0x54
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	330c      	adds	r3, #12
 800c912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c916:	e853 3f00 	ldrex	r3, [r3]
 800c91a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c922:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	330c      	adds	r3, #12
 800c92a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c92c:	643a      	str	r2, [r7, #64]	; 0x40
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c934:	e841 2300 	strex	r3, r2, [r1]
 800c938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1e5      	bne.n	800c90c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3314      	adds	r3, #20
 800c946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	e853 3f00 	ldrex	r3, [r3]
 800c94e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	f023 0301 	bic.w	r3, r3, #1
 800c956:	64bb      	str	r3, [r7, #72]	; 0x48
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3314      	adds	r3, #20
 800c95e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c960:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c968:	e841 2300 	strex	r3, r2, [r1]
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1e5      	bne.n	800c940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d119      	bne.n	800c9b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	330c      	adds	r3, #12
 800c982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	e853 3f00 	ldrex	r3, [r3]
 800c98a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	f023 0310 	bic.w	r3, r3, #16
 800c992:	647b      	str	r3, [r7, #68]	; 0x44
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	330c      	adds	r3, #12
 800c99a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c99c:	61ba      	str	r2, [r7, #24]
 800c99e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a0:	6979      	ldr	r1, [r7, #20]
 800c9a2:	69ba      	ldr	r2, [r7, #24]
 800c9a4:	e841 2300 	strex	r3, r2, [r1]
 800c9a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1e5      	bne.n	800c97c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2220      	movs	r2, #32
 800c9b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c9be:	bf00      	nop
 800c9c0:	3754      	adds	r7, #84	; 0x54
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bc80      	pop	{r7}
 800c9c6:	4770      	bx	lr

0800c9c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f7ff ff7a 	bl	800c8dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9e8:	bf00      	nop
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b21      	cmp	r3, #33	; 0x21
 800ca02:	d13e      	bne.n	800ca82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca0c:	d114      	bne.n	800ca38 <UART_Transmit_IT+0x48>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d110      	bne.n	800ca38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a1b      	ldr	r3, [r3, #32]
 800ca1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	461a      	mov	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6a1b      	ldr	r3, [r3, #32]
 800ca30:	1c9a      	adds	r2, r3, #2
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	621a      	str	r2, [r3, #32]
 800ca36:	e008      	b.n	800ca4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	1c59      	adds	r1, r3, #1
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	6211      	str	r1, [r2, #32]
 800ca42:	781a      	ldrb	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	3b01      	subs	r3, #1
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	4619      	mov	r1, r3
 800ca58:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10f      	bne.n	800ca7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68da      	ldr	r2, [r3, #12]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	68da      	ldr	r2, [r3, #12]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e000      	b.n	800ca84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ca82:	2302      	movs	r3, #2
  }
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3714      	adds	r7, #20
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bc80      	pop	{r7}
 800ca8c:	4770      	bx	lr

0800ca8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b082      	sub	sp, #8
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68da      	ldr	r2, [r3, #12]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2220      	movs	r2, #32
 800caaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7ff ff02 	bl	800c8b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b08c      	sub	sp, #48	; 0x30
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	2b22      	cmp	r3, #34	; 0x22
 800cad0:	f040 80ae 	bne.w	800cc30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cadc:	d117      	bne.n	800cb0e <UART_Receive_IT+0x50>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d113      	bne.n	800cb0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb06:	1c9a      	adds	r2, r3, #2
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	629a      	str	r2, [r3, #40]	; 0x28
 800cb0c:	e026      	b.n	800cb5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cb14:	2300      	movs	r3, #0
 800cb16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb20:	d007      	beq.n	800cb32 <UART_Receive_IT+0x74>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10a      	bne.n	800cb40 <UART_Receive_IT+0x82>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	691b      	ldr	r3, [r3, #16]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d106      	bne.n	800cb40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	b2da      	uxtb	r2, r3
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	701a      	strb	r2, [r3, #0]
 800cb3e:	e008      	b.n	800cb52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	3b01      	subs	r3, #1
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	4619      	mov	r1, r3
 800cb6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d15d      	bne.n	800cc2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f022 0220 	bic.w	r2, r2, #32
 800cb7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	695a      	ldr	r2, [r3, #20]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f022 0201 	bic.w	r2, r2, #1
 800cb9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d135      	bne.n	800cc22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	330c      	adds	r3, #12
 800cbc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	e853 3f00 	ldrex	r3, [r3]
 800cbca:	613b      	str	r3, [r7, #16]
   return(result);
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	f023 0310 	bic.w	r3, r3, #16
 800cbd2:	627b      	str	r3, [r7, #36]	; 0x24
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	330c      	adds	r3, #12
 800cbda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbdc:	623a      	str	r2, [r7, #32]
 800cbde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe0:	69f9      	ldr	r1, [r7, #28]
 800cbe2:	6a3a      	ldr	r2, [r7, #32]
 800cbe4:	e841 2300 	strex	r3, r2, [r1]
 800cbe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e5      	bne.n	800cbbc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 0310 	and.w	r3, r3, #16
 800cbfa:	2b10      	cmp	r3, #16
 800cbfc:	d10a      	bne.n	800cc14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cbfe:	2300      	movs	r3, #0
 800cc00:	60fb      	str	r3, [r7, #12]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	60fb      	str	r3, [r7, #12]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fe67 	bl	800c8ee <HAL_UARTEx_RxEventCallback>
 800cc20:	e002      	b.n	800cc28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff fe51 	bl	800c8ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e002      	b.n	800cc32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	e000      	b.n	800cc32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cc30:	2302      	movs	r3, #2
  }
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3730      	adds	r7, #48	; 0x30
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
	...

0800cc3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	68da      	ldr	r2, [r3, #12]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	430a      	orrs	r2, r1
 800cc58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	689a      	ldr	r2, [r3, #8]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	431a      	orrs	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cc76:	f023 030c 	bic.w	r3, r3, #12
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	6812      	ldr	r2, [r2, #0]
 800cc7e:	68b9      	ldr	r1, [r7, #8]
 800cc80:	430b      	orrs	r3, r1
 800cc82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	699a      	ldr	r2, [r3, #24]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	430a      	orrs	r2, r1
 800cc98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a2c      	ldr	r2, [pc, #176]	; (800cd50 <UART_SetConfig+0x114>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d103      	bne.n	800ccac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cca4:	f7fe fe8c 	bl	800b9c0 <HAL_RCC_GetPCLK2Freq>
 800cca8:	60f8      	str	r0, [r7, #12]
 800ccaa:	e002      	b.n	800ccb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ccac:	f7fe fe74 	bl	800b998 <HAL_RCC_GetPCLK1Freq>
 800ccb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	009a      	lsls	r2, r3, #2
 800ccbc:	441a      	add	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccc8:	4a22      	ldr	r2, [pc, #136]	; (800cd54 <UART_SetConfig+0x118>)
 800ccca:	fba2 2303 	umull	r2, r3, r2, r3
 800ccce:	095b      	lsrs	r3, r3, #5
 800ccd0:	0119      	lsls	r1, r3, #4
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	009a      	lsls	r2, r3, #2
 800ccdc:	441a      	add	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	fbb2 f2f3 	udiv	r2, r2, r3
 800cce8:	4b1a      	ldr	r3, [pc, #104]	; (800cd54 <UART_SetConfig+0x118>)
 800ccea:	fba3 0302 	umull	r0, r3, r3, r2
 800ccee:	095b      	lsrs	r3, r3, #5
 800ccf0:	2064      	movs	r0, #100	; 0x64
 800ccf2:	fb00 f303 	mul.w	r3, r0, r3
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	011b      	lsls	r3, r3, #4
 800ccfa:	3332      	adds	r3, #50	; 0x32
 800ccfc:	4a15      	ldr	r2, [pc, #84]	; (800cd54 <UART_SetConfig+0x118>)
 800ccfe:	fba2 2303 	umull	r2, r3, r2, r3
 800cd02:	095b      	lsrs	r3, r3, #5
 800cd04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd08:	4419      	add	r1, r3
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	4413      	add	r3, r2
 800cd12:	009a      	lsls	r2, r3, #2
 800cd14:	441a      	add	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd20:	4b0c      	ldr	r3, [pc, #48]	; (800cd54 <UART_SetConfig+0x118>)
 800cd22:	fba3 0302 	umull	r0, r3, r3, r2
 800cd26:	095b      	lsrs	r3, r3, #5
 800cd28:	2064      	movs	r0, #100	; 0x64
 800cd2a:	fb00 f303 	mul.w	r3, r0, r3
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	011b      	lsls	r3, r3, #4
 800cd32:	3332      	adds	r3, #50	; 0x32
 800cd34:	4a07      	ldr	r2, [pc, #28]	; (800cd54 <UART_SetConfig+0x118>)
 800cd36:	fba2 2303 	umull	r2, r3, r2, r3
 800cd3a:	095b      	lsrs	r3, r3, #5
 800cd3c:	f003 020f 	and.w	r2, r3, #15
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	440a      	add	r2, r1
 800cd46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cd48:	bf00      	nop
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	40013800 	.word	0x40013800
 800cd54:	51eb851f 	.word	0x51eb851f

0800cd58 <__itoa>:
 800cd58:	1e93      	subs	r3, r2, #2
 800cd5a:	2b22      	cmp	r3, #34	; 0x22
 800cd5c:	b510      	push	{r4, lr}
 800cd5e:	460c      	mov	r4, r1
 800cd60:	d904      	bls.n	800cd6c <__itoa+0x14>
 800cd62:	2300      	movs	r3, #0
 800cd64:	461c      	mov	r4, r3
 800cd66:	700b      	strb	r3, [r1, #0]
 800cd68:	4620      	mov	r0, r4
 800cd6a:	bd10      	pop	{r4, pc}
 800cd6c:	2a0a      	cmp	r2, #10
 800cd6e:	d109      	bne.n	800cd84 <__itoa+0x2c>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	da07      	bge.n	800cd84 <__itoa+0x2c>
 800cd74:	232d      	movs	r3, #45	; 0x2d
 800cd76:	700b      	strb	r3, [r1, #0]
 800cd78:	2101      	movs	r1, #1
 800cd7a:	4240      	negs	r0, r0
 800cd7c:	4421      	add	r1, r4
 800cd7e:	f000 f8b9 	bl	800cef4 <__utoa>
 800cd82:	e7f1      	b.n	800cd68 <__itoa+0x10>
 800cd84:	2100      	movs	r1, #0
 800cd86:	e7f9      	b.n	800cd7c <__itoa+0x24>

0800cd88 <itoa>:
 800cd88:	f7ff bfe6 	b.w	800cd58 <__itoa>

0800cd8c <malloc>:
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <malloc+0xc>)
 800cd8e:	4601      	mov	r1, r0
 800cd90:	6818      	ldr	r0, [r3, #0]
 800cd92:	f000 b823 	b.w	800cddc <_malloc_r>
 800cd96:	bf00      	nop
 800cd98:	20000a0c 	.word	0x20000a0c

0800cd9c <sbrk_aligned>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	4e0e      	ldr	r6, [pc, #56]	; (800cdd8 <sbrk_aligned+0x3c>)
 800cda0:	460c      	mov	r4, r1
 800cda2:	6831      	ldr	r1, [r6, #0]
 800cda4:	4605      	mov	r5, r0
 800cda6:	b911      	cbnz	r1, 800cdae <sbrk_aligned+0x12>
 800cda8:	f000 f91e 	bl	800cfe8 <_sbrk_r>
 800cdac:	6030      	str	r0, [r6, #0]
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f000 f919 	bl	800cfe8 <_sbrk_r>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	d00a      	beq.n	800cdd0 <sbrk_aligned+0x34>
 800cdba:	1cc4      	adds	r4, r0, #3
 800cdbc:	f024 0403 	bic.w	r4, r4, #3
 800cdc0:	42a0      	cmp	r0, r4
 800cdc2:	d007      	beq.n	800cdd4 <sbrk_aligned+0x38>
 800cdc4:	1a21      	subs	r1, r4, r0
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f000 f90e 	bl	800cfe8 <_sbrk_r>
 800cdcc:	3001      	adds	r0, #1
 800cdce:	d101      	bne.n	800cdd4 <sbrk_aligned+0x38>
 800cdd0:	f04f 34ff 	mov.w	r4, #4294967295
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}
 800cdd8:	20000ee8 	.word	0x20000ee8

0800cddc <_malloc_r>:
 800cddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde0:	1ccd      	adds	r5, r1, #3
 800cde2:	f025 0503 	bic.w	r5, r5, #3
 800cde6:	3508      	adds	r5, #8
 800cde8:	2d0c      	cmp	r5, #12
 800cdea:	bf38      	it	cc
 800cdec:	250c      	movcc	r5, #12
 800cdee:	2d00      	cmp	r5, #0
 800cdf0:	4607      	mov	r7, r0
 800cdf2:	db01      	blt.n	800cdf8 <_malloc_r+0x1c>
 800cdf4:	42a9      	cmp	r1, r5
 800cdf6:	d905      	bls.n	800ce04 <_malloc_r+0x28>
 800cdf8:	230c      	movs	r3, #12
 800cdfa:	2600      	movs	r6, #0
 800cdfc:	603b      	str	r3, [r7, #0]
 800cdfe:	4630      	mov	r0, r6
 800ce00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ced8 <_malloc_r+0xfc>
 800ce08:	f000 f868 	bl	800cedc <__malloc_lock>
 800ce0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce10:	461c      	mov	r4, r3
 800ce12:	bb5c      	cbnz	r4, 800ce6c <_malloc_r+0x90>
 800ce14:	4629      	mov	r1, r5
 800ce16:	4638      	mov	r0, r7
 800ce18:	f7ff ffc0 	bl	800cd9c <sbrk_aligned>
 800ce1c:	1c43      	adds	r3, r0, #1
 800ce1e:	4604      	mov	r4, r0
 800ce20:	d155      	bne.n	800cece <_malloc_r+0xf2>
 800ce22:	f8d8 4000 	ldr.w	r4, [r8]
 800ce26:	4626      	mov	r6, r4
 800ce28:	2e00      	cmp	r6, #0
 800ce2a:	d145      	bne.n	800ceb8 <_malloc_r+0xdc>
 800ce2c:	2c00      	cmp	r4, #0
 800ce2e:	d048      	beq.n	800cec2 <_malloc_r+0xe6>
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	4631      	mov	r1, r6
 800ce34:	4638      	mov	r0, r7
 800ce36:	eb04 0903 	add.w	r9, r4, r3
 800ce3a:	f000 f8d5 	bl	800cfe8 <_sbrk_r>
 800ce3e:	4581      	cmp	r9, r0
 800ce40:	d13f      	bne.n	800cec2 <_malloc_r+0xe6>
 800ce42:	6821      	ldr	r1, [r4, #0]
 800ce44:	4638      	mov	r0, r7
 800ce46:	1a6d      	subs	r5, r5, r1
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f7ff ffa7 	bl	800cd9c <sbrk_aligned>
 800ce4e:	3001      	adds	r0, #1
 800ce50:	d037      	beq.n	800cec2 <_malloc_r+0xe6>
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	442b      	add	r3, r5
 800ce56:	6023      	str	r3, [r4, #0]
 800ce58:	f8d8 3000 	ldr.w	r3, [r8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d038      	beq.n	800ced2 <_malloc_r+0xf6>
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	42a2      	cmp	r2, r4
 800ce64:	d12b      	bne.n	800cebe <_malloc_r+0xe2>
 800ce66:	2200      	movs	r2, #0
 800ce68:	605a      	str	r2, [r3, #4]
 800ce6a:	e00f      	b.n	800ce8c <_malloc_r+0xb0>
 800ce6c:	6822      	ldr	r2, [r4, #0]
 800ce6e:	1b52      	subs	r2, r2, r5
 800ce70:	d41f      	bmi.n	800ceb2 <_malloc_r+0xd6>
 800ce72:	2a0b      	cmp	r2, #11
 800ce74:	d917      	bls.n	800cea6 <_malloc_r+0xca>
 800ce76:	1961      	adds	r1, r4, r5
 800ce78:	42a3      	cmp	r3, r4
 800ce7a:	6025      	str	r5, [r4, #0]
 800ce7c:	bf18      	it	ne
 800ce7e:	6059      	strne	r1, [r3, #4]
 800ce80:	6863      	ldr	r3, [r4, #4]
 800ce82:	bf08      	it	eq
 800ce84:	f8c8 1000 	streq.w	r1, [r8]
 800ce88:	5162      	str	r2, [r4, r5]
 800ce8a:	604b      	str	r3, [r1, #4]
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	f104 060b 	add.w	r6, r4, #11
 800ce92:	f000 f829 	bl	800cee8 <__malloc_unlock>
 800ce96:	f026 0607 	bic.w	r6, r6, #7
 800ce9a:	1d23      	adds	r3, r4, #4
 800ce9c:	1af2      	subs	r2, r6, r3
 800ce9e:	d0ae      	beq.n	800cdfe <_malloc_r+0x22>
 800cea0:	1b9b      	subs	r3, r3, r6
 800cea2:	50a3      	str	r3, [r4, r2]
 800cea4:	e7ab      	b.n	800cdfe <_malloc_r+0x22>
 800cea6:	42a3      	cmp	r3, r4
 800cea8:	6862      	ldr	r2, [r4, #4]
 800ceaa:	d1dd      	bne.n	800ce68 <_malloc_r+0x8c>
 800ceac:	f8c8 2000 	str.w	r2, [r8]
 800ceb0:	e7ec      	b.n	800ce8c <_malloc_r+0xb0>
 800ceb2:	4623      	mov	r3, r4
 800ceb4:	6864      	ldr	r4, [r4, #4]
 800ceb6:	e7ac      	b.n	800ce12 <_malloc_r+0x36>
 800ceb8:	4634      	mov	r4, r6
 800ceba:	6876      	ldr	r6, [r6, #4]
 800cebc:	e7b4      	b.n	800ce28 <_malloc_r+0x4c>
 800cebe:	4613      	mov	r3, r2
 800cec0:	e7cc      	b.n	800ce5c <_malloc_r+0x80>
 800cec2:	230c      	movs	r3, #12
 800cec4:	4638      	mov	r0, r7
 800cec6:	603b      	str	r3, [r7, #0]
 800cec8:	f000 f80e 	bl	800cee8 <__malloc_unlock>
 800cecc:	e797      	b.n	800cdfe <_malloc_r+0x22>
 800cece:	6025      	str	r5, [r4, #0]
 800ced0:	e7dc      	b.n	800ce8c <_malloc_r+0xb0>
 800ced2:	605b      	str	r3, [r3, #4]
 800ced4:	deff      	udf	#255	; 0xff
 800ced6:	bf00      	nop
 800ced8:	20000ee4 	.word	0x20000ee4

0800cedc <__malloc_lock>:
 800cedc:	4801      	ldr	r0, [pc, #4]	; (800cee4 <__malloc_lock+0x8>)
 800cede:	f000 b8bd 	b.w	800d05c <__retarget_lock_acquire_recursive>
 800cee2:	bf00      	nop
 800cee4:	20001028 	.word	0x20001028

0800cee8 <__malloc_unlock>:
 800cee8:	4801      	ldr	r0, [pc, #4]	; (800cef0 <__malloc_unlock+0x8>)
 800ceea:	f000 b8b8 	b.w	800d05e <__retarget_lock_release_recursive>
 800ceee:	bf00      	nop
 800cef0:	20001028 	.word	0x20001028

0800cef4 <__utoa>:
 800cef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef6:	b08b      	sub	sp, #44	; 0x2c
 800cef8:	4605      	mov	r5, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	466e      	mov	r6, sp
 800cefe:	4c1d      	ldr	r4, [pc, #116]	; (800cf74 <__utoa+0x80>)
 800cf00:	f104 0c20 	add.w	ip, r4, #32
 800cf04:	4637      	mov	r7, r6
 800cf06:	6820      	ldr	r0, [r4, #0]
 800cf08:	6861      	ldr	r1, [r4, #4]
 800cf0a:	3408      	adds	r4, #8
 800cf0c:	c703      	stmia	r7!, {r0, r1}
 800cf0e:	4564      	cmp	r4, ip
 800cf10:	463e      	mov	r6, r7
 800cf12:	d1f7      	bne.n	800cf04 <__utoa+0x10>
 800cf14:	7921      	ldrb	r1, [r4, #4]
 800cf16:	6820      	ldr	r0, [r4, #0]
 800cf18:	7139      	strb	r1, [r7, #4]
 800cf1a:	1e91      	subs	r1, r2, #2
 800cf1c:	2922      	cmp	r1, #34	; 0x22
 800cf1e:	6038      	str	r0, [r7, #0]
 800cf20:	f04f 0100 	mov.w	r1, #0
 800cf24:	d904      	bls.n	800cf30 <__utoa+0x3c>
 800cf26:	7019      	strb	r1, [r3, #0]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	b00b      	add	sp, #44	; 0x2c
 800cf2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf30:	1e58      	subs	r0, r3, #1
 800cf32:	4684      	mov	ip, r0
 800cf34:	fbb5 f7f2 	udiv	r7, r5, r2
 800cf38:	fb02 5617 	mls	r6, r2, r7, r5
 800cf3c:	3628      	adds	r6, #40	; 0x28
 800cf3e:	446e      	add	r6, sp
 800cf40:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cf44:	460c      	mov	r4, r1
 800cf46:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cf4a:	462e      	mov	r6, r5
 800cf4c:	42b2      	cmp	r2, r6
 800cf4e:	463d      	mov	r5, r7
 800cf50:	f101 0101 	add.w	r1, r1, #1
 800cf54:	d9ee      	bls.n	800cf34 <__utoa+0x40>
 800cf56:	2200      	movs	r2, #0
 800cf58:	545a      	strb	r2, [r3, r1]
 800cf5a:	1919      	adds	r1, r3, r4
 800cf5c:	1aa5      	subs	r5, r4, r2
 800cf5e:	42aa      	cmp	r2, r5
 800cf60:	dae3      	bge.n	800cf2a <__utoa+0x36>
 800cf62:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cf66:	780e      	ldrb	r6, [r1, #0]
 800cf68:	3201      	adds	r2, #1
 800cf6a:	7006      	strb	r6, [r0, #0]
 800cf6c:	f801 5901 	strb.w	r5, [r1], #-1
 800cf70:	e7f4      	b.n	800cf5c <__utoa+0x68>
 800cf72:	bf00      	nop
 800cf74:	0800e676 	.word	0x0800e676

0800cf78 <siprintf>:
 800cf78:	b40e      	push	{r1, r2, r3}
 800cf7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf7e:	b500      	push	{lr}
 800cf80:	b09c      	sub	sp, #112	; 0x70
 800cf82:	ab1d      	add	r3, sp, #116	; 0x74
 800cf84:	9002      	str	r0, [sp, #8]
 800cf86:	9006      	str	r0, [sp, #24]
 800cf88:	9107      	str	r1, [sp, #28]
 800cf8a:	9104      	str	r1, [sp, #16]
 800cf8c:	4808      	ldr	r0, [pc, #32]	; (800cfb0 <siprintf+0x38>)
 800cf8e:	4909      	ldr	r1, [pc, #36]	; (800cfb4 <siprintf+0x3c>)
 800cf90:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf94:	9105      	str	r1, [sp, #20]
 800cf96:	6800      	ldr	r0, [r0, #0]
 800cf98:	a902      	add	r1, sp, #8
 800cf9a:	9301      	str	r3, [sp, #4]
 800cf9c:	f000 f90a 	bl	800d1b4 <_svfiprintf_r>
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	9b02      	ldr	r3, [sp, #8]
 800cfa4:	701a      	strb	r2, [r3, #0]
 800cfa6:	b01c      	add	sp, #112	; 0x70
 800cfa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfac:	b003      	add	sp, #12
 800cfae:	4770      	bx	lr
 800cfb0:	20000a0c 	.word	0x20000a0c
 800cfb4:	ffff0208 	.word	0xffff0208

0800cfb8 <memset>:
 800cfb8:	4603      	mov	r3, r0
 800cfba:	4402      	add	r2, r0
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d100      	bne.n	800cfc2 <memset+0xa>
 800cfc0:	4770      	bx	lr
 800cfc2:	f803 1b01 	strb.w	r1, [r3], #1
 800cfc6:	e7f9      	b.n	800cfbc <memset+0x4>

0800cfc8 <strcat>:
 800cfc8:	4602      	mov	r2, r0
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	7814      	ldrb	r4, [r2, #0]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	3201      	adds	r2, #1
 800cfd2:	2c00      	cmp	r4, #0
 800cfd4:	d1fa      	bne.n	800cfcc <strcat+0x4>
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfe0:	2a00      	cmp	r2, #0
 800cfe2:	d1f9      	bne.n	800cfd8 <strcat+0x10>
 800cfe4:	bd10      	pop	{r4, pc}
	...

0800cfe8 <_sbrk_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	2300      	movs	r3, #0
 800cfec:	4d05      	ldr	r5, [pc, #20]	; (800d004 <_sbrk_r+0x1c>)
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	602b      	str	r3, [r5, #0]
 800cff4:	f7fc f808 	bl	8009008 <_sbrk>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_sbrk_r+0x1a>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_sbrk_r+0x1a>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	20001024 	.word	0x20001024

0800d008 <__errno>:
 800d008:	4b01      	ldr	r3, [pc, #4]	; (800d010 <__errno+0x8>)
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	20000a0c 	.word	0x20000a0c

0800d014 <__libc_init_array>:
 800d014:	b570      	push	{r4, r5, r6, lr}
 800d016:	2600      	movs	r6, #0
 800d018:	4d0c      	ldr	r5, [pc, #48]	; (800d04c <__libc_init_array+0x38>)
 800d01a:	4c0d      	ldr	r4, [pc, #52]	; (800d050 <__libc_init_array+0x3c>)
 800d01c:	1b64      	subs	r4, r4, r5
 800d01e:	10a4      	asrs	r4, r4, #2
 800d020:	42a6      	cmp	r6, r4
 800d022:	d109      	bne.n	800d038 <__libc_init_array+0x24>
 800d024:	f000 fbc6 	bl	800d7b4 <_init>
 800d028:	2600      	movs	r6, #0
 800d02a:	4d0a      	ldr	r5, [pc, #40]	; (800d054 <__libc_init_array+0x40>)
 800d02c:	4c0a      	ldr	r4, [pc, #40]	; (800d058 <__libc_init_array+0x44>)
 800d02e:	1b64      	subs	r4, r4, r5
 800d030:	10a4      	asrs	r4, r4, #2
 800d032:	42a6      	cmp	r6, r4
 800d034:	d105      	bne.n	800d042 <__libc_init_array+0x2e>
 800d036:	bd70      	pop	{r4, r5, r6, pc}
 800d038:	f855 3b04 	ldr.w	r3, [r5], #4
 800d03c:	4798      	blx	r3
 800d03e:	3601      	adds	r6, #1
 800d040:	e7ee      	b.n	800d020 <__libc_init_array+0xc>
 800d042:	f855 3b04 	ldr.w	r3, [r5], #4
 800d046:	4798      	blx	r3
 800d048:	3601      	adds	r6, #1
 800d04a:	e7f2      	b.n	800d032 <__libc_init_array+0x1e>
 800d04c:	0800e6d0 	.word	0x0800e6d0
 800d050:	0800e6d0 	.word	0x0800e6d0
 800d054:	0800e6d0 	.word	0x0800e6d0
 800d058:	0800e6d4 	.word	0x0800e6d4

0800d05c <__retarget_lock_acquire_recursive>:
 800d05c:	4770      	bx	lr

0800d05e <__retarget_lock_release_recursive>:
 800d05e:	4770      	bx	lr

0800d060 <strcpy>:
 800d060:	4603      	mov	r3, r0
 800d062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d066:	f803 2b01 	strb.w	r2, [r3], #1
 800d06a:	2a00      	cmp	r2, #0
 800d06c:	d1f9      	bne.n	800d062 <strcpy+0x2>
 800d06e:	4770      	bx	lr

0800d070 <_free_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4605      	mov	r5, r0
 800d074:	2900      	cmp	r1, #0
 800d076:	d040      	beq.n	800d0fa <_free_r+0x8a>
 800d078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d07c:	1f0c      	subs	r4, r1, #4
 800d07e:	2b00      	cmp	r3, #0
 800d080:	bfb8      	it	lt
 800d082:	18e4      	addlt	r4, r4, r3
 800d084:	f7ff ff2a 	bl	800cedc <__malloc_lock>
 800d088:	4a1c      	ldr	r2, [pc, #112]	; (800d0fc <_free_r+0x8c>)
 800d08a:	6813      	ldr	r3, [r2, #0]
 800d08c:	b933      	cbnz	r3, 800d09c <_free_r+0x2c>
 800d08e:	6063      	str	r3, [r4, #4]
 800d090:	6014      	str	r4, [r2, #0]
 800d092:	4628      	mov	r0, r5
 800d094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d098:	f7ff bf26 	b.w	800cee8 <__malloc_unlock>
 800d09c:	42a3      	cmp	r3, r4
 800d09e:	d908      	bls.n	800d0b2 <_free_r+0x42>
 800d0a0:	6820      	ldr	r0, [r4, #0]
 800d0a2:	1821      	adds	r1, r4, r0
 800d0a4:	428b      	cmp	r3, r1
 800d0a6:	bf01      	itttt	eq
 800d0a8:	6819      	ldreq	r1, [r3, #0]
 800d0aa:	685b      	ldreq	r3, [r3, #4]
 800d0ac:	1809      	addeq	r1, r1, r0
 800d0ae:	6021      	streq	r1, [r4, #0]
 800d0b0:	e7ed      	b.n	800d08e <_free_r+0x1e>
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	b10b      	cbz	r3, 800d0bc <_free_r+0x4c>
 800d0b8:	42a3      	cmp	r3, r4
 800d0ba:	d9fa      	bls.n	800d0b2 <_free_r+0x42>
 800d0bc:	6811      	ldr	r1, [r2, #0]
 800d0be:	1850      	adds	r0, r2, r1
 800d0c0:	42a0      	cmp	r0, r4
 800d0c2:	d10b      	bne.n	800d0dc <_free_r+0x6c>
 800d0c4:	6820      	ldr	r0, [r4, #0]
 800d0c6:	4401      	add	r1, r0
 800d0c8:	1850      	adds	r0, r2, r1
 800d0ca:	4283      	cmp	r3, r0
 800d0cc:	6011      	str	r1, [r2, #0]
 800d0ce:	d1e0      	bne.n	800d092 <_free_r+0x22>
 800d0d0:	6818      	ldr	r0, [r3, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	4408      	add	r0, r1
 800d0d6:	6010      	str	r0, [r2, #0]
 800d0d8:	6053      	str	r3, [r2, #4]
 800d0da:	e7da      	b.n	800d092 <_free_r+0x22>
 800d0dc:	d902      	bls.n	800d0e4 <_free_r+0x74>
 800d0de:	230c      	movs	r3, #12
 800d0e0:	602b      	str	r3, [r5, #0]
 800d0e2:	e7d6      	b.n	800d092 <_free_r+0x22>
 800d0e4:	6820      	ldr	r0, [r4, #0]
 800d0e6:	1821      	adds	r1, r4, r0
 800d0e8:	428b      	cmp	r3, r1
 800d0ea:	bf01      	itttt	eq
 800d0ec:	6819      	ldreq	r1, [r3, #0]
 800d0ee:	685b      	ldreq	r3, [r3, #4]
 800d0f0:	1809      	addeq	r1, r1, r0
 800d0f2:	6021      	streq	r1, [r4, #0]
 800d0f4:	6063      	str	r3, [r4, #4]
 800d0f6:	6054      	str	r4, [r2, #4]
 800d0f8:	e7cb      	b.n	800d092 <_free_r+0x22>
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20000ee4 	.word	0x20000ee4

0800d100 <__ssputs_r>:
 800d100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d104:	461f      	mov	r7, r3
 800d106:	688e      	ldr	r6, [r1, #8]
 800d108:	4682      	mov	sl, r0
 800d10a:	42be      	cmp	r6, r7
 800d10c:	460c      	mov	r4, r1
 800d10e:	4690      	mov	r8, r2
 800d110:	680b      	ldr	r3, [r1, #0]
 800d112:	d82c      	bhi.n	800d16e <__ssputs_r+0x6e>
 800d114:	898a      	ldrh	r2, [r1, #12]
 800d116:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d11a:	d026      	beq.n	800d16a <__ssputs_r+0x6a>
 800d11c:	6965      	ldr	r5, [r4, #20]
 800d11e:	6909      	ldr	r1, [r1, #16]
 800d120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d124:	eba3 0901 	sub.w	r9, r3, r1
 800d128:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d12c:	1c7b      	adds	r3, r7, #1
 800d12e:	444b      	add	r3, r9
 800d130:	106d      	asrs	r5, r5, #1
 800d132:	429d      	cmp	r5, r3
 800d134:	bf38      	it	cc
 800d136:	461d      	movcc	r5, r3
 800d138:	0553      	lsls	r3, r2, #21
 800d13a:	d527      	bpl.n	800d18c <__ssputs_r+0x8c>
 800d13c:	4629      	mov	r1, r5
 800d13e:	f7ff fe4d 	bl	800cddc <_malloc_r>
 800d142:	4606      	mov	r6, r0
 800d144:	b360      	cbz	r0, 800d1a0 <__ssputs_r+0xa0>
 800d146:	464a      	mov	r2, r9
 800d148:	6921      	ldr	r1, [r4, #16]
 800d14a:	f000 faed 	bl	800d728 <memcpy>
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	6126      	str	r6, [r4, #16]
 800d15c:	444e      	add	r6, r9
 800d15e:	6026      	str	r6, [r4, #0]
 800d160:	463e      	mov	r6, r7
 800d162:	6165      	str	r5, [r4, #20]
 800d164:	eba5 0509 	sub.w	r5, r5, r9
 800d168:	60a5      	str	r5, [r4, #8]
 800d16a:	42be      	cmp	r6, r7
 800d16c:	d900      	bls.n	800d170 <__ssputs_r+0x70>
 800d16e:	463e      	mov	r6, r7
 800d170:	4632      	mov	r2, r6
 800d172:	4641      	mov	r1, r8
 800d174:	6820      	ldr	r0, [r4, #0]
 800d176:	f000 faaf 	bl	800d6d8 <memmove>
 800d17a:	2000      	movs	r0, #0
 800d17c:	68a3      	ldr	r3, [r4, #8]
 800d17e:	1b9b      	subs	r3, r3, r6
 800d180:	60a3      	str	r3, [r4, #8]
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	4433      	add	r3, r6
 800d186:	6023      	str	r3, [r4, #0]
 800d188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18c:	462a      	mov	r2, r5
 800d18e:	f000 fad9 	bl	800d744 <_realloc_r>
 800d192:	4606      	mov	r6, r0
 800d194:	2800      	cmp	r0, #0
 800d196:	d1e0      	bne.n	800d15a <__ssputs_r+0x5a>
 800d198:	4650      	mov	r0, sl
 800d19a:	6921      	ldr	r1, [r4, #16]
 800d19c:	f7ff ff68 	bl	800d070 <_free_r>
 800d1a0:	230c      	movs	r3, #12
 800d1a2:	f8ca 3000 	str.w	r3, [sl]
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1b0:	81a3      	strh	r3, [r4, #12]
 800d1b2:	e7e9      	b.n	800d188 <__ssputs_r+0x88>

0800d1b4 <_svfiprintf_r>:
 800d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b8:	4698      	mov	r8, r3
 800d1ba:	898b      	ldrh	r3, [r1, #12]
 800d1bc:	4607      	mov	r7, r0
 800d1be:	061b      	lsls	r3, r3, #24
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	4614      	mov	r4, r2
 800d1c4:	b09d      	sub	sp, #116	; 0x74
 800d1c6:	d50e      	bpl.n	800d1e6 <_svfiprintf_r+0x32>
 800d1c8:	690b      	ldr	r3, [r1, #16]
 800d1ca:	b963      	cbnz	r3, 800d1e6 <_svfiprintf_r+0x32>
 800d1cc:	2140      	movs	r1, #64	; 0x40
 800d1ce:	f7ff fe05 	bl	800cddc <_malloc_r>
 800d1d2:	6028      	str	r0, [r5, #0]
 800d1d4:	6128      	str	r0, [r5, #16]
 800d1d6:	b920      	cbnz	r0, 800d1e2 <_svfiprintf_r+0x2e>
 800d1d8:	230c      	movs	r3, #12
 800d1da:	603b      	str	r3, [r7, #0]
 800d1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e0:	e0d0      	b.n	800d384 <_svfiprintf_r+0x1d0>
 800d1e2:	2340      	movs	r3, #64	; 0x40
 800d1e4:	616b      	str	r3, [r5, #20]
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ea:	2320      	movs	r3, #32
 800d1ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1f0:	2330      	movs	r3, #48	; 0x30
 800d1f2:	f04f 0901 	mov.w	r9, #1
 800d1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d39c <_svfiprintf_r+0x1e8>
 800d1fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d202:	4623      	mov	r3, r4
 800d204:	469a      	mov	sl, r3
 800d206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20a:	b10a      	cbz	r2, 800d210 <_svfiprintf_r+0x5c>
 800d20c:	2a25      	cmp	r2, #37	; 0x25
 800d20e:	d1f9      	bne.n	800d204 <_svfiprintf_r+0x50>
 800d210:	ebba 0b04 	subs.w	fp, sl, r4
 800d214:	d00b      	beq.n	800d22e <_svfiprintf_r+0x7a>
 800d216:	465b      	mov	r3, fp
 800d218:	4622      	mov	r2, r4
 800d21a:	4629      	mov	r1, r5
 800d21c:	4638      	mov	r0, r7
 800d21e:	f7ff ff6f 	bl	800d100 <__ssputs_r>
 800d222:	3001      	adds	r0, #1
 800d224:	f000 80a9 	beq.w	800d37a <_svfiprintf_r+0x1c6>
 800d228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d22a:	445a      	add	r2, fp
 800d22c:	9209      	str	r2, [sp, #36]	; 0x24
 800d22e:	f89a 3000 	ldrb.w	r3, [sl]
 800d232:	2b00      	cmp	r3, #0
 800d234:	f000 80a1 	beq.w	800d37a <_svfiprintf_r+0x1c6>
 800d238:	2300      	movs	r3, #0
 800d23a:	f04f 32ff 	mov.w	r2, #4294967295
 800d23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d242:	f10a 0a01 	add.w	sl, sl, #1
 800d246:	9304      	str	r3, [sp, #16]
 800d248:	9307      	str	r3, [sp, #28]
 800d24a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d24e:	931a      	str	r3, [sp, #104]	; 0x68
 800d250:	4654      	mov	r4, sl
 800d252:	2205      	movs	r2, #5
 800d254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d258:	4850      	ldr	r0, [pc, #320]	; (800d39c <_svfiprintf_r+0x1e8>)
 800d25a:	f000 fa57 	bl	800d70c <memchr>
 800d25e:	9a04      	ldr	r2, [sp, #16]
 800d260:	b9d8      	cbnz	r0, 800d29a <_svfiprintf_r+0xe6>
 800d262:	06d0      	lsls	r0, r2, #27
 800d264:	bf44      	itt	mi
 800d266:	2320      	movmi	r3, #32
 800d268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d26c:	0711      	lsls	r1, r2, #28
 800d26e:	bf44      	itt	mi
 800d270:	232b      	movmi	r3, #43	; 0x2b
 800d272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d276:	f89a 3000 	ldrb.w	r3, [sl]
 800d27a:	2b2a      	cmp	r3, #42	; 0x2a
 800d27c:	d015      	beq.n	800d2aa <_svfiprintf_r+0xf6>
 800d27e:	4654      	mov	r4, sl
 800d280:	2000      	movs	r0, #0
 800d282:	f04f 0c0a 	mov.w	ip, #10
 800d286:	9a07      	ldr	r2, [sp, #28]
 800d288:	4621      	mov	r1, r4
 800d28a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d28e:	3b30      	subs	r3, #48	; 0x30
 800d290:	2b09      	cmp	r3, #9
 800d292:	d94d      	bls.n	800d330 <_svfiprintf_r+0x17c>
 800d294:	b1b0      	cbz	r0, 800d2c4 <_svfiprintf_r+0x110>
 800d296:	9207      	str	r2, [sp, #28]
 800d298:	e014      	b.n	800d2c4 <_svfiprintf_r+0x110>
 800d29a:	eba0 0308 	sub.w	r3, r0, r8
 800d29e:	fa09 f303 	lsl.w	r3, r9, r3
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	46a2      	mov	sl, r4
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	e7d2      	b.n	800d250 <_svfiprintf_r+0x9c>
 800d2aa:	9b03      	ldr	r3, [sp, #12]
 800d2ac:	1d19      	adds	r1, r3, #4
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	9103      	str	r1, [sp, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	bfbb      	ittet	lt
 800d2b6:	425b      	neglt	r3, r3
 800d2b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d2bc:	9307      	strge	r3, [sp, #28]
 800d2be:	9307      	strlt	r3, [sp, #28]
 800d2c0:	bfb8      	it	lt
 800d2c2:	9204      	strlt	r2, [sp, #16]
 800d2c4:	7823      	ldrb	r3, [r4, #0]
 800d2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2c8:	d10c      	bne.n	800d2e4 <_svfiprintf_r+0x130>
 800d2ca:	7863      	ldrb	r3, [r4, #1]
 800d2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ce:	d134      	bne.n	800d33a <_svfiprintf_r+0x186>
 800d2d0:	9b03      	ldr	r3, [sp, #12]
 800d2d2:	3402      	adds	r4, #2
 800d2d4:	1d1a      	adds	r2, r3, #4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	9203      	str	r2, [sp, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	bfb8      	it	lt
 800d2de:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2e2:	9305      	str	r3, [sp, #20]
 800d2e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d3a0 <_svfiprintf_r+0x1ec>
 800d2e8:	2203      	movs	r2, #3
 800d2ea:	4650      	mov	r0, sl
 800d2ec:	7821      	ldrb	r1, [r4, #0]
 800d2ee:	f000 fa0d 	bl	800d70c <memchr>
 800d2f2:	b138      	cbz	r0, 800d304 <_svfiprintf_r+0x150>
 800d2f4:	2240      	movs	r2, #64	; 0x40
 800d2f6:	9b04      	ldr	r3, [sp, #16]
 800d2f8:	eba0 000a 	sub.w	r0, r0, sl
 800d2fc:	4082      	lsls	r2, r0
 800d2fe:	4313      	orrs	r3, r2
 800d300:	3401      	adds	r4, #1
 800d302:	9304      	str	r3, [sp, #16]
 800d304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d308:	2206      	movs	r2, #6
 800d30a:	4826      	ldr	r0, [pc, #152]	; (800d3a4 <_svfiprintf_r+0x1f0>)
 800d30c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d310:	f000 f9fc 	bl	800d70c <memchr>
 800d314:	2800      	cmp	r0, #0
 800d316:	d038      	beq.n	800d38a <_svfiprintf_r+0x1d6>
 800d318:	4b23      	ldr	r3, [pc, #140]	; (800d3a8 <_svfiprintf_r+0x1f4>)
 800d31a:	bb1b      	cbnz	r3, 800d364 <_svfiprintf_r+0x1b0>
 800d31c:	9b03      	ldr	r3, [sp, #12]
 800d31e:	3307      	adds	r3, #7
 800d320:	f023 0307 	bic.w	r3, r3, #7
 800d324:	3308      	adds	r3, #8
 800d326:	9303      	str	r3, [sp, #12]
 800d328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32a:	4433      	add	r3, r6
 800d32c:	9309      	str	r3, [sp, #36]	; 0x24
 800d32e:	e768      	b.n	800d202 <_svfiprintf_r+0x4e>
 800d330:	460c      	mov	r4, r1
 800d332:	2001      	movs	r0, #1
 800d334:	fb0c 3202 	mla	r2, ip, r2, r3
 800d338:	e7a6      	b.n	800d288 <_svfiprintf_r+0xd4>
 800d33a:	2300      	movs	r3, #0
 800d33c:	f04f 0c0a 	mov.w	ip, #10
 800d340:	4619      	mov	r1, r3
 800d342:	3401      	adds	r4, #1
 800d344:	9305      	str	r3, [sp, #20]
 800d346:	4620      	mov	r0, r4
 800d348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d34c:	3a30      	subs	r2, #48	; 0x30
 800d34e:	2a09      	cmp	r2, #9
 800d350:	d903      	bls.n	800d35a <_svfiprintf_r+0x1a6>
 800d352:	2b00      	cmp	r3, #0
 800d354:	d0c6      	beq.n	800d2e4 <_svfiprintf_r+0x130>
 800d356:	9105      	str	r1, [sp, #20]
 800d358:	e7c4      	b.n	800d2e4 <_svfiprintf_r+0x130>
 800d35a:	4604      	mov	r4, r0
 800d35c:	2301      	movs	r3, #1
 800d35e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d362:	e7f0      	b.n	800d346 <_svfiprintf_r+0x192>
 800d364:	ab03      	add	r3, sp, #12
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	462a      	mov	r2, r5
 800d36a:	4638      	mov	r0, r7
 800d36c:	4b0f      	ldr	r3, [pc, #60]	; (800d3ac <_svfiprintf_r+0x1f8>)
 800d36e:	a904      	add	r1, sp, #16
 800d370:	f3af 8000 	nop.w
 800d374:	1c42      	adds	r2, r0, #1
 800d376:	4606      	mov	r6, r0
 800d378:	d1d6      	bne.n	800d328 <_svfiprintf_r+0x174>
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	065b      	lsls	r3, r3, #25
 800d37e:	f53f af2d 	bmi.w	800d1dc <_svfiprintf_r+0x28>
 800d382:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d384:	b01d      	add	sp, #116	; 0x74
 800d386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38a:	ab03      	add	r3, sp, #12
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	462a      	mov	r2, r5
 800d390:	4638      	mov	r0, r7
 800d392:	4b06      	ldr	r3, [pc, #24]	; (800d3ac <_svfiprintf_r+0x1f8>)
 800d394:	a904      	add	r1, sp, #16
 800d396:	f000 f87d 	bl	800d494 <_printf_i>
 800d39a:	e7eb      	b.n	800d374 <_svfiprintf_r+0x1c0>
 800d39c:	0800e69b 	.word	0x0800e69b
 800d3a0:	0800e6a1 	.word	0x0800e6a1
 800d3a4:	0800e6a5 	.word	0x0800e6a5
 800d3a8:	00000000 	.word	0x00000000
 800d3ac:	0800d101 	.word	0x0800d101

0800d3b0 <_printf_common>:
 800d3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b4:	4616      	mov	r6, r2
 800d3b6:	4699      	mov	r9, r3
 800d3b8:	688a      	ldr	r2, [r1, #8]
 800d3ba:	690b      	ldr	r3, [r1, #16]
 800d3bc:	4607      	mov	r7, r0
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	bfb8      	it	lt
 800d3c2:	4613      	movlt	r3, r2
 800d3c4:	6033      	str	r3, [r6, #0]
 800d3c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3d0:	b10a      	cbz	r2, 800d3d6 <_printf_common+0x26>
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	6033      	str	r3, [r6, #0]
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	0699      	lsls	r1, r3, #26
 800d3da:	bf42      	ittt	mi
 800d3dc:	6833      	ldrmi	r3, [r6, #0]
 800d3de:	3302      	addmi	r3, #2
 800d3e0:	6033      	strmi	r3, [r6, #0]
 800d3e2:	6825      	ldr	r5, [r4, #0]
 800d3e4:	f015 0506 	ands.w	r5, r5, #6
 800d3e8:	d106      	bne.n	800d3f8 <_printf_common+0x48>
 800d3ea:	f104 0a19 	add.w	sl, r4, #25
 800d3ee:	68e3      	ldr	r3, [r4, #12]
 800d3f0:	6832      	ldr	r2, [r6, #0]
 800d3f2:	1a9b      	subs	r3, r3, r2
 800d3f4:	42ab      	cmp	r3, r5
 800d3f6:	dc2b      	bgt.n	800d450 <_printf_common+0xa0>
 800d3f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3fc:	1e13      	subs	r3, r2, #0
 800d3fe:	6822      	ldr	r2, [r4, #0]
 800d400:	bf18      	it	ne
 800d402:	2301      	movne	r3, #1
 800d404:	0692      	lsls	r2, r2, #26
 800d406:	d430      	bmi.n	800d46a <_printf_common+0xba>
 800d408:	4649      	mov	r1, r9
 800d40a:	4638      	mov	r0, r7
 800d40c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d410:	47c0      	blx	r8
 800d412:	3001      	adds	r0, #1
 800d414:	d023      	beq.n	800d45e <_printf_common+0xae>
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	6922      	ldr	r2, [r4, #16]
 800d41a:	f003 0306 	and.w	r3, r3, #6
 800d41e:	2b04      	cmp	r3, #4
 800d420:	bf14      	ite	ne
 800d422:	2500      	movne	r5, #0
 800d424:	6833      	ldreq	r3, [r6, #0]
 800d426:	f04f 0600 	mov.w	r6, #0
 800d42a:	bf08      	it	eq
 800d42c:	68e5      	ldreq	r5, [r4, #12]
 800d42e:	f104 041a 	add.w	r4, r4, #26
 800d432:	bf08      	it	eq
 800d434:	1aed      	subeq	r5, r5, r3
 800d436:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d43a:	bf08      	it	eq
 800d43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d440:	4293      	cmp	r3, r2
 800d442:	bfc4      	itt	gt
 800d444:	1a9b      	subgt	r3, r3, r2
 800d446:	18ed      	addgt	r5, r5, r3
 800d448:	42b5      	cmp	r5, r6
 800d44a:	d11a      	bne.n	800d482 <_printf_common+0xd2>
 800d44c:	2000      	movs	r0, #0
 800d44e:	e008      	b.n	800d462 <_printf_common+0xb2>
 800d450:	2301      	movs	r3, #1
 800d452:	4652      	mov	r2, sl
 800d454:	4649      	mov	r1, r9
 800d456:	4638      	mov	r0, r7
 800d458:	47c0      	blx	r8
 800d45a:	3001      	adds	r0, #1
 800d45c:	d103      	bne.n	800d466 <_printf_common+0xb6>
 800d45e:	f04f 30ff 	mov.w	r0, #4294967295
 800d462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d466:	3501      	adds	r5, #1
 800d468:	e7c1      	b.n	800d3ee <_printf_common+0x3e>
 800d46a:	2030      	movs	r0, #48	; 0x30
 800d46c:	18e1      	adds	r1, r4, r3
 800d46e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d472:	1c5a      	adds	r2, r3, #1
 800d474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d478:	4422      	add	r2, r4
 800d47a:	3302      	adds	r3, #2
 800d47c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d480:	e7c2      	b.n	800d408 <_printf_common+0x58>
 800d482:	2301      	movs	r3, #1
 800d484:	4622      	mov	r2, r4
 800d486:	4649      	mov	r1, r9
 800d488:	4638      	mov	r0, r7
 800d48a:	47c0      	blx	r8
 800d48c:	3001      	adds	r0, #1
 800d48e:	d0e6      	beq.n	800d45e <_printf_common+0xae>
 800d490:	3601      	adds	r6, #1
 800d492:	e7d9      	b.n	800d448 <_printf_common+0x98>

0800d494 <_printf_i>:
 800d494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d498:	7e0f      	ldrb	r7, [r1, #24]
 800d49a:	4691      	mov	r9, r2
 800d49c:	2f78      	cmp	r7, #120	; 0x78
 800d49e:	4680      	mov	r8, r0
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	469a      	mov	sl, r3
 800d4a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d4aa:	d807      	bhi.n	800d4bc <_printf_i+0x28>
 800d4ac:	2f62      	cmp	r7, #98	; 0x62
 800d4ae:	d80a      	bhi.n	800d4c6 <_printf_i+0x32>
 800d4b0:	2f00      	cmp	r7, #0
 800d4b2:	f000 80d5 	beq.w	800d660 <_printf_i+0x1cc>
 800d4b6:	2f58      	cmp	r7, #88	; 0x58
 800d4b8:	f000 80c1 	beq.w	800d63e <_printf_i+0x1aa>
 800d4bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4c4:	e03a      	b.n	800d53c <_printf_i+0xa8>
 800d4c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4ca:	2b15      	cmp	r3, #21
 800d4cc:	d8f6      	bhi.n	800d4bc <_printf_i+0x28>
 800d4ce:	a101      	add	r1, pc, #4	; (adr r1, 800d4d4 <_printf_i+0x40>)
 800d4d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4d4:	0800d52d 	.word	0x0800d52d
 800d4d8:	0800d541 	.word	0x0800d541
 800d4dc:	0800d4bd 	.word	0x0800d4bd
 800d4e0:	0800d4bd 	.word	0x0800d4bd
 800d4e4:	0800d4bd 	.word	0x0800d4bd
 800d4e8:	0800d4bd 	.word	0x0800d4bd
 800d4ec:	0800d541 	.word	0x0800d541
 800d4f0:	0800d4bd 	.word	0x0800d4bd
 800d4f4:	0800d4bd 	.word	0x0800d4bd
 800d4f8:	0800d4bd 	.word	0x0800d4bd
 800d4fc:	0800d4bd 	.word	0x0800d4bd
 800d500:	0800d647 	.word	0x0800d647
 800d504:	0800d56d 	.word	0x0800d56d
 800d508:	0800d601 	.word	0x0800d601
 800d50c:	0800d4bd 	.word	0x0800d4bd
 800d510:	0800d4bd 	.word	0x0800d4bd
 800d514:	0800d669 	.word	0x0800d669
 800d518:	0800d4bd 	.word	0x0800d4bd
 800d51c:	0800d56d 	.word	0x0800d56d
 800d520:	0800d4bd 	.word	0x0800d4bd
 800d524:	0800d4bd 	.word	0x0800d4bd
 800d528:	0800d609 	.word	0x0800d609
 800d52c:	682b      	ldr	r3, [r5, #0]
 800d52e:	1d1a      	adds	r2, r3, #4
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	602a      	str	r2, [r5, #0]
 800d534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d53c:	2301      	movs	r3, #1
 800d53e:	e0a0      	b.n	800d682 <_printf_i+0x1ee>
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	682b      	ldr	r3, [r5, #0]
 800d544:	0607      	lsls	r7, r0, #24
 800d546:	f103 0104 	add.w	r1, r3, #4
 800d54a:	6029      	str	r1, [r5, #0]
 800d54c:	d501      	bpl.n	800d552 <_printf_i+0xbe>
 800d54e:	681e      	ldr	r6, [r3, #0]
 800d550:	e003      	b.n	800d55a <_printf_i+0xc6>
 800d552:	0646      	lsls	r6, r0, #25
 800d554:	d5fb      	bpl.n	800d54e <_printf_i+0xba>
 800d556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d55a:	2e00      	cmp	r6, #0
 800d55c:	da03      	bge.n	800d566 <_printf_i+0xd2>
 800d55e:	232d      	movs	r3, #45	; 0x2d
 800d560:	4276      	negs	r6, r6
 800d562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d566:	230a      	movs	r3, #10
 800d568:	4859      	ldr	r0, [pc, #356]	; (800d6d0 <_printf_i+0x23c>)
 800d56a:	e012      	b.n	800d592 <_printf_i+0xfe>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	6820      	ldr	r0, [r4, #0]
 800d570:	1d19      	adds	r1, r3, #4
 800d572:	6029      	str	r1, [r5, #0]
 800d574:	0605      	lsls	r5, r0, #24
 800d576:	d501      	bpl.n	800d57c <_printf_i+0xe8>
 800d578:	681e      	ldr	r6, [r3, #0]
 800d57a:	e002      	b.n	800d582 <_printf_i+0xee>
 800d57c:	0641      	lsls	r1, r0, #25
 800d57e:	d5fb      	bpl.n	800d578 <_printf_i+0xe4>
 800d580:	881e      	ldrh	r6, [r3, #0]
 800d582:	2f6f      	cmp	r7, #111	; 0x6f
 800d584:	bf0c      	ite	eq
 800d586:	2308      	moveq	r3, #8
 800d588:	230a      	movne	r3, #10
 800d58a:	4851      	ldr	r0, [pc, #324]	; (800d6d0 <_printf_i+0x23c>)
 800d58c:	2100      	movs	r1, #0
 800d58e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d592:	6865      	ldr	r5, [r4, #4]
 800d594:	2d00      	cmp	r5, #0
 800d596:	bfa8      	it	ge
 800d598:	6821      	ldrge	r1, [r4, #0]
 800d59a:	60a5      	str	r5, [r4, #8]
 800d59c:	bfa4      	itt	ge
 800d59e:	f021 0104 	bicge.w	r1, r1, #4
 800d5a2:	6021      	strge	r1, [r4, #0]
 800d5a4:	b90e      	cbnz	r6, 800d5aa <_printf_i+0x116>
 800d5a6:	2d00      	cmp	r5, #0
 800d5a8:	d04b      	beq.n	800d642 <_printf_i+0x1ae>
 800d5aa:	4615      	mov	r5, r2
 800d5ac:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5b0:	fb03 6711 	mls	r7, r3, r1, r6
 800d5b4:	5dc7      	ldrb	r7, [r0, r7]
 800d5b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d5ba:	4637      	mov	r7, r6
 800d5bc:	42bb      	cmp	r3, r7
 800d5be:	460e      	mov	r6, r1
 800d5c0:	d9f4      	bls.n	800d5ac <_printf_i+0x118>
 800d5c2:	2b08      	cmp	r3, #8
 800d5c4:	d10b      	bne.n	800d5de <_printf_i+0x14a>
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	07de      	lsls	r6, r3, #31
 800d5ca:	d508      	bpl.n	800d5de <_printf_i+0x14a>
 800d5cc:	6923      	ldr	r3, [r4, #16]
 800d5ce:	6861      	ldr	r1, [r4, #4]
 800d5d0:	4299      	cmp	r1, r3
 800d5d2:	bfde      	ittt	le
 800d5d4:	2330      	movle	r3, #48	; 0x30
 800d5d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5da:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d5de:	1b52      	subs	r2, r2, r5
 800d5e0:	6122      	str	r2, [r4, #16]
 800d5e2:	464b      	mov	r3, r9
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	f8cd a000 	str.w	sl, [sp]
 800d5ec:	aa03      	add	r2, sp, #12
 800d5ee:	f7ff fedf 	bl	800d3b0 <_printf_common>
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d14a      	bne.n	800d68c <_printf_i+0x1f8>
 800d5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5fa:	b004      	add	sp, #16
 800d5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d600:	6823      	ldr	r3, [r4, #0]
 800d602:	f043 0320 	orr.w	r3, r3, #32
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	2778      	movs	r7, #120	; 0x78
 800d60a:	4832      	ldr	r0, [pc, #200]	; (800d6d4 <_printf_i+0x240>)
 800d60c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d610:	6823      	ldr	r3, [r4, #0]
 800d612:	6829      	ldr	r1, [r5, #0]
 800d614:	061f      	lsls	r7, r3, #24
 800d616:	f851 6b04 	ldr.w	r6, [r1], #4
 800d61a:	d402      	bmi.n	800d622 <_printf_i+0x18e>
 800d61c:	065f      	lsls	r7, r3, #25
 800d61e:	bf48      	it	mi
 800d620:	b2b6      	uxthmi	r6, r6
 800d622:	07df      	lsls	r7, r3, #31
 800d624:	bf48      	it	mi
 800d626:	f043 0320 	orrmi.w	r3, r3, #32
 800d62a:	6029      	str	r1, [r5, #0]
 800d62c:	bf48      	it	mi
 800d62e:	6023      	strmi	r3, [r4, #0]
 800d630:	b91e      	cbnz	r6, 800d63a <_printf_i+0x1a6>
 800d632:	6823      	ldr	r3, [r4, #0]
 800d634:	f023 0320 	bic.w	r3, r3, #32
 800d638:	6023      	str	r3, [r4, #0]
 800d63a:	2310      	movs	r3, #16
 800d63c:	e7a6      	b.n	800d58c <_printf_i+0xf8>
 800d63e:	4824      	ldr	r0, [pc, #144]	; (800d6d0 <_printf_i+0x23c>)
 800d640:	e7e4      	b.n	800d60c <_printf_i+0x178>
 800d642:	4615      	mov	r5, r2
 800d644:	e7bd      	b.n	800d5c2 <_printf_i+0x12e>
 800d646:	682b      	ldr	r3, [r5, #0]
 800d648:	6826      	ldr	r6, [r4, #0]
 800d64a:	1d18      	adds	r0, r3, #4
 800d64c:	6961      	ldr	r1, [r4, #20]
 800d64e:	6028      	str	r0, [r5, #0]
 800d650:	0635      	lsls	r5, r6, #24
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	d501      	bpl.n	800d65a <_printf_i+0x1c6>
 800d656:	6019      	str	r1, [r3, #0]
 800d658:	e002      	b.n	800d660 <_printf_i+0x1cc>
 800d65a:	0670      	lsls	r0, r6, #25
 800d65c:	d5fb      	bpl.n	800d656 <_printf_i+0x1c2>
 800d65e:	8019      	strh	r1, [r3, #0]
 800d660:	2300      	movs	r3, #0
 800d662:	4615      	mov	r5, r2
 800d664:	6123      	str	r3, [r4, #16]
 800d666:	e7bc      	b.n	800d5e2 <_printf_i+0x14e>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	2100      	movs	r1, #0
 800d66c:	1d1a      	adds	r2, r3, #4
 800d66e:	602a      	str	r2, [r5, #0]
 800d670:	681d      	ldr	r5, [r3, #0]
 800d672:	6862      	ldr	r2, [r4, #4]
 800d674:	4628      	mov	r0, r5
 800d676:	f000 f849 	bl	800d70c <memchr>
 800d67a:	b108      	cbz	r0, 800d680 <_printf_i+0x1ec>
 800d67c:	1b40      	subs	r0, r0, r5
 800d67e:	6060      	str	r0, [r4, #4]
 800d680:	6863      	ldr	r3, [r4, #4]
 800d682:	6123      	str	r3, [r4, #16]
 800d684:	2300      	movs	r3, #0
 800d686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d68a:	e7aa      	b.n	800d5e2 <_printf_i+0x14e>
 800d68c:	462a      	mov	r2, r5
 800d68e:	4649      	mov	r1, r9
 800d690:	4640      	mov	r0, r8
 800d692:	6923      	ldr	r3, [r4, #16]
 800d694:	47d0      	blx	sl
 800d696:	3001      	adds	r0, #1
 800d698:	d0ad      	beq.n	800d5f6 <_printf_i+0x162>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	079b      	lsls	r3, r3, #30
 800d69e:	d413      	bmi.n	800d6c8 <_printf_i+0x234>
 800d6a0:	68e0      	ldr	r0, [r4, #12]
 800d6a2:	9b03      	ldr	r3, [sp, #12]
 800d6a4:	4298      	cmp	r0, r3
 800d6a6:	bfb8      	it	lt
 800d6a8:	4618      	movlt	r0, r3
 800d6aa:	e7a6      	b.n	800d5fa <_printf_i+0x166>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	4632      	mov	r2, r6
 800d6b0:	4649      	mov	r1, r9
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	47d0      	blx	sl
 800d6b6:	3001      	adds	r0, #1
 800d6b8:	d09d      	beq.n	800d5f6 <_printf_i+0x162>
 800d6ba:	3501      	adds	r5, #1
 800d6bc:	68e3      	ldr	r3, [r4, #12]
 800d6be:	9903      	ldr	r1, [sp, #12]
 800d6c0:	1a5b      	subs	r3, r3, r1
 800d6c2:	42ab      	cmp	r3, r5
 800d6c4:	dcf2      	bgt.n	800d6ac <_printf_i+0x218>
 800d6c6:	e7eb      	b.n	800d6a0 <_printf_i+0x20c>
 800d6c8:	2500      	movs	r5, #0
 800d6ca:	f104 0619 	add.w	r6, r4, #25
 800d6ce:	e7f5      	b.n	800d6bc <_printf_i+0x228>
 800d6d0:	0800e6ac 	.word	0x0800e6ac
 800d6d4:	0800e6bd 	.word	0x0800e6bd

0800d6d8 <memmove>:
 800d6d8:	4288      	cmp	r0, r1
 800d6da:	b510      	push	{r4, lr}
 800d6dc:	eb01 0402 	add.w	r4, r1, r2
 800d6e0:	d902      	bls.n	800d6e8 <memmove+0x10>
 800d6e2:	4284      	cmp	r4, r0
 800d6e4:	4623      	mov	r3, r4
 800d6e6:	d807      	bhi.n	800d6f8 <memmove+0x20>
 800d6e8:	1e43      	subs	r3, r0, #1
 800d6ea:	42a1      	cmp	r1, r4
 800d6ec:	d008      	beq.n	800d700 <memmove+0x28>
 800d6ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6f6:	e7f8      	b.n	800d6ea <memmove+0x12>
 800d6f8:	4601      	mov	r1, r0
 800d6fa:	4402      	add	r2, r0
 800d6fc:	428a      	cmp	r2, r1
 800d6fe:	d100      	bne.n	800d702 <memmove+0x2a>
 800d700:	bd10      	pop	{r4, pc}
 800d702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d70a:	e7f7      	b.n	800d6fc <memmove+0x24>

0800d70c <memchr>:
 800d70c:	4603      	mov	r3, r0
 800d70e:	b510      	push	{r4, lr}
 800d710:	b2c9      	uxtb	r1, r1
 800d712:	4402      	add	r2, r0
 800d714:	4293      	cmp	r3, r2
 800d716:	4618      	mov	r0, r3
 800d718:	d101      	bne.n	800d71e <memchr+0x12>
 800d71a:	2000      	movs	r0, #0
 800d71c:	e003      	b.n	800d726 <memchr+0x1a>
 800d71e:	7804      	ldrb	r4, [r0, #0]
 800d720:	3301      	adds	r3, #1
 800d722:	428c      	cmp	r4, r1
 800d724:	d1f6      	bne.n	800d714 <memchr+0x8>
 800d726:	bd10      	pop	{r4, pc}

0800d728 <memcpy>:
 800d728:	440a      	add	r2, r1
 800d72a:	4291      	cmp	r1, r2
 800d72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d730:	d100      	bne.n	800d734 <memcpy+0xc>
 800d732:	4770      	bx	lr
 800d734:	b510      	push	{r4, lr}
 800d736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d73a:	4291      	cmp	r1, r2
 800d73c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d740:	d1f9      	bne.n	800d736 <memcpy+0xe>
 800d742:	bd10      	pop	{r4, pc}

0800d744 <_realloc_r>:
 800d744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d748:	4680      	mov	r8, r0
 800d74a:	4614      	mov	r4, r2
 800d74c:	460e      	mov	r6, r1
 800d74e:	b921      	cbnz	r1, 800d75a <_realloc_r+0x16>
 800d750:	4611      	mov	r1, r2
 800d752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d756:	f7ff bb41 	b.w	800cddc <_malloc_r>
 800d75a:	b92a      	cbnz	r2, 800d768 <_realloc_r+0x24>
 800d75c:	f7ff fc88 	bl	800d070 <_free_r>
 800d760:	4625      	mov	r5, r4
 800d762:	4628      	mov	r0, r5
 800d764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d768:	f000 f81b 	bl	800d7a2 <_malloc_usable_size_r>
 800d76c:	4284      	cmp	r4, r0
 800d76e:	4607      	mov	r7, r0
 800d770:	d802      	bhi.n	800d778 <_realloc_r+0x34>
 800d772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d776:	d812      	bhi.n	800d79e <_realloc_r+0x5a>
 800d778:	4621      	mov	r1, r4
 800d77a:	4640      	mov	r0, r8
 800d77c:	f7ff fb2e 	bl	800cddc <_malloc_r>
 800d780:	4605      	mov	r5, r0
 800d782:	2800      	cmp	r0, #0
 800d784:	d0ed      	beq.n	800d762 <_realloc_r+0x1e>
 800d786:	42bc      	cmp	r4, r7
 800d788:	4622      	mov	r2, r4
 800d78a:	4631      	mov	r1, r6
 800d78c:	bf28      	it	cs
 800d78e:	463a      	movcs	r2, r7
 800d790:	f7ff ffca 	bl	800d728 <memcpy>
 800d794:	4631      	mov	r1, r6
 800d796:	4640      	mov	r0, r8
 800d798:	f7ff fc6a 	bl	800d070 <_free_r>
 800d79c:	e7e1      	b.n	800d762 <_realloc_r+0x1e>
 800d79e:	4635      	mov	r5, r6
 800d7a0:	e7df      	b.n	800d762 <_realloc_r+0x1e>

0800d7a2 <_malloc_usable_size_r>:
 800d7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7a6:	1f18      	subs	r0, r3, #4
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	bfbc      	itt	lt
 800d7ac:	580b      	ldrlt	r3, [r1, r0]
 800d7ae:	18c0      	addlt	r0, r0, r3
 800d7b0:	4770      	bx	lr
	...

0800d7b4 <_init>:
 800d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b6:	bf00      	nop
 800d7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ba:	bc08      	pop	{r3}
 800d7bc:	469e      	mov	lr, r3
 800d7be:	4770      	bx	lr

0800d7c0 <_fini>:
 800d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c2:	bf00      	nop
 800d7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c6:	bc08      	pop	{r3}
 800d7c8:	469e      	mov	lr, r3
 800d7ca:	4770      	bx	lr
