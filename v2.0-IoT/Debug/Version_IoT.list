
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cccc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  0800ceb0  0800ceb0  0001ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea4  0800dea4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800dea4  0800dea4  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dea4  0800dea4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dea4  0800dea4  0001dea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dea8  0800dea8  0001dea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800deac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  200000fc  0800dfa8  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800dfa8  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001682a  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003533  00000000  00000000  00036992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6b  00000000  00000000  0003b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003bfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c405  00000000  00000000  00058670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eeac  00000000  00000000  00074a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005284  00000000  00000000  00113924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce98 	.word	0x0800ce98

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800ce98 	.word	0x0800ce98

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b08a      	sub	sp, #40	; 0x28
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc88 	bl	8009b64 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fb00 	bl	800885c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003bc 	.word	0x200003bc
 80004c0:	2000020e 	.word	0x2000020e
 80004c4:	20000235 	.word	0x20000235
 80004c8:	20000238 	.word	0x20000238
 80004cc:	20000239 	.word	0x20000239
 80004d0:	2000023a 	.word	0x2000023a
 80004d4:	2000023b 	.word	0x2000023b
 80004d8:	2000023c 	.word	0x2000023c
 80004dc:	2000023d 	.word	0x2000023d
 80004e0:	2000024d 	.word	0x2000024d
 80004e4:	2000023e 	.word	0x2000023e
 80004e8:	2000024e 	.word	0x2000024e
 80004ec:	2000023f 	.word	0x2000023f
 80004f0:	2000024f 	.word	0x2000024f
 80004f4:	20000242 	.word	0x20000242
 80004f8:	20000243 	.word	0x20000243
 80004fc:	20000244 	.word	0x20000244
 8000500:	20000245 	.word	0x20000245
 8000504:	20000246 	.word	0x20000246
 8000508:	20000247 	.word	0x20000247
 800050c:	20000248 	.word	0x20000248
 8000510:	20000249 	.word	0x20000249
 8000514:	2000024a 	.word	0x2000024a
 8000518:	2000024b 	.word	0x2000024b
 800051c:	2000024c 	.word	0x2000024c
 8000520:	20000250 	.word	0x20000250
 8000524:	20000252 	.word	0x20000252
 8000528:	20000230 	.word	0x20000230
 800052c:	20000231 	.word	0x20000231
 8000530:	20000232 	.word	0x20000232
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000233 	.word	0x20000233
 8000540:	20000255 	.word	0x20000255
 8000544:	20000253 	.word	0x20000253
 8000548:	20000241 	.word	0x20000241
 800054c:	20000254 	.word	0x20000254
 8000550:	20000240 	.word	0x20000240
 8000554:	20000256 	.word	0x20000256
 8000558:	20000257 	.word	0x20000257
 800055c:	20000258 	.word	0x20000258
 8000560:	20000259 	.word	0x20000259
 8000564:	2000025a 	.word	0x2000025a
 8000568:	2000025b 	.word	0x2000025b
 800056c:	2000025c 	.word	0x2000025c
 8000570:	2000025d 	.word	0x2000025d
 8000574:	2000025e 	.word	0x2000025e
 8000578:	2000025f 	.word	0x2000025f
 800057c:	2000020d 	.word	0x2000020d
	}

	if(kapi1AcSure>5) {
 8000580:	4b7f      	ldr	r3, [pc, #508]	; (8000780 <eepromKontrol+0x54c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b7d      	ldr	r3, [pc, #500]	; (8000780 <eepromKontrol+0x54c>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b7d      	ldr	r3, [pc, #500]	; (8000784 <eepromKontrol+0x550>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b7b      	ldr	r3, [pc, #492]	; (8000784 <eepromKontrol+0x550>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b7a      	ldr	r3, [pc, #488]	; (8000788 <eepromKontrol+0x554>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b78      	ldr	r3, [pc, #480]	; (8000788 <eepromKontrol+0x554>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b78      	ldr	r3, [pc, #480]	; (800078c <eepromKontrol+0x558>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b76      	ldr	r3, [pc, #472]	; (800078c <eepromKontrol+0x558>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b75      	ldr	r3, [pc, #468]	; (8000790 <eepromKontrol+0x55c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b73      	ldr	r3, [pc, #460]	; (8000790 <eepromKontrol+0x55c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b73      	ldr	r3, [pc, #460]	; (8000794 <eepromKontrol+0x560>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b71      	ldr	r3, [pc, #452]	; (8000794 <eepromKontrol+0x560>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b70      	ldr	r3, [pc, #448]	; (8000798 <eepromKontrol+0x564>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b6e      	ldr	r3, [pc, #440]	; (8000798 <eepromKontrol+0x564>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b6e      	ldr	r3, [pc, #440]	; (800079c <eepromKontrol+0x568>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b6c      	ldr	r3, [pc, #432]	; (800079c <eepromKontrol+0x568>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b6b      	ldr	r3, [pc, #428]	; (80007a0 <eepromKontrol+0x56c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b69      	ldr	r3, [pc, #420]	; (80007a0 <eepromKontrol+0x56c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b69      	ldr	r3, [pc, #420]	; (80007a4 <eepromKontrol+0x570>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b67      	ldr	r3, [pc, #412]	; (80007a4 <eepromKontrol+0x570>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b66      	ldr	r3, [pc, #408]	; (80007a8 <eepromKontrol+0x574>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b64      	ldr	r3, [pc, #400]	; (80007a8 <eepromKontrol+0x574>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b64      	ldr	r3, [pc, #400]	; (80007ac <eepromKontrol+0x578>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b62      	ldr	r3, [pc, #392]	; (80007ac <eepromKontrol+0x578>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b61      	ldr	r3, [pc, #388]	; (80007b0 <eepromKontrol+0x57c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b5f      	ldr	r3, [pc, #380]	; (80007b0 <eepromKontrol+0x57c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b5f      	ldr	r3, [pc, #380]	; (80007b4 <eepromKontrol+0x580>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b5d      	ldr	r3, [pc, #372]	; (80007b4 <eepromKontrol+0x580>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <eepromKontrol+0x584>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b5a      	ldr	r3, [pc, #360]	; (80007b8 <eepromKontrol+0x584>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b5a      	ldr	r3, [pc, #360]	; (80007bc <eepromKontrol+0x588>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b58      	ldr	r3, [pc, #352]	; (80007bc <eepromKontrol+0x588>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b57      	ldr	r3, [pc, #348]	; (80007c0 <eepromKontrol+0x58c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <eepromKontrol+0x58c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <eepromKontrol+0x590>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b53      	ldr	r3, [pc, #332]	; (80007c4 <eepromKontrol+0x590>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b52      	ldr	r3, [pc, #328]	; (80007c8 <eepromKontrol+0x594>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b50      	ldr	r3, [pc, #320]	; (80007c8 <eepromKontrol+0x594>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b50      	ldr	r3, [pc, #320]	; (80007cc <eepromKontrol+0x598>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <eepromKontrol+0x598>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <eepromKontrol+0x59c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <eepromKontrol+0x59c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b4b      	ldr	r3, [pc, #300]	; (80007d4 <eepromKontrol+0x5a0>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b49      	ldr	r3, [pc, #292]	; (80007d4 <eepromKontrol+0x5a0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	//memcpy(machineIDInt, &eepromData[idStartPos], machineIDCharacterLimit); //destination, source, size
	int idVal = idStartPos;
 80006b4:	4b48      	ldr	r3, [pc, #288]	; (80007d8 <eepromKontrol+0x5a4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	617b      	str	r3, [r7, #20]
	int ssidVal = ssidStartPos;
 80006ba:	4b48      	ldr	r3, [pc, #288]	; (80007dc <eepromKontrol+0x5a8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	613b      	str	r3, [r7, #16]
	int passVal = passStartPos;
 80006c0:	4b47      	ldr	r3, [pc, #284]	; (80007e0 <eepromKontrol+0x5ac>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<13; i++) {
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	e016      	b.n	80006fa <eepromKontrol+0x4c6>
		if(i == 12) {
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	2b0c      	cmp	r3, #12
 80006d0:	d104      	bne.n	80006dc <eepromKontrol+0x4a8>
			machineIDInt[i] = '\0';
 80006d2:	4a44      	ldr	r2, [pc, #272]	; (80007e4 <eepromKontrol+0x5b0>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4413      	add	r3, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		}
		machineIDInt[i] = eepromData[idVal];
 80006dc:	4a42      	ldr	r2, [pc, #264]	; (80007e8 <eepromKontrol+0x5b4>)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	4413      	add	r3, r2
 80006e2:	7819      	ldrb	r1, [r3, #0]
 80006e4:	4a3f      	ldr	r2, [pc, #252]	; (80007e4 <eepromKontrol+0x5b0>)
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	4413      	add	r3, r2
 80006ea:	460a      	mov	r2, r1
 80006ec:	701a      	strb	r2, [r3, #0]
		idVal++;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	for(int i=0; i<13; i++) {
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b0c      	cmp	r3, #12
 80006fe:	dde5      	ble.n	80006cc <eepromKontrol+0x498>
	}
	convertArrays(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f877 	bl	80007f4 <convertArrays>
	HAL_Delay(250);
 8000706:	20fa      	movs	r0, #250	; 0xfa
 8000708:	f008 f8a8 	bl	800885c <HAL_Delay>

	//memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit); //destination, source, size
	for(int i=0; i<21; i++) {
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	e00e      	b.n	8000730 <eepromKontrol+0x4fc>
		wifiSSIDInt[i] = eepromData[ssidVal];
 8000712:	4a35      	ldr	r2, [pc, #212]	; (80007e8 <eepromKontrol+0x5b4>)
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4413      	add	r3, r2
 8000718:	7819      	ldrb	r1, [r3, #0]
 800071a:	4a34      	ldr	r2, [pc, #208]	; (80007ec <eepromKontrol+0x5b8>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	460a      	mov	r2, r1
 8000722:	701a      	strb	r2, [r3, #0]
		ssidVal++;
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	3301      	adds	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
	for(int i=0; i<21; i++) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3301      	adds	r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b14      	cmp	r3, #20
 8000734:	dded      	ble.n	8000712 <eepromKontrol+0x4de>
	}
	convertArrays(2);
 8000736:	2002      	movs	r0, #2
 8000738:	f000 f85c 	bl	80007f4 <convertArrays>
	HAL_Delay(250);
 800073c:	20fa      	movs	r0, #250	; 0xfa
 800073e:	f008 f88d 	bl	800885c <HAL_Delay>

	//memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit); //destination, source, size
	for(int i=0; i<21; i++) {
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	e00e      	b.n	8000766 <eepromKontrol+0x532>
		wifiPassInt[i] = eepromData[passVal];
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <eepromKontrol+0x5b4>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	7819      	ldrb	r1, [r3, #0]
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <eepromKontrol+0x5bc>)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4413      	add	r3, r2
 8000756:	460a      	mov	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]
		passVal++;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<21; i++) {
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b14      	cmp	r3, #20
 800076a:	dded      	ble.n	8000748 <eepromKontrol+0x514>
	}
	convertArrays(3);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f841 	bl	80007f4 <convertArrays>
	//readStringFromEEPROM(idStartPos, 1, machineID, machineIDCharacterLimit, idCharactersArray);
	//readStringFromEEPROM(ssidStartPos, 1, wifiSSID, wifiCharacterLimit, charactersArray);
	//readStringFromEEPROM(passStartPos, 1, wifiPass, wifiCharacterLimit, charactersArray);
	HAL_Delay(250);
 8000772:	20fa      	movs	r0, #250	; 0xfa
 8000774:	f008 f872 	bl	800885c <HAL_Delay>
}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000024d 	.word	0x2000024d
 8000784:	2000023e 	.word	0x2000023e
 8000788:	2000024e 	.word	0x2000024e
 800078c:	2000023f 	.word	0x2000023f
 8000790:	20000241 	.word	0x20000241
 8000794:	2000024f 	.word	0x2000024f
 8000798:	20000242 	.word	0x20000242
 800079c:	20000243 	.word	0x20000243
 80007a0:	20000244 	.word	0x20000244
 80007a4:	20000245 	.word	0x20000245
 80007a8:	20000246 	.word	0x20000246
 80007ac:	20000247 	.word	0x20000247
 80007b0:	20000248 	.word	0x20000248
 80007b4:	20000249 	.word	0x20000249
 80007b8:	2000024a 	.word	0x2000024a
 80007bc:	2000024b 	.word	0x2000024b
 80007c0:	2000024c 	.word	0x2000024c
 80007c4:	20000250 	.word	0x20000250
 80007c8:	20000252 	.word	0x20000252
 80007cc:	20000254 	.word	0x20000254
 80007d0:	20000255 	.word	0x20000255
 80007d4:	20000253 	.word	0x20000253
 80007d8:	20000004 	.word	0x20000004
 80007dc:	20000008 	.word	0x20000008
 80007e0:	2000000c 	.word	0x2000000c
 80007e4:	200001d0 	.word	0x200001d0
 80007e8:	20000118 	.word	0x20000118
 80007ec:	200001e0 	.word	0x200001e0
 80007f0:	200001f8 	.word	0x200001f8

080007f4 <convertArrays>:

void convertArrays(int state) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d122      	bne.n	8000848 <convertArrays+0x54>
		memset(machineID, 0, machineID[0]);
 8000802:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <convertArrays+0xec>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	4835      	ldr	r0, [pc, #212]	; (80008e0 <convertArrays+0xec>)
 800080c:	f00b ff56 	bl	800c6bc <memset>
		int eepromVal = idStartPos;
 8000810:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <convertArrays+0xf0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<12; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	e011      	b.n	8000840 <convertArrays+0x4c>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 800081c:	4a32      	ldr	r2, [pc, #200]	; (80008e8 <convertArrays+0xf4>)
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <convertArrays+0xf8>)
 8000828:	5c99      	ldrb	r1, [r3, r2]
 800082a:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <convertArrays+0xec>)
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	4413      	add	r3, r2
 8000830:	460a      	mov	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	3301      	adds	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<12; i++) {
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	3301      	adds	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	2b0b      	cmp	r3, #11
 8000844:	ddea      	ble.n	800081c <convertArrays+0x28>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];

			eepromVal++;
		}
	}
}
 8000846:	e047      	b.n	80008d8 <convertArrays+0xe4>
	} else if(state == 2) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d122      	bne.n	8000894 <convertArrays+0xa0>
		memset(wifiSSID, 0, wifiSSID[0]);
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <convertArrays+0xfc>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	4826      	ldr	r0, [pc, #152]	; (80008f0 <convertArrays+0xfc>)
 8000858:	f00b ff30 	bl	800c6bc <memset>
		int eepromVal = ssidStartPos;
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <convertArrays+0x100>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	e011      	b.n	800088c <convertArrays+0x98>
			wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000868:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <convertArrays+0xf4>)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <convertArrays+0x104>)
 8000874:	5c99      	ldrb	r1, [r3, r2]
 8000876:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <convertArrays+0xfc>)
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	4413      	add	r3, r2
 800087c:	460a      	mov	r2, r1
 800087e:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	3301      	adds	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	2b13      	cmp	r3, #19
 8000890:	ddea      	ble.n	8000868 <convertArrays+0x74>
}
 8000892:	e021      	b.n	80008d8 <convertArrays+0xe4>
		memset(wifiPass, 0, wifiPass[0]);
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <convertArrays+0x108>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	4817      	ldr	r0, [pc, #92]	; (80008fc <convertArrays+0x108>)
 800089e:	f00b ff0d 	bl	800c6bc <memset>
		int eepromVal = passStartPos;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <convertArrays+0x10c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	e011      	b.n	80008d2 <convertArrays+0xde>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <convertArrays+0xf4>)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <convertArrays+0x104>)
 80008ba:	5c99      	ldrb	r1, [r3, r2]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <convertArrays+0x108>)
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	4413      	add	r3, r2
 80008c2:	460a      	mov	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	2b13      	cmp	r3, #19
 80008d6:	ddea      	ble.n	80008ae <convertArrays+0xba>
}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000190 	.word	0x20000190
 80008e4:	20000004 	.word	0x20000004
 80008e8:	20000118 	.word	0x20000118
 80008ec:	20000010 	.word	0x20000010
 80008f0:	200001a0 	.word	0x200001a0
 80008f4:	20000008 	.word	0x20000008
 80008f8:	2000001c 	.word	0x2000001c
 80008fc:	200001b8 	.word	0x200001b8
 8000900:	2000000c 	.word	0x2000000c

08000904 <resetEEPROM4Wifi>:
	} else {
		//wifi pass convert
	}
}

void resetEEPROM4Wifi(int state) {
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d11e      	bne.n	8000950 <resetEEPROM4Wifi+0x4c>
		int eepromVal = idStartPos;
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <resetEEPROM4Wifi+0xd8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	e014      	b.n	8000948 <resetEEPROM4Wifi+0x44>
			machineID[i] = '\0';
 800091e:	4a30      	ldr	r2, [pc, #192]	; (80009e0 <resetEEPROM4Wifi+0xdc>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
			machineIDInt[i] = '\0';
 8000928:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <resetEEPROM4Wifi+0xe0>)
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	4413      	add	r3, r2
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000932:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <resetEEPROM4Wifi+0xe4>)
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	4413      	add	r3, r2
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	3301      	adds	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	3301      	adds	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2b0c      	cmp	r3, #12
 800094c:	dde7      	ble.n	800091e <resetEEPROM4Wifi+0x1a>
			wifiPassInt[i] = '\0';
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 800094e:	e03f      	b.n	80009d0 <resetEEPROM4Wifi+0xcc>
	} else if(state == 2) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d11e      	bne.n	8000994 <resetEEPROM4Wifi+0x90>
		int eepromVal = ssidStartPos;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <resetEEPROM4Wifi+0xe8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	e014      	b.n	800098c <resetEEPROM4Wifi+0x88>
			wifiSSID[i] = '\0';
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <resetEEPROM4Wifi+0xec>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
			wifiSSIDInt[i] = '\0';
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <resetEEPROM4Wifi+0xf0>)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	4413      	add	r3, r2
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <resetEEPROM4Wifi+0xe4>)
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	4413      	add	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	3301      	adds	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	3301      	adds	r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	2b14      	cmp	r3, #20
 8000990:	dde7      	ble.n	8000962 <resetEEPROM4Wifi+0x5e>
}
 8000992:	e01d      	b.n	80009d0 <resetEEPROM4Wifi+0xcc>
		int eepromVal = passStartPos;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <resetEEPROM4Wifi+0xf4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	e014      	b.n	80009ca <resetEEPROM4Wifi+0xc6>
			wifiPass[i] = '\0';
 80009a0:	4a16      	ldr	r2, [pc, #88]	; (80009fc <resetEEPROM4Wifi+0xf8>)
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
			wifiPassInt[i] = '\0';
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <resetEEPROM4Wifi+0xfc>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <resetEEPROM4Wifi+0xe4>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	2b14      	cmp	r3, #20
 80009ce:	dde7      	ble.n	80009a0 <resetEEPROM4Wifi+0x9c>
}
 80009d0:	bf00      	nop
 80009d2:	3724      	adds	r7, #36	; 0x24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000004 	.word	0x20000004
 80009e0:	20000190 	.word	0x20000190
 80009e4:	200001d0 	.word	0x200001d0
 80009e8:	20000118 	.word	0x20000118
 80009ec:	20000008 	.word	0x20000008
 80009f0:	200001a0 	.word	0x200001a0
 80009f4:	200001e0 	.word	0x200001e0
 80009f8:	2000000c 	.word	0x2000000c
 80009fc:	200001b8 	.word	0x200001b8
 8000a00:	200001f8 	.word	0x200001f8

08000a04 <writeStringToEEPROM>:
            break;
        }
    }
}

void writeStringToEEPROM(uint16_t addr, int length, const char* string, int len, const char* lookupArray) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	4603      	mov	r3, r0
 8000a12:	81fb      	strh	r3, [r7, #14]
    uint8_t data;
    for (int i = 0; i < len; i++) {
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	e027      	b.n	8000a6a <writeStringToEEPROM+0x66>
        // Karakterin lookupArray içindeki indexini bul
        const char* found = strchr(lookupArray, string[i]);
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4619      	mov	r1, r3
 8000a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a26:	f00b fe3c 	bl	800c6a2 <strchr>
 8000a2a:	61b8      	str	r0, [r7, #24]
        if (found) {
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d018      	beq.n	8000a64 <writeStringToEEPROM+0x60>
            data = (uint8_t)(found - lookupArray);
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	75fb      	strb	r3, [r7, #23]
            // Bulunan indexi EEPROM'a yaz
            HAL_I2C_Mem_Write(&hi2c1, 0xA0, addr + i, length, &data, 1, HAL_MAX_DELAY);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4e:	9302      	str	r3, [sp, #8]
 8000a50:	2301      	movs	r3, #1
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	f107 0317 	add.w	r3, r7, #23
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	21a0      	movs	r1, #160	; 0xa0
 8000a5e:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <writeStringToEEPROM+0xa4>)
 8000a60:	f008 ff86 	bl	8009970 <HAL_I2C_Mem_Write>
    for (int i = 0; i < len; i++) {
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	3301      	adds	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	dbd3      	blt.n	8000a1a <writeStringToEEPROM+0x16>
        }
    }
    // String sonu için null karakter ekleyin
    data = '\0';
 8000a72:	2300      	movs	r3, #0
 8000a74:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Mem_Write(&hi2c1, 0xA0, addr + len, length, &data, 1, HAL_MAX_DELAY);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	b299      	uxth	r1, r3
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a88:	9302      	str	r3, [sp, #8]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	9301      	str	r3, [sp, #4]
 8000a8e:	f107 0317 	add.w	r3, r7, #23
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	460b      	mov	r3, r1
 8000a96:	21a0      	movs	r1, #160	; 0xa0
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <writeStringToEEPROM+0xa4>)
 8000a9a:	f008 ff69 	bl	8009970 <HAL_I2C_Mem_Write>
}
 8000a9e:	bf00      	nop
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200003bc 	.word	0x200003bc

08000aac <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b0c9      	sub	sp, #292	; 0x124
 8000ab0:	af04      	add	r7, sp, #16
 8000ab2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000ab6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8000aba:	6020      	str	r0, [r4, #0]
 8000abc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000ac0:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8000ac4:	6001      	str	r1, [r0, #0]
 8000ac6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000aca:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000ace:	600a      	str	r2, [r1, #0]
 8000ad0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ad4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000ad8:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000ada:	4a36      	ldr	r2, [pc, #216]	; (8000bb4 <sendMachineData+0x108>)
 8000adc:	4936      	ldr	r1, [pc, #216]	; (8000bb8 <sendMachineData+0x10c>)
 8000ade:	4837      	ldr	r0, [pc, #220]	; (8000bbc <sendMachineData+0x110>)
 8000ae0:	f00b fd6e 	bl	800c5c0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ae4:	4835      	ldr	r0, [pc, #212]	; (8000bbc <sendMachineData+0x110>)
 8000ae6:	f7ff fb9d 	bl	8000224 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000af6:	4931      	ldr	r1, [pc, #196]	; (8000bbc <sendMachineData+0x110>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	f00a ff7b 	bl	800b9f4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000afe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b02:	f007 feab 	bl	800885c <HAL_Delay>

	sprintf(local_txA,
 8000b06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b12:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000b16:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000b1a:	4929      	ldr	r1, [pc, #164]	; (8000bc0 <sendMachineData+0x114>)
 8000b1c:	9102      	str	r1, [sp, #8]
 8000b1e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000b22:	9101      	str	r1, [sp, #4]
 8000b24:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000b28:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000b2c:	6809      	ldr	r1, [r1, #0]
 8000b2e:	9100      	str	r1, [sp, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	4923      	ldr	r1, [pc, #140]	; (8000bc4 <sendMachineData+0x118>)
 8000b36:	f00b fd43 	bl	800c5c0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000b3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fb70 	bl	8000224 <strlen>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b52:	491d      	ldr	r1, [pc, #116]	; (8000bc8 <sendMachineData+0x11c>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00b fd33 	bl	800c5c0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb60 	bl	8000224 <strlen>
 8000b64:	4603      	mov	r3, r0
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	f107 0110 	add.w	r1, r7, #16
 8000b6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	f00a ff3d 	bl	800b9f4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b7a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b7e:	f007 fe6d 	bl	800885c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fb4c 	bl	8000224 <strlen>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000b94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	f00a ff29 	bl	800b9f4 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000ba2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ba6:	f007 fe59 	bl	800885c <HAL_Delay>
}
 8000baa:	bf00      	nop
 8000bac:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	0800cf00 	.word	0x0800cf00
 8000bb8:	0800cf10 	.word	0x0800cf10
 8000bbc:	20000298 	.word	0x20000298
 8000bc0:	0800cfa4 	.word	0x0800cfa4
 8000bc4:	0800cf30 	.word	0x0800cf30
 8000bc8:	0800cfb8 	.word	0x0800cfb8

08000bcc <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <hata2EEPROM+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <hata2EEPROM+0xa8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <hata2EEPROM+0xac>)
 8000be4:	5cd3      	ldrb	r3, [r2, r3]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000bea:	f000 f92b 	bl	8000e44 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000bee:	e000      	b.n	8000bf2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000bf0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e012      	b.n	8000c1e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <hata2EEPROM+0xa8>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <hata2EEPROM+0xac>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d107      	bne.n	8000c18 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <hata2EEPROM+0xa8>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4919      	ldr	r1, [pc, #100]	; (8000c78 <hata2EEPROM+0xac>)
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	54ca      	strb	r2, [r1, r3]
					break;
 8000c16:	e007      	b.n	8000c28 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <hata2EEPROM+0xa4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbe7      	blt.n	8000bf8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <hata2EEPROM+0xa8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	b299      	uxth	r1, r3
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <hata2EEPROM+0xa4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	b298      	uxth	r0, r3
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <hata2EEPROM+0xa8>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <hata2EEPROM+0xac>)
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <hata2EEPROM+0xa4>)
 8000c3e:	6812      	ldr	r2, [r2, #0]
 8000c40:	b292      	uxth	r2, r2
 8000c42:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000c46:	9402      	str	r4, [sp, #8]
 8000c48:	9201      	str	r2, [sp, #4]
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	460a      	mov	r2, r1
 8000c50:	21a0      	movs	r1, #160	; 0xa0
 8000c52:	480a      	ldr	r0, [pc, #40]	; (8000c7c <hata2EEPROM+0xb0>)
 8000c54:	f008 fe8c 	bl	8009970 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c5c:	f007 fdfe 	bl	800885c <HAL_Delay>
	eepromKontrol(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fae7 	bl	8000234 <eepromKontrol>
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000098 	.word	0x20000098
 8000c74:	2000009c 	.word	0x2000009c
 8000c78:	20000118 	.word	0x20000118
 8000c7c:	200003bc 	.word	0x200003bc

08000c80 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d11d      	bne.n	8000ccc <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000c90:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000c98:	4a61      	ldr	r2, [pc, #388]	; (8000e20 <hataKoduLcdGoster+0x1a0>)
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f007 f887 	bl	8007db0 <lcd_print>
 8000ca2:	e008      	b.n	8000cb6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000ca4:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d104      	bne.n	8000cb6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000cac:	4a5d      	ldr	r2, [pc, #372]	; (8000e24 <hataKoduLcdGoster+0x1a4>)
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f007 f87d 	bl	8007db0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000cb6:	4a5c      	ldr	r2, [pc, #368]	; (8000e28 <hataKoduLcdGoster+0x1a8>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f007 f878 	bl	8007db0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cc0:	4a5a      	ldr	r2, [pc, #360]	; (8000e2c <hataKoduLcdGoster+0x1ac>)
 8000cc2:	2107      	movs	r1, #7
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f007 f873 	bl	8007db0 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000cca:	e0a3      	b.n	8000e14 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d11d      	bne.n	8000d0e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000cd2:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d105      	bne.n	8000ce6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000cda:	4a51      	ldr	r2, [pc, #324]	; (8000e20 <hataKoduLcdGoster+0x1a0>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f007 f866 	bl	8007db0 <lcd_print>
 8000ce4:	e008      	b.n	8000cf8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000ce6:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d104      	bne.n	8000cf8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000cee:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <hataKoduLcdGoster+0x1a4>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f007 f85c 	bl	8007db0 <lcd_print>
		lcd_print(2, 2, "2");
 8000cf8:	4a4d      	ldr	r2, [pc, #308]	; (8000e30 <hataKoduLcdGoster+0x1b0>)
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f007 f857 	bl	8007db0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d02:	4a4a      	ldr	r2, [pc, #296]	; (8000e2c <hataKoduLcdGoster+0x1ac>)
 8000d04:	2107      	movs	r1, #7
 8000d06:	2002      	movs	r0, #2
 8000d08:	f007 f852 	bl	8007db0 <lcd_print>
}
 8000d0c:	e082      	b.n	8000e14 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d11d      	bne.n	8000d50 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000d14:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d105      	bne.n	8000d28 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000d1c:	4a40      	ldr	r2, [pc, #256]	; (8000e20 <hataKoduLcdGoster+0x1a0>)
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2001      	movs	r0, #1
 8000d22:	f007 f845 	bl	8007db0 <lcd_print>
 8000d26:	e008      	b.n	8000d3a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000d28:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d104      	bne.n	8000d3a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000d30:	4a3c      	ldr	r2, [pc, #240]	; (8000e24 <hataKoduLcdGoster+0x1a4>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	2001      	movs	r0, #1
 8000d36:	f007 f83b 	bl	8007db0 <lcd_print>
		lcd_print(2, 3, "3");
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	; (8000e34 <hataKoduLcdGoster+0x1b4>)
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f007 f836 	bl	8007db0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d44:	4a39      	ldr	r2, [pc, #228]	; (8000e2c <hataKoduLcdGoster+0x1ac>)
 8000d46:	2107      	movs	r1, #7
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f007 f831 	bl	8007db0 <lcd_print>
}
 8000d4e:	e061      	b.n	8000e14 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d11d      	bne.n	8000d92 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d105      	bne.n	8000d6a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000d5e:	4a30      	ldr	r2, [pc, #192]	; (8000e20 <hataKoduLcdGoster+0x1a0>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	2001      	movs	r0, #1
 8000d64:	f007 f824 	bl	8007db0 <lcd_print>
 8000d68:	e008      	b.n	8000d7c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d104      	bne.n	8000d7c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000d72:	4a2c      	ldr	r2, [pc, #176]	; (8000e24 <hataKoduLcdGoster+0x1a4>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	2001      	movs	r0, #1
 8000d78:	f007 f81a 	bl	8007db0 <lcd_print>
		lcd_print(2, 4, "4");
 8000d7c:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <hataKoduLcdGoster+0x1b8>)
 8000d7e:	2104      	movs	r1, #4
 8000d80:	2002      	movs	r0, #2
 8000d82:	f007 f815 	bl	8007db0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <hataKoduLcdGoster+0x1ac>)
 8000d88:	2107      	movs	r1, #7
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f007 f810 	bl	8007db0 <lcd_print>
}
 8000d90:	e040      	b.n	8000e14 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d11d      	bne.n	8000dd4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d105      	bne.n	8000dac <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000da0:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <hataKoduLcdGoster+0x1a0>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	2001      	movs	r0, #1
 8000da6:	f007 f803 	bl	8007db0 <lcd_print>
 8000daa:	e008      	b.n	8000dbe <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d104      	bne.n	8000dbe <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <hataKoduLcdGoster+0x1a4>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2001      	movs	r0, #1
 8000dba:	f006 fff9 	bl	8007db0 <lcd_print>
		lcd_print(2, 5, "5");
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <hataKoduLcdGoster+0x1bc>)
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f006 fff4 	bl	8007db0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <hataKoduLcdGoster+0x1ac>)
 8000dca:	2107      	movs	r1, #7
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f006 ffef 	bl	8007db0 <lcd_print>
}
 8000dd2:	e01f      	b.n	8000e14 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d11c      	bne.n	8000e14 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d105      	bne.n	8000dee <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <hataKoduLcdGoster+0x1a0>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	2001      	movs	r0, #1
 8000de8:	f006 ffe2 	bl	8007db0 <lcd_print>
 8000dec:	e008      	b.n	8000e00 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <hataKoduLcdGoster+0x19c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d104      	bne.n	8000e00 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <hataKoduLcdGoster+0x1a4>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f006 ffd8 	bl	8007db0 <lcd_print>
		lcd_print(2, 6, "6");
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <hataKoduLcdGoster+0x1c0>)
 8000e02:	2106      	movs	r1, #6
 8000e04:	2002      	movs	r0, #2
 8000e06:	f006 ffd3 	bl	8007db0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <hataKoduLcdGoster+0x1ac>)
 8000e0c:	2107      	movs	r1, #7
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f006 ffce 	bl	8007db0 <lcd_print>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000255 	.word	0x20000255
 8000e20:	0800d044 	.word	0x0800d044
 8000e24:	0800d054 	.word	0x0800d054
 8000e28:	0800d064 	.word	0x0800d064
 8000e2c:	0800d068 	.word	0x0800d068
 8000e30:	0800d074 	.word	0x0800d074
 8000e34:	0800d078 	.word	0x0800d078
 8000e38:	0800d07c 	.word	0x0800d07c
 8000e3c:	0800d080 	.word	0x0800d080
 8000e40:	0800d084 	.word	0x0800d084

08000e44 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	e009      	b.n	8000e64 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <eepromDataFillWithEmpty+0x38>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <eepromDataFillWithEmpty+0x3c>)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3301      	adds	r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <eepromDataFillWithEmpty+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf0      	blt.n	8000e50 <eepromDataFillWithEmpty+0xc>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000070 	.word	0x20000070
 8000e80:	20000118 	.word	0x20000118
 8000e84:	20000098 	.word	0x20000098

08000e88 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000e9a:	4b50      	ldr	r3, [pc, #320]	; (8000fdc <i2cTest+0x154>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <i2cTest+0x154>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0201 	bic.w	r2, r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000eaa:	484c      	ldr	r0, [pc, #304]	; (8000fdc <i2cTest+0x154>)
 8000eac:	f008 fc32 	bl	8009714 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb0:	23c0      	movs	r3, #192	; 0xc0
 8000eb2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000eb4:	2311      	movs	r3, #17
 8000eb6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4846      	ldr	r0, [pc, #280]	; (8000fe0 <i2cTest+0x158>)
 8000ec6:	f008 f839 	bl	8008f3c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2140      	movs	r1, #64	; 0x40
 8000ece:	4844      	ldr	r0, [pc, #272]	; (8000fe0 <i2cTest+0x158>)
 8000ed0:	f008 faab 	bl	800942a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	4841      	ldr	r0, [pc, #260]	; (8000fe0 <i2cTest+0x158>)
 8000eda:	f008 faa6 	bl	800942a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f007 fcbc 	bl	800885c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000ee4:	bf00      	nop
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	483d      	ldr	r0, [pc, #244]	; (8000fe0 <i2cTest+0x158>)
 8000eea:	f008 fa87 	bl	80093fc <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d006      	beq.n	8000f02 <i2cTest+0x7a>
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	483a      	ldr	r0, [pc, #232]	; (8000fe0 <i2cTest+0x158>)
 8000ef8:	f008 fa80 	bl	80093fc <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d1f1      	bne.n	8000ee6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	4836      	ldr	r0, [pc, #216]	; (8000fe0 <i2cTest+0x158>)
 8000f08:	f008 fa8f 	bl	800942a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f007 fca5 	bl	800885c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f12:	bf00      	nop
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	4832      	ldr	r0, [pc, #200]	; (8000fe0 <i2cTest+0x158>)
 8000f18:	f008 fa70 	bl	80093fc <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d0f8      	beq.n	8000f14 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2140      	movs	r1, #64	; 0x40
 8000f26:	482e      	ldr	r0, [pc, #184]	; (8000fe0 <i2cTest+0x158>)
 8000f28:	f008 fa7f 	bl	800942a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f007 fc95 	bl	800885c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f32:	bf00      	nop
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	482a      	ldr	r0, [pc, #168]	; (8000fe0 <i2cTest+0x158>)
 8000f38:	f008 fa60 	bl	80093fc <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d0f8      	beq.n	8000f34 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	4826      	ldr	r0, [pc, #152]	; (8000fe0 <i2cTest+0x158>)
 8000f48:	f008 fa6f 	bl	800942a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f007 fc85 	bl	800885c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000f52:	bf00      	nop
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	4822      	ldr	r0, [pc, #136]	; (8000fe0 <i2cTest+0x158>)
 8000f58:	f008 fa50 	bl	80093fc <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d1f8      	bne.n	8000f54 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2180      	movs	r1, #128	; 0x80
 8000f66:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <i2cTest+0x158>)
 8000f68:	f008 fa5f 	bl	800942a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f007 fc75 	bl	800885c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f72:	bf00      	nop
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <i2cTest+0x158>)
 8000f78:	f008 fa40 	bl	80093fc <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d1f8      	bne.n	8000f74 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f82:	23c0      	movs	r3, #192	; 0xc0
 8000f84:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000f86:	2312      	movs	r3, #18
 8000f88:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <i2cTest+0x158>)
 8000f98:	f007 ffd0 	bl	8008f3c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <i2cTest+0x154>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <i2cTest+0x154>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000faa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <i2cTest+0x154>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <i2cTest+0x154>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <i2cTest+0x154>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <i2cTest+0x154>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <i2cTest+0x154>)
 8000fce:	f008 fa5d 	bl	800948c <HAL_I2C_Init>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200003bc 	.word	0x200003bc
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000fee:	20c8      	movs	r0, #200	; 0xc8
 8000ff0:	f007 fc34 	bl	800885c <HAL_Delay>
	lcd_clear();
 8000ff4:	f006 ff08 	bl	8007e08 <lcd_clear>
	if(type == 1 && page == 0) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d143      	bne.n	8001086 <printTemplate+0xa2>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d140      	bne.n	8001086 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8001004:	4a9d      	ldr	r2, [pc, #628]	; (800127c <printTemplate+0x298>)
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f006 fed1 	bl	8007db0 <lcd_print>
		lcd_print(2, 3, "0");
 800100e:	4a9c      	ldr	r2, [pc, #624]	; (8001280 <printTemplate+0x29c>)
 8001010:	2103      	movs	r1, #3
 8001012:	2002      	movs	r0, #2
 8001014:	f006 fecc 	bl	8007db0 <lcd_print>
		lcd_print(2, 4, "1");
 8001018:	4a9a      	ldr	r2, [pc, #616]	; (8001284 <printTemplate+0x2a0>)
 800101a:	2104      	movs	r1, #4
 800101c:	2002      	movs	r0, #2
 800101e:	f006 fec7 	bl	8007db0 <lcd_print>
		lcd_print(2, 5, "2");
 8001022:	4a99      	ldr	r2, [pc, #612]	; (8001288 <printTemplate+0x2a4>)
 8001024:	2105      	movs	r1, #5
 8001026:	2002      	movs	r0, #2
 8001028:	f006 fec2 	bl	8007db0 <lcd_print>
		lcd_print(2, 6, "3");
 800102c:	4a97      	ldr	r2, [pc, #604]	; (800128c <printTemplate+0x2a8>)
 800102e:	2106      	movs	r1, #6
 8001030:	2002      	movs	r0, #2
 8001032:	f006 febd 	bl	8007db0 <lcd_print>
		lcd_print(2, 7, "4");
 8001036:	4a96      	ldr	r2, [pc, #600]	; (8001290 <printTemplate+0x2ac>)
 8001038:	2107      	movs	r1, #7
 800103a:	2002      	movs	r0, #2
 800103c:	f006 feb8 	bl	8007db0 <lcd_print>
		lcd_print(2, 10, "5");
 8001040:	4a94      	ldr	r2, [pc, #592]	; (8001294 <printTemplate+0x2b0>)
 8001042:	210a      	movs	r1, #10
 8001044:	2002      	movs	r0, #2
 8001046:	f006 feb3 	bl	8007db0 <lcd_print>
		lcd_print(2, 11, "6");
 800104a:	4a93      	ldr	r2, [pc, #588]	; (8001298 <printTemplate+0x2b4>)
 800104c:	210b      	movs	r1, #11
 800104e:	2002      	movs	r0, #2
 8001050:	f006 feae 	bl	8007db0 <lcd_print>
		lcd_print(2, 12, "7");
 8001054:	4a91      	ldr	r2, [pc, #580]	; (800129c <printTemplate+0x2b8>)
 8001056:	210c      	movs	r1, #12
 8001058:	2002      	movs	r0, #2
 800105a:	f006 fea9 	bl	8007db0 <lcd_print>
		lcd_print(2, 13, "8");
 800105e:	4a90      	ldr	r2, [pc, #576]	; (80012a0 <printTemplate+0x2bc>)
 8001060:	210d      	movs	r1, #13
 8001062:	2002      	movs	r0, #2
 8001064:	f006 fea4 	bl	8007db0 <lcd_print>
		lcd_print(2, 14, "9");
 8001068:	4a8e      	ldr	r2, [pc, #568]	; (80012a4 <printTemplate+0x2c0>)
 800106a:	210e      	movs	r1, #14
 800106c:	2002      	movs	r0, #2
 800106e:	f006 fe9f 	bl	8007db0 <lcd_print>
		lcd_print(1, 5, machineID);
 8001072:	4a8d      	ldr	r2, [pc, #564]	; (80012a8 <printTemplate+0x2c4>)
 8001074:	2105      	movs	r1, #5
 8001076:	2001      	movs	r0, #1
 8001078:	f006 fe9a 	bl	8007db0 <lcd_print>
		lcd_gotoxy(2, 3);
 800107c:	2103      	movs	r1, #3
 800107e:	2002      	movs	r0, #2
 8001080:	f006 fe77 	bl	8007d72 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8001084:	e0f5      	b.n	8001272 <printTemplate+0x28e>
	} else if(type == 2) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d178      	bne.n	800117e <printTemplate+0x19a>
		if(page == 1) {
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d114      	bne.n	80010bc <printTemplate+0xd8>
			lcd_clear();
 8001092:	f006 feb9 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f007 fbe0 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800109c:	4a83      	ldr	r2, [pc, #524]	; (80012ac <printTemplate+0x2c8>)
 800109e:	2101      	movs	r1, #1
 80010a0:	2001      	movs	r0, #1
 80010a2:	f006 fe85 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010a6:	4a82      	ldr	r2, [pc, #520]	; (80012b0 <printTemplate+0x2cc>)
 80010a8:	2107      	movs	r1, #7
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fe80 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010b0:	4a80      	ldr	r2, [pc, #512]	; (80012b4 <printTemplate+0x2d0>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	2002      	movs	r0, #2
 80010b6:	f006 fe7b 	bl	8007db0 <lcd_print>
}
 80010ba:	e0da      	b.n	8001272 <printTemplate+0x28e>
		} else if(page == 2) {
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d114      	bne.n	80010ec <printTemplate+0x108>
			lcd_clear();
 80010c2:	f006 fea1 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f007 fbc8 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010cc:	4a77      	ldr	r2, [pc, #476]	; (80012ac <printTemplate+0x2c8>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	2001      	movs	r0, #1
 80010d2:	f006 fe6d 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010d6:	4a76      	ldr	r2, [pc, #472]	; (80012b0 <printTemplate+0x2cc>)
 80010d8:	2107      	movs	r1, #7
 80010da:	2001      	movs	r0, #1
 80010dc:	f006 fe68 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010e0:	4a75      	ldr	r2, [pc, #468]	; (80012b8 <printTemplate+0x2d4>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	2002      	movs	r0, #2
 80010e6:	f006 fe63 	bl	8007db0 <lcd_print>
}
 80010ea:	e0c2      	b.n	8001272 <printTemplate+0x28e>
		} else if(page == 3) {
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d114      	bne.n	800111c <printTemplate+0x138>
			lcd_clear();
 80010f2:	f006 fe89 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 80010f6:	2064      	movs	r0, #100	; 0x64
 80010f8:	f007 fbb0 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010fc:	4a6b      	ldr	r2, [pc, #428]	; (80012ac <printTemplate+0x2c8>)
 80010fe:	2101      	movs	r1, #1
 8001100:	2001      	movs	r0, #1
 8001102:	f006 fe55 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001106:	4a6a      	ldr	r2, [pc, #424]	; (80012b0 <printTemplate+0x2cc>)
 8001108:	2107      	movs	r1, #7
 800110a:	2001      	movs	r0, #1
 800110c:	f006 fe50 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001110:	4a6a      	ldr	r2, [pc, #424]	; (80012bc <printTemplate+0x2d8>)
 8001112:	2101      	movs	r1, #1
 8001114:	2002      	movs	r0, #2
 8001116:	f006 fe4b 	bl	8007db0 <lcd_print>
}
 800111a:	e0aa      	b.n	8001272 <printTemplate+0x28e>
		} else if(page == 4) {
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b04      	cmp	r3, #4
 8001120:	d114      	bne.n	800114c <printTemplate+0x168>
			lcd_clear();
 8001122:	f006 fe71 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 8001126:	2064      	movs	r0, #100	; 0x64
 8001128:	f007 fb98 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800112c:	4a5f      	ldr	r2, [pc, #380]	; (80012ac <printTemplate+0x2c8>)
 800112e:	2101      	movs	r1, #1
 8001130:	2001      	movs	r0, #1
 8001132:	f006 fe3d 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001136:	4a5e      	ldr	r2, [pc, #376]	; (80012b0 <printTemplate+0x2cc>)
 8001138:	2107      	movs	r1, #7
 800113a:	2001      	movs	r0, #1
 800113c:	f006 fe38 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001140:	4a5f      	ldr	r2, [pc, #380]	; (80012c0 <printTemplate+0x2dc>)
 8001142:	2101      	movs	r1, #1
 8001144:	2002      	movs	r0, #2
 8001146:	f006 fe33 	bl	8007db0 <lcd_print>
}
 800114a:	e092      	b.n	8001272 <printTemplate+0x28e>
		} else if(page == 5) {
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b05      	cmp	r3, #5
 8001150:	f040 808f 	bne.w	8001272 <printTemplate+0x28e>
			lcd_clear();
 8001154:	f006 fe58 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 8001158:	2064      	movs	r0, #100	; 0x64
 800115a:	f007 fb7f 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800115e:	4a53      	ldr	r2, [pc, #332]	; (80012ac <printTemplate+0x2c8>)
 8001160:	2101      	movs	r1, #1
 8001162:	2001      	movs	r0, #1
 8001164:	f006 fe24 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001168:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <printTemplate+0x2cc>)
 800116a:	2107      	movs	r1, #7
 800116c:	2001      	movs	r0, #1
 800116e:	f006 fe1f 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001172:	4a54      	ldr	r2, [pc, #336]	; (80012c4 <printTemplate+0x2e0>)
 8001174:	2101      	movs	r1, #1
 8001176:	2002      	movs	r0, #2
 8001178:	f006 fe1a 	bl	8007db0 <lcd_print>
}
 800117c:	e079      	b.n	8001272 <printTemplate+0x28e>
	} else if(type == 3) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d176      	bne.n	8001272 <printTemplate+0x28e>
		if(page == 1) {
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d114      	bne.n	80011b4 <printTemplate+0x1d0>
			lcd_clear();
 800118a:	f006 fe3d 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f007 fb64 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001194:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <printTemplate+0x2e4>)
 8001196:	2101      	movs	r1, #1
 8001198:	2001      	movs	r0, #1
 800119a:	f006 fe09 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800119e:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <printTemplate+0x2e8>)
 80011a0:	2107      	movs	r1, #7
 80011a2:	2001      	movs	r0, #1
 80011a4:	f006 fe04 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80011a8:	4a42      	ldr	r2, [pc, #264]	; (80012b4 <printTemplate+0x2d0>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	2002      	movs	r0, #2
 80011ae:	f006 fdff 	bl	8007db0 <lcd_print>
}
 80011b2:	e05e      	b.n	8001272 <printTemplate+0x28e>
		} else if(page == 2) {
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d114      	bne.n	80011e4 <printTemplate+0x200>
			lcd_clear();
 80011ba:	f006 fe25 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 80011be:	2064      	movs	r0, #100	; 0x64
 80011c0:	f007 fb4c 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011c4:	4a40      	ldr	r2, [pc, #256]	; (80012c8 <printTemplate+0x2e4>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2001      	movs	r0, #1
 80011ca:	f006 fdf1 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011ce:	4a3f      	ldr	r2, [pc, #252]	; (80012cc <printTemplate+0x2e8>)
 80011d0:	2107      	movs	r1, #7
 80011d2:	2001      	movs	r0, #1
 80011d4:	f006 fdec 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011d8:	4a37      	ldr	r2, [pc, #220]	; (80012b8 <printTemplate+0x2d4>)
 80011da:	2101      	movs	r1, #1
 80011dc:	2002      	movs	r0, #2
 80011de:	f006 fde7 	bl	8007db0 <lcd_print>
}
 80011e2:	e046      	b.n	8001272 <printTemplate+0x28e>
		} else if(page == 3) {
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d114      	bne.n	8001214 <printTemplate+0x230>
			lcd_clear();
 80011ea:	f006 fe0d 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f007 fb34 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011f4:	4a34      	ldr	r2, [pc, #208]	; (80012c8 <printTemplate+0x2e4>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	2001      	movs	r0, #1
 80011fa:	f006 fdd9 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011fe:	4a33      	ldr	r2, [pc, #204]	; (80012cc <printTemplate+0x2e8>)
 8001200:	2107      	movs	r1, #7
 8001202:	2001      	movs	r0, #1
 8001204:	f006 fdd4 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <printTemplate+0x2d8>)
 800120a:	2101      	movs	r1, #1
 800120c:	2002      	movs	r0, #2
 800120e:	f006 fdcf 	bl	8007db0 <lcd_print>
}
 8001212:	e02e      	b.n	8001272 <printTemplate+0x28e>
		} else if(page == 4) {
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d114      	bne.n	8001244 <printTemplate+0x260>
			lcd_clear();
 800121a:	f006 fdf5 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 800121e:	2064      	movs	r0, #100	; 0x64
 8001220:	f007 fb1c 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001224:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <printTemplate+0x2e4>)
 8001226:	2101      	movs	r1, #1
 8001228:	2001      	movs	r0, #1
 800122a:	f006 fdc1 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800122e:	4a27      	ldr	r2, [pc, #156]	; (80012cc <printTemplate+0x2e8>)
 8001230:	2107      	movs	r1, #7
 8001232:	2001      	movs	r0, #1
 8001234:	f006 fdbc 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001238:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <printTemplate+0x2dc>)
 800123a:	2101      	movs	r1, #1
 800123c:	2002      	movs	r0, #2
 800123e:	f006 fdb7 	bl	8007db0 <lcd_print>
}
 8001242:	e016      	b.n	8001272 <printTemplate+0x28e>
		} else if(page == 5) {
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d113      	bne.n	8001272 <printTemplate+0x28e>
			lcd_clear();
 800124a:	f006 fddd 	bl	8007e08 <lcd_clear>
			HAL_Delay(100);
 800124e:	2064      	movs	r0, #100	; 0x64
 8001250:	f007 fb04 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001254:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <printTemplate+0x2e4>)
 8001256:	2101      	movs	r1, #1
 8001258:	2001      	movs	r0, #1
 800125a:	f006 fda9 	bl	8007db0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <printTemplate+0x2e8>)
 8001260:	2107      	movs	r1, #7
 8001262:	2001      	movs	r0, #1
 8001264:	f006 fda4 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <printTemplate+0x2e0>)
 800126a:	2101      	movs	r1, #1
 800126c:	2002      	movs	r0, #2
 800126e:	f006 fd9f 	bl	8007db0 <lcd_print>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	0800d088 	.word	0x0800d088
 8001280:	0800d090 	.word	0x0800d090
 8001284:	0800d094 	.word	0x0800d094
 8001288:	0800d098 	.word	0x0800d098
 800128c:	0800d09c 	.word	0x0800d09c
 8001290:	0800d0a0 	.word	0x0800d0a0
 8001294:	0800d0a4 	.word	0x0800d0a4
 8001298:	0800d0a8 	.word	0x0800d0a8
 800129c:	0800d0ac 	.word	0x0800d0ac
 80012a0:	0800d0b0 	.word	0x0800d0b0
 80012a4:	0800d0b4 	.word	0x0800d0b4
 80012a8:	20000190 	.word	0x20000190
 80012ac:	0800d0b8 	.word	0x0800d0b8
 80012b0:	200001a0 	.word	0x200001a0
 80012b4:	0800d0c0 	.word	0x0800d0c0
 80012b8:	0800d0d4 	.word	0x0800d0d4
 80012bc:	0800d0e8 	.word	0x0800d0e8
 80012c0:	0800d0fc 	.word	0x0800d0fc
 80012c4:	0800d110 	.word	0x0800d110
 80012c8:	0800d124 	.word	0x0800d124
 80012cc:	200001b8 	.word	0x200001b8

080012d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012d4:	f3bf 8f4f 	dsb	sy
}
 80012d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <__NVIC_SystemReset+0x24>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012e2:	4904      	ldr	r1, [pc, #16]	; (80012f4 <__NVIC_SystemReset+0x24>)
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_SystemReset+0x28>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012ea:	f3bf 8f4f 	dsb	sy
}
 80012ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <__NVIC_SystemReset+0x20>
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	05fa0004 	.word	0x05fa0004

080012fc <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b092      	sub	sp, #72	; 0x48
 8001300:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001302:	2101      	movs	r1, #1
 8001304:	488e      	ldr	r0, [pc, #568]	; (8001540 <menu+0x244>)
 8001306:	f008 f879 	bl	80093fc <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b01      	cmp	r3, #1
 800130e:	f040 808e 	bne.w	800142e <menu+0x132>
 8001312:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <menu+0x248>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 8086 	beq.w	800142e <menu+0x132>
		menuSayac = menuSayac+1;
 8001322:	4b89      	ldr	r3, [pc, #548]	; (8001548 <menu+0x24c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b87      	ldr	r3, [pc, #540]	; (8001548 <menu+0x24c>)
 800132c:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800132e:	4b86      	ldr	r3, [pc, #536]	; (8001548 <menu+0x24c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b24      	cmp	r3, #36	; 0x24
 8001334:	d102      	bne.n	800133c <menu+0x40>
			menuSayac = 1;
 8001336:	4b84      	ldr	r3, [pc, #528]	; (8001548 <menu+0x24c>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800133c:	4b82      	ldr	r3, [pc, #520]	; (8001548 <menu+0x24c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b12      	cmp	r3, #18
 8001342:	d106      	bne.n	8001352 <menu+0x56>
 8001344:	4b81      	ldr	r3, [pc, #516]	; (800154c <menu+0x250>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <menu+0x56>
			menuSayac = 21;
 800134c:	4b7e      	ldr	r3, [pc, #504]	; (8001548 <menu+0x24c>)
 800134e:	2215      	movs	r2, #21
 8001350:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001352:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <menu+0x24c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b08      	cmp	r3, #8
 8001358:	d106      	bne.n	8001368 <menu+0x6c>
 800135a:	4b7d      	ldr	r3, [pc, #500]	; (8001550 <menu+0x254>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <menu+0x6c>
			menuSayac = 16;
 8001362:	4b79      	ldr	r3, [pc, #484]	; (8001548 <menu+0x24c>)
 8001364:	2210      	movs	r2, #16
 8001366:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001368:	4b77      	ldr	r3, [pc, #476]	; (8001548 <menu+0x24c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b0d      	cmp	r3, #13
 800136e:	d106      	bne.n	800137e <menu+0x82>
 8001370:	4b77      	ldr	r3, [pc, #476]	; (8001550 <menu+0x254>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d102      	bne.n	800137e <menu+0x82>
			menuSayac = 16;
 8001378:	4b73      	ldr	r3, [pc, #460]	; (8001548 <menu+0x24c>)
 800137a:	2210      	movs	r2, #16
 800137c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800137e:	4b72      	ldr	r3, [pc, #456]	; (8001548 <menu+0x24c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b09      	cmp	r3, #9
 8001384:	d106      	bne.n	8001394 <menu+0x98>
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <menu+0x254>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d102      	bne.n	8001394 <menu+0x98>
			menuSayac = 13;
 800138e:	4b6e      	ldr	r3, [pc, #440]	; (8001548 <menu+0x24c>)
 8001390:	220d      	movs	r2, #13
 8001392:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001394:	4b6c      	ldr	r3, [pc, #432]	; (8001548 <menu+0x24c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b0a      	cmp	r3, #10
 800139a:	d10a      	bne.n	80013b2 <menu+0xb6>
 800139c:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <menu+0x258>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d003      	beq.n	80013ac <menu+0xb0>
 80013a4:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <menu+0x258>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d102      	bne.n	80013b2 <menu+0xb6>
			menuSayac = 11;
 80013ac:	4b66      	ldr	r3, [pc, #408]	; (8001548 <menu+0x24c>)
 80013ae:	220b      	movs	r2, #11
 80013b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80013b2:	4b65      	ldr	r3, [pc, #404]	; (8001548 <menu+0x24c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d10e      	bne.n	80013d8 <menu+0xdc>
 80013ba:	4b67      	ldr	r3, [pc, #412]	; (8001558 <menu+0x25c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d003      	beq.n	80013ca <menu+0xce>
 80013c2:	4b65      	ldr	r3, [pc, #404]	; (8001558 <menu+0x25c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d106      	bne.n	80013d8 <menu+0xdc>
 80013ca:	4b61      	ldr	r3, [pc, #388]	; (8001550 <menu+0x254>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d102      	bne.n	80013d8 <menu+0xdc>
			menuSayac = 16;
 80013d2:	4b5d      	ldr	r3, [pc, #372]	; (8001548 <menu+0x24c>)
 80013d4:	2210      	movs	r2, #16
 80013d6:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80013d8:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <menu+0x24c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b0c      	cmp	r3, #12
 80013de:	d10e      	bne.n	80013fe <menu+0x102>
 80013e0:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <menu+0x25c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d003      	beq.n	80013f0 <menu+0xf4>
 80013e8:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <menu+0x25c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d106      	bne.n	80013fe <menu+0x102>
 80013f0:	4b57      	ldr	r3, [pc, #348]	; (8001550 <menu+0x254>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d102      	bne.n	80013fe <menu+0x102>
			menuSayac = 13;
 80013f8:	4b53      	ldr	r3, [pc, #332]	; (8001548 <menu+0x24c>)
 80013fa:	220d      	movs	r2, #13
 80013fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013fe:	4b52      	ldr	r3, [pc, #328]	; (8001548 <menu+0x24c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	d106      	bne.n	8001414 <menu+0x118>
 8001406:	4b55      	ldr	r3, [pc, #340]	; (800155c <menu+0x260>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d102      	bne.n	8001414 <menu+0x118>
			menuSayac = 16;
 800140e:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <menu+0x24c>)
 8001410:	2210      	movs	r2, #16
 8001412:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001414:	4b4c      	ldr	r3, [pc, #304]	; (8001548 <menu+0x24c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b18      	cmp	r3, #24
 800141a:	d106      	bne.n	800142a <menu+0x12e>
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <menu+0x250>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <menu+0x12e>
			menuSayac = 26;
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <menu+0x24c>)
 8001426:	221a      	movs	r2, #26
 8001428:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800142a:	f003 fbff 	bl	8004c2c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800142e:	2108      	movs	r1, #8
 8001430:	484b      	ldr	r0, [pc, #300]	; (8001560 <menu+0x264>)
 8001432:	f007 ffe3 	bl	80093fc <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	d175      	bne.n	8001528 <menu+0x22c>
 800143c:	4b41      	ldr	r3, [pc, #260]	; (8001544 <menu+0x248>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d06e      	beq.n	8001528 <menu+0x22c>
		if (menuSayac <= 1) {
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <menu+0x24c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d802      	bhi.n	8001458 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001452:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <menu+0x24c>)
 8001454:	2224      	movs	r2, #36	; 0x24
 8001456:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <menu+0x24c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b39      	ldr	r3, [pc, #228]	; (8001548 <menu+0x24c>)
 8001462:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <menu+0x24c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b14      	cmp	r3, #20
 800146a:	d106      	bne.n	800147a <menu+0x17e>
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <menu+0x250>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <menu+0x17e>
			menuSayac = 17;
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <menu+0x24c>)
 8001476:	2211      	movs	r2, #17
 8001478:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <menu+0x24c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	d106      	bne.n	8001490 <menu+0x194>
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <menu+0x254>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <menu+0x194>
			menuSayac = 7;
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <menu+0x24c>)
 800148c:	2207      	movs	r2, #7
 800148e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <menu+0x24c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d106      	bne.n	80014a6 <menu+0x1aa>
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <menu+0x254>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d102      	bne.n	80014a6 <menu+0x1aa>
			menuSayac = 12;
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <menu+0x24c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <menu+0x24c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d106      	bne.n	80014bc <menu+0x1c0>
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <menu+0x254>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d102      	bne.n	80014bc <menu+0x1c0>
			menuSayac = 8;
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <menu+0x24c>)
 80014b8:	2208      	movs	r2, #8
 80014ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <menu+0x24c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b0a      	cmp	r3, #10
 80014c2:	d10a      	bne.n	80014da <menu+0x1de>
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <menu+0x258>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d003      	beq.n	80014d4 <menu+0x1d8>
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <menu+0x258>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d102      	bne.n	80014da <menu+0x1de>
			menuSayac = 9;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <menu+0x24c>)
 80014d6:	2209      	movs	r2, #9
 80014d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <menu+0x24c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d10a      	bne.n	80014f8 <menu+0x1fc>
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <menu+0x25c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <menu+0x1f6>
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <menu+0x25c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d102      	bne.n	80014f8 <menu+0x1fc>
			menuSayac = 11;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <menu+0x24c>)
 80014f4:	220b      	movs	r2, #11
 80014f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <menu+0x24c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d106      	bne.n	800150e <menu+0x212>
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <menu+0x260>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <menu+0x212>
			menuSayac = 14;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <menu+0x24c>)
 800150a:	220e      	movs	r2, #14
 800150c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <menu+0x24c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b19      	cmp	r3, #25
 8001514:	d106      	bne.n	8001524 <menu+0x228>
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <menu+0x250>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <menu+0x228>
			menuSayac = 23;
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <menu+0x24c>)
 8001520:	2217      	movs	r2, #23
 8001522:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001524:	f003 fb82 	bl	8004c2c <bekle>
	}

	if (menuSayac == 0) {
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <menu+0x24c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d133      	bne.n	8001598 <menu+0x29c>
		if(dilSecim == 0) {
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <menu+0x268>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d121      	bne.n	800157c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <menu+0x26c>)
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	e015      	b.n	800156c <menu+0x270>
 8001540:	40010800 	.word	0x40010800
 8001544:	20000263 	.word	0x20000263
 8001548:	20000234 	.word	0x20000234
 800154c:	20000243 	.word	0x20000243
 8001550:	2000023c 	.word	0x2000023c
 8001554:	2000023d 	.word	0x2000023d
 8001558:	2000023e 	.word	0x2000023e
 800155c:	2000023f 	.word	0x2000023f
 8001560:	40011000 	.word	0x40011000
 8001564:	20000255 	.word	0x20000255
 8001568:	0800d12c 	.word	0x0800d12c
 800156c:	f006 fc20 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001570:	4a94      	ldr	r2, [pc, #592]	; (80017c4 <menu+0x4c8>)
 8001572:	2101      	movs	r1, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f006 fc1b 	bl	8007db0 <lcd_print>
 800157a:	e00d      	b.n	8001598 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800157c:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <menu+0x4cc>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d109      	bne.n	8001598 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001584:	4a91      	ldr	r2, [pc, #580]	; (80017cc <menu+0x4d0>)
 8001586:	2101      	movs	r1, #1
 8001588:	2001      	movs	r0, #1
 800158a:	f006 fc11 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800158e:	4a90      	ldr	r2, [pc, #576]	; (80017d0 <menu+0x4d4>)
 8001590:	2101      	movs	r1, #1
 8001592:	2002      	movs	r0, #2
 8001594:	f006 fc0c 	bl	8007db0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001598:	4b8e      	ldr	r3, [pc, #568]	; (80017d4 <menu+0x4d8>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	f040 82b5 	bne.w	8001b0c <menu+0x810>
		if(dilSecim == 0) {
 80015a2:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <menu+0x4cc>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d105      	bne.n	80015b6 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80015aa:	4a8b      	ldr	r2, [pc, #556]	; (80017d8 <menu+0x4dc>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	2001      	movs	r0, #1
 80015b0:	f006 fbfe 	bl	8007db0 <lcd_print>
 80015b4:	e008      	b.n	80015c8 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80015b6:	4b84      	ldr	r3, [pc, #528]	; (80017c8 <menu+0x4cc>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d104      	bne.n	80015c8 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80015be:	4a87      	ldr	r2, [pc, #540]	; (80017dc <menu+0x4e0>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	2001      	movs	r0, #1
 80015c4:	f006 fbf4 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80015c8:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <menu+0x4e4>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d123      	bne.n	8001618 <menu+0x31c>
			if(dilSecim == 0) {
 80015d0:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <menu+0x4cc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d105      	bne.n	80015e4 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80015d8:	4a82      	ldr	r2, [pc, #520]	; (80017e4 <menu+0x4e8>)
 80015da:	2101      	movs	r1, #1
 80015dc:	2002      	movs	r0, #2
 80015de:	f006 fbe7 	bl	8007db0 <lcd_print>
 80015e2:	e008      	b.n	80015f6 <menu+0x2fa>

			} else if(dilSecim == 1) {
 80015e4:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <menu+0x4cc>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d104      	bne.n	80015f6 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80015ec:	4a7e      	ldr	r2, [pc, #504]	; (80017e8 <menu+0x4ec>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	2002      	movs	r0, #2
 80015f2:	f006 fbdd 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80015f6:	4a7d      	ldr	r2, [pc, #500]	; (80017ec <menu+0x4f0>)
 80015f8:	210f      	movs	r1, #15
 80015fa:	2002      	movs	r0, #2
 80015fc:	f006 fbd8 	bl	8007db0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <menu+0x4f4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	220a      	movs	r2, #10
 8001606:	497b      	ldr	r1, [pc, #492]	; (80017f4 <menu+0x4f8>)
 8001608:	4618      	mov	r0, r3
 800160a:	f00a ff23 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 800160e:	4a79      	ldr	r2, [pc, #484]	; (80017f4 <menu+0x4f8>)
 8001610:	210e      	movs	r1, #14
 8001612:	2002      	movs	r0, #2
 8001614:	f006 fbcc 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001618:	4b71      	ldr	r3, [pc, #452]	; (80017e0 <menu+0x4e4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d123      	bne.n	8001668 <menu+0x36c>
			if(dilSecim == 0) {
 8001620:	4b69      	ldr	r3, [pc, #420]	; (80017c8 <menu+0x4cc>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001628:	4a73      	ldr	r2, [pc, #460]	; (80017f8 <menu+0x4fc>)
 800162a:	2101      	movs	r1, #1
 800162c:	2002      	movs	r0, #2
 800162e:	f006 fbbf 	bl	8007db0 <lcd_print>
 8001632:	e008      	b.n	8001646 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <menu+0x4cc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d104      	bne.n	8001646 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 800163c:	4a6f      	ldr	r2, [pc, #444]	; (80017fc <menu+0x500>)
 800163e:	2101      	movs	r1, #1
 8001640:	2002      	movs	r0, #2
 8001642:	f006 fbb5 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001646:	4a6e      	ldr	r2, [pc, #440]	; (8001800 <menu+0x504>)
 8001648:	210f      	movs	r1, #15
 800164a:	2002      	movs	r0, #2
 800164c:	f006 fbb0 	bl	8007db0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001650:	4b6c      	ldr	r3, [pc, #432]	; (8001804 <menu+0x508>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	220a      	movs	r2, #10
 8001656:	4967      	ldr	r1, [pc, #412]	; (80017f4 <menu+0x4f8>)
 8001658:	4618      	mov	r0, r3
 800165a:	f00a fefb 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 800165e:	4a65      	ldr	r2, [pc, #404]	; (80017f4 <menu+0x4f8>)
 8001660:	210e      	movs	r1, #14
 8001662:	2002      	movs	r0, #2
 8001664:	f006 fba4 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001668:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <menu+0x4e4>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <menu+0x3bc>
			if(dilSecim == 0) {
 8001670:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <menu+0x4cc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001678:	4a63      	ldr	r2, [pc, #396]	; (8001808 <menu+0x50c>)
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f006 fb97 	bl	8007db0 <lcd_print>
 8001682:	e008      	b.n	8001696 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <menu+0x4cc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d104      	bne.n	8001696 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 800168c:	4a5f      	ldr	r2, [pc, #380]	; (800180c <menu+0x510>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f006 fb8d 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001696:	4a5a      	ldr	r2, [pc, #360]	; (8001800 <menu+0x504>)
 8001698:	210f      	movs	r1, #15
 800169a:	2002      	movs	r0, #2
 800169c:	f006 fb88 	bl	8007db0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80016a0:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <menu+0x514>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	220a      	movs	r2, #10
 80016a6:	4953      	ldr	r1, [pc, #332]	; (80017f4 <menu+0x4f8>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00a fed3 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 80016ae:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <menu+0x4f8>)
 80016b0:	210e      	movs	r1, #14
 80016b2:	2002      	movs	r0, #2
 80016b4:	f006 fb7c 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80016b8:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <menu+0x4e4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d123      	bne.n	8001708 <menu+0x40c>
			if(dilSecim == 0) {
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <menu+0x4cc>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80016c8:	4a52      	ldr	r2, [pc, #328]	; (8001814 <menu+0x518>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	2002      	movs	r0, #2
 80016ce:	f006 fb6f 	bl	8007db0 <lcd_print>
 80016d2:	e008      	b.n	80016e6 <menu+0x3ea>
			} else if(dilSecim == 1) {
 80016d4:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <menu+0x4cc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d104      	bne.n	80016e6 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80016dc:	4a4e      	ldr	r2, [pc, #312]	; (8001818 <menu+0x51c>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f006 fb65 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016e6:	4a46      	ldr	r2, [pc, #280]	; (8001800 <menu+0x504>)
 80016e8:	210f      	movs	r1, #15
 80016ea:	2002      	movs	r0, #2
 80016ec:	f006 fb60 	bl	8007db0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80016f0:	4b4a      	ldr	r3, [pc, #296]	; (800181c <menu+0x520>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	220a      	movs	r2, #10
 80016f6:	493f      	ldr	r1, [pc, #252]	; (80017f4 <menu+0x4f8>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00a feab 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 80016fe:	4a3d      	ldr	r2, [pc, #244]	; (80017f4 <menu+0x4f8>)
 8001700:	210e      	movs	r1, #14
 8001702:	2002      	movs	r0, #2
 8001704:	f006 fb54 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <menu+0x4e4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b04      	cmp	r3, #4
 800170e:	d123      	bne.n	8001758 <menu+0x45c>
			if(dilSecim == 0) {
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <menu+0x4cc>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001718:	4a41      	ldr	r2, [pc, #260]	; (8001820 <menu+0x524>)
 800171a:	2101      	movs	r1, #1
 800171c:	2002      	movs	r0, #2
 800171e:	f006 fb47 	bl	8007db0 <lcd_print>
 8001722:	e008      	b.n	8001736 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <menu+0x4cc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d104      	bne.n	8001736 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 800172c:	4a3d      	ldr	r2, [pc, #244]	; (8001824 <menu+0x528>)
 800172e:	2101      	movs	r1, #1
 8001730:	2002      	movs	r0, #2
 8001732:	f006 fb3d 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001736:	4a32      	ldr	r2, [pc, #200]	; (8001800 <menu+0x504>)
 8001738:	210f      	movs	r1, #15
 800173a:	2002      	movs	r0, #2
 800173c:	f006 fb38 	bl	8007db0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001740:	4b39      	ldr	r3, [pc, #228]	; (8001828 <menu+0x52c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	220a      	movs	r2, #10
 8001746:	492b      	ldr	r1, [pc, #172]	; (80017f4 <menu+0x4f8>)
 8001748:	4618      	mov	r0, r3
 800174a:	f00a fe83 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 800174e:	4a29      	ldr	r2, [pc, #164]	; (80017f4 <menu+0x4f8>)
 8001750:	210e      	movs	r1, #14
 8001752:	2002      	movs	r0, #2
 8001754:	f006 fb2c 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <menu+0x4e4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b05      	cmp	r3, #5
 800175e:	d123      	bne.n	80017a8 <menu+0x4ac>
			if(dilSecim == 0) {
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <menu+0x4cc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001768:	4a30      	ldr	r2, [pc, #192]	; (800182c <menu+0x530>)
 800176a:	2101      	movs	r1, #1
 800176c:	2002      	movs	r0, #2
 800176e:	f006 fb1f 	bl	8007db0 <lcd_print>
 8001772:	e008      	b.n	8001786 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <menu+0x4cc>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d104      	bne.n	8001786 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 800177c:	4a2c      	ldr	r2, [pc, #176]	; (8001830 <menu+0x534>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f006 fb15 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001786:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <menu+0x504>)
 8001788:	210f      	movs	r1, #15
 800178a:	2002      	movs	r0, #2
 800178c:	f006 fb10 	bl	8007db0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <menu+0x538>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	220a      	movs	r2, #10
 8001796:	4917      	ldr	r1, [pc, #92]	; (80017f4 <menu+0x4f8>)
 8001798:	4618      	mov	r0, r3
 800179a:	f00a fe5b 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <menu+0x4f8>)
 80017a0:	210e      	movs	r1, #14
 80017a2:	2002      	movs	r0, #2
 80017a4:	f006 fb04 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <menu+0x4e4>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b06      	cmp	r3, #6
 80017ae:	d15f      	bne.n	8001870 <menu+0x574>
			if(dilSecim == 0) {
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <menu+0x4cc>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d141      	bne.n	800183c <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80017b8:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <menu+0x53c>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	2002      	movs	r0, #2
 80017be:	f006 faf7 	bl	8007db0 <lcd_print>
 80017c2:	e044      	b.n	800184e <menu+0x552>
 80017c4:	0800d140 	.word	0x0800d140
 80017c8:	20000255 	.word	0x20000255
 80017cc:	0800d154 	.word	0x0800d154
 80017d0:	0800d168 	.word	0x0800d168
 80017d4:	20000234 	.word	0x20000234
 80017d8:	0800d17c 	.word	0x0800d17c
 80017dc:	0800d190 	.word	0x0800d190
 80017e0:	20000236 	.word	0x20000236
 80017e4:	0800d1a4 	.word	0x0800d1a4
 80017e8:	0800d1b4 	.word	0x0800d1b4
 80017ec:	0800d1c4 	.word	0x0800d1c4
 80017f0:	20000256 	.word	0x20000256
 80017f4:	20000188 	.word	0x20000188
 80017f8:	0800d1c8 	.word	0x0800d1c8
 80017fc:	0800d1d8 	.word	0x0800d1d8
 8001800:	0800d1e8 	.word	0x0800d1e8
 8001804:	20000257 	.word	0x20000257
 8001808:	0800d1ec 	.word	0x0800d1ec
 800180c:	0800d1fc 	.word	0x0800d1fc
 8001810:	20000258 	.word	0x20000258
 8001814:	0800d20c 	.word	0x0800d20c
 8001818:	0800d21c 	.word	0x0800d21c
 800181c:	20000259 	.word	0x20000259
 8001820:	0800d22c 	.word	0x0800d22c
 8001824:	0800d23c 	.word	0x0800d23c
 8001828:	2000025a 	.word	0x2000025a
 800182c:	0800d24c 	.word	0x0800d24c
 8001830:	0800d25c 	.word	0x0800d25c
 8001834:	2000025b 	.word	0x2000025b
 8001838:	0800d26c 	.word	0x0800d26c
			} else if(dilSecim == 1) {
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <menu+0x680>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d104      	bne.n	800184e <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001844:	4a4e      	ldr	r2, [pc, #312]	; (8001980 <menu+0x684>)
 8001846:	2101      	movs	r1, #1
 8001848:	2002      	movs	r0, #2
 800184a:	f006 fab1 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800184e:	4a4d      	ldr	r2, [pc, #308]	; (8001984 <menu+0x688>)
 8001850:	210f      	movs	r1, #15
 8001852:	2002      	movs	r0, #2
 8001854:	f006 faac 	bl	8007db0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001858:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <menu+0x68c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	220a      	movs	r2, #10
 800185e:	494b      	ldr	r1, [pc, #300]	; (800198c <menu+0x690>)
 8001860:	4618      	mov	r0, r3
 8001862:	f00a fdf7 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 8001866:	4a49      	ldr	r2, [pc, #292]	; (800198c <menu+0x690>)
 8001868:	210e      	movs	r1, #14
 800186a:	2002      	movs	r0, #2
 800186c:	f006 faa0 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001870:	4b47      	ldr	r3, [pc, #284]	; (8001990 <menu+0x694>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d123      	bne.n	80018c0 <menu+0x5c4>
			if(dilSecim == 0) {
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <menu+0x680>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001880:	4a44      	ldr	r2, [pc, #272]	; (8001994 <menu+0x698>)
 8001882:	2101      	movs	r1, #1
 8001884:	2002      	movs	r0, #2
 8001886:	f006 fa93 	bl	8007db0 <lcd_print>
 800188a:	e008      	b.n	800189e <menu+0x5a2>
			} else if(dilSecim == 1) {
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <menu+0x680>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d104      	bne.n	800189e <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001894:	4a40      	ldr	r2, [pc, #256]	; (8001998 <menu+0x69c>)
 8001896:	2101      	movs	r1, #1
 8001898:	2002      	movs	r0, #2
 800189a:	f006 fa89 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800189e:	4a39      	ldr	r2, [pc, #228]	; (8001984 <menu+0x688>)
 80018a0:	210f      	movs	r1, #15
 80018a2:	2002      	movs	r0, #2
 80018a4:	f006 fa84 	bl	8007db0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <menu+0x6a0>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	220a      	movs	r2, #10
 80018ae:	4937      	ldr	r1, [pc, #220]	; (800198c <menu+0x690>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f00a fdcf 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 80018b6:	4a35      	ldr	r2, [pc, #212]	; (800198c <menu+0x690>)
 80018b8:	210e      	movs	r1, #14
 80018ba:	2002      	movs	r0, #2
 80018bc:	f006 fa78 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <menu+0x694>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d123      	bne.n	8001910 <menu+0x614>
			if(dilSecim == 0) {
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <menu+0x680>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80018d0:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <menu+0x6a4>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2002      	movs	r0, #2
 80018d6:	f006 fa6b 	bl	8007db0 <lcd_print>
 80018da:	e008      	b.n	80018ee <menu+0x5f2>
			} else if(dilSecim == 1) {
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <menu+0x680>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d104      	bne.n	80018ee <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80018e4:	4a2f      	ldr	r2, [pc, #188]	; (80019a4 <menu+0x6a8>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	2002      	movs	r0, #2
 80018ea:	f006 fa61 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018ee:	4a25      	ldr	r2, [pc, #148]	; (8001984 <menu+0x688>)
 80018f0:	210f      	movs	r1, #15
 80018f2:	2002      	movs	r0, #2
 80018f4:	f006 fa5c 	bl	8007db0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <menu+0x6ac>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	220a      	movs	r2, #10
 80018fe:	4923      	ldr	r1, [pc, #140]	; (800198c <menu+0x690>)
 8001900:	4618      	mov	r0, r3
 8001902:	f00a fda7 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 8001906:	4a21      	ldr	r2, [pc, #132]	; (800198c <menu+0x690>)
 8001908:	210e      	movs	r1, #14
 800190a:	2002      	movs	r0, #2
 800190c:	f006 fa50 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <menu+0x694>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b09      	cmp	r3, #9
 8001916:	d123      	bne.n	8001960 <menu+0x664>
			if(dilSecim == 0) {
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <menu+0x680>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001920:	4a22      	ldr	r2, [pc, #136]	; (80019ac <menu+0x6b0>)
 8001922:	2101      	movs	r1, #1
 8001924:	2002      	movs	r0, #2
 8001926:	f006 fa43 	bl	8007db0 <lcd_print>
 800192a:	e008      	b.n	800193e <menu+0x642>
			} else if(dilSecim == 1) {
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <menu+0x680>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d104      	bne.n	800193e <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <menu+0x6b4>)
 8001936:	2101      	movs	r1, #1
 8001938:	2002      	movs	r0, #2
 800193a:	f006 fa39 	bl	8007db0 <lcd_print>
			}
			lcd_print(2, 16, " ");
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <menu+0x6b8>)
 8001940:	2110      	movs	r1, #16
 8001942:	2002      	movs	r0, #2
 8001944:	f006 fa34 	bl	8007db0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <menu+0x6bc>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	220a      	movs	r2, #10
 800194e:	490f      	ldr	r1, [pc, #60]	; (800198c <menu+0x690>)
 8001950:	4618      	mov	r0, r3
 8001952:	f00a fd7f 	bl	800c454 <itoa>
			lcd_print(2, 15, snum);
 8001956:	4a0d      	ldr	r2, [pc, #52]	; (800198c <menu+0x690>)
 8001958:	210f      	movs	r1, #15
 800195a:	2002      	movs	r0, #2
 800195c:	f006 fa28 	bl	8007db0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <menu+0x694>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b0a      	cmp	r3, #10
 8001966:	d134      	bne.n	80019d2 <menu+0x6d6>
			if(dilSecim == 0) {
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <menu+0x680>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d127      	bne.n	80019c0 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <menu+0x6c0>)
 8001972:	2101      	movs	r1, #1
 8001974:	2002      	movs	r0, #2
 8001976:	f006 fa1b 	bl	8007db0 <lcd_print>
 800197a:	e02a      	b.n	80019d2 <menu+0x6d6>
 800197c:	20000255 	.word	0x20000255
 8001980:	0800d27c 	.word	0x0800d27c
 8001984:	0800d1e8 	.word	0x0800d1e8
 8001988:	2000025c 	.word	0x2000025c
 800198c:	20000188 	.word	0x20000188
 8001990:	20000236 	.word	0x20000236
 8001994:	0800d28c 	.word	0x0800d28c
 8001998:	0800d29c 	.word	0x0800d29c
 800199c:	2000025d 	.word	0x2000025d
 80019a0:	0800d2ac 	.word	0x0800d2ac
 80019a4:	0800d2bc 	.word	0x0800d2bc
 80019a8:	2000025e 	.word	0x2000025e
 80019ac:	0800d2cc 	.word	0x0800d2cc
 80019b0:	0800d2dc 	.word	0x0800d2dc
 80019b4:	0800d2ec 	.word	0x0800d2ec
 80019b8:	2000025f 	.word	0x2000025f
 80019bc:	0800d2f0 	.word	0x0800d2f0
			} else if(dilSecim == 1) {
 80019c0:	4b82      	ldr	r3, [pc, #520]	; (8001bcc <menu+0x8d0>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d104      	bne.n	80019d2 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80019c8:	4a81      	ldr	r2, [pc, #516]	; (8001bd0 <menu+0x8d4>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	2002      	movs	r0, #2
 80019ce:	f006 f9ef 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019d2:	2102      	movs	r1, #2
 80019d4:	487f      	ldr	r0, [pc, #508]	; (8001bd4 <menu+0x8d8>)
 80019d6:	f007 fd11 	bl	80093fc <HAL_GPIO_ReadPin>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d119      	bne.n	8001a14 <menu+0x718>
 80019e0:	4b7d      	ldr	r3, [pc, #500]	; (8001bd8 <menu+0x8dc>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d012      	beq.n	8001a14 <menu+0x718>
 80019ee:	4b7b      	ldr	r3, [pc, #492]	; (8001bdc <menu+0x8e0>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10e      	bne.n	8001a14 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80019f6:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <menu+0x8e4>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b78      	ldr	r3, [pc, #480]	; (8001be0 <menu+0x8e4>)
 8001a00:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a02:	4b77      	ldr	r3, [pc, #476]	; (8001be0 <menu+0x8e4>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0a      	cmp	r3, #10
 8001a08:	d902      	bls.n	8001a10 <menu+0x714>
				hataGostermeSirasi = 0;
 8001a0a:	4b75      	ldr	r3, [pc, #468]	; (8001be0 <menu+0x8e4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a10:	f003 f90c 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a14:	2104      	movs	r1, #4
 8001a16:	486f      	ldr	r0, [pc, #444]	; (8001bd4 <menu+0x8d8>)
 8001a18:	f007 fcf0 	bl	80093fc <HAL_GPIO_ReadPin>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d119      	bne.n	8001a56 <menu+0x75a>
 8001a22:	4b6d      	ldr	r3, [pc, #436]	; (8001bd8 <menu+0x8dc>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f083 0301 	eor.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d012      	beq.n	8001a56 <menu+0x75a>
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <menu+0x8e0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10e      	bne.n	8001a56 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a38:	4b69      	ldr	r3, [pc, #420]	; (8001be0 <menu+0x8e4>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <menu+0x8e4>)
 8001a42:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a44:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <menu+0x8e4>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b0b      	cmp	r3, #11
 8001a4a:	d902      	bls.n	8001a52 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001a4c:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <menu+0x8e4>)
 8001a4e:	220a      	movs	r2, #10
 8001a50:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a52:	f003 f8eb 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a56:	2108      	movs	r1, #8
 8001a58:	485e      	ldr	r0, [pc, #376]	; (8001bd4 <menu+0x8d8>)
 8001a5a:	f007 fccf 	bl	80093fc <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d153      	bne.n	8001b0c <menu+0x810>
 8001a64:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <menu+0x8dc>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d04c      	beq.n	8001b0c <menu+0x810>
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <menu+0x8e4>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d148      	bne.n	8001b0c <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	; (8001be4 <menu+0x8e8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <menu+0x8ec>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a88:	4b58      	ldr	r3, [pc, #352]	; (8001bec <menu+0x8f0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <menu+0x8ec>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <menu+0x8f4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <menu+0x8ec>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <menu+0x8f8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <menu+0x8ec>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001ab2:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <menu+0x8fc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <menu+0x8ec>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001ac0:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <menu+0x900>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <menu+0x8ec>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001ace:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <menu+0x904>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <menu+0x8ec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001adc:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <menu+0x908>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <menu+0x8ec>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <menu+0x90c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <menu+0x8ec>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <menu+0x910>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <menu+0x8ec>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <menu+0x914>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001b0c:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <menu+0x918>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	f040 80fc 	bne.w	8001d0e <menu+0xa12>
		if(dilSecim == 0) {
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <menu+0x8d0>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b1e:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <menu+0x91c>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	2001      	movs	r0, #1
 8001b24:	f006 f944 	bl	8007db0 <lcd_print>
 8001b28:	e008      	b.n	8001b3c <menu+0x840>
		} else if(dilSecim == 1) {
 8001b2a:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <menu+0x8d0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d104      	bne.n	8001b3c <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001b32:	4a3a      	ldr	r2, [pc, #232]	; (8001c1c <menu+0x920>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	2001      	movs	r0, #1
 8001b38:	f006 f93a 	bl	8007db0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <menu+0x8e0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d003      	beq.n	8001b4c <menu+0x850>
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <menu+0x8e0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d112      	bne.n	8001b72 <menu+0x876>
			if(dilSecim == 0) {
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <menu+0x8d0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001b54:	4a32      	ldr	r2, [pc, #200]	; (8001c20 <menu+0x924>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f006 f929 	bl	8007db0 <lcd_print>
 8001b5e:	e008      	b.n	8001b72 <menu+0x876>
			} else if(dilSecim == 1) {
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <menu+0x8d0>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d104      	bne.n	8001b72 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b68:	4a2e      	ldr	r2, [pc, #184]	; (8001c24 <menu+0x928>)
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f006 f91f 	bl	8007db0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <menu+0x92c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d116      	bne.n	8001ba8 <menu+0x8ac>
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <menu+0x8e0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d112      	bne.n	8001ba8 <menu+0x8ac>
			if(dilSecim == 0) {
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <menu+0x8d0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001b8a:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <menu+0x930>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f006 f90e 	bl	8007db0 <lcd_print>
 8001b94:	e008      	b.n	8001ba8 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <menu+0x8d0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d104      	bne.n	8001ba8 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001b9e:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <menu+0x934>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f006 f904 	bl	8007db0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <menu+0x92c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d14c      	bne.n	8001c4a <menu+0x94e>
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <menu+0x8e0>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d148      	bne.n	8001c4a <menu+0x94e>
			if(dilSecim == 0) {
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <menu+0x8d0>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d13b      	bne.n	8001c38 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <menu+0x938>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f006 f8f3 	bl	8007db0 <lcd_print>
 8001bca:	e03e      	b.n	8001c4a <menu+0x94e>
 8001bcc:	20000255 	.word	0x20000255
 8001bd0:	0800d304 	.word	0x0800d304
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	20000263 	.word	0x20000263
 8001bdc:	20000243 	.word	0x20000243
 8001be0:	20000236 	.word	0x20000236
 8001be4:	20000256 	.word	0x20000256
 8001be8:	20000118 	.word	0x20000118
 8001bec:	20000257 	.word	0x20000257
 8001bf0:	20000258 	.word	0x20000258
 8001bf4:	20000259 	.word	0x20000259
 8001bf8:	2000025a 	.word	0x2000025a
 8001bfc:	2000025b 	.word	0x2000025b
 8001c00:	2000025c 	.word	0x2000025c
 8001c04:	2000025d 	.word	0x2000025d
 8001c08:	2000025e 	.word	0x2000025e
 8001c0c:	2000025f 	.word	0x2000025f
 8001c10:	20000260 	.word	0x20000260
 8001c14:	20000234 	.word	0x20000234
 8001c18:	0800d318 	.word	0x0800d318
 8001c1c:	0800d32c 	.word	0x0800d32c
 8001c20:	0800d340 	.word	0x0800d340
 8001c24:	0800d354 	.word	0x0800d354
 8001c28:	20000235 	.word	0x20000235
 8001c2c:	0800d368 	.word	0x0800d368
 8001c30:	0800d378 	.word	0x0800d378
 8001c34:	0800d388 	.word	0x0800d388
			} else if(dilSecim == 1) {
 8001c38:	4b98      	ldr	r3, [pc, #608]	; (8001e9c <menu+0xba0>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d104      	bne.n	8001c4a <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001c40:	4a97      	ldr	r2, [pc, #604]	; (8001ea0 <menu+0xba4>)
 8001c42:	2101      	movs	r1, #1
 8001c44:	2002      	movs	r0, #2
 8001c46:	f006 f8b3 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4895      	ldr	r0, [pc, #596]	; (8001ea4 <menu+0xba8>)
 8001c4e:	f007 fbd5 	bl	80093fc <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d119      	bne.n	8001c8c <menu+0x990>
 8001c58:	4b93      	ldr	r3, [pc, #588]	; (8001ea8 <menu+0xbac>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f083 0301 	eor.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <menu+0x990>
 8001c66:	4b91      	ldr	r3, [pc, #580]	; (8001eac <menu+0xbb0>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10e      	bne.n	8001c8c <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001c6e:	4b90      	ldr	r3, [pc, #576]	; (8001eb0 <menu+0xbb4>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b8e      	ldr	r3, [pc, #568]	; (8001eb0 <menu+0xbb4>)
 8001c78:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c7a:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <menu+0xbb4>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d902      	bls.n	8001c88 <menu+0x98c>
				calismaSekli = 0;
 8001c82:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <menu+0xbb4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c88:	f002 ffd0 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	4885      	ldr	r0, [pc, #532]	; (8001ea4 <menu+0xba8>)
 8001c90:	f007 fbb4 	bl	80093fc <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d119      	bne.n	8001cce <menu+0x9d2>
 8001c9a:	4b83      	ldr	r3, [pc, #524]	; (8001ea8 <menu+0xbac>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <menu+0x9d2>
 8001ca8:	4b80      	ldr	r3, [pc, #512]	; (8001eac <menu+0xbb0>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10e      	bne.n	8001cce <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001cb0:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <menu+0xbb4>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <menu+0xbb4>)
 8001cba:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001cbc:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <menu+0xbb4>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <menu+0x9ce>
	    		calismaSekli = 1;
 8001cc4:	4b7a      	ldr	r3, [pc, #488]	; (8001eb0 <menu+0xbb4>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cca:	f002 ffaf 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cce:	2108      	movs	r1, #8
 8001cd0:	4874      	ldr	r0, [pc, #464]	; (8001ea4 <menu+0xba8>)
 8001cd2:	f007 fb93 	bl	80093fc <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d118      	bne.n	8001d0e <menu+0xa12>
 8001cdc:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <menu+0xbac>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d011      	beq.n	8001d0e <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001cea:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <menu+0xbb4>)
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	4b71      	ldr	r3, [pc, #452]	; (8001eb4 <menu+0xbb8>)
 8001cf0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <menu+0xbb4>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d106      	bne.n	8001d08 <menu+0xa0c>
				altLimit = 1;
 8001cfa:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <menu+0xbbc>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d00:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <menu+0xbbc>)
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <menu+0xbb8>)
 8001d06:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d08:	4b6c      	ldr	r3, [pc, #432]	; (8001ebc <menu+0xbc0>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d0e:	4b6c      	ldr	r3, [pc, #432]	; (8001ec0 <menu+0xbc4>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	f040 8083 	bne.w	8001e1e <menu+0xb22>
		if(dilSecim == 0) {
 8001d18:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <menu+0xba0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d20:	4a68      	ldr	r2, [pc, #416]	; (8001ec4 <menu+0xbc8>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	2001      	movs	r0, #1
 8001d26:	f006 f843 	bl	8007db0 <lcd_print>
 8001d2a:	e008      	b.n	8001d3e <menu+0xa42>
		} else if(dilSecim == 1) {
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <menu+0xba0>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d104      	bne.n	8001d3e <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001d34:	4a64      	ldr	r2, [pc, #400]	; (8001ec8 <menu+0xbcc>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f006 f839 	bl	8007db0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <menu+0xbd0>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d113      	bne.n	8001d6e <menu+0xa72>
			if(dilSecim == 0) {
 8001d46:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <menu+0xba0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001d4e:	4a60      	ldr	r2, [pc, #384]	; (8001ed0 <menu+0xbd4>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	2002      	movs	r0, #2
 8001d54:	f006 f82c 	bl	8007db0 <lcd_print>
 8001d58:	e012      	b.n	8001d80 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001d5a:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <menu+0xba0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10e      	bne.n	8001d80 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001d62:	4a5c      	ldr	r2, [pc, #368]	; (8001ed4 <menu+0xbd8>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	2002      	movs	r0, #2
 8001d68:	f006 f822 	bl	8007db0 <lcd_print>
 8001d6c:	e008      	b.n	8001d80 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001d6e:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <menu+0xbd0>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d104      	bne.n	8001d80 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d76:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <menu+0xbdc>)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	f006 f818 	bl	8007db0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d80:	2102      	movs	r1, #2
 8001d82:	4848      	ldr	r0, [pc, #288]	; (8001ea4 <menu+0xba8>)
 8001d84:	f007 fb3a 	bl	80093fc <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d115      	bne.n	8001dba <menu+0xabe>
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <menu+0xbac>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f083 0301 	eor.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <menu+0xbd0>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <menu+0xbd0>)
 8001da6:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001da8:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <menu+0xbd0>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d902      	bls.n	8001db6 <menu+0xaba>
				emniyetCercevesi = 0;
 8001db0:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <menu+0xbd0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001db6:	f002 ff39 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dba:	2104      	movs	r1, #4
 8001dbc:	4839      	ldr	r0, [pc, #228]	; (8001ea4 <menu+0xba8>)
 8001dbe:	f007 fb1d 	bl	80093fc <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d115      	bne.n	8001df4 <menu+0xaf8>
 8001dc8:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <menu+0xbac>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f083 0301 	eor.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00e      	beq.n	8001df4 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <menu+0xbd0>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <menu+0xbd0>)
 8001de0:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <menu+0xbd0>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001dea:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <menu+0xbd0>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001df0:	f002 ff1c 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001df4:	2108      	movs	r1, #8
 8001df6:	482b      	ldr	r0, [pc, #172]	; (8001ea4 <menu+0xba8>)
 8001df8:	f007 fb00 	bl	80093fc <HAL_GPIO_ReadPin>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10d      	bne.n	8001e1e <menu+0xb22>
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <menu+0xbac>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	f083 0301 	eor.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <menu+0xbd0>)
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <menu+0xbb8>)
 8001e16:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <menu+0xbc0>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <menu+0xbc4>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	f040 80ba 	bne.w	8001f9c <menu+0xca0>
		if(dilSecim == 0) {
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <menu+0xba0>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001e30:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <menu+0xbe0>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	2001      	movs	r0, #1
 8001e36:	f005 ffbb 	bl	8007db0 <lcd_print>
 8001e3a:	e008      	b.n	8001e4e <menu+0xb52>
		} else if(dilSecim == 1) {
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <menu+0xba0>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d104      	bne.n	8001e4e <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001e44:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <menu+0xbe4>)
 8001e46:	2101      	movs	r1, #1
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f005 ffb1 	bl	8007db0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <menu+0xbe8>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d113      	bne.n	8001e7e <menu+0xb82>
			if(dilSecim == 0) {
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <menu+0xba0>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d105      	bne.n	8001e6a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <menu+0xbd4>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	2002      	movs	r0, #2
 8001e64:	f005 ffa4 	bl	8007db0 <lcd_print>
 8001e68:	e049      	b.n	8001efe <menu+0xc02>
			} else if(dilSecim == 1) {
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <menu+0xba0>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d145      	bne.n	8001efe <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <menu+0xbd8>)
 8001e74:	2101      	movs	r1, #1
 8001e76:	2002      	movs	r0, #2
 8001e78:	f005 ff9a 	bl	8007db0 <lcd_print>
 8001e7c:	e03f      	b.n	8001efe <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <menu+0xbe8>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d13b      	bne.n	8001efe <menu+0xc02>
			if(dilSecim == 0) {
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <menu+0xba0>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d12e      	bne.n	8001eec <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001e8e:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <menu+0xbec>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	2002      	movs	r0, #2
 8001e94:	f005 ff8c 	bl	8007db0 <lcd_print>
 8001e98:	e031      	b.n	8001efe <menu+0xc02>
 8001e9a:	bf00      	nop
 8001e9c:	20000255 	.word	0x20000255
 8001ea0:	0800d398 	.word	0x0800d398
 8001ea4:	40010800 	.word	0x40010800
 8001ea8:	20000263 	.word	0x20000263
 8001eac:	20000243 	.word	0x20000243
 8001eb0:	20000235 	.word	0x20000235
 8001eb4:	20000118 	.word	0x20000118
 8001eb8:	2000023a 	.word	0x2000023a
 8001ebc:	20000260 	.word	0x20000260
 8001ec0:	20000234 	.word	0x20000234
 8001ec4:	0800d3a8 	.word	0x0800d3a8
 8001ec8:	0800d3bc 	.word	0x0800d3bc
 8001ecc:	20000238 	.word	0x20000238
 8001ed0:	0800d3d0 	.word	0x0800d3d0
 8001ed4:	0800d3e4 	.word	0x0800d3e4
 8001ed8:	0800d3f8 	.word	0x0800d3f8
 8001edc:	0800d408 	.word	0x0800d408
 8001ee0:	0800d41c 	.word	0x0800d41c
 8001ee4:	20000239 	.word	0x20000239
 8001ee8:	0800d430 	.word	0x0800d430
			} else if(dilSecim == 1) {
 8001eec:	4b92      	ldr	r3, [pc, #584]	; (8002138 <menu+0xe3c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d104      	bne.n	8001efe <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001ef4:	4a91      	ldr	r2, [pc, #580]	; (800213c <menu+0xe40>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f005 ff59 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001efe:	2102      	movs	r1, #2
 8001f00:	488f      	ldr	r0, [pc, #572]	; (8002140 <menu+0xe44>)
 8001f02:	f007 fa7b 	bl	80093fc <HAL_GPIO_ReadPin>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d115      	bne.n	8001f38 <menu+0xc3c>
 8001f0c:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <menu+0xe48>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00e      	beq.n	8001f38 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	; (8002148 <menu+0xe4c>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b89      	ldr	r3, [pc, #548]	; (8002148 <menu+0xe4c>)
 8001f24:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <menu+0xe4c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d902      	bls.n	8001f34 <menu+0xc38>
				yavaslamaLimit = 0;
 8001f2e:	4b86      	ldr	r3, [pc, #536]	; (8002148 <menu+0xe4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f34:	f002 fe7a 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f38:	2104      	movs	r1, #4
 8001f3a:	4881      	ldr	r0, [pc, #516]	; (8002140 <menu+0xe44>)
 8001f3c:	f007 fa5e 	bl	80093fc <HAL_GPIO_ReadPin>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d115      	bne.n	8001f72 <menu+0xc76>
 8001f46:	4b7f      	ldr	r3, [pc, #508]	; (8002144 <menu+0xe48>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f083 0301 	eor.w	r3, r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00e      	beq.n	8001f72 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f54:	4b7c      	ldr	r3, [pc, #496]	; (8002148 <menu+0xe4c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <menu+0xe4c>)
 8001f5e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f60:	4b79      	ldr	r3, [pc, #484]	; (8002148 <menu+0xe4c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001f68:	4b77      	ldr	r3, [pc, #476]	; (8002148 <menu+0xe4c>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f6e:	f002 fe5d 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f72:	2108      	movs	r1, #8
 8001f74:	4872      	ldr	r0, [pc, #456]	; (8002140 <menu+0xe44>)
 8001f76:	f007 fa41 	bl	80093fc <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d10d      	bne.n	8001f9c <menu+0xca0>
 8001f80:	4b70      	ldr	r3, [pc, #448]	; (8002144 <menu+0xe48>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001f8e:	4b6e      	ldr	r3, [pc, #440]	; (8002148 <menu+0xe4c>)
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	4b6e      	ldr	r3, [pc, #440]	; (800214c <menu+0xe50>)
 8001f94:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f96:	4b6e      	ldr	r3, [pc, #440]	; (8002150 <menu+0xe54>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f9c:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <menu+0xe58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	f040 80b9 	bne.w	8002118 <menu+0xe1c>
		if(dilSecim == 0) {
 8001fa6:	4b64      	ldr	r3, [pc, #400]	; (8002138 <menu+0xe3c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d105      	bne.n	8001fba <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001fae:	4a6a      	ldr	r2, [pc, #424]	; (8002158 <menu+0xe5c>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f005 fefc 	bl	8007db0 <lcd_print>
 8001fb8:	e008      	b.n	8001fcc <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <menu+0xe3c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d104      	bne.n	8001fcc <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001fc2:	4a66      	ldr	r2, [pc, #408]	; (800215c <menu+0xe60>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f005 fef2 	bl	8007db0 <lcd_print>
		}

		if(altLimit == 0) {
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <menu+0xe64>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d113      	bne.n	8001ffc <menu+0xd00>
			if(dilSecim == 0) {
 8001fd4:	4b58      	ldr	r3, [pc, #352]	; (8002138 <menu+0xe3c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001fdc:	4a61      	ldr	r2, [pc, #388]	; (8002164 <menu+0xe68>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	f005 fee5 	bl	8007db0 <lcd_print>
 8001fe6:	e020      	b.n	800202a <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <menu+0xe3c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d11c      	bne.n	800202a <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001ff0:	4a5d      	ldr	r2, [pc, #372]	; (8002168 <menu+0xe6c>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f005 fedb 	bl	8007db0 <lcd_print>
 8001ffa:	e016      	b.n	800202a <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001ffc:	4b58      	ldr	r3, [pc, #352]	; (8002160 <menu+0xe64>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d112      	bne.n	800202a <menu+0xd2e>
			if(dilSecim == 0){
 8002004:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <menu+0xe3c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 800200c:	4a57      	ldr	r2, [pc, #348]	; (800216c <menu+0xe70>)
 800200e:	2101      	movs	r1, #1
 8002010:	2002      	movs	r0, #2
 8002012:	f005 fecd 	bl	8007db0 <lcd_print>
 8002016:	e008      	b.n	800202a <menu+0xd2e>
			} else if(dilSecim == 1){
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <menu+0xe3c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d104      	bne.n	800202a <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002020:	4a46      	ldr	r2, [pc, #280]	; (800213c <menu+0xe40>)
 8002022:	2101      	movs	r1, #1
 8002024:	2002      	movs	r0, #2
 8002026:	f005 fec3 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800202a:	2102      	movs	r1, #2
 800202c:	4844      	ldr	r0, [pc, #272]	; (8002140 <menu+0xe44>)
 800202e:	f007 f9e5 	bl	80093fc <HAL_GPIO_ReadPin>
 8002032:	4603      	mov	r3, r0
 8002034:	2b01      	cmp	r3, #1
 8002036:	d119      	bne.n	800206c <menu+0xd70>
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <menu+0xe48>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f083 0301 	eor.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d012      	beq.n	800206c <menu+0xd70>
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <menu+0xe74>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10e      	bne.n	800206c <menu+0xd70>
			altLimit = altLimit + 1;
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <menu+0xe64>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b42      	ldr	r3, [pc, #264]	; (8002160 <menu+0xe64>)
 8002058:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <menu+0xe64>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d902      	bls.n	8002068 <menu+0xd6c>
				altLimit = 0;
 8002062:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <menu+0xe64>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002068:	f002 fde0 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800206c:	2104      	movs	r1, #4
 800206e:	4834      	ldr	r0, [pc, #208]	; (8002140 <menu+0xe44>)
 8002070:	f007 f9c4 	bl	80093fc <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d119      	bne.n	80020ae <menu+0xdb2>
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <menu+0xe48>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f083 0301 	eor.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d012      	beq.n	80020ae <menu+0xdb2>
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <menu+0xe74>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10e      	bne.n	80020ae <menu+0xdb2>
			altLimit = altLimit - 1;
 8002090:	4b33      	ldr	r3, [pc, #204]	; (8002160 <menu+0xe64>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	3b01      	subs	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b31      	ldr	r3, [pc, #196]	; (8002160 <menu+0xe64>)
 800209a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800209c:	4b30      	ldr	r3, [pc, #192]	; (8002160 <menu+0xe64>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <menu+0xdae>
		   		altLimit = 1;
 80020a4:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <menu+0xe64>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020aa:	f002 fdbf 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ae:	2108      	movs	r1, #8
 80020b0:	4823      	ldr	r0, [pc, #140]	; (8002140 <menu+0xe44>)
 80020b2:	f007 f9a3 	bl	80093fc <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d12d      	bne.n	8002118 <menu+0xe1c>
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <menu+0xe48>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	f083 0301 	eor.w	r3, r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d026      	beq.n	8002118 <menu+0xe1c>
			eepromData[5] = altLimit;
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <menu+0xe64>)
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <menu+0xe50>)
 80020d0:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80020d2:	4b23      	ldr	r3, [pc, #140]	; (8002160 <menu+0xe64>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d110      	bne.n	80020fc <menu+0xe00>
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <menu+0xe78>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <menu+0xdee>
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <menu+0xe78>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d108      	bne.n	80020fc <menu+0xe00>
				kapiTablaAcKonum = 3;
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <menu+0xe78>)
 80020ec:	2203      	movs	r2, #3
 80020ee:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <menu+0xe78>)
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <menu+0xe50>)
 80020f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80020fa:	e00a      	b.n	8002112 <menu+0xe16>
			} else if(altLimit == 0) {
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <menu+0xe64>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d106      	bne.n	8002112 <menu+0xe16>
				platformSilindirTipi = 0;
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <menu+0xe7c>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <menu+0xe7c>)
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <menu+0xe50>)
 8002110:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <menu+0xe54>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <menu+0xe58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b06      	cmp	r3, #6
 800211e:	f040 80b6 	bne.w	800228e <menu+0xf92>
		if(dilSecim == 0) {
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <menu+0xe3c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d12a      	bne.n	8002180 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <menu+0xe80>)
 800212c:	2101      	movs	r1, #1
 800212e:	2001      	movs	r0, #1
 8002130:	f005 fe3e 	bl	8007db0 <lcd_print>
 8002134:	e02d      	b.n	8002192 <menu+0xe96>
 8002136:	bf00      	nop
 8002138:	20000255 	.word	0x20000255
 800213c:	0800d444 	.word	0x0800d444
 8002140:	40010800 	.word	0x40010800
 8002144:	20000263 	.word	0x20000263
 8002148:	20000239 	.word	0x20000239
 800214c:	20000118 	.word	0x20000118
 8002150:	20000260 	.word	0x20000260
 8002154:	20000234 	.word	0x20000234
 8002158:	0800d458 	.word	0x0800d458
 800215c:	0800d46c 	.word	0x0800d46c
 8002160:	2000023a 	.word	0x2000023a
 8002164:	0800d3d0 	.word	0x0800d3d0
 8002168:	0800d3e4 	.word	0x0800d3e4
 800216c:	0800d430 	.word	0x0800d430
 8002170:	20000235 	.word	0x20000235
 8002174:	20000241 	.word	0x20000241
 8002178:	20000247 	.word	0x20000247
 800217c:	0800d480 	.word	0x0800d480
		} else if(dilSecim == 1){
 8002180:	4b7a      	ldr	r3, [pc, #488]	; (800236c <menu+0x1070>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d104      	bne.n	8002192 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002188:	4a79      	ldr	r2, [pc, #484]	; (8002370 <menu+0x1074>)
 800218a:	2101      	movs	r1, #1
 800218c:	2001      	movs	r0, #1
 800218e:	f005 fe0f 	bl	8007db0 <lcd_print>
		}
		if(basincSalteri == 0){
 8002192:	4b78      	ldr	r3, [pc, #480]	; (8002374 <menu+0x1078>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d113      	bne.n	80021c2 <menu+0xec6>
			if(dilSecim == 0) {
 800219a:	4b74      	ldr	r3, [pc, #464]	; (800236c <menu+0x1070>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80021a2:	4a75      	ldr	r2, [pc, #468]	; (8002378 <menu+0x107c>)
 80021a4:	2101      	movs	r1, #1
 80021a6:	2002      	movs	r0, #2
 80021a8:	f005 fe02 	bl	8007db0 <lcd_print>
 80021ac:	e020      	b.n	80021f0 <menu+0xef4>
			} else if(dilSecim == 1){
 80021ae:	4b6f      	ldr	r3, [pc, #444]	; (800236c <menu+0x1070>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d11c      	bne.n	80021f0 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80021b6:	4a71      	ldr	r2, [pc, #452]	; (800237c <menu+0x1080>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	2002      	movs	r0, #2
 80021bc:	f005 fdf8 	bl	8007db0 <lcd_print>
 80021c0:	e016      	b.n	80021f0 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80021c2:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <menu+0x1078>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d112      	bne.n	80021f0 <menu+0xef4>
			if(dilSecim == 0) {
 80021ca:	4b68      	ldr	r3, [pc, #416]	; (800236c <menu+0x1070>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80021d2:	4a6b      	ldr	r2, [pc, #428]	; (8002380 <menu+0x1084>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	2002      	movs	r0, #2
 80021d8:	f005 fdea 	bl	8007db0 <lcd_print>
 80021dc:	e008      	b.n	80021f0 <menu+0xef4>
			} else if(dilSecim == 1) {
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <menu+0x1070>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d104      	bne.n	80021f0 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80021e6:	4a67      	ldr	r2, [pc, #412]	; (8002384 <menu+0x1088>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	2002      	movs	r0, #2
 80021ec:	f005 fde0 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021f0:	2102      	movs	r1, #2
 80021f2:	4865      	ldr	r0, [pc, #404]	; (8002388 <menu+0x108c>)
 80021f4:	f007 f902 	bl	80093fc <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d115      	bne.n	800222a <menu+0xf2e>
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <menu+0x1090>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00e      	beq.n	800222a <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <menu+0x1078>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b57      	ldr	r3, [pc, #348]	; (8002374 <menu+0x1078>)
 8002216:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002218:	4b56      	ldr	r3, [pc, #344]	; (8002374 <menu+0x1078>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d902      	bls.n	8002226 <menu+0xf2a>
				basincSalteri = 0;
 8002220:	4b54      	ldr	r3, [pc, #336]	; (8002374 <menu+0x1078>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002226:	f002 fd01 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800222a:	2104      	movs	r1, #4
 800222c:	4856      	ldr	r0, [pc, #344]	; (8002388 <menu+0x108c>)
 800222e:	f007 f8e5 	bl	80093fc <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	d115      	bne.n	8002264 <menu+0xf68>
 8002238:	4b54      	ldr	r3, [pc, #336]	; (800238c <menu+0x1090>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00e      	beq.n	8002264 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002246:	4b4b      	ldr	r3, [pc, #300]	; (8002374 <menu+0x1078>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3b01      	subs	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b49      	ldr	r3, [pc, #292]	; (8002374 <menu+0x1078>)
 8002250:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002252:	4b48      	ldr	r3, [pc, #288]	; (8002374 <menu+0x1078>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <menu+0xf64>
		   		basincSalteri = 1;
 800225a:	4b46      	ldr	r3, [pc, #280]	; (8002374 <menu+0x1078>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002260:	f002 fce4 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002264:	2108      	movs	r1, #8
 8002266:	4848      	ldr	r0, [pc, #288]	; (8002388 <menu+0x108c>)
 8002268:	f007 f8c8 	bl	80093fc <HAL_GPIO_ReadPin>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10d      	bne.n	800228e <menu+0xf92>
 8002272:	4b46      	ldr	r3, [pc, #280]	; (800238c <menu+0x1090>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002280:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <menu+0x1078>)
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	4b42      	ldr	r3, [pc, #264]	; (8002390 <menu+0x1094>)
 8002286:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002288:	4b42      	ldr	r3, [pc, #264]	; (8002394 <menu+0x1098>)
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <menu+0x109c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b07      	cmp	r3, #7
 8002294:	f040 80f5 	bne.w	8002482 <menu+0x1186>
		if(dilSecim == 0) {
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <menu+0x1070>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80022a0:	4a3e      	ldr	r2, [pc, #248]	; (800239c <menu+0x10a0>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	2001      	movs	r0, #1
 80022a6:	f005 fd83 	bl	8007db0 <lcd_print>
 80022aa:	e008      	b.n	80022be <menu+0xfc2>
		} else if(dilSecim == 1){
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <menu+0x1070>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d104      	bne.n	80022be <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80022b4:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <menu+0x10a4>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	2001      	movs	r0, #1
 80022ba:	f005 fd79 	bl	8007db0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80022be:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <menu+0x10a8>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d113      	bne.n	80022ee <menu+0xff2>
			if(dilSecim == 0) {
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <menu+0x1070>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80022ce:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <menu+0x107c>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	2002      	movs	r0, #2
 80022d4:	f005 fd6c 	bl	8007db0 <lcd_print>
 80022d8:	e079      	b.n	80023ce <menu+0x10d2>
			} else if(dilSecim == 1){
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <menu+0x1070>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d175      	bne.n	80023ce <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80022e2:	4a26      	ldr	r2, [pc, #152]	; (800237c <menu+0x1080>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	2002      	movs	r0, #2
 80022e8:	f005 fd62 	bl	8007db0 <lcd_print>
 80022ec:	e06f      	b.n	80023ce <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80022ee:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <menu+0x10a8>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d113      	bne.n	800231e <menu+0x1022>
			if(dilSecim == 0) {
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <menu+0x1070>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80022fe:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <menu+0x10ac>)
 8002300:	2101      	movs	r1, #1
 8002302:	2002      	movs	r0, #2
 8002304:	f005 fd54 	bl	8007db0 <lcd_print>
 8002308:	e061      	b.n	80023ce <menu+0x10d2>
			} else if(dilSecim == 1) {
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <menu+0x1070>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d15d      	bne.n	80023ce <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002312:	4a26      	ldr	r2, [pc, #152]	; (80023ac <menu+0x10b0>)
 8002314:	2101      	movs	r1, #1
 8002316:	2002      	movs	r0, #2
 8002318:	f005 fd4a 	bl	8007db0 <lcd_print>
 800231c:	e057      	b.n	80023ce <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <menu+0x10a8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d113      	bne.n	800234e <menu+0x1052>
			if(dilSecim == 0) {
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <menu+0x1070>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800232e:	4a20      	ldr	r2, [pc, #128]	; (80023b0 <menu+0x10b4>)
 8002330:	2101      	movs	r1, #1
 8002332:	2002      	movs	r0, #2
 8002334:	f005 fd3c 	bl	8007db0 <lcd_print>
 8002338:	e049      	b.n	80023ce <menu+0x10d2>
			} else if(dilSecim == 1) {
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <menu+0x1070>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d145      	bne.n	80023ce <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002342:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <menu+0x10b8>)
 8002344:	2101      	movs	r1, #1
 8002346:	2002      	movs	r0, #2
 8002348:	f005 fd32 	bl	8007db0 <lcd_print>
 800234c:	e03f      	b.n	80023ce <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <menu+0x10a8>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d13b      	bne.n	80023ce <menu+0x10d2>
			if(dilSecim == 0) {
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <menu+0x1070>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d12e      	bne.n	80023bc <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <menu+0x10bc>)
 8002360:	2101      	movs	r1, #1
 8002362:	2002      	movs	r0, #2
 8002364:	f005 fd24 	bl	8007db0 <lcd_print>
 8002368:	e031      	b.n	80023ce <menu+0x10d2>
 800236a:	bf00      	nop
 800236c:	20000255 	.word	0x20000255
 8002370:	0800d490 	.word	0x0800d490
 8002374:	2000023b 	.word	0x2000023b
 8002378:	0800d3d0 	.word	0x0800d3d0
 800237c:	0800d3e4 	.word	0x0800d3e4
 8002380:	0800d430 	.word	0x0800d430
 8002384:	0800d444 	.word	0x0800d444
 8002388:	40010800 	.word	0x40010800
 800238c:	20000263 	.word	0x20000263
 8002390:	20000118 	.word	0x20000118
 8002394:	20000260 	.word	0x20000260
 8002398:	20000234 	.word	0x20000234
 800239c:	0800d4a0 	.word	0x0800d4a0
 80023a0:	0800d4b4 	.word	0x0800d4b4
 80023a4:	2000023c 	.word	0x2000023c
 80023a8:	0800d4c8 	.word	0x0800d4c8
 80023ac:	0800d4dc 	.word	0x0800d4dc
 80023b0:	0800d4f0 	.word	0x0800d4f0
 80023b4:	0800d504 	.word	0x0800d504
 80023b8:	0800d518 	.word	0x0800d518
			} else if(dilSecim == 1){
 80023bc:	4b99      	ldr	r3, [pc, #612]	; (8002624 <menu+0x1328>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d104      	bne.n	80023ce <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80023c4:	4a98      	ldr	r2, [pc, #608]	; (8002628 <menu+0x132c>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	2002      	movs	r0, #2
 80023ca:	f005 fcf1 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ce:	2102      	movs	r1, #2
 80023d0:	4896      	ldr	r0, [pc, #600]	; (800262c <menu+0x1330>)
 80023d2:	f007 f813 	bl	80093fc <HAL_GPIO_ReadPin>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d115      	bne.n	8002408 <menu+0x110c>
 80023dc:	4b94      	ldr	r3, [pc, #592]	; (8002630 <menu+0x1334>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80023ea:	4b92      	ldr	r3, [pc, #584]	; (8002634 <menu+0x1338>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b90      	ldr	r3, [pc, #576]	; (8002634 <menu+0x1338>)
 80023f4:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80023f6:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <menu+0x1338>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d902      	bls.n	8002404 <menu+0x1108>
				kapiSecimleri = 0;
 80023fe:	4b8d      	ldr	r3, [pc, #564]	; (8002634 <menu+0x1338>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002404:	f002 fc12 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002408:	2104      	movs	r1, #4
 800240a:	4888      	ldr	r0, [pc, #544]	; (800262c <menu+0x1330>)
 800240c:	f006 fff6 	bl	80093fc <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d115      	bne.n	8002442 <menu+0x1146>
 8002416:	4b86      	ldr	r3, [pc, #536]	; (8002630 <menu+0x1334>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002424:	4b83      	ldr	r3, [pc, #524]	; (8002634 <menu+0x1338>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b81      	ldr	r3, [pc, #516]	; (8002634 <menu+0x1338>)
 800242e:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002430:	4b80      	ldr	r3, [pc, #512]	; (8002634 <menu+0x1338>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d902      	bls.n	800243e <menu+0x1142>
		   		kapiSecimleri = 3;
 8002438:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <menu+0x1338>)
 800243a:	2203      	movs	r2, #3
 800243c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800243e:	f002 fbf5 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002442:	2108      	movs	r1, #8
 8002444:	4879      	ldr	r0, [pc, #484]	; (800262c <menu+0x1330>)
 8002446:	f006 ffd9 	bl	80093fc <HAL_GPIO_ReadPin>
 800244a:	4603      	mov	r3, r0
 800244c:	2b01      	cmp	r3, #1
 800244e:	d118      	bne.n	8002482 <menu+0x1186>
 8002450:	4b77      	ldr	r3, [pc, #476]	; (8002630 <menu+0x1334>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f083 0301 	eor.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d011      	beq.n	8002482 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800245e:	4b75      	ldr	r3, [pc, #468]	; (8002634 <menu+0x1338>)
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	4b75      	ldr	r3, [pc, #468]	; (8002638 <menu+0x133c>)
 8002464:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002466:	4b73      	ldr	r3, [pc, #460]	; (8002634 <menu+0x1338>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <menu+0x1180>
				altLimit = 1;
 800246e:	4b73      	ldr	r3, [pc, #460]	; (800263c <menu+0x1340>)
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002474:	4b71      	ldr	r3, [pc, #452]	; (800263c <menu+0x1340>)
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <menu+0x133c>)
 800247a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <menu+0x1344>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002482:	4b70      	ldr	r3, [pc, #448]	; (8002644 <menu+0x1348>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b08      	cmp	r3, #8
 8002488:	f040 8092 	bne.w	80025b0 <menu+0x12b4>
		if(dilSecim == 0) {
 800248c:	4b65      	ldr	r3, [pc, #404]	; (8002624 <menu+0x1328>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002494:	4a6c      	ldr	r2, [pc, #432]	; (8002648 <menu+0x134c>)
 8002496:	2101      	movs	r1, #1
 8002498:	2001      	movs	r0, #1
 800249a:	f005 fc89 	bl	8007db0 <lcd_print>
 800249e:	e008      	b.n	80024b2 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80024a0:	4b60      	ldr	r3, [pc, #384]	; (8002624 <menu+0x1328>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d104      	bne.n	80024b2 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80024a8:	4a68      	ldr	r2, [pc, #416]	; (800264c <menu+0x1350>)
 80024aa:	2101      	movs	r1, #1
 80024ac:	2001      	movs	r0, #1
 80024ae:	f005 fc7f 	bl	8007db0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <menu+0x1354>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d113      	bne.n	80024e2 <menu+0x11e6>
			if(dilSecim == 0) {
 80024ba:	4b5a      	ldr	r3, [pc, #360]	; (8002624 <menu+0x1328>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80024c2:	4a64      	ldr	r2, [pc, #400]	; (8002654 <menu+0x1358>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	2002      	movs	r0, #2
 80024c8:	f005 fc72 	bl	8007db0 <lcd_print>
 80024cc:	e020      	b.n	8002510 <menu+0x1214>
			} else if(dilSecim == 1) {
 80024ce:	4b55      	ldr	r3, [pc, #340]	; (8002624 <menu+0x1328>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d11c      	bne.n	8002510 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80024d6:	4a60      	ldr	r2, [pc, #384]	; (8002658 <menu+0x135c>)
 80024d8:	2101      	movs	r1, #1
 80024da:	2002      	movs	r0, #2
 80024dc:	f005 fc68 	bl	8007db0 <lcd_print>
 80024e0:	e016      	b.n	8002510 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80024e2:	4b5b      	ldr	r3, [pc, #364]	; (8002650 <menu+0x1354>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d112      	bne.n	8002510 <menu+0x1214>
			if(dilSecim == 0){
 80024ea:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <menu+0x1328>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80024f2:	4a5a      	ldr	r2, [pc, #360]	; (800265c <menu+0x1360>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	2002      	movs	r0, #2
 80024f8:	f005 fc5a 	bl	8007db0 <lcd_print>
 80024fc:	e008      	b.n	8002510 <menu+0x1214>
			} else if(dilSecim == 1){
 80024fe:	4b49      	ldr	r3, [pc, #292]	; (8002624 <menu+0x1328>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d104      	bne.n	8002510 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002506:	4a56      	ldr	r2, [pc, #344]	; (8002660 <menu+0x1364>)
 8002508:	2101      	movs	r1, #1
 800250a:	2002      	movs	r0, #2
 800250c:	f005 fc50 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002510:	2102      	movs	r1, #2
 8002512:	4846      	ldr	r0, [pc, #280]	; (800262c <menu+0x1330>)
 8002514:	f006 ff72 	bl	80093fc <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d115      	bne.n	800254a <menu+0x124e>
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <menu+0x1334>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00e      	beq.n	800254a <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 800252c:	4b48      	ldr	r3, [pc, #288]	; (8002650 <menu+0x1354>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <menu+0x1354>)
 8002536:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002538:	4b45      	ldr	r3, [pc, #276]	; (8002650 <menu+0x1354>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d902      	bls.n	8002546 <menu+0x124a>
				kapiAcTipi = 0;
 8002540:	4b43      	ldr	r3, [pc, #268]	; (8002650 <menu+0x1354>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002546:	f002 fb71 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800254a:	2104      	movs	r1, #4
 800254c:	4837      	ldr	r0, [pc, #220]	; (800262c <menu+0x1330>)
 800254e:	f006 ff55 	bl	80093fc <HAL_GPIO_ReadPin>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d115      	bne.n	8002584 <menu+0x1288>
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <menu+0x1334>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00e      	beq.n	8002584 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002566:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <menu+0x1354>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	3b01      	subs	r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <menu+0x1354>)
 8002570:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <menu+0x1354>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <menu+0x1284>
		   		kapiAcTipi = 1;
 800257a:	4b35      	ldr	r3, [pc, #212]	; (8002650 <menu+0x1354>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002580:	f002 fb54 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002584:	2108      	movs	r1, #8
 8002586:	4829      	ldr	r0, [pc, #164]	; (800262c <menu+0x1330>)
 8002588:	f006 ff38 	bl	80093fc <HAL_GPIO_ReadPin>
 800258c:	4603      	mov	r3, r0
 800258e:	2b01      	cmp	r3, #1
 8002590:	d10e      	bne.n	80025b0 <menu+0x12b4>
 8002592:	4b27      	ldr	r3, [pc, #156]	; (8002630 <menu+0x1334>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	f083 0301 	eor.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <menu+0x1354>)
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <menu+0x133c>)
 80025a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80025aa:	4b25      	ldr	r3, [pc, #148]	; (8002640 <menu+0x1344>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <menu+0x1348>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	f040 80b9 	bne.w	800272c <menu+0x1430>
		if(dilSecim == 0){
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <menu+0x1328>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d105      	bne.n	80025ce <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80025c2:	4a28      	ldr	r2, [pc, #160]	; (8002664 <menu+0x1368>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	2001      	movs	r0, #1
 80025c8:	f005 fbf2 	bl	8007db0 <lcd_print>
 80025cc:	e008      	b.n	80025e0 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <menu+0x1328>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d104      	bne.n	80025e0 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <menu+0x136c>)
 80025d8:	2101      	movs	r1, #1
 80025da:	2001      	movs	r0, #1
 80025dc:	f005 fbe8 	bl	8007db0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80025e0:	4b22      	ldr	r3, [pc, #136]	; (800266c <menu+0x1370>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80025e8:	4a21      	ldr	r2, [pc, #132]	; (8002670 <menu+0x1374>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	2002      	movs	r0, #2
 80025ee:	f005 fbdf 	bl	8007db0 <lcd_print>
 80025f2:	e04c      	b.n	800268e <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <menu+0x1370>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d13f      	bne.n	800267c <menu+0x1380>
			if(dilSecim == 0){
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <menu+0x1328>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <menu+0x1378>)
 8002606:	2101      	movs	r1, #1
 8002608:	2002      	movs	r0, #2
 800260a:	f005 fbd1 	bl	8007db0 <lcd_print>
 800260e:	e03e      	b.n	800268e <menu+0x1392>
			} else if(dilSecim == 1) {
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <menu+0x1328>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d13a      	bne.n	800268e <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002618:	4a17      	ldr	r2, [pc, #92]	; (8002678 <menu+0x137c>)
 800261a:	2101      	movs	r1, #1
 800261c:	2002      	movs	r0, #2
 800261e:	f005 fbc7 	bl	8007db0 <lcd_print>
 8002622:	e034      	b.n	800268e <menu+0x1392>
 8002624:	20000255 	.word	0x20000255
 8002628:	0800d52c 	.word	0x0800d52c
 800262c:	40010800 	.word	0x40010800
 8002630:	20000263 	.word	0x20000263
 8002634:	2000023c 	.word	0x2000023c
 8002638:	20000118 	.word	0x20000118
 800263c:	2000023a 	.word	0x2000023a
 8002640:	20000260 	.word	0x20000260
 8002644:	20000234 	.word	0x20000234
 8002648:	0800d540 	.word	0x0800d540
 800264c:	0800d554 	.word	0x0800d554
 8002650:	20000240 	.word	0x20000240
 8002654:	0800d568 	.word	0x0800d568
 8002658:	0800d578 	.word	0x0800d578
 800265c:	0800d588 	.word	0x0800d588
 8002660:	0800d59c 	.word	0x0800d59c
 8002664:	0800d5b0 	.word	0x0800d5b0
 8002668:	0800d5c4 	.word	0x0800d5c4
 800266c:	2000023d 	.word	0x2000023d
 8002670:	0800d5d8 	.word	0x0800d5d8
 8002674:	0800d5ec 	.word	0x0800d5ec
 8002678:	0800d5fc 	.word	0x0800d5fc
			}
		} else if(kapi1Tip == 2) {
 800267c:	4b8a      	ldr	r3, [pc, #552]	; (80028a8 <menu+0x15ac>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d104      	bne.n	800268e <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002684:	4a89      	ldr	r2, [pc, #548]	; (80028ac <menu+0x15b0>)
 8002686:	2101      	movs	r1, #1
 8002688:	2002      	movs	r0, #2
 800268a:	f005 fb91 	bl	8007db0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800268e:	2102      	movs	r1, #2
 8002690:	4887      	ldr	r0, [pc, #540]	; (80028b0 <menu+0x15b4>)
 8002692:	f006 feb3 	bl	80093fc <HAL_GPIO_ReadPin>
 8002696:	4603      	mov	r3, r0
 8002698:	2b01      	cmp	r3, #1
 800269a:	d115      	bne.n	80026c8 <menu+0x13cc>
 800269c:	4b85      	ldr	r3, [pc, #532]	; (80028b4 <menu+0x15b8>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f083 0301 	eor.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00e      	beq.n	80026c8 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80026aa:	4b7f      	ldr	r3, [pc, #508]	; (80028a8 <menu+0x15ac>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <menu+0x15ac>)
 80026b4:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80026b6:	4b7c      	ldr	r3, [pc, #496]	; (80028a8 <menu+0x15ac>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <menu+0x13c8>
				kapi1Tip = 0;
 80026be:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <menu+0x15ac>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026c4:	f002 fab2 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026c8:	2104      	movs	r1, #4
 80026ca:	4879      	ldr	r0, [pc, #484]	; (80028b0 <menu+0x15b4>)
 80026cc:	f006 fe96 	bl	80093fc <HAL_GPIO_ReadPin>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d115      	bne.n	8002702 <menu+0x1406>
 80026d6:	4b77      	ldr	r3, [pc, #476]	; (80028b4 <menu+0x15b8>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	f083 0301 	eor.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00e      	beq.n	8002702 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80026e4:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <menu+0x15ac>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b6e      	ldr	r3, [pc, #440]	; (80028a8 <menu+0x15ac>)
 80026ee:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80026f0:	4b6d      	ldr	r3, [pc, #436]	; (80028a8 <menu+0x15ac>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d902      	bls.n	80026fe <menu+0x1402>
		   		kapi1Tip = 2;
 80026f8:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <menu+0x15ac>)
 80026fa:	2202      	movs	r2, #2
 80026fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026fe:	f002 fa95 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002702:	2108      	movs	r1, #8
 8002704:	486a      	ldr	r0, [pc, #424]	; (80028b0 <menu+0x15b4>)
 8002706:	f006 fe79 	bl	80093fc <HAL_GPIO_ReadPin>
 800270a:	4603      	mov	r3, r0
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10d      	bne.n	800272c <menu+0x1430>
 8002710:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <menu+0x15b8>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	f083 0301 	eor.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <menu+0x1430>
			eepromData[8] = kapi1Tip;
 800271e:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <menu+0x15ac>)
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	4b65      	ldr	r3, [pc, #404]	; (80028b8 <menu+0x15bc>)
 8002724:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <menu+0x15c0>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 800272c:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <menu+0x15c4>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b0a      	cmp	r3, #10
 8002732:	d17f      	bne.n	8002834 <menu+0x1538>
		if(dilSecim == 0) {
 8002734:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <menu+0x15c8>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 800273c:	4a62      	ldr	r2, [pc, #392]	; (80028c8 <menu+0x15cc>)
 800273e:	2101      	movs	r1, #1
 8002740:	2001      	movs	r0, #1
 8002742:	f005 fb35 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002746:	4a61      	ldr	r2, [pc, #388]	; (80028cc <menu+0x15d0>)
 8002748:	2101      	movs	r1, #1
 800274a:	2002      	movs	r0, #2
 800274c:	f005 fb30 	bl	8007db0 <lcd_print>
 8002750:	e00d      	b.n	800276e <menu+0x1472>
		} else if(dilSecim == 1) {
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <menu+0x15c8>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d109      	bne.n	800276e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800275a:	4a5d      	ldr	r2, [pc, #372]	; (80028d0 <menu+0x15d4>)
 800275c:	2101      	movs	r1, #1
 800275e:	2001      	movs	r0, #1
 8002760:	f005 fb26 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002764:	4a5b      	ldr	r2, [pc, #364]	; (80028d4 <menu+0x15d8>)
 8002766:	2101      	movs	r1, #1
 8002768:	2002      	movs	r0, #2
 800276a:	f005 fb21 	bl	8007db0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800276e:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <menu+0x15dc>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	220a      	movs	r2, #10
 8002774:	4959      	ldr	r1, [pc, #356]	; (80028dc <menu+0x15e0>)
 8002776:	4618      	mov	r0, r3
 8002778:	f009 fe6c 	bl	800c454 <itoa>
		lcd_print(2,16,snum);
 800277c:	4a57      	ldr	r2, [pc, #348]	; (80028dc <menu+0x15e0>)
 800277e:	2110      	movs	r1, #16
 8002780:	2002      	movs	r0, #2
 8002782:	f005 fb15 	bl	8007db0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002786:	2102      	movs	r1, #2
 8002788:	4849      	ldr	r0, [pc, #292]	; (80028b0 <menu+0x15b4>)
 800278a:	f006 fe37 	bl	80093fc <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d119      	bne.n	80027c8 <menu+0x14cc>
 8002794:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <menu+0x15b8>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f083 0301 	eor.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <menu+0x14cc>
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <menu+0x15ac>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10e      	bne.n	80027c8 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80027aa:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <menu+0x15dc>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	3301      	adds	r3, #1
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <menu+0x15dc>)
 80027b4:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <menu+0x15dc>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d902      	bls.n	80027c4 <menu+0x14c8>
				kapi1AcSure = 0;
 80027be:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <menu+0x15dc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027c4:	f002 fa32 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027c8:	2104      	movs	r1, #4
 80027ca:	4839      	ldr	r0, [pc, #228]	; (80028b0 <menu+0x15b4>)
 80027cc:	f006 fe16 	bl	80093fc <HAL_GPIO_ReadPin>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d119      	bne.n	800280a <menu+0x150e>
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <menu+0x15b8>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	f083 0301 	eor.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <menu+0x150e>
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <menu+0x15ac>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10e      	bne.n	800280a <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80027ec:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <menu+0x15dc>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <menu+0x15dc>)
 80027f6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80027f8:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <menu+0x15dc>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d902      	bls.n	8002806 <menu+0x150a>
		   		kapi1AcSure = 5;
 8002800:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <menu+0x15dc>)
 8002802:	2205      	movs	r2, #5
 8002804:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002806:	f002 fa11 	bl	8004c2c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800280a:	2108      	movs	r1, #8
 800280c:	4828      	ldr	r0, [pc, #160]	; (80028b0 <menu+0x15b4>)
 800280e:	f006 fdf5 	bl	80093fc <HAL_GPIO_ReadPin>
 8002812:	4603      	mov	r3, r0
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10d      	bne.n	8002834 <menu+0x1538>
 8002818:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <menu+0x15b8>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f083 0301 	eor.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002826:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <menu+0x15dc>)
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <menu+0x15bc>)
 800282c:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <menu+0x15c0>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <menu+0x15c4>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b0b      	cmp	r3, #11
 800283a:	f040 80b5 	bne.w	80029a8 <menu+0x16ac>
		if(dilSecim == 0) {
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <menu+0x15c8>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002846:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <menu+0x15e4>)
 8002848:	2101      	movs	r1, #1
 800284a:	2001      	movs	r0, #1
 800284c:	f005 fab0 	bl	8007db0 <lcd_print>
 8002850:	e008      	b.n	8002864 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <menu+0x15c8>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d104      	bne.n	8002864 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800285a:	4a22      	ldr	r2, [pc, #136]	; (80028e4 <menu+0x15e8>)
 800285c:	2101      	movs	r1, #1
 800285e:	2001      	movs	r0, #1
 8002860:	f005 faa6 	bl	8007db0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <menu+0x15ec>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <menu+0x15f0>)
 800286e:	2101      	movs	r1, #1
 8002870:	2002      	movs	r0, #2
 8002872:	f005 fa9d 	bl	8007db0 <lcd_print>
 8002876:	e048      	b.n	800290a <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <menu+0x15ec>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d13b      	bne.n	80028f8 <menu+0x15fc>
			if(dilSecim == 0) {
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <menu+0x15c8>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <menu+0x15f4>)
 800288a:	2101      	movs	r1, #1
 800288c:	2002      	movs	r0, #2
 800288e:	f005 fa8f 	bl	8007db0 <lcd_print>
 8002892:	e03a      	b.n	800290a <menu+0x160e>
			} else if(dilSecim == 1) {
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <menu+0x15c8>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d136      	bne.n	800290a <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 800289c:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <menu+0x15f8>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2002      	movs	r0, #2
 80028a2:	f005 fa85 	bl	8007db0 <lcd_print>
 80028a6:	e030      	b.n	800290a <menu+0x160e>
 80028a8:	2000023d 	.word	0x2000023d
 80028ac:	0800d610 	.word	0x0800d610
 80028b0:	40010800 	.word	0x40010800
 80028b4:	20000263 	.word	0x20000263
 80028b8:	20000118 	.word	0x20000118
 80028bc:	20000260 	.word	0x20000260
 80028c0:	20000234 	.word	0x20000234
 80028c4:	20000255 	.word	0x20000255
 80028c8:	0800d620 	.word	0x0800d620
 80028cc:	0800d634 	.word	0x0800d634
 80028d0:	0800d644 	.word	0x0800d644
 80028d4:	0800d658 	.word	0x0800d658
 80028d8:	2000024d 	.word	0x2000024d
 80028dc:	20000188 	.word	0x20000188
 80028e0:	0800d668 	.word	0x0800d668
 80028e4:	0800d67c 	.word	0x0800d67c
 80028e8:	2000023e 	.word	0x2000023e
 80028ec:	0800d5d8 	.word	0x0800d5d8
 80028f0:	0800d5ec 	.word	0x0800d5ec
 80028f4:	0800d5fc 	.word	0x0800d5fc
			}
		} else if(kapi2Tip == 2) {
 80028f8:	4b8a      	ldr	r3, [pc, #552]	; (8002b24 <menu+0x1828>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d104      	bne.n	800290a <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002900:	4a89      	ldr	r2, [pc, #548]	; (8002b28 <menu+0x182c>)
 8002902:	2101      	movs	r1, #1
 8002904:	2002      	movs	r0, #2
 8002906:	f005 fa53 	bl	8007db0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800290a:	2102      	movs	r1, #2
 800290c:	4887      	ldr	r0, [pc, #540]	; (8002b2c <menu+0x1830>)
 800290e:	f006 fd75 	bl	80093fc <HAL_GPIO_ReadPin>
 8002912:	4603      	mov	r3, r0
 8002914:	2b01      	cmp	r3, #1
 8002916:	d115      	bne.n	8002944 <menu+0x1648>
 8002918:	4b85      	ldr	r3, [pc, #532]	; (8002b30 <menu+0x1834>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00e      	beq.n	8002944 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002926:	4b7f      	ldr	r3, [pc, #508]	; (8002b24 <menu+0x1828>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b7d      	ldr	r3, [pc, #500]	; (8002b24 <menu+0x1828>)
 8002930:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002932:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <menu+0x1828>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <menu+0x1644>
				kapi2Tip = 0;
 800293a:	4b7a      	ldr	r3, [pc, #488]	; (8002b24 <menu+0x1828>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002940:	f002 f974 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002944:	2104      	movs	r1, #4
 8002946:	4879      	ldr	r0, [pc, #484]	; (8002b2c <menu+0x1830>)
 8002948:	f006 fd58 	bl	80093fc <HAL_GPIO_ReadPin>
 800294c:	4603      	mov	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d115      	bne.n	800297e <menu+0x1682>
 8002952:	4b77      	ldr	r3, [pc, #476]	; (8002b30 <menu+0x1834>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	f083 0301 	eor.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00e      	beq.n	800297e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002960:	4b70      	ldr	r3, [pc, #448]	; (8002b24 <menu+0x1828>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	3b01      	subs	r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b6e      	ldr	r3, [pc, #440]	; (8002b24 <menu+0x1828>)
 800296a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800296c:	4b6d      	ldr	r3, [pc, #436]	; (8002b24 <menu+0x1828>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d902      	bls.n	800297a <menu+0x167e>
		   		kapi2Tip = 2;
 8002974:	4b6b      	ldr	r3, [pc, #428]	; (8002b24 <menu+0x1828>)
 8002976:	2202      	movs	r2, #2
 8002978:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800297a:	f002 f957 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800297e:	2108      	movs	r1, #8
 8002980:	486a      	ldr	r0, [pc, #424]	; (8002b2c <menu+0x1830>)
 8002982:	f006 fd3b 	bl	80093fc <HAL_GPIO_ReadPin>
 8002986:	4603      	mov	r3, r0
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10d      	bne.n	80029a8 <menu+0x16ac>
 800298c:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <menu+0x1834>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 800299a:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <menu+0x1828>)
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <menu+0x1838>)
 80029a0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <menu+0x183c>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80029a8:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <menu+0x1840>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	d17f      	bne.n	8002ab0 <menu+0x17b4>
		if(dilSecim == 0) {
 80029b0:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <menu+0x1844>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80029b8:	4a62      	ldr	r2, [pc, #392]	; (8002b44 <menu+0x1848>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	2001      	movs	r0, #1
 80029be:	f005 f9f7 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029c2:	4a61      	ldr	r2, [pc, #388]	; (8002b48 <menu+0x184c>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	2002      	movs	r0, #2
 80029c8:	f005 f9f2 	bl	8007db0 <lcd_print>
 80029cc:	e00d      	b.n	80029ea <menu+0x16ee>
		} else if(dilSecim == 1) {
 80029ce:	4b5c      	ldr	r3, [pc, #368]	; (8002b40 <menu+0x1844>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d109      	bne.n	80029ea <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80029d6:	4a5d      	ldr	r2, [pc, #372]	; (8002b4c <menu+0x1850>)
 80029d8:	2101      	movs	r1, #1
 80029da:	2001      	movs	r0, #1
 80029dc:	f005 f9e8 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80029e0:	4a5b      	ldr	r2, [pc, #364]	; (8002b50 <menu+0x1854>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	2002      	movs	r0, #2
 80029e6:	f005 f9e3 	bl	8007db0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 80029ea:	4b5a      	ldr	r3, [pc, #360]	; (8002b54 <menu+0x1858>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	220a      	movs	r2, #10
 80029f0:	4959      	ldr	r1, [pc, #356]	; (8002b58 <menu+0x185c>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f009 fd2e 	bl	800c454 <itoa>
		lcd_print(2,16,snum);
 80029f8:	4a57      	ldr	r2, [pc, #348]	; (8002b58 <menu+0x185c>)
 80029fa:	2110      	movs	r1, #16
 80029fc:	2002      	movs	r0, #2
 80029fe:	f005 f9d7 	bl	8007db0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a02:	2102      	movs	r1, #2
 8002a04:	4849      	ldr	r0, [pc, #292]	; (8002b2c <menu+0x1830>)
 8002a06:	f006 fcf9 	bl	80093fc <HAL_GPIO_ReadPin>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d119      	bne.n	8002a44 <menu+0x1748>
 8002a10:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <menu+0x1834>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d012      	beq.n	8002a44 <menu+0x1748>
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <menu+0x1828>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10e      	bne.n	8002a44 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002a26:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <menu+0x1858>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <menu+0x1858>)
 8002a30:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002a32:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <menu+0x1858>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d902      	bls.n	8002a40 <menu+0x1744>
				kapi2AcSure = 0;
 8002a3a:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <menu+0x1858>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a40:	f002 f8f4 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a44:	2104      	movs	r1, #4
 8002a46:	4839      	ldr	r0, [pc, #228]	; (8002b2c <menu+0x1830>)
 8002a48:	f006 fcd8 	bl	80093fc <HAL_GPIO_ReadPin>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d119      	bne.n	8002a86 <menu+0x178a>
 8002a52:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <menu+0x1834>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d012      	beq.n	8002a86 <menu+0x178a>
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <menu+0x1828>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10e      	bne.n	8002a86 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <menu+0x1858>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <menu+0x1858>)
 8002a72:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a74:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <menu+0x1858>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d902      	bls.n	8002a82 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002a7c:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <menu+0x1858>)
 8002a7e:	2205      	movs	r2, #5
 8002a80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a82:	f002 f8d3 	bl	8004c2c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a86:	2108      	movs	r1, #8
 8002a88:	4828      	ldr	r0, [pc, #160]	; (8002b2c <menu+0x1830>)
 8002a8a:	f006 fcb7 	bl	80093fc <HAL_GPIO_ReadPin>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10d      	bne.n	8002ab0 <menu+0x17b4>
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <menu+0x1834>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	f083 0301 	eor.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <menu+0x1858>)
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <menu+0x1838>)
 8002aa8:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002aaa:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <menu+0x183c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <menu+0x1840>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b0d      	cmp	r3, #13
 8002ab6:	f040 80b5 	bne.w	8002c24 <menu+0x1928>
		if(dilSecim == 0) {
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <menu+0x1844>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002ac2:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <menu+0x1860>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f005 f972 	bl	8007db0 <lcd_print>
 8002acc:	e008      	b.n	8002ae0 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <menu+0x1844>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d104      	bne.n	8002ae0 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002ad6:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <menu+0x1864>)
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2001      	movs	r0, #1
 8002adc:	f005 f968 	bl	8007db0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <menu+0x1868>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <menu+0x186c>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	2002      	movs	r0, #2
 8002aee:	f005 f95f 	bl	8007db0 <lcd_print>
 8002af2:	e048      	b.n	8002b86 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <menu+0x1868>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d13b      	bne.n	8002b74 <menu+0x1878>
			if(dilSecim == 0) {
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <menu+0x1844>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <menu+0x1870>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	2002      	movs	r0, #2
 8002b0a:	f005 f951 	bl	8007db0 <lcd_print>
 8002b0e:	e03a      	b.n	8002b86 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <menu+0x1844>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d136      	bne.n	8002b86 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002b18:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <menu+0x1874>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f005 f947 	bl	8007db0 <lcd_print>
 8002b22:	e030      	b.n	8002b86 <menu+0x188a>
 8002b24:	2000023e 	.word	0x2000023e
 8002b28:	0800d610 	.word	0x0800d610
 8002b2c:	40010800 	.word	0x40010800
 8002b30:	20000263 	.word	0x20000263
 8002b34:	20000118 	.word	0x20000118
 8002b38:	20000260 	.word	0x20000260
 8002b3c:	20000234 	.word	0x20000234
 8002b40:	20000255 	.word	0x20000255
 8002b44:	0800d690 	.word	0x0800d690
 8002b48:	0800d634 	.word	0x0800d634
 8002b4c:	0800d6a4 	.word	0x0800d6a4
 8002b50:	0800d658 	.word	0x0800d658
 8002b54:	2000024e 	.word	0x2000024e
 8002b58:	20000188 	.word	0x20000188
 8002b5c:	0800d6b8 	.word	0x0800d6b8
 8002b60:	0800d6cc 	.word	0x0800d6cc
 8002b64:	2000023f 	.word	0x2000023f
 8002b68:	0800d5d8 	.word	0x0800d5d8
 8002b6c:	0800d5ec 	.word	0x0800d5ec
 8002b70:	0800d5fc 	.word	0x0800d5fc
			}
		} else if(kapitablaTip == 2) {
 8002b74:	4b5b      	ldr	r3, [pc, #364]	; (8002ce4 <menu+0x19e8>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d104      	bne.n	8002b86 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002b7c:	4a5a      	ldr	r2, [pc, #360]	; (8002ce8 <menu+0x19ec>)
 8002b7e:	2101      	movs	r1, #1
 8002b80:	2002      	movs	r0, #2
 8002b82:	f005 f915 	bl	8007db0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b86:	2102      	movs	r1, #2
 8002b88:	4858      	ldr	r0, [pc, #352]	; (8002cec <menu+0x19f0>)
 8002b8a:	f006 fc37 	bl	80093fc <HAL_GPIO_ReadPin>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d115      	bne.n	8002bc0 <menu+0x18c4>
 8002b94:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <menu+0x19f4>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f083 0301 	eor.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00e      	beq.n	8002bc0 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002ba2:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <menu+0x19e8>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4b4e      	ldr	r3, [pc, #312]	; (8002ce4 <menu+0x19e8>)
 8002bac:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002bae:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <menu+0x19e8>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d902      	bls.n	8002bbc <menu+0x18c0>
				kapitablaTip = 0;
 8002bb6:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <menu+0x19e8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bbc:	f002 f836 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	484a      	ldr	r0, [pc, #296]	; (8002cec <menu+0x19f0>)
 8002bc4:	f006 fc1a 	bl	80093fc <HAL_GPIO_ReadPin>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d115      	bne.n	8002bfa <menu+0x18fe>
 8002bce:	4b48      	ldr	r3, [pc, #288]	; (8002cf0 <menu+0x19f4>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002bdc:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <menu+0x19e8>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <menu+0x19e8>)
 8002be6:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002be8:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <menu+0x19e8>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d902      	bls.n	8002bf6 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002bf0:	4b3c      	ldr	r3, [pc, #240]	; (8002ce4 <menu+0x19e8>)
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bf6:	f002 f819 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bfa:	2108      	movs	r1, #8
 8002bfc:	483b      	ldr	r0, [pc, #236]	; (8002cec <menu+0x19f0>)
 8002bfe:	f006 fbfd 	bl	80093fc <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10d      	bne.n	8002c24 <menu+0x1928>
 8002c08:	4b39      	ldr	r3, [pc, #228]	; (8002cf0 <menu+0x19f4>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f083 0301 	eor.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002c16:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <menu+0x19e8>)
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <menu+0x19f8>)
 8002c1c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <menu+0x19fc>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002c24:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <menu+0x1a00>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b0e      	cmp	r3, #14
 8002c2a:	f040 80f2 	bne.w	8002e12 <menu+0x1b16>
		if(dilSecim == 0) {
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <menu+0x1a04>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002c36:	4a33      	ldr	r2, [pc, #204]	; (8002d04 <menu+0x1a08>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f005 f8b8 	bl	8007db0 <lcd_print>
 8002c40:	e008      	b.n	8002c54 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <menu+0x1a04>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d104      	bne.n	8002c54 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002c4a:	4a2f      	ldr	r2, [pc, #188]	; (8002d08 <menu+0x1a0c>)
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f005 f8ae 	bl	8007db0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <menu+0x1a10>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d113      	bne.n	8002c84 <menu+0x1988>
			if(dilSecim == 0){
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <menu+0x1a04>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002c64:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <menu+0x1a14>)
 8002c66:	2101      	movs	r1, #1
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f005 f8a1 	bl	8007db0 <lcd_print>
 8002c6e:	e071      	b.n	8002d54 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <menu+0x1a04>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d16d      	bne.n	8002d54 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c78:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <menu+0x1a18>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f005 f897 	bl	8007db0 <lcd_print>
 8002c82:	e067      	b.n	8002d54 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <menu+0x1a10>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d112      	bne.n	8002cb2 <menu+0x19b6>
			if(dilSecim == 0){
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <menu+0x1a04>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002c94:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <menu+0x1a1c>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f005 f889 	bl	8007db0 <lcd_print>
			}
			if(dilSecim == 1){
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <menu+0x1a04>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d156      	bne.n	8002d54 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <menu+0x1a20>)
 8002ca8:	2101      	movs	r1, #1
 8002caa:	2002      	movs	r0, #2
 8002cac:	f005 f880 	bl	8007db0 <lcd_print>
 8002cb0:	e050      	b.n	8002d54 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <menu+0x1a10>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d136      	bne.n	8002d28 <menu+0x1a2c>
			if(dilSecim == 0){
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <menu+0x1a04>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002cc2:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <menu+0x1a24>)
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f005 f872 	bl	8007db0 <lcd_print>
 8002ccc:	e042      	b.n	8002d54 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <menu+0x1a04>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d13e      	bne.n	8002d54 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <menu+0x1a28>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	2002      	movs	r0, #2
 8002cdc:	f005 f868 	bl	8007db0 <lcd_print>
 8002ce0:	e038      	b.n	8002d54 <menu+0x1a58>
 8002ce2:	bf00      	nop
 8002ce4:	2000023f 	.word	0x2000023f
 8002ce8:	0800d610 	.word	0x0800d610
 8002cec:	40010800 	.word	0x40010800
 8002cf0:	20000263 	.word	0x20000263
 8002cf4:	20000118 	.word	0x20000118
 8002cf8:	20000260 	.word	0x20000260
 8002cfc:	20000234 	.word	0x20000234
 8002d00:	20000255 	.word	0x20000255
 8002d04:	0800d6e0 	.word	0x0800d6e0
 8002d08:	0800d6f4 	.word	0x0800d6f4
 8002d0c:	20000241 	.word	0x20000241
 8002d10:	0800d708 	.word	0x0800d708
 8002d14:	0800d718 	.word	0x0800d718
 8002d18:	0800d728 	.word	0x0800d728
 8002d1c:	0800d738 	.word	0x0800d738
 8002d20:	0800d748 	.word	0x0800d748
 8002d24:	0800d75c 	.word	0x0800d75c
			}
		} else if(kapiTablaAcKonum == 3) {
 8002d28:	4b9b      	ldr	r3, [pc, #620]	; (8002f98 <menu+0x1c9c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d111      	bne.n	8002d54 <menu+0x1a58>
			if(dilSecim == 0) {
 8002d30:	4b9a      	ldr	r3, [pc, #616]	; (8002f9c <menu+0x1ca0>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002d38:	4a99      	ldr	r2, [pc, #612]	; (8002fa0 <menu+0x1ca4>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	f005 f837 	bl	8007db0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002d42:	4b96      	ldr	r3, [pc, #600]	; (8002f9c <menu+0x1ca0>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d104      	bne.n	8002d54 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002d4a:	4a96      	ldr	r2, [pc, #600]	; (8002fa4 <menu+0x1ca8>)
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	2002      	movs	r0, #2
 8002d50:	f005 f82e 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d54:	2102      	movs	r1, #2
 8002d56:	4894      	ldr	r0, [pc, #592]	; (8002fa8 <menu+0x1cac>)
 8002d58:	f006 fb50 	bl	80093fc <HAL_GPIO_ReadPin>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d115      	bne.n	8002d8e <menu+0x1a92>
 8002d62:	4b92      	ldr	r3, [pc, #584]	; (8002fac <menu+0x1cb0>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002d70:	4b89      	ldr	r3, [pc, #548]	; (8002f98 <menu+0x1c9c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b87      	ldr	r3, [pc, #540]	; (8002f98 <menu+0x1c9c>)
 8002d7a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002d7c:	4b86      	ldr	r3, [pc, #536]	; (8002f98 <menu+0x1c9c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d902      	bls.n	8002d8a <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002d84:	4b84      	ldr	r3, [pc, #528]	; (8002f98 <menu+0x1c9c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d8a:	f001 ff4f 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d8e:	2104      	movs	r1, #4
 8002d90:	4885      	ldr	r0, [pc, #532]	; (8002fa8 <menu+0x1cac>)
 8002d92:	f006 fb33 	bl	80093fc <HAL_GPIO_ReadPin>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d115      	bne.n	8002dc8 <menu+0x1acc>
 8002d9c:	4b83      	ldr	r3, [pc, #524]	; (8002fac <menu+0x1cb0>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00e      	beq.n	8002dc8 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002daa:	4b7b      	ldr	r3, [pc, #492]	; (8002f98 <menu+0x1c9c>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b79      	ldr	r3, [pc, #484]	; (8002f98 <menu+0x1c9c>)
 8002db4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002db6:	4b78      	ldr	r3, [pc, #480]	; (8002f98 <menu+0x1c9c>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d902      	bls.n	8002dc4 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002dbe:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <menu+0x1c9c>)
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dc4:	f001 ff32 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc8:	2108      	movs	r1, #8
 8002dca:	4877      	ldr	r0, [pc, #476]	; (8002fa8 <menu+0x1cac>)
 8002dcc:	f006 fb16 	bl	80093fc <HAL_GPIO_ReadPin>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d11d      	bne.n	8002e12 <menu+0x1b16>
 8002dd6:	4b75      	ldr	r3, [pc, #468]	; (8002fac <menu+0x1cb0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f083 0301 	eor.w	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d016      	beq.n	8002e12 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002de4:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <menu+0x1c9c>)
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	4b71      	ldr	r3, [pc, #452]	; (8002fb0 <menu+0x1cb4>)
 8002dea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002dee:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <menu+0x1c9c>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <menu+0x1b02>
 8002df6:	4b68      	ldr	r3, [pc, #416]	; (8002f98 <menu+0x1c9c>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d106      	bne.n	8002e0c <menu+0x1b10>
				altLimit = 1;
 8002dfe:	4b6d      	ldr	r3, [pc, #436]	; (8002fb4 <menu+0x1cb8>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e04:	4b6b      	ldr	r3, [pc, #428]	; (8002fb4 <menu+0x1cb8>)
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <menu+0x1cb4>)
 8002e0a:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002e0c:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <menu+0x1cbc>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002e12:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <menu+0x1cc0>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	d17f      	bne.n	8002f1a <menu+0x1c1e>
		if(dilSecim == 0) {
 8002e1a:	4b60      	ldr	r3, [pc, #384]	; (8002f9c <menu+0x1ca0>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002e22:	4a67      	ldr	r2, [pc, #412]	; (8002fc0 <menu+0x1cc4>)
 8002e24:	2101      	movs	r1, #1
 8002e26:	2001      	movs	r0, #1
 8002e28:	f004 ffc2 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002e2c:	4a65      	ldr	r2, [pc, #404]	; (8002fc4 <menu+0x1cc8>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	2002      	movs	r0, #2
 8002e32:	f004 ffbd 	bl	8007db0 <lcd_print>
 8002e36:	e00d      	b.n	8002e54 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002e38:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <menu+0x1ca0>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d109      	bne.n	8002e54 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002e40:	4a61      	ldr	r2, [pc, #388]	; (8002fc8 <menu+0x1ccc>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	2001      	movs	r0, #1
 8002e46:	f004 ffb3 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002e4a:	4a60      	ldr	r2, [pc, #384]	; (8002fcc <menu+0x1cd0>)
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	2002      	movs	r0, #2
 8002e50:	f004 ffae 	bl	8007db0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002e54:	4b5e      	ldr	r3, [pc, #376]	; (8002fd0 <menu+0x1cd4>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	220a      	movs	r2, #10
 8002e5a:	495e      	ldr	r1, [pc, #376]	; (8002fd4 <menu+0x1cd8>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f009 faf9 	bl	800c454 <itoa>
		lcd_print(2,16,snum);
 8002e62:	4a5c      	ldr	r2, [pc, #368]	; (8002fd4 <menu+0x1cd8>)
 8002e64:	2110      	movs	r1, #16
 8002e66:	2002      	movs	r0, #2
 8002e68:	f004 ffa2 	bl	8007db0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	484e      	ldr	r0, [pc, #312]	; (8002fa8 <menu+0x1cac>)
 8002e70:	f006 fac4 	bl	80093fc <HAL_GPIO_ReadPin>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d119      	bne.n	8002eae <menu+0x1bb2>
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <menu+0x1cb0>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d012      	beq.n	8002eae <menu+0x1bb2>
 8002e88:	4b53      	ldr	r3, [pc, #332]	; (8002fd8 <menu+0x1cdc>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10e      	bne.n	8002eae <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002e90:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <menu+0x1cd4>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <menu+0x1cd4>)
 8002e9a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <menu+0x1cd4>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d902      	bls.n	8002eaa <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <menu+0x1cd4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002eaa:	f001 febf 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002eae:	2104      	movs	r1, #4
 8002eb0:	483d      	ldr	r0, [pc, #244]	; (8002fa8 <menu+0x1cac>)
 8002eb2:	f006 faa3 	bl	80093fc <HAL_GPIO_ReadPin>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d119      	bne.n	8002ef0 <menu+0x1bf4>
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <menu+0x1cb0>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <menu+0x1bf4>
 8002eca:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <menu+0x1cdc>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10e      	bne.n	8002ef0 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <menu+0x1cd4>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <menu+0x1cd4>)
 8002edc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002ede:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <menu+0x1cd4>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d902      	bls.n	8002eec <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <menu+0x1cd4>)
 8002ee8:	2205      	movs	r2, #5
 8002eea:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002eec:	f001 fe9e 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ef0:	2108      	movs	r1, #8
 8002ef2:	482d      	ldr	r0, [pc, #180]	; (8002fa8 <menu+0x1cac>)
 8002ef4:	f006 fa82 	bl	80093fc <HAL_GPIO_ReadPin>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10d      	bne.n	8002f1a <menu+0x1c1e>
 8002efe:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <menu+0x1cb0>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f083 0301 	eor.w	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002f0c:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <menu+0x1cd4>)
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <menu+0x1cb4>)
 8002f12:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <menu+0x1cbc>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002f1a:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <menu+0x1cc0>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	f040 80bc 	bne.w	800309c <menu+0x1da0>
		if(dilSecim == 0) {
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <menu+0x1ca0>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002f2c:	4a2b      	ldr	r2, [pc, #172]	; (8002fdc <menu+0x1ce0>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2001      	movs	r0, #1
 8002f32:	f004 ff3d 	bl	8007db0 <lcd_print>
 8002f36:	e008      	b.n	8002f4a <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <menu+0x1ca0>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d104      	bne.n	8002f4a <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002f40:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <menu+0x1ce4>)
 8002f42:	2101      	movs	r1, #1
 8002f44:	2001      	movs	r0, #1
 8002f46:	f004 ff33 	bl	8007db0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <menu+0x1ce8>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d113      	bne.n	8002f7a <menu+0x1c7e>
			if(dilSecim == 0) {
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <menu+0x1ca0>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002f5a:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <menu+0x1ca4>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2002      	movs	r0, #2
 8002f60:	f004 ff26 	bl	8007db0 <lcd_print>
 8002f64:	e04b      	b.n	8002ffe <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <menu+0x1ca0>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d147      	bne.n	8002ffe <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002f6e:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <menu+0x1ca8>)
 8002f70:	2101      	movs	r1, #1
 8002f72:	2002      	movs	r0, #2
 8002f74:	f004 ff1c 	bl	8007db0 <lcd_print>
 8002f78:	e041      	b.n	8002ffe <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <menu+0x1ce8>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d13d      	bne.n	8002ffe <menu+0x1d02>
			if(dilSecim == 0) {
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <menu+0x1ca0>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d130      	bne.n	8002fec <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <menu+0x1cec>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f004 ff0e 	bl	8007db0 <lcd_print>
 8002f94:	e033      	b.n	8002ffe <menu+0x1d02>
 8002f96:	bf00      	nop
 8002f98:	20000241 	.word	0x20000241
 8002f9c:	20000255 	.word	0x20000255
 8002fa0:	0800d3d0 	.word	0x0800d3d0
 8002fa4:	0800d3e4 	.word	0x0800d3e4
 8002fa8:	40010800 	.word	0x40010800
 8002fac:	20000263 	.word	0x20000263
 8002fb0:	20000118 	.word	0x20000118
 8002fb4:	2000023a 	.word	0x2000023a
 8002fb8:	20000260 	.word	0x20000260
 8002fbc:	20000234 	.word	0x20000234
 8002fc0:	0800d770 	.word	0x0800d770
 8002fc4:	0800d634 	.word	0x0800d634
 8002fc8:	0800d784 	.word	0x0800d784
 8002fcc:	0800d658 	.word	0x0800d658
 8002fd0:	2000024f 	.word	0x2000024f
 8002fd4:	20000188 	.word	0x20000188
 8002fd8:	2000023f 	.word	0x2000023f
 8002fdc:	0800d798 	.word	0x0800d798
 8002fe0:	0800d7ac 	.word	0x0800d7ac
 8002fe4:	20000242 	.word	0x20000242
 8002fe8:	0800d430 	.word	0x0800d430
			} else if(dilSecim == 1) {
 8002fec:	4b99      	ldr	r3, [pc, #612]	; (8003254 <menu+0x1f58>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d104      	bne.n	8002ffe <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002ff4:	4a98      	ldr	r2, [pc, #608]	; (8003258 <menu+0x1f5c>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f004 fed9 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ffe:	2102      	movs	r1, #2
 8003000:	4896      	ldr	r0, [pc, #600]	; (800325c <menu+0x1f60>)
 8003002:	f006 f9fb 	bl	80093fc <HAL_GPIO_ReadPin>
 8003006:	4603      	mov	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d115      	bne.n	8003038 <menu+0x1d3c>
 800300c:	4b94      	ldr	r3, [pc, #592]	; (8003260 <menu+0x1f64>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00e      	beq.n	8003038 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800301a:	4b92      	ldr	r3, [pc, #584]	; (8003264 <menu+0x1f68>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b90      	ldr	r3, [pc, #576]	; (8003264 <menu+0x1f68>)
 8003024:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003026:	4b8f      	ldr	r3, [pc, #572]	; (8003264 <menu+0x1f68>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d902      	bls.n	8003034 <menu+0x1d38>
				yukariYavasLimit = 0;
 800302e:	4b8d      	ldr	r3, [pc, #564]	; (8003264 <menu+0x1f68>)
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003034:	f001 fdfa 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003038:	2104      	movs	r1, #4
 800303a:	4888      	ldr	r0, [pc, #544]	; (800325c <menu+0x1f60>)
 800303c:	f006 f9de 	bl	80093fc <HAL_GPIO_ReadPin>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d115      	bne.n	8003072 <menu+0x1d76>
 8003046:	4b86      	ldr	r3, [pc, #536]	; (8003260 <menu+0x1f64>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	f083 0301 	eor.w	r3, r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003054:	4b83      	ldr	r3, [pc, #524]	; (8003264 <menu+0x1f68>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b81      	ldr	r3, [pc, #516]	; (8003264 <menu+0x1f68>)
 800305e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003060:	4b80      	ldr	r3, [pc, #512]	; (8003264 <menu+0x1f68>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003068:	4b7e      	ldr	r3, [pc, #504]	; (8003264 <menu+0x1f68>)
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800306e:	f001 fddd 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003072:	2108      	movs	r1, #8
 8003074:	4879      	ldr	r0, [pc, #484]	; (800325c <menu+0x1f60>)
 8003076:	f006 f9c1 	bl	80093fc <HAL_GPIO_ReadPin>
 800307a:	4603      	mov	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d10d      	bne.n	800309c <menu+0x1da0>
 8003080:	4b77      	ldr	r3, [pc, #476]	; (8003260 <menu+0x1f64>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d006      	beq.n	800309c <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800308e:	4b75      	ldr	r3, [pc, #468]	; (8003264 <menu+0x1f68>)
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	4b75      	ldr	r3, [pc, #468]	; (8003268 <menu+0x1f6c>)
 8003094:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003096:	4b75      	ldr	r3, [pc, #468]	; (800326c <menu+0x1f70>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800309c:	4b74      	ldr	r3, [pc, #464]	; (8003270 <menu+0x1f74>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b11      	cmp	r3, #17
 80030a2:	f040 80c3 	bne.w	800322c <menu+0x1f30>
		if(dilSecim == 0) {
 80030a6:	4b6b      	ldr	r3, [pc, #428]	; (8003254 <menu+0x1f58>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80030ae:	4a71      	ldr	r2, [pc, #452]	; (8003274 <menu+0x1f78>)
 80030b0:	2101      	movs	r1, #1
 80030b2:	2001      	movs	r0, #1
 80030b4:	f004 fe7c 	bl	8007db0 <lcd_print>
 80030b8:	e008      	b.n	80030cc <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80030ba:	4b66      	ldr	r3, [pc, #408]	; (8003254 <menu+0x1f58>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d104      	bne.n	80030cc <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80030c2:	4a6d      	ldr	r2, [pc, #436]	; (8003278 <menu+0x1f7c>)
 80030c4:	2101      	movs	r1, #1
 80030c6:	2001      	movs	r0, #1
 80030c8:	f004 fe72 	bl	8007db0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80030cc:	4b6b      	ldr	r3, [pc, #428]	; (800327c <menu+0x1f80>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d113      	bne.n	80030fc <menu+0x1e00>
			if(dilSecim == 0){
 80030d4:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <menu+0x1f58>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80030dc:	4a68      	ldr	r2, [pc, #416]	; (8003280 <menu+0x1f84>)
 80030de:	2101      	movs	r1, #1
 80030e0:	2002      	movs	r0, #2
 80030e2:	f004 fe65 	bl	8007db0 <lcd_print>
 80030e6:	e038      	b.n	800315a <menu+0x1e5e>
			} else if(dilSecim == 1){
 80030e8:	4b5a      	ldr	r3, [pc, #360]	; (8003254 <menu+0x1f58>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d134      	bne.n	800315a <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80030f0:	4a64      	ldr	r2, [pc, #400]	; (8003284 <menu+0x1f88>)
 80030f2:	2101      	movs	r1, #1
 80030f4:	2002      	movs	r0, #2
 80030f6:	f004 fe5b 	bl	8007db0 <lcd_print>
 80030fa:	e02e      	b.n	800315a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80030fc:	4b5f      	ldr	r3, [pc, #380]	; (800327c <menu+0x1f80>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d113      	bne.n	800312c <menu+0x1e30>
			if(dilSecim == 0){
 8003104:	4b53      	ldr	r3, [pc, #332]	; (8003254 <menu+0x1f58>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 800310c:	4a5e      	ldr	r2, [pc, #376]	; (8003288 <menu+0x1f8c>)
 800310e:	2101      	movs	r1, #1
 8003110:	2002      	movs	r0, #2
 8003112:	f004 fe4d 	bl	8007db0 <lcd_print>
 8003116:	e020      	b.n	800315a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003118:	4b4e      	ldr	r3, [pc, #312]	; (8003254 <menu+0x1f58>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d11c      	bne.n	800315a <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003120:	4a5a      	ldr	r2, [pc, #360]	; (800328c <menu+0x1f90>)
 8003122:	2101      	movs	r1, #1
 8003124:	2002      	movs	r0, #2
 8003126:	f004 fe43 	bl	8007db0 <lcd_print>
 800312a:	e016      	b.n	800315a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <menu+0x1f80>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d112      	bne.n	800315a <menu+0x1e5e>
			if(dilSecim == 0) {
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <menu+0x1f58>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 800313c:	4a54      	ldr	r2, [pc, #336]	; (8003290 <menu+0x1f94>)
 800313e:	2101      	movs	r1, #1
 8003140:	2002      	movs	r0, #2
 8003142:	f004 fe35 	bl	8007db0 <lcd_print>
 8003146:	e008      	b.n	800315a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <menu+0x1f58>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d104      	bne.n	800315a <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003150:	4a50      	ldr	r2, [pc, #320]	; (8003294 <menu+0x1f98>)
 8003152:	2101      	movs	r1, #1
 8003154:	2002      	movs	r0, #2
 8003156:	f004 fe2b 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800315a:	2102      	movs	r1, #2
 800315c:	483f      	ldr	r0, [pc, #252]	; (800325c <menu+0x1f60>)
 800315e:	f006 f94d 	bl	80093fc <HAL_GPIO_ReadPin>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d115      	bne.n	8003194 <menu+0x1e98>
 8003168:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <menu+0x1f64>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <menu+0x1f80>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b3f      	ldr	r3, [pc, #252]	; (800327c <menu+0x1f80>)
 8003180:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003182:	4b3e      	ldr	r3, [pc, #248]	; (800327c <menu+0x1f80>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d902      	bls.n	8003190 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800318a:	4b3c      	ldr	r3, [pc, #240]	; (800327c <menu+0x1f80>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003190:	f001 fd4c 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003194:	2104      	movs	r1, #4
 8003196:	4831      	ldr	r0, [pc, #196]	; (800325c <menu+0x1f60>)
 8003198:	f006 f930 	bl	80093fc <HAL_GPIO_ReadPin>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d115      	bne.n	80031ce <menu+0x1ed2>
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <menu+0x1f64>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00e      	beq.n	80031ce <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80031b0:	4b32      	ldr	r3, [pc, #200]	; (800327c <menu+0x1f80>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b30      	ldr	r3, [pc, #192]	; (800327c <menu+0x1f80>)
 80031ba:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <menu+0x1f80>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d902      	bls.n	80031ca <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80031c4:	4b2d      	ldr	r3, [pc, #180]	; (800327c <menu+0x1f80>)
 80031c6:	2202      	movs	r2, #2
 80031c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ca:	f001 fd2f 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ce:	2108      	movs	r1, #8
 80031d0:	4822      	ldr	r0, [pc, #136]	; (800325c <menu+0x1f60>)
 80031d2:	f006 f913 	bl	80093fc <HAL_GPIO_ReadPin>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d127      	bne.n	800322c <menu+0x1f30>
 80031dc:	4b20      	ldr	r3, [pc, #128]	; (8003260 <menu+0x1f64>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	f083 0301 	eor.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d020      	beq.n	800322c <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <menu+0x1f80>)
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <menu+0x1f6c>)
 80031f0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <menu+0x1f80>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d003      	beq.n	8003202 <menu+0x1f06>
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <menu+0x1f80>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d106      	bne.n	8003210 <menu+0x1f14>
				calismaSekli = 0;
 8003202:	4b25      	ldr	r3, [pc, #148]	; (8003298 <menu+0x1f9c>)
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <menu+0x1f9c>)
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	4b16      	ldr	r3, [pc, #88]	; (8003268 <menu+0x1f6c>)
 800320e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <menu+0x1f80>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <menu+0x1fa0>)
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <menu+0x1fa0>)
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <menu+0x1f6c>)
 8003224:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <menu+0x1f70>)
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <menu+0x1f74>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b12      	cmp	r3, #18
 8003232:	f040 80d5 	bne.w	80033e0 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <menu+0x1f80>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d13c      	bne.n	80032b8 <menu+0x1fbc>
			if(dilSecim == 0) {
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <menu+0x1f58>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d12e      	bne.n	80032a4 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003246:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <menu+0x1fa4>)
 8003248:	2101      	movs	r1, #1
 800324a:	2001      	movs	r0, #1
 800324c:	f004 fdb0 	bl	8007db0 <lcd_print>
 8003250:	e048      	b.n	80032e4 <menu+0x1fe8>
 8003252:	bf00      	nop
 8003254:	20000255 	.word	0x20000255
 8003258:	0800d444 	.word	0x0800d444
 800325c:	40010800 	.word	0x40010800
 8003260:	20000263 	.word	0x20000263
 8003264:	20000242 	.word	0x20000242
 8003268:	20000118 	.word	0x20000118
 800326c:	20000260 	.word	0x20000260
 8003270:	20000234 	.word	0x20000234
 8003274:	0800d7c0 	.word	0x0800d7c0
 8003278:	0800d7d4 	.word	0x0800d7d4
 800327c:	20000243 	.word	0x20000243
 8003280:	0800d7e8 	.word	0x0800d7e8
 8003284:	0800d7f8 	.word	0x0800d7f8
 8003288:	0800d808 	.word	0x0800d808
 800328c:	0800d818 	.word	0x0800d818
 8003290:	0800d3d0 	.word	0x0800d3d0
 8003294:	0800d3e4 	.word	0x0800d3e4
 8003298:	20000235 	.word	0x20000235
 800329c:	20000246 	.word	0x20000246
 80032a0:	0800d828 	.word	0x0800d828
			} else if(dilSecim == 1) {
 80032a4:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <menu+0x2198>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d11b      	bne.n	80032e4 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80032ac:	4a7a      	ldr	r2, [pc, #488]	; (8003498 <menu+0x219c>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	2001      	movs	r0, #1
 80032b2:	f004 fd7d 	bl	8007db0 <lcd_print>
 80032b6:	e015      	b.n	80032e4 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032b8:	4b78      	ldr	r3, [pc, #480]	; (800349c <menu+0x21a0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d111      	bne.n	80032e4 <menu+0x1fe8>
			if(dilSecim == 0){
 80032c0:	4b74      	ldr	r3, [pc, #464]	; (8003494 <menu+0x2198>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80032c8:	4a75      	ldr	r2, [pc, #468]	; (80034a0 <menu+0x21a4>)
 80032ca:	2101      	movs	r1, #1
 80032cc:	2001      	movs	r0, #1
 80032ce:	f004 fd6f 	bl	8007db0 <lcd_print>
			}
			if(dilSecim == 1){
 80032d2:	4b70      	ldr	r3, [pc, #448]	; (8003494 <menu+0x2198>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d104      	bne.n	80032e4 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80032da:	4a72      	ldr	r2, [pc, #456]	; (80034a4 <menu+0x21a8>)
 80032dc:	2101      	movs	r1, #1
 80032de:	2001      	movs	r0, #1
 80032e0:	f004 fd66 	bl	8007db0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80032e4:	4b70      	ldr	r3, [pc, #448]	; (80034a8 <menu+0x21ac>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d113      	bne.n	8003314 <menu+0x2018>
			if(dilSecim == 0) {
 80032ec:	4b69      	ldr	r3, [pc, #420]	; (8003494 <menu+0x2198>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80032f4:	4a6d      	ldr	r2, [pc, #436]	; (80034ac <menu+0x21b0>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	2002      	movs	r0, #2
 80032fa:	f004 fd59 	bl	8007db0 <lcd_print>
 80032fe:	e020      	b.n	8003342 <menu+0x2046>
			} else if(dilSecim == 1){
 8003300:	4b64      	ldr	r3, [pc, #400]	; (8003494 <menu+0x2198>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d11c      	bne.n	8003342 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003308:	4a69      	ldr	r2, [pc, #420]	; (80034b0 <menu+0x21b4>)
 800330a:	2101      	movs	r1, #1
 800330c:	2002      	movs	r0, #2
 800330e:	f004 fd4f 	bl	8007db0 <lcd_print>
 8003312:	e016      	b.n	8003342 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003314:	4b64      	ldr	r3, [pc, #400]	; (80034a8 <menu+0x21ac>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d112      	bne.n	8003342 <menu+0x2046>
			if(dilSecim == 0){
 800331c:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <menu+0x2198>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003324:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <menu+0x21b8>)
 8003326:	2101      	movs	r1, #1
 8003328:	2002      	movs	r0, #2
 800332a:	f004 fd41 	bl	8007db0 <lcd_print>
 800332e:	e008      	b.n	8003342 <menu+0x2046>
			} else if(dilSecim == 1){
 8003330:	4b58      	ldr	r3, [pc, #352]	; (8003494 <menu+0x2198>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d104      	bne.n	8003342 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003338:	4a5f      	ldr	r2, [pc, #380]	; (80034b8 <menu+0x21bc>)
 800333a:	2101      	movs	r1, #1
 800333c:	2002      	movs	r0, #2
 800333e:	f004 fd37 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003342:	2102      	movs	r1, #2
 8003344:	485d      	ldr	r0, [pc, #372]	; (80034bc <menu+0x21c0>)
 8003346:	f006 f859 	bl	80093fc <HAL_GPIO_ReadPin>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d115      	bne.n	800337c <menu+0x2080>
 8003350:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <menu+0x21c4>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00e      	beq.n	800337c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800335e:	4b52      	ldr	r3, [pc, #328]	; (80034a8 <menu+0x21ac>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4b50      	ldr	r3, [pc, #320]	; (80034a8 <menu+0x21ac>)
 8003368:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800336a:	4b4f      	ldr	r3, [pc, #316]	; (80034a8 <menu+0x21ac>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d902      	bls.n	8003378 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003372:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <menu+0x21ac>)
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003378:	f001 fc58 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800337c:	2104      	movs	r1, #4
 800337e:	484f      	ldr	r0, [pc, #316]	; (80034bc <menu+0x21c0>)
 8003380:	f006 f83c 	bl	80093fc <HAL_GPIO_ReadPin>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d115      	bne.n	80033b6 <menu+0x20ba>
 800338a:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <menu+0x21c4>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003398:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <menu+0x21ac>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	3b01      	subs	r3, #1
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <menu+0x21ac>)
 80033a2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80033a4:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <menu+0x21ac>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80033ac:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <menu+0x21ac>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033b2:	f001 fc3b 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033b6:	2108      	movs	r1, #8
 80033b8:	4840      	ldr	r0, [pc, #256]	; (80034bc <menu+0x21c0>)
 80033ba:	f006 f81f 	bl	80093fc <HAL_GPIO_ReadPin>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10d      	bne.n	80033e0 <menu+0x20e4>
 80033c4:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <menu+0x21c4>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	f083 0301 	eor.w	r3, r3, #1
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d006      	beq.n	80033e0 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80033d2:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <menu+0x21ac>)
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <menu+0x21c8>)
 80033d8:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <menu+0x21cc>)
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80033e0:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <menu+0x21d0>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b13      	cmp	r3, #19
 80033e6:	f040 80d5 	bne.w	8003594 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80033ea:	4b2c      	ldr	r3, [pc, #176]	; (800349c <menu+0x21a0>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d113      	bne.n	800341a <menu+0x211e>
			if(dilSecim == 0) {
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <menu+0x2198>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d105      	bne.n	8003406 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80033fa:	4a35      	ldr	r2, [pc, #212]	; (80034d0 <menu+0x21d4>)
 80033fc:	2101      	movs	r1, #1
 80033fe:	2001      	movs	r0, #1
 8003400:	f004 fcd6 	bl	8007db0 <lcd_print>
 8003404:	e01f      	b.n	8003446 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003406:	4b23      	ldr	r3, [pc, #140]	; (8003494 <menu+0x2198>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d11b      	bne.n	8003446 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800340e:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <menu+0x21d8>)
 8003410:	2101      	movs	r1, #1
 8003412:	2001      	movs	r0, #1
 8003414:	f004 fccc 	bl	8007db0 <lcd_print>
 8003418:	e015      	b.n	8003446 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <menu+0x21a0>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d111      	bne.n	8003446 <menu+0x214a>
			if(dilSecim == 0) {
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <menu+0x2198>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800342a:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <menu+0x21dc>)
 800342c:	2101      	movs	r1, #1
 800342e:	2001      	movs	r0, #1
 8003430:	f004 fcbe 	bl	8007db0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003434:	4b17      	ldr	r3, [pc, #92]	; (8003494 <menu+0x2198>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d104      	bne.n	8003446 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <menu+0x21e0>)
 800343e:	2101      	movs	r1, #1
 8003440:	2001      	movs	r0, #1
 8003442:	f004 fcb5 	bl	8007db0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <menu+0x21e4>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <menu+0x217a>
			if(dilSecim == 0) {
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <menu+0x2198>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003456:	4a15      	ldr	r2, [pc, #84]	; (80034ac <menu+0x21b0>)
 8003458:	2101      	movs	r1, #1
 800345a:	2002      	movs	r0, #2
 800345c:	f004 fca8 	bl	8007db0 <lcd_print>
 8003460:	e049      	b.n	80034f6 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <menu+0x2198>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d145      	bne.n	80034f6 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800346a:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <menu+0x21b4>)
 800346c:	2101      	movs	r1, #1
 800346e:	2002      	movs	r0, #2
 8003470:	f004 fc9e 	bl	8007db0 <lcd_print>
 8003474:	e03f      	b.n	80034f6 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <menu+0x21e4>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d13b      	bne.n	80034f6 <menu+0x21fa>
			if(dilSecim == 0) {
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <menu+0x2198>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d12e      	bne.n	80034e4 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003486:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <menu+0x21b8>)
 8003488:	2101      	movs	r1, #1
 800348a:	2002      	movs	r0, #2
 800348c:	f004 fc90 	bl	8007db0 <lcd_print>
 8003490:	e031      	b.n	80034f6 <menu+0x21fa>
 8003492:	bf00      	nop
 8003494:	20000255 	.word	0x20000255
 8003498:	0800d83c 	.word	0x0800d83c
 800349c:	20000243 	.word	0x20000243
 80034a0:	0800d84c 	.word	0x0800d84c
 80034a4:	0800d860 	.word	0x0800d860
 80034a8:	20000244 	.word	0x20000244
 80034ac:	0800d3d0 	.word	0x0800d3d0
 80034b0:	0800d3e4 	.word	0x0800d3e4
 80034b4:	0800d430 	.word	0x0800d430
 80034b8:	0800d444 	.word	0x0800d444
 80034bc:	40010800 	.word	0x40010800
 80034c0:	20000263 	.word	0x20000263
 80034c4:	20000118 	.word	0x20000118
 80034c8:	20000260 	.word	0x20000260
 80034cc:	20000234 	.word	0x20000234
 80034d0:	0800d874 	.word	0x0800d874
 80034d4:	0800d888 	.word	0x0800d888
 80034d8:	0800d89c 	.word	0x0800d89c
 80034dc:	0800d8b0 	.word	0x0800d8b0
 80034e0:	20000245 	.word	0x20000245
			} else if(dilSecim == 1) {
 80034e4:	4b90      	ldr	r3, [pc, #576]	; (8003728 <menu+0x242c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d104      	bne.n	80034f6 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80034ec:	4a8f      	ldr	r2, [pc, #572]	; (800372c <menu+0x2430>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	2002      	movs	r0, #2
 80034f2:	f004 fc5d 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034f6:	2102      	movs	r1, #2
 80034f8:	488d      	ldr	r0, [pc, #564]	; (8003730 <menu+0x2434>)
 80034fa:	f005 ff7f 	bl	80093fc <HAL_GPIO_ReadPin>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d115      	bne.n	8003530 <menu+0x2234>
 8003504:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <menu+0x2438>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f083 0301 	eor.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003512:	4b89      	ldr	r3, [pc, #548]	; (8003738 <menu+0x243c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b87      	ldr	r3, [pc, #540]	; (8003738 <menu+0x243c>)
 800351c:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800351e:	4b86      	ldr	r3, [pc, #536]	; (8003738 <menu+0x243c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d902      	bls.n	800352c <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003526:	4b84      	ldr	r3, [pc, #528]	; (8003738 <menu+0x243c>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800352c:	f001 fb7e 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003530:	2104      	movs	r1, #4
 8003532:	487f      	ldr	r0, [pc, #508]	; (8003730 <menu+0x2434>)
 8003534:	f005 ff62 	bl	80093fc <HAL_GPIO_ReadPin>
 8003538:	4603      	mov	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d115      	bne.n	800356a <menu+0x226e>
 800353e:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <menu+0x2438>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	f083 0301 	eor.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00e      	beq.n	800356a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800354c:	4b7a      	ldr	r3, [pc, #488]	; (8003738 <menu+0x243c>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	3b01      	subs	r3, #1
 8003552:	b2da      	uxtb	r2, r3
 8003554:	4b78      	ldr	r3, [pc, #480]	; (8003738 <menu+0x243c>)
 8003556:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003558:	4b77      	ldr	r3, [pc, #476]	; (8003738 <menu+0x243c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003560:	4b75      	ldr	r3, [pc, #468]	; (8003738 <menu+0x243c>)
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003566:	f001 fb61 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800356a:	2108      	movs	r1, #8
 800356c:	4870      	ldr	r0, [pc, #448]	; (8003730 <menu+0x2434>)
 800356e:	f005 ff45 	bl	80093fc <HAL_GPIO_ReadPin>
 8003572:	4603      	mov	r3, r0
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10d      	bne.n	8003594 <menu+0x2298>
 8003578:	4b6e      	ldr	r3, [pc, #440]	; (8003734 <menu+0x2438>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	f083 0301 	eor.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003586:	4b6c      	ldr	r3, [pc, #432]	; (8003738 <menu+0x243c>)
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	4b6c      	ldr	r3, [pc, #432]	; (800373c <menu+0x2440>)
 800358c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800358e:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <menu+0x2444>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003594:	4b6b      	ldr	r3, [pc, #428]	; (8003744 <menu+0x2448>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b14      	cmp	r3, #20
 800359a:	f040 80b5 	bne.w	8003708 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800359e:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <menu+0x244c>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d113      	bne.n	80035ce <menu+0x22d2>
			if(dilSecim == 0) {
 80035a6:	4b60      	ldr	r3, [pc, #384]	; (8003728 <menu+0x242c>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d105      	bne.n	80035ba <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80035ae:	4a67      	ldr	r2, [pc, #412]	; (800374c <menu+0x2450>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	2001      	movs	r0, #1
 80035b4:	f004 fbfc 	bl	8007db0 <lcd_print>
 80035b8:	e020      	b.n	80035fc <menu+0x2300>
			} else if(dilSecim == 1) {
 80035ba:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <menu+0x242c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d11c      	bne.n	80035fc <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80035c2:	4a63      	ldr	r2, [pc, #396]	; (8003750 <menu+0x2454>)
 80035c4:	2101      	movs	r1, #1
 80035c6:	2001      	movs	r0, #1
 80035c8:	f004 fbf2 	bl	8007db0 <lcd_print>
 80035cc:	e016      	b.n	80035fc <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80035ce:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <menu+0x244c>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d112      	bne.n	80035fc <menu+0x2300>
			if(dilSecim == 0) {
 80035d6:	4b54      	ldr	r3, [pc, #336]	; (8003728 <menu+0x242c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80035de:	4a5d      	ldr	r2, [pc, #372]	; (8003754 <menu+0x2458>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	2001      	movs	r0, #1
 80035e4:	f004 fbe4 	bl	8007db0 <lcd_print>
 80035e8:	e008      	b.n	80035fc <menu+0x2300>
			} else if(dilSecim == 1) {
 80035ea:	4b4f      	ldr	r3, [pc, #316]	; (8003728 <menu+0x242c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d104      	bne.n	80035fc <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80035f2:	4a59      	ldr	r2, [pc, #356]	; (8003758 <menu+0x245c>)
 80035f4:	2101      	movs	r1, #1
 80035f6:	2001      	movs	r0, #1
 80035f8:	f004 fbda 	bl	8007db0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80035fc:	4b57      	ldr	r3, [pc, #348]	; (800375c <menu+0x2460>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d113      	bne.n	800362c <menu+0x2330>
			if(dilSecim == 0) {
 8003604:	4b48      	ldr	r3, [pc, #288]	; (8003728 <menu+0x242c>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 800360c:	4a54      	ldr	r2, [pc, #336]	; (8003760 <menu+0x2464>)
 800360e:	2101      	movs	r1, #1
 8003610:	2002      	movs	r0, #2
 8003612:	f004 fbcd 	bl	8007db0 <lcd_print>
 8003616:	e020      	b.n	800365a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003618:	4b43      	ldr	r3, [pc, #268]	; (8003728 <menu+0x242c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d11c      	bne.n	800365a <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003620:	4a50      	ldr	r2, [pc, #320]	; (8003764 <menu+0x2468>)
 8003622:	2101      	movs	r1, #1
 8003624:	2002      	movs	r0, #2
 8003626:	f004 fbc3 	bl	8007db0 <lcd_print>
 800362a:	e016      	b.n	800365a <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 800362c:	4b4b      	ldr	r3, [pc, #300]	; (800375c <menu+0x2460>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d112      	bne.n	800365a <menu+0x235e>
			if(dilSecim == 0) {
 8003634:	4b3c      	ldr	r3, [pc, #240]	; (8003728 <menu+0x242c>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 800363c:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <menu+0x246c>)
 800363e:	2101      	movs	r1, #1
 8003640:	2002      	movs	r0, #2
 8003642:	f004 fbb5 	bl	8007db0 <lcd_print>
 8003646:	e008      	b.n	800365a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003648:	4b37      	ldr	r3, [pc, #220]	; (8003728 <menu+0x242c>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d104      	bne.n	800365a <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003650:	4a46      	ldr	r2, [pc, #280]	; (800376c <menu+0x2470>)
 8003652:	2101      	movs	r1, #1
 8003654:	2002      	movs	r0, #2
 8003656:	f004 fbab 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800365a:	2102      	movs	r1, #2
 800365c:	4834      	ldr	r0, [pc, #208]	; (8003730 <menu+0x2434>)
 800365e:	f005 fecd 	bl	80093fc <HAL_GPIO_ReadPin>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d119      	bne.n	800369c <menu+0x23a0>
 8003668:	4b32      	ldr	r3, [pc, #200]	; (8003734 <menu+0x2438>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f083 0301 	eor.w	r3, r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <menu+0x23a0>
 8003676:	4b34      	ldr	r3, [pc, #208]	; (8003748 <menu+0x244c>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d10e      	bne.n	800369c <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <menu+0x2460>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4b35      	ldr	r3, [pc, #212]	; (800375c <menu+0x2460>)
 8003688:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800368a:	4b34      	ldr	r3, [pc, #208]	; (800375c <menu+0x2460>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d902      	bls.n	8003698 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003692:	4b32      	ldr	r3, [pc, #200]	; (800375c <menu+0x2460>)
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003698:	f001 fac8 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800369c:	2104      	movs	r1, #4
 800369e:	4824      	ldr	r0, [pc, #144]	; (8003730 <menu+0x2434>)
 80036a0:	f005 feac 	bl	80093fc <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d119      	bne.n	80036de <menu+0x23e2>
 80036aa:	4b22      	ldr	r3, [pc, #136]	; (8003734 <menu+0x2438>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	f083 0301 	eor.w	r3, r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <menu+0x23e2>
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <menu+0x244c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d10e      	bne.n	80036de <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80036c0:	4b26      	ldr	r3, [pc, #152]	; (800375c <menu+0x2460>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <menu+0x2460>)
 80036ca:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80036cc:	4b23      	ldr	r3, [pc, #140]	; (800375c <menu+0x2460>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <menu+0x2460>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036da:	f001 faa7 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036de:	2108      	movs	r1, #8
 80036e0:	4813      	ldr	r0, [pc, #76]	; (8003730 <menu+0x2434>)
 80036e2:	f005 fe8b 	bl	80093fc <HAL_GPIO_ReadPin>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10d      	bne.n	8003708 <menu+0x240c>
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <menu+0x2438>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	f083 0301 	eor.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <menu+0x2460>)
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <menu+0x2440>)
 8003700:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003702:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <menu+0x2444>)
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <menu+0x2448>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b15      	cmp	r3, #21
 800370e:	f040 80c2 	bne.w	8003896 <menu+0x259a>
		if(dilSecim == 0) {
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <menu+0x242c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d12c      	bne.n	8003774 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <menu+0x2474>)
 800371c:	2101      	movs	r1, #1
 800371e:	2001      	movs	r0, #1
 8003720:	f004 fb46 	bl	8007db0 <lcd_print>
 8003724:	e02f      	b.n	8003786 <menu+0x248a>
 8003726:	bf00      	nop
 8003728:	20000255 	.word	0x20000255
 800372c:	0800d444 	.word	0x0800d444
 8003730:	40010800 	.word	0x40010800
 8003734:	20000263 	.word	0x20000263
 8003738:	20000245 	.word	0x20000245
 800373c:	20000118 	.word	0x20000118
 8003740:	20000260 	.word	0x20000260
 8003744:	20000234 	.word	0x20000234
 8003748:	20000243 	.word	0x20000243
 800374c:	0800d8c4 	.word	0x0800d8c4
 8003750:	0800d8d8 	.word	0x0800d8d8
 8003754:	0800d8ec 	.word	0x0800d8ec
 8003758:	0800d900 	.word	0x0800d900
 800375c:	20000246 	.word	0x20000246
 8003760:	0800d914 	.word	0x0800d914
 8003764:	0800d928 	.word	0x0800d928
 8003768:	0800d938 	.word	0x0800d938
 800376c:	0800d94c 	.word	0x0800d94c
 8003770:	0800d95c 	.word	0x0800d95c
		} else if(dilSecim == 1) {
 8003774:	4b9c      	ldr	r3, [pc, #624]	; (80039e8 <menu+0x26ec>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d104      	bne.n	8003786 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800377c:	4a9b      	ldr	r2, [pc, #620]	; (80039ec <menu+0x26f0>)
 800377e:	2101      	movs	r1, #1
 8003780:	2001      	movs	r0, #1
 8003782:	f004 fb15 	bl	8007db0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003786:	4b9a      	ldr	r3, [pc, #616]	; (80039f0 <menu+0x26f4>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d112      	bne.n	80037b4 <menu+0x24b8>
			if(dilSecim == 0) {
 800378e:	4b96      	ldr	r3, [pc, #600]	; (80039e8 <menu+0x26ec>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003796:	4a97      	ldr	r2, [pc, #604]	; (80039f4 <menu+0x26f8>)
 8003798:	2101      	movs	r1, #1
 800379a:	2002      	movs	r0, #2
 800379c:	f004 fb08 	bl	8007db0 <lcd_print>
			}
			if(dilSecim == 1) {
 80037a0:	4b91      	ldr	r3, [pc, #580]	; (80039e8 <menu+0x26ec>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d11c      	bne.n	80037e2 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80037a8:	4a93      	ldr	r2, [pc, #588]	; (80039f8 <menu+0x26fc>)
 80037aa:	2101      	movs	r1, #1
 80037ac:	2002      	movs	r0, #2
 80037ae:	f004 faff 	bl	8007db0 <lcd_print>
 80037b2:	e016      	b.n	80037e2 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80037b4:	4b8e      	ldr	r3, [pc, #568]	; (80039f0 <menu+0x26f4>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d112      	bne.n	80037e2 <menu+0x24e6>
			if(dilSecim == 0) {
 80037bc:	4b8a      	ldr	r3, [pc, #552]	; (80039e8 <menu+0x26ec>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80037c4:	4a8d      	ldr	r2, [pc, #564]	; (80039fc <menu+0x2700>)
 80037c6:	2101      	movs	r1, #1
 80037c8:	2002      	movs	r0, #2
 80037ca:	f004 faf1 	bl	8007db0 <lcd_print>
 80037ce:	e008      	b.n	80037e2 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80037d0:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <menu+0x26ec>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d104      	bne.n	80037e2 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80037d8:	4a89      	ldr	r2, [pc, #548]	; (8003a00 <menu+0x2704>)
 80037da:	2101      	movs	r1, #1
 80037dc:	2002      	movs	r0, #2
 80037de:	f004 fae7 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037e2:	2102      	movs	r1, #2
 80037e4:	4887      	ldr	r0, [pc, #540]	; (8003a04 <menu+0x2708>)
 80037e6:	f005 fe09 	bl	80093fc <HAL_GPIO_ReadPin>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d115      	bne.n	800381c <menu+0x2520>
 80037f0:	4b85      	ldr	r3, [pc, #532]	; (8003a08 <menu+0x270c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	f083 0301 	eor.w	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80037fe:	4b7c      	ldr	r3, [pc, #496]	; (80039f0 <menu+0x26f4>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <menu+0x26f4>)
 8003808:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800380a:	4b79      	ldr	r3, [pc, #484]	; (80039f0 <menu+0x26f4>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d902      	bls.n	8003818 <menu+0x251c>
				platformSilindirTipi = 0;
 8003812:	4b77      	ldr	r3, [pc, #476]	; (80039f0 <menu+0x26f4>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003818:	f001 fa08 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800381c:	2104      	movs	r1, #4
 800381e:	4879      	ldr	r0, [pc, #484]	; (8003a04 <menu+0x2708>)
 8003820:	f005 fdec 	bl	80093fc <HAL_GPIO_ReadPin>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d115      	bne.n	8003856 <menu+0x255a>
 800382a:	4b77      	ldr	r3, [pc, #476]	; (8003a08 <menu+0x270c>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	f083 0301 	eor.w	r3, r3, #1
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003838:	4b6d      	ldr	r3, [pc, #436]	; (80039f0 <menu+0x26f4>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	3b01      	subs	r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	4b6b      	ldr	r3, [pc, #428]	; (80039f0 <menu+0x26f4>)
 8003842:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003844:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <menu+0x26f4>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <menu+0x2556>
		   		platformSilindirTipi = 1;
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <menu+0x26f4>)
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003852:	f001 f9eb 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003856:	2108      	movs	r1, #8
 8003858:	486a      	ldr	r0, [pc, #424]	; (8003a04 <menu+0x2708>)
 800385a:	f005 fdcf 	bl	80093fc <HAL_GPIO_ReadPin>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d118      	bne.n	8003896 <menu+0x259a>
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <menu+0x270c>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	f083 0301 	eor.w	r3, r3, #1
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d011      	beq.n	8003896 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <menu+0x26f4>)
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <menu+0x2710>)
 8003878:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800387a:	4b5d      	ldr	r3, [pc, #372]	; (80039f0 <menu+0x26f4>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d106      	bne.n	8003890 <menu+0x2594>
				altLimit = 1;
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <menu+0x2714>)
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003888:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <menu+0x2714>)
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	4b5f      	ldr	r3, [pc, #380]	; (8003a0c <menu+0x2710>)
 800388e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003890:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <menu+0x2718>)
 8003892:	2201      	movs	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003896:	4b60      	ldr	r3, [pc, #384]	; (8003a18 <menu+0x271c>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b16      	cmp	r3, #22
 800389c:	f040 8081 	bne.w	80039a2 <menu+0x26a6>
		if(dilSecim == 0) {
 80038a0:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <menu+0x26ec>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d105      	bne.n	80038b4 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80038a8:	4a5c      	ldr	r2, [pc, #368]	; (8003a1c <menu+0x2720>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	2001      	movs	r0, #1
 80038ae:	f004 fa7f 	bl	8007db0 <lcd_print>
 80038b2:	e008      	b.n	80038c6 <menu+0x25ca>
		} else if(dilSecim == 1) {
 80038b4:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <menu+0x26ec>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d104      	bne.n	80038c6 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80038bc:	4a58      	ldr	r2, [pc, #352]	; (8003a20 <menu+0x2724>)
 80038be:	2101      	movs	r1, #1
 80038c0:	2001      	movs	r0, #1
 80038c2:	f004 fa75 	bl	8007db0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80038c6:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <menu+0x26ec>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80038ce:	4a55      	ldr	r2, [pc, #340]	; (8003a24 <menu+0x2728>)
 80038d0:	2101      	movs	r1, #1
 80038d2:	2002      	movs	r0, #2
 80038d4:	f004 fa6c 	bl	8007db0 <lcd_print>
 80038d8:	e008      	b.n	80038ec <menu+0x25f0>
			} else if(dilSecim == 1){
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <menu+0x26ec>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d104      	bne.n	80038ec <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80038e2:	4a51      	ldr	r2, [pc, #324]	; (8003a28 <menu+0x272c>)
 80038e4:	2101      	movs	r1, #1
 80038e6:	2002      	movs	r0, #2
 80038e8:	f004 fa62 	bl	8007db0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80038ec:	4b4f      	ldr	r3, [pc, #316]	; (8003a2c <menu+0x2730>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	220a      	movs	r2, #10
 80038f2:	494f      	ldr	r1, [pc, #316]	; (8003a30 <menu+0x2734>)
 80038f4:	4618      	mov	r0, r3
 80038f6:	f008 fdad 	bl	800c454 <itoa>
		lcd_print(2,16,snum);
 80038fa:	4a4d      	ldr	r2, [pc, #308]	; (8003a30 <menu+0x2734>)
 80038fc:	2110      	movs	r1, #16
 80038fe:	2002      	movs	r0, #2
 8003900:	f004 fa56 	bl	8007db0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003904:	2102      	movs	r1, #2
 8003906:	483f      	ldr	r0, [pc, #252]	; (8003a04 <menu+0x2708>)
 8003908:	f005 fd78 	bl	80093fc <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d115      	bne.n	800393e <menu+0x2642>
 8003912:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <menu+0x270c>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003920:	4b42      	ldr	r3, [pc, #264]	; (8003a2c <menu+0x2730>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <menu+0x2730>)
 800392a:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 800392c:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <menu+0x2730>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d902      	bls.n	800393a <menu+0x263e>
				yukariValfTmr = 0;
 8003934:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <menu+0x2730>)
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800393a:	f001 f977 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800393e:	2104      	movs	r1, #4
 8003940:	4830      	ldr	r0, [pc, #192]	; (8003a04 <menu+0x2708>)
 8003942:	f005 fd5b 	bl	80093fc <HAL_GPIO_ReadPin>
 8003946:	4603      	mov	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d115      	bne.n	8003978 <menu+0x267c>
 800394c:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <menu+0x270c>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	f083 0301 	eor.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800395a:	4b34      	ldr	r3, [pc, #208]	; (8003a2c <menu+0x2730>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	3b01      	subs	r3, #1
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <menu+0x2730>)
 8003964:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003966:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <menu+0x2730>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d902      	bls.n	8003974 <menu+0x2678>
		   		yukariValfTmr = 5;
 800396e:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <menu+0x2730>)
 8003970:	2205      	movs	r2, #5
 8003972:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003974:	f001 f95a 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003978:	2108      	movs	r1, #8
 800397a:	4822      	ldr	r0, [pc, #136]	; (8003a04 <menu+0x2708>)
 800397c:	f005 fd3e 	bl	80093fc <HAL_GPIO_ReadPin>
 8003980:	4603      	mov	r3, r0
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10d      	bne.n	80039a2 <menu+0x26a6>
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <menu+0x270c>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	f083 0301 	eor.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d006      	beq.n	80039a2 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <menu+0x2730>)
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <menu+0x2710>)
 800399a:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <menu+0x2718>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80039a2:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <menu+0x271c>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b17      	cmp	r3, #23
 80039a8:	f040 80ac 	bne.w	8003b04 <menu+0x2808>
		if(dilSecim == 0) {
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <menu+0x26ec>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80039b4:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <menu+0x2738>)
 80039b6:	2101      	movs	r1, #1
 80039b8:	2001      	movs	r0, #1
 80039ba:	f004 f9f9 	bl	8007db0 <lcd_print>
 80039be:	e008      	b.n	80039d2 <menu+0x26d6>
		} else if(dilSecim == 1) {
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <menu+0x26ec>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d104      	bne.n	80039d2 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80039c8:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <menu+0x273c>)
 80039ca:	2101      	movs	r1, #1
 80039cc:	2001      	movs	r0, #1
 80039ce:	f004 f9ef 	bl	8007db0 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <menu+0x26ec>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d130      	bne.n	8003a3c <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80039da:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <menu+0x2728>)
 80039dc:	2101      	movs	r1, #1
 80039de:	2002      	movs	r0, #2
 80039e0:	f004 f9e6 	bl	8007db0 <lcd_print>
 80039e4:	e033      	b.n	8003a4e <menu+0x2752>
 80039e6:	bf00      	nop
 80039e8:	20000255 	.word	0x20000255
 80039ec:	0800d970 	.word	0x0800d970
 80039f0:	20000247 	.word	0x20000247
 80039f4:	0800d914 	.word	0x0800d914
 80039f8:	0800d928 	.word	0x0800d928
 80039fc:	0800d938 	.word	0x0800d938
 8003a00:	0800d94c 	.word	0x0800d94c
 8003a04:	40010800 	.word	0x40010800
 8003a08:	20000263 	.word	0x20000263
 8003a0c:	20000118 	.word	0x20000118
 8003a10:	2000023a 	.word	0x2000023a
 8003a14:	20000260 	.word	0x20000260
 8003a18:	20000234 	.word	0x20000234
 8003a1c:	0800d980 	.word	0x0800d980
 8003a20:	0800d994 	.word	0x0800d994
 8003a24:	0800d634 	.word	0x0800d634
 8003a28:	0800d9a8 	.word	0x0800d9a8
 8003a2c:	20000248 	.word	0x20000248
 8003a30:	20000188 	.word	0x20000188
 8003a34:	0800d9b8 	.word	0x0800d9b8
 8003a38:	0800d9cc 	.word	0x0800d9cc
			} else if(dilSecim == 1) {
 8003a3c:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <menu+0x29a4>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d104      	bne.n	8003a4e <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003a44:	4a97      	ldr	r2, [pc, #604]	; (8003ca4 <menu+0x29a8>)
 8003a46:	2101      	movs	r1, #1
 8003a48:	2002      	movs	r0, #2
 8003a4a:	f004 f9b1 	bl	8007db0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003a4e:	4b96      	ldr	r3, [pc, #600]	; (8003ca8 <menu+0x29ac>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	220a      	movs	r2, #10
 8003a54:	4995      	ldr	r1, [pc, #596]	; (8003cac <menu+0x29b0>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f008 fcfc 	bl	800c454 <itoa>
		lcd_print(2,16,snum);
 8003a5c:	4a93      	ldr	r2, [pc, #588]	; (8003cac <menu+0x29b0>)
 8003a5e:	2110      	movs	r1, #16
 8003a60:	2002      	movs	r0, #2
 8003a62:	f004 f9a5 	bl	8007db0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a66:	2102      	movs	r1, #2
 8003a68:	4891      	ldr	r0, [pc, #580]	; (8003cb0 <menu+0x29b4>)
 8003a6a:	f005 fcc7 	bl	80093fc <HAL_GPIO_ReadPin>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d115      	bne.n	8003aa0 <menu+0x27a4>
 8003a74:	4b8f      	ldr	r3, [pc, #572]	; (8003cb4 <menu+0x29b8>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	f083 0301 	eor.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00e      	beq.n	8003aa0 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003a82:	4b89      	ldr	r3, [pc, #548]	; (8003ca8 <menu+0x29ac>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	4b87      	ldr	r3, [pc, #540]	; (8003ca8 <menu+0x29ac>)
 8003a8c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003a8e:	4b86      	ldr	r3, [pc, #536]	; (8003ca8 <menu+0x29ac>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d902      	bls.n	8003a9c <menu+0x27a0>
				asagiValfTmr = 0;
 8003a96:	4b84      	ldr	r3, [pc, #528]	; (8003ca8 <menu+0x29ac>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a9c:	f001 f8c6 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	4883      	ldr	r0, [pc, #524]	; (8003cb0 <menu+0x29b4>)
 8003aa4:	f005 fcaa 	bl	80093fc <HAL_GPIO_ReadPin>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d115      	bne.n	8003ada <menu+0x27de>
 8003aae:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <menu+0x29b8>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	f083 0301 	eor.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003abc:	4b7a      	ldr	r3, [pc, #488]	; (8003ca8 <menu+0x29ac>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b78      	ldr	r3, [pc, #480]	; (8003ca8 <menu+0x29ac>)
 8003ac6:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003ac8:	4b77      	ldr	r3, [pc, #476]	; (8003ca8 <menu+0x29ac>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b06      	cmp	r3, #6
 8003ace:	d902      	bls.n	8003ad6 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003ad0:	4b75      	ldr	r3, [pc, #468]	; (8003ca8 <menu+0x29ac>)
 8003ad2:	2205      	movs	r2, #5
 8003ad4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ad6:	f001 f8a9 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ada:	2108      	movs	r1, #8
 8003adc:	4874      	ldr	r0, [pc, #464]	; (8003cb0 <menu+0x29b4>)
 8003ade:	f005 fc8d 	bl	80093fc <HAL_GPIO_ReadPin>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d10d      	bne.n	8003b04 <menu+0x2808>
 8003ae8:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <menu+0x29b8>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	f083 0301 	eor.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003af6:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <menu+0x29ac>)
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	4b6f      	ldr	r3, [pc, #444]	; (8003cb8 <menu+0x29bc>)
 8003afc:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003afe:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <menu+0x29c0>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003b04:	4b6e      	ldr	r3, [pc, #440]	; (8003cc0 <menu+0x29c4>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b18      	cmp	r3, #24
 8003b0a:	f040 809d 	bne.w	8003c48 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003b0e:	4b6d      	ldr	r3, [pc, #436]	; (8003cc4 <menu+0x29c8>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d113      	bne.n	8003b3e <menu+0x2842>
			if(dilSecim == 0) {
 8003b16:	4b62      	ldr	r3, [pc, #392]	; (8003ca0 <menu+0x29a4>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003b1e:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <menu+0x29cc>)
 8003b20:	2101      	movs	r1, #1
 8003b22:	2001      	movs	r0, #1
 8003b24:	f004 f944 	bl	8007db0 <lcd_print>
 8003b28:	e020      	b.n	8003b6c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ca0 <menu+0x29a4>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d11c      	bne.n	8003b6c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003b32:	4a66      	ldr	r2, [pc, #408]	; (8003ccc <menu+0x29d0>)
 8003b34:	2101      	movs	r1, #1
 8003b36:	2001      	movs	r0, #1
 8003b38:	f004 f93a 	bl	8007db0 <lcd_print>
 8003b3c:	e016      	b.n	8003b6c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b3e:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <menu+0x29c8>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d112      	bne.n	8003b6c <menu+0x2870>
			if(dilSecim == 0) {
 8003b46:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <menu+0x29a4>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d105      	bne.n	8003b5a <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003b4e:	4a60      	ldr	r2, [pc, #384]	; (8003cd0 <menu+0x29d4>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	2001      	movs	r0, #1
 8003b54:	f004 f92c 	bl	8007db0 <lcd_print>
 8003b58:	e008      	b.n	8003b6c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b5a:	4b51      	ldr	r3, [pc, #324]	; (8003ca0 <menu+0x29a4>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d104      	bne.n	8003b6c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003b62:	4a5c      	ldr	r2, [pc, #368]	; (8003cd4 <menu+0x29d8>)
 8003b64:	2101      	movs	r1, #1
 8003b66:	2001      	movs	r0, #1
 8003b68:	f004 f922 	bl	8007db0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003b6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ca0 <menu+0x29a4>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <menu+0x29dc>)
 8003b76:	2101      	movs	r1, #1
 8003b78:	2002      	movs	r0, #2
 8003b7a:	f004 f919 	bl	8007db0 <lcd_print>
 8003b7e:	e008      	b.n	8003b92 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003b80:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <menu+0x29a4>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d104      	bne.n	8003b92 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003b88:	4a46      	ldr	r2, [pc, #280]	; (8003ca4 <menu+0x29a8>)
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	2002      	movs	r0, #2
 8003b8e:	f004 f90f 	bl	8007db0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003b92:	4b52      	ldr	r3, [pc, #328]	; (8003cdc <menu+0x29e0>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	220a      	movs	r2, #10
 8003b98:	4944      	ldr	r1, [pc, #272]	; (8003cac <menu+0x29b0>)
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f008 fc5a 	bl	800c454 <itoa>
		lcd_print(2, 16, snum);
 8003ba0:	4a42      	ldr	r2, [pc, #264]	; (8003cac <menu+0x29b0>)
 8003ba2:	2110      	movs	r1, #16
 8003ba4:	2002      	movs	r0, #2
 8003ba6:	f004 f903 	bl	8007db0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003baa:	2102      	movs	r1, #2
 8003bac:	4840      	ldr	r0, [pc, #256]	; (8003cb0 <menu+0x29b4>)
 8003bae:	f005 fc25 	bl	80093fc <HAL_GPIO_ReadPin>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d115      	bne.n	8003be4 <menu+0x28e8>
 8003bb8:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <menu+0x29b8>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	f083 0301 	eor.w	r3, r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003bc6:	4b45      	ldr	r3, [pc, #276]	; (8003cdc <menu+0x29e0>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <menu+0x29e0>)
 8003bd0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003bd2:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <menu+0x29e0>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d902      	bls.n	8003be0 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003bda:	4b40      	ldr	r3, [pc, #256]	; (8003cdc <menu+0x29e0>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003be0:	f001 f824 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003be4:	2104      	movs	r1, #4
 8003be6:	4832      	ldr	r0, [pc, #200]	; (8003cb0 <menu+0x29b4>)
 8003be8:	f005 fc08 	bl	80093fc <HAL_GPIO_ReadPin>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d115      	bne.n	8003c1e <menu+0x2922>
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <menu+0x29b8>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	f083 0301 	eor.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003c00:	4b36      	ldr	r3, [pc, #216]	; (8003cdc <menu+0x29e0>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <menu+0x29e0>)
 8003c0a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003c0c:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <menu+0x29e0>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d902      	bls.n	8003c1a <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <menu+0x29e0>)
 8003c16:	2205      	movs	r2, #5
 8003c18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c1a:	f001 f807 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c1e:	2108      	movs	r1, #8
 8003c20:	4823      	ldr	r0, [pc, #140]	; (8003cb0 <menu+0x29b4>)
 8003c22:	f005 fbeb 	bl	80093fc <HAL_GPIO_ReadPin>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10d      	bne.n	8003c48 <menu+0x294c>
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <menu+0x29b8>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f083 0301 	eor.w	r3, r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003c3a:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <menu+0x29e0>)
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <menu+0x29bc>)
 8003c40:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <menu+0x29c0>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <menu+0x29c4>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b19      	cmp	r3, #25
 8003c4e:	f040 80c4 	bne.w	8003dda <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003c52:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <menu+0x29c8>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d113      	bne.n	8003c82 <menu+0x2986>
			if(dilSecim == 0) {
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <menu+0x29a4>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d105      	bne.n	8003c6e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <menu+0x29e4>)
 8003c64:	2101      	movs	r1, #1
 8003c66:	2001      	movs	r0, #1
 8003c68:	f004 f8a2 	bl	8007db0 <lcd_print>
 8003c6c:	e047      	b.n	8003cfe <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <menu+0x29a4>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d143      	bne.n	8003cfe <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c76:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <menu+0x29e8>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	f004 f898 	bl	8007db0 <lcd_print>
 8003c80:	e03d      	b.n	8003cfe <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <menu+0x29c8>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d139      	bne.n	8003cfe <menu+0x2a02>
			if(dilSecim == 0) {
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <menu+0x29a4>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d12c      	bne.n	8003cec <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003c92:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <menu+0x29ec>)
 8003c94:	2101      	movs	r1, #1
 8003c96:	2001      	movs	r0, #1
 8003c98:	f004 f88a 	bl	8007db0 <lcd_print>
 8003c9c:	e02f      	b.n	8003cfe <menu+0x2a02>
 8003c9e:	bf00      	nop
 8003ca0:	20000255 	.word	0x20000255
 8003ca4:	0800d9a8 	.word	0x0800d9a8
 8003ca8:	20000249 	.word	0x20000249
 8003cac:	20000188 	.word	0x20000188
 8003cb0:	40010800 	.word	0x40010800
 8003cb4:	20000263 	.word	0x20000263
 8003cb8:	20000118 	.word	0x20000118
 8003cbc:	20000260 	.word	0x20000260
 8003cc0:	20000234 	.word	0x20000234
 8003cc4:	20000243 	.word	0x20000243
 8003cc8:	0800d9e0 	.word	0x0800d9e0
 8003ccc:	0800d9f4 	.word	0x0800d9f4
 8003cd0:	0800da08 	.word	0x0800da08
 8003cd4:	0800da1c 	.word	0x0800da1c
 8003cd8:	0800d634 	.word	0x0800d634
 8003cdc:	2000024a 	.word	0x2000024a
 8003ce0:	0800da30 	.word	0x0800da30
 8003ce4:	0800da44 	.word	0x0800da44
 8003ce8:	0800da58 	.word	0x0800da58
			} else if(dilSecim == 1) {
 8003cec:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <menu+0x2bc0>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d104      	bne.n	8003cfe <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003cf4:	4a72      	ldr	r2, [pc, #456]	; (8003ec0 <menu+0x2bc4>)
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f004 f859 	bl	8007db0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003cfe:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <menu+0x2bc0>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d06:	4a6f      	ldr	r2, [pc, #444]	; (8003ec4 <menu+0x2bc8>)
 8003d08:	2101      	movs	r1, #1
 8003d0a:	2002      	movs	r0, #2
 8003d0c:	f004 f850 	bl	8007db0 <lcd_print>
 8003d10:	e008      	b.n	8003d24 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003d12:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <menu+0x2bc0>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d104      	bne.n	8003d24 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003d1a:	4a6b      	ldr	r2, [pc, #428]	; (8003ec8 <menu+0x2bcc>)
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	2002      	movs	r0, #2
 8003d20:	f004 f846 	bl	8007db0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003d24:	4b69      	ldr	r3, [pc, #420]	; (8003ecc <menu+0x2bd0>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	220a      	movs	r2, #10
 8003d2a:	4969      	ldr	r1, [pc, #420]	; (8003ed0 <menu+0x2bd4>)
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f008 fb91 	bl	800c454 <itoa>
		lcd_print(2,16,snum);
 8003d32:	4a67      	ldr	r2, [pc, #412]	; (8003ed0 <menu+0x2bd4>)
 8003d34:	2110      	movs	r1, #16
 8003d36:	2002      	movs	r0, #2
 8003d38:	f004 f83a 	bl	8007db0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	4865      	ldr	r0, [pc, #404]	; (8003ed4 <menu+0x2bd8>)
 8003d40:	f005 fb5c 	bl	80093fc <HAL_GPIO_ReadPin>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d115      	bne.n	8003d76 <menu+0x2a7a>
 8003d4a:	4b63      	ldr	r3, [pc, #396]	; (8003ed8 <menu+0x2bdc>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	f083 0301 	eor.w	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003d58:	4b5c      	ldr	r3, [pc, #368]	; (8003ecc <menu+0x2bd0>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <menu+0x2bd0>)
 8003d62:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <menu+0x2bd0>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b05      	cmp	r3, #5
 8003d6a:	d902      	bls.n	8003d72 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003d6c:	4b57      	ldr	r3, [pc, #348]	; (8003ecc <menu+0x2bd0>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d72:	f000 ff5b 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d76:	2104      	movs	r1, #4
 8003d78:	4856      	ldr	r0, [pc, #344]	; (8003ed4 <menu+0x2bd8>)
 8003d7a:	f005 fb3f 	bl	80093fc <HAL_GPIO_ReadPin>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d115      	bne.n	8003db0 <menu+0x2ab4>
 8003d84:	4b54      	ldr	r3, [pc, #336]	; (8003ed8 <menu+0x2bdc>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f083 0301 	eor.w	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00e      	beq.n	8003db0 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003d92:	4b4e      	ldr	r3, [pc, #312]	; (8003ecc <menu+0x2bd0>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4b4c      	ldr	r3, [pc, #304]	; (8003ecc <menu+0x2bd0>)
 8003d9c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <menu+0x2bd0>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d902      	bls.n	8003dac <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003da6:	4b49      	ldr	r3, [pc, #292]	; (8003ecc <menu+0x2bd0>)
 8003da8:	2205      	movs	r2, #5
 8003daa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dac:	f000 ff3e 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003db0:	2108      	movs	r1, #8
 8003db2:	4848      	ldr	r0, [pc, #288]	; (8003ed4 <menu+0x2bd8>)
 8003db4:	f005 fb22 	bl	80093fc <HAL_GPIO_ReadPin>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d10d      	bne.n	8003dda <menu+0x2ade>
 8003dbe:	4b46      	ldr	r3, [pc, #280]	; (8003ed8 <menu+0x2bdc>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	f083 0301 	eor.w	r3, r3, #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <menu+0x2bd0>)
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	4b42      	ldr	r3, [pc, #264]	; (8003edc <menu+0x2be0>)
 8003dd2:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003dd4:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <menu+0x2be4>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003dda:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <menu+0x2be8>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b1a      	cmp	r3, #26
 8003de0:	f040 80ec 	bne.w	8003fbc <menu+0x2cc0>
		if(dilSecim == 0) {
 8003de4:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <menu+0x2bc0>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003dec:	4a3e      	ldr	r2, [pc, #248]	; (8003ee8 <menu+0x2bec>)
 8003dee:	2101      	movs	r1, #1
 8003df0:	2001      	movs	r0, #1
 8003df2:	f003 ffdd 	bl	8007db0 <lcd_print>
 8003df6:	e008      	b.n	8003e0a <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003df8:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <menu+0x2bc0>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d104      	bne.n	8003e0a <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003e00:	4a3a      	ldr	r2, [pc, #232]	; (8003eec <menu+0x2bf0>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	2001      	movs	r0, #1
 8003e06:	f003 ffd3 	bl	8007db0 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <menu+0x2bf4>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b63      	cmp	r3, #99	; 0x63
 8003e10:	d91e      	bls.n	8003e50 <menu+0x2b54>
			if(dilSecim == 0) {
 8003e12:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <menu+0x2bc0>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <menu+0x2bc8>)
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	2002      	movs	r0, #2
 8003e20:	f003 ffc6 	bl	8007db0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <menu+0x2bc0>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d104      	bne.n	8003e36 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <menu+0x2bcc>)
 8003e2e:	2101      	movs	r1, #1
 8003e30:	2002      	movs	r0, #2
 8003e32:	f003 ffbd 	bl	8007db0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e36:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <menu+0x2bf4>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	4924      	ldr	r1, [pc, #144]	; (8003ed0 <menu+0x2bd4>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f008 fb08 	bl	800c454 <itoa>
			lcd_print(2,14,snum);
 8003e44:	4a22      	ldr	r2, [pc, #136]	; (8003ed0 <menu+0x2bd4>)
 8003e46:	210e      	movs	r1, #14
 8003e48:	2002      	movs	r0, #2
 8003e4a:	f003 ffb1 	bl	8007db0 <lcd_print>
 8003e4e:	e066      	b.n	8003f1e <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <menu+0x2bf4>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b09      	cmp	r3, #9
 8003e56:	d923      	bls.n	8003ea0 <menu+0x2ba4>
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <menu+0x2bf4>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b63      	cmp	r3, #99	; 0x63
 8003e5e:	d81f      	bhi.n	8003ea0 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <menu+0x2bc0>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e68:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <menu+0x2bc8>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	f003 ff9f 	bl	8007db0 <lcd_print>
 8003e72:	e008      	b.n	8003e86 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <menu+0x2bc0>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d104      	bne.n	8003e86 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003e7c:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <menu+0x2bcc>)
 8003e7e:	2101      	movs	r1, #1
 8003e80:	2002      	movs	r0, #2
 8003e82:	f003 ff95 	bl	8007db0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <menu+0x2bf4>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	220a      	movs	r2, #10
 8003e8c:	4910      	ldr	r1, [pc, #64]	; (8003ed0 <menu+0x2bd4>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f008 fae0 	bl	800c454 <itoa>
			lcd_print(2, 15, snum);
 8003e94:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <menu+0x2bd4>)
 8003e96:	210f      	movs	r1, #15
 8003e98:	2002      	movs	r0, #2
 8003e9a:	f003 ff89 	bl	8007db0 <lcd_print>
 8003e9e:	e03e      	b.n	8003f1e <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <menu+0x2bf4>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b09      	cmp	r3, #9
 8003ea6:	d83a      	bhi.n	8003f1e <menu+0x2c22>
			if(dilSecim == 0) {
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <menu+0x2bc0>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d121      	bne.n	8003ef4 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003eb0:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <menu+0x2bc8>)
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	f003 ff7b 	bl	8007db0 <lcd_print>
 8003eba:	e024      	b.n	8003f06 <menu+0x2c0a>
 8003ebc:	20000255 	.word	0x20000255
 8003ec0:	0800da6c 	.word	0x0800da6c
 8003ec4:	0800d634 	.word	0x0800d634
 8003ec8:	0800d9a8 	.word	0x0800d9a8
 8003ecc:	2000024b 	.word	0x2000024b
 8003ed0:	20000188 	.word	0x20000188
 8003ed4:	40010800 	.word	0x40010800
 8003ed8:	20000263 	.word	0x20000263
 8003edc:	20000118 	.word	0x20000118
 8003ee0:	20000260 	.word	0x20000260
 8003ee4:	20000234 	.word	0x20000234
 8003ee8:	0800da80 	.word	0x0800da80
 8003eec:	0800da94 	.word	0x0800da94
 8003ef0:	2000024c 	.word	0x2000024c
			} else if(dilSecim == 1) {
 8003ef4:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <menu+0x2e38>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d104      	bne.n	8003f06 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003efc:	4a8e      	ldr	r2, [pc, #568]	; (8004138 <menu+0x2e3c>)
 8003efe:	2101      	movs	r1, #1
 8003f00:	2002      	movs	r0, #2
 8003f02:	f003 ff55 	bl	8007db0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f06:	4b8d      	ldr	r3, [pc, #564]	; (800413c <menu+0x2e40>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	220a      	movs	r2, #10
 8003f0c:	498c      	ldr	r1, [pc, #560]	; (8004140 <menu+0x2e44>)
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f008 faa0 	bl	800c454 <itoa>
			lcd_print(2, 16, snum);
 8003f14:	4a8a      	ldr	r2, [pc, #552]	; (8004140 <menu+0x2e44>)
 8003f16:	2110      	movs	r1, #16
 8003f18:	2002      	movs	r0, #2
 8003f1a:	f003 ff49 	bl	8007db0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f1e:	2102      	movs	r1, #2
 8003f20:	4888      	ldr	r0, [pc, #544]	; (8004144 <menu+0x2e48>)
 8003f22:	f005 fa6b 	bl	80093fc <HAL_GPIO_ReadPin>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d115      	bne.n	8003f58 <menu+0x2c5c>
 8003f2c:	4b86      	ldr	r3, [pc, #536]	; (8004148 <menu+0x2e4c>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f083 0301 	eor.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003f3a:	4b80      	ldr	r3, [pc, #512]	; (800413c <menu+0x2e40>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4b7e      	ldr	r3, [pc, #504]	; (800413c <menu+0x2e40>)
 8003f44:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003f46:	4b7d      	ldr	r3, [pc, #500]	; (800413c <menu+0x2e40>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2bb4      	cmp	r3, #180	; 0xb4
 8003f4c:	d902      	bls.n	8003f54 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003f4e:	4b7b      	ldr	r3, [pc, #492]	; (800413c <menu+0x2e40>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f54:	f000 fe6a 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f58:	2104      	movs	r1, #4
 8003f5a:	487a      	ldr	r0, [pc, #488]	; (8004144 <menu+0x2e48>)
 8003f5c:	f005 fa4e 	bl	80093fc <HAL_GPIO_ReadPin>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d115      	bne.n	8003f92 <menu+0x2c96>
 8003f66:	4b78      	ldr	r3, [pc, #480]	; (8004148 <menu+0x2e4c>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	f083 0301 	eor.w	r3, r3, #1
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f74:	4b71      	ldr	r3, [pc, #452]	; (800413c <menu+0x2e40>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	4b6f      	ldr	r3, [pc, #444]	; (800413c <menu+0x2e40>)
 8003f7e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003f80:	4b6e      	ldr	r3, [pc, #440]	; (800413c <menu+0x2e40>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2bb5      	cmp	r3, #181	; 0xb5
 8003f86:	d902      	bls.n	8003f8e <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003f88:	4b6c      	ldr	r3, [pc, #432]	; (800413c <menu+0x2e40>)
 8003f8a:	22b4      	movs	r2, #180	; 0xb4
 8003f8c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f8e:	f000 fe4d 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f92:	2108      	movs	r1, #8
 8003f94:	486b      	ldr	r0, [pc, #428]	; (8004144 <menu+0x2e48>)
 8003f96:	f005 fa31 	bl	80093fc <HAL_GPIO_ReadPin>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10d      	bne.n	8003fbc <menu+0x2cc0>
 8003fa0:	4b69      	ldr	r3, [pc, #420]	; (8004148 <menu+0x2e4c>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f083 0301 	eor.w	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003fae:	4b63      	ldr	r3, [pc, #396]	; (800413c <menu+0x2e40>)
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	4b66      	ldr	r3, [pc, #408]	; (800414c <menu+0x2e50>)
 8003fb4:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003fb6:	4b66      	ldr	r3, [pc, #408]	; (8004150 <menu+0x2e54>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003fbc:	4b65      	ldr	r3, [pc, #404]	; (8004154 <menu+0x2e58>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b1b      	cmp	r3, #27
 8003fc2:	f040 8083 	bne.w	80040cc <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003fc6:	4a64      	ldr	r2, [pc, #400]	; (8004158 <menu+0x2e5c>)
 8003fc8:	2101      	movs	r1, #1
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f003 fef0 	bl	8007db0 <lcd_print>

		if(buzzer == 0) {
 8003fd0:	4b62      	ldr	r3, [pc, #392]	; (800415c <menu+0x2e60>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d113      	bne.n	8004000 <menu+0x2d04>
			if(dilSecim == 0) {
 8003fd8:	4b56      	ldr	r3, [pc, #344]	; (8004134 <menu+0x2e38>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003fe0:	4a5f      	ldr	r2, [pc, #380]	; (8004160 <menu+0x2e64>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2002      	movs	r0, #2
 8003fe6:	f003 fee3 	bl	8007db0 <lcd_print>
 8003fea:	e020      	b.n	800402e <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003fec:	4b51      	ldr	r3, [pc, #324]	; (8004134 <menu+0x2e38>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d11c      	bne.n	800402e <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003ff4:	4a5b      	ldr	r2, [pc, #364]	; (8004164 <menu+0x2e68>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	f003 fed9 	bl	8007db0 <lcd_print>
 8003ffe:	e016      	b.n	800402e <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004000:	4b56      	ldr	r3, [pc, #344]	; (800415c <menu+0x2e60>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d112      	bne.n	800402e <menu+0x2d32>
			if(dilSecim == 0) {
 8004008:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <menu+0x2e38>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004010:	4a55      	ldr	r2, [pc, #340]	; (8004168 <menu+0x2e6c>)
 8004012:	2101      	movs	r1, #1
 8004014:	2002      	movs	r0, #2
 8004016:	f003 fecb 	bl	8007db0 <lcd_print>
 800401a:	e008      	b.n	800402e <menu+0x2d32>
			} else if(dilSecim == 1) {
 800401c:	4b45      	ldr	r3, [pc, #276]	; (8004134 <menu+0x2e38>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d104      	bne.n	800402e <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004024:	4a51      	ldr	r2, [pc, #324]	; (800416c <menu+0x2e70>)
 8004026:	2101      	movs	r1, #1
 8004028:	2002      	movs	r0, #2
 800402a:	f003 fec1 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800402e:	2102      	movs	r1, #2
 8004030:	4844      	ldr	r0, [pc, #272]	; (8004144 <menu+0x2e48>)
 8004032:	f005 f9e3 	bl	80093fc <HAL_GPIO_ReadPin>
 8004036:	4603      	mov	r3, r0
 8004038:	2b01      	cmp	r3, #1
 800403a:	d115      	bne.n	8004068 <menu+0x2d6c>
 800403c:	4b42      	ldr	r3, [pc, #264]	; (8004148 <menu+0x2e4c>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f083 0301 	eor.w	r3, r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00e      	beq.n	8004068 <menu+0x2d6c>
			buzzer = buzzer + 1;
 800404a:	4b44      	ldr	r3, [pc, #272]	; (800415c <menu+0x2e60>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4b42      	ldr	r3, [pc, #264]	; (800415c <menu+0x2e60>)
 8004054:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <menu+0x2e60>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d902      	bls.n	8004064 <menu+0x2d68>
				buzzer = 0;
 800405e:	4b3f      	ldr	r3, [pc, #252]	; (800415c <menu+0x2e60>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004064:	f000 fde2 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004068:	2104      	movs	r1, #4
 800406a:	4836      	ldr	r0, [pc, #216]	; (8004144 <menu+0x2e48>)
 800406c:	f005 f9c6 	bl	80093fc <HAL_GPIO_ReadPin>
 8004070:	4603      	mov	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d115      	bne.n	80040a2 <menu+0x2da6>
 8004076:	4b34      	ldr	r3, [pc, #208]	; (8004148 <menu+0x2e4c>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	f083 0301 	eor.w	r3, r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004084:	4b35      	ldr	r3, [pc, #212]	; (800415c <menu+0x2e60>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	3b01      	subs	r3, #1
 800408a:	b2da      	uxtb	r2, r3
 800408c:	4b33      	ldr	r3, [pc, #204]	; (800415c <menu+0x2e60>)
 800408e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <menu+0x2e60>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <menu+0x2da2>
		   		buzzer = 1;
 8004098:	4b30      	ldr	r3, [pc, #192]	; (800415c <menu+0x2e60>)
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800409e:	f000 fdc5 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040a2:	2108      	movs	r1, #8
 80040a4:	4827      	ldr	r0, [pc, #156]	; (8004144 <menu+0x2e48>)
 80040a6:	f005 f9a9 	bl	80093fc <HAL_GPIO_ReadPin>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10d      	bne.n	80040cc <menu+0x2dd0>
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <menu+0x2e4c>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	f083 0301 	eor.w	r3, r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <menu+0x2dd0>
			eepromData[25] = buzzer;
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <menu+0x2e60>)
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <menu+0x2e50>)
 80040c4:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80040c6:	4b22      	ldr	r3, [pc, #136]	; (8004150 <menu+0x2e54>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80040cc:	4b21      	ldr	r3, [pc, #132]	; (8004154 <menu+0x2e58>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b1c      	cmp	r3, #28
 80040d2:	f040 80ab 	bne.w	800422c <menu+0x2f30>
		calismaSayModu = 0;
 80040d6:	4b26      	ldr	r3, [pc, #152]	; (8004170 <menu+0x2e74>)
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80040dc:	4a25      	ldr	r2, [pc, #148]	; (8004174 <menu+0x2e78>)
 80040de:	2101      	movs	r1, #1
 80040e0:	2001      	movs	r0, #1
 80040e2:	f003 fe65 	bl	8007db0 <lcd_print>

		if(demoMode == 0) {
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <menu+0x2e7c>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d113      	bne.n	8004116 <menu+0x2e1a>
			if(dilSecim == 0) {
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <menu+0x2e38>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80040f6:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <menu+0x2e64>)
 80040f8:	2101      	movs	r1, #1
 80040fa:	2002      	movs	r0, #2
 80040fc:	f003 fe58 	bl	8007db0 <lcd_print>
 8004100:	e045      	b.n	800418e <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <menu+0x2e38>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d141      	bne.n	800418e <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <menu+0x2e68>)
 800410c:	2101      	movs	r1, #1
 800410e:	2002      	movs	r0, #2
 8004110:	f003 fe4e 	bl	8007db0 <lcd_print>
 8004114:	e03b      	b.n	800418e <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8004116:	4b18      	ldr	r3, [pc, #96]	; (8004178 <menu+0x2e7c>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d137      	bne.n	800418e <menu+0x2e92>
			if(dilSecim == 0){
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <menu+0x2e38>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d12a      	bne.n	800417c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8004126:	4a10      	ldr	r2, [pc, #64]	; (8004168 <menu+0x2e6c>)
 8004128:	2101      	movs	r1, #1
 800412a:	2002      	movs	r0, #2
 800412c:	f003 fe40 	bl	8007db0 <lcd_print>
 8004130:	e02d      	b.n	800418e <menu+0x2e92>
 8004132:	bf00      	nop
 8004134:	20000255 	.word	0x20000255
 8004138:	0800d9a8 	.word	0x0800d9a8
 800413c:	2000024c 	.word	0x2000024c
 8004140:	20000188 	.word	0x20000188
 8004144:	40010800 	.word	0x40010800
 8004148:	20000263 	.word	0x20000263
 800414c:	20000118 	.word	0x20000118
 8004150:	20000260 	.word	0x20000260
 8004154:	20000234 	.word	0x20000234
 8004158:	0800daa8 	.word	0x0800daa8
 800415c:	20000250 	.word	0x20000250
 8004160:	0800d3d0 	.word	0x0800d3d0
 8004164:	0800d3e4 	.word	0x0800d3e4
 8004168:	0800d430 	.word	0x0800d430
 800416c:	0800d444 	.word	0x0800d444
 8004170:	20000254 	.word	0x20000254
 8004174:	0800dabc 	.word	0x0800dabc
 8004178:	20000252 	.word	0x20000252
			} else if(dilSecim == 1) {
 800417c:	4b71      	ldr	r3, [pc, #452]	; (8004344 <menu+0x3048>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d104      	bne.n	800418e <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004184:	4a70      	ldr	r2, [pc, #448]	; (8004348 <menu+0x304c>)
 8004186:	2101      	movs	r1, #1
 8004188:	2002      	movs	r0, #2
 800418a:	f003 fe11 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800418e:	2102      	movs	r1, #2
 8004190:	486e      	ldr	r0, [pc, #440]	; (800434c <menu+0x3050>)
 8004192:	f005 f933 	bl	80093fc <HAL_GPIO_ReadPin>
 8004196:	4603      	mov	r3, r0
 8004198:	2b01      	cmp	r3, #1
 800419a:	d115      	bne.n	80041c8 <menu+0x2ecc>
 800419c:	4b6c      	ldr	r3, [pc, #432]	; (8004350 <menu+0x3054>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	f083 0301 	eor.w	r3, r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00e      	beq.n	80041c8 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80041aa:	4b6a      	ldr	r3, [pc, #424]	; (8004354 <menu+0x3058>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4b68      	ldr	r3, [pc, #416]	; (8004354 <menu+0x3058>)
 80041b4:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80041b6:	4b67      	ldr	r3, [pc, #412]	; (8004354 <menu+0x3058>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d902      	bls.n	80041c4 <menu+0x2ec8>
				demoMode = 0;
 80041be:	4b65      	ldr	r3, [pc, #404]	; (8004354 <menu+0x3058>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041c4:	f000 fd32 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041c8:	2104      	movs	r1, #4
 80041ca:	4860      	ldr	r0, [pc, #384]	; (800434c <menu+0x3050>)
 80041cc:	f005 f916 	bl	80093fc <HAL_GPIO_ReadPin>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d115      	bne.n	8004202 <menu+0x2f06>
 80041d6:	4b5e      	ldr	r3, [pc, #376]	; (8004350 <menu+0x3054>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	f083 0301 	eor.w	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <menu+0x2f06>
			demoMode = demoMode - 1;
 80041e4:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <menu+0x3058>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b59      	ldr	r3, [pc, #356]	; (8004354 <menu+0x3058>)
 80041ee:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80041f0:	4b58      	ldr	r3, [pc, #352]	; (8004354 <menu+0x3058>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <menu+0x2f02>
		   		demoMode = 1;
 80041f8:	4b56      	ldr	r3, [pc, #344]	; (8004354 <menu+0x3058>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041fe:	f000 fd15 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004202:	2108      	movs	r1, #8
 8004204:	4851      	ldr	r0, [pc, #324]	; (800434c <menu+0x3050>)
 8004206:	f005 f8f9 	bl	80093fc <HAL_GPIO_ReadPin>
 800420a:	4603      	mov	r3, r0
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10d      	bne.n	800422c <menu+0x2f30>
 8004210:	4b4f      	ldr	r3, [pc, #316]	; (8004350 <menu+0x3054>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	f083 0301 	eor.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <menu+0x2f30>
			eepromData[26] = demoMode;
 800421e:	4b4d      	ldr	r3, [pc, #308]	; (8004354 <menu+0x3058>)
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	4b4d      	ldr	r3, [pc, #308]	; (8004358 <menu+0x305c>)
 8004224:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004226:	4b4d      	ldr	r3, [pc, #308]	; (800435c <menu+0x3060>)
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800422c:	4b4c      	ldr	r3, [pc, #304]	; (8004360 <menu+0x3064>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b1d      	cmp	r3, #29
 8004232:	f040 8132 	bne.w	800449a <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004236:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <menu+0x3068>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <menu+0x2f6a>
 800423e:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <menu+0x306c>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <menu+0x2f6a>
 8004246:	4b49      	ldr	r3, [pc, #292]	; (800436c <menu+0x3070>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10b      	bne.n	8004266 <menu+0x2f6a>
 800424e:	4b48      	ldr	r3, [pc, #288]	; (8004370 <menu+0x3074>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <menu+0x2f6a>
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <menu+0x3078>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800425e:	4b46      	ldr	r3, [pc, #280]	; (8004378 <menu+0x307c>)
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	e002      	b.n	800426c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004266:	4b44      	ldr	r3, [pc, #272]	; (8004378 <menu+0x307c>)
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800426c:	4b43      	ldr	r3, [pc, #268]	; (800437c <menu+0x3080>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d154      	bne.n	800431e <menu+0x3022>
			if(dilSecim == 0) {
 8004274:	4b33      	ldr	r3, [pc, #204]	; (8004344 <menu+0x3048>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800427c:	4a40      	ldr	r2, [pc, #256]	; (8004380 <menu+0x3084>)
 800427e:	2101      	movs	r1, #1
 8004280:	2001      	movs	r0, #1
 8004282:	f003 fd95 	bl	8007db0 <lcd_print>
 8004286:	e008      	b.n	800429a <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004288:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <menu+0x3048>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d104      	bne.n	800429a <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004290:	4a3c      	ldr	r2, [pc, #240]	; (8004384 <menu+0x3088>)
 8004292:	2101      	movs	r1, #1
 8004294:	2001      	movs	r0, #1
 8004296:	f003 fd8b 	bl	8007db0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800429a:	4b36      	ldr	r3, [pc, #216]	; (8004374 <menu+0x3078>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	220a      	movs	r2, #10
 80042a0:	4939      	ldr	r1, [pc, #228]	; (8004388 <menu+0x308c>)
 80042a2:	4618      	mov	r0, r3
 80042a4:	f008 f8d6 	bl	800c454 <itoa>
			lcd_print(2, 12, snum);
 80042a8:	4a37      	ldr	r2, [pc, #220]	; (8004388 <menu+0x308c>)
 80042aa:	210c      	movs	r1, #12
 80042ac:	2002      	movs	r0, #2
 80042ae:	f003 fd7f 	bl	8007db0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80042b2:	4b2f      	ldr	r3, [pc, #188]	; (8004370 <menu+0x3074>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	220a      	movs	r2, #10
 80042b8:	4933      	ldr	r1, [pc, #204]	; (8004388 <menu+0x308c>)
 80042ba:	4618      	mov	r0, r3
 80042bc:	f008 f8ca 	bl	800c454 <itoa>
			lcd_print(2, 13, snum);
 80042c0:	4a31      	ldr	r2, [pc, #196]	; (8004388 <menu+0x308c>)
 80042c2:	210d      	movs	r1, #13
 80042c4:	2002      	movs	r0, #2
 80042c6:	f003 fd73 	bl	8007db0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80042ca:	4b28      	ldr	r3, [pc, #160]	; (800436c <menu+0x3070>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	220a      	movs	r2, #10
 80042d0:	492d      	ldr	r1, [pc, #180]	; (8004388 <menu+0x308c>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f008 f8be 	bl	800c454 <itoa>
			lcd_print(2, 14, snum);
 80042d8:	4a2b      	ldr	r2, [pc, #172]	; (8004388 <menu+0x308c>)
 80042da:	210e      	movs	r1, #14
 80042dc:	2002      	movs	r0, #2
 80042de:	f003 fd67 	bl	8007db0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <menu+0x306c>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	220a      	movs	r2, #10
 80042e8:	4927      	ldr	r1, [pc, #156]	; (8004388 <menu+0x308c>)
 80042ea:	4618      	mov	r0, r3
 80042ec:	f008 f8b2 	bl	800c454 <itoa>
			lcd_print(2, 15, snum);
 80042f0:	4a25      	ldr	r2, [pc, #148]	; (8004388 <menu+0x308c>)
 80042f2:	210f      	movs	r1, #15
 80042f4:	2002      	movs	r0, #2
 80042f6:	f003 fd5b 	bl	8007db0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80042fa:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <menu+0x3068>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	220a      	movs	r2, #10
 8004300:	4921      	ldr	r1, [pc, #132]	; (8004388 <menu+0x308c>)
 8004302:	4618      	mov	r0, r3
 8004304:	f008 f8a6 	bl	800c454 <itoa>
			lcd_print(2, 16, snum);
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <menu+0x308c>)
 800430a:	2110      	movs	r1, #16
 800430c:	2002      	movs	r0, #2
 800430e:	f003 fd4f 	bl	8007db0 <lcd_print>

			lcd_print(2, 1, "           ");
 8004312:	4a1e      	ldr	r2, [pc, #120]	; (800438c <menu+0x3090>)
 8004314:	2101      	movs	r1, #1
 8004316:	2002      	movs	r0, #2
 8004318:	f003 fd4a 	bl	8007db0 <lcd_print>
 800431c:	e048      	b.n	80043b0 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800431e:	4b17      	ldr	r3, [pc, #92]	; (800437c <menu+0x3080>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d144      	bne.n	80043b0 <menu+0x30b4>
			if(dilSecim == 0) {
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <menu+0x3048>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d132      	bne.n	8004394 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800432e:	4a14      	ldr	r2, [pc, #80]	; (8004380 <menu+0x3084>)
 8004330:	2101      	movs	r1, #1
 8004332:	2001      	movs	r0, #1
 8004334:	f003 fd3c 	bl	8007db0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <menu+0x3094>)
 800433a:	2101      	movs	r1, #1
 800433c:	2002      	movs	r0, #2
 800433e:	f003 fd37 	bl	8007db0 <lcd_print>
 8004342:	e035      	b.n	80043b0 <menu+0x30b4>
 8004344:	20000255 	.word	0x20000255
 8004348:	0800d444 	.word	0x0800d444
 800434c:	40010800 	.word	0x40010800
 8004350:	20000263 	.word	0x20000263
 8004354:	20000252 	.word	0x20000252
 8004358:	20000118 	.word	0x20000118
 800435c:	20000260 	.word	0x20000260
 8004360:	20000234 	.word	0x20000234
 8004364:	20000231 	.word	0x20000231
 8004368:	20000232 	.word	0x20000232
 800436c:	20000000 	.word	0x20000000
 8004370:	20000001 	.word	0x20000001
 8004374:	20000233 	.word	0x20000233
 8004378:	20000275 	.word	0x20000275
 800437c:	20000254 	.word	0x20000254
 8004380:	0800dacc 	.word	0x0800dacc
 8004384:	0800dae0 	.word	0x0800dae0
 8004388:	20000188 	.word	0x20000188
 800438c:	0800daf4 	.word	0x0800daf4
 8004390:	0800db00 	.word	0x0800db00
			} else if(dilSecim == 1) {
 8004394:	4b94      	ldr	r3, [pc, #592]	; (80045e8 <menu+0x32ec>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d109      	bne.n	80043b0 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 800439c:	4a93      	ldr	r2, [pc, #588]	; (80045ec <menu+0x32f0>)
 800439e:	2101      	movs	r1, #1
 80043a0:	2001      	movs	r0, #1
 80043a2:	f003 fd05 	bl	8007db0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80043a6:	4a92      	ldr	r2, [pc, #584]	; (80045f0 <menu+0x32f4>)
 80043a8:	2101      	movs	r1, #1
 80043aa:	2002      	movs	r0, #2
 80043ac:	f003 fd00 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80043b0:	2102      	movs	r1, #2
 80043b2:	4890      	ldr	r0, [pc, #576]	; (80045f4 <menu+0x32f8>)
 80043b4:	f005 f822 	bl	80093fc <HAL_GPIO_ReadPin>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d119      	bne.n	80043f2 <menu+0x30f6>
 80043be:	4b8e      	ldr	r3, [pc, #568]	; (80045f8 <menu+0x32fc>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	f083 0301 	eor.w	r3, r3, #1
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d012      	beq.n	80043f2 <menu+0x30f6>
 80043cc:	4b8b      	ldr	r3, [pc, #556]	; (80045fc <menu+0x3300>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80043d4:	4b8a      	ldr	r3, [pc, #552]	; (8004600 <menu+0x3304>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	3301      	adds	r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	4b88      	ldr	r3, [pc, #544]	; (8004600 <menu+0x3304>)
 80043de:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80043e0:	4b87      	ldr	r3, [pc, #540]	; (8004600 <menu+0x3304>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d902      	bls.n	80043ee <menu+0x30f2>
				calismaSayModu = 0;
 80043e8:	4b85      	ldr	r3, [pc, #532]	; (8004600 <menu+0x3304>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043ee:	f000 fc1d 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80043f2:	2104      	movs	r1, #4
 80043f4:	487f      	ldr	r0, [pc, #508]	; (80045f4 <menu+0x32f8>)
 80043f6:	f005 f801 	bl	80093fc <HAL_GPIO_ReadPin>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d119      	bne.n	8004434 <menu+0x3138>
 8004400:	4b7d      	ldr	r3, [pc, #500]	; (80045f8 <menu+0x32fc>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f083 0301 	eor.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d012      	beq.n	8004434 <menu+0x3138>
 800440e:	4b7b      	ldr	r3, [pc, #492]	; (80045fc <menu+0x3300>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004416:	4b7a      	ldr	r3, [pc, #488]	; (8004600 <menu+0x3304>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	3b01      	subs	r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4b78      	ldr	r3, [pc, #480]	; (8004600 <menu+0x3304>)
 8004420:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004422:	4b77      	ldr	r3, [pc, #476]	; (8004600 <menu+0x3304>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <menu+0x3134>
		   		calismaSayModu = 1;
 800442a:	4b75      	ldr	r3, [pc, #468]	; (8004600 <menu+0x3304>)
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004430:	f000 fbfc 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004434:	2108      	movs	r1, #8
 8004436:	486f      	ldr	r0, [pc, #444]	; (80045f4 <menu+0x32f8>)
 8004438:	f004 ffe0 	bl	80093fc <HAL_GPIO_ReadPin>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d12b      	bne.n	800449a <menu+0x319e>
 8004442:	4b6d      	ldr	r3, [pc, #436]	; (80045f8 <menu+0x32fc>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	f083 0301 	eor.w	r3, r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d024      	beq.n	800449a <menu+0x319e>
			eepromData[32] = 0;
 8004450:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <menu+0x3308>)
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004458:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <menu+0x3308>)
 800445a:	2200      	movs	r2, #0
 800445c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800445e:	4b69      	ldr	r3, [pc, #420]	; (8004604 <menu+0x3308>)
 8004460:	2200      	movs	r2, #0
 8004462:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004464:	4b67      	ldr	r3, [pc, #412]	; (8004604 <menu+0x3308>)
 8004466:	2200      	movs	r2, #0
 8004468:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800446a:	4b66      	ldr	r3, [pc, #408]	; (8004604 <menu+0x3308>)
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004470:	4b65      	ldr	r3, [pc, #404]	; (8004608 <menu+0x330c>)
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004476:	4b65      	ldr	r3, [pc, #404]	; (800460c <menu+0x3310>)
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800447c:	4b64      	ldr	r3, [pc, #400]	; (8004610 <menu+0x3314>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004482:	4b64      	ldr	r3, [pc, #400]	; (8004614 <menu+0x3318>)
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004488:	4b63      	ldr	r3, [pc, #396]	; (8004618 <menu+0x331c>)
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800448e:	4b5c      	ldr	r3, [pc, #368]	; (8004600 <menu+0x3304>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004494:	4b61      	ldr	r3, [pc, #388]	; (800461c <menu+0x3320>)
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800449a:	4b61      	ldr	r3, [pc, #388]	; (8004620 <menu+0x3324>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b1e      	cmp	r3, #30
 80044a0:	d16f      	bne.n	8004582 <menu+0x3286>
		calismaSayModu = 0;
 80044a2:	4b57      	ldr	r3, [pc, #348]	; (8004600 <menu+0x3304>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044a8:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <menu+0x32ec>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80044b0:	4a5c      	ldr	r2, [pc, #368]	; (8004624 <menu+0x3328>)
 80044b2:	2101      	movs	r1, #1
 80044b4:	2001      	movs	r0, #1
 80044b6:	f003 fc7b 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80044ba:	4a5b      	ldr	r2, [pc, #364]	; (8004628 <menu+0x332c>)
 80044bc:	2101      	movs	r1, #1
 80044be:	2002      	movs	r0, #2
 80044c0:	f003 fc76 	bl	8007db0 <lcd_print>
 80044c4:	e00d      	b.n	80044e2 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80044c6:	4b48      	ldr	r3, [pc, #288]	; (80045e8 <menu+0x32ec>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d109      	bne.n	80044e2 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80044ce:	4a57      	ldr	r2, [pc, #348]	; (800462c <menu+0x3330>)
 80044d0:	2101      	movs	r1, #1
 80044d2:	2001      	movs	r0, #1
 80044d4:	f003 fc6c 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80044d8:	4a55      	ldr	r2, [pc, #340]	; (8004630 <menu+0x3334>)
 80044da:	2101      	movs	r1, #1
 80044dc:	2002      	movs	r0, #2
 80044de:	f003 fc67 	bl	8007db0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044e2:	2102      	movs	r1, #2
 80044e4:	4843      	ldr	r0, [pc, #268]	; (80045f4 <menu+0x32f8>)
 80044e6:	f004 ff89 	bl	80093fc <HAL_GPIO_ReadPin>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d115      	bne.n	800451c <menu+0x3220>
 80044f0:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <menu+0x32fc>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f083 0301 	eor.w	r3, r3, #1
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00e      	beq.n	800451c <menu+0x3220>
			dilSecim = dilSecim + 1;
 80044fe:	4b3a      	ldr	r3, [pc, #232]	; (80045e8 <menu+0x32ec>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <menu+0x32ec>)
 8004508:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <menu+0x32ec>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d902      	bls.n	8004518 <menu+0x321c>
				dilSecim = 0;
 8004512:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <menu+0x32ec>)
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004518:	f000 fb88 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800451c:	2104      	movs	r1, #4
 800451e:	4835      	ldr	r0, [pc, #212]	; (80045f4 <menu+0x32f8>)
 8004520:	f004 ff6c 	bl	80093fc <HAL_GPIO_ReadPin>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d115      	bne.n	8004556 <menu+0x325a>
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <menu+0x32fc>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	f083 0301 	eor.w	r3, r3, #1
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00e      	beq.n	8004556 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004538:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <menu+0x32ec>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	3b01      	subs	r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <menu+0x32ec>)
 8004542:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004544:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <menu+0x32ec>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <menu+0x3256>
		   		dilSecim = 1;
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <menu+0x32ec>)
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004552:	f000 fb6b 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004556:	2108      	movs	r1, #8
 8004558:	4826      	ldr	r0, [pc, #152]	; (80045f4 <menu+0x32f8>)
 800455a:	f004 ff4f 	bl	80093fc <HAL_GPIO_ReadPin>
 800455e:	4603      	mov	r3, r0
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10e      	bne.n	8004582 <menu+0x3286>
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <menu+0x32fc>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f083 0301 	eor.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <menu+0x32ec>)
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	4b23      	ldr	r3, [pc, #140]	; (8004604 <menu+0x3308>)
 8004578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800457c:	4b27      	ldr	r3, [pc, #156]	; (800461c <menu+0x3320>)
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004582:	4b27      	ldr	r3, [pc, #156]	; (8004620 <menu+0x3324>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b1f      	cmp	r3, #31
 8004588:	f040 80b7 	bne.w	80046fa <menu+0x33fe>
		calismaSayModu = 0;
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <menu+0x3304>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004592:	4a28      	ldr	r2, [pc, #160]	; (8004634 <menu+0x3338>)
 8004594:	2101      	movs	r1, #1
 8004596:	2001      	movs	r0, #1
 8004598:	f003 fc0a 	bl	8007db0 <lcd_print>

		if(iotMode == 0) {
 800459c:	4b26      	ldr	r3, [pc, #152]	; (8004638 <menu+0x333c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d113      	bne.n	80045cc <menu+0x32d0>
			if(dilSecim == 0) {
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <menu+0x32ec>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80045ac:	4a23      	ldr	r2, [pc, #140]	; (800463c <menu+0x3340>)
 80045ae:	2101      	movs	r1, #1
 80045b0:	2002      	movs	r0, #2
 80045b2:	f003 fbfd 	bl	8007db0 <lcd_print>
 80045b6:	e050      	b.n	800465a <menu+0x335e>
			} else if(dilSecim == 1) {
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <menu+0x32ec>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d14c      	bne.n	800465a <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <menu+0x3344>)
 80045c2:	2101      	movs	r1, #1
 80045c4:	2002      	movs	r0, #2
 80045c6:	f003 fbf3 	bl	8007db0 <lcd_print>
 80045ca:	e046      	b.n	800465a <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80045cc:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <menu+0x333c>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d142      	bne.n	800465a <menu+0x335e>
			if(dilSecim == 0) {
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <menu+0x32ec>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d135      	bne.n	8004648 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80045dc:	4a19      	ldr	r2, [pc, #100]	; (8004644 <menu+0x3348>)
 80045de:	2101      	movs	r1, #1
 80045e0:	2002      	movs	r0, #2
 80045e2:	f003 fbe5 	bl	8007db0 <lcd_print>
 80045e6:	e038      	b.n	800465a <menu+0x335e>
 80045e8:	20000255 	.word	0x20000255
 80045ec:	0800dae0 	.word	0x0800dae0
 80045f0:	0800db14 	.word	0x0800db14
 80045f4:	40010800 	.word	0x40010800
 80045f8:	20000263 	.word	0x20000263
 80045fc:	20000275 	.word	0x20000275
 8004600:	20000254 	.word	0x20000254
 8004604:	20000118 	.word	0x20000118
 8004608:	20000233 	.word	0x20000233
 800460c:	20000001 	.word	0x20000001
 8004610:	20000000 	.word	0x20000000
 8004614:	20000232 	.word	0x20000232
 8004618:	20000231 	.word	0x20000231
 800461c:	20000260 	.word	0x20000260
 8004620:	20000234 	.word	0x20000234
 8004624:	0800db28 	.word	0x0800db28
 8004628:	0800db3c 	.word	0x0800db3c
 800462c:	0800db50 	.word	0x0800db50
 8004630:	0800db64 	.word	0x0800db64
 8004634:	0800db78 	.word	0x0800db78
 8004638:	20000253 	.word	0x20000253
 800463c:	0800d3d0 	.word	0x0800d3d0
 8004640:	0800d3e4 	.word	0x0800d3e4
 8004644:	0800d430 	.word	0x0800d430
			} else if(dilSecim == 1) {
 8004648:	4ba3      	ldr	r3, [pc, #652]	; (80048d8 <menu+0x35dc>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d104      	bne.n	800465a <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004650:	4aa2      	ldr	r2, [pc, #648]	; (80048dc <menu+0x35e0>)
 8004652:	2101      	movs	r1, #1
 8004654:	2002      	movs	r0, #2
 8004656:	f003 fbab 	bl	8007db0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800465a:	2102      	movs	r1, #2
 800465c:	48a0      	ldr	r0, [pc, #640]	; (80048e0 <menu+0x35e4>)
 800465e:	f004 fecd 	bl	80093fc <HAL_GPIO_ReadPin>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d115      	bne.n	8004694 <menu+0x3398>
 8004668:	4b9e      	ldr	r3, [pc, #632]	; (80048e4 <menu+0x35e8>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f083 0301 	eor.w	r3, r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <menu+0x3398>
			iotMode = iotMode + 1;
 8004676:	4b9c      	ldr	r3, [pc, #624]	; (80048e8 <menu+0x35ec>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b9a      	ldr	r3, [pc, #616]	; (80048e8 <menu+0x35ec>)
 8004680:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004682:	4b99      	ldr	r3, [pc, #612]	; (80048e8 <menu+0x35ec>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d902      	bls.n	8004690 <menu+0x3394>
				iotMode = 0;
 800468a:	4b97      	ldr	r3, [pc, #604]	; (80048e8 <menu+0x35ec>)
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004690:	f000 facc 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004694:	2104      	movs	r1, #4
 8004696:	4892      	ldr	r0, [pc, #584]	; (80048e0 <menu+0x35e4>)
 8004698:	f004 feb0 	bl	80093fc <HAL_GPIO_ReadPin>
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d115      	bne.n	80046ce <menu+0x33d2>
 80046a2:	4b90      	ldr	r3, [pc, #576]	; (80048e4 <menu+0x35e8>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f083 0301 	eor.w	r3, r3, #1
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <menu+0x33d2>
			iotMode = iotMode - 1;
 80046b0:	4b8d      	ldr	r3, [pc, #564]	; (80048e8 <menu+0x35ec>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	4b8b      	ldr	r3, [pc, #556]	; (80048e8 <menu+0x35ec>)
 80046ba:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80046bc:	4b8a      	ldr	r3, [pc, #552]	; (80048e8 <menu+0x35ec>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <menu+0x33ce>
		   		iotMode = 1;
 80046c4:	4b88      	ldr	r3, [pc, #544]	; (80048e8 <menu+0x35ec>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046ca:	f000 faaf 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ce:	2108      	movs	r1, #8
 80046d0:	4883      	ldr	r0, [pc, #524]	; (80048e0 <menu+0x35e4>)
 80046d2:	f004 fe93 	bl	80093fc <HAL_GPIO_ReadPin>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10e      	bne.n	80046fa <menu+0x33fe>
 80046dc:	4b81      	ldr	r3, [pc, #516]	; (80048e4 <menu+0x35e8>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f083 0301 	eor.w	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <menu+0x33fe>
			eepromData[48] = iotMode;
 80046ea:	4b7f      	ldr	r3, [pc, #508]	; (80048e8 <menu+0x35ec>)
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	4b7f      	ldr	r3, [pc, #508]	; (80048ec <menu+0x35f0>)
 80046f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80046f4:	4b7e      	ldr	r3, [pc, #504]	; (80048f0 <menu+0x35f4>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80046fa:	4b7e      	ldr	r3, [pc, #504]	; (80048f4 <menu+0x35f8>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d14b      	bne.n	800479a <menu+0x349e>
		calismaSayModu = 0;
 8004702:	4b7d      	ldr	r3, [pc, #500]	; (80048f8 <menu+0x35fc>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004708:	2001      	movs	r0, #1
 800470a:	f7fc f873 	bl	80007f4 <convertArrays>
		HAL_Delay(50);
 800470e:	2032      	movs	r0, #50	; 0x32
 8004710:	f004 f8a4 	bl	800885c <HAL_Delay>

		if(dilSecim == 0) {
 8004714:	4b70      	ldr	r3, [pc, #448]	; (80048d8 <menu+0x35dc>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <menu+0x342c>
			lcd_print(1, 1, "MAKINE ID       ");
 800471c:	4a77      	ldr	r2, [pc, #476]	; (80048fc <menu+0x3600>)
 800471e:	2101      	movs	r1, #1
 8004720:	2001      	movs	r0, #1
 8004722:	f003 fb45 	bl	8007db0 <lcd_print>
 8004726:	e004      	b.n	8004732 <menu+0x3436>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004728:	4a75      	ldr	r2, [pc, #468]	; (8004900 <menu+0x3604>)
 800472a:	2101      	movs	r1, #1
 800472c:	2001      	movs	r0, #1
 800472e:	f003 fb3f 	bl	8007db0 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8004732:	4a74      	ldr	r2, [pc, #464]	; (8004904 <menu+0x3608>)
 8004734:	2101      	movs	r1, #1
 8004736:	2002      	movs	r0, #2
 8004738:	f003 fb3a 	bl	8007db0 <lcd_print>
		lcd_print(2, 13, "    ");
 800473c:	4a72      	ldr	r2, [pc, #456]	; (8004908 <menu+0x360c>)
 800473e:	210d      	movs	r1, #13
 8004740:	2002      	movs	r0, #2
 8004742:	f003 fb35 	bl	8007db0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004746:	2102      	movs	r1, #2
 8004748:	4865      	ldr	r0, [pc, #404]	; (80048e0 <menu+0x35e4>)
 800474a:	f004 fe57 	bl	80093fc <HAL_GPIO_ReadPin>
 800474e:	4603      	mov	r3, r0
 8004750:	2b01      	cmp	r3, #1
 8004752:	d122      	bne.n	800479a <menu+0x349e>
 8004754:	2104      	movs	r1, #4
 8004756:	4862      	ldr	r0, [pc, #392]	; (80048e0 <menu+0x35e4>)
 8004758:	f004 fe50 	bl	80093fc <HAL_GPIO_ReadPin>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d11b      	bne.n	800479a <menu+0x349e>
 8004762:	4b60      	ldr	r3, [pc, #384]	; (80048e4 <menu+0x35e8>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	f083 0301 	eor.w	r3, r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d014      	beq.n	800479a <menu+0x349e>
			takeMachineID();
 8004770:	f002 fb68 	bl	8006e44 <takeMachineID>

			convertArrays(1);
 8004774:	2001      	movs	r0, #1
 8004776:	f7fc f83d 	bl	80007f4 <convertArrays>
			HAL_Delay(50);
 800477a:	2032      	movs	r0, #50	; 0x32
 800477c:	f004 f86e 	bl	800885c <HAL_Delay>

			HAL_Delay(250);
 8004780:	20fa      	movs	r0, #250	; 0xfa
 8004782:	f004 f86b 	bl	800885c <HAL_Delay>
			lcd_print(2, 1, machineID);
 8004786:	4a5f      	ldr	r2, [pc, #380]	; (8004904 <menu+0x3608>)
 8004788:	2101      	movs	r1, #1
 800478a:	2002      	movs	r0, #2
 800478c:	f003 fb10 	bl	8007db0 <lcd_print>
			lcd_print(2, 13, "    ");
 8004790:	4a5d      	ldr	r2, [pc, #372]	; (8004908 <menu+0x360c>)
 8004792:	210d      	movs	r1, #13
 8004794:	2002      	movs	r0, #2
 8004796:	f003 fb0b 	bl	8007db0 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 800479a:	4b56      	ldr	r3, [pc, #344]	; (80048f4 <menu+0x35f8>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b21      	cmp	r3, #33	; 0x21
 80047a0:	f040 80cb 	bne.w	800493a <menu+0x363e>
		calismaSayModu = 0;
 80047a4:	4b54      	ldr	r3, [pc, #336]	; (80048f8 <menu+0x35fc>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
		int ssidLength = strlen(wifiSSID);
 80047aa:	4858      	ldr	r0, [pc, #352]	; (800490c <menu+0x3610>)
 80047ac:	f7fb fd3a 	bl	8000224 <strlen>
 80047b0:	4603      	mov	r3, r0
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34

		convertArrays(2);
 80047b4:	2002      	movs	r0, #2
 80047b6:	f7fc f81d 	bl	80007f4 <convertArrays>
		HAL_Delay(50);
 80047ba:	2032      	movs	r0, #50	; 0x32
 80047bc:	f004 f84e 	bl	800885c <HAL_Delay>

		lcd_print(1, 1, "WIFI SSID       ");
 80047c0:	4a53      	ldr	r2, [pc, #332]	; (8004910 <menu+0x3614>)
 80047c2:	2101      	movs	r1, #1
 80047c4:	2001      	movs	r0, #1
 80047c6:	f003 faf3 	bl	8007db0 <lcd_print>
		if(ssidLength == 16) {
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d105      	bne.n	80047dc <menu+0x34e0>
			lcd_print(2, 1, wifiSSID);
 80047d0:	4a4e      	ldr	r2, [pc, #312]	; (800490c <menu+0x3610>)
 80047d2:	2101      	movs	r1, #1
 80047d4:	2002      	movs	r0, #2
 80047d6:	f003 faeb 	bl	8007db0 <lcd_print>
 80047da:	e030      	b.n	800483e <menu+0x3542>
		} else if(ssidLength < 16) {
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	2b0f      	cmp	r3, #15
 80047e0:	dc15      	bgt.n	800480e <menu+0x3512>
			for(int i=0; i<16-ssidLength; i++) {
 80047e2:	2300      	movs	r3, #0
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
 80047e6:	e00b      	b.n	8004800 <menu+0x3504>
				lcd_delete_char(2, ssidLength);
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4619      	mov	r1, r3
 80047ee:	2002      	movs	r0, #2
 80047f0:	f003 fb14 	bl	8007e1c <lcd_delete_char>
				ssidLength++;
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	3301      	adds	r3, #1
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
			for(int i=0; i<16-ssidLength; i++) {
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	3301      	adds	r3, #1
 80047fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004802:	f1c3 0310 	rsb	r3, r3, #16
 8004806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004808:	429a      	cmp	r2, r3
 800480a:	dbed      	blt.n	80047e8 <menu+0x34ec>
 800480c:	e017      	b.n	800483e <menu+0x3542>
			}
		} else {
			int lcdVal = 1;
 800480e:	2301      	movs	r3, #1
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c

			//Eğer ssid 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 8004812:	2300      	movs	r3, #0
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
 8004816:	e00f      	b.n	8004838 <menu+0x353c>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	b2d9      	uxtb	r1, r3
 800481c:	4a3b      	ldr	r2, [pc, #236]	; (800490c <menu+0x3610>)
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	4413      	add	r3, r2
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	2002      	movs	r0, #2
 8004828:	f003 fad7 	bl	8007dda <lcd_print_char>
				lcdVal++;
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	3301      	adds	r3, #1
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(int i=0; i<16; i++) {
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	3301      	adds	r3, #1
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	2b0f      	cmp	r3, #15
 800483c:	ddec      	ble.n	8004818 <menu+0x351c>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800483e:	2102      	movs	r1, #2
 8004840:	4827      	ldr	r0, [pc, #156]	; (80048e0 <menu+0x35e4>)
 8004842:	f004 fddb 	bl	80093fc <HAL_GPIO_ReadPin>
 8004846:	4603      	mov	r3, r0
 8004848:	2b01      	cmp	r3, #1
 800484a:	d176      	bne.n	800493a <menu+0x363e>
 800484c:	2104      	movs	r1, #4
 800484e:	4824      	ldr	r0, [pc, #144]	; (80048e0 <menu+0x35e4>)
 8004850:	f004 fdd4 	bl	80093fc <HAL_GPIO_ReadPin>
 8004854:	4603      	mov	r3, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	d16f      	bne.n	800493a <menu+0x363e>
 800485a:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <menu+0x35e8>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f083 0301 	eor.w	r3, r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d068      	beq.n	800493a <menu+0x363e>
			takeWifiSSID();
 8004868:	f002 fc7a 	bl	8007160 <takeWifiSSID>

			convertArrays(2);
 800486c:	2002      	movs	r0, #2
 800486e:	f7fb ffc1 	bl	80007f4 <convertArrays>
			HAL_Delay(50);
 8004872:	2032      	movs	r0, #50	; 0x32
 8004874:	f003 fff2 	bl	800885c <HAL_Delay>

			ssidLength = strlen(wifiSSID);
 8004878:	4824      	ldr	r0, [pc, #144]	; (800490c <menu+0x3610>)
 800487a:	f7fb fcd3 	bl	8000224 <strlen>
 800487e:	4603      	mov	r3, r0
 8004880:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_Delay(250);
 8004882:	20fa      	movs	r0, #250	; 0xfa
 8004884:	f003 ffea 	bl	800885c <HAL_Delay>
			if(ssidLength == 16) {
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	2b10      	cmp	r3, #16
 800488c:	d105      	bne.n	800489a <menu+0x359e>
				lcd_print(2, 1, wifiSSID);
 800488e:	4a1f      	ldr	r2, [pc, #124]	; (800490c <menu+0x3610>)
 8004890:	2101      	movs	r1, #1
 8004892:	2002      	movs	r0, #2
 8004894:	f003 fa8c 	bl	8007db0 <lcd_print>
 8004898:	e04f      	b.n	800493a <menu+0x363e>
			} else if(ssidLength < 16) {
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	2b0f      	cmp	r3, #15
 800489e:	dc15      	bgt.n	80048cc <menu+0x35d0>
				for(int i=0; i<16-ssidLength; i++) {
 80048a0:	2300      	movs	r3, #0
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
 80048a4:	e00b      	b.n	80048be <menu+0x35c2>
					lcd_delete_char(2, ssidLength);
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	4619      	mov	r1, r3
 80048ac:	2002      	movs	r0, #2
 80048ae:	f003 fab5 	bl	8007e1c <lcd_delete_char>
					ssidLength++;
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	3301      	adds	r3, #1
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
				for(int i=0; i<16-ssidLength; i++) {
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	3301      	adds	r3, #1
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
 80048be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c0:	f1c3 0310 	rsb	r3, r3, #16
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	429a      	cmp	r2, r3
 80048c8:	dbed      	blt.n	80048a6 <menu+0x35aa>
 80048ca:	e036      	b.n	800493a <menu+0x363e>
				}
			} else {
				int lcdVal = 1;
 80048cc:	2301      	movs	r3, #1
 80048ce:	623b      	str	r3, [r7, #32]

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e02e      	b.n	8004934 <menu+0x3638>
 80048d6:	bf00      	nop
 80048d8:	20000255 	.word	0x20000255
 80048dc:	0800d444 	.word	0x0800d444
 80048e0:	40010800 	.word	0x40010800
 80048e4:	20000263 	.word	0x20000263
 80048e8:	20000253 	.word	0x20000253
 80048ec:	20000118 	.word	0x20000118
 80048f0:	20000260 	.word	0x20000260
 80048f4:	20000234 	.word	0x20000234
 80048f8:	20000254 	.word	0x20000254
 80048fc:	0800db8c 	.word	0x0800db8c
 8004900:	0800dba0 	.word	0x0800dba0
 8004904:	20000190 	.word	0x20000190
 8004908:	0800dbb4 	.word	0x0800dbb4
 800490c:	200001a0 	.word	0x200001a0
 8004910:	0800dbbc 	.word	0x0800dbbc
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	b2d9      	uxtb	r1, r3
 8004918:	4a8b      	ldr	r2, [pc, #556]	; (8004b48 <menu+0x384c>)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	2002      	movs	r0, #2
 8004924:	f003 fa59 	bl	8007dda <lcd_print_char>
					lcdVal++;
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	3301      	adds	r3, #1
 800492c:	623b      	str	r3, [r7, #32]
				for(int i=0; i<16; i++) {
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3301      	adds	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2b0f      	cmp	r3, #15
 8004938:	ddec      	ble.n	8004914 <menu+0x3618>
				}
			}
		}
	}

	if (menuSayac == 34) {
 800493a:	4b84      	ldr	r3, [pc, #528]	; (8004b4c <menu+0x3850>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b22      	cmp	r3, #34	; 0x22
 8004940:	f040 80ac 	bne.w	8004a9c <menu+0x37a0>
		calismaSayModu = 0;
 8004944:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <menu+0x3854>)
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
		int passLength = strlen(wifiPass);
 800494a:	4882      	ldr	r0, [pc, #520]	; (8004b54 <menu+0x3858>)
 800494c:	f7fb fc6a 	bl	8000224 <strlen>
 8004950:	4603      	mov	r3, r0
 8004952:	61bb      	str	r3, [r7, #24]

		convertArrays(3);
 8004954:	2003      	movs	r0, #3
 8004956:	f7fb ff4d 	bl	80007f4 <convertArrays>
		HAL_Delay(50);
 800495a:	2032      	movs	r0, #50	; 0x32
 800495c:	f003 ff7e 	bl	800885c <HAL_Delay>

		lcd_print(1, 1, "WIFI PASS       ");
 8004960:	4a7d      	ldr	r2, [pc, #500]	; (8004b58 <menu+0x385c>)
 8004962:	2101      	movs	r1, #1
 8004964:	2001      	movs	r0, #1
 8004966:	f003 fa23 	bl	8007db0 <lcd_print>
		if(passLength == 16) {
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b10      	cmp	r3, #16
 800496e:	d105      	bne.n	800497c <menu+0x3680>
			lcd_print(2, 1, wifiPass);
 8004970:	4a78      	ldr	r2, [pc, #480]	; (8004b54 <menu+0x3858>)
 8004972:	2101      	movs	r1, #1
 8004974:	2002      	movs	r0, #2
 8004976:	f003 fa1b 	bl	8007db0 <lcd_print>
 800497a:	e030      	b.n	80049de <menu+0x36e2>
		} else if(passLength < 16) {
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	2b0f      	cmp	r3, #15
 8004980:	dc15      	bgt.n	80049ae <menu+0x36b2>
			for(int i=0; i<16-passLength; i++) {
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	e00b      	b.n	80049a0 <menu+0x36a4>
				lcd_delete_char(2, passLength);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	4619      	mov	r1, r3
 800498e:	2002      	movs	r0, #2
 8004990:	f003 fa44 	bl	8007e1c <lcd_delete_char>
				passLength++;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	3301      	adds	r3, #1
 8004998:	61bb      	str	r3, [r7, #24]
			for(int i=0; i<16-passLength; i++) {
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	3301      	adds	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f1c3 0310 	rsb	r3, r3, #16
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	dbed      	blt.n	8004988 <menu+0x368c>
 80049ac:	e017      	b.n	80049de <menu+0x36e2>
			}
		} else {
			int lcdVal = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]

			//Eğer pass 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e00f      	b.n	80049d8 <menu+0x36dc>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	b2d9      	uxtb	r1, r3
 80049bc:	4a65      	ldr	r2, [pc, #404]	; (8004b54 <menu+0x3858>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	2002      	movs	r0, #2
 80049c8:	f003 fa07 	bl	8007dda <lcd_print_char>
				lcdVal++;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	3301      	adds	r3, #1
 80049d0:	613b      	str	r3, [r7, #16]
			for(int i=0; i<16; i++) {
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3301      	adds	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	ddec      	ble.n	80049b8 <menu+0x36bc>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049de:	2102      	movs	r1, #2
 80049e0:	485e      	ldr	r0, [pc, #376]	; (8004b5c <menu+0x3860>)
 80049e2:	f004 fd0b 	bl	80093fc <HAL_GPIO_ReadPin>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d157      	bne.n	8004a9c <menu+0x37a0>
 80049ec:	2104      	movs	r1, #4
 80049ee:	485b      	ldr	r0, [pc, #364]	; (8004b5c <menu+0x3860>)
 80049f0:	f004 fd04 	bl	80093fc <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d150      	bne.n	8004a9c <menu+0x37a0>
 80049fa:	4b59      	ldr	r3, [pc, #356]	; (8004b60 <menu+0x3864>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d049      	beq.n	8004a9c <menu+0x37a0>
			takeWifiPass();
 8004a08:	f002 fd38 	bl	800747c <takeWifiPass>

			convertArrays(3);
 8004a0c:	2003      	movs	r0, #3
 8004a0e:	f7fb fef1 	bl	80007f4 <convertArrays>
			HAL_Delay(50);
 8004a12:	2032      	movs	r0, #50	; 0x32
 8004a14:	f003 ff22 	bl	800885c <HAL_Delay>

			passLength = strlen(wifiPass);
 8004a18:	484e      	ldr	r0, [pc, #312]	; (8004b54 <menu+0x3858>)
 8004a1a:	f7fb fc03 	bl	8000224 <strlen>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	61bb      	str	r3, [r7, #24]

			HAL_Delay(250);
 8004a22:	20fa      	movs	r0, #250	; 0xfa
 8004a24:	f003 ff1a 	bl	800885c <HAL_Delay>
			if(passLength == 16) {
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d105      	bne.n	8004a3a <menu+0x373e>
				lcd_print(2, 1, wifiPass);
 8004a2e:	4a49      	ldr	r2, [pc, #292]	; (8004b54 <menu+0x3858>)
 8004a30:	2101      	movs	r1, #1
 8004a32:	2002      	movs	r0, #2
 8004a34:	f003 f9bc 	bl	8007db0 <lcd_print>
 8004a38:	e030      	b.n	8004a9c <menu+0x37a0>
			} else if(passLength < 16) {
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b0f      	cmp	r3, #15
 8004a3e:	dc15      	bgt.n	8004a6c <menu+0x3770>
				for(int i=0; i<16-passLength; i++) {
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e00b      	b.n	8004a5e <menu+0x3762>
					lcd_delete_char(2, passLength);
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	2002      	movs	r0, #2
 8004a4e:	f003 f9e5 	bl	8007e1c <lcd_delete_char>
					passLength++;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	3301      	adds	r3, #1
 8004a56:	61bb      	str	r3, [r7, #24]
				for(int i=0; i<16-passLength; i++) {
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f1c3 0310 	rsb	r3, r3, #16
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	dbed      	blt.n	8004a46 <menu+0x374a>
 8004a6a:	e017      	b.n	8004a9c <menu+0x37a0>
				}
			} else {
				int lcdVal = 1;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	607b      	str	r3, [r7, #4]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 8004a70:	2300      	movs	r3, #0
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	e00f      	b.n	8004a96 <menu+0x379a>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	b2d9      	uxtb	r1, r3
 8004a7a:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <menu+0x3858>)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	2002      	movs	r0, #2
 8004a86:	f003 f9a8 	bl	8007dda <lcd_print_char>
					lcdVal++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	607b      	str	r3, [r7, #4]
				for(int i=0; i<16; i++) {
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b0f      	cmp	r3, #15
 8004a9a:	ddec      	ble.n	8004a76 <menu+0x377a>
				}
			}
		}
	}

	if (menuSayac == 35) {
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <menu+0x3850>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b23      	cmp	r3, #35	; 0x23
 8004aa2:	d14d      	bne.n	8004b40 <menu+0x3844>
		if(dilSecim == 0) {
 8004aa4:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <menu+0x3868>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <menu+0x37c6>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004aac:	4a2e      	ldr	r2, [pc, #184]	; (8004b68 <menu+0x386c>)
 8004aae:	2101      	movs	r1, #1
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	f003 f97d 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004ab6:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <menu+0x3870>)
 8004ab8:	2101      	movs	r1, #1
 8004aba:	2002      	movs	r0, #2
 8004abc:	f003 f978 	bl	8007db0 <lcd_print>
 8004ac0:	e00d      	b.n	8004ade <menu+0x37e2>
		} else if(dilSecim == 1) {
 8004ac2:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <menu+0x3868>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d109      	bne.n	8004ade <menu+0x37e2>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004aca:	4a29      	ldr	r2, [pc, #164]	; (8004b70 <menu+0x3874>)
 8004acc:	2101      	movs	r1, #1
 8004ace:	2001      	movs	r0, #1
 8004ad0:	f003 f96e 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004ad4:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <menu+0x3878>)
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	2002      	movs	r0, #2
 8004ada:	f003 f969 	bl	8007db0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004ade:	2108      	movs	r1, #8
 8004ae0:	481e      	ldr	r0, [pc, #120]	; (8004b5c <menu+0x3860>)
 8004ae2:	f004 fc8b 	bl	80093fc <HAL_GPIO_ReadPin>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d129      	bne.n	8004b40 <menu+0x3844>
			menuGiris = 0;
 8004aec:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <menu+0x387c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004af2:	bf00      	nop
 8004af4:	4821      	ldr	r0, [pc, #132]	; (8004b7c <menu+0x3880>)
 8004af6:	f005 faaa 	bl	800a04e <HAL_I2C_GetError>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d0f9      	beq.n	8004af4 <menu+0x37f8>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004b00:	bf00      	nop
 8004b02:	481e      	ldr	r0, [pc, #120]	; (8004b7c <menu+0x3880>)
 8004b04:	f005 fa96 	bl	800a034 <HAL_I2C_GetState>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d1f9      	bne.n	8004b02 <menu+0x3806>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004b0e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004b12:	9302      	str	r3, [sp, #8]
 8004b14:	236e      	movs	r3, #110	; 0x6e
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <menu+0x3884>)
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	236e      	movs	r3, #110	; 0x6e
 8004b1e:	2200      	movs	r2, #0
 8004b20:	21a0      	movs	r1, #160	; 0xa0
 8004b22:	4816      	ldr	r0, [pc, #88]	; (8004b7c <menu+0x3880>)
 8004b24:	f004 ff24 	bl	8009970 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004b28:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004b2c:	f003 fe96 	bl	800885c <HAL_Delay>

			lcd_clear();
 8004b30:	f003 f96a 	bl	8007e08 <lcd_clear>
			HAL_Delay(500);
 8004b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b38:	f003 fe90 	bl	800885c <HAL_Delay>
			NVIC_SystemReset();
 8004b3c:	f7fc fbc8 	bl	80012d0 <__NVIC_SystemReset>
		}
	}
}
 8004b40:	bf00      	nop
 8004b42:	3738      	adds	r7, #56	; 0x38
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	200001a0 	.word	0x200001a0
 8004b4c:	20000234 	.word	0x20000234
 8004b50:	20000254 	.word	0x20000254
 8004b54:	200001b8 	.word	0x200001b8
 8004b58:	0800dbd0 	.word	0x0800dbd0
 8004b5c:	40010800 	.word	0x40010800
 8004b60:	20000263 	.word	0x20000263
 8004b64:	20000255 	.word	0x20000255
 8004b68:	0800dbe4 	.word	0x0800dbe4
 8004b6c:	0800dbf8 	.word	0x0800dbf8
 8004b70:	0800dc0c 	.word	0x0800dc0c
 8004b74:	0800dc20 	.word	0x0800dc20
 8004b78:	20000251 	.word	0x20000251
 8004b7c:	200003bc 	.word	0x200003bc
 8004b80:	20000118 	.word	0x20000118

08004b84 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004b94:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <lcdUpdate+0x9c>)
 8004b96:	2101      	movs	r1, #1
 8004b98:	2002      	movs	r0, #2
 8004b9a:	f003 f909 	bl	8007db0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004b9e:	e03b      	b.n	8004c18 <lcdUpdate+0x94>
	} else if(y==2) {
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d105      	bne.n	8004bb2 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <lcdUpdate+0x9c>)
 8004ba8:	2102      	movs	r1, #2
 8004baa:	2002      	movs	r0, #2
 8004bac:	f003 f900 	bl	8007db0 <lcd_print>
}
 8004bb0:	e032      	b.n	8004c18 <lcdUpdate+0x94>
	} else if(y==3) {
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d105      	bne.n	8004bc4 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <lcdUpdate+0x9c>)
 8004bba:	2103      	movs	r1, #3
 8004bbc:	2002      	movs	r0, #2
 8004bbe:	f003 f8f7 	bl	8007db0 <lcd_print>
}
 8004bc2:	e029      	b.n	8004c18 <lcdUpdate+0x94>
	} else if(y==4) {
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d105      	bne.n	8004bd6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <lcdUpdate+0x9c>)
 8004bcc:	2104      	movs	r1, #4
 8004bce:	2002      	movs	r0, #2
 8004bd0:	f003 f8ee 	bl	8007db0 <lcd_print>
}
 8004bd4:	e020      	b.n	8004c18 <lcdUpdate+0x94>
	} else if(y==5) {
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d105      	bne.n	8004be8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004bdc:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <lcdUpdate+0x9c>)
 8004bde:	2105      	movs	r1, #5
 8004be0:	2002      	movs	r0, #2
 8004be2:	f003 f8e5 	bl	8007db0 <lcd_print>
}
 8004be6:	e017      	b.n	8004c18 <lcdUpdate+0x94>
	} else if(y==6) {
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d105      	bne.n	8004bfa <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004bee:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <lcdUpdate+0x9c>)
 8004bf0:	2106      	movs	r1, #6
 8004bf2:	2002      	movs	r0, #2
 8004bf4:	f003 f8dc 	bl	8007db0 <lcd_print>
}
 8004bf8:	e00e      	b.n	8004c18 <lcdUpdate+0x94>
	} else if (y==7) {
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	2b07      	cmp	r3, #7
 8004bfe:	d10b      	bne.n	8004c18 <lcdUpdate+0x94>
		lcd_clear();
 8004c00:	f003 f902 	bl	8007e08 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004c04:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <lcdUpdate+0xa0>)
 8004c06:	2104      	movs	r1, #4
 8004c08:	2001      	movs	r0, #1
 8004c0a:	f003 f8d1 	bl	8007db0 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004c0e:	4a06      	ldr	r2, [pc, #24]	; (8004c28 <lcdUpdate+0xa4>)
 8004c10:	2106      	movs	r1, #6
 8004c12:	2002      	movs	r0, #2
 8004c14:	f003 f8cc 	bl	8007db0 <lcd_print>
}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	0800dc34 	.word	0x0800dc34
 8004c24:	0800dc38 	.word	0x0800dc38
 8004c28:	0800dc40 	.word	0x0800dc40

08004c2c <bekle>:

void bekle() {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
	timer1=millis;
 8004c30:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <bekle+0x124>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a47      	ldr	r2, [pc, #284]	; (8004d54 <bekle+0x128>)
 8004c36:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c38:	e002      	b.n	8004c40 <bekle+0x14>
    	butonKontrol = 1;
 8004c3a:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <bekle+0x12c>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c40:	2101      	movs	r1, #1
 8004c42:	4846      	ldr	r0, [pc, #280]	; (8004d5c <bekle+0x130>)
 8004c44:	f004 fbda 	bl	80093fc <HAL_GPIO_ReadPin>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d109      	bne.n	8004c62 <bekle+0x36>
 8004c4e:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <bekle+0x124>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <bekle+0x128>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d0ef      	beq.n	8004c3a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c5a:	e002      	b.n	8004c62 <bekle+0x36>
    	butonKontrol = 1;
 8004c5c:	4b3e      	ldr	r3, [pc, #248]	; (8004d58 <bekle+0x12c>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c62:	2108      	movs	r1, #8
 8004c64:	483e      	ldr	r0, [pc, #248]	; (8004d60 <bekle+0x134>)
 8004c66:	f004 fbc9 	bl	80093fc <HAL_GPIO_ReadPin>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d109      	bne.n	8004c84 <bekle+0x58>
 8004c70:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <bekle+0x124>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <bekle+0x128>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d0ef      	beq.n	8004c5c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c7c:	e002      	b.n	8004c84 <bekle+0x58>
    	butonKontrol = 1;
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <bekle+0x12c>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c84:	2102      	movs	r1, #2
 8004c86:	4835      	ldr	r0, [pc, #212]	; (8004d5c <bekle+0x130>)
 8004c88:	f004 fbb8 	bl	80093fc <HAL_GPIO_ReadPin>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d109      	bne.n	8004ca6 <bekle+0x7a>
 8004c92:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <bekle+0x124>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <bekle+0x128>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d0ef      	beq.n	8004c7e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c9e:	e002      	b.n	8004ca6 <bekle+0x7a>
    	butonKontrol = 1;
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <bekle+0x12c>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ca6:	2104      	movs	r1, #4
 8004ca8:	482c      	ldr	r0, [pc, #176]	; (8004d5c <bekle+0x130>)
 8004caa:	f004 fba7 	bl	80093fc <HAL_GPIO_ReadPin>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d109      	bne.n	8004cc8 <bekle+0x9c>
 8004cb4:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <bekle+0x124>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b26      	ldr	r3, [pc, #152]	; (8004d54 <bekle+0x128>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d0ef      	beq.n	8004ca0 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cc0:	e002      	b.n	8004cc8 <bekle+0x9c>
    	butonKontrol = 1;
 8004cc2:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <bekle+0x12c>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cc8:	2108      	movs	r1, #8
 8004cca:	4824      	ldr	r0, [pc, #144]	; (8004d5c <bekle+0x130>)
 8004ccc:	f004 fb96 	bl	80093fc <HAL_GPIO_ReadPin>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d109      	bne.n	8004cea <bekle+0xbe>
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <bekle+0x124>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <bekle+0x128>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d0ef      	beq.n	8004cc2 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ce2:	e002      	b.n	8004cea <bekle+0xbe>
    	butonKontrol = 1;
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <bekle+0x12c>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	481c      	ldr	r0, [pc, #112]	; (8004d60 <bekle+0x134>)
 8004cee:	f004 fb85 	bl	80093fc <HAL_GPIO_ReadPin>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <bekle+0xe0>
 8004cf8:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <bekle+0x124>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <bekle+0x128>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d0ef      	beq.n	8004ce4 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d04:	e002      	b.n	8004d0c <bekle+0xe0>
    	butonKontrol = 1;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <bekle+0x12c>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d10:	4813      	ldr	r0, [pc, #76]	; (8004d60 <bekle+0x134>)
 8004d12:	f004 fb73 	bl	80093fc <HAL_GPIO_ReadPin>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <bekle+0x104>
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <bekle+0x124>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <bekle+0x128>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d0ee      	beq.n	8004d06 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d28:	e002      	b.n	8004d30 <bekle+0x104>
    	butonKontrol = 1;
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <bekle+0x12c>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d34:	480a      	ldr	r0, [pc, #40]	; (8004d60 <bekle+0x134>)
 8004d36:	f004 fb61 	bl	80093fc <HAL_GPIO_ReadPin>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <bekle+0x120>
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <bekle+0x124>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <bekle+0x128>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d0ee      	beq.n	8004d2a <bekle+0xfe>
    }

}
 8004d4c:	bf00      	nop
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000210 	.word	0x20000210
 8004d54:	20000218 	.word	0x20000218
 8004d58:	20000263 	.word	0x20000263
 8004d5c:	40010800 	.word	0x40010800
 8004d60:	40011000 	.word	0x40011000

08004d64 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004d68:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <checkLCDBacklight+0x24>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <checkLCDBacklight+0x28>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b3b      	cmp	r3, #59	; 0x3b
 8004d74:	d903      	bls.n	8004d7e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004d76:	2000      	movs	r0, #0
 8004d78:	f003 f866 	bl	8007e48 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004d7c:	e002      	b.n	8004d84 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f003 f862 	bl	8007e48 <lcd_backlight>
}
 8004d84:	bf00      	nop
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000210 	.word	0x20000210
 8004d8c:	2000022c 	.word	0x2000022c

08004d90 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004d94:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <checkBasincSalteri+0x54>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <checkBasincSalteri+0x12>
		basincVar=1;
 8004d9c:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <checkBasincSalteri+0x58>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <checkBasincSalteri+0x54>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d119      	bne.n	8004dde <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004daa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dae:	480f      	ldr	r0, [pc, #60]	; (8004dec <checkBasincSalteri+0x5c>)
 8004db0:	f004 fb24 	bl	80093fc <HAL_GPIO_ReadPin>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <checkBasincSalteri+0x60>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <checkBasincSalteri+0x64>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d90a      	bls.n	8004dde <checkBasincSalteri+0x4e>
				basincVar=1;
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <checkBasincSalteri+0x58>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004dce:	e006      	b.n	8004dde <checkBasincSalteri+0x4e>
			timer5=millis;
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <checkBasincSalteri+0x60>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <checkBasincSalteri+0x64>)
 8004dd6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <checkBasincSalteri+0x58>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000023b 	.word	0x2000023b
 8004de8:	20000237 	.word	0x20000237
 8004dec:	40011000 	.word	0x40011000
 8004df0:	20000210 	.word	0x20000210
 8004df4:	20000228 	.word	0x20000228

08004df8 <checkBasGonder>:

void checkBasGonder() {
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <checkBasGonder+0x74>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d10b      	bne.n	8004e1c <checkBasGonder+0x24>
 8004e04:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <checkBasGonder+0x78>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <checkBasGonder+0x24>
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <checkBasGonder+0x7c>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d103      	bne.n	8004e1c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <checkBasGonder+0x80>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e009      	b.n	8004e30 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004e1c:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <checkBasGonder+0x78>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f083 0301 	eor.w	r3, r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <checkBasGonder+0x80>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004e30:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <checkBasGonder+0x74>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10b      	bne.n	8004e50 <checkBasGonder+0x58>
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <checkBasGonder+0x84>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <checkBasGonder+0x58>
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <checkBasGonder+0x7c>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <checkBasGonder+0x88>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004e4e:	e009      	b.n	8004e64 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <checkBasGonder+0x84>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f083 0301 	eor.w	r3, r3, #1
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004e5e:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <checkBasGonder+0x88>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	20000235 	.word	0x20000235
 8004e70:	20000269 	.word	0x20000269
 8004e74:	20000243 	.word	0x20000243
 8004e78:	20000270 	.word	0x20000270
 8004e7c:	2000026c 	.word	0x2000026c
 8004e80:	20000271 	.word	0x20000271

08004e84 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004e88:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <checkKapiSecimleri+0x98>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004e90:	4b23      	ldr	r3, [pc, #140]	; (8004f20 <checkKapiSecimleri+0x9c>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004e96:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <checkKapiSecimleri+0x98>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d10e      	bne.n	8004ebc <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ea2:	4820      	ldr	r0, [pc, #128]	; (8004f24 <checkKapiSecimleri+0xa0>)
 8004ea4:	f004 faaa 	bl	80093fc <HAL_GPIO_ReadPin>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <checkKapiSecimleri+0x9c>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e002      	b.n	8004ebc <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <checkKapiSecimleri+0x9c>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <checkKapiSecimleri+0x98>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d10e      	bne.n	8004ee2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ec8:	4816      	ldr	r0, [pc, #88]	; (8004f24 <checkKapiSecimleri+0xa0>)
 8004eca:	f004 fa97 	bl	80093fc <HAL_GPIO_ReadPin>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004ed4:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <checkKapiSecimleri+0x9c>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e002      	b.n	8004ee2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <checkKapiSecimleri+0x9c>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <checkKapiSecimleri+0x98>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d116      	bne.n	8004f18 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eee:	480d      	ldr	r0, [pc, #52]	; (8004f24 <checkKapiSecimleri+0xa0>)
 8004ef0:	f004 fa84 	bl	80093fc <HAL_GPIO_ReadPin>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <checkKapiSecimleri+0x8e>
 8004efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004efe:	4809      	ldr	r0, [pc, #36]	; (8004f24 <checkKapiSecimleri+0xa0>)
 8004f00:	f004 fa7c 	bl	80093fc <HAL_GPIO_ReadPin>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <checkKapiSecimleri+0x9c>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004f10:	e002      	b.n	8004f18 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004f12:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <checkKapiSecimleri+0x9c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	2000023c 	.word	0x2000023c
 8004f20:	20000287 	.word	0x20000287
 8004f24:	40010800 	.word	0x40010800

08004f28 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004f2c:	4b62      	ldr	r3, [pc, #392]	; (80050b8 <checkAktifCalisma+0x190>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f041 833e 	bne.w	80065b2 <checkAktifCalisma+0x168a>
 8004f36:	4b61      	ldr	r3, [pc, #388]	; (80050bc <checkAktifCalisma+0x194>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f041 8339 	bne.w	80065b2 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004f40:	4b5f      	ldr	r3, [pc, #380]	; (80050c0 <checkAktifCalisma+0x198>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11a      	bne.n	8004f7e <checkAktifCalisma+0x56>
 8004f48:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <checkAktifCalisma+0x19c>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d116      	bne.n	8004f7e <checkAktifCalisma+0x56>
 8004f50:	4b5d      	ldr	r3, [pc, #372]	; (80050c8 <checkAktifCalisma+0x1a0>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <checkAktifCalisma+0x46>
 8004f58:	4b5c      	ldr	r3, [pc, #368]	; (80050cc <checkAktifCalisma+0x1a4>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f083 0301 	eor.w	r3, r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <checkAktifCalisma+0x46>
 8004f66:	4b5a      	ldr	r3, [pc, #360]	; (80050d0 <checkAktifCalisma+0x1a8>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d007      	beq.n	8004f7e <checkAktifCalisma+0x56>
 8004f6e:	4b59      	ldr	r3, [pc, #356]	; (80050d4 <checkAktifCalisma+0x1ac>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <checkAktifCalisma+0x80>
 8004f76:	4b58      	ldr	r3, [pc, #352]	; (80050d8 <checkAktifCalisma+0x1b0>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d114      	bne.n	8004fa8 <checkAktifCalisma+0x80>
 8004f7e:	4b57      	ldr	r3, [pc, #348]	; (80050dc <checkAktifCalisma+0x1b4>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d010      	beq.n	8004fa8 <checkAktifCalisma+0x80>
 8004f86:	4b56      	ldr	r3, [pc, #344]	; (80050e0 <checkAktifCalisma+0x1b8>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f94:	4853      	ldr	r0, [pc, #332]	; (80050e4 <checkAktifCalisma+0x1bc>)
 8004f96:	f004 fa48 	bl	800942a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004f9a:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <checkAktifCalisma+0x1c0>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004fa0:	4b52      	ldr	r3, [pc, #328]	; (80050ec <checkAktifCalisma+0x1c4>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e008      	b.n	8004fba <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fae:	484d      	ldr	r0, [pc, #308]	; (80050e4 <checkAktifCalisma+0x1bc>)
 8004fb0:	f004 fa3b 	bl	800942a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <checkAktifCalisma+0x1c0>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004fba:	4b40      	ldr	r3, [pc, #256]	; (80050bc <checkAktifCalisma+0x194>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d160      	bne.n	8005084 <checkAktifCalisma+0x15c>
 8004fc2:	4b46      	ldr	r3, [pc, #280]	; (80050dc <checkAktifCalisma+0x1b4>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d05c      	beq.n	8005084 <checkAktifCalisma+0x15c>
 8004fca:	4b45      	ldr	r3, [pc, #276]	; (80050e0 <checkAktifCalisma+0x1b8>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d058      	beq.n	8005084 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fd6:	4843      	ldr	r0, [pc, #268]	; (80050e4 <checkAktifCalisma+0x1bc>)
 8004fd8:	f004 fa10 	bl	80093fc <HAL_GPIO_ReadPin>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <checkAktifCalisma+0xc2>
 8004fe2:	4b43      	ldr	r3, [pc, #268]	; (80050f0 <checkAktifCalisma+0x1c8>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d04c      	beq.n	8005084 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fea:	2102      	movs	r1, #2
 8004fec:	4841      	ldr	r0, [pc, #260]	; (80050f4 <checkAktifCalisma+0x1cc>)
 8004fee:	f004 fa05 	bl	80093fc <HAL_GPIO_ReadPin>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d145      	bne.n	8005084 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004ff8:	4b3f      	ldr	r3, [pc, #252]	; (80050f8 <checkAktifCalisma+0x1d0>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d041      	beq.n	8005084 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005004:	4837      	ldr	r0, [pc, #220]	; (80050e4 <checkAktifCalisma+0x1bc>)
 8005006:	f004 f9f9 	bl	80093fc <HAL_GPIO_ReadPin>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d10e      	bne.n	800502e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005014:	4833      	ldr	r0, [pc, #204]	; (80050e4 <checkAktifCalisma+0x1bc>)
 8005016:	f004 f9f1 	bl	80093fc <HAL_GPIO_ReadPin>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	4834      	ldr	r0, [pc, #208]	; (80050f4 <checkAktifCalisma+0x1cc>)
 8005024:	f004 f9ea 	bl	80093fc <HAL_GPIO_ReadPin>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d003      	beq.n	8005036 <checkAktifCalisma+0x10e>
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <checkAktifCalisma+0x198>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d026      	beq.n	8005084 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <checkAktifCalisma+0x1a0>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	f083 0301 	eor.w	r3, r3, #1
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01f      	beq.n	8005084 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005044:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <checkAktifCalisma+0x19c>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f083 0301 	eor.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8005052:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <checkAktifCalisma+0x1ac>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	f083 0301 	eor.w	r3, r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d011      	beq.n	8005084 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005060:	4b26      	ldr	r3, [pc, #152]	; (80050fc <checkAktifCalisma+0x1d4>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f083 0301 	eor.w	r3, r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <checkAktifCalisma+0x1d8>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	f083 0301 	eor.w	r3, r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 800507c:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <checkAktifCalisma+0x198>)
 800507e:	2201      	movs	r2, #1
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e002      	b.n	800508a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <checkAktifCalisma+0x198>)
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <checkAktifCalisma+0x198>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d03a      	beq.n	8005108 <checkAktifCalisma+0x1e0>
 8005092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005096:	4817      	ldr	r0, [pc, #92]	; (80050f4 <checkAktifCalisma+0x1cc>)
 8005098:	f004 f9b0 	bl	80093fc <HAL_GPIO_ReadPin>
 800509c:	4603      	mov	r3, r0
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d132      	bne.n	8005108 <checkAktifCalisma+0x1e0>
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <checkAktifCalisma+0x1dc>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02e      	beq.n	8005108 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80050aa:	2201      	movs	r2, #1
 80050ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050b0:	480c      	ldr	r0, [pc, #48]	; (80050e4 <checkAktifCalisma+0x1bc>)
 80050b2:	f004 f9ba 	bl	800942a <HAL_GPIO_WritePin>
 80050b6:	e02d      	b.n	8005114 <checkAktifCalisma+0x1ec>
 80050b8:	20000252 	.word	0x20000252
 80050bc:	20000251 	.word	0x20000251
 80050c0:	20000269 	.word	0x20000269
 80050c4:	2000026a 	.word	0x2000026a
 80050c8:	2000026c 	.word	0x2000026c
 80050cc:	20000264 	.word	0x20000264
 80050d0:	20000247 	.word	0x20000247
 80050d4:	2000026b 	.word	0x2000026b
 80050d8:	20000246 	.word	0x20000246
 80050dc:	20000286 	.word	0x20000286
 80050e0:	20000287 	.word	0x20000287
 80050e4:	40010c00 	.word	0x40010c00
 80050e8:	20000288 	.word	0x20000288
 80050ec:	20000273 	.word	0x20000273
 80050f0:	20000270 	.word	0x20000270
 80050f4:	40011000 	.word	0x40011000
 80050f8:	20000237 	.word	0x20000237
 80050fc:	2000026e 	.word	0x2000026e
 8005100:	2000026f 	.word	0x2000026f
 8005104:	20000242 	.word	0x20000242
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800510e:	4860      	ldr	r0, [pc, #384]	; (8005290 <checkAktifCalisma+0x368>)
 8005110:	f004 f98b 	bl	800942a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005114:	4b5f      	ldr	r3, [pc, #380]	; (8005294 <checkAktifCalisma+0x36c>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d013      	beq.n	8005144 <checkAktifCalisma+0x21c>
 800511c:	4b5e      	ldr	r3, [pc, #376]	; (8005298 <checkAktifCalisma+0x370>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d007      	beq.n	8005134 <checkAktifCalisma+0x20c>
 8005124:	4b5c      	ldr	r3, [pc, #368]	; (8005298 <checkAktifCalisma+0x370>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d003      	beq.n	8005134 <checkAktifCalisma+0x20c>
 800512c:	4b5b      	ldr	r3, [pc, #364]	; (800529c <checkAktifCalisma+0x374>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d107      	bne.n	8005144 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005134:	2201      	movs	r2, #1
 8005136:	2104      	movs	r1, #4
 8005138:	4855      	ldr	r0, [pc, #340]	; (8005290 <checkAktifCalisma+0x368>)
 800513a:	f004 f976 	bl	800942a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800513e:	4b58      	ldr	r3, [pc, #352]	; (80052a0 <checkAktifCalisma+0x378>)
 8005140:	2201      	movs	r2, #1
 8005142:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005144:	4b56      	ldr	r3, [pc, #344]	; (80052a0 <checkAktifCalisma+0x378>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02f      	beq.n	80051ac <checkAktifCalisma+0x284>
 800514c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005150:	484f      	ldr	r0, [pc, #316]	; (8005290 <checkAktifCalisma+0x368>)
 8005152:	f004 f953 	bl	80093fc <HAL_GPIO_ReadPin>
 8005156:	4603      	mov	r3, r0
 8005158:	2b01      	cmp	r3, #1
 800515a:	d106      	bne.n	800516a <checkAktifCalisma+0x242>
 800515c:	4b51      	ldr	r3, [pc, #324]	; (80052a4 <checkAktifCalisma+0x37c>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	f083 0301 	eor.w	r3, r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <checkAktifCalisma+0x250>
 800516a:	2102      	movs	r1, #2
 800516c:	484e      	ldr	r0, [pc, #312]	; (80052a8 <checkAktifCalisma+0x380>)
 800516e:	f004 f945 	bl	80093fc <HAL_GPIO_ReadPin>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	d119      	bne.n	80051ac <checkAktifCalisma+0x284>
 8005178:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <checkAktifCalisma+0x384>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d015      	beq.n	80051ac <checkAktifCalisma+0x284>
 8005180:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <checkAktifCalisma+0x388>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d011      	beq.n	80051ac <checkAktifCalisma+0x284>
 8005188:	4b4a      	ldr	r3, [pc, #296]	; (80052b4 <checkAktifCalisma+0x38c>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00d      	beq.n	80051ac <checkAktifCalisma+0x284>
 8005190:	4b49      	ldr	r3, [pc, #292]	; (80052b8 <checkAktifCalisma+0x390>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f083 0301 	eor.w	r3, r3, #1
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d006      	beq.n	80051ac <checkAktifCalisma+0x284>
			timer2=millis;
 800519e:	4b47      	ldr	r3, [pc, #284]	; (80052bc <checkAktifCalisma+0x394>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a47      	ldr	r2, [pc, #284]	; (80052c0 <checkAktifCalisma+0x398>)
 80051a4:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80051a6:	4b44      	ldr	r3, [pc, #272]	; (80052b8 <checkAktifCalisma+0x390>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <checkAktifCalisma+0x394>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <checkAktifCalisma+0x398>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	4a43      	ldr	r2, [pc, #268]	; (80052c4 <checkAktifCalisma+0x39c>)
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d303      	bcc.n	80051c6 <checkAktifCalisma+0x29e>
 80051be:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <checkAktifCalisma+0x390>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d111      	bne.n	80051ea <checkAktifCalisma+0x2c2>
 80051c6:	4b39      	ldr	r3, [pc, #228]	; (80052ac <checkAktifCalisma+0x384>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f083 0301 	eor.w	r3, r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <checkAktifCalisma+0x2c2>
 80051d4:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <checkAktifCalisma+0x388>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	f083 0301 	eor.w	r3, r3, #1
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <checkAktifCalisma+0x2c2>
 80051e2:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <checkAktifCalisma+0x38c>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80051ea:	2200      	movs	r2, #0
 80051ec:	2104      	movs	r1, #4
 80051ee:	4828      	ldr	r0, [pc, #160]	; (8005290 <checkAktifCalisma+0x368>)
 80051f0:	f004 f91b 	bl	800942a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80051f4:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <checkAktifCalisma+0x378>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80051fa:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <checkAktifCalisma+0x390>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005200:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <checkAktifCalisma+0x3a0>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005208:	4b30      	ldr	r3, [pc, #192]	; (80052cc <checkAktifCalisma+0x3a4>)
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <checkAktifCalisma+0x3a0>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d116      	bne.n	8005244 <checkAktifCalisma+0x31c>
 8005216:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <checkAktifCalisma+0x3a8>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d112      	bne.n	8005244 <checkAktifCalisma+0x31c>
 800521e:	2101      	movs	r1, #1
 8005220:	4821      	ldr	r0, [pc, #132]	; (80052a8 <checkAktifCalisma+0x380>)
 8005222:	f004 f8eb 	bl	80093fc <HAL_GPIO_ReadPin>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10b      	bne.n	8005244 <checkAktifCalisma+0x31c>
 800522c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005230:	4817      	ldr	r0, [pc, #92]	; (8005290 <checkAktifCalisma+0x368>)
 8005232:	f004 f8e3 	bl	80093fc <HAL_GPIO_ReadPin>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800523c:	4b23      	ldr	r3, [pc, #140]	; (80052cc <checkAktifCalisma+0x3a4>)
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e011      	b.n	8005268 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005244:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <checkAktifCalisma+0x3a0>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d10d      	bne.n	8005268 <checkAktifCalisma+0x340>
 800524c:	2101      	movs	r1, #1
 800524e:	4816      	ldr	r0, [pc, #88]	; (80052a8 <checkAktifCalisma+0x380>)
 8005250:	f004 f8d4 	bl	80093fc <HAL_GPIO_ReadPin>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d106      	bne.n	8005268 <checkAktifCalisma+0x340>
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <checkAktifCalisma+0x3a8>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005262:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <checkAktifCalisma+0x3a4>)
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005268:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <checkAktifCalisma+0x3a0>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d134      	bne.n	80052da <checkAktifCalisma+0x3b2>
 8005270:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <checkAktifCalisma+0x3a8>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d130      	bne.n	80052da <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005278:	2101      	movs	r1, #1
 800527a:	480b      	ldr	r0, [pc, #44]	; (80052a8 <checkAktifCalisma+0x380>)
 800527c:	f004 f8be 	bl	80093fc <HAL_GPIO_ReadPin>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d126      	bne.n	80052d4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005286:	4b11      	ldr	r3, [pc, #68]	; (80052cc <checkAktifCalisma+0x3a4>)
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e025      	b.n	80052da <checkAktifCalisma+0x3b2>
 800528e:	bf00      	nop
 8005290:	40010c00 	.word	0x40010c00
 8005294:	20000269 	.word	0x20000269
 8005298:	20000243 	.word	0x20000243
 800529c:	20000247 	.word	0x20000247
 80052a0:	2000026d 	.word	0x2000026d
 80052a4:	20000270 	.word	0x20000270
 80052a8:	40011000 	.word	0x40011000
 80052ac:	20000286 	.word	0x20000286
 80052b0:	20000287 	.word	0x20000287
 80052b4:	20000237 	.word	0x20000237
 80052b8:	20000265 	.word	0x20000265
 80052bc:	20000210 	.word	0x20000210
 80052c0:	2000021c 	.word	0x2000021c
 80052c4:	20000248 	.word	0x20000248
 80052c8:	20000238 	.word	0x20000238
 80052cc:	2000028b 	.word	0x2000028b
 80052d0:	20000235 	.word	0x20000235
			} else {
				cerceveVar=0;
 80052d4:	4b7f      	ldr	r3, [pc, #508]	; (80054d4 <checkAktifCalisma+0x5ac>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80052da:	4b7f      	ldr	r3, [pc, #508]	; (80054d8 <checkAktifCalisma+0x5b0>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d17c      	bne.n	80053dc <checkAktifCalisma+0x4b4>
 80052e2:	4b7e      	ldr	r3, [pc, #504]	; (80054dc <checkAktifCalisma+0x5b4>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d078      	beq.n	80053dc <checkAktifCalisma+0x4b4>
 80052ea:	4b7d      	ldr	r3, [pc, #500]	; (80054e0 <checkAktifCalisma+0x5b8>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d074      	beq.n	80053dc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80052f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052f6:	487b      	ldr	r0, [pc, #492]	; (80054e4 <checkAktifCalisma+0x5bc>)
 80052f8:	f004 f880 	bl	80093fc <HAL_GPIO_ReadPin>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <checkAktifCalisma+0x3e2>
 8005302:	4b79      	ldr	r3, [pc, #484]	; (80054e8 <checkAktifCalisma+0x5c0>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d068      	beq.n	80053dc <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800530a:	4b72      	ldr	r3, [pc, #456]	; (80054d4 <checkAktifCalisma+0x5ac>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d064      	beq.n	80053dc <checkAktifCalisma+0x4b4>
 8005312:	4b76      	ldr	r3, [pc, #472]	; (80054ec <checkAktifCalisma+0x5c4>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	f083 0301 	eor.w	r3, r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d05d      	beq.n	80053dc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005320:	2104      	movs	r1, #4
 8005322:	4873      	ldr	r0, [pc, #460]	; (80054f0 <checkAktifCalisma+0x5c8>)
 8005324:	f004 f86a 	bl	80093fc <HAL_GPIO_ReadPin>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <checkAktifCalisma+0x40e>
 800532e:	4b71      	ldr	r3, [pc, #452]	; (80054f4 <checkAktifCalisma+0x5cc>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d152      	bne.n	80053dc <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800533a:	486a      	ldr	r0, [pc, #424]	; (80054e4 <checkAktifCalisma+0x5bc>)
 800533c:	f004 f85e 	bl	80093fc <HAL_GPIO_ReadPin>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10e      	bne.n	8005364 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800534a:	4866      	ldr	r0, [pc, #408]	; (80054e4 <checkAktifCalisma+0x5bc>)
 800534c:	f004 f856 	bl	80093fc <HAL_GPIO_ReadPin>
 8005350:	4603      	mov	r3, r0
 8005352:	2b01      	cmp	r3, #1
 8005354:	d106      	bne.n	8005364 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005356:	2140      	movs	r1, #64	; 0x40
 8005358:	4865      	ldr	r0, [pc, #404]	; (80054f0 <checkAktifCalisma+0x5c8>)
 800535a:	f004 f84f 	bl	80093fc <HAL_GPIO_ReadPin>
 800535e:	4603      	mov	r3, r0
 8005360:	2b01      	cmp	r3, #1
 8005362:	d003      	beq.n	800536c <checkAktifCalisma+0x444>
 8005364:	4b64      	ldr	r3, [pc, #400]	; (80054f8 <checkAktifCalisma+0x5d0>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d037      	beq.n	80053dc <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800536c:	4b63      	ldr	r3, [pc, #396]	; (80054fc <checkAktifCalisma+0x5d4>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f083 0301 	eor.w	r3, r3, #1
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d030      	beq.n	80053dc <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800537a:	4b61      	ldr	r3, [pc, #388]	; (8005500 <checkAktifCalisma+0x5d8>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	f083 0301 	eor.w	r3, r3, #1
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d029      	beq.n	80053dc <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005388:	4b5e      	ldr	r3, [pc, #376]	; (8005504 <checkAktifCalisma+0x5dc>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	f083 0301 	eor.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d022      	beq.n	80053dc <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005396:	4b5c      	ldr	r3, [pc, #368]	; (8005508 <checkAktifCalisma+0x5e0>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80053a4:	4b59      	ldr	r3, [pc, #356]	; (800550c <checkAktifCalisma+0x5e4>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f083 0301 	eor.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d014      	beq.n	80053dc <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80053b2:	4b57      	ldr	r3, [pc, #348]	; (8005510 <checkAktifCalisma+0x5e8>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f083 0301 	eor.w	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00d      	beq.n	80053dc <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80053c0:	2201      	movs	r2, #1
 80053c2:	2102      	movs	r1, #2
 80053c4:	4847      	ldr	r0, [pc, #284]	; (80054e4 <checkAktifCalisma+0x5bc>)
 80053c6:	f004 f830 	bl	800942a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80053ca:	4b4b      	ldr	r3, [pc, #300]	; (80054f8 <checkAktifCalisma+0x5d0>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80053d0:	4b50      	ldr	r3, [pc, #320]	; (8005514 <checkAktifCalisma+0x5ec>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80053d6:	4b50      	ldr	r3, [pc, #320]	; (8005518 <checkAktifCalisma+0x5f0>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80053dc:	4b46      	ldr	r3, [pc, #280]	; (80054f8 <checkAktifCalisma+0x5d0>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d033      	beq.n	800544c <checkAktifCalisma+0x524>
 80053e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053e8:	483e      	ldr	r0, [pc, #248]	; (80054e4 <checkAktifCalisma+0x5bc>)
 80053ea:	f004 f807 	bl	80093fc <HAL_GPIO_ReadPin>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d106      	bne.n	8005402 <checkAktifCalisma+0x4da>
 80053f4:	4b3c      	ldr	r3, [pc, #240]	; (80054e8 <checkAktifCalisma+0x5c0>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f083 0301 	eor.w	r3, r3, #1
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <checkAktifCalisma+0x4f0>
 8005402:	2104      	movs	r1, #4
 8005404:	483a      	ldr	r0, [pc, #232]	; (80054f0 <checkAktifCalisma+0x5c8>)
 8005406:	f003 fff9 	bl	80093fc <HAL_GPIO_ReadPin>
 800540a:	4603      	mov	r3, r0
 800540c:	2b01      	cmp	r3, #1
 800540e:	d11d      	bne.n	800544c <checkAktifCalisma+0x524>
 8005410:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <checkAktifCalisma+0x5cc>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d019      	beq.n	800544c <checkAktifCalisma+0x524>
 8005418:	4b30      	ldr	r3, [pc, #192]	; (80054dc <checkAktifCalisma+0x5b4>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d015      	beq.n	800544c <checkAktifCalisma+0x524>
 8005420:	4b2f      	ldr	r3, [pc, #188]	; (80054e0 <checkAktifCalisma+0x5b8>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d011      	beq.n	800544c <checkAktifCalisma+0x524>
 8005428:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <checkAktifCalisma+0x5ac>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00d      	beq.n	800544c <checkAktifCalisma+0x524>
 8005430:	4b3a      	ldr	r3, [pc, #232]	; (800551c <checkAktifCalisma+0x5f4>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f083 0301 	eor.w	r3, r3, #1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <checkAktifCalisma+0x524>
			timer2=millis;
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <checkAktifCalisma+0x5f8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a38      	ldr	r2, [pc, #224]	; (8005524 <checkAktifCalisma+0x5fc>)
 8005444:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005446:	4b35      	ldr	r3, [pc, #212]	; (800551c <checkAktifCalisma+0x5f4>)
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800544c:	4b34      	ldr	r3, [pc, #208]	; (8005520 <checkAktifCalisma+0x5f8>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b34      	ldr	r3, [pc, #208]	; (8005524 <checkAktifCalisma+0x5fc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	4a34      	ldr	r2, [pc, #208]	; (8005528 <checkAktifCalisma+0x600>)
 8005458:	7812      	ldrb	r2, [r2, #0]
 800545a:	4293      	cmp	r3, r2
 800545c:	d303      	bcc.n	8005466 <checkAktifCalisma+0x53e>
 800545e:	4b2f      	ldr	r3, [pc, #188]	; (800551c <checkAktifCalisma+0x5f4>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d114      	bne.n	8005490 <checkAktifCalisma+0x568>
 8005466:	4b1d      	ldr	r3, [pc, #116]	; (80054dc <checkAktifCalisma+0x5b4>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f083 0301 	eor.w	r3, r3, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10d      	bne.n	8005490 <checkAktifCalisma+0x568>
 8005474:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <checkAktifCalisma+0x5b8>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f083 0301 	eor.w	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <checkAktifCalisma+0x568>
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <checkAktifCalisma+0x5ac>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f083 0301 	eor.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005490:	2200      	movs	r2, #0
 8005492:	2102      	movs	r1, #2
 8005494:	4813      	ldr	r0, [pc, #76]	; (80054e4 <checkAktifCalisma+0x5bc>)
 8005496:	f003 ffc8 	bl	800942a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <checkAktifCalisma+0x5d0>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <checkAktifCalisma+0x5f4>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <checkAktifCalisma+0x5d0>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d040      	beq.n	8005530 <checkAktifCalisma+0x608>
 80054ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054b2:	480f      	ldr	r0, [pc, #60]	; (80054f0 <checkAktifCalisma+0x5c8>)
 80054b4:	f003 ffa2 	bl	80093fc <HAL_GPIO_ReadPin>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d138      	bne.n	8005530 <checkAktifCalisma+0x608>
 80054be:	4b1b      	ldr	r3, [pc, #108]	; (800552c <checkAktifCalisma+0x604>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d034      	beq.n	8005530 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80054c6:	2201      	movs	r2, #1
 80054c8:	2101      	movs	r1, #1
 80054ca:	4806      	ldr	r0, [pc, #24]	; (80054e4 <checkAktifCalisma+0x5bc>)
 80054cc:	f003 ffad 	bl	800942a <HAL_GPIO_WritePin>
 80054d0:	e033      	b.n	800553a <checkAktifCalisma+0x612>
 80054d2:	bf00      	nop
 80054d4:	2000028b 	.word	0x2000028b
 80054d8:	20000251 	.word	0x20000251
 80054dc:	20000286 	.word	0x20000286
 80054e0:	20000287 	.word	0x20000287
 80054e4:	40010c00 	.word	0x40010c00
 80054e8:	20000271 	.word	0x20000271
 80054ec:	20000285 	.word	0x20000285
 80054f0:	40011000 	.word	0x40011000
 80054f4:	2000023a 	.word	0x2000023a
 80054f8:	2000026c 	.word	0x2000026c
 80054fc:	20000269 	.word	0x20000269
 8005500:	2000026d 	.word	0x2000026d
 8005504:	2000026a 	.word	0x2000026a
 8005508:	2000026b 	.word	0x2000026b
 800550c:	2000026e 	.word	0x2000026e
 8005510:	2000026f 	.word	0x2000026f
 8005514:	20000274 	.word	0x20000274
 8005518:	20000295 	.word	0x20000295
 800551c:	20000264 	.word	0x20000264
 8005520:	20000210 	.word	0x20000210
 8005524:	2000021c 	.word	0x2000021c
 8005528:	20000249 	.word	0x20000249
 800552c:	20000239 	.word	0x20000239
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005530:	2200      	movs	r2, #0
 8005532:	2101      	movs	r1, #1
 8005534:	4836      	ldr	r0, [pc, #216]	; (8005610 <checkAktifCalisma+0x6e8>)
 8005536:	f003 ff78 	bl	800942a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800553a:	4b36      	ldr	r3, [pc, #216]	; (8005614 <checkAktifCalisma+0x6ec>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f040 8080 	bne.w	8005644 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005544:	4b34      	ldr	r3, [pc, #208]	; (8005618 <checkAktifCalisma+0x6f0>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d003      	beq.n	8005554 <checkAktifCalisma+0x62c>
 800554c:	4b32      	ldr	r3, [pc, #200]	; (8005618 <checkAktifCalisma+0x6f0>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d177      	bne.n	8005644 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005554:	4b31      	ldr	r3, [pc, #196]	; (800561c <checkAktifCalisma+0x6f4>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d073      	beq.n	8005644 <checkAktifCalisma+0x71c>
 800555c:	4b30      	ldr	r3, [pc, #192]	; (8005620 <checkAktifCalisma+0x6f8>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d06f      	beq.n	8005644 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005568:	4829      	ldr	r0, [pc, #164]	; (8005610 <checkAktifCalisma+0x6e8>)
 800556a:	f003 ff47 	bl	80093fc <HAL_GPIO_ReadPin>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d167      	bne.n	8005644 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005578:	482a      	ldr	r0, [pc, #168]	; (8005624 <checkAktifCalisma+0x6fc>)
 800557a:	f003 ff3f 	bl	80093fc <HAL_GPIO_ReadPin>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <checkAktifCalisma+0x664>
 8005584:	4b28      	ldr	r3, [pc, #160]	; (8005628 <checkAktifCalisma+0x700>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d15b      	bne.n	8005644 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800558c:	2140      	movs	r1, #64	; 0x40
 800558e:	4825      	ldr	r0, [pc, #148]	; (8005624 <checkAktifCalisma+0x6fc>)
 8005590:	f003 ff34 	bl	80093fc <HAL_GPIO_ReadPin>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10f      	bne.n	80055ba <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800559a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800559e:	481c      	ldr	r0, [pc, #112]	; (8005610 <checkAktifCalisma+0x6e8>)
 80055a0:	f003 ff2c 	bl	80093fc <HAL_GPIO_ReadPin>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d107      	bne.n	80055ba <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80055aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055ae:	4818      	ldr	r0, [pc, #96]	; (8005610 <checkAktifCalisma+0x6e8>)
 80055b0:	f003 ff24 	bl	80093fc <HAL_GPIO_ReadPin>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d003      	beq.n	80055c2 <checkAktifCalisma+0x69a>
 80055ba:	4b1c      	ldr	r3, [pc, #112]	; (800562c <checkAktifCalisma+0x704>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d040      	beq.n	8005644 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <checkAktifCalisma+0x708>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	f083 0301 	eor.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d039      	beq.n	8005644 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80055d0:	4b18      	ldr	r3, [pc, #96]	; (8005634 <checkAktifCalisma+0x70c>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f083 0301 	eor.w	r3, r3, #1
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d032      	beq.n	8005644 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80055de:	4b16      	ldr	r3, [pc, #88]	; (8005638 <checkAktifCalisma+0x710>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f083 0301 	eor.w	r3, r3, #1
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d02b      	beq.n	8005644 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <checkAktifCalisma+0x714>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f083 0301 	eor.w	r3, r3, #1
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d024      	beq.n	8005644 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80055fa:	4b11      	ldr	r3, [pc, #68]	; (8005640 <checkAktifCalisma+0x718>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	f083 0301 	eor.w	r3, r3, #1
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01d      	beq.n	8005644 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005608:	4b08      	ldr	r3, [pc, #32]	; (800562c <checkAktifCalisma+0x704>)
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e01c      	b.n	800564a <checkAktifCalisma+0x722>
 8005610:	40010c00 	.word	0x40010c00
 8005614:	20000251 	.word	0x20000251
 8005618:	20000243 	.word	0x20000243
 800561c:	20000286 	.word	0x20000286
 8005620:	20000287 	.word	0x20000287
 8005624:	40011000 	.word	0x40011000
 8005628:	20000244 	.word	0x20000244
 800562c:	2000026a 	.word	0x2000026a
 8005630:	20000269 	.word	0x20000269
 8005634:	2000026d 	.word	0x2000026d
 8005638:	2000026c 	.word	0x2000026c
 800563c:	2000026b 	.word	0x2000026b
 8005640:	2000026f 	.word	0x2000026f
		} else {
			devmotoryukaricalisiyor=0;
 8005644:	4b64      	ldr	r3, [pc, #400]	; (80057d8 <checkAktifCalisma+0x8b0>)
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800564a:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <checkAktifCalisma+0x8b0>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005652:	2201      	movs	r2, #1
 8005654:	2120      	movs	r1, #32
 8005656:	4861      	ldr	r0, [pc, #388]	; (80057dc <checkAktifCalisma+0x8b4>)
 8005658:	f003 fee7 	bl	800942a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800565c:	4b60      	ldr	r3, [pc, #384]	; (80057e0 <checkAktifCalisma+0x8b8>)
 800565e:	2201      	movs	r2, #1
 8005660:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005662:	4b5f      	ldr	r3, [pc, #380]	; (80057e0 <checkAktifCalisma+0x8b8>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d025      	beq.n	80056b6 <checkAktifCalisma+0x78e>
 800566a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800566e:	485d      	ldr	r0, [pc, #372]	; (80057e4 <checkAktifCalisma+0x8bc>)
 8005670:	f003 fec4 	bl	80093fc <HAL_GPIO_ReadPin>
 8005674:	4603      	mov	r3, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	d007      	beq.n	800568a <checkAktifCalisma+0x762>
 800567a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800567e:	4857      	ldr	r0, [pc, #348]	; (80057dc <checkAktifCalisma+0x8b4>)
 8005680:	f003 febc 	bl	80093fc <HAL_GPIO_ReadPin>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d115      	bne.n	80056b6 <checkAktifCalisma+0x78e>
 800568a:	4b57      	ldr	r3, [pc, #348]	; (80057e8 <checkAktifCalisma+0x8c0>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <checkAktifCalisma+0x78e>
 8005692:	4b56      	ldr	r3, [pc, #344]	; (80057ec <checkAktifCalisma+0x8c4>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00d      	beq.n	80056b6 <checkAktifCalisma+0x78e>
 800569a:	4b55      	ldr	r3, [pc, #340]	; (80057f0 <checkAktifCalisma+0x8c8>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f083 0301 	eor.w	r3, r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d006      	beq.n	80056b6 <checkAktifCalisma+0x78e>
			timer2=millis;
 80056a8:	4b52      	ldr	r3, [pc, #328]	; (80057f4 <checkAktifCalisma+0x8cc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a52      	ldr	r2, [pc, #328]	; (80057f8 <checkAktifCalisma+0x8d0>)
 80056ae:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80056b0:	4b4f      	ldr	r3, [pc, #316]	; (80057f0 <checkAktifCalisma+0x8c8>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80056b6:	4b4f      	ldr	r3, [pc, #316]	; (80057f4 <checkAktifCalisma+0x8cc>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b4f      	ldr	r3, [pc, #316]	; (80057f8 <checkAktifCalisma+0x8d0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	4a4e      	ldr	r2, [pc, #312]	; (80057fc <checkAktifCalisma+0x8d4>)
 80056c2:	7812      	ldrb	r2, [r2, #0]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d303      	bcc.n	80056d0 <checkAktifCalisma+0x7a8>
 80056c8:	4b49      	ldr	r3, [pc, #292]	; (80057f0 <checkAktifCalisma+0x8c8>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10d      	bne.n	80056ec <checkAktifCalisma+0x7c4>
 80056d0:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <checkAktifCalisma+0x8c0>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <checkAktifCalisma+0x7c4>
 80056de:	4b43      	ldr	r3, [pc, #268]	; (80057ec <checkAktifCalisma+0x8c4>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80056ec:	2200      	movs	r2, #0
 80056ee:	2120      	movs	r1, #32
 80056f0:	483a      	ldr	r0, [pc, #232]	; (80057dc <checkAktifCalisma+0x8b4>)
 80056f2:	f003 fe9a 	bl	800942a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80056f6:	4b3a      	ldr	r3, [pc, #232]	; (80057e0 <checkAktifCalisma+0x8b8>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80056fc:	4b3c      	ldr	r3, [pc, #240]	; (80057f0 <checkAktifCalisma+0x8c8>)
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005702:	4b3f      	ldr	r3, [pc, #252]	; (8005800 <checkAktifCalisma+0x8d8>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 8088 	bne.w	800581c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800570c:	4b3d      	ldr	r3, [pc, #244]	; (8005804 <checkAktifCalisma+0x8dc>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d003      	beq.n	800571c <checkAktifCalisma+0x7f4>
 8005714:	4b3b      	ldr	r3, [pc, #236]	; (8005804 <checkAktifCalisma+0x8dc>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d17f      	bne.n	800581c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <checkAktifCalisma+0x8c0>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d07b      	beq.n	800581c <checkAktifCalisma+0x8f4>
 8005724:	4b31      	ldr	r3, [pc, #196]	; (80057ec <checkAktifCalisma+0x8c4>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d077      	beq.n	800581c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800572c:	2140      	movs	r1, #64	; 0x40
 800572e:	482b      	ldr	r0, [pc, #172]	; (80057dc <checkAktifCalisma+0x8b4>)
 8005730:	f003 fe64 	bl	80093fc <HAL_GPIO_ReadPin>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d170      	bne.n	800581c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800573a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800573e:	4827      	ldr	r0, [pc, #156]	; (80057dc <checkAktifCalisma+0x8b4>)
 8005740:	f003 fe5c 	bl	80093fc <HAL_GPIO_ReadPin>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <checkAktifCalisma+0x82a>
 800574a:	4b2f      	ldr	r3, [pc, #188]	; (8005808 <checkAktifCalisma+0x8e0>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d164      	bne.n	800581c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005756:	4823      	ldr	r0, [pc, #140]	; (80057e4 <checkAktifCalisma+0x8bc>)
 8005758:	f003 fe50 	bl	80093fc <HAL_GPIO_ReadPin>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d10f      	bne.n	8005782 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005766:	481f      	ldr	r0, [pc, #124]	; (80057e4 <checkAktifCalisma+0x8bc>)
 8005768:	f003 fe48 	bl	80093fc <HAL_GPIO_ReadPin>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d107      	bne.n	8005782 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005776:	481b      	ldr	r0, [pc, #108]	; (80057e4 <checkAktifCalisma+0x8bc>)
 8005778:	f003 fe40 	bl	80093fc <HAL_GPIO_ReadPin>
 800577c:	4603      	mov	r3, r0
 800577e:	2b01      	cmp	r3, #1
 8005780:	d003      	beq.n	800578a <checkAktifCalisma+0x862>
 8005782:	4b22      	ldr	r3, [pc, #136]	; (800580c <checkAktifCalisma+0x8e4>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d048      	beq.n	800581c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800578a:	4b21      	ldr	r3, [pc, #132]	; (8005810 <checkAktifCalisma+0x8e8>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d041      	beq.n	800581c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <checkAktifCalisma+0x8ec>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f083 0301 	eor.w	r3, r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d03a      	beq.n	800581c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <checkAktifCalisma+0x8f0>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f083 0301 	eor.w	r3, r3, #1
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d033      	beq.n	800581c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <checkAktifCalisma+0x8b8>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	f083 0301 	eor.w	r3, r3, #1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d02c      	beq.n	800581c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <checkAktifCalisma+0x8b0>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f083 0301 	eor.w	r3, r3, #1
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d025      	beq.n	800581c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <checkAktifCalisma+0x8e4>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e024      	b.n	8005822 <checkAktifCalisma+0x8fa>
 80057d8:	2000026a 	.word	0x2000026a
 80057dc:	40011000 	.word	0x40011000
 80057e0:	2000026e 	.word	0x2000026e
 80057e4:	40010c00 	.word	0x40010c00
 80057e8:	20000286 	.word	0x20000286
 80057ec:	20000287 	.word	0x20000287
 80057f0:	20000266 	.word	0x20000266
 80057f4:	20000210 	.word	0x20000210
 80057f8:	2000021c 	.word	0x2000021c
 80057fc:	2000024a 	.word	0x2000024a
 8005800:	20000251 	.word	0x20000251
 8005804:	20000243 	.word	0x20000243
 8005808:	20000245 	.word	0x20000245
 800580c:	2000026b 	.word	0x2000026b
 8005810:	20000269 	.word	0x20000269
 8005814:	2000026d 	.word	0x2000026d
 8005818:	2000026c 	.word	0x2000026c
		} else {
			devmotorasagicalisiyor=0;
 800581c:	4b96      	ldr	r3, [pc, #600]	; (8005a78 <checkAktifCalisma+0xb50>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005822:	4b95      	ldr	r3, [pc, #596]	; (8005a78 <checkAktifCalisma+0xb50>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800582a:	2201      	movs	r2, #1
 800582c:	2110      	movs	r1, #16
 800582e:	4893      	ldr	r0, [pc, #588]	; (8005a7c <checkAktifCalisma+0xb54>)
 8005830:	f003 fdfb 	bl	800942a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005834:	4b92      	ldr	r3, [pc, #584]	; (8005a80 <checkAktifCalisma+0xb58>)
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800583a:	4b91      	ldr	r3, [pc, #580]	; (8005a80 <checkAktifCalisma+0xb58>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d024      	beq.n	800588c <checkAktifCalisma+0x964>
 8005842:	2140      	movs	r1, #64	; 0x40
 8005844:	488d      	ldr	r0, [pc, #564]	; (8005a7c <checkAktifCalisma+0xb54>)
 8005846:	f003 fdd9 	bl	80093fc <HAL_GPIO_ReadPin>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d007      	beq.n	8005860 <checkAktifCalisma+0x938>
 8005850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005854:	4889      	ldr	r0, [pc, #548]	; (8005a7c <checkAktifCalisma+0xb54>)
 8005856:	f003 fdd1 	bl	80093fc <HAL_GPIO_ReadPin>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d115      	bne.n	800588c <checkAktifCalisma+0x964>
 8005860:	4b88      	ldr	r3, [pc, #544]	; (8005a84 <checkAktifCalisma+0xb5c>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d011      	beq.n	800588c <checkAktifCalisma+0x964>
 8005868:	4b87      	ldr	r3, [pc, #540]	; (8005a88 <checkAktifCalisma+0xb60>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00d      	beq.n	800588c <checkAktifCalisma+0x964>
 8005870:	4b86      	ldr	r3, [pc, #536]	; (8005a8c <checkAktifCalisma+0xb64>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f083 0301 	eor.w	r3, r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <checkAktifCalisma+0x964>
			timer2=millis;
 800587e:	4b84      	ldr	r3, [pc, #528]	; (8005a90 <checkAktifCalisma+0xb68>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a84      	ldr	r2, [pc, #528]	; (8005a94 <checkAktifCalisma+0xb6c>)
 8005884:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005886:	4b81      	ldr	r3, [pc, #516]	; (8005a8c <checkAktifCalisma+0xb64>)
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800588c:	4b80      	ldr	r3, [pc, #512]	; (8005a90 <checkAktifCalisma+0xb68>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4b80      	ldr	r3, [pc, #512]	; (8005a94 <checkAktifCalisma+0xb6c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	4a80      	ldr	r2, [pc, #512]	; (8005a98 <checkAktifCalisma+0xb70>)
 8005898:	7812      	ldrb	r2, [r2, #0]
 800589a:	4293      	cmp	r3, r2
 800589c:	d303      	bcc.n	80058a6 <checkAktifCalisma+0x97e>
 800589e:	4b7b      	ldr	r3, [pc, #492]	; (8005a8c <checkAktifCalisma+0xb64>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10d      	bne.n	80058c2 <checkAktifCalisma+0x99a>
 80058a6:	4b77      	ldr	r3, [pc, #476]	; (8005a84 <checkAktifCalisma+0xb5c>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	f083 0301 	eor.w	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <checkAktifCalisma+0x99a>
 80058b4:	4b74      	ldr	r3, [pc, #464]	; (8005a88 <checkAktifCalisma+0xb60>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f083 0301 	eor.w	r3, r3, #1
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2110      	movs	r1, #16
 80058c6:	486d      	ldr	r0, [pc, #436]	; (8005a7c <checkAktifCalisma+0xb54>)
 80058c8:	f003 fdaf 	bl	800942a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80058cc:	4b6c      	ldr	r3, [pc, #432]	; (8005a80 <checkAktifCalisma+0xb58>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80058d2:	4b6e      	ldr	r3, [pc, #440]	; (8005a8c <checkAktifCalisma+0xb64>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80058d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058dc:	486f      	ldr	r0, [pc, #444]	; (8005a9c <checkAktifCalisma+0xb74>)
 80058de:	f003 fd8d 	bl	80093fc <HAL_GPIO_ReadPin>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d120      	bne.n	800592a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80058e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058ec:	486b      	ldr	r0, [pc, #428]	; (8005a9c <checkAktifCalisma+0xb74>)
 80058ee:	f003 fd85 	bl	80093fc <HAL_GPIO_ReadPin>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d118      	bne.n	800592a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80058f8:	2104      	movs	r1, #4
 80058fa:	4868      	ldr	r0, [pc, #416]	; (8005a9c <checkAktifCalisma+0xb74>)
 80058fc:	f003 fd7e 	bl	80093fc <HAL_GPIO_ReadPin>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d111      	bne.n	800592a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005906:	2102      	movs	r1, #2
 8005908:	4864      	ldr	r0, [pc, #400]	; (8005a9c <checkAktifCalisma+0xb74>)
 800590a:	f003 fd77 	bl	80093fc <HAL_GPIO_ReadPin>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005914:	2101      	movs	r1, #1
 8005916:	4861      	ldr	r0, [pc, #388]	; (8005a9c <checkAktifCalisma+0xb74>)
 8005918:	f003 fd70 	bl	80093fc <HAL_GPIO_ReadPin>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <checkAktifCalisma+0xa02>
			makineStop=1;
 8005922:	4b5f      	ldr	r3, [pc, #380]	; (8005aa0 <checkAktifCalisma+0xb78>)
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e002      	b.n	8005930 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800592a:	4b5d      	ldr	r3, [pc, #372]	; (8005aa0 <checkAktifCalisma+0xb78>)
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005930:	4b5c      	ldr	r3, [pc, #368]	; (8005aa4 <checkAktifCalisma+0xb7c>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d144      	bne.n	80059c2 <checkAktifCalisma+0xa9a>
 8005938:	4b5b      	ldr	r3, [pc, #364]	; (8005aa8 <checkAktifCalisma+0xb80>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d003      	beq.n	8005948 <checkAktifCalisma+0xa20>
 8005940:	4b59      	ldr	r3, [pc, #356]	; (8005aa8 <checkAktifCalisma+0xb80>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d13c      	bne.n	80059c2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005948:	2180      	movs	r1, #128	; 0x80
 800594a:	484c      	ldr	r0, [pc, #304]	; (8005a7c <checkAktifCalisma+0xb54>)
 800594c:	f003 fd56 	bl	80093fc <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <checkAktifCalisma+0xa36>
 8005956:	4b55      	ldr	r3, [pc, #340]	; (8005aac <checkAktifCalisma+0xb84>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <checkAktifCalisma+0xa4e>
 800595e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005962:	484e      	ldr	r0, [pc, #312]	; (8005a9c <checkAktifCalisma+0xb74>)
 8005964:	f003 fd4a 	bl	80093fc <HAL_GPIO_ReadPin>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d129      	bne.n	80059c2 <checkAktifCalisma+0xa9a>
 800596e:	4b4f      	ldr	r3, [pc, #316]	; (8005aac <checkAktifCalisma+0xb84>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d125      	bne.n	80059c2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005976:	2104      	movs	r1, #4
 8005978:	4840      	ldr	r0, [pc, #256]	; (8005a7c <checkAktifCalisma+0xb54>)
 800597a:	f003 fd3f 	bl	80093fc <HAL_GPIO_ReadPin>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d003      	beq.n	800598c <checkAktifCalisma+0xa64>
 8005984:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <checkAktifCalisma+0xb88>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d11a      	bne.n	80059c2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800598c:	2102      	movs	r1, #2
 800598e:	483b      	ldr	r0, [pc, #236]	; (8005a7c <checkAktifCalisma+0xb54>)
 8005990:	f003 fd34 	bl	80093fc <HAL_GPIO_ReadPin>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d113      	bne.n	80059c2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800599a:	4b46      	ldr	r3, [pc, #280]	; (8005ab4 <checkAktifCalisma+0xb8c>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f083 0301 	eor.w	r3, r3, #1
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80059a8:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <checkAktifCalisma+0xb78>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80059b0:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <checkAktifCalisma+0xb90>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <checkAktifCalisma+0xb68>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a40      	ldr	r2, [pc, #256]	; (8005abc <checkAktifCalisma+0xb94>)
 80059bc:	6013      	str	r3, [r2, #0]
			bekle();
 80059be:	f7ff f935 	bl	8004c2c <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80059c2:	4b33      	ldr	r3, [pc, #204]	; (8005a90 <checkAktifCalisma+0xb68>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <checkAktifCalisma+0xb94>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	4a3c      	ldr	r2, [pc, #240]	; (8005ac0 <checkAktifCalisma+0xb98>)
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d211      	bcs.n	80059f8 <checkAktifCalisma+0xad0>
 80059d4:	2104      	movs	r1, #4
 80059d6:	4829      	ldr	r0, [pc, #164]	; (8005a7c <checkAktifCalisma+0xb54>)
 80059d8:	f003 fd10 	bl	80093fc <HAL_GPIO_ReadPin>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <checkAktifCalisma+0xad0>
 80059e2:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <checkAktifCalisma+0xb88>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d006      	beq.n	80059f8 <checkAktifCalisma+0xad0>
 80059ea:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <checkAktifCalisma+0xb78>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	f083 0301 	eor.w	r3, r3, #1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80059f8:	4b2f      	ldr	r3, [pc, #188]	; (8005ab8 <checkAktifCalisma+0xb90>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059fe:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <checkAktifCalisma+0xb7c>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d160      	bne.n	8005ac8 <checkAktifCalisma+0xba0>
 8005a06:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <checkAktifCalisma+0xb80>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d003      	beq.n	8005a16 <checkAktifCalisma+0xaee>
 8005a0e:	4b26      	ldr	r3, [pc, #152]	; (8005aa8 <checkAktifCalisma+0xb80>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d158      	bne.n	8005ac8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a16:	2104      	movs	r1, #4
 8005a18:	4818      	ldr	r0, [pc, #96]	; (8005a7c <checkAktifCalisma+0xb54>)
 8005a1a:	f003 fcef 	bl	80093fc <HAL_GPIO_ReadPin>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d003      	beq.n	8005a2c <checkAktifCalisma+0xb04>
 8005a24:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <checkAktifCalisma+0xb88>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d14d      	bne.n	8005ac8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	4813      	ldr	r0, [pc, #76]	; (8005a7c <checkAktifCalisma+0xb54>)
 8005a30:	f003 fce4 	bl	80093fc <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d146      	bne.n	8005ac8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	480f      	ldr	r0, [pc, #60]	; (8005a7c <checkAktifCalisma+0xb54>)
 8005a3e:	f003 fcdd 	bl	80093fc <HAL_GPIO_ReadPin>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <checkAktifCalisma+0xb28>
 8005a48:	4b18      	ldr	r3, [pc, #96]	; (8005aac <checkAktifCalisma+0xb84>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <checkAktifCalisma+0xb40>
 8005a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a54:	4811      	ldr	r0, [pc, #68]	; (8005a9c <checkAktifCalisma+0xb74>)
 8005a56:	f003 fcd1 	bl	80093fc <HAL_GPIO_ReadPin>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d133      	bne.n	8005ac8 <checkAktifCalisma+0xba0>
 8005a60:	4b12      	ldr	r3, [pc, #72]	; (8005aac <checkAktifCalisma+0xb84>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d12f      	bne.n	8005ac8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005a68:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <checkAktifCalisma+0xb78>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d02b      	beq.n	8005ac8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005a70:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <checkAktifCalisma+0xb9c>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e02a      	b.n	8005ace <checkAktifCalisma+0xba6>
 8005a78:	2000026b 	.word	0x2000026b
 8005a7c:	40011000 	.word	0x40011000
 8005a80:	2000026f 	.word	0x2000026f
 8005a84:	20000286 	.word	0x20000286
 8005a88:	20000287 	.word	0x20000287
 8005a8c:	20000267 	.word	0x20000267
 8005a90:	20000210 	.word	0x20000210
 8005a94:	2000021c 	.word	0x2000021c
 8005a98:	2000024a 	.word	0x2000024a
 8005a9c:	40010c00 	.word	0x40010c00
 8005aa0:	20000276 	.word	0x20000276
 8005aa4:	2000023d 	.word	0x2000023d
 8005aa8:	2000023c 	.word	0x2000023c
 8005aac:	20000240 	.word	0x20000240
 8005ab0:	2000023a 	.word	0x2000023a
 8005ab4:	20000263 	.word	0x20000263
 8005ab8:	20000277 	.word	0x20000277
 8005abc:	20000214 	.word	0x20000214
 8005ac0:	2000024d 	.word	0x2000024d
 8005ac4:	20000278 	.word	0x20000278
		} else {
			kapi1butonkontrol=0;
 8005ac8:	4b8b      	ldr	r3, [pc, #556]	; (8005cf8 <checkAktifCalisma+0xdd0>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ace:	4b8b      	ldr	r3, [pc, #556]	; (8005cfc <checkAktifCalisma+0xdd4>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d121      	bne.n	8005b1a <checkAktifCalisma+0xbf2>
 8005ad6:	4b8a      	ldr	r3, [pc, #552]	; (8005d00 <checkAktifCalisma+0xdd8>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d003      	beq.n	8005ae6 <checkAktifCalisma+0xbbe>
 8005ade:	4b88      	ldr	r3, [pc, #544]	; (8005d00 <checkAktifCalisma+0xdd8>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d119      	bne.n	8005b1a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4886      	ldr	r0, [pc, #536]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005aea:	f003 fc87 	bl	80093fc <HAL_GPIO_ReadPin>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d003      	beq.n	8005afc <checkAktifCalisma+0xbd4>
 8005af4:	4b84      	ldr	r3, [pc, #528]	; (8005d08 <checkAktifCalisma+0xde0>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10e      	bne.n	8005b1a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005afc:	2102      	movs	r1, #2
 8005afe:	4881      	ldr	r0, [pc, #516]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005b00:	f003 fc7c 	bl	80093fc <HAL_GPIO_ReadPin>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d107      	bne.n	8005b1a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005b0a:	4b80      	ldr	r3, [pc, #512]	; (8005d0c <checkAktifCalisma+0xde4>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005b12:	4b7f      	ldr	r3, [pc, #508]	; (8005d10 <checkAktifCalisma+0xde8>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e002      	b.n	8005b20 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005b1a:	4b7d      	ldr	r3, [pc, #500]	; (8005d10 <checkAktifCalisma+0xde8>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005b20:	4b75      	ldr	r3, [pc, #468]	; (8005cf8 <checkAktifCalisma+0xdd0>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <checkAktifCalisma+0xc10>
 8005b28:	4b79      	ldr	r3, [pc, #484]	; (8005d10 <checkAktifCalisma+0xde8>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <checkAktifCalisma+0xc10>
 8005b30:	4b78      	ldr	r3, [pc, #480]	; (8005d14 <checkAktifCalisma+0xdec>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	4876      	ldr	r0, [pc, #472]	; (8005d18 <checkAktifCalisma+0xdf0>)
 8005b3e:	f003 fc74 	bl	800942a <HAL_GPIO_WritePin>
 8005b42:	e004      	b.n	8005b4e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b44:	2200      	movs	r2, #0
 8005b46:	2180      	movs	r1, #128	; 0x80
 8005b48:	4873      	ldr	r0, [pc, #460]	; (8005d18 <checkAktifCalisma+0xdf0>)
 8005b4a:	f003 fc6e 	bl	800942a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b4e:	4b73      	ldr	r3, [pc, #460]	; (8005d1c <checkAktifCalisma+0xdf4>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d141      	bne.n	8005bda <checkAktifCalisma+0xcb2>
 8005b56:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <checkAktifCalisma+0xdd8>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d003      	beq.n	8005b66 <checkAktifCalisma+0xc3e>
 8005b5e:	4b68      	ldr	r3, [pc, #416]	; (8005d00 <checkAktifCalisma+0xdd8>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d139      	bne.n	8005bda <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b6a:	4866      	ldr	r0, [pc, #408]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005b6c:	f003 fc46 	bl	80093fc <HAL_GPIO_ReadPin>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <checkAktifCalisma+0xc56>
 8005b76:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <checkAktifCalisma+0xdf8>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <checkAktifCalisma+0xc6e>
 8005b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b82:	4868      	ldr	r0, [pc, #416]	; (8005d24 <checkAktifCalisma+0xdfc>)
 8005b84:	f003 fc3a 	bl	80093fc <HAL_GPIO_ReadPin>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d125      	bne.n	8005bda <checkAktifCalisma+0xcb2>
 8005b8e:	4b64      	ldr	r3, [pc, #400]	; (8005d20 <checkAktifCalisma+0xdf8>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d121      	bne.n	8005bda <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b96:	2102      	movs	r1, #2
 8005b98:	485a      	ldr	r0, [pc, #360]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005b9a:	f003 fc2f 	bl	80093fc <HAL_GPIO_ReadPin>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d11a      	bne.n	8005bda <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ba4:	2104      	movs	r1, #4
 8005ba6:	4857      	ldr	r0, [pc, #348]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005ba8:	f003 fc28 	bl	80093fc <HAL_GPIO_ReadPin>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d113      	bne.n	8005bda <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005bb2:	4b56      	ldr	r3, [pc, #344]	; (8005d0c <checkAktifCalisma+0xde4>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00f      	beq.n	8005bda <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005bba:	4b5b      	ldr	r3, [pc, #364]	; (8005d28 <checkAktifCalisma+0xe00>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	f083 0301 	eor.w	r3, r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005bc8:	4b58      	ldr	r3, [pc, #352]	; (8005d2c <checkAktifCalisma+0xe04>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005bce:	4b58      	ldr	r3, [pc, #352]	; (8005d30 <checkAktifCalisma+0xe08>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a58      	ldr	r2, [pc, #352]	; (8005d34 <checkAktifCalisma+0xe0c>)
 8005bd4:	6013      	str	r3, [r2, #0]
			bekle();
 8005bd6:	f7ff f829 	bl	8004c2c <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005bda:	4b55      	ldr	r3, [pc, #340]	; (8005d30 <checkAktifCalisma+0xe08>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b55      	ldr	r3, [pc, #340]	; (8005d34 <checkAktifCalisma+0xe0c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	4a54      	ldr	r2, [pc, #336]	; (8005d38 <checkAktifCalisma+0xe10>)
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d20d      	bcs.n	8005c08 <checkAktifCalisma+0xce0>
 8005bec:	2102      	movs	r1, #2
 8005bee:	4845      	ldr	r0, [pc, #276]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005bf0:	f003 fc04 	bl	80093fc <HAL_GPIO_ReadPin>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d006      	beq.n	8005c08 <checkAktifCalisma+0xce0>
 8005bfa:	4b44      	ldr	r3, [pc, #272]	; (8005d0c <checkAktifCalisma+0xde4>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	f083 0301 	eor.w	r3, r3, #1
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005c08:	4b48      	ldr	r3, [pc, #288]	; (8005d2c <checkAktifCalisma+0xe04>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c0e:	4b43      	ldr	r3, [pc, #268]	; (8005d1c <checkAktifCalisma+0xdf4>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d135      	bne.n	8005c82 <checkAktifCalisma+0xd5a>
 8005c16:	4b3a      	ldr	r3, [pc, #232]	; (8005d00 <checkAktifCalisma+0xdd8>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d003      	beq.n	8005c26 <checkAktifCalisma+0xcfe>
 8005c1e:	4b38      	ldr	r3, [pc, #224]	; (8005d00 <checkAktifCalisma+0xdd8>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d12d      	bne.n	8005c82 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005c26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c2a:	4836      	ldr	r0, [pc, #216]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005c2c:	f003 fbe6 	bl	80093fc <HAL_GPIO_ReadPin>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <checkAktifCalisma+0xd16>
 8005c36:	4b3a      	ldr	r3, [pc, #232]	; (8005d20 <checkAktifCalisma+0xdf8>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <checkAktifCalisma+0xd2e>
 8005c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c42:	4838      	ldr	r0, [pc, #224]	; (8005d24 <checkAktifCalisma+0xdfc>)
 8005c44:	f003 fbda 	bl	80093fc <HAL_GPIO_ReadPin>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d119      	bne.n	8005c82 <checkAktifCalisma+0xd5a>
 8005c4e:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <checkAktifCalisma+0xdf8>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d115      	bne.n	8005c82 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c56:	2102      	movs	r1, #2
 8005c58:	482a      	ldr	r0, [pc, #168]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005c5a:	f003 fbcf 	bl	80093fc <HAL_GPIO_ReadPin>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10e      	bne.n	8005c82 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c64:	2104      	movs	r1, #4
 8005c66:	4827      	ldr	r0, [pc, #156]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005c68:	f003 fbc8 	bl	80093fc <HAL_GPIO_ReadPin>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005c72:	4b26      	ldr	r3, [pc, #152]	; (8005d0c <checkAktifCalisma+0xde4>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005c7a:	4b30      	ldr	r3, [pc, #192]	; (8005d3c <checkAktifCalisma+0xe14>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	e002      	b.n	8005c88 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005c82:	4b2e      	ldr	r3, [pc, #184]	; (8005d3c <checkAktifCalisma+0xe14>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c88:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <checkAktifCalisma+0xdf4>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d11d      	bne.n	8005ccc <checkAktifCalisma+0xda4>
 8005c90:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <checkAktifCalisma+0xdd8>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d003      	beq.n	8005ca0 <checkAktifCalisma+0xd78>
 8005c98:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <checkAktifCalisma+0xdd8>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d115      	bne.n	8005ccc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ca0:	2102      	movs	r1, #2
 8005ca2:	4818      	ldr	r0, [pc, #96]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005ca4:	f003 fbaa 	bl	80093fc <HAL_GPIO_ReadPin>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10e      	bne.n	8005ccc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005cae:	2104      	movs	r1, #4
 8005cb0:	4814      	ldr	r0, [pc, #80]	; (8005d04 <checkAktifCalisma+0xddc>)
 8005cb2:	f003 fba3 	bl	80093fc <HAL_GPIO_ReadPin>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d107      	bne.n	8005ccc <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005cbc:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <checkAktifCalisma+0xde4>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005cc4:	4b1e      	ldr	r3, [pc, #120]	; (8005d40 <checkAktifCalisma+0xe18>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e002      	b.n	8005cd2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005ccc:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <checkAktifCalisma+0xe18>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005cd2:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <checkAktifCalisma+0xe14>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d107      	bne.n	8005cea <checkAktifCalisma+0xdc2>
 8005cda:	4b19      	ldr	r3, [pc, #100]	; (8005d40 <checkAktifCalisma+0xe18>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d103      	bne.n	8005cea <checkAktifCalisma+0xdc2>
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <checkAktifCalisma+0xe04>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d02c      	beq.n	8005d44 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005cea:	2201      	movs	r2, #1
 8005cec:	2140      	movs	r1, #64	; 0x40
 8005cee:	480a      	ldr	r0, [pc, #40]	; (8005d18 <checkAktifCalisma+0xdf0>)
 8005cf0:	f003 fb9b 	bl	800942a <HAL_GPIO_WritePin>
 8005cf4:	e02b      	b.n	8005d4e <checkAktifCalisma+0xe26>
 8005cf6:	bf00      	nop
 8005cf8:	20000278 	.word	0x20000278
 8005cfc:	2000023d 	.word	0x2000023d
 8005d00:	2000023c 	.word	0x2000023c
 8005d04:	40011000 	.word	0x40011000
 8005d08:	2000023a 	.word	0x2000023a
 8005d0c:	20000276 	.word	0x20000276
 8005d10:	20000279 	.word	0x20000279
 8005d14:	20000277 	.word	0x20000277
 8005d18:	40010800 	.word	0x40010800
 8005d1c:	2000023e 	.word	0x2000023e
 8005d20:	20000240 	.word	0x20000240
 8005d24:	40010c00 	.word	0x40010c00
 8005d28:	20000263 	.word	0x20000263
 8005d2c:	2000027a 	.word	0x2000027a
 8005d30:	20000210 	.word	0x20000210
 8005d34:	20000214 	.word	0x20000214
 8005d38:	2000024e 	.word	0x2000024e
 8005d3c:	2000027b 	.word	0x2000027b
 8005d40:	2000027c 	.word	0x2000027c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d44:	2200      	movs	r2, #0
 8005d46:	2140      	movs	r1, #64	; 0x40
 8005d48:	488d      	ldr	r0, [pc, #564]	; (8005f80 <checkAktifCalisma+0x1058>)
 8005d4a:	f003 fb6e 	bl	800942a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005d4e:	4b8d      	ldr	r3, [pc, #564]	; (8005f84 <checkAktifCalisma+0x105c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <checkAktifCalisma+0xe36>
 8005d56:	4b8b      	ldr	r3, [pc, #556]	; (8005f84 <checkAktifCalisma+0x105c>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d115      	bne.n	8005d8a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005d5e:	2104      	movs	r1, #4
 8005d60:	4889      	ldr	r0, [pc, #548]	; (8005f88 <checkAktifCalisma+0x1060>)
 8005d62:	f003 fb4b 	bl	80093fc <HAL_GPIO_ReadPin>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d003      	beq.n	8005d74 <checkAktifCalisma+0xe4c>
 8005d6c:	4b87      	ldr	r3, [pc, #540]	; (8005f8c <checkAktifCalisma+0x1064>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005d74:	2102      	movs	r1, #2
 8005d76:	4884      	ldr	r0, [pc, #528]	; (8005f88 <checkAktifCalisma+0x1060>)
 8005d78:	f003 fb40 	bl	80093fc <HAL_GPIO_ReadPin>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005d82:	4b83      	ldr	r3, [pc, #524]	; (8005f90 <checkAktifCalisma+0x1068>)
 8005d84:	2201      	movs	r2, #1
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e002      	b.n	8005d90 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005d8a:	4b81      	ldr	r3, [pc, #516]	; (8005f90 <checkAktifCalisma+0x1068>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005d90:	4b7c      	ldr	r3, [pc, #496]	; (8005f84 <checkAktifCalisma+0x105c>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d003      	beq.n	8005da0 <checkAktifCalisma+0xe78>
 8005d98:	4b7a      	ldr	r3, [pc, #488]	; (8005f84 <checkAktifCalisma+0x105c>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d111      	bne.n	8005dc4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005da0:	2102      	movs	r1, #2
 8005da2:	4879      	ldr	r0, [pc, #484]	; (8005f88 <checkAktifCalisma+0x1060>)
 8005da4:	f003 fb2a 	bl	80093fc <HAL_GPIO_ReadPin>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10a      	bne.n	8005dc4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005dae:	2104      	movs	r1, #4
 8005db0:	4875      	ldr	r0, [pc, #468]	; (8005f88 <checkAktifCalisma+0x1060>)
 8005db2:	f003 fb23 	bl	80093fc <HAL_GPIO_ReadPin>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d103      	bne.n	8005dc4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005dbc:	4b75      	ldr	r3, [pc, #468]	; (8005f94 <checkAktifCalisma+0x106c>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e002      	b.n	8005dca <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005dc4:	4b73      	ldr	r3, [pc, #460]	; (8005f94 <checkAktifCalisma+0x106c>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005dca:	4b71      	ldr	r3, [pc, #452]	; (8005f90 <checkAktifCalisma+0x1068>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00f      	beq.n	8005df2 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005dd2:	4b71      	ldr	r3, [pc, #452]	; (8005f98 <checkAktifCalisma+0x1070>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d10b      	bne.n	8005df2 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dde:	486f      	ldr	r0, [pc, #444]	; (8005f9c <checkAktifCalisma+0x1074>)
 8005de0:	f003 fb0c 	bl	80093fc <HAL_GPIO_ReadPin>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d103      	bne.n	8005df2 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005dea:	4b6d      	ldr	r3, [pc, #436]	; (8005fa0 <checkAktifCalisma+0x1078>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	e002      	b.n	8005df8 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005df2:	4b6b      	ldr	r3, [pc, #428]	; (8005fa0 <checkAktifCalisma+0x1078>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005df8:	4b66      	ldr	r3, [pc, #408]	; (8005f94 <checkAktifCalisma+0x106c>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00f      	beq.n	8005e20 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005e00:	4b65      	ldr	r3, [pc, #404]	; (8005f98 <checkAktifCalisma+0x1070>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10b      	bne.n	8005e20 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e0c:	4863      	ldr	r0, [pc, #396]	; (8005f9c <checkAktifCalisma+0x1074>)
 8005e0e:	f003 faf5 	bl	80093fc <HAL_GPIO_ReadPin>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d103      	bne.n	8005e20 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005e18:	4b62      	ldr	r3, [pc, #392]	; (8005fa4 <checkAktifCalisma+0x107c>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	e002      	b.n	8005e26 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005e20:	4b60      	ldr	r3, [pc, #384]	; (8005fa4 <checkAktifCalisma+0x107c>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e26:	4b60      	ldr	r3, [pc, #384]	; (8005fa8 <checkAktifCalisma+0x1080>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d137      	bne.n	8005e9e <checkAktifCalisma+0xf76>
 8005e2e:	4b5f      	ldr	r3, [pc, #380]	; (8005fac <checkAktifCalisma+0x1084>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d003      	beq.n	8005e3e <checkAktifCalisma+0xf16>
 8005e36:	4b5d      	ldr	r3, [pc, #372]	; (8005fac <checkAktifCalisma+0x1084>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d12f      	bne.n	8005e9e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e3e:	4b54      	ldr	r3, [pc, #336]	; (8005f90 <checkAktifCalisma+0x1068>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <checkAktifCalisma+0xf26>
 8005e46:	4b53      	ldr	r3, [pc, #332]	; (8005f94 <checkAktifCalisma+0x106c>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d027      	beq.n	8005e9e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e52:	484d      	ldr	r0, [pc, #308]	; (8005f88 <checkAktifCalisma+0x1060>)
 8005e54:	f003 fad2 	bl	80093fc <HAL_GPIO_ReadPin>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <checkAktifCalisma+0xf3e>
 8005e5e:	4b4e      	ldr	r3, [pc, #312]	; (8005f98 <checkAktifCalisma+0x1070>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e66:	4b4e      	ldr	r3, [pc, #312]	; (8005fa0 <checkAktifCalisma+0x1078>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <checkAktifCalisma+0xf4e>
 8005e6e:	4b4d      	ldr	r3, [pc, #308]	; (8005fa4 <checkAktifCalisma+0x107c>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d013      	beq.n	8005e9e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005e76:	4b4e      	ldr	r3, [pc, #312]	; (8005fb0 <checkAktifCalisma+0x1088>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00f      	beq.n	8005e9e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005e7e:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <checkAktifCalisma+0x108c>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	f083 0301 	eor.w	r3, r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005e8c:	4b4a      	ldr	r3, [pc, #296]	; (8005fb8 <checkAktifCalisma+0x1090>)
 8005e8e:	2201      	movs	r2, #1
 8005e90:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005e92:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <checkAktifCalisma+0x1094>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a4a      	ldr	r2, [pc, #296]	; (8005fc0 <checkAktifCalisma+0x1098>)
 8005e98:	6013      	str	r3, [r2, #0]
			bekle();
 8005e9a:	f7fe fec7 	bl	8004c2c <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005e9e:	4b47      	ldr	r3, [pc, #284]	; (8005fbc <checkAktifCalisma+0x1094>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b47      	ldr	r3, [pc, #284]	; (8005fc0 <checkAktifCalisma+0x1098>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	4a46      	ldr	r2, [pc, #280]	; (8005fc4 <checkAktifCalisma+0x109c>)
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d214      	bcs.n	8005eda <checkAktifCalisma+0xfb2>
 8005eb0:	4b37      	ldr	r3, [pc, #220]	; (8005f90 <checkAktifCalisma+0x1068>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	f083 0301 	eor.w	r3, r3, #1
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <checkAktifCalisma+0xfa4>
 8005ebe:	4b35      	ldr	r3, [pc, #212]	; (8005f94 <checkAktifCalisma+0x106c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f083 0301 	eor.w	r3, r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <checkAktifCalisma+0xfb2>
 8005ecc:	4b38      	ldr	r3, [pc, #224]	; (8005fb0 <checkAktifCalisma+0x1088>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f083 0301 	eor.w	r3, r3, #1
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005eda:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <checkAktifCalisma+0x1090>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005ee0:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <checkAktifCalisma+0x1080>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d12b      	bne.n	8005f40 <checkAktifCalisma+0x1018>
 8005ee8:	4b30      	ldr	r3, [pc, #192]	; (8005fac <checkAktifCalisma+0x1084>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d003      	beq.n	8005ef8 <checkAktifCalisma+0xfd0>
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <checkAktifCalisma+0x1084>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d123      	bne.n	8005f40 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <checkAktifCalisma+0x1068>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d103      	bne.n	8005f08 <checkAktifCalisma+0xfe0>
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <checkAktifCalisma+0x106c>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f0c:	481e      	ldr	r0, [pc, #120]	; (8005f88 <checkAktifCalisma+0x1060>)
 8005f0e:	f003 fa75 	bl	80093fc <HAL_GPIO_ReadPin>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <checkAktifCalisma+0xff8>
 8005f18:	4b1f      	ldr	r3, [pc, #124]	; (8005f98 <checkAktifCalisma+0x1070>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005f20:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <checkAktifCalisma+0x1078>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <checkAktifCalisma+0x1008>
 8005f28:	4b1e      	ldr	r3, [pc, #120]	; (8005fa4 <checkAktifCalisma+0x107c>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005f30:	4b1f      	ldr	r3, [pc, #124]	; (8005fb0 <checkAktifCalisma+0x1088>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005f38:	4b23      	ldr	r3, [pc, #140]	; (8005fc8 <checkAktifCalisma+0x10a0>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	e002      	b.n	8005f46 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005f40:	4b21      	ldr	r3, [pc, #132]	; (8005fc8 <checkAktifCalisma+0x10a0>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f46:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <checkAktifCalisma+0x1080>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d140      	bne.n	8005fd0 <checkAktifCalisma+0x10a8>
 8005f4e:	4b17      	ldr	r3, [pc, #92]	; (8005fac <checkAktifCalisma+0x1084>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d003      	beq.n	8005f5e <checkAktifCalisma+0x1036>
 8005f56:	4b15      	ldr	r3, [pc, #84]	; (8005fac <checkAktifCalisma+0x1084>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d138      	bne.n	8005fd0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <checkAktifCalisma+0x1068>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d103      	bne.n	8005f6e <checkAktifCalisma+0x1046>
 8005f66:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <checkAktifCalisma+0x106c>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d030      	beq.n	8005fd0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <checkAktifCalisma+0x1088>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d02c      	beq.n	8005fd0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <checkAktifCalisma+0x10a4>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	e02b      	b.n	8005fd6 <checkAktifCalisma+0x10ae>
 8005f7e:	bf00      	nop
 8005f80:	40010800 	.word	0x40010800
 8005f84:	20000241 	.word	0x20000241
 8005f88:	40011000 	.word	0x40011000
 8005f8c:	2000023a 	.word	0x2000023a
 8005f90:	20000280 	.word	0x20000280
 8005f94:	20000281 	.word	0x20000281
 8005f98:	20000240 	.word	0x20000240
 8005f9c:	40010c00 	.word	0x40010c00
 8005fa0:	20000290 	.word	0x20000290
 8005fa4:	20000291 	.word	0x20000291
 8005fa8:	2000023f 	.word	0x2000023f
 8005fac:	2000023c 	.word	0x2000023c
 8005fb0:	20000276 	.word	0x20000276
 8005fb4:	20000263 	.word	0x20000263
 8005fb8:	2000027d 	.word	0x2000027d
 8005fbc:	20000210 	.word	0x20000210
 8005fc0:	20000214 	.word	0x20000214
 8005fc4:	2000024f 	.word	0x2000024f
 8005fc8:	2000027e 	.word	0x2000027e
 8005fcc:	2000027f 	.word	0x2000027f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005fd0:	4b8b      	ldr	r3, [pc, #556]	; (8006200 <checkAktifCalisma+0x12d8>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005fd6:	4b8b      	ldr	r3, [pc, #556]	; (8006204 <checkAktifCalisma+0x12dc>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d107      	bne.n	8005fee <checkAktifCalisma+0x10c6>
 8005fde:	4b8a      	ldr	r3, [pc, #552]	; (8006208 <checkAktifCalisma+0x12e0>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <checkAktifCalisma+0x10c6>
 8005fe6:	4b86      	ldr	r3, [pc, #536]	; (8006200 <checkAktifCalisma+0x12d8>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d005      	beq.n	8005ffa <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005fee:	2201      	movs	r2, #1
 8005ff0:	2120      	movs	r1, #32
 8005ff2:	4886      	ldr	r0, [pc, #536]	; (800620c <checkAktifCalisma+0x12e4>)
 8005ff4:	f003 fa19 	bl	800942a <HAL_GPIO_WritePin>
 8005ff8:	e004      	b.n	8006004 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2120      	movs	r1, #32
 8005ffe:	4883      	ldr	r0, [pc, #524]	; (800620c <checkAktifCalisma+0x12e4>)
 8006000:	f003 fa13 	bl	800942a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006004:	4b82      	ldr	r3, [pc, #520]	; (8006210 <checkAktifCalisma+0x12e8>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00e      	beq.n	800602a <checkAktifCalisma+0x1102>
 800600c:	2102      	movs	r1, #2
 800600e:	4881      	ldr	r0, [pc, #516]	; (8006214 <checkAktifCalisma+0x12ec>)
 8006010:	f003 f9f4 	bl	80093fc <HAL_GPIO_ReadPin>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d107      	bne.n	800602a <checkAktifCalisma+0x1102>
 800601a:	4b7f      	ldr	r3, [pc, #508]	; (8006218 <checkAktifCalisma+0x12f0>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <checkAktifCalisma+0x1102>
 8006022:	4b7e      	ldr	r3, [pc, #504]	; (800621c <checkAktifCalisma+0x12f4>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d112      	bne.n	8006050 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800602a:	4b7d      	ldr	r3, [pc, #500]	; (8006220 <checkAktifCalisma+0x12f8>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d066      	beq.n	8006100 <checkAktifCalisma+0x11d8>
 8006032:	2104      	movs	r1, #4
 8006034:	4877      	ldr	r0, [pc, #476]	; (8006214 <checkAktifCalisma+0x12ec>)
 8006036:	f003 f9e1 	bl	80093fc <HAL_GPIO_ReadPin>
 800603a:	4603      	mov	r3, r0
 800603c:	2b01      	cmp	r3, #1
 800603e:	d15f      	bne.n	8006100 <checkAktifCalisma+0x11d8>
 8006040:	4b75      	ldr	r3, [pc, #468]	; (8006218 <checkAktifCalisma+0x12f0>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05b      	beq.n	8006100 <checkAktifCalisma+0x11d8>
 8006048:	4b74      	ldr	r3, [pc, #464]	; (800621c <checkAktifCalisma+0x12f4>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d057      	beq.n	8006100 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006050:	4b74      	ldr	r3, [pc, #464]	; (8006224 <checkAktifCalisma+0x12fc>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	b2da      	uxtb	r2, r3
 8006058:	4b72      	ldr	r3, [pc, #456]	; (8006224 <checkAktifCalisma+0x12fc>)
 800605a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 800605c:	4b71      	ldr	r3, [pc, #452]	; (8006224 <checkAktifCalisma+0x12fc>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b09      	cmp	r3, #9
 8006062:	d908      	bls.n	8006076 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006064:	4b6f      	ldr	r3, [pc, #444]	; (8006224 <checkAktifCalisma+0x12fc>)
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800606a:	4b6f      	ldr	r3, [pc, #444]	; (8006228 <checkAktifCalisma+0x1300>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4b6d      	ldr	r3, [pc, #436]	; (8006228 <checkAktifCalisma+0x1300>)
 8006074:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006076:	4b6c      	ldr	r3, [pc, #432]	; (8006228 <checkAktifCalisma+0x1300>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b09      	cmp	r3, #9
 800607c:	d908      	bls.n	8006090 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800607e:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <checkAktifCalisma+0x1300>)
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006084:	4b69      	ldr	r3, [pc, #420]	; (800622c <checkAktifCalisma+0x1304>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	b2da      	uxtb	r2, r3
 800608c:	4b67      	ldr	r3, [pc, #412]	; (800622c <checkAktifCalisma+0x1304>)
 800608e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006090:	4b66      	ldr	r3, [pc, #408]	; (800622c <checkAktifCalisma+0x1304>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b09      	cmp	r3, #9
 8006096:	d908      	bls.n	80060aa <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006098:	4b64      	ldr	r3, [pc, #400]	; (800622c <checkAktifCalisma+0x1304>)
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 800609e:	4b64      	ldr	r3, [pc, #400]	; (8006230 <checkAktifCalisma+0x1308>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	4b62      	ldr	r3, [pc, #392]	; (8006230 <checkAktifCalisma+0x1308>)
 80060a8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80060aa:	4b61      	ldr	r3, [pc, #388]	; (8006230 <checkAktifCalisma+0x1308>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b09      	cmp	r3, #9
 80060b0:	d908      	bls.n	80060c4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80060b2:	4b5f      	ldr	r3, [pc, #380]	; (8006230 <checkAktifCalisma+0x1308>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80060b8:	4b5e      	ldr	r3, [pc, #376]	; (8006234 <checkAktifCalisma+0x130c>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	4b5c      	ldr	r3, [pc, #368]	; (8006234 <checkAktifCalisma+0x130c>)
 80060c2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80060c4:	4b5b      	ldr	r3, [pc, #364]	; (8006234 <checkAktifCalisma+0x130c>)
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	4b5b      	ldr	r3, [pc, #364]	; (8006238 <checkAktifCalisma+0x1310>)
 80060ca:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80060ce:	4b58      	ldr	r3, [pc, #352]	; (8006230 <checkAktifCalisma+0x1308>)
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	4b59      	ldr	r3, [pc, #356]	; (8006238 <checkAktifCalisma+0x1310>)
 80060d4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80060d6:	4b55      	ldr	r3, [pc, #340]	; (800622c <checkAktifCalisma+0x1304>)
 80060d8:	781a      	ldrb	r2, [r3, #0]
 80060da:	4b57      	ldr	r3, [pc, #348]	; (8006238 <checkAktifCalisma+0x1310>)
 80060dc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80060de:	4b52      	ldr	r3, [pc, #328]	; (8006228 <checkAktifCalisma+0x1300>)
 80060e0:	781a      	ldrb	r2, [r3, #0]
 80060e2:	4b55      	ldr	r3, [pc, #340]	; (8006238 <checkAktifCalisma+0x1310>)
 80060e4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80060e6:	4b4f      	ldr	r3, [pc, #316]	; (8006224 <checkAktifCalisma+0x12fc>)
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	4b53      	ldr	r3, [pc, #332]	; (8006238 <checkAktifCalisma+0x1310>)
 80060ec:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80060ee:	4b53      	ldr	r3, [pc, #332]	; (800623c <checkAktifCalisma+0x1314>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80060f4:	4b46      	ldr	r3, [pc, #280]	; (8006210 <checkAktifCalisma+0x12e8>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80060fa:	4b49      	ldr	r3, [pc, #292]	; (8006220 <checkAktifCalisma+0x12f8>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006104:	484e      	ldr	r0, [pc, #312]	; (8006240 <checkAktifCalisma+0x1318>)
 8006106:	f003 f979 	bl	80093fc <HAL_GPIO_ReadPin>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d016      	beq.n	800613e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006110:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006114:	484a      	ldr	r0, [pc, #296]	; (8006240 <checkAktifCalisma+0x1318>)
 8006116:	f003 f971 	bl	80093fc <HAL_GPIO_ReadPin>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00e      	beq.n	800613e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006124:	4846      	ldr	r0, [pc, #280]	; (8006240 <checkAktifCalisma+0x1318>)
 8006126:	f003 f969 	bl	80093fc <HAL_GPIO_ReadPin>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006130:	2140      	movs	r1, #64	; 0x40
 8006132:	4838      	ldr	r0, [pc, #224]	; (8006214 <checkAktifCalisma+0x12ec>)
 8006134:	f003 f962 	bl	80093fc <HAL_GPIO_ReadPin>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <checkAktifCalisma+0x121e>
			startBasili=1;
 800613e:	4b41      	ldr	r3, [pc, #260]	; (8006244 <checkAktifCalisma+0x131c>)
 8006140:	2201      	movs	r2, #1
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	e002      	b.n	800614c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006146:	4b3f      	ldr	r3, [pc, #252]	; (8006244 <checkAktifCalisma+0x131c>)
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800614c:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <checkAktifCalisma+0x131c>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d016      	beq.n	8006182 <checkAktifCalisma+0x125a>
 8006154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006158:	4839      	ldr	r0, [pc, #228]	; (8006240 <checkAktifCalisma+0x1318>)
 800615a:	f003 f94f 	bl	80093fc <HAL_GPIO_ReadPin>
 800615e:	4603      	mov	r3, r0
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10e      	bne.n	8006182 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006164:	4b38      	ldr	r3, [pc, #224]	; (8006248 <checkAktifCalisma+0x1320>)
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800616a:	2001      	movs	r0, #1
 800616c:	f7fa fd88 	bl	8000c80 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006170:	2001      	movs	r0, #1
 8006172:	f7fa fd2b 	bl	8000bcc <hata2EEPROM>
			convertAndSendData();
 8006176:	f001 fc19 	bl	80079ac <convertAndSendData>
			acilstophatasi=1;
 800617a:	4b34      	ldr	r3, [pc, #208]	; (800624c <checkAktifCalisma+0x1324>)
 800617c:	2201      	movs	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e018      	b.n	80061b4 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006182:	4b32      	ldr	r3, [pc, #200]	; (800624c <checkAktifCalisma+0x1324>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d014      	beq.n	80061b4 <checkAktifCalisma+0x128c>
 800618a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800618e:	482c      	ldr	r0, [pc, #176]	; (8006240 <checkAktifCalisma+0x1318>)
 8006190:	f003 f934 	bl	80093fc <HAL_GPIO_ReadPin>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10c      	bne.n	80061b4 <checkAktifCalisma+0x128c>
 800619a:	4b2a      	ldr	r3, [pc, #168]	; (8006244 <checkAktifCalisma+0x131c>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f083 0301 	eor.w	r3, r3, #1
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80061a8:	4b28      	ldr	r3, [pc, #160]	; (800624c <checkAktifCalisma+0x1324>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80061ae:	2001      	movs	r0, #1
 80061b0:	f7fe fce8 	bl	8004b84 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80061b4:	4b26      	ldr	r3, [pc, #152]	; (8006250 <checkAktifCalisma+0x1328>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	f083 0301 	eor.w	r3, r3, #1
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d04e      	beq.n	8006260 <checkAktifCalisma+0x1338>
 80061c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061c6:	481e      	ldr	r0, [pc, #120]	; (8006240 <checkAktifCalisma+0x1318>)
 80061c8:	f003 f918 	bl	80093fc <HAL_GPIO_ReadPin>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <checkAktifCalisma+0x12b2>
 80061d2:	4b20      	ldr	r3, [pc, #128]	; (8006254 <checkAktifCalisma+0x132c>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d042      	beq.n	8006260 <checkAktifCalisma+0x1338>
 80061da:	4b1f      	ldr	r3, [pc, #124]	; (8006258 <checkAktifCalisma+0x1330>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d13e      	bne.n	8006260 <checkAktifCalisma+0x1338>
			hataVar=1;
 80061e2:	4b19      	ldr	r3, [pc, #100]	; (8006248 <checkAktifCalisma+0x1320>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80061e8:	2002      	movs	r0, #2
 80061ea:	f7fa fd49 	bl	8000c80 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80061ee:	2002      	movs	r0, #2
 80061f0:	f7fa fcec 	bl	8000bcc <hata2EEPROM>
			convertAndSendData();
 80061f4:	f001 fbda 	bl	80079ac <convertAndSendData>
			emniyetCercevesihatasi=1;
 80061f8:	4b18      	ldr	r3, [pc, #96]	; (800625c <checkAktifCalisma+0x1334>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e047      	b.n	8006290 <checkAktifCalisma+0x1368>
 8006200:	2000027f 	.word	0x2000027f
 8006204:	2000027e 	.word	0x2000027e
 8006208:	2000027d 	.word	0x2000027d
 800620c:	40010800 	.word	0x40010800
 8006210:	20000273 	.word	0x20000273
 8006214:	40011000 	.word	0x40011000
 8006218:	2000023a 	.word	0x2000023a
 800621c:	20000276 	.word	0x20000276
 8006220:	20000274 	.word	0x20000274
 8006224:	20000231 	.word	0x20000231
 8006228:	20000232 	.word	0x20000232
 800622c:	20000000 	.word	0x20000000
 8006230:	20000001 	.word	0x20000001
 8006234:	20000233 	.word	0x20000233
 8006238:	20000118 	.word	0x20000118
 800623c:	20000260 	.word	0x20000260
 8006240:	40010c00 	.word	0x40010c00
 8006244:	20000282 	.word	0x20000282
 8006248:	20000289 	.word	0x20000289
 800624c:	20000284 	.word	0x20000284
 8006250:	2000028b 	.word	0x2000028b
 8006254:	20000295 	.word	0x20000295
 8006258:	20000238 	.word	0x20000238
 800625c:	20000285 	.word	0x20000285
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006260:	4b9b      	ldr	r3, [pc, #620]	; (80064d0 <checkAktifCalisma+0x15a8>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <checkAktifCalisma+0x1368>
 8006268:	4b9a      	ldr	r3, [pc, #616]	; (80064d4 <checkAktifCalisma+0x15ac>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00f      	beq.n	8006290 <checkAktifCalisma+0x1368>
 8006270:	4b99      	ldr	r3, [pc, #612]	; (80064d8 <checkAktifCalisma+0x15b0>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	f083 0301 	eor.w	r3, r3, #1
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d008      	beq.n	8006290 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800627e:	4b94      	ldr	r3, [pc, #592]	; (80064d0 <checkAktifCalisma+0x15a8>)
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006284:	4b95      	ldr	r3, [pc, #596]	; (80064dc <checkAktifCalisma+0x15b4>)
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800628a:	2002      	movs	r0, #2
 800628c:	f7fe fc7a 	bl	8004b84 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006290:	4b93      	ldr	r3, [pc, #588]	; (80064e0 <checkAktifCalisma+0x15b8>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d11e      	bne.n	80062d6 <checkAktifCalisma+0x13ae>
 8006298:	4b92      	ldr	r3, [pc, #584]	; (80064e4 <checkAktifCalisma+0x15bc>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d11a      	bne.n	80062d6 <checkAktifCalisma+0x13ae>
 80062a0:	4b91      	ldr	r3, [pc, #580]	; (80064e8 <checkAktifCalisma+0x15c0>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d016      	beq.n	80062d6 <checkAktifCalisma+0x13ae>
 80062a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062ac:	488f      	ldr	r0, [pc, #572]	; (80064ec <checkAktifCalisma+0x15c4>)
 80062ae:	f003 f8a5 	bl	80093fc <HAL_GPIO_ReadPin>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d10e      	bne.n	80062d6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 80062b8:	4b8d      	ldr	r3, [pc, #564]	; (80064f0 <checkAktifCalisma+0x15c8>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80062be:	2003      	movs	r0, #3
 80062c0:	f7fa fcde 	bl	8000c80 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80062c4:	2003      	movs	r0, #3
 80062c6:	f7fa fc81 	bl	8000bcc <hata2EEPROM>
			convertAndSendData();
 80062ca:	f001 fb6f 	bl	80079ac <convertAndSendData>
			basinchatasi=1;
 80062ce:	4b89      	ldr	r3, [pc, #548]	; (80064f4 <checkAktifCalisma+0x15cc>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e015      	b.n	8006302 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80062d6:	4b87      	ldr	r3, [pc, #540]	; (80064f4 <checkAktifCalisma+0x15cc>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d011      	beq.n	8006302 <checkAktifCalisma+0x13da>
 80062de:	4b80      	ldr	r3, [pc, #512]	; (80064e0 <checkAktifCalisma+0x15b8>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d10d      	bne.n	8006302 <checkAktifCalisma+0x13da>
 80062e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062ea:	4883      	ldr	r0, [pc, #524]	; (80064f8 <checkAktifCalisma+0x15d0>)
 80062ec:	f003 f886 	bl	80093fc <HAL_GPIO_ReadPin>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d105      	bne.n	8006302 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80062f6:	4b7f      	ldr	r3, [pc, #508]	; (80064f4 <checkAktifCalisma+0x15cc>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80062fc:	2003      	movs	r0, #3
 80062fe:	f7fe fc41 	bl	8004b84 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006302:	4b7e      	ldr	r3, [pc, #504]	; (80064fc <checkAktifCalisma+0x15d4>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d103      	bne.n	8006312 <checkAktifCalisma+0x13ea>
 800630a:	4b7d      	ldr	r3, [pc, #500]	; (8006500 <checkAktifCalisma+0x15d8>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01e      	beq.n	8006350 <checkAktifCalisma+0x1428>
 8006312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006316:	487b      	ldr	r0, [pc, #492]	; (8006504 <checkAktifCalisma+0x15dc>)
 8006318:	f003 f870 	bl	80093fc <HAL_GPIO_ReadPin>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d116      	bne.n	8006350 <checkAktifCalisma+0x1428>
 8006322:	4b79      	ldr	r3, [pc, #484]	; (8006508 <checkAktifCalisma+0x15e0>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d003      	beq.n	8006332 <checkAktifCalisma+0x140a>
 800632a:	4b77      	ldr	r3, [pc, #476]	; (8006508 <checkAktifCalisma+0x15e0>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d10e      	bne.n	8006350 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006332:	4b6f      	ldr	r3, [pc, #444]	; (80064f0 <checkAktifCalisma+0x15c8>)
 8006334:	2201      	movs	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006338:	2004      	movs	r0, #4
 800633a:	f7fa fca1 	bl	8000c80 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800633e:	2004      	movs	r0, #4
 8006340:	f7fa fc44 	bl	8000bcc <hata2EEPROM>
			convertAndSendData();
 8006344:	f001 fb32 	bl	80079ac <convertAndSendData>
			katkapisivicihatasi=1;
 8006348:	4b70      	ldr	r3, [pc, #448]	; (800650c <checkAktifCalisma+0x15e4>)
 800634a:	2201      	movs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e01f      	b.n	8006390 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006350:	4b6e      	ldr	r3, [pc, #440]	; (800650c <checkAktifCalisma+0x15e4>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01b      	beq.n	8006390 <checkAktifCalisma+0x1468>
 8006358:	4b6d      	ldr	r3, [pc, #436]	; (8006510 <checkAktifCalisma+0x15e8>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d017      	beq.n	8006390 <checkAktifCalisma+0x1468>
 8006360:	4b66      	ldr	r3, [pc, #408]	; (80064fc <checkAktifCalisma+0x15d4>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	f083 0301 	eor.w	r3, r3, #1
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d010      	beq.n	8006390 <checkAktifCalisma+0x1468>
 800636e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006372:	4864      	ldr	r0, [pc, #400]	; (8006504 <checkAktifCalisma+0x15dc>)
 8006374:	f003 f842 	bl	80093fc <HAL_GPIO_ReadPin>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d108      	bne.n	8006390 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800637e:	4b63      	ldr	r3, [pc, #396]	; (800650c <checkAktifCalisma+0x15e4>)
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006384:	4b5e      	ldr	r3, [pc, #376]	; (8006500 <checkAktifCalisma+0x15d8>)
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800638a:	2004      	movs	r0, #4
 800638c:	f7fe fbfa 	bl	8004b84 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006390:	4b5a      	ldr	r3, [pc, #360]	; (80064fc <checkAktifCalisma+0x15d4>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <checkAktifCalisma+0x1478>
 8006398:	4b5e      	ldr	r3, [pc, #376]	; (8006514 <checkAktifCalisma+0x15ec>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01e      	beq.n	80063de <checkAktifCalisma+0x14b6>
 80063a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a4:	4857      	ldr	r0, [pc, #348]	; (8006504 <checkAktifCalisma+0x15dc>)
 80063a6:	f003 f829 	bl	80093fc <HAL_GPIO_ReadPin>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d116      	bne.n	80063de <checkAktifCalisma+0x14b6>
 80063b0:	4b55      	ldr	r3, [pc, #340]	; (8006508 <checkAktifCalisma+0x15e0>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d003      	beq.n	80063c0 <checkAktifCalisma+0x1498>
 80063b8:	4b53      	ldr	r3, [pc, #332]	; (8006508 <checkAktifCalisma+0x15e0>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d10e      	bne.n	80063de <checkAktifCalisma+0x14b6>
			hataVar=1;
 80063c0:	4b4b      	ldr	r3, [pc, #300]	; (80064f0 <checkAktifCalisma+0x15c8>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80063c6:	2005      	movs	r0, #5
 80063c8:	f7fa fc5a 	bl	8000c80 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80063cc:	2005      	movs	r0, #5
 80063ce:	f7fa fbfd 	bl	8000bcc <hata2EEPROM>
			convertAndSendData();
 80063d2:	f001 faeb 	bl	80079ac <convertAndSendData>
			tablakapisivicihatasi=1;
 80063d6:	4b50      	ldr	r3, [pc, #320]	; (8006518 <checkAktifCalisma+0x15f0>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e023      	b.n	8006426 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80063de:	4b4e      	ldr	r3, [pc, #312]	; (8006518 <checkAktifCalisma+0x15f0>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01f      	beq.n	8006426 <checkAktifCalisma+0x14fe>
 80063e6:	4b4a      	ldr	r3, [pc, #296]	; (8006510 <checkAktifCalisma+0x15e8>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01b      	beq.n	8006426 <checkAktifCalisma+0x14fe>
 80063ee:	4b43      	ldr	r3, [pc, #268]	; (80064fc <checkAktifCalisma+0x15d4>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f083 0301 	eor.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d014      	beq.n	8006426 <checkAktifCalisma+0x14fe>
 80063fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006400:	4840      	ldr	r0, [pc, #256]	; (8006504 <checkAktifCalisma+0x15dc>)
 8006402:	f002 fffb 	bl	80093fc <HAL_GPIO_ReadPin>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10c      	bne.n	8006426 <checkAktifCalisma+0x14fe>
 800640c:	4b40      	ldr	r3, [pc, #256]	; (8006510 <checkAktifCalisma+0x15e8>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006414:	4b40      	ldr	r3, [pc, #256]	; (8006518 <checkAktifCalisma+0x15f0>)
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800641a:	4b3e      	ldr	r3, [pc, #248]	; (8006514 <checkAktifCalisma+0x15ec>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006420:	2005      	movs	r0, #5
 8006422:	f7fe fbaf 	bl	8004b84 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006426:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <checkAktifCalisma+0x15c0>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <checkAktifCalisma+0x1516>
 800642e:	4b2a      	ldr	r3, [pc, #168]	; (80064d8 <checkAktifCalisma+0x15b0>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <checkAktifCalisma+0x1516>
 8006436:	4b39      	ldr	r3, [pc, #228]	; (800651c <checkAktifCalisma+0x15f4>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800643e:	4b38      	ldr	r3, [pc, #224]	; (8006520 <checkAktifCalisma+0x15f8>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	4b38      	ldr	r3, [pc, #224]	; (8006524 <checkAktifCalisma+0x15fc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	4a37      	ldr	r2, [pc, #220]	; (8006528 <checkAktifCalisma+0x1600>)
 800644a:	7812      	ldrb	r2, [r2, #0]
 800644c:	4293      	cmp	r3, r2
 800644e:	d30d      	bcc.n	800646c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006450:	4b27      	ldr	r3, [pc, #156]	; (80064f0 <checkAktifCalisma+0x15c8>)
 8006452:	2201      	movs	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006456:	2006      	movs	r0, #6
 8006458:	f7fa fc12 	bl	8000c80 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800645c:	2006      	movs	r0, #6
 800645e:	f7fa fbb5 	bl	8000bcc <hata2EEPROM>
			  	convertAndSendData();
 8006462:	f001 faa3 	bl	80079ac <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006466:	4b31      	ldr	r3, [pc, #196]	; (800652c <checkAktifCalisma+0x1604>)
 8006468:	2201      	movs	r2, #1
 800646a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800646c:	4b2f      	ldr	r3, [pc, #188]	; (800652c <checkAktifCalisma+0x1604>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d013      	beq.n	800649c <checkAktifCalisma+0x1574>
 8006474:	2108      	movs	r1, #8
 8006476:	4823      	ldr	r0, [pc, #140]	; (8006504 <checkAktifCalisma+0x15dc>)
 8006478:	f002 ffc0 	bl	80093fc <HAL_GPIO_ReadPin>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <checkAktifCalisma+0x1574>
 8006482:	4b1e      	ldr	r3, [pc, #120]	; (80064fc <checkAktifCalisma+0x15d4>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f083 0301 	eor.w	r3, r3, #1
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006490:	4b26      	ldr	r3, [pc, #152]	; (800652c <checkAktifCalisma+0x1604>)
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006496:	2006      	movs	r0, #6
 8006498:	f7fe fb74 	bl	8004b84 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800649c:	4b24      	ldr	r3, [pc, #144]	; (8006530 <checkAktifCalisma+0x1608>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <checkAktifCalisma+0x1594>
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <checkAktifCalisma+0x15b0>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d107      	bne.n	80064bc <checkAktifCalisma+0x1594>
 80064ac:	4b21      	ldr	r3, [pc, #132]	; (8006534 <checkAktifCalisma+0x160c>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <checkAktifCalisma+0x1594>
 80064b4:	4b19      	ldr	r3, [pc, #100]	; (800651c <checkAktifCalisma+0x15f4>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d03f      	beq.n	800653c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80064bc:	4b1e      	ldr	r3, [pc, #120]	; (8006538 <checkAktifCalisma+0x1610>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80064c2:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <checkAktifCalisma+0x15d8>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <checkAktifCalisma+0x15ec>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e03c      	b.n	800654a <checkAktifCalisma+0x1622>
 80064d0:	20000285 	.word	0x20000285
 80064d4:	2000028b 	.word	0x2000028b
 80064d8:	2000026c 	.word	0x2000026c
 80064dc:	20000295 	.word	0x20000295
 80064e0:	20000237 	.word	0x20000237
 80064e4:	2000023b 	.word	0x2000023b
 80064e8:	20000288 	.word	0x20000288
 80064ec:	40011000 	.word	0x40011000
 80064f0:	20000289 	.word	0x20000289
 80064f4:	20000292 	.word	0x20000292
 80064f8:	40010c00 	.word	0x40010c00
 80064fc:	20000282 	.word	0x20000282
 8006500:	20000296 	.word	0x20000296
 8006504:	40010800 	.word	0x40010800
 8006508:	2000023c 	.word	0x2000023c
 800650c:	20000293 	.word	0x20000293
 8006510:	20000276 	.word	0x20000276
 8006514:	20000297 	.word	0x20000297
 8006518:	20000294 	.word	0x20000294
 800651c:	2000026b 	.word	0x2000026b
 8006520:	20000210 	.word	0x20000210
 8006524:	20000224 	.word	0x20000224
 8006528:	2000024c 	.word	0x2000024c
 800652c:	20000283 	.word	0x20000283
 8006530:	20000269 	.word	0x20000269
 8006534:	2000026a 	.word	0x2000026a
 8006538:	2000028a 	.word	0x2000028a
		} else {
			makineCalisiyor=1;
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <checkAktifCalisma+0x1690>)
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006542:	4b1e      	ldr	r3, [pc, #120]	; (80065bc <checkAktifCalisma+0x1694>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <checkAktifCalisma+0x1698>)
 8006548:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800654a:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <checkAktifCalisma+0x169c>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d02f      	beq.n	80065b2 <checkAktifCalisma+0x168a>
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <checkAktifCalisma+0x16a0>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f083 0301 	eor.w	r3, r3, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d028      	beq.n	80065b2 <checkAktifCalisma+0x168a>
 8006560:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <checkAktifCalisma+0x16a4>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f083 0301 	eor.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d021      	beq.n	80065b2 <checkAktifCalisma+0x168a>
 800656e:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <checkAktifCalisma+0x16a8>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f083 0301 	eor.w	r3, r3, #1
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01a      	beq.n	80065b2 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800657c:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <checkAktifCalisma+0x16ac>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f083 0301 	eor.w	r3, r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d013      	beq.n	80065b2 <checkAktifCalisma+0x168a>
 800658a:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <checkAktifCalisma+0x16b0>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f083 0301 	eor.w	r3, r3, #1
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00c      	beq.n	80065b2 <checkAktifCalisma+0x168a>
 8006598:	4b10      	ldr	r3, [pc, #64]	; (80065dc <checkAktifCalisma+0x16b4>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f083 0301 	eor.w	r3, r3, #1
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <checkAktifCalisma+0x168a>
			hataVar=0;
 80065a6:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <checkAktifCalisma+0x169c>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80065ac:	2007      	movs	r0, #7
 80065ae:	f7fe fae9 	bl	8004b84 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80065b2:	bf00      	nop
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	2000028a 	.word	0x2000028a
 80065bc:	20000210 	.word	0x20000210
 80065c0:	20000224 	.word	0x20000224
 80065c4:	20000289 	.word	0x20000289
 80065c8:	20000284 	.word	0x20000284
 80065cc:	20000285 	.word	0x20000285
 80065d0:	20000292 	.word	0x20000292
 80065d4:	20000293 	.word	0x20000293
 80065d8:	20000294 	.word	0x20000294
 80065dc:	20000283 	.word	0x20000283

080065e0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80065e4:	4b8b      	ldr	r3, [pc, #556]	; (8006814 <checkDemoModCalisma+0x234>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	f040 8229 	bne.w	8006a40 <checkDemoModCalisma+0x460>
 80065ee:	4b8a      	ldr	r3, [pc, #552]	; (8006818 <checkDemoModCalisma+0x238>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8224 	beq.w	8006a40 <checkDemoModCalisma+0x460>
 80065f8:	4b88      	ldr	r3, [pc, #544]	; (800681c <checkDemoModCalisma+0x23c>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 821f 	bne.w	8006a40 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006602:	2102      	movs	r1, #2
 8006604:	4886      	ldr	r0, [pc, #536]	; (8006820 <checkDemoModCalisma+0x240>)
 8006606:	f002 fef9 	bl	80093fc <HAL_GPIO_ReadPin>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11d      	bne.n	800664c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006610:	4b84      	ldr	r3, [pc, #528]	; (8006824 <checkDemoModCalisma+0x244>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f083 0301 	eor.w	r3, r3, #1
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800661e:	4b82      	ldr	r3, [pc, #520]	; (8006828 <checkDemoModCalisma+0x248>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f083 0301 	eor.w	r3, r3, #1
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00f      	beq.n	800664c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 800662c:	4b7f      	ldr	r3, [pc, #508]	; (800682c <checkDemoModCalisma+0x24c>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f083 0301 	eor.w	r3, r3, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800663a:	2201      	movs	r2, #1
 800663c:	2104      	movs	r1, #4
 800663e:	487c      	ldr	r0, [pc, #496]	; (8006830 <checkDemoModCalisma+0x250>)
 8006640:	f002 fef3 	bl	800942a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006644:	4b7b      	ldr	r3, [pc, #492]	; (8006834 <checkDemoModCalisma+0x254>)
 8006646:	2201      	movs	r2, #1
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	e00e      	b.n	800666a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800664c:	2102      	movs	r1, #2
 800664e:	4874      	ldr	r0, [pc, #464]	; (8006820 <checkDemoModCalisma+0x240>)
 8006650:	f002 fed4 	bl	80093fc <HAL_GPIO_ReadPin>
 8006654:	4603      	mov	r3, r0
 8006656:	2b01      	cmp	r3, #1
 8006658:	d107      	bne.n	800666a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800665a:	2200      	movs	r2, #0
 800665c:	2104      	movs	r1, #4
 800665e:	4874      	ldr	r0, [pc, #464]	; (8006830 <checkDemoModCalisma+0x250>)
 8006660:	f002 fee3 	bl	800942a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006664:	4b73      	ldr	r3, [pc, #460]	; (8006834 <checkDemoModCalisma+0x254>)
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800666a:	4b72      	ldr	r3, [pc, #456]	; (8006834 <checkDemoModCalisma+0x254>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <checkDemoModCalisma+0xaa>
 8006672:	4b6d      	ldr	r3, [pc, #436]	; (8006828 <checkDemoModCalisma+0x248>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <checkDemoModCalisma+0xaa>
 800667a:	4b6c      	ldr	r3, [pc, #432]	; (800682c <checkDemoModCalisma+0x24c>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <checkDemoModCalisma+0xaa>
 8006682:	4b68      	ldr	r3, [pc, #416]	; (8006824 <checkDemoModCalisma+0x244>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800668a:	2201      	movs	r2, #1
 800668c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006690:	4867      	ldr	r0, [pc, #412]	; (8006830 <checkDemoModCalisma+0x250>)
 8006692:	f002 feca 	bl	800942a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006696:	2201      	movs	r2, #1
 8006698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800669c:	4864      	ldr	r0, [pc, #400]	; (8006830 <checkDemoModCalisma+0x250>)
 800669e:	f002 fec4 	bl	800942a <HAL_GPIO_WritePin>
 80066a2:	e00b      	b.n	80066bc <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066aa:	4861      	ldr	r0, [pc, #388]	; (8006830 <checkDemoModCalisma+0x250>)
 80066ac:	f002 febd 	bl	800942a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80066b0:	2200      	movs	r2, #0
 80066b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066b6:	485e      	ldr	r0, [pc, #376]	; (8006830 <checkDemoModCalisma+0x250>)
 80066b8:	f002 feb7 	bl	800942a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80066bc:	2102      	movs	r1, #2
 80066be:	4858      	ldr	r0, [pc, #352]	; (8006820 <checkDemoModCalisma+0x240>)
 80066c0:	f002 fe9c 	bl	80093fc <HAL_GPIO_ReadPin>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d10d      	bne.n	80066e6 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80066ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066ce:	4854      	ldr	r0, [pc, #336]	; (8006820 <checkDemoModCalisma+0x240>)
 80066d0:	f002 fe94 	bl	80093fc <HAL_GPIO_ReadPin>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80066da:	4b56      	ldr	r3, [pc, #344]	; (8006834 <checkDemoModCalisma+0x254>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f083 0301 	eor.w	r3, r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80066e6:	2102      	movs	r1, #2
 80066e8:	484d      	ldr	r0, [pc, #308]	; (8006820 <checkDemoModCalisma+0x240>)
 80066ea:	f002 fe87 	bl	80093fc <HAL_GPIO_ReadPin>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d125      	bne.n	8006740 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80066f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066f8:	4849      	ldr	r0, [pc, #292]	; (8006820 <checkDemoModCalisma+0x240>)
 80066fa:	f002 fe7f 	bl	80093fc <HAL_GPIO_ReadPin>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11d      	bne.n	8006740 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006704:	4b4b      	ldr	r3, [pc, #300]	; (8006834 <checkDemoModCalisma+0x254>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f083 0301 	eor.w	r3, r3, #1
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d016      	beq.n	8006740 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006712:	4b44      	ldr	r3, [pc, #272]	; (8006824 <checkDemoModCalisma+0x244>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	f083 0301 	eor.w	r3, r3, #1
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00f      	beq.n	8006740 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006720:	4b42      	ldr	r3, [pc, #264]	; (800682c <checkDemoModCalisma+0x24c>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f083 0301 	eor.w	r3, r3, #1
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d008      	beq.n	8006740 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800672e:	2201      	movs	r2, #1
 8006730:	2120      	movs	r1, #32
 8006732:	483b      	ldr	r0, [pc, #236]	; (8006820 <checkDemoModCalisma+0x240>)
 8006734:	f002 fe79 	bl	800942a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006738:	4b3b      	ldr	r3, [pc, #236]	; (8006828 <checkDemoModCalisma+0x248>)
 800673a:	2201      	movs	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e007      	b.n	8006750 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006740:	2200      	movs	r2, #0
 8006742:	2120      	movs	r1, #32
 8006744:	4836      	ldr	r0, [pc, #216]	; (8006820 <checkDemoModCalisma+0x240>)
 8006746:	f002 fe70 	bl	800942a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800674a:	4b37      	ldr	r3, [pc, #220]	; (8006828 <checkDemoModCalisma+0x248>)
 800674c:	2200      	movs	r2, #0
 800674e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006750:	2102      	movs	r1, #2
 8006752:	4833      	ldr	r0, [pc, #204]	; (8006820 <checkDemoModCalisma+0x240>)
 8006754:	f002 fe52 	bl	80093fc <HAL_GPIO_ReadPin>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d125      	bne.n	80067aa <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800675e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006762:	482f      	ldr	r0, [pc, #188]	; (8006820 <checkDemoModCalisma+0x240>)
 8006764:	f002 fe4a 	bl	80093fc <HAL_GPIO_ReadPin>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d11d      	bne.n	80067aa <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800676e:	4b31      	ldr	r3, [pc, #196]	; (8006834 <checkDemoModCalisma+0x254>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	f083 0301 	eor.w	r3, r3, #1
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d016      	beq.n	80067aa <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800677c:	4b2a      	ldr	r3, [pc, #168]	; (8006828 <checkDemoModCalisma+0x248>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	f083 0301 	eor.w	r3, r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00f      	beq.n	80067aa <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800678a:	4b26      	ldr	r3, [pc, #152]	; (8006824 <checkDemoModCalisma+0x244>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f083 0301 	eor.w	r3, r3, #1
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006798:	2201      	movs	r2, #1
 800679a:	2110      	movs	r1, #16
 800679c:	4820      	ldr	r0, [pc, #128]	; (8006820 <checkDemoModCalisma+0x240>)
 800679e:	f002 fe44 	bl	800942a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80067a2:	4b22      	ldr	r3, [pc, #136]	; (800682c <checkDemoModCalisma+0x24c>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e007      	b.n	80067ba <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2110      	movs	r1, #16
 80067ae:	481c      	ldr	r0, [pc, #112]	; (8006820 <checkDemoModCalisma+0x240>)
 80067b0:	f002 fe3b 	bl	800942a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <checkDemoModCalisma+0x24c>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80067ba:	2104      	movs	r1, #4
 80067bc:	4818      	ldr	r0, [pc, #96]	; (8006820 <checkDemoModCalisma+0x240>)
 80067be:	f002 fe1d 	bl	80093fc <HAL_GPIO_ReadPin>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d139      	bne.n	800683c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80067c8:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <checkDemoModCalisma+0x254>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f083 0301 	eor.w	r3, r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d032      	beq.n	800683c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <checkDemoModCalisma+0x24c>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	f083 0301 	eor.w	r3, r3, #1
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02b      	beq.n	800683c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80067e4:	4b10      	ldr	r3, [pc, #64]	; (8006828 <checkDemoModCalisma+0x248>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f083 0301 	eor.w	r3, r3, #1
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d024      	beq.n	800683c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80067f2:	2201      	movs	r2, #1
 80067f4:	2102      	movs	r1, #2
 80067f6:	480e      	ldr	r0, [pc, #56]	; (8006830 <checkDemoModCalisma+0x250>)
 80067f8:	f002 fe17 	bl	800942a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80067fc:	2201      	movs	r2, #1
 80067fe:	2101      	movs	r1, #1
 8006800:	480b      	ldr	r0, [pc, #44]	; (8006830 <checkDemoModCalisma+0x250>)
 8006802:	f002 fe12 	bl	800942a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <checkDemoModCalisma+0x244>)
 8006808:	2201      	movs	r2, #1
 800680a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <checkDemoModCalisma+0x258>)
 800680e:	2201      	movs	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e027      	b.n	8006864 <checkDemoModCalisma+0x284>
 8006814:	20000252 	.word	0x20000252
 8006818:	20000286 	.word	0x20000286
 800681c:	20000251 	.word	0x20000251
 8006820:	40011000 	.word	0x40011000
 8006824:	2000028d 	.word	0x2000028d
 8006828:	2000028e 	.word	0x2000028e
 800682c:	2000028f 	.word	0x2000028f
 8006830:	40010c00 	.word	0x40010c00
 8006834:	2000028c 	.word	0x2000028c
 8006838:	20000272 	.word	0x20000272
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800683c:	2104      	movs	r1, #4
 800683e:	48a0      	ldr	r0, [pc, #640]	; (8006ac0 <checkDemoModCalisma+0x4e0>)
 8006840:	f002 fddc 	bl	80093fc <HAL_GPIO_ReadPin>
 8006844:	4603      	mov	r3, r0
 8006846:	2b01      	cmp	r3, #1
 8006848:	d10c      	bne.n	8006864 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800684a:	2200      	movs	r2, #0
 800684c:	2102      	movs	r1, #2
 800684e:	489d      	ldr	r0, [pc, #628]	; (8006ac4 <checkDemoModCalisma+0x4e4>)
 8006850:	f002 fdeb 	bl	800942a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006854:	2200      	movs	r2, #0
 8006856:	2101      	movs	r1, #1
 8006858:	489a      	ldr	r0, [pc, #616]	; (8006ac4 <checkDemoModCalisma+0x4e4>)
 800685a:	f002 fde6 	bl	800942a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800685e:	4b9a      	ldr	r3, [pc, #616]	; (8006ac8 <checkDemoModCalisma+0x4e8>)
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006864:	2104      	movs	r1, #4
 8006866:	4896      	ldr	r0, [pc, #600]	; (8006ac0 <checkDemoModCalisma+0x4e0>)
 8006868:	f002 fdc8 	bl	80093fc <HAL_GPIO_ReadPin>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10d      	bne.n	800688e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006872:	2201      	movs	r2, #1
 8006874:	2180      	movs	r1, #128	; 0x80
 8006876:	4895      	ldr	r0, [pc, #596]	; (8006acc <checkDemoModCalisma+0x4ec>)
 8006878:	f002 fdd7 	bl	800942a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800687c:	2201      	movs	r2, #1
 800687e:	2120      	movs	r1, #32
 8006880:	4892      	ldr	r0, [pc, #584]	; (8006acc <checkDemoModCalisma+0x4ec>)
 8006882:	f002 fdd2 	bl	800942a <HAL_GPIO_WritePin>
			timer3 = millis;
 8006886:	4b92      	ldr	r3, [pc, #584]	; (8006ad0 <checkDemoModCalisma+0x4f0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a92      	ldr	r2, [pc, #584]	; (8006ad4 <checkDemoModCalisma+0x4f4>)
 800688c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800688e:	4b90      	ldr	r3, [pc, #576]	; (8006ad0 <checkDemoModCalisma+0x4f0>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b90      	ldr	r3, [pc, #576]	; (8006ad4 <checkDemoModCalisma+0x4f4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b04      	cmp	r3, #4
 800689a:	d909      	bls.n	80068b0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800689c:	2200      	movs	r2, #0
 800689e:	2180      	movs	r1, #128	; 0x80
 80068a0:	488a      	ldr	r0, [pc, #552]	; (8006acc <checkDemoModCalisma+0x4ec>)
 80068a2:	f002 fdc2 	bl	800942a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80068a6:	2200      	movs	r2, #0
 80068a8:	2120      	movs	r1, #32
 80068aa:	4888      	ldr	r0, [pc, #544]	; (8006acc <checkDemoModCalisma+0x4ec>)
 80068ac:	f002 fdbd 	bl	800942a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80068b0:	2102      	movs	r1, #2
 80068b2:	4883      	ldr	r0, [pc, #524]	; (8006ac0 <checkDemoModCalisma+0x4e0>)
 80068b4:	f002 fda2 	bl	80093fc <HAL_GPIO_ReadPin>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d108      	bne.n	80068d0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80068be:	2201      	movs	r2, #1
 80068c0:	2140      	movs	r1, #64	; 0x40
 80068c2:	4882      	ldr	r0, [pc, #520]	; (8006acc <checkDemoModCalisma+0x4ec>)
 80068c4:	f002 fdb1 	bl	800942a <HAL_GPIO_WritePin>
			timer3 = millis;
 80068c8:	4b81      	ldr	r3, [pc, #516]	; (8006ad0 <checkDemoModCalisma+0x4f0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a81      	ldr	r2, [pc, #516]	; (8006ad4 <checkDemoModCalisma+0x4f4>)
 80068ce:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80068d0:	4b7f      	ldr	r3, [pc, #508]	; (8006ad0 <checkDemoModCalisma+0x4f0>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	4b7f      	ldr	r3, [pc, #508]	; (8006ad4 <checkDemoModCalisma+0x4f4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d904      	bls.n	80068e8 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80068de:	2200      	movs	r2, #0
 80068e0:	2140      	movs	r1, #64	; 0x40
 80068e2:	487a      	ldr	r0, [pc, #488]	; (8006acc <checkDemoModCalisma+0x4ec>)
 80068e4:	f002 fda1 	bl	800942a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80068e8:	4b7b      	ldr	r3, [pc, #492]	; (8006ad8 <checkDemoModCalisma+0x4f8>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d058      	beq.n	80069a2 <checkDemoModCalisma+0x3c2>
 80068f0:	4b7a      	ldr	r3, [pc, #488]	; (8006adc <checkDemoModCalisma+0x4fc>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d054      	beq.n	80069a2 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80068f8:	4b79      	ldr	r3, [pc, #484]	; (8006ae0 <checkDemoModCalisma+0x500>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	3301      	adds	r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	4b77      	ldr	r3, [pc, #476]	; (8006ae0 <checkDemoModCalisma+0x500>)
 8006902:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006904:	4b76      	ldr	r3, [pc, #472]	; (8006ae0 <checkDemoModCalisma+0x500>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b09      	cmp	r3, #9
 800690a:	d908      	bls.n	800691e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 800690c:	4b74      	ldr	r3, [pc, #464]	; (8006ae0 <checkDemoModCalisma+0x500>)
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006912:	4b74      	ldr	r3, [pc, #464]	; (8006ae4 <checkDemoModCalisma+0x504>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	3301      	adds	r3, #1
 8006918:	b2da      	uxtb	r2, r3
 800691a:	4b72      	ldr	r3, [pc, #456]	; (8006ae4 <checkDemoModCalisma+0x504>)
 800691c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800691e:	4b71      	ldr	r3, [pc, #452]	; (8006ae4 <checkDemoModCalisma+0x504>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b09      	cmp	r3, #9
 8006924:	d908      	bls.n	8006938 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006926:	4b6f      	ldr	r3, [pc, #444]	; (8006ae4 <checkDemoModCalisma+0x504>)
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 800692c:	4b6e      	ldr	r3, [pc, #440]	; (8006ae8 <checkDemoModCalisma+0x508>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	4b6c      	ldr	r3, [pc, #432]	; (8006ae8 <checkDemoModCalisma+0x508>)
 8006936:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006938:	4b6b      	ldr	r3, [pc, #428]	; (8006ae8 <checkDemoModCalisma+0x508>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b09      	cmp	r3, #9
 800693e:	d908      	bls.n	8006952 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006940:	4b69      	ldr	r3, [pc, #420]	; (8006ae8 <checkDemoModCalisma+0x508>)
 8006942:	2200      	movs	r2, #0
 8006944:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006946:	4b69      	ldr	r3, [pc, #420]	; (8006aec <checkDemoModCalisma+0x50c>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	3301      	adds	r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	4b67      	ldr	r3, [pc, #412]	; (8006aec <checkDemoModCalisma+0x50c>)
 8006950:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006952:	4b66      	ldr	r3, [pc, #408]	; (8006aec <checkDemoModCalisma+0x50c>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b09      	cmp	r3, #9
 8006958:	d908      	bls.n	800696c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800695a:	4b64      	ldr	r3, [pc, #400]	; (8006aec <checkDemoModCalisma+0x50c>)
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006960:	4b63      	ldr	r3, [pc, #396]	; (8006af0 <checkDemoModCalisma+0x510>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	4b61      	ldr	r3, [pc, #388]	; (8006af0 <checkDemoModCalisma+0x510>)
 800696a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800696c:	4b60      	ldr	r3, [pc, #384]	; (8006af0 <checkDemoModCalisma+0x510>)
 800696e:	781a      	ldrb	r2, [r3, #0]
 8006970:	4b60      	ldr	r3, [pc, #384]	; (8006af4 <checkDemoModCalisma+0x514>)
 8006972:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006976:	4b5d      	ldr	r3, [pc, #372]	; (8006aec <checkDemoModCalisma+0x50c>)
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	4b5e      	ldr	r3, [pc, #376]	; (8006af4 <checkDemoModCalisma+0x514>)
 800697c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800697e:	4b5a      	ldr	r3, [pc, #360]	; (8006ae8 <checkDemoModCalisma+0x508>)
 8006980:	781a      	ldrb	r2, [r3, #0]
 8006982:	4b5c      	ldr	r3, [pc, #368]	; (8006af4 <checkDemoModCalisma+0x514>)
 8006984:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006986:	4b57      	ldr	r3, [pc, #348]	; (8006ae4 <checkDemoModCalisma+0x504>)
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	4b5a      	ldr	r3, [pc, #360]	; (8006af4 <checkDemoModCalisma+0x514>)
 800698c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800698e:	4b54      	ldr	r3, [pc, #336]	; (8006ae0 <checkDemoModCalisma+0x500>)
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	4b58      	ldr	r3, [pc, #352]	; (8006af4 <checkDemoModCalisma+0x514>)
 8006994:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006996:	4b58      	ldr	r3, [pc, #352]	; (8006af8 <checkDemoModCalisma+0x518>)
 8006998:	2201      	movs	r2, #1
 800699a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800699c:	4b4f      	ldr	r3, [pc, #316]	; (8006adc <checkDemoModCalisma+0x4fc>)
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80069a2:	4b56      	ldr	r3, [pc, #344]	; (8006afc <checkDemoModCalisma+0x51c>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 8087 	bne.w	8006aba <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80069ac:	4a54      	ldr	r2, [pc, #336]	; (8006b00 <checkDemoModCalisma+0x520>)
 80069ae:	2101      	movs	r1, #1
 80069b0:	2002      	movs	r0, #2
 80069b2:	f001 f9fd 	bl	8007db0 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80069b6:	4a53      	ldr	r2, [pc, #332]	; (8006b04 <checkDemoModCalisma+0x524>)
 80069b8:	2101      	movs	r1, #1
 80069ba:	2001      	movs	r0, #1
 80069bc:	f001 f9f8 	bl	8007db0 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80069c0:	4b4b      	ldr	r3, [pc, #300]	; (8006af0 <checkDemoModCalisma+0x510>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	220a      	movs	r2, #10
 80069c6:	4950      	ldr	r1, [pc, #320]	; (8006b08 <checkDemoModCalisma+0x528>)
 80069c8:	4618      	mov	r0, r3
 80069ca:	f005 fd43 	bl	800c454 <itoa>
			lcd_print(2,12,snum);
 80069ce:	4a4e      	ldr	r2, [pc, #312]	; (8006b08 <checkDemoModCalisma+0x528>)
 80069d0:	210c      	movs	r1, #12
 80069d2:	2002      	movs	r0, #2
 80069d4:	f001 f9ec 	bl	8007db0 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80069d8:	4b44      	ldr	r3, [pc, #272]	; (8006aec <checkDemoModCalisma+0x50c>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	220a      	movs	r2, #10
 80069de:	494a      	ldr	r1, [pc, #296]	; (8006b08 <checkDemoModCalisma+0x528>)
 80069e0:	4618      	mov	r0, r3
 80069e2:	f005 fd37 	bl	800c454 <itoa>
			lcd_print(2,13,snum);
 80069e6:	4a48      	ldr	r2, [pc, #288]	; (8006b08 <checkDemoModCalisma+0x528>)
 80069e8:	210d      	movs	r1, #13
 80069ea:	2002      	movs	r0, #2
 80069ec:	f001 f9e0 	bl	8007db0 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80069f0:	4b3d      	ldr	r3, [pc, #244]	; (8006ae8 <checkDemoModCalisma+0x508>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	220a      	movs	r2, #10
 80069f6:	4944      	ldr	r1, [pc, #272]	; (8006b08 <checkDemoModCalisma+0x528>)
 80069f8:	4618      	mov	r0, r3
 80069fa:	f005 fd2b 	bl	800c454 <itoa>
			lcd_print(2,14,snum);
 80069fe:	4a42      	ldr	r2, [pc, #264]	; (8006b08 <checkDemoModCalisma+0x528>)
 8006a00:	210e      	movs	r1, #14
 8006a02:	2002      	movs	r0, #2
 8006a04:	f001 f9d4 	bl	8007db0 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006a08:	4b36      	ldr	r3, [pc, #216]	; (8006ae4 <checkDemoModCalisma+0x504>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	493e      	ldr	r1, [pc, #248]	; (8006b08 <checkDemoModCalisma+0x528>)
 8006a10:	4618      	mov	r0, r3
 8006a12:	f005 fd1f 	bl	800c454 <itoa>
			lcd_print(2,15,snum);
 8006a16:	4a3c      	ldr	r2, [pc, #240]	; (8006b08 <checkDemoModCalisma+0x528>)
 8006a18:	210f      	movs	r1, #15
 8006a1a:	2002      	movs	r0, #2
 8006a1c:	f001 f9c8 	bl	8007db0 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006a20:	4b2f      	ldr	r3, [pc, #188]	; (8006ae0 <checkDemoModCalisma+0x500>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	220a      	movs	r2, #10
 8006a26:	4938      	ldr	r1, [pc, #224]	; (8006b08 <checkDemoModCalisma+0x528>)
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f005 fd13 	bl	800c454 <itoa>
			lcd_print(2,16,snum);
 8006a2e:	4a36      	ldr	r2, [pc, #216]	; (8006b08 <checkDemoModCalisma+0x528>)
 8006a30:	2110      	movs	r1, #16
 8006a32:	2002      	movs	r0, #2
 8006a34:	f001 f9bc 	bl	8007db0 <lcd_print>
			mesajYazildi=1;
 8006a38:	4b34      	ldr	r3, [pc, #208]	; (8006b0c <checkDemoModCalisma+0x52c>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006a3e:	e03c      	b.n	8006aba <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006a40:	4b33      	ldr	r3, [pc, #204]	; (8006b10 <checkDemoModCalisma+0x530>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d003      	beq.n	8006a50 <checkDemoModCalisma+0x470>
 8006a48:	4b2c      	ldr	r3, [pc, #176]	; (8006afc <checkDemoModCalisma+0x51c>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d134      	bne.n	8006aba <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006a50:	2200      	movs	r2, #0
 8006a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a56:	481b      	ldr	r0, [pc, #108]	; (8006ac4 <checkDemoModCalisma+0x4e4>)
 8006a58:	f002 fce7 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a62:	4818      	ldr	r0, [pc, #96]	; (8006ac4 <checkDemoModCalisma+0x4e4>)
 8006a64:	f002 fce1 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2104      	movs	r1, #4
 8006a6c:	4815      	ldr	r0, [pc, #84]	; (8006ac4 <checkDemoModCalisma+0x4e4>)
 8006a6e:	f002 fcdc 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006a72:	2200      	movs	r2, #0
 8006a74:	2102      	movs	r1, #2
 8006a76:	4813      	ldr	r0, [pc, #76]	; (8006ac4 <checkDemoModCalisma+0x4e4>)
 8006a78:	f002 fcd7 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2101      	movs	r1, #1
 8006a80:	4810      	ldr	r0, [pc, #64]	; (8006ac4 <checkDemoModCalisma+0x4e4>)
 8006a82:	f002 fcd2 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006a86:	2200      	movs	r2, #0
 8006a88:	2120      	movs	r1, #32
 8006a8a:	480d      	ldr	r0, [pc, #52]	; (8006ac0 <checkDemoModCalisma+0x4e0>)
 8006a8c:	f002 fccd 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006a90:	2200      	movs	r2, #0
 8006a92:	2110      	movs	r1, #16
 8006a94:	480a      	ldr	r0, [pc, #40]	; (8006ac0 <checkDemoModCalisma+0x4e0>)
 8006a96:	f002 fcc8 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	480b      	ldr	r0, [pc, #44]	; (8006acc <checkDemoModCalisma+0x4ec>)
 8006aa0:	f002 fcc3 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2140      	movs	r1, #64	; 0x40
 8006aa8:	4808      	ldr	r0, [pc, #32]	; (8006acc <checkDemoModCalisma+0x4ec>)
 8006aaa:	f002 fcbe 	bl	800942a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2120      	movs	r1, #32
 8006ab2:	4806      	ldr	r0, [pc, #24]	; (8006acc <checkDemoModCalisma+0x4ec>)
 8006ab4:	f002 fcb9 	bl	800942a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006ab8:	e7ff      	b.n	8006aba <checkDemoModCalisma+0x4da>
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40011000 	.word	0x40011000
 8006ac4:	40010c00 	.word	0x40010c00
 8006ac8:	2000028d 	.word	0x2000028d
 8006acc:	40010800 	.word	0x40010800
 8006ad0:	20000210 	.word	0x20000210
 8006ad4:	20000220 	.word	0x20000220
 8006ad8:	2000028c 	.word	0x2000028c
 8006adc:	20000272 	.word	0x20000272
 8006ae0:	20000231 	.word	0x20000231
 8006ae4:	20000232 	.word	0x20000232
 8006ae8:	20000000 	.word	0x20000000
 8006aec:	20000001 	.word	0x20000001
 8006af0:	20000233 	.word	0x20000233
 8006af4:	20000118 	.word	0x20000118
 8006af8:	20000260 	.word	0x20000260
 8006afc:	20000251 	.word	0x20000251
 8006b00:	0800dc44 	.word	0x0800dc44
 8006b04:	0800dc50 	.word	0x0800dc50
 8006b08:	20000188 	.word	0x20000188
 8006b0c:	20000268 	.word	0x20000268
 8006b10:	20000252 	.word	0x20000252

08006b14 <mainLoop>:

void mainLoop() {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006b1a:	f7fe f923 	bl	8004d64 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006b1e:	2101      	movs	r1, #1
 8006b20:	48ac      	ldr	r0, [pc, #688]	; (8006dd4 <mainLoop+0x2c0>)
 8006b22:	f002 fc6b 	bl	80093fc <HAL_GPIO_ReadPin>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d136      	bne.n	8006b9a <mainLoop+0x86>
 8006b2c:	2108      	movs	r1, #8
 8006b2e:	48aa      	ldr	r0, [pc, #680]	; (8006dd8 <mainLoop+0x2c4>)
 8006b30:	f002 fc64 	bl	80093fc <HAL_GPIO_ReadPin>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d12f      	bne.n	8006b9a <mainLoop+0x86>
 8006b3a:	2102      	movs	r1, #2
 8006b3c:	48a5      	ldr	r0, [pc, #660]	; (8006dd4 <mainLoop+0x2c0>)
 8006b3e:	f002 fc5d 	bl	80093fc <HAL_GPIO_ReadPin>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d128      	bne.n	8006b9a <mainLoop+0x86>
 8006b48:	2104      	movs	r1, #4
 8006b4a:	48a2      	ldr	r0, [pc, #648]	; (8006dd4 <mainLoop+0x2c0>)
 8006b4c:	f002 fc56 	bl	80093fc <HAL_GPIO_ReadPin>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d121      	bne.n	8006b9a <mainLoop+0x86>
 8006b56:	2108      	movs	r1, #8
 8006b58:	489e      	ldr	r0, [pc, #632]	; (8006dd4 <mainLoop+0x2c0>)
 8006b5a:	f002 fc4f 	bl	80093fc <HAL_GPIO_ReadPin>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d11a      	bne.n	8006b9a <mainLoop+0x86>
 8006b64:	2180      	movs	r1, #128	; 0x80
 8006b66:	489c      	ldr	r0, [pc, #624]	; (8006dd8 <mainLoop+0x2c4>)
 8006b68:	f002 fc48 	bl	80093fc <HAL_GPIO_ReadPin>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d113      	bne.n	8006b9a <mainLoop+0x86>
 8006b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b76:	4898      	ldr	r0, [pc, #608]	; (8006dd8 <mainLoop+0x2c4>)
 8006b78:	f002 fc40 	bl	80093fc <HAL_GPIO_ReadPin>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d10b      	bne.n	8006b9a <mainLoop+0x86>
 8006b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b86:	4894      	ldr	r0, [pc, #592]	; (8006dd8 <mainLoop+0x2c4>)
 8006b88:	f002 fc38 	bl	80093fc <HAL_GPIO_ReadPin>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d103      	bne.n	8006b9a <mainLoop+0x86>
			butonKontrol=0;
 8006b92:	4b92      	ldr	r3, [pc, #584]	; (8006ddc <mainLoop+0x2c8>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e003      	b.n	8006ba2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006b9a:	4b91      	ldr	r3, [pc, #580]	; (8006de0 <mainLoop+0x2cc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a91      	ldr	r2, [pc, #580]	; (8006de4 <mainLoop+0x2d0>)
 8006ba0:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006ba2:	4b91      	ldr	r3, [pc, #580]	; (8006de8 <mainLoop+0x2d4>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d03a      	beq.n	8006c20 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006baa:	bf00      	nop
 8006bac:	488f      	ldr	r0, [pc, #572]	; (8006dec <mainLoop+0x2d8>)
 8006bae:	f003 fa4e 	bl	800a04e <HAL_I2C_GetError>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d0f9      	beq.n	8006bac <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006bb8:	bf00      	nop
 8006bba:	488c      	ldr	r0, [pc, #560]	; (8006dec <mainLoop+0x2d8>)
 8006bbc:	f003 fa3a 	bl	800a034 <HAL_I2C_GetState>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d1f9      	bne.n	8006bba <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006bc6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bca:	9302      	str	r3, [sp, #8]
 8006bcc:	236e      	movs	r3, #110	; 0x6e
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	4b87      	ldr	r3, [pc, #540]	; (8006df0 <mainLoop+0x2dc>)
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	236e      	movs	r3, #110	; 0x6e
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	21a0      	movs	r1, #160	; 0xa0
 8006bda:	4884      	ldr	r0, [pc, #528]	; (8006dec <mainLoop+0x2d8>)
 8006bdc:	f002 fec8 	bl	8009970 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006be4:	f001 fe3a 	bl	800885c <HAL_Delay>

		  hafizaYaz=0;
 8006be8:	4b7f      	ldr	r3, [pc, #508]	; (8006de8 <mainLoop+0x2d4>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006bee:	4b81      	ldr	r3, [pc, #516]	; (8006df4 <mainLoop+0x2e0>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d105      	bne.n	8006c02 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006bf6:	4a80      	ldr	r2, [pc, #512]	; (8006df8 <mainLoop+0x2e4>)
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	2002      	movs	r0, #2
 8006bfc:	f001 f8d8 	bl	8007db0 <lcd_print>
 8006c00:	e008      	b.n	8006c14 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006c02:	4b7c      	ldr	r3, [pc, #496]	; (8006df4 <mainLoop+0x2e0>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d104      	bne.n	8006c14 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006c0a:	4a7c      	ldr	r2, [pc, #496]	; (8006dfc <mainLoop+0x2e8>)
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	2002      	movs	r0, #2
 8006c10:	f001 f8ce 	bl	8007db0 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c18:	f001 fe20 	bl	800885c <HAL_Delay>
		  lcd_clear();
 8006c1c:	f001 f8f4 	bl	8007e08 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006c20:	4b77      	ldr	r3, [pc, #476]	; (8006e00 <mainLoop+0x2ec>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f083 0301 	eor.w	r3, r3, #1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d06d      	beq.n	8006d0a <mainLoop+0x1f6>
 8006c2e:	486f      	ldr	r0, [pc, #444]	; (8006dec <mainLoop+0x2d8>)
 8006c30:	f003 fa00 	bl	800a034 <HAL_I2C_GetState>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d167      	bne.n	8006d0a <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006c3a:	4b72      	ldr	r3, [pc, #456]	; (8006e04 <mainLoop+0x2f0>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f083 0301 	eor.w	r3, r3, #1
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d044      	beq.n	8006cd2 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006c48:	4a6f      	ldr	r2, [pc, #444]	; (8006e08 <mainLoop+0x2f4>)
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	f001 f8af 	bl	8007db0 <lcd_print>
			  if(dilSecim==0) {
 8006c52:	4b68      	ldr	r3, [pc, #416]	; (8006df4 <mainLoop+0x2e0>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006c5a:	4a6c      	ldr	r2, [pc, #432]	; (8006e0c <mainLoop+0x2f8>)
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	2002      	movs	r0, #2
 8006c60:	f001 f8a6 	bl	8007db0 <lcd_print>
 8006c64:	e008      	b.n	8006c78 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006c66:	4b63      	ldr	r3, [pc, #396]	; (8006df4 <mainLoop+0x2e0>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d104      	bne.n	8006c78 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006c6e:	4a68      	ldr	r2, [pc, #416]	; (8006e10 <mainLoop+0x2fc>)
 8006c70:	2101      	movs	r1, #1
 8006c72:	2002      	movs	r0, #2
 8006c74:	f001 f89c 	bl	8007db0 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c7c:	f001 fdee 	bl	800885c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006c80:	bf00      	nop
 8006c82:	485a      	ldr	r0, [pc, #360]	; (8006dec <mainLoop+0x2d8>)
 8006c84:	f003 f9e3 	bl	800a04e <HAL_I2C_GetError>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d0f9      	beq.n	8006c82 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006c8e:	e003      	b.n	8006c98 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c94:	f001 fde2 	bl	800885c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006c98:	4854      	ldr	r0, [pc, #336]	; (8006dec <mainLoop+0x2d8>)
 8006c9a:	f003 f9cb 	bl	800a034 <HAL_I2C_GetState>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d1f5      	bne.n	8006c90 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006ca4:	4b53      	ldr	r3, [pc, #332]	; (8006df4 <mainLoop+0x2e0>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d105      	bne.n	8006cb8 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006cac:	4a59      	ldr	r2, [pc, #356]	; (8006e14 <mainLoop+0x300>)
 8006cae:	2101      	movs	r1, #1
 8006cb0:	2002      	movs	r0, #2
 8006cb2:	f001 f87d 	bl	8007db0 <lcd_print>
 8006cb6:	e008      	b.n	8006cca <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006cb8:	4b4e      	ldr	r3, [pc, #312]	; (8006df4 <mainLoop+0x2e0>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d104      	bne.n	8006cca <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006cc0:	4a55      	ldr	r2, [pc, #340]	; (8006e18 <mainLoop+0x304>)
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	2002      	movs	r0, #2
 8006cc6:	f001 f873 	bl	8007db0 <lcd_print>
			  }

			  ilkOkuma=1;
 8006cca:	4b4e      	ldr	r3, [pc, #312]	; (8006e04 <mainLoop+0x2f0>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	e014      	b.n	8006cfc <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006cd2:	4b48      	ldr	r3, [pc, #288]	; (8006df4 <mainLoop+0x2e0>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d105      	bne.n	8006ce6 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006cda:	4a50      	ldr	r2, [pc, #320]	; (8006e1c <mainLoop+0x308>)
 8006cdc:	2101      	movs	r1, #1
 8006cde:	2002      	movs	r0, #2
 8006ce0:	f001 f866 	bl	8007db0 <lcd_print>
 8006ce4:	e008      	b.n	8006cf8 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006ce6:	4b43      	ldr	r3, [pc, #268]	; (8006df4 <mainLoop+0x2e0>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d104      	bne.n	8006cf8 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006cee:	4a4c      	ldr	r2, [pc, #304]	; (8006e20 <mainLoop+0x30c>)
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	2002      	movs	r0, #2
 8006cf4:	f001 f85c 	bl	8007db0 <lcd_print>
			  }
			  lcd_clear();
 8006cf8:	f001 f886 	bl	8007e08 <lcd_clear>
		  }

		  lcd_clear();
 8006cfc:	f001 f884 	bl	8007e08 <lcd_clear>

		  eepromKontrol();
 8006d00:	f7f9 fa98 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006d04:	4b3e      	ldr	r3, [pc, #248]	; (8006e00 <mainLoop+0x2ec>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006d0a:	4b46      	ldr	r3, [pc, #280]	; (8006e24 <mainLoop+0x310>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11c      	bne.n	8006d4c <mainLoop+0x238>
 8006d12:	4b45      	ldr	r3, [pc, #276]	; (8006e28 <mainLoop+0x314>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f083 0301 	eor.w	r3, r3, #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d015      	beq.n	8006d4c <mainLoop+0x238>
 8006d20:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <mainLoop+0x318>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d111      	bne.n	8006d4c <mainLoop+0x238>
			lcd_clear();
 8006d28:	f001 f86e 	bl	8007e08 <lcd_clear>
			HAL_Delay(10);
 8006d2c:	200a      	movs	r0, #10
 8006d2e:	f001 fd95 	bl	800885c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006d32:	4a3f      	ldr	r2, [pc, #252]	; (8006e30 <mainLoop+0x31c>)
 8006d34:	2101      	movs	r1, #1
 8006d36:	2001      	movs	r0, #1
 8006d38:	f001 f83a 	bl	8007db0 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006d3c:	4a3d      	ldr	r2, [pc, #244]	; (8006e34 <mainLoop+0x320>)
 8006d3e:	2101      	movs	r1, #1
 8006d40:	2002      	movs	r0, #2
 8006d42:	f001 f835 	bl	8007db0 <lcd_print>
			mesajYazildi=1;
 8006d46:	4b38      	ldr	r3, [pc, #224]	; (8006e28 <mainLoop+0x314>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <mainLoop+0x310>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d112      	bne.n	8006d7a <mainLoop+0x266>
 8006d54:	2102      	movs	r1, #2
 8006d56:	481f      	ldr	r0, [pc, #124]	; (8006dd4 <mainLoop+0x2c0>)
 8006d58:	f002 fb50 	bl	80093fc <HAL_GPIO_ReadPin>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d10b      	bne.n	8006d7a <mainLoop+0x266>
 8006d62:	2104      	movs	r1, #4
 8006d64:	481b      	ldr	r0, [pc, #108]	; (8006dd4 <mainLoop+0x2c0>)
 8006d66:	f002 fb49 	bl	80093fc <HAL_GPIO_ReadPin>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d104      	bne.n	8006d7a <mainLoop+0x266>
			menuGiris=1;
 8006d70:	4b2c      	ldr	r3, [pc, #176]	; (8006e24 <mainLoop+0x310>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006d76:	f001 f847 	bl	8007e08 <lcd_clear>
		}

		if(menuGiris==1) {
 8006d7a:	4b2a      	ldr	r3, [pc, #168]	; (8006e24 <mainLoop+0x310>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <mainLoop+0x272>
			menu();
 8006d82:	f7fa fabb 	bl	80012fc <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d8a:	4813      	ldr	r0, [pc, #76]	; (8006dd8 <mainLoop+0x2c4>)
 8006d8c:	f002 fb65 	bl	800945a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d94:	4828      	ldr	r0, [pc, #160]	; (8006e38 <mainLoop+0x324>)
 8006d96:	f002 fb31 	bl	80093fc <HAL_GPIO_ReadPin>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <mainLoop+0x2a2>
 8006da0:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <mainLoop+0x328>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f083 0301 	eor.w	r3, r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <mainLoop+0x2a2>
			stopVar=1;
 8006dae:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <mainLoop+0x32c>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e002      	b.n	8006dbc <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006db6:	4b22      	ldr	r3, [pc, #136]	; (8006e40 <mainLoop+0x32c>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006dbc:	f7fd ffe8 	bl	8004d90 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006dc0:	f7fe f81a 	bl	8004df8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006dc4:	f7fe f85e 	bl	8004e84 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006dc8:	f7fe f8ae 	bl	8004f28 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006dcc:	f7ff fc08 	bl	80065e0 <checkDemoModCalisma>
		checkLCDBacklight();
 8006dd0:	e6a3      	b.n	8006b1a <mainLoop+0x6>
 8006dd2:	bf00      	nop
 8006dd4:	40010800 	.word	0x40010800
 8006dd8:	40011000 	.word	0x40011000
 8006ddc:	20000263 	.word	0x20000263
 8006de0:	20000210 	.word	0x20000210
 8006de4:	2000022c 	.word	0x2000022c
 8006de8:	20000260 	.word	0x20000260
 8006dec:	200003bc 	.word	0x200003bc
 8006df0:	20000118 	.word	0x20000118
 8006df4:	20000255 	.word	0x20000255
 8006df8:	0800dc64 	.word	0x0800dc64
 8006dfc:	0800dc78 	.word	0x0800dc78
 8006e00:	20000261 	.word	0x20000261
 8006e04:	20000262 	.word	0x20000262
 8006e08:	0800dc8c 	.word	0x0800dc8c
 8006e0c:	0800dca0 	.word	0x0800dca0
 8006e10:	0800dcb4 	.word	0x0800dcb4
 8006e14:	0800dcc8 	.word	0x0800dcc8
 8006e18:	0800dcdc 	.word	0x0800dcdc
 8006e1c:	0800dcf0 	.word	0x0800dcf0
 8006e20:	0800dd04 	.word	0x0800dd04
 8006e24:	20000251 	.word	0x20000251
 8006e28:	20000268 	.word	0x20000268
 8006e2c:	20000252 	.word	0x20000252
 8006e30:	0800dd18 	.word	0x0800dd18
 8006e34:	0800dd2c 	.word	0x0800dd2c
 8006e38:	40010c00 	.word	0x40010c00
 8006e3c:	20000289 	.word	0x20000289
 8006e40:	20000286 	.word	0x20000286

08006e44 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006e44:	b590      	push	{r4, r7, lr}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af02      	add	r7, sp, #8
	mainSection:

	lcd_cursor(1);
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	f001 f80e 	bl	8007e6c <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006e50:	2305      	movs	r3, #5
 8006e52:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006e54:	2303      	movs	r3, #3
 8006e56:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006e58:	2300      	movs	r3, #0
 8006e5a:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006e5c:	4b9f      	ldr	r3, [pc, #636]	; (80070dc <takeMachineID+0x298>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	603b      	str	r3, [r7, #0]

    resetEEPROM4Wifi(1);
 8006e62:	2001      	movs	r0, #1
 8006e64:	f7f9 fd4e 	bl	8000904 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006e68:	2064      	movs	r0, #100	; 0x64
 8006e6a:	f001 fcf7 	bl	800885c <HAL_Delay>

    printTemplate(1, 0);
 8006e6e:	2100      	movs	r1, #0
 8006e70:	2001      	movs	r0, #1
 8006e72:	f7fa f8b7 	bl	8000fe4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e76:	2108      	movs	r1, #8
 8006e78:	4899      	ldr	r0, [pc, #612]	; (80070e0 <takeMachineID+0x29c>)
 8006e7a:	f002 fabf 	bl	80093fc <HAL_GPIO_ReadPin>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d12a      	bne.n	8006eda <takeMachineID+0x96>
        	lcd_cursor(0);
 8006e84:	2000      	movs	r0, #0
 8006e86:	f000 fff1 	bl	8007e6c <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006e8a:	4896      	ldr	r0, [pc, #600]	; (80070e4 <takeMachineID+0x2a0>)
 8006e8c:	f7f9 f9ca 	bl	8000224 <strlen>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b0d      	cmp	r3, #13
 8006e94:	d010      	beq.n	8006eb8 <takeMachineID+0x74>
        		lcd_clear();
 8006e96:	f000 ffb7 	bl	8007e08 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006e9a:	4a93      	ldr	r2, [pc, #588]	; (80070e8 <takeMachineID+0x2a4>)
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	f000 ff86 	bl	8007db0 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006ea4:	4a91      	ldr	r2, [pc, #580]	; (80070ec <takeMachineID+0x2a8>)
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	2002      	movs	r0, #2
 8006eaa:	f000 ff81 	bl	8007db0 <lcd_print>
        		HAL_Delay(1200);
 8006eae:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006eb2:	f001 fcd3 	bl	800885c <HAL_Delay>
        		goto mainSection;
 8006eb6:	e7c8      	b.n	8006e4a <takeMachineID+0x6>

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            	HAL_Delay(1000);*/

        		// Kullanıcı tarafından girilen veriyi EEPROM'a yaz
        		writeStringToEEPROM(idStartPos, 1, machineID, strlen(machineID), idCharactersArray);
 8006eb8:	4b88      	ldr	r3, [pc, #544]	; (80070dc <takeMachineID+0x298>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	b29c      	uxth	r4, r3
 8006ebe:	4889      	ldr	r0, [pc, #548]	; (80070e4 <takeMachineID+0x2a0>)
 8006ec0:	f7f9 f9b0 	bl	8000224 <strlen>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4b89      	ldr	r3, [pc, #548]	; (80070f0 <takeMachineID+0x2ac>)
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	4a85      	ldr	r2, [pc, #532]	; (80070e4 <takeMachineID+0x2a0>)
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7f9 fd96 	bl	8000a04 <writeStringToEEPROM>

            	break;
 8006ed8:	e13c      	b.n	8007154 <takeMachineID+0x310>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006eda:	2101      	movs	r1, #1
 8006edc:	4880      	ldr	r0, [pc, #512]	; (80070e0 <takeMachineID+0x29c>)
 8006ede:	f002 fa8d 	bl	80093fc <HAL_GPIO_ReadPin>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d111      	bne.n	8006f0c <takeMachineID+0xc8>
        	if(cursorPosition == 7) {
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b07      	cmp	r3, #7
 8006eec:	d102      	bne.n	8006ef4 <takeMachineID+0xb0>
        		cursorPosition = 10;
 8006eee:	230a      	movs	r3, #10
 8006ef0:	60bb      	str	r3, [r7, #8]
 8006ef2:	e008      	b.n	8006f06 <takeMachineID+0xc2>
        	} else if (cursorPosition == 14) {
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b0e      	cmp	r3, #14
 8006ef8:	d102      	bne.n	8006f00 <takeMachineID+0xbc>
                cursorPosition = 3;
 8006efa:	2303      	movs	r3, #3
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	e002      	b.n	8006f06 <takeMachineID+0xc2>
            } else {
            	cursorPosition++;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006f06:	2096      	movs	r0, #150	; 0x96
 8006f08:	f001 fca8 	bl	800885c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006f0c:	2108      	movs	r1, #8
 8006f0e:	4879      	ldr	r0, [pc, #484]	; (80070f4 <takeMachineID+0x2b0>)
 8006f10:	f002 fa74 	bl	80093fc <HAL_GPIO_ReadPin>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d111      	bne.n	8006f3e <takeMachineID+0xfa>
            if (cursorPosition == 3) {
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d102      	bne.n	8006f26 <takeMachineID+0xe2>
                cursorPosition = 14;
 8006f20:	230e      	movs	r3, #14
 8006f22:	60bb      	str	r3, [r7, #8]
 8006f24:	e008      	b.n	8006f38 <takeMachineID+0xf4>
            } else if(cursorPosition == 10) {
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b0a      	cmp	r3, #10
 8006f2a:	d102      	bne.n	8006f32 <takeMachineID+0xee>
            	cursorPosition = 7;
 8006f2c:	2307      	movs	r3, #7
 8006f2e:	60bb      	str	r3, [r7, #8]
 8006f30:	e002      	b.n	8006f38 <takeMachineID+0xf4>
            } else {
            	cursorPosition--;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006f38:	2096      	movs	r0, #150	; 0x96
 8006f3a:	f001 fc8f 	bl	800885c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006f3e:	2102      	movs	r1, #2
 8006f40:	4867      	ldr	r0, [pc, #412]	; (80070e0 <takeMachineID+0x29c>)
 8006f42:	f002 fa5b 	bl	80093fc <HAL_GPIO_ReadPin>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	f040 80ab 	bne.w	80070a4 <takeMachineID+0x260>
        	if(cursorPosition == 3) {
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d10a      	bne.n	8006f6a <takeMachineID+0x126>
        		machineID[arrayPos] = '0';
 8006f54:	4a63      	ldr	r2, [pc, #396]	; (80070e4 <takeMachineID+0x2a0>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	2230      	movs	r2, #48	; 0x30
 8006f5c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006f5e:	4a66      	ldr	r2, [pc, #408]	; (80070f8 <takeMachineID+0x2b4>)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4413      	add	r3, r2
 8006f64:	2200      	movs	r2, #0
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	e07c      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 4) {
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d10a      	bne.n	8006f86 <takeMachineID+0x142>
        		machineID[arrayPos] = '1';
 8006f70:	4a5c      	ldr	r2, [pc, #368]	; (80070e4 <takeMachineID+0x2a0>)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	2231      	movs	r2, #49	; 0x31
 8006f78:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006f7a:	4a5f      	ldr	r2, [pc, #380]	; (80070f8 <takeMachineID+0x2b4>)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	4413      	add	r3, r2
 8006f80:	2201      	movs	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e06e      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 5) {
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b05      	cmp	r3, #5
 8006f8a:	d10a      	bne.n	8006fa2 <takeMachineID+0x15e>
        		machineID[arrayPos] = '2';
 8006f8c:	4a55      	ldr	r2, [pc, #340]	; (80070e4 <takeMachineID+0x2a0>)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	2232      	movs	r2, #50	; 0x32
 8006f94:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006f96:	4a58      	ldr	r2, [pc, #352]	; (80070f8 <takeMachineID+0x2b4>)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e060      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 6) {
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b06      	cmp	r3, #6
 8006fa6:	d10a      	bne.n	8006fbe <takeMachineID+0x17a>
        		machineID[arrayPos] = '3';
 8006fa8:	4a4e      	ldr	r2, [pc, #312]	; (80070e4 <takeMachineID+0x2a0>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	2233      	movs	r2, #51	; 0x33
 8006fb0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006fb2:	4a51      	ldr	r2, [pc, #324]	; (80070f8 <takeMachineID+0x2b4>)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	2203      	movs	r2, #3
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e052      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 7) {
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b07      	cmp	r3, #7
 8006fc2:	d10a      	bne.n	8006fda <takeMachineID+0x196>
        		machineID[arrayPos] = '4';
 8006fc4:	4a47      	ldr	r2, [pc, #284]	; (80070e4 <takeMachineID+0x2a0>)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4413      	add	r3, r2
 8006fca:	2234      	movs	r2, #52	; 0x34
 8006fcc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006fce:	4a4a      	ldr	r2, [pc, #296]	; (80070f8 <takeMachineID+0x2b4>)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e044      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 10) {
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b0a      	cmp	r3, #10
 8006fde:	d10a      	bne.n	8006ff6 <takeMachineID+0x1b2>
        		machineID[arrayPos] = '5';
 8006fe0:	4a40      	ldr	r2, [pc, #256]	; (80070e4 <takeMachineID+0x2a0>)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	2235      	movs	r2, #53	; 0x35
 8006fe8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006fea:	4a43      	ldr	r2, [pc, #268]	; (80070f8 <takeMachineID+0x2b4>)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	4413      	add	r3, r2
 8006ff0:	2205      	movs	r2, #5
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	e036      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 11) {
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b0b      	cmp	r3, #11
 8006ffa:	d10a      	bne.n	8007012 <takeMachineID+0x1ce>
        		machineID[arrayPos] = '6';
 8006ffc:	4a39      	ldr	r2, [pc, #228]	; (80070e4 <takeMachineID+0x2a0>)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4413      	add	r3, r2
 8007002:	2236      	movs	r2, #54	; 0x36
 8007004:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007006:	4a3c      	ldr	r2, [pc, #240]	; (80070f8 <takeMachineID+0x2b4>)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	4413      	add	r3, r2
 800700c:	2206      	movs	r2, #6
 800700e:	701a      	strb	r2, [r3, #0]
 8007010:	e028      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 12) {
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d10a      	bne.n	800702e <takeMachineID+0x1ea>
        		machineID[arrayPos] = '7';
 8007018:	4a32      	ldr	r2, [pc, #200]	; (80070e4 <takeMachineID+0x2a0>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	2237      	movs	r2, #55	; 0x37
 8007020:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007022:	4a35      	ldr	r2, [pc, #212]	; (80070f8 <takeMachineID+0x2b4>)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	4413      	add	r3, r2
 8007028:	2207      	movs	r2, #7
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e01a      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 13) {
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b0d      	cmp	r3, #13
 8007032:	d10a      	bne.n	800704a <takeMachineID+0x206>
        		machineID[arrayPos] = '8';
 8007034:	4a2b      	ldr	r2, [pc, #172]	; (80070e4 <takeMachineID+0x2a0>)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4413      	add	r3, r2
 800703a:	2238      	movs	r2, #56	; 0x38
 800703c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 800703e:	4a2e      	ldr	r2, [pc, #184]	; (80070f8 <takeMachineID+0x2b4>)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	4413      	add	r3, r2
 8007044:	2208      	movs	r2, #8
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e00c      	b.n	8007064 <takeMachineID+0x220>
        	} else if(cursorPosition == 14) {
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b0e      	cmp	r3, #14
 800704e:	d109      	bne.n	8007064 <takeMachineID+0x220>
        		machineID[arrayPos] = '9';
 8007050:	4a24      	ldr	r2, [pc, #144]	; (80070e4 <takeMachineID+0x2a0>)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	2239      	movs	r2, #57	; 0x39
 8007058:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 800705a:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <takeMachineID+0x2b4>)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	4413      	add	r3, r2
 8007060:	2209      	movs	r2, #9
 8007062:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	b2d9      	uxtb	r1, r3
 8007068:	4a1e      	ldr	r2, [pc, #120]	; (80070e4 <takeMachineID+0x2a0>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	2001      	movs	r0, #1
 8007074:	f000 feb1 	bl	8007dda <lcd_print_char>

        	writeLoc++;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3301      	adds	r3, #1
 800707c:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3301      	adds	r3, #1
 8007082:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	3301      	adds	r3, #1
 8007088:	603b      	str	r3, [r7, #0]

        	machineID[arrayPos] = '\0';
 800708a:	4a16      	ldr	r2, [pc, #88]	; (80070e4 <takeMachineID+0x2a0>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = '\0';
 8007094:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <takeMachineID+0x2b4>)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	4413      	add	r3, r2
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]

        	HAL_Delay(150);
 800709e:	2096      	movs	r0, #150	; 0x96
 80070a0:	f001 fbdc 	bl	800885c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80070a4:	2104      	movs	r1, #4
 80070a6:	480e      	ldr	r0, [pc, #56]	; (80070e0 <takeMachineID+0x29c>)
 80070a8:	f002 f9a8 	bl	80093fc <HAL_GPIO_ReadPin>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d149      	bne.n	8007146 <takeMachineID+0x302>
            if(strlen(machineID) >= 1) {
 80070b2:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <takeMachineID+0x2a0>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d042      	beq.n	8007140 <takeMachineID+0x2fc>
                machineID[arrayPos] = '\0';
 80070ba:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <takeMachineID+0x2a0>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4413      	add	r3, r2
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 80070c4:	4a0c      	ldr	r2, [pc, #48]	; (80070f8 <takeMachineID+0x2b4>)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	4413      	add	r3, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b05      	cmp	r3, #5
 80070d2:	dd13      	ble.n	80070fc <takeMachineID+0x2b8>
                	writeLoc--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e014      	b.n	8007106 <takeMachineID+0x2c2>
 80070dc:	20000004 	.word	0x20000004
 80070e0:	40010800 	.word	0x40010800
 80070e4:	20000190 	.word	0x20000190
 80070e8:	0800dd40 	.word	0x0800dd40
 80070ec:	0800dd54 	.word	0x0800dd54
 80070f0:	20000010 	.word	0x20000010
 80070f4:	40011000 	.word	0x40011000
 80070f8:	20000118 	.word	0x20000118
                } else if(writeLoc < 5) {
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b04      	cmp	r3, #4
 8007100:	dc01      	bgt.n	8007106 <takeMachineID+0x2c2>
                	writeLoc = 5;
 8007102:	2305      	movs	r3, #5
 8007104:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	dd06      	ble.n	800711a <takeMachineID+0x2d6>
                	arrayPos--;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3b01      	subs	r3, #1
 8007110:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	3b01      	subs	r3, #1
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	e007      	b.n	800712a <takeMachineID+0x2e6>
                } else if(arrayPos < 0) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	da04      	bge.n	800712a <takeMachineID+0x2e6>
                	arrayPos = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <takeMachineID+0x318>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	3304      	adds	r3, #4
 8007130:	b2db      	uxtb	r3, r3
 8007132:	4619      	mov	r1, r3
 8007134:	2001      	movs	r0, #1
 8007136:	f000 fe71 	bl	8007e1c <lcd_delete_char>
                HAL_Delay(50);
 800713a:	2032      	movs	r0, #50	; 0x32
 800713c:	f001 fb8e 	bl	800885c <HAL_Delay>
            }

            HAL_Delay(150);
 8007140:	2096      	movs	r0, #150	; 0x96
 8007142:	f001 fb8b 	bl	800885c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	4619      	mov	r1, r3
 800714c:	2002      	movs	r0, #2
 800714e:	f000 fe10 	bl	8007d72 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007152:	e690      	b.n	8006e76 <takeMachineID+0x32>
    }
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	bd90      	pop	{r4, r7, pc}
 800715c:	20000004 	.word	0x20000004

08007160 <takeWifiSSID>:

void takeWifiSSID() {
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b089      	sub	sp, #36	; 0x24
 8007164:	af02      	add	r7, sp, #8
	mainSSIDSection:

    lcd_cursor(1);
 8007166:	2001      	movs	r0, #1
 8007168:	f000 fe80 	bl	8007e6c <lcd_cursor>

    resetEEPROM4Wifi(2);
 800716c:	2002      	movs	r0, #2
 800716e:	f7f9 fbc9 	bl	8000904 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007172:	2064      	movs	r0, #100	; 0x64
 8007174:	f001 fb72 	bl	800885c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007178:	2301      	movs	r3, #1
 800717a:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800717c:	2307      	movs	r3, #7
 800717e:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007180:	2301      	movs	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007184:	2300      	movs	r3, #0
 8007186:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007188:	4ba1      	ldr	r3, [pc, #644]	; (8007410 <takeWifiSSID+0x2b0>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 800718e:	2101      	movs	r1, #1
 8007190:	2002      	movs	r0, #2
 8007192:	f7f9 ff27 	bl	8000fe4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007196:	2108      	movs	r1, #8
 8007198:	489e      	ldr	r0, [pc, #632]	; (8007414 <takeWifiSSID+0x2b4>)
 800719a:	f002 f92f 	bl	80093fc <HAL_GPIO_ReadPin>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d12a      	bne.n	80071fa <takeWifiSSID+0x9a>
            lcd_cursor(0);
 80071a4:	2000      	movs	r0, #0
 80071a6:	f000 fe61 	bl	8007e6c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80071aa:	489b      	ldr	r0, [pc, #620]	; (8007418 <takeWifiSSID+0x2b8>)
 80071ac:	f7f9 f83a 	bl	8000224 <strlen>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b14      	cmp	r3, #20
 80071b4:	d910      	bls.n	80071d8 <takeWifiSSID+0x78>
                lcd_clear();
 80071b6:	f000 fe27 	bl	8007e08 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80071ba:	4a98      	ldr	r2, [pc, #608]	; (800741c <takeWifiSSID+0x2bc>)
 80071bc:	2101      	movs	r1, #1
 80071be:	2001      	movs	r0, #1
 80071c0:	f000 fdf6 	bl	8007db0 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80071c4:	4a96      	ldr	r2, [pc, #600]	; (8007420 <takeWifiSSID+0x2c0>)
 80071c6:	2101      	movs	r1, #1
 80071c8:	2002      	movs	r0, #2
 80071ca:	f000 fdf1 	bl	8007db0 <lcd_print>
                HAL_Delay(1250);
 80071ce:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80071d2:	f001 fb43 	bl	800885c <HAL_Delay>
                goto mainSSIDSection;
 80071d6:	e7c6      	b.n	8007166 <takeWifiSSID+0x6>

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            	HAL_Delay(1000);*/

            	// Kullanıcı tarafından girilen veriyi EEPROM'a yaz
            	writeStringToEEPROM(ssidStartPos, 1, wifiSSID, strlen(wifiSSID), charactersArray);
 80071d8:	4b8d      	ldr	r3, [pc, #564]	; (8007410 <takeWifiSSID+0x2b0>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	b29c      	uxth	r4, r3
 80071de:	488e      	ldr	r0, [pc, #568]	; (8007418 <takeWifiSSID+0x2b8>)
 80071e0:	f7f9 f820 	bl	8000224 <strlen>
 80071e4:	4603      	mov	r3, r0
 80071e6:	461a      	mov	r2, r3
 80071e8:	4b8e      	ldr	r3, [pc, #568]	; (8007424 <takeWifiSSID+0x2c4>)
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	4a8a      	ldr	r2, [pc, #552]	; (8007418 <takeWifiSSID+0x2b8>)
 80071f0:	2101      	movs	r1, #1
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7f9 fc06 	bl	8000a04 <writeStringToEEPROM>

            	break;
 80071f8:	e139      	b.n	800746e <takeWifiSSID+0x30e>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071fa:	2101      	movs	r1, #1
 80071fc:	4885      	ldr	r0, [pc, #532]	; (8007414 <takeWifiSSID+0x2b4>)
 80071fe:	f002 f8fd 	bl	80093fc <HAL_GPIO_ReadPin>
 8007202:	4603      	mov	r3, r0
 8007204:	2b01      	cmp	r3, #1
 8007206:	d14d      	bne.n	80072a4 <takeWifiSSID+0x144>
        	if(cursorPosition > 80) {
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b50      	cmp	r3, #80	; 0x50
 800720c:	dd01      	ble.n	8007212 <takeWifiSSID+0xb2>
        		cursorPosition = 1;
 800720e:	2301      	movs	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b10      	cmp	r3, #16
 8007216:	d13f      	bne.n	8007298 <takeWifiSSID+0x138>
            	if(page == 1) {
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d109      	bne.n	8007232 <takeWifiSSID+0xd2>
            		cursorPosition = 1;
 800721e:	2301      	movs	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
            		page++;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	3301      	adds	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007228:	2102      	movs	r1, #2
 800722a:	2002      	movs	r0, #2
 800722c:	f7f9 feda 	bl	8000fe4 <printTemplate>
 8007230:	e035      	b.n	800729e <takeWifiSSID+0x13e>
            	} else if(page == 2) {
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d109      	bne.n	800724c <takeWifiSSID+0xec>
            		cursorPosition = 1;
 8007238:	2301      	movs	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
            		page++;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	3301      	adds	r3, #1
 8007240:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007242:	2103      	movs	r1, #3
 8007244:	2002      	movs	r0, #2
 8007246:	f7f9 fecd 	bl	8000fe4 <printTemplate>
 800724a:	e028      	b.n	800729e <takeWifiSSID+0x13e>
            	} else if(page == 3) {
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b03      	cmp	r3, #3
 8007250:	d109      	bne.n	8007266 <takeWifiSSID+0x106>
            		cursorPosition = 1;
 8007252:	2301      	movs	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
            		page++;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	3301      	adds	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800725c:	2104      	movs	r1, #4
 800725e:	2002      	movs	r0, #2
 8007260:	f7f9 fec0 	bl	8000fe4 <printTemplate>
 8007264:	e01b      	b.n	800729e <takeWifiSSID+0x13e>
            	} else if(page == 4) {
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b04      	cmp	r3, #4
 800726a:	d109      	bne.n	8007280 <takeWifiSSID+0x120>
            		cursorPosition = 1;
 800726c:	2301      	movs	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3301      	adds	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007276:	2105      	movs	r1, #5
 8007278:	2002      	movs	r0, #2
 800727a:	f7f9 feb3 	bl	8000fe4 <printTemplate>
 800727e:	e00e      	b.n	800729e <takeWifiSSID+0x13e>
            	} else if(page == 5) {
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2b05      	cmp	r3, #5
 8007284:	d10b      	bne.n	800729e <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 8007286:	2301      	movs	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800728a:	2301      	movs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800728e:	2101      	movs	r1, #1
 8007290:	2002      	movs	r0, #2
 8007292:	f7f9 fea7 	bl	8000fe4 <printTemplate>
 8007296:	e002      	b.n	800729e <takeWifiSSID+0x13e>
            	}
            } else {
            	cursorPosition++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800729e:	2096      	movs	r0, #150	; 0x96
 80072a0:	f001 fadc 	bl	800885c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80072a4:	2108      	movs	r1, #8
 80072a6:	4860      	ldr	r0, [pc, #384]	; (8007428 <takeWifiSSID+0x2c8>)
 80072a8:	f002 f8a8 	bl	80093fc <HAL_GPIO_ReadPin>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d149      	bne.n	8007346 <takeWifiSSID+0x1e6>
        	if(cursorPosition < 1) {
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	dc01      	bgt.n	80072bc <takeWifiSSID+0x15c>
        		cursorPosition = 80;
 80072b8:	2350      	movs	r3, #80	; 0x50
 80072ba:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d13b      	bne.n	800733a <takeWifiSSID+0x1da>
            	if(page == 1) {
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d108      	bne.n	80072da <takeWifiSSID+0x17a>
            		cursorPosition = 16;
 80072c8:	2310      	movs	r3, #16
 80072ca:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80072cc:	2305      	movs	r3, #5
 80072ce:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80072d0:	2105      	movs	r1, #5
 80072d2:	2002      	movs	r0, #2
 80072d4:	f7f9 fe86 	bl	8000fe4 <printTemplate>
 80072d8:	e032      	b.n	8007340 <takeWifiSSID+0x1e0>
            	} else if(page == 2) {
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d108      	bne.n	80072f2 <takeWifiSSID+0x192>
            		cursorPosition = 16;
 80072e0:	2310      	movs	r3, #16
 80072e2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80072e4:	2301      	movs	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80072e8:	2101      	movs	r1, #1
 80072ea:	2002      	movs	r0, #2
 80072ec:	f7f9 fe7a 	bl	8000fe4 <printTemplate>
 80072f0:	e026      	b.n	8007340 <takeWifiSSID+0x1e0>
            	} else if(page == 3) {
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d108      	bne.n	800730a <takeWifiSSID+0x1aa>
            		cursorPosition = 16;
 80072f8:	2310      	movs	r3, #16
 80072fa:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80072fc:	2302      	movs	r3, #2
 80072fe:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007300:	2102      	movs	r1, #2
 8007302:	2002      	movs	r0, #2
 8007304:	f7f9 fe6e 	bl	8000fe4 <printTemplate>
 8007308:	e01a      	b.n	8007340 <takeWifiSSID+0x1e0>
            	} else if(page == 4) {
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b04      	cmp	r3, #4
 800730e:	d108      	bne.n	8007322 <takeWifiSSID+0x1c2>
            		cursorPosition = 16;
 8007310:	2310      	movs	r3, #16
 8007312:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007314:	2303      	movs	r3, #3
 8007316:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007318:	2103      	movs	r1, #3
 800731a:	2002      	movs	r0, #2
 800731c:	f7f9 fe62 	bl	8000fe4 <printTemplate>
 8007320:	e00e      	b.n	8007340 <takeWifiSSID+0x1e0>
            	} else if(page == 5) {
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b05      	cmp	r3, #5
 8007326:	d10b      	bne.n	8007340 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8007328:	2310      	movs	r3, #16
 800732a:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800732c:	2304      	movs	r3, #4
 800732e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007330:	2104      	movs	r1, #4
 8007332:	2002      	movs	r0, #2
 8007334:	f7f9 fe56 	bl	8000fe4 <printTemplate>
 8007338:	e002      	b.n	8007340 <takeWifiSSID+0x1e0>
            	}
            } else {
            	cursorPosition--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3b01      	subs	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007340:	2096      	movs	r0, #150	; 0x96
 8007342:	f001 fa8b 	bl	800885c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007346:	2102      	movs	r1, #2
 8007348:	4832      	ldr	r0, [pc, #200]	; (8007414 <takeWifiSSID+0x2b4>)
 800734a:	f002 f857 	bl	80093fc <HAL_GPIO_ReadPin>
 800734e:	4603      	mov	r3, r0
 8007350:	2b01      	cmp	r3, #1
 8007352:	d131      	bne.n	80073b8 <takeWifiSSID+0x258>
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b2d9      	uxtb	r1, r3
 800735c:	4a33      	ldr	r2, [pc, #204]	; (800742c <takeWifiSSID+0x2cc>)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	4413      	add	r3, r2
 8007362:	460a      	mov	r2, r1
 8007364:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b2d9      	uxtb	r1, r3
 800736e:	4a30      	ldr	r2, [pc, #192]	; (8007430 <takeWifiSSID+0x2d0>)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4413      	add	r3, r2
 8007374:	460a      	mov	r2, r1
 8007376:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition - 1]);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	b2d9      	uxtb	r1, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3b01      	subs	r3, #1
 8007380:	4a28      	ldr	r2, [pc, #160]	; (8007424 <takeWifiSSID+0x2c4>)
 8007382:	5cd3      	ldrb	r3, [r2, r3]
 8007384:	461a      	mov	r2, r3
 8007386:	2001      	movs	r0, #1
 8007388:	f000 fd27 	bl	8007dda <lcd_print_char>

            writeLoc++;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	3301      	adds	r3, #1
 8007390:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	3301      	adds	r3, #1
 8007396:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3301      	adds	r3, #1
 800739c:	607b      	str	r3, [r7, #4]

            wifiSSIDInt[arrayPosition] = '\0';
 800739e:	4a23      	ldr	r2, [pc, #140]	; (800742c <takeWifiSSID+0x2cc>)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4413      	add	r3, r2
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80073a8:	4a21      	ldr	r2, [pc, #132]	; (8007430 <takeWifiSSID+0x2d0>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80073b2:	2096      	movs	r0, #150	; 0x96
 80073b4:	f001 fa52 	bl	800885c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80073b8:	2104      	movs	r1, #4
 80073ba:	4816      	ldr	r0, [pc, #88]	; (8007414 <takeWifiSSID+0x2b4>)
 80073bc:	f002 f81e 	bl	80093fc <HAL_GPIO_ReadPin>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d14c      	bne.n	8007460 <takeWifiSSID+0x300>
        	if(strlen(wifiSSID) >= 1) {
 80073c6:	4b14      	ldr	r3, [pc, #80]	; (8007418 <takeWifiSSID+0x2b8>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d045      	beq.n	800745a <takeWifiSSID+0x2fa>
        		wifiSSIDInt[arrayPosition] = '\0';
 80073ce:	4a17      	ldr	r2, [pc, #92]	; (800742c <takeWifiSSID+0x2cc>)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4413      	add	r3, r2
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 80073d8:	4a15      	ldr	r2, [pc, #84]	; (8007430 <takeWifiSSID+0x2d0>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b07      	cmp	r3, #7
 80073e6:	dd03      	ble.n	80073f0 <takeWifiSSID+0x290>
        			writeLoc--;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	e004      	b.n	80073fa <takeWifiSSID+0x29a>
        		} else if(writeLoc < 7) {
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b06      	cmp	r3, #6
 80073f4:	dc01      	bgt.n	80073fa <takeWifiSSID+0x29a>
        			writeLoc = 7;
 80073f6:	2307      	movs	r3, #7
 80073f8:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd19      	ble.n	8007434 <takeWifiSSID+0x2d4>
        			arrayPosition--;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3b01      	subs	r3, #1
 8007404:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3b01      	subs	r3, #1
 800740a:	607b      	str	r3, [r7, #4]
 800740c:	e01a      	b.n	8007444 <takeWifiSSID+0x2e4>
 800740e:	bf00      	nop
 8007410:	20000008 	.word	0x20000008
 8007414:	40010800 	.word	0x40010800
 8007418:	200001a0 	.word	0x200001a0
 800741c:	0800dd68 	.word	0x0800dd68
 8007420:	0800dd7c 	.word	0x0800dd7c
 8007424:	2000001c 	.word	0x2000001c
 8007428:	40011000 	.word	0x40011000
 800742c:	200001e0 	.word	0x200001e0
 8007430:	20000118 	.word	0x20000118
        		} else if(arrayPosition < 0) {
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	da04      	bge.n	8007444 <takeWifiSSID+0x2e4>
        			arrayPosition = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <takeWifiSSID+0x318>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	3306      	adds	r3, #6
 800744a:	b2db      	uxtb	r3, r3
 800744c:	4619      	mov	r1, r3
 800744e:	2001      	movs	r0, #1
 8007450:	f000 fce4 	bl	8007e1c <lcd_delete_char>
        		HAL_Delay(50);
 8007454:	2032      	movs	r0, #50	; 0x32
 8007456:	f001 fa01 	bl	800885c <HAL_Delay>
        	}

        	HAL_Delay(150);
 800745a:	2096      	movs	r0, #150	; 0x96
 800745c:	f001 f9fe 	bl	800885c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	2002      	movs	r0, #2
 8007468:	f000 fc83 	bl	8007d72 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800746c:	e693      	b.n	8007196 <takeWifiSSID+0x36>
    }
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	bd90      	pop	{r4, r7, pc}
 8007476:	bf00      	nop
 8007478:	20000008 	.word	0x20000008

0800747c <takeWifiPass>:

void takeWifiPass() {
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b089      	sub	sp, #36	; 0x24
 8007480:	af02      	add	r7, sp, #8
	mainPASSSection:

    lcd_cursor(1);
 8007482:	2001      	movs	r0, #1
 8007484:	f000 fcf2 	bl	8007e6c <lcd_cursor>

    resetEEPROM4Wifi(3);
 8007488:	2003      	movs	r0, #3
 800748a:	f7f9 fa3b 	bl	8000904 <resetEEPROM4Wifi>
    HAL_Delay(100);
 800748e:	2064      	movs	r0, #100	; 0x64
 8007490:	f001 f9e4 	bl	800885c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007494:	2301      	movs	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007498:	2307      	movs	r3, #7
 800749a:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 800749c:	2301      	movs	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 80074a0:	2300      	movs	r3, #0
 80074a2:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 80074a4:	4ba7      	ldr	r3, [pc, #668]	; (8007744 <takeWifiPass+0x2c8>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80074aa:	2101      	movs	r1, #1
 80074ac:	2003      	movs	r0, #3
 80074ae:	f7f9 fd99 	bl	8000fe4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80074b2:	2108      	movs	r1, #8
 80074b4:	48a4      	ldr	r0, [pc, #656]	; (8007748 <takeWifiPass+0x2cc>)
 80074b6:	f001 ffa1 	bl	80093fc <HAL_GPIO_ReadPin>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d12a      	bne.n	8007516 <takeWifiPass+0x9a>
            lcd_cursor(0);
 80074c0:	2000      	movs	r0, #0
 80074c2:	f000 fcd3 	bl	8007e6c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 80074c6:	48a1      	ldr	r0, [pc, #644]	; (800774c <takeWifiPass+0x2d0>)
 80074c8:	f7f8 feac 	bl	8000224 <strlen>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b14      	cmp	r3, #20
 80074d0:	d910      	bls.n	80074f4 <takeWifiPass+0x78>
                lcd_clear();
 80074d2:	f000 fc99 	bl	8007e08 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80074d6:	4a9e      	ldr	r2, [pc, #632]	; (8007750 <takeWifiPass+0x2d4>)
 80074d8:	2101      	movs	r1, #1
 80074da:	2001      	movs	r0, #1
 80074dc:	f000 fc68 	bl	8007db0 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80074e0:	4a9c      	ldr	r2, [pc, #624]	; (8007754 <takeWifiPass+0x2d8>)
 80074e2:	2101      	movs	r1, #1
 80074e4:	2002      	movs	r0, #2
 80074e6:	f000 fc63 	bl	8007db0 <lcd_print>
                HAL_Delay(1200);
 80074ea:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80074ee:	f001 f9b5 	bl	800885c <HAL_Delay>
                goto mainPASSSection;
 80074f2:	e7c6      	b.n	8007482 <takeWifiPass+0x6>

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            	HAL_Delay(1000);*/

            	// Kullanıcı tarafından girilen veriyi EEPROM'a yaz
            	writeStringToEEPROM(passStartPos, 1, wifiPass, strlen(wifiPass), charactersArray);
 80074f4:	4b93      	ldr	r3, [pc, #588]	; (8007744 <takeWifiPass+0x2c8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	b29c      	uxth	r4, r3
 80074fa:	4894      	ldr	r0, [pc, #592]	; (800774c <takeWifiPass+0x2d0>)
 80074fc:	f7f8 fe92 	bl	8000224 <strlen>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	4b94      	ldr	r3, [pc, #592]	; (8007758 <takeWifiPass+0x2dc>)
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4613      	mov	r3, r2
 800750a:	4a90      	ldr	r2, [pc, #576]	; (800774c <takeWifiPass+0x2d0>)
 800750c:	2101      	movs	r1, #1
 800750e:	4620      	mov	r0, r4
 8007510:	f7f9 fa78 	bl	8000a04 <writeStringToEEPROM>

            	break;
 8007514:	e111      	b.n	800773a <takeWifiPass+0x2be>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007516:	2101      	movs	r1, #1
 8007518:	488b      	ldr	r0, [pc, #556]	; (8007748 <takeWifiPass+0x2cc>)
 800751a:	f001 ff6f 	bl	80093fc <HAL_GPIO_ReadPin>
 800751e:	4603      	mov	r3, r0
 8007520:	2b01      	cmp	r3, #1
 8007522:	d14d      	bne.n	80075c0 <takeWifiPass+0x144>
        	if(cursorPosition > 80) {
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b50      	cmp	r3, #80	; 0x50
 8007528:	dd01      	ble.n	800752e <takeWifiPass+0xb2>
        	    cursorPosition = 1;
 800752a:	2301      	movs	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b10      	cmp	r3, #16
 8007532:	d13f      	bne.n	80075b4 <takeWifiPass+0x138>
            	if(page == 1) {
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d109      	bne.n	800754e <takeWifiPass+0xd2>
            		cursorPosition = 1;
 800753a:	2301      	movs	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
            		page++;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	3301      	adds	r3, #1
 8007542:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007544:	2102      	movs	r1, #2
 8007546:	2003      	movs	r0, #3
 8007548:	f7f9 fd4c 	bl	8000fe4 <printTemplate>
 800754c:	e035      	b.n	80075ba <takeWifiPass+0x13e>
            	} else if(page == 2) {
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b02      	cmp	r3, #2
 8007552:	d109      	bne.n	8007568 <takeWifiPass+0xec>
            		cursorPosition = 1;
 8007554:	2301      	movs	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
            		page++;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3301      	adds	r3, #1
 800755c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800755e:	2103      	movs	r1, #3
 8007560:	2003      	movs	r0, #3
 8007562:	f7f9 fd3f 	bl	8000fe4 <printTemplate>
 8007566:	e028      	b.n	80075ba <takeWifiPass+0x13e>
            	} else if(page == 3) {
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d109      	bne.n	8007582 <takeWifiPass+0x106>
            		cursorPosition = 1;
 800756e:	2301      	movs	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]
            		page++;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	3301      	adds	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007578:	2104      	movs	r1, #4
 800757a:	2003      	movs	r0, #3
 800757c:	f7f9 fd32 	bl	8000fe4 <printTemplate>
 8007580:	e01b      	b.n	80075ba <takeWifiPass+0x13e>
            	} else if(page == 4) {
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b04      	cmp	r3, #4
 8007586:	d109      	bne.n	800759c <takeWifiPass+0x120>
            		cursorPosition = 1;
 8007588:	2301      	movs	r3, #1
 800758a:	60fb      	str	r3, [r7, #12]
            		page++;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	3301      	adds	r3, #1
 8007590:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007592:	2105      	movs	r1, #5
 8007594:	2003      	movs	r0, #3
 8007596:	f7f9 fd25 	bl	8000fe4 <printTemplate>
 800759a:	e00e      	b.n	80075ba <takeWifiPass+0x13e>
            	} else if(page == 5) {
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d10b      	bne.n	80075ba <takeWifiPass+0x13e>
            		cursorPosition = 1;
 80075a2:	2301      	movs	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80075a6:	2301      	movs	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80075aa:	2101      	movs	r1, #1
 80075ac:	2003      	movs	r0, #3
 80075ae:	f7f9 fd19 	bl	8000fe4 <printTemplate>
 80075b2:	e002      	b.n	80075ba <takeWifiPass+0x13e>
            	}
            } else {
            	cursorPosition++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80075ba:	2096      	movs	r0, #150	; 0x96
 80075bc:	f001 f94e 	bl	800885c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80075c0:	2108      	movs	r1, #8
 80075c2:	4866      	ldr	r0, [pc, #408]	; (800775c <takeWifiPass+0x2e0>)
 80075c4:	f001 ff1a 	bl	80093fc <HAL_GPIO_ReadPin>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d149      	bne.n	8007662 <takeWifiPass+0x1e6>
        	if(cursorPosition < 1) {
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc01      	bgt.n	80075d8 <takeWifiPass+0x15c>
        	    cursorPosition = 80;
 80075d4:	2350      	movs	r3, #80	; 0x50
 80075d6:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d13b      	bne.n	8007656 <takeWifiPass+0x1da>
            	if(page == 1) {
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d108      	bne.n	80075f6 <takeWifiPass+0x17a>
            		cursorPosition = 16;
 80075e4:	2310      	movs	r3, #16
 80075e6:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80075e8:	2305      	movs	r3, #5
 80075ea:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80075ec:	2105      	movs	r1, #5
 80075ee:	2003      	movs	r0, #3
 80075f0:	f7f9 fcf8 	bl	8000fe4 <printTemplate>
 80075f4:	e032      	b.n	800765c <takeWifiPass+0x1e0>
            	} else if(page == 2) {
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d108      	bne.n	800760e <takeWifiPass+0x192>
            		cursorPosition = 16;
 80075fc:	2310      	movs	r3, #16
 80075fe:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007600:	2301      	movs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007604:	2101      	movs	r1, #1
 8007606:	2003      	movs	r0, #3
 8007608:	f7f9 fcec 	bl	8000fe4 <printTemplate>
 800760c:	e026      	b.n	800765c <takeWifiPass+0x1e0>
            	} else if(page == 3) {
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b03      	cmp	r3, #3
 8007612:	d108      	bne.n	8007626 <takeWifiPass+0x1aa>
            		cursorPosition = 16;
 8007614:	2310      	movs	r3, #16
 8007616:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007618:	2302      	movs	r3, #2
 800761a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800761c:	2102      	movs	r1, #2
 800761e:	2003      	movs	r0, #3
 8007620:	f7f9 fce0 	bl	8000fe4 <printTemplate>
 8007624:	e01a      	b.n	800765c <takeWifiPass+0x1e0>
            	} else if(page == 4) {
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b04      	cmp	r3, #4
 800762a:	d108      	bne.n	800763e <takeWifiPass+0x1c2>
            		cursorPosition = 16;
 800762c:	2310      	movs	r3, #16
 800762e:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007630:	2303      	movs	r3, #3
 8007632:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007634:	2103      	movs	r1, #3
 8007636:	2003      	movs	r0, #3
 8007638:	f7f9 fcd4 	bl	8000fe4 <printTemplate>
 800763c:	e00e      	b.n	800765c <takeWifiPass+0x1e0>
            	} else if(page == 5) {
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b05      	cmp	r3, #5
 8007642:	d10b      	bne.n	800765c <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 8007644:	2310      	movs	r3, #16
 8007646:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007648:	2304      	movs	r3, #4
 800764a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800764c:	2104      	movs	r1, #4
 800764e:	2003      	movs	r0, #3
 8007650:	f7f9 fcc8 	bl	8000fe4 <printTemplate>
 8007654:	e002      	b.n	800765c <takeWifiPass+0x1e0>
            	}
            } else {
            	cursorPosition--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3b01      	subs	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800765c:	2096      	movs	r0, #150	; 0x96
 800765e:	f001 f8fd 	bl	800885c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007662:	2102      	movs	r1, #2
 8007664:	4838      	ldr	r0, [pc, #224]	; (8007748 <takeWifiPass+0x2cc>)
 8007666:	f001 fec9 	bl	80093fc <HAL_GPIO_ReadPin>
 800766a:	4603      	mov	r3, r0
 800766c:	2b01      	cmp	r3, #1
 800766e:	d131      	bne.n	80076d4 <takeWifiPass+0x258>
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b2d9      	uxtb	r1, r3
 8007678:	4a39      	ldr	r2, [pc, #228]	; (8007760 <takeWifiPass+0x2e4>)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4413      	add	r3, r2
 800767e:	460a      	mov	r2, r1
 8007680:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b2d9      	uxtb	r1, r3
 800768a:	4a36      	ldr	r2, [pc, #216]	; (8007764 <takeWifiPass+0x2e8>)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4413      	add	r3, r2
 8007690:	460a      	mov	r2, r1
 8007692:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	b2d9      	uxtb	r1, r3
 8007698:	4a2c      	ldr	r2, [pc, #176]	; (800774c <takeWifiPass+0x2d0>)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	4413      	add	r3, r2
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	2001      	movs	r0, #1
 80076a4:	f000 fb99 	bl	8007dda <lcd_print_char>

            writeLoc++;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	3301      	adds	r3, #1
 80076ac:	613b      	str	r3, [r7, #16]
            arrayPos++;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3301      	adds	r3, #1
 80076b2:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3301      	adds	r3, #1
 80076b8:	607b      	str	r3, [r7, #4]

            wifiPassInt[arrayPos] = '\0';
 80076ba:	4a29      	ldr	r2, [pc, #164]	; (8007760 <takeWifiPass+0x2e4>)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4413      	add	r3, r2
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80076c4:	4a27      	ldr	r2, [pc, #156]	; (8007764 <takeWifiPass+0x2e8>)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4413      	add	r3, r2
 80076ca:	2200      	movs	r2, #0
 80076cc:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80076ce:	2096      	movs	r0, #150	; 0x96
 80076d0:	f001 f8c4 	bl	800885c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80076d4:	2104      	movs	r1, #4
 80076d6:	481c      	ldr	r0, [pc, #112]	; (8007748 <takeWifiPass+0x2cc>)
 80076d8:	f001 fe90 	bl	80093fc <HAL_GPIO_ReadPin>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d124      	bne.n	800772c <takeWifiPass+0x2b0>
            if(strlen(wifiPass) >= 1) {
 80076e2:	4b1a      	ldr	r3, [pc, #104]	; (800774c <takeWifiPass+0x2d0>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d01d      	beq.n	8007726 <takeWifiPass+0x2aa>
            	wifiPassInt[arrayPos] = '\0';
 80076ea:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <takeWifiPass+0x2e4>)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4413      	add	r3, r2
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 80076f4:	4a1b      	ldr	r2, [pc, #108]	; (8007764 <takeWifiPass+0x2e8>)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4413      	add	r3, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3b01      	subs	r3, #1
 8007702:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	3b01      	subs	r3, #1
 8007708:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3b01      	subs	r3, #1
 800770e:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	3306      	adds	r3, #6
 8007716:	b2db      	uxtb	r3, r3
 8007718:	4619      	mov	r1, r3
 800771a:	2001      	movs	r0, #1
 800771c:	f000 fb7e 	bl	8007e1c <lcd_delete_char>
            	HAL_Delay(50);
 8007720:	2032      	movs	r0, #50	; 0x32
 8007722:	f001 f89b 	bl	800885c <HAL_Delay>
            }

            HAL_Delay(150);
 8007726:	2096      	movs	r0, #150	; 0x96
 8007728:	f001 f898 	bl	800885c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	4619      	mov	r1, r3
 8007732:	2002      	movs	r0, #2
 8007734:	f000 fb1d 	bl	8007d72 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007738:	e6bb      	b.n	80074b2 <takeWifiPass+0x36>
    }
}
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	bd90      	pop	{r4, r7, pc}
 8007742:	bf00      	nop
 8007744:	2000000c 	.word	0x2000000c
 8007748:	40010800 	.word	0x40010800
 800774c:	200001b8 	.word	0x200001b8
 8007750:	0800dd68 	.word	0x0800dd68
 8007754:	0800dd90 	.word	0x0800dd90
 8007758:	2000001c 	.word	0x2000001c
 800775c:	40011000 	.word	0x40011000
 8007760:	200001f8 	.word	0x200001f8
 8007764:	20000118 	.word	0x20000118

08007768 <mergeData>:

char* mergeData() {
 8007768:	b580      	push	{r7, lr}
 800776a:	b09c      	sub	sp, #112	; 0x70
 800776c:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800776e:	2300      	movs	r3, #0
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007776:	2228      	movs	r2, #40	; 0x28
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f004 ff9e 	bl	800c6bc <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007780:	4b67      	ldr	r3, [pc, #412]	; (8007920 <mergeData+0x1b8>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	713b      	strb	r3, [r7, #4]
 8007786:	4b67      	ldr	r3, [pc, #412]	; (8007924 <mergeData+0x1bc>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	717b      	strb	r3, [r7, #5]
 800778c:	4b66      	ldr	r3, [pc, #408]	; (8007928 <mergeData+0x1c0>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	71bb      	strb	r3, [r7, #6]
 8007792:	4b66      	ldr	r3, [pc, #408]	; (800792c <mergeData+0x1c4>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	71fb      	strb	r3, [r7, #7]
 8007798:	4b65      	ldr	r3, [pc, #404]	; (8007930 <mergeData+0x1c8>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	723b      	strb	r3, [r7, #8]
 800779e:	4b65      	ldr	r3, [pc, #404]	; (8007934 <mergeData+0x1cc>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	727b      	strb	r3, [r7, #9]
 80077a4:	4b64      	ldr	r3, [pc, #400]	; (8007938 <mergeData+0x1d0>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	72bb      	strb	r3, [r7, #10]
 80077aa:	4b64      	ldr	r3, [pc, #400]	; (800793c <mergeData+0x1d4>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	72fb      	strb	r3, [r7, #11]
 80077b0:	4b63      	ldr	r3, [pc, #396]	; (8007940 <mergeData+0x1d8>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	733b      	strb	r3, [r7, #12]
 80077b6:	4b63      	ldr	r3, [pc, #396]	; (8007944 <mergeData+0x1dc>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	737b      	strb	r3, [r7, #13]
 80077bc:	4b62      	ldr	r3, [pc, #392]	; (8007948 <mergeData+0x1e0>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	73bb      	strb	r3, [r7, #14]
 80077c2:	4b62      	ldr	r3, [pc, #392]	; (800794c <mergeData+0x1e4>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	73fb      	strb	r3, [r7, #15]
 80077c8:	4b61      	ldr	r3, [pc, #388]	; (8007950 <mergeData+0x1e8>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	743b      	strb	r3, [r7, #16]
 80077ce:	4b61      	ldr	r3, [pc, #388]	; (8007954 <mergeData+0x1ec>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	747b      	strb	r3, [r7, #17]
 80077d4:	4b60      	ldr	r3, [pc, #384]	; (8007958 <mergeData+0x1f0>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	74bb      	strb	r3, [r7, #18]
 80077da:	4b60      	ldr	r3, [pc, #384]	; (800795c <mergeData+0x1f4>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	74fb      	strb	r3, [r7, #19]
 80077e0:	4b5f      	ldr	r3, [pc, #380]	; (8007960 <mergeData+0x1f8>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	753b      	strb	r3, [r7, #20]
 80077e6:	4b5f      	ldr	r3, [pc, #380]	; (8007964 <mergeData+0x1fc>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	757b      	strb	r3, [r7, #21]
 80077ec:	4b5e      	ldr	r3, [pc, #376]	; (8007968 <mergeData+0x200>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	75bb      	strb	r3, [r7, #22]
 80077f2:	4b5e      	ldr	r3, [pc, #376]	; (800796c <mergeData+0x204>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	75fb      	strb	r3, [r7, #23]
 80077f8:	4b5d      	ldr	r3, [pc, #372]	; (8007970 <mergeData+0x208>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	763b      	strb	r3, [r7, #24]
 80077fe:	4b5d      	ldr	r3, [pc, #372]	; (8007974 <mergeData+0x20c>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	767b      	strb	r3, [r7, #25]
 8007804:	4b5c      	ldr	r3, [pc, #368]	; (8007978 <mergeData+0x210>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	76bb      	strb	r3, [r7, #26]
 800780a:	4b5c      	ldr	r3, [pc, #368]	; (800797c <mergeData+0x214>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	76fb      	strb	r3, [r7, #27]
 8007810:	4b5b      	ldr	r3, [pc, #364]	; (8007980 <mergeData+0x218>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	773b      	strb	r3, [r7, #28]
 8007816:	4b5b      	ldr	r3, [pc, #364]	; (8007984 <mergeData+0x21c>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	777b      	strb	r3, [r7, #29]
 800781c:	4b5a      	ldr	r3, [pc, #360]	; (8007988 <mergeData+0x220>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	77bb      	strb	r3, [r7, #30]
 8007822:	4b5a      	ldr	r3, [pc, #360]	; (800798c <mergeData+0x224>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	4b59      	ldr	r3, [pc, #356]	; (8007990 <mergeData+0x228>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	f887 3020 	strb.w	r3, [r7, #32]
 8007830:	4b58      	ldr	r3, [pc, #352]	; (8007994 <mergeData+0x22c>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007838:	4b57      	ldr	r3, [pc, #348]	; (8007998 <mergeData+0x230>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007840:	4b56      	ldr	r3, [pc, #344]	; (800799c <mergeData+0x234>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007848:	4b55      	ldr	r3, [pc, #340]	; (80079a0 <mergeData+0x238>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007850:	4b54      	ldr	r3, [pc, #336]	; (80079a4 <mergeData+0x23c>)
 8007852:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007856:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800785a:	4b52      	ldr	r3, [pc, #328]	; (80079a4 <mergeData+0x23c>)
 800785c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007864:	4b4f      	ldr	r3, [pc, #316]	; (80079a4 <mergeData+0x23c>)
 8007866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800786a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800786e:	4b4d      	ldr	r3, [pc, #308]	; (80079a4 <mergeData+0x23c>)
 8007870:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007874:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007878:	4b4a      	ldr	r3, [pc, #296]	; (80079a4 <mergeData+0x23c>)
 800787a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800787e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007882:	4b48      	ldr	r3, [pc, #288]	; (80079a4 <mergeData+0x23c>)
 8007884:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 800788c:	4b45      	ldr	r3, [pc, #276]	; (80079a4 <mergeData+0x23c>)
 800788e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007896:	4b43      	ldr	r3, [pc, #268]	; (80079a4 <mergeData+0x23c>)
 8007898:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800789c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80078a0:	4b40      	ldr	r3, [pc, #256]	; (80079a4 <mergeData+0x23c>)
 80078a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80078a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80078aa:	4b3e      	ldr	r3, [pc, #248]	; (80079a4 <mergeData+0x23c>)
 80078ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80078b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80078b4:	2306      	movs	r3, #6
 80078b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80078ba:	2300      	movs	r3, #0
 80078bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078be:	e015      	b.n	80078ec <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80078c0:	1d3a      	adds	r2, r7, #4
 80078c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c4:	4413      	add	r3, r2
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078ce:	4936      	ldr	r1, [pc, #216]	; (80079a8 <mergeData+0x240>)
 80078d0:	4618      	mov	r0, r3
 80078d2:	f004 fe75 	bl	800c5c0 <siprintf>
	    strcat(combinedString, temp);
 80078d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f004 fecf 	bl	800c684 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80078e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e8:	3301      	adds	r3, #1
 80078ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ee:	2b2b      	cmp	r3, #43	; 0x2b
 80078f0:	d9e6      	bls.n	80078c0 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80078f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7f8 fc94 	bl	8000224 <strlen>
 80078fc:	4603      	mov	r3, r0
 80078fe:	3301      	adds	r3, #1
 8007900:	4618      	mov	r0, r3
 8007902:	f004 fda9 	bl	800c458 <malloc>
 8007906:	4603      	mov	r3, r0
 8007908:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800790a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800790e:	4619      	mov	r1, r3
 8007910:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007912:	f004 ff17 	bl	800c744 <strcpy>
	return result;
 8007916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007918:	4618      	mov	r0, r3
 800791a:	3770      	adds	r7, #112	; 0x70
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20000243 	.word	0x20000243
 8007924:	20000235 	.word	0x20000235
 8007928:	20000238 	.word	0x20000238
 800792c:	20000239 	.word	0x20000239
 8007930:	2000023a 	.word	0x2000023a
 8007934:	20000241 	.word	0x20000241
 8007938:	2000023b 	.word	0x2000023b
 800793c:	2000023c 	.word	0x2000023c
 8007940:	20000240 	.word	0x20000240
 8007944:	2000023d 	.word	0x2000023d
 8007948:	2000024d 	.word	0x2000024d
 800794c:	2000023e 	.word	0x2000023e
 8007950:	2000024e 	.word	0x2000024e
 8007954:	2000023f 	.word	0x2000023f
 8007958:	2000024f 	.word	0x2000024f
 800795c:	20000242 	.word	0x20000242
 8007960:	20000244 	.word	0x20000244
 8007964:	20000245 	.word	0x20000245
 8007968:	20000246 	.word	0x20000246
 800796c:	20000247 	.word	0x20000247
 8007970:	20000248 	.word	0x20000248
 8007974:	20000249 	.word	0x20000249
 8007978:	2000024a 	.word	0x2000024a
 800797c:	2000024b 	.word	0x2000024b
 8007980:	2000024c 	.word	0x2000024c
 8007984:	20000250 	.word	0x20000250
 8007988:	20000252 	.word	0x20000252
 800798c:	20000231 	.word	0x20000231
 8007990:	20000232 	.word	0x20000232
 8007994:	20000000 	.word	0x20000000
 8007998:	20000001 	.word	0x20000001
 800799c:	20000233 	.word	0x20000233
 80079a0:	20000255 	.word	0x20000255
 80079a4:	20000118 	.word	0x20000118
 80079a8:	0800dda4 	.word	0x0800dda4

080079ac <convertAndSendData>:

void convertAndSendData() {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 80079b2:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <convertAndSendData+0x60>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80079ba:	4a15      	ldr	r2, [pc, #84]	; (8007a10 <convertAndSendData+0x64>)
 80079bc:	2101      	movs	r1, #1
 80079be:	2001      	movs	r0, #1
 80079c0:	f000 f9f6 	bl	8007db0 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80079c4:	4a13      	ldr	r2, [pc, #76]	; (8007a14 <convertAndSendData+0x68>)
 80079c6:	2101      	movs	r1, #1
 80079c8:	2002      	movs	r0, #2
 80079ca:	f000 f9f1 	bl	8007db0 <lcd_print>
 80079ce:	e009      	b.n	80079e4 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80079d0:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <convertAndSendData+0x6c>)
 80079d2:	2101      	movs	r1, #1
 80079d4:	2001      	movs	r0, #1
 80079d6:	f000 f9eb 	bl	8007db0 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80079da:	4a10      	ldr	r2, [pc, #64]	; (8007a1c <convertAndSendData+0x70>)
 80079dc:	2101      	movs	r1, #1
 80079de:	2002      	movs	r0, #2
 80079e0:	f000 f9e6 	bl	8007db0 <lcd_print>
	}

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80079e4:	f7ff fec0 	bl	8007768 <mergeData>
 80079e8:	4603      	mov	r3, r0
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <convertAndSendData+0x74>)
 80079ee:	4a0d      	ldr	r2, [pc, #52]	; (8007a24 <convertAndSendData+0x78>)
 80079f0:	490d      	ldr	r1, [pc, #52]	; (8007a28 <convertAndSendData+0x7c>)
 80079f2:	480e      	ldr	r0, [pc, #56]	; (8007a2c <convertAndSendData+0x80>)
 80079f4:	f7f9 f85a 	bl	8000aac <sendMachineData>

	HAL_Delay(500);
 80079f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079fc:	f000 ff2e 	bl	800885c <HAL_Delay>
	lcd_clear();
 8007a00:	f000 fa02 	bl	8007e08 <lcd_clear>
}
 8007a04:	bf00      	nop
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000255 	.word	0x20000255
 8007a10:	0800dda8 	.word	0x0800dda8
 8007a14:	0800ddbc 	.word	0x0800ddbc
 8007a18:	0800ddd0 	.word	0x0800ddd0
 8007a1c:	0800dde4 	.word	0x0800dde4
 8007a20:	200001b8 	.word	0x200001b8
 8007a24:	200001a0 	.word	0x200001a0
 8007a28:	20000190 	.word	0x20000190
 8007a2c:	20000458 	.word	0x20000458

08007a30 <iotSetup>:

void iotSetup() {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007a34:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <iotSetup+0x40>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007a3c:	480d      	ldr	r0, [pc, #52]	; (8007a74 <iotSetup+0x44>)
 8007a3e:	f7f8 fbf1 	bl	8000224 <strlen>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b0d      	cmp	r3, #13
 8007a46:	d001      	beq.n	8007a4c <iotSetup+0x1c>
			takeMachineID();
 8007a48:	f7ff f9fc 	bl	8006e44 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007a4c:	480a      	ldr	r0, [pc, #40]	; (8007a78 <iotSetup+0x48>)
 8007a4e:	f7f8 fbe9 	bl	8000224 <strlen>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d801      	bhi.n	8007a5c <iotSetup+0x2c>
			takeWifiSSID();
 8007a58:	f7ff fb82 	bl	8007160 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007a5c:	4807      	ldr	r0, [pc, #28]	; (8007a7c <iotSetup+0x4c>)
 8007a5e:	f7f8 fbe1 	bl	8000224 <strlen>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d801      	bhi.n	8007a6c <iotSetup+0x3c>
			takeWifiPass();
 8007a68:	f7ff fd08 	bl	800747c <takeWifiPass>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
	HAL_Delay(500);
	convertAndSendData();*/
}
 8007a6c:	bf00      	nop
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000253 	.word	0x20000253
 8007a74:	20000190 	.word	0x20000190
 8007a78:	200001a0 	.word	0x200001a0
 8007a7c:	200001b8 	.word	0x200001b8

08007a80 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	4603      	mov	r3, r0
 8007a88:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	f023 030f 	bic.w	r3, r3, #15
 8007a90:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a98:	7b7b      	ldrb	r3, [r7, #13]
 8007a9a:	f043 030c 	orr.w	r3, r3, #12
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007aa2:	7b7b      	ldrb	r3, [r7, #13]
 8007aa4:	f043 0308 	orr.w	r3, r3, #8
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007aac:	7b3b      	ldrb	r3, [r7, #12]
 8007aae:	f043 030c 	orr.w	r3, r3, #12
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007ab6:	7b3b      	ldrb	r3, [r7, #12]
 8007ab8:	f043 0308 	orr.w	r3, r3, #8
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ac0:	bf00      	nop
 8007ac2:	4825      	ldr	r0, [pc, #148]	; (8007b58 <lcd_send_cmd+0xd8>)
 8007ac4:	f002 fac3 	bl	800a04e <HAL_I2C_GetError>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d0f9      	beq.n	8007ac2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ace:	bf00      	nop
 8007ad0:	4821      	ldr	r0, [pc, #132]	; (8007b58 <lcd_send_cmd+0xd8>)
 8007ad2:	f002 faaf 	bl	800a034 <HAL_I2C_GetState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d1f9      	bne.n	8007ad0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007adc:	4b1f      	ldr	r3, [pc, #124]	; (8007b5c <lcd_send_cmd+0xdc>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d116      	bne.n	8007b12 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
 8007ae8:	e00f      	b.n	8007b0a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	3310      	adds	r3, #16
 8007aee:	443b      	add	r3, r7
 8007af0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	f022 0208 	bic.w	r2, r2, #8
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	3310      	adds	r3, #16
 8007afe:	443b      	add	r3, r7
 8007b00:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	3301      	adds	r3, #1
 8007b08:	73fb      	strb	r3, [r7, #15]
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d9ec      	bls.n	8007aea <lcd_send_cmd+0x6a>
 8007b10:	e015      	b.n	8007b3e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b12:	2300      	movs	r3, #0
 8007b14:	73bb      	strb	r3, [r7, #14]
 8007b16:	e00f      	b.n	8007b38 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	3310      	adds	r3, #16
 8007b1c:	443b      	add	r3, r7
 8007b1e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	f042 0208 	orr.w	r2, r2, #8
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	3310      	adds	r3, #16
 8007b2c:	443b      	add	r3, r7
 8007b2e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	3301      	adds	r3, #1
 8007b36:	73bb      	strb	r3, [r7, #14]
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d9ec      	bls.n	8007b18 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b3e:	f107 0208 	add.w	r2, r7, #8
 8007b42:	2364      	movs	r3, #100	; 0x64
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	2304      	movs	r3, #4
 8007b48:	214e      	movs	r1, #78	; 0x4e
 8007b4a:	4803      	ldr	r0, [pc, #12]	; (8007b58 <lcd_send_cmd+0xd8>)
 8007b4c:	f001 fe12 	bl	8009774 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	200003bc 	.word	0x200003bc
 8007b5c:	20000392 	.word	0x20000392

08007b60 <lcd_send_data>:

void lcd_send_data (char data) {
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	f023 030f 	bic.w	r3, r3, #15
 8007b70:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b78:	7b7b      	ldrb	r3, [r7, #13]
 8007b7a:	f043 030d 	orr.w	r3, r3, #13
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b82:	7b7b      	ldrb	r3, [r7, #13]
 8007b84:	f043 0309 	orr.w	r3, r3, #9
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b8c:	7b3b      	ldrb	r3, [r7, #12]
 8007b8e:	f043 030d 	orr.w	r3, r3, #13
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b96:	7b3b      	ldrb	r3, [r7, #12]
 8007b98:	f043 0309 	orr.w	r3, r3, #9
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ba0:	bf00      	nop
 8007ba2:	4825      	ldr	r0, [pc, #148]	; (8007c38 <lcd_send_data+0xd8>)
 8007ba4:	f002 fa53 	bl	800a04e <HAL_I2C_GetError>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d0f9      	beq.n	8007ba2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bae:	bf00      	nop
 8007bb0:	4821      	ldr	r0, [pc, #132]	; (8007c38 <lcd_send_data+0xd8>)
 8007bb2:	f002 fa3f 	bl	800a034 <HAL_I2C_GetState>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d1f9      	bne.n	8007bb0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007bbc:	4b1f      	ldr	r3, [pc, #124]	; (8007c3c <lcd_send_data+0xdc>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d116      	bne.n	8007bf2 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]
 8007bc8:	e00f      	b.n	8007bea <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	3310      	adds	r3, #16
 8007bce:	443b      	add	r3, r7
 8007bd0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	f022 0208 	bic.w	r2, r2, #8
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	3310      	adds	r3, #16
 8007bde:	443b      	add	r3, r7
 8007be0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	3301      	adds	r3, #1
 8007be8:	73fb      	strb	r3, [r7, #15]
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d9ec      	bls.n	8007bca <lcd_send_data+0x6a>
 8007bf0:	e015      	b.n	8007c1e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73bb      	strb	r3, [r7, #14]
 8007bf6:	e00f      	b.n	8007c18 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	3310      	adds	r3, #16
 8007bfc:	443b      	add	r3, r7
 8007bfe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	f042 0208 	orr.w	r2, r2, #8
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	3310      	adds	r3, #16
 8007c0c:	443b      	add	r3, r7
 8007c0e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	3301      	adds	r3, #1
 8007c16:	73bb      	strb	r3, [r7, #14]
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d9ec      	bls.n	8007bf8 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007c1e:	f107 0208 	add.w	r2, r7, #8
 8007c22:	2364      	movs	r3, #100	; 0x64
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	2304      	movs	r3, #4
 8007c28:	214e      	movs	r1, #78	; 0x4e
 8007c2a:	4803      	ldr	r0, [pc, #12]	; (8007c38 <lcd_send_data+0xd8>)
 8007c2c:	f001 fda2 	bl	8009774 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	200003bc 	.word	0x200003bc
 8007c3c:	20000392 	.word	0x20000392

08007c40 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007c48:	e006      	b.n	8007c58 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff ff84 	bl	8007b60 <lcd_send_data>
	while (*str) {
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f4      	bne.n	8007c4a <lcd_send_string+0xa>
	}
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	f023 030f 	bic.w	r3, r3, #15
 8007c7c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c84:	7b7b      	ldrb	r3, [r7, #13]
 8007c86:	f043 030d 	orr.w	r3, r3, #13
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c8e:	7b7b      	ldrb	r3, [r7, #13]
 8007c90:	f043 0309 	orr.w	r3, r3, #9
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c98:	7b3b      	ldrb	r3, [r7, #12]
 8007c9a:	f043 030d 	orr.w	r3, r3, #13
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007ca2:	7b3b      	ldrb	r3, [r7, #12]
 8007ca4:	f043 0309 	orr.w	r3, r3, #9
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007cac:	bf00      	nop
 8007cae:	4825      	ldr	r0, [pc, #148]	; (8007d44 <lcd_send_char+0xd8>)
 8007cb0:	f002 f9cd 	bl	800a04e <HAL_I2C_GetError>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d0f9      	beq.n	8007cae <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007cba:	bf00      	nop
 8007cbc:	4821      	ldr	r0, [pc, #132]	; (8007d44 <lcd_send_char+0xd8>)
 8007cbe:	f002 f9b9 	bl	800a034 <HAL_I2C_GetState>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d1f9      	bne.n	8007cbc <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007cc8:	4b1f      	ldr	r3, [pc, #124]	; (8007d48 <lcd_send_char+0xdc>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d116      	bne.n	8007cfe <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
 8007cd4:	e00f      	b.n	8007cf6 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	3310      	adds	r3, #16
 8007cda:	443b      	add	r3, r7
 8007cdc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	f022 0208 	bic.w	r2, r2, #8
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	3310      	adds	r3, #16
 8007cea:	443b      	add	r3, r7
 8007cec:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	73fb      	strb	r3, [r7, #15]
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d9ec      	bls.n	8007cd6 <lcd_send_char+0x6a>
 8007cfc:	e015      	b.n	8007d2a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73bb      	strb	r3, [r7, #14]
 8007d02:	e00f      	b.n	8007d24 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	3310      	adds	r3, #16
 8007d08:	443b      	add	r3, r7
 8007d0a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	f042 0208 	orr.w	r2, r2, #8
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	3310      	adds	r3, #16
 8007d18:	443b      	add	r3, r7
 8007d1a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	3301      	adds	r3, #1
 8007d22:	73bb      	strb	r3, [r7, #14]
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d9ec      	bls.n	8007d04 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007d2a:	f107 0208 	add.w	r2, r7, #8
 8007d2e:	2364      	movs	r3, #100	; 0x64
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	2304      	movs	r3, #4
 8007d34:	214e      	movs	r1, #78	; 0x4e
 8007d36:	4803      	ldr	r0, [pc, #12]	; (8007d44 <lcd_send_char+0xd8>)
 8007d38:	f001 fd1c 	bl	8009774 <HAL_I2C_Master_Transmit>
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	200003bc 	.word	0x200003bc
 8007d48:	20000392 	.word	0x20000392

08007d4c <lcd_init>:

void lcd_init (void) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007d50:	2002      	movs	r0, #2
 8007d52:	f7ff fe95 	bl	8007a80 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007d56:	2028      	movs	r0, #40	; 0x28
 8007d58:	f7ff fe92 	bl	8007a80 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007d5c:	200c      	movs	r0, #12
 8007d5e:	f7ff fe8f 	bl	8007a80 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d62:	2080      	movs	r0, #128	; 0x80
 8007d64:	f7ff fe8c 	bl	8007a80 <lcd_send_cmd>
	lcd_backlight(1);
 8007d68:	2001      	movs	r0, #1
 8007d6a:	f000 f86d 	bl	8007e48 <lcd_backlight>
}
 8007d6e:	bf00      	nop
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	4603      	mov	r3, r0
 8007d7a:	460a      	mov	r2, r1
 8007d7c:	71fb      	strb	r3, [r7, #7]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d106      	bne.n	8007d96 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d88:	79bb      	ldrb	r3, [r7, #6]
 8007d8a:	337f      	adds	r3, #127	; 0x7f
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fe76 	bl	8007a80 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d94:	e008      	b.n	8007da8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d105      	bne.n	8007da8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d9c:	79bb      	ldrb	r3, [r7, #6]
 8007d9e:	3b41      	subs	r3, #65	; 0x41
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fe6c 	bl	8007a80 <lcd_send_cmd>
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	603a      	str	r2, [r7, #0]
 8007dba:	71fb      	strb	r3, [r7, #7]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007dc0:	79ba      	ldrb	r2, [r7, #6]
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff ffd3 	bl	8007d72 <lcd_gotoxy>
	lcd_send_string(str);
 8007dcc:	6838      	ldr	r0, [r7, #0]
 8007dce:	f7ff ff37 	bl	8007c40 <lcd_send_string>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	4603      	mov	r3, r0
 8007de2:	71fb      	strb	r3, [r7, #7]
 8007de4:	460b      	mov	r3, r1
 8007de6:	71bb      	strb	r3, [r7, #6]
 8007de8:	4613      	mov	r3, r2
 8007dea:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007dec:	79ba      	ldrb	r2, [r7, #6]
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	4611      	mov	r1, r2
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff ffbd 	bl	8007d72 <lcd_gotoxy>
    lcd_send_char(ch);
 8007df8:	797b      	ldrb	r3, [r7, #5]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff ff36 	bl	8007c6c <lcd_send_char>
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <lcd_clear>:

void lcd_clear(void) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	f7ff fe37 	bl	8007a80 <lcd_send_cmd>
    HAL_Delay(2);
 8007e12:	2002      	movs	r0, #2
 8007e14:	f000 fd22 	bl	800885c <HAL_Delay>
}
 8007e18:	bf00      	nop
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	460a      	mov	r2, r1
 8007e26:	71fb      	strb	r3, [r7, #7]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007e2c:	79ba      	ldrb	r2, [r7, #6]
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff ff9d 	bl	8007d72 <lcd_gotoxy>

    lcd_send_char(' ');
 8007e38:	2020      	movs	r0, #32
 8007e3a:	f7ff ff17 	bl	8007c6c <lcd_send_char>
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007e52:	4a05      	ldr	r2, [pc, #20]	; (8007e68 <lcd_backlight+0x20>)
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f7ff fe11 	bl	8007a80 <lcd_send_cmd>
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000392 	.word	0x20000392

08007e6c <lcd_cursor>:

void lcd_cursor(int state) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d106      	bne.n	8007e88 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e7a:	200e      	movs	r0, #14
 8007e7c:	f7ff fe00 	bl	8007a80 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e80:	200f      	movs	r0, #15
 8007e82:	f7ff fdfd 	bl	8007a80 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e86:	e002      	b.n	8007e8e <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e88:	200c      	movs	r0, #12
 8007e8a:	f7ff fdf9 	bl	8007a80 <lcd_send_cmd>
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a03      	ldr	r2, [pc, #12]	; (8007eb4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007ea8:	6013      	str	r3, [r2, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bc80      	pop	{r7}
 8007eb2:	4770      	bx	lr
 8007eb4:	20000210 	.word	0x20000210

08007eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ebc:	f000 fc6c 	bl	8008798 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007ec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ec4:	f000 fcca 	bl	800885c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ec8:	f000 f89c 	bl	8008004 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ecc:	f000 f9be 	bl	800824c <MX_GPIO_Init>
  MX_CAN_Init();
 8007ed0:	f000 f8de 	bl	8008090 <MX_CAN_Init>
  MX_I2C1_Init();
 8007ed4:	f000 f910 	bl	80080f8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ed8:	f000 f93c 	bl	8008154 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007edc:	f000 f98c 	bl	80081f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	2140      	movs	r1, #64	; 0x40
 8007ee4:	483e      	ldr	r0, [pc, #248]	; (8007fe0 <main+0x128>)
 8007ee6:	f001 faa0 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007eea:	2201      	movs	r2, #1
 8007eec:	2180      	movs	r1, #128	; 0x80
 8007eee:	483c      	ldr	r0, [pc, #240]	; (8007fe0 <main+0x128>)
 8007ef0:	f001 fa9b 	bl	800942a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007ef4:	200a      	movs	r0, #10
 8007ef6:	f000 fcb1 	bl	800885c <HAL_Delay>
  lcd_init();
 8007efa:	f7ff ff27 	bl	8007d4c <lcd_init>
  HAL_Delay(10);
 8007efe:	200a      	movs	r0, #10
 8007f00:	f000 fcac 	bl	800885c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007f04:	4837      	ldr	r0, [pc, #220]	; (8007fe4 <main+0x12c>)
 8007f06:	f003 f943 	bl	800b190 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007f0a:	bf00      	nop
 8007f0c:	4836      	ldr	r0, [pc, #216]	; (8007fe8 <main+0x130>)
 8007f0e:	f002 f89e 	bl	800a04e <HAL_I2C_GetError>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d0f9      	beq.n	8007f0c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007f18:	bf00      	nop
 8007f1a:	4833      	ldr	r0, [pc, #204]	; (8007fe8 <main+0x130>)
 8007f1c:	f002 f88a 	bl	800a034 <HAL_I2C_GetState>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b20      	cmp	r3, #32
 8007f24:	d1f9      	bne.n	8007f1a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f26:	2200      	movs	r2, #0
 8007f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f2c:	482c      	ldr	r0, [pc, #176]	; (8007fe0 <main+0x128>)
 8007f2e:	f001 fa7c 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f32:	2200      	movs	r2, #0
 8007f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f38:	4829      	ldr	r0, [pc, #164]	; (8007fe0 <main+0x128>)
 8007f3a:	f001 fa76 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2104      	movs	r1, #4
 8007f42:	4827      	ldr	r0, [pc, #156]	; (8007fe0 <main+0x128>)
 8007f44:	f001 fa71 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	4824      	ldr	r0, [pc, #144]	; (8007fe0 <main+0x128>)
 8007f4e:	f001 fa6c 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f52:	2200      	movs	r2, #0
 8007f54:	2101      	movs	r1, #1
 8007f56:	4822      	ldr	r0, [pc, #136]	; (8007fe0 <main+0x128>)
 8007f58:	f001 fa67 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2120      	movs	r1, #32
 8007f60:	4822      	ldr	r0, [pc, #136]	; (8007fec <main+0x134>)
 8007f62:	f001 fa62 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f66:	2200      	movs	r2, #0
 8007f68:	2110      	movs	r1, #16
 8007f6a:	4820      	ldr	r0, [pc, #128]	; (8007fec <main+0x134>)
 8007f6c:	f001 fa5d 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f70:	2200      	movs	r2, #0
 8007f72:	2180      	movs	r1, #128	; 0x80
 8007f74:	481e      	ldr	r0, [pc, #120]	; (8007ff0 <main+0x138>)
 8007f76:	f001 fa58 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2140      	movs	r1, #64	; 0x40
 8007f7e:	481c      	ldr	r0, [pc, #112]	; (8007ff0 <main+0x138>)
 8007f80:	f001 fa53 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f84:	2200      	movs	r2, #0
 8007f86:	2120      	movs	r1, #32
 8007f88:	4819      	ldr	r0, [pc, #100]	; (8007ff0 <main+0x138>)
 8007f8a:	f001 fa4e 	bl	800942a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2110      	movs	r1, #16
 8007f92:	4817      	ldr	r0, [pc, #92]	; (8007ff0 <main+0x138>)
 8007f94:	f001 fa49 	bl	800942a <HAL_GPIO_WritePin>

  i2cTest();
 8007f98:	f7f8 ff76 	bl	8000e88 <i2cTest>
  HAL_Delay(100);
 8007f9c:	2064      	movs	r0, #100	; 0x64
 8007f9e:	f000 fc5d 	bl	800885c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007fa2:	4a14      	ldr	r2, [pc, #80]	; (8007ff4 <main+0x13c>)
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	f7ff ff02 	bl	8007db0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007fac:	4a12      	ldr	r2, [pc, #72]	; (8007ff8 <main+0x140>)
 8007fae:	2101      	movs	r1, #1
 8007fb0:	2002      	movs	r0, #2
 8007fb2:	f7ff fefd 	bl	8007db0 <lcd_print>
  HAL_Delay(1000);
 8007fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fba:	f000 fc4f 	bl	800885c <HAL_Delay>
  lcd_clear();
 8007fbe:	f7ff ff23 	bl	8007e08 <lcd_clear>

  eepromKontrol();
 8007fc2:	f7f8 f937 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007fc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fca:	f000 fc47 	bl	800885c <HAL_Delay>

  backLightTimer = millis;
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <main+0x144>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a0b      	ldr	r2, [pc, #44]	; (8008000 <main+0x148>)
 8007fd4:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007fd6:	f7ff fd2b 	bl	8007a30 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007fda:	f7fe fd9b 	bl	8006b14 <mainLoop>
 8007fde:	e7fc      	b.n	8007fda <main+0x122>
 8007fe0:	40010c00 	.word	0x40010c00
 8007fe4:	20000410 	.word	0x20000410
 8007fe8:	200003bc 	.word	0x200003bc
 8007fec:	40011000 	.word	0x40011000
 8007ff0:	40010800 	.word	0x40010800
 8007ff4:	0800ddf8 	.word	0x0800ddf8
 8007ff8:	0800de0c 	.word	0x0800de0c
 8007ffc:	20000210 	.word	0x20000210
 8008000:	2000022c 	.word	0x2000022c

08008004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b090      	sub	sp, #64	; 0x40
 8008008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800800a:	f107 0318 	add.w	r3, r7, #24
 800800e:	2228      	movs	r2, #40	; 0x28
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f004 fb52 	bl	800c6bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008018:	1d3b      	adds	r3, r7, #4
 800801a:	2200      	movs	r2, #0
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	605a      	str	r2, [r3, #4]
 8008020:	609a      	str	r2, [r3, #8]
 8008022:	60da      	str	r2, [r3, #12]
 8008024:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008026:	2301      	movs	r3, #1
 8008028:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800802a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800802e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008030:	2300      	movs	r3, #0
 8008032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008034:	2301      	movs	r3, #1
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008038:	2302      	movs	r3, #2
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800803c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008040:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008042:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008048:	f107 0318 	add.w	r3, r7, #24
 800804c:	4618      	mov	r0, r3
 800804e:	f002 fc3f 	bl	800a8d0 <HAL_RCC_OscConfig>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008058:	f000 f9a2 	bl	80083a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800805c:	230f      	movs	r3, #15
 800805e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008060:	2302      	movs	r3, #2
 8008062:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800806c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008072:	1d3b      	adds	r3, r7, #4
 8008074:	2102      	movs	r1, #2
 8008076:	4618      	mov	r0, r3
 8008078:	f002 feac 	bl	800add4 <HAL_RCC_ClockConfig>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008082:	f000 f98d 	bl	80083a0 <Error_Handler>
  }
}
 8008086:	bf00      	nop
 8008088:	3740      	adds	r7, #64	; 0x40
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008094:	4b16      	ldr	r3, [pc, #88]	; (80080f0 <MX_CAN_Init+0x60>)
 8008096:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <MX_CAN_Init+0x64>)
 8008098:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800809a:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <MX_CAN_Init+0x60>)
 800809c:	2210      	movs	r2, #16
 800809e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80080a0:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <MX_CAN_Init+0x60>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80080a6:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <MX_CAN_Init+0x60>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80080ac:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <MX_CAN_Init+0x60>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <MX_CAN_Init+0x60>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80080b8:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <MX_CAN_Init+0x60>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80080be:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <MX_CAN_Init+0x60>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80080c4:	4b0a      	ldr	r3, [pc, #40]	; (80080f0 <MX_CAN_Init+0x60>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80080ca:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <MX_CAN_Init+0x60>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <MX_CAN_Init+0x60>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80080d6:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <MX_CAN_Init+0x60>)
 80080d8:	2200      	movs	r2, #0
 80080da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80080dc:	4804      	ldr	r0, [pc, #16]	; (80080f0 <MX_CAN_Init+0x60>)
 80080de:	f000 fbe1 	bl	80088a4 <HAL_CAN_Init>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80080e8:	f000 f95a 	bl	80083a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80080ec:	bf00      	nop
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000394 	.word	0x20000394
 80080f4:	40006400 	.word	0x40006400

080080f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80080fc:	4b12      	ldr	r3, [pc, #72]	; (8008148 <MX_I2C1_Init+0x50>)
 80080fe:	4a13      	ldr	r2, [pc, #76]	; (800814c <MX_I2C1_Init+0x54>)
 8008100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008102:	4b11      	ldr	r3, [pc, #68]	; (8008148 <MX_I2C1_Init+0x50>)
 8008104:	4a12      	ldr	r2, [pc, #72]	; (8008150 <MX_I2C1_Init+0x58>)
 8008106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <MX_I2C1_Init+0x50>)
 800810a:	2200      	movs	r2, #0
 800810c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800810e:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <MX_I2C1_Init+0x50>)
 8008110:	2200      	movs	r2, #0
 8008112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <MX_I2C1_Init+0x50>)
 8008116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800811a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800811c:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <MX_I2C1_Init+0x50>)
 800811e:	2200      	movs	r2, #0
 8008120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <MX_I2C1_Init+0x50>)
 8008124:	2200      	movs	r2, #0
 8008126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008128:	4b07      	ldr	r3, [pc, #28]	; (8008148 <MX_I2C1_Init+0x50>)
 800812a:	2200      	movs	r2, #0
 800812c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <MX_I2C1_Init+0x50>)
 8008130:	2200      	movs	r2, #0
 8008132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008134:	4804      	ldr	r0, [pc, #16]	; (8008148 <MX_I2C1_Init+0x50>)
 8008136:	f001 f9a9 	bl	800948c <HAL_I2C_Init>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008140:	f000 f92e 	bl	80083a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008144:	bf00      	nop
 8008146:	bd80      	pop	{r7, pc}
 8008148:	200003bc 	.word	0x200003bc
 800814c:	40005400 	.word	0x40005400
 8008150:	00061a80 	.word	0x00061a80

08008154 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800815a:	f107 0308 	add.w	r3, r7, #8
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	609a      	str	r2, [r3, #8]
 8008166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008168:	463b      	mov	r3, r7
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008170:	4b1f      	ldr	r3, [pc, #124]	; (80081f0 <MX_TIM1_Init+0x9c>)
 8008172:	4a20      	ldr	r2, [pc, #128]	; (80081f4 <MX_TIM1_Init+0xa0>)
 8008174:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008176:	4b1e      	ldr	r3, [pc, #120]	; (80081f0 <MX_TIM1_Init+0x9c>)
 8008178:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800817c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800817e:	4b1c      	ldr	r3, [pc, #112]	; (80081f0 <MX_TIM1_Init+0x9c>)
 8008180:	2200      	movs	r2, #0
 8008182:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008184:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <MX_TIM1_Init+0x9c>)
 8008186:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800818a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800818c:	4b18      	ldr	r3, [pc, #96]	; (80081f0 <MX_TIM1_Init+0x9c>)
 800818e:	2200      	movs	r2, #0
 8008190:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008192:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <MX_TIM1_Init+0x9c>)
 8008194:	2200      	movs	r2, #0
 8008196:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <MX_TIM1_Init+0x9c>)
 800819a:	2200      	movs	r2, #0
 800819c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800819e:	4814      	ldr	r0, [pc, #80]	; (80081f0 <MX_TIM1_Init+0x9c>)
 80081a0:	f002 ffa6 	bl	800b0f0 <HAL_TIM_Base_Init>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80081aa:	f000 f8f9 	bl	80083a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80081b4:	f107 0308 	add.w	r3, r7, #8
 80081b8:	4619      	mov	r1, r3
 80081ba:	480d      	ldr	r0, [pc, #52]	; (80081f0 <MX_TIM1_Init+0x9c>)
 80081bc:	f003 f950 	bl	800b460 <HAL_TIM_ConfigClockSource>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80081c6:	f000 f8eb 	bl	80083a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081ca:	2300      	movs	r3, #0
 80081cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081ce:	2300      	movs	r3, #0
 80081d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80081d2:	463b      	mov	r3, r7
 80081d4:	4619      	mov	r1, r3
 80081d6:	4806      	ldr	r0, [pc, #24]	; (80081f0 <MX_TIM1_Init+0x9c>)
 80081d8:	f003 fb3e 	bl	800b858 <HAL_TIMEx_MasterConfigSynchronization>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80081e2:	f000 f8dd 	bl	80083a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80081e6:	bf00      	nop
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000410 	.word	0x20000410
 80081f4:	40012c00 	.word	0x40012c00

080081f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 80081fe:	4a12      	ldr	r2, [pc, #72]	; (8008248 <MX_USART1_UART_Init+0x50>)
 8008200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 8008204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800820a:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 800820c:	2200      	movs	r2, #0
 800820e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008210:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 8008212:	2200      	movs	r2, #0
 8008214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 8008218:	2200      	movs	r2, #0
 800821a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800821c:	4b09      	ldr	r3, [pc, #36]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 800821e:	220c      	movs	r2, #12
 8008220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 8008224:	2200      	movs	r2, #0
 8008226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008228:	4b06      	ldr	r3, [pc, #24]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 800822a:	2200      	movs	r2, #0
 800822c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800822e:	4805      	ldr	r0, [pc, #20]	; (8008244 <MX_USART1_UART_Init+0x4c>)
 8008230:	f003 fb90 	bl	800b954 <HAL_UART_Init>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800823a:	f000 f8b1 	bl	80083a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800823e:	bf00      	nop
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000458 	.word	0x20000458
 8008248:	40013800 	.word	0x40013800

0800824c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008252:	f107 0310 	add.w	r3, r7, #16
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	605a      	str	r2, [r3, #4]
 800825c:	609a      	str	r2, [r3, #8]
 800825e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008260:	4b4b      	ldr	r3, [pc, #300]	; (8008390 <MX_GPIO_Init+0x144>)
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	4a4a      	ldr	r2, [pc, #296]	; (8008390 <MX_GPIO_Init+0x144>)
 8008266:	f043 0310 	orr.w	r3, r3, #16
 800826a:	6193      	str	r3, [r2, #24]
 800826c:	4b48      	ldr	r3, [pc, #288]	; (8008390 <MX_GPIO_Init+0x144>)
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	f003 0310 	and.w	r3, r3, #16
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008278:	4b45      	ldr	r3, [pc, #276]	; (8008390 <MX_GPIO_Init+0x144>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	4a44      	ldr	r2, [pc, #272]	; (8008390 <MX_GPIO_Init+0x144>)
 800827e:	f043 0320 	orr.w	r3, r3, #32
 8008282:	6193      	str	r3, [r2, #24]
 8008284:	4b42      	ldr	r3, [pc, #264]	; (8008390 <MX_GPIO_Init+0x144>)
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	60bb      	str	r3, [r7, #8]
 800828e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008290:	4b3f      	ldr	r3, [pc, #252]	; (8008390 <MX_GPIO_Init+0x144>)
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	4a3e      	ldr	r2, [pc, #248]	; (8008390 <MX_GPIO_Init+0x144>)
 8008296:	f043 0304 	orr.w	r3, r3, #4
 800829a:	6193      	str	r3, [r2, #24]
 800829c:	4b3c      	ldr	r3, [pc, #240]	; (8008390 <MX_GPIO_Init+0x144>)
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	607b      	str	r3, [r7, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082a8:	4b39      	ldr	r3, [pc, #228]	; (8008390 <MX_GPIO_Init+0x144>)
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	4a38      	ldr	r2, [pc, #224]	; (8008390 <MX_GPIO_Init+0x144>)
 80082ae:	f043 0308 	orr.w	r3, r3, #8
 80082b2:	6193      	str	r3, [r2, #24]
 80082b4:	4b36      	ldr	r3, [pc, #216]	; (8008390 <MX_GPIO_Init+0x144>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f003 0308 	and.w	r3, r3, #8
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80082c0:	2200      	movs	r2, #0
 80082c2:	21f0      	movs	r1, #240	; 0xf0
 80082c4:	4833      	ldr	r0, [pc, #204]	; (8008394 <MX_GPIO_Init+0x148>)
 80082c6:	f001 f8b0 	bl	800942a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80082ca:	2200      	movs	r2, #0
 80082cc:	f241 0130 	movw	r1, #4144	; 0x1030
 80082d0:	4831      	ldr	r0, [pc, #196]	; (8008398 <MX_GPIO_Init+0x14c>)
 80082d2:	f001 f8aa 	bl	800942a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082d6:	2200      	movs	r2, #0
 80082d8:	f640 4107 	movw	r1, #3079	; 0xc07
 80082dc:	482f      	ldr	r0, [pc, #188]	; (800839c <MX_GPIO_Init+0x150>)
 80082de:	f001 f8a4 	bl	800942a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80082e2:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80082e6:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ec:	2300      	movs	r3, #0
 80082ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082f0:	f107 0310 	add.w	r3, r7, #16
 80082f4:	4619      	mov	r1, r3
 80082f6:	4828      	ldr	r0, [pc, #160]	; (8008398 <MX_GPIO_Init+0x14c>)
 80082f8:	f000 fe20 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80082fc:	f248 130f 	movw	r3, #33039	; 0x810f
 8008300:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008302:	2300      	movs	r3, #0
 8008304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008306:	2300      	movs	r3, #0
 8008308:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800830a:	f107 0310 	add.w	r3, r7, #16
 800830e:	4619      	mov	r1, r3
 8008310:	4820      	ldr	r0, [pc, #128]	; (8008394 <MX_GPIO_Init+0x148>)
 8008312:	f000 fe13 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008316:	23f0      	movs	r3, #240	; 0xf0
 8008318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800831a:	2301      	movs	r3, #1
 800831c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008322:	2302      	movs	r3, #2
 8008324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008326:	f107 0310 	add.w	r3, r7, #16
 800832a:	4619      	mov	r1, r3
 800832c:	4819      	ldr	r0, [pc, #100]	; (8008394 <MX_GPIO_Init+0x148>)
 800832e:	f000 fe05 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008332:	f241 0330 	movw	r3, #4144	; 0x1030
 8008336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008338:	2301      	movs	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833c:	2300      	movs	r3, #0
 800833e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008340:	2302      	movs	r3, #2
 8008342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008344:	f107 0310 	add.w	r3, r7, #16
 8008348:	4619      	mov	r1, r3
 800834a:	4813      	ldr	r0, [pc, #76]	; (8008398 <MX_GPIO_Init+0x14c>)
 800834c:	f000 fdf6 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008350:	f640 4307 	movw	r3, #3079	; 0xc07
 8008354:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008356:	2301      	movs	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800835a:	2300      	movs	r3, #0
 800835c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800835e:	2302      	movs	r3, #2
 8008360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008362:	f107 0310 	add.w	r3, r7, #16
 8008366:	4619      	mov	r1, r3
 8008368:	480c      	ldr	r0, [pc, #48]	; (800839c <MX_GPIO_Init+0x150>)
 800836a:	f000 fde7 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800836e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008378:	2300      	movs	r3, #0
 800837a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800837c:	f107 0310 	add.w	r3, r7, #16
 8008380:	4619      	mov	r1, r3
 8008382:	4806      	ldr	r0, [pc, #24]	; (800839c <MX_GPIO_Init+0x150>)
 8008384:	f000 fdda 	bl	8008f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008388:	bf00      	nop
 800838a:	3720      	adds	r7, #32
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	40021000 	.word	0x40021000
 8008394:	40010800 	.word	0x40010800
 8008398:	40011000 	.word	0x40011000
 800839c:	40010c00 	.word	0x40010c00

080083a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <HAL_MspInit+0x5c>)
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	4a14      	ldr	r2, [pc, #80]	; (8008408 <HAL_MspInit+0x5c>)
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	6193      	str	r3, [r2, #24]
 80083be:	4b12      	ldr	r3, [pc, #72]	; (8008408 <HAL_MspInit+0x5c>)
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	60bb      	str	r3, [r7, #8]
 80083c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083ca:	4b0f      	ldr	r3, [pc, #60]	; (8008408 <HAL_MspInit+0x5c>)
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	4a0e      	ldr	r2, [pc, #56]	; (8008408 <HAL_MspInit+0x5c>)
 80083d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d4:	61d3      	str	r3, [r2, #28]
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <HAL_MspInit+0x5c>)
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083de:	607b      	str	r3, [r7, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80083e2:	4b0a      	ldr	r3, [pc, #40]	; (800840c <HAL_MspInit+0x60>)
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	4a04      	ldr	r2, [pc, #16]	; (800840c <HAL_MspInit+0x60>)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083fe:	bf00      	nop
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	bc80      	pop	{r7}
 8008406:	4770      	bx	lr
 8008408:	40021000 	.word	0x40021000
 800840c:	40010000 	.word	0x40010000

08008410 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008418:	f107 0310 	add.w	r3, r7, #16
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	609a      	str	r2, [r3, #8]
 8008424:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1c      	ldr	r2, [pc, #112]	; (800849c <HAL_CAN_MspInit+0x8c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d131      	bne.n	8008494 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008430:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <HAL_CAN_MspInit+0x90>)
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	4a1a      	ldr	r2, [pc, #104]	; (80084a0 <HAL_CAN_MspInit+0x90>)
 8008436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800843a:	61d3      	str	r3, [r2, #28]
 800843c:	4b18      	ldr	r3, [pc, #96]	; (80084a0 <HAL_CAN_MspInit+0x90>)
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008448:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <HAL_CAN_MspInit+0x90>)
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	4a14      	ldr	r2, [pc, #80]	; (80084a0 <HAL_CAN_MspInit+0x90>)
 800844e:	f043 0304 	orr.w	r3, r3, #4
 8008452:	6193      	str	r3, [r2, #24]
 8008454:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <HAL_CAN_MspInit+0x90>)
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	f003 0304 	and.w	r3, r3, #4
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800846a:	2300      	movs	r3, #0
 800846c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800846e:	f107 0310 	add.w	r3, r7, #16
 8008472:	4619      	mov	r1, r3
 8008474:	480b      	ldr	r0, [pc, #44]	; (80084a4 <HAL_CAN_MspInit+0x94>)
 8008476:	f000 fd61 	bl	8008f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800847a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800847e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008480:	2302      	movs	r3, #2
 8008482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008484:	2303      	movs	r3, #3
 8008486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	4619      	mov	r1, r3
 800848e:	4805      	ldr	r0, [pc, #20]	; (80084a4 <HAL_CAN_MspInit+0x94>)
 8008490:	f000 fd54 	bl	8008f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008494:	bf00      	nop
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	40006400 	.word	0x40006400
 80084a0:	40021000 	.word	0x40021000
 80084a4:	40010800 	.word	0x40010800

080084a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b0:	f107 0310 	add.w	r3, r7, #16
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	609a      	str	r2, [r3, #8]
 80084bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a15      	ldr	r2, [pc, #84]	; (8008518 <HAL_I2C_MspInit+0x70>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d123      	bne.n	8008510 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084c8:	4b14      	ldr	r3, [pc, #80]	; (800851c <HAL_I2C_MspInit+0x74>)
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	4a13      	ldr	r2, [pc, #76]	; (800851c <HAL_I2C_MspInit+0x74>)
 80084ce:	f043 0308 	orr.w	r3, r3, #8
 80084d2:	6193      	str	r3, [r2, #24]
 80084d4:	4b11      	ldr	r3, [pc, #68]	; (800851c <HAL_I2C_MspInit+0x74>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f003 0308 	and.w	r3, r3, #8
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80084e0:	23c0      	movs	r3, #192	; 0xc0
 80084e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084e4:	2312      	movs	r3, #18
 80084e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084e8:	2303      	movs	r3, #3
 80084ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084ec:	f107 0310 	add.w	r3, r7, #16
 80084f0:	4619      	mov	r1, r3
 80084f2:	480b      	ldr	r0, [pc, #44]	; (8008520 <HAL_I2C_MspInit+0x78>)
 80084f4:	f000 fd22 	bl	8008f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084f8:	4b08      	ldr	r3, [pc, #32]	; (800851c <HAL_I2C_MspInit+0x74>)
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	4a07      	ldr	r2, [pc, #28]	; (800851c <HAL_I2C_MspInit+0x74>)
 80084fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008502:	61d3      	str	r3, [r2, #28]
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <HAL_I2C_MspInit+0x74>)
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800850c:	60bb      	str	r3, [r7, #8]
 800850e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008510:	bf00      	nop
 8008512:	3720      	adds	r7, #32
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	40005400 	.word	0x40005400
 800851c:	40021000 	.word	0x40021000
 8008520:	40010c00 	.word	0x40010c00

08008524 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a0a      	ldr	r2, [pc, #40]	; (800855c <HAL_I2C_MspDeInit+0x38>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d10d      	bne.n	8008552 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <HAL_I2C_MspDeInit+0x3c>)
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	4a09      	ldr	r2, [pc, #36]	; (8008560 <HAL_I2C_MspDeInit+0x3c>)
 800853c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008540:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008542:	2140      	movs	r1, #64	; 0x40
 8008544:	4807      	ldr	r0, [pc, #28]	; (8008564 <HAL_I2C_MspDeInit+0x40>)
 8008546:	f000 fe8d 	bl	8009264 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800854a:	2180      	movs	r1, #128	; 0x80
 800854c:	4805      	ldr	r0, [pc, #20]	; (8008564 <HAL_I2C_MspDeInit+0x40>)
 800854e:	f000 fe89 	bl	8009264 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40005400 	.word	0x40005400
 8008560:	40021000 	.word	0x40021000
 8008564:	40010c00 	.word	0x40010c00

08008568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a0d      	ldr	r2, [pc, #52]	; (80085ac <HAL_TIM_Base_MspInit+0x44>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d113      	bne.n	80085a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800857a:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <HAL_TIM_Base_MspInit+0x48>)
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	4a0c      	ldr	r2, [pc, #48]	; (80085b0 <HAL_TIM_Base_MspInit+0x48>)
 8008580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008584:	6193      	str	r3, [r2, #24]
 8008586:	4b0a      	ldr	r3, [pc, #40]	; (80085b0 <HAL_TIM_Base_MspInit+0x48>)
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008592:	2200      	movs	r2, #0
 8008594:	2100      	movs	r1, #0
 8008596:	2019      	movs	r0, #25
 8008598:	f000 fb57 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800859c:	2019      	movs	r0, #25
 800859e:	f000 fb70 	bl	8008c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40021000 	.word	0x40021000

080085b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085bc:	f107 0310 	add.w	r3, r7, #16
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	609a      	str	r2, [r3, #8]
 80085c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a20      	ldr	r2, [pc, #128]	; (8008650 <HAL_UART_MspInit+0x9c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d139      	bne.n	8008648 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085d4:	4b1f      	ldr	r3, [pc, #124]	; (8008654 <HAL_UART_MspInit+0xa0>)
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	4a1e      	ldr	r2, [pc, #120]	; (8008654 <HAL_UART_MspInit+0xa0>)
 80085da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085de:	6193      	str	r3, [r2, #24]
 80085e0:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <HAL_UART_MspInit+0xa0>)
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ec:	4b19      	ldr	r3, [pc, #100]	; (8008654 <HAL_UART_MspInit+0xa0>)
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	4a18      	ldr	r2, [pc, #96]	; (8008654 <HAL_UART_MspInit+0xa0>)
 80085f2:	f043 0304 	orr.w	r3, r3, #4
 80085f6:	6193      	str	r3, [r2, #24]
 80085f8:	4b16      	ldr	r3, [pc, #88]	; (8008654 <HAL_UART_MspInit+0xa0>)
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800860a:	2302      	movs	r3, #2
 800860c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800860e:	2303      	movs	r3, #3
 8008610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008612:	f107 0310 	add.w	r3, r7, #16
 8008616:	4619      	mov	r1, r3
 8008618:	480f      	ldr	r0, [pc, #60]	; (8008658 <HAL_UART_MspInit+0xa4>)
 800861a:	f000 fc8f 	bl	8008f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800861e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800862c:	f107 0310 	add.w	r3, r7, #16
 8008630:	4619      	mov	r1, r3
 8008632:	4809      	ldr	r0, [pc, #36]	; (8008658 <HAL_UART_MspInit+0xa4>)
 8008634:	f000 fc82 	bl	8008f3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008638:	2200      	movs	r2, #0
 800863a:	2100      	movs	r1, #0
 800863c:	2025      	movs	r0, #37	; 0x25
 800863e:	f000 fb04 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008642:	2025      	movs	r0, #37	; 0x25
 8008644:	f000 fb1d 	bl	8008c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008648:	bf00      	nop
 800864a:	3720      	adds	r7, #32
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	40013800 	.word	0x40013800
 8008654:	40021000 	.word	0x40021000
 8008658:	40010800 	.word	0x40010800

0800865c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008660:	e7fe      	b.n	8008660 <NMI_Handler+0x4>

08008662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008662:	b480      	push	{r7}
 8008664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008666:	e7fe      	b.n	8008666 <HardFault_Handler+0x4>

08008668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800866c:	e7fe      	b.n	800866c <MemManage_Handler+0x4>

0800866e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800866e:	b480      	push	{r7}
 8008670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008672:	e7fe      	b.n	8008672 <BusFault_Handler+0x4>

08008674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008678:	e7fe      	b.n	8008678 <UsageFault_Handler+0x4>

0800867a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800867a:	b480      	push	{r7}
 800867c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800867e:	bf00      	nop
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr

08008686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008686:	b480      	push	{r7}
 8008688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800868a:	bf00      	nop
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr

08008692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008692:	b480      	push	{r7}
 8008694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008696:	bf00      	nop
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr

0800869e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086a2:	f000 f8bf 	bl	8008824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086a6:	bf00      	nop
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80086b0:	4802      	ldr	r0, [pc, #8]	; (80086bc <TIM1_UP_IRQHandler+0x10>)
 80086b2:	f002 fdcd 	bl	800b250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80086b6:	bf00      	nop
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000410 	.word	0x20000410

080086c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80086c4:	4802      	ldr	r0, [pc, #8]	; (80086d0 <USART1_IRQHandler+0x10>)
 80086c6:	f003 f9cb 	bl	800ba60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086ca:	bf00      	nop
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000458 	.word	0x20000458

080086d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086dc:	4a14      	ldr	r2, [pc, #80]	; (8008730 <_sbrk+0x5c>)
 80086de:	4b15      	ldr	r3, [pc, #84]	; (8008734 <_sbrk+0x60>)
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086e8:	4b13      	ldr	r3, [pc, #76]	; (8008738 <_sbrk+0x64>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086f0:	4b11      	ldr	r3, [pc, #68]	; (8008738 <_sbrk+0x64>)
 80086f2:	4a12      	ldr	r2, [pc, #72]	; (800873c <_sbrk+0x68>)
 80086f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086f6:	4b10      	ldr	r3, [pc, #64]	; (8008738 <_sbrk+0x64>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	429a      	cmp	r2, r3
 8008702:	d207      	bcs.n	8008714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008704:	f003 fff2 	bl	800c6ec <__errno>
 8008708:	4603      	mov	r3, r0
 800870a:	220c      	movs	r2, #12
 800870c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800870e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008712:	e009      	b.n	8008728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008714:	4b08      	ldr	r3, [pc, #32]	; (8008738 <_sbrk+0x64>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <_sbrk+0x64>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	4a05      	ldr	r2, [pc, #20]	; (8008738 <_sbrk+0x64>)
 8008724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008726:	68fb      	ldr	r3, [r7, #12]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	2000c000 	.word	0x2000c000
 8008734:	00000400 	.word	0x00000400
 8008738:	200004a0 	.word	0x200004a0
 800873c:	200005f0 	.word	0x200005f0

08008740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008744:	bf00      	nop
 8008746:	46bd      	mov	sp, r7
 8008748:	bc80      	pop	{r7}
 800874a:	4770      	bx	lr

0800874c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800874c:	480c      	ldr	r0, [pc, #48]	; (8008780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800874e:	490d      	ldr	r1, [pc, #52]	; (8008784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008750:	4a0d      	ldr	r2, [pc, #52]	; (8008788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008754:	e002      	b.n	800875c <LoopCopyDataInit>

08008756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800875a:	3304      	adds	r3, #4

0800875c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800875c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800875e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008760:	d3f9      	bcc.n	8008756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008762:	4a0a      	ldr	r2, [pc, #40]	; (800878c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008764:	4c0a      	ldr	r4, [pc, #40]	; (8008790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008768:	e001      	b.n	800876e <LoopFillZerobss>

0800876a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800876a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800876c:	3204      	adds	r2, #4

0800876e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800876e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008770:	d3fb      	bcc.n	800876a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008772:	f7ff ffe5 	bl	8008740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008776:	f003 ffbf 	bl	800c6f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800877a:	f7ff fb9d 	bl	8007eb8 <main>
  bx lr
 800877e:	4770      	bx	lr
  ldr r0, =_sdata
 8008780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008784:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8008788:	0800deac 	.word	0x0800deac
  ldr r2, =_sbss
 800878c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8008790:	200005f0 	.word	0x200005f0

08008794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008794:	e7fe      	b.n	8008794 <ADC1_2_IRQHandler>
	...

08008798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800879c:	4b08      	ldr	r3, [pc, #32]	; (80087c0 <HAL_Init+0x28>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a07      	ldr	r2, [pc, #28]	; (80087c0 <HAL_Init+0x28>)
 80087a2:	f043 0310 	orr.w	r3, r3, #16
 80087a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087a8:	2003      	movs	r0, #3
 80087aa:	f000 fa43 	bl	8008c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087ae:	200f      	movs	r0, #15
 80087b0:	f000 f808 	bl	80087c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087b4:	f7ff fdfa 	bl	80083ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	40022000 	.word	0x40022000

080087c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087cc:	4b12      	ldr	r3, [pc, #72]	; (8008818 <HAL_InitTick+0x54>)
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	4b12      	ldr	r3, [pc, #72]	; (800881c <HAL_InitTick+0x58>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	4619      	mov	r1, r3
 80087d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087da:	fbb3 f3f1 	udiv	r3, r3, r1
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fa5b 	bl	8008c9e <HAL_SYSTICK_Config>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e00e      	b.n	8008810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b0f      	cmp	r3, #15
 80087f6:	d80a      	bhi.n	800880e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087f8:	2200      	movs	r2, #0
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008800:	f000 fa23 	bl	8008c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008804:	4a06      	ldr	r2, [pc, #24]	; (8008820 <HAL_InitTick+0x5c>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	e000      	b.n	8008810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200000a0 	.word	0x200000a0
 800881c:	200000a8 	.word	0x200000a8
 8008820:	200000a4 	.word	0x200000a4

08008824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <HAL_IncTick+0x1c>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <HAL_IncTick+0x20>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4413      	add	r3, r2
 8008834:	4a03      	ldr	r2, [pc, #12]	; (8008844 <HAL_IncTick+0x20>)
 8008836:	6013      	str	r3, [r2, #0]
}
 8008838:	bf00      	nop
 800883a:	46bd      	mov	sp, r7
 800883c:	bc80      	pop	{r7}
 800883e:	4770      	bx	lr
 8008840:	200000a8 	.word	0x200000a8
 8008844:	200004a4 	.word	0x200004a4

08008848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  return uwTick;
 800884c:	4b02      	ldr	r3, [pc, #8]	; (8008858 <HAL_GetTick+0x10>)
 800884e:	681b      	ldr	r3, [r3, #0]
}
 8008850:	4618      	mov	r0, r3
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr
 8008858:	200004a4 	.word	0x200004a4

0800885c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008864:	f7ff fff0 	bl	8008848 <HAL_GetTick>
 8008868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008874:	d005      	beq.n	8008882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008876:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <HAL_Delay+0x44>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008882:	bf00      	nop
 8008884:	f7ff ffe0 	bl	8008848 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	429a      	cmp	r2, r3
 8008892:	d8f7      	bhi.n	8008884 <HAL_Delay+0x28>
  {
  }
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	200000a8 	.word	0x200000a8

080088a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e0ed      	b.n	8008a92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff fda4 	bl	8008410 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088d8:	f7ff ffb6 	bl	8008848 <HAL_GetTick>
 80088dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088de:	e012      	b.n	8008906 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088e0:	f7ff ffb2 	bl	8008848 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b0a      	cmp	r3, #10
 80088ec:	d90b      	bls.n	8008906 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2205      	movs	r2, #5
 80088fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e0c5      	b.n	8008a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d0e5      	beq.n	80088e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0202 	bic.w	r2, r2, #2
 8008922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008924:	f7ff ff90 	bl	8008848 <HAL_GetTick>
 8008928:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800892a:	e012      	b.n	8008952 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800892c:	f7ff ff8c 	bl	8008848 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b0a      	cmp	r3, #10
 8008938:	d90b      	bls.n	8008952 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2205      	movs	r2, #5
 800894a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e09f      	b.n	8008a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e5      	bne.n	800892c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	7e1b      	ldrb	r3, [r3, #24]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d108      	bne.n	800897a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	e007      	b.n	800898a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	7e5b      	ldrb	r3, [r3, #25]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d108      	bne.n	80089a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	e007      	b.n	80089b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7e9b      	ldrb	r3, [r3, #26]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d108      	bne.n	80089ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0220 	orr.w	r2, r2, #32
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	e007      	b.n	80089de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0220 	bic.w	r2, r2, #32
 80089dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7edb      	ldrb	r3, [r3, #27]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d108      	bne.n	80089f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0210 	bic.w	r2, r2, #16
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	e007      	b.n	8008a08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0210 	orr.w	r2, r2, #16
 8008a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	7f1b      	ldrb	r3, [r3, #28]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d108      	bne.n	8008a22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0208 	orr.w	r2, r2, #8
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	e007      	b.n	8008a32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0208 	bic.w	r2, r2, #8
 8008a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7f5b      	ldrb	r3, [r3, #29]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d108      	bne.n	8008a4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0204 	orr.w	r2, r2, #4
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e007      	b.n	8008a5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0204 	bic.w	r2, r2, #4
 8008a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	ea42 0103 	orr.w	r1, r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	1e5a      	subs	r2, r3, #1
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <__NVIC_SetPriorityGrouping>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008aac:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ab8:	4013      	ands	r3, r2
 8008aba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ace:	4a04      	ldr	r2, [pc, #16]	; (8008ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	60d3      	str	r3, [r2, #12]
}
 8008ad4:	bf00      	nop
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bc80      	pop	{r7}
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	e000ed00 	.word	0xe000ed00

08008ae4 <__NVIC_GetPriorityGrouping>:
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ae8:	4b04      	ldr	r3, [pc, #16]	; (8008afc <__NVIC_GetPriorityGrouping+0x18>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	0a1b      	lsrs	r3, r3, #8
 8008aee:	f003 0307 	and.w	r3, r3, #7
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	e000ed00 	.word	0xe000ed00

08008b00 <__NVIC_EnableIRQ>:
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	db0b      	blt.n	8008b2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	f003 021f 	and.w	r2, r3, #31
 8008b18:	4906      	ldr	r1, [pc, #24]	; (8008b34 <__NVIC_EnableIRQ+0x34>)
 8008b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	2001      	movs	r0, #1
 8008b22:	fa00 f202 	lsl.w	r2, r0, r2
 8008b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr
 8008b34:	e000e100 	.word	0xe000e100

08008b38 <__NVIC_SetPriority>:
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	db0a      	blt.n	8008b62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	490c      	ldr	r1, [pc, #48]	; (8008b84 <__NVIC_SetPriority+0x4c>)
 8008b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b56:	0112      	lsls	r2, r2, #4
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b60:	e00a      	b.n	8008b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	4908      	ldr	r1, [pc, #32]	; (8008b88 <__NVIC_SetPriority+0x50>)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	f003 030f 	and.w	r3, r3, #15
 8008b6e:	3b04      	subs	r3, #4
 8008b70:	0112      	lsls	r2, r2, #4
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	440b      	add	r3, r1
 8008b76:	761a      	strb	r2, [r3, #24]
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	e000e100 	.word	0xe000e100
 8008b88:	e000ed00 	.word	0xe000ed00

08008b8c <NVIC_EncodePriority>:
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b089      	sub	sp, #36	; 0x24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f1c3 0307 	rsb	r3, r3, #7
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	bf28      	it	cs
 8008baa:	2304      	movcs	r3, #4
 8008bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	2b06      	cmp	r3, #6
 8008bb4:	d902      	bls.n	8008bbc <NVIC_EncodePriority+0x30>
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	3b03      	subs	r3, #3
 8008bba:	e000      	b.n	8008bbe <NVIC_EncodePriority+0x32>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	43da      	mvns	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	401a      	ands	r2, r3
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	fa01 f303 	lsl.w	r3, r1, r3
 8008bde:	43d9      	mvns	r1, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008be4:	4313      	orrs	r3, r2
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3724      	adds	r7, #36	; 0x24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr

08008bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c00:	d301      	bcc.n	8008c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c02:	2301      	movs	r3, #1
 8008c04:	e00f      	b.n	8008c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c06:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <SysTick_Config+0x40>)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c0e:	210f      	movs	r1, #15
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c14:	f7ff ff90 	bl	8008b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <SysTick_Config+0x40>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c1e:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <SysTick_Config+0x40>)
 8008c20:	2207      	movs	r2, #7
 8008c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	e000e010 	.word	0xe000e010

08008c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff ff2d 	bl	8008a9c <__NVIC_SetPriorityGrouping>
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b086      	sub	sp, #24
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	4603      	mov	r3, r0
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
 8008c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c5c:	f7ff ff42 	bl	8008ae4 <__NVIC_GetPriorityGrouping>
 8008c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	68b9      	ldr	r1, [r7, #8]
 8008c66:	6978      	ldr	r0, [r7, #20]
 8008c68:	f7ff ff90 	bl	8008b8c <NVIC_EncodePriority>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff ff5f 	bl	8008b38 <__NVIC_SetPriority>
}
 8008c7a:	bf00      	nop
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	4603      	mov	r3, r0
 8008c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff ff35 	bl	8008b00 <__NVIC_EnableIRQ>
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff ffa2 	bl	8008bf0 <SysTick_Config>
 8008cac:	4603      	mov	r3, r0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d008      	beq.n	8008ce0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2204      	movs	r2, #4
 8008cd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e020      	b.n	8008d22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 020e 	bic.w	r2, r2, #14
 8008cee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0201 	bic.w	r2, r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d08:	2101      	movs	r1, #1
 8008d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8008d0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr

08008d2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d005      	beq.n	8008d50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2204      	movs	r2, #4
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	73fb      	strb	r3, [r7, #15]
 8008d4e:	e0d6      	b.n	8008efe <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 020e 	bic.w	r2, r2, #14
 8008d5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0201 	bic.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	4b64      	ldr	r3, [pc, #400]	; (8008f08 <HAL_DMA_Abort_IT+0x1dc>)
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d958      	bls.n	8008e2e <HAL_DMA_Abort_IT+0x102>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a62      	ldr	r2, [pc, #392]	; (8008f0c <HAL_DMA_Abort_IT+0x1e0>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d04f      	beq.n	8008e26 <HAL_DMA_Abort_IT+0xfa>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a61      	ldr	r2, [pc, #388]	; (8008f10 <HAL_DMA_Abort_IT+0x1e4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d048      	beq.n	8008e22 <HAL_DMA_Abort_IT+0xf6>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a5f      	ldr	r2, [pc, #380]	; (8008f14 <HAL_DMA_Abort_IT+0x1e8>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d040      	beq.n	8008e1c <HAL_DMA_Abort_IT+0xf0>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a5e      	ldr	r2, [pc, #376]	; (8008f18 <HAL_DMA_Abort_IT+0x1ec>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d038      	beq.n	8008e16 <HAL_DMA_Abort_IT+0xea>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a5c      	ldr	r2, [pc, #368]	; (8008f1c <HAL_DMA_Abort_IT+0x1f0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d030      	beq.n	8008e10 <HAL_DMA_Abort_IT+0xe4>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a5b      	ldr	r2, [pc, #364]	; (8008f20 <HAL_DMA_Abort_IT+0x1f4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d028      	beq.n	8008e0a <HAL_DMA_Abort_IT+0xde>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a52      	ldr	r2, [pc, #328]	; (8008f08 <HAL_DMA_Abort_IT+0x1dc>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d020      	beq.n	8008e04 <HAL_DMA_Abort_IT+0xd8>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a57      	ldr	r2, [pc, #348]	; (8008f24 <HAL_DMA_Abort_IT+0x1f8>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d019      	beq.n	8008e00 <HAL_DMA_Abort_IT+0xd4>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a55      	ldr	r2, [pc, #340]	; (8008f28 <HAL_DMA_Abort_IT+0x1fc>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d012      	beq.n	8008dfc <HAL_DMA_Abort_IT+0xd0>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a54      	ldr	r2, [pc, #336]	; (8008f2c <HAL_DMA_Abort_IT+0x200>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00a      	beq.n	8008df6 <HAL_DMA_Abort_IT+0xca>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a52      	ldr	r2, [pc, #328]	; (8008f30 <HAL_DMA_Abort_IT+0x204>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d102      	bne.n	8008df0 <HAL_DMA_Abort_IT+0xc4>
 8008dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dee:	e01b      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008df4:	e018      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dfa:	e015      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	e013      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e011      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e08:	e00e      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008e0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e0e:	e00b      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e14:	e008      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e1a:	e005      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e20:	e002      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008e22:	2310      	movs	r3, #16
 8008e24:	e000      	b.n	8008e28 <HAL_DMA_Abort_IT+0xfc>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4a42      	ldr	r2, [pc, #264]	; (8008f34 <HAL_DMA_Abort_IT+0x208>)
 8008e2a:	6053      	str	r3, [r2, #4]
 8008e2c:	e057      	b.n	8008ede <HAL_DMA_Abort_IT+0x1b2>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a36      	ldr	r2, [pc, #216]	; (8008f0c <HAL_DMA_Abort_IT+0x1e0>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d04f      	beq.n	8008ed8 <HAL_DMA_Abort_IT+0x1ac>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a34      	ldr	r2, [pc, #208]	; (8008f10 <HAL_DMA_Abort_IT+0x1e4>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d048      	beq.n	8008ed4 <HAL_DMA_Abort_IT+0x1a8>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a33      	ldr	r2, [pc, #204]	; (8008f14 <HAL_DMA_Abort_IT+0x1e8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d040      	beq.n	8008ece <HAL_DMA_Abort_IT+0x1a2>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a31      	ldr	r2, [pc, #196]	; (8008f18 <HAL_DMA_Abort_IT+0x1ec>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d038      	beq.n	8008ec8 <HAL_DMA_Abort_IT+0x19c>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a30      	ldr	r2, [pc, #192]	; (8008f1c <HAL_DMA_Abort_IT+0x1f0>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d030      	beq.n	8008ec2 <HAL_DMA_Abort_IT+0x196>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a2e      	ldr	r2, [pc, #184]	; (8008f20 <HAL_DMA_Abort_IT+0x1f4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d028      	beq.n	8008ebc <HAL_DMA_Abort_IT+0x190>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a26      	ldr	r2, [pc, #152]	; (8008f08 <HAL_DMA_Abort_IT+0x1dc>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d020      	beq.n	8008eb6 <HAL_DMA_Abort_IT+0x18a>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a2a      	ldr	r2, [pc, #168]	; (8008f24 <HAL_DMA_Abort_IT+0x1f8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d019      	beq.n	8008eb2 <HAL_DMA_Abort_IT+0x186>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a29      	ldr	r2, [pc, #164]	; (8008f28 <HAL_DMA_Abort_IT+0x1fc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d012      	beq.n	8008eae <HAL_DMA_Abort_IT+0x182>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a27      	ldr	r2, [pc, #156]	; (8008f2c <HAL_DMA_Abort_IT+0x200>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00a      	beq.n	8008ea8 <HAL_DMA_Abort_IT+0x17c>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a26      	ldr	r2, [pc, #152]	; (8008f30 <HAL_DMA_Abort_IT+0x204>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d102      	bne.n	8008ea2 <HAL_DMA_Abort_IT+0x176>
 8008e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ea0:	e01b      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ea6:	e018      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eac:	e015      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008eae:	2310      	movs	r3, #16
 8008eb0:	e013      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e011      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eba:	e00e      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ec0:	e00b      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ec6:	e008      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ecc:	e005      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed2:	e002      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008ed4:	2310      	movs	r3, #16
 8008ed6:	e000      	b.n	8008eda <HAL_DMA_Abort_IT+0x1ae>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4a17      	ldr	r2, [pc, #92]	; (8008f38 <HAL_DMA_Abort_IT+0x20c>)
 8008edc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
    } 
  }
  return status;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40020080 	.word	0x40020080
 8008f0c:	40020008 	.word	0x40020008
 8008f10:	4002001c 	.word	0x4002001c
 8008f14:	40020030 	.word	0x40020030
 8008f18:	40020044 	.word	0x40020044
 8008f1c:	40020058 	.word	0x40020058
 8008f20:	4002006c 	.word	0x4002006c
 8008f24:	40020408 	.word	0x40020408
 8008f28:	4002041c 	.word	0x4002041c
 8008f2c:	40020430 	.word	0x40020430
 8008f30:	40020444 	.word	0x40020444
 8008f34:	40020400 	.word	0x40020400
 8008f38:	40020000 	.word	0x40020000

08008f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b08b      	sub	sp, #44	; 0x2c
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f46:	2300      	movs	r3, #0
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f4e:	e179      	b.n	8009244 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008f50:	2201      	movs	r2, #1
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	fa02 f303 	lsl.w	r3, r2, r3
 8008f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	4013      	ands	r3, r2
 8008f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	f040 8168 	bne.w	800923e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	4a96      	ldr	r2, [pc, #600]	; (80091cc <HAL_GPIO_Init+0x290>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d05e      	beq.n	8009036 <HAL_GPIO_Init+0xfa>
 8008f78:	4a94      	ldr	r2, [pc, #592]	; (80091cc <HAL_GPIO_Init+0x290>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d875      	bhi.n	800906a <HAL_GPIO_Init+0x12e>
 8008f7e:	4a94      	ldr	r2, [pc, #592]	; (80091d0 <HAL_GPIO_Init+0x294>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d058      	beq.n	8009036 <HAL_GPIO_Init+0xfa>
 8008f84:	4a92      	ldr	r2, [pc, #584]	; (80091d0 <HAL_GPIO_Init+0x294>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d86f      	bhi.n	800906a <HAL_GPIO_Init+0x12e>
 8008f8a:	4a92      	ldr	r2, [pc, #584]	; (80091d4 <HAL_GPIO_Init+0x298>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d052      	beq.n	8009036 <HAL_GPIO_Init+0xfa>
 8008f90:	4a90      	ldr	r2, [pc, #576]	; (80091d4 <HAL_GPIO_Init+0x298>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d869      	bhi.n	800906a <HAL_GPIO_Init+0x12e>
 8008f96:	4a90      	ldr	r2, [pc, #576]	; (80091d8 <HAL_GPIO_Init+0x29c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d04c      	beq.n	8009036 <HAL_GPIO_Init+0xfa>
 8008f9c:	4a8e      	ldr	r2, [pc, #568]	; (80091d8 <HAL_GPIO_Init+0x29c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d863      	bhi.n	800906a <HAL_GPIO_Init+0x12e>
 8008fa2:	4a8e      	ldr	r2, [pc, #568]	; (80091dc <HAL_GPIO_Init+0x2a0>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d046      	beq.n	8009036 <HAL_GPIO_Init+0xfa>
 8008fa8:	4a8c      	ldr	r2, [pc, #560]	; (80091dc <HAL_GPIO_Init+0x2a0>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d85d      	bhi.n	800906a <HAL_GPIO_Init+0x12e>
 8008fae:	2b12      	cmp	r3, #18
 8008fb0:	d82a      	bhi.n	8009008 <HAL_GPIO_Init+0xcc>
 8008fb2:	2b12      	cmp	r3, #18
 8008fb4:	d859      	bhi.n	800906a <HAL_GPIO_Init+0x12e>
 8008fb6:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <HAL_GPIO_Init+0x80>)
 8008fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbc:	08009037 	.word	0x08009037
 8008fc0:	08009011 	.word	0x08009011
 8008fc4:	08009023 	.word	0x08009023
 8008fc8:	08009065 	.word	0x08009065
 8008fcc:	0800906b 	.word	0x0800906b
 8008fd0:	0800906b 	.word	0x0800906b
 8008fd4:	0800906b 	.word	0x0800906b
 8008fd8:	0800906b 	.word	0x0800906b
 8008fdc:	0800906b 	.word	0x0800906b
 8008fe0:	0800906b 	.word	0x0800906b
 8008fe4:	0800906b 	.word	0x0800906b
 8008fe8:	0800906b 	.word	0x0800906b
 8008fec:	0800906b 	.word	0x0800906b
 8008ff0:	0800906b 	.word	0x0800906b
 8008ff4:	0800906b 	.word	0x0800906b
 8008ff8:	0800906b 	.word	0x0800906b
 8008ffc:	0800906b 	.word	0x0800906b
 8009000:	08009019 	.word	0x08009019
 8009004:	0800902d 	.word	0x0800902d
 8009008:	4a75      	ldr	r2, [pc, #468]	; (80091e0 <HAL_GPIO_Init+0x2a4>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d013      	beq.n	8009036 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800900e:	e02c      	b.n	800906a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	623b      	str	r3, [r7, #32]
          break;
 8009016:	e029      	b.n	800906c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	3304      	adds	r3, #4
 800901e:	623b      	str	r3, [r7, #32]
          break;
 8009020:	e024      	b.n	800906c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	3308      	adds	r3, #8
 8009028:	623b      	str	r3, [r7, #32]
          break;
 800902a:	e01f      	b.n	800906c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	330c      	adds	r3, #12
 8009032:	623b      	str	r3, [r7, #32]
          break;
 8009034:	e01a      	b.n	800906c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800903e:	2304      	movs	r3, #4
 8009040:	623b      	str	r3, [r7, #32]
          break;
 8009042:	e013      	b.n	800906c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d105      	bne.n	8009058 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800904c:	2308      	movs	r3, #8
 800904e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	611a      	str	r2, [r3, #16]
          break;
 8009056:	e009      	b.n	800906c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009058:	2308      	movs	r3, #8
 800905a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	615a      	str	r2, [r3, #20]
          break;
 8009062:	e003      	b.n	800906c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009064:	2300      	movs	r3, #0
 8009066:	623b      	str	r3, [r7, #32]
          break;
 8009068:	e000      	b.n	800906c <HAL_GPIO_Init+0x130>
          break;
 800906a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	2bff      	cmp	r3, #255	; 0xff
 8009070:	d801      	bhi.n	8009076 <HAL_GPIO_Init+0x13a>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	e001      	b.n	800907a <HAL_GPIO_Init+0x13e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3304      	adds	r3, #4
 800907a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	2bff      	cmp	r3, #255	; 0xff
 8009080:	d802      	bhi.n	8009088 <HAL_GPIO_Init+0x14c>
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	e002      	b.n	800908e <HAL_GPIO_Init+0x152>
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	3b08      	subs	r3, #8
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	210f      	movs	r1, #15
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	fa01 f303 	lsl.w	r3, r1, r3
 800909c:	43db      	mvns	r3, r3
 800909e:	401a      	ands	r2, r3
 80090a0:	6a39      	ldr	r1, [r7, #32]
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	fa01 f303 	lsl.w	r3, r1, r3
 80090a8:	431a      	orrs	r2, r3
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 80c1 	beq.w	800923e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80090bc:	4b49      	ldr	r3, [pc, #292]	; (80091e4 <HAL_GPIO_Init+0x2a8>)
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	4a48      	ldr	r2, [pc, #288]	; (80091e4 <HAL_GPIO_Init+0x2a8>)
 80090c2:	f043 0301 	orr.w	r3, r3, #1
 80090c6:	6193      	str	r3, [r2, #24]
 80090c8:	4b46      	ldr	r3, [pc, #280]	; (80091e4 <HAL_GPIO_Init+0x2a8>)
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	60bb      	str	r3, [r7, #8]
 80090d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80090d4:	4a44      	ldr	r2, [pc, #272]	; (80091e8 <HAL_GPIO_Init+0x2ac>)
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	089b      	lsrs	r3, r3, #2
 80090da:	3302      	adds	r3, #2
 80090dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	f003 0303 	and.w	r3, r3, #3
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	220f      	movs	r2, #15
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	43db      	mvns	r3, r3
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4013      	ands	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a3c      	ldr	r2, [pc, #240]	; (80091ec <HAL_GPIO_Init+0x2b0>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d01f      	beq.n	8009140 <HAL_GPIO_Init+0x204>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a3b      	ldr	r2, [pc, #236]	; (80091f0 <HAL_GPIO_Init+0x2b4>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d019      	beq.n	800913c <HAL_GPIO_Init+0x200>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a3a      	ldr	r2, [pc, #232]	; (80091f4 <HAL_GPIO_Init+0x2b8>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d013      	beq.n	8009138 <HAL_GPIO_Init+0x1fc>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a39      	ldr	r2, [pc, #228]	; (80091f8 <HAL_GPIO_Init+0x2bc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00d      	beq.n	8009134 <HAL_GPIO_Init+0x1f8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a38      	ldr	r2, [pc, #224]	; (80091fc <HAL_GPIO_Init+0x2c0>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d007      	beq.n	8009130 <HAL_GPIO_Init+0x1f4>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a37      	ldr	r2, [pc, #220]	; (8009200 <HAL_GPIO_Init+0x2c4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d101      	bne.n	800912c <HAL_GPIO_Init+0x1f0>
 8009128:	2305      	movs	r3, #5
 800912a:	e00a      	b.n	8009142 <HAL_GPIO_Init+0x206>
 800912c:	2306      	movs	r3, #6
 800912e:	e008      	b.n	8009142 <HAL_GPIO_Init+0x206>
 8009130:	2304      	movs	r3, #4
 8009132:	e006      	b.n	8009142 <HAL_GPIO_Init+0x206>
 8009134:	2303      	movs	r3, #3
 8009136:	e004      	b.n	8009142 <HAL_GPIO_Init+0x206>
 8009138:	2302      	movs	r3, #2
 800913a:	e002      	b.n	8009142 <HAL_GPIO_Init+0x206>
 800913c:	2301      	movs	r3, #1
 800913e:	e000      	b.n	8009142 <HAL_GPIO_Init+0x206>
 8009140:	2300      	movs	r3, #0
 8009142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009144:	f002 0203 	and.w	r2, r2, #3
 8009148:	0092      	lsls	r2, r2, #2
 800914a:	4093      	lsls	r3, r2
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009152:	4925      	ldr	r1, [pc, #148]	; (80091e8 <HAL_GPIO_Init+0x2ac>)
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	089b      	lsrs	r3, r3, #2
 8009158:	3302      	adds	r3, #2
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d006      	beq.n	800917a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800916c:	4b25      	ldr	r3, [pc, #148]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	4924      	ldr	r1, [pc, #144]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	4313      	orrs	r3, r2
 8009176:	608b      	str	r3, [r1, #8]
 8009178:	e006      	b.n	8009188 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800917a:	4b22      	ldr	r3, [pc, #136]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	43db      	mvns	r3, r3
 8009182:	4920      	ldr	r1, [pc, #128]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 8009184:	4013      	ands	r3, r2
 8009186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d006      	beq.n	80091a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009194:	4b1b      	ldr	r3, [pc, #108]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 8009196:	68da      	ldr	r2, [r3, #12]
 8009198:	491a      	ldr	r1, [pc, #104]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	4313      	orrs	r3, r2
 800919e:	60cb      	str	r3, [r1, #12]
 80091a0:	e006      	b.n	80091b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80091a2:	4b18      	ldr	r3, [pc, #96]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	43db      	mvns	r3, r3
 80091aa:	4916      	ldr	r1, [pc, #88]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 80091ac:	4013      	ands	r3, r2
 80091ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d025      	beq.n	8009208 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80091bc:	4b11      	ldr	r3, [pc, #68]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	4910      	ldr	r1, [pc, #64]	; (8009204 <HAL_GPIO_Init+0x2c8>)
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	604b      	str	r3, [r1, #4]
 80091c8:	e025      	b.n	8009216 <HAL_GPIO_Init+0x2da>
 80091ca:	bf00      	nop
 80091cc:	10320000 	.word	0x10320000
 80091d0:	10310000 	.word	0x10310000
 80091d4:	10220000 	.word	0x10220000
 80091d8:	10210000 	.word	0x10210000
 80091dc:	10120000 	.word	0x10120000
 80091e0:	10110000 	.word	0x10110000
 80091e4:	40021000 	.word	0x40021000
 80091e8:	40010000 	.word	0x40010000
 80091ec:	40010800 	.word	0x40010800
 80091f0:	40010c00 	.word	0x40010c00
 80091f4:	40011000 	.word	0x40011000
 80091f8:	40011400 	.word	0x40011400
 80091fc:	40011800 	.word	0x40011800
 8009200:	40011c00 	.word	0x40011c00
 8009204:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009208:	4b15      	ldr	r3, [pc, #84]	; (8009260 <HAL_GPIO_Init+0x324>)
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	43db      	mvns	r3, r3
 8009210:	4913      	ldr	r1, [pc, #76]	; (8009260 <HAL_GPIO_Init+0x324>)
 8009212:	4013      	ands	r3, r2
 8009214:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d006      	beq.n	8009230 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009222:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <HAL_GPIO_Init+0x324>)
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	490e      	ldr	r1, [pc, #56]	; (8009260 <HAL_GPIO_Init+0x324>)
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	4313      	orrs	r3, r2
 800922c:	600b      	str	r3, [r1, #0]
 800922e:	e006      	b.n	800923e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009230:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <HAL_GPIO_Init+0x324>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	43db      	mvns	r3, r3
 8009238:	4909      	ldr	r1, [pc, #36]	; (8009260 <HAL_GPIO_Init+0x324>)
 800923a:	4013      	ands	r3, r2
 800923c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	3301      	adds	r3, #1
 8009242:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	fa22 f303 	lsr.w	r3, r2, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	f47f ae7e 	bne.w	8008f50 <HAL_GPIO_Init+0x14>
  }
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	372c      	adds	r7, #44	; 0x2c
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr
 8009260:	40010400 	.word	0x40010400

08009264 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009264:	b480      	push	{r7}
 8009266:	b089      	sub	sp, #36	; 0x24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800926e:	2300      	movs	r3, #0
 8009270:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009272:	e0a6      	b.n	80093c2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009274:	2201      	movs	r2, #1
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	fa02 f303 	lsl.w	r3, r2, r3
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	4013      	ands	r3, r2
 8009280:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8099 	beq.w	80093bc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800928a:	4a54      	ldr	r2, [pc, #336]	; (80093dc <HAL_GPIO_DeInit+0x178>)
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	089b      	lsrs	r3, r3, #2
 8009290:	3302      	adds	r3, #2
 8009292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009296:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	220f      	movs	r2, #15
 80092a2:	fa02 f303 	lsl.w	r3, r2, r3
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4013      	ands	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a4c      	ldr	r2, [pc, #304]	; (80093e0 <HAL_GPIO_DeInit+0x17c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d01f      	beq.n	80092f4 <HAL_GPIO_DeInit+0x90>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a4b      	ldr	r2, [pc, #300]	; (80093e4 <HAL_GPIO_DeInit+0x180>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d019      	beq.n	80092f0 <HAL_GPIO_DeInit+0x8c>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a4a      	ldr	r2, [pc, #296]	; (80093e8 <HAL_GPIO_DeInit+0x184>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d013      	beq.n	80092ec <HAL_GPIO_DeInit+0x88>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a49      	ldr	r2, [pc, #292]	; (80093ec <HAL_GPIO_DeInit+0x188>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00d      	beq.n	80092e8 <HAL_GPIO_DeInit+0x84>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a48      	ldr	r2, [pc, #288]	; (80093f0 <HAL_GPIO_DeInit+0x18c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <HAL_GPIO_DeInit+0x80>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a47      	ldr	r2, [pc, #284]	; (80093f4 <HAL_GPIO_DeInit+0x190>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d101      	bne.n	80092e0 <HAL_GPIO_DeInit+0x7c>
 80092dc:	2305      	movs	r3, #5
 80092de:	e00a      	b.n	80092f6 <HAL_GPIO_DeInit+0x92>
 80092e0:	2306      	movs	r3, #6
 80092e2:	e008      	b.n	80092f6 <HAL_GPIO_DeInit+0x92>
 80092e4:	2304      	movs	r3, #4
 80092e6:	e006      	b.n	80092f6 <HAL_GPIO_DeInit+0x92>
 80092e8:	2303      	movs	r3, #3
 80092ea:	e004      	b.n	80092f6 <HAL_GPIO_DeInit+0x92>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e002      	b.n	80092f6 <HAL_GPIO_DeInit+0x92>
 80092f0:	2301      	movs	r3, #1
 80092f2:	e000      	b.n	80092f6 <HAL_GPIO_DeInit+0x92>
 80092f4:	2300      	movs	r3, #0
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	f002 0203 	and.w	r2, r2, #3
 80092fc:	0092      	lsls	r2, r2, #2
 80092fe:	4093      	lsls	r3, r2
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	429a      	cmp	r2, r3
 8009304:	d132      	bne.n	800936c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009306:	4b3c      	ldr	r3, [pc, #240]	; (80093f8 <HAL_GPIO_DeInit+0x194>)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	43db      	mvns	r3, r3
 800930e:	493a      	ldr	r1, [pc, #232]	; (80093f8 <HAL_GPIO_DeInit+0x194>)
 8009310:	4013      	ands	r3, r2
 8009312:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009314:	4b38      	ldr	r3, [pc, #224]	; (80093f8 <HAL_GPIO_DeInit+0x194>)
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	43db      	mvns	r3, r3
 800931c:	4936      	ldr	r1, [pc, #216]	; (80093f8 <HAL_GPIO_DeInit+0x194>)
 800931e:	4013      	ands	r3, r2
 8009320:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009322:	4b35      	ldr	r3, [pc, #212]	; (80093f8 <HAL_GPIO_DeInit+0x194>)
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	43db      	mvns	r3, r3
 800932a:	4933      	ldr	r1, [pc, #204]	; (80093f8 <HAL_GPIO_DeInit+0x194>)
 800932c:	4013      	ands	r3, r2
 800932e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009330:	4b31      	ldr	r3, [pc, #196]	; (80093f8 <HAL_GPIO_DeInit+0x194>)
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	43db      	mvns	r3, r3
 8009338:	492f      	ldr	r1, [pc, #188]	; (80093f8 <HAL_GPIO_DeInit+0x194>)
 800933a:	4013      	ands	r3, r2
 800933c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	f003 0303 	and.w	r3, r3, #3
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	220f      	movs	r2, #15
 8009348:	fa02 f303 	lsl.w	r3, r2, r3
 800934c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800934e:	4a23      	ldr	r2, [pc, #140]	; (80093dc <HAL_GPIO_DeInit+0x178>)
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	089b      	lsrs	r3, r3, #2
 8009354:	3302      	adds	r3, #2
 8009356:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	43da      	mvns	r2, r3
 800935e:	481f      	ldr	r0, [pc, #124]	; (80093dc <HAL_GPIO_DeInit+0x178>)
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	089b      	lsrs	r3, r3, #2
 8009364:	400a      	ands	r2, r1
 8009366:	3302      	adds	r3, #2
 8009368:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	2bff      	cmp	r3, #255	; 0xff
 8009370:	d801      	bhi.n	8009376 <HAL_GPIO_DeInit+0x112>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	e001      	b.n	800937a <HAL_GPIO_DeInit+0x116>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3304      	adds	r3, #4
 800937a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	2bff      	cmp	r3, #255	; 0xff
 8009380:	d802      	bhi.n	8009388 <HAL_GPIO_DeInit+0x124>
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	e002      	b.n	800938e <HAL_GPIO_DeInit+0x12a>
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	3b08      	subs	r3, #8
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	210f      	movs	r1, #15
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	fa01 f303 	lsl.w	r3, r1, r3
 800939c:	43db      	mvns	r3, r3
 800939e:	401a      	ands	r2, r3
 80093a0:	2104      	movs	r1, #4
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	fa01 f303 	lsl.w	r3, r1, r3
 80093a8:	431a      	orrs	r2, r3
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	43db      	mvns	r3, r3
 80093b6:	401a      	ands	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60da      	str	r2, [r3, #12]
    }

    position++;
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	3301      	adds	r3, #1
 80093c0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	fa22 f303 	lsr.w	r3, r2, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f47f af52 	bne.w	8009274 <HAL_GPIO_DeInit+0x10>
  }
}
 80093d0:	bf00      	nop
 80093d2:	bf00      	nop
 80093d4:	3724      	adds	r7, #36	; 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bc80      	pop	{r7}
 80093da:	4770      	bx	lr
 80093dc:	40010000 	.word	0x40010000
 80093e0:	40010800 	.word	0x40010800
 80093e4:	40010c00 	.word	0x40010c00
 80093e8:	40011000 	.word	0x40011000
 80093ec:	40011400 	.word	0x40011400
 80093f0:	40011800 	.word	0x40011800
 80093f4:	40011c00 	.word	0x40011c00
 80093f8:	40010400 	.word	0x40010400

080093fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	887b      	ldrh	r3, [r7, #2]
 800940e:	4013      	ands	r3, r2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009414:	2301      	movs	r3, #1
 8009416:	73fb      	strb	r3, [r7, #15]
 8009418:	e001      	b.n	800941e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800941e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr

0800942a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	460b      	mov	r3, r1
 8009434:	807b      	strh	r3, [r7, #2]
 8009436:	4613      	mov	r3, r2
 8009438:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800943a:	787b      	ldrb	r3, [r7, #1]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009440:	887a      	ldrh	r2, [r7, #2]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009446:	e003      	b.n	8009450 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009448:	887b      	ldrh	r3, [r7, #2]
 800944a:	041a      	lsls	r2, r3, #16
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	611a      	str	r2, [r3, #16]
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	bc80      	pop	{r7}
 8009458:	4770      	bx	lr

0800945a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800945a:	b480      	push	{r7}
 800945c:	b085      	sub	sp, #20
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	460b      	mov	r3, r1
 8009464:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800946c:	887a      	ldrh	r2, [r7, #2]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4013      	ands	r3, r2
 8009472:	041a      	lsls	r2, r3, #16
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	43d9      	mvns	r1, r3
 8009478:	887b      	ldrh	r3, [r7, #2]
 800947a:	400b      	ands	r3, r1
 800947c:	431a      	orrs	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	611a      	str	r2, [r3, #16]
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr

0800948c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e12b      	b.n	80096f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fe fff8 	bl	80084a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2224      	movs	r2, #36	; 0x24
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 0201 	bic.w	r2, r2, #1
 80094ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80094f0:	f001 fdb8 	bl	800b064 <HAL_RCC_GetPCLK1Freq>
 80094f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	4a81      	ldr	r2, [pc, #516]	; (8009700 <HAL_I2C_Init+0x274>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d807      	bhi.n	8009510 <HAL_I2C_Init+0x84>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4a80      	ldr	r2, [pc, #512]	; (8009704 <HAL_I2C_Init+0x278>)
 8009504:	4293      	cmp	r3, r2
 8009506:	bf94      	ite	ls
 8009508:	2301      	movls	r3, #1
 800950a:	2300      	movhi	r3, #0
 800950c:	b2db      	uxtb	r3, r3
 800950e:	e006      	b.n	800951e <HAL_I2C_Init+0x92>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4a7d      	ldr	r2, [pc, #500]	; (8009708 <HAL_I2C_Init+0x27c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	bf94      	ite	ls
 8009518:	2301      	movls	r3, #1
 800951a:	2300      	movhi	r3, #0
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e0e7      	b.n	80096f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4a78      	ldr	r2, [pc, #480]	; (800970c <HAL_I2C_Init+0x280>)
 800952a:	fba2 2303 	umull	r2, r3, r2, r3
 800952e:	0c9b      	lsrs	r3, r3, #18
 8009530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4a6a      	ldr	r2, [pc, #424]	; (8009700 <HAL_I2C_Init+0x274>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d802      	bhi.n	8009560 <HAL_I2C_Init+0xd4>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3301      	adds	r3, #1
 800955e:	e009      	b.n	8009574 <HAL_I2C_Init+0xe8>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009566:	fb02 f303 	mul.w	r3, r2, r3
 800956a:	4a69      	ldr	r2, [pc, #420]	; (8009710 <HAL_I2C_Init+0x284>)
 800956c:	fba2 2303 	umull	r2, r3, r2, r3
 8009570:	099b      	lsrs	r3, r3, #6
 8009572:	3301      	adds	r3, #1
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	430b      	orrs	r3, r1
 800957a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009586:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	495c      	ldr	r1, [pc, #368]	; (8009700 <HAL_I2C_Init+0x274>)
 8009590:	428b      	cmp	r3, r1
 8009592:	d819      	bhi.n	80095c8 <HAL_I2C_Init+0x13c>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	1e59      	subs	r1, r3, #1
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	fbb1 f3f3 	udiv	r3, r1, r3
 80095a2:	1c59      	adds	r1, r3, #1
 80095a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095a8:	400b      	ands	r3, r1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00a      	beq.n	80095c4 <HAL_I2C_Init+0x138>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	1e59      	subs	r1, r3, #1
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80095bc:	3301      	adds	r3, #1
 80095be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c2:	e051      	b.n	8009668 <HAL_I2C_Init+0x1dc>
 80095c4:	2304      	movs	r3, #4
 80095c6:	e04f      	b.n	8009668 <HAL_I2C_Init+0x1dc>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d111      	bne.n	80095f4 <HAL_I2C_Init+0x168>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	1e58      	subs	r0, r3, #1
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6859      	ldr	r1, [r3, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	005b      	lsls	r3, r3, #1
 80095dc:	440b      	add	r3, r1
 80095de:	fbb0 f3f3 	udiv	r3, r0, r3
 80095e2:	3301      	adds	r3, #1
 80095e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	bf0c      	ite	eq
 80095ec:	2301      	moveq	r3, #1
 80095ee:	2300      	movne	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	e012      	b.n	800961a <HAL_I2C_Init+0x18e>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	1e58      	subs	r0, r3, #1
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6859      	ldr	r1, [r3, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	440b      	add	r3, r1
 8009602:	0099      	lsls	r1, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	fbb0 f3f3 	udiv	r3, r0, r3
 800960a:	3301      	adds	r3, #1
 800960c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009610:	2b00      	cmp	r3, #0
 8009612:	bf0c      	ite	eq
 8009614:	2301      	moveq	r3, #1
 8009616:	2300      	movne	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_I2C_Init+0x196>
 800961e:	2301      	movs	r3, #1
 8009620:	e022      	b.n	8009668 <HAL_I2C_Init+0x1dc>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10e      	bne.n	8009648 <HAL_I2C_Init+0x1bc>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	1e58      	subs	r0, r3, #1
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6859      	ldr	r1, [r3, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	440b      	add	r3, r1
 8009638:	fbb0 f3f3 	udiv	r3, r0, r3
 800963c:	3301      	adds	r3, #1
 800963e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009646:	e00f      	b.n	8009668 <HAL_I2C_Init+0x1dc>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	1e58      	subs	r0, r3, #1
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6859      	ldr	r1, [r3, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	440b      	add	r3, r1
 8009656:	0099      	lsls	r1, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	fbb0 f3f3 	udiv	r3, r0, r3
 800965e:	3301      	adds	r3, #1
 8009660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	6809      	ldr	r1, [r1, #0]
 800966c:	4313      	orrs	r3, r2
 800966e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	69da      	ldr	r2, [r3, #28]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	431a      	orrs	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	430a      	orrs	r2, r1
 800968a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	6911      	ldr	r1, [r2, #16]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	68d2      	ldr	r2, [r2, #12]
 80096a2:	4311      	orrs	r1, r2
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	6812      	ldr	r2, [r2, #0]
 80096a8:	430b      	orrs	r3, r1
 80096aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	695a      	ldr	r2, [r3, #20]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0201 	orr.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	000186a0 	.word	0x000186a0
 8009704:	001e847f 	.word	0x001e847f
 8009708:	003d08ff 	.word	0x003d08ff
 800970c:	431bde83 	.word	0x431bde83
 8009710:	10624dd3 	.word	0x10624dd3

08009714 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e021      	b.n	800976a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2224      	movs	r2, #36	; 0x24
 800972a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 0201 	bic.w	r2, r2, #1
 800973c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7fe fef0 	bl	8008524 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	607a      	str	r2, [r7, #4]
 800977e:	461a      	mov	r2, r3
 8009780:	460b      	mov	r3, r1
 8009782:	817b      	strh	r3, [r7, #10]
 8009784:	4613      	mov	r3, r2
 8009786:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009788:	f7ff f85e 	bl	8008848 <HAL_GetTick>
 800978c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b20      	cmp	r3, #32
 8009798:	f040 80e0 	bne.w	800995c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	2319      	movs	r3, #25
 80097a2:	2201      	movs	r2, #1
 80097a4:	4970      	ldr	r1, [pc, #448]	; (8009968 <HAL_I2C_Master_Transmit+0x1f4>)
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 fe5c 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80097b2:	2302      	movs	r3, #2
 80097b4:	e0d3      	b.n	800995e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_I2C_Master_Transmit+0x50>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e0cc      	b.n	800995e <HAL_I2C_Master_Transmit+0x1ea>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d007      	beq.n	80097ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0201 	orr.w	r2, r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2221      	movs	r2, #33	; 0x21
 80097fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2210      	movs	r2, #16
 8009806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	893a      	ldrh	r2, [r7, #8]
 800981a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009820:	b29a      	uxth	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4a50      	ldr	r2, [pc, #320]	; (800996c <HAL_I2C_Master_Transmit+0x1f8>)
 800982a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800982c:	8979      	ldrh	r1, [r7, #10]
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	6a3a      	ldr	r2, [r7, #32]
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fc16 	bl	800a064 <I2C_MasterRequestWrite>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e08d      	b.n	800995e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009842:	2300      	movs	r3, #0
 8009844:	613b      	str	r3, [r7, #16]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	613b      	str	r3, [r7, #16]
 8009856:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009858:	e066      	b.n	8009928 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	6a39      	ldr	r1, [r7, #32]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 ff1a 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00d      	beq.n	8009886 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	2b04      	cmp	r3, #4
 8009870:	d107      	bne.n	8009882 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009880:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e06b      	b.n	800995e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	781a      	ldrb	r2, [r3, #0]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	3b01      	subs	r3, #1
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ae:	3b01      	subs	r3, #1
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d11b      	bne.n	80098fc <HAL_I2C_Master_Transmit+0x188>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d017      	beq.n	80098fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	781a      	ldrb	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	6a39      	ldr	r1, [r7, #32]
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 ff11 	bl	800a728 <I2C_WaitOnBTFFlagUntilTimeout>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00d      	beq.n	8009928 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009910:	2b04      	cmp	r3, #4
 8009912:	d107      	bne.n	8009924 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009922:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e01a      	b.n	800995e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800992c:	2b00      	cmp	r3, #0
 800992e:	d194      	bne.n	800985a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800993e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2220      	movs	r2, #32
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	e000      	b.n	800995e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800995c:	2302      	movs	r3, #2
  }
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	00100002 	.word	0x00100002
 800996c:	ffff0000 	.word	0xffff0000

08009970 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af02      	add	r7, sp, #8
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	461a      	mov	r2, r3
 800997e:	4603      	mov	r3, r0
 8009980:	817b      	strh	r3, [r7, #10]
 8009982:	460b      	mov	r3, r1
 8009984:	813b      	strh	r3, [r7, #8]
 8009986:	4613      	mov	r3, r2
 8009988:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800998a:	f7fe ff5d 	bl	8008848 <HAL_GetTick>
 800998e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b20      	cmp	r3, #32
 800999a:	f040 80d9 	bne.w	8009b50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	2319      	movs	r3, #25
 80099a4:	2201      	movs	r2, #1
 80099a6:	496d      	ldr	r1, [pc, #436]	; (8009b5c <HAL_I2C_Mem_Write+0x1ec>)
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 fd5b 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d001      	beq.n	80099b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80099b4:	2302      	movs	r3, #2
 80099b6:	e0cc      	b.n	8009b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d101      	bne.n	80099c6 <HAL_I2C_Mem_Write+0x56>
 80099c2:	2302      	movs	r3, #2
 80099c4:	e0c5      	b.n	8009b52 <HAL_I2C_Mem_Write+0x1e2>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d007      	beq.n	80099ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0201 	orr.w	r2, r2, #1
 80099ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2221      	movs	r2, #33	; 0x21
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2240      	movs	r2, #64	; 0x40
 8009a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6a3a      	ldr	r2, [r7, #32]
 8009a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	4a4d      	ldr	r2, [pc, #308]	; (8009b60 <HAL_I2C_Mem_Write+0x1f0>)
 8009a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a2e:	88f8      	ldrh	r0, [r7, #6]
 8009a30:	893a      	ldrh	r2, [r7, #8]
 8009a32:	8979      	ldrh	r1, [r7, #10]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fb92 	bl	800a168 <I2C_RequestMemoryWrite>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d052      	beq.n	8009af0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e081      	b.n	8009b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 fe20 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00d      	beq.n	8009a7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d107      	bne.n	8009a76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e06b      	b.n	8009b52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a94:	3b01      	subs	r3, #1
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	f003 0304 	and.w	r3, r3, #4
 8009ab4:	2b04      	cmp	r3, #4
 8009ab6:	d11b      	bne.n	8009af0 <HAL_I2C_Mem_Write+0x180>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d017      	beq.n	8009af0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1aa      	bne.n	8009a4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 fe13 	bl	800a728 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00d      	beq.n	8009b24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d107      	bne.n	8009b20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e016      	b.n	8009b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2220      	movs	r2, #32
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e000      	b.n	8009b52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009b50:	2302      	movs	r3, #2
  }
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	00100002 	.word	0x00100002
 8009b60:	ffff0000 	.word	0xffff0000

08009b64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08c      	sub	sp, #48	; 0x30
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	461a      	mov	r2, r3
 8009b72:	4603      	mov	r3, r0
 8009b74:	817b      	strh	r3, [r7, #10]
 8009b76:	460b      	mov	r3, r1
 8009b78:	813b      	strh	r3, [r7, #8]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b82:	f7fe fe61 	bl	8008848 <HAL_GetTick>
 8009b86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	f040 8244 	bne.w	800a01e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	2319      	movs	r3, #25
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	4982      	ldr	r1, [pc, #520]	; (8009da8 <HAL_I2C_Mem_Read+0x244>)
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 fc5f 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009bac:	2302      	movs	r3, #2
 8009bae:	e237      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d101      	bne.n	8009bbe <HAL_I2C_Mem_Read+0x5a>
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e230      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d007      	beq.n	8009be4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0201 	orr.w	r2, r2, #1
 8009be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2222      	movs	r2, #34	; 0x22
 8009bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2240      	movs	r2, #64	; 0x40
 8009c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4a62      	ldr	r2, [pc, #392]	; (8009dac <HAL_I2C_Mem_Read+0x248>)
 8009c24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c26:	88f8      	ldrh	r0, [r7, #6]
 8009c28:	893a      	ldrh	r2, [r7, #8]
 8009c2a:	8979      	ldrh	r1, [r7, #10]
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	4603      	mov	r3, r0
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 fb2c 	bl	800a294 <I2C_RequestMemoryRead>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e1ec      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d113      	bne.n	8009c76 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	61fb      	str	r3, [r7, #28]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e1c0      	b.n	8009ff8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d11e      	bne.n	8009cbc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c8e:	b672      	cpsid	i
}
 8009c90:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c92:	2300      	movs	r3, #0
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cb8:	b662      	cpsie	i
}
 8009cba:	e035      	b.n	8009d28 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d11e      	bne.n	8009d02 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cd4:	b672      	cpsid	i
}
 8009cd6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cd8:	2300      	movs	r3, #0
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	617b      	str	r3, [r7, #20]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	617b      	str	r3, [r7, #20]
 8009cec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cfe:	b662      	cpsie	i
}
 8009d00:	e012      	b.n	8009d28 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d10:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d12:	2300      	movs	r3, #0
 8009d14:	613b      	str	r3, [r7, #16]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	613b      	str	r3, [r7, #16]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	613b      	str	r3, [r7, #16]
 8009d26:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009d28:	e166      	b.n	8009ff8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	f200 811f 	bhi.w	8009f72 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d123      	bne.n	8009d84 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fd39 	bl	800a7b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e167      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	691a      	ldr	r2, [r3, #16]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	b2d2      	uxtb	r2, r2
 8009d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d82:	e139      	b.n	8009ff8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d152      	bne.n	8009e32 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d92:	2200      	movs	r2, #0
 8009d94:	4906      	ldr	r1, [pc, #24]	; (8009db0 <HAL_I2C_Mem_Read+0x24c>)
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 fb64 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d008      	beq.n	8009db4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e13c      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
 8009da6:	bf00      	nop
 8009da8:	00100002 	.word	0x00100002
 8009dac:	ffff0000 	.word	0xffff0000
 8009db0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009db4:	b672      	cpsid	i
}
 8009db6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	691a      	ldr	r2, [r3, #16]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	b2d2      	uxtb	r2, r2
 8009dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de4:	3b01      	subs	r3, #1
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009dfa:	b662      	cpsie	i
}
 8009dfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	691a      	ldr	r2, [r3, #16]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	b2d2      	uxtb	r2, r2
 8009e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	1c5a      	adds	r2, r3, #1
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e30:	e0e2      	b.n	8009ff8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e38:	2200      	movs	r2, #0
 8009e3a:	497b      	ldr	r1, [pc, #492]	; (800a028 <HAL_I2C_Mem_Read+0x4c4>)
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 fb11 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e0e9      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e5c:	b672      	cpsid	i
}
 8009e5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691a      	ldr	r2, [r3, #16]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	b2d2      	uxtb	r2, r2
 8009e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	1c5a      	adds	r2, r3, #1
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e92:	4b66      	ldr	r3, [pc, #408]	; (800a02c <HAL_I2C_Mem_Read+0x4c8>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	08db      	lsrs	r3, r3, #3
 8009e98:	4a65      	ldr	r2, [pc, #404]	; (800a030 <HAL_I2C_Mem_Read+0x4cc>)
 8009e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9e:	0a1a      	lsrs	r2, r3, #8
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	00da      	lsls	r2, r3, #3
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d118      	bne.n	8009eea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	f043 0220 	orr.w	r2, r3, #32
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009eda:	b662      	cpsie	i
}
 8009edc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e09a      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d1d9      	bne.n	8009eac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691a      	ldr	r2, [r3, #16]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009f3a:	b662      	cpsie	i
}
 8009f3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691a      	ldr	r2, [r3, #16]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	b2d2      	uxtb	r2, r2
 8009f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f70:	e042      	b.n	8009ff8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 fc1e 	bl	800a7b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e04c      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	691a      	ldr	r2, [r3, #16]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	f003 0304 	and.w	r3, r3, #4
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d118      	bne.n	8009ff8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	b2d2      	uxtb	r2, r2
 8009fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd8:	1c5a      	adds	r2, r3, #1
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f47f ae94 	bne.w	8009d2a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2220      	movs	r2, #32
 800a006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	e000      	b.n	800a020 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a01e:	2302      	movs	r3, #2
  }
}
 800a020:	4618      	mov	r0, r3
 800a022:	3728      	adds	r7, #40	; 0x28
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	00010004 	.word	0x00010004
 800a02c:	200000a0 	.word	0x200000a0
 800a030:	14f8b589 	.word	0x14f8b589

0800a034 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a042:	b2db      	uxtb	r3, r3
}
 800a044:	4618      	mov	r0, r3
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	bc80      	pop	{r7}
 800a04c:	4770      	bx	lr

0800a04e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	bc80      	pop	{r7}
 800a062:	4770      	bx	lr

0800a064 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af02      	add	r7, sp, #8
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	607a      	str	r2, [r7, #4]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	460b      	mov	r3, r1
 800a072:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b08      	cmp	r3, #8
 800a07e:	d006      	beq.n	800a08e <I2C_MasterRequestWrite+0x2a>
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d003      	beq.n	800a08e <I2C_MasterRequestWrite+0x2a>
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a08c:	d108      	bne.n	800a0a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	e00b      	b.n	800a0b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a4:	2b12      	cmp	r3, #18
 800a0a6:	d107      	bne.n	800a0b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f9cd 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00d      	beq.n	800a0ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0de:	d103      	bne.n	800a0e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e035      	b.n	800a158 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0f4:	d108      	bne.n	800a108 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0f6:	897b      	ldrh	r3, [r7, #10]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a104:	611a      	str	r2, [r3, #16]
 800a106:	e01b      	b.n	800a140 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a108:	897b      	ldrh	r3, [r7, #10]
 800a10a:	11db      	asrs	r3, r3, #7
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	f003 0306 	and.w	r3, r3, #6
 800a112:	b2db      	uxtb	r3, r3
 800a114:	f063 030f 	orn	r3, r3, #15
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	490e      	ldr	r1, [pc, #56]	; (800a160 <I2C_MasterRequestWrite+0xfc>)
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 fa16 	bl	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e010      	b.n	800a158 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a136:	897b      	ldrh	r3, [r7, #10]
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	4907      	ldr	r1, [pc, #28]	; (800a164 <I2C_MasterRequestWrite+0x100>)
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 fa06 	bl	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e000      	b.n	800a158 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	00010008 	.word	0x00010008
 800a164:	00010002 	.word	0x00010002

0800a168 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	4608      	mov	r0, r1
 800a172:	4611      	mov	r1, r2
 800a174:	461a      	mov	r2, r3
 800a176:	4603      	mov	r3, r0
 800a178:	817b      	strh	r3, [r7, #10]
 800a17a:	460b      	mov	r3, r1
 800a17c:	813b      	strh	r3, [r7, #8]
 800a17e:	4613      	mov	r3, r2
 800a180:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	2200      	movs	r2, #0
 800a19a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 f960 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00d      	beq.n	800a1c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b8:	d103      	bne.n	800a1c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e05f      	b.n	800a286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1c6:	897b      	ldrh	r3, [r7, #10]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	6a3a      	ldr	r2, [r7, #32]
 800a1da:	492d      	ldr	r1, [pc, #180]	; (800a290 <I2C_RequestMemoryWrite+0x128>)
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f9bb 	bl	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e04c      	b.n	800a286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a204:	6a39      	ldr	r1, [r7, #32]
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 fa46 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00d      	beq.n	800a22e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	2b04      	cmp	r3, #4
 800a218:	d107      	bne.n	800a22a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e02b      	b.n	800a286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d105      	bne.n	800a240 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a234:	893b      	ldrh	r3, [r7, #8]
 800a236:	b2da      	uxtb	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	611a      	str	r2, [r3, #16]
 800a23e:	e021      	b.n	800a284 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a240:	893b      	ldrh	r3, [r7, #8]
 800a242:	0a1b      	lsrs	r3, r3, #8
 800a244:	b29b      	uxth	r3, r3
 800a246:	b2da      	uxtb	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a250:	6a39      	ldr	r1, [r7, #32]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 fa20 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00d      	beq.n	800a27a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a262:	2b04      	cmp	r3, #4
 800a264:	d107      	bne.n	800a276 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e005      	b.n	800a286 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a27a:	893b      	ldrh	r3, [r7, #8]
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	00010002 	.word	0x00010002

0800a294 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af02      	add	r7, sp, #8
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	4608      	mov	r0, r1
 800a29e:	4611      	mov	r1, r2
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	817b      	strh	r3, [r7, #10]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	813b      	strh	r3, [r7, #8]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 f8c2 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00d      	beq.n	800a302 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f4:	d103      	bne.n	800a2fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e0aa      	b.n	800a458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a302:	897b      	ldrh	r3, [r7, #10]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	461a      	mov	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	6a3a      	ldr	r2, [r7, #32]
 800a316:	4952      	ldr	r1, [pc, #328]	; (800a460 <I2C_RequestMemoryRead+0x1cc>)
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f91d 	bl	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e097      	b.n	800a458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a33e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a340:	6a39      	ldr	r1, [r7, #32]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 f9a8 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00d      	beq.n	800a36a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	2b04      	cmp	r3, #4
 800a354:	d107      	bne.n	800a366 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e076      	b.n	800a458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d105      	bne.n	800a37c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a370:	893b      	ldrh	r3, [r7, #8]
 800a372:	b2da      	uxtb	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	611a      	str	r2, [r3, #16]
 800a37a:	e021      	b.n	800a3c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a37c:	893b      	ldrh	r3, [r7, #8]
 800a37e:	0a1b      	lsrs	r3, r3, #8
 800a380:	b29b      	uxth	r3, r3
 800a382:	b2da      	uxtb	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38c:	6a39      	ldr	r1, [r7, #32]
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 f982 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00d      	beq.n	800a3b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d107      	bne.n	800a3b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e050      	b.n	800a458 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a3b6:	893b      	ldrh	r3, [r7, #8]
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c2:	6a39      	ldr	r1, [r7, #32]
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 f967 	bl	800a698 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00d      	beq.n	800a3ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d107      	bne.n	800a3e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e035      	b.n	800a458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	2200      	movs	r2, #0
 800a404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 f82b 	bl	800a464 <I2C_WaitOnFlagUntilTimeout>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00d      	beq.n	800a430 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a422:	d103      	bne.n	800a42c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a42a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e013      	b.n	800a458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a430:	897b      	ldrh	r3, [r7, #10]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f043 0301 	orr.w	r3, r3, #1
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	6a3a      	ldr	r2, [r7, #32]
 800a444:	4906      	ldr	r1, [pc, #24]	; (800a460 <I2C_RequestMemoryRead+0x1cc>)
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f000 f886 	bl	800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d001      	beq.n	800a456 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e000      	b.n	800a458 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	00010002 	.word	0x00010002

0800a464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	4613      	mov	r3, r2
 800a472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a474:	e048      	b.n	800a508 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a47c:	d044      	beq.n	800a508 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a47e:	f7fe f9e3 	bl	8008848 <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d302      	bcc.n	800a494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d139      	bne.n	800a508 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	0c1b      	lsrs	r3, r3, #16
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d10d      	bne.n	800a4ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	43da      	mvns	r2, r3
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	bf0c      	ite	eq
 800a4b0:	2301      	moveq	r3, #1
 800a4b2:	2300      	movne	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	e00c      	b.n	800a4d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	43da      	mvns	r2, r3
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	bf0c      	ite	eq
 800a4cc:	2301      	moveq	r3, #1
 800a4ce:	2300      	movne	r3, #0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d116      	bne.n	800a508 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f4:	f043 0220 	orr.w	r2, r3, #32
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e023      	b.n	800a550 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	0c1b      	lsrs	r3, r3, #16
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d10d      	bne.n	800a52e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	43da      	mvns	r2, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	4013      	ands	r3, r2
 800a51e:	b29b      	uxth	r3, r3
 800a520:	2b00      	cmp	r3, #0
 800a522:	bf0c      	ite	eq
 800a524:	2301      	moveq	r3, #1
 800a526:	2300      	movne	r3, #0
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	461a      	mov	r2, r3
 800a52c:	e00c      	b.n	800a548 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	43da      	mvns	r2, r3
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	4013      	ands	r3, r2
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bf0c      	ite	eq
 800a540:	2301      	moveq	r3, #1
 800a542:	2300      	movne	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	461a      	mov	r2, r3
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d093      	beq.n	800a476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a566:	e071      	b.n	800a64c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a576:	d123      	bne.n	800a5c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a586:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2220      	movs	r2, #32
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ac:	f043 0204 	orr.w	r2, r3, #4
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e067      	b.n	800a690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5c6:	d041      	beq.n	800a64c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5c8:	f7fe f93e 	bl	8008848 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d302      	bcc.n	800a5de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d136      	bne.n	800a64c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	0c1b      	lsrs	r3, r3, #16
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d10c      	bne.n	800a602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	43da      	mvns	r2, r3
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bf14      	ite	ne
 800a5fa:	2301      	movne	r3, #1
 800a5fc:	2300      	moveq	r3, #0
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	e00b      	b.n	800a61a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	43da      	mvns	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	4013      	ands	r3, r2
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	bf14      	ite	ne
 800a614:	2301      	movne	r3, #1
 800a616:	2300      	moveq	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d016      	beq.n	800a64c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2220      	movs	r2, #32
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a638:	f043 0220 	orr.w	r2, r3, #32
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e021      	b.n	800a690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	0c1b      	lsrs	r3, r3, #16
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b01      	cmp	r3, #1
 800a654:	d10c      	bne.n	800a670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	43da      	mvns	r2, r3
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	4013      	ands	r3, r2
 800a662:	b29b      	uxth	r3, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	bf14      	ite	ne
 800a668:	2301      	movne	r3, #1
 800a66a:	2300      	moveq	r3, #0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	e00b      	b.n	800a688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	43da      	mvns	r2, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	4013      	ands	r3, r2
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bf14      	ite	ne
 800a682:	2301      	movne	r3, #1
 800a684:	2300      	moveq	r3, #0
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f47f af6d 	bne.w	800a568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6a4:	e034      	b.n	800a710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 f8e3 	bl	800a872 <I2C_IsAcknowledgeFailed>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e034      	b.n	800a720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6bc:	d028      	beq.n	800a710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6be:	f7fe f8c3 	bl	8008848 <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d302      	bcc.n	800a6d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d11d      	bne.n	800a710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6de:	2b80      	cmp	r3, #128	; 0x80
 800a6e0:	d016      	beq.n	800a710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fc:	f043 0220 	orr.w	r2, r3, #32
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e007      	b.n	800a720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a71a:	2b80      	cmp	r3, #128	; 0x80
 800a71c:	d1c3      	bne.n	800a6a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a734:	e034      	b.n	800a7a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f000 f89b 	bl	800a872 <I2C_IsAcknowledgeFailed>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e034      	b.n	800a7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a74c:	d028      	beq.n	800a7a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a74e:	f7fe f87b 	bl	8008848 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d302      	bcc.n	800a764 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d11d      	bne.n	800a7a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d016      	beq.n	800a7a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2220      	movs	r2, #32
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78c:	f043 0220 	orr.w	r2, r3, #32
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e007      	b.n	800a7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	f003 0304 	and.w	r3, r3, #4
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	d1c3      	bne.n	800a736 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7c4:	e049      	b.n	800a85a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	f003 0310 	and.w	r3, r3, #16
 800a7d0:	2b10      	cmp	r3, #16
 800a7d2:	d119      	bne.n	800a808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f06f 0210 	mvn.w	r2, #16
 800a7dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e030      	b.n	800a86a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a808:	f7fe f81e 	bl	8008848 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	429a      	cmp	r2, r3
 800a816:	d302      	bcc.n	800a81e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d11d      	bne.n	800a85a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a828:	2b40      	cmp	r3, #64	; 0x40
 800a82a:	d016      	beq.n	800a85a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2220      	movs	r2, #32
 800a836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	f043 0220 	orr.w	r2, r3, #32
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e007      	b.n	800a86a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a864:	2b40      	cmp	r3, #64	; 0x40
 800a866:	d1ae      	bne.n	800a7c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	695b      	ldr	r3, [r3, #20]
 800a880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a888:	d11b      	bne.n	800a8c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a892:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2220      	movs	r2, #32
 800a89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	f043 0204 	orr.w	r2, r3, #4
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e000      	b.n	800a8c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bc80      	pop	{r7}
 800a8cc:	4770      	bx	lr
	...

0800a8d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e272      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 8087 	beq.w	800a9fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8f0:	4b92      	ldr	r3, [pc, #584]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	f003 030c 	and.w	r3, r3, #12
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d00c      	beq.n	800a916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a8fc:	4b8f      	ldr	r3, [pc, #572]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f003 030c 	and.w	r3, r3, #12
 800a904:	2b08      	cmp	r3, #8
 800a906:	d112      	bne.n	800a92e <HAL_RCC_OscConfig+0x5e>
 800a908:	4b8c      	ldr	r3, [pc, #560]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a914:	d10b      	bne.n	800a92e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a916:	4b89      	ldr	r3, [pc, #548]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d06c      	beq.n	800a9fc <HAL_RCC_OscConfig+0x12c>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d168      	bne.n	800a9fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e24c      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a936:	d106      	bne.n	800a946 <HAL_RCC_OscConfig+0x76>
 800a938:	4b80      	ldr	r3, [pc, #512]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a7f      	ldr	r2, [pc, #508]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a93e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a942:	6013      	str	r3, [r2, #0]
 800a944:	e02e      	b.n	800a9a4 <HAL_RCC_OscConfig+0xd4>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10c      	bne.n	800a968 <HAL_RCC_OscConfig+0x98>
 800a94e:	4b7b      	ldr	r3, [pc, #492]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a7a      	ldr	r2, [pc, #488]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	4b78      	ldr	r3, [pc, #480]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a77      	ldr	r2, [pc, #476]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	e01d      	b.n	800a9a4 <HAL_RCC_OscConfig+0xd4>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a970:	d10c      	bne.n	800a98c <HAL_RCC_OscConfig+0xbc>
 800a972:	4b72      	ldr	r3, [pc, #456]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a71      	ldr	r2, [pc, #452]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a97c:	6013      	str	r3, [r2, #0]
 800a97e:	4b6f      	ldr	r3, [pc, #444]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a6e      	ldr	r2, [pc, #440]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	e00b      	b.n	800a9a4 <HAL_RCC_OscConfig+0xd4>
 800a98c:	4b6b      	ldr	r3, [pc, #428]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a6a      	ldr	r2, [pc, #424]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	4b68      	ldr	r3, [pc, #416]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a67      	ldr	r2, [pc, #412]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a99e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d013      	beq.n	800a9d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ac:	f7fd ff4c 	bl	8008848 <HAL_GetTick>
 800a9b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9b2:	e008      	b.n	800a9c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9b4:	f7fd ff48 	bl	8008848 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	2b64      	cmp	r3, #100	; 0x64
 800a9c0:	d901      	bls.n	800a9c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e200      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9c6:	4b5d      	ldr	r3, [pc, #372]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0f0      	beq.n	800a9b4 <HAL_RCC_OscConfig+0xe4>
 800a9d2:	e014      	b.n	800a9fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9d4:	f7fd ff38 	bl	8008848 <HAL_GetTick>
 800a9d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9da:	e008      	b.n	800a9ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9dc:	f7fd ff34 	bl	8008848 <HAL_GetTick>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	2b64      	cmp	r3, #100	; 0x64
 800a9e8:	d901      	bls.n	800a9ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e1ec      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9ee:	4b53      	ldr	r3, [pc, #332]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1f0      	bne.n	800a9dc <HAL_RCC_OscConfig+0x10c>
 800a9fa:	e000      	b.n	800a9fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d063      	beq.n	800aad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa0a:	4b4c      	ldr	r3, [pc, #304]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f003 030c 	and.w	r3, r3, #12
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00b      	beq.n	800aa2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aa16:	4b49      	ldr	r3, [pc, #292]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f003 030c 	and.w	r3, r3, #12
 800aa1e:	2b08      	cmp	r3, #8
 800aa20:	d11c      	bne.n	800aa5c <HAL_RCC_OscConfig+0x18c>
 800aa22:	4b46      	ldr	r3, [pc, #280]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d116      	bne.n	800aa5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa2e:	4b43      	ldr	r3, [pc, #268]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d005      	beq.n	800aa46 <HAL_RCC_OscConfig+0x176>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d001      	beq.n	800aa46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e1c0      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa46:	4b3d      	ldr	r3, [pc, #244]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	4939      	ldr	r1, [pc, #228]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa5a:	e03a      	b.n	800aad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d020      	beq.n	800aaa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa64:	4b36      	ldr	r3, [pc, #216]	; (800ab40 <HAL_RCC_OscConfig+0x270>)
 800aa66:	2201      	movs	r2, #1
 800aa68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa6a:	f7fd feed 	bl	8008848 <HAL_GetTick>
 800aa6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa70:	e008      	b.n	800aa84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa72:	f7fd fee9 	bl	8008848 <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d901      	bls.n	800aa84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e1a1      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa84:	4b2d      	ldr	r3, [pc, #180]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0f0      	beq.n	800aa72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa90:	4b2a      	ldr	r3, [pc, #168]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4927      	ldr	r1, [pc, #156]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	600b      	str	r3, [r1, #0]
 800aaa4:	e015      	b.n	800aad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aaa6:	4b26      	ldr	r3, [pc, #152]	; (800ab40 <HAL_RCC_OscConfig+0x270>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaac:	f7fd fecc 	bl	8008848 <HAL_GetTick>
 800aab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aab2:	e008      	b.n	800aac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aab4:	f7fd fec8 	bl	8008848 <HAL_GetTick>
 800aab8:	4602      	mov	r2, r0
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d901      	bls.n	800aac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e180      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aac6:	4b1d      	ldr	r3, [pc, #116]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 0302 	and.w	r3, r3, #2
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1f0      	bne.n	800aab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 0308 	and.w	r3, r3, #8
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d03a      	beq.n	800ab54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d019      	beq.n	800ab1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aae6:	4b17      	ldr	r3, [pc, #92]	; (800ab44 <HAL_RCC_OscConfig+0x274>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aaec:	f7fd feac 	bl	8008848 <HAL_GetTick>
 800aaf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaf2:	e008      	b.n	800ab06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaf4:	f7fd fea8 	bl	8008848 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d901      	bls.n	800ab06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e160      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab06:	4b0d      	ldr	r3, [pc, #52]	; (800ab3c <HAL_RCC_OscConfig+0x26c>)
 800ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0a:	f003 0302 	and.w	r3, r3, #2
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0f0      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ab12:	2001      	movs	r0, #1
 800ab14:	f000 face 	bl	800b0b4 <RCC_Delay>
 800ab18:	e01c      	b.n	800ab54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <HAL_RCC_OscConfig+0x274>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab20:	f7fd fe92 	bl	8008848 <HAL_GetTick>
 800ab24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab26:	e00f      	b.n	800ab48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab28:	f7fd fe8e 	bl	8008848 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d908      	bls.n	800ab48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e146      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
 800ab3a:	bf00      	nop
 800ab3c:	40021000 	.word	0x40021000
 800ab40:	42420000 	.word	0x42420000
 800ab44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab48:	4b92      	ldr	r3, [pc, #584]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e9      	bne.n	800ab28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 0304 	and.w	r3, r3, #4
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 80a6 	beq.w	800acae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab62:	2300      	movs	r3, #0
 800ab64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab66:	4b8b      	ldr	r3, [pc, #556]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10d      	bne.n	800ab8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab72:	4b88      	ldr	r3, [pc, #544]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	4a87      	ldr	r2, [pc, #540]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ab78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab7c:	61d3      	str	r3, [r2, #28]
 800ab7e:	4b85      	ldr	r3, [pc, #532]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab86:	60bb      	str	r3, [r7, #8]
 800ab88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab8e:	4b82      	ldr	r3, [pc, #520]	; (800ad98 <HAL_RCC_OscConfig+0x4c8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d118      	bne.n	800abcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab9a:	4b7f      	ldr	r3, [pc, #508]	; (800ad98 <HAL_RCC_OscConfig+0x4c8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a7e      	ldr	r2, [pc, #504]	; (800ad98 <HAL_RCC_OscConfig+0x4c8>)
 800aba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aba6:	f7fd fe4f 	bl	8008848 <HAL_GetTick>
 800abaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abac:	e008      	b.n	800abc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abae:	f7fd fe4b 	bl	8008848 <HAL_GetTick>
 800abb2:	4602      	mov	r2, r0
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	2b64      	cmp	r3, #100	; 0x64
 800abba:	d901      	bls.n	800abc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e103      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abc0:	4b75      	ldr	r3, [pc, #468]	; (800ad98 <HAL_RCC_OscConfig+0x4c8>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0f0      	beq.n	800abae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d106      	bne.n	800abe2 <HAL_RCC_OscConfig+0x312>
 800abd4:	4b6f      	ldr	r3, [pc, #444]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	4a6e      	ldr	r2, [pc, #440]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	6213      	str	r3, [r2, #32]
 800abe0:	e02d      	b.n	800ac3e <HAL_RCC_OscConfig+0x36e>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10c      	bne.n	800ac04 <HAL_RCC_OscConfig+0x334>
 800abea:	4b6a      	ldr	r3, [pc, #424]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	4a69      	ldr	r2, [pc, #420]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	6213      	str	r3, [r2, #32]
 800abf6:	4b67      	ldr	r3, [pc, #412]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	4a66      	ldr	r2, [pc, #408]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800abfc:	f023 0304 	bic.w	r3, r3, #4
 800ac00:	6213      	str	r3, [r2, #32]
 800ac02:	e01c      	b.n	800ac3e <HAL_RCC_OscConfig+0x36e>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	2b05      	cmp	r3, #5
 800ac0a:	d10c      	bne.n	800ac26 <HAL_RCC_OscConfig+0x356>
 800ac0c:	4b61      	ldr	r3, [pc, #388]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	4a60      	ldr	r2, [pc, #384]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac12:	f043 0304 	orr.w	r3, r3, #4
 800ac16:	6213      	str	r3, [r2, #32]
 800ac18:	4b5e      	ldr	r3, [pc, #376]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	4a5d      	ldr	r2, [pc, #372]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac1e:	f043 0301 	orr.w	r3, r3, #1
 800ac22:	6213      	str	r3, [r2, #32]
 800ac24:	e00b      	b.n	800ac3e <HAL_RCC_OscConfig+0x36e>
 800ac26:	4b5b      	ldr	r3, [pc, #364]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	4a5a      	ldr	r2, [pc, #360]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac2c:	f023 0301 	bic.w	r3, r3, #1
 800ac30:	6213      	str	r3, [r2, #32]
 800ac32:	4b58      	ldr	r3, [pc, #352]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	4a57      	ldr	r2, [pc, #348]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac38:	f023 0304 	bic.w	r3, r3, #4
 800ac3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d015      	beq.n	800ac72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac46:	f7fd fdff 	bl	8008848 <HAL_GetTick>
 800ac4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac4c:	e00a      	b.n	800ac64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac4e:	f7fd fdfb 	bl	8008848 <HAL_GetTick>
 800ac52:	4602      	mov	r2, r0
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d901      	bls.n	800ac64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	e0b1      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac64:	4b4b      	ldr	r3, [pc, #300]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d0ee      	beq.n	800ac4e <HAL_RCC_OscConfig+0x37e>
 800ac70:	e014      	b.n	800ac9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac72:	f7fd fde9 	bl	8008848 <HAL_GetTick>
 800ac76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac78:	e00a      	b.n	800ac90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac7a:	f7fd fde5 	bl	8008848 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d901      	bls.n	800ac90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e09b      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac90:	4b40      	ldr	r3, [pc, #256]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	f003 0302 	and.w	r3, r3, #2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1ee      	bne.n	800ac7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d105      	bne.n	800acae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aca2:	4b3c      	ldr	r3, [pc, #240]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	4a3b      	ldr	r2, [pc, #236]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800aca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 8087 	beq.w	800adc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acb8:	4b36      	ldr	r3, [pc, #216]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f003 030c 	and.w	r3, r3, #12
 800acc0:	2b08      	cmp	r3, #8
 800acc2:	d061      	beq.n	800ad88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d146      	bne.n	800ad5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800accc:	4b33      	ldr	r3, [pc, #204]	; (800ad9c <HAL_RCC_OscConfig+0x4cc>)
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acd2:	f7fd fdb9 	bl	8008848 <HAL_GetTick>
 800acd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acd8:	e008      	b.n	800acec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acda:	f7fd fdb5 	bl	8008848 <HAL_GetTick>
 800acde:	4602      	mov	r2, r0
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d901      	bls.n	800acec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e06d      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acec:	4b29      	ldr	r3, [pc, #164]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1f0      	bne.n	800acda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a1b      	ldr	r3, [r3, #32]
 800acfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad00:	d108      	bne.n	800ad14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ad02:	4b24      	ldr	r3, [pc, #144]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	4921      	ldr	r1, [pc, #132]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad14:	4b1f      	ldr	r3, [pc, #124]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a19      	ldr	r1, [r3, #32]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	430b      	orrs	r3, r1
 800ad26:	491b      	ldr	r1, [pc, #108]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad2c:	4b1b      	ldr	r3, [pc, #108]	; (800ad9c <HAL_RCC_OscConfig+0x4cc>)
 800ad2e:	2201      	movs	r2, #1
 800ad30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad32:	f7fd fd89 	bl	8008848 <HAL_GetTick>
 800ad36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad38:	e008      	b.n	800ad4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad3a:	f7fd fd85 	bl	8008848 <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d901      	bls.n	800ad4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e03d      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad4c:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d0f0      	beq.n	800ad3a <HAL_RCC_OscConfig+0x46a>
 800ad58:	e035      	b.n	800adc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad5a:	4b10      	ldr	r3, [pc, #64]	; (800ad9c <HAL_RCC_OscConfig+0x4cc>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad60:	f7fd fd72 	bl	8008848 <HAL_GetTick>
 800ad64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad66:	e008      	b.n	800ad7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad68:	f7fd fd6e 	bl	8008848 <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d901      	bls.n	800ad7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e026      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad7a:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <HAL_RCC_OscConfig+0x4c4>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1f0      	bne.n	800ad68 <HAL_RCC_OscConfig+0x498>
 800ad86:	e01e      	b.n	800adc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d107      	bne.n	800ada0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e019      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
 800ad94:	40021000 	.word	0x40021000
 800ad98:	40007000 	.word	0x40007000
 800ad9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ada0:	4b0b      	ldr	r3, [pc, #44]	; (800add0 <HAL_RCC_OscConfig+0x500>)
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d106      	bne.n	800adc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d001      	beq.n	800adc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	40021000 	.word	0x40021000

0800add4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e0d0      	b.n	800af8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ade8:	4b6a      	ldr	r3, [pc, #424]	; (800af94 <HAL_RCC_ClockConfig+0x1c0>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0307 	and.w	r3, r3, #7
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d910      	bls.n	800ae18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adf6:	4b67      	ldr	r3, [pc, #412]	; (800af94 <HAL_RCC_ClockConfig+0x1c0>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f023 0207 	bic.w	r2, r3, #7
 800adfe:	4965      	ldr	r1, [pc, #404]	; (800af94 <HAL_RCC_ClockConfig+0x1c0>)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae06:	4b63      	ldr	r3, [pc, #396]	; (800af94 <HAL_RCC_ClockConfig+0x1c0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d001      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e0b8      	b.n	800af8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0302 	and.w	r3, r3, #2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d020      	beq.n	800ae66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d005      	beq.n	800ae3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae30:	4b59      	ldr	r3, [pc, #356]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	4a58      	ldr	r2, [pc, #352]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800ae36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ae3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0308 	and.w	r3, r3, #8
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae48:	4b53      	ldr	r3, [pc, #332]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	4a52      	ldr	r2, [pc, #328]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800ae4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ae52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae54:	4b50      	ldr	r3, [pc, #320]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	494d      	ldr	r1, [pc, #308]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d040      	beq.n	800aef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d107      	bne.n	800ae8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae7a:	4b47      	ldr	r3, [pc, #284]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d115      	bne.n	800aeb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e07f      	b.n	800af8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d107      	bne.n	800aea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae92:	4b41      	ldr	r3, [pc, #260]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d109      	bne.n	800aeb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e073      	b.n	800af8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aea2:	4b3d      	ldr	r3, [pc, #244]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e06b      	b.n	800af8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aeb2:	4b39      	ldr	r3, [pc, #228]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f023 0203 	bic.w	r2, r3, #3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	4936      	ldr	r1, [pc, #216]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800aec0:	4313      	orrs	r3, r2
 800aec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aec4:	f7fd fcc0 	bl	8008848 <HAL_GetTick>
 800aec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeca:	e00a      	b.n	800aee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aecc:	f7fd fcbc 	bl	8008848 <HAL_GetTick>
 800aed0:	4602      	mov	r2, r0
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d901      	bls.n	800aee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aede:	2303      	movs	r3, #3
 800aee0:	e053      	b.n	800af8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aee2:	4b2d      	ldr	r3, [pc, #180]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f003 020c 	and.w	r2, r3, #12
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d1eb      	bne.n	800aecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aef4:	4b27      	ldr	r3, [pc, #156]	; (800af94 <HAL_RCC_ClockConfig+0x1c0>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0307 	and.w	r3, r3, #7
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d210      	bcs.n	800af24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af02:	4b24      	ldr	r3, [pc, #144]	; (800af94 <HAL_RCC_ClockConfig+0x1c0>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f023 0207 	bic.w	r2, r3, #7
 800af0a:	4922      	ldr	r1, [pc, #136]	; (800af94 <HAL_RCC_ClockConfig+0x1c0>)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	4313      	orrs	r3, r2
 800af10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af12:	4b20      	ldr	r3, [pc, #128]	; (800af94 <HAL_RCC_ClockConfig+0x1c0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d001      	beq.n	800af24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e032      	b.n	800af8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d008      	beq.n	800af42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af30:	4b19      	ldr	r3, [pc, #100]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	4916      	ldr	r1, [pc, #88]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800af3e:	4313      	orrs	r3, r2
 800af40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0308 	and.w	r3, r3, #8
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d009      	beq.n	800af62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800af4e:	4b12      	ldr	r3, [pc, #72]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	490e      	ldr	r1, [pc, #56]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af62:	f000 f821 	bl	800afa8 <HAL_RCC_GetSysClockFreq>
 800af66:	4602      	mov	r2, r0
 800af68:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <HAL_RCC_ClockConfig+0x1c4>)
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	091b      	lsrs	r3, r3, #4
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	490a      	ldr	r1, [pc, #40]	; (800af9c <HAL_RCC_ClockConfig+0x1c8>)
 800af74:	5ccb      	ldrb	r3, [r1, r3]
 800af76:	fa22 f303 	lsr.w	r3, r2, r3
 800af7a:	4a09      	ldr	r2, [pc, #36]	; (800afa0 <HAL_RCC_ClockConfig+0x1cc>)
 800af7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af7e:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <HAL_RCC_ClockConfig+0x1d0>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4618      	mov	r0, r3
 800af84:	f7fd fc1e 	bl	80087c4 <HAL_InitTick>

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	40022000 	.word	0x40022000
 800af98:	40021000 	.word	0x40021000
 800af9c:	0800de20 	.word	0x0800de20
 800afa0:	200000a0 	.word	0x200000a0
 800afa4:	200000a4 	.word	0x200000a4

0800afa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	2300      	movs	r3, #0
 800afb4:	60bb      	str	r3, [r7, #8]
 800afb6:	2300      	movs	r3, #0
 800afb8:	617b      	str	r3, [r7, #20]
 800afba:	2300      	movs	r3, #0
 800afbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800afc2:	4b1e      	ldr	r3, [pc, #120]	; (800b03c <HAL_RCC_GetSysClockFreq+0x94>)
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f003 030c 	and.w	r3, r3, #12
 800afce:	2b04      	cmp	r3, #4
 800afd0:	d002      	beq.n	800afd8 <HAL_RCC_GetSysClockFreq+0x30>
 800afd2:	2b08      	cmp	r3, #8
 800afd4:	d003      	beq.n	800afde <HAL_RCC_GetSysClockFreq+0x36>
 800afd6:	e027      	b.n	800b028 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800afd8:	4b19      	ldr	r3, [pc, #100]	; (800b040 <HAL_RCC_GetSysClockFreq+0x98>)
 800afda:	613b      	str	r3, [r7, #16]
      break;
 800afdc:	e027      	b.n	800b02e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	0c9b      	lsrs	r3, r3, #18
 800afe2:	f003 030f 	and.w	r3, r3, #15
 800afe6:	4a17      	ldr	r2, [pc, #92]	; (800b044 <HAL_RCC_GetSysClockFreq+0x9c>)
 800afe8:	5cd3      	ldrb	r3, [r2, r3]
 800afea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d010      	beq.n	800b018 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aff6:	4b11      	ldr	r3, [pc, #68]	; (800b03c <HAL_RCC_GetSysClockFreq+0x94>)
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	0c5b      	lsrs	r3, r3, #17
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	4a11      	ldr	r2, [pc, #68]	; (800b048 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b002:	5cd3      	ldrb	r3, [r2, r3]
 800b004:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a0d      	ldr	r2, [pc, #52]	; (800b040 <HAL_RCC_GetSysClockFreq+0x98>)
 800b00a:	fb03 f202 	mul.w	r2, r3, r2
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	fbb2 f3f3 	udiv	r3, r2, r3
 800b014:	617b      	str	r3, [r7, #20]
 800b016:	e004      	b.n	800b022 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a0c      	ldr	r2, [pc, #48]	; (800b04c <HAL_RCC_GetSysClockFreq+0xa4>)
 800b01c:	fb02 f303 	mul.w	r3, r2, r3
 800b020:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	613b      	str	r3, [r7, #16]
      break;
 800b026:	e002      	b.n	800b02e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <HAL_RCC_GetSysClockFreq+0x98>)
 800b02a:	613b      	str	r3, [r7, #16]
      break;
 800b02c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b02e:	693b      	ldr	r3, [r7, #16]
}
 800b030:	4618      	mov	r0, r3
 800b032:	371c      	adds	r7, #28
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	40021000 	.word	0x40021000
 800b040:	007a1200 	.word	0x007a1200
 800b044:	0800de38 	.word	0x0800de38
 800b048:	0800de48 	.word	0x0800de48
 800b04c:	003d0900 	.word	0x003d0900

0800b050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b050:	b480      	push	{r7}
 800b052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b054:	4b02      	ldr	r3, [pc, #8]	; (800b060 <HAL_RCC_GetHCLKFreq+0x10>)
 800b056:	681b      	ldr	r3, [r3, #0]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bc80      	pop	{r7}
 800b05e:	4770      	bx	lr
 800b060:	200000a0 	.word	0x200000a0

0800b064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b068:	f7ff fff2 	bl	800b050 <HAL_RCC_GetHCLKFreq>
 800b06c:	4602      	mov	r2, r0
 800b06e:	4b05      	ldr	r3, [pc, #20]	; (800b084 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	0a1b      	lsrs	r3, r3, #8
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	4903      	ldr	r1, [pc, #12]	; (800b088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b07a:	5ccb      	ldrb	r3, [r1, r3]
 800b07c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b080:	4618      	mov	r0, r3
 800b082:	bd80      	pop	{r7, pc}
 800b084:	40021000 	.word	0x40021000
 800b088:	0800de30 	.word	0x0800de30

0800b08c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b090:	f7ff ffde 	bl	800b050 <HAL_RCC_GetHCLKFreq>
 800b094:	4602      	mov	r2, r0
 800b096:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	0adb      	lsrs	r3, r3, #11
 800b09c:	f003 0307 	and.w	r3, r3, #7
 800b0a0:	4903      	ldr	r1, [pc, #12]	; (800b0b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0a2:	5ccb      	ldrb	r3, [r1, r3]
 800b0a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	40021000 	.word	0x40021000
 800b0b0:	0800de30 	.word	0x0800de30

0800b0b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b0bc:	4b0a      	ldr	r3, [pc, #40]	; (800b0e8 <RCC_Delay+0x34>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a0a      	ldr	r2, [pc, #40]	; (800b0ec <RCC_Delay+0x38>)
 800b0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0c6:	0a5b      	lsrs	r3, r3, #9
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	fb02 f303 	mul.w	r3, r2, r3
 800b0ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b0d0:	bf00      	nop
  }
  while (Delay --);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	1e5a      	subs	r2, r3, #1
 800b0d6:	60fa      	str	r2, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f9      	bne.n	800b0d0 <RCC_Delay+0x1c>
}
 800b0dc:	bf00      	nop
 800b0de:	bf00      	nop
 800b0e0:	3714      	adds	r7, #20
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bc80      	pop	{r7}
 800b0e6:	4770      	bx	lr
 800b0e8:	200000a0 	.word	0x200000a0
 800b0ec:	10624dd3 	.word	0x10624dd3

0800b0f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e041      	b.n	800b186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d106      	bne.n	800b11c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7fd fa26 	bl	8008568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2202      	movs	r2, #2
 800b120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4619      	mov	r1, r3
 800b12e:	4610      	mov	r0, r2
 800b130:	f000 fa82 	bl	800b638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d001      	beq.n	800b1a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e044      	b.n	800b232 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0201 	orr.w	r2, r2, #1
 800b1be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a1d      	ldr	r2, [pc, #116]	; (800b23c <HAL_TIM_Base_Start_IT+0xac>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d018      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x6c>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a1c      	ldr	r2, [pc, #112]	; (800b240 <HAL_TIM_Base_Start_IT+0xb0>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d013      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x6c>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1dc:	d00e      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x6c>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a18      	ldr	r2, [pc, #96]	; (800b244 <HAL_TIM_Base_Start_IT+0xb4>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d009      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x6c>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a16      	ldr	r2, [pc, #88]	; (800b248 <HAL_TIM_Base_Start_IT+0xb8>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d004      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x6c>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a15      	ldr	r2, [pc, #84]	; (800b24c <HAL_TIM_Base_Start_IT+0xbc>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d111      	bne.n	800b220 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	f003 0307 	and.w	r3, r3, #7
 800b206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b06      	cmp	r3, #6
 800b20c:	d010      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f042 0201 	orr.w	r2, r2, #1
 800b21c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b21e:	e007      	b.n	800b230 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f042 0201 	orr.w	r2, r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	bc80      	pop	{r7}
 800b23a:	4770      	bx	lr
 800b23c:	40012c00 	.word	0x40012c00
 800b240:	40013400 	.word	0x40013400
 800b244:	40000400 	.word	0x40000400
 800b248:	40000800 	.word	0x40000800
 800b24c:	40000c00 	.word	0x40000c00

0800b250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b02      	cmp	r3, #2
 800b264:	d122      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	2b02      	cmp	r3, #2
 800b272:	d11b      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f06f 0202 	mvn.w	r2, #2
 800b27c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	f003 0303 	and.w	r3, r3, #3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f9b4 	bl	800b600 <HAL_TIM_IC_CaptureCallback>
 800b298:	e005      	b.n	800b2a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f9a7 	bl	800b5ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f9b6 	bl	800b612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d122      	bne.n	800b300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d11b      	bne.n	800b300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f06f 0204 	mvn.w	r2, #4
 800b2d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d003      	beq.n	800b2ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f98a 	bl	800b600 <HAL_TIM_IC_CaptureCallback>
 800b2ec:	e005      	b.n	800b2fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f97d 	bl	800b5ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f98c 	bl	800b612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	f003 0308 	and.w	r3, r3, #8
 800b30a:	2b08      	cmp	r3, #8
 800b30c:	d122      	bne.n	800b354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	f003 0308 	and.w	r3, r3, #8
 800b318:	2b08      	cmp	r3, #8
 800b31a:	d11b      	bne.n	800b354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f06f 0208 	mvn.w	r2, #8
 800b324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2204      	movs	r2, #4
 800b32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	f003 0303 	and.w	r3, r3, #3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f960 	bl	800b600 <HAL_TIM_IC_CaptureCallback>
 800b340:	e005      	b.n	800b34e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f953 	bl	800b5ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f962 	bl	800b612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	f003 0310 	and.w	r3, r3, #16
 800b35e:	2b10      	cmp	r3, #16
 800b360:	d122      	bne.n	800b3a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	f003 0310 	and.w	r3, r3, #16
 800b36c:	2b10      	cmp	r3, #16
 800b36e:	d11b      	bne.n	800b3a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f06f 0210 	mvn.w	r2, #16
 800b378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2208      	movs	r2, #8
 800b37e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d003      	beq.n	800b396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f936 	bl	800b600 <HAL_TIM_IC_CaptureCallback>
 800b394:	e005      	b.n	800b3a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f929 	bl	800b5ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f938 	bl	800b612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d10e      	bne.n	800b3d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	f003 0301 	and.w	r3, r3, #1
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d107      	bne.n	800b3d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f06f 0201 	mvn.w	r2, #1
 800b3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7fc fd62 	bl	8007e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3de:	2b80      	cmp	r3, #128	; 0x80
 800b3e0:	d10e      	bne.n	800b400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ec:	2b80      	cmp	r3, #128	; 0x80
 800b3ee:	d107      	bne.n	800b400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 faa1 	bl	800b942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b40a:	2b40      	cmp	r3, #64	; 0x40
 800b40c:	d10e      	bne.n	800b42c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b418:	2b40      	cmp	r3, #64	; 0x40
 800b41a:	d107      	bne.n	800b42c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f8fc 	bl	800b624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	f003 0320 	and.w	r3, r3, #32
 800b436:	2b20      	cmp	r3, #32
 800b438:	d10e      	bne.n	800b458 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f003 0320 	and.w	r3, r3, #32
 800b444:	2b20      	cmp	r3, #32
 800b446:	d107      	bne.n	800b458 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f06f 0220 	mvn.w	r2, #32
 800b450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fa6c 	bl	800b930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b458:	bf00      	nop
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b46a:	2300      	movs	r3, #0
 800b46c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b474:	2b01      	cmp	r3, #1
 800b476:	d101      	bne.n	800b47c <HAL_TIM_ConfigClockSource+0x1c>
 800b478:	2302      	movs	r3, #2
 800b47a:	e0b4      	b.n	800b5e6 <HAL_TIM_ConfigClockSource+0x186>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b49a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4b4:	d03e      	beq.n	800b534 <HAL_TIM_ConfigClockSource+0xd4>
 800b4b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ba:	f200 8087 	bhi.w	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
 800b4be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c2:	f000 8086 	beq.w	800b5d2 <HAL_TIM_ConfigClockSource+0x172>
 800b4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ca:	d87f      	bhi.n	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
 800b4cc:	2b70      	cmp	r3, #112	; 0x70
 800b4ce:	d01a      	beq.n	800b506 <HAL_TIM_ConfigClockSource+0xa6>
 800b4d0:	2b70      	cmp	r3, #112	; 0x70
 800b4d2:	d87b      	bhi.n	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
 800b4d4:	2b60      	cmp	r3, #96	; 0x60
 800b4d6:	d050      	beq.n	800b57a <HAL_TIM_ConfigClockSource+0x11a>
 800b4d8:	2b60      	cmp	r3, #96	; 0x60
 800b4da:	d877      	bhi.n	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
 800b4dc:	2b50      	cmp	r3, #80	; 0x50
 800b4de:	d03c      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0xfa>
 800b4e0:	2b50      	cmp	r3, #80	; 0x50
 800b4e2:	d873      	bhi.n	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
 800b4e4:	2b40      	cmp	r3, #64	; 0x40
 800b4e6:	d058      	beq.n	800b59a <HAL_TIM_ConfigClockSource+0x13a>
 800b4e8:	2b40      	cmp	r3, #64	; 0x40
 800b4ea:	d86f      	bhi.n	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
 800b4ec:	2b30      	cmp	r3, #48	; 0x30
 800b4ee:	d064      	beq.n	800b5ba <HAL_TIM_ConfigClockSource+0x15a>
 800b4f0:	2b30      	cmp	r3, #48	; 0x30
 800b4f2:	d86b      	bhi.n	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
 800b4f4:	2b20      	cmp	r3, #32
 800b4f6:	d060      	beq.n	800b5ba <HAL_TIM_ConfigClockSource+0x15a>
 800b4f8:	2b20      	cmp	r3, #32
 800b4fa:	d867      	bhi.n	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d05c      	beq.n	800b5ba <HAL_TIM_ConfigClockSource+0x15a>
 800b500:	2b10      	cmp	r3, #16
 800b502:	d05a      	beq.n	800b5ba <HAL_TIM_ConfigClockSource+0x15a>
 800b504:	e062      	b.n	800b5cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b516:	f000 f980 	bl	800b81a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	609a      	str	r2, [r3, #8]
      break;
 800b532:	e04f      	b.n	800b5d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b544:	f000 f969 	bl	800b81a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	689a      	ldr	r2, [r3, #8]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b556:	609a      	str	r2, [r3, #8]
      break;
 800b558:	e03c      	b.n	800b5d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b566:	461a      	mov	r2, r3
 800b568:	f000 f8e0 	bl	800b72c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2150      	movs	r1, #80	; 0x50
 800b572:	4618      	mov	r0, r3
 800b574:	f000 f937 	bl	800b7e6 <TIM_ITRx_SetConfig>
      break;
 800b578:	e02c      	b.n	800b5d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b586:	461a      	mov	r2, r3
 800b588:	f000 f8fe 	bl	800b788 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2160      	movs	r1, #96	; 0x60
 800b592:	4618      	mov	r0, r3
 800b594:	f000 f927 	bl	800b7e6 <TIM_ITRx_SetConfig>
      break;
 800b598:	e01c      	b.n	800b5d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f000 f8c0 	bl	800b72c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2140      	movs	r1, #64	; 0x40
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 f917 	bl	800b7e6 <TIM_ITRx_SetConfig>
      break;
 800b5b8:	e00c      	b.n	800b5d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	f000 f90e 	bl	800b7e6 <TIM_ITRx_SetConfig>
      break;
 800b5ca:	e003      	b.n	800b5d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b5d0:	e000      	b.n	800b5d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5f6:	bf00      	nop
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bc80      	pop	{r7}
 800b5fe:	4770      	bx	lr

0800b600 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr

0800b612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b612:	b480      	push	{r7}
 800b614:	b083      	sub	sp, #12
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b61a:	bf00      	nop
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	bc80      	pop	{r7}
 800b622:	4770      	bx	lr

0800b624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	bc80      	pop	{r7}
 800b634:	4770      	bx	lr
	...

0800b638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a33      	ldr	r2, [pc, #204]	; (800b718 <TIM_Base_SetConfig+0xe0>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d013      	beq.n	800b678 <TIM_Base_SetConfig+0x40>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a32      	ldr	r2, [pc, #200]	; (800b71c <TIM_Base_SetConfig+0xe4>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d00f      	beq.n	800b678 <TIM_Base_SetConfig+0x40>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b65e:	d00b      	beq.n	800b678 <TIM_Base_SetConfig+0x40>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a2f      	ldr	r2, [pc, #188]	; (800b720 <TIM_Base_SetConfig+0xe8>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d007      	beq.n	800b678 <TIM_Base_SetConfig+0x40>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a2e      	ldr	r2, [pc, #184]	; (800b724 <TIM_Base_SetConfig+0xec>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d003      	beq.n	800b678 <TIM_Base_SetConfig+0x40>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a2d      	ldr	r2, [pc, #180]	; (800b728 <TIM_Base_SetConfig+0xf0>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d108      	bne.n	800b68a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b67e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	4313      	orrs	r3, r2
 800b688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a22      	ldr	r2, [pc, #136]	; (800b718 <TIM_Base_SetConfig+0xe0>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d013      	beq.n	800b6ba <TIM_Base_SetConfig+0x82>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a21      	ldr	r2, [pc, #132]	; (800b71c <TIM_Base_SetConfig+0xe4>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d00f      	beq.n	800b6ba <TIM_Base_SetConfig+0x82>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6a0:	d00b      	beq.n	800b6ba <TIM_Base_SetConfig+0x82>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a1e      	ldr	r2, [pc, #120]	; (800b720 <TIM_Base_SetConfig+0xe8>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d007      	beq.n	800b6ba <TIM_Base_SetConfig+0x82>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a1d      	ldr	r2, [pc, #116]	; (800b724 <TIM_Base_SetConfig+0xec>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d003      	beq.n	800b6ba <TIM_Base_SetConfig+0x82>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a1c      	ldr	r2, [pc, #112]	; (800b728 <TIM_Base_SetConfig+0xf0>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d108      	bne.n	800b6cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a09      	ldr	r2, [pc, #36]	; (800b718 <TIM_Base_SetConfig+0xe0>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d003      	beq.n	800b700 <TIM_Base_SetConfig+0xc8>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a08      	ldr	r2, [pc, #32]	; (800b71c <TIM_Base_SetConfig+0xe4>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d103      	bne.n	800b708 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	691a      	ldr	r2, [r3, #16]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	615a      	str	r2, [r3, #20]
}
 800b70e:	bf00      	nop
 800b710:	3714      	adds	r7, #20
 800b712:	46bd      	mov	sp, r7
 800b714:	bc80      	pop	{r7}
 800b716:	4770      	bx	lr
 800b718:	40012c00 	.word	0x40012c00
 800b71c:	40013400 	.word	0x40013400
 800b720:	40000400 	.word	0x40000400
 800b724:	40000800 	.word	0x40000800
 800b728:	40000c00 	.word	0x40000c00

0800b72c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a1b      	ldr	r3, [r3, #32]
 800b73c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6a1b      	ldr	r3, [r3, #32]
 800b742:	f023 0201 	bic.w	r2, r3, #1
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	699b      	ldr	r3, [r3, #24]
 800b74e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	4313      	orrs	r3, r2
 800b760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f023 030a 	bic.w	r3, r3, #10
 800b768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	4313      	orrs	r3, r2
 800b770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	621a      	str	r2, [r3, #32]
}
 800b77e:	bf00      	nop
 800b780:	371c      	adds	r7, #28
 800b782:	46bd      	mov	sp, r7
 800b784:	bc80      	pop	{r7}
 800b786:	4770      	bx	lr

0800b788 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a1b      	ldr	r3, [r3, #32]
 800b798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6a1b      	ldr	r3, [r3, #32]
 800b79e:	f023 0210 	bic.w	r2, r3, #16
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	031b      	lsls	r3, r3, #12
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	011b      	lsls	r3, r3, #4
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	621a      	str	r2, [r3, #32]
}
 800b7dc:	bf00      	nop
 800b7de:	371c      	adds	r7, #28
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bc80      	pop	{r7}
 800b7e4:	4770      	bx	lr

0800b7e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b085      	sub	sp, #20
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4313      	orrs	r3, r2
 800b804:	f043 0307 	orr.w	r3, r3, #7
 800b808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	609a      	str	r2, [r3, #8]
}
 800b810:	bf00      	nop
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	bc80      	pop	{r7}
 800b818:	4770      	bx	lr

0800b81a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b81a:	b480      	push	{r7}
 800b81c:	b087      	sub	sp, #28
 800b81e:	af00      	add	r7, sp, #0
 800b820:	60f8      	str	r0, [r7, #12]
 800b822:	60b9      	str	r1, [r7, #8]
 800b824:	607a      	str	r2, [r7, #4]
 800b826:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b834:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	021a      	lsls	r2, r3, #8
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	431a      	orrs	r2, r3
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	4313      	orrs	r3, r2
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	4313      	orrs	r3, r2
 800b846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	609a      	str	r2, [r3, #8]
}
 800b84e:	bf00      	nop
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	bc80      	pop	{r7}
 800b856:	4770      	bx	lr

0800b858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d101      	bne.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b86c:	2302      	movs	r3, #2
 800b86e:	e050      	b.n	800b912 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2202      	movs	r2, #2
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a1b      	ldr	r2, [pc, #108]	; (800b91c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d018      	beq.n	800b8e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a19      	ldr	r2, [pc, #100]	; (800b920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d013      	beq.n	800b8e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c6:	d00e      	beq.n	800b8e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a15      	ldr	r2, [pc, #84]	; (800b924 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d009      	beq.n	800b8e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a14      	ldr	r2, [pc, #80]	; (800b928 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d004      	beq.n	800b8e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a12      	ldr	r2, [pc, #72]	; (800b92c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d10c      	bne.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	bc80      	pop	{r7}
 800b91a:	4770      	bx	lr
 800b91c:	40012c00 	.word	0x40012c00
 800b920:	40013400 	.word	0x40013400
 800b924:	40000400 	.word	0x40000400
 800b928:	40000800 	.word	0x40000800
 800b92c:	40000c00 	.word	0x40000c00

0800b930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bc80      	pop	{r7}
 800b940:	4770      	bx	lr

0800b942 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b942:	b480      	push	{r7}
 800b944:	b083      	sub	sp, #12
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b94a:	bf00      	nop
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	bc80      	pop	{r7}
 800b952:	4770      	bx	lr

0800b954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e042      	b.n	800b9ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d106      	bne.n	800b980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7fc fe1a 	bl	80085b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2224      	movs	r2, #36	; 0x24
 800b984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68da      	ldr	r2, [r3, #12]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fcb5 	bl	800c308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	691a      	ldr	r2, [r3, #16]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	695a      	ldr	r2, [r3, #20]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68da      	ldr	r2, [r3, #12]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b20      	cmp	r3, #32
 800ba0c:	d121      	bne.n	800ba52 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <HAL_UART_Transmit_IT+0x26>
 800ba14:	88fb      	ldrh	r3, [r7, #6]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d101      	bne.n	800ba1e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e01a      	b.n	800ba54 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	88fa      	ldrh	r2, [r7, #6]
 800ba28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	88fa      	ldrh	r2, [r7, #6]
 800ba2e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2221      	movs	r2, #33	; 0x21
 800ba3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba4c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e000      	b.n	800ba54 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ba52:	2302      	movs	r3, #2
  }
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr
	...

0800ba60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b0ba      	sub	sp, #232	; 0xe8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba96:	f003 030f 	and.w	r3, r3, #15
 800ba9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10f      	bne.n	800bac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800baa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <HAL_UART_IRQHandler+0x66>
 800bab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fb63 	bl	800c18a <UART_Receive_IT>
      return;
 800bac4:	e25b      	b.n	800bf7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 80de 	beq.w	800bc8c <HAL_UART_IRQHandler+0x22c>
 800bad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bad4:	f003 0301 	and.w	r3, r3, #1
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d106      	bne.n	800baea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800badc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bae0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 80d1 	beq.w	800bc8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800baea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00b      	beq.n	800bb0e <HAL_UART_IRQHandler+0xae>
 800baf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d005      	beq.n	800bb0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb06:	f043 0201 	orr.w	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb12:	f003 0304 	and.w	r3, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00b      	beq.n	800bb32 <HAL_UART_IRQHandler+0xd2>
 800bb1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d005      	beq.n	800bb32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2a:	f043 0202 	orr.w	r2, r3, #2
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb36:	f003 0302 	and.w	r3, r3, #2
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00b      	beq.n	800bb56 <HAL_UART_IRQHandler+0xf6>
 800bb3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4e:	f043 0204 	orr.w	r2, r3, #4
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb5a:	f003 0308 	and.w	r3, r3, #8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d011      	beq.n	800bb86 <HAL_UART_IRQHandler+0x126>
 800bb62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb66:	f003 0320 	and.w	r3, r3, #32
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d105      	bne.n	800bb7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d005      	beq.n	800bb86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb7e:	f043 0208 	orr.w	r2, r3, #8
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 81f2 	beq.w	800bf74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb94:	f003 0320 	and.w	r3, r3, #32
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d008      	beq.n	800bbae <HAL_UART_IRQHandler+0x14e>
 800bb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba0:	f003 0320 	and.w	r3, r3, #32
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 faee 	bl	800c18a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bf14      	ite	ne
 800bbbc:	2301      	movne	r3, #1
 800bbbe:	2300      	moveq	r3, #0
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d103      	bne.n	800bbda <HAL_UART_IRQHandler+0x17a>
 800bbd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d04f      	beq.n	800bc7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f9f8 	bl	800bfd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d041      	beq.n	800bc72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3314      	adds	r3, #20
 800bbf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3314      	adds	r3, #20
 800bc16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bc1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bc1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bc26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bc32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1d9      	bne.n	800bbee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d013      	beq.n	800bc6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc46:	4a7e      	ldr	r2, [pc, #504]	; (800be40 <HAL_UART_IRQHandler+0x3e0>)
 800bc48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fd f86c 	bl	8008d2c <HAL_DMA_Abort_IT>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d016      	beq.n	800bc88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc64:	4610      	mov	r0, r2
 800bc66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc68:	e00e      	b.n	800bc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f99c 	bl	800bfa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc70:	e00a      	b.n	800bc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f998 	bl	800bfa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc78:	e006      	b.n	800bc88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f994 	bl	800bfa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc86:	e175      	b.n	800bf74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc88:	bf00      	nop
    return;
 800bc8a:	e173      	b.n	800bf74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	f040 814f 	bne.w	800bf34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9a:	f003 0310 	and.w	r3, r3, #16
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 8148 	beq.w	800bf34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bca8:	f003 0310 	and.w	r3, r3, #16
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 8141 	beq.w	800bf34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60bb      	str	r3, [r7, #8]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	60bb      	str	r3, [r7, #8]
 800bcc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80b6 	beq.w	800be44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 8145 	beq.w	800bf78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	f080 813e 	bcs.w	800bf78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd08:	699b      	ldr	r3, [r3, #24]
 800bd0a:	2b20      	cmp	r3, #32
 800bd0c:	f000 8088 	beq.w	800be20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	330c      	adds	r3, #12
 800bd16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd1e:	e853 3f00 	ldrex	r3, [r3]
 800bd22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	330c      	adds	r3, #12
 800bd38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd3c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd4c:	e841 2300 	strex	r3, r2, [r1]
 800bd50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1d9      	bne.n	800bd10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3314      	adds	r3, #20
 800bd62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd66:	e853 3f00 	ldrex	r3, [r3]
 800bd6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd6e:	f023 0301 	bic.w	r3, r3, #1
 800bd72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3314      	adds	r3, #20
 800bd7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd8c:	e841 2300 	strex	r3, r2, [r1]
 800bd90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e1      	bne.n	800bd5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3314      	adds	r3, #20
 800bd9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bda2:	e853 3f00 	ldrex	r3, [r3]
 800bda6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bda8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	3314      	adds	r3, #20
 800bdb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bdbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bdbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bdc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bdc4:	e841 2300 	strex	r3, r2, [r1]
 800bdc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bdca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e3      	bne.n	800bd98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	330c      	adds	r3, #12
 800bde4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde8:	e853 3f00 	ldrex	r3, [r3]
 800bdec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bdee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdf0:	f023 0310 	bic.w	r3, r3, #16
 800bdf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	330c      	adds	r3, #12
 800bdfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800be02:	65ba      	str	r2, [r7, #88]	; 0x58
 800be04:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be0a:	e841 2300 	strex	r3, r2, [r1]
 800be0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1e3      	bne.n	800bdde <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fc ff4b 	bl	8008cb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be2e:	b29b      	uxth	r3, r3
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	b29b      	uxth	r3, r3
 800be34:	4619      	mov	r1, r3
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f8bf 	bl	800bfba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be3c:	e09c      	b.n	800bf78 <HAL_UART_IRQHandler+0x518>
 800be3e:	bf00      	nop
 800be40:	0800c095 	.word	0x0800c095
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be58:	b29b      	uxth	r3, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 808e 	beq.w	800bf7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 8089 	beq.w	800bf7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	330c      	adds	r3, #12
 800be70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	e853 3f00 	ldrex	r3, [r3]
 800be78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	330c      	adds	r3, #12
 800be8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be8e:	647a      	str	r2, [r7, #68]	; 0x44
 800be90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be96:	e841 2300 	strex	r3, r2, [r1]
 800be9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1e3      	bne.n	800be6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3314      	adds	r3, #20
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beac:	e853 3f00 	ldrex	r3, [r3]
 800beb0:	623b      	str	r3, [r7, #32]
   return(result);
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	f023 0301 	bic.w	r3, r3, #1
 800beb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3314      	adds	r3, #20
 800bec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bec6:	633a      	str	r2, [r7, #48]	; 0x30
 800bec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800becc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bece:	e841 2300 	strex	r3, r2, [r1]
 800bed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1e3      	bne.n	800bea2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2220      	movs	r2, #32
 800bede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	330c      	adds	r3, #12
 800beee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	e853 3f00 	ldrex	r3, [r3]
 800bef6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0310 	bic.w	r3, r3, #16
 800befe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	330c      	adds	r3, #12
 800bf08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bf0c:	61fa      	str	r2, [r7, #28]
 800bf0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf10:	69b9      	ldr	r1, [r7, #24]
 800bf12:	69fa      	ldr	r2, [r7, #28]
 800bf14:	e841 2300 	strex	r3, r2, [r1]
 800bf18:	617b      	str	r3, [r7, #20]
   return(result);
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1e3      	bne.n	800bee8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2202      	movs	r2, #2
 800bf24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 f844 	bl	800bfba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf32:	e023      	b.n	800bf7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d009      	beq.n	800bf54 <HAL_UART_IRQHandler+0x4f4>
 800bf40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d003      	beq.n	800bf54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f8b5 	bl	800c0bc <UART_Transmit_IT>
    return;
 800bf52:	e014      	b.n	800bf7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00e      	beq.n	800bf7e <HAL_UART_IRQHandler+0x51e>
 800bf60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d008      	beq.n	800bf7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f8f4 	bl	800c15a <UART_EndTransmit_IT>
    return;
 800bf72:	e004      	b.n	800bf7e <HAL_UART_IRQHandler+0x51e>
    return;
 800bf74:	bf00      	nop
 800bf76:	e002      	b.n	800bf7e <HAL_UART_IRQHandler+0x51e>
      return;
 800bf78:	bf00      	nop
 800bf7a:	e000      	b.n	800bf7e <HAL_UART_IRQHandler+0x51e>
      return;
 800bf7c:	bf00      	nop
  }
}
 800bf7e:	37e8      	adds	r7, #232	; 0xe8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bc80      	pop	{r7}
 800bf94:	4770      	bx	lr

0800bf96 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bc80      	pop	{r7}
 800bfa6:	4770      	bx	lr

0800bfa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bc80      	pop	{r7}
 800bfb8:	4770      	bx	lr

0800bfba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b083      	sub	sp, #12
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfc6:	bf00      	nop
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bc80      	pop	{r7}
 800bfce:	4770      	bx	lr

0800bfd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b095      	sub	sp, #84	; 0x54
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	330c      	adds	r3, #12
 800bfde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe2:	e853 3f00 	ldrex	r3, [r3]
 800bfe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	330c      	adds	r3, #12
 800bff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bff8:	643a      	str	r2, [r7, #64]	; 0x40
 800bffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c000:	e841 2300 	strex	r3, r2, [r1]
 800c004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1e5      	bne.n	800bfd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	3314      	adds	r3, #20
 800c012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	e853 3f00 	ldrex	r3, [r3]
 800c01a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	f023 0301 	bic.w	r3, r3, #1
 800c022:	64bb      	str	r3, [r7, #72]	; 0x48
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3314      	adds	r3, #20
 800c02a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c02c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c02e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c034:	e841 2300 	strex	r3, r2, [r1]
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1e5      	bne.n	800c00c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c044:	2b01      	cmp	r3, #1
 800c046:	d119      	bne.n	800c07c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	330c      	adds	r3, #12
 800c04e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	e853 3f00 	ldrex	r3, [r3]
 800c056:	60bb      	str	r3, [r7, #8]
   return(result);
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	f023 0310 	bic.w	r3, r3, #16
 800c05e:	647b      	str	r3, [r7, #68]	; 0x44
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	330c      	adds	r3, #12
 800c066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c068:	61ba      	str	r2, [r7, #24]
 800c06a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06c:	6979      	ldr	r1, [r7, #20]
 800c06e:	69ba      	ldr	r2, [r7, #24]
 800c070:	e841 2300 	strex	r3, r2, [r1]
 800c074:	613b      	str	r3, [r7, #16]
   return(result);
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1e5      	bne.n	800c048 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2220      	movs	r2, #32
 800c080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c08a:	bf00      	nop
 800c08c:	3754      	adds	r7, #84	; 0x54
 800c08e:	46bd      	mov	sp, r7
 800c090:	bc80      	pop	{r7}
 800c092:	4770      	bx	lr

0800c094 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f7ff ff7a 	bl	800bfa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0b4:	bf00      	nop
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b21      	cmp	r3, #33	; 0x21
 800c0ce:	d13e      	bne.n	800c14e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d8:	d114      	bne.n	800c104 <UART_Transmit_IT+0x48>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d110      	bne.n	800c104 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a1b      	ldr	r3, [r3, #32]
 800c0fc:	1c9a      	adds	r2, r3, #2
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	621a      	str	r2, [r3, #32]
 800c102:	e008      	b.n	800c116 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a1b      	ldr	r3, [r3, #32]
 800c108:	1c59      	adds	r1, r3, #1
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	6211      	str	r1, [r2, #32]
 800c10e:	781a      	ldrb	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	3b01      	subs	r3, #1
 800c11e:	b29b      	uxth	r3, r3
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	4619      	mov	r1, r3
 800c124:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10f      	bne.n	800c14a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68da      	ldr	r2, [r3, #12]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c138:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68da      	ldr	r2, [r3, #12]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c148:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	e000      	b.n	800c150 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c14e:	2302      	movs	r3, #2
  }
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	bc80      	pop	{r7}
 800c158:	4770      	bx	lr

0800c15a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68da      	ldr	r2, [r3, #12]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c170:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2220      	movs	r2, #32
 800c176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff ff02 	bl	800bf84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b08c      	sub	sp, #48	; 0x30
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b22      	cmp	r3, #34	; 0x22
 800c19c:	f040 80ae 	bne.w	800c2fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a8:	d117      	bne.n	800c1da <UART_Receive_IT+0x50>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d113      	bne.n	800c1da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d2:	1c9a      	adds	r2, r3, #2
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	629a      	str	r2, [r3, #40]	; 0x28
 800c1d8:	e026      	b.n	800c228 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ec:	d007      	beq.n	800c1fe <UART_Receive_IT+0x74>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10a      	bne.n	800c20c <UART_Receive_IT+0x82>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	b2da      	uxtb	r2, r3
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	701a      	strb	r2, [r3, #0]
 800c20a:	e008      	b.n	800c21e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	3b01      	subs	r3, #1
 800c230:	b29b      	uxth	r3, r3
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	4619      	mov	r1, r3
 800c236:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d15d      	bne.n	800c2f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68da      	ldr	r2, [r3, #12]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0220 	bic.w	r2, r2, #32
 800c24a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c25a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	695a      	ldr	r2, [r3, #20]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f022 0201 	bic.w	r2, r2, #1
 800c26a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2220      	movs	r2, #32
 800c270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d135      	bne.n	800c2ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	330c      	adds	r3, #12
 800c28e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	e853 3f00 	ldrex	r3, [r3]
 800c296:	613b      	str	r3, [r7, #16]
   return(result);
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f023 0310 	bic.w	r3, r3, #16
 800c29e:	627b      	str	r3, [r7, #36]	; 0x24
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	330c      	adds	r3, #12
 800c2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a8:	623a      	str	r2, [r7, #32]
 800c2aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ac:	69f9      	ldr	r1, [r7, #28]
 800c2ae:	6a3a      	ldr	r2, [r7, #32]
 800c2b0:	e841 2300 	strex	r3, r2, [r1]
 800c2b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1e5      	bne.n	800c288 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0310 	and.w	r3, r3, #16
 800c2c6:	2b10      	cmp	r3, #16
 800c2c8:	d10a      	bne.n	800c2e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	60fb      	str	r3, [r7, #12]
 800c2de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff fe67 	bl	800bfba <HAL_UARTEx_RxEventCallback>
 800c2ec:	e002      	b.n	800c2f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff fe51 	bl	800bf96 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e002      	b.n	800c2fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	e000      	b.n	800c2fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2fc:	2302      	movs	r3, #2
  }
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3730      	adds	r7, #48	; 0x30
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
	...

0800c308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68da      	ldr	r2, [r3, #12]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	430a      	orrs	r2, r1
 800c324:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689a      	ldr	r2, [r3, #8]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	431a      	orrs	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	4313      	orrs	r3, r2
 800c336:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c342:	f023 030c 	bic.w	r3, r3, #12
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	6812      	ldr	r2, [r2, #0]
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	430b      	orrs	r3, r1
 800c34e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	699a      	ldr	r2, [r3, #24]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	430a      	orrs	r2, r1
 800c364:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a2c      	ldr	r2, [pc, #176]	; (800c41c <UART_SetConfig+0x114>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d103      	bne.n	800c378 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c370:	f7fe fe8c 	bl	800b08c <HAL_RCC_GetPCLK2Freq>
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	e002      	b.n	800c37e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c378:	f7fe fe74 	bl	800b064 <HAL_RCC_GetPCLK1Freq>
 800c37c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	4613      	mov	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	009a      	lsls	r2, r3, #2
 800c388:	441a      	add	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	fbb2 f3f3 	udiv	r3, r2, r3
 800c394:	4a22      	ldr	r2, [pc, #136]	; (800c420 <UART_SetConfig+0x118>)
 800c396:	fba2 2303 	umull	r2, r3, r2, r3
 800c39a:	095b      	lsrs	r3, r3, #5
 800c39c:	0119      	lsls	r1, r3, #4
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	009a      	lsls	r2, r3, #2
 800c3a8:	441a      	add	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3b4:	4b1a      	ldr	r3, [pc, #104]	; (800c420 <UART_SetConfig+0x118>)
 800c3b6:	fba3 0302 	umull	r0, r3, r3, r2
 800c3ba:	095b      	lsrs	r3, r3, #5
 800c3bc:	2064      	movs	r0, #100	; 0x64
 800c3be:	fb00 f303 	mul.w	r3, r0, r3
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	011b      	lsls	r3, r3, #4
 800c3c6:	3332      	adds	r3, #50	; 0x32
 800c3c8:	4a15      	ldr	r2, [pc, #84]	; (800c420 <UART_SetConfig+0x118>)
 800c3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ce:	095b      	lsrs	r3, r3, #5
 800c3d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3d4:	4419      	add	r1, r3
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	009a      	lsls	r2, r3, #2
 800c3e0:	441a      	add	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3ec:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <UART_SetConfig+0x118>)
 800c3ee:	fba3 0302 	umull	r0, r3, r3, r2
 800c3f2:	095b      	lsrs	r3, r3, #5
 800c3f4:	2064      	movs	r0, #100	; 0x64
 800c3f6:	fb00 f303 	mul.w	r3, r0, r3
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	011b      	lsls	r3, r3, #4
 800c3fe:	3332      	adds	r3, #50	; 0x32
 800c400:	4a07      	ldr	r2, [pc, #28]	; (800c420 <UART_SetConfig+0x118>)
 800c402:	fba2 2303 	umull	r2, r3, r2, r3
 800c406:	095b      	lsrs	r3, r3, #5
 800c408:	f003 020f 	and.w	r2, r3, #15
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	440a      	add	r2, r1
 800c412:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c414:	bf00      	nop
 800c416:	3710      	adds	r7, #16
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	40013800 	.word	0x40013800
 800c420:	51eb851f 	.word	0x51eb851f

0800c424 <__itoa>:
 800c424:	1e93      	subs	r3, r2, #2
 800c426:	2b22      	cmp	r3, #34	; 0x22
 800c428:	b510      	push	{r4, lr}
 800c42a:	460c      	mov	r4, r1
 800c42c:	d904      	bls.n	800c438 <__itoa+0x14>
 800c42e:	2300      	movs	r3, #0
 800c430:	461c      	mov	r4, r3
 800c432:	700b      	strb	r3, [r1, #0]
 800c434:	4620      	mov	r0, r4
 800c436:	bd10      	pop	{r4, pc}
 800c438:	2a0a      	cmp	r2, #10
 800c43a:	d109      	bne.n	800c450 <__itoa+0x2c>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	da07      	bge.n	800c450 <__itoa+0x2c>
 800c440:	232d      	movs	r3, #45	; 0x2d
 800c442:	700b      	strb	r3, [r1, #0]
 800c444:	2101      	movs	r1, #1
 800c446:	4240      	negs	r0, r0
 800c448:	4421      	add	r1, r4
 800c44a:	f000 f8d9 	bl	800c600 <__utoa>
 800c44e:	e7f1      	b.n	800c434 <__itoa+0x10>
 800c450:	2100      	movs	r1, #0
 800c452:	e7f9      	b.n	800c448 <__itoa+0x24>

0800c454 <itoa>:
 800c454:	f7ff bfe6 	b.w	800c424 <__itoa>

0800c458 <malloc>:
 800c458:	4b02      	ldr	r3, [pc, #8]	; (800c464 <malloc+0xc>)
 800c45a:	4601      	mov	r1, r0
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	f000 b823 	b.w	800c4a8 <_malloc_r>
 800c462:	bf00      	nop
 800c464:	200000f8 	.word	0x200000f8

0800c468 <sbrk_aligned>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	4e0e      	ldr	r6, [pc, #56]	; (800c4a4 <sbrk_aligned+0x3c>)
 800c46c:	460c      	mov	r4, r1
 800c46e:	6831      	ldr	r1, [r6, #0]
 800c470:	4605      	mov	r5, r0
 800c472:	b911      	cbnz	r1, 800c47a <sbrk_aligned+0x12>
 800c474:	f000 f92a 	bl	800c6cc <_sbrk_r>
 800c478:	6030      	str	r0, [r6, #0]
 800c47a:	4621      	mov	r1, r4
 800c47c:	4628      	mov	r0, r5
 800c47e:	f000 f925 	bl	800c6cc <_sbrk_r>
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	d00a      	beq.n	800c49c <sbrk_aligned+0x34>
 800c486:	1cc4      	adds	r4, r0, #3
 800c488:	f024 0403 	bic.w	r4, r4, #3
 800c48c:	42a0      	cmp	r0, r4
 800c48e:	d007      	beq.n	800c4a0 <sbrk_aligned+0x38>
 800c490:	1a21      	subs	r1, r4, r0
 800c492:	4628      	mov	r0, r5
 800c494:	f000 f91a 	bl	800c6cc <_sbrk_r>
 800c498:	3001      	adds	r0, #1
 800c49a:	d101      	bne.n	800c4a0 <sbrk_aligned+0x38>
 800c49c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	200004ac 	.word	0x200004ac

0800c4a8 <_malloc_r>:
 800c4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4ac:	1ccd      	adds	r5, r1, #3
 800c4ae:	f025 0503 	bic.w	r5, r5, #3
 800c4b2:	3508      	adds	r5, #8
 800c4b4:	2d0c      	cmp	r5, #12
 800c4b6:	bf38      	it	cc
 800c4b8:	250c      	movcc	r5, #12
 800c4ba:	2d00      	cmp	r5, #0
 800c4bc:	4607      	mov	r7, r0
 800c4be:	db01      	blt.n	800c4c4 <_malloc_r+0x1c>
 800c4c0:	42a9      	cmp	r1, r5
 800c4c2:	d905      	bls.n	800c4d0 <_malloc_r+0x28>
 800c4c4:	230c      	movs	r3, #12
 800c4c6:	2600      	movs	r6, #0
 800c4c8:	603b      	str	r3, [r7, #0]
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c5a4 <_malloc_r+0xfc>
 800c4d4:	f000 f868 	bl	800c5a8 <__malloc_lock>
 800c4d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4dc:	461c      	mov	r4, r3
 800c4de:	bb5c      	cbnz	r4, 800c538 <_malloc_r+0x90>
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	f7ff ffc0 	bl	800c468 <sbrk_aligned>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	d155      	bne.n	800c59a <_malloc_r+0xf2>
 800c4ee:	f8d8 4000 	ldr.w	r4, [r8]
 800c4f2:	4626      	mov	r6, r4
 800c4f4:	2e00      	cmp	r6, #0
 800c4f6:	d145      	bne.n	800c584 <_malloc_r+0xdc>
 800c4f8:	2c00      	cmp	r4, #0
 800c4fa:	d048      	beq.n	800c58e <_malloc_r+0xe6>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	4631      	mov	r1, r6
 800c500:	4638      	mov	r0, r7
 800c502:	eb04 0903 	add.w	r9, r4, r3
 800c506:	f000 f8e1 	bl	800c6cc <_sbrk_r>
 800c50a:	4581      	cmp	r9, r0
 800c50c:	d13f      	bne.n	800c58e <_malloc_r+0xe6>
 800c50e:	6821      	ldr	r1, [r4, #0]
 800c510:	4638      	mov	r0, r7
 800c512:	1a6d      	subs	r5, r5, r1
 800c514:	4629      	mov	r1, r5
 800c516:	f7ff ffa7 	bl	800c468 <sbrk_aligned>
 800c51a:	3001      	adds	r0, #1
 800c51c:	d037      	beq.n	800c58e <_malloc_r+0xe6>
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	442b      	add	r3, r5
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	f8d8 3000 	ldr.w	r3, [r8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d038      	beq.n	800c59e <_malloc_r+0xf6>
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	42a2      	cmp	r2, r4
 800c530:	d12b      	bne.n	800c58a <_malloc_r+0xe2>
 800c532:	2200      	movs	r2, #0
 800c534:	605a      	str	r2, [r3, #4]
 800c536:	e00f      	b.n	800c558 <_malloc_r+0xb0>
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	1b52      	subs	r2, r2, r5
 800c53c:	d41f      	bmi.n	800c57e <_malloc_r+0xd6>
 800c53e:	2a0b      	cmp	r2, #11
 800c540:	d917      	bls.n	800c572 <_malloc_r+0xca>
 800c542:	1961      	adds	r1, r4, r5
 800c544:	42a3      	cmp	r3, r4
 800c546:	6025      	str	r5, [r4, #0]
 800c548:	bf18      	it	ne
 800c54a:	6059      	strne	r1, [r3, #4]
 800c54c:	6863      	ldr	r3, [r4, #4]
 800c54e:	bf08      	it	eq
 800c550:	f8c8 1000 	streq.w	r1, [r8]
 800c554:	5162      	str	r2, [r4, r5]
 800c556:	604b      	str	r3, [r1, #4]
 800c558:	4638      	mov	r0, r7
 800c55a:	f104 060b 	add.w	r6, r4, #11
 800c55e:	f000 f829 	bl	800c5b4 <__malloc_unlock>
 800c562:	f026 0607 	bic.w	r6, r6, #7
 800c566:	1d23      	adds	r3, r4, #4
 800c568:	1af2      	subs	r2, r6, r3
 800c56a:	d0ae      	beq.n	800c4ca <_malloc_r+0x22>
 800c56c:	1b9b      	subs	r3, r3, r6
 800c56e:	50a3      	str	r3, [r4, r2]
 800c570:	e7ab      	b.n	800c4ca <_malloc_r+0x22>
 800c572:	42a3      	cmp	r3, r4
 800c574:	6862      	ldr	r2, [r4, #4]
 800c576:	d1dd      	bne.n	800c534 <_malloc_r+0x8c>
 800c578:	f8c8 2000 	str.w	r2, [r8]
 800c57c:	e7ec      	b.n	800c558 <_malloc_r+0xb0>
 800c57e:	4623      	mov	r3, r4
 800c580:	6864      	ldr	r4, [r4, #4]
 800c582:	e7ac      	b.n	800c4de <_malloc_r+0x36>
 800c584:	4634      	mov	r4, r6
 800c586:	6876      	ldr	r6, [r6, #4]
 800c588:	e7b4      	b.n	800c4f4 <_malloc_r+0x4c>
 800c58a:	4613      	mov	r3, r2
 800c58c:	e7cc      	b.n	800c528 <_malloc_r+0x80>
 800c58e:	230c      	movs	r3, #12
 800c590:	4638      	mov	r0, r7
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	f000 f80e 	bl	800c5b4 <__malloc_unlock>
 800c598:	e797      	b.n	800c4ca <_malloc_r+0x22>
 800c59a:	6025      	str	r5, [r4, #0]
 800c59c:	e7dc      	b.n	800c558 <_malloc_r+0xb0>
 800c59e:	605b      	str	r3, [r3, #4]
 800c5a0:	deff      	udf	#255	; 0xff
 800c5a2:	bf00      	nop
 800c5a4:	200004a8 	.word	0x200004a8

0800c5a8 <__malloc_lock>:
 800c5a8:	4801      	ldr	r0, [pc, #4]	; (800c5b0 <__malloc_lock+0x8>)
 800c5aa:	f000 b8c9 	b.w	800c740 <__retarget_lock_acquire_recursive>
 800c5ae:	bf00      	nop
 800c5b0:	200005e8 	.word	0x200005e8

0800c5b4 <__malloc_unlock>:
 800c5b4:	4801      	ldr	r0, [pc, #4]	; (800c5bc <__malloc_unlock+0x8>)
 800c5b6:	f000 b8c4 	b.w	800c742 <__retarget_lock_release_recursive>
 800c5ba:	bf00      	nop
 800c5bc:	200005e8 	.word	0x200005e8

0800c5c0 <siprintf>:
 800c5c0:	b40e      	push	{r1, r2, r3}
 800c5c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5c6:	b500      	push	{lr}
 800c5c8:	b09c      	sub	sp, #112	; 0x70
 800c5ca:	ab1d      	add	r3, sp, #116	; 0x74
 800c5cc:	9002      	str	r0, [sp, #8]
 800c5ce:	9006      	str	r0, [sp, #24]
 800c5d0:	9107      	str	r1, [sp, #28]
 800c5d2:	9104      	str	r1, [sp, #16]
 800c5d4:	4808      	ldr	r0, [pc, #32]	; (800c5f8 <siprintf+0x38>)
 800c5d6:	4909      	ldr	r1, [pc, #36]	; (800c5fc <siprintf+0x3c>)
 800c5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5dc:	9105      	str	r1, [sp, #20]
 800c5de:	6800      	ldr	r0, [r0, #0]
 800c5e0:	a902      	add	r1, sp, #8
 800c5e2:	9301      	str	r3, [sp, #4]
 800c5e4:	f000 f958 	bl	800c898 <_svfiprintf_r>
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	9b02      	ldr	r3, [sp, #8]
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	b01c      	add	sp, #112	; 0x70
 800c5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f4:	b003      	add	sp, #12
 800c5f6:	4770      	bx	lr
 800c5f8:	200000f8 	.word	0x200000f8
 800c5fc:	ffff0208 	.word	0xffff0208

0800c600 <__utoa>:
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	b08b      	sub	sp, #44	; 0x2c
 800c604:	4605      	mov	r5, r0
 800c606:	460b      	mov	r3, r1
 800c608:	466e      	mov	r6, sp
 800c60a:	4c1d      	ldr	r4, [pc, #116]	; (800c680 <__utoa+0x80>)
 800c60c:	f104 0c20 	add.w	ip, r4, #32
 800c610:	4637      	mov	r7, r6
 800c612:	6820      	ldr	r0, [r4, #0]
 800c614:	6861      	ldr	r1, [r4, #4]
 800c616:	3408      	adds	r4, #8
 800c618:	c703      	stmia	r7!, {r0, r1}
 800c61a:	4564      	cmp	r4, ip
 800c61c:	463e      	mov	r6, r7
 800c61e:	d1f7      	bne.n	800c610 <__utoa+0x10>
 800c620:	7921      	ldrb	r1, [r4, #4]
 800c622:	6820      	ldr	r0, [r4, #0]
 800c624:	7139      	strb	r1, [r7, #4]
 800c626:	1e91      	subs	r1, r2, #2
 800c628:	2922      	cmp	r1, #34	; 0x22
 800c62a:	6038      	str	r0, [r7, #0]
 800c62c:	f04f 0100 	mov.w	r1, #0
 800c630:	d904      	bls.n	800c63c <__utoa+0x3c>
 800c632:	7019      	strb	r1, [r3, #0]
 800c634:	460b      	mov	r3, r1
 800c636:	4618      	mov	r0, r3
 800c638:	b00b      	add	sp, #44	; 0x2c
 800c63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c63c:	1e58      	subs	r0, r3, #1
 800c63e:	4684      	mov	ip, r0
 800c640:	fbb5 f7f2 	udiv	r7, r5, r2
 800c644:	fb02 5617 	mls	r6, r2, r7, r5
 800c648:	3628      	adds	r6, #40	; 0x28
 800c64a:	446e      	add	r6, sp
 800c64c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c650:	460c      	mov	r4, r1
 800c652:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c656:	462e      	mov	r6, r5
 800c658:	42b2      	cmp	r2, r6
 800c65a:	463d      	mov	r5, r7
 800c65c:	f101 0101 	add.w	r1, r1, #1
 800c660:	d9ee      	bls.n	800c640 <__utoa+0x40>
 800c662:	2200      	movs	r2, #0
 800c664:	545a      	strb	r2, [r3, r1]
 800c666:	1919      	adds	r1, r3, r4
 800c668:	1aa5      	subs	r5, r4, r2
 800c66a:	42aa      	cmp	r2, r5
 800c66c:	dae3      	bge.n	800c636 <__utoa+0x36>
 800c66e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c672:	780e      	ldrb	r6, [r1, #0]
 800c674:	3201      	adds	r2, #1
 800c676:	7006      	strb	r6, [r0, #0]
 800c678:	f801 5901 	strb.w	r5, [r1], #-1
 800c67c:	e7f4      	b.n	800c668 <__utoa+0x68>
 800c67e:	bf00      	nop
 800c680:	0800de4a 	.word	0x0800de4a

0800c684 <strcat>:
 800c684:	4602      	mov	r2, r0
 800c686:	b510      	push	{r4, lr}
 800c688:	7814      	ldrb	r4, [r2, #0]
 800c68a:	4613      	mov	r3, r2
 800c68c:	3201      	adds	r2, #1
 800c68e:	2c00      	cmp	r4, #0
 800c690:	d1fa      	bne.n	800c688 <strcat+0x4>
 800c692:	3b01      	subs	r3, #1
 800c694:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c698:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c69c:	2a00      	cmp	r2, #0
 800c69e:	d1f9      	bne.n	800c694 <strcat+0x10>
 800c6a0:	bd10      	pop	{r4, pc}

0800c6a2 <strchr>:
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	b2c9      	uxtb	r1, r1
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ac:	b112      	cbz	r2, 800c6b4 <strchr+0x12>
 800c6ae:	428a      	cmp	r2, r1
 800c6b0:	d1f9      	bne.n	800c6a6 <strchr+0x4>
 800c6b2:	4770      	bx	lr
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	bf18      	it	ne
 800c6b8:	2000      	movne	r0, #0
 800c6ba:	4770      	bx	lr

0800c6bc <memset>:
 800c6bc:	4603      	mov	r3, r0
 800c6be:	4402      	add	r2, r0
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d100      	bne.n	800c6c6 <memset+0xa>
 800c6c4:	4770      	bx	lr
 800c6c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6ca:	e7f9      	b.n	800c6c0 <memset+0x4>

0800c6cc <_sbrk_r>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	4d05      	ldr	r5, [pc, #20]	; (800c6e8 <_sbrk_r+0x1c>)
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	602b      	str	r3, [r5, #0]
 800c6d8:	f7fb fffc 	bl	80086d4 <_sbrk>
 800c6dc:	1c43      	adds	r3, r0, #1
 800c6de:	d102      	bne.n	800c6e6 <_sbrk_r+0x1a>
 800c6e0:	682b      	ldr	r3, [r5, #0]
 800c6e2:	b103      	cbz	r3, 800c6e6 <_sbrk_r+0x1a>
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	bd38      	pop	{r3, r4, r5, pc}
 800c6e8:	200005ec 	.word	0x200005ec

0800c6ec <__errno>:
 800c6ec:	4b01      	ldr	r3, [pc, #4]	; (800c6f4 <__errno+0x8>)
 800c6ee:	6818      	ldr	r0, [r3, #0]
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	200000f8 	.word	0x200000f8

0800c6f8 <__libc_init_array>:
 800c6f8:	b570      	push	{r4, r5, r6, lr}
 800c6fa:	2600      	movs	r6, #0
 800c6fc:	4d0c      	ldr	r5, [pc, #48]	; (800c730 <__libc_init_array+0x38>)
 800c6fe:	4c0d      	ldr	r4, [pc, #52]	; (800c734 <__libc_init_array+0x3c>)
 800c700:	1b64      	subs	r4, r4, r5
 800c702:	10a4      	asrs	r4, r4, #2
 800c704:	42a6      	cmp	r6, r4
 800c706:	d109      	bne.n	800c71c <__libc_init_array+0x24>
 800c708:	f000 fbc6 	bl	800ce98 <_init>
 800c70c:	2600      	movs	r6, #0
 800c70e:	4d0a      	ldr	r5, [pc, #40]	; (800c738 <__libc_init_array+0x40>)
 800c710:	4c0a      	ldr	r4, [pc, #40]	; (800c73c <__libc_init_array+0x44>)
 800c712:	1b64      	subs	r4, r4, r5
 800c714:	10a4      	asrs	r4, r4, #2
 800c716:	42a6      	cmp	r6, r4
 800c718:	d105      	bne.n	800c726 <__libc_init_array+0x2e>
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
 800c71c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c720:	4798      	blx	r3
 800c722:	3601      	adds	r6, #1
 800c724:	e7ee      	b.n	800c704 <__libc_init_array+0xc>
 800c726:	f855 3b04 	ldr.w	r3, [r5], #4
 800c72a:	4798      	blx	r3
 800c72c:	3601      	adds	r6, #1
 800c72e:	e7f2      	b.n	800c716 <__libc_init_array+0x1e>
 800c730:	0800dea4 	.word	0x0800dea4
 800c734:	0800dea4 	.word	0x0800dea4
 800c738:	0800dea4 	.word	0x0800dea4
 800c73c:	0800dea8 	.word	0x0800dea8

0800c740 <__retarget_lock_acquire_recursive>:
 800c740:	4770      	bx	lr

0800c742 <__retarget_lock_release_recursive>:
 800c742:	4770      	bx	lr

0800c744 <strcpy>:
 800c744:	4603      	mov	r3, r0
 800c746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c74a:	f803 2b01 	strb.w	r2, [r3], #1
 800c74e:	2a00      	cmp	r2, #0
 800c750:	d1f9      	bne.n	800c746 <strcpy+0x2>
 800c752:	4770      	bx	lr

0800c754 <_free_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4605      	mov	r5, r0
 800c758:	2900      	cmp	r1, #0
 800c75a:	d040      	beq.n	800c7de <_free_r+0x8a>
 800c75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c760:	1f0c      	subs	r4, r1, #4
 800c762:	2b00      	cmp	r3, #0
 800c764:	bfb8      	it	lt
 800c766:	18e4      	addlt	r4, r4, r3
 800c768:	f7ff ff1e 	bl	800c5a8 <__malloc_lock>
 800c76c:	4a1c      	ldr	r2, [pc, #112]	; (800c7e0 <_free_r+0x8c>)
 800c76e:	6813      	ldr	r3, [r2, #0]
 800c770:	b933      	cbnz	r3, 800c780 <_free_r+0x2c>
 800c772:	6063      	str	r3, [r4, #4]
 800c774:	6014      	str	r4, [r2, #0]
 800c776:	4628      	mov	r0, r5
 800c778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c77c:	f7ff bf1a 	b.w	800c5b4 <__malloc_unlock>
 800c780:	42a3      	cmp	r3, r4
 800c782:	d908      	bls.n	800c796 <_free_r+0x42>
 800c784:	6820      	ldr	r0, [r4, #0]
 800c786:	1821      	adds	r1, r4, r0
 800c788:	428b      	cmp	r3, r1
 800c78a:	bf01      	itttt	eq
 800c78c:	6819      	ldreq	r1, [r3, #0]
 800c78e:	685b      	ldreq	r3, [r3, #4]
 800c790:	1809      	addeq	r1, r1, r0
 800c792:	6021      	streq	r1, [r4, #0]
 800c794:	e7ed      	b.n	800c772 <_free_r+0x1e>
 800c796:	461a      	mov	r2, r3
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	b10b      	cbz	r3, 800c7a0 <_free_r+0x4c>
 800c79c:	42a3      	cmp	r3, r4
 800c79e:	d9fa      	bls.n	800c796 <_free_r+0x42>
 800c7a0:	6811      	ldr	r1, [r2, #0]
 800c7a2:	1850      	adds	r0, r2, r1
 800c7a4:	42a0      	cmp	r0, r4
 800c7a6:	d10b      	bne.n	800c7c0 <_free_r+0x6c>
 800c7a8:	6820      	ldr	r0, [r4, #0]
 800c7aa:	4401      	add	r1, r0
 800c7ac:	1850      	adds	r0, r2, r1
 800c7ae:	4283      	cmp	r3, r0
 800c7b0:	6011      	str	r1, [r2, #0]
 800c7b2:	d1e0      	bne.n	800c776 <_free_r+0x22>
 800c7b4:	6818      	ldr	r0, [r3, #0]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	4408      	add	r0, r1
 800c7ba:	6010      	str	r0, [r2, #0]
 800c7bc:	6053      	str	r3, [r2, #4]
 800c7be:	e7da      	b.n	800c776 <_free_r+0x22>
 800c7c0:	d902      	bls.n	800c7c8 <_free_r+0x74>
 800c7c2:	230c      	movs	r3, #12
 800c7c4:	602b      	str	r3, [r5, #0]
 800c7c6:	e7d6      	b.n	800c776 <_free_r+0x22>
 800c7c8:	6820      	ldr	r0, [r4, #0]
 800c7ca:	1821      	adds	r1, r4, r0
 800c7cc:	428b      	cmp	r3, r1
 800c7ce:	bf01      	itttt	eq
 800c7d0:	6819      	ldreq	r1, [r3, #0]
 800c7d2:	685b      	ldreq	r3, [r3, #4]
 800c7d4:	1809      	addeq	r1, r1, r0
 800c7d6:	6021      	streq	r1, [r4, #0]
 800c7d8:	6063      	str	r3, [r4, #4]
 800c7da:	6054      	str	r4, [r2, #4]
 800c7dc:	e7cb      	b.n	800c776 <_free_r+0x22>
 800c7de:	bd38      	pop	{r3, r4, r5, pc}
 800c7e0:	200004a8 	.word	0x200004a8

0800c7e4 <__ssputs_r>:
 800c7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	461f      	mov	r7, r3
 800c7ea:	688e      	ldr	r6, [r1, #8]
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	42be      	cmp	r6, r7
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	4690      	mov	r8, r2
 800c7f4:	680b      	ldr	r3, [r1, #0]
 800c7f6:	d82c      	bhi.n	800c852 <__ssputs_r+0x6e>
 800c7f8:	898a      	ldrh	r2, [r1, #12]
 800c7fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7fe:	d026      	beq.n	800c84e <__ssputs_r+0x6a>
 800c800:	6965      	ldr	r5, [r4, #20]
 800c802:	6909      	ldr	r1, [r1, #16]
 800c804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c808:	eba3 0901 	sub.w	r9, r3, r1
 800c80c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c810:	1c7b      	adds	r3, r7, #1
 800c812:	444b      	add	r3, r9
 800c814:	106d      	asrs	r5, r5, #1
 800c816:	429d      	cmp	r5, r3
 800c818:	bf38      	it	cc
 800c81a:	461d      	movcc	r5, r3
 800c81c:	0553      	lsls	r3, r2, #21
 800c81e:	d527      	bpl.n	800c870 <__ssputs_r+0x8c>
 800c820:	4629      	mov	r1, r5
 800c822:	f7ff fe41 	bl	800c4a8 <_malloc_r>
 800c826:	4606      	mov	r6, r0
 800c828:	b360      	cbz	r0, 800c884 <__ssputs_r+0xa0>
 800c82a:	464a      	mov	r2, r9
 800c82c:	6921      	ldr	r1, [r4, #16]
 800c82e:	f000 fb1c 	bl	800ce6a <memcpy>
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83c:	81a3      	strh	r3, [r4, #12]
 800c83e:	6126      	str	r6, [r4, #16]
 800c840:	444e      	add	r6, r9
 800c842:	6026      	str	r6, [r4, #0]
 800c844:	463e      	mov	r6, r7
 800c846:	6165      	str	r5, [r4, #20]
 800c848:	eba5 0509 	sub.w	r5, r5, r9
 800c84c:	60a5      	str	r5, [r4, #8]
 800c84e:	42be      	cmp	r6, r7
 800c850:	d900      	bls.n	800c854 <__ssputs_r+0x70>
 800c852:	463e      	mov	r6, r7
 800c854:	4632      	mov	r2, r6
 800c856:	4641      	mov	r1, r8
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	f000 fade 	bl	800ce1a <memmove>
 800c85e:	2000      	movs	r0, #0
 800c860:	68a3      	ldr	r3, [r4, #8]
 800c862:	1b9b      	subs	r3, r3, r6
 800c864:	60a3      	str	r3, [r4, #8]
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	4433      	add	r3, r6
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c870:	462a      	mov	r2, r5
 800c872:	f000 faa3 	bl	800cdbc <_realloc_r>
 800c876:	4606      	mov	r6, r0
 800c878:	2800      	cmp	r0, #0
 800c87a:	d1e0      	bne.n	800c83e <__ssputs_r+0x5a>
 800c87c:	4650      	mov	r0, sl
 800c87e:	6921      	ldr	r1, [r4, #16]
 800c880:	f7ff ff68 	bl	800c754 <_free_r>
 800c884:	230c      	movs	r3, #12
 800c886:	f8ca 3000 	str.w	r3, [sl]
 800c88a:	89a3      	ldrh	r3, [r4, #12]
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c894:	81a3      	strh	r3, [r4, #12]
 800c896:	e7e9      	b.n	800c86c <__ssputs_r+0x88>

0800c898 <_svfiprintf_r>:
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	4698      	mov	r8, r3
 800c89e:	898b      	ldrh	r3, [r1, #12]
 800c8a0:	4607      	mov	r7, r0
 800c8a2:	061b      	lsls	r3, r3, #24
 800c8a4:	460d      	mov	r5, r1
 800c8a6:	4614      	mov	r4, r2
 800c8a8:	b09d      	sub	sp, #116	; 0x74
 800c8aa:	d50e      	bpl.n	800c8ca <_svfiprintf_r+0x32>
 800c8ac:	690b      	ldr	r3, [r1, #16]
 800c8ae:	b963      	cbnz	r3, 800c8ca <_svfiprintf_r+0x32>
 800c8b0:	2140      	movs	r1, #64	; 0x40
 800c8b2:	f7ff fdf9 	bl	800c4a8 <_malloc_r>
 800c8b6:	6028      	str	r0, [r5, #0]
 800c8b8:	6128      	str	r0, [r5, #16]
 800c8ba:	b920      	cbnz	r0, 800c8c6 <_svfiprintf_r+0x2e>
 800c8bc:	230c      	movs	r3, #12
 800c8be:	603b      	str	r3, [r7, #0]
 800c8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8c4:	e0d0      	b.n	800ca68 <_svfiprintf_r+0x1d0>
 800c8c6:	2340      	movs	r3, #64	; 0x40
 800c8c8:	616b      	str	r3, [r5, #20]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ce:	2320      	movs	r3, #32
 800c8d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8d4:	2330      	movs	r3, #48	; 0x30
 800c8d6:	f04f 0901 	mov.w	r9, #1
 800c8da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8de:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca80 <_svfiprintf_r+0x1e8>
 800c8e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8e6:	4623      	mov	r3, r4
 800c8e8:	469a      	mov	sl, r3
 800c8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ee:	b10a      	cbz	r2, 800c8f4 <_svfiprintf_r+0x5c>
 800c8f0:	2a25      	cmp	r2, #37	; 0x25
 800c8f2:	d1f9      	bne.n	800c8e8 <_svfiprintf_r+0x50>
 800c8f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c8f8:	d00b      	beq.n	800c912 <_svfiprintf_r+0x7a>
 800c8fa:	465b      	mov	r3, fp
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	4638      	mov	r0, r7
 800c902:	f7ff ff6f 	bl	800c7e4 <__ssputs_r>
 800c906:	3001      	adds	r0, #1
 800c908:	f000 80a9 	beq.w	800ca5e <_svfiprintf_r+0x1c6>
 800c90c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c90e:	445a      	add	r2, fp
 800c910:	9209      	str	r2, [sp, #36]	; 0x24
 800c912:	f89a 3000 	ldrb.w	r3, [sl]
 800c916:	2b00      	cmp	r3, #0
 800c918:	f000 80a1 	beq.w	800ca5e <_svfiprintf_r+0x1c6>
 800c91c:	2300      	movs	r3, #0
 800c91e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c926:	f10a 0a01 	add.w	sl, sl, #1
 800c92a:	9304      	str	r3, [sp, #16]
 800c92c:	9307      	str	r3, [sp, #28]
 800c92e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c932:	931a      	str	r3, [sp, #104]	; 0x68
 800c934:	4654      	mov	r4, sl
 800c936:	2205      	movs	r2, #5
 800c938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c93c:	4850      	ldr	r0, [pc, #320]	; (800ca80 <_svfiprintf_r+0x1e8>)
 800c93e:	f000 fa86 	bl	800ce4e <memchr>
 800c942:	9a04      	ldr	r2, [sp, #16]
 800c944:	b9d8      	cbnz	r0, 800c97e <_svfiprintf_r+0xe6>
 800c946:	06d0      	lsls	r0, r2, #27
 800c948:	bf44      	itt	mi
 800c94a:	2320      	movmi	r3, #32
 800c94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c950:	0711      	lsls	r1, r2, #28
 800c952:	bf44      	itt	mi
 800c954:	232b      	movmi	r3, #43	; 0x2b
 800c956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c95a:	f89a 3000 	ldrb.w	r3, [sl]
 800c95e:	2b2a      	cmp	r3, #42	; 0x2a
 800c960:	d015      	beq.n	800c98e <_svfiprintf_r+0xf6>
 800c962:	4654      	mov	r4, sl
 800c964:	2000      	movs	r0, #0
 800c966:	f04f 0c0a 	mov.w	ip, #10
 800c96a:	9a07      	ldr	r2, [sp, #28]
 800c96c:	4621      	mov	r1, r4
 800c96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c972:	3b30      	subs	r3, #48	; 0x30
 800c974:	2b09      	cmp	r3, #9
 800c976:	d94d      	bls.n	800ca14 <_svfiprintf_r+0x17c>
 800c978:	b1b0      	cbz	r0, 800c9a8 <_svfiprintf_r+0x110>
 800c97a:	9207      	str	r2, [sp, #28]
 800c97c:	e014      	b.n	800c9a8 <_svfiprintf_r+0x110>
 800c97e:	eba0 0308 	sub.w	r3, r0, r8
 800c982:	fa09 f303 	lsl.w	r3, r9, r3
 800c986:	4313      	orrs	r3, r2
 800c988:	46a2      	mov	sl, r4
 800c98a:	9304      	str	r3, [sp, #16]
 800c98c:	e7d2      	b.n	800c934 <_svfiprintf_r+0x9c>
 800c98e:	9b03      	ldr	r3, [sp, #12]
 800c990:	1d19      	adds	r1, r3, #4
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	9103      	str	r1, [sp, #12]
 800c996:	2b00      	cmp	r3, #0
 800c998:	bfbb      	ittet	lt
 800c99a:	425b      	neglt	r3, r3
 800c99c:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a0:	9307      	strge	r3, [sp, #28]
 800c9a2:	9307      	strlt	r3, [sp, #28]
 800c9a4:	bfb8      	it	lt
 800c9a6:	9204      	strlt	r2, [sp, #16]
 800c9a8:	7823      	ldrb	r3, [r4, #0]
 800c9aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ac:	d10c      	bne.n	800c9c8 <_svfiprintf_r+0x130>
 800c9ae:	7863      	ldrb	r3, [r4, #1]
 800c9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b2:	d134      	bne.n	800ca1e <_svfiprintf_r+0x186>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	3402      	adds	r4, #2
 800c9b8:	1d1a      	adds	r2, r3, #4
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	9203      	str	r2, [sp, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	bfb8      	it	lt
 800c9c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9c6:	9305      	str	r3, [sp, #20]
 800c9c8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca84 <_svfiprintf_r+0x1ec>
 800c9cc:	2203      	movs	r2, #3
 800c9ce:	4650      	mov	r0, sl
 800c9d0:	7821      	ldrb	r1, [r4, #0]
 800c9d2:	f000 fa3c 	bl	800ce4e <memchr>
 800c9d6:	b138      	cbz	r0, 800c9e8 <_svfiprintf_r+0x150>
 800c9d8:	2240      	movs	r2, #64	; 0x40
 800c9da:	9b04      	ldr	r3, [sp, #16]
 800c9dc:	eba0 000a 	sub.w	r0, r0, sl
 800c9e0:	4082      	lsls	r2, r0
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	3401      	adds	r4, #1
 800c9e6:	9304      	str	r3, [sp, #16]
 800c9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ec:	2206      	movs	r2, #6
 800c9ee:	4826      	ldr	r0, [pc, #152]	; (800ca88 <_svfiprintf_r+0x1f0>)
 800c9f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9f4:	f000 fa2b 	bl	800ce4e <memchr>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d038      	beq.n	800ca6e <_svfiprintf_r+0x1d6>
 800c9fc:	4b23      	ldr	r3, [pc, #140]	; (800ca8c <_svfiprintf_r+0x1f4>)
 800c9fe:	bb1b      	cbnz	r3, 800ca48 <_svfiprintf_r+0x1b0>
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	3307      	adds	r3, #7
 800ca04:	f023 0307 	bic.w	r3, r3, #7
 800ca08:	3308      	adds	r3, #8
 800ca0a:	9303      	str	r3, [sp, #12]
 800ca0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca0e:	4433      	add	r3, r6
 800ca10:	9309      	str	r3, [sp, #36]	; 0x24
 800ca12:	e768      	b.n	800c8e6 <_svfiprintf_r+0x4e>
 800ca14:	460c      	mov	r4, r1
 800ca16:	2001      	movs	r0, #1
 800ca18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca1c:	e7a6      	b.n	800c96c <_svfiprintf_r+0xd4>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f04f 0c0a 	mov.w	ip, #10
 800ca24:	4619      	mov	r1, r3
 800ca26:	3401      	adds	r4, #1
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca30:	3a30      	subs	r2, #48	; 0x30
 800ca32:	2a09      	cmp	r2, #9
 800ca34:	d903      	bls.n	800ca3e <_svfiprintf_r+0x1a6>
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0c6      	beq.n	800c9c8 <_svfiprintf_r+0x130>
 800ca3a:	9105      	str	r1, [sp, #20]
 800ca3c:	e7c4      	b.n	800c9c8 <_svfiprintf_r+0x130>
 800ca3e:	4604      	mov	r4, r0
 800ca40:	2301      	movs	r3, #1
 800ca42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca46:	e7f0      	b.n	800ca2a <_svfiprintf_r+0x192>
 800ca48:	ab03      	add	r3, sp, #12
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	462a      	mov	r2, r5
 800ca4e:	4638      	mov	r0, r7
 800ca50:	4b0f      	ldr	r3, [pc, #60]	; (800ca90 <_svfiprintf_r+0x1f8>)
 800ca52:	a904      	add	r1, sp, #16
 800ca54:	f3af 8000 	nop.w
 800ca58:	1c42      	adds	r2, r0, #1
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	d1d6      	bne.n	800ca0c <_svfiprintf_r+0x174>
 800ca5e:	89ab      	ldrh	r3, [r5, #12]
 800ca60:	065b      	lsls	r3, r3, #25
 800ca62:	f53f af2d 	bmi.w	800c8c0 <_svfiprintf_r+0x28>
 800ca66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca68:	b01d      	add	sp, #116	; 0x74
 800ca6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6e:	ab03      	add	r3, sp, #12
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	462a      	mov	r2, r5
 800ca74:	4638      	mov	r0, r7
 800ca76:	4b06      	ldr	r3, [pc, #24]	; (800ca90 <_svfiprintf_r+0x1f8>)
 800ca78:	a904      	add	r1, sp, #16
 800ca7a:	f000 f87d 	bl	800cb78 <_printf_i>
 800ca7e:	e7eb      	b.n	800ca58 <_svfiprintf_r+0x1c0>
 800ca80:	0800de6f 	.word	0x0800de6f
 800ca84:	0800de75 	.word	0x0800de75
 800ca88:	0800de79 	.word	0x0800de79
 800ca8c:	00000000 	.word	0x00000000
 800ca90:	0800c7e5 	.word	0x0800c7e5

0800ca94 <_printf_common>:
 800ca94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca98:	4616      	mov	r6, r2
 800ca9a:	4699      	mov	r9, r3
 800ca9c:	688a      	ldr	r2, [r1, #8]
 800ca9e:	690b      	ldr	r3, [r1, #16]
 800caa0:	4607      	mov	r7, r0
 800caa2:	4293      	cmp	r3, r2
 800caa4:	bfb8      	it	lt
 800caa6:	4613      	movlt	r3, r2
 800caa8:	6033      	str	r3, [r6, #0]
 800caaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800caae:	460c      	mov	r4, r1
 800cab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cab4:	b10a      	cbz	r2, 800caba <_printf_common+0x26>
 800cab6:	3301      	adds	r3, #1
 800cab8:	6033      	str	r3, [r6, #0]
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	0699      	lsls	r1, r3, #26
 800cabe:	bf42      	ittt	mi
 800cac0:	6833      	ldrmi	r3, [r6, #0]
 800cac2:	3302      	addmi	r3, #2
 800cac4:	6033      	strmi	r3, [r6, #0]
 800cac6:	6825      	ldr	r5, [r4, #0]
 800cac8:	f015 0506 	ands.w	r5, r5, #6
 800cacc:	d106      	bne.n	800cadc <_printf_common+0x48>
 800cace:	f104 0a19 	add.w	sl, r4, #25
 800cad2:	68e3      	ldr	r3, [r4, #12]
 800cad4:	6832      	ldr	r2, [r6, #0]
 800cad6:	1a9b      	subs	r3, r3, r2
 800cad8:	42ab      	cmp	r3, r5
 800cada:	dc2b      	bgt.n	800cb34 <_printf_common+0xa0>
 800cadc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cae0:	1e13      	subs	r3, r2, #0
 800cae2:	6822      	ldr	r2, [r4, #0]
 800cae4:	bf18      	it	ne
 800cae6:	2301      	movne	r3, #1
 800cae8:	0692      	lsls	r2, r2, #26
 800caea:	d430      	bmi.n	800cb4e <_printf_common+0xba>
 800caec:	4649      	mov	r1, r9
 800caee:	4638      	mov	r0, r7
 800caf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800caf4:	47c0      	blx	r8
 800caf6:	3001      	adds	r0, #1
 800caf8:	d023      	beq.n	800cb42 <_printf_common+0xae>
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	6922      	ldr	r2, [r4, #16]
 800cafe:	f003 0306 	and.w	r3, r3, #6
 800cb02:	2b04      	cmp	r3, #4
 800cb04:	bf14      	ite	ne
 800cb06:	2500      	movne	r5, #0
 800cb08:	6833      	ldreq	r3, [r6, #0]
 800cb0a:	f04f 0600 	mov.w	r6, #0
 800cb0e:	bf08      	it	eq
 800cb10:	68e5      	ldreq	r5, [r4, #12]
 800cb12:	f104 041a 	add.w	r4, r4, #26
 800cb16:	bf08      	it	eq
 800cb18:	1aed      	subeq	r5, r5, r3
 800cb1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cb1e:	bf08      	it	eq
 800cb20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb24:	4293      	cmp	r3, r2
 800cb26:	bfc4      	itt	gt
 800cb28:	1a9b      	subgt	r3, r3, r2
 800cb2a:	18ed      	addgt	r5, r5, r3
 800cb2c:	42b5      	cmp	r5, r6
 800cb2e:	d11a      	bne.n	800cb66 <_printf_common+0xd2>
 800cb30:	2000      	movs	r0, #0
 800cb32:	e008      	b.n	800cb46 <_printf_common+0xb2>
 800cb34:	2301      	movs	r3, #1
 800cb36:	4652      	mov	r2, sl
 800cb38:	4649      	mov	r1, r9
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	47c0      	blx	r8
 800cb3e:	3001      	adds	r0, #1
 800cb40:	d103      	bne.n	800cb4a <_printf_common+0xb6>
 800cb42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb4a:	3501      	adds	r5, #1
 800cb4c:	e7c1      	b.n	800cad2 <_printf_common+0x3e>
 800cb4e:	2030      	movs	r0, #48	; 0x30
 800cb50:	18e1      	adds	r1, r4, r3
 800cb52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb5c:	4422      	add	r2, r4
 800cb5e:	3302      	adds	r3, #2
 800cb60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb64:	e7c2      	b.n	800caec <_printf_common+0x58>
 800cb66:	2301      	movs	r3, #1
 800cb68:	4622      	mov	r2, r4
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	47c0      	blx	r8
 800cb70:	3001      	adds	r0, #1
 800cb72:	d0e6      	beq.n	800cb42 <_printf_common+0xae>
 800cb74:	3601      	adds	r6, #1
 800cb76:	e7d9      	b.n	800cb2c <_printf_common+0x98>

0800cb78 <_printf_i>:
 800cb78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb7c:	7e0f      	ldrb	r7, [r1, #24]
 800cb7e:	4691      	mov	r9, r2
 800cb80:	2f78      	cmp	r7, #120	; 0x78
 800cb82:	4680      	mov	r8, r0
 800cb84:	460c      	mov	r4, r1
 800cb86:	469a      	mov	sl, r3
 800cb88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb8e:	d807      	bhi.n	800cba0 <_printf_i+0x28>
 800cb90:	2f62      	cmp	r7, #98	; 0x62
 800cb92:	d80a      	bhi.n	800cbaa <_printf_i+0x32>
 800cb94:	2f00      	cmp	r7, #0
 800cb96:	f000 80d5 	beq.w	800cd44 <_printf_i+0x1cc>
 800cb9a:	2f58      	cmp	r7, #88	; 0x58
 800cb9c:	f000 80c1 	beq.w	800cd22 <_printf_i+0x1aa>
 800cba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cba8:	e03a      	b.n	800cc20 <_printf_i+0xa8>
 800cbaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbae:	2b15      	cmp	r3, #21
 800cbb0:	d8f6      	bhi.n	800cba0 <_printf_i+0x28>
 800cbb2:	a101      	add	r1, pc, #4	; (adr r1, 800cbb8 <_printf_i+0x40>)
 800cbb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbb8:	0800cc11 	.word	0x0800cc11
 800cbbc:	0800cc25 	.word	0x0800cc25
 800cbc0:	0800cba1 	.word	0x0800cba1
 800cbc4:	0800cba1 	.word	0x0800cba1
 800cbc8:	0800cba1 	.word	0x0800cba1
 800cbcc:	0800cba1 	.word	0x0800cba1
 800cbd0:	0800cc25 	.word	0x0800cc25
 800cbd4:	0800cba1 	.word	0x0800cba1
 800cbd8:	0800cba1 	.word	0x0800cba1
 800cbdc:	0800cba1 	.word	0x0800cba1
 800cbe0:	0800cba1 	.word	0x0800cba1
 800cbe4:	0800cd2b 	.word	0x0800cd2b
 800cbe8:	0800cc51 	.word	0x0800cc51
 800cbec:	0800cce5 	.word	0x0800cce5
 800cbf0:	0800cba1 	.word	0x0800cba1
 800cbf4:	0800cba1 	.word	0x0800cba1
 800cbf8:	0800cd4d 	.word	0x0800cd4d
 800cbfc:	0800cba1 	.word	0x0800cba1
 800cc00:	0800cc51 	.word	0x0800cc51
 800cc04:	0800cba1 	.word	0x0800cba1
 800cc08:	0800cba1 	.word	0x0800cba1
 800cc0c:	0800cced 	.word	0x0800cced
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	1d1a      	adds	r2, r3, #4
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	602a      	str	r2, [r5, #0]
 800cc18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc20:	2301      	movs	r3, #1
 800cc22:	e0a0      	b.n	800cd66 <_printf_i+0x1ee>
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	682b      	ldr	r3, [r5, #0]
 800cc28:	0607      	lsls	r7, r0, #24
 800cc2a:	f103 0104 	add.w	r1, r3, #4
 800cc2e:	6029      	str	r1, [r5, #0]
 800cc30:	d501      	bpl.n	800cc36 <_printf_i+0xbe>
 800cc32:	681e      	ldr	r6, [r3, #0]
 800cc34:	e003      	b.n	800cc3e <_printf_i+0xc6>
 800cc36:	0646      	lsls	r6, r0, #25
 800cc38:	d5fb      	bpl.n	800cc32 <_printf_i+0xba>
 800cc3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc3e:	2e00      	cmp	r6, #0
 800cc40:	da03      	bge.n	800cc4a <_printf_i+0xd2>
 800cc42:	232d      	movs	r3, #45	; 0x2d
 800cc44:	4276      	negs	r6, r6
 800cc46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc4a:	230a      	movs	r3, #10
 800cc4c:	4859      	ldr	r0, [pc, #356]	; (800cdb4 <_printf_i+0x23c>)
 800cc4e:	e012      	b.n	800cc76 <_printf_i+0xfe>
 800cc50:	682b      	ldr	r3, [r5, #0]
 800cc52:	6820      	ldr	r0, [r4, #0]
 800cc54:	1d19      	adds	r1, r3, #4
 800cc56:	6029      	str	r1, [r5, #0]
 800cc58:	0605      	lsls	r5, r0, #24
 800cc5a:	d501      	bpl.n	800cc60 <_printf_i+0xe8>
 800cc5c:	681e      	ldr	r6, [r3, #0]
 800cc5e:	e002      	b.n	800cc66 <_printf_i+0xee>
 800cc60:	0641      	lsls	r1, r0, #25
 800cc62:	d5fb      	bpl.n	800cc5c <_printf_i+0xe4>
 800cc64:	881e      	ldrh	r6, [r3, #0]
 800cc66:	2f6f      	cmp	r7, #111	; 0x6f
 800cc68:	bf0c      	ite	eq
 800cc6a:	2308      	moveq	r3, #8
 800cc6c:	230a      	movne	r3, #10
 800cc6e:	4851      	ldr	r0, [pc, #324]	; (800cdb4 <_printf_i+0x23c>)
 800cc70:	2100      	movs	r1, #0
 800cc72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc76:	6865      	ldr	r5, [r4, #4]
 800cc78:	2d00      	cmp	r5, #0
 800cc7a:	bfa8      	it	ge
 800cc7c:	6821      	ldrge	r1, [r4, #0]
 800cc7e:	60a5      	str	r5, [r4, #8]
 800cc80:	bfa4      	itt	ge
 800cc82:	f021 0104 	bicge.w	r1, r1, #4
 800cc86:	6021      	strge	r1, [r4, #0]
 800cc88:	b90e      	cbnz	r6, 800cc8e <_printf_i+0x116>
 800cc8a:	2d00      	cmp	r5, #0
 800cc8c:	d04b      	beq.n	800cd26 <_printf_i+0x1ae>
 800cc8e:	4615      	mov	r5, r2
 800cc90:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc94:	fb03 6711 	mls	r7, r3, r1, r6
 800cc98:	5dc7      	ldrb	r7, [r0, r7]
 800cc9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc9e:	4637      	mov	r7, r6
 800cca0:	42bb      	cmp	r3, r7
 800cca2:	460e      	mov	r6, r1
 800cca4:	d9f4      	bls.n	800cc90 <_printf_i+0x118>
 800cca6:	2b08      	cmp	r3, #8
 800cca8:	d10b      	bne.n	800ccc2 <_printf_i+0x14a>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	07de      	lsls	r6, r3, #31
 800ccae:	d508      	bpl.n	800ccc2 <_printf_i+0x14a>
 800ccb0:	6923      	ldr	r3, [r4, #16]
 800ccb2:	6861      	ldr	r1, [r4, #4]
 800ccb4:	4299      	cmp	r1, r3
 800ccb6:	bfde      	ittt	le
 800ccb8:	2330      	movle	r3, #48	; 0x30
 800ccba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccbe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ccc2:	1b52      	subs	r2, r2, r5
 800ccc4:	6122      	str	r2, [r4, #16]
 800ccc6:	464b      	mov	r3, r9
 800ccc8:	4621      	mov	r1, r4
 800ccca:	4640      	mov	r0, r8
 800cccc:	f8cd a000 	str.w	sl, [sp]
 800ccd0:	aa03      	add	r2, sp, #12
 800ccd2:	f7ff fedf 	bl	800ca94 <_printf_common>
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	d14a      	bne.n	800cd70 <_printf_i+0x1f8>
 800ccda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccde:	b004      	add	sp, #16
 800cce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cce4:	6823      	ldr	r3, [r4, #0]
 800cce6:	f043 0320 	orr.w	r3, r3, #32
 800ccea:	6023      	str	r3, [r4, #0]
 800ccec:	2778      	movs	r7, #120	; 0x78
 800ccee:	4832      	ldr	r0, [pc, #200]	; (800cdb8 <_printf_i+0x240>)
 800ccf0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ccf4:	6823      	ldr	r3, [r4, #0]
 800ccf6:	6829      	ldr	r1, [r5, #0]
 800ccf8:	061f      	lsls	r7, r3, #24
 800ccfa:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccfe:	d402      	bmi.n	800cd06 <_printf_i+0x18e>
 800cd00:	065f      	lsls	r7, r3, #25
 800cd02:	bf48      	it	mi
 800cd04:	b2b6      	uxthmi	r6, r6
 800cd06:	07df      	lsls	r7, r3, #31
 800cd08:	bf48      	it	mi
 800cd0a:	f043 0320 	orrmi.w	r3, r3, #32
 800cd0e:	6029      	str	r1, [r5, #0]
 800cd10:	bf48      	it	mi
 800cd12:	6023      	strmi	r3, [r4, #0]
 800cd14:	b91e      	cbnz	r6, 800cd1e <_printf_i+0x1a6>
 800cd16:	6823      	ldr	r3, [r4, #0]
 800cd18:	f023 0320 	bic.w	r3, r3, #32
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	2310      	movs	r3, #16
 800cd20:	e7a6      	b.n	800cc70 <_printf_i+0xf8>
 800cd22:	4824      	ldr	r0, [pc, #144]	; (800cdb4 <_printf_i+0x23c>)
 800cd24:	e7e4      	b.n	800ccf0 <_printf_i+0x178>
 800cd26:	4615      	mov	r5, r2
 800cd28:	e7bd      	b.n	800cca6 <_printf_i+0x12e>
 800cd2a:	682b      	ldr	r3, [r5, #0]
 800cd2c:	6826      	ldr	r6, [r4, #0]
 800cd2e:	1d18      	adds	r0, r3, #4
 800cd30:	6961      	ldr	r1, [r4, #20]
 800cd32:	6028      	str	r0, [r5, #0]
 800cd34:	0635      	lsls	r5, r6, #24
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	d501      	bpl.n	800cd3e <_printf_i+0x1c6>
 800cd3a:	6019      	str	r1, [r3, #0]
 800cd3c:	e002      	b.n	800cd44 <_printf_i+0x1cc>
 800cd3e:	0670      	lsls	r0, r6, #25
 800cd40:	d5fb      	bpl.n	800cd3a <_printf_i+0x1c2>
 800cd42:	8019      	strh	r1, [r3, #0]
 800cd44:	2300      	movs	r3, #0
 800cd46:	4615      	mov	r5, r2
 800cd48:	6123      	str	r3, [r4, #16]
 800cd4a:	e7bc      	b.n	800ccc6 <_printf_i+0x14e>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	2100      	movs	r1, #0
 800cd50:	1d1a      	adds	r2, r3, #4
 800cd52:	602a      	str	r2, [r5, #0]
 800cd54:	681d      	ldr	r5, [r3, #0]
 800cd56:	6862      	ldr	r2, [r4, #4]
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f000 f878 	bl	800ce4e <memchr>
 800cd5e:	b108      	cbz	r0, 800cd64 <_printf_i+0x1ec>
 800cd60:	1b40      	subs	r0, r0, r5
 800cd62:	6060      	str	r0, [r4, #4]
 800cd64:	6863      	ldr	r3, [r4, #4]
 800cd66:	6123      	str	r3, [r4, #16]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd6e:	e7aa      	b.n	800ccc6 <_printf_i+0x14e>
 800cd70:	462a      	mov	r2, r5
 800cd72:	4649      	mov	r1, r9
 800cd74:	4640      	mov	r0, r8
 800cd76:	6923      	ldr	r3, [r4, #16]
 800cd78:	47d0      	blx	sl
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	d0ad      	beq.n	800ccda <_printf_i+0x162>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	079b      	lsls	r3, r3, #30
 800cd82:	d413      	bmi.n	800cdac <_printf_i+0x234>
 800cd84:	68e0      	ldr	r0, [r4, #12]
 800cd86:	9b03      	ldr	r3, [sp, #12]
 800cd88:	4298      	cmp	r0, r3
 800cd8a:	bfb8      	it	lt
 800cd8c:	4618      	movlt	r0, r3
 800cd8e:	e7a6      	b.n	800ccde <_printf_i+0x166>
 800cd90:	2301      	movs	r3, #1
 800cd92:	4632      	mov	r2, r6
 800cd94:	4649      	mov	r1, r9
 800cd96:	4640      	mov	r0, r8
 800cd98:	47d0      	blx	sl
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	d09d      	beq.n	800ccda <_printf_i+0x162>
 800cd9e:	3501      	adds	r5, #1
 800cda0:	68e3      	ldr	r3, [r4, #12]
 800cda2:	9903      	ldr	r1, [sp, #12]
 800cda4:	1a5b      	subs	r3, r3, r1
 800cda6:	42ab      	cmp	r3, r5
 800cda8:	dcf2      	bgt.n	800cd90 <_printf_i+0x218>
 800cdaa:	e7eb      	b.n	800cd84 <_printf_i+0x20c>
 800cdac:	2500      	movs	r5, #0
 800cdae:	f104 0619 	add.w	r6, r4, #25
 800cdb2:	e7f5      	b.n	800cda0 <_printf_i+0x228>
 800cdb4:	0800de80 	.word	0x0800de80
 800cdb8:	0800de91 	.word	0x0800de91

0800cdbc <_realloc_r>:
 800cdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc0:	4680      	mov	r8, r0
 800cdc2:	4614      	mov	r4, r2
 800cdc4:	460e      	mov	r6, r1
 800cdc6:	b921      	cbnz	r1, 800cdd2 <_realloc_r+0x16>
 800cdc8:	4611      	mov	r1, r2
 800cdca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdce:	f7ff bb6b 	b.w	800c4a8 <_malloc_r>
 800cdd2:	b92a      	cbnz	r2, 800cde0 <_realloc_r+0x24>
 800cdd4:	f7ff fcbe 	bl	800c754 <_free_r>
 800cdd8:	4625      	mov	r5, r4
 800cdda:	4628      	mov	r0, r5
 800cddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde0:	f000 f851 	bl	800ce86 <_malloc_usable_size_r>
 800cde4:	4284      	cmp	r4, r0
 800cde6:	4607      	mov	r7, r0
 800cde8:	d802      	bhi.n	800cdf0 <_realloc_r+0x34>
 800cdea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdee:	d812      	bhi.n	800ce16 <_realloc_r+0x5a>
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	f7ff fb58 	bl	800c4a8 <_malloc_r>
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d0ed      	beq.n	800cdda <_realloc_r+0x1e>
 800cdfe:	42bc      	cmp	r4, r7
 800ce00:	4622      	mov	r2, r4
 800ce02:	4631      	mov	r1, r6
 800ce04:	bf28      	it	cs
 800ce06:	463a      	movcs	r2, r7
 800ce08:	f000 f82f 	bl	800ce6a <memcpy>
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	4640      	mov	r0, r8
 800ce10:	f7ff fca0 	bl	800c754 <_free_r>
 800ce14:	e7e1      	b.n	800cdda <_realloc_r+0x1e>
 800ce16:	4635      	mov	r5, r6
 800ce18:	e7df      	b.n	800cdda <_realloc_r+0x1e>

0800ce1a <memmove>:
 800ce1a:	4288      	cmp	r0, r1
 800ce1c:	b510      	push	{r4, lr}
 800ce1e:	eb01 0402 	add.w	r4, r1, r2
 800ce22:	d902      	bls.n	800ce2a <memmove+0x10>
 800ce24:	4284      	cmp	r4, r0
 800ce26:	4623      	mov	r3, r4
 800ce28:	d807      	bhi.n	800ce3a <memmove+0x20>
 800ce2a:	1e43      	subs	r3, r0, #1
 800ce2c:	42a1      	cmp	r1, r4
 800ce2e:	d008      	beq.n	800ce42 <memmove+0x28>
 800ce30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce34:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce38:	e7f8      	b.n	800ce2c <memmove+0x12>
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	4402      	add	r2, r0
 800ce3e:	428a      	cmp	r2, r1
 800ce40:	d100      	bne.n	800ce44 <memmove+0x2a>
 800ce42:	bd10      	pop	{r4, pc}
 800ce44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce4c:	e7f7      	b.n	800ce3e <memmove+0x24>

0800ce4e <memchr>:
 800ce4e:	4603      	mov	r3, r0
 800ce50:	b510      	push	{r4, lr}
 800ce52:	b2c9      	uxtb	r1, r1
 800ce54:	4402      	add	r2, r0
 800ce56:	4293      	cmp	r3, r2
 800ce58:	4618      	mov	r0, r3
 800ce5a:	d101      	bne.n	800ce60 <memchr+0x12>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	e003      	b.n	800ce68 <memchr+0x1a>
 800ce60:	7804      	ldrb	r4, [r0, #0]
 800ce62:	3301      	adds	r3, #1
 800ce64:	428c      	cmp	r4, r1
 800ce66:	d1f6      	bne.n	800ce56 <memchr+0x8>
 800ce68:	bd10      	pop	{r4, pc}

0800ce6a <memcpy>:
 800ce6a:	440a      	add	r2, r1
 800ce6c:	4291      	cmp	r1, r2
 800ce6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce72:	d100      	bne.n	800ce76 <memcpy+0xc>
 800ce74:	4770      	bx	lr
 800ce76:	b510      	push	{r4, lr}
 800ce78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce7c:	4291      	cmp	r1, r2
 800ce7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce82:	d1f9      	bne.n	800ce78 <memcpy+0xe>
 800ce84:	bd10      	pop	{r4, pc}

0800ce86 <_malloc_usable_size_r>:
 800ce86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce8a:	1f18      	subs	r0, r3, #4
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	bfbc      	itt	lt
 800ce90:	580b      	ldrlt	r3, [r1, r0]
 800ce92:	18c0      	addlt	r0, r0, r3
 800ce94:	4770      	bx	lr
	...

0800ce98 <_init>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	bf00      	nop
 800ce9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce9e:	bc08      	pop	{r3}
 800cea0:	469e      	mov	lr, r3
 800cea2:	4770      	bx	lr

0800cea4 <_fini>:
 800cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea6:	bf00      	nop
 800cea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceaa:	bc08      	pop	{r3}
 800ceac:	469e      	mov	lr, r3
 800ceae:	4770      	bx	lr
