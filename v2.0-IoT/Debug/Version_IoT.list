
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c340  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d314  0800d314  000209a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d314  0800d314  000209a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d314  0800d314  000209a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d314  0800d314  0001d314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d318  0800d318  0001d318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a8  20000000  0800d31c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200009a8  0800dcc4  000209a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f1c  0800dcc4  00020f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012eea  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002694  00000000  00000000  000338fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00035f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dab  00000000  00000000  000370e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef6  00000000  00000000  00037e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fb0  00000000  00000000  00052d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fb00  00000000  00000000  0006ad31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fbc  00000000  00000000  0010a834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009a8 	.word	0x200009a8
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c50c 	.word	0x0800c50c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009ac 	.word	0x200009ac
 8000220:	0800c50c 	.word	0x0800c50c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"


void ESP8266_Init(UART_HandleTypeDef *huart1) {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b09c      	sub	sp, #112	; 0x70
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	sprintf(Tx_buffer, "AT+RESTORE\r\n");
 800023c:	4954      	ldr	r1, [pc, #336]	; (8000390 <ESP8266_Init+0x15c>)
 800023e:	4855      	ldr	r0, [pc, #340]	; (8000394 <ESP8266_Init+0x160>)
 8000240:	f00b fd46 	bl	800bcd0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 8000244:	4853      	ldr	r0, [pc, #332]	; (8000394 <ESP8266_Init+0x160>)
 8000246:	f7ff ffed 	bl	8000224 <strlen>
 800024a:	4603      	mov	r3, r0
 800024c:	b29b      	uxth	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	4950      	ldr	r1, [pc, #320]	; (8000394 <ESP8266_Init+0x160>)
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f00a ff14 	bl	800b080 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000258:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800025c:	f007 fe44 	bl	8007ee8 <HAL_Delay>

	sprintf(Tx_buffer, "AT+RST\r\n");
 8000260:	494d      	ldr	r1, [pc, #308]	; (8000398 <ESP8266_Init+0x164>)
 8000262:	484c      	ldr	r0, [pc, #304]	; (8000394 <ESP8266_Init+0x160>)
 8000264:	f00b fd34 	bl	800bcd0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 8000268:	484a      	ldr	r0, [pc, #296]	; (8000394 <ESP8266_Init+0x160>)
 800026a:	f7ff ffdb 	bl	8000224 <strlen>
 800026e:	4603      	mov	r3, r0
 8000270:	b29b      	uxth	r3, r3
 8000272:	461a      	mov	r2, r3
 8000274:	4947      	ldr	r1, [pc, #284]	; (8000394 <ESP8266_Init+0x160>)
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f00a ff02 	bl	800b080 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 800027c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000280:	f007 fe32 	bl	8007ee8 <HAL_Delay>

	sprintf(Tx_buffer, "AT\r\n");
 8000284:	4945      	ldr	r1, [pc, #276]	; (800039c <ESP8266_Init+0x168>)
 8000286:	4843      	ldr	r0, [pc, #268]	; (8000394 <ESP8266_Init+0x160>)
 8000288:	f00b fd22 	bl	800bcd0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 800028c:	4841      	ldr	r0, [pc, #260]	; (8000394 <ESP8266_Init+0x160>)
 800028e:	f7ff ffc9 	bl	8000224 <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29b      	uxth	r3, r3
 8000296:	461a      	mov	r2, r3
 8000298:	493e      	ldr	r1, [pc, #248]	; (8000394 <ESP8266_Init+0x160>)
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f00a fef0 	bl	800b080 <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 80002a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80002a4:	f007 fe20 	bl	8007ee8 <HAL_Delay>

	sprintf(Tx_buffer, "AT+CWMODE=1\r\n");
 80002a8:	493d      	ldr	r1, [pc, #244]	; (80003a0 <ESP8266_Init+0x16c>)
 80002aa:	483a      	ldr	r0, [pc, #232]	; (8000394 <ESP8266_Init+0x160>)
 80002ac:	f00b fd10 	bl	800bcd0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 80002b0:	4838      	ldr	r0, [pc, #224]	; (8000394 <ESP8266_Init+0x160>)
 80002b2:	f7ff ffb7 	bl	8000224 <strlen>
 80002b6:	4603      	mov	r3, r0
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	4935      	ldr	r1, [pc, #212]	; (8000394 <ESP8266_Init+0x160>)
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f00a fede 	bl	800b080 <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 80002c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80002c8:	f007 fe0e 	bl	8007ee8 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4a34      	ldr	r2, [pc, #208]	; (80003a4 <ESP8266_Init+0x170>)
 80002d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d4:	c303      	stmia	r3!, {r0, r1}
 80002d6:	801a      	strh	r2, [r3, #0]
 80002d8:	3302      	adds	r3, #2
 80002da:	0c12      	lsrs	r2, r2, #16
 80002dc:	701a      	strb	r2, [r3, #0]
	strcat(str, Wifi_name);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff9e 	bl	8000224 <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	4413      	add	r3, r2
 80002f2:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <ESP8266_Init+0x174>)
 80002f4:	6810      	ldr	r0, [r2, #0]
 80002f6:	6018      	str	r0, [r3, #0]
 80002f8:	8892      	ldrh	r2, [r2, #4]
 80002fa:	809a      	strh	r2, [r3, #4]
	strcat(str, "\",\"");
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff8f 	bl	8000224 <strlen>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	4413      	add	r3, r2
 8000310:	4a26      	ldr	r2, [pc, #152]	; (80003ac <ESP8266_Init+0x178>)
 8000312:	6810      	ldr	r0, [r2, #0]
 8000314:	6018      	str	r0, [r3, #0]
	strcat(str, Wifi_pass);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff82 	bl	8000224 <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4413      	add	r3, r2
 800032a:	4a21      	ldr	r2, [pc, #132]	; (80003b0 <ESP8266_Init+0x17c>)
 800032c:	461d      	mov	r5, r3
 800032e:	4614      	mov	r4, r2
 8000330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000332:	6028      	str	r0, [r5, #0]
 8000334:	6069      	str	r1, [r5, #4]
 8000336:	60aa      	str	r2, [r5, #8]
 8000338:	60eb      	str	r3, [r5, #12]
 800033a:	6820      	ldr	r0, [r4, #0]
 800033c:	6128      	str	r0, [r5, #16]
 800033e:	7923      	ldrb	r3, [r4, #4]
 8000340:	752b      	strb	r3, [r5, #20]
	strcat(str, "\"\r\n");
 8000342:	f107 030c 	add.w	r3, r7, #12
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff6c 	bl	8000224 <strlen>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	4413      	add	r3, r2
 8000356:	4a17      	ldr	r2, [pc, #92]	; (80003b4 <ESP8266_Init+0x180>)
 8000358:	6810      	ldr	r0, [r2, #0]
 800035a:	6018      	str	r0, [r3, #0]
	sprintf(Tx_buffer, "%s", str);
 800035c:	f107 030c 	add.w	r3, r7, #12
 8000360:	461a      	mov	r2, r3
 8000362:	4915      	ldr	r1, [pc, #84]	; (80003b8 <ESP8266_Init+0x184>)
 8000364:	480b      	ldr	r0, [pc, #44]	; (8000394 <ESP8266_Init+0x160>)
 8000366:	f00b fcb3 	bl	800bcd0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 800036a:	480a      	ldr	r0, [pc, #40]	; (8000394 <ESP8266_Init+0x160>)
 800036c:	f7ff ff5a 	bl	8000224 <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	b29b      	uxth	r3, r3
 8000374:	461a      	mov	r2, r3
 8000376:	4907      	ldr	r1, [pc, #28]	; (8000394 <ESP8266_Init+0x160>)
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f00a fe81 	bl	800b080 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 800037e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000382:	f007 fdb1 	bl	8007ee8 <HAL_Delay>
}
 8000386:	bf00      	nop
 8000388:	3770      	adds	r7, #112	; 0x70
 800038a:	46bd      	mov	sp, r7
 800038c:	bdb0      	pop	{r4, r5, r7, pc}
 800038e:	bf00      	nop
 8000390:	0800c524 	.word	0x0800c524
 8000394:	200009c4 	.word	0x200009c4
 8000398:	0800c534 	.word	0x0800c534
 800039c:	0800c540 	.word	0x0800c540
 80003a0:	0800c548 	.word	0x0800c548
 80003a4:	0800c558 	.word	0x0800c558
 80003a8:	0800c564 	.word	0x0800c564
 80003ac:	0800c56c 	.word	0x0800c56c
 80003b0:	0800c570 	.word	0x0800c570
 80003b4:	0800c588 	.word	0x0800c588
 80003b8:	0800c58c 	.word	0x0800c58c

080003bc <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b0c6      	sub	sp, #280	; 0x118
 80003c0:	af02      	add	r7, sp, #8
 80003c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003ca:	6018      	str	r0, [r3, #0]
 80003cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80003d4:	6019      	str	r1, [r3, #0]
 80003d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003de:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(Tx_buffer, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003e0:	4a31      	ldr	r2, [pc, #196]	; (80004a8 <sendMachineData+0xec>)
 80003e2:	4932      	ldr	r1, [pc, #200]	; (80004ac <sendMachineData+0xf0>)
 80003e4:	4832      	ldr	r0, [pc, #200]	; (80004b0 <sendMachineData+0xf4>)
 80003e6:	f00b fc73 	bl	800bcd0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 80003ea:	4831      	ldr	r0, [pc, #196]	; (80004b0 <sendMachineData+0xf4>)
 80003ec:	f7ff ff1a 	bl	8000224 <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003fc:	492c      	ldr	r1, [pc, #176]	; (80004b0 <sendMachineData+0xf4>)
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	f00a fe3e 	bl	800b080 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 8000404:	f241 7070 	movw	r0, #6000	; 0x1770
 8000408:	f007 fd6e 	bl	8007ee8 <HAL_Delay>

	sprintf(local_txA,
 800040c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000410:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000414:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000418:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800041c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000420:	4924      	ldr	r1, [pc, #144]	; (80004b4 <sendMachineData+0xf8>)
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	6812      	ldr	r2, [r2, #0]
 8000428:	4923      	ldr	r1, [pc, #140]	; (80004b8 <sendMachineData+0xfc>)
 800042a:	f00b fc51 	bl	800bcd0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 800042e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fef6 	bl	8000224 <strlen>
 8000438:	4603      	mov	r3, r0
 800043a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000446:	491d      	ldr	r1, [pc, #116]	; (80004bc <sendMachineData+0x100>)
 8000448:	4618      	mov	r0, r3
 800044a:	f00b fc41 	bl	800bcd0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff fee6 	bl	8000224 <strlen>
 8000458:	4603      	mov	r3, r0
 800045a:	b29a      	uxth	r2, r3
 800045c:	f107 0110 	add.w	r1, r7, #16
 8000460:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000468:	6818      	ldr	r0, [r3, #0]
 800046a:	f00a fe09 	bl	800b080 <HAL_UART_Transmit_IT>
	HAL_Delay(7000);
 800046e:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000472:	f007 fd39 	bl	8007ee8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000476:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fed2 	bl	8000224 <strlen>
 8000480:	4603      	mov	r3, r0
 8000482:	b29a      	uxth	r2, r3
 8000484:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000488:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800048c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	f00a fdf5 	bl	800b080 <HAL_UART_Transmit_IT>
	HAL_Delay(10000);
 8000496:	f242 7010 	movw	r0, #10000	; 0x2710
 800049a:	f007 fd25 	bl	8007ee8 <HAL_Delay>
}
 800049e:	bf00      	nop
 80004a0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	0800c590 	.word	0x0800c590
 80004ac:	0800c5a0 	.word	0x0800c5a0
 80004b0:	200009c4 	.word	0x200009c4
 80004b4:	0800c61c 	.word	0x0800c61c
 80004b8:	0800c5c0 	.word	0x0800c5c0
 80004bc:	0800c630 	.word	0x0800c630

080004c0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f023 030f 	bic.w	r3, r3, #15
 80004d0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	011b      	lsls	r3, r3, #4
 80004d6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004d8:	7b7b      	ldrb	r3, [r7, #13]
 80004da:	f043 030c 	orr.w	r3, r3, #12
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004e2:	7b7b      	ldrb	r3, [r7, #13]
 80004e4:	f043 0308 	orr.w	r3, r3, #8
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004ec:	7b3b      	ldrb	r3, [r7, #12]
 80004ee:	f043 030c 	orr.w	r3, r3, #12
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004f6:	7b3b      	ldrb	r3, [r7, #12]
 80004f8:	f043 0308 	orr.w	r3, r3, #8
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000500:	bf00      	nop
 8000502:	4825      	ldr	r0, [pc, #148]	; (8000598 <lcd_send_cmd+0xd8>)
 8000504:	f009 f8e9 	bl	80096da <HAL_I2C_GetError>
 8000508:	4603      	mov	r3, r0
 800050a:	2b04      	cmp	r3, #4
 800050c:	d0f9      	beq.n	8000502 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800050e:	bf00      	nop
 8000510:	4821      	ldr	r0, [pc, #132]	; (8000598 <lcd_send_cmd+0xd8>)
 8000512:	f009 f8d5 	bl	80096c0 <HAL_I2C_GetState>
 8000516:	4603      	mov	r3, r0
 8000518:	2b20      	cmp	r3, #32
 800051a:	d1f9      	bne.n	8000510 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <lcd_send_cmd+0xdc>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d116      	bne.n	8000552 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e00f      	b.n	800054a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	3310      	adds	r3, #16
 800052e:	443b      	add	r3, r7
 8000530:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	f022 0208 	bic.w	r2, r2, #8
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	3310      	adds	r3, #16
 800053e:	443b      	add	r3, r7
 8000540:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	3301      	adds	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d9ec      	bls.n	800052a <lcd_send_cmd+0x6a>
 8000550:	e015      	b.n	800057e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000552:	2300      	movs	r3, #0
 8000554:	73bb      	strb	r3, [r7, #14]
 8000556:	e00f      	b.n	8000578 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	3310      	adds	r3, #16
 800055c:	443b      	add	r3, r7
 800055e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	f042 0208 	orr.w	r2, r2, #8
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	3310      	adds	r3, #16
 800056c:	443b      	add	r3, r7
 800056e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000572:	7bbb      	ldrb	r3, [r7, #14]
 8000574:	3301      	adds	r3, #1
 8000576:	73bb      	strb	r3, [r7, #14]
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	2b03      	cmp	r3, #3
 800057c:	d9ec      	bls.n	8000558 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800057e:	f107 0208 	add.w	r2, r7, #8
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2304      	movs	r3, #4
 8000588:	214e      	movs	r1, #78	; 0x4e
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <lcd_send_cmd+0xd8>)
 800058c:	f008 fc38 	bl	8008e00 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000ce8 	.word	0x20000ce8
 800059c:	20000abe 	.word	0x20000abe

080005a0 <lcd_send_data>:

void lcd_send_data (char data) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f023 030f 	bic.w	r3, r3, #15
 80005b0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005b8:	7b7b      	ldrb	r3, [r7, #13]
 80005ba:	f043 030d 	orr.w	r3, r3, #13
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005c2:	7b7b      	ldrb	r3, [r7, #13]
 80005c4:	f043 0309 	orr.w	r3, r3, #9
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005cc:	7b3b      	ldrb	r3, [r7, #12]
 80005ce:	f043 030d 	orr.w	r3, r3, #13
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005d6:	7b3b      	ldrb	r3, [r7, #12]
 80005d8:	f043 0309 	orr.w	r3, r3, #9
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005e0:	bf00      	nop
 80005e2:	4825      	ldr	r0, [pc, #148]	; (8000678 <lcd_send_data+0xd8>)
 80005e4:	f009 f879 	bl	80096da <HAL_I2C_GetError>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d0f9      	beq.n	80005e2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005ee:	bf00      	nop
 80005f0:	4821      	ldr	r0, [pc, #132]	; (8000678 <lcd_send_data+0xd8>)
 80005f2:	f009 f865 	bl	80096c0 <HAL_I2C_GetState>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d1f9      	bne.n	80005f0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <lcd_send_data+0xdc>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d116      	bne.n	8000632 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e00f      	b.n	800062a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	3310      	adds	r3, #16
 800060e:	443b      	add	r3, r7
 8000610:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	f022 0208 	bic.w	r2, r2, #8
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	3310      	adds	r3, #16
 800061e:	443b      	add	r3, r7
 8000620:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	3301      	adds	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d9ec      	bls.n	800060a <lcd_send_data+0x6a>
 8000630:	e015      	b.n	800065e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	73bb      	strb	r3, [r7, #14]
 8000636:	e00f      	b.n	8000658 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	3310      	adds	r3, #16
 800063c:	443b      	add	r3, r7
 800063e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	f042 0208 	orr.w	r2, r2, #8
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	3310      	adds	r3, #16
 800064c:	443b      	add	r3, r7
 800064e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	3301      	adds	r3, #1
 8000656:	73bb      	strb	r3, [r7, #14]
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	2b03      	cmp	r3, #3
 800065c:	d9ec      	bls.n	8000638 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800065e:	f107 0208 	add.w	r2, r7, #8
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	214e      	movs	r1, #78	; 0x4e
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <lcd_send_data+0xd8>)
 800066c:	f008 fbc8 	bl	8008e00 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000ce8 	.word	0x20000ce8
 800067c:	20000abe 	.word	0x20000abe

08000680 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000688:	e006      	b.n	8000698 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	607a      	str	r2, [r7, #4]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff84 	bl	80005a0 <lcd_send_data>
	while (*str) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f4      	bne.n	800068a <lcd_send_string+0xa>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_init>:

void lcd_init (void) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80006ae:	2002      	movs	r0, #2
 80006b0:	f7ff ff06 	bl	80004c0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80006b4:	2028      	movs	r0, #40	; 0x28
 80006b6:	f7ff ff03 	bl	80004c0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80006ba:	200c      	movs	r0, #12
 80006bc:	f7ff ff00 	bl	80004c0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80006c0:	2080      	movs	r0, #128	; 0x80
 80006c2:	f7ff fefd 	bl	80004c0 <lcd_send_cmd>
	lcd_backlight(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 f840 	bl	800074c <lcd_backlight>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d106      	bne.n	80006f4 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	337f      	adds	r3, #127	; 0x7f
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fee7 	bl	80004c0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80006f2:	e008      	b.n	8000706 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d105      	bne.n	8000706 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	3b41      	subs	r3, #65	; 0x41
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fedd 	bl	80004c0 <lcd_send_cmd>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	603a      	str	r2, [r7, #0]
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	460b      	mov	r3, r1
 800071c:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffd3 	bl	80006d0 <lcd_gotoxy>
	lcd_send_string(str);
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f7ff ffa8 	bl	8000680 <lcd_send_string>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcd_clear>:

void lcd_clear(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff febf 	bl	80004c0 <lcd_send_cmd>
    HAL_Delay(2);
 8000742:	2002      	movs	r0, #2
 8000744:	f007 fbd0 	bl	8007ee8 <HAL_Delay>

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <lcd_backlight+0x20>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff feaf 	bl	80004c0 <lcd_send_cmd>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000abe 	.word	0x20000abe

08000770 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000774:	f3bf 8f4f 	dsb	sy
}
 8000778:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <__NVIC_SystemReset+0x24>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000782:	4904      	ldr	r1, [pc, #16]	; (8000794 <__NVIC_SystemReset+0x24>)
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_SystemReset+0x28>)
 8000786:	4313      	orrs	r3, r2
 8000788:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800078a:	f3bf 8f4f 	dsb	sy
}
 800078e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <__NVIC_SystemReset+0x20>
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	05fa0004 	.word	0x05fa0004

0800079c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fd3d 	bl	8000224 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	3301      	adds	r3, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00b f998 	bl	800bae4 <malloc>
 80007b4:	4603      	mov	r3, r0
 80007b6:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d003      	beq.n	80007c6 <copyText+0x2a>
        strcpy(result, text);
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f00b faf9 	bl	800bdb8 <strcpy>
    }
    return result;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <menu>:
        }
    }
    return result;
}

void menu(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80007d4:	2101      	movs	r1, #1
 80007d6:	488f      	ldr	r0, [pc, #572]	; (8000a14 <menu+0x244>)
 80007d8:	f008 f956 	bl	8008a88 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	f040 808e 	bne.w	8000900 <menu+0x130>
 80007e4:	4b8c      	ldr	r3, [pc, #560]	; (8000a18 <menu+0x248>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f000 8086 	beq.w	8000900 <menu+0x130>
		menuSayac = menuSayac+1;
 80007f4:	4b89      	ldr	r3, [pc, #548]	; (8000a1c <menu+0x24c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b87      	ldr	r3, [pc, #540]	; (8000a1c <menu+0x24c>)
 80007fe:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000800:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <menu+0x24c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b20      	cmp	r3, #32
 8000806:	d102      	bne.n	800080e <menu+0x3e>
			menuSayac = 1;
 8000808:	4b84      	ldr	r3, [pc, #528]	; (8000a1c <menu+0x24c>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <menu+0x24c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b12      	cmp	r3, #18
 8000814:	d106      	bne.n	8000824 <menu+0x54>
 8000816:	4b82      	ldr	r3, [pc, #520]	; (8000a20 <menu+0x250>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d102      	bne.n	8000824 <menu+0x54>
			menuSayac = 21;
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <menu+0x24c>)
 8000820:	2215      	movs	r2, #21
 8000822:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000824:	4b7d      	ldr	r3, [pc, #500]	; (8000a1c <menu+0x24c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b08      	cmp	r3, #8
 800082a:	d106      	bne.n	800083a <menu+0x6a>
 800082c:	4b7d      	ldr	r3, [pc, #500]	; (8000a24 <menu+0x254>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <menu+0x6a>
			menuSayac = 16;
 8000834:	4b79      	ldr	r3, [pc, #484]	; (8000a1c <menu+0x24c>)
 8000836:	2210      	movs	r2, #16
 8000838:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800083a:	4b78      	ldr	r3, [pc, #480]	; (8000a1c <menu+0x24c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b0d      	cmp	r3, #13
 8000840:	d106      	bne.n	8000850 <menu+0x80>
 8000842:	4b78      	ldr	r3, [pc, #480]	; (8000a24 <menu+0x254>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d102      	bne.n	8000850 <menu+0x80>
			menuSayac = 16;
 800084a:	4b74      	ldr	r3, [pc, #464]	; (8000a1c <menu+0x24c>)
 800084c:	2210      	movs	r2, #16
 800084e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000850:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <menu+0x24c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d106      	bne.n	8000866 <menu+0x96>
 8000858:	4b72      	ldr	r3, [pc, #456]	; (8000a24 <menu+0x254>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d102      	bne.n	8000866 <menu+0x96>
			menuSayac = 13;
 8000860:	4b6e      	ldr	r3, [pc, #440]	; (8000a1c <menu+0x24c>)
 8000862:	220d      	movs	r2, #13
 8000864:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000866:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <menu+0x24c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d10a      	bne.n	8000884 <menu+0xb4>
 800086e:	4b6e      	ldr	r3, [pc, #440]	; (8000a28 <menu+0x258>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d003      	beq.n	800087e <menu+0xae>
 8000876:	4b6c      	ldr	r3, [pc, #432]	; (8000a28 <menu+0x258>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d102      	bne.n	8000884 <menu+0xb4>
			menuSayac = 11;
 800087e:	4b67      	ldr	r3, [pc, #412]	; (8000a1c <menu+0x24c>)
 8000880:	220b      	movs	r2, #11
 8000882:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8000884:	4b65      	ldr	r3, [pc, #404]	; (8000a1c <menu+0x24c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b0c      	cmp	r3, #12
 800088a:	d10e      	bne.n	80008aa <menu+0xda>
 800088c:	4b67      	ldr	r3, [pc, #412]	; (8000a2c <menu+0x25c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d003      	beq.n	800089c <menu+0xcc>
 8000894:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <menu+0x25c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d106      	bne.n	80008aa <menu+0xda>
 800089c:	4b61      	ldr	r3, [pc, #388]	; (8000a24 <menu+0x254>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d102      	bne.n	80008aa <menu+0xda>
			menuSayac = 16;
 80008a4:	4b5d      	ldr	r3, [pc, #372]	; (8000a1c <menu+0x24c>)
 80008a6:	2210      	movs	r2, #16
 80008a8:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80008aa:	4b5c      	ldr	r3, [pc, #368]	; (8000a1c <menu+0x24c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b0c      	cmp	r3, #12
 80008b0:	d10e      	bne.n	80008d0 <menu+0x100>
 80008b2:	4b5e      	ldr	r3, [pc, #376]	; (8000a2c <menu+0x25c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d003      	beq.n	80008c2 <menu+0xf2>
 80008ba:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <menu+0x25c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d106      	bne.n	80008d0 <menu+0x100>
 80008c2:	4b58      	ldr	r3, [pc, #352]	; (8000a24 <menu+0x254>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d102      	bne.n	80008d0 <menu+0x100>
			menuSayac = 13;
 80008ca:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <menu+0x24c>)
 80008cc:	220d      	movs	r2, #13
 80008ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80008d0:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <menu+0x24c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d106      	bne.n	80008e6 <menu+0x116>
 80008d8:	4b55      	ldr	r3, [pc, #340]	; (8000a30 <menu+0x260>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d102      	bne.n	80008e6 <menu+0x116>
			menuSayac = 16;
 80008e0:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <menu+0x24c>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80008e6:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <menu+0x24c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b18      	cmp	r3, #24
 80008ec:	d106      	bne.n	80008fc <menu+0x12c>
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <menu+0x250>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <menu+0x12c>
			menuSayac = 26;
 80008f6:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <menu+0x24c>)
 80008f8:	221a      	movs	r2, #26
 80008fa:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80008fc:	f004 fb1a 	bl	8004f34 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000900:	2108      	movs	r1, #8
 8000902:	484c      	ldr	r0, [pc, #304]	; (8000a34 <menu+0x264>)
 8000904:	f008 f8c0 	bl	8008a88 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d175      	bne.n	80009fa <menu+0x22a>
 800090e:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <menu+0x248>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	f083 0301 	eor.w	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d06e      	beq.n	80009fa <menu+0x22a>
		if (menuSayac <= 1) {
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <menu+0x24c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d802      	bhi.n	800092a <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <menu+0x24c>)
 8000926:	2220      	movs	r2, #32
 8000928:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <menu+0x24c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3b01      	subs	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <menu+0x24c>)
 8000934:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <menu+0x24c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b14      	cmp	r3, #20
 800093c:	d106      	bne.n	800094c <menu+0x17c>
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <menu+0x250>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <menu+0x17c>
			menuSayac = 17;
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <menu+0x24c>)
 8000948:	2211      	movs	r2, #17
 800094a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <menu+0x24c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d106      	bne.n	8000962 <menu+0x192>
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <menu+0x254>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <menu+0x192>
			menuSayac = 7;
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <menu+0x24c>)
 800095e:	2207      	movs	r2, #7
 8000960:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <menu+0x24c>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b0f      	cmp	r3, #15
 8000968:	d106      	bne.n	8000978 <menu+0x1a8>
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <menu+0x254>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <menu+0x1a8>
			menuSayac = 12;
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <menu+0x24c>)
 8000974:	220c      	movs	r2, #12
 8000976:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <menu+0x24c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b0c      	cmp	r3, #12
 800097e:	d106      	bne.n	800098e <menu+0x1be>
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <menu+0x254>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d102      	bne.n	800098e <menu+0x1be>
			menuSayac = 8;
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <menu+0x24c>)
 800098a:	2208      	movs	r2, #8
 800098c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <menu+0x24c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b0a      	cmp	r3, #10
 8000994:	d10a      	bne.n	80009ac <menu+0x1dc>
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <menu+0x258>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d003      	beq.n	80009a6 <menu+0x1d6>
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <menu+0x258>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d102      	bne.n	80009ac <menu+0x1dc>
			menuSayac = 9;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <menu+0x24c>)
 80009a8:	2209      	movs	r2, #9
 80009aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <menu+0x24c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b0c      	cmp	r3, #12
 80009b2:	d10a      	bne.n	80009ca <menu+0x1fa>
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <menu+0x25c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d003      	beq.n	80009c4 <menu+0x1f4>
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <menu+0x25c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d102      	bne.n	80009ca <menu+0x1fa>
			menuSayac = 11;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <menu+0x24c>)
 80009c6:	220b      	movs	r2, #11
 80009c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <menu+0x24c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d106      	bne.n	80009e0 <menu+0x210>
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <menu+0x260>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d102      	bne.n	80009e0 <menu+0x210>
			menuSayac = 14;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <menu+0x24c>)
 80009dc:	220e      	movs	r2, #14
 80009de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <menu+0x24c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	d106      	bne.n	80009f6 <menu+0x226>
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <menu+0x250>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <menu+0x226>
			menuSayac = 23;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <menu+0x24c>)
 80009f2:	2217      	movs	r2, #23
 80009f4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80009f6:	f004 fa9d 	bl	8004f34 <bekle>
	}

	if (menuSayac == 0) {
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <menu+0x24c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d134      	bne.n	8000a6c <menu+0x29c>
		if(dilSecim == 0) {
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <menu+0x268>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d122      	bne.n	8000a50 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <menu+0x26c>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2001      	movs	r0, #1
 8000a10:	e016      	b.n	8000a40 <menu+0x270>
 8000a12:	bf00      	nop
 8000a14:	40010800 	.word	0x40010800
 8000a18:	20000b5a 	.word	0x20000b5a
 8000a1c:	20000b2c 	.word	0x20000b2c
 8000a20:	20000b3b 	.word	0x20000b3b
 8000a24:	20000b34 	.word	0x20000b34
 8000a28:	20000b35 	.word	0x20000b35
 8000a2c:	20000b36 	.word	0x20000b36
 8000a30:	20000b37 	.word	0x20000b37
 8000a34:	40011000 	.word	0x40011000
 8000a38:	20000b4c 	.word	0x20000b4c
 8000a3c:	0800c640 	.word	0x0800c640
 8000a40:	f7ff fe65 	bl	800070e <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000a44:	4a94      	ldr	r2, [pc, #592]	; (8000c98 <menu+0x4c8>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f7ff fe60 	bl	800070e <lcd_print>
 8000a4e:	e00d      	b.n	8000a6c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000a50:	4b92      	ldr	r3, [pc, #584]	; (8000c9c <menu+0x4cc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d109      	bne.n	8000a6c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000a58:	4a91      	ldr	r2, [pc, #580]	; (8000ca0 <menu+0x4d0>)
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fe56 	bl	800070e <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000a62:	4a90      	ldr	r2, [pc, #576]	; (8000ca4 <menu+0x4d4>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff fe51 	bl	800070e <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8000a6c:	4b8e      	ldr	r3, [pc, #568]	; (8000ca8 <menu+0x4d8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	f040 82b5 	bne.w	8000fe0 <menu+0x810>
		if(dilSecim == 0) {
 8000a76:	4b89      	ldr	r3, [pc, #548]	; (8000c9c <menu+0x4cc>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d105      	bne.n	8000a8a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8000a7e:	4a8b      	ldr	r2, [pc, #556]	; (8000cac <menu+0x4dc>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff fe43 	bl	800070e <lcd_print>
 8000a88:	e008      	b.n	8000a9c <menu+0x2cc>
		} else if(dilSecim == 1) {
 8000a8a:	4b84      	ldr	r3, [pc, #528]	; (8000c9c <menu+0x4cc>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d104      	bne.n	8000a9c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000a92:	4a87      	ldr	r2, [pc, #540]	; (8000cb0 <menu+0x4e0>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fe39 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000a9c:	4b85      	ldr	r3, [pc, #532]	; (8000cb4 <menu+0x4e4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d123      	bne.n	8000aec <menu+0x31c>
			if(dilSecim == 0) {
 8000aa4:	4b7d      	ldr	r3, [pc, #500]	; (8000c9c <menu+0x4cc>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8000aac:	4a82      	ldr	r2, [pc, #520]	; (8000cb8 <menu+0x4e8>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff fe2c 	bl	800070e <lcd_print>
 8000ab6:	e008      	b.n	8000aca <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000ab8:	4b78      	ldr	r3, [pc, #480]	; (8000c9c <menu+0x4cc>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d104      	bne.n	8000aca <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000ac0:	4a7e      	ldr	r2, [pc, #504]	; (8000cbc <menu+0x4ec>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fe22 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8000aca:	4a7d      	ldr	r2, [pc, #500]	; (8000cc0 <menu+0x4f0>)
 8000acc:	210f      	movs	r1, #15
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f7ff fe1d 	bl	800070e <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000ad4:	4b7b      	ldr	r3, [pc, #492]	; (8000cc4 <menu+0x4f4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	220a      	movs	r2, #10
 8000ada:	497b      	ldr	r1, [pc, #492]	; (8000cc8 <menu+0x4f8>)
 8000adc:	4618      	mov	r0, r3
 8000ade:	f00a ffff 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000ae2:	4a79      	ldr	r2, [pc, #484]	; (8000cc8 <menu+0x4f8>)
 8000ae4:	210e      	movs	r1, #14
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f7ff fe11 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000aec:	4b71      	ldr	r3, [pc, #452]	; (8000cb4 <menu+0x4e4>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d123      	bne.n	8000b3c <menu+0x36c>
			if(dilSecim == 0) {
 8000af4:	4b69      	ldr	r3, [pc, #420]	; (8000c9c <menu+0x4cc>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d105      	bne.n	8000b08 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8000afc:	4a73      	ldr	r2, [pc, #460]	; (8000ccc <menu+0x4fc>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	2002      	movs	r0, #2
 8000b02:	f7ff fe04 	bl	800070e <lcd_print>
 8000b06:	e008      	b.n	8000b1a <menu+0x34a>
			} else if(dilSecim == 1) {
 8000b08:	4b64      	ldr	r3, [pc, #400]	; (8000c9c <menu+0x4cc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d104      	bne.n	8000b1a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8000b10:	4a6f      	ldr	r2, [pc, #444]	; (8000cd0 <menu+0x500>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff fdfa 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b1a:	4a6e      	ldr	r2, [pc, #440]	; (8000cd4 <menu+0x504>)
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff fdf5 	bl	800070e <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000b24:	4b6c      	ldr	r3, [pc, #432]	; (8000cd8 <menu+0x508>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	220a      	movs	r2, #10
 8000b2a:	4967      	ldr	r1, [pc, #412]	; (8000cc8 <menu+0x4f8>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00a ffd7 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000b32:	4a65      	ldr	r2, [pc, #404]	; (8000cc8 <menu+0x4f8>)
 8000b34:	210e      	movs	r1, #14
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff fde9 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8000b3c:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <menu+0x4e4>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d123      	bne.n	8000b8c <menu+0x3bc>
			if(dilSecim == 0) {
 8000b44:	4b55      	ldr	r3, [pc, #340]	; (8000c9c <menu+0x4cc>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8000b4c:	4a63      	ldr	r2, [pc, #396]	; (8000cdc <menu+0x50c>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff fddc 	bl	800070e <lcd_print>
 8000b56:	e008      	b.n	8000b6a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <menu+0x4cc>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d104      	bne.n	8000b6a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000b60:	4a5f      	ldr	r2, [pc, #380]	; (8000ce0 <menu+0x510>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff fdd2 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b6a:	4a5a      	ldr	r2, [pc, #360]	; (8000cd4 <menu+0x504>)
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f7ff fdcd 	bl	800070e <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000b74:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <menu+0x514>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	220a      	movs	r2, #10
 8000b7a:	4953      	ldr	r1, [pc, #332]	; (8000cc8 <menu+0x4f8>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f00a ffaf 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000b82:	4a51      	ldr	r2, [pc, #324]	; (8000cc8 <menu+0x4f8>)
 8000b84:	210e      	movs	r1, #14
 8000b86:	2002      	movs	r0, #2
 8000b88:	f7ff fdc1 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000b8c:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <menu+0x4e4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d123      	bne.n	8000bdc <menu+0x40c>
			if(dilSecim == 0) {
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <menu+0x4cc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d105      	bne.n	8000ba8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8000b9c:	4a52      	ldr	r2, [pc, #328]	; (8000ce8 <menu+0x518>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff fdb4 	bl	800070e <lcd_print>
 8000ba6:	e008      	b.n	8000bba <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <menu+0x4cc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d104      	bne.n	8000bba <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000bb0:	4a4e      	ldr	r2, [pc, #312]	; (8000cec <menu+0x51c>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f7ff fdaa 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <menu+0x504>)
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff fda5 	bl	800070e <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000bc4:	4b4a      	ldr	r3, [pc, #296]	; (8000cf0 <menu+0x520>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	220a      	movs	r2, #10
 8000bca:	493f      	ldr	r1, [pc, #252]	; (8000cc8 <menu+0x4f8>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00a ff87 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000bd2:	4a3d      	ldr	r2, [pc, #244]	; (8000cc8 <menu+0x4f8>)
 8000bd4:	210e      	movs	r1, #14
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f7ff fd99 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <menu+0x4e4>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d123      	bne.n	8000c2c <menu+0x45c>
			if(dilSecim == 0) {
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <menu+0x4cc>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d105      	bne.n	8000bf8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8000bec:	4a41      	ldr	r2, [pc, #260]	; (8000cf4 <menu+0x524>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f7ff fd8c 	bl	800070e <lcd_print>
 8000bf6:	e008      	b.n	8000c0a <menu+0x43a>
			} else if(dilSecim == 1) {
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <menu+0x4cc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d104      	bne.n	8000c0a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8000c00:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <menu+0x528>)
 8000c02:	2101      	movs	r1, #1
 8000c04:	2002      	movs	r0, #2
 8000c06:	f7ff fd82 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000c0a:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <menu+0x504>)
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f7ff fd7d 	bl	800070e <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <menu+0x52c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	220a      	movs	r2, #10
 8000c1a:	492b      	ldr	r1, [pc, #172]	; (8000cc8 <menu+0x4f8>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00a ff5f 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <menu+0x4f8>)
 8000c24:	210e      	movs	r1, #14
 8000c26:	2002      	movs	r0, #2
 8000c28:	f7ff fd71 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <menu+0x4e4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b05      	cmp	r3, #5
 8000c32:	d123      	bne.n	8000c7c <menu+0x4ac>
			if(dilSecim == 0) {
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <menu+0x4cc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d105      	bne.n	8000c48 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <menu+0x530>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2002      	movs	r0, #2
 8000c42:	f7ff fd64 	bl	800070e <lcd_print>
 8000c46:	e008      	b.n	8000c5a <menu+0x48a>
			} else if(dilSecim == 1) {
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <menu+0x4cc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d104      	bne.n	8000c5a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000c50:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <menu+0x534>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	2002      	movs	r0, #2
 8000c56:	f7ff fd5a 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <menu+0x504>)
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fd55 	bl	800070e <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <menu+0x538>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	220a      	movs	r2, #10
 8000c6a:	4917      	ldr	r1, [pc, #92]	; (8000cc8 <menu+0x4f8>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f00a ff37 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000c72:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <menu+0x4f8>)
 8000c74:	210e      	movs	r1, #14
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff fd49 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <menu+0x4e4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d15f      	bne.n	8000d44 <menu+0x574>
			if(dilSecim == 0) {
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <menu+0x4cc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d141      	bne.n	8000d10 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <menu+0x53c>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2002      	movs	r0, #2
 8000c92:	f7ff fd3c 	bl	800070e <lcd_print>
 8000c96:	e044      	b.n	8000d22 <menu+0x552>
 8000c98:	0800c654 	.word	0x0800c654
 8000c9c:	20000b4c 	.word	0x20000b4c
 8000ca0:	0800c668 	.word	0x0800c668
 8000ca4:	0800c67c 	.word	0x0800c67c
 8000ca8:	20000b2c 	.word	0x20000b2c
 8000cac:	0800c690 	.word	0x0800c690
 8000cb0:	0800c6a4 	.word	0x0800c6a4
 8000cb4:	20000b2e 	.word	0x20000b2e
 8000cb8:	0800c6b8 	.word	0x0800c6b8
 8000cbc:	0800c6c8 	.word	0x0800c6c8
 8000cc0:	0800c6d8 	.word	0x0800c6d8
 8000cc4:	20000b4d 	.word	0x20000b4d
 8000cc8:	20000b00 	.word	0x20000b00
 8000ccc:	0800c6dc 	.word	0x0800c6dc
 8000cd0:	0800c6ec 	.word	0x0800c6ec
 8000cd4:	0800c6fc 	.word	0x0800c6fc
 8000cd8:	20000b4e 	.word	0x20000b4e
 8000cdc:	0800c700 	.word	0x0800c700
 8000ce0:	0800c710 	.word	0x0800c710
 8000ce4:	20000b4f 	.word	0x20000b4f
 8000ce8:	0800c720 	.word	0x0800c720
 8000cec:	0800c730 	.word	0x0800c730
 8000cf0:	20000b50 	.word	0x20000b50
 8000cf4:	0800c740 	.word	0x0800c740
 8000cf8:	0800c750 	.word	0x0800c750
 8000cfc:	20000b51 	.word	0x20000b51
 8000d00:	0800c760 	.word	0x0800c760
 8000d04:	0800c770 	.word	0x0800c770
 8000d08:	20000b52 	.word	0x20000b52
 8000d0c:	0800c780 	.word	0x0800c780
			} else if(dilSecim == 1) {
 8000d10:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <menu+0x680>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d104      	bne.n	8000d22 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000d18:	4a4e      	ldr	r2, [pc, #312]	; (8000e54 <menu+0x684>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fcf6 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d22:	4a4d      	ldr	r2, [pc, #308]	; (8000e58 <menu+0x688>)
 8000d24:	210f      	movs	r1, #15
 8000d26:	2002      	movs	r0, #2
 8000d28:	f7ff fcf1 	bl	800070e <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000d2c:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <menu+0x68c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	220a      	movs	r2, #10
 8000d32:	494b      	ldr	r1, [pc, #300]	; (8000e60 <menu+0x690>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f00a fed3 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000d3a:	4a49      	ldr	r2, [pc, #292]	; (8000e60 <menu+0x690>)
 8000d3c:	210e      	movs	r1, #14
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fce5 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000d44:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <menu+0x694>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b07      	cmp	r3, #7
 8000d4a:	d123      	bne.n	8000d94 <menu+0x5c4>
			if(dilSecim == 0) {
 8000d4c:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <menu+0x680>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000d54:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <menu+0x698>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fcd8 	bl	800070e <lcd_print>
 8000d5e:	e008      	b.n	8000d72 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <menu+0x680>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d104      	bne.n	8000d72 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000d68:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <menu+0x69c>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f7ff fcce 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d72:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <menu+0x688>)
 8000d74:	210f      	movs	r1, #15
 8000d76:	2002      	movs	r0, #2
 8000d78:	f7ff fcc9 	bl	800070e <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000d7c:	4b3c      	ldr	r3, [pc, #240]	; (8000e70 <menu+0x6a0>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	220a      	movs	r2, #10
 8000d82:	4937      	ldr	r1, [pc, #220]	; (8000e60 <menu+0x690>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00a feab 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000d8a:	4a35      	ldr	r2, [pc, #212]	; (8000e60 <menu+0x690>)
 8000d8c:	210e      	movs	r1, #14
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f7ff fcbd 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000d94:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <menu+0x694>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d123      	bne.n	8000de4 <menu+0x614>
			if(dilSecim == 0) {
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <menu+0x680>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000da4:	4a33      	ldr	r2, [pc, #204]	; (8000e74 <menu+0x6a4>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	2002      	movs	r0, #2
 8000daa:	f7ff fcb0 	bl	800070e <lcd_print>
 8000dae:	e008      	b.n	8000dc2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <menu+0x680>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d104      	bne.n	8000dc2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000db8:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <menu+0x6a8>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f7ff fca6 	bl	800070e <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000dc2:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <menu+0x688>)
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff fca1 	bl	800070e <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <menu+0x6ac>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	4923      	ldr	r1, [pc, #140]	; (8000e60 <menu+0x690>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00a fe83 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 8000dda:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <menu+0x690>)
 8000ddc:	210e      	movs	r1, #14
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff fc95 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <menu+0x694>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b09      	cmp	r3, #9
 8000dea:	d123      	bne.n	8000e34 <menu+0x664>
			if(dilSecim == 0) {
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <menu+0x680>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d105      	bne.n	8000e00 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000df4:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <menu+0x6b0>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f7ff fc88 	bl	800070e <lcd_print>
 8000dfe:	e008      	b.n	8000e12 <menu+0x642>
			} else if(dilSecim == 1) {
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <menu+0x680>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d104      	bne.n	8000e12 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <menu+0x6b4>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fc7e 	bl	800070e <lcd_print>
			}
			lcd_print(2, 16, " ");
 8000e12:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <menu+0x6b8>)
 8000e14:	2110      	movs	r1, #16
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fc79 	bl	800070e <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <menu+0x6bc>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	220a      	movs	r2, #10
 8000e22:	490f      	ldr	r1, [pc, #60]	; (8000e60 <menu+0x690>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00a fe5b 	bl	800bae0 <itoa>
			lcd_print(2, 15, snum);
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <menu+0x690>)
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f7ff fc6d 	bl	800070e <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <menu+0x694>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d134      	bne.n	8000ea6 <menu+0x6d6>
			if(dilSecim == 0) {
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <menu+0x680>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d127      	bne.n	8000e94 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <menu+0x6c0>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff fc60 	bl	800070e <lcd_print>
 8000e4e:	e02a      	b.n	8000ea6 <menu+0x6d6>
 8000e50:	20000b4c 	.word	0x20000b4c
 8000e54:	0800c790 	.word	0x0800c790
 8000e58:	0800c6fc 	.word	0x0800c6fc
 8000e5c:	20000b53 	.word	0x20000b53
 8000e60:	20000b00 	.word	0x20000b00
 8000e64:	20000b2e 	.word	0x20000b2e
 8000e68:	0800c7a0 	.word	0x0800c7a0
 8000e6c:	0800c7b0 	.word	0x0800c7b0
 8000e70:	20000b54 	.word	0x20000b54
 8000e74:	0800c7c0 	.word	0x0800c7c0
 8000e78:	0800c7d0 	.word	0x0800c7d0
 8000e7c:	20000b55 	.word	0x20000b55
 8000e80:	0800c7e0 	.word	0x0800c7e0
 8000e84:	0800c7f0 	.word	0x0800c7f0
 8000e88:	0800c800 	.word	0x0800c800
 8000e8c:	20000b56 	.word	0x20000b56
 8000e90:	0800c804 	.word	0x0800c804
			} else if(dilSecim == 1) {
 8000e94:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <menu+0x8d0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d104      	bne.n	8000ea6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000e9c:	4a81      	ldr	r2, [pc, #516]	; (80010a4 <menu+0x8d4>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f7ff fc34 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	487f      	ldr	r0, [pc, #508]	; (80010a8 <menu+0x8d8>)
 8000eaa:	f007 fded 	bl	8008a88 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d119      	bne.n	8000ee8 <menu+0x718>
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <menu+0x8dc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f083 0301 	eor.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d012      	beq.n	8000ee8 <menu+0x718>
 8000ec2:	4b7b      	ldr	r3, [pc, #492]	; (80010b0 <menu+0x8e0>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10e      	bne.n	8000ee8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000eca:	4b7a      	ldr	r3, [pc, #488]	; (80010b4 <menu+0x8e4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b78      	ldr	r3, [pc, #480]	; (80010b4 <menu+0x8e4>)
 8000ed4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000ed6:	4b77      	ldr	r3, [pc, #476]	; (80010b4 <menu+0x8e4>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d902      	bls.n	8000ee4 <menu+0x714>
				hataGostermeSirasi = 0;
 8000ede:	4b75      	ldr	r3, [pc, #468]	; (80010b4 <menu+0x8e4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ee4:	f004 f826 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ee8:	2104      	movs	r1, #4
 8000eea:	486f      	ldr	r0, [pc, #444]	; (80010a8 <menu+0x8d8>)
 8000eec:	f007 fdcc 	bl	8008a88 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d119      	bne.n	8000f2a <menu+0x75a>
 8000ef6:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <menu+0x8dc>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	f083 0301 	eor.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d012      	beq.n	8000f2a <menu+0x75a>
 8000f04:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <menu+0x8e0>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10e      	bne.n	8000f2a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000f0c:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <menu+0x8e4>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <menu+0x8e4>)
 8000f16:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000f18:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <menu+0x8e4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b0b      	cmp	r3, #11
 8000f1e:	d902      	bls.n	8000f26 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000f20:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <menu+0x8e4>)
 8000f22:	220a      	movs	r2, #10
 8000f24:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000f26:	f004 f805 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	485e      	ldr	r0, [pc, #376]	; (80010a8 <menu+0x8d8>)
 8000f2e:	f007 fdab 	bl	8008a88 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d153      	bne.n	8000fe0 <menu+0x810>
 8000f38:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <menu+0x8dc>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f083 0301 	eor.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d04c      	beq.n	8000fe0 <menu+0x810>
 8000f46:	4b5b      	ldr	r3, [pc, #364]	; (80010b4 <menu+0x8e4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d148      	bne.n	8000fe0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <menu+0x8e8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	4b59      	ldr	r3, [pc, #356]	; (80010bc <menu+0x8ec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000f5c:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <menu+0x8f0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	4b56      	ldr	r3, [pc, #344]	; (80010bc <menu+0x8ec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000f6a:	4b56      	ldr	r3, [pc, #344]	; (80010c4 <menu+0x8f4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <menu+0x8ec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <menu+0x8f8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <menu+0x8ec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <menu+0x8fc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <menu+0x8ec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000f94:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <menu+0x900>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	4b48      	ldr	r3, [pc, #288]	; (80010bc <menu+0x8ec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <menu+0x904>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <menu+0x8ec>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <menu+0x908>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <menu+0x8ec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000fbe:	4b47      	ldr	r3, [pc, #284]	; (80010dc <menu+0x90c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <menu+0x8ec>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000fcc:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <menu+0x910>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <menu+0x8ec>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <menu+0x914>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000fe0:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <menu+0x918>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f040 80fc 	bne.w	80011e2 <menu+0xa12>
		if(dilSecim == 0) {
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <menu+0x8d0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000ff2:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <menu+0x91c>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fb89 	bl	800070e <lcd_print>
 8000ffc:	e008      	b.n	8001010 <menu+0x840>
		} else if(dilSecim == 1) {
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <menu+0x8d0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d104      	bne.n	8001010 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001006:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <menu+0x920>)
 8001008:	2101      	movs	r1, #1
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fb7f 	bl	800070e <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <menu+0x8e0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d003      	beq.n	8001020 <menu+0x850>
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <menu+0x8e0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d112      	bne.n	8001046 <menu+0x876>
			if(dilSecim == 0) {
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <menu+0x8d0>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001028:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <menu+0x924>)
 800102a:	2101      	movs	r1, #1
 800102c:	2002      	movs	r0, #2
 800102e:	f7ff fb6e 	bl	800070e <lcd_print>
 8001032:	e008      	b.n	8001046 <menu+0x876>
			} else if(dilSecim == 1) {
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <menu+0x8d0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d104      	bne.n	8001046 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 800103c:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <menu+0x928>)
 800103e:	2101      	movs	r1, #1
 8001040:	2002      	movs	r0, #2
 8001042:	f7ff fb64 	bl	800070e <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <menu+0x92c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d116      	bne.n	800107c <menu+0x8ac>
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <menu+0x8e0>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d112      	bne.n	800107c <menu+0x8ac>
			if(dilSecim == 0) {
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <menu+0x8d0>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d105      	bne.n	800106a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <menu+0x930>)
 8001060:	2101      	movs	r1, #1
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff fb53 	bl	800070e <lcd_print>
 8001068:	e008      	b.n	800107c <menu+0x8ac>
			} else if(dilSecim == 1) {
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <menu+0x8d0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d104      	bne.n	800107c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001072:	4a24      	ldr	r2, [pc, #144]	; (8001104 <menu+0x934>)
 8001074:	2101      	movs	r1, #1
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff fb49 	bl	800070e <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <menu+0x92c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d14c      	bne.n	800111e <menu+0x94e>
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <menu+0x8e0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d148      	bne.n	800111e <menu+0x94e>
			if(dilSecim == 0) {
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <menu+0x8d0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d13b      	bne.n	800110c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <menu+0x938>)
 8001096:	2101      	movs	r1, #1
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff fb38 	bl	800070e <lcd_print>
 800109e:	e03e      	b.n	800111e <menu+0x94e>
 80010a0:	20000b4c 	.word	0x20000b4c
 80010a4:	0800c818 	.word	0x0800c818
 80010a8:	40010800 	.word	0x40010800
 80010ac:	20000b5a 	.word	0x20000b5a
 80010b0:	20000b3b 	.word	0x20000b3b
 80010b4:	20000b2e 	.word	0x20000b2e
 80010b8:	20000b4d 	.word	0x20000b4d
 80010bc:	20000ac0 	.word	0x20000ac0
 80010c0:	20000b4e 	.word	0x20000b4e
 80010c4:	20000b4f 	.word	0x20000b4f
 80010c8:	20000b50 	.word	0x20000b50
 80010cc:	20000b51 	.word	0x20000b51
 80010d0:	20000b52 	.word	0x20000b52
 80010d4:	20000b53 	.word	0x20000b53
 80010d8:	20000b54 	.word	0x20000b54
 80010dc:	20000b55 	.word	0x20000b55
 80010e0:	20000b56 	.word	0x20000b56
 80010e4:	20000b57 	.word	0x20000b57
 80010e8:	20000b2c 	.word	0x20000b2c
 80010ec:	0800c82c 	.word	0x0800c82c
 80010f0:	0800c840 	.word	0x0800c840
 80010f4:	0800c854 	.word	0x0800c854
 80010f8:	0800c868 	.word	0x0800c868
 80010fc:	20000b2d 	.word	0x20000b2d
 8001100:	0800c87c 	.word	0x0800c87c
 8001104:	0800c88c 	.word	0x0800c88c
 8001108:	0800c89c 	.word	0x0800c89c
			} else if(dilSecim == 1) {
 800110c:	4b98      	ldr	r3, [pc, #608]	; (8001370 <menu+0xba0>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d104      	bne.n	800111e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001114:	4a97      	ldr	r2, [pc, #604]	; (8001374 <menu+0xba4>)
 8001116:	2101      	movs	r1, #1
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff faf8 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800111e:	2102      	movs	r1, #2
 8001120:	4895      	ldr	r0, [pc, #596]	; (8001378 <menu+0xba8>)
 8001122:	f007 fcb1 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d119      	bne.n	8001160 <menu+0x990>
 800112c:	4b93      	ldr	r3, [pc, #588]	; (800137c <menu+0xbac>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d012      	beq.n	8001160 <menu+0x990>
 800113a:	4b91      	ldr	r3, [pc, #580]	; (8001380 <menu+0xbb0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10e      	bne.n	8001160 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001142:	4b90      	ldr	r3, [pc, #576]	; (8001384 <menu+0xbb4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b8e      	ldr	r3, [pc, #568]	; (8001384 <menu+0xbb4>)
 800114c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 800114e:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <menu+0xbb4>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d902      	bls.n	800115c <menu+0x98c>
				calismaSekli = 0;
 8001156:	4b8b      	ldr	r3, [pc, #556]	; (8001384 <menu+0xbb4>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800115c:	f003 feea 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001160:	2104      	movs	r1, #4
 8001162:	4885      	ldr	r0, [pc, #532]	; (8001378 <menu+0xba8>)
 8001164:	f007 fc90 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d119      	bne.n	80011a2 <menu+0x9d2>
 800116e:	4b83      	ldr	r3, [pc, #524]	; (800137c <menu+0xbac>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d012      	beq.n	80011a2 <menu+0x9d2>
 800117c:	4b80      	ldr	r3, [pc, #512]	; (8001380 <menu+0xbb0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10e      	bne.n	80011a2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001184:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <menu+0xbb4>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <menu+0xbb4>)
 800118e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001190:	4b7c      	ldr	r3, [pc, #496]	; (8001384 <menu+0xbb4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <menu+0x9ce>
	    		calismaSekli = 1;
 8001198:	4b7a      	ldr	r3, [pc, #488]	; (8001384 <menu+0xbb4>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800119e:	f003 fec9 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80011a2:	2108      	movs	r1, #8
 80011a4:	4874      	ldr	r0, [pc, #464]	; (8001378 <menu+0xba8>)
 80011a6:	f007 fc6f 	bl	8008a88 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d118      	bne.n	80011e2 <menu+0xa12>
 80011b0:	4b72      	ldr	r3, [pc, #456]	; (800137c <menu+0xbac>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d011      	beq.n	80011e2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 80011be:	4b71      	ldr	r3, [pc, #452]	; (8001384 <menu+0xbb4>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	4b71      	ldr	r3, [pc, #452]	; (8001388 <menu+0xbb8>)
 80011c4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80011c6:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <menu+0xbb4>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d106      	bne.n	80011dc <menu+0xa0c>
				altLimit = 1;
 80011ce:	4b6f      	ldr	r3, [pc, #444]	; (800138c <menu+0xbbc>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80011d4:	4b6d      	ldr	r3, [pc, #436]	; (800138c <menu+0xbbc>)
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <menu+0xbb8>)
 80011da:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80011dc:	4b6c      	ldr	r3, [pc, #432]	; (8001390 <menu+0xbc0>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 80011e2:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <menu+0xbc4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	f040 8083 	bne.w	80012f2 <menu+0xb22>
		if(dilSecim == 0) {
 80011ec:	4b60      	ldr	r3, [pc, #384]	; (8001370 <menu+0xba0>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d105      	bne.n	8001200 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 80011f4:	4a68      	ldr	r2, [pc, #416]	; (8001398 <menu+0xbc8>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff fa88 	bl	800070e <lcd_print>
 80011fe:	e008      	b.n	8001212 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <menu+0xba0>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d104      	bne.n	8001212 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001208:	4a64      	ldr	r2, [pc, #400]	; (800139c <menu+0xbcc>)
 800120a:	2101      	movs	r1, #1
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fa7e 	bl	800070e <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001212:	4b63      	ldr	r3, [pc, #396]	; (80013a0 <menu+0xbd0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d113      	bne.n	8001242 <menu+0xa72>
			if(dilSecim == 0) {
 800121a:	4b55      	ldr	r3, [pc, #340]	; (8001370 <menu+0xba0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001222:	4a60      	ldr	r2, [pc, #384]	; (80013a4 <menu+0xbd4>)
 8001224:	2101      	movs	r1, #1
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff fa71 	bl	800070e <lcd_print>
 800122c:	e012      	b.n	8001254 <menu+0xa84>
			} else if(dilSecim == 1) {
 800122e:	4b50      	ldr	r3, [pc, #320]	; (8001370 <menu+0xba0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10e      	bne.n	8001254 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001236:	4a5c      	ldr	r2, [pc, #368]	; (80013a8 <menu+0xbd8>)
 8001238:	2101      	movs	r1, #1
 800123a:	2002      	movs	r0, #2
 800123c:	f7ff fa67 	bl	800070e <lcd_print>
 8001240:	e008      	b.n	8001254 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001242:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <menu+0xbd0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d104      	bne.n	8001254 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800124a:	4a58      	ldr	r2, [pc, #352]	; (80013ac <menu+0xbdc>)
 800124c:	2101      	movs	r1, #1
 800124e:	2002      	movs	r0, #2
 8001250:	f7ff fa5d 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001254:	2102      	movs	r1, #2
 8001256:	4848      	ldr	r0, [pc, #288]	; (8001378 <menu+0xba8>)
 8001258:	f007 fc16 	bl	8008a88 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d115      	bne.n	800128e <menu+0xabe>
 8001262:	4b46      	ldr	r3, [pc, #280]	; (800137c <menu+0xbac>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00e      	beq.n	800128e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001270:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <menu+0xbd0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <menu+0xbd0>)
 800127a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800127c:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <menu+0xbd0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d902      	bls.n	800128a <menu+0xaba>
				emniyetCercevesi = 0;
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <menu+0xbd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800128a:	f003 fe53 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800128e:	2104      	movs	r1, #4
 8001290:	4839      	ldr	r0, [pc, #228]	; (8001378 <menu+0xba8>)
 8001292:	f007 fbf9 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d115      	bne.n	80012c8 <menu+0xaf8>
 800129c:	4b37      	ldr	r3, [pc, #220]	; (800137c <menu+0xbac>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f083 0301 	eor.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <menu+0xbd0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <menu+0xbd0>)
 80012b4:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <menu+0xbd0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <menu+0xbd0>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80012c4:	f003 fe36 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80012c8:	2108      	movs	r1, #8
 80012ca:	482b      	ldr	r0, [pc, #172]	; (8001378 <menu+0xba8>)
 80012cc:	f007 fbdc 	bl	8008a88 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10d      	bne.n	80012f2 <menu+0xb22>
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <menu+0xbac>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	f083 0301 	eor.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <menu+0xbd0>)
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <menu+0xbb8>)
 80012ea:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <menu+0xbc0>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <menu+0xbc4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	f040 80ba 	bne.w	8001470 <menu+0xca0>
		if(dilSecim == 0) {
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <menu+0xba0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001304:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <menu+0xbe0>)
 8001306:	2101      	movs	r1, #1
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fa00 	bl	800070e <lcd_print>
 800130e:	e008      	b.n	8001322 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <menu+0xba0>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d104      	bne.n	8001322 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001318:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <menu+0xbe4>)
 800131a:	2101      	movs	r1, #1
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff f9f6 	bl	800070e <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <menu+0xbe8>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d113      	bne.n	8001352 <menu+0xb82>
			if(dilSecim == 0) {
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <menu+0xba0>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d105      	bne.n	800133e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001332:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <menu+0xbd4>)
 8001334:	2101      	movs	r1, #1
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff f9e9 	bl	800070e <lcd_print>
 800133c:	e049      	b.n	80013d2 <menu+0xc02>
			} else if(dilSecim == 1) {
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <menu+0xba0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d145      	bne.n	80013d2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <menu+0xbd8>)
 8001348:	2101      	movs	r1, #1
 800134a:	2002      	movs	r0, #2
 800134c:	f7ff f9df 	bl	800070e <lcd_print>
 8001350:	e03f      	b.n	80013d2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <menu+0xbe8>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d13b      	bne.n	80013d2 <menu+0xc02>
			if(dilSecim == 0) {
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <menu+0xba0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12e      	bne.n	80013c0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <menu+0xbec>)
 8001364:	2101      	movs	r1, #1
 8001366:	2002      	movs	r0, #2
 8001368:	f7ff f9d1 	bl	800070e <lcd_print>
 800136c:	e031      	b.n	80013d2 <menu+0xc02>
 800136e:	bf00      	nop
 8001370:	20000b4c 	.word	0x20000b4c
 8001374:	0800c8ac 	.word	0x0800c8ac
 8001378:	40010800 	.word	0x40010800
 800137c:	20000b5a 	.word	0x20000b5a
 8001380:	20000b3b 	.word	0x20000b3b
 8001384:	20000b2d 	.word	0x20000b2d
 8001388:	20000ac0 	.word	0x20000ac0
 800138c:	20000b32 	.word	0x20000b32
 8001390:	20000b57 	.word	0x20000b57
 8001394:	20000b2c 	.word	0x20000b2c
 8001398:	0800c8bc 	.word	0x0800c8bc
 800139c:	0800c8d0 	.word	0x0800c8d0
 80013a0:	20000b30 	.word	0x20000b30
 80013a4:	0800c8e4 	.word	0x0800c8e4
 80013a8:	0800c8f8 	.word	0x0800c8f8
 80013ac:	0800c90c 	.word	0x0800c90c
 80013b0:	0800c91c 	.word	0x0800c91c
 80013b4:	0800c930 	.word	0x0800c930
 80013b8:	20000b31 	.word	0x20000b31
 80013bc:	0800c944 	.word	0x0800c944
			} else if(dilSecim == 1) {
 80013c0:	4b92      	ldr	r3, [pc, #584]	; (800160c <menu+0xe3c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d104      	bne.n	80013d2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80013c8:	4a91      	ldr	r2, [pc, #580]	; (8001610 <menu+0xe40>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	2002      	movs	r0, #2
 80013ce:	f7ff f99e 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80013d2:	2102      	movs	r1, #2
 80013d4:	488f      	ldr	r0, [pc, #572]	; (8001614 <menu+0xe44>)
 80013d6:	f007 fb57 	bl	8008a88 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d115      	bne.n	800140c <menu+0xc3c>
 80013e0:	4b8d      	ldr	r3, [pc, #564]	; (8001618 <menu+0xe48>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00e      	beq.n	800140c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80013ee:	4b8b      	ldr	r3, [pc, #556]	; (800161c <menu+0xe4c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <menu+0xe4c>)
 80013f8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80013fa:	4b88      	ldr	r3, [pc, #544]	; (800161c <menu+0xe4c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d902      	bls.n	8001408 <menu+0xc38>
				yavaslamaLimit = 0;
 8001402:	4b86      	ldr	r3, [pc, #536]	; (800161c <menu+0xe4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001408:	f003 fd94 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800140c:	2104      	movs	r1, #4
 800140e:	4881      	ldr	r0, [pc, #516]	; (8001614 <menu+0xe44>)
 8001410:	f007 fb3a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d115      	bne.n	8001446 <menu+0xc76>
 800141a:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <menu+0xe48>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	f083 0301 	eor.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00e      	beq.n	8001446 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001428:	4b7c      	ldr	r3, [pc, #496]	; (800161c <menu+0xe4c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <menu+0xe4c>)
 8001432:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001434:	4b79      	ldr	r3, [pc, #484]	; (800161c <menu+0xe4c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800143c:	4b77      	ldr	r3, [pc, #476]	; (800161c <menu+0xe4c>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001442:	f003 fd77 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001446:	2108      	movs	r1, #8
 8001448:	4872      	ldr	r0, [pc, #456]	; (8001614 <menu+0xe44>)
 800144a:	f007 fb1d 	bl	8008a88 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10d      	bne.n	8001470 <menu+0xca0>
 8001454:	4b70      	ldr	r3, [pc, #448]	; (8001618 <menu+0xe48>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f083 0301 	eor.w	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <menu+0xe4c>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b6e      	ldr	r3, [pc, #440]	; (8001620 <menu+0xe50>)
 8001468:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800146a:	4b6e      	ldr	r3, [pc, #440]	; (8001624 <menu+0xe54>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001470:	4b6d      	ldr	r3, [pc, #436]	; (8001628 <menu+0xe58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b05      	cmp	r3, #5
 8001476:	f040 80b9 	bne.w	80015ec <menu+0xe1c>
		if(dilSecim == 0) {
 800147a:	4b64      	ldr	r3, [pc, #400]	; (800160c <menu+0xe3c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001482:	4a6a      	ldr	r2, [pc, #424]	; (800162c <menu+0xe5c>)
 8001484:	2101      	movs	r1, #1
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff f941 	bl	800070e <lcd_print>
 800148c:	e008      	b.n	80014a0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <menu+0xe3c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d104      	bne.n	80014a0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001496:	4a66      	ldr	r2, [pc, #408]	; (8001630 <menu+0xe60>)
 8001498:	2101      	movs	r1, #1
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff f937 	bl	800070e <lcd_print>
		}

		if(altLimit == 0) {
 80014a0:	4b64      	ldr	r3, [pc, #400]	; (8001634 <menu+0xe64>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d113      	bne.n	80014d0 <menu+0xd00>
			if(dilSecim == 0) {
 80014a8:	4b58      	ldr	r3, [pc, #352]	; (800160c <menu+0xe3c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80014b0:	4a61      	ldr	r2, [pc, #388]	; (8001638 <menu+0xe68>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	2002      	movs	r0, #2
 80014b6:	f7ff f92a 	bl	800070e <lcd_print>
 80014ba:	e020      	b.n	80014fe <menu+0xd2e>
			} else if(dilSecim == 1) {
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <menu+0xe3c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d11c      	bne.n	80014fe <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80014c4:	4a5d      	ldr	r2, [pc, #372]	; (800163c <menu+0xe6c>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff f920 	bl	800070e <lcd_print>
 80014ce:	e016      	b.n	80014fe <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80014d0:	4b58      	ldr	r3, [pc, #352]	; (8001634 <menu+0xe64>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d112      	bne.n	80014fe <menu+0xd2e>
			if(dilSecim == 0){
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <menu+0xe3c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80014e0:	4a57      	ldr	r2, [pc, #348]	; (8001640 <menu+0xe70>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f7ff f912 	bl	800070e <lcd_print>
 80014ea:	e008      	b.n	80014fe <menu+0xd2e>
			} else if(dilSecim == 1){
 80014ec:	4b47      	ldr	r3, [pc, #284]	; (800160c <menu+0xe3c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d104      	bne.n	80014fe <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80014f4:	4a46      	ldr	r2, [pc, #280]	; (8001610 <menu+0xe40>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7ff f908 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80014fe:	2102      	movs	r1, #2
 8001500:	4844      	ldr	r0, [pc, #272]	; (8001614 <menu+0xe44>)
 8001502:	f007 fac1 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d119      	bne.n	8001540 <menu+0xd70>
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <menu+0xe48>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f083 0301 	eor.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d012      	beq.n	8001540 <menu+0xd70>
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <menu+0xe74>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10e      	bne.n	8001540 <menu+0xd70>
			altLimit = altLimit + 1;
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <menu+0xe64>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b42      	ldr	r3, [pc, #264]	; (8001634 <menu+0xe64>)
 800152c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <menu+0xe64>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d902      	bls.n	800153c <menu+0xd6c>
				altLimit = 0;
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <menu+0xe64>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800153c:	f003 fcfa 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001540:	2104      	movs	r1, #4
 8001542:	4834      	ldr	r0, [pc, #208]	; (8001614 <menu+0xe44>)
 8001544:	f007 faa0 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d119      	bne.n	8001582 <menu+0xdb2>
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <menu+0xe48>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	f083 0301 	eor.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d012      	beq.n	8001582 <menu+0xdb2>
 800155c:	4b39      	ldr	r3, [pc, #228]	; (8001644 <menu+0xe74>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10e      	bne.n	8001582 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001564:	4b33      	ldr	r3, [pc, #204]	; (8001634 <menu+0xe64>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <menu+0xe64>)
 800156e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <menu+0xe64>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <menu+0xdae>
		   		altLimit = 1;
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <menu+0xe64>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800157e:	f003 fcd9 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001582:	2108      	movs	r1, #8
 8001584:	4823      	ldr	r0, [pc, #140]	; (8001614 <menu+0xe44>)
 8001586:	f007 fa7f 	bl	8008a88 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d12d      	bne.n	80015ec <menu+0xe1c>
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <menu+0xe48>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d026      	beq.n	80015ec <menu+0xe1c>
			eepromData[5] = altLimit;
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <menu+0xe64>)
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <menu+0xe50>)
 80015a4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <menu+0xe64>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d110      	bne.n	80015d0 <menu+0xe00>
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <menu+0xe78>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <menu+0xdee>
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <menu+0xe78>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d108      	bne.n	80015d0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <menu+0xe78>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <menu+0xe78>)
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <menu+0xe50>)
 80015ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80015ce:	e00a      	b.n	80015e6 <menu+0xe16>
			} else if(altLimit == 0) {
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <menu+0xe64>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d106      	bne.n	80015e6 <menu+0xe16>
				platformSilindirTipi = 0;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <menu+0xe7c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <menu+0xe7c>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <menu+0xe50>)
 80015e4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <menu+0xe54>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <menu+0xe58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	f040 80b6 	bne.w	8001762 <menu+0xf92>
		if(dilSecim == 0) {
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <menu+0xe3c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d12a      	bne.n	8001654 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <menu+0xe80>)
 8001600:	2101      	movs	r1, #1
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff f883 	bl	800070e <lcd_print>
 8001608:	e02d      	b.n	8001666 <menu+0xe96>
 800160a:	bf00      	nop
 800160c:	20000b4c 	.word	0x20000b4c
 8001610:	0800c958 	.word	0x0800c958
 8001614:	40010800 	.word	0x40010800
 8001618:	20000b5a 	.word	0x20000b5a
 800161c:	20000b31 	.word	0x20000b31
 8001620:	20000ac0 	.word	0x20000ac0
 8001624:	20000b57 	.word	0x20000b57
 8001628:	20000b2c 	.word	0x20000b2c
 800162c:	0800c96c 	.word	0x0800c96c
 8001630:	0800c980 	.word	0x0800c980
 8001634:	20000b32 	.word	0x20000b32
 8001638:	0800c8e4 	.word	0x0800c8e4
 800163c:	0800c8f8 	.word	0x0800c8f8
 8001640:	0800c944 	.word	0x0800c944
 8001644:	20000b2d 	.word	0x20000b2d
 8001648:	20000b39 	.word	0x20000b39
 800164c:	20000b3f 	.word	0x20000b3f
 8001650:	0800c994 	.word	0x0800c994
		} else if(dilSecim == 1){
 8001654:	4b7a      	ldr	r3, [pc, #488]	; (8001840 <menu+0x1070>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d104      	bne.n	8001666 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800165c:	4a79      	ldr	r2, [pc, #484]	; (8001844 <menu+0x1074>)
 800165e:	2101      	movs	r1, #1
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff f854 	bl	800070e <lcd_print>
		}
		if(basincSalteri == 0){
 8001666:	4b78      	ldr	r3, [pc, #480]	; (8001848 <menu+0x1078>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d113      	bne.n	8001696 <menu+0xec6>
			if(dilSecim == 0) {
 800166e:	4b74      	ldr	r3, [pc, #464]	; (8001840 <menu+0x1070>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d105      	bne.n	8001682 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001676:	4a75      	ldr	r2, [pc, #468]	; (800184c <menu+0x107c>)
 8001678:	2101      	movs	r1, #1
 800167a:	2002      	movs	r0, #2
 800167c:	f7ff f847 	bl	800070e <lcd_print>
 8001680:	e020      	b.n	80016c4 <menu+0xef4>
			} else if(dilSecim == 1){
 8001682:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <menu+0x1070>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d11c      	bne.n	80016c4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800168a:	4a71      	ldr	r2, [pc, #452]	; (8001850 <menu+0x1080>)
 800168c:	2101      	movs	r1, #1
 800168e:	2002      	movs	r0, #2
 8001690:	f7ff f83d 	bl	800070e <lcd_print>
 8001694:	e016      	b.n	80016c4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001696:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <menu+0x1078>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d112      	bne.n	80016c4 <menu+0xef4>
			if(dilSecim == 0) {
 800169e:	4b68      	ldr	r3, [pc, #416]	; (8001840 <menu+0x1070>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80016a6:	4a6b      	ldr	r2, [pc, #428]	; (8001854 <menu+0x1084>)
 80016a8:	2101      	movs	r1, #1
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff f82f 	bl	800070e <lcd_print>
 80016b0:	e008      	b.n	80016c4 <menu+0xef4>
			} else if(dilSecim == 1) {
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <menu+0x1070>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d104      	bne.n	80016c4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80016ba:	4a67      	ldr	r2, [pc, #412]	; (8001858 <menu+0x1088>)
 80016bc:	2101      	movs	r1, #1
 80016be:	2002      	movs	r0, #2
 80016c0:	f7ff f825 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80016c4:	2102      	movs	r1, #2
 80016c6:	4865      	ldr	r0, [pc, #404]	; (800185c <menu+0x108c>)
 80016c8:	f007 f9de 	bl	8008a88 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d115      	bne.n	80016fe <menu+0xf2e>
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <menu+0x1090>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00e      	beq.n	80016fe <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <menu+0x1078>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b57      	ldr	r3, [pc, #348]	; (8001848 <menu+0x1078>)
 80016ea:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80016ec:	4b56      	ldr	r3, [pc, #344]	; (8001848 <menu+0x1078>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d902      	bls.n	80016fa <menu+0xf2a>
				basincSalteri = 0;
 80016f4:	4b54      	ldr	r3, [pc, #336]	; (8001848 <menu+0x1078>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80016fa:	f003 fc1b 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80016fe:	2104      	movs	r1, #4
 8001700:	4856      	ldr	r0, [pc, #344]	; (800185c <menu+0x108c>)
 8001702:	f007 f9c1 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d115      	bne.n	8001738 <menu+0xf68>
 800170c:	4b54      	ldr	r3, [pc, #336]	; (8001860 <menu+0x1090>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	f083 0301 	eor.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00e      	beq.n	8001738 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800171a:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <menu+0x1078>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <menu+0x1078>)
 8001724:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001726:	4b48      	ldr	r3, [pc, #288]	; (8001848 <menu+0x1078>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <menu+0xf64>
		   		basincSalteri = 1;
 800172e:	4b46      	ldr	r3, [pc, #280]	; (8001848 <menu+0x1078>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001734:	f003 fbfe 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001738:	2108      	movs	r1, #8
 800173a:	4848      	ldr	r0, [pc, #288]	; (800185c <menu+0x108c>)
 800173c:	f007 f9a4 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10d      	bne.n	8001762 <menu+0xf92>
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <menu+0x1090>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f083 0301 	eor.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8001754:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <menu+0x1078>)
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	4b42      	ldr	r3, [pc, #264]	; (8001864 <menu+0x1094>)
 800175a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <menu+0x1098>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <menu+0x109c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b07      	cmp	r3, #7
 8001768:	f040 80f5 	bne.w	8001956 <menu+0x1186>
		if(dilSecim == 0) {
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <menu+0x1070>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d105      	bne.n	8001780 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8001774:	4a3e      	ldr	r2, [pc, #248]	; (8001870 <menu+0x10a0>)
 8001776:	2101      	movs	r1, #1
 8001778:	2001      	movs	r0, #1
 800177a:	f7fe ffc8 	bl	800070e <lcd_print>
 800177e:	e008      	b.n	8001792 <menu+0xfc2>
		} else if(dilSecim == 1){
 8001780:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <menu+0x1070>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d104      	bne.n	8001792 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001788:	4a3a      	ldr	r2, [pc, #232]	; (8001874 <menu+0x10a4>)
 800178a:	2101      	movs	r1, #1
 800178c:	2001      	movs	r0, #1
 800178e:	f7fe ffbe 	bl	800070e <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <menu+0x10a8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d113      	bne.n	80017c2 <menu+0xff2>
			if(dilSecim == 0) {
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <menu+0x1070>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d105      	bne.n	80017ae <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80017a2:	4a2a      	ldr	r2, [pc, #168]	; (800184c <menu+0x107c>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	2002      	movs	r0, #2
 80017a8:	f7fe ffb1 	bl	800070e <lcd_print>
 80017ac:	e079      	b.n	80018a2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <menu+0x1070>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d175      	bne.n	80018a2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <menu+0x1080>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7fe ffa7 	bl	800070e <lcd_print>
 80017c0:	e06f      	b.n	80018a2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <menu+0x10a8>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d113      	bne.n	80017f2 <menu+0x1022>
			if(dilSecim == 0) {
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <menu+0x1070>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80017d2:	4a2a      	ldr	r2, [pc, #168]	; (800187c <menu+0x10ac>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7fe ff99 	bl	800070e <lcd_print>
 80017dc:	e061      	b.n	80018a2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <menu+0x1070>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d15d      	bne.n	80018a2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80017e6:	4a26      	ldr	r2, [pc, #152]	; (8001880 <menu+0x10b0>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	2002      	movs	r0, #2
 80017ec:	f7fe ff8f 	bl	800070e <lcd_print>
 80017f0:	e057      	b.n	80018a2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <menu+0x10a8>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d113      	bne.n	8001822 <menu+0x1052>
			if(dilSecim == 0) {
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <menu+0x1070>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8001802:	4a20      	ldr	r2, [pc, #128]	; (8001884 <menu+0x10b4>)
 8001804:	2101      	movs	r1, #1
 8001806:	2002      	movs	r0, #2
 8001808:	f7fe ff81 	bl	800070e <lcd_print>
 800180c:	e049      	b.n	80018a2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <menu+0x1070>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d145      	bne.n	80018a2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <menu+0x10b8>)
 8001818:	2101      	movs	r1, #1
 800181a:	2002      	movs	r0, #2
 800181c:	f7fe ff77 	bl	800070e <lcd_print>
 8001820:	e03f      	b.n	80018a2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <menu+0x10a8>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d13b      	bne.n	80018a2 <menu+0x10d2>
			if(dilSecim == 0) {
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <menu+0x1070>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d12e      	bne.n	8001890 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <menu+0x10bc>)
 8001834:	2101      	movs	r1, #1
 8001836:	2002      	movs	r0, #2
 8001838:	f7fe ff69 	bl	800070e <lcd_print>
 800183c:	e031      	b.n	80018a2 <menu+0x10d2>
 800183e:	bf00      	nop
 8001840:	20000b4c 	.word	0x20000b4c
 8001844:	0800c9a4 	.word	0x0800c9a4
 8001848:	20000b33 	.word	0x20000b33
 800184c:	0800c8e4 	.word	0x0800c8e4
 8001850:	0800c8f8 	.word	0x0800c8f8
 8001854:	0800c944 	.word	0x0800c944
 8001858:	0800c958 	.word	0x0800c958
 800185c:	40010800 	.word	0x40010800
 8001860:	20000b5a 	.word	0x20000b5a
 8001864:	20000ac0 	.word	0x20000ac0
 8001868:	20000b57 	.word	0x20000b57
 800186c:	20000b2c 	.word	0x20000b2c
 8001870:	0800c9b4 	.word	0x0800c9b4
 8001874:	0800c9c8 	.word	0x0800c9c8
 8001878:	20000b34 	.word	0x20000b34
 800187c:	0800c9dc 	.word	0x0800c9dc
 8001880:	0800c9f0 	.word	0x0800c9f0
 8001884:	0800ca04 	.word	0x0800ca04
 8001888:	0800ca18 	.word	0x0800ca18
 800188c:	0800ca2c 	.word	0x0800ca2c
			} else if(dilSecim == 1){
 8001890:	4b99      	ldr	r3, [pc, #612]	; (8001af8 <menu+0x1328>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d104      	bne.n	80018a2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001898:	4a98      	ldr	r2, [pc, #608]	; (8001afc <menu+0x132c>)
 800189a:	2101      	movs	r1, #1
 800189c:	2002      	movs	r0, #2
 800189e:	f7fe ff36 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80018a2:	2102      	movs	r1, #2
 80018a4:	4896      	ldr	r0, [pc, #600]	; (8001b00 <menu+0x1330>)
 80018a6:	f007 f8ef 	bl	8008a88 <HAL_GPIO_ReadPin>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d115      	bne.n	80018dc <menu+0x110c>
 80018b0:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <menu+0x1334>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00e      	beq.n	80018dc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80018be:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <menu+0x1338>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b90      	ldr	r3, [pc, #576]	; (8001b08 <menu+0x1338>)
 80018c8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80018ca:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <menu+0x1338>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d902      	bls.n	80018d8 <menu+0x1108>
				kapiSecimleri = 0;
 80018d2:	4b8d      	ldr	r3, [pc, #564]	; (8001b08 <menu+0x1338>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018d8:	f003 fb2c 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80018dc:	2104      	movs	r1, #4
 80018de:	4888      	ldr	r0, [pc, #544]	; (8001b00 <menu+0x1330>)
 80018e0:	f007 f8d2 	bl	8008a88 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d115      	bne.n	8001916 <menu+0x1146>
 80018ea:	4b86      	ldr	r3, [pc, #536]	; (8001b04 <menu+0x1334>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	f083 0301 	eor.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00e      	beq.n	8001916 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80018f8:	4b83      	ldr	r3, [pc, #524]	; (8001b08 <menu+0x1338>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <menu+0x1338>)
 8001902:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001904:	4b80      	ldr	r3, [pc, #512]	; (8001b08 <menu+0x1338>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d902      	bls.n	8001912 <menu+0x1142>
		   		kapiSecimleri = 3;
 800190c:	4b7e      	ldr	r3, [pc, #504]	; (8001b08 <menu+0x1338>)
 800190e:	2203      	movs	r2, #3
 8001910:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001912:	f003 fb0f 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001916:	2108      	movs	r1, #8
 8001918:	4879      	ldr	r0, [pc, #484]	; (8001b00 <menu+0x1330>)
 800191a:	f007 f8b5 	bl	8008a88 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d118      	bne.n	8001956 <menu+0x1186>
 8001924:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <menu+0x1334>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d011      	beq.n	8001956 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8001932:	4b75      	ldr	r3, [pc, #468]	; (8001b08 <menu+0x1338>)
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <menu+0x133c>)
 8001938:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800193a:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <menu+0x1338>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <menu+0x1180>
				altLimit = 1;
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <menu+0x1340>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001948:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <menu+0x1340>)
 800194a:	781a      	ldrb	r2, [r3, #0]
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <menu+0x133c>)
 800194e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001950:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <menu+0x1344>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001956:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <menu+0x1348>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b08      	cmp	r3, #8
 800195c:	f040 8092 	bne.w	8001a84 <menu+0x12b4>
		if(dilSecim == 0) {
 8001960:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <menu+0x1328>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001968:	4a6c      	ldr	r2, [pc, #432]	; (8001b1c <menu+0x134c>)
 800196a:	2101      	movs	r1, #1
 800196c:	2001      	movs	r0, #1
 800196e:	f7fe fece 	bl	800070e <lcd_print>
 8001972:	e008      	b.n	8001986 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <menu+0x1328>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d104      	bne.n	8001986 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800197c:	4a68      	ldr	r2, [pc, #416]	; (8001b20 <menu+0x1350>)
 800197e:	2101      	movs	r1, #1
 8001980:	2001      	movs	r0, #1
 8001982:	f7fe fec4 	bl	800070e <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001986:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <menu+0x1354>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d113      	bne.n	80019b6 <menu+0x11e6>
			if(dilSecim == 0) {
 800198e:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <menu+0x1328>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d105      	bne.n	80019a2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001996:	4a64      	ldr	r2, [pc, #400]	; (8001b28 <menu+0x1358>)
 8001998:	2101      	movs	r1, #1
 800199a:	2002      	movs	r0, #2
 800199c:	f7fe feb7 	bl	800070e <lcd_print>
 80019a0:	e020      	b.n	80019e4 <menu+0x1214>
			} else if(dilSecim == 1) {
 80019a2:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <menu+0x1328>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d11c      	bne.n	80019e4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80019aa:	4a60      	ldr	r2, [pc, #384]	; (8001b2c <menu+0x135c>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7fe fead 	bl	800070e <lcd_print>
 80019b4:	e016      	b.n	80019e4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <menu+0x1354>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d112      	bne.n	80019e4 <menu+0x1214>
			if(dilSecim == 0){
 80019be:	4b4e      	ldr	r3, [pc, #312]	; (8001af8 <menu+0x1328>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80019c6:	4a5a      	ldr	r2, [pc, #360]	; (8001b30 <menu+0x1360>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	2002      	movs	r0, #2
 80019cc:	f7fe fe9f 	bl	800070e <lcd_print>
 80019d0:	e008      	b.n	80019e4 <menu+0x1214>
			} else if(dilSecim == 1){
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <menu+0x1328>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d104      	bne.n	80019e4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80019da:	4a56      	ldr	r2, [pc, #344]	; (8001b34 <menu+0x1364>)
 80019dc:	2101      	movs	r1, #1
 80019de:	2002      	movs	r0, #2
 80019e0:	f7fe fe95 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019e4:	2102      	movs	r1, #2
 80019e6:	4846      	ldr	r0, [pc, #280]	; (8001b00 <menu+0x1330>)
 80019e8:	f007 f84e 	bl	8008a88 <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d115      	bne.n	8001a1e <menu+0x124e>
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <menu+0x1334>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00e      	beq.n	8001a1e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8001a00:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <menu+0x1354>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <menu+0x1354>)
 8001a0a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001a0c:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <menu+0x1354>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d902      	bls.n	8001a1a <menu+0x124a>
				kapiAcTipi = 0;
 8001a14:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <menu+0x1354>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a1a:	f003 fa8b 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a1e:	2104      	movs	r1, #4
 8001a20:	4837      	ldr	r0, [pc, #220]	; (8001b00 <menu+0x1330>)
 8001a22:	f007 f831 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d115      	bne.n	8001a58 <menu+0x1288>
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <menu+0x1334>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00e      	beq.n	8001a58 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <menu+0x1354>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <menu+0x1354>)
 8001a44:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <menu+0x1354>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <menu+0x1284>
		   		kapiAcTipi = 1;
 8001a4e:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <menu+0x1354>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a54:	f003 fa6e 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a58:	2108      	movs	r1, #8
 8001a5a:	4829      	ldr	r0, [pc, #164]	; (8001b00 <menu+0x1330>)
 8001a5c:	f007 f814 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d10e      	bne.n	8001a84 <menu+0x12b4>
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <menu+0x1334>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <menu+0x1354>)
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <menu+0x133c>)
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <menu+0x1344>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <menu+0x1348>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	f040 80b9 	bne.w	8001c00 <menu+0x1430>
		if(dilSecim == 0){
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <menu+0x1328>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <menu+0x1368>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7fe fe37 	bl	800070e <lcd_print>
 8001aa0:	e008      	b.n	8001ab4 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <menu+0x1328>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d104      	bne.n	8001ab4 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001aaa:	4a24      	ldr	r2, [pc, #144]	; (8001b3c <menu+0x136c>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7fe fe2d 	bl	800070e <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <menu+0x1370>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <menu+0x1374>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f7fe fe24 	bl	800070e <lcd_print>
 8001ac6:	e04c      	b.n	8001b62 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <menu+0x1370>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d13f      	bne.n	8001b50 <menu+0x1380>
			if(dilSecim == 0){
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <menu+0x1328>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <menu+0x1378>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	2002      	movs	r0, #2
 8001ade:	f7fe fe16 	bl	800070e <lcd_print>
 8001ae2:	e03e      	b.n	8001b62 <menu+0x1392>
			} else if(dilSecim == 1) {
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <menu+0x1328>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d13a      	bne.n	8001b62 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8001aec:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <menu+0x137c>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7fe fe0c 	bl	800070e <lcd_print>
 8001af6:	e034      	b.n	8001b62 <menu+0x1392>
 8001af8:	20000b4c 	.word	0x20000b4c
 8001afc:	0800ca40 	.word	0x0800ca40
 8001b00:	40010800 	.word	0x40010800
 8001b04:	20000b5a 	.word	0x20000b5a
 8001b08:	20000b34 	.word	0x20000b34
 8001b0c:	20000ac0 	.word	0x20000ac0
 8001b10:	20000b32 	.word	0x20000b32
 8001b14:	20000b57 	.word	0x20000b57
 8001b18:	20000b2c 	.word	0x20000b2c
 8001b1c:	0800ca54 	.word	0x0800ca54
 8001b20:	0800ca68 	.word	0x0800ca68
 8001b24:	20000b38 	.word	0x20000b38
 8001b28:	0800ca7c 	.word	0x0800ca7c
 8001b2c:	0800ca8c 	.word	0x0800ca8c
 8001b30:	0800ca9c 	.word	0x0800ca9c
 8001b34:	0800cab0 	.word	0x0800cab0
 8001b38:	0800cac4 	.word	0x0800cac4
 8001b3c:	0800cad8 	.word	0x0800cad8
 8001b40:	20000b35 	.word	0x20000b35
 8001b44:	0800caec 	.word	0x0800caec
 8001b48:	0800cb00 	.word	0x0800cb00
 8001b4c:	0800cb10 	.word	0x0800cb10
			}
		} else if(kapi1Tip == 2) {
 8001b50:	4b8a      	ldr	r3, [pc, #552]	; (8001d7c <menu+0x15ac>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d104      	bne.n	8001b62 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001b58:	4a89      	ldr	r2, [pc, #548]	; (8001d80 <menu+0x15b0>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f7fe fdd6 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b62:	2102      	movs	r1, #2
 8001b64:	4887      	ldr	r0, [pc, #540]	; (8001d84 <menu+0x15b4>)
 8001b66:	f006 ff8f 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d115      	bne.n	8001b9c <menu+0x13cc>
 8001b70:	4b85      	ldr	r3, [pc, #532]	; (8001d88 <menu+0x15b8>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00e      	beq.n	8001b9c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <menu+0x15ac>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b7d      	ldr	r3, [pc, #500]	; (8001d7c <menu+0x15ac>)
 8001b88:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001b8a:	4b7c      	ldr	r3, [pc, #496]	; (8001d7c <menu+0x15ac>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d902      	bls.n	8001b98 <menu+0x13c8>
				kapi1Tip = 0;
 8001b92:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <menu+0x15ac>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b98:	f003 f9cc 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	4879      	ldr	r0, [pc, #484]	; (8001d84 <menu+0x15b4>)
 8001ba0:	f006 ff72 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d115      	bne.n	8001bd6 <menu+0x1406>
 8001baa:	4b77      	ldr	r3, [pc, #476]	; (8001d88 <menu+0x15b8>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00e      	beq.n	8001bd6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001bb8:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <menu+0x15ac>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b6e      	ldr	r3, [pc, #440]	; (8001d7c <menu+0x15ac>)
 8001bc2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001bc4:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <menu+0x15ac>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d902      	bls.n	8001bd2 <menu+0x1402>
		   		kapi1Tip = 2;
 8001bcc:	4b6b      	ldr	r3, [pc, #428]	; (8001d7c <menu+0x15ac>)
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bd2:	f003 f9af 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	486a      	ldr	r0, [pc, #424]	; (8001d84 <menu+0x15b4>)
 8001bda:	f006 ff55 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10d      	bne.n	8001c00 <menu+0x1430>
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <menu+0x15b8>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8001bf2:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <menu+0x15ac>)
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <menu+0x15bc>)
 8001bf8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <menu+0x15c0>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001c00:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <menu+0x15c4>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b0a      	cmp	r3, #10
 8001c06:	d17f      	bne.n	8001d08 <menu+0x1538>
		if(dilSecim == 0) {
 8001c08:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <menu+0x15c8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10a      	bne.n	8001c26 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001c10:	4a62      	ldr	r2, [pc, #392]	; (8001d9c <menu+0x15cc>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7fe fd7a 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001c1a:	4a61      	ldr	r2, [pc, #388]	; (8001da0 <menu+0x15d0>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f7fe fd75 	bl	800070e <lcd_print>
 8001c24:	e00d      	b.n	8001c42 <menu+0x1472>
		} else if(dilSecim == 1) {
 8001c26:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <menu+0x15c8>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d109      	bne.n	8001c42 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8001c2e:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <menu+0x15d4>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7fe fd6b 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001c38:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <menu+0x15d8>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7fe fd66 	bl	800070e <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <menu+0x15dc>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	220a      	movs	r2, #10
 8001c48:	4959      	ldr	r1, [pc, #356]	; (8001db0 <menu+0x15e0>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f009 ff48 	bl	800bae0 <itoa>
		lcd_print(2,16,snum);
 8001c50:	4a57      	ldr	r2, [pc, #348]	; (8001db0 <menu+0x15e0>)
 8001c52:	2110      	movs	r1, #16
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7fe fd5a 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4849      	ldr	r0, [pc, #292]	; (8001d84 <menu+0x15b4>)
 8001c5e:	f006 ff13 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d119      	bne.n	8001c9c <menu+0x14cc>
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <menu+0x15b8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <menu+0x14cc>
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <menu+0x15ac>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10e      	bne.n	8001c9c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <menu+0x15dc>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <menu+0x15dc>)
 8001c88:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <menu+0x15dc>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d902      	bls.n	8001c98 <menu+0x14c8>
				kapi1AcSure = 0;
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <menu+0x15dc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c98:	f003 f94c 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <menu+0x15b4>)
 8001ca0:	f006 fef2 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d119      	bne.n	8001cde <menu+0x150e>
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <menu+0x15b8>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d012      	beq.n	8001cde <menu+0x150e>
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <menu+0x15ac>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10e      	bne.n	8001cde <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <menu+0x15dc>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <menu+0x15dc>)
 8001cca:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <menu+0x15dc>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b06      	cmp	r3, #6
 8001cd2:	d902      	bls.n	8001cda <menu+0x150a>
		   		kapi1AcSure = 5;
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <menu+0x15dc>)
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cda:	f003 f92b 	bl	8004f34 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cde:	2108      	movs	r1, #8
 8001ce0:	4828      	ldr	r0, [pc, #160]	; (8001d84 <menu+0x15b4>)
 8001ce2:	f006 fed1 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10d      	bne.n	8001d08 <menu+0x1538>
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <menu+0x15b8>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <menu+0x15dc>)
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <menu+0x15bc>)
 8001d00:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <menu+0x15c0>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <menu+0x15c4>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b0b      	cmp	r3, #11
 8001d0e:	f040 80b5 	bne.w	8001e7c <menu+0x16ac>
		if(dilSecim == 0) {
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <menu+0x15c8>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001d1a:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <menu+0x15e4>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7fe fcf5 	bl	800070e <lcd_print>
 8001d24:	e008      	b.n	8001d38 <menu+0x1568>
		} else if(dilSecim == 1) {
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <menu+0x15c8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d104      	bne.n	8001d38 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001d2e:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <menu+0x15e8>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7fe fceb 	bl	800070e <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001d38:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <menu+0x15ec>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <menu+0x15f0>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	2002      	movs	r0, #2
 8001d46:	f7fe fce2 	bl	800070e <lcd_print>
 8001d4a:	e048      	b.n	8001dde <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <menu+0x15ec>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d13b      	bne.n	8001dcc <menu+0x15fc>
			if(dilSecim == 0) {
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <menu+0x15c8>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <menu+0x15f4>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7fe fcd4 	bl	800070e <lcd_print>
 8001d66:	e03a      	b.n	8001dde <menu+0x160e>
			} else if(dilSecim == 1) {
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <menu+0x15c8>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d136      	bne.n	8001dde <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001d70:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <menu+0x15f8>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	2002      	movs	r0, #2
 8001d76:	f7fe fcca 	bl	800070e <lcd_print>
 8001d7a:	e030      	b.n	8001dde <menu+0x160e>
 8001d7c:	20000b35 	.word	0x20000b35
 8001d80:	0800cb24 	.word	0x0800cb24
 8001d84:	40010800 	.word	0x40010800
 8001d88:	20000b5a 	.word	0x20000b5a
 8001d8c:	20000ac0 	.word	0x20000ac0
 8001d90:	20000b57 	.word	0x20000b57
 8001d94:	20000b2c 	.word	0x20000b2c
 8001d98:	20000b4c 	.word	0x20000b4c
 8001d9c:	0800cb34 	.word	0x0800cb34
 8001da0:	0800cb48 	.word	0x0800cb48
 8001da4:	0800cb58 	.word	0x0800cb58
 8001da8:	0800cb6c 	.word	0x0800cb6c
 8001dac:	20000b45 	.word	0x20000b45
 8001db0:	20000b00 	.word	0x20000b00
 8001db4:	0800cb7c 	.word	0x0800cb7c
 8001db8:	0800cb90 	.word	0x0800cb90
 8001dbc:	20000b36 	.word	0x20000b36
 8001dc0:	0800caec 	.word	0x0800caec
 8001dc4:	0800cb00 	.word	0x0800cb00
 8001dc8:	0800cb10 	.word	0x0800cb10
			}
		} else if(kapi2Tip == 2) {
 8001dcc:	4b8a      	ldr	r3, [pc, #552]	; (8001ff8 <menu+0x1828>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d104      	bne.n	8001dde <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001dd4:	4a89      	ldr	r2, [pc, #548]	; (8001ffc <menu+0x182c>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7fe fc98 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dde:	2102      	movs	r1, #2
 8001de0:	4887      	ldr	r0, [pc, #540]	; (8002000 <menu+0x1830>)
 8001de2:	f006 fe51 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d115      	bne.n	8001e18 <menu+0x1648>
 8001dec:	4b85      	ldr	r3, [pc, #532]	; (8002004 <menu+0x1834>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	f083 0301 	eor.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00e      	beq.n	8001e18 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <menu+0x1828>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b7d      	ldr	r3, [pc, #500]	; (8001ff8 <menu+0x1828>)
 8001e04:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001e06:	4b7c      	ldr	r3, [pc, #496]	; (8001ff8 <menu+0x1828>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d902      	bls.n	8001e14 <menu+0x1644>
				kapi2Tip = 0;
 8001e0e:	4b7a      	ldr	r3, [pc, #488]	; (8001ff8 <menu+0x1828>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e14:	f003 f88e 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4879      	ldr	r0, [pc, #484]	; (8002000 <menu+0x1830>)
 8001e1c:	f006 fe34 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d115      	bne.n	8001e52 <menu+0x1682>
 8001e26:	4b77      	ldr	r3, [pc, #476]	; (8002004 <menu+0x1834>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001e34:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <menu+0x1828>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <menu+0x1828>)
 8001e3e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001e40:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <menu+0x1828>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d902      	bls.n	8001e4e <menu+0x167e>
		   		kapi2Tip = 2;
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <menu+0x1828>)
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e4e:	f003 f871 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e52:	2108      	movs	r1, #8
 8001e54:	486a      	ldr	r0, [pc, #424]	; (8002000 <menu+0x1830>)
 8001e56:	f006 fe17 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10d      	bne.n	8001e7c <menu+0x16ac>
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <menu+0x1834>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	f083 0301 	eor.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <menu+0x1828>)
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <menu+0x1838>)
 8001e74:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <menu+0x183c>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001e7c:	4b64      	ldr	r3, [pc, #400]	; (8002010 <menu+0x1840>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d17f      	bne.n	8001f84 <menu+0x17b4>
		if(dilSecim == 0) {
 8001e84:	4b63      	ldr	r3, [pc, #396]	; (8002014 <menu+0x1844>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001e8c:	4a62      	ldr	r2, [pc, #392]	; (8002018 <menu+0x1848>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7fe fc3c 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001e96:	4a61      	ldr	r2, [pc, #388]	; (800201c <menu+0x184c>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f7fe fc37 	bl	800070e <lcd_print>
 8001ea0:	e00d      	b.n	8001ebe <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <menu+0x1844>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d109      	bne.n	8001ebe <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001eaa:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <menu+0x1850>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7fe fc2d 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001eb4:	4a5b      	ldr	r2, [pc, #364]	; (8002024 <menu+0x1854>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f7fe fc28 	bl	800070e <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <menu+0x1858>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	220a      	movs	r2, #10
 8001ec4:	4959      	ldr	r1, [pc, #356]	; (800202c <menu+0x185c>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 fe0a 	bl	800bae0 <itoa>
		lcd_print(2,16,snum);
 8001ecc:	4a57      	ldr	r2, [pc, #348]	; (800202c <menu+0x185c>)
 8001ece:	2110      	movs	r1, #16
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7fe fc1c 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	4849      	ldr	r0, [pc, #292]	; (8002000 <menu+0x1830>)
 8001eda:	f006 fdd5 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d119      	bne.n	8001f18 <menu+0x1748>
 8001ee4:	4b47      	ldr	r3, [pc, #284]	; (8002004 <menu+0x1834>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f083 0301 	eor.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d012      	beq.n	8001f18 <menu+0x1748>
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <menu+0x1828>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10e      	bne.n	8001f18 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <menu+0x1858>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <menu+0x1858>)
 8001f04:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <menu+0x1858>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d902      	bls.n	8001f14 <menu+0x1744>
				kapi2AcSure = 0;
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <menu+0x1858>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f14:	f003 f80e 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4839      	ldr	r0, [pc, #228]	; (8002000 <menu+0x1830>)
 8001f1c:	f006 fdb4 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d119      	bne.n	8001f5a <menu+0x178a>
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <menu+0x1834>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d012      	beq.n	8001f5a <menu+0x178a>
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <menu+0x1828>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10e      	bne.n	8001f5a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <menu+0x1858>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <menu+0x1858>)
 8001f46:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <menu+0x1858>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d902      	bls.n	8001f56 <menu+0x1786>
		   		kapi2AcSure = 5;
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <menu+0x1858>)
 8001f52:	2205      	movs	r2, #5
 8001f54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f56:	f002 ffed 	bl	8004f34 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5a:	2108      	movs	r1, #8
 8001f5c:	4828      	ldr	r0, [pc, #160]	; (8002000 <menu+0x1830>)
 8001f5e:	f006 fd93 	bl	8008a88 <HAL_GPIO_ReadPin>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10d      	bne.n	8001f84 <menu+0x17b4>
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <menu+0x1834>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f083 0301 	eor.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <menu+0x1858>)
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <menu+0x1838>)
 8001f7c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001f7e:	4b23      	ldr	r3, [pc, #140]	; (800200c <menu+0x183c>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <menu+0x1840>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b0d      	cmp	r3, #13
 8001f8a:	f040 80b5 	bne.w	80020f8 <menu+0x1928>
		if(dilSecim == 0) {
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <menu+0x1844>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001f96:	4a26      	ldr	r2, [pc, #152]	; (8002030 <menu+0x1860>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7fe fbb7 	bl	800070e <lcd_print>
 8001fa0:	e008      	b.n	8001fb4 <menu+0x17e4>
		} else if(dilSecim == 1){
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <menu+0x1844>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d104      	bne.n	8001fb4 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001faa:	4a22      	ldr	r2, [pc, #136]	; (8002034 <menu+0x1864>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7fe fbad 	bl	800070e <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <menu+0x1868>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <menu+0x186c>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7fe fba4 	bl	800070e <lcd_print>
 8001fc6:	e048      	b.n	800205a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <menu+0x1868>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d13b      	bne.n	8002048 <menu+0x1878>
			if(dilSecim == 0) {
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <menu+0x1844>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <menu+0x1870>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f7fe fb96 	bl	800070e <lcd_print>
 8001fe2:	e03a      	b.n	800205a <menu+0x188a>
			} else if(dilSecim == 1) {
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <menu+0x1844>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d136      	bne.n	800205a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <menu+0x1874>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	f7fe fb8c 	bl	800070e <lcd_print>
 8001ff6:	e030      	b.n	800205a <menu+0x188a>
 8001ff8:	20000b36 	.word	0x20000b36
 8001ffc:	0800cb24 	.word	0x0800cb24
 8002000:	40010800 	.word	0x40010800
 8002004:	20000b5a 	.word	0x20000b5a
 8002008:	20000ac0 	.word	0x20000ac0
 800200c:	20000b57 	.word	0x20000b57
 8002010:	20000b2c 	.word	0x20000b2c
 8002014:	20000b4c 	.word	0x20000b4c
 8002018:	0800cba4 	.word	0x0800cba4
 800201c:	0800cb48 	.word	0x0800cb48
 8002020:	0800cbb8 	.word	0x0800cbb8
 8002024:	0800cb6c 	.word	0x0800cb6c
 8002028:	20000b46 	.word	0x20000b46
 800202c:	20000b00 	.word	0x20000b00
 8002030:	0800cbcc 	.word	0x0800cbcc
 8002034:	0800cbe0 	.word	0x0800cbe0
 8002038:	20000b37 	.word	0x20000b37
 800203c:	0800caec 	.word	0x0800caec
 8002040:	0800cb00 	.word	0x0800cb00
 8002044:	0800cb10 	.word	0x0800cb10
			}
		} else if(kapitablaTip == 2) {
 8002048:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <menu+0x19e8>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d104      	bne.n	800205a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002050:	4a5a      	ldr	r2, [pc, #360]	; (80021bc <menu+0x19ec>)
 8002052:	2101      	movs	r1, #1
 8002054:	2002      	movs	r0, #2
 8002056:	f7fe fb5a 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800205a:	2102      	movs	r1, #2
 800205c:	4858      	ldr	r0, [pc, #352]	; (80021c0 <menu+0x19f0>)
 800205e:	f006 fd13 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d115      	bne.n	8002094 <menu+0x18c4>
 8002068:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <menu+0x19f4>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	f083 0301 	eor.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00e      	beq.n	8002094 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002076:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <menu+0x19e8>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <menu+0x19e8>)
 8002080:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <menu+0x19e8>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d902      	bls.n	8002090 <menu+0x18c0>
				kapitablaTip = 0;
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <menu+0x19e8>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002090:	f002 ff50 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002094:	2104      	movs	r1, #4
 8002096:	484a      	ldr	r0, [pc, #296]	; (80021c0 <menu+0x19f0>)
 8002098:	f006 fcf6 	bl	8008a88 <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d115      	bne.n	80020ce <menu+0x18fe>
 80020a2:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <menu+0x19f4>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00e      	beq.n	80020ce <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 80020b0:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <menu+0x19e8>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <menu+0x19e8>)
 80020ba:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <menu+0x19e8>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d902      	bls.n	80020ca <menu+0x18fa>
		   		kapitablaTip = 2;
 80020c4:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <menu+0x19e8>)
 80020c6:	2202      	movs	r2, #2
 80020c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ca:	f002 ff33 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ce:	2108      	movs	r1, #8
 80020d0:	483b      	ldr	r0, [pc, #236]	; (80021c0 <menu+0x19f0>)
 80020d2:	f006 fcd9 	bl	8008a88 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10d      	bne.n	80020f8 <menu+0x1928>
 80020dc:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <menu+0x19f4>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f083 0301 	eor.w	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <menu+0x19e8>)
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <menu+0x19f8>)
 80020f0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <menu+0x19fc>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <menu+0x1a00>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b0e      	cmp	r3, #14
 80020fe:	f040 80f2 	bne.w	80022e6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <menu+0x1a04>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 800210a:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <menu+0x1a08>)
 800210c:	2101      	movs	r1, #1
 800210e:	2001      	movs	r0, #1
 8002110:	f7fe fafd 	bl	800070e <lcd_print>
 8002114:	e008      	b.n	8002128 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002116:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <menu+0x1a04>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d104      	bne.n	8002128 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 800211e:	4a2f      	ldr	r2, [pc, #188]	; (80021dc <menu+0x1a0c>)
 8002120:	2101      	movs	r1, #1
 8002122:	2001      	movs	r0, #1
 8002124:	f7fe faf3 	bl	800070e <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <menu+0x1a10>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d113      	bne.n	8002158 <menu+0x1988>
			if(dilSecim == 0){
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <menu+0x1a04>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002138:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <menu+0x1a14>)
 800213a:	2101      	movs	r1, #1
 800213c:	2002      	movs	r0, #2
 800213e:	f7fe fae6 	bl	800070e <lcd_print>
 8002142:	e071      	b.n	8002228 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <menu+0x1a04>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d16d      	bne.n	8002228 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 800214c:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <menu+0x1a18>)
 800214e:	2101      	movs	r1, #1
 8002150:	2002      	movs	r0, #2
 8002152:	f7fe fadc 	bl	800070e <lcd_print>
 8002156:	e067      	b.n	8002228 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <menu+0x1a10>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d112      	bne.n	8002186 <menu+0x19b6>
			if(dilSecim == 0){
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <menu+0x1a04>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <menu+0x1a1c>)
 800216a:	2101      	movs	r1, #1
 800216c:	2002      	movs	r0, #2
 800216e:	f7fe face 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1){
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <menu+0x1a04>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d156      	bne.n	8002228 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <menu+0x1a20>)
 800217c:	2101      	movs	r1, #1
 800217e:	2002      	movs	r0, #2
 8002180:	f7fe fac5 	bl	800070e <lcd_print>
 8002184:	e050      	b.n	8002228 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <menu+0x1a10>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d136      	bne.n	80021fc <menu+0x1a2c>
			if(dilSecim == 0){
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <menu+0x1a04>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <menu+0x1a24>)
 8002198:	2101      	movs	r1, #1
 800219a:	2002      	movs	r0, #2
 800219c:	f7fe fab7 	bl	800070e <lcd_print>
 80021a0:	e042      	b.n	8002228 <menu+0x1a58>
			} else if(dilSecim == 1) {
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <menu+0x1a04>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d13e      	bne.n	8002228 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <menu+0x1a28>)
 80021ac:	2101      	movs	r1, #1
 80021ae:	2002      	movs	r0, #2
 80021b0:	f7fe faad 	bl	800070e <lcd_print>
 80021b4:	e038      	b.n	8002228 <menu+0x1a58>
 80021b6:	bf00      	nop
 80021b8:	20000b37 	.word	0x20000b37
 80021bc:	0800cb24 	.word	0x0800cb24
 80021c0:	40010800 	.word	0x40010800
 80021c4:	20000b5a 	.word	0x20000b5a
 80021c8:	20000ac0 	.word	0x20000ac0
 80021cc:	20000b57 	.word	0x20000b57
 80021d0:	20000b2c 	.word	0x20000b2c
 80021d4:	20000b4c 	.word	0x20000b4c
 80021d8:	0800cbf4 	.word	0x0800cbf4
 80021dc:	0800cc08 	.word	0x0800cc08
 80021e0:	20000b39 	.word	0x20000b39
 80021e4:	0800cc1c 	.word	0x0800cc1c
 80021e8:	0800cc2c 	.word	0x0800cc2c
 80021ec:	0800cc3c 	.word	0x0800cc3c
 80021f0:	0800cc4c 	.word	0x0800cc4c
 80021f4:	0800cc5c 	.word	0x0800cc5c
 80021f8:	0800cc70 	.word	0x0800cc70
			}
		} else if(kapiTablaAcKonum == 3) {
 80021fc:	4b9b      	ldr	r3, [pc, #620]	; (800246c <menu+0x1c9c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d111      	bne.n	8002228 <menu+0x1a58>
			if(dilSecim == 0) {
 8002204:	4b9a      	ldr	r3, [pc, #616]	; (8002470 <menu+0x1ca0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d104      	bne.n	8002216 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 800220c:	4a99      	ldr	r2, [pc, #612]	; (8002474 <menu+0x1ca4>)
 800220e:	2101      	movs	r1, #1
 8002210:	2002      	movs	r0, #2
 8002212:	f7fe fa7c 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1) {
 8002216:	4b96      	ldr	r3, [pc, #600]	; (8002470 <menu+0x1ca0>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d104      	bne.n	8002228 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 800221e:	4a96      	ldr	r2, [pc, #600]	; (8002478 <menu+0x1ca8>)
 8002220:	2101      	movs	r1, #1
 8002222:	2002      	movs	r0, #2
 8002224:	f7fe fa73 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002228:	2102      	movs	r1, #2
 800222a:	4894      	ldr	r0, [pc, #592]	; (800247c <menu+0x1cac>)
 800222c:	f006 fc2c 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d115      	bne.n	8002262 <menu+0x1a92>
 8002236:	4b92      	ldr	r3, [pc, #584]	; (8002480 <menu+0x1cb0>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002244:	4b89      	ldr	r3, [pc, #548]	; (800246c <menu+0x1c9c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b87      	ldr	r3, [pc, #540]	; (800246c <menu+0x1c9c>)
 800224e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002250:	4b86      	ldr	r3, [pc, #536]	; (800246c <menu+0x1c9c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d902      	bls.n	800225e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002258:	4b84      	ldr	r3, [pc, #528]	; (800246c <menu+0x1c9c>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800225e:	f002 fe69 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002262:	2104      	movs	r1, #4
 8002264:	4885      	ldr	r0, [pc, #532]	; (800247c <menu+0x1cac>)
 8002266:	f006 fc0f 	bl	8008a88 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d115      	bne.n	800229c <menu+0x1acc>
 8002270:	4b83      	ldr	r3, [pc, #524]	; (8002480 <menu+0x1cb0>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00e      	beq.n	800229c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <menu+0x1c9c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b79      	ldr	r3, [pc, #484]	; (800246c <menu+0x1c9c>)
 8002288:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800228a:	4b78      	ldr	r3, [pc, #480]	; (800246c <menu+0x1c9c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d902      	bls.n	8002298 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002292:	4b76      	ldr	r3, [pc, #472]	; (800246c <menu+0x1c9c>)
 8002294:	2202      	movs	r2, #2
 8002296:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002298:	f002 fe4c 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800229c:	2108      	movs	r1, #8
 800229e:	4877      	ldr	r0, [pc, #476]	; (800247c <menu+0x1cac>)
 80022a0:	f006 fbf2 	bl	8008a88 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d11d      	bne.n	80022e6 <menu+0x1b16>
 80022aa:	4b75      	ldr	r3, [pc, #468]	; (8002480 <menu+0x1cb0>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d016      	beq.n	80022e6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80022b8:	4b6c      	ldr	r3, [pc, #432]	; (800246c <menu+0x1c9c>)
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	4b71      	ldr	r3, [pc, #452]	; (8002484 <menu+0x1cb4>)
 80022be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80022c2:	4b6a      	ldr	r3, [pc, #424]	; (800246c <menu+0x1c9c>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <menu+0x1b02>
 80022ca:	4b68      	ldr	r3, [pc, #416]	; (800246c <menu+0x1c9c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d106      	bne.n	80022e0 <menu+0x1b10>
				altLimit = 1;
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <menu+0x1cb8>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022d8:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <menu+0x1cb8>)
 80022da:	781a      	ldrb	r2, [r3, #0]
 80022dc:	4b69      	ldr	r3, [pc, #420]	; (8002484 <menu+0x1cb4>)
 80022de:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <menu+0x1cbc>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80022e6:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <menu+0x1cc0>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	d17f      	bne.n	80023ee <menu+0x1c1e>
		if(dilSecim == 0) {
 80022ee:	4b60      	ldr	r3, [pc, #384]	; (8002470 <menu+0x1ca0>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80022f6:	4a67      	ldr	r2, [pc, #412]	; (8002494 <menu+0x1cc4>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7fe fa07 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002300:	4a65      	ldr	r2, [pc, #404]	; (8002498 <menu+0x1cc8>)
 8002302:	2101      	movs	r1, #1
 8002304:	2002      	movs	r0, #2
 8002306:	f7fe fa02 	bl	800070e <lcd_print>
 800230a:	e00d      	b.n	8002328 <menu+0x1b58>
		} else if(dilSecim == 1) {
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <menu+0x1ca0>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d109      	bne.n	8002328 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002314:	4a61      	ldr	r2, [pc, #388]	; (800249c <menu+0x1ccc>)
 8002316:	2101      	movs	r1, #1
 8002318:	2001      	movs	r0, #1
 800231a:	f7fe f9f8 	bl	800070e <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800231e:	4a60      	ldr	r2, [pc, #384]	; (80024a0 <menu+0x1cd0>)
 8002320:	2101      	movs	r1, #1
 8002322:	2002      	movs	r0, #2
 8002324:	f7fe f9f3 	bl	800070e <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002328:	4b5e      	ldr	r3, [pc, #376]	; (80024a4 <menu+0x1cd4>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	220a      	movs	r2, #10
 800232e:	495e      	ldr	r1, [pc, #376]	; (80024a8 <menu+0x1cd8>)
 8002330:	4618      	mov	r0, r3
 8002332:	f009 fbd5 	bl	800bae0 <itoa>
		lcd_print(2,16,snum);
 8002336:	4a5c      	ldr	r2, [pc, #368]	; (80024a8 <menu+0x1cd8>)
 8002338:	2110      	movs	r1, #16
 800233a:	2002      	movs	r0, #2
 800233c:	f7fe f9e7 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002340:	2102      	movs	r1, #2
 8002342:	484e      	ldr	r0, [pc, #312]	; (800247c <menu+0x1cac>)
 8002344:	f006 fba0 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d119      	bne.n	8002382 <menu+0x1bb2>
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <menu+0x1cb0>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f083 0301 	eor.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d012      	beq.n	8002382 <menu+0x1bb2>
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <menu+0x1cdc>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10e      	bne.n	8002382 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <menu+0x1cd4>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <menu+0x1cd4>)
 800236e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <menu+0x1cd4>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d902      	bls.n	800237e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002378:	4b4a      	ldr	r3, [pc, #296]	; (80024a4 <menu+0x1cd4>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800237e:	f002 fdd9 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002382:	2104      	movs	r1, #4
 8002384:	483d      	ldr	r0, [pc, #244]	; (800247c <menu+0x1cac>)
 8002386:	f006 fb7f 	bl	8008a88 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d119      	bne.n	80023c4 <menu+0x1bf4>
 8002390:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <menu+0x1cb0>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <menu+0x1bf4>
 800239e:	4b43      	ldr	r3, [pc, #268]	; (80024ac <menu+0x1cdc>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <menu+0x1cd4>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <menu+0x1cd4>)
 80023b0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80023b2:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <menu+0x1cd4>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <menu+0x1cd4>)
 80023bc:	2205      	movs	r2, #5
 80023be:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80023c0:	f002 fdb8 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023c4:	2108      	movs	r1, #8
 80023c6:	482d      	ldr	r0, [pc, #180]	; (800247c <menu+0x1cac>)
 80023c8:	f006 fb5e 	bl	8008a88 <HAL_GPIO_ReadPin>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10d      	bne.n	80023ee <menu+0x1c1e>
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <menu+0x1cb0>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <menu+0x1cd4>)
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <menu+0x1cb4>)
 80023e6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <menu+0x1cbc>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <menu+0x1cc0>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	f040 80bc 	bne.w	8002570 <menu+0x1da0>
		if(dilSecim == 0) {
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <menu+0x1ca0>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002400:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <menu+0x1ce0>)
 8002402:	2101      	movs	r1, #1
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe f982 	bl	800070e <lcd_print>
 800240a:	e008      	b.n	800241e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <menu+0x1ca0>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d104      	bne.n	800241e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002414:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <menu+0x1ce4>)
 8002416:	2101      	movs	r1, #1
 8002418:	2001      	movs	r0, #1
 800241a:	f7fe f978 	bl	800070e <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <menu+0x1ce8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <menu+0x1ca0>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800242e:	4a11      	ldr	r2, [pc, #68]	; (8002474 <menu+0x1ca4>)
 8002430:	2101      	movs	r1, #1
 8002432:	2002      	movs	r0, #2
 8002434:	f7fe f96b 	bl	800070e <lcd_print>
 8002438:	e04b      	b.n	80024d2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <menu+0x1ca0>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d147      	bne.n	80024d2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002442:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <menu+0x1ca8>)
 8002444:	2101      	movs	r1, #1
 8002446:	2002      	movs	r0, #2
 8002448:	f7fe f961 	bl	800070e <lcd_print>
 800244c:	e041      	b.n	80024d2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <menu+0x1ce8>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d13d      	bne.n	80024d2 <menu+0x1d02>
			if(dilSecim == 0) {
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <menu+0x1ca0>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d130      	bne.n	80024c0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <menu+0x1cec>)
 8002460:	2101      	movs	r1, #1
 8002462:	2002      	movs	r0, #2
 8002464:	f7fe f953 	bl	800070e <lcd_print>
 8002468:	e033      	b.n	80024d2 <menu+0x1d02>
 800246a:	bf00      	nop
 800246c:	20000b39 	.word	0x20000b39
 8002470:	20000b4c 	.word	0x20000b4c
 8002474:	0800c8e4 	.word	0x0800c8e4
 8002478:	0800c8f8 	.word	0x0800c8f8
 800247c:	40010800 	.word	0x40010800
 8002480:	20000b5a 	.word	0x20000b5a
 8002484:	20000ac0 	.word	0x20000ac0
 8002488:	20000b32 	.word	0x20000b32
 800248c:	20000b57 	.word	0x20000b57
 8002490:	20000b2c 	.word	0x20000b2c
 8002494:	0800cc84 	.word	0x0800cc84
 8002498:	0800cb48 	.word	0x0800cb48
 800249c:	0800cc98 	.word	0x0800cc98
 80024a0:	0800cb6c 	.word	0x0800cb6c
 80024a4:	20000b47 	.word	0x20000b47
 80024a8:	20000b00 	.word	0x20000b00
 80024ac:	20000b37 	.word	0x20000b37
 80024b0:	0800ccac 	.word	0x0800ccac
 80024b4:	0800ccc0 	.word	0x0800ccc0
 80024b8:	20000b3a 	.word	0x20000b3a
 80024bc:	0800c944 	.word	0x0800c944
			} else if(dilSecim == 1) {
 80024c0:	4b99      	ldr	r3, [pc, #612]	; (8002728 <menu+0x1f58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d104      	bne.n	80024d2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80024c8:	4a98      	ldr	r2, [pc, #608]	; (800272c <menu+0x1f5c>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	2002      	movs	r0, #2
 80024ce:	f7fe f91e 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d2:	2102      	movs	r1, #2
 80024d4:	4896      	ldr	r0, [pc, #600]	; (8002730 <menu+0x1f60>)
 80024d6:	f006 fad7 	bl	8008a88 <HAL_GPIO_ReadPin>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d115      	bne.n	800250c <menu+0x1d3c>
 80024e0:	4b94      	ldr	r3, [pc, #592]	; (8002734 <menu+0x1f64>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f083 0301 	eor.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00e      	beq.n	800250c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80024ee:	4b92      	ldr	r3, [pc, #584]	; (8002738 <menu+0x1f68>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b90      	ldr	r3, [pc, #576]	; (8002738 <menu+0x1f68>)
 80024f8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80024fa:	4b8f      	ldr	r3, [pc, #572]	; (8002738 <menu+0x1f68>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d902      	bls.n	8002508 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002502:	4b8d      	ldr	r3, [pc, #564]	; (8002738 <menu+0x1f68>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002508:	f002 fd14 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800250c:	2104      	movs	r1, #4
 800250e:	4888      	ldr	r0, [pc, #544]	; (8002730 <menu+0x1f60>)
 8002510:	f006 faba 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d115      	bne.n	8002546 <menu+0x1d76>
 800251a:	4b86      	ldr	r3, [pc, #536]	; (8002734 <menu+0x1f64>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f083 0301 	eor.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002528:	4b83      	ldr	r3, [pc, #524]	; (8002738 <menu+0x1f68>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b81      	ldr	r3, [pc, #516]	; (8002738 <menu+0x1f68>)
 8002532:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002534:	4b80      	ldr	r3, [pc, #512]	; (8002738 <menu+0x1f68>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <menu+0x1f68>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002542:	f002 fcf7 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002546:	2108      	movs	r1, #8
 8002548:	4879      	ldr	r0, [pc, #484]	; (8002730 <menu+0x1f60>)
 800254a:	f006 fa9d 	bl	8008a88 <HAL_GPIO_ReadPin>
 800254e:	4603      	mov	r3, r0
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10d      	bne.n	8002570 <menu+0x1da0>
 8002554:	4b77      	ldr	r3, [pc, #476]	; (8002734 <menu+0x1f64>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	f083 0301 	eor.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002562:	4b75      	ldr	r3, [pc, #468]	; (8002738 <menu+0x1f68>)
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <menu+0x1f6c>)
 8002568:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800256a:	4b75      	ldr	r3, [pc, #468]	; (8002740 <menu+0x1f70>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002570:	4b74      	ldr	r3, [pc, #464]	; (8002744 <menu+0x1f74>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b11      	cmp	r3, #17
 8002576:	f040 80c3 	bne.w	8002700 <menu+0x1f30>
		if(dilSecim == 0) {
 800257a:	4b6b      	ldr	r3, [pc, #428]	; (8002728 <menu+0x1f58>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002582:	4a71      	ldr	r2, [pc, #452]	; (8002748 <menu+0x1f78>)
 8002584:	2101      	movs	r1, #1
 8002586:	2001      	movs	r0, #1
 8002588:	f7fe f8c1 	bl	800070e <lcd_print>
 800258c:	e008      	b.n	80025a0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800258e:	4b66      	ldr	r3, [pc, #408]	; (8002728 <menu+0x1f58>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d104      	bne.n	80025a0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002596:	4a6d      	ldr	r2, [pc, #436]	; (800274c <menu+0x1f7c>)
 8002598:	2101      	movs	r1, #1
 800259a:	2001      	movs	r0, #1
 800259c:	f7fe f8b7 	bl	800070e <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80025a0:	4b6b      	ldr	r3, [pc, #428]	; (8002750 <menu+0x1f80>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d113      	bne.n	80025d0 <menu+0x1e00>
			if(dilSecim == 0){
 80025a8:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <menu+0x1f58>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80025b0:	4a68      	ldr	r2, [pc, #416]	; (8002754 <menu+0x1f84>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	2002      	movs	r0, #2
 80025b6:	f7fe f8aa 	bl	800070e <lcd_print>
 80025ba:	e038      	b.n	800262e <menu+0x1e5e>
			} else if(dilSecim == 1){
 80025bc:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <menu+0x1f58>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d134      	bne.n	800262e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80025c4:	4a64      	ldr	r2, [pc, #400]	; (8002758 <menu+0x1f88>)
 80025c6:	2101      	movs	r1, #1
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7fe f8a0 	bl	800070e <lcd_print>
 80025ce:	e02e      	b.n	800262e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80025d0:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <menu+0x1f80>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d113      	bne.n	8002600 <menu+0x1e30>
			if(dilSecim == 0){
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <menu+0x1f58>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80025e0:	4a5e      	ldr	r2, [pc, #376]	; (800275c <menu+0x1f8c>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	2002      	movs	r0, #2
 80025e6:	f7fe f892 	bl	800070e <lcd_print>
 80025ea:	e020      	b.n	800262e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80025ec:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <menu+0x1f58>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d11c      	bne.n	800262e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80025f4:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <menu+0x1f90>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	2002      	movs	r0, #2
 80025fa:	f7fe f888 	bl	800070e <lcd_print>
 80025fe:	e016      	b.n	800262e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <menu+0x1f80>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d112      	bne.n	800262e <menu+0x1e5e>
			if(dilSecim == 0) {
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <menu+0x1f58>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002610:	4a54      	ldr	r2, [pc, #336]	; (8002764 <menu+0x1f94>)
 8002612:	2101      	movs	r1, #1
 8002614:	2002      	movs	r0, #2
 8002616:	f7fe f87a 	bl	800070e <lcd_print>
 800261a:	e008      	b.n	800262e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800261c:	4b42      	ldr	r3, [pc, #264]	; (8002728 <menu+0x1f58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d104      	bne.n	800262e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002624:	4a50      	ldr	r2, [pc, #320]	; (8002768 <menu+0x1f98>)
 8002626:	2101      	movs	r1, #1
 8002628:	2002      	movs	r0, #2
 800262a:	f7fe f870 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800262e:	2102      	movs	r1, #2
 8002630:	483f      	ldr	r0, [pc, #252]	; (8002730 <menu+0x1f60>)
 8002632:	f006 fa29 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d115      	bne.n	8002668 <menu+0x1e98>
 800263c:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <menu+0x1f64>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	f083 0301 	eor.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00e      	beq.n	8002668 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <menu+0x1f80>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <menu+0x1f80>)
 8002654:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <menu+0x1f80>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d902      	bls.n	8002664 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <menu+0x1f80>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002664:	f002 fc66 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002668:	2104      	movs	r1, #4
 800266a:	4831      	ldr	r0, [pc, #196]	; (8002730 <menu+0x1f60>)
 800266c:	f006 fa0c 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d115      	bne.n	80026a2 <menu+0x1ed2>
 8002676:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <menu+0x1f64>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002684:	4b32      	ldr	r3, [pc, #200]	; (8002750 <menu+0x1f80>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3b01      	subs	r3, #1
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <menu+0x1f80>)
 800268e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <menu+0x1f80>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d902      	bls.n	800269e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <menu+0x1f80>)
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800269e:	f002 fc49 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a2:	2108      	movs	r1, #8
 80026a4:	4822      	ldr	r0, [pc, #136]	; (8002730 <menu+0x1f60>)
 80026a6:	f006 f9ef 	bl	8008a88 <HAL_GPIO_ReadPin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d127      	bne.n	8002700 <menu+0x1f30>
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <menu+0x1f64>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d020      	beq.n	8002700 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <menu+0x1f80>)
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <menu+0x1f6c>)
 80026c4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <menu+0x1f80>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d003      	beq.n	80026d6 <menu+0x1f06>
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <menu+0x1f80>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <menu+0x1f14>
				calismaSekli = 0;
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <menu+0x1f9c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <menu+0x1f9c>)
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <menu+0x1f6c>)
 80026e2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <menu+0x1f80>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <menu+0x1fa0>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <menu+0x1fa0>)
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <menu+0x1f6c>)
 80026f8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <menu+0x1f70>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <menu+0x1f74>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b12      	cmp	r3, #18
 8002706:	f040 80d5 	bne.w	80028b4 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <menu+0x1f80>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d13c      	bne.n	800278c <menu+0x1fbc>
			if(dilSecim == 0) {
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <menu+0x1f58>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d12e      	bne.n	8002778 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <menu+0x1fa4>)
 800271c:	2101      	movs	r1, #1
 800271e:	2001      	movs	r0, #1
 8002720:	f7fd fff5 	bl	800070e <lcd_print>
 8002724:	e048      	b.n	80027b8 <menu+0x1fe8>
 8002726:	bf00      	nop
 8002728:	20000b4c 	.word	0x20000b4c
 800272c:	0800c958 	.word	0x0800c958
 8002730:	40010800 	.word	0x40010800
 8002734:	20000b5a 	.word	0x20000b5a
 8002738:	20000b3a 	.word	0x20000b3a
 800273c:	20000ac0 	.word	0x20000ac0
 8002740:	20000b57 	.word	0x20000b57
 8002744:	20000b2c 	.word	0x20000b2c
 8002748:	0800ccd4 	.word	0x0800ccd4
 800274c:	0800cce8 	.word	0x0800cce8
 8002750:	20000b3b 	.word	0x20000b3b
 8002754:	0800ccfc 	.word	0x0800ccfc
 8002758:	0800cd0c 	.word	0x0800cd0c
 800275c:	0800cd1c 	.word	0x0800cd1c
 8002760:	0800cd2c 	.word	0x0800cd2c
 8002764:	0800c8e4 	.word	0x0800c8e4
 8002768:	0800c8f8 	.word	0x0800c8f8
 800276c:	20000b2d 	.word	0x20000b2d
 8002770:	20000b3e 	.word	0x20000b3e
 8002774:	0800cd3c 	.word	0x0800cd3c
			} else if(dilSecim == 1) {
 8002778:	4b7b      	ldr	r3, [pc, #492]	; (8002968 <menu+0x2198>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d11b      	bne.n	80027b8 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002780:	4a7a      	ldr	r2, [pc, #488]	; (800296c <menu+0x219c>)
 8002782:	2101      	movs	r1, #1
 8002784:	2001      	movs	r0, #1
 8002786:	f7fd ffc2 	bl	800070e <lcd_print>
 800278a:	e015      	b.n	80027b8 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800278c:	4b78      	ldr	r3, [pc, #480]	; (8002970 <menu+0x21a0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d111      	bne.n	80027b8 <menu+0x1fe8>
			if(dilSecim == 0){
 8002794:	4b74      	ldr	r3, [pc, #464]	; (8002968 <menu+0x2198>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800279c:	4a75      	ldr	r2, [pc, #468]	; (8002974 <menu+0x21a4>)
 800279e:	2101      	movs	r1, #1
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7fd ffb4 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1){
 80027a6:	4b70      	ldr	r3, [pc, #448]	; (8002968 <menu+0x2198>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d104      	bne.n	80027b8 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80027ae:	4a72      	ldr	r2, [pc, #456]	; (8002978 <menu+0x21a8>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7fd ffab 	bl	800070e <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80027b8:	4b70      	ldr	r3, [pc, #448]	; (800297c <menu+0x21ac>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d113      	bne.n	80027e8 <menu+0x2018>
			if(dilSecim == 0) {
 80027c0:	4b69      	ldr	r3, [pc, #420]	; (8002968 <menu+0x2198>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80027c8:	4a6d      	ldr	r2, [pc, #436]	; (8002980 <menu+0x21b0>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	2002      	movs	r0, #2
 80027ce:	f7fd ff9e 	bl	800070e <lcd_print>
 80027d2:	e020      	b.n	8002816 <menu+0x2046>
			} else if(dilSecim == 1){
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <menu+0x2198>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d11c      	bne.n	8002816 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80027dc:	4a69      	ldr	r2, [pc, #420]	; (8002984 <menu+0x21b4>)
 80027de:	2101      	movs	r1, #1
 80027e0:	2002      	movs	r0, #2
 80027e2:	f7fd ff94 	bl	800070e <lcd_print>
 80027e6:	e016      	b.n	8002816 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80027e8:	4b64      	ldr	r3, [pc, #400]	; (800297c <menu+0x21ac>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d112      	bne.n	8002816 <menu+0x2046>
			if(dilSecim == 0){
 80027f0:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <menu+0x2198>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80027f8:	4a63      	ldr	r2, [pc, #396]	; (8002988 <menu+0x21b8>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	2002      	movs	r0, #2
 80027fe:	f7fd ff86 	bl	800070e <lcd_print>
 8002802:	e008      	b.n	8002816 <menu+0x2046>
			} else if(dilSecim == 1){
 8002804:	4b58      	ldr	r3, [pc, #352]	; (8002968 <menu+0x2198>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d104      	bne.n	8002816 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800280c:	4a5f      	ldr	r2, [pc, #380]	; (800298c <menu+0x21bc>)
 800280e:	2101      	movs	r1, #1
 8002810:	2002      	movs	r0, #2
 8002812:	f7fd ff7c 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002816:	2102      	movs	r1, #2
 8002818:	485d      	ldr	r0, [pc, #372]	; (8002990 <menu+0x21c0>)
 800281a:	f006 f935 	bl	8008a88 <HAL_GPIO_ReadPin>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d115      	bne.n	8002850 <menu+0x2080>
 8002824:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <menu+0x21c4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	f083 0301 	eor.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00e      	beq.n	8002850 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002832:	4b52      	ldr	r3, [pc, #328]	; (800297c <menu+0x21ac>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <menu+0x21ac>)
 800283c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800283e:	4b4f      	ldr	r3, [pc, #316]	; (800297c <menu+0x21ac>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d902      	bls.n	800284c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8002846:	4b4d      	ldr	r3, [pc, #308]	; (800297c <menu+0x21ac>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800284c:	f002 fb72 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002850:	2104      	movs	r1, #4
 8002852:	484f      	ldr	r0, [pc, #316]	; (8002990 <menu+0x21c0>)
 8002854:	f006 f918 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d115      	bne.n	800288a <menu+0x20ba>
 800285e:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <menu+0x21c4>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	f083 0301 	eor.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00e      	beq.n	800288a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <menu+0x21ac>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	3b01      	subs	r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b41      	ldr	r3, [pc, #260]	; (800297c <menu+0x21ac>)
 8002876:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002878:	4b40      	ldr	r3, [pc, #256]	; (800297c <menu+0x21ac>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002880:	4b3e      	ldr	r3, [pc, #248]	; (800297c <menu+0x21ac>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002886:	f002 fb55 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800288a:	2108      	movs	r1, #8
 800288c:	4840      	ldr	r0, [pc, #256]	; (8002990 <menu+0x21c0>)
 800288e:	f006 f8fb 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002892:	4603      	mov	r3, r0
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10d      	bne.n	80028b4 <menu+0x20e4>
 8002898:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <menu+0x21c4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80028a6:	4b35      	ldr	r3, [pc, #212]	; (800297c <menu+0x21ac>)
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <menu+0x21c8>)
 80028ac:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <menu+0x21cc>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <menu+0x21d0>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b13      	cmp	r3, #19
 80028ba:	f040 80d5 	bne.w	8002a68 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <menu+0x21a0>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d113      	bne.n	80028ee <menu+0x211e>
			if(dilSecim == 0) {
 80028c6:	4b28      	ldr	r3, [pc, #160]	; (8002968 <menu+0x2198>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80028ce:	4a35      	ldr	r2, [pc, #212]	; (80029a4 <menu+0x21d4>)
 80028d0:	2101      	movs	r1, #1
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7fd ff1b 	bl	800070e <lcd_print>
 80028d8:	e01f      	b.n	800291a <menu+0x214a>
			} else if(dilSecim == 1) {
 80028da:	4b23      	ldr	r3, [pc, #140]	; (8002968 <menu+0x2198>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d11b      	bne.n	800291a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80028e2:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <menu+0x21d8>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7fd ff11 	bl	800070e <lcd_print>
 80028ec:	e015      	b.n	800291a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <menu+0x21a0>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d111      	bne.n	800291a <menu+0x214a>
			if(dilSecim == 0) {
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <menu+0x2198>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80028fe:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <menu+0x21dc>)
 8002900:	2101      	movs	r1, #1
 8002902:	2001      	movs	r0, #1
 8002904:	f7fd ff03 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1) {
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <menu+0x2198>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d104      	bne.n	800291a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <menu+0x21e0>)
 8002912:	2101      	movs	r1, #1
 8002914:	2001      	movs	r0, #1
 8002916:	f7fd fefa 	bl	800070e <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <menu+0x21e4>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d113      	bne.n	800294a <menu+0x217a>
			if(dilSecim == 0) {
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <menu+0x2198>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <menu+0x21b0>)
 800292c:	2101      	movs	r1, #1
 800292e:	2002      	movs	r0, #2
 8002930:	f7fd feed 	bl	800070e <lcd_print>
 8002934:	e049      	b.n	80029ca <menu+0x21fa>
			} else if(dilSecim == 1) {
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <menu+0x2198>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d145      	bne.n	80029ca <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800293e:	4a11      	ldr	r2, [pc, #68]	; (8002984 <menu+0x21b4>)
 8002940:	2101      	movs	r1, #1
 8002942:	2002      	movs	r0, #2
 8002944:	f7fd fee3 	bl	800070e <lcd_print>
 8002948:	e03f      	b.n	80029ca <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <menu+0x21e4>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d13b      	bne.n	80029ca <menu+0x21fa>
			if(dilSecim == 0) {
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <menu+0x2198>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12e      	bne.n	80029b8 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <menu+0x21b8>)
 800295c:	2101      	movs	r1, #1
 800295e:	2002      	movs	r0, #2
 8002960:	f7fd fed5 	bl	800070e <lcd_print>
 8002964:	e031      	b.n	80029ca <menu+0x21fa>
 8002966:	bf00      	nop
 8002968:	20000b4c 	.word	0x20000b4c
 800296c:	0800cd50 	.word	0x0800cd50
 8002970:	20000b3b 	.word	0x20000b3b
 8002974:	0800cd60 	.word	0x0800cd60
 8002978:	0800cd74 	.word	0x0800cd74
 800297c:	20000b3c 	.word	0x20000b3c
 8002980:	0800c8e4 	.word	0x0800c8e4
 8002984:	0800c8f8 	.word	0x0800c8f8
 8002988:	0800c944 	.word	0x0800c944
 800298c:	0800c958 	.word	0x0800c958
 8002990:	40010800 	.word	0x40010800
 8002994:	20000b5a 	.word	0x20000b5a
 8002998:	20000ac0 	.word	0x20000ac0
 800299c:	20000b57 	.word	0x20000b57
 80029a0:	20000b2c 	.word	0x20000b2c
 80029a4:	0800cd88 	.word	0x0800cd88
 80029a8:	0800cd9c 	.word	0x0800cd9c
 80029ac:	0800cdb0 	.word	0x0800cdb0
 80029b0:	0800cdc4 	.word	0x0800cdc4
 80029b4:	20000b3d 	.word	0x20000b3d
			} else if(dilSecim == 1) {
 80029b8:	4b90      	ldr	r3, [pc, #576]	; (8002bfc <menu+0x242c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d104      	bne.n	80029ca <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80029c0:	4a8f      	ldr	r2, [pc, #572]	; (8002c00 <menu+0x2430>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	2002      	movs	r0, #2
 80029c6:	f7fd fea2 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ca:	2102      	movs	r1, #2
 80029cc:	488d      	ldr	r0, [pc, #564]	; (8002c04 <menu+0x2434>)
 80029ce:	f006 f85b 	bl	8008a88 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d115      	bne.n	8002a04 <menu+0x2234>
 80029d8:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <menu+0x2438>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00e      	beq.n	8002a04 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80029e6:	4b89      	ldr	r3, [pc, #548]	; (8002c0c <menu+0x243c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b87      	ldr	r3, [pc, #540]	; (8002c0c <menu+0x243c>)
 80029f0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80029f2:	4b86      	ldr	r3, [pc, #536]	; (8002c0c <menu+0x243c>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d902      	bls.n	8002a00 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80029fa:	4b84      	ldr	r3, [pc, #528]	; (8002c0c <menu+0x243c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a00:	f002 fa98 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a04:	2104      	movs	r1, #4
 8002a06:	487f      	ldr	r0, [pc, #508]	; (8002c04 <menu+0x2434>)
 8002a08:	f006 f83e 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d115      	bne.n	8002a3e <menu+0x226e>
 8002a12:	4b7d      	ldr	r3, [pc, #500]	; (8002c08 <menu+0x2438>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f083 0301 	eor.w	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002a20:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <menu+0x243c>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b78      	ldr	r3, [pc, #480]	; (8002c0c <menu+0x243c>)
 8002a2a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002a2c:	4b77      	ldr	r3, [pc, #476]	; (8002c0c <menu+0x243c>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8002a34:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <menu+0x243c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a3a:	f002 fa7b 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a3e:	2108      	movs	r1, #8
 8002a40:	4870      	ldr	r0, [pc, #448]	; (8002c04 <menu+0x2434>)
 8002a42:	f006 f821 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10d      	bne.n	8002a68 <menu+0x2298>
 8002a4c:	4b6e      	ldr	r3, [pc, #440]	; (8002c08 <menu+0x2438>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f083 0301 	eor.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002a5a:	4b6c      	ldr	r3, [pc, #432]	; (8002c0c <menu+0x243c>)
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <menu+0x2440>)
 8002a60:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <menu+0x2444>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002a68:	4b6b      	ldr	r3, [pc, #428]	; (8002c18 <menu+0x2448>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b14      	cmp	r3, #20
 8002a6e:	f040 80b5 	bne.w	8002bdc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <menu+0x244c>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d113      	bne.n	8002aa2 <menu+0x22d2>
			if(dilSecim == 0) {
 8002a7a:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <menu+0x242c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002a82:	4a67      	ldr	r2, [pc, #412]	; (8002c20 <menu+0x2450>)
 8002a84:	2101      	movs	r1, #1
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fd fe41 	bl	800070e <lcd_print>
 8002a8c:	e020      	b.n	8002ad0 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <menu+0x242c>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d11c      	bne.n	8002ad0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002a96:	4a63      	ldr	r2, [pc, #396]	; (8002c24 <menu+0x2454>)
 8002a98:	2101      	movs	r1, #1
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f7fd fe37 	bl	800070e <lcd_print>
 8002aa0:	e016      	b.n	8002ad0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002aa2:	4b5e      	ldr	r3, [pc, #376]	; (8002c1c <menu+0x244c>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d112      	bne.n	8002ad0 <menu+0x2300>
			if(dilSecim == 0) {
 8002aaa:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <menu+0x242c>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <menu+0x2458>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7fd fe29 	bl	800070e <lcd_print>
 8002abc:	e008      	b.n	8002ad0 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002abe:	4b4f      	ldr	r3, [pc, #316]	; (8002bfc <menu+0x242c>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d104      	bne.n	8002ad0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002ac6:	4a59      	ldr	r2, [pc, #356]	; (8002c2c <menu+0x245c>)
 8002ac8:	2101      	movs	r1, #1
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7fd fe1f 	bl	800070e <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002ad0:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <menu+0x2460>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d113      	bne.n	8002b00 <menu+0x2330>
			if(dilSecim == 0) {
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <menu+0x242c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002ae0:	4a54      	ldr	r2, [pc, #336]	; (8002c34 <menu+0x2464>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f7fd fe12 	bl	800070e <lcd_print>
 8002aea:	e020      	b.n	8002b2e <menu+0x235e>
			} else if(dilSecim == 1) {
 8002aec:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <menu+0x242c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d11c      	bne.n	8002b2e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8002af4:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <menu+0x2468>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	2002      	movs	r0, #2
 8002afa:	f7fd fe08 	bl	800070e <lcd_print>
 8002afe:	e016      	b.n	8002b2e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <menu+0x2460>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d112      	bne.n	8002b2e <menu+0x235e>
			if(dilSecim == 0) {
 8002b08:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <menu+0x242c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <menu+0x246c>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	2002      	movs	r0, #2
 8002b16:	f7fd fdfa 	bl	800070e <lcd_print>
 8002b1a:	e008      	b.n	8002b2e <menu+0x235e>
			} else if(dilSecim == 1) {
 8002b1c:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <menu+0x242c>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d104      	bne.n	8002b2e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8002b24:	4a46      	ldr	r2, [pc, #280]	; (8002c40 <menu+0x2470>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7fd fdf0 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4834      	ldr	r0, [pc, #208]	; (8002c04 <menu+0x2434>)
 8002b32:	f005 ffa9 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d119      	bne.n	8002b70 <menu+0x23a0>
 8002b3c:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <menu+0x2438>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d012      	beq.n	8002b70 <menu+0x23a0>
 8002b4a:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <menu+0x244c>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d10e      	bne.n	8002b70 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002b52:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <menu+0x2460>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <menu+0x2460>)
 8002b5c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <menu+0x2460>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d902      	bls.n	8002b6c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002b66:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <menu+0x2460>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b6c:	f002 f9e2 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b70:	2104      	movs	r1, #4
 8002b72:	4824      	ldr	r0, [pc, #144]	; (8002c04 <menu+0x2434>)
 8002b74:	f005 ff88 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d119      	bne.n	8002bb2 <menu+0x23e2>
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <menu+0x2438>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	f083 0301 	eor.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <menu+0x23e2>
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <menu+0x244c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d10e      	bne.n	8002bb2 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <menu+0x2460>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <menu+0x2460>)
 8002b9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <menu+0x2460>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <menu+0x2460>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bae:	f002 f9c1 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb2:	2108      	movs	r1, #8
 8002bb4:	4813      	ldr	r0, [pc, #76]	; (8002c04 <menu+0x2434>)
 8002bb6:	f005 ff67 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10d      	bne.n	8002bdc <menu+0x240c>
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <menu+0x2438>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	f083 0301 	eor.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <menu+0x2460>)
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <menu+0x2440>)
 8002bd4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <menu+0x2444>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <menu+0x2448>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b15      	cmp	r3, #21
 8002be2:	f040 80c2 	bne.w	8002d6a <menu+0x259a>
		if(dilSecim == 0) {
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <menu+0x242c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d12c      	bne.n	8002c48 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <menu+0x2474>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7fd fd8b 	bl	800070e <lcd_print>
 8002bf8:	e02f      	b.n	8002c5a <menu+0x248a>
 8002bfa:	bf00      	nop
 8002bfc:	20000b4c 	.word	0x20000b4c
 8002c00:	0800c958 	.word	0x0800c958
 8002c04:	40010800 	.word	0x40010800
 8002c08:	20000b5a 	.word	0x20000b5a
 8002c0c:	20000b3d 	.word	0x20000b3d
 8002c10:	20000ac0 	.word	0x20000ac0
 8002c14:	20000b57 	.word	0x20000b57
 8002c18:	20000b2c 	.word	0x20000b2c
 8002c1c:	20000b3b 	.word	0x20000b3b
 8002c20:	0800cdd8 	.word	0x0800cdd8
 8002c24:	0800cdec 	.word	0x0800cdec
 8002c28:	0800ce00 	.word	0x0800ce00
 8002c2c:	0800ce14 	.word	0x0800ce14
 8002c30:	20000b3e 	.word	0x20000b3e
 8002c34:	0800ce28 	.word	0x0800ce28
 8002c38:	0800ce3c 	.word	0x0800ce3c
 8002c3c:	0800ce4c 	.word	0x0800ce4c
 8002c40:	0800ce60 	.word	0x0800ce60
 8002c44:	0800ce70 	.word	0x0800ce70
		} else if(dilSecim == 1) {
 8002c48:	4b9c      	ldr	r3, [pc, #624]	; (8002ebc <menu+0x26ec>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d104      	bne.n	8002c5a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002c50:	4a9b      	ldr	r2, [pc, #620]	; (8002ec0 <menu+0x26f0>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7fd fd5a 	bl	800070e <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002c5a:	4b9a      	ldr	r3, [pc, #616]	; (8002ec4 <menu+0x26f4>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d112      	bne.n	8002c88 <menu+0x24b8>
			if(dilSecim == 0) {
 8002c62:	4b96      	ldr	r3, [pc, #600]	; (8002ebc <menu+0x26ec>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d104      	bne.n	8002c74 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8002c6a:	4a97      	ldr	r2, [pc, #604]	; (8002ec8 <menu+0x26f8>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f7fd fd4d 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1) {
 8002c74:	4b91      	ldr	r3, [pc, #580]	; (8002ebc <menu+0x26ec>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d11c      	bne.n	8002cb6 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8002c7c:	4a93      	ldr	r2, [pc, #588]	; (8002ecc <menu+0x26fc>)
 8002c7e:	2101      	movs	r1, #1
 8002c80:	2002      	movs	r0, #2
 8002c82:	f7fd fd44 	bl	800070e <lcd_print>
 8002c86:	e016      	b.n	8002cb6 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002c88:	4b8e      	ldr	r3, [pc, #568]	; (8002ec4 <menu+0x26f4>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d112      	bne.n	8002cb6 <menu+0x24e6>
			if(dilSecim == 0) {
 8002c90:	4b8a      	ldr	r3, [pc, #552]	; (8002ebc <menu+0x26ec>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002c98:	4a8d      	ldr	r2, [pc, #564]	; (8002ed0 <menu+0x2700>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f7fd fd36 	bl	800070e <lcd_print>
 8002ca2:	e008      	b.n	8002cb6 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002ca4:	4b85      	ldr	r3, [pc, #532]	; (8002ebc <menu+0x26ec>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d104      	bne.n	8002cb6 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002cac:	4a89      	ldr	r2, [pc, #548]	; (8002ed4 <menu+0x2704>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fd fd2c 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4887      	ldr	r0, [pc, #540]	; (8002ed8 <menu+0x2708>)
 8002cba:	f005 fee5 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d115      	bne.n	8002cf0 <menu+0x2520>
 8002cc4:	4b85      	ldr	r3, [pc, #532]	; (8002edc <menu+0x270c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f083 0301 	eor.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002cd2:	4b7c      	ldr	r3, [pc, #496]	; (8002ec4 <menu+0x26f4>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <menu+0x26f4>)
 8002cdc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002cde:	4b79      	ldr	r3, [pc, #484]	; (8002ec4 <menu+0x26f4>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d902      	bls.n	8002cec <menu+0x251c>
				platformSilindirTipi = 0;
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <menu+0x26f4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cec:	f002 f922 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	4879      	ldr	r0, [pc, #484]	; (8002ed8 <menu+0x2708>)
 8002cf4:	f005 fec8 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d115      	bne.n	8002d2a <menu+0x255a>
 8002cfe:	4b77      	ldr	r3, [pc, #476]	; (8002edc <menu+0x270c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	f083 0301 	eor.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002d0c:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <menu+0x26f4>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <menu+0x26f4>)
 8002d16:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <menu+0x26f4>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <menu+0x26f4>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d26:	f002 f905 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2a:	2108      	movs	r1, #8
 8002d2c:	486a      	ldr	r0, [pc, #424]	; (8002ed8 <menu+0x2708>)
 8002d2e:	f005 feab 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d118      	bne.n	8002d6a <menu+0x259a>
 8002d38:	4b68      	ldr	r3, [pc, #416]	; (8002edc <menu+0x270c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	f083 0301 	eor.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d011      	beq.n	8002d6a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002d46:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <menu+0x26f4>)
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <menu+0x2710>)
 8002d4c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <menu+0x26f4>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d106      	bne.n	8002d64 <menu+0x2594>
				altLimit = 1;
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <menu+0x2714>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d5c:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <menu+0x2714>)
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <menu+0x2710>)
 8002d62:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002d64:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <menu+0x2718>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002d6a:	4b60      	ldr	r3, [pc, #384]	; (8002eec <menu+0x271c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b16      	cmp	r3, #22
 8002d70:	f040 8081 	bne.w	8002e76 <menu+0x26a6>
		if(dilSecim == 0) {
 8002d74:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <menu+0x26ec>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002d7c:	4a5c      	ldr	r2, [pc, #368]	; (8002ef0 <menu+0x2720>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7fd fcc4 	bl	800070e <lcd_print>
 8002d86:	e008      	b.n	8002d9a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002d88:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <menu+0x26ec>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d104      	bne.n	8002d9a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002d90:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <menu+0x2724>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	2001      	movs	r0, #1
 8002d96:	f7fd fcba 	bl	800070e <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002d9a:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <menu+0x26ec>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002da2:	4a55      	ldr	r2, [pc, #340]	; (8002ef8 <menu+0x2728>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fd fcb1 	bl	800070e <lcd_print>
 8002dac:	e008      	b.n	8002dc0 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <menu+0x26ec>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d104      	bne.n	8002dc0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002db6:	4a51      	ldr	r2, [pc, #324]	; (8002efc <menu+0x272c>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2002      	movs	r0, #2
 8002dbc:	f7fd fca7 	bl	800070e <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <menu+0x2730>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	220a      	movs	r2, #10
 8002dc6:	494f      	ldr	r1, [pc, #316]	; (8002f04 <menu+0x2734>)
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f008 fe89 	bl	800bae0 <itoa>
		lcd_print(2,16,snum);
 8002dce:	4a4d      	ldr	r2, [pc, #308]	; (8002f04 <menu+0x2734>)
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f7fd fc9b 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dd8:	2102      	movs	r1, #2
 8002dda:	483f      	ldr	r0, [pc, #252]	; (8002ed8 <menu+0x2708>)
 8002ddc:	f005 fe54 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d115      	bne.n	8002e12 <menu+0x2642>
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <menu+0x270c>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f083 0301 	eor.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00e      	beq.n	8002e12 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002df4:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <menu+0x2730>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <menu+0x2730>)
 8002dfe:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002e00:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <menu+0x2730>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d902      	bls.n	8002e0e <menu+0x263e>
				yukariValfTmr = 0;
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <menu+0x2730>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e0e:	f002 f891 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e12:	2104      	movs	r1, #4
 8002e14:	4830      	ldr	r0, [pc, #192]	; (8002ed8 <menu+0x2708>)
 8002e16:	f005 fe37 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d115      	bne.n	8002e4c <menu+0x267c>
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <menu+0x270c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f083 0301 	eor.w	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00e      	beq.n	8002e4c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <menu+0x2730>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <menu+0x2730>)
 8002e38:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <menu+0x2730>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <menu+0x2730>)
 8002e44:	2205      	movs	r2, #5
 8002e46:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e48:	f002 f874 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e4c:	2108      	movs	r1, #8
 8002e4e:	4822      	ldr	r0, [pc, #136]	; (8002ed8 <menu+0x2708>)
 8002e50:	f005 fe1a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10d      	bne.n	8002e76 <menu+0x26a6>
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <menu+0x270c>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	f083 0301 	eor.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <menu+0x2730>)
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <menu+0x2710>)
 8002e6e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <menu+0x2718>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <menu+0x271c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b17      	cmp	r3, #23
 8002e7c:	f040 80ac 	bne.w	8002fd8 <menu+0x2808>
		if(dilSecim == 0) {
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <menu+0x26ec>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002e88:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <menu+0x2738>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fd fc3e 	bl	800070e <lcd_print>
 8002e92:	e008      	b.n	8002ea6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <menu+0x26ec>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d104      	bne.n	8002ea6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002e9c:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <menu+0x273c>)
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f7fd fc34 	bl	800070e <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <menu+0x26ec>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d130      	bne.n	8002f10 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <menu+0x2728>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	f7fd fc2b 	bl	800070e <lcd_print>
 8002eb8:	e033      	b.n	8002f22 <menu+0x2752>
 8002eba:	bf00      	nop
 8002ebc:	20000b4c 	.word	0x20000b4c
 8002ec0:	0800ce84 	.word	0x0800ce84
 8002ec4:	20000b3f 	.word	0x20000b3f
 8002ec8:	0800ce28 	.word	0x0800ce28
 8002ecc:	0800ce3c 	.word	0x0800ce3c
 8002ed0:	0800ce4c 	.word	0x0800ce4c
 8002ed4:	0800ce60 	.word	0x0800ce60
 8002ed8:	40010800 	.word	0x40010800
 8002edc:	20000b5a 	.word	0x20000b5a
 8002ee0:	20000ac0 	.word	0x20000ac0
 8002ee4:	20000b32 	.word	0x20000b32
 8002ee8:	20000b57 	.word	0x20000b57
 8002eec:	20000b2c 	.word	0x20000b2c
 8002ef0:	0800ce94 	.word	0x0800ce94
 8002ef4:	0800cea8 	.word	0x0800cea8
 8002ef8:	0800cb48 	.word	0x0800cb48
 8002efc:	0800cebc 	.word	0x0800cebc
 8002f00:	20000b40 	.word	0x20000b40
 8002f04:	20000b00 	.word	0x20000b00
 8002f08:	0800cecc 	.word	0x0800cecc
 8002f0c:	0800cee0 	.word	0x0800cee0
			} else if(dilSecim == 1) {
 8002f10:	4b98      	ldr	r3, [pc, #608]	; (8003174 <menu+0x29a4>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d104      	bne.n	8002f22 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002f18:	4a97      	ldr	r2, [pc, #604]	; (8003178 <menu+0x29a8>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	f7fd fbf6 	bl	800070e <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002f22:	4b96      	ldr	r3, [pc, #600]	; (800317c <menu+0x29ac>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	220a      	movs	r2, #10
 8002f28:	4995      	ldr	r1, [pc, #596]	; (8003180 <menu+0x29b0>)
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f008 fdd8 	bl	800bae0 <itoa>
		lcd_print(2,16,snum);
 8002f30:	4a93      	ldr	r2, [pc, #588]	; (8003180 <menu+0x29b0>)
 8002f32:	2110      	movs	r1, #16
 8002f34:	2002      	movs	r0, #2
 8002f36:	f7fd fbea 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4891      	ldr	r0, [pc, #580]	; (8003184 <menu+0x29b4>)
 8002f3e:	f005 fda3 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d115      	bne.n	8002f74 <menu+0x27a4>
 8002f48:	4b8f      	ldr	r3, [pc, #572]	; (8003188 <menu+0x29b8>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00e      	beq.n	8002f74 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002f56:	4b89      	ldr	r3, [pc, #548]	; (800317c <menu+0x29ac>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b87      	ldr	r3, [pc, #540]	; (800317c <menu+0x29ac>)
 8002f60:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <menu+0x29ac>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d902      	bls.n	8002f70 <menu+0x27a0>
				asagiValfTmr = 0;
 8002f6a:	4b84      	ldr	r3, [pc, #528]	; (800317c <menu+0x29ac>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f70:	f001 ffe0 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f74:	2104      	movs	r1, #4
 8002f76:	4883      	ldr	r0, [pc, #524]	; (8003184 <menu+0x29b4>)
 8002f78:	f005 fd86 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d115      	bne.n	8002fae <menu+0x27de>
 8002f82:	4b81      	ldr	r3, [pc, #516]	; (8003188 <menu+0x29b8>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002f90:	4b7a      	ldr	r3, [pc, #488]	; (800317c <menu+0x29ac>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b78      	ldr	r3, [pc, #480]	; (800317c <menu+0x29ac>)
 8002f9a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002f9c:	4b77      	ldr	r3, [pc, #476]	; (800317c <menu+0x29ac>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b06      	cmp	r3, #6
 8002fa2:	d902      	bls.n	8002faa <menu+0x27da>
		   		asagiValfTmr = 5;
 8002fa4:	4b75      	ldr	r3, [pc, #468]	; (800317c <menu+0x29ac>)
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002faa:	f001 ffc3 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fae:	2108      	movs	r1, #8
 8002fb0:	4874      	ldr	r0, [pc, #464]	; (8003184 <menu+0x29b4>)
 8002fb2:	f005 fd69 	bl	8008a88 <HAL_GPIO_ReadPin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10d      	bne.n	8002fd8 <menu+0x2808>
 8002fbc:	4b72      	ldr	r3, [pc, #456]	; (8003188 <menu+0x29b8>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f083 0301 	eor.w	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002fca:	4b6c      	ldr	r3, [pc, #432]	; (800317c <menu+0x29ac>)
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	4b6f      	ldr	r3, [pc, #444]	; (800318c <menu+0x29bc>)
 8002fd0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002fd2:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <menu+0x29c0>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002fd8:	4b6e      	ldr	r3, [pc, #440]	; (8003194 <menu+0x29c4>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b18      	cmp	r3, #24
 8002fde:	f040 809d 	bne.w	800311c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <menu+0x29c8>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d113      	bne.n	8003012 <menu+0x2842>
			if(dilSecim == 0) {
 8002fea:	4b62      	ldr	r3, [pc, #392]	; (8003174 <menu+0x29a4>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002ff2:	4a6a      	ldr	r2, [pc, #424]	; (800319c <menu+0x29cc>)
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7fd fb89 	bl	800070e <lcd_print>
 8002ffc:	e020      	b.n	8003040 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <menu+0x29a4>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d11c      	bne.n	8003040 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003006:	4a66      	ldr	r2, [pc, #408]	; (80031a0 <menu+0x29d0>)
 8003008:	2101      	movs	r1, #1
 800300a:	2001      	movs	r0, #1
 800300c:	f7fd fb7f 	bl	800070e <lcd_print>
 8003010:	e016      	b.n	8003040 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003012:	4b61      	ldr	r3, [pc, #388]	; (8003198 <menu+0x29c8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d112      	bne.n	8003040 <menu+0x2870>
			if(dilSecim == 0) {
 800301a:	4b56      	ldr	r3, [pc, #344]	; (8003174 <menu+0x29a4>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003022:	4a60      	ldr	r2, [pc, #384]	; (80031a4 <menu+0x29d4>)
 8003024:	2101      	movs	r1, #1
 8003026:	2001      	movs	r0, #1
 8003028:	f7fd fb71 	bl	800070e <lcd_print>
 800302c:	e008      	b.n	8003040 <menu+0x2870>
			} else if(dilSecim == 1) {
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <menu+0x29a4>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d104      	bne.n	8003040 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <menu+0x29d8>)
 8003038:	2101      	movs	r1, #1
 800303a:	2001      	movs	r0, #1
 800303c:	f7fd fb67 	bl	800070e <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003040:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <menu+0x29a4>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003048:	4a58      	ldr	r2, [pc, #352]	; (80031ac <menu+0x29dc>)
 800304a:	2101      	movs	r1, #1
 800304c:	2002      	movs	r0, #2
 800304e:	f7fd fb5e 	bl	800070e <lcd_print>
 8003052:	e008      	b.n	8003066 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003054:	4b47      	ldr	r3, [pc, #284]	; (8003174 <menu+0x29a4>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d104      	bne.n	8003066 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 800305c:	4a46      	ldr	r2, [pc, #280]	; (8003178 <menu+0x29a8>)
 800305e:	2101      	movs	r1, #1
 8003060:	2002      	movs	r0, #2
 8003062:	f7fd fb54 	bl	800070e <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <menu+0x29e0>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	220a      	movs	r2, #10
 800306c:	4944      	ldr	r1, [pc, #272]	; (8003180 <menu+0x29b0>)
 800306e:	4618      	mov	r0, r3
 8003070:	f008 fd36 	bl	800bae0 <itoa>
		lcd_print(2, 16, snum);
 8003074:	4a42      	ldr	r2, [pc, #264]	; (8003180 <menu+0x29b0>)
 8003076:	2110      	movs	r1, #16
 8003078:	2002      	movs	r0, #2
 800307a:	f7fd fb48 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800307e:	2102      	movs	r1, #2
 8003080:	4840      	ldr	r0, [pc, #256]	; (8003184 <menu+0x29b4>)
 8003082:	f005 fd01 	bl	8008a88 <HAL_GPIO_ReadPin>
 8003086:	4603      	mov	r3, r0
 8003088:	2b01      	cmp	r3, #1
 800308a:	d115      	bne.n	80030b8 <menu+0x28e8>
 800308c:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <menu+0x29b8>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	f083 0301 	eor.w	r3, r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800309a:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <menu+0x29e0>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <menu+0x29e0>)
 80030a4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80030a6:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <menu+0x29e0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d902      	bls.n	80030b4 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 80030ae:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <menu+0x29e0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030b4:	f001 ff3e 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b8:	2104      	movs	r1, #4
 80030ba:	4832      	ldr	r0, [pc, #200]	; (8003184 <menu+0x29b4>)
 80030bc:	f005 fce4 	bl	8008a88 <HAL_GPIO_ReadPin>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d115      	bne.n	80030f2 <menu+0x2922>
 80030c6:	4b30      	ldr	r3, [pc, #192]	; (8003188 <menu+0x29b8>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	f083 0301 	eor.w	r3, r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00e      	beq.n	80030f2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <menu+0x29e0>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <menu+0x29e0>)
 80030de:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80030e0:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <menu+0x29e0>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	d902      	bls.n	80030ee <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80030e8:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <menu+0x29e0>)
 80030ea:	2205      	movs	r2, #5
 80030ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ee:	f001 ff21 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f2:	2108      	movs	r1, #8
 80030f4:	4823      	ldr	r0, [pc, #140]	; (8003184 <menu+0x29b4>)
 80030f6:	f005 fcc7 	bl	8008a88 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10d      	bne.n	800311c <menu+0x294c>
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <menu+0x29b8>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d006      	beq.n	800311c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 800310e:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <menu+0x29e0>)
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <menu+0x29bc>)
 8003114:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <menu+0x29c0>)
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <menu+0x29c4>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b19      	cmp	r3, #25
 8003122:	f040 80c4 	bne.w	80032ae <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <menu+0x29c8>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d113      	bne.n	8003156 <menu+0x2986>
			if(dilSecim == 0) {
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <menu+0x29a4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003136:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <menu+0x29e4>)
 8003138:	2101      	movs	r1, #1
 800313a:	2001      	movs	r0, #1
 800313c:	f7fd fae7 	bl	800070e <lcd_print>
 8003140:	e047      	b.n	80031d2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <menu+0x29a4>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d143      	bne.n	80031d2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 800314a:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <menu+0x29e8>)
 800314c:	2101      	movs	r1, #1
 800314e:	2001      	movs	r0, #1
 8003150:	f7fd fadd 	bl	800070e <lcd_print>
 8003154:	e03d      	b.n	80031d2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <menu+0x29c8>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d139      	bne.n	80031d2 <menu+0x2a02>
			if(dilSecim == 0) {
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <menu+0x29a4>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d12c      	bne.n	80031c0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <menu+0x29ec>)
 8003168:	2101      	movs	r1, #1
 800316a:	2001      	movs	r0, #1
 800316c:	f7fd facf 	bl	800070e <lcd_print>
 8003170:	e02f      	b.n	80031d2 <menu+0x2a02>
 8003172:	bf00      	nop
 8003174:	20000b4c 	.word	0x20000b4c
 8003178:	0800cebc 	.word	0x0800cebc
 800317c:	20000b41 	.word	0x20000b41
 8003180:	20000b00 	.word	0x20000b00
 8003184:	40010800 	.word	0x40010800
 8003188:	20000b5a 	.word	0x20000b5a
 800318c:	20000ac0 	.word	0x20000ac0
 8003190:	20000b57 	.word	0x20000b57
 8003194:	20000b2c 	.word	0x20000b2c
 8003198:	20000b3b 	.word	0x20000b3b
 800319c:	0800cef4 	.word	0x0800cef4
 80031a0:	0800cf08 	.word	0x0800cf08
 80031a4:	0800cf1c 	.word	0x0800cf1c
 80031a8:	0800cf30 	.word	0x0800cf30
 80031ac:	0800cb48 	.word	0x0800cb48
 80031b0:	20000b42 	.word	0x20000b42
 80031b4:	0800cf44 	.word	0x0800cf44
 80031b8:	0800cf58 	.word	0x0800cf58
 80031bc:	0800cf6c 	.word	0x0800cf6c
			} else if(dilSecim == 1) {
 80031c0:	4b73      	ldr	r3, [pc, #460]	; (8003390 <menu+0x2bc0>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d104      	bne.n	80031d2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 80031c8:	4a72      	ldr	r2, [pc, #456]	; (8003394 <menu+0x2bc4>)
 80031ca:	2101      	movs	r1, #1
 80031cc:	2001      	movs	r0, #1
 80031ce:	f7fd fa9e 	bl	800070e <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 80031d2:	4b6f      	ldr	r3, [pc, #444]	; (8003390 <menu+0x2bc0>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 80031da:	4a6f      	ldr	r2, [pc, #444]	; (8003398 <menu+0x2bc8>)
 80031dc:	2101      	movs	r1, #1
 80031de:	2002      	movs	r0, #2
 80031e0:	f7fd fa95 	bl	800070e <lcd_print>
 80031e4:	e008      	b.n	80031f8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <menu+0x2bc0>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d104      	bne.n	80031f8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 80031ee:	4a6b      	ldr	r2, [pc, #428]	; (800339c <menu+0x2bcc>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	2002      	movs	r0, #2
 80031f4:	f7fd fa8b 	bl	800070e <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80031f8:	4b69      	ldr	r3, [pc, #420]	; (80033a0 <menu+0x2bd0>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	220a      	movs	r2, #10
 80031fe:	4969      	ldr	r1, [pc, #420]	; (80033a4 <menu+0x2bd4>)
 8003200:	4618      	mov	r0, r3
 8003202:	f008 fc6d 	bl	800bae0 <itoa>
		lcd_print(2,16,snum);
 8003206:	4a67      	ldr	r2, [pc, #412]	; (80033a4 <menu+0x2bd4>)
 8003208:	2110      	movs	r1, #16
 800320a:	2002      	movs	r0, #2
 800320c:	f7fd fa7f 	bl	800070e <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003210:	2102      	movs	r1, #2
 8003212:	4865      	ldr	r0, [pc, #404]	; (80033a8 <menu+0x2bd8>)
 8003214:	f005 fc38 	bl	8008a88 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d115      	bne.n	800324a <menu+0x2a7a>
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <menu+0x2bdc>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f083 0301 	eor.w	r3, r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <menu+0x2bd0>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <menu+0x2bd0>)
 8003236:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <menu+0x2bd0>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d902      	bls.n	8003246 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003240:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <menu+0x2bd0>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003246:	f001 fe75 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800324a:	2104      	movs	r1, #4
 800324c:	4856      	ldr	r0, [pc, #344]	; (80033a8 <menu+0x2bd8>)
 800324e:	f005 fc1b 	bl	8008a88 <HAL_GPIO_ReadPin>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d115      	bne.n	8003284 <menu+0x2ab4>
 8003258:	4b54      	ldr	r3, [pc, #336]	; (80033ac <menu+0x2bdc>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f083 0301 	eor.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003266:	4b4e      	ldr	r3, [pc, #312]	; (80033a0 <menu+0x2bd0>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	3b01      	subs	r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <menu+0x2bd0>)
 8003270:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003272:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <menu+0x2bd0>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b06      	cmp	r3, #6
 8003278:	d902      	bls.n	8003280 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <menu+0x2bd0>)
 800327c:	2205      	movs	r2, #5
 800327e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003280:	f001 fe58 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003284:	2108      	movs	r1, #8
 8003286:	4848      	ldr	r0, [pc, #288]	; (80033a8 <menu+0x2bd8>)
 8003288:	f005 fbfe 	bl	8008a88 <HAL_GPIO_ReadPin>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d10d      	bne.n	80032ae <menu+0x2ade>
 8003292:	4b46      	ldr	r3, [pc, #280]	; (80033ac <menu+0x2bdc>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	f083 0301 	eor.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <menu+0x2bd0>)
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	4b42      	ldr	r3, [pc, #264]	; (80033b0 <menu+0x2be0>)
 80032a6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80032a8:	4b42      	ldr	r3, [pc, #264]	; (80033b4 <menu+0x2be4>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80032ae:	4b42      	ldr	r3, [pc, #264]	; (80033b8 <menu+0x2be8>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b1a      	cmp	r3, #26
 80032b4:	f040 80ec 	bne.w	8003490 <menu+0x2cc0>
		if(dilSecim == 0) {
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <menu+0x2bc0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80032c0:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <menu+0x2bec>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2001      	movs	r0, #1
 80032c6:	f7fd fa22 	bl	800070e <lcd_print>
 80032ca:	e008      	b.n	80032de <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80032cc:	4b30      	ldr	r3, [pc, #192]	; (8003390 <menu+0x2bc0>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d104      	bne.n	80032de <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80032d4:	4a3a      	ldr	r2, [pc, #232]	; (80033c0 <menu+0x2bf0>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	2001      	movs	r0, #1
 80032da:	f7fd fa18 	bl	800070e <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <menu+0x2bf4>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b63      	cmp	r3, #99	; 0x63
 80032e4:	d91e      	bls.n	8003324 <menu+0x2b54>
			if(dilSecim == 0) {
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <menu+0x2bc0>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80032ee:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <menu+0x2bc8>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	2002      	movs	r0, #2
 80032f4:	f7fd fa0b 	bl	800070e <lcd_print>
			}
			if(dilSecim == 1) {
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <menu+0x2bc0>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d104      	bne.n	800330a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <menu+0x2bcc>)
 8003302:	2101      	movs	r1, #1
 8003304:	2002      	movs	r0, #2
 8003306:	f7fd fa02 	bl	800070e <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <menu+0x2bf4>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	220a      	movs	r2, #10
 8003310:	4924      	ldr	r1, [pc, #144]	; (80033a4 <menu+0x2bd4>)
 8003312:	4618      	mov	r0, r3
 8003314:	f008 fbe4 	bl	800bae0 <itoa>
			lcd_print(2,14,snum);
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <menu+0x2bd4>)
 800331a:	210e      	movs	r1, #14
 800331c:	2002      	movs	r0, #2
 800331e:	f7fd f9f6 	bl	800070e <lcd_print>
 8003322:	e066      	b.n	80033f2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <menu+0x2bf4>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b09      	cmp	r3, #9
 800332a:	d923      	bls.n	8003374 <menu+0x2ba4>
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <menu+0x2bf4>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b63      	cmp	r3, #99	; 0x63
 8003332:	d81f      	bhi.n	8003374 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <menu+0x2bc0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800333c:	4a16      	ldr	r2, [pc, #88]	; (8003398 <menu+0x2bc8>)
 800333e:	2101      	movs	r1, #1
 8003340:	2002      	movs	r0, #2
 8003342:	f7fd f9e4 	bl	800070e <lcd_print>
 8003346:	e008      	b.n	800335a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <menu+0x2bc0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d104      	bne.n	800335a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <menu+0x2bcc>)
 8003352:	2101      	movs	r1, #1
 8003354:	2002      	movs	r0, #2
 8003356:	f7fd f9da 	bl	800070e <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <menu+0x2bf4>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	220a      	movs	r2, #10
 8003360:	4910      	ldr	r1, [pc, #64]	; (80033a4 <menu+0x2bd4>)
 8003362:	4618      	mov	r0, r3
 8003364:	f008 fbbc 	bl	800bae0 <itoa>
			lcd_print(2, 15, snum);
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <menu+0x2bd4>)
 800336a:	210f      	movs	r1, #15
 800336c:	2002      	movs	r0, #2
 800336e:	f7fd f9ce 	bl	800070e <lcd_print>
 8003372:	e03e      	b.n	80033f2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <menu+0x2bf4>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b09      	cmp	r3, #9
 800337a:	d83a      	bhi.n	80033f2 <menu+0x2c22>
			if(dilSecim == 0) {
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <menu+0x2bc0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d121      	bne.n	80033c8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <menu+0x2bc8>)
 8003386:	2101      	movs	r1, #1
 8003388:	2002      	movs	r0, #2
 800338a:	f7fd f9c0 	bl	800070e <lcd_print>
 800338e:	e024      	b.n	80033da <menu+0x2c0a>
 8003390:	20000b4c 	.word	0x20000b4c
 8003394:	0800cf80 	.word	0x0800cf80
 8003398:	0800cb48 	.word	0x0800cb48
 800339c:	0800cebc 	.word	0x0800cebc
 80033a0:	20000b43 	.word	0x20000b43
 80033a4:	20000b00 	.word	0x20000b00
 80033a8:	40010800 	.word	0x40010800
 80033ac:	20000b5a 	.word	0x20000b5a
 80033b0:	20000ac0 	.word	0x20000ac0
 80033b4:	20000b57 	.word	0x20000b57
 80033b8:	20000b2c 	.word	0x20000b2c
 80033bc:	0800cf94 	.word	0x0800cf94
 80033c0:	0800cfa8 	.word	0x0800cfa8
 80033c4:	20000b44 	.word	0x20000b44
			} else if(dilSecim == 1) {
 80033c8:	4b8f      	ldr	r3, [pc, #572]	; (8003608 <menu+0x2e38>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d104      	bne.n	80033da <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80033d0:	4a8e      	ldr	r2, [pc, #568]	; (800360c <menu+0x2e3c>)
 80033d2:	2101      	movs	r1, #1
 80033d4:	2002      	movs	r0, #2
 80033d6:	f7fd f99a 	bl	800070e <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80033da:	4b8d      	ldr	r3, [pc, #564]	; (8003610 <menu+0x2e40>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	220a      	movs	r2, #10
 80033e0:	498c      	ldr	r1, [pc, #560]	; (8003614 <menu+0x2e44>)
 80033e2:	4618      	mov	r0, r3
 80033e4:	f008 fb7c 	bl	800bae0 <itoa>
			lcd_print(2, 16, snum);
 80033e8:	4a8a      	ldr	r2, [pc, #552]	; (8003614 <menu+0x2e44>)
 80033ea:	2110      	movs	r1, #16
 80033ec:	2002      	movs	r0, #2
 80033ee:	f7fd f98e 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f2:	2102      	movs	r1, #2
 80033f4:	4888      	ldr	r0, [pc, #544]	; (8003618 <menu+0x2e48>)
 80033f6:	f005 fb47 	bl	8008a88 <HAL_GPIO_ReadPin>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d115      	bne.n	800342c <menu+0x2c5c>
 8003400:	4b86      	ldr	r3, [pc, #536]	; (800361c <menu+0x2e4c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f083 0301 	eor.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00e      	beq.n	800342c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 800340e:	4b80      	ldr	r3, [pc, #512]	; (8003610 <menu+0x2e40>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	3301      	adds	r3, #1
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b7e      	ldr	r3, [pc, #504]	; (8003610 <menu+0x2e40>)
 8003418:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800341a:	4b7d      	ldr	r3, [pc, #500]	; (8003610 <menu+0x2e40>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2bb4      	cmp	r3, #180	; 0xb4
 8003420:	d902      	bls.n	8003428 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003422:	4b7b      	ldr	r3, [pc, #492]	; (8003610 <menu+0x2e40>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003428:	f001 fd84 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800342c:	2104      	movs	r1, #4
 800342e:	487a      	ldr	r0, [pc, #488]	; (8003618 <menu+0x2e48>)
 8003430:	f005 fb2a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	d115      	bne.n	8003466 <menu+0x2c96>
 800343a:	4b78      	ldr	r3, [pc, #480]	; (800361c <menu+0x2e4c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00e      	beq.n	8003466 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003448:	4b71      	ldr	r3, [pc, #452]	; (8003610 <menu+0x2e40>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <menu+0x2e40>)
 8003452:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003454:	4b6e      	ldr	r3, [pc, #440]	; (8003610 <menu+0x2e40>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2bb5      	cmp	r3, #181	; 0xb5
 800345a:	d902      	bls.n	8003462 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800345c:	4b6c      	ldr	r3, [pc, #432]	; (8003610 <menu+0x2e40>)
 800345e:	22b4      	movs	r2, #180	; 0xb4
 8003460:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003462:	f001 fd67 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003466:	2108      	movs	r1, #8
 8003468:	486b      	ldr	r0, [pc, #428]	; (8003618 <menu+0x2e48>)
 800346a:	f005 fb0d 	bl	8008a88 <HAL_GPIO_ReadPin>
 800346e:	4603      	mov	r3, r0
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10d      	bne.n	8003490 <menu+0x2cc0>
 8003474:	4b69      	ldr	r3, [pc, #420]	; (800361c <menu+0x2e4c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	f083 0301 	eor.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003482:	4b63      	ldr	r3, [pc, #396]	; (8003610 <menu+0x2e40>)
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	4b66      	ldr	r3, [pc, #408]	; (8003620 <menu+0x2e50>)
 8003488:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800348a:	4b66      	ldr	r3, [pc, #408]	; (8003624 <menu+0x2e54>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003490:	4b65      	ldr	r3, [pc, #404]	; (8003628 <menu+0x2e58>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b1b      	cmp	r3, #27
 8003496:	f040 8083 	bne.w	80035a0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800349a:	4a64      	ldr	r2, [pc, #400]	; (800362c <menu+0x2e5c>)
 800349c:	2101      	movs	r1, #1
 800349e:	2001      	movs	r0, #1
 80034a0:	f7fd f935 	bl	800070e <lcd_print>

		if(buzzer == 0) {
 80034a4:	4b62      	ldr	r3, [pc, #392]	; (8003630 <menu+0x2e60>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <menu+0x2d04>
			if(dilSecim == 0) {
 80034ac:	4b56      	ldr	r3, [pc, #344]	; (8003608 <menu+0x2e38>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80034b4:	4a5f      	ldr	r2, [pc, #380]	; (8003634 <menu+0x2e64>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	2002      	movs	r0, #2
 80034ba:	f7fd f928 	bl	800070e <lcd_print>
 80034be:	e020      	b.n	8003502 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80034c0:	4b51      	ldr	r3, [pc, #324]	; (8003608 <menu+0x2e38>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d11c      	bne.n	8003502 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80034c8:	4a5b      	ldr	r2, [pc, #364]	; (8003638 <menu+0x2e68>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	2002      	movs	r0, #2
 80034ce:	f7fd f91e 	bl	800070e <lcd_print>
 80034d2:	e016      	b.n	8003502 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80034d4:	4b56      	ldr	r3, [pc, #344]	; (8003630 <menu+0x2e60>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d112      	bne.n	8003502 <menu+0x2d32>
			if(dilSecim == 0) {
 80034dc:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <menu+0x2e38>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80034e4:	4a55      	ldr	r2, [pc, #340]	; (800363c <menu+0x2e6c>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	2002      	movs	r0, #2
 80034ea:	f7fd f910 	bl	800070e <lcd_print>
 80034ee:	e008      	b.n	8003502 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80034f0:	4b45      	ldr	r3, [pc, #276]	; (8003608 <menu+0x2e38>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d104      	bne.n	8003502 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80034f8:	4a51      	ldr	r2, [pc, #324]	; (8003640 <menu+0x2e70>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	2002      	movs	r0, #2
 80034fe:	f7fd f906 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003502:	2102      	movs	r1, #2
 8003504:	4844      	ldr	r0, [pc, #272]	; (8003618 <menu+0x2e48>)
 8003506:	f005 fabf 	bl	8008a88 <HAL_GPIO_ReadPin>
 800350a:	4603      	mov	r3, r0
 800350c:	2b01      	cmp	r3, #1
 800350e:	d115      	bne.n	800353c <menu+0x2d6c>
 8003510:	4b42      	ldr	r3, [pc, #264]	; (800361c <menu+0x2e4c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	f083 0301 	eor.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <menu+0x2d6c>
			buzzer = buzzer + 1;
 800351e:	4b44      	ldr	r3, [pc, #272]	; (8003630 <menu+0x2e60>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4b42      	ldr	r3, [pc, #264]	; (8003630 <menu+0x2e60>)
 8003528:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <menu+0x2e60>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d902      	bls.n	8003538 <menu+0x2d68>
				buzzer = 0;
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <menu+0x2e60>)
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003538:	f001 fcfc 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800353c:	2104      	movs	r1, #4
 800353e:	4836      	ldr	r0, [pc, #216]	; (8003618 <menu+0x2e48>)
 8003540:	f005 faa2 	bl	8008a88 <HAL_GPIO_ReadPin>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d115      	bne.n	8003576 <menu+0x2da6>
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <menu+0x2e4c>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <menu+0x2e60>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	3b01      	subs	r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b33      	ldr	r3, [pc, #204]	; (8003630 <menu+0x2e60>)
 8003562:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003564:	4b32      	ldr	r3, [pc, #200]	; (8003630 <menu+0x2e60>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <menu+0x2da2>
		   		buzzer = 1;
 800356c:	4b30      	ldr	r3, [pc, #192]	; (8003630 <menu+0x2e60>)
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003572:	f001 fcdf 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003576:	2108      	movs	r1, #8
 8003578:	4827      	ldr	r0, [pc, #156]	; (8003618 <menu+0x2e48>)
 800357a:	f005 fa85 	bl	8008a88 <HAL_GPIO_ReadPin>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10d      	bne.n	80035a0 <menu+0x2dd0>
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <menu+0x2e4c>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003592:	4b27      	ldr	r3, [pc, #156]	; (8003630 <menu+0x2e60>)
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <menu+0x2e50>)
 8003598:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <menu+0x2e54>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <menu+0x2e58>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b1c      	cmp	r3, #28
 80035a6:	f040 80ab 	bne.w	8003700 <menu+0x2f30>
		calismaSayModu = 0;
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <menu+0x2e74>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <menu+0x2e78>)
 80035b2:	2101      	movs	r1, #1
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7fd f8aa 	bl	800070e <lcd_print>

		if(demoMode == 0) {
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <menu+0x2e7c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <menu+0x2e1a>
			if(dilSecim == 0) {
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <menu+0x2e38>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <menu+0x2e64>)
 80035cc:	2101      	movs	r1, #1
 80035ce:	2002      	movs	r0, #2
 80035d0:	f7fd f89d 	bl	800070e <lcd_print>
 80035d4:	e045      	b.n	8003662 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <menu+0x2e38>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d141      	bne.n	8003662 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80035de:	4a16      	ldr	r2, [pc, #88]	; (8003638 <menu+0x2e68>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	2002      	movs	r0, #2
 80035e4:	f7fd f893 	bl	800070e <lcd_print>
 80035e8:	e03b      	b.n	8003662 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <menu+0x2e7c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d137      	bne.n	8003662 <menu+0x2e92>
			if(dilSecim == 0){
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <menu+0x2e38>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d12a      	bne.n	8003650 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <menu+0x2e6c>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	2002      	movs	r0, #2
 8003600:	f7fd f885 	bl	800070e <lcd_print>
 8003604:	e02d      	b.n	8003662 <menu+0x2e92>
 8003606:	bf00      	nop
 8003608:	20000b4c 	.word	0x20000b4c
 800360c:	0800cebc 	.word	0x0800cebc
 8003610:	20000b44 	.word	0x20000b44
 8003614:	20000b00 	.word	0x20000b00
 8003618:	40010800 	.word	0x40010800
 800361c:	20000b5a 	.word	0x20000b5a
 8003620:	20000ac0 	.word	0x20000ac0
 8003624:	20000b57 	.word	0x20000b57
 8003628:	20000b2c 	.word	0x20000b2c
 800362c:	0800cfbc 	.word	0x0800cfbc
 8003630:	20000b48 	.word	0x20000b48
 8003634:	0800c8e4 	.word	0x0800c8e4
 8003638:	0800c8f8 	.word	0x0800c8f8
 800363c:	0800c944 	.word	0x0800c944
 8003640:	0800c958 	.word	0x0800c958
 8003644:	20000b4b 	.word	0x20000b4b
 8003648:	0800cfd0 	.word	0x0800cfd0
 800364c:	20000b4a 	.word	0x20000b4a
			} else if(dilSecim == 1) {
 8003650:	4b71      	ldr	r3, [pc, #452]	; (8003818 <menu+0x3048>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d104      	bne.n	8003662 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003658:	4a70      	ldr	r2, [pc, #448]	; (800381c <menu+0x304c>)
 800365a:	2101      	movs	r1, #1
 800365c:	2002      	movs	r0, #2
 800365e:	f7fd f856 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003662:	2102      	movs	r1, #2
 8003664:	486e      	ldr	r0, [pc, #440]	; (8003820 <menu+0x3050>)
 8003666:	f005 fa0f 	bl	8008a88 <HAL_GPIO_ReadPin>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d115      	bne.n	800369c <menu+0x2ecc>
 8003670:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <menu+0x3054>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00e      	beq.n	800369c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800367e:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <menu+0x3058>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4b68      	ldr	r3, [pc, #416]	; (8003828 <menu+0x3058>)
 8003688:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800368a:	4b67      	ldr	r3, [pc, #412]	; (8003828 <menu+0x3058>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d902      	bls.n	8003698 <menu+0x2ec8>
				demoMode = 0;
 8003692:	4b65      	ldr	r3, [pc, #404]	; (8003828 <menu+0x3058>)
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003698:	f001 fc4c 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800369c:	2104      	movs	r1, #4
 800369e:	4860      	ldr	r0, [pc, #384]	; (8003820 <menu+0x3050>)
 80036a0:	f005 f9f2 	bl	8008a88 <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d115      	bne.n	80036d6 <menu+0x2f06>
 80036aa:	4b5e      	ldr	r3, [pc, #376]	; (8003824 <menu+0x3054>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	f083 0301 	eor.w	r3, r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <menu+0x2f06>
			demoMode = demoMode - 1;
 80036b8:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <menu+0x3058>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	3b01      	subs	r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <menu+0x3058>)
 80036c2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80036c4:	4b58      	ldr	r3, [pc, #352]	; (8003828 <menu+0x3058>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <menu+0x2f02>
		   		demoMode = 1;
 80036cc:	4b56      	ldr	r3, [pc, #344]	; (8003828 <menu+0x3058>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036d2:	f001 fc2f 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036d6:	2108      	movs	r1, #8
 80036d8:	4851      	ldr	r0, [pc, #324]	; (8003820 <menu+0x3050>)
 80036da:	f005 f9d5 	bl	8008a88 <HAL_GPIO_ReadPin>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10d      	bne.n	8003700 <menu+0x2f30>
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <menu+0x3054>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	f083 0301 	eor.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <menu+0x2f30>
			eepromData[26] = demoMode;
 80036f2:	4b4d      	ldr	r3, [pc, #308]	; (8003828 <menu+0x3058>)
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	4b4d      	ldr	r3, [pc, #308]	; (800382c <menu+0x305c>)
 80036f8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80036fa:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <menu+0x3060>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <menu+0x3064>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b1d      	cmp	r3, #29
 8003706:	f040 8132 	bne.w	800396e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800370a:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <menu+0x3068>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d113      	bne.n	800373a <menu+0x2f6a>
 8003712:	4b4a      	ldr	r3, [pc, #296]	; (800383c <menu+0x306c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10f      	bne.n	800373a <menu+0x2f6a>
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <menu+0x3070>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <menu+0x2f6a>
 8003722:	4b48      	ldr	r3, [pc, #288]	; (8003844 <menu+0x3074>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d107      	bne.n	800373a <menu+0x2f6a>
 800372a:	4b47      	ldr	r3, [pc, #284]	; (8003848 <menu+0x3078>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <menu+0x307c>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e002      	b.n	8003740 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <menu+0x307c>)
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003740:	4b43      	ldr	r3, [pc, #268]	; (8003850 <menu+0x3080>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d154      	bne.n	80037f2 <menu+0x3022>
			if(dilSecim == 0) {
 8003748:	4b33      	ldr	r3, [pc, #204]	; (8003818 <menu+0x3048>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003750:	4a40      	ldr	r2, [pc, #256]	; (8003854 <menu+0x3084>)
 8003752:	2101      	movs	r1, #1
 8003754:	2001      	movs	r0, #1
 8003756:	f7fc ffda 	bl	800070e <lcd_print>
 800375a:	e008      	b.n	800376e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <menu+0x3048>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d104      	bne.n	800376e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8003764:	4a3c      	ldr	r2, [pc, #240]	; (8003858 <menu+0x3088>)
 8003766:	2101      	movs	r1, #1
 8003768:	2001      	movs	r0, #1
 800376a:	f7fc ffd0 	bl	800070e <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <menu+0x3078>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	220a      	movs	r2, #10
 8003774:	4939      	ldr	r1, [pc, #228]	; (800385c <menu+0x308c>)
 8003776:	4618      	mov	r0, r3
 8003778:	f008 f9b2 	bl	800bae0 <itoa>
			lcd_print(2, 12, snum);
 800377c:	4a37      	ldr	r2, [pc, #220]	; (800385c <menu+0x308c>)
 800377e:	210c      	movs	r1, #12
 8003780:	2002      	movs	r0, #2
 8003782:	f7fc ffc4 	bl	800070e <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <menu+0x3074>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	220a      	movs	r2, #10
 800378c:	4933      	ldr	r1, [pc, #204]	; (800385c <menu+0x308c>)
 800378e:	4618      	mov	r0, r3
 8003790:	f008 f9a6 	bl	800bae0 <itoa>
			lcd_print(2, 13, snum);
 8003794:	4a31      	ldr	r2, [pc, #196]	; (800385c <menu+0x308c>)
 8003796:	210d      	movs	r1, #13
 8003798:	2002      	movs	r0, #2
 800379a:	f7fc ffb8 	bl	800070e <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <menu+0x3070>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	220a      	movs	r2, #10
 80037a4:	492d      	ldr	r1, [pc, #180]	; (800385c <menu+0x308c>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	f008 f99a 	bl	800bae0 <itoa>
			lcd_print(2, 14, snum);
 80037ac:	4a2b      	ldr	r2, [pc, #172]	; (800385c <menu+0x308c>)
 80037ae:	210e      	movs	r1, #14
 80037b0:	2002      	movs	r0, #2
 80037b2:	f7fc ffac 	bl	800070e <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80037b6:	4b21      	ldr	r3, [pc, #132]	; (800383c <menu+0x306c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	220a      	movs	r2, #10
 80037bc:	4927      	ldr	r1, [pc, #156]	; (800385c <menu+0x308c>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f008 f98e 	bl	800bae0 <itoa>
			lcd_print(2, 15, snum);
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <menu+0x308c>)
 80037c6:	210f      	movs	r1, #15
 80037c8:	2002      	movs	r0, #2
 80037ca:	f7fc ffa0 	bl	800070e <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <menu+0x3068>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	220a      	movs	r2, #10
 80037d4:	4921      	ldr	r1, [pc, #132]	; (800385c <menu+0x308c>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	f008 f982 	bl	800bae0 <itoa>
			lcd_print(2, 16, snum);
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <menu+0x308c>)
 80037de:	2110      	movs	r1, #16
 80037e0:	2002      	movs	r0, #2
 80037e2:	f7fc ff94 	bl	800070e <lcd_print>

			lcd_print(2, 1, "           ");
 80037e6:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <menu+0x3090>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	2002      	movs	r0, #2
 80037ec:	f7fc ff8f 	bl	800070e <lcd_print>
 80037f0:	e048      	b.n	8003884 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80037f2:	4b17      	ldr	r3, [pc, #92]	; (8003850 <menu+0x3080>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d144      	bne.n	8003884 <menu+0x30b4>
			if(dilSecim == 0) {
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <menu+0x3048>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d132      	bne.n	8003868 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003802:	4a14      	ldr	r2, [pc, #80]	; (8003854 <menu+0x3084>)
 8003804:	2101      	movs	r1, #1
 8003806:	2001      	movs	r0, #1
 8003808:	f7fc ff81 	bl	800070e <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <menu+0x3094>)
 800380e:	2101      	movs	r1, #1
 8003810:	2002      	movs	r0, #2
 8003812:	f7fc ff7c 	bl	800070e <lcd_print>
 8003816:	e035      	b.n	8003884 <menu+0x30b4>
 8003818:	20000b4c 	.word	0x20000b4c
 800381c:	0800c958 	.word	0x0800c958
 8003820:	40010800 	.word	0x40010800
 8003824:	20000b5a 	.word	0x20000b5a
 8003828:	20000b4a 	.word	0x20000b4a
 800382c:	20000ac0 	.word	0x20000ac0
 8003830:	20000b57 	.word	0x20000b57
 8003834:	20000b2c 	.word	0x20000b2c
 8003838:	20000b29 	.word	0x20000b29
 800383c:	20000b2a 	.word	0x20000b2a
 8003840:	20000947 	.word	0x20000947
 8003844:	20000948 	.word	0x20000948
 8003848:	20000b2b 	.word	0x20000b2b
 800384c:	20000b6c 	.word	0x20000b6c
 8003850:	20000b4b 	.word	0x20000b4b
 8003854:	0800cfe0 	.word	0x0800cfe0
 8003858:	0800cff4 	.word	0x0800cff4
 800385c:	20000b00 	.word	0x20000b00
 8003860:	0800d008 	.word	0x0800d008
 8003864:	0800d014 	.word	0x0800d014
			} else if(dilSecim == 1) {
 8003868:	4b95      	ldr	r3, [pc, #596]	; (8003ac0 <menu+0x32f0>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d109      	bne.n	8003884 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003870:	4a94      	ldr	r2, [pc, #592]	; (8003ac4 <menu+0x32f4>)
 8003872:	2101      	movs	r1, #1
 8003874:	2001      	movs	r0, #1
 8003876:	f7fc ff4a 	bl	800070e <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800387a:	4a93      	ldr	r2, [pc, #588]	; (8003ac8 <menu+0x32f8>)
 800387c:	2101      	movs	r1, #1
 800387e:	2002      	movs	r0, #2
 8003880:	f7fc ff45 	bl	800070e <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003884:	2102      	movs	r1, #2
 8003886:	4891      	ldr	r0, [pc, #580]	; (8003acc <menu+0x32fc>)
 8003888:	f005 f8fe 	bl	8008a88 <HAL_GPIO_ReadPin>
 800388c:	4603      	mov	r3, r0
 800388e:	2b01      	cmp	r3, #1
 8003890:	d119      	bne.n	80038c6 <menu+0x30f6>
 8003892:	4b8f      	ldr	r3, [pc, #572]	; (8003ad0 <menu+0x3300>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	f083 0301 	eor.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <menu+0x30f6>
 80038a0:	4b8c      	ldr	r3, [pc, #560]	; (8003ad4 <menu+0x3304>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80038a8:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <menu+0x3308>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b89      	ldr	r3, [pc, #548]	; (8003ad8 <menu+0x3308>)
 80038b2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80038b4:	4b88      	ldr	r3, [pc, #544]	; (8003ad8 <menu+0x3308>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d902      	bls.n	80038c2 <menu+0x30f2>
				calismaSayModu = 0;
 80038bc:	4b86      	ldr	r3, [pc, #536]	; (8003ad8 <menu+0x3308>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c2:	f001 fb37 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80038c6:	2104      	movs	r1, #4
 80038c8:	4880      	ldr	r0, [pc, #512]	; (8003acc <menu+0x32fc>)
 80038ca:	f005 f8dd 	bl	8008a88 <HAL_GPIO_ReadPin>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d119      	bne.n	8003908 <menu+0x3138>
 80038d4:	4b7e      	ldr	r3, [pc, #504]	; (8003ad0 <menu+0x3300>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <menu+0x3138>
 80038e2:	4b7c      	ldr	r3, [pc, #496]	; (8003ad4 <menu+0x3304>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80038ea:	4b7b      	ldr	r3, [pc, #492]	; (8003ad8 <menu+0x3308>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4b79      	ldr	r3, [pc, #484]	; (8003ad8 <menu+0x3308>)
 80038f4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80038f6:	4b78      	ldr	r3, [pc, #480]	; (8003ad8 <menu+0x3308>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <menu+0x3134>
		   		calismaSayModu = 1;
 80038fe:	4b76      	ldr	r3, [pc, #472]	; (8003ad8 <menu+0x3308>)
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003904:	f001 fb16 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003908:	2108      	movs	r1, #8
 800390a:	4870      	ldr	r0, [pc, #448]	; (8003acc <menu+0x32fc>)
 800390c:	f005 f8bc 	bl	8008a88 <HAL_GPIO_ReadPin>
 8003910:	4603      	mov	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d12b      	bne.n	800396e <menu+0x319e>
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <menu+0x3300>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	f083 0301 	eor.w	r3, r3, #1
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d024      	beq.n	800396e <menu+0x319e>
			eepromData[32] = 0;
 8003924:	4b6d      	ldr	r3, [pc, #436]	; (8003adc <menu+0x330c>)
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800392c:	4b6b      	ldr	r3, [pc, #428]	; (8003adc <menu+0x330c>)
 800392e:	2200      	movs	r2, #0
 8003930:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8003932:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <menu+0x330c>)
 8003934:	2200      	movs	r2, #0
 8003936:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003938:	4b68      	ldr	r3, [pc, #416]	; (8003adc <menu+0x330c>)
 800393a:	2200      	movs	r2, #0
 800393c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800393e:	4b67      	ldr	r3, [pc, #412]	; (8003adc <menu+0x330c>)
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003944:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <menu+0x3310>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800394a:	4b66      	ldr	r3, [pc, #408]	; (8003ae4 <menu+0x3314>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003950:	4b65      	ldr	r3, [pc, #404]	; (8003ae8 <menu+0x3318>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <menu+0x331c>)
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800395c:	4b64      	ldr	r3, [pc, #400]	; (8003af0 <menu+0x3320>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003962:	4b5d      	ldr	r3, [pc, #372]	; (8003ad8 <menu+0x3308>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003968:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <menu+0x3324>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800396e:	4b62      	ldr	r3, [pc, #392]	; (8003af8 <menu+0x3328>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b1e      	cmp	r3, #30
 8003974:	d16f      	bne.n	8003a56 <menu+0x3286>
		calismaSayModu = 0;
 8003976:	4b58      	ldr	r3, [pc, #352]	; (8003ad8 <menu+0x3308>)
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800397c:	4b50      	ldr	r3, [pc, #320]	; (8003ac0 <menu+0x32f0>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003984:	4a5d      	ldr	r2, [pc, #372]	; (8003afc <menu+0x332c>)
 8003986:	2101      	movs	r1, #1
 8003988:	2001      	movs	r0, #1
 800398a:	f7fc fec0 	bl	800070e <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800398e:	4a5c      	ldr	r2, [pc, #368]	; (8003b00 <menu+0x3330>)
 8003990:	2101      	movs	r1, #1
 8003992:	2002      	movs	r0, #2
 8003994:	f7fc febb 	bl	800070e <lcd_print>
 8003998:	e00d      	b.n	80039b6 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800399a:	4b49      	ldr	r3, [pc, #292]	; (8003ac0 <menu+0x32f0>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d109      	bne.n	80039b6 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80039a2:	4a58      	ldr	r2, [pc, #352]	; (8003b04 <menu+0x3334>)
 80039a4:	2101      	movs	r1, #1
 80039a6:	2001      	movs	r0, #1
 80039a8:	f7fc feb1 	bl	800070e <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80039ac:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <menu+0x3338>)
 80039ae:	2101      	movs	r1, #1
 80039b0:	2002      	movs	r0, #2
 80039b2:	f7fc feac 	bl	800070e <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039b6:	2102      	movs	r1, #2
 80039b8:	4844      	ldr	r0, [pc, #272]	; (8003acc <menu+0x32fc>)
 80039ba:	f005 f865 	bl	8008a88 <HAL_GPIO_ReadPin>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d115      	bne.n	80039f0 <menu+0x3220>
 80039c4:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <menu+0x3300>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	f083 0301 	eor.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00e      	beq.n	80039f0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80039d2:	4b3b      	ldr	r3, [pc, #236]	; (8003ac0 <menu+0x32f0>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b39      	ldr	r3, [pc, #228]	; (8003ac0 <menu+0x32f0>)
 80039dc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80039de:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <menu+0x32f0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d902      	bls.n	80039ec <menu+0x321c>
				dilSecim = 0;
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <menu+0x32f0>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80039ec:	f001 faa2 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f0:	2104      	movs	r1, #4
 80039f2:	4836      	ldr	r0, [pc, #216]	; (8003acc <menu+0x32fc>)
 80039f4:	f005 f848 	bl	8008a88 <HAL_GPIO_ReadPin>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d115      	bne.n	8003a2a <menu+0x325a>
 80039fe:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <menu+0x3300>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	f083 0301 	eor.w	r3, r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00e      	beq.n	8003a2a <menu+0x325a>
			dilSecim = dilSecim - 1;
 8003a0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <menu+0x32f0>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <menu+0x32f0>)
 8003a16:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003a18:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <menu+0x32f0>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <menu+0x3256>
		   		dilSecim = 1;
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <menu+0x32f0>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a26:	f001 fa85 	bl	8004f34 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a2a:	2108      	movs	r1, #8
 8003a2c:	4827      	ldr	r0, [pc, #156]	; (8003acc <menu+0x32fc>)
 8003a2e:	f005 f82b 	bl	8008a88 <HAL_GPIO_ReadPin>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10e      	bne.n	8003a56 <menu+0x3286>
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <menu+0x3300>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	f083 0301 	eor.w	r3, r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <menu+0x3286>
			eepromData[33] = dilSecim;
 8003a46:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <menu+0x32f0>)
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	4b24      	ldr	r3, [pc, #144]	; (8003adc <menu+0x330c>)
 8003a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <menu+0x3324>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003a56:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <menu+0x3328>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b1f      	cmp	r3, #31
 8003a5c:	d12e      	bne.n	8003abc <menu+0x32ec>
		if(dilSecim == 0) {
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <menu+0x32f0>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003a66:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <menu+0x333c>)
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f7fc fe4f 	bl	800070e <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003a70:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <menu+0x3340>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	2002      	movs	r0, #2
 8003a76:	f7fc fe4a 	bl	800070e <lcd_print>
 8003a7a:	e00d      	b.n	8003a98 <menu+0x32c8>
		} else if(dilSecim == 1) {
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <menu+0x32f0>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d109      	bne.n	8003a98 <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003a84:	4a23      	ldr	r2, [pc, #140]	; (8003b14 <menu+0x3344>)
 8003a86:	2101      	movs	r1, #1
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f7fc fe40 	bl	800070e <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8003a8e:	4a22      	ldr	r2, [pc, #136]	; (8003b18 <menu+0x3348>)
 8003a90:	2101      	movs	r1, #1
 8003a92:	2002      	movs	r0, #2
 8003a94:	f7fc fe3b 	bl	800070e <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003a98:	2108      	movs	r1, #8
 8003a9a:	480c      	ldr	r0, [pc, #48]	; (8003acc <menu+0x32fc>)
 8003a9c:	f004 fff4 	bl	8008a88 <HAL_GPIO_ReadPin>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10a      	bne.n	8003abc <menu+0x32ec>
			menuGiris = 0;
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <menu+0x334c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003aac:	f7fc fe44 	bl	8000738 <lcd_clear>
			HAL_Delay(500);
 8003ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ab4:	f004 fa18 	bl	8007ee8 <HAL_Delay>
			NVIC_SystemReset();
 8003ab8:	f7fc fe5a 	bl	8000770 <__NVIC_SystemReset>
		}
	}
}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000b4c 	.word	0x20000b4c
 8003ac4:	0800cff4 	.word	0x0800cff4
 8003ac8:	0800d028 	.word	0x0800d028
 8003acc:	40010800 	.word	0x40010800
 8003ad0:	20000b5a 	.word	0x20000b5a
 8003ad4:	20000b6c 	.word	0x20000b6c
 8003ad8:	20000b4b 	.word	0x20000b4b
 8003adc:	20000ac0 	.word	0x20000ac0
 8003ae0:	20000b2b 	.word	0x20000b2b
 8003ae4:	20000948 	.word	0x20000948
 8003ae8:	20000947 	.word	0x20000947
 8003aec:	20000b2a 	.word	0x20000b2a
 8003af0:	20000b29 	.word	0x20000b29
 8003af4:	20000b57 	.word	0x20000b57
 8003af8:	20000b2c 	.word	0x20000b2c
 8003afc:	0800d03c 	.word	0x0800d03c
 8003b00:	0800d050 	.word	0x0800d050
 8003b04:	0800d064 	.word	0x0800d064
 8003b08:	0800d078 	.word	0x0800d078
 8003b0c:	0800d08c 	.word	0x0800d08c
 8003b10:	0800d0a0 	.word	0x0800d0a0
 8003b14:	0800d0b4 	.word	0x0800d0b4
 8003b18:	0800d0c8 	.word	0x0800d0c8
 8003b1c:	20000b49 	.word	0x20000b49

08003b20 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8003b2a:	48a9      	ldr	r0, [pc, #676]	; (8003dd0 <loadMenuTexts+0x2b0>)
 8003b2c:	f7fc fe36 	bl	800079c <copyText>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4aa8      	ldr	r2, [pc, #672]	; (8003dd4 <loadMenuTexts+0x2b4>)
 8003b34:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8003b36:	48a8      	ldr	r0, [pc, #672]	; (8003dd8 <loadMenuTexts+0x2b8>)
 8003b38:	f7fc fe30 	bl	800079c <copyText>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4aa7      	ldr	r2, [pc, #668]	; (8003ddc <loadMenuTexts+0x2bc>)
 8003b40:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003b42:	48a7      	ldr	r0, [pc, #668]	; (8003de0 <loadMenuTexts+0x2c0>)
 8003b44:	f7fc fe2a 	bl	800079c <copyText>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4aa6      	ldr	r2, [pc, #664]	; (8003de4 <loadMenuTexts+0x2c4>)
 8003b4c:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8003b4e:	48a6      	ldr	r0, [pc, #664]	; (8003de8 <loadMenuTexts+0x2c8>)
 8003b50:	f7fc fe24 	bl	800079c <copyText>
 8003b54:	4603      	mov	r3, r0
 8003b56:	4aa5      	ldr	r2, [pc, #660]	; (8003dec <loadMenuTexts+0x2cc>)
 8003b58:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8003b5a:	48a5      	ldr	r0, [pc, #660]	; (8003df0 <loadMenuTexts+0x2d0>)
 8003b5c:	f7fc fe1e 	bl	800079c <copyText>
 8003b60:	4603      	mov	r3, r0
 8003b62:	4aa4      	ldr	r2, [pc, #656]	; (8003df4 <loadMenuTexts+0x2d4>)
 8003b64:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003b66:	48a4      	ldr	r0, [pc, #656]	; (8003df8 <loadMenuTexts+0x2d8>)
 8003b68:	f7fc fe18 	bl	800079c <copyText>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4aa3      	ldr	r2, [pc, #652]	; (8003dfc <loadMenuTexts+0x2dc>)
 8003b70:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003b72:	48a3      	ldr	r0, [pc, #652]	; (8003e00 <loadMenuTexts+0x2e0>)
 8003b74:	f7fc fe12 	bl	800079c <copyText>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4aa2      	ldr	r2, [pc, #648]	; (8003e04 <loadMenuTexts+0x2e4>)
 8003b7c:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 82d1 	bne.w	8004128 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003b86:	48a0      	ldr	r0, [pc, #640]	; (8003e08 <loadMenuTexts+0x2e8>)
 8003b88:	f7fc fe08 	bl	800079c <copyText>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4a9f      	ldr	r2, [pc, #636]	; (8003e0c <loadMenuTexts+0x2ec>)
 8003b90:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003b92:	489f      	ldr	r0, [pc, #636]	; (8003e10 <loadMenuTexts+0x2f0>)
 8003b94:	f7fc fe02 	bl	800079c <copyText>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4a9e      	ldr	r2, [pc, #632]	; (8003e14 <loadMenuTexts+0x2f4>)
 8003b9c:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8003b9e:	489e      	ldr	r0, [pc, #632]	; (8003e18 <loadMenuTexts+0x2f8>)
 8003ba0:	f7fc fdfc 	bl	800079c <copyText>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a9d      	ldr	r2, [pc, #628]	; (8003e1c <loadMenuTexts+0x2fc>)
 8003ba8:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8003baa:	489d      	ldr	r0, [pc, #628]	; (8003e20 <loadMenuTexts+0x300>)
 8003bac:	f7fc fdf6 	bl	800079c <copyText>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4a9c      	ldr	r2, [pc, #624]	; (8003e24 <loadMenuTexts+0x304>)
 8003bb4:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003bb6:	489c      	ldr	r0, [pc, #624]	; (8003e28 <loadMenuTexts+0x308>)
 8003bb8:	f7fc fdf0 	bl	800079c <copyText>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4a9b      	ldr	r2, [pc, #620]	; (8003e2c <loadMenuTexts+0x30c>)
 8003bc0:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003bc2:	489b      	ldr	r0, [pc, #620]	; (8003e30 <loadMenuTexts+0x310>)
 8003bc4:	f7fc fdea 	bl	800079c <copyText>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4a9a      	ldr	r2, [pc, #616]	; (8003e34 <loadMenuTexts+0x314>)
 8003bcc:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8003bce:	489a      	ldr	r0, [pc, #616]	; (8003e38 <loadMenuTexts+0x318>)
 8003bd0:	f7fc fde4 	bl	800079c <copyText>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4a99      	ldr	r2, [pc, #612]	; (8003e3c <loadMenuTexts+0x31c>)
 8003bd8:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8003bda:	4899      	ldr	r0, [pc, #612]	; (8003e40 <loadMenuTexts+0x320>)
 8003bdc:	f7fc fdde 	bl	800079c <copyText>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4a98      	ldr	r2, [pc, #608]	; (8003e44 <loadMenuTexts+0x324>)
 8003be4:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003be6:	4898      	ldr	r0, [pc, #608]	; (8003e48 <loadMenuTexts+0x328>)
 8003be8:	f7fc fdd8 	bl	800079c <copyText>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4a97      	ldr	r2, [pc, #604]	; (8003e4c <loadMenuTexts+0x32c>)
 8003bf0:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8003bf2:	4897      	ldr	r0, [pc, #604]	; (8003e50 <loadMenuTexts+0x330>)
 8003bf4:	f7fc fdd2 	bl	800079c <copyText>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4a96      	ldr	r2, [pc, #600]	; (8003e54 <loadMenuTexts+0x334>)
 8003bfc:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8003bfe:	4896      	ldr	r0, [pc, #600]	; (8003e58 <loadMenuTexts+0x338>)
 8003c00:	f7fc fdcc 	bl	800079c <copyText>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4a95      	ldr	r2, [pc, #596]	; (8003e5c <loadMenuTexts+0x33c>)
 8003c08:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8003c0a:	4895      	ldr	r0, [pc, #596]	; (8003e60 <loadMenuTexts+0x340>)
 8003c0c:	f7fc fdc6 	bl	800079c <copyText>
 8003c10:	4603      	mov	r3, r0
 8003c12:	4a94      	ldr	r2, [pc, #592]	; (8003e64 <loadMenuTexts+0x344>)
 8003c14:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8003c16:	4894      	ldr	r0, [pc, #592]	; (8003e68 <loadMenuTexts+0x348>)
 8003c18:	f7fc fdc0 	bl	800079c <copyText>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4a93      	ldr	r2, [pc, #588]	; (8003e6c <loadMenuTexts+0x34c>)
 8003c20:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8003c22:	4893      	ldr	r0, [pc, #588]	; (8003e70 <loadMenuTexts+0x350>)
 8003c24:	f7fc fdba 	bl	800079c <copyText>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4a92      	ldr	r2, [pc, #584]	; (8003e74 <loadMenuTexts+0x354>)
 8003c2c:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8003c2e:	4892      	ldr	r0, [pc, #584]	; (8003e78 <loadMenuTexts+0x358>)
 8003c30:	f7fc fdb4 	bl	800079c <copyText>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4a91      	ldr	r2, [pc, #580]	; (8003e7c <loadMenuTexts+0x35c>)
 8003c38:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8003c3a:	4891      	ldr	r0, [pc, #580]	; (8003e80 <loadMenuTexts+0x360>)
 8003c3c:	f7fc fdae 	bl	800079c <copyText>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4a90      	ldr	r2, [pc, #576]	; (8003e84 <loadMenuTexts+0x364>)
 8003c44:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003c46:	4890      	ldr	r0, [pc, #576]	; (8003e88 <loadMenuTexts+0x368>)
 8003c48:	f7fc fda8 	bl	800079c <copyText>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a8f      	ldr	r2, [pc, #572]	; (8003e8c <loadMenuTexts+0x36c>)
 8003c50:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003c52:	488f      	ldr	r0, [pc, #572]	; (8003e90 <loadMenuTexts+0x370>)
 8003c54:	f7fc fda2 	bl	800079c <copyText>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a8e      	ldr	r2, [pc, #568]	; (8003e94 <loadMenuTexts+0x374>)
 8003c5c:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003c5e:	488e      	ldr	r0, [pc, #568]	; (8003e98 <loadMenuTexts+0x378>)
 8003c60:	f7fc fd9c 	bl	800079c <copyText>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4a8d      	ldr	r2, [pc, #564]	; (8003e9c <loadMenuTexts+0x37c>)
 8003c68:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003c6a:	488d      	ldr	r0, [pc, #564]	; (8003ea0 <loadMenuTexts+0x380>)
 8003c6c:	f7fc fd96 	bl	800079c <copyText>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a8c      	ldr	r2, [pc, #560]	; (8003ea4 <loadMenuTexts+0x384>)
 8003c74:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003c76:	488c      	ldr	r0, [pc, #560]	; (8003ea8 <loadMenuTexts+0x388>)
 8003c78:	f7fc fd90 	bl	800079c <copyText>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a8b      	ldr	r2, [pc, #556]	; (8003eac <loadMenuTexts+0x38c>)
 8003c80:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003c82:	488b      	ldr	r0, [pc, #556]	; (8003eb0 <loadMenuTexts+0x390>)
 8003c84:	f7fc fd8a 	bl	800079c <copyText>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4a8a      	ldr	r2, [pc, #552]	; (8003eb4 <loadMenuTexts+0x394>)
 8003c8c:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003c8e:	488a      	ldr	r0, [pc, #552]	; (8003eb8 <loadMenuTexts+0x398>)
 8003c90:	f7fc fd84 	bl	800079c <copyText>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4a89      	ldr	r2, [pc, #548]	; (8003ebc <loadMenuTexts+0x39c>)
 8003c98:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003c9a:	4889      	ldr	r0, [pc, #548]	; (8003ec0 <loadMenuTexts+0x3a0>)
 8003c9c:	f7fc fd7e 	bl	800079c <copyText>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4a88      	ldr	r2, [pc, #544]	; (8003ec4 <loadMenuTexts+0x3a4>)
 8003ca4:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003ca6:	4888      	ldr	r0, [pc, #544]	; (8003ec8 <loadMenuTexts+0x3a8>)
 8003ca8:	f7fc fd78 	bl	800079c <copyText>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a87      	ldr	r2, [pc, #540]	; (8003ecc <loadMenuTexts+0x3ac>)
 8003cb0:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003cb2:	4887      	ldr	r0, [pc, #540]	; (8003ed0 <loadMenuTexts+0x3b0>)
 8003cb4:	f7fc fd72 	bl	800079c <copyText>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4a86      	ldr	r2, [pc, #536]	; (8003ed4 <loadMenuTexts+0x3b4>)
 8003cbc:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003cbe:	4886      	ldr	r0, [pc, #536]	; (8003ed8 <loadMenuTexts+0x3b8>)
 8003cc0:	f7fc fd6c 	bl	800079c <copyText>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4a85      	ldr	r2, [pc, #532]	; (8003edc <loadMenuTexts+0x3bc>)
 8003cc8:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003cca:	4885      	ldr	r0, [pc, #532]	; (8003ee0 <loadMenuTexts+0x3c0>)
 8003ccc:	f7fc fd66 	bl	800079c <copyText>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4a84      	ldr	r2, [pc, #528]	; (8003ee4 <loadMenuTexts+0x3c4>)
 8003cd4:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003cd6:	4884      	ldr	r0, [pc, #528]	; (8003ee8 <loadMenuTexts+0x3c8>)
 8003cd8:	f7fc fd60 	bl	800079c <copyText>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4a83      	ldr	r2, [pc, #524]	; (8003eec <loadMenuTexts+0x3cc>)
 8003ce0:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003ce2:	4883      	ldr	r0, [pc, #524]	; (8003ef0 <loadMenuTexts+0x3d0>)
 8003ce4:	f7fc fd5a 	bl	800079c <copyText>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4a82      	ldr	r2, [pc, #520]	; (8003ef4 <loadMenuTexts+0x3d4>)
 8003cec:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003cee:	4882      	ldr	r0, [pc, #520]	; (8003ef8 <loadMenuTexts+0x3d8>)
 8003cf0:	f7fc fd54 	bl	800079c <copyText>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4a81      	ldr	r2, [pc, #516]	; (8003efc <loadMenuTexts+0x3dc>)
 8003cf8:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003cfa:	4881      	ldr	r0, [pc, #516]	; (8003f00 <loadMenuTexts+0x3e0>)
 8003cfc:	f7fc fd4e 	bl	800079c <copyText>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4a80      	ldr	r2, [pc, #512]	; (8003f04 <loadMenuTexts+0x3e4>)
 8003d04:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003d06:	4880      	ldr	r0, [pc, #512]	; (8003f08 <loadMenuTexts+0x3e8>)
 8003d08:	f7fc fd48 	bl	800079c <copyText>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4a7f      	ldr	r2, [pc, #508]	; (8003f0c <loadMenuTexts+0x3ec>)
 8003d10:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003d12:	487f      	ldr	r0, [pc, #508]	; (8003f10 <loadMenuTexts+0x3f0>)
 8003d14:	f7fc fd42 	bl	800079c <copyText>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4a7e      	ldr	r2, [pc, #504]	; (8003f14 <loadMenuTexts+0x3f4>)
 8003d1c:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003d1e:	487e      	ldr	r0, [pc, #504]	; (8003f18 <loadMenuTexts+0x3f8>)
 8003d20:	f7fc fd3c 	bl	800079c <copyText>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4a7d      	ldr	r2, [pc, #500]	; (8003f1c <loadMenuTexts+0x3fc>)
 8003d28:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003d2a:	487d      	ldr	r0, [pc, #500]	; (8003f20 <loadMenuTexts+0x400>)
 8003d2c:	f7fc fd36 	bl	800079c <copyText>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4a7c      	ldr	r2, [pc, #496]	; (8003f24 <loadMenuTexts+0x404>)
 8003d34:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003d36:	487c      	ldr	r0, [pc, #496]	; (8003f28 <loadMenuTexts+0x408>)
 8003d38:	f7fc fd30 	bl	800079c <copyText>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4a7b      	ldr	r2, [pc, #492]	; (8003f2c <loadMenuTexts+0x40c>)
 8003d40:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003d42:	487b      	ldr	r0, [pc, #492]	; (8003f30 <loadMenuTexts+0x410>)
 8003d44:	f7fc fd2a 	bl	800079c <copyText>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4a7a      	ldr	r2, [pc, #488]	; (8003f34 <loadMenuTexts+0x414>)
 8003d4c:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003d4e:	487a      	ldr	r0, [pc, #488]	; (8003f38 <loadMenuTexts+0x418>)
 8003d50:	f7fc fd24 	bl	800079c <copyText>
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a79      	ldr	r2, [pc, #484]	; (8003f3c <loadMenuTexts+0x41c>)
 8003d58:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003d5a:	4879      	ldr	r0, [pc, #484]	; (8003f40 <loadMenuTexts+0x420>)
 8003d5c:	f7fc fd1e 	bl	800079c <copyText>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4a78      	ldr	r2, [pc, #480]	; (8003f44 <loadMenuTexts+0x424>)
 8003d64:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003d66:	4878      	ldr	r0, [pc, #480]	; (8003f48 <loadMenuTexts+0x428>)
 8003d68:	f7fc fd18 	bl	800079c <copyText>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4a77      	ldr	r2, [pc, #476]	; (8003f4c <loadMenuTexts+0x42c>)
 8003d70:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003d72:	4877      	ldr	r0, [pc, #476]	; (8003f50 <loadMenuTexts+0x430>)
 8003d74:	f7fc fd12 	bl	800079c <copyText>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4a76      	ldr	r2, [pc, #472]	; (8003f54 <loadMenuTexts+0x434>)
 8003d7c:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003d7e:	4876      	ldr	r0, [pc, #472]	; (8003f58 <loadMenuTexts+0x438>)
 8003d80:	f7fc fd0c 	bl	800079c <copyText>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4a75      	ldr	r2, [pc, #468]	; (8003f5c <loadMenuTexts+0x43c>)
 8003d88:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003d8a:	4875      	ldr	r0, [pc, #468]	; (8003f60 <loadMenuTexts+0x440>)
 8003d8c:	f7fc fd06 	bl	800079c <copyText>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4a74      	ldr	r2, [pc, #464]	; (8003f64 <loadMenuTexts+0x444>)
 8003d94:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003d96:	4874      	ldr	r0, [pc, #464]	; (8003f68 <loadMenuTexts+0x448>)
 8003d98:	f7fc fd00 	bl	800079c <copyText>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4a73      	ldr	r2, [pc, #460]	; (8003f6c <loadMenuTexts+0x44c>)
 8003da0:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003da2:	4873      	ldr	r0, [pc, #460]	; (8003f70 <loadMenuTexts+0x450>)
 8003da4:	f7fc fcfa 	bl	800079c <copyText>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <loadMenuTexts+0x454>)
 8003dac:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003dae:	4872      	ldr	r0, [pc, #456]	; (8003f78 <loadMenuTexts+0x458>)
 8003db0:	f7fc fcf4 	bl	800079c <copyText>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4a71      	ldr	r2, [pc, #452]	; (8003f7c <loadMenuTexts+0x45c>)
 8003db8:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003dba:	4871      	ldr	r0, [pc, #452]	; (8003f80 <loadMenuTexts+0x460>)
 8003dbc:	f7fc fcee 	bl	800079c <copyText>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4a70      	ldr	r2, [pc, #448]	; (8003f84 <loadMenuTexts+0x464>)
 8003dc4:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003dc6:	4870      	ldr	r0, [pc, #448]	; (8003f88 <loadMenuTexts+0x468>)
 8003dc8:	f7fc fce8 	bl	800079c <copyText>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	e0dd      	b.n	8003f8c <loadMenuTexts+0x46c>
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	20000b90 	.word	0x20000b90
 8003dd8:	20000010 	.word	0x20000010
 8003ddc:	20000b94 	.word	0x20000b94
 8003de0:	20000020 	.word	0x20000020
 8003de4:	20000bec 	.word	0x20000bec
 8003de8:	20000030 	.word	0x20000030
 8003dec:	20000c1c 	.word	0x20000c1c
 8003df0:	20000040 	.word	0x20000040
 8003df4:	20000c24 	.word	0x20000c24
 8003df8:	20000050 	.word	0x20000050
 8003dfc:	20000c9c 	.word	0x20000c9c
 8003e00:	20000060 	.word	0x20000060
 8003e04:	20000ca0 	.word	0x20000ca0
 8003e08:	20000070 	.word	0x20000070
 8003e0c:	20000b98 	.word	0x20000b98
 8003e10:	20000080 	.word	0x20000080
 8003e14:	20000b9c 	.word	0x20000b9c
 8003e18:	20000090 	.word	0x20000090
 8003e1c:	20000ba0 	.word	0x20000ba0
 8003e20:	200000a0 	.word	0x200000a0
 8003e24:	20000ba4 	.word	0x20000ba4
 8003e28:	200000b0 	.word	0x200000b0
 8003e2c:	20000ba8 	.word	0x20000ba8
 8003e30:	200000c0 	.word	0x200000c0
 8003e34:	20000bac 	.word	0x20000bac
 8003e38:	200000d0 	.word	0x200000d0
 8003e3c:	20000bb0 	.word	0x20000bb0
 8003e40:	200000e0 	.word	0x200000e0
 8003e44:	20000bb4 	.word	0x20000bb4
 8003e48:	200000f0 	.word	0x200000f0
 8003e4c:	20000bb8 	.word	0x20000bb8
 8003e50:	20000100 	.word	0x20000100
 8003e54:	20000bbc 	.word	0x20000bbc
 8003e58:	20000110 	.word	0x20000110
 8003e5c:	20000bc0 	.word	0x20000bc0
 8003e60:	20000120 	.word	0x20000120
 8003e64:	20000bc4 	.word	0x20000bc4
 8003e68:	20000130 	.word	0x20000130
 8003e6c:	20000bc8 	.word	0x20000bc8
 8003e70:	20000140 	.word	0x20000140
 8003e74:	20000bcc 	.word	0x20000bcc
 8003e78:	20000150 	.word	0x20000150
 8003e7c:	20000bd0 	.word	0x20000bd0
 8003e80:	20000160 	.word	0x20000160
 8003e84:	20000bd4 	.word	0x20000bd4
 8003e88:	20000170 	.word	0x20000170
 8003e8c:	20000bd8 	.word	0x20000bd8
 8003e90:	20000180 	.word	0x20000180
 8003e94:	20000bdc 	.word	0x20000bdc
 8003e98:	20000190 	.word	0x20000190
 8003e9c:	20000be0 	.word	0x20000be0
 8003ea0:	200001a0 	.word	0x200001a0
 8003ea4:	20000be4 	.word	0x20000be4
 8003ea8:	200001b0 	.word	0x200001b0
 8003eac:	20000be8 	.word	0x20000be8
 8003eb0:	200001c0 	.word	0x200001c0
 8003eb4:	20000bf0 	.word	0x20000bf0
 8003eb8:	200001d0 	.word	0x200001d0
 8003ebc:	20000bf4 	.word	0x20000bf4
 8003ec0:	200001e0 	.word	0x200001e0
 8003ec4:	20000bf8 	.word	0x20000bf8
 8003ec8:	200001f0 	.word	0x200001f0
 8003ecc:	20000bfc 	.word	0x20000bfc
 8003ed0:	20000200 	.word	0x20000200
 8003ed4:	20000c00 	.word	0x20000c00
 8003ed8:	20000210 	.word	0x20000210
 8003edc:	20000c04 	.word	0x20000c04
 8003ee0:	20000220 	.word	0x20000220
 8003ee4:	20000c08 	.word	0x20000c08
 8003ee8:	20000230 	.word	0x20000230
 8003eec:	20000c0c 	.word	0x20000c0c
 8003ef0:	20000240 	.word	0x20000240
 8003ef4:	20000c10 	.word	0x20000c10
 8003ef8:	20000250 	.word	0x20000250
 8003efc:	20000c14 	.word	0x20000c14
 8003f00:	20000260 	.word	0x20000260
 8003f04:	20000c18 	.word	0x20000c18
 8003f08:	20000270 	.word	0x20000270
 8003f0c:	20000c20 	.word	0x20000c20
 8003f10:	20000280 	.word	0x20000280
 8003f14:	20000c28 	.word	0x20000c28
 8003f18:	20000290 	.word	0x20000290
 8003f1c:	20000c2c 	.word	0x20000c2c
 8003f20:	200002a0 	.word	0x200002a0
 8003f24:	20000c30 	.word	0x20000c30
 8003f28:	200002b0 	.word	0x200002b0
 8003f2c:	20000c34 	.word	0x20000c34
 8003f30:	200002c0 	.word	0x200002c0
 8003f34:	20000c38 	.word	0x20000c38
 8003f38:	200002d0 	.word	0x200002d0
 8003f3c:	20000c3c 	.word	0x20000c3c
 8003f40:	200002e0 	.word	0x200002e0
 8003f44:	20000c40 	.word	0x20000c40
 8003f48:	200002f0 	.word	0x200002f0
 8003f4c:	20000c44 	.word	0x20000c44
 8003f50:	20000300 	.word	0x20000300
 8003f54:	20000c48 	.word	0x20000c48
 8003f58:	20000310 	.word	0x20000310
 8003f5c:	20000c4c 	.word	0x20000c4c
 8003f60:	20000320 	.word	0x20000320
 8003f64:	20000c50 	.word	0x20000c50
 8003f68:	20000330 	.word	0x20000330
 8003f6c:	20000c54 	.word	0x20000c54
 8003f70:	20000340 	.word	0x20000340
 8003f74:	20000c58 	.word	0x20000c58
 8003f78:	20000350 	.word	0x20000350
 8003f7c:	20000c5c 	.word	0x20000c5c
 8003f80:	20000360 	.word	0x20000360
 8003f84:	20000c60 	.word	0x20000c60
 8003f88:	20000370 	.word	0x20000370
 8003f8c:	4a3d      	ldr	r2, [pc, #244]	; (8004084 <loadMenuTexts+0x564>)
 8003f8e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003f90:	483d      	ldr	r0, [pc, #244]	; (8004088 <loadMenuTexts+0x568>)
 8003f92:	f7fc fc03 	bl	800079c <copyText>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a3c      	ldr	r2, [pc, #240]	; (800408c <loadMenuTexts+0x56c>)
 8003f9a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003f9c:	483c      	ldr	r0, [pc, #240]	; (8004090 <loadMenuTexts+0x570>)
 8003f9e:	f7fc fbfd 	bl	800079c <copyText>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a3b      	ldr	r2, [pc, #236]	; (8004094 <loadMenuTexts+0x574>)
 8003fa6:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003fa8:	483b      	ldr	r0, [pc, #236]	; (8004098 <loadMenuTexts+0x578>)
 8003faa:	f7fc fbf7 	bl	800079c <copyText>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	; (800409c <loadMenuTexts+0x57c>)
 8003fb2:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003fb4:	483a      	ldr	r0, [pc, #232]	; (80040a0 <loadMenuTexts+0x580>)
 8003fb6:	f7fc fbf1 	bl	800079c <copyText>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4a39      	ldr	r2, [pc, #228]	; (80040a4 <loadMenuTexts+0x584>)
 8003fbe:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003fc0:	4839      	ldr	r0, [pc, #228]	; (80040a8 <loadMenuTexts+0x588>)
 8003fc2:	f7fc fbeb 	bl	800079c <copyText>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4a38      	ldr	r2, [pc, #224]	; (80040ac <loadMenuTexts+0x58c>)
 8003fca:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003fcc:	4838      	ldr	r0, [pc, #224]	; (80040b0 <loadMenuTexts+0x590>)
 8003fce:	f7fc fbe5 	bl	800079c <copyText>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4a37      	ldr	r2, [pc, #220]	; (80040b4 <loadMenuTexts+0x594>)
 8003fd6:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003fd8:	4837      	ldr	r0, [pc, #220]	; (80040b8 <loadMenuTexts+0x598>)
 8003fda:	f7fc fbdf 	bl	800079c <copyText>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4a36      	ldr	r2, [pc, #216]	; (80040bc <loadMenuTexts+0x59c>)
 8003fe2:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003fe4:	4836      	ldr	r0, [pc, #216]	; (80040c0 <loadMenuTexts+0x5a0>)
 8003fe6:	f7fc fbd9 	bl	800079c <copyText>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4a35      	ldr	r2, [pc, #212]	; (80040c4 <loadMenuTexts+0x5a4>)
 8003fee:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003ff0:	4835      	ldr	r0, [pc, #212]	; (80040c8 <loadMenuTexts+0x5a8>)
 8003ff2:	f7fc fbd3 	bl	800079c <copyText>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a34      	ldr	r2, [pc, #208]	; (80040cc <loadMenuTexts+0x5ac>)
 8003ffa:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003ffc:	4834      	ldr	r0, [pc, #208]	; (80040d0 <loadMenuTexts+0x5b0>)
 8003ffe:	f7fc fbcd 	bl	800079c <copyText>
 8004002:	4603      	mov	r3, r0
 8004004:	4a33      	ldr	r2, [pc, #204]	; (80040d4 <loadMenuTexts+0x5b4>)
 8004006:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8004008:	4833      	ldr	r0, [pc, #204]	; (80040d8 <loadMenuTexts+0x5b8>)
 800400a:	f7fc fbc7 	bl	800079c <copyText>
 800400e:	4603      	mov	r3, r0
 8004010:	4a32      	ldr	r2, [pc, #200]	; (80040dc <loadMenuTexts+0x5bc>)
 8004012:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8004014:	4832      	ldr	r0, [pc, #200]	; (80040e0 <loadMenuTexts+0x5c0>)
 8004016:	f7fc fbc1 	bl	800079c <copyText>
 800401a:	4603      	mov	r3, r0
 800401c:	4a31      	ldr	r2, [pc, #196]	; (80040e4 <loadMenuTexts+0x5c4>)
 800401e:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8004020:	4831      	ldr	r0, [pc, #196]	; (80040e8 <loadMenuTexts+0x5c8>)
 8004022:	f7fc fbbb 	bl	800079c <copyText>
 8004026:	4603      	mov	r3, r0
 8004028:	4a30      	ldr	r2, [pc, #192]	; (80040ec <loadMenuTexts+0x5cc>)
 800402a:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 800402c:	4830      	ldr	r0, [pc, #192]	; (80040f0 <loadMenuTexts+0x5d0>)
 800402e:	f7fc fbb5 	bl	800079c <copyText>
 8004032:	4603      	mov	r3, r0
 8004034:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <loadMenuTexts+0x5d4>)
 8004036:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8004038:	482f      	ldr	r0, [pc, #188]	; (80040f8 <loadMenuTexts+0x5d8>)
 800403a:	f7fc fbaf 	bl	800079c <copyText>
 800403e:	4603      	mov	r3, r0
 8004040:	4a2e      	ldr	r2, [pc, #184]	; (80040fc <loadMenuTexts+0x5dc>)
 8004042:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8004044:	482e      	ldr	r0, [pc, #184]	; (8004100 <loadMenuTexts+0x5e0>)
 8004046:	f7fc fba9 	bl	800079c <copyText>
 800404a:	4603      	mov	r3, r0
 800404c:	4a2d      	ldr	r2, [pc, #180]	; (8004104 <loadMenuTexts+0x5e4>)
 800404e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8004050:	482d      	ldr	r0, [pc, #180]	; (8004108 <loadMenuTexts+0x5e8>)
 8004052:	f7fc fba3 	bl	800079c <copyText>
 8004056:	4603      	mov	r3, r0
 8004058:	4a2c      	ldr	r2, [pc, #176]	; (800410c <loadMenuTexts+0x5ec>)
 800405a:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 800405c:	482c      	ldr	r0, [pc, #176]	; (8004110 <loadMenuTexts+0x5f0>)
 800405e:	f7fc fb9d 	bl	800079c <copyText>
 8004062:	4603      	mov	r3, r0
 8004064:	4a2b      	ldr	r2, [pc, #172]	; (8004114 <loadMenuTexts+0x5f4>)
 8004066:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8004068:	482b      	ldr	r0, [pc, #172]	; (8004118 <loadMenuTexts+0x5f8>)
 800406a:	f7fc fb97 	bl	800079c <copyText>
 800406e:	4603      	mov	r3, r0
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <loadMenuTexts+0x5fc>)
 8004072:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8004074:	482a      	ldr	r0, [pc, #168]	; (8004120 <loadMenuTexts+0x600>)
 8004076:	f7fc fb91 	bl	800079c <copyText>
 800407a:	4603      	mov	r3, r0
 800407c:	4a29      	ldr	r2, [pc, #164]	; (8004124 <loadMenuTexts+0x604>)
 800407e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8004080:	e2d3      	b.n	800462a <loadMenuTexts+0xb0a>
 8004082:	bf00      	nop
 8004084:	20000c64 	.word	0x20000c64
 8004088:	20000380 	.word	0x20000380
 800408c:	20000c68 	.word	0x20000c68
 8004090:	20000390 	.word	0x20000390
 8004094:	20000c6c 	.word	0x20000c6c
 8004098:	200003a0 	.word	0x200003a0
 800409c:	20000c70 	.word	0x20000c70
 80040a0:	200003b0 	.word	0x200003b0
 80040a4:	20000c74 	.word	0x20000c74
 80040a8:	200003c0 	.word	0x200003c0
 80040ac:	20000c78 	.word	0x20000c78
 80040b0:	200003d0 	.word	0x200003d0
 80040b4:	20000c7c 	.word	0x20000c7c
 80040b8:	200003e0 	.word	0x200003e0
 80040bc:	20000c80 	.word	0x20000c80
 80040c0:	200003f0 	.word	0x200003f0
 80040c4:	20000c84 	.word	0x20000c84
 80040c8:	20000400 	.word	0x20000400
 80040cc:	20000c88 	.word	0x20000c88
 80040d0:	20000410 	.word	0x20000410
 80040d4:	20000c8c 	.word	0x20000c8c
 80040d8:	20000420 	.word	0x20000420
 80040dc:	20000c90 	.word	0x20000c90
 80040e0:	20000430 	.word	0x20000430
 80040e4:	20000c94 	.word	0x20000c94
 80040e8:	20000440 	.word	0x20000440
 80040ec:	20000c98 	.word	0x20000c98
 80040f0:	20000450 	.word	0x20000450
 80040f4:	20000ca4 	.word	0x20000ca4
 80040f8:	20000460 	.word	0x20000460
 80040fc:	20000ca8 	.word	0x20000ca8
 8004100:	20000470 	.word	0x20000470
 8004104:	20000cac 	.word	0x20000cac
 8004108:	20000480 	.word	0x20000480
 800410c:	20000cb0 	.word	0x20000cb0
 8004110:	20000490 	.word	0x20000490
 8004114:	20000cb4 	.word	0x20000cb4
 8004118:	200004a0 	.word	0x200004a0
 800411c:	20000cb8 	.word	0x20000cb8
 8004120:	200004b0 	.word	0x200004b0
 8004124:	20000cbc 	.word	0x20000cbc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8004128:	48a9      	ldr	r0, [pc, #676]	; (80043d0 <loadMenuTexts+0x8b0>)
 800412a:	f7fc fb37 	bl	800079c <copyText>
 800412e:	4603      	mov	r3, r0
 8004130:	4aa8      	ldr	r2, [pc, #672]	; (80043d4 <loadMenuTexts+0x8b4>)
 8004132:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8004134:	48a8      	ldr	r0, [pc, #672]	; (80043d8 <loadMenuTexts+0x8b8>)
 8004136:	f7fc fb31 	bl	800079c <copyText>
 800413a:	4603      	mov	r3, r0
 800413c:	4aa7      	ldr	r2, [pc, #668]	; (80043dc <loadMenuTexts+0x8bc>)
 800413e:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8004140:	48a7      	ldr	r0, [pc, #668]	; (80043e0 <loadMenuTexts+0x8c0>)
 8004142:	f7fc fb2b 	bl	800079c <copyText>
 8004146:	4603      	mov	r3, r0
 8004148:	4aa6      	ldr	r2, [pc, #664]	; (80043e4 <loadMenuTexts+0x8c4>)
 800414a:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 800414c:	48a6      	ldr	r0, [pc, #664]	; (80043e8 <loadMenuTexts+0x8c8>)
 800414e:	f7fc fb25 	bl	800079c <copyText>
 8004152:	4603      	mov	r3, r0
 8004154:	4aa5      	ldr	r2, [pc, #660]	; (80043ec <loadMenuTexts+0x8cc>)
 8004156:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8004158:	48a5      	ldr	r0, [pc, #660]	; (80043f0 <loadMenuTexts+0x8d0>)
 800415a:	f7fc fb1f 	bl	800079c <copyText>
 800415e:	4603      	mov	r3, r0
 8004160:	4aa4      	ldr	r2, [pc, #656]	; (80043f4 <loadMenuTexts+0x8d4>)
 8004162:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8004164:	48a4      	ldr	r0, [pc, #656]	; (80043f8 <loadMenuTexts+0x8d8>)
 8004166:	f7fc fb19 	bl	800079c <copyText>
 800416a:	4603      	mov	r3, r0
 800416c:	4aa3      	ldr	r2, [pc, #652]	; (80043fc <loadMenuTexts+0x8dc>)
 800416e:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8004170:	48a3      	ldr	r0, [pc, #652]	; (8004400 <loadMenuTexts+0x8e0>)
 8004172:	f7fc fb13 	bl	800079c <copyText>
 8004176:	4603      	mov	r3, r0
 8004178:	4aa2      	ldr	r2, [pc, #648]	; (8004404 <loadMenuTexts+0x8e4>)
 800417a:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 800417c:	48a2      	ldr	r0, [pc, #648]	; (8004408 <loadMenuTexts+0x8e8>)
 800417e:	f7fc fb0d 	bl	800079c <copyText>
 8004182:	4603      	mov	r3, r0
 8004184:	4aa1      	ldr	r2, [pc, #644]	; (800440c <loadMenuTexts+0x8ec>)
 8004186:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8004188:	48a1      	ldr	r0, [pc, #644]	; (8004410 <loadMenuTexts+0x8f0>)
 800418a:	f7fc fb07 	bl	800079c <copyText>
 800418e:	4603      	mov	r3, r0
 8004190:	4aa0      	ldr	r2, [pc, #640]	; (8004414 <loadMenuTexts+0x8f4>)
 8004192:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8004194:	48a0      	ldr	r0, [pc, #640]	; (8004418 <loadMenuTexts+0x8f8>)
 8004196:	f7fc fb01 	bl	800079c <copyText>
 800419a:	4603      	mov	r3, r0
 800419c:	4a9f      	ldr	r2, [pc, #636]	; (800441c <loadMenuTexts+0x8fc>)
 800419e:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80041a0:	489f      	ldr	r0, [pc, #636]	; (8004420 <loadMenuTexts+0x900>)
 80041a2:	f7fc fafb 	bl	800079c <copyText>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4a9e      	ldr	r2, [pc, #632]	; (8004424 <loadMenuTexts+0x904>)
 80041aa:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80041ac:	489e      	ldr	r0, [pc, #632]	; (8004428 <loadMenuTexts+0x908>)
 80041ae:	f7fc faf5 	bl	800079c <copyText>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a9d      	ldr	r2, [pc, #628]	; (800442c <loadMenuTexts+0x90c>)
 80041b6:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80041b8:	489d      	ldr	r0, [pc, #628]	; (8004430 <loadMenuTexts+0x910>)
 80041ba:	f7fc faef 	bl	800079c <copyText>
 80041be:	4603      	mov	r3, r0
 80041c0:	4a9c      	ldr	r2, [pc, #624]	; (8004434 <loadMenuTexts+0x914>)
 80041c2:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80041c4:	489c      	ldr	r0, [pc, #624]	; (8004438 <loadMenuTexts+0x918>)
 80041c6:	f7fc fae9 	bl	800079c <copyText>
 80041ca:	4603      	mov	r3, r0
 80041cc:	4a9b      	ldr	r2, [pc, #620]	; (800443c <loadMenuTexts+0x91c>)
 80041ce:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 80041d0:	489b      	ldr	r0, [pc, #620]	; (8004440 <loadMenuTexts+0x920>)
 80041d2:	f7fc fae3 	bl	800079c <copyText>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a9a      	ldr	r2, [pc, #616]	; (8004444 <loadMenuTexts+0x924>)
 80041da:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 80041dc:	489a      	ldr	r0, [pc, #616]	; (8004448 <loadMenuTexts+0x928>)
 80041de:	f7fc fadd 	bl	800079c <copyText>
 80041e2:	4603      	mov	r3, r0
 80041e4:	4a99      	ldr	r2, [pc, #612]	; (800444c <loadMenuTexts+0x92c>)
 80041e6:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80041e8:	4899      	ldr	r0, [pc, #612]	; (8004450 <loadMenuTexts+0x930>)
 80041ea:	f7fc fad7 	bl	800079c <copyText>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4a98      	ldr	r2, [pc, #608]	; (8004454 <loadMenuTexts+0x934>)
 80041f2:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80041f4:	4898      	ldr	r0, [pc, #608]	; (8004458 <loadMenuTexts+0x938>)
 80041f6:	f7fc fad1 	bl	800079c <copyText>
 80041fa:	4603      	mov	r3, r0
 80041fc:	4a97      	ldr	r2, [pc, #604]	; (800445c <loadMenuTexts+0x93c>)
 80041fe:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8004200:	4897      	ldr	r0, [pc, #604]	; (8004460 <loadMenuTexts+0x940>)
 8004202:	f7fc facb 	bl	800079c <copyText>
 8004206:	4603      	mov	r3, r0
 8004208:	4a96      	ldr	r2, [pc, #600]	; (8004464 <loadMenuTexts+0x944>)
 800420a:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 800420c:	4896      	ldr	r0, [pc, #600]	; (8004468 <loadMenuTexts+0x948>)
 800420e:	f7fc fac5 	bl	800079c <copyText>
 8004212:	4603      	mov	r3, r0
 8004214:	4a95      	ldr	r2, [pc, #596]	; (800446c <loadMenuTexts+0x94c>)
 8004216:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8004218:	4895      	ldr	r0, [pc, #596]	; (8004470 <loadMenuTexts+0x950>)
 800421a:	f7fc fabf 	bl	800079c <copyText>
 800421e:	4603      	mov	r3, r0
 8004220:	4a94      	ldr	r2, [pc, #592]	; (8004474 <loadMenuTexts+0x954>)
 8004222:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8004224:	4894      	ldr	r0, [pc, #592]	; (8004478 <loadMenuTexts+0x958>)
 8004226:	f7fc fab9 	bl	800079c <copyText>
 800422a:	4603      	mov	r3, r0
 800422c:	4a93      	ldr	r2, [pc, #588]	; (800447c <loadMenuTexts+0x95c>)
 800422e:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8004230:	4893      	ldr	r0, [pc, #588]	; (8004480 <loadMenuTexts+0x960>)
 8004232:	f7fc fab3 	bl	800079c <copyText>
 8004236:	4603      	mov	r3, r0
 8004238:	4a92      	ldr	r2, [pc, #584]	; (8004484 <loadMenuTexts+0x964>)
 800423a:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 800423c:	4892      	ldr	r0, [pc, #584]	; (8004488 <loadMenuTexts+0x968>)
 800423e:	f7fc faad 	bl	800079c <copyText>
 8004242:	4603      	mov	r3, r0
 8004244:	4a91      	ldr	r2, [pc, #580]	; (800448c <loadMenuTexts+0x96c>)
 8004246:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8004248:	4891      	ldr	r0, [pc, #580]	; (8004490 <loadMenuTexts+0x970>)
 800424a:	f7fc faa7 	bl	800079c <copyText>
 800424e:	4603      	mov	r3, r0
 8004250:	4a90      	ldr	r2, [pc, #576]	; (8004494 <loadMenuTexts+0x974>)
 8004252:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8004254:	4890      	ldr	r0, [pc, #576]	; (8004498 <loadMenuTexts+0x978>)
 8004256:	f7fc faa1 	bl	800079c <copyText>
 800425a:	4603      	mov	r3, r0
 800425c:	4a8f      	ldr	r2, [pc, #572]	; (800449c <loadMenuTexts+0x97c>)
 800425e:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8004260:	488f      	ldr	r0, [pc, #572]	; (80044a0 <loadMenuTexts+0x980>)
 8004262:	f7fc fa9b 	bl	800079c <copyText>
 8004266:	4603      	mov	r3, r0
 8004268:	4a8e      	ldr	r2, [pc, #568]	; (80044a4 <loadMenuTexts+0x984>)
 800426a:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 800426c:	488e      	ldr	r0, [pc, #568]	; (80044a8 <loadMenuTexts+0x988>)
 800426e:	f7fc fa95 	bl	800079c <copyText>
 8004272:	4603      	mov	r3, r0
 8004274:	4a8d      	ldr	r2, [pc, #564]	; (80044ac <loadMenuTexts+0x98c>)
 8004276:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8004278:	488d      	ldr	r0, [pc, #564]	; (80044b0 <loadMenuTexts+0x990>)
 800427a:	f7fc fa8f 	bl	800079c <copyText>
 800427e:	4603      	mov	r3, r0
 8004280:	4a8c      	ldr	r2, [pc, #560]	; (80044b4 <loadMenuTexts+0x994>)
 8004282:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8004284:	488c      	ldr	r0, [pc, #560]	; (80044b8 <loadMenuTexts+0x998>)
 8004286:	f7fc fa89 	bl	800079c <copyText>
 800428a:	4603      	mov	r3, r0
 800428c:	4a8b      	ldr	r2, [pc, #556]	; (80044bc <loadMenuTexts+0x99c>)
 800428e:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8004290:	488b      	ldr	r0, [pc, #556]	; (80044c0 <loadMenuTexts+0x9a0>)
 8004292:	f7fc fa83 	bl	800079c <copyText>
 8004296:	4603      	mov	r3, r0
 8004298:	4a8a      	ldr	r2, [pc, #552]	; (80044c4 <loadMenuTexts+0x9a4>)
 800429a:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 800429c:	488a      	ldr	r0, [pc, #552]	; (80044c8 <loadMenuTexts+0x9a8>)
 800429e:	f7fc fa7d 	bl	800079c <copyText>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4a89      	ldr	r2, [pc, #548]	; (80044cc <loadMenuTexts+0x9ac>)
 80042a6:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80042a8:	4889      	ldr	r0, [pc, #548]	; (80044d0 <loadMenuTexts+0x9b0>)
 80042aa:	f7fc fa77 	bl	800079c <copyText>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4a88      	ldr	r2, [pc, #544]	; (80044d4 <loadMenuTexts+0x9b4>)
 80042b2:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80042b4:	4888      	ldr	r0, [pc, #544]	; (80044d8 <loadMenuTexts+0x9b8>)
 80042b6:	f7fc fa71 	bl	800079c <copyText>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a87      	ldr	r2, [pc, #540]	; (80044dc <loadMenuTexts+0x9bc>)
 80042be:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80042c0:	4887      	ldr	r0, [pc, #540]	; (80044e0 <loadMenuTexts+0x9c0>)
 80042c2:	f7fc fa6b 	bl	800079c <copyText>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4a86      	ldr	r2, [pc, #536]	; (80044e4 <loadMenuTexts+0x9c4>)
 80042ca:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 80042cc:	4886      	ldr	r0, [pc, #536]	; (80044e8 <loadMenuTexts+0x9c8>)
 80042ce:	f7fc fa65 	bl	800079c <copyText>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4a85      	ldr	r2, [pc, #532]	; (80044ec <loadMenuTexts+0x9cc>)
 80042d6:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 80042d8:	4885      	ldr	r0, [pc, #532]	; (80044f0 <loadMenuTexts+0x9d0>)
 80042da:	f7fc fa5f 	bl	800079c <copyText>
 80042de:	4603      	mov	r3, r0
 80042e0:	4a84      	ldr	r2, [pc, #528]	; (80044f4 <loadMenuTexts+0x9d4>)
 80042e2:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 80042e4:	4884      	ldr	r0, [pc, #528]	; (80044f8 <loadMenuTexts+0x9d8>)
 80042e6:	f7fc fa59 	bl	800079c <copyText>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a83      	ldr	r2, [pc, #524]	; (80044fc <loadMenuTexts+0x9dc>)
 80042ee:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80042f0:	4883      	ldr	r0, [pc, #524]	; (8004500 <loadMenuTexts+0x9e0>)
 80042f2:	f7fc fa53 	bl	800079c <copyText>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4a82      	ldr	r2, [pc, #520]	; (8004504 <loadMenuTexts+0x9e4>)
 80042fa:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80042fc:	4882      	ldr	r0, [pc, #520]	; (8004508 <loadMenuTexts+0x9e8>)
 80042fe:	f7fc fa4d 	bl	800079c <copyText>
 8004302:	4603      	mov	r3, r0
 8004304:	4a81      	ldr	r2, [pc, #516]	; (800450c <loadMenuTexts+0x9ec>)
 8004306:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8004308:	4881      	ldr	r0, [pc, #516]	; (8004510 <loadMenuTexts+0x9f0>)
 800430a:	f7fc fa47 	bl	800079c <copyText>
 800430e:	4603      	mov	r3, r0
 8004310:	4a80      	ldr	r2, [pc, #512]	; (8004514 <loadMenuTexts+0x9f4>)
 8004312:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8004314:	4880      	ldr	r0, [pc, #512]	; (8004518 <loadMenuTexts+0x9f8>)
 8004316:	f7fc fa41 	bl	800079c <copyText>
 800431a:	4603      	mov	r3, r0
 800431c:	4a7f      	ldr	r2, [pc, #508]	; (800451c <loadMenuTexts+0x9fc>)
 800431e:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8004320:	487f      	ldr	r0, [pc, #508]	; (8004520 <loadMenuTexts+0xa00>)
 8004322:	f7fc fa3b 	bl	800079c <copyText>
 8004326:	4603      	mov	r3, r0
 8004328:	4a7e      	ldr	r2, [pc, #504]	; (8004524 <loadMenuTexts+0xa04>)
 800432a:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 800432c:	487e      	ldr	r0, [pc, #504]	; (8004528 <loadMenuTexts+0xa08>)
 800432e:	f7fc fa35 	bl	800079c <copyText>
 8004332:	4603      	mov	r3, r0
 8004334:	4a7d      	ldr	r2, [pc, #500]	; (800452c <loadMenuTexts+0xa0c>)
 8004336:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8004338:	487d      	ldr	r0, [pc, #500]	; (8004530 <loadMenuTexts+0xa10>)
 800433a:	f7fc fa2f 	bl	800079c <copyText>
 800433e:	4603      	mov	r3, r0
 8004340:	4a7c      	ldr	r2, [pc, #496]	; (8004534 <loadMenuTexts+0xa14>)
 8004342:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8004344:	487c      	ldr	r0, [pc, #496]	; (8004538 <loadMenuTexts+0xa18>)
 8004346:	f7fc fa29 	bl	800079c <copyText>
 800434a:	4603      	mov	r3, r0
 800434c:	4a7b      	ldr	r2, [pc, #492]	; (800453c <loadMenuTexts+0xa1c>)
 800434e:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8004350:	487b      	ldr	r0, [pc, #492]	; (8004540 <loadMenuTexts+0xa20>)
 8004352:	f7fc fa23 	bl	800079c <copyText>
 8004356:	4603      	mov	r3, r0
 8004358:	4a7a      	ldr	r2, [pc, #488]	; (8004544 <loadMenuTexts+0xa24>)
 800435a:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 800435c:	487a      	ldr	r0, [pc, #488]	; (8004548 <loadMenuTexts+0xa28>)
 800435e:	f7fc fa1d 	bl	800079c <copyText>
 8004362:	4603      	mov	r3, r0
 8004364:	4a79      	ldr	r2, [pc, #484]	; (800454c <loadMenuTexts+0xa2c>)
 8004366:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004368:	4879      	ldr	r0, [pc, #484]	; (8004550 <loadMenuTexts+0xa30>)
 800436a:	f7fc fa17 	bl	800079c <copyText>
 800436e:	4603      	mov	r3, r0
 8004370:	4a78      	ldr	r2, [pc, #480]	; (8004554 <loadMenuTexts+0xa34>)
 8004372:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8004374:	4878      	ldr	r0, [pc, #480]	; (8004558 <loadMenuTexts+0xa38>)
 8004376:	f7fc fa11 	bl	800079c <copyText>
 800437a:	4603      	mov	r3, r0
 800437c:	4a77      	ldr	r2, [pc, #476]	; (800455c <loadMenuTexts+0xa3c>)
 800437e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8004380:	4877      	ldr	r0, [pc, #476]	; (8004560 <loadMenuTexts+0xa40>)
 8004382:	f7fc fa0b 	bl	800079c <copyText>
 8004386:	4603      	mov	r3, r0
 8004388:	4a76      	ldr	r2, [pc, #472]	; (8004564 <loadMenuTexts+0xa44>)
 800438a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 800438c:	4876      	ldr	r0, [pc, #472]	; (8004568 <loadMenuTexts+0xa48>)
 800438e:	f7fc fa05 	bl	800079c <copyText>
 8004392:	4603      	mov	r3, r0
 8004394:	4a75      	ldr	r2, [pc, #468]	; (800456c <loadMenuTexts+0xa4c>)
 8004396:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004398:	4875      	ldr	r0, [pc, #468]	; (8004570 <loadMenuTexts+0xa50>)
 800439a:	f7fc f9ff 	bl	800079c <copyText>
 800439e:	4603      	mov	r3, r0
 80043a0:	4a74      	ldr	r2, [pc, #464]	; (8004574 <loadMenuTexts+0xa54>)
 80043a2:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80043a4:	4874      	ldr	r0, [pc, #464]	; (8004578 <loadMenuTexts+0xa58>)
 80043a6:	f7fc f9f9 	bl	800079c <copyText>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4a73      	ldr	r2, [pc, #460]	; (800457c <loadMenuTexts+0xa5c>)
 80043ae:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80043b0:	4873      	ldr	r0, [pc, #460]	; (8004580 <loadMenuTexts+0xa60>)
 80043b2:	f7fc f9f3 	bl	800079c <copyText>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4a72      	ldr	r2, [pc, #456]	; (8004584 <loadMenuTexts+0xa64>)
 80043ba:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80043bc:	4872      	ldr	r0, [pc, #456]	; (8004588 <loadMenuTexts+0xa68>)
 80043be:	f7fc f9ed 	bl	800079c <copyText>
 80043c2:	4603      	mov	r3, r0
 80043c4:	4a71      	ldr	r2, [pc, #452]	; (800458c <loadMenuTexts+0xa6c>)
 80043c6:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 80043c8:	4871      	ldr	r0, [pc, #452]	; (8004590 <loadMenuTexts+0xa70>)
 80043ca:	f7fc f9e7 	bl	800079c <copyText>
 80043ce:	e0e1      	b.n	8004594 <loadMenuTexts+0xa74>
 80043d0:	200004c0 	.word	0x200004c0
 80043d4:	20000b98 	.word	0x20000b98
 80043d8:	200004d0 	.word	0x200004d0
 80043dc:	20000b9c 	.word	0x20000b9c
 80043e0:	200004e0 	.word	0x200004e0
 80043e4:	20000ba0 	.word	0x20000ba0
 80043e8:	200004f0 	.word	0x200004f0
 80043ec:	20000ba4 	.word	0x20000ba4
 80043f0:	20000500 	.word	0x20000500
 80043f4:	20000ba8 	.word	0x20000ba8
 80043f8:	20000510 	.word	0x20000510
 80043fc:	20000bac 	.word	0x20000bac
 8004400:	20000520 	.word	0x20000520
 8004404:	20000bb0 	.word	0x20000bb0
 8004408:	20000530 	.word	0x20000530
 800440c:	20000bb4 	.word	0x20000bb4
 8004410:	20000540 	.word	0x20000540
 8004414:	20000bb8 	.word	0x20000bb8
 8004418:	20000550 	.word	0x20000550
 800441c:	20000bbc 	.word	0x20000bbc
 8004420:	20000560 	.word	0x20000560
 8004424:	20000bc0 	.word	0x20000bc0
 8004428:	20000570 	.word	0x20000570
 800442c:	20000bc4 	.word	0x20000bc4
 8004430:	20000580 	.word	0x20000580
 8004434:	20000bc8 	.word	0x20000bc8
 8004438:	20000590 	.word	0x20000590
 800443c:	20000bcc 	.word	0x20000bcc
 8004440:	200005a0 	.word	0x200005a0
 8004444:	20000bd0 	.word	0x20000bd0
 8004448:	200005b0 	.word	0x200005b0
 800444c:	20000bd4 	.word	0x20000bd4
 8004450:	200005c0 	.word	0x200005c0
 8004454:	20000bd8 	.word	0x20000bd8
 8004458:	200005d0 	.word	0x200005d0
 800445c:	20000bdc 	.word	0x20000bdc
 8004460:	200005e0 	.word	0x200005e0
 8004464:	20000be0 	.word	0x20000be0
 8004468:	200005f0 	.word	0x200005f0
 800446c:	20000be4 	.word	0x20000be4
 8004470:	20000600 	.word	0x20000600
 8004474:	20000be8 	.word	0x20000be8
 8004478:	20000610 	.word	0x20000610
 800447c:	20000bf0 	.word	0x20000bf0
 8004480:	20000620 	.word	0x20000620
 8004484:	20000bf4 	.word	0x20000bf4
 8004488:	20000630 	.word	0x20000630
 800448c:	20000bf8 	.word	0x20000bf8
 8004490:	20000640 	.word	0x20000640
 8004494:	20000bfc 	.word	0x20000bfc
 8004498:	20000650 	.word	0x20000650
 800449c:	20000c00 	.word	0x20000c00
 80044a0:	20000660 	.word	0x20000660
 80044a4:	20000c04 	.word	0x20000c04
 80044a8:	20000670 	.word	0x20000670
 80044ac:	20000c08 	.word	0x20000c08
 80044b0:	20000680 	.word	0x20000680
 80044b4:	20000c0c 	.word	0x20000c0c
 80044b8:	20000690 	.word	0x20000690
 80044bc:	20000c10 	.word	0x20000c10
 80044c0:	200006a0 	.word	0x200006a0
 80044c4:	20000c14 	.word	0x20000c14
 80044c8:	200006b0 	.word	0x200006b0
 80044cc:	20000c18 	.word	0x20000c18
 80044d0:	200006c0 	.word	0x200006c0
 80044d4:	20000c20 	.word	0x20000c20
 80044d8:	200006d0 	.word	0x200006d0
 80044dc:	20000c28 	.word	0x20000c28
 80044e0:	200006e0 	.word	0x200006e0
 80044e4:	20000c2c 	.word	0x20000c2c
 80044e8:	200006f0 	.word	0x200006f0
 80044ec:	20000c30 	.word	0x20000c30
 80044f0:	20000700 	.word	0x20000700
 80044f4:	20000c34 	.word	0x20000c34
 80044f8:	20000710 	.word	0x20000710
 80044fc:	20000c38 	.word	0x20000c38
 8004500:	20000720 	.word	0x20000720
 8004504:	20000c3c 	.word	0x20000c3c
 8004508:	20000730 	.word	0x20000730
 800450c:	20000c40 	.word	0x20000c40
 8004510:	20000740 	.word	0x20000740
 8004514:	20000c44 	.word	0x20000c44
 8004518:	20000750 	.word	0x20000750
 800451c:	20000c48 	.word	0x20000c48
 8004520:	20000760 	.word	0x20000760
 8004524:	20000c4c 	.word	0x20000c4c
 8004528:	20000770 	.word	0x20000770
 800452c:	20000c50 	.word	0x20000c50
 8004530:	20000780 	.word	0x20000780
 8004534:	20000c54 	.word	0x20000c54
 8004538:	20000790 	.word	0x20000790
 800453c:	20000c58 	.word	0x20000c58
 8004540:	200007a0 	.word	0x200007a0
 8004544:	20000c5c 	.word	0x20000c5c
 8004548:	200007b0 	.word	0x200007b0
 800454c:	20000c60 	.word	0x20000c60
 8004550:	200007c0 	.word	0x200007c0
 8004554:	20000c64 	.word	0x20000c64
 8004558:	200007d0 	.word	0x200007d0
 800455c:	20000c68 	.word	0x20000c68
 8004560:	200007e0 	.word	0x200007e0
 8004564:	20000c6c 	.word	0x20000c6c
 8004568:	200007f0 	.word	0x200007f0
 800456c:	20000c70 	.word	0x20000c70
 8004570:	20000800 	.word	0x20000800
 8004574:	20000c74 	.word	0x20000c74
 8004578:	20000810 	.word	0x20000810
 800457c:	20000c78 	.word	0x20000c78
 8004580:	20000820 	.word	0x20000820
 8004584:	20000c7c 	.word	0x20000c7c
 8004588:	20000830 	.word	0x20000830
 800458c:	20000c80 	.word	0x20000c80
 8004590:	20000840 	.word	0x20000840
 8004594:	4603      	mov	r3, r0
 8004596:	4a27      	ldr	r2, [pc, #156]	; (8004634 <loadMenuTexts+0xb14>)
 8004598:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800459a:	4827      	ldr	r0, [pc, #156]	; (8004638 <loadMenuTexts+0xb18>)
 800459c:	f7fc f8fe 	bl	800079c <copyText>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4a26      	ldr	r2, [pc, #152]	; (800463c <loadMenuTexts+0xb1c>)
 80045a4:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80045a6:	4826      	ldr	r0, [pc, #152]	; (8004640 <loadMenuTexts+0xb20>)
 80045a8:	f7fc f8f8 	bl	800079c <copyText>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4a25      	ldr	r2, [pc, #148]	; (8004644 <loadMenuTexts+0xb24>)
 80045b0:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80045b2:	4825      	ldr	r0, [pc, #148]	; (8004648 <loadMenuTexts+0xb28>)
 80045b4:	f7fc f8f2 	bl	800079c <copyText>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4a24      	ldr	r2, [pc, #144]	; (800464c <loadMenuTexts+0xb2c>)
 80045bc:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80045be:	4824      	ldr	r0, [pc, #144]	; (8004650 <loadMenuTexts+0xb30>)
 80045c0:	f7fc f8ec 	bl	800079c <copyText>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4a23      	ldr	r2, [pc, #140]	; (8004654 <loadMenuTexts+0xb34>)
 80045c8:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 80045ca:	4823      	ldr	r0, [pc, #140]	; (8004658 <loadMenuTexts+0xb38>)
 80045cc:	f7fc f8e6 	bl	800079c <copyText>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <loadMenuTexts+0xb3c>)
 80045d4:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 80045d6:	4822      	ldr	r0, [pc, #136]	; (8004660 <loadMenuTexts+0xb40>)
 80045d8:	f7fc f8e0 	bl	800079c <copyText>
 80045dc:	4603      	mov	r3, r0
 80045de:	4a21      	ldr	r2, [pc, #132]	; (8004664 <loadMenuTexts+0xb44>)
 80045e0:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80045e2:	4821      	ldr	r0, [pc, #132]	; (8004668 <loadMenuTexts+0xb48>)
 80045e4:	f7fc f8da 	bl	800079c <copyText>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4a20      	ldr	r2, [pc, #128]	; (800466c <loadMenuTexts+0xb4c>)
 80045ec:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80045ee:	4820      	ldr	r0, [pc, #128]	; (8004670 <loadMenuTexts+0xb50>)
 80045f0:	f7fc f8d4 	bl	800079c <copyText>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <loadMenuTexts+0xb54>)
 80045f8:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80045fa:	481f      	ldr	r0, [pc, #124]	; (8004678 <loadMenuTexts+0xb58>)
 80045fc:	f7fc f8ce 	bl	800079c <copyText>
 8004600:	4603      	mov	r3, r0
 8004602:	4a1e      	ldr	r2, [pc, #120]	; (800467c <loadMenuTexts+0xb5c>)
 8004604:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8004606:	481e      	ldr	r0, [pc, #120]	; (8004680 <loadMenuTexts+0xb60>)
 8004608:	f7fc f8c8 	bl	800079c <copyText>
 800460c:	4603      	mov	r3, r0
 800460e:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <loadMenuTexts+0xb64>)
 8004610:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8004612:	481d      	ldr	r0, [pc, #116]	; (8004688 <loadMenuTexts+0xb68>)
 8004614:	f7fc f8c2 	bl	800079c <copyText>
 8004618:	4603      	mov	r3, r0
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <loadMenuTexts+0xb6c>)
 800461c:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 800461e:	481c      	ldr	r0, [pc, #112]	; (8004690 <loadMenuTexts+0xb70>)
 8004620:	f7fc f8bc 	bl	800079c <copyText>
 8004624:	4603      	mov	r3, r0
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <loadMenuTexts+0xb74>)
 8004628:	6013      	str	r3, [r2, #0]
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000c84 	.word	0x20000c84
 8004638:	20000850 	.word	0x20000850
 800463c:	20000c88 	.word	0x20000c88
 8004640:	20000860 	.word	0x20000860
 8004644:	20000c8c 	.word	0x20000c8c
 8004648:	20000870 	.word	0x20000870
 800464c:	20000c90 	.word	0x20000c90
 8004650:	20000880 	.word	0x20000880
 8004654:	20000c94 	.word	0x20000c94
 8004658:	20000890 	.word	0x20000890
 800465c:	20000c98 	.word	0x20000c98
 8004660:	200008a0 	.word	0x200008a0
 8004664:	20000ca4 	.word	0x20000ca4
 8004668:	200008b0 	.word	0x200008b0
 800466c:	20000ca8 	.word	0x20000ca8
 8004670:	200008c0 	.word	0x200008c0
 8004674:	20000cac 	.word	0x20000cac
 8004678:	200008d0 	.word	0x200008d0
 800467c:	20000cb0 	.word	0x20000cb0
 8004680:	200008e0 	.word	0x200008e0
 8004684:	20000cb4 	.word	0x20000cb4
 8004688:	200008f0 	.word	0x200008f0
 800468c:	20000cb8 	.word	0x20000cb8
 8004690:	20000900 	.word	0x20000900
 8004694:	20000cbc 	.word	0x20000cbc

08004698 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80046a8:	4a22      	ldr	r2, [pc, #136]	; (8004734 <lcdUpdate+0x9c>)
 80046aa:	2101      	movs	r1, #1
 80046ac:	2002      	movs	r0, #2
 80046ae:	f7fc f82e 	bl	800070e <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80046b2:	e03b      	b.n	800472c <lcdUpdate+0x94>
	} else if(y==2) {
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d105      	bne.n	80046c6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <lcdUpdate+0x9c>)
 80046bc:	2102      	movs	r1, #2
 80046be:	2002      	movs	r0, #2
 80046c0:	f7fc f825 	bl	800070e <lcd_print>
}
 80046c4:	e032      	b.n	800472c <lcdUpdate+0x94>
	} else if(y==3) {
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d105      	bne.n	80046d8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80046cc:	4a19      	ldr	r2, [pc, #100]	; (8004734 <lcdUpdate+0x9c>)
 80046ce:	2103      	movs	r1, #3
 80046d0:	2002      	movs	r0, #2
 80046d2:	f7fc f81c 	bl	800070e <lcd_print>
}
 80046d6:	e029      	b.n	800472c <lcdUpdate+0x94>
	} else if(y==4) {
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d105      	bne.n	80046ea <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80046de:	4a15      	ldr	r2, [pc, #84]	; (8004734 <lcdUpdate+0x9c>)
 80046e0:	2104      	movs	r1, #4
 80046e2:	2002      	movs	r0, #2
 80046e4:	f7fc f813 	bl	800070e <lcd_print>
}
 80046e8:	e020      	b.n	800472c <lcdUpdate+0x94>
	} else if(y==5) {
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d105      	bne.n	80046fc <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80046f0:	4a10      	ldr	r2, [pc, #64]	; (8004734 <lcdUpdate+0x9c>)
 80046f2:	2105      	movs	r1, #5
 80046f4:	2002      	movs	r0, #2
 80046f6:	f7fc f80a 	bl	800070e <lcd_print>
}
 80046fa:	e017      	b.n	800472c <lcdUpdate+0x94>
	} else if(y==6) {
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d105      	bne.n	800470e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004702:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <lcdUpdate+0x9c>)
 8004704:	2106      	movs	r1, #6
 8004706:	2002      	movs	r0, #2
 8004708:	f7fc f801 	bl	800070e <lcd_print>
}
 800470c:	e00e      	b.n	800472c <lcdUpdate+0x94>
	} else if (y==7) {
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b07      	cmp	r3, #7
 8004712:	d10b      	bne.n	800472c <lcdUpdate+0x94>
		lcd_clear();
 8004714:	f7fc f810 	bl	8000738 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004718:	4a07      	ldr	r2, [pc, #28]	; (8004738 <lcdUpdate+0xa0>)
 800471a:	2101      	movs	r1, #1
 800471c:	2001      	movs	r0, #1
 800471e:	f7fb fff6 	bl	800070e <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8004722:	4a06      	ldr	r2, [pc, #24]	; (800473c <lcdUpdate+0xa4>)
 8004724:	2101      	movs	r1, #1
 8004726:	2002      	movs	r0, #2
 8004728:	f7fb fff1 	bl	800070e <lcd_print>
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	0800c800 	.word	0x0800c800
 8004738:	0800d0dc 	.word	0x0800d0dc
 800473c:	0800d0f0 	.word	0x0800d0f0

08004740 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d11d      	bne.n	800478c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004750:	4b62      	ldr	r3, [pc, #392]	; (80048dc <hataKoduLcdGoster+0x19c>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004758:	4a61      	ldr	r2, [pc, #388]	; (80048e0 <hataKoduLcdGoster+0x1a0>)
 800475a:	2101      	movs	r1, #1
 800475c:	2001      	movs	r0, #1
 800475e:	f7fb ffd6 	bl	800070e <lcd_print>
 8004762:	e008      	b.n	8004776 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004764:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <hataKoduLcdGoster+0x19c>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d104      	bne.n	8004776 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 800476c:	4a5d      	ldr	r2, [pc, #372]	; (80048e4 <hataKoduLcdGoster+0x1a4>)
 800476e:	2101      	movs	r1, #1
 8004770:	2001      	movs	r0, #1
 8004772:	f7fb ffcc 	bl	800070e <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004776:	4a5c      	ldr	r2, [pc, #368]	; (80048e8 <hataKoduLcdGoster+0x1a8>)
 8004778:	2101      	movs	r1, #1
 800477a:	2002      	movs	r0, #2
 800477c:	f7fb ffc7 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 8004780:	4a5a      	ldr	r2, [pc, #360]	; (80048ec <hataKoduLcdGoster+0x1ac>)
 8004782:	2107      	movs	r1, #7
 8004784:	2002      	movs	r0, #2
 8004786:	f7fb ffc2 	bl	800070e <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 800478a:	e0a3      	b.n	80048d4 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d11d      	bne.n	80047ce <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004792:	4b52      	ldr	r3, [pc, #328]	; (80048dc <hataKoduLcdGoster+0x19c>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d105      	bne.n	80047a6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 800479a:	4a51      	ldr	r2, [pc, #324]	; (80048e0 <hataKoduLcdGoster+0x1a0>)
 800479c:	2101      	movs	r1, #1
 800479e:	2001      	movs	r0, #1
 80047a0:	f7fb ffb5 	bl	800070e <lcd_print>
 80047a4:	e008      	b.n	80047b8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80047a6:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <hataKoduLcdGoster+0x19c>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d104      	bne.n	80047b8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80047ae:	4a4d      	ldr	r2, [pc, #308]	; (80048e4 <hataKoduLcdGoster+0x1a4>)
 80047b0:	2101      	movs	r1, #1
 80047b2:	2001      	movs	r0, #1
 80047b4:	f7fb ffab 	bl	800070e <lcd_print>
		lcd_print(2, 2, "2");
 80047b8:	4a4d      	ldr	r2, [pc, #308]	; (80048f0 <hataKoduLcdGoster+0x1b0>)
 80047ba:	2102      	movs	r1, #2
 80047bc:	2002      	movs	r0, #2
 80047be:	f7fb ffa6 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 80047c2:	4a4a      	ldr	r2, [pc, #296]	; (80048ec <hataKoduLcdGoster+0x1ac>)
 80047c4:	2107      	movs	r1, #7
 80047c6:	2002      	movs	r0, #2
 80047c8:	f7fb ffa1 	bl	800070e <lcd_print>
}
 80047cc:	e082      	b.n	80048d4 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d11d      	bne.n	8004810 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80047d4:	4b41      	ldr	r3, [pc, #260]	; (80048dc <hataKoduLcdGoster+0x19c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 80047dc:	4a40      	ldr	r2, [pc, #256]	; (80048e0 <hataKoduLcdGoster+0x1a0>)
 80047de:	2101      	movs	r1, #1
 80047e0:	2001      	movs	r0, #1
 80047e2:	f7fb ff94 	bl	800070e <lcd_print>
 80047e6:	e008      	b.n	80047fa <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80047e8:	4b3c      	ldr	r3, [pc, #240]	; (80048dc <hataKoduLcdGoster+0x19c>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d104      	bne.n	80047fa <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80047f0:	4a3c      	ldr	r2, [pc, #240]	; (80048e4 <hataKoduLcdGoster+0x1a4>)
 80047f2:	2101      	movs	r1, #1
 80047f4:	2001      	movs	r0, #1
 80047f6:	f7fb ff8a 	bl	800070e <lcd_print>
		lcd_print(2, 3, "3");
 80047fa:	4a3e      	ldr	r2, [pc, #248]	; (80048f4 <hataKoduLcdGoster+0x1b4>)
 80047fc:	2103      	movs	r1, #3
 80047fe:	2002      	movs	r0, #2
 8004800:	f7fb ff85 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 8004804:	4a39      	ldr	r2, [pc, #228]	; (80048ec <hataKoduLcdGoster+0x1ac>)
 8004806:	2107      	movs	r1, #7
 8004808:	2002      	movs	r0, #2
 800480a:	f7fb ff80 	bl	800070e <lcd_print>
}
 800480e:	e061      	b.n	80048d4 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d11d      	bne.n	8004852 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <hataKoduLcdGoster+0x19c>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d105      	bne.n	800482a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 800481e:	4a30      	ldr	r2, [pc, #192]	; (80048e0 <hataKoduLcdGoster+0x1a0>)
 8004820:	2101      	movs	r1, #1
 8004822:	2001      	movs	r0, #1
 8004824:	f7fb ff73 	bl	800070e <lcd_print>
 8004828:	e008      	b.n	800483c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800482a:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <hataKoduLcdGoster+0x19c>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d104      	bne.n	800483c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004832:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <hataKoduLcdGoster+0x1a4>)
 8004834:	2101      	movs	r1, #1
 8004836:	2001      	movs	r0, #1
 8004838:	f7fb ff69 	bl	800070e <lcd_print>
		lcd_print(2, 4, "4");
 800483c:	4a2e      	ldr	r2, [pc, #184]	; (80048f8 <hataKoduLcdGoster+0x1b8>)
 800483e:	2104      	movs	r1, #4
 8004840:	2002      	movs	r0, #2
 8004842:	f7fb ff64 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 8004846:	4a29      	ldr	r2, [pc, #164]	; (80048ec <hataKoduLcdGoster+0x1ac>)
 8004848:	2107      	movs	r1, #7
 800484a:	2002      	movs	r0, #2
 800484c:	f7fb ff5f 	bl	800070e <lcd_print>
}
 8004850:	e040      	b.n	80048d4 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	2b05      	cmp	r3, #5
 8004856:	d11d      	bne.n	8004894 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004858:	4b20      	ldr	r3, [pc, #128]	; (80048dc <hataKoduLcdGoster+0x19c>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <hataKoduLcdGoster+0x1a0>)
 8004862:	2101      	movs	r1, #1
 8004864:	2001      	movs	r0, #1
 8004866:	f7fb ff52 	bl	800070e <lcd_print>
 800486a:	e008      	b.n	800487e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <hataKoduLcdGoster+0x19c>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d104      	bne.n	800487e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004874:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <hataKoduLcdGoster+0x1a4>)
 8004876:	2101      	movs	r1, #1
 8004878:	2001      	movs	r0, #1
 800487a:	f7fb ff48 	bl	800070e <lcd_print>
		lcd_print(2, 5, "5");
 800487e:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <hataKoduLcdGoster+0x1bc>)
 8004880:	2105      	movs	r1, #5
 8004882:	2002      	movs	r0, #2
 8004884:	f7fb ff43 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <hataKoduLcdGoster+0x1ac>)
 800488a:	2107      	movs	r1, #7
 800488c:	2002      	movs	r0, #2
 800488e:	f7fb ff3e 	bl	800070e <lcd_print>
}
 8004892:	e01f      	b.n	80048d4 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	2b06      	cmp	r3, #6
 8004898:	d11c      	bne.n	80048d4 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <hataKoduLcdGoster+0x19c>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80048a2:	4a0f      	ldr	r2, [pc, #60]	; (80048e0 <hataKoduLcdGoster+0x1a0>)
 80048a4:	2101      	movs	r1, #1
 80048a6:	2001      	movs	r0, #1
 80048a8:	f7fb ff31 	bl	800070e <lcd_print>
 80048ac:	e008      	b.n	80048c0 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <hataKoduLcdGoster+0x19c>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d104      	bne.n	80048c0 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80048b6:	4a0b      	ldr	r2, [pc, #44]	; (80048e4 <hataKoduLcdGoster+0x1a4>)
 80048b8:	2101      	movs	r1, #1
 80048ba:	2001      	movs	r0, #1
 80048bc:	f7fb ff27 	bl	800070e <lcd_print>
		lcd_print(2, 6, "6");
 80048c0:	4a0f      	ldr	r2, [pc, #60]	; (8004900 <hataKoduLcdGoster+0x1c0>)
 80048c2:	2106      	movs	r1, #6
 80048c4:	2002      	movs	r0, #2
 80048c6:	f7fb ff22 	bl	800070e <lcd_print>
		lcd_print(2, 7, "          ");
 80048ca:	4a08      	ldr	r2, [pc, #32]	; (80048ec <hataKoduLcdGoster+0x1ac>)
 80048cc:	2107      	movs	r1, #7
 80048ce:	2002      	movs	r0, #2
 80048d0:	f7fb ff1d 	bl	800070e <lcd_print>
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000b4c 	.word	0x20000b4c
 80048e0:	0800d104 	.word	0x0800d104
 80048e4:	0800d118 	.word	0x0800d118
 80048e8:	0800d12c 	.word	0x0800d12c
 80048ec:	0800d130 	.word	0x0800d130
 80048f0:	0800d13c 	.word	0x0800d13c
 80048f4:	0800d140 	.word	0x0800d140
 80048f8:	0800d144 	.word	0x0800d144
 80048fc:	0800d148 	.word	0x0800d148
 8004900:	0800d14c 	.word	0x0800d14c

08004904 <convertAndSendData>:

void convertAndSendData() {
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 800490a:	4a14      	ldr	r2, [pc, #80]	; (800495c <convertAndSendData+0x58>)
 800490c:	2101      	movs	r1, #1
 800490e:	2001      	movs	r0, #1
 8004910:	f7fb fefd 	bl	800070e <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8004914:	4a12      	ldr	r2, [pc, #72]	; (8004960 <convertAndSendData+0x5c>)
 8004916:	2101      	movs	r1, #1
 8004918:	2002      	movs	r0, #2
 800491a:	f7fb fef8 	bl	800070e <lcd_print>
	for(int i=0; i<2; i++) {
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	e00a      	b.n	800493a <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8004924:	f002 fb26 	bl	8006f74 <mergeData>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	490d      	ldr	r1, [pc, #52]	; (8004964 <convertAndSendData+0x60>)
 800492e:	480e      	ldr	r0, [pc, #56]	; (8004968 <convertAndSendData+0x64>)
 8004930:	f7fb fd44 	bl	80003bc <sendMachineData>
	for(int i=0; i<2; i++) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3301      	adds	r3, #1
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b01      	cmp	r3, #1
 800493e:	ddf1      	ble.n	8004924 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8004940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004944:	f003 fad0 	bl	8007ee8 <HAL_Delay>
	lcd_clear();
 8004948:	f7fb fef6 	bl	8000738 <lcd_clear>
	HAL_Delay(500);
 800494c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004950:	f003 faca 	bl	8007ee8 <HAL_Delay>
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	0800d150 	.word	0x0800d150
 8004960:	0800d15c 	.word	0x0800d15c
 8004964:	20000940 	.word	0x20000940
 8004968:	20000d84 	.word	0x20000d84

0800496c <eepromKontrol>:

void eepromKontrol(int type) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af04      	add	r7, sp, #16
 8004972:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8004974:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004978:	9302      	str	r3, [sp, #8]
 800497a:	233f      	movs	r3, #63	; 0x3f
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	4b9c      	ldr	r3, [pc, #624]	; (8004bf0 <eepromKontrol+0x284>)
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	233f      	movs	r3, #63	; 0x3f
 8004984:	2200      	movs	r2, #0
 8004986:	21a0      	movs	r1, #160	; 0xa0
 8004988:	489a      	ldr	r0, [pc, #616]	; (8004bf4 <eepromKontrol+0x288>)
 800498a:	f004 fc31 	bl	80091f0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 800498e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004992:	f003 faa9 	bl	8007ee8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004996:	4b96      	ldr	r3, [pc, #600]	; (8004bf0 <eepromKontrol+0x284>)
 8004998:	78da      	ldrb	r2, [r3, #3]
 800499a:	4b97      	ldr	r3, [pc, #604]	; (8004bf8 <eepromKontrol+0x28c>)
 800499c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800499e:	4b94      	ldr	r3, [pc, #592]	; (8004bf0 <eepromKontrol+0x284>)
 80049a0:	785a      	ldrb	r2, [r3, #1]
 80049a2:	4b96      	ldr	r3, [pc, #600]	; (8004bfc <eepromKontrol+0x290>)
 80049a4:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80049a6:	4b92      	ldr	r3, [pc, #584]	; (8004bf0 <eepromKontrol+0x284>)
 80049a8:	789a      	ldrb	r2, [r3, #2]
 80049aa:	4b95      	ldr	r3, [pc, #596]	; (8004c00 <eepromKontrol+0x294>)
 80049ac:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80049ae:	4b90      	ldr	r3, [pc, #576]	; (8004bf0 <eepromKontrol+0x284>)
 80049b0:	791a      	ldrb	r2, [r3, #4]
 80049b2:	4b94      	ldr	r3, [pc, #592]	; (8004c04 <eepromKontrol+0x298>)
 80049b4:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80049b6:	4b8e      	ldr	r3, [pc, #568]	; (8004bf0 <eepromKontrol+0x284>)
 80049b8:	795a      	ldrb	r2, [r3, #5]
 80049ba:	4b93      	ldr	r3, [pc, #588]	; (8004c08 <eepromKontrol+0x29c>)
 80049bc:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 80049be:	4b8c      	ldr	r3, [pc, #560]	; (8004bf0 <eepromKontrol+0x284>)
 80049c0:	799a      	ldrb	r2, [r3, #6]
 80049c2:	4b92      	ldr	r3, [pc, #584]	; (8004c0c <eepromKontrol+0x2a0>)
 80049c4:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80049c6:	4b8a      	ldr	r3, [pc, #552]	; (8004bf0 <eepromKontrol+0x284>)
 80049c8:	79da      	ldrb	r2, [r3, #7]
 80049ca:	4b91      	ldr	r3, [pc, #580]	; (8004c10 <eepromKontrol+0x2a4>)
 80049cc:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80049ce:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <eepromKontrol+0x284>)
 80049d0:	7a1a      	ldrb	r2, [r3, #8]
 80049d2:	4b90      	ldr	r3, [pc, #576]	; (8004c14 <eepromKontrol+0x2a8>)
 80049d4:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80049d6:	4b86      	ldr	r3, [pc, #536]	; (8004bf0 <eepromKontrol+0x284>)
 80049d8:	7a5a      	ldrb	r2, [r3, #9]
 80049da:	4b8f      	ldr	r3, [pc, #572]	; (8004c18 <eepromKontrol+0x2ac>)
 80049dc:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80049de:	4b84      	ldr	r3, [pc, #528]	; (8004bf0 <eepromKontrol+0x284>)
 80049e0:	7a9a      	ldrb	r2, [r3, #10]
 80049e2:	4b8e      	ldr	r3, [pc, #568]	; (8004c1c <eepromKontrol+0x2b0>)
 80049e4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80049e6:	4b82      	ldr	r3, [pc, #520]	; (8004bf0 <eepromKontrol+0x284>)
 80049e8:	7ada      	ldrb	r2, [r3, #11]
 80049ea:	4b8d      	ldr	r3, [pc, #564]	; (8004c20 <eepromKontrol+0x2b4>)
 80049ec:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80049ee:	4b80      	ldr	r3, [pc, #512]	; (8004bf0 <eepromKontrol+0x284>)
 80049f0:	7b1a      	ldrb	r2, [r3, #12]
 80049f2:	4b8c      	ldr	r3, [pc, #560]	; (8004c24 <eepromKontrol+0x2b8>)
 80049f4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80049f6:	4b7e      	ldr	r3, [pc, #504]	; (8004bf0 <eepromKontrol+0x284>)
 80049f8:	7b5a      	ldrb	r2, [r3, #13]
 80049fa:	4b8b      	ldr	r3, [pc, #556]	; (8004c28 <eepromKontrol+0x2bc>)
 80049fc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80049fe:	4b7c      	ldr	r3, [pc, #496]	; (8004bf0 <eepromKontrol+0x284>)
 8004a00:	7b9a      	ldrb	r2, [r3, #14]
 8004a02:	4b8a      	ldr	r3, [pc, #552]	; (8004c2c <eepromKontrol+0x2c0>)
 8004a04:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004a06:	4b7a      	ldr	r3, [pc, #488]	; (8004bf0 <eepromKontrol+0x284>)
 8004a08:	7bda      	ldrb	r2, [r3, #15]
 8004a0a:	4b89      	ldr	r3, [pc, #548]	; (8004c30 <eepromKontrol+0x2c4>)
 8004a0c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004a0e:	4b78      	ldr	r3, [pc, #480]	; (8004bf0 <eepromKontrol+0x284>)
 8004a10:	7c1a      	ldrb	r2, [r3, #16]
 8004a12:	4b88      	ldr	r3, [pc, #544]	; (8004c34 <eepromKontrol+0x2c8>)
 8004a14:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004a16:	4b76      	ldr	r3, [pc, #472]	; (8004bf0 <eepromKontrol+0x284>)
 8004a18:	7c5a      	ldrb	r2, [r3, #17]
 8004a1a:	4b87      	ldr	r3, [pc, #540]	; (8004c38 <eepromKontrol+0x2cc>)
 8004a1c:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004a1e:	4b74      	ldr	r3, [pc, #464]	; (8004bf0 <eepromKontrol+0x284>)
 8004a20:	7c9a      	ldrb	r2, [r3, #18]
 8004a22:	4b86      	ldr	r3, [pc, #536]	; (8004c3c <eepromKontrol+0x2d0>)
 8004a24:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004a26:	4b72      	ldr	r3, [pc, #456]	; (8004bf0 <eepromKontrol+0x284>)
 8004a28:	7cda      	ldrb	r2, [r3, #19]
 8004a2a:	4b85      	ldr	r3, [pc, #532]	; (8004c40 <eepromKontrol+0x2d4>)
 8004a2c:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004a2e:	4b70      	ldr	r3, [pc, #448]	; (8004bf0 <eepromKontrol+0x284>)
 8004a30:	7d1a      	ldrb	r2, [r3, #20]
 8004a32:	4b84      	ldr	r3, [pc, #528]	; (8004c44 <eepromKontrol+0x2d8>)
 8004a34:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004a36:	4b6e      	ldr	r3, [pc, #440]	; (8004bf0 <eepromKontrol+0x284>)
 8004a38:	7d5a      	ldrb	r2, [r3, #21]
 8004a3a:	4b83      	ldr	r3, [pc, #524]	; (8004c48 <eepromKontrol+0x2dc>)
 8004a3c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004a3e:	4b6c      	ldr	r3, [pc, #432]	; (8004bf0 <eepromKontrol+0x284>)
 8004a40:	7d9a      	ldrb	r2, [r3, #22]
 8004a42:	4b82      	ldr	r3, [pc, #520]	; (8004c4c <eepromKontrol+0x2e0>)
 8004a44:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004a46:	4b6a      	ldr	r3, [pc, #424]	; (8004bf0 <eepromKontrol+0x284>)
 8004a48:	7dda      	ldrb	r2, [r3, #23]
 8004a4a:	4b81      	ldr	r3, [pc, #516]	; (8004c50 <eepromKontrol+0x2e4>)
 8004a4c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004a4e:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <eepromKontrol+0x284>)
 8004a50:	7e1a      	ldrb	r2, [r3, #24]
 8004a52:	4b80      	ldr	r3, [pc, #512]	; (8004c54 <eepromKontrol+0x2e8>)
 8004a54:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004a56:	4b66      	ldr	r3, [pc, #408]	; (8004bf0 <eepromKontrol+0x284>)
 8004a58:	7e5a      	ldrb	r2, [r3, #25]
 8004a5a:	4b7f      	ldr	r3, [pc, #508]	; (8004c58 <eepromKontrol+0x2ec>)
 8004a5c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004a5e:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <eepromKontrol+0x284>)
 8004a60:	7e9a      	ldrb	r2, [r3, #26]
 8004a62:	4b7e      	ldr	r3, [pc, #504]	; (8004c5c <eepromKontrol+0x2f0>)
 8004a64:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004a66:	4b62      	ldr	r3, [pc, #392]	; (8004bf0 <eepromKontrol+0x284>)
 8004a68:	7eda      	ldrb	r2, [r3, #27]
 8004a6a:	4b7d      	ldr	r3, [pc, #500]	; (8004c60 <eepromKontrol+0x2f4>)
 8004a6c:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004a6e:	4b60      	ldr	r3, [pc, #384]	; (8004bf0 <eepromKontrol+0x284>)
 8004a70:	7f1a      	ldrb	r2, [r3, #28]
 8004a72:	4b7c      	ldr	r3, [pc, #496]	; (8004c64 <eepromKontrol+0x2f8>)
 8004a74:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004a76:	4b5e      	ldr	r3, [pc, #376]	; (8004bf0 <eepromKontrol+0x284>)
 8004a78:	7f5a      	ldrb	r2, [r3, #29]
 8004a7a:	4b7b      	ldr	r3, [pc, #492]	; (8004c68 <eepromKontrol+0x2fc>)
 8004a7c:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004a7e:	4b5c      	ldr	r3, [pc, #368]	; (8004bf0 <eepromKontrol+0x284>)
 8004a80:	7f9a      	ldrb	r2, [r3, #30]
 8004a82:	4b7a      	ldr	r3, [pc, #488]	; (8004c6c <eepromKontrol+0x300>)
 8004a84:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004a86:	4b5a      	ldr	r3, [pc, #360]	; (8004bf0 <eepromKontrol+0x284>)
 8004a88:	7fda      	ldrb	r2, [r3, #31]
 8004a8a:	4b79      	ldr	r3, [pc, #484]	; (8004c70 <eepromKontrol+0x304>)
 8004a8c:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004a8e:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <eepromKontrol+0x284>)
 8004a90:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004a94:	4b77      	ldr	r3, [pc, #476]	; (8004c74 <eepromKontrol+0x308>)
 8004a96:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004a98:	4b55      	ldr	r3, [pc, #340]	; (8004bf0 <eepromKontrol+0x284>)
 8004a9a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004a9e:	4b76      	ldr	r3, [pc, #472]	; (8004c78 <eepromKontrol+0x30c>)
 8004aa0:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004aa2:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <eepromKontrol+0x284>)
 8004aa4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004aa8:	4b74      	ldr	r3, [pc, #464]	; (8004c7c <eepromKontrol+0x310>)
 8004aaa:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004aac:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <eepromKontrol+0x284>)
 8004aae:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004ab2:	4b73      	ldr	r3, [pc, #460]	; (8004c80 <eepromKontrol+0x314>)
 8004ab4:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004ab6:	4b4e      	ldr	r3, [pc, #312]	; (8004bf0 <eepromKontrol+0x284>)
 8004ab8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004abc:	4b71      	ldr	r3, [pc, #452]	; (8004c84 <eepromKontrol+0x318>)
 8004abe:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8004ac0:	4b4b      	ldr	r3, [pc, #300]	; (8004bf0 <eepromKontrol+0x284>)
 8004ac2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004ac6:	4b70      	ldr	r3, [pc, #448]	; (8004c88 <eepromKontrol+0x31c>)
 8004ac8:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004aca:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <eepromKontrol+0x284>)
 8004acc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004ad0:	4b6e      	ldr	r3, [pc, #440]	; (8004c8c <eepromKontrol+0x320>)
 8004ad2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8004ad4:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <eepromKontrol+0x284>)
 8004ad6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004ada:	4b6d      	ldr	r3, [pc, #436]	; (8004c90 <eepromKontrol+0x324>)
 8004adc:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8004ade:	4b44      	ldr	r3, [pc, #272]	; (8004bf0 <eepromKontrol+0x284>)
 8004ae0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004ae4:	4b6b      	ldr	r3, [pc, #428]	; (8004c94 <eepromKontrol+0x328>)
 8004ae6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8004ae8:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <eepromKontrol+0x284>)
 8004aea:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004aee:	4b6a      	ldr	r3, [pc, #424]	; (8004c98 <eepromKontrol+0x32c>)
 8004af0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8004af2:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <eepromKontrol+0x284>)
 8004af4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004af8:	4b68      	ldr	r3, [pc, #416]	; (8004c9c <eepromKontrol+0x330>)
 8004afa:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8004afc:	4b3c      	ldr	r3, [pc, #240]	; (8004bf0 <eepromKontrol+0x284>)
 8004afe:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004b02:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <eepromKontrol+0x334>)
 8004b04:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004b06:	4b3a      	ldr	r3, [pc, #232]	; (8004bf0 <eepromKontrol+0x284>)
 8004b08:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004b0c:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <eepromKontrol+0x338>)
 8004b0e:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 8004b10:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <eepromKontrol+0x284>)
 8004b12:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004b16:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <eepromKontrol+0x33c>)
 8004b18:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004b1a:	4b35      	ldr	r3, [pc, #212]	; (8004bf0 <eepromKontrol+0x284>)
 8004b1c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004b20:	4b62      	ldr	r3, [pc, #392]	; (8004cac <eepromKontrol+0x340>)
 8004b22:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8004b24:	4b54      	ldr	r3, [pc, #336]	; (8004c78 <eepromKontrol+0x30c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fff9 	bl	8003b20 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004b2e:	4b51      	ldr	r3, [pc, #324]	; (8004c74 <eepromKontrol+0x308>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b09      	cmp	r3, #9
 8004b34:	d902      	bls.n	8004b3c <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 8004b36:	4b4f      	ldr	r3, [pc, #316]	; (8004c74 <eepromKontrol+0x308>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004b3c:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <eepromKontrol+0x304>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	d902      	bls.n	8004b4a <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 8004b44:	4b4a      	ldr	r3, [pc, #296]	; (8004c70 <eepromKontrol+0x304>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004b4a:	4b48      	ldr	r3, [pc, #288]	; (8004c6c <eepromKontrol+0x300>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b09      	cmp	r3, #9
 8004b50:	d902      	bls.n	8004b58 <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 8004b52:	4b46      	ldr	r3, [pc, #280]	; (8004c6c <eepromKontrol+0x300>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004b58:	4b43      	ldr	r3, [pc, #268]	; (8004c68 <eepromKontrol+0x2fc>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b09      	cmp	r3, #9
 8004b5e:	d902      	bls.n	8004b66 <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 8004b60:	4b41      	ldr	r3, [pc, #260]	; (8004c68 <eepromKontrol+0x2fc>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <eepromKontrol+0x2f8>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b09      	cmp	r3, #9
 8004b6c:	d902      	bls.n	8004b74 <eepromKontrol+0x208>
	    calismaSayisi1=0;
 8004b6e:	4b3d      	ldr	r3, [pc, #244]	; (8004c64 <eepromKontrol+0x2f8>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <eepromKontrol+0x290>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d902      	bls.n	8004b82 <eepromKontrol+0x216>
	    calismaSekli=0;
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <eepromKontrol+0x290>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004b82:	4b1f      	ldr	r3, [pc, #124]	; (8004c00 <eepromKontrol+0x294>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d902      	bls.n	8004b90 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <eepromKontrol+0x294>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004b90:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <eepromKontrol+0x298>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d902      	bls.n	8004b9e <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 8004b98:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <eepromKontrol+0x298>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004b9e:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <eepromKontrol+0x29c>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d902      	bls.n	8004bac <eepromKontrol+0x240>
	    altLimit=1;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <eepromKontrol+0x29c>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <eepromKontrol+0x2a0>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d902      	bls.n	8004bba <eepromKontrol+0x24e>
	    basincSalteri=1;
 8004bb4:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <eepromKontrol+0x2a0>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <eepromKontrol+0x2a4>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d902      	bls.n	8004bc8 <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <eepromKontrol+0x2a4>)
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004bc8:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <eepromKontrol+0x318>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d902      	bls.n	8004bd6 <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8004bd0:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <eepromKontrol+0x318>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <eepromKontrol+0x2a8>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d902      	bls.n	8004be4 <eepromKontrol+0x278>
	    kapi1Tip=1;
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <eepromKontrol+0x2a8>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <eepromKontrol+0x2ac>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b05      	cmp	r3, #5
 8004bea:	d964      	bls.n	8004cb6 <eepromKontrol+0x34a>
 8004bec:	e060      	b.n	8004cb0 <eepromKontrol+0x344>
 8004bee:	bf00      	nop
 8004bf0:	20000ac0 	.word	0x20000ac0
 8004bf4:	20000ce8 	.word	0x20000ce8
 8004bf8:	20000aff 	.word	0x20000aff
 8004bfc:	20000b2d 	.word	0x20000b2d
 8004c00:	20000b30 	.word	0x20000b30
 8004c04:	20000b31 	.word	0x20000b31
 8004c08:	20000b32 	.word	0x20000b32
 8004c0c:	20000b33 	.word	0x20000b33
 8004c10:	20000b34 	.word	0x20000b34
 8004c14:	20000b35 	.word	0x20000b35
 8004c18:	20000b45 	.word	0x20000b45
 8004c1c:	20000b36 	.word	0x20000b36
 8004c20:	20000b46 	.word	0x20000b46
 8004c24:	20000b37 	.word	0x20000b37
 8004c28:	20000b47 	.word	0x20000b47
 8004c2c:	20000b3a 	.word	0x20000b3a
 8004c30:	20000b3b 	.word	0x20000b3b
 8004c34:	20000b3c 	.word	0x20000b3c
 8004c38:	20000b3d 	.word	0x20000b3d
 8004c3c:	20000b3e 	.word	0x20000b3e
 8004c40:	20000b3f 	.word	0x20000b3f
 8004c44:	20000b40 	.word	0x20000b40
 8004c48:	20000b41 	.word	0x20000b41
 8004c4c:	20000b42 	.word	0x20000b42
 8004c50:	20000b43 	.word	0x20000b43
 8004c54:	20000b44 	.word	0x20000b44
 8004c58:	20000b48 	.word	0x20000b48
 8004c5c:	20000b4a 	.word	0x20000b4a
 8004c60:	20000b28 	.word	0x20000b28
 8004c64:	20000b29 	.word	0x20000b29
 8004c68:	20000b2a 	.word	0x20000b2a
 8004c6c:	20000947 	.word	0x20000947
 8004c70:	20000948 	.word	0x20000948
 8004c74:	20000b2b 	.word	0x20000b2b
 8004c78:	20000b4c 	.word	0x20000b4c
 8004c7c:	20000b39 	.word	0x20000b39
 8004c80:	20000b4b 	.word	0x20000b4b
 8004c84:	20000b38 	.word	0x20000b38
 8004c88:	20000b4d 	.word	0x20000b4d
 8004c8c:	20000b4e 	.word	0x20000b4e
 8004c90:	20000b4f 	.word	0x20000b4f
 8004c94:	20000b50 	.word	0x20000b50
 8004c98:	20000b51 	.word	0x20000b51
 8004c9c:	20000b52 	.word	0x20000b52
 8004ca0:	20000b53 	.word	0x20000b53
 8004ca4:	20000b54 	.word	0x20000b54
 8004ca8:	20000b55 	.word	0x20000b55
 8004cac:	20000b56 	.word	0x20000b56
	    kapi1AcSure=5;
 8004cb0:	4b4d      	ldr	r3, [pc, #308]	; (8004de8 <eepromKontrol+0x47c>)
 8004cb2:	2205      	movs	r2, #5
 8004cb4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004cb6:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <eepromKontrol+0x480>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d902      	bls.n	8004cc4 <eepromKontrol+0x358>
	    kapi2Tip=1;
 8004cbe:	4b4b      	ldr	r3, [pc, #300]	; (8004dec <eepromKontrol+0x480>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004cc4:	4b4a      	ldr	r3, [pc, #296]	; (8004df0 <eepromKontrol+0x484>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	d902      	bls.n	8004cd2 <eepromKontrol+0x366>
	    kapi2AcSure=5;
 8004ccc:	4b48      	ldr	r3, [pc, #288]	; (8004df0 <eepromKontrol+0x484>)
 8004cce:	2205      	movs	r2, #5
 8004cd0:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004cd2:	4b48      	ldr	r3, [pc, #288]	; (8004df4 <eepromKontrol+0x488>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d902      	bls.n	8004ce0 <eepromKontrol+0x374>
	    kapitablaTip=1;
 8004cda:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <eepromKontrol+0x488>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004ce0:	4b45      	ldr	r3, [pc, #276]	; (8004df8 <eepromKontrol+0x48c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d902      	bls.n	8004cee <eepromKontrol+0x382>
	    kapiTablaAcKonum=2;
 8004ce8:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <eepromKontrol+0x48c>)
 8004cea:	2202      	movs	r2, #2
 8004cec:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004cee:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <eepromKontrol+0x490>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d902      	bls.n	8004cfc <eepromKontrol+0x390>
	    kapiTablaAcSure=5;
 8004cf6:	4b41      	ldr	r3, [pc, #260]	; (8004dfc <eepromKontrol+0x490>)
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004cfc:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <eepromKontrol+0x494>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d902      	bls.n	8004d0a <eepromKontrol+0x39e>
	    yukariYavasLimit=0;
 8004d04:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <eepromKontrol+0x494>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004d0a:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <eepromKontrol+0x498>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d902      	bls.n	8004d18 <eepromKontrol+0x3ac>
	    devirmeYuruyusSecim=0;
 8004d12:	4b3c      	ldr	r3, [pc, #240]	; (8004e04 <eepromKontrol+0x498>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004d18:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <eepromKontrol+0x49c>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d902      	bls.n	8004d26 <eepromKontrol+0x3ba>
	    devirmeYukariIleriLimit=1;
 8004d20:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <eepromKontrol+0x49c>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <eepromKontrol+0x4a0>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d902      	bls.n	8004d34 <eepromKontrol+0x3c8>
	    devirmeAsagiGeriLimit=1;
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <eepromKontrol+0x4a0>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004d34:	4b36      	ldr	r3, [pc, #216]	; (8004e10 <eepromKontrol+0x4a4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d902      	bls.n	8004d42 <eepromKontrol+0x3d6>
	    devirmeSilindirTipi=0;
 8004d3c:	4b34      	ldr	r3, [pc, #208]	; (8004e10 <eepromKontrol+0x4a4>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004d42:	4b34      	ldr	r3, [pc, #208]	; (8004e14 <eepromKontrol+0x4a8>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d902      	bls.n	8004d50 <eepromKontrol+0x3e4>
	    platformSilindirTipi=0;
 8004d4a:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <eepromKontrol+0x4a8>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004d50:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <eepromKontrol+0x4ac>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d902      	bls.n	8004d5e <eepromKontrol+0x3f2>
	    yukariValfTmr=0;
 8004d58:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <eepromKontrol+0x4ac>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004d5e:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <eepromKontrol+0x4b0>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d902      	bls.n	8004d6c <eepromKontrol+0x400>
	    asagiValfTmr=0;
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <eepromKontrol+0x4b0>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004d6c:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <eepromKontrol+0x4b4>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d902      	bls.n	8004d7a <eepromKontrol+0x40e>
	    devirmeYukariIleriTmr=0;
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <eepromKontrol+0x4b4>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004d7a:	4b2a      	ldr	r3, [pc, #168]	; (8004e24 <eepromKontrol+0x4b8>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d902      	bls.n	8004d88 <eepromKontrol+0x41c>
	    devirmeAsagiGeriTmr=0;
 8004d82:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <eepromKontrol+0x4b8>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <eepromKontrol+0x4bc>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2bb4      	cmp	r3, #180	; 0xb4
 8004d8e:	d902      	bls.n	8004d96 <eepromKontrol+0x42a>
	    makineCalismaTmr=60;
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <eepromKontrol+0x4bc>)
 8004d92:	223c      	movs	r2, #60	; 0x3c
 8004d94:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004d96:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <eepromKontrol+0x4c0>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d902      	bls.n	8004da4 <eepromKontrol+0x438>
	    buzzer=0;
 8004d9e:	4b23      	ldr	r3, [pc, #140]	; (8004e2c <eepromKontrol+0x4c0>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004da4:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <eepromKontrol+0x4c4>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d902      	bls.n	8004db2 <eepromKontrol+0x446>
	    demoMode=0;
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <eepromKontrol+0x4c4>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004db2:	4b20      	ldr	r3, [pc, #128]	; (8004e34 <eepromKontrol+0x4c8>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d902      	bls.n	8004dc0 <eepromKontrol+0x454>
	    calismaSayModu=0;
 8004dba:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <eepromKontrol+0x4c8>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <eepromKontrol+0x4cc>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d902      	bls.n	8004dce <eepromKontrol+0x462>
	    dilSecim=0;
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <eepromKontrol+0x4cc>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dd2:	f003 f889 	bl	8007ee8 <HAL_Delay>

	if(type == 1) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <eepromKontrol+0x474>
		convertAndSendData();
 8004ddc:	f7ff fd92 	bl	8004904 <convertAndSendData>
	}
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000b45 	.word	0x20000b45
 8004dec:	20000b36 	.word	0x20000b36
 8004df0:	20000b46 	.word	0x20000b46
 8004df4:	20000b37 	.word	0x20000b37
 8004df8:	20000b39 	.word	0x20000b39
 8004dfc:	20000b47 	.word	0x20000b47
 8004e00:	20000b3a 	.word	0x20000b3a
 8004e04:	20000b3b 	.word	0x20000b3b
 8004e08:	20000b3c 	.word	0x20000b3c
 8004e0c:	20000b3d 	.word	0x20000b3d
 8004e10:	20000b3e 	.word	0x20000b3e
 8004e14:	20000b3f 	.word	0x20000b3f
 8004e18:	20000b40 	.word	0x20000b40
 8004e1c:	20000b41 	.word	0x20000b41
 8004e20:	20000b42 	.word	0x20000b42
 8004e24:	20000b43 	.word	0x20000b43
 8004e28:	20000b44 	.word	0x20000b44
 8004e2c:	20000b48 	.word	0x20000b48
 8004e30:	20000b4a 	.word	0x20000b4a
 8004e34:	20000b4b 	.word	0x20000b4b
 8004e38:	20000b4c 	.word	0x20000b4c

08004e3c <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b089      	sub	sp, #36	; 0x24
 8004e40:	af04      	add	r7, sp, #16
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004e46:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <hata2EEPROM+0xa4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1e5a      	subs	r2, r3, #1
 8004e4c:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <hata2EEPROM+0xa8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	4a25      	ldr	r2, [pc, #148]	; (8004ee8 <hata2EEPROM+0xac>)
 8004e54:	5cd3      	ldrb	r3, [r2, r3]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004e5a:	f000 f849 	bl	8004ef0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004e5e:	e000      	b.n	8004e62 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004e60:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e012      	b.n	8004e8e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <hata2EEPROM+0xa8>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <hata2EEPROM+0xac>)
 8004e72:	5cd3      	ldrb	r3, [r2, r3]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d107      	bne.n	8004e88 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004e78:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <hata2EEPROM+0xa8>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	4919      	ldr	r1, [pc, #100]	; (8004ee8 <hata2EEPROM+0xac>)
 8004e82:	79fa      	ldrb	r2, [r7, #7]
 8004e84:	54ca      	strb	r2, [r1, r3]
					break;
 8004e86:	e007      	b.n	8004e98 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <hata2EEPROM+0xa4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	dbe7      	blt.n	8004e68 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <hata2EEPROM+0xa8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	b299      	uxth	r1, r3
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <hata2EEPROM+0xa4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	b298      	uxth	r0, r3
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <hata2EEPROM+0xa8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a0f      	ldr	r2, [pc, #60]	; (8004ee8 <hata2EEPROM+0xac>)
 8004eaa:	4413      	add	r3, r2
 8004eac:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <hata2EEPROM+0xa4>)
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004eb6:	9402      	str	r4, [sp, #8]
 8004eb8:	9201      	str	r2, [sp, #4]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	21a0      	movs	r1, #160	; 0xa0
 8004ec2:	480a      	ldr	r0, [pc, #40]	; (8004eec <hata2EEPROM+0xb0>)
 8004ec4:	f004 f89a 	bl	8008ffc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ecc:	f003 f80c 	bl	8007ee8 <HAL_Delay>
	eepromKontrol(1);
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	f7ff fd4b 	bl	800496c <eepromKontrol>
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000938 	.word	0x20000938
 8004ee4:	2000093c 	.word	0x2000093c
 8004ee8:	20000ac0 	.word	0x20000ac0
 8004eec:	20000ce8 	.word	0x20000ce8

08004ef0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	e009      	b.n	8004f10 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004efc:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <eepromDataFillWithEmpty+0x38>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f04:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <eepromDataFillWithEmpty+0x3c>)
 8004f06:	2100      	movs	r1, #0
 8004f08:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <eepromDataFillWithEmpty+0x40>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	dbf0      	blt.n	8004efc <eepromDataFillWithEmpty+0xc>
	}
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000910 	.word	0x20000910
 8004f2c:	20000ac0 	.word	0x20000ac0
 8004f30:	20000938 	.word	0x20000938

08004f34 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
	timer1=millis;
 8004f38:	4b47      	ldr	r3, [pc, #284]	; (8005058 <bekle+0x124>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a47      	ldr	r2, [pc, #284]	; (800505c <bekle+0x128>)
 8004f3e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f40:	e002      	b.n	8004f48 <bekle+0x14>
    	butonKontrol = 1;
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <bekle+0x12c>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4846      	ldr	r0, [pc, #280]	; (8005064 <bekle+0x130>)
 8004f4c:	f003 fd9c 	bl	8008a88 <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d109      	bne.n	8004f6a <bekle+0x36>
 8004f56:	4b40      	ldr	r3, [pc, #256]	; (8005058 <bekle+0x124>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b40      	ldr	r3, [pc, #256]	; (800505c <bekle+0x128>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d0ef      	beq.n	8004f42 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f62:	e002      	b.n	8004f6a <bekle+0x36>
    	butonKontrol = 1;
 8004f64:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <bekle+0x12c>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f6a:	2108      	movs	r1, #8
 8004f6c:	483e      	ldr	r0, [pc, #248]	; (8005068 <bekle+0x134>)
 8004f6e:	f003 fd8b 	bl	8008a88 <HAL_GPIO_ReadPin>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d109      	bne.n	8004f8c <bekle+0x58>
 8004f78:	4b37      	ldr	r3, [pc, #220]	; (8005058 <bekle+0x124>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b37      	ldr	r3, [pc, #220]	; (800505c <bekle+0x128>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d0ef      	beq.n	8004f64 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f84:	e002      	b.n	8004f8c <bekle+0x58>
    	butonKontrol = 1;
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <bekle+0x12c>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	4835      	ldr	r0, [pc, #212]	; (8005064 <bekle+0x130>)
 8004f90:	f003 fd7a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d109      	bne.n	8004fae <bekle+0x7a>
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <bekle+0x124>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b2f      	ldr	r3, [pc, #188]	; (800505c <bekle+0x128>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d0ef      	beq.n	8004f86 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004fa6:	e002      	b.n	8004fae <bekle+0x7a>
    	butonKontrol = 1;
 8004fa8:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <bekle+0x12c>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004fae:	2104      	movs	r1, #4
 8004fb0:	482c      	ldr	r0, [pc, #176]	; (8005064 <bekle+0x130>)
 8004fb2:	f003 fd69 	bl	8008a88 <HAL_GPIO_ReadPin>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d109      	bne.n	8004fd0 <bekle+0x9c>
 8004fbc:	4b26      	ldr	r3, [pc, #152]	; (8005058 <bekle+0x124>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b26      	ldr	r3, [pc, #152]	; (800505c <bekle+0x128>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d0ef      	beq.n	8004fa8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004fc8:	e002      	b.n	8004fd0 <bekle+0x9c>
    	butonKontrol = 1;
 8004fca:	4b25      	ldr	r3, [pc, #148]	; (8005060 <bekle+0x12c>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004fd0:	2108      	movs	r1, #8
 8004fd2:	4824      	ldr	r0, [pc, #144]	; (8005064 <bekle+0x130>)
 8004fd4:	f003 fd58 	bl	8008a88 <HAL_GPIO_ReadPin>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d109      	bne.n	8004ff2 <bekle+0xbe>
 8004fde:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <bekle+0x124>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	; (800505c <bekle+0x128>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d0ef      	beq.n	8004fca <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004fea:	e002      	b.n	8004ff2 <bekle+0xbe>
    	butonKontrol = 1;
 8004fec:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <bekle+0x12c>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	481c      	ldr	r0, [pc, #112]	; (8005068 <bekle+0x134>)
 8004ff6:	f003 fd47 	bl	8008a88 <HAL_GPIO_ReadPin>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <bekle+0xe0>
 8005000:	4b15      	ldr	r3, [pc, #84]	; (8005058 <bekle+0x124>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <bekle+0x128>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d0ef      	beq.n	8004fec <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800500c:	e002      	b.n	8005014 <bekle+0xe0>
    	butonKontrol = 1;
 800500e:	4b14      	ldr	r3, [pc, #80]	; (8005060 <bekle+0x12c>)
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005018:	4813      	ldr	r0, [pc, #76]	; (8005068 <bekle+0x134>)
 800501a:	f003 fd35 	bl	8008a88 <HAL_GPIO_ReadPin>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <bekle+0x104>
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <bekle+0x124>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <bekle+0x128>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d0ee      	beq.n	800500e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005030:	e002      	b.n	8005038 <bekle+0x104>
    	butonKontrol = 1;
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <bekle+0x12c>)
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800503c:	480a      	ldr	r0, [pc, #40]	; (8005068 <bekle+0x134>)
 800503e:	f003 fd23 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <bekle+0x120>
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <bekle+0x124>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <bekle+0x128>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d0ee      	beq.n	8005032 <bekle+0xfe>
    }

}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000b08 	.word	0x20000b08
 800505c:	20000b10 	.word	0x20000b10
 8005060:	20000b5a 	.word	0x20000b5a
 8005064:	40010800 	.word	0x40010800
 8005068:	40011000 	.word	0x40011000

0800506c <i2cTest>:

void i2cTest() {
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8005072:	463b      	mov	r3, r7
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800507e:	4b50      	ldr	r3, [pc, #320]	; (80051c0 <i2cTest+0x154>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b4e      	ldr	r3, [pc, #312]	; (80051c0 <i2cTest+0x154>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800508e:	484c      	ldr	r0, [pc, #304]	; (80051c0 <i2cTest+0x154>)
 8005090:	f003 fe86 	bl	8008da0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005094:	23c0      	movs	r3, #192	; 0xc0
 8005096:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005098:	2311      	movs	r3, #17
 800509a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800509c:	2301      	movs	r3, #1
 800509e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80050a0:	2303      	movs	r3, #3
 80050a2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80050a4:	463b      	mov	r3, r7
 80050a6:	4619      	mov	r1, r3
 80050a8:	4846      	ldr	r0, [pc, #280]	; (80051c4 <i2cTest+0x158>)
 80050aa:	f003 fa8d 	bl	80085c8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80050ae:	2201      	movs	r2, #1
 80050b0:	2140      	movs	r1, #64	; 0x40
 80050b2:	4844      	ldr	r0, [pc, #272]	; (80051c4 <i2cTest+0x158>)
 80050b4:	f003 fcff 	bl	8008ab6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80050b8:	2201      	movs	r2, #1
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	4841      	ldr	r0, [pc, #260]	; (80051c4 <i2cTest+0x158>)
 80050be:	f003 fcfa 	bl	8008ab6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80050c2:	200a      	movs	r0, #10
 80050c4:	f002 ff10 	bl	8007ee8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80050c8:	bf00      	nop
 80050ca:	2140      	movs	r1, #64	; 0x40
 80050cc:	483d      	ldr	r0, [pc, #244]	; (80051c4 <i2cTest+0x158>)
 80050ce:	f003 fcdb 	bl	8008a88 <HAL_GPIO_ReadPin>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d006      	beq.n	80050e6 <i2cTest+0x7a>
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	483a      	ldr	r0, [pc, #232]	; (80051c4 <i2cTest+0x158>)
 80050dc:	f003 fcd4 	bl	8008a88 <HAL_GPIO_ReadPin>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d1f1      	bne.n	80050ca <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80050e6:	2200      	movs	r2, #0
 80050e8:	2180      	movs	r1, #128	; 0x80
 80050ea:	4836      	ldr	r0, [pc, #216]	; (80051c4 <i2cTest+0x158>)
 80050ec:	f003 fce3 	bl	8008ab6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80050f0:	200a      	movs	r0, #10
 80050f2:	f002 fef9 	bl	8007ee8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80050f6:	bf00      	nop
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	4832      	ldr	r0, [pc, #200]	; (80051c4 <i2cTest+0x158>)
 80050fc:	f003 fcc4 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005100:	4603      	mov	r3, r0
 8005102:	2b01      	cmp	r3, #1
 8005104:	d0f8      	beq.n	80050f8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005106:	2200      	movs	r2, #0
 8005108:	2140      	movs	r1, #64	; 0x40
 800510a:	482e      	ldr	r0, [pc, #184]	; (80051c4 <i2cTest+0x158>)
 800510c:	f003 fcd3 	bl	8008ab6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005110:	200a      	movs	r0, #10
 8005112:	f002 fee9 	bl	8007ee8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8005116:	bf00      	nop
 8005118:	2140      	movs	r1, #64	; 0x40
 800511a:	482a      	ldr	r0, [pc, #168]	; (80051c4 <i2cTest+0x158>)
 800511c:	f003 fcb4 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d0f8      	beq.n	8005118 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005126:	2201      	movs	r2, #1
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	4826      	ldr	r0, [pc, #152]	; (80051c4 <i2cTest+0x158>)
 800512c:	f003 fcc3 	bl	8008ab6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005130:	200a      	movs	r0, #10
 8005132:	f002 fed9 	bl	8007ee8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8005136:	bf00      	nop
 8005138:	2140      	movs	r1, #64	; 0x40
 800513a:	4822      	ldr	r0, [pc, #136]	; (80051c4 <i2cTest+0x158>)
 800513c:	f003 fca4 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005140:	4603      	mov	r3, r0
 8005142:	2b01      	cmp	r3, #1
 8005144:	d1f8      	bne.n	8005138 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005146:	2201      	movs	r2, #1
 8005148:	2180      	movs	r1, #128	; 0x80
 800514a:	481e      	ldr	r0, [pc, #120]	; (80051c4 <i2cTest+0x158>)
 800514c:	f003 fcb3 	bl	8008ab6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005150:	200a      	movs	r0, #10
 8005152:	f002 fec9 	bl	8007ee8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005156:	bf00      	nop
 8005158:	2180      	movs	r1, #128	; 0x80
 800515a:	481a      	ldr	r0, [pc, #104]	; (80051c4 <i2cTest+0x158>)
 800515c:	f003 fc94 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d1f8      	bne.n	8005158 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005166:	23c0      	movs	r3, #192	; 0xc0
 8005168:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800516a:	2312      	movs	r3, #18
 800516c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800516e:	2301      	movs	r3, #1
 8005170:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005172:	2303      	movs	r3, #3
 8005174:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005176:	463b      	mov	r3, r7
 8005178:	4619      	mov	r1, r3
 800517a:	4812      	ldr	r0, [pc, #72]	; (80051c4 <i2cTest+0x158>)
 800517c:	f003 fa24 	bl	80085c8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <i2cTest+0x154>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <i2cTest+0x154>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800518e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <i2cTest+0x154>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <i2cTest+0x154>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800519e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <i2cTest+0x154>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <i2cTest+0x154>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80051b0:	4803      	ldr	r0, [pc, #12]	; (80051c0 <i2cTest+0x154>)
 80051b2:	f003 fcb1 	bl	8008b18 <HAL_I2C_Init>
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000ce8 	.word	0x20000ce8
 80051c4:	40010c00 	.word	0x40010c00

080051c8 <checkLCDBacklight>:

void checkLCDBacklight() {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <checkLCDBacklight+0x34>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <checkLCDBacklight+0x38>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <checkLCDBacklight+0x3c>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	460b      	mov	r3, r1
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d303      	bcc.n	80051f0 <checkLCDBacklight+0x28>
				lcd_backlight(0);
 80051e8:	2000      	movs	r0, #0
 80051ea:	f7fb faaf 	bl	800074c <lcd_backlight>
			} else {
				lcd_backlight(1);
			}
}
 80051ee:	e002      	b.n	80051f6 <checkLCDBacklight+0x2e>
				lcd_backlight(1);
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7fb faab 	bl	800074c <lcd_backlight>
}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000b08 	.word	0x20000b08
 8005200:	20000b24 	.word	0x20000b24
 8005204:	20000946 	.word	0x20000946

08005208 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <checkBasincSalteri+0x54>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <checkBasincSalteri+0x12>
		basincVar=1;
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <checkBasincSalteri+0x58>)
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 800521a:	4b10      	ldr	r3, [pc, #64]	; (800525c <checkBasincSalteri+0x54>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d119      	bne.n	8005256 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8005222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005226:	480f      	ldr	r0, [pc, #60]	; (8005264 <checkBasincSalteri+0x5c>)
 8005228:	f003 fc2e 	bl	8008a88 <HAL_GPIO_ReadPin>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <checkBasincSalteri+0x60>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <checkBasincSalteri+0x64>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d90a      	bls.n	8005256 <checkBasincSalteri+0x4e>
				basincVar=1;
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <checkBasincSalteri+0x58>)
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8005246:	e006      	b.n	8005256 <checkBasincSalteri+0x4e>
			timer5=millis;
 8005248:	4b07      	ldr	r3, [pc, #28]	; (8005268 <checkBasincSalteri+0x60>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a07      	ldr	r2, [pc, #28]	; (800526c <checkBasincSalteri+0x64>)
 800524e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <checkBasincSalteri+0x58>)
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000b33 	.word	0x20000b33
 8005260:	20000b2f 	.word	0x20000b2f
 8005264:	40011000 	.word	0x40011000
 8005268:	20000b08 	.word	0x20000b08
 800526c:	20000b20 	.word	0x20000b20

08005270 <checkBasGonder>:

void checkBasGonder() {
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <checkBasGonder+0x74>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d10b      	bne.n	8005294 <checkBasGonder+0x24>
 800527c:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <checkBasGonder+0x78>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <checkBasGonder+0x24>
 8005284:	4b19      	ldr	r3, [pc, #100]	; (80052ec <checkBasGonder+0x7c>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800528c:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <checkBasGonder+0x80>)
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e009      	b.n	80052a8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005294:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <checkBasGonder+0x78>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	f083 0301 	eor.w	r3, r3, #1
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <checkBasGonder+0x80>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <checkBasGonder+0x74>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d10b      	bne.n	80052c8 <checkBasGonder+0x58>
 80052b0:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <checkBasGonder+0x84>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <checkBasGonder+0x58>
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <checkBasGonder+0x7c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <checkBasGonder+0x88>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80052c6:	e009      	b.n	80052dc <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <checkBasGonder+0x84>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f083 0301 	eor.w	r3, r3, #1
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <checkBasGonder+0x88>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	20000b2d 	.word	0x20000b2d
 80052e8:	20000b60 	.word	0x20000b60
 80052ec:	20000b3b 	.word	0x20000b3b
 80052f0:	20000b67 	.word	0x20000b67
 80052f4:	20000b63 	.word	0x20000b63
 80052f8:	20000b68 	.word	0x20000b68

080052fc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005300:	4b24      	ldr	r3, [pc, #144]	; (8005394 <checkKapiSecimleri+0x98>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <checkKapiSecimleri+0x9c>)
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <checkKapiSecimleri+0x98>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d10e      	bne.n	8005334 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800531a:	4820      	ldr	r0, [pc, #128]	; (800539c <checkKapiSecimleri+0xa0>)
 800531c:	f003 fbb4 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d103      	bne.n	800532e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8005326:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <checkKapiSecimleri+0x9c>)
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e002      	b.n	8005334 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800532e:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <checkKapiSecimleri+0x9c>)
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8005334:	4b17      	ldr	r3, [pc, #92]	; (8005394 <checkKapiSecimleri+0x98>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d10e      	bne.n	800535a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800533c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005340:	4816      	ldr	r0, [pc, #88]	; (800539c <checkKapiSecimleri+0xa0>)
 8005342:	f003 fba1 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d103      	bne.n	8005354 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800534c:	4b12      	ldr	r3, [pc, #72]	; (8005398 <checkKapiSecimleri+0x9c>)
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e002      	b.n	800535a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <checkKapiSecimleri+0x9c>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <checkKapiSecimleri+0x98>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d116      	bne.n	8005390 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8005362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005366:	480d      	ldr	r0, [pc, #52]	; (800539c <checkKapiSecimleri+0xa0>)
 8005368:	f003 fb8e 	bl	8008a88 <HAL_GPIO_ReadPin>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <checkKapiSecimleri+0x8e>
 8005372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005376:	4809      	ldr	r0, [pc, #36]	; (800539c <checkKapiSecimleri+0xa0>)
 8005378:	f003 fb86 	bl	8008a88 <HAL_GPIO_ReadPin>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d103      	bne.n	800538a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <checkKapiSecimleri+0x9c>)
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8005388:	e002      	b.n	8005390 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <checkKapiSecimleri+0x9c>)
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
}
 8005390:	bf00      	nop
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000b34 	.word	0x20000b34
 8005398:	20000b7e 	.word	0x20000b7e
 800539c:	40010800 	.word	0x40010800

080053a0 <checkAktifCalisma>:

void checkAktifCalisma() {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80053a4:	4b62      	ldr	r3, [pc, #392]	; (8005530 <checkAktifCalisma+0x190>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f041 8332 	bne.w	8006a12 <checkAktifCalisma+0x1672>
 80053ae:	4b61      	ldr	r3, [pc, #388]	; (8005534 <checkAktifCalisma+0x194>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f041 832d 	bne.w	8006a12 <checkAktifCalisma+0x1672>

		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80053b8:	4b5f      	ldr	r3, [pc, #380]	; (8005538 <checkAktifCalisma+0x198>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d11a      	bne.n	80053f6 <checkAktifCalisma+0x56>
 80053c0:	4b5e      	ldr	r3, [pc, #376]	; (800553c <checkAktifCalisma+0x19c>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d116      	bne.n	80053f6 <checkAktifCalisma+0x56>
 80053c8:	4b5d      	ldr	r3, [pc, #372]	; (8005540 <checkAktifCalisma+0x1a0>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <checkAktifCalisma+0x46>
 80053d0:	4b5c      	ldr	r3, [pc, #368]	; (8005544 <checkAktifCalisma+0x1a4>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f083 0301 	eor.w	r3, r3, #1
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <checkAktifCalisma+0x46>
 80053de:	4b5a      	ldr	r3, [pc, #360]	; (8005548 <checkAktifCalisma+0x1a8>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d007      	beq.n	80053f6 <checkAktifCalisma+0x56>
 80053e6:	4b59      	ldr	r3, [pc, #356]	; (800554c <checkAktifCalisma+0x1ac>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d018      	beq.n	8005420 <checkAktifCalisma+0x80>
 80053ee:	4b58      	ldr	r3, [pc, #352]	; (8005550 <checkAktifCalisma+0x1b0>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d114      	bne.n	8005420 <checkAktifCalisma+0x80>
 80053f6:	4b57      	ldr	r3, [pc, #348]	; (8005554 <checkAktifCalisma+0x1b4>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d010      	beq.n	8005420 <checkAktifCalisma+0x80>
 80053fe:	4b56      	ldr	r3, [pc, #344]	; (8005558 <checkAktifCalisma+0x1b8>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005406:	2201      	movs	r2, #1
 8005408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800540c:	4853      	ldr	r0, [pc, #332]	; (800555c <checkAktifCalisma+0x1bc>)
 800540e:	f003 fb52 	bl	8008ab6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8005412:	4b53      	ldr	r3, [pc, #332]	; (8005560 <checkAktifCalisma+0x1c0>)
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8005418:	4b52      	ldr	r3, [pc, #328]	; (8005564 <checkAktifCalisma+0x1c4>)
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	e008      	b.n	8005432 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005420:	2200      	movs	r2, #0
 8005422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005426:	484d      	ldr	r0, [pc, #308]	; (800555c <checkAktifCalisma+0x1bc>)
 8005428:	f003 fb45 	bl	8008ab6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 800542c:	4b4c      	ldr	r3, [pc, #304]	; (8005560 <checkAktifCalisma+0x1c0>)
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8005432:	4b40      	ldr	r3, [pc, #256]	; (8005534 <checkAktifCalisma+0x194>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d160      	bne.n	80054fc <checkAktifCalisma+0x15c>
 800543a:	4b46      	ldr	r3, [pc, #280]	; (8005554 <checkAktifCalisma+0x1b4>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d05c      	beq.n	80054fc <checkAktifCalisma+0x15c>
 8005442:	4b45      	ldr	r3, [pc, #276]	; (8005558 <checkAktifCalisma+0x1b8>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d058      	beq.n	80054fc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800544a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800544e:	4843      	ldr	r0, [pc, #268]	; (800555c <checkAktifCalisma+0x1bc>)
 8005450:	f003 fb1a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <checkAktifCalisma+0xc2>
 800545a:	4b43      	ldr	r3, [pc, #268]	; (8005568 <checkAktifCalisma+0x1c8>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04c      	beq.n	80054fc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005462:	2102      	movs	r1, #2
 8005464:	4841      	ldr	r0, [pc, #260]	; (800556c <checkAktifCalisma+0x1cc>)
 8005466:	f003 fb0f 	bl	8008a88 <HAL_GPIO_ReadPin>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d145      	bne.n	80054fc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005470:	4b3f      	ldr	r3, [pc, #252]	; (8005570 <checkAktifCalisma+0x1d0>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d041      	beq.n	80054fc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800547c:	4837      	ldr	r0, [pc, #220]	; (800555c <checkAktifCalisma+0x1bc>)
 800547e:	f003 fb03 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	d10e      	bne.n	80054a6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800548c:	4833      	ldr	r0, [pc, #204]	; (800555c <checkAktifCalisma+0x1bc>)
 800548e:	f003 fafb 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d106      	bne.n	80054a6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005498:	2140      	movs	r1, #64	; 0x40
 800549a:	4834      	ldr	r0, [pc, #208]	; (800556c <checkAktifCalisma+0x1cc>)
 800549c:	f003 faf4 	bl	8008a88 <HAL_GPIO_ReadPin>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d003      	beq.n	80054ae <checkAktifCalisma+0x10e>
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <checkAktifCalisma+0x198>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d026      	beq.n	80054fc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <checkAktifCalisma+0x1a0>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f083 0301 	eor.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01f      	beq.n	80054fc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80054bc:	4b1f      	ldr	r3, [pc, #124]	; (800553c <checkAktifCalisma+0x19c>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f083 0301 	eor.w	r3, r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d018      	beq.n	80054fc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <checkAktifCalisma+0x1ac>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f083 0301 	eor.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d011      	beq.n	80054fc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80054d8:	4b26      	ldr	r3, [pc, #152]	; (8005574 <checkAktifCalisma+0x1d4>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f083 0301 	eor.w	r3, r3, #1
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <checkAktifCalisma+0x1d8>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f083 0301 	eor.w	r3, r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80054f4:	4b10      	ldr	r3, [pc, #64]	; (8005538 <checkAktifCalisma+0x198>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e002      	b.n	8005502 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <checkAktifCalisma+0x198>)
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <checkAktifCalisma+0x198>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d03a      	beq.n	8005580 <checkAktifCalisma+0x1e0>
 800550a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800550e:	4817      	ldr	r0, [pc, #92]	; (800556c <checkAktifCalisma+0x1cc>)
 8005510:	f003 faba 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d132      	bne.n	8005580 <checkAktifCalisma+0x1e0>
 800551a:	4b18      	ldr	r3, [pc, #96]	; (800557c <checkAktifCalisma+0x1dc>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d02e      	beq.n	8005580 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005522:	2201      	movs	r2, #1
 8005524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005528:	480c      	ldr	r0, [pc, #48]	; (800555c <checkAktifCalisma+0x1bc>)
 800552a:	f003 fac4 	bl	8008ab6 <HAL_GPIO_WritePin>
 800552e:	e02d      	b.n	800558c <checkAktifCalisma+0x1ec>
 8005530:	20000b4a 	.word	0x20000b4a
 8005534:	20000b49 	.word	0x20000b49
 8005538:	20000b60 	.word	0x20000b60
 800553c:	20000b61 	.word	0x20000b61
 8005540:	20000b63 	.word	0x20000b63
 8005544:	20000b5b 	.word	0x20000b5b
 8005548:	20000b3f 	.word	0x20000b3f
 800554c:	20000b62 	.word	0x20000b62
 8005550:	20000b3e 	.word	0x20000b3e
 8005554:	20000b7d 	.word	0x20000b7d
 8005558:	20000b7e 	.word	0x20000b7e
 800555c:	40010c00 	.word	0x40010c00
 8005560:	20000b7f 	.word	0x20000b7f
 8005564:	20000b6a 	.word	0x20000b6a
 8005568:	20000b67 	.word	0x20000b67
 800556c:	40011000 	.word	0x40011000
 8005570:	20000b2f 	.word	0x20000b2f
 8005574:	20000b65 	.word	0x20000b65
 8005578:	20000b66 	.word	0x20000b66
 800557c:	20000b3a 	.word	0x20000b3a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005580:	2200      	movs	r2, #0
 8005582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005586:	4860      	ldr	r0, [pc, #384]	; (8005708 <checkAktifCalisma+0x368>)
 8005588:	f003 fa95 	bl	8008ab6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800558c:	4b5f      	ldr	r3, [pc, #380]	; (800570c <checkAktifCalisma+0x36c>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d013      	beq.n	80055bc <checkAktifCalisma+0x21c>
 8005594:	4b5e      	ldr	r3, [pc, #376]	; (8005710 <checkAktifCalisma+0x370>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d007      	beq.n	80055ac <checkAktifCalisma+0x20c>
 800559c:	4b5c      	ldr	r3, [pc, #368]	; (8005710 <checkAktifCalisma+0x370>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d003      	beq.n	80055ac <checkAktifCalisma+0x20c>
 80055a4:	4b5b      	ldr	r3, [pc, #364]	; (8005714 <checkAktifCalisma+0x374>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80055ac:	2201      	movs	r2, #1
 80055ae:	2104      	movs	r1, #4
 80055b0:	4855      	ldr	r0, [pc, #340]	; (8005708 <checkAktifCalisma+0x368>)
 80055b2:	f003 fa80 	bl	8008ab6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80055b6:	4b58      	ldr	r3, [pc, #352]	; (8005718 <checkAktifCalisma+0x378>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80055bc:	4b56      	ldr	r3, [pc, #344]	; (8005718 <checkAktifCalisma+0x378>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d02f      	beq.n	8005624 <checkAktifCalisma+0x284>
 80055c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055c8:	484f      	ldr	r0, [pc, #316]	; (8005708 <checkAktifCalisma+0x368>)
 80055ca:	f003 fa5d 	bl	8008a88 <HAL_GPIO_ReadPin>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d106      	bne.n	80055e2 <checkAktifCalisma+0x242>
 80055d4:	4b51      	ldr	r3, [pc, #324]	; (800571c <checkAktifCalisma+0x37c>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f083 0301 	eor.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <checkAktifCalisma+0x250>
 80055e2:	2102      	movs	r1, #2
 80055e4:	484e      	ldr	r0, [pc, #312]	; (8005720 <checkAktifCalisma+0x380>)
 80055e6:	f003 fa4f 	bl	8008a88 <HAL_GPIO_ReadPin>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d119      	bne.n	8005624 <checkAktifCalisma+0x284>
 80055f0:	4b4c      	ldr	r3, [pc, #304]	; (8005724 <checkAktifCalisma+0x384>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <checkAktifCalisma+0x284>
 80055f8:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <checkAktifCalisma+0x388>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d011      	beq.n	8005624 <checkAktifCalisma+0x284>
 8005600:	4b4a      	ldr	r3, [pc, #296]	; (800572c <checkAktifCalisma+0x38c>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <checkAktifCalisma+0x284>
 8005608:	4b49      	ldr	r3, [pc, #292]	; (8005730 <checkAktifCalisma+0x390>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f083 0301 	eor.w	r3, r3, #1
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <checkAktifCalisma+0x284>
			timer2=millis;
 8005616:	4b47      	ldr	r3, [pc, #284]	; (8005734 <checkAktifCalisma+0x394>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a47      	ldr	r2, [pc, #284]	; (8005738 <checkAktifCalisma+0x398>)
 800561c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800561e:	4b44      	ldr	r3, [pc, #272]	; (8005730 <checkAktifCalisma+0x390>)
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005624:	4b43      	ldr	r3, [pc, #268]	; (8005734 <checkAktifCalisma+0x394>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b43      	ldr	r3, [pc, #268]	; (8005738 <checkAktifCalisma+0x398>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	4a43      	ldr	r2, [pc, #268]	; (800573c <checkAktifCalisma+0x39c>)
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	4293      	cmp	r3, r2
 8005634:	d303      	bcc.n	800563e <checkAktifCalisma+0x29e>
 8005636:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <checkAktifCalisma+0x390>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d111      	bne.n	8005662 <checkAktifCalisma+0x2c2>
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <checkAktifCalisma+0x384>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	f083 0301 	eor.w	r3, r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <checkAktifCalisma+0x2c2>
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <checkAktifCalisma+0x388>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	f083 0301 	eor.w	r3, r3, #1
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <checkAktifCalisma+0x2c2>
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <checkAktifCalisma+0x38c>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005662:	2200      	movs	r2, #0
 8005664:	2104      	movs	r1, #4
 8005666:	4828      	ldr	r0, [pc, #160]	; (8005708 <checkAktifCalisma+0x368>)
 8005668:	f003 fa25 	bl	8008ab6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800566c:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <checkAktifCalisma+0x378>)
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005672:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <checkAktifCalisma+0x390>)
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005678:	4b31      	ldr	r3, [pc, #196]	; (8005740 <checkAktifCalisma+0x3a0>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005680:	4b30      	ldr	r3, [pc, #192]	; (8005744 <checkAktifCalisma+0x3a4>)
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005686:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <checkAktifCalisma+0x3a0>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d116      	bne.n	80056bc <checkAktifCalisma+0x31c>
 800568e:	4b2e      	ldr	r3, [pc, #184]	; (8005748 <checkAktifCalisma+0x3a8>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d112      	bne.n	80056bc <checkAktifCalisma+0x31c>
 8005696:	2101      	movs	r1, #1
 8005698:	4821      	ldr	r0, [pc, #132]	; (8005720 <checkAktifCalisma+0x380>)
 800569a:	f003 f9f5 	bl	8008a88 <HAL_GPIO_ReadPin>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <checkAktifCalisma+0x31c>
 80056a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056a8:	4817      	ldr	r0, [pc, #92]	; (8005708 <checkAktifCalisma+0x368>)
 80056aa:	f003 f9ed 	bl	8008a88 <HAL_GPIO_ReadPin>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d103      	bne.n	80056bc <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80056b4:	4b23      	ldr	r3, [pc, #140]	; (8005744 <checkAktifCalisma+0x3a4>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	e011      	b.n	80056e0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <checkAktifCalisma+0x3a0>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d10d      	bne.n	80056e0 <checkAktifCalisma+0x340>
 80056c4:	2101      	movs	r1, #1
 80056c6:	4816      	ldr	r0, [pc, #88]	; (8005720 <checkAktifCalisma+0x380>)
 80056c8:	f003 f9de 	bl	8008a88 <HAL_GPIO_ReadPin>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d106      	bne.n	80056e0 <checkAktifCalisma+0x340>
 80056d2:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <checkAktifCalisma+0x3a8>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 80056da:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <checkAktifCalisma+0x3a4>)
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80056e0:	4b17      	ldr	r3, [pc, #92]	; (8005740 <checkAktifCalisma+0x3a0>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d134      	bne.n	8005752 <checkAktifCalisma+0x3b2>
 80056e8:	4b17      	ldr	r3, [pc, #92]	; (8005748 <checkAktifCalisma+0x3a8>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d130      	bne.n	8005752 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80056f0:	2101      	movs	r1, #1
 80056f2:	480b      	ldr	r0, [pc, #44]	; (8005720 <checkAktifCalisma+0x380>)
 80056f4:	f003 f9c8 	bl	8008a88 <HAL_GPIO_ReadPin>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d126      	bne.n	800574c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80056fe:	4b11      	ldr	r3, [pc, #68]	; (8005744 <checkAktifCalisma+0x3a4>)
 8005700:	2201      	movs	r2, #1
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	e025      	b.n	8005752 <checkAktifCalisma+0x3b2>
 8005706:	bf00      	nop
 8005708:	40010c00 	.word	0x40010c00
 800570c:	20000b60 	.word	0x20000b60
 8005710:	20000b3b 	.word	0x20000b3b
 8005714:	20000b3f 	.word	0x20000b3f
 8005718:	20000b64 	.word	0x20000b64
 800571c:	20000b67 	.word	0x20000b67
 8005720:	40011000 	.word	0x40011000
 8005724:	20000b7d 	.word	0x20000b7d
 8005728:	20000b7e 	.word	0x20000b7e
 800572c:	20000b2f 	.word	0x20000b2f
 8005730:	20000b5c 	.word	0x20000b5c
 8005734:	20000b08 	.word	0x20000b08
 8005738:	20000b14 	.word	0x20000b14
 800573c:	20000b40 	.word	0x20000b40
 8005740:	20000b30 	.word	0x20000b30
 8005744:	20000b82 	.word	0x20000b82
 8005748:	20000b2d 	.word	0x20000b2d
			} else {
				cerceveVar=0;
 800574c:	4b7f      	ldr	r3, [pc, #508]	; (800594c <checkAktifCalisma+0x5ac>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005752:	4b7f      	ldr	r3, [pc, #508]	; (8005950 <checkAktifCalisma+0x5b0>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d17c      	bne.n	8005854 <checkAktifCalisma+0x4b4>
 800575a:	4b7e      	ldr	r3, [pc, #504]	; (8005954 <checkAktifCalisma+0x5b4>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d078      	beq.n	8005854 <checkAktifCalisma+0x4b4>
 8005762:	4b7d      	ldr	r3, [pc, #500]	; (8005958 <checkAktifCalisma+0x5b8>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d074      	beq.n	8005854 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800576a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800576e:	487b      	ldr	r0, [pc, #492]	; (800595c <checkAktifCalisma+0x5bc>)
 8005770:	f003 f98a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <checkAktifCalisma+0x3e2>
 800577a:	4b79      	ldr	r3, [pc, #484]	; (8005960 <checkAktifCalisma+0x5c0>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d068      	beq.n	8005854 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005782:	4b72      	ldr	r3, [pc, #456]	; (800594c <checkAktifCalisma+0x5ac>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d064      	beq.n	8005854 <checkAktifCalisma+0x4b4>
 800578a:	4b76      	ldr	r3, [pc, #472]	; (8005964 <checkAktifCalisma+0x5c4>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d05d      	beq.n	8005854 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005798:	2104      	movs	r1, #4
 800579a:	4873      	ldr	r0, [pc, #460]	; (8005968 <checkAktifCalisma+0x5c8>)
 800579c:	f003 f974 	bl	8008a88 <HAL_GPIO_ReadPin>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <checkAktifCalisma+0x40e>
 80057a6:	4b71      	ldr	r3, [pc, #452]	; (800596c <checkAktifCalisma+0x5cc>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d152      	bne.n	8005854 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80057ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057b2:	486a      	ldr	r0, [pc, #424]	; (800595c <checkAktifCalisma+0x5bc>)
 80057b4:	f003 f968 	bl	8008a88 <HAL_GPIO_ReadPin>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d10e      	bne.n	80057dc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80057be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057c2:	4866      	ldr	r0, [pc, #408]	; (800595c <checkAktifCalisma+0x5bc>)
 80057c4:	f003 f960 	bl	8008a88 <HAL_GPIO_ReadPin>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d106      	bne.n	80057dc <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80057ce:	2140      	movs	r1, #64	; 0x40
 80057d0:	4865      	ldr	r0, [pc, #404]	; (8005968 <checkAktifCalisma+0x5c8>)
 80057d2:	f003 f959 	bl	8008a88 <HAL_GPIO_ReadPin>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d003      	beq.n	80057e4 <checkAktifCalisma+0x444>
 80057dc:	4b64      	ldr	r3, [pc, #400]	; (8005970 <checkAktifCalisma+0x5d0>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d037      	beq.n	8005854 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80057e4:	4b63      	ldr	r3, [pc, #396]	; (8005974 <checkAktifCalisma+0x5d4>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f083 0301 	eor.w	r3, r3, #1
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d030      	beq.n	8005854 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80057f2:	4b61      	ldr	r3, [pc, #388]	; (8005978 <checkAktifCalisma+0x5d8>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	f083 0301 	eor.w	r3, r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d029      	beq.n	8005854 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005800:	4b5e      	ldr	r3, [pc, #376]	; (800597c <checkAktifCalisma+0x5dc>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f083 0301 	eor.w	r3, r3, #1
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d022      	beq.n	8005854 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800580e:	4b5c      	ldr	r3, [pc, #368]	; (8005980 <checkAktifCalisma+0x5e0>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	f083 0301 	eor.w	r3, r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01b      	beq.n	8005854 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800581c:	4b59      	ldr	r3, [pc, #356]	; (8005984 <checkAktifCalisma+0x5e4>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f083 0301 	eor.w	r3, r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d014      	beq.n	8005854 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800582a:	4b57      	ldr	r3, [pc, #348]	; (8005988 <checkAktifCalisma+0x5e8>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f083 0301 	eor.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00d      	beq.n	8005854 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005838:	2201      	movs	r2, #1
 800583a:	2102      	movs	r1, #2
 800583c:	4847      	ldr	r0, [pc, #284]	; (800595c <checkAktifCalisma+0x5bc>)
 800583e:	f003 f93a 	bl	8008ab6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005842:	4b4b      	ldr	r3, [pc, #300]	; (8005970 <checkAktifCalisma+0x5d0>)
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005848:	4b50      	ldr	r3, [pc, #320]	; (800598c <checkAktifCalisma+0x5ec>)
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800584e:	4b50      	ldr	r3, [pc, #320]	; (8005990 <checkAktifCalisma+0x5f0>)
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005854:	4b46      	ldr	r3, [pc, #280]	; (8005970 <checkAktifCalisma+0x5d0>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d033      	beq.n	80058c4 <checkAktifCalisma+0x524>
 800585c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005860:	483e      	ldr	r0, [pc, #248]	; (800595c <checkAktifCalisma+0x5bc>)
 8005862:	f003 f911 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005866:	4603      	mov	r3, r0
 8005868:	2b01      	cmp	r3, #1
 800586a:	d106      	bne.n	800587a <checkAktifCalisma+0x4da>
 800586c:	4b3c      	ldr	r3, [pc, #240]	; (8005960 <checkAktifCalisma+0x5c0>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f083 0301 	eor.w	r3, r3, #1
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <checkAktifCalisma+0x4f0>
 800587a:	2104      	movs	r1, #4
 800587c:	483a      	ldr	r0, [pc, #232]	; (8005968 <checkAktifCalisma+0x5c8>)
 800587e:	f003 f903 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005882:	4603      	mov	r3, r0
 8005884:	2b01      	cmp	r3, #1
 8005886:	d11d      	bne.n	80058c4 <checkAktifCalisma+0x524>
 8005888:	4b38      	ldr	r3, [pc, #224]	; (800596c <checkAktifCalisma+0x5cc>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d019      	beq.n	80058c4 <checkAktifCalisma+0x524>
 8005890:	4b30      	ldr	r3, [pc, #192]	; (8005954 <checkAktifCalisma+0x5b4>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d015      	beq.n	80058c4 <checkAktifCalisma+0x524>
 8005898:	4b2f      	ldr	r3, [pc, #188]	; (8005958 <checkAktifCalisma+0x5b8>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d011      	beq.n	80058c4 <checkAktifCalisma+0x524>
 80058a0:	4b2a      	ldr	r3, [pc, #168]	; (800594c <checkAktifCalisma+0x5ac>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <checkAktifCalisma+0x524>
 80058a8:	4b3a      	ldr	r3, [pc, #232]	; (8005994 <checkAktifCalisma+0x5f4>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f083 0301 	eor.w	r3, r3, #1
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d006      	beq.n	80058c4 <checkAktifCalisma+0x524>
			timer2=millis;
 80058b6:	4b38      	ldr	r3, [pc, #224]	; (8005998 <checkAktifCalisma+0x5f8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a38      	ldr	r2, [pc, #224]	; (800599c <checkAktifCalisma+0x5fc>)
 80058bc:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80058be:	4b35      	ldr	r3, [pc, #212]	; (8005994 <checkAktifCalisma+0x5f4>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80058c4:	4b34      	ldr	r3, [pc, #208]	; (8005998 <checkAktifCalisma+0x5f8>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b34      	ldr	r3, [pc, #208]	; (800599c <checkAktifCalisma+0x5fc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	4a34      	ldr	r2, [pc, #208]	; (80059a0 <checkAktifCalisma+0x600>)
 80058d0:	7812      	ldrb	r2, [r2, #0]
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d303      	bcc.n	80058de <checkAktifCalisma+0x53e>
 80058d6:	4b2f      	ldr	r3, [pc, #188]	; (8005994 <checkAktifCalisma+0x5f4>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d114      	bne.n	8005908 <checkAktifCalisma+0x568>
 80058de:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <checkAktifCalisma+0x5b4>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f083 0301 	eor.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10d      	bne.n	8005908 <checkAktifCalisma+0x568>
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <checkAktifCalisma+0x5b8>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f083 0301 	eor.w	r3, r3, #1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <checkAktifCalisma+0x568>
 80058fa:	4b14      	ldr	r3, [pc, #80]	; (800594c <checkAktifCalisma+0x5ac>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f083 0301 	eor.w	r3, r3, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005908:	2200      	movs	r2, #0
 800590a:	2102      	movs	r1, #2
 800590c:	4813      	ldr	r0, [pc, #76]	; (800595c <checkAktifCalisma+0x5bc>)
 800590e:	f003 f8d2 	bl	8008ab6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005912:	4b17      	ldr	r3, [pc, #92]	; (8005970 <checkAktifCalisma+0x5d0>)
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <checkAktifCalisma+0x5f4>)
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800591e:	4b14      	ldr	r3, [pc, #80]	; (8005970 <checkAktifCalisma+0x5d0>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d040      	beq.n	80059a8 <checkAktifCalisma+0x608>
 8005926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800592a:	480f      	ldr	r0, [pc, #60]	; (8005968 <checkAktifCalisma+0x5c8>)
 800592c:	f003 f8ac 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d138      	bne.n	80059a8 <checkAktifCalisma+0x608>
 8005936:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <checkAktifCalisma+0x604>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d034      	beq.n	80059a8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800593e:	2201      	movs	r2, #1
 8005940:	2101      	movs	r1, #1
 8005942:	4806      	ldr	r0, [pc, #24]	; (800595c <checkAktifCalisma+0x5bc>)
 8005944:	f003 f8b7 	bl	8008ab6 <HAL_GPIO_WritePin>
 8005948:	e033      	b.n	80059b2 <checkAktifCalisma+0x612>
 800594a:	bf00      	nop
 800594c:	20000b82 	.word	0x20000b82
 8005950:	20000b49 	.word	0x20000b49
 8005954:	20000b7d 	.word	0x20000b7d
 8005958:	20000b7e 	.word	0x20000b7e
 800595c:	40010c00 	.word	0x40010c00
 8005960:	20000b68 	.word	0x20000b68
 8005964:	20000b7c 	.word	0x20000b7c
 8005968:	40011000 	.word	0x40011000
 800596c:	20000b32 	.word	0x20000b32
 8005970:	20000b63 	.word	0x20000b63
 8005974:	20000b60 	.word	0x20000b60
 8005978:	20000b64 	.word	0x20000b64
 800597c:	20000b61 	.word	0x20000b61
 8005980:	20000b62 	.word	0x20000b62
 8005984:	20000b65 	.word	0x20000b65
 8005988:	20000b66 	.word	0x20000b66
 800598c:	20000b6b 	.word	0x20000b6b
 8005990:	20000b8c 	.word	0x20000b8c
 8005994:	20000b5b 	.word	0x20000b5b
 8005998:	20000b08 	.word	0x20000b08
 800599c:	20000b14 	.word	0x20000b14
 80059a0:	20000b41 	.word	0x20000b41
 80059a4:	20000b31 	.word	0x20000b31
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80059a8:	2200      	movs	r2, #0
 80059aa:	2101      	movs	r1, #1
 80059ac:	4836      	ldr	r0, [pc, #216]	; (8005a88 <checkAktifCalisma+0x6e8>)
 80059ae:	f003 f882 	bl	8008ab6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80059b2:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <checkAktifCalisma+0x6ec>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 8080 	bne.w	8005abc <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80059bc:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <checkAktifCalisma+0x6f0>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d003      	beq.n	80059cc <checkAktifCalisma+0x62c>
 80059c4:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <checkAktifCalisma+0x6f0>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d177      	bne.n	8005abc <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80059cc:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <checkAktifCalisma+0x6f4>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d073      	beq.n	8005abc <checkAktifCalisma+0x71c>
 80059d4:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <checkAktifCalisma+0x6f8>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d06f      	beq.n	8005abc <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80059dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059e0:	4829      	ldr	r0, [pc, #164]	; (8005a88 <checkAktifCalisma+0x6e8>)
 80059e2:	f003 f851 	bl	8008a88 <HAL_GPIO_ReadPin>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d167      	bne.n	8005abc <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80059ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059f0:	482a      	ldr	r0, [pc, #168]	; (8005a9c <checkAktifCalisma+0x6fc>)
 80059f2:	f003 f849 	bl	8008a88 <HAL_GPIO_ReadPin>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <checkAktifCalisma+0x664>
 80059fc:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <checkAktifCalisma+0x700>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d15b      	bne.n	8005abc <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005a04:	2140      	movs	r1, #64	; 0x40
 8005a06:	4825      	ldr	r0, [pc, #148]	; (8005a9c <checkAktifCalisma+0x6fc>)
 8005a08:	f003 f83e 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d10f      	bne.n	8005a32 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a16:	481c      	ldr	r0, [pc, #112]	; (8005a88 <checkAktifCalisma+0x6e8>)
 8005a18:	f003 f836 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d107      	bne.n	8005a32 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a26:	4818      	ldr	r0, [pc, #96]	; (8005a88 <checkAktifCalisma+0x6e8>)
 8005a28:	f003 f82e 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d003      	beq.n	8005a3a <checkAktifCalisma+0x69a>
 8005a32:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <checkAktifCalisma+0x704>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d040      	beq.n	8005abc <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005a3a:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <checkAktifCalisma+0x708>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	f083 0301 	eor.w	r3, r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d039      	beq.n	8005abc <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005a48:	4b18      	ldr	r3, [pc, #96]	; (8005aac <checkAktifCalisma+0x70c>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f083 0301 	eor.w	r3, r3, #1
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d032      	beq.n	8005abc <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005a56:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <checkAktifCalisma+0x710>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	f083 0301 	eor.w	r3, r3, #1
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d02b      	beq.n	8005abc <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005a64:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <checkAktifCalisma+0x714>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f083 0301 	eor.w	r3, r3, #1
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d024      	beq.n	8005abc <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005a72:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <checkAktifCalisma+0x718>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	f083 0301 	eor.w	r3, r3, #1
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01d      	beq.n	8005abc <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005a80:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <checkAktifCalisma+0x704>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	e01c      	b.n	8005ac2 <checkAktifCalisma+0x722>
 8005a88:	40010c00 	.word	0x40010c00
 8005a8c:	20000b49 	.word	0x20000b49
 8005a90:	20000b3b 	.word	0x20000b3b
 8005a94:	20000b7d 	.word	0x20000b7d
 8005a98:	20000b7e 	.word	0x20000b7e
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	20000b3c 	.word	0x20000b3c
 8005aa4:	20000b61 	.word	0x20000b61
 8005aa8:	20000b60 	.word	0x20000b60
 8005aac:	20000b64 	.word	0x20000b64
 8005ab0:	20000b63 	.word	0x20000b63
 8005ab4:	20000b62 	.word	0x20000b62
 8005ab8:	20000b66 	.word	0x20000b66
		} else {
			devmotoryukaricalisiyor=0;
 8005abc:	4b64      	ldr	r3, [pc, #400]	; (8005c50 <checkAktifCalisma+0x8b0>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005ac2:	4b63      	ldr	r3, [pc, #396]	; (8005c50 <checkAktifCalisma+0x8b0>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005aca:	2201      	movs	r2, #1
 8005acc:	2120      	movs	r1, #32
 8005ace:	4861      	ldr	r0, [pc, #388]	; (8005c54 <checkAktifCalisma+0x8b4>)
 8005ad0:	f002 fff1 	bl	8008ab6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005ad4:	4b60      	ldr	r3, [pc, #384]	; (8005c58 <checkAktifCalisma+0x8b8>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005ada:	4b5f      	ldr	r3, [pc, #380]	; (8005c58 <checkAktifCalisma+0x8b8>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d025      	beq.n	8005b2e <checkAktifCalisma+0x78e>
 8005ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ae6:	485d      	ldr	r0, [pc, #372]	; (8005c5c <checkAktifCalisma+0x8bc>)
 8005ae8:	f002 ffce 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d007      	beq.n	8005b02 <checkAktifCalisma+0x762>
 8005af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005af6:	4857      	ldr	r0, [pc, #348]	; (8005c54 <checkAktifCalisma+0x8b4>)
 8005af8:	f002 ffc6 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d115      	bne.n	8005b2e <checkAktifCalisma+0x78e>
 8005b02:	4b57      	ldr	r3, [pc, #348]	; (8005c60 <checkAktifCalisma+0x8c0>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d011      	beq.n	8005b2e <checkAktifCalisma+0x78e>
 8005b0a:	4b56      	ldr	r3, [pc, #344]	; (8005c64 <checkAktifCalisma+0x8c4>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <checkAktifCalisma+0x78e>
 8005b12:	4b55      	ldr	r3, [pc, #340]	; (8005c68 <checkAktifCalisma+0x8c8>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	f083 0301 	eor.w	r3, r3, #1
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d006      	beq.n	8005b2e <checkAktifCalisma+0x78e>
			timer2=millis;
 8005b20:	4b52      	ldr	r3, [pc, #328]	; (8005c6c <checkAktifCalisma+0x8cc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a52      	ldr	r2, [pc, #328]	; (8005c70 <checkAktifCalisma+0x8d0>)
 8005b26:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005b28:	4b4f      	ldr	r3, [pc, #316]	; (8005c68 <checkAktifCalisma+0x8c8>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005b2e:	4b4f      	ldr	r3, [pc, #316]	; (8005c6c <checkAktifCalisma+0x8cc>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b4f      	ldr	r3, [pc, #316]	; (8005c70 <checkAktifCalisma+0x8d0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	4a4e      	ldr	r2, [pc, #312]	; (8005c74 <checkAktifCalisma+0x8d4>)
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d303      	bcc.n	8005b48 <checkAktifCalisma+0x7a8>
 8005b40:	4b49      	ldr	r3, [pc, #292]	; (8005c68 <checkAktifCalisma+0x8c8>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <checkAktifCalisma+0x7c4>
 8005b48:	4b45      	ldr	r3, [pc, #276]	; (8005c60 <checkAktifCalisma+0x8c0>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f083 0301 	eor.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <checkAktifCalisma+0x7c4>
 8005b56:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <checkAktifCalisma+0x8c4>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f083 0301 	eor.w	r3, r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005b64:	2200      	movs	r2, #0
 8005b66:	2120      	movs	r1, #32
 8005b68:	483a      	ldr	r0, [pc, #232]	; (8005c54 <checkAktifCalisma+0x8b4>)
 8005b6a:	f002 ffa4 	bl	8008ab6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005b6e:	4b3a      	ldr	r3, [pc, #232]	; (8005c58 <checkAktifCalisma+0x8b8>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005b74:	4b3c      	ldr	r3, [pc, #240]	; (8005c68 <checkAktifCalisma+0x8c8>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005b7a:	4b3f      	ldr	r3, [pc, #252]	; (8005c78 <checkAktifCalisma+0x8d8>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f040 8088 	bne.w	8005c94 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005b84:	4b3d      	ldr	r3, [pc, #244]	; (8005c7c <checkAktifCalisma+0x8dc>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d003      	beq.n	8005b94 <checkAktifCalisma+0x7f4>
 8005b8c:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <checkAktifCalisma+0x8dc>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d17f      	bne.n	8005c94 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005b94:	4b32      	ldr	r3, [pc, #200]	; (8005c60 <checkAktifCalisma+0x8c0>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d07b      	beq.n	8005c94 <checkAktifCalisma+0x8f4>
 8005b9c:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <checkAktifCalisma+0x8c4>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d077      	beq.n	8005c94 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005ba4:	2140      	movs	r1, #64	; 0x40
 8005ba6:	482b      	ldr	r0, [pc, #172]	; (8005c54 <checkAktifCalisma+0x8b4>)
 8005ba8:	f002 ff6e 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d170      	bne.n	8005c94 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bb6:	4827      	ldr	r0, [pc, #156]	; (8005c54 <checkAktifCalisma+0x8b4>)
 8005bb8:	f002 ff66 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <checkAktifCalisma+0x82a>
 8005bc2:	4b2f      	ldr	r3, [pc, #188]	; (8005c80 <checkAktifCalisma+0x8e0>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d164      	bne.n	8005c94 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bce:	4823      	ldr	r0, [pc, #140]	; (8005c5c <checkAktifCalisma+0x8bc>)
 8005bd0:	f002 ff5a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10f      	bne.n	8005bfa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bde:	481f      	ldr	r0, [pc, #124]	; (8005c5c <checkAktifCalisma+0x8bc>)
 8005be0:	f002 ff52 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d107      	bne.n	8005bfa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bee:	481b      	ldr	r0, [pc, #108]	; (8005c5c <checkAktifCalisma+0x8bc>)
 8005bf0:	f002 ff4a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d003      	beq.n	8005c02 <checkAktifCalisma+0x862>
 8005bfa:	4b22      	ldr	r3, [pc, #136]	; (8005c84 <checkAktifCalisma+0x8e4>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d048      	beq.n	8005c94 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005c02:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <checkAktifCalisma+0x8e8>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	f083 0301 	eor.w	r3, r3, #1
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d041      	beq.n	8005c94 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <checkAktifCalisma+0x8ec>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f083 0301 	eor.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03a      	beq.n	8005c94 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005c1e:	4b1c      	ldr	r3, [pc, #112]	; (8005c90 <checkAktifCalisma+0x8f0>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	f083 0301 	eor.w	r3, r3, #1
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d033      	beq.n	8005c94 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <checkAktifCalisma+0x8b8>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f083 0301 	eor.w	r3, r3, #1
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d02c      	beq.n	8005c94 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <checkAktifCalisma+0x8b0>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f083 0301 	eor.w	r3, r3, #1
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d025      	beq.n	8005c94 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005c48:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <checkAktifCalisma+0x8e4>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e024      	b.n	8005c9a <checkAktifCalisma+0x8fa>
 8005c50:	20000b61 	.word	0x20000b61
 8005c54:	40011000 	.word	0x40011000
 8005c58:	20000b65 	.word	0x20000b65
 8005c5c:	40010c00 	.word	0x40010c00
 8005c60:	20000b7d 	.word	0x20000b7d
 8005c64:	20000b7e 	.word	0x20000b7e
 8005c68:	20000b5d 	.word	0x20000b5d
 8005c6c:	20000b08 	.word	0x20000b08
 8005c70:	20000b14 	.word	0x20000b14
 8005c74:	20000b42 	.word	0x20000b42
 8005c78:	20000b49 	.word	0x20000b49
 8005c7c:	20000b3b 	.word	0x20000b3b
 8005c80:	20000b3d 	.word	0x20000b3d
 8005c84:	20000b62 	.word	0x20000b62
 8005c88:	20000b60 	.word	0x20000b60
 8005c8c:	20000b64 	.word	0x20000b64
 8005c90:	20000b63 	.word	0x20000b63
		} else {
			devmotorasagicalisiyor=0;
 8005c94:	4b96      	ldr	r3, [pc, #600]	; (8005ef0 <checkAktifCalisma+0xb50>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005c9a:	4b95      	ldr	r3, [pc, #596]	; (8005ef0 <checkAktifCalisma+0xb50>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	2110      	movs	r1, #16
 8005ca6:	4893      	ldr	r0, [pc, #588]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005ca8:	f002 ff05 	bl	8008ab6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005cac:	4b92      	ldr	r3, [pc, #584]	; (8005ef8 <checkAktifCalisma+0xb58>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005cb2:	4b91      	ldr	r3, [pc, #580]	; (8005ef8 <checkAktifCalisma+0xb58>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d024      	beq.n	8005d04 <checkAktifCalisma+0x964>
 8005cba:	2140      	movs	r1, #64	; 0x40
 8005cbc:	488d      	ldr	r0, [pc, #564]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005cbe:	f002 fee3 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d007      	beq.n	8005cd8 <checkAktifCalisma+0x938>
 8005cc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ccc:	4889      	ldr	r0, [pc, #548]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005cce:	f002 fedb 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d115      	bne.n	8005d04 <checkAktifCalisma+0x964>
 8005cd8:	4b88      	ldr	r3, [pc, #544]	; (8005efc <checkAktifCalisma+0xb5c>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d011      	beq.n	8005d04 <checkAktifCalisma+0x964>
 8005ce0:	4b87      	ldr	r3, [pc, #540]	; (8005f00 <checkAktifCalisma+0xb60>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <checkAktifCalisma+0x964>
 8005ce8:	4b86      	ldr	r3, [pc, #536]	; (8005f04 <checkAktifCalisma+0xb64>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d006      	beq.n	8005d04 <checkAktifCalisma+0x964>
			timer2=millis;
 8005cf6:	4b84      	ldr	r3, [pc, #528]	; (8005f08 <checkAktifCalisma+0xb68>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a84      	ldr	r2, [pc, #528]	; (8005f0c <checkAktifCalisma+0xb6c>)
 8005cfc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005cfe:	4b81      	ldr	r3, [pc, #516]	; (8005f04 <checkAktifCalisma+0xb64>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005d04:	4b80      	ldr	r3, [pc, #512]	; (8005f08 <checkAktifCalisma+0xb68>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4b80      	ldr	r3, [pc, #512]	; (8005f0c <checkAktifCalisma+0xb6c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	4a80      	ldr	r2, [pc, #512]	; (8005f10 <checkAktifCalisma+0xb70>)
 8005d10:	7812      	ldrb	r2, [r2, #0]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d303      	bcc.n	8005d1e <checkAktifCalisma+0x97e>
 8005d16:	4b7b      	ldr	r3, [pc, #492]	; (8005f04 <checkAktifCalisma+0xb64>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10d      	bne.n	8005d3a <checkAktifCalisma+0x99a>
 8005d1e:	4b77      	ldr	r3, [pc, #476]	; (8005efc <checkAktifCalisma+0xb5c>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <checkAktifCalisma+0x99a>
 8005d2c:	4b74      	ldr	r3, [pc, #464]	; (8005f00 <checkAktifCalisma+0xb60>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f083 0301 	eor.w	r3, r3, #1
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2110      	movs	r1, #16
 8005d3e:	486d      	ldr	r0, [pc, #436]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005d40:	f002 feb9 	bl	8008ab6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005d44:	4b6c      	ldr	r3, [pc, #432]	; (8005ef8 <checkAktifCalisma+0xb58>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005d4a:	4b6e      	ldr	r3, [pc, #440]	; (8005f04 <checkAktifCalisma+0xb64>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005d50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d54:	486f      	ldr	r0, [pc, #444]	; (8005f14 <checkAktifCalisma+0xb74>)
 8005d56:	f002 fe97 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d120      	bne.n	8005da2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d64:	486b      	ldr	r0, [pc, #428]	; (8005f14 <checkAktifCalisma+0xb74>)
 8005d66:	f002 fe8f 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d118      	bne.n	8005da2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005d70:	2104      	movs	r1, #4
 8005d72:	4868      	ldr	r0, [pc, #416]	; (8005f14 <checkAktifCalisma+0xb74>)
 8005d74:	f002 fe88 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d111      	bne.n	8005da2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005d7e:	2102      	movs	r1, #2
 8005d80:	4864      	ldr	r0, [pc, #400]	; (8005f14 <checkAktifCalisma+0xb74>)
 8005d82:	f002 fe81 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	4861      	ldr	r0, [pc, #388]	; (8005f14 <checkAktifCalisma+0xb74>)
 8005d90:	f002 fe7a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <checkAktifCalisma+0xa02>
			makineStop=1;
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	; (8005f18 <checkAktifCalisma+0xb78>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e002      	b.n	8005da8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005da2:	4b5d      	ldr	r3, [pc, #372]	; (8005f18 <checkAktifCalisma+0xb78>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005da8:	4b5c      	ldr	r3, [pc, #368]	; (8005f1c <checkAktifCalisma+0xb7c>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d144      	bne.n	8005e3a <checkAktifCalisma+0xa9a>
 8005db0:	4b5b      	ldr	r3, [pc, #364]	; (8005f20 <checkAktifCalisma+0xb80>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d003      	beq.n	8005dc0 <checkAktifCalisma+0xa20>
 8005db8:	4b59      	ldr	r3, [pc, #356]	; (8005f20 <checkAktifCalisma+0xb80>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d13c      	bne.n	8005e3a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005dc0:	2180      	movs	r1, #128	; 0x80
 8005dc2:	484c      	ldr	r0, [pc, #304]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005dc4:	f002 fe60 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <checkAktifCalisma+0xa36>
 8005dce:	4b55      	ldr	r3, [pc, #340]	; (8005f24 <checkAktifCalisma+0xb84>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <checkAktifCalisma+0xa4e>
 8005dd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dda:	484e      	ldr	r0, [pc, #312]	; (8005f14 <checkAktifCalisma+0xb74>)
 8005ddc:	f002 fe54 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d129      	bne.n	8005e3a <checkAktifCalisma+0xa9a>
 8005de6:	4b4f      	ldr	r3, [pc, #316]	; (8005f24 <checkAktifCalisma+0xb84>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d125      	bne.n	8005e3a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005dee:	2104      	movs	r1, #4
 8005df0:	4840      	ldr	r0, [pc, #256]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005df2:	f002 fe49 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d003      	beq.n	8005e04 <checkAktifCalisma+0xa64>
 8005dfc:	4b4a      	ldr	r3, [pc, #296]	; (8005f28 <checkAktifCalisma+0xb88>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11a      	bne.n	8005e3a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005e04:	2102      	movs	r1, #2
 8005e06:	483b      	ldr	r0, [pc, #236]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005e08:	f002 fe3e 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d113      	bne.n	8005e3a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005e12:	4b46      	ldr	r3, [pc, #280]	; (8005f2c <checkAktifCalisma+0xb8c>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f083 0301 	eor.w	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00c      	beq.n	8005e3a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005e20:	4b3d      	ldr	r3, [pc, #244]	; (8005f18 <checkAktifCalisma+0xb78>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005e28:	4b41      	ldr	r3, [pc, #260]	; (8005f30 <checkAktifCalisma+0xb90>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005e2e:	4b36      	ldr	r3, [pc, #216]	; (8005f08 <checkAktifCalisma+0xb68>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a40      	ldr	r2, [pc, #256]	; (8005f34 <checkAktifCalisma+0xb94>)
 8005e34:	6013      	str	r3, [r2, #0]
			bekle();
 8005e36:	f7ff f87d 	bl	8004f34 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005e3a:	4b33      	ldr	r3, [pc, #204]	; (8005f08 <checkAktifCalisma+0xb68>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b3d      	ldr	r3, [pc, #244]	; (8005f34 <checkAktifCalisma+0xb94>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	4a3c      	ldr	r2, [pc, #240]	; (8005f38 <checkAktifCalisma+0xb98>)
 8005e46:	7812      	ldrb	r2, [r2, #0]
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d211      	bcs.n	8005e70 <checkAktifCalisma+0xad0>
 8005e4c:	2104      	movs	r1, #4
 8005e4e:	4829      	ldr	r0, [pc, #164]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005e50:	f002 fe1a 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <checkAktifCalisma+0xad0>
 8005e5a:	4b33      	ldr	r3, [pc, #204]	; (8005f28 <checkAktifCalisma+0xb88>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d006      	beq.n	8005e70 <checkAktifCalisma+0xad0>
 8005e62:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <checkAktifCalisma+0xb78>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f083 0301 	eor.w	r3, r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005e70:	4b2f      	ldr	r3, [pc, #188]	; (8005f30 <checkAktifCalisma+0xb90>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005e76:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <checkAktifCalisma+0xb7c>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d160      	bne.n	8005f40 <checkAktifCalisma+0xba0>
 8005e7e:	4b28      	ldr	r3, [pc, #160]	; (8005f20 <checkAktifCalisma+0xb80>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d003      	beq.n	8005e8e <checkAktifCalisma+0xaee>
 8005e86:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <checkAktifCalisma+0xb80>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d158      	bne.n	8005f40 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005e8e:	2104      	movs	r1, #4
 8005e90:	4818      	ldr	r0, [pc, #96]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005e92:	f002 fdf9 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d003      	beq.n	8005ea4 <checkAktifCalisma+0xb04>
 8005e9c:	4b22      	ldr	r3, [pc, #136]	; (8005f28 <checkAktifCalisma+0xb88>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d14d      	bne.n	8005f40 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	4813      	ldr	r0, [pc, #76]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005ea8:	f002 fdee 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d146      	bne.n	8005f40 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	480f      	ldr	r0, [pc, #60]	; (8005ef4 <checkAktifCalisma+0xb54>)
 8005eb6:	f002 fde7 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d103      	bne.n	8005ec8 <checkAktifCalisma+0xb28>
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <checkAktifCalisma+0xb84>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <checkAktifCalisma+0xb40>
 8005ec8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ecc:	4811      	ldr	r0, [pc, #68]	; (8005f14 <checkAktifCalisma+0xb74>)
 8005ece:	f002 fddb 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d133      	bne.n	8005f40 <checkAktifCalisma+0xba0>
 8005ed8:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <checkAktifCalisma+0xb84>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d12f      	bne.n	8005f40 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <checkAktifCalisma+0xb78>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d02b      	beq.n	8005f40 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005ee8:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <checkAktifCalisma+0xb9c>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	e02a      	b.n	8005f46 <checkAktifCalisma+0xba6>
 8005ef0:	20000b62 	.word	0x20000b62
 8005ef4:	40011000 	.word	0x40011000
 8005ef8:	20000b66 	.word	0x20000b66
 8005efc:	20000b7d 	.word	0x20000b7d
 8005f00:	20000b7e 	.word	0x20000b7e
 8005f04:	20000b5e 	.word	0x20000b5e
 8005f08:	20000b08 	.word	0x20000b08
 8005f0c:	20000b14 	.word	0x20000b14
 8005f10:	20000b42 	.word	0x20000b42
 8005f14:	40010c00 	.word	0x40010c00
 8005f18:	20000b6d 	.word	0x20000b6d
 8005f1c:	20000b35 	.word	0x20000b35
 8005f20:	20000b34 	.word	0x20000b34
 8005f24:	20000b38 	.word	0x20000b38
 8005f28:	20000b32 	.word	0x20000b32
 8005f2c:	20000b5a 	.word	0x20000b5a
 8005f30:	20000b6e 	.word	0x20000b6e
 8005f34:	20000b0c 	.word	0x20000b0c
 8005f38:	20000b45 	.word	0x20000b45
 8005f3c:	20000b6f 	.word	0x20000b6f
		} else {
			kapi1butonkontrol=0;
 8005f40:	4b8b      	ldr	r3, [pc, #556]	; (8006170 <checkAktifCalisma+0xdd0>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005f46:	4b8b      	ldr	r3, [pc, #556]	; (8006174 <checkAktifCalisma+0xdd4>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d121      	bne.n	8005f92 <checkAktifCalisma+0xbf2>
 8005f4e:	4b8a      	ldr	r3, [pc, #552]	; (8006178 <checkAktifCalisma+0xdd8>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d003      	beq.n	8005f5e <checkAktifCalisma+0xbbe>
 8005f56:	4b88      	ldr	r3, [pc, #544]	; (8006178 <checkAktifCalisma+0xdd8>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d119      	bne.n	8005f92 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005f5e:	2104      	movs	r1, #4
 8005f60:	4886      	ldr	r0, [pc, #536]	; (800617c <checkAktifCalisma+0xddc>)
 8005f62:	f002 fd91 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d003      	beq.n	8005f74 <checkAktifCalisma+0xbd4>
 8005f6c:	4b84      	ldr	r3, [pc, #528]	; (8006180 <checkAktifCalisma+0xde0>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10e      	bne.n	8005f92 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f74:	2102      	movs	r1, #2
 8005f76:	4881      	ldr	r0, [pc, #516]	; (800617c <checkAktifCalisma+0xddc>)
 8005f78:	f002 fd86 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005f82:	4b80      	ldr	r3, [pc, #512]	; (8006184 <checkAktifCalisma+0xde4>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005f8a:	4b7f      	ldr	r3, [pc, #508]	; (8006188 <checkAktifCalisma+0xde8>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e002      	b.n	8005f98 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005f92:	4b7d      	ldr	r3, [pc, #500]	; (8006188 <checkAktifCalisma+0xde8>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005f98:	4b75      	ldr	r3, [pc, #468]	; (8006170 <checkAktifCalisma+0xdd0>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d107      	bne.n	8005fb0 <checkAktifCalisma+0xc10>
 8005fa0:	4b79      	ldr	r3, [pc, #484]	; (8006188 <checkAktifCalisma+0xde8>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <checkAktifCalisma+0xc10>
 8005fa8:	4b78      	ldr	r3, [pc, #480]	; (800618c <checkAktifCalisma+0xdec>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	2180      	movs	r1, #128	; 0x80
 8005fb4:	4876      	ldr	r0, [pc, #472]	; (8006190 <checkAktifCalisma+0xdf0>)
 8005fb6:	f002 fd7e 	bl	8008ab6 <HAL_GPIO_WritePin>
 8005fba:	e004      	b.n	8005fc6 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2180      	movs	r1, #128	; 0x80
 8005fc0:	4873      	ldr	r0, [pc, #460]	; (8006190 <checkAktifCalisma+0xdf0>)
 8005fc2:	f002 fd78 	bl	8008ab6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fc6:	4b73      	ldr	r3, [pc, #460]	; (8006194 <checkAktifCalisma+0xdf4>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d141      	bne.n	8006052 <checkAktifCalisma+0xcb2>
 8005fce:	4b6a      	ldr	r3, [pc, #424]	; (8006178 <checkAktifCalisma+0xdd8>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d003      	beq.n	8005fde <checkAktifCalisma+0xc3e>
 8005fd6:	4b68      	ldr	r3, [pc, #416]	; (8006178 <checkAktifCalisma+0xdd8>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d139      	bne.n	8006052 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fe2:	4866      	ldr	r0, [pc, #408]	; (800617c <checkAktifCalisma+0xddc>)
 8005fe4:	f002 fd50 	bl	8008a88 <HAL_GPIO_ReadPin>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <checkAktifCalisma+0xc56>
 8005fee:	4b6a      	ldr	r3, [pc, #424]	; (8006198 <checkAktifCalisma+0xdf8>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <checkAktifCalisma+0xc6e>
 8005ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ffa:	4868      	ldr	r0, [pc, #416]	; (800619c <checkAktifCalisma+0xdfc>)
 8005ffc:	f002 fd44 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d125      	bne.n	8006052 <checkAktifCalisma+0xcb2>
 8006006:	4b64      	ldr	r3, [pc, #400]	; (8006198 <checkAktifCalisma+0xdf8>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d121      	bne.n	8006052 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800600e:	2102      	movs	r1, #2
 8006010:	485a      	ldr	r0, [pc, #360]	; (800617c <checkAktifCalisma+0xddc>)
 8006012:	f002 fd39 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006016:	4603      	mov	r3, r0
 8006018:	2b01      	cmp	r3, #1
 800601a:	d11a      	bne.n	8006052 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800601c:	2104      	movs	r1, #4
 800601e:	4857      	ldr	r0, [pc, #348]	; (800617c <checkAktifCalisma+0xddc>)
 8006020:	f002 fd32 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d113      	bne.n	8006052 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800602a:	4b56      	ldr	r3, [pc, #344]	; (8006184 <checkAktifCalisma+0xde4>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00f      	beq.n	8006052 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8006032:	4b5b      	ldr	r3, [pc, #364]	; (80061a0 <checkAktifCalisma+0xe00>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f083 0301 	eor.w	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8006040:	4b58      	ldr	r3, [pc, #352]	; (80061a4 <checkAktifCalisma+0xe04>)
 8006042:	2201      	movs	r2, #1
 8006044:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006046:	4b58      	ldr	r3, [pc, #352]	; (80061a8 <checkAktifCalisma+0xe08>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a58      	ldr	r2, [pc, #352]	; (80061ac <checkAktifCalisma+0xe0c>)
 800604c:	6013      	str	r3, [r2, #0]
			bekle();
 800604e:	f7fe ff71 	bl	8004f34 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8006052:	4b55      	ldr	r3, [pc, #340]	; (80061a8 <checkAktifCalisma+0xe08>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b55      	ldr	r3, [pc, #340]	; (80061ac <checkAktifCalisma+0xe0c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	4a54      	ldr	r2, [pc, #336]	; (80061b0 <checkAktifCalisma+0xe10>)
 800605e:	7812      	ldrb	r2, [r2, #0]
 8006060:	4293      	cmp	r3, r2
 8006062:	d20d      	bcs.n	8006080 <checkAktifCalisma+0xce0>
 8006064:	2102      	movs	r1, #2
 8006066:	4845      	ldr	r0, [pc, #276]	; (800617c <checkAktifCalisma+0xddc>)
 8006068:	f002 fd0e 	bl	8008a88 <HAL_GPIO_ReadPin>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d006      	beq.n	8006080 <checkAktifCalisma+0xce0>
 8006072:	4b44      	ldr	r3, [pc, #272]	; (8006184 <checkAktifCalisma+0xde4>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f083 0301 	eor.w	r3, r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8006080:	4b48      	ldr	r3, [pc, #288]	; (80061a4 <checkAktifCalisma+0xe04>)
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006086:	4b43      	ldr	r3, [pc, #268]	; (8006194 <checkAktifCalisma+0xdf4>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d135      	bne.n	80060fa <checkAktifCalisma+0xd5a>
 800608e:	4b3a      	ldr	r3, [pc, #232]	; (8006178 <checkAktifCalisma+0xdd8>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d003      	beq.n	800609e <checkAktifCalisma+0xcfe>
 8006096:	4b38      	ldr	r3, [pc, #224]	; (8006178 <checkAktifCalisma+0xdd8>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b03      	cmp	r3, #3
 800609c:	d12d      	bne.n	80060fa <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800609e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060a2:	4836      	ldr	r0, [pc, #216]	; (800617c <checkAktifCalisma+0xddc>)
 80060a4:	f002 fcf0 	bl	8008a88 <HAL_GPIO_ReadPin>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <checkAktifCalisma+0xd16>
 80060ae:	4b3a      	ldr	r3, [pc, #232]	; (8006198 <checkAktifCalisma+0xdf8>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <checkAktifCalisma+0xd2e>
 80060b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060ba:	4838      	ldr	r0, [pc, #224]	; (800619c <checkAktifCalisma+0xdfc>)
 80060bc:	f002 fce4 	bl	8008a88 <HAL_GPIO_ReadPin>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d119      	bne.n	80060fa <checkAktifCalisma+0xd5a>
 80060c6:	4b34      	ldr	r3, [pc, #208]	; (8006198 <checkAktifCalisma+0xdf8>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d115      	bne.n	80060fa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80060ce:	2102      	movs	r1, #2
 80060d0:	482a      	ldr	r0, [pc, #168]	; (800617c <checkAktifCalisma+0xddc>)
 80060d2:	f002 fcd9 	bl	8008a88 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10e      	bne.n	80060fa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80060dc:	2104      	movs	r1, #4
 80060de:	4827      	ldr	r0, [pc, #156]	; (800617c <checkAktifCalisma+0xddc>)
 80060e0:	f002 fcd2 	bl	8008a88 <HAL_GPIO_ReadPin>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80060ea:	4b26      	ldr	r3, [pc, #152]	; (8006184 <checkAktifCalisma+0xde4>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80060f2:	4b30      	ldr	r3, [pc, #192]	; (80061b4 <checkAktifCalisma+0xe14>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e002      	b.n	8006100 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80060fa:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <checkAktifCalisma+0xe14>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006100:	4b24      	ldr	r3, [pc, #144]	; (8006194 <checkAktifCalisma+0xdf4>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d11d      	bne.n	8006144 <checkAktifCalisma+0xda4>
 8006108:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <checkAktifCalisma+0xdd8>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d003      	beq.n	8006118 <checkAktifCalisma+0xd78>
 8006110:	4b19      	ldr	r3, [pc, #100]	; (8006178 <checkAktifCalisma+0xdd8>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b03      	cmp	r3, #3
 8006116:	d115      	bne.n	8006144 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006118:	2102      	movs	r1, #2
 800611a:	4818      	ldr	r0, [pc, #96]	; (800617c <checkAktifCalisma+0xddc>)
 800611c:	f002 fcb4 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006120:	4603      	mov	r3, r0
 8006122:	2b01      	cmp	r3, #1
 8006124:	d10e      	bne.n	8006144 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006126:	2104      	movs	r1, #4
 8006128:	4814      	ldr	r0, [pc, #80]	; (800617c <checkAktifCalisma+0xddc>)
 800612a:	f002 fcad 	bl	8008a88 <HAL_GPIO_ReadPin>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <checkAktifCalisma+0xde4>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 800613c:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <checkAktifCalisma+0xe18>)
 800613e:	2201      	movs	r2, #1
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	e002      	b.n	800614a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8006144:	4b1c      	ldr	r3, [pc, #112]	; (80061b8 <checkAktifCalisma+0xe18>)
 8006146:	2200      	movs	r2, #0
 8006148:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800614a:	4b1a      	ldr	r3, [pc, #104]	; (80061b4 <checkAktifCalisma+0xe14>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d107      	bne.n	8006162 <checkAktifCalisma+0xdc2>
 8006152:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <checkAktifCalisma+0xe18>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <checkAktifCalisma+0xdc2>
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <checkAktifCalisma+0xe04>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d02c      	beq.n	80061bc <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006162:	2201      	movs	r2, #1
 8006164:	2140      	movs	r1, #64	; 0x40
 8006166:	480a      	ldr	r0, [pc, #40]	; (8006190 <checkAktifCalisma+0xdf0>)
 8006168:	f002 fca5 	bl	8008ab6 <HAL_GPIO_WritePin>
 800616c:	e02b      	b.n	80061c6 <checkAktifCalisma+0xe26>
 800616e:	bf00      	nop
 8006170:	20000b6f 	.word	0x20000b6f
 8006174:	20000b35 	.word	0x20000b35
 8006178:	20000b34 	.word	0x20000b34
 800617c:	40011000 	.word	0x40011000
 8006180:	20000b32 	.word	0x20000b32
 8006184:	20000b6d 	.word	0x20000b6d
 8006188:	20000b70 	.word	0x20000b70
 800618c:	20000b6e 	.word	0x20000b6e
 8006190:	40010800 	.word	0x40010800
 8006194:	20000b36 	.word	0x20000b36
 8006198:	20000b38 	.word	0x20000b38
 800619c:	40010c00 	.word	0x40010c00
 80061a0:	20000b5a 	.word	0x20000b5a
 80061a4:	20000b71 	.word	0x20000b71
 80061a8:	20000b08 	.word	0x20000b08
 80061ac:	20000b0c 	.word	0x20000b0c
 80061b0:	20000b46 	.word	0x20000b46
 80061b4:	20000b72 	.word	0x20000b72
 80061b8:	20000b73 	.word	0x20000b73
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80061bc:	2200      	movs	r2, #0
 80061be:	2140      	movs	r1, #64	; 0x40
 80061c0:	488d      	ldr	r0, [pc, #564]	; (80063f8 <checkAktifCalisma+0x1058>)
 80061c2:	f002 fc78 	bl	8008ab6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80061c6:	4b8d      	ldr	r3, [pc, #564]	; (80063fc <checkAktifCalisma+0x105c>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <checkAktifCalisma+0xe36>
 80061ce:	4b8b      	ldr	r3, [pc, #556]	; (80063fc <checkAktifCalisma+0x105c>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d115      	bne.n	8006202 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80061d6:	2104      	movs	r1, #4
 80061d8:	4889      	ldr	r0, [pc, #548]	; (8006400 <checkAktifCalisma+0x1060>)
 80061da:	f002 fc55 	bl	8008a88 <HAL_GPIO_ReadPin>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d003      	beq.n	80061ec <checkAktifCalisma+0xe4c>
 80061e4:	4b87      	ldr	r3, [pc, #540]	; (8006404 <checkAktifCalisma+0x1064>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80061ec:	2102      	movs	r1, #2
 80061ee:	4884      	ldr	r0, [pc, #528]	; (8006400 <checkAktifCalisma+0x1060>)
 80061f0:	f002 fc4a 	bl	8008a88 <HAL_GPIO_ReadPin>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80061fa:	4b83      	ldr	r3, [pc, #524]	; (8006408 <checkAktifCalisma+0x1068>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	e002      	b.n	8006208 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8006202:	4b81      	ldr	r3, [pc, #516]	; (8006408 <checkAktifCalisma+0x1068>)
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006208:	4b7c      	ldr	r3, [pc, #496]	; (80063fc <checkAktifCalisma+0x105c>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d003      	beq.n	8006218 <checkAktifCalisma+0xe78>
 8006210:	4b7a      	ldr	r3, [pc, #488]	; (80063fc <checkAktifCalisma+0x105c>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d111      	bne.n	800623c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006218:	2102      	movs	r1, #2
 800621a:	4879      	ldr	r0, [pc, #484]	; (8006400 <checkAktifCalisma+0x1060>)
 800621c:	f002 fc34 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d10a      	bne.n	800623c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006226:	2104      	movs	r1, #4
 8006228:	4875      	ldr	r0, [pc, #468]	; (8006400 <checkAktifCalisma+0x1060>)
 800622a:	f002 fc2d 	bl	8008a88 <HAL_GPIO_ReadPin>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8006234:	4b75      	ldr	r3, [pc, #468]	; (800640c <checkAktifCalisma+0x106c>)
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e002      	b.n	8006242 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 800623c:	4b73      	ldr	r3, [pc, #460]	; (800640c <checkAktifCalisma+0x106c>)
 800623e:	2200      	movs	r2, #0
 8006240:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8006242:	4b71      	ldr	r3, [pc, #452]	; (8006408 <checkAktifCalisma+0x1068>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00f      	beq.n	800626a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800624a:	4b71      	ldr	r3, [pc, #452]	; (8006410 <checkAktifCalisma+0x1070>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d10b      	bne.n	800626a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8006252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006256:	486f      	ldr	r0, [pc, #444]	; (8006414 <checkAktifCalisma+0x1074>)
 8006258:	f002 fc16 	bl	8008a88 <HAL_GPIO_ReadPin>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8006262:	4b6d      	ldr	r3, [pc, #436]	; (8006418 <checkAktifCalisma+0x1078>)
 8006264:	2201      	movs	r2, #1
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	e002      	b.n	8006270 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800626a:	4b6b      	ldr	r3, [pc, #428]	; (8006418 <checkAktifCalisma+0x1078>)
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8006270:	4b66      	ldr	r3, [pc, #408]	; (800640c <checkAktifCalisma+0x106c>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00f      	beq.n	8006298 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8006278:	4b65      	ldr	r3, [pc, #404]	; (8006410 <checkAktifCalisma+0x1070>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10b      	bne.n	8006298 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006284:	4863      	ldr	r0, [pc, #396]	; (8006414 <checkAktifCalisma+0x1074>)
 8006286:	f002 fbff 	bl	8008a88 <HAL_GPIO_ReadPin>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006290:	4b62      	ldr	r3, [pc, #392]	; (800641c <checkAktifCalisma+0x107c>)
 8006292:	2201      	movs	r2, #1
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e002      	b.n	800629e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8006298:	4b60      	ldr	r3, [pc, #384]	; (800641c <checkAktifCalisma+0x107c>)
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800629e:	4b60      	ldr	r3, [pc, #384]	; (8006420 <checkAktifCalisma+0x1080>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d137      	bne.n	8006316 <checkAktifCalisma+0xf76>
 80062a6:	4b5f      	ldr	r3, [pc, #380]	; (8006424 <checkAktifCalisma+0x1084>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d003      	beq.n	80062b6 <checkAktifCalisma+0xf16>
 80062ae:	4b5d      	ldr	r3, [pc, #372]	; (8006424 <checkAktifCalisma+0x1084>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d12f      	bne.n	8006316 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80062b6:	4b54      	ldr	r3, [pc, #336]	; (8006408 <checkAktifCalisma+0x1068>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <checkAktifCalisma+0xf26>
 80062be:	4b53      	ldr	r3, [pc, #332]	; (800640c <checkAktifCalisma+0x106c>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d027      	beq.n	8006316 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80062c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ca:	484d      	ldr	r0, [pc, #308]	; (8006400 <checkAktifCalisma+0x1060>)
 80062cc:	f002 fbdc 	bl	8008a88 <HAL_GPIO_ReadPin>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <checkAktifCalisma+0xf3e>
 80062d6:	4b4e      	ldr	r3, [pc, #312]	; (8006410 <checkAktifCalisma+0x1070>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80062de:	4b4e      	ldr	r3, [pc, #312]	; (8006418 <checkAktifCalisma+0x1078>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <checkAktifCalisma+0xf4e>
 80062e6:	4b4d      	ldr	r3, [pc, #308]	; (800641c <checkAktifCalisma+0x107c>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d013      	beq.n	8006316 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80062ee:	4b4e      	ldr	r3, [pc, #312]	; (8006428 <checkAktifCalisma+0x1088>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00f      	beq.n	8006316 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80062f6:	4b4d      	ldr	r3, [pc, #308]	; (800642c <checkAktifCalisma+0x108c>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f083 0301 	eor.w	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8006304:	4b4a      	ldr	r3, [pc, #296]	; (8006430 <checkAktifCalisma+0x1090>)
 8006306:	2201      	movs	r2, #1
 8006308:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800630a:	4b4a      	ldr	r3, [pc, #296]	; (8006434 <checkAktifCalisma+0x1094>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4a      	ldr	r2, [pc, #296]	; (8006438 <checkAktifCalisma+0x1098>)
 8006310:	6013      	str	r3, [r2, #0]
			bekle();
 8006312:	f7fe fe0f 	bl	8004f34 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006316:	4b47      	ldr	r3, [pc, #284]	; (8006434 <checkAktifCalisma+0x1094>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4b47      	ldr	r3, [pc, #284]	; (8006438 <checkAktifCalisma+0x1098>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	4a46      	ldr	r2, [pc, #280]	; (800643c <checkAktifCalisma+0x109c>)
 8006322:	7812      	ldrb	r2, [r2, #0]
 8006324:	4293      	cmp	r3, r2
 8006326:	d214      	bcs.n	8006352 <checkAktifCalisma+0xfb2>
 8006328:	4b37      	ldr	r3, [pc, #220]	; (8006408 <checkAktifCalisma+0x1068>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f083 0301 	eor.w	r3, r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d006      	beq.n	8006344 <checkAktifCalisma+0xfa4>
 8006336:	4b35      	ldr	r3, [pc, #212]	; (800640c <checkAktifCalisma+0x106c>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f083 0301 	eor.w	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <checkAktifCalisma+0xfb2>
 8006344:	4b38      	ldr	r3, [pc, #224]	; (8006428 <checkAktifCalisma+0x1088>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f083 0301 	eor.w	r3, r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8006352:	4b37      	ldr	r3, [pc, #220]	; (8006430 <checkAktifCalisma+0x1090>)
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006358:	4b31      	ldr	r3, [pc, #196]	; (8006420 <checkAktifCalisma+0x1080>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d12b      	bne.n	80063b8 <checkAktifCalisma+0x1018>
 8006360:	4b30      	ldr	r3, [pc, #192]	; (8006424 <checkAktifCalisma+0x1084>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d003      	beq.n	8006370 <checkAktifCalisma+0xfd0>
 8006368:	4b2e      	ldr	r3, [pc, #184]	; (8006424 <checkAktifCalisma+0x1084>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d123      	bne.n	80063b8 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006370:	4b25      	ldr	r3, [pc, #148]	; (8006408 <checkAktifCalisma+0x1068>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <checkAktifCalisma+0xfe0>
 8006378:	4b24      	ldr	r3, [pc, #144]	; (800640c <checkAktifCalisma+0x106c>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01b      	beq.n	80063b8 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006384:	481e      	ldr	r0, [pc, #120]	; (8006400 <checkAktifCalisma+0x1060>)
 8006386:	f002 fb7f 	bl	8008a88 <HAL_GPIO_ReadPin>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <checkAktifCalisma+0xff8>
 8006390:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <checkAktifCalisma+0x1070>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006398:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <checkAktifCalisma+0x1078>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d103      	bne.n	80063a8 <checkAktifCalisma+0x1008>
 80063a0:	4b1e      	ldr	r3, [pc, #120]	; (800641c <checkAktifCalisma+0x107c>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80063a8:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <checkAktifCalisma+0x1088>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80063b0:	4b23      	ldr	r3, [pc, #140]	; (8006440 <checkAktifCalisma+0x10a0>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e002      	b.n	80063be <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80063b8:	4b21      	ldr	r3, [pc, #132]	; (8006440 <checkAktifCalisma+0x10a0>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80063be:	4b18      	ldr	r3, [pc, #96]	; (8006420 <checkAktifCalisma+0x1080>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d140      	bne.n	8006448 <checkAktifCalisma+0x10a8>
 80063c6:	4b17      	ldr	r3, [pc, #92]	; (8006424 <checkAktifCalisma+0x1084>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d003      	beq.n	80063d6 <checkAktifCalisma+0x1036>
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <checkAktifCalisma+0x1084>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d138      	bne.n	8006448 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80063d6:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <checkAktifCalisma+0x1068>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d103      	bne.n	80063e6 <checkAktifCalisma+0x1046>
 80063de:	4b0b      	ldr	r3, [pc, #44]	; (800640c <checkAktifCalisma+0x106c>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d030      	beq.n	8006448 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <checkAktifCalisma+0x1088>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d02c      	beq.n	8006448 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <checkAktifCalisma+0x10a4>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e02b      	b.n	800644e <checkAktifCalisma+0x10ae>
 80063f6:	bf00      	nop
 80063f8:	40010800 	.word	0x40010800
 80063fc:	20000b39 	.word	0x20000b39
 8006400:	40011000 	.word	0x40011000
 8006404:	20000b32 	.word	0x20000b32
 8006408:	20000b77 	.word	0x20000b77
 800640c:	20000b78 	.word	0x20000b78
 8006410:	20000b38 	.word	0x20000b38
 8006414:	40010c00 	.word	0x40010c00
 8006418:	20000b87 	.word	0x20000b87
 800641c:	20000b88 	.word	0x20000b88
 8006420:	20000b37 	.word	0x20000b37
 8006424:	20000b34 	.word	0x20000b34
 8006428:	20000b6d 	.word	0x20000b6d
 800642c:	20000b5a 	.word	0x20000b5a
 8006430:	20000b74 	.word	0x20000b74
 8006434:	20000b08 	.word	0x20000b08
 8006438:	20000b0c 	.word	0x20000b0c
 800643c:	20000b47 	.word	0x20000b47
 8006440:	20000b75 	.word	0x20000b75
 8006444:	20000b76 	.word	0x20000b76
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006448:	4b89      	ldr	r3, [pc, #548]	; (8006670 <checkAktifCalisma+0x12d0>)
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800644e:	4b89      	ldr	r3, [pc, #548]	; (8006674 <checkAktifCalisma+0x12d4>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <checkAktifCalisma+0x10c6>
 8006456:	4b88      	ldr	r3, [pc, #544]	; (8006678 <checkAktifCalisma+0x12d8>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <checkAktifCalisma+0x10c6>
 800645e:	4b84      	ldr	r3, [pc, #528]	; (8006670 <checkAktifCalisma+0x12d0>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d005      	beq.n	8006472 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006466:	2201      	movs	r2, #1
 8006468:	2120      	movs	r1, #32
 800646a:	4884      	ldr	r0, [pc, #528]	; (800667c <checkAktifCalisma+0x12dc>)
 800646c:	f002 fb23 	bl	8008ab6 <HAL_GPIO_WritePin>
 8006470:	e004      	b.n	800647c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006472:	2200      	movs	r2, #0
 8006474:	2120      	movs	r1, #32
 8006476:	4881      	ldr	r0, [pc, #516]	; (800667c <checkAktifCalisma+0x12dc>)
 8006478:	f002 fb1d 	bl	8008ab6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800647c:	4b80      	ldr	r3, [pc, #512]	; (8006680 <checkAktifCalisma+0x12e0>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <checkAktifCalisma+0x1102>
 8006484:	2102      	movs	r1, #2
 8006486:	487f      	ldr	r0, [pc, #508]	; (8006684 <checkAktifCalisma+0x12e4>)
 8006488:	f002 fafe 	bl	8008a88 <HAL_GPIO_ReadPin>
 800648c:	4603      	mov	r3, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	d107      	bne.n	80064a2 <checkAktifCalisma+0x1102>
 8006492:	4b7d      	ldr	r3, [pc, #500]	; (8006688 <checkAktifCalisma+0x12e8>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <checkAktifCalisma+0x1102>
 800649a:	4b7c      	ldr	r3, [pc, #496]	; (800668c <checkAktifCalisma+0x12ec>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d112      	bne.n	80064c8 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80064a2:	4b7b      	ldr	r3, [pc, #492]	; (8006690 <checkAktifCalisma+0x12f0>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d066      	beq.n	8006578 <checkAktifCalisma+0x11d8>
 80064aa:	2104      	movs	r1, #4
 80064ac:	4875      	ldr	r0, [pc, #468]	; (8006684 <checkAktifCalisma+0x12e4>)
 80064ae:	f002 faeb 	bl	8008a88 <HAL_GPIO_ReadPin>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d15f      	bne.n	8006578 <checkAktifCalisma+0x11d8>
 80064b8:	4b73      	ldr	r3, [pc, #460]	; (8006688 <checkAktifCalisma+0x12e8>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d05b      	beq.n	8006578 <checkAktifCalisma+0x11d8>
 80064c0:	4b72      	ldr	r3, [pc, #456]	; (800668c <checkAktifCalisma+0x12ec>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d057      	beq.n	8006578 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80064c8:	4b72      	ldr	r3, [pc, #456]	; (8006694 <checkAktifCalisma+0x12f4>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	4b70      	ldr	r3, [pc, #448]	; (8006694 <checkAktifCalisma+0x12f4>)
 80064d2:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80064d4:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <checkAktifCalisma+0x12f4>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b09      	cmp	r3, #9
 80064da:	d908      	bls.n	80064ee <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80064dc:	4b6d      	ldr	r3, [pc, #436]	; (8006694 <checkAktifCalisma+0x12f4>)
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80064e2:	4b6d      	ldr	r3, [pc, #436]	; (8006698 <checkAktifCalisma+0x12f8>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b6b      	ldr	r3, [pc, #428]	; (8006698 <checkAktifCalisma+0x12f8>)
 80064ec:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80064ee:	4b6a      	ldr	r3, [pc, #424]	; (8006698 <checkAktifCalisma+0x12f8>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b09      	cmp	r3, #9
 80064f4:	d908      	bls.n	8006508 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80064f6:	4b68      	ldr	r3, [pc, #416]	; (8006698 <checkAktifCalisma+0x12f8>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80064fc:	4b67      	ldr	r3, [pc, #412]	; (800669c <checkAktifCalisma+0x12fc>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	3301      	adds	r3, #1
 8006502:	b2da      	uxtb	r2, r3
 8006504:	4b65      	ldr	r3, [pc, #404]	; (800669c <checkAktifCalisma+0x12fc>)
 8006506:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006508:	4b64      	ldr	r3, [pc, #400]	; (800669c <checkAktifCalisma+0x12fc>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b09      	cmp	r3, #9
 800650e:	d908      	bls.n	8006522 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006510:	4b62      	ldr	r3, [pc, #392]	; (800669c <checkAktifCalisma+0x12fc>)
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006516:	4b62      	ldr	r3, [pc, #392]	; (80066a0 <checkAktifCalisma+0x1300>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	b2da      	uxtb	r2, r3
 800651e:	4b60      	ldr	r3, [pc, #384]	; (80066a0 <checkAktifCalisma+0x1300>)
 8006520:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006522:	4b5f      	ldr	r3, [pc, #380]	; (80066a0 <checkAktifCalisma+0x1300>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b09      	cmp	r3, #9
 8006528:	d908      	bls.n	800653c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800652a:	4b5d      	ldr	r3, [pc, #372]	; (80066a0 <checkAktifCalisma+0x1300>)
 800652c:	2200      	movs	r2, #0
 800652e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006530:	4b5c      	ldr	r3, [pc, #368]	; (80066a4 <checkAktifCalisma+0x1304>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	4b5a      	ldr	r3, [pc, #360]	; (80066a4 <checkAktifCalisma+0x1304>)
 800653a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800653c:	4b59      	ldr	r3, [pc, #356]	; (80066a4 <checkAktifCalisma+0x1304>)
 800653e:	781a      	ldrb	r2, [r3, #0]
 8006540:	4b59      	ldr	r3, [pc, #356]	; (80066a8 <checkAktifCalisma+0x1308>)
 8006542:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006546:	4b56      	ldr	r3, [pc, #344]	; (80066a0 <checkAktifCalisma+0x1300>)
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	4b57      	ldr	r3, [pc, #348]	; (80066a8 <checkAktifCalisma+0x1308>)
 800654c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800654e:	4b53      	ldr	r3, [pc, #332]	; (800669c <checkAktifCalisma+0x12fc>)
 8006550:	781a      	ldrb	r2, [r3, #0]
 8006552:	4b55      	ldr	r3, [pc, #340]	; (80066a8 <checkAktifCalisma+0x1308>)
 8006554:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006556:	4b50      	ldr	r3, [pc, #320]	; (8006698 <checkAktifCalisma+0x12f8>)
 8006558:	781a      	ldrb	r2, [r3, #0]
 800655a:	4b53      	ldr	r3, [pc, #332]	; (80066a8 <checkAktifCalisma+0x1308>)
 800655c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800655e:	4b4d      	ldr	r3, [pc, #308]	; (8006694 <checkAktifCalisma+0x12f4>)
 8006560:	781a      	ldrb	r2, [r3, #0]
 8006562:	4b51      	ldr	r3, [pc, #324]	; (80066a8 <checkAktifCalisma+0x1308>)
 8006564:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006566:	4b51      	ldr	r3, [pc, #324]	; (80066ac <checkAktifCalisma+0x130c>)
 8006568:	2201      	movs	r2, #1
 800656a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800656c:	4b44      	ldr	r3, [pc, #272]	; (8006680 <checkAktifCalisma+0x12e0>)
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006572:	4b47      	ldr	r3, [pc, #284]	; (8006690 <checkAktifCalisma+0x12f0>)
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800657c:	484c      	ldr	r0, [pc, #304]	; (80066b0 <checkAktifCalisma+0x1310>)
 800657e:	f002 fa83 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d016      	beq.n	80065b6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800658c:	4848      	ldr	r0, [pc, #288]	; (80066b0 <checkAktifCalisma+0x1310>)
 800658e:	f002 fa7b 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800659c:	4844      	ldr	r0, [pc, #272]	; (80066b0 <checkAktifCalisma+0x1310>)
 800659e:	f002 fa73 	bl	8008a88 <HAL_GPIO_ReadPin>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d006      	beq.n	80065b6 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80065a8:	2140      	movs	r1, #64	; 0x40
 80065aa:	4836      	ldr	r0, [pc, #216]	; (8006684 <checkAktifCalisma+0x12e4>)
 80065ac:	f002 fa6c 	bl	8008a88 <HAL_GPIO_ReadPin>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <checkAktifCalisma+0x121e>
			startBasili=1;
 80065b6:	4b3f      	ldr	r3, [pc, #252]	; (80066b4 <checkAktifCalisma+0x1314>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	e002      	b.n	80065c4 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80065be:	4b3d      	ldr	r3, [pc, #244]	; (80066b4 <checkAktifCalisma+0x1314>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80065c4:	4b3b      	ldr	r3, [pc, #236]	; (80066b4 <checkAktifCalisma+0x1314>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d014      	beq.n	80065f6 <checkAktifCalisma+0x1256>
 80065cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065d0:	4837      	ldr	r0, [pc, #220]	; (80066b0 <checkAktifCalisma+0x1310>)
 80065d2:	f002 fa59 	bl	8008a88 <HAL_GPIO_ReadPin>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d10c      	bne.n	80065f6 <checkAktifCalisma+0x1256>
			hataVar=1;
 80065dc:	4b36      	ldr	r3, [pc, #216]	; (80066b8 <checkAktifCalisma+0x1318>)
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80065e2:	2001      	movs	r0, #1
 80065e4:	f7fe f8ac 	bl	8004740 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80065e8:	2001      	movs	r0, #1
 80065ea:	f7fe fc27 	bl	8004e3c <hata2EEPROM>
			acilstophatasi=1;
 80065ee:	4b33      	ldr	r3, [pc, #204]	; (80066bc <checkAktifCalisma+0x131c>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e018      	b.n	8006628 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80065f6:	4b31      	ldr	r3, [pc, #196]	; (80066bc <checkAktifCalisma+0x131c>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d014      	beq.n	8006628 <checkAktifCalisma+0x1288>
 80065fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006602:	482b      	ldr	r0, [pc, #172]	; (80066b0 <checkAktifCalisma+0x1310>)
 8006604:	f002 fa40 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10c      	bne.n	8006628 <checkAktifCalisma+0x1288>
 800660e:	4b29      	ldr	r3, [pc, #164]	; (80066b4 <checkAktifCalisma+0x1314>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f083 0301 	eor.w	r3, r3, #1
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 800661c:	4b27      	ldr	r3, [pc, #156]	; (80066bc <checkAktifCalisma+0x131c>)
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006622:	2001      	movs	r0, #1
 8006624:	f7fe f838 	bl	8004698 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006628:	4b25      	ldr	r3, [pc, #148]	; (80066c0 <checkAktifCalisma+0x1320>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	f083 0301 	eor.w	r3, r3, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d04c      	beq.n	80066d0 <checkAktifCalisma+0x1330>
 8006636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800663a:	481d      	ldr	r0, [pc, #116]	; (80066b0 <checkAktifCalisma+0x1310>)
 800663c:	f002 fa24 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <checkAktifCalisma+0x12ae>
 8006646:	4b1f      	ldr	r3, [pc, #124]	; (80066c4 <checkAktifCalisma+0x1324>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d040      	beq.n	80066d0 <checkAktifCalisma+0x1330>
 800664e:	4b1e      	ldr	r3, [pc, #120]	; (80066c8 <checkAktifCalisma+0x1328>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d13c      	bne.n	80066d0 <checkAktifCalisma+0x1330>
			hataVar=1;
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <checkAktifCalisma+0x1318>)
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800665c:	2002      	movs	r0, #2
 800665e:	f7fe f86f 	bl	8004740 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006662:	2002      	movs	r0, #2
 8006664:	f7fe fbea 	bl	8004e3c <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8006668:	4b18      	ldr	r3, [pc, #96]	; (80066cc <checkAktifCalisma+0x132c>)
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e047      	b.n	8006700 <checkAktifCalisma+0x1360>
 8006670:	20000b76 	.word	0x20000b76
 8006674:	20000b75 	.word	0x20000b75
 8006678:	20000b74 	.word	0x20000b74
 800667c:	40010800 	.word	0x40010800
 8006680:	20000b6a 	.word	0x20000b6a
 8006684:	40011000 	.word	0x40011000
 8006688:	20000b32 	.word	0x20000b32
 800668c:	20000b6d 	.word	0x20000b6d
 8006690:	20000b6b 	.word	0x20000b6b
 8006694:	20000b29 	.word	0x20000b29
 8006698:	20000b2a 	.word	0x20000b2a
 800669c:	20000947 	.word	0x20000947
 80066a0:	20000948 	.word	0x20000948
 80066a4:	20000b2b 	.word	0x20000b2b
 80066a8:	20000ac0 	.word	0x20000ac0
 80066ac:	20000b57 	.word	0x20000b57
 80066b0:	40010c00 	.word	0x40010c00
 80066b4:	20000b79 	.word	0x20000b79
 80066b8:	20000b80 	.word	0x20000b80
 80066bc:	20000b7b 	.word	0x20000b7b
 80066c0:	20000b82 	.word	0x20000b82
 80066c4:	20000b8c 	.word	0x20000b8c
 80066c8:	20000b30 	.word	0x20000b30
 80066cc:	20000b7c 	.word	0x20000b7c
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80066d0:	4b97      	ldr	r3, [pc, #604]	; (8006930 <checkAktifCalisma+0x1590>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d013      	beq.n	8006700 <checkAktifCalisma+0x1360>
 80066d8:	4b96      	ldr	r3, [pc, #600]	; (8006934 <checkAktifCalisma+0x1594>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00f      	beq.n	8006700 <checkAktifCalisma+0x1360>
 80066e0:	4b95      	ldr	r3, [pc, #596]	; (8006938 <checkAktifCalisma+0x1598>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	f083 0301 	eor.w	r3, r3, #1
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d008      	beq.n	8006700 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 80066ee:	4b90      	ldr	r3, [pc, #576]	; (8006930 <checkAktifCalisma+0x1590>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80066f4:	4b91      	ldr	r3, [pc, #580]	; (800693c <checkAktifCalisma+0x159c>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80066fa:	2002      	movs	r0, #2
 80066fc:	f7fd ffcc 	bl	8004698 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006700:	4b8f      	ldr	r3, [pc, #572]	; (8006940 <checkAktifCalisma+0x15a0>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11c      	bne.n	8006742 <checkAktifCalisma+0x13a2>
 8006708:	4b8e      	ldr	r3, [pc, #568]	; (8006944 <checkAktifCalisma+0x15a4>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d118      	bne.n	8006742 <checkAktifCalisma+0x13a2>
 8006710:	4b8d      	ldr	r3, [pc, #564]	; (8006948 <checkAktifCalisma+0x15a8>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d014      	beq.n	8006742 <checkAktifCalisma+0x13a2>
 8006718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800671c:	488b      	ldr	r0, [pc, #556]	; (800694c <checkAktifCalisma+0x15ac>)
 800671e:	f002 f9b3 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006722:	4603      	mov	r3, r0
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10c      	bne.n	8006742 <checkAktifCalisma+0x13a2>
			hataVar=1;
 8006728:	4b89      	ldr	r3, [pc, #548]	; (8006950 <checkAktifCalisma+0x15b0>)
 800672a:	2201      	movs	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800672e:	2003      	movs	r0, #3
 8006730:	f7fe f806 	bl	8004740 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006734:	2003      	movs	r0, #3
 8006736:	f7fe fb81 	bl	8004e3c <hata2EEPROM>
			basinchatasi=1;
 800673a:	4b86      	ldr	r3, [pc, #536]	; (8006954 <checkAktifCalisma+0x15b4>)
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e015      	b.n	800676e <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006742:	4b84      	ldr	r3, [pc, #528]	; (8006954 <checkAktifCalisma+0x15b4>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d011      	beq.n	800676e <checkAktifCalisma+0x13ce>
 800674a:	4b7d      	ldr	r3, [pc, #500]	; (8006940 <checkAktifCalisma+0x15a0>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d10d      	bne.n	800676e <checkAktifCalisma+0x13ce>
 8006752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006756:	4880      	ldr	r0, [pc, #512]	; (8006958 <checkAktifCalisma+0x15b8>)
 8006758:	f002 f996 	bl	8008a88 <HAL_GPIO_ReadPin>
 800675c:	4603      	mov	r3, r0
 800675e:	2b01      	cmp	r3, #1
 8006760:	d105      	bne.n	800676e <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8006762:	4b7c      	ldr	r3, [pc, #496]	; (8006954 <checkAktifCalisma+0x15b4>)
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006768:	2003      	movs	r0, #3
 800676a:	f7fd ff95 	bl	8004698 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800676e:	4b7b      	ldr	r3, [pc, #492]	; (800695c <checkAktifCalisma+0x15bc>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <checkAktifCalisma+0x13de>
 8006776:	4b7a      	ldr	r3, [pc, #488]	; (8006960 <checkAktifCalisma+0x15c0>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01c      	beq.n	80067b8 <checkAktifCalisma+0x1418>
 800677e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006782:	4878      	ldr	r0, [pc, #480]	; (8006964 <checkAktifCalisma+0x15c4>)
 8006784:	f002 f980 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006788:	4603      	mov	r3, r0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d114      	bne.n	80067b8 <checkAktifCalisma+0x1418>
 800678e:	4b76      	ldr	r3, [pc, #472]	; (8006968 <checkAktifCalisma+0x15c8>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d003      	beq.n	800679e <checkAktifCalisma+0x13fe>
 8006796:	4b74      	ldr	r3, [pc, #464]	; (8006968 <checkAktifCalisma+0x15c8>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b03      	cmp	r3, #3
 800679c:	d10c      	bne.n	80067b8 <checkAktifCalisma+0x1418>
			hataVar=1;
 800679e:	4b6c      	ldr	r3, [pc, #432]	; (8006950 <checkAktifCalisma+0x15b0>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80067a4:	2004      	movs	r0, #4
 80067a6:	f7fd ffcb 	bl	8004740 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80067aa:	2004      	movs	r0, #4
 80067ac:	f7fe fb46 	bl	8004e3c <hata2EEPROM>
			katkapisivicihatasi=1;
 80067b0:	4b6e      	ldr	r3, [pc, #440]	; (800696c <checkAktifCalisma+0x15cc>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e01f      	b.n	80067f8 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80067b8:	4b6c      	ldr	r3, [pc, #432]	; (800696c <checkAktifCalisma+0x15cc>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01b      	beq.n	80067f8 <checkAktifCalisma+0x1458>
 80067c0:	4b6b      	ldr	r3, [pc, #428]	; (8006970 <checkAktifCalisma+0x15d0>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d017      	beq.n	80067f8 <checkAktifCalisma+0x1458>
 80067c8:	4b64      	ldr	r3, [pc, #400]	; (800695c <checkAktifCalisma+0x15bc>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f083 0301 	eor.w	r3, r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d010      	beq.n	80067f8 <checkAktifCalisma+0x1458>
 80067d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067da:	4862      	ldr	r0, [pc, #392]	; (8006964 <checkAktifCalisma+0x15c4>)
 80067dc:	f002 f954 	bl	8008a88 <HAL_GPIO_ReadPin>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d108      	bne.n	80067f8 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 80067e6:	4b61      	ldr	r3, [pc, #388]	; (800696c <checkAktifCalisma+0x15cc>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80067ec:	4b5c      	ldr	r3, [pc, #368]	; (8006960 <checkAktifCalisma+0x15c0>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80067f2:	2004      	movs	r0, #4
 80067f4:	f7fd ff50 	bl	8004698 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80067f8:	4b58      	ldr	r3, [pc, #352]	; (800695c <checkAktifCalisma+0x15bc>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <checkAktifCalisma+0x1468>
 8006800:	4b5c      	ldr	r3, [pc, #368]	; (8006974 <checkAktifCalisma+0x15d4>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01c      	beq.n	8006842 <checkAktifCalisma+0x14a2>
 8006808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800680c:	4855      	ldr	r0, [pc, #340]	; (8006964 <checkAktifCalisma+0x15c4>)
 800680e:	f002 f93b 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006812:	4603      	mov	r3, r0
 8006814:	2b01      	cmp	r3, #1
 8006816:	d114      	bne.n	8006842 <checkAktifCalisma+0x14a2>
 8006818:	4b53      	ldr	r3, [pc, #332]	; (8006968 <checkAktifCalisma+0x15c8>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d003      	beq.n	8006828 <checkAktifCalisma+0x1488>
 8006820:	4b51      	ldr	r3, [pc, #324]	; (8006968 <checkAktifCalisma+0x15c8>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d10c      	bne.n	8006842 <checkAktifCalisma+0x14a2>
			hataVar=1;
 8006828:	4b49      	ldr	r3, [pc, #292]	; (8006950 <checkAktifCalisma+0x15b0>)
 800682a:	2201      	movs	r2, #1
 800682c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800682e:	2005      	movs	r0, #5
 8006830:	f7fd ff86 	bl	8004740 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006834:	2005      	movs	r0, #5
 8006836:	f7fe fb01 	bl	8004e3c <hata2EEPROM>
			tablakapisivicihatasi=1;
 800683a:	4b4f      	ldr	r3, [pc, #316]	; (8006978 <checkAktifCalisma+0x15d8>)
 800683c:	2201      	movs	r2, #1
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	e023      	b.n	800688a <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006842:	4b4d      	ldr	r3, [pc, #308]	; (8006978 <checkAktifCalisma+0x15d8>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01f      	beq.n	800688a <checkAktifCalisma+0x14ea>
 800684a:	4b49      	ldr	r3, [pc, #292]	; (8006970 <checkAktifCalisma+0x15d0>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01b      	beq.n	800688a <checkAktifCalisma+0x14ea>
 8006852:	4b42      	ldr	r3, [pc, #264]	; (800695c <checkAktifCalisma+0x15bc>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	f083 0301 	eor.w	r3, r3, #1
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d014      	beq.n	800688a <checkAktifCalisma+0x14ea>
 8006860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006864:	483f      	ldr	r0, [pc, #252]	; (8006964 <checkAktifCalisma+0x15c4>)
 8006866:	f002 f90f 	bl	8008a88 <HAL_GPIO_ReadPin>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10c      	bne.n	800688a <checkAktifCalisma+0x14ea>
 8006870:	4b3f      	ldr	r3, [pc, #252]	; (8006970 <checkAktifCalisma+0x15d0>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8006878:	4b3f      	ldr	r3, [pc, #252]	; (8006978 <checkAktifCalisma+0x15d8>)
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800687e:	4b3d      	ldr	r3, [pc, #244]	; (8006974 <checkAktifCalisma+0x15d4>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006884:	2005      	movs	r0, #5
 8006886:	f7fd ff07 	bl	8004698 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800688a:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <checkAktifCalisma+0x15a8>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <checkAktifCalisma+0x1502>
 8006892:	4b29      	ldr	r3, [pc, #164]	; (8006938 <checkAktifCalisma+0x1598>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <checkAktifCalisma+0x1502>
 800689a:	4b38      	ldr	r3, [pc, #224]	; (800697c <checkAktifCalisma+0x15dc>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d014      	beq.n	80068cc <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 80068a2:	4b37      	ldr	r3, [pc, #220]	; (8006980 <checkAktifCalisma+0x15e0>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b37      	ldr	r3, [pc, #220]	; (8006984 <checkAktifCalisma+0x15e4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	4a36      	ldr	r2, [pc, #216]	; (8006988 <checkAktifCalisma+0x15e8>)
 80068ae:	7812      	ldrb	r2, [r2, #0]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d30b      	bcc.n	80068cc <checkAktifCalisma+0x152c>
			  	hataVar=1;
 80068b4:	4b26      	ldr	r3, [pc, #152]	; (8006950 <checkAktifCalisma+0x15b0>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80068ba:	2006      	movs	r0, #6
 80068bc:	f7fd ff40 	bl	8004740 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80068c0:	2006      	movs	r0, #6
 80068c2:	f7fe fabb 	bl	8004e3c <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 80068c6:	4b31      	ldr	r3, [pc, #196]	; (800698c <checkAktifCalisma+0x15ec>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80068cc:	4b2f      	ldr	r3, [pc, #188]	; (800698c <checkAktifCalisma+0x15ec>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d013      	beq.n	80068fc <checkAktifCalisma+0x155c>
 80068d4:	2108      	movs	r1, #8
 80068d6:	4823      	ldr	r0, [pc, #140]	; (8006964 <checkAktifCalisma+0x15c4>)
 80068d8:	f002 f8d6 	bl	8008a88 <HAL_GPIO_ReadPin>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <checkAktifCalisma+0x155c>
 80068e2:	4b1e      	ldr	r3, [pc, #120]	; (800695c <checkAktifCalisma+0x15bc>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	f083 0301 	eor.w	r3, r3, #1
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 80068f0:	4b26      	ldr	r3, [pc, #152]	; (800698c <checkAktifCalisma+0x15ec>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80068f6:	2006      	movs	r0, #6
 80068f8:	f7fd fece 	bl	8004698 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80068fc:	4b24      	ldr	r3, [pc, #144]	; (8006990 <checkAktifCalisma+0x15f0>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10b      	bne.n	800691c <checkAktifCalisma+0x157c>
 8006904:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <checkAktifCalisma+0x1598>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d107      	bne.n	800691c <checkAktifCalisma+0x157c>
 800690c:	4b21      	ldr	r3, [pc, #132]	; (8006994 <checkAktifCalisma+0x15f4>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d103      	bne.n	800691c <checkAktifCalisma+0x157c>
 8006914:	4b19      	ldr	r3, [pc, #100]	; (800697c <checkAktifCalisma+0x15dc>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d03f      	beq.n	800699c <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 800691c:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <checkAktifCalisma+0x15f8>)
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006922:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <checkAktifCalisma+0x15c0>)
 8006924:	2201      	movs	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <checkAktifCalisma+0x15d4>)
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e03c      	b.n	80069aa <checkAktifCalisma+0x160a>
 8006930:	20000b7c 	.word	0x20000b7c
 8006934:	20000b82 	.word	0x20000b82
 8006938:	20000b63 	.word	0x20000b63
 800693c:	20000b8c 	.word	0x20000b8c
 8006940:	20000b2f 	.word	0x20000b2f
 8006944:	20000b33 	.word	0x20000b33
 8006948:	20000b7f 	.word	0x20000b7f
 800694c:	40011000 	.word	0x40011000
 8006950:	20000b80 	.word	0x20000b80
 8006954:	20000b89 	.word	0x20000b89
 8006958:	40010c00 	.word	0x40010c00
 800695c:	20000b79 	.word	0x20000b79
 8006960:	20000b8d 	.word	0x20000b8d
 8006964:	40010800 	.word	0x40010800
 8006968:	20000b34 	.word	0x20000b34
 800696c:	20000b8a 	.word	0x20000b8a
 8006970:	20000b6d 	.word	0x20000b6d
 8006974:	20000b8e 	.word	0x20000b8e
 8006978:	20000b8b 	.word	0x20000b8b
 800697c:	20000b62 	.word	0x20000b62
 8006980:	20000b08 	.word	0x20000b08
 8006984:	20000b1c 	.word	0x20000b1c
 8006988:	20000b44 	.word	0x20000b44
 800698c:	20000b7a 	.word	0x20000b7a
 8006990:	20000b60 	.word	0x20000b60
 8006994:	20000b61 	.word	0x20000b61
 8006998:	20000b81 	.word	0x20000b81
		} else {
			makineCalisiyor=1;
 800699c:	4b1e      	ldr	r3, [pc, #120]	; (8006a18 <checkAktifCalisma+0x1678>)
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80069a2:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <checkAktifCalisma+0x167c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <checkAktifCalisma+0x1680>)
 80069a8:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80069aa:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <checkAktifCalisma+0x1684>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d02f      	beq.n	8006a12 <checkAktifCalisma+0x1672>
 80069b2:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <checkAktifCalisma+0x1688>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	f083 0301 	eor.w	r3, r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d028      	beq.n	8006a12 <checkAktifCalisma+0x1672>
 80069c0:	4b1a      	ldr	r3, [pc, #104]	; (8006a2c <checkAktifCalisma+0x168c>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	f083 0301 	eor.w	r3, r3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d021      	beq.n	8006a12 <checkAktifCalisma+0x1672>
 80069ce:	4b18      	ldr	r3, [pc, #96]	; (8006a30 <checkAktifCalisma+0x1690>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f083 0301 	eor.w	r3, r3, #1
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01a      	beq.n	8006a12 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80069dc:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <checkAktifCalisma+0x1694>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f083 0301 	eor.w	r3, r3, #1
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d013      	beq.n	8006a12 <checkAktifCalisma+0x1672>
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <checkAktifCalisma+0x1698>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	f083 0301 	eor.w	r3, r3, #1
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00c      	beq.n	8006a12 <checkAktifCalisma+0x1672>
 80069f8:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <checkAktifCalisma+0x169c>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f083 0301 	eor.w	r3, r3, #1
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <checkAktifCalisma+0x1672>
			hataVar=0;
 8006a06:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <checkAktifCalisma+0x1684>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006a0c:	2007      	movs	r0, #7
 8006a0e:	f7fd fe43 	bl	8004698 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006a12:	bf00      	nop
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000b81 	.word	0x20000b81
 8006a1c:	20000b08 	.word	0x20000b08
 8006a20:	20000b1c 	.word	0x20000b1c
 8006a24:	20000b80 	.word	0x20000b80
 8006a28:	20000b7b 	.word	0x20000b7b
 8006a2c:	20000b7c 	.word	0x20000b7c
 8006a30:	20000b89 	.word	0x20000b89
 8006a34:	20000b8a 	.word	0x20000b8a
 8006a38:	20000b8b 	.word	0x20000b8b
 8006a3c:	20000b7a 	.word	0x20000b7a

08006a40 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006a44:	4b8b      	ldr	r3, [pc, #556]	; (8006c74 <checkDemoModCalisma+0x234>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	f040 8229 	bne.w	8006ea0 <checkDemoModCalisma+0x460>
 8006a4e:	4b8a      	ldr	r3, [pc, #552]	; (8006c78 <checkDemoModCalisma+0x238>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8224 	beq.w	8006ea0 <checkDemoModCalisma+0x460>
 8006a58:	4b88      	ldr	r3, [pc, #544]	; (8006c7c <checkDemoModCalisma+0x23c>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 821f 	bne.w	8006ea0 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006a62:	2102      	movs	r1, #2
 8006a64:	4886      	ldr	r0, [pc, #536]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006a66:	f002 f80f 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d11d      	bne.n	8006aac <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006a70:	4b84      	ldr	r3, [pc, #528]	; (8006c84 <checkDemoModCalisma+0x244>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	f083 0301 	eor.w	r3, r3, #1
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006a7e:	4b82      	ldr	r3, [pc, #520]	; (8006c88 <checkDemoModCalisma+0x248>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	f083 0301 	eor.w	r3, r3, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00f      	beq.n	8006aac <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006a8c:	4b7f      	ldr	r3, [pc, #508]	; (8006c8c <checkDemoModCalisma+0x24c>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f083 0301 	eor.w	r3, r3, #1
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d008      	beq.n	8006aac <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	487c      	ldr	r0, [pc, #496]	; (8006c90 <checkDemoModCalisma+0x250>)
 8006aa0:	f002 f809 	bl	8008ab6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006aa4:	4b7b      	ldr	r3, [pc, #492]	; (8006c94 <checkDemoModCalisma+0x254>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	e00e      	b.n	8006aca <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006aac:	2102      	movs	r1, #2
 8006aae:	4874      	ldr	r0, [pc, #464]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006ab0:	f001 ffea 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d107      	bne.n	8006aca <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006aba:	2200      	movs	r2, #0
 8006abc:	2104      	movs	r1, #4
 8006abe:	4874      	ldr	r0, [pc, #464]	; (8006c90 <checkDemoModCalisma+0x250>)
 8006ac0:	f001 fff9 	bl	8008ab6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006ac4:	4b73      	ldr	r3, [pc, #460]	; (8006c94 <checkDemoModCalisma+0x254>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006aca:	4b72      	ldr	r3, [pc, #456]	; (8006c94 <checkDemoModCalisma+0x254>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <checkDemoModCalisma+0xaa>
 8006ad2:	4b6d      	ldr	r3, [pc, #436]	; (8006c88 <checkDemoModCalisma+0x248>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d107      	bne.n	8006aea <checkDemoModCalisma+0xaa>
 8006ada:	4b6c      	ldr	r3, [pc, #432]	; (8006c8c <checkDemoModCalisma+0x24c>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <checkDemoModCalisma+0xaa>
 8006ae2:	4b68      	ldr	r3, [pc, #416]	; (8006c84 <checkDemoModCalisma+0x244>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006aea:	2201      	movs	r2, #1
 8006aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006af0:	4867      	ldr	r0, [pc, #412]	; (8006c90 <checkDemoModCalisma+0x250>)
 8006af2:	f001 ffe0 	bl	8008ab6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006af6:	2201      	movs	r2, #1
 8006af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006afc:	4864      	ldr	r0, [pc, #400]	; (8006c90 <checkDemoModCalisma+0x250>)
 8006afe:	f001 ffda 	bl	8008ab6 <HAL_GPIO_WritePin>
 8006b02:	e00b      	b.n	8006b1c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006b04:	2200      	movs	r2, #0
 8006b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b0a:	4861      	ldr	r0, [pc, #388]	; (8006c90 <checkDemoModCalisma+0x250>)
 8006b0c:	f001 ffd3 	bl	8008ab6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006b10:	2200      	movs	r2, #0
 8006b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b16:	485e      	ldr	r0, [pc, #376]	; (8006c90 <checkDemoModCalisma+0x250>)
 8006b18:	f001 ffcd 	bl	8008ab6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	4858      	ldr	r0, [pc, #352]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006b20:	f001 ffb2 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d10d      	bne.n	8006b46 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b2e:	4854      	ldr	r0, [pc, #336]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006b30:	f001 ffaa 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d105      	bne.n	8006b46 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006b3a:	4b56      	ldr	r3, [pc, #344]	; (8006c94 <checkDemoModCalisma+0x254>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	f083 0301 	eor.w	r3, r3, #1
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006b46:	2102      	movs	r1, #2
 8006b48:	484d      	ldr	r0, [pc, #308]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006b4a:	f001 ff9d 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d125      	bne.n	8006ba0 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b58:	4849      	ldr	r0, [pc, #292]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006b5a:	f001 ff95 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d11d      	bne.n	8006ba0 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006b64:	4b4b      	ldr	r3, [pc, #300]	; (8006c94 <checkDemoModCalisma+0x254>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f083 0301 	eor.w	r3, r3, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006b72:	4b44      	ldr	r3, [pc, #272]	; (8006c84 <checkDemoModCalisma+0x244>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	f083 0301 	eor.w	r3, r3, #1
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00f      	beq.n	8006ba0 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006b80:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <checkDemoModCalisma+0x24c>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f083 0301 	eor.w	r3, r3, #1
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006b8e:	2201      	movs	r2, #1
 8006b90:	2120      	movs	r1, #32
 8006b92:	483b      	ldr	r0, [pc, #236]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006b94:	f001 ff8f 	bl	8008ab6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006b98:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <checkDemoModCalisma+0x248>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e007      	b.n	8006bb0 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2120      	movs	r1, #32
 8006ba4:	4836      	ldr	r0, [pc, #216]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006ba6:	f001 ff86 	bl	8008ab6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006baa:	4b37      	ldr	r3, [pc, #220]	; (8006c88 <checkDemoModCalisma+0x248>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	4833      	ldr	r0, [pc, #204]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006bb4:	f001 ff68 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d125      	bne.n	8006c0a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006bc2:	482f      	ldr	r0, [pc, #188]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006bc4:	f001 ff60 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d11d      	bne.n	8006c0a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006bce:	4b31      	ldr	r3, [pc, #196]	; (8006c94 <checkDemoModCalisma+0x254>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f083 0301 	eor.w	r3, r3, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d016      	beq.n	8006c0a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006bdc:	4b2a      	ldr	r3, [pc, #168]	; (8006c88 <checkDemoModCalisma+0x248>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f083 0301 	eor.w	r3, r3, #1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00f      	beq.n	8006c0a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006bea:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <checkDemoModCalisma+0x244>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	f083 0301 	eor.w	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	2110      	movs	r1, #16
 8006bfc:	4820      	ldr	r0, [pc, #128]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006bfe:	f001 ff5a 	bl	8008ab6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006c02:	4b22      	ldr	r3, [pc, #136]	; (8006c8c <checkDemoModCalisma+0x24c>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e007      	b.n	8006c1a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2110      	movs	r1, #16
 8006c0e:	481c      	ldr	r0, [pc, #112]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006c10:	f001 ff51 	bl	8008ab6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006c14:	4b1d      	ldr	r3, [pc, #116]	; (8006c8c <checkDemoModCalisma+0x24c>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	4818      	ldr	r0, [pc, #96]	; (8006c80 <checkDemoModCalisma+0x240>)
 8006c1e:	f001 ff33 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d139      	bne.n	8006c9c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006c28:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <checkDemoModCalisma+0x254>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f083 0301 	eor.w	r3, r3, #1
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d032      	beq.n	8006c9c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006c36:	4b15      	ldr	r3, [pc, #84]	; (8006c8c <checkDemoModCalisma+0x24c>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f083 0301 	eor.w	r3, r3, #1
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02b      	beq.n	8006c9c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006c44:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <checkDemoModCalisma+0x248>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	f083 0301 	eor.w	r3, r3, #1
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d024      	beq.n	8006c9c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006c52:	2201      	movs	r2, #1
 8006c54:	2102      	movs	r1, #2
 8006c56:	480e      	ldr	r0, [pc, #56]	; (8006c90 <checkDemoModCalisma+0x250>)
 8006c58:	f001 ff2d 	bl	8008ab6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	2101      	movs	r1, #1
 8006c60:	480b      	ldr	r0, [pc, #44]	; (8006c90 <checkDemoModCalisma+0x250>)
 8006c62:	f001 ff28 	bl	8008ab6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <checkDemoModCalisma+0x244>)
 8006c68:	2201      	movs	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <checkDemoModCalisma+0x258>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	e027      	b.n	8006cc4 <checkDemoModCalisma+0x284>
 8006c74:	20000b4a 	.word	0x20000b4a
 8006c78:	20000b7d 	.word	0x20000b7d
 8006c7c:	20000b49 	.word	0x20000b49
 8006c80:	40011000 	.word	0x40011000
 8006c84:	20000b84 	.word	0x20000b84
 8006c88:	20000b85 	.word	0x20000b85
 8006c8c:	20000b86 	.word	0x20000b86
 8006c90:	40010c00 	.word	0x40010c00
 8006c94:	20000b83 	.word	0x20000b83
 8006c98:	20000b69 	.word	0x20000b69
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	48a0      	ldr	r0, [pc, #640]	; (8006f20 <checkDemoModCalisma+0x4e0>)
 8006ca0:	f001 fef2 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d10c      	bne.n	8006cc4 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006caa:	2200      	movs	r2, #0
 8006cac:	2102      	movs	r1, #2
 8006cae:	489d      	ldr	r0, [pc, #628]	; (8006f24 <checkDemoModCalisma+0x4e4>)
 8006cb0:	f001 ff01 	bl	8008ab6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	489a      	ldr	r0, [pc, #616]	; (8006f24 <checkDemoModCalisma+0x4e4>)
 8006cba:	f001 fefc 	bl	8008ab6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006cbe:	4b9a      	ldr	r3, [pc, #616]	; (8006f28 <checkDemoModCalisma+0x4e8>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	4896      	ldr	r0, [pc, #600]	; (8006f20 <checkDemoModCalisma+0x4e0>)
 8006cc8:	f001 fede 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d10d      	bne.n	8006cee <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	2180      	movs	r1, #128	; 0x80
 8006cd6:	4895      	ldr	r0, [pc, #596]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006cd8:	f001 feed 	bl	8008ab6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006cdc:	2201      	movs	r2, #1
 8006cde:	2120      	movs	r1, #32
 8006ce0:	4892      	ldr	r0, [pc, #584]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006ce2:	f001 fee8 	bl	8008ab6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006ce6:	4b92      	ldr	r3, [pc, #584]	; (8006f30 <checkDemoModCalisma+0x4f0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a92      	ldr	r2, [pc, #584]	; (8006f34 <checkDemoModCalisma+0x4f4>)
 8006cec:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006cee:	4b90      	ldr	r3, [pc, #576]	; (8006f30 <checkDemoModCalisma+0x4f0>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b90      	ldr	r3, [pc, #576]	; (8006f34 <checkDemoModCalisma+0x4f4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d909      	bls.n	8006d10 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2180      	movs	r1, #128	; 0x80
 8006d00:	488a      	ldr	r0, [pc, #552]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006d02:	f001 fed8 	bl	8008ab6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006d06:	2200      	movs	r2, #0
 8006d08:	2120      	movs	r1, #32
 8006d0a:	4888      	ldr	r0, [pc, #544]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006d0c:	f001 fed3 	bl	8008ab6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006d10:	2102      	movs	r1, #2
 8006d12:	4883      	ldr	r0, [pc, #524]	; (8006f20 <checkDemoModCalisma+0x4e0>)
 8006d14:	f001 feb8 	bl	8008a88 <HAL_GPIO_ReadPin>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d108      	bne.n	8006d30 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006d1e:	2201      	movs	r2, #1
 8006d20:	2140      	movs	r1, #64	; 0x40
 8006d22:	4882      	ldr	r0, [pc, #520]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006d24:	f001 fec7 	bl	8008ab6 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006d28:	4b81      	ldr	r3, [pc, #516]	; (8006f30 <checkDemoModCalisma+0x4f0>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a81      	ldr	r2, [pc, #516]	; (8006f34 <checkDemoModCalisma+0x4f4>)
 8006d2e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006d30:	4b7f      	ldr	r3, [pc, #508]	; (8006f30 <checkDemoModCalisma+0x4f0>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b7f      	ldr	r3, [pc, #508]	; (8006f34 <checkDemoModCalisma+0x4f4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d904      	bls.n	8006d48 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2140      	movs	r1, #64	; 0x40
 8006d42:	487a      	ldr	r0, [pc, #488]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006d44:	f001 feb7 	bl	8008ab6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006d48:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <checkDemoModCalisma+0x4f8>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d058      	beq.n	8006e02 <checkDemoModCalisma+0x3c2>
 8006d50:	4b7a      	ldr	r3, [pc, #488]	; (8006f3c <checkDemoModCalisma+0x4fc>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d054      	beq.n	8006e02 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006d58:	4b79      	ldr	r3, [pc, #484]	; (8006f40 <checkDemoModCalisma+0x500>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	4b77      	ldr	r3, [pc, #476]	; (8006f40 <checkDemoModCalisma+0x500>)
 8006d62:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006d64:	4b76      	ldr	r3, [pc, #472]	; (8006f40 <checkDemoModCalisma+0x500>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b09      	cmp	r3, #9
 8006d6a:	d908      	bls.n	8006d7e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006d6c:	4b74      	ldr	r3, [pc, #464]	; (8006f40 <checkDemoModCalisma+0x500>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006d72:	4b74      	ldr	r3, [pc, #464]	; (8006f44 <checkDemoModCalisma+0x504>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	4b72      	ldr	r3, [pc, #456]	; (8006f44 <checkDemoModCalisma+0x504>)
 8006d7c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006d7e:	4b71      	ldr	r3, [pc, #452]	; (8006f44 <checkDemoModCalisma+0x504>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b09      	cmp	r3, #9
 8006d84:	d908      	bls.n	8006d98 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006d86:	4b6f      	ldr	r3, [pc, #444]	; (8006f44 <checkDemoModCalisma+0x504>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006d8c:	4b6e      	ldr	r3, [pc, #440]	; (8006f48 <checkDemoModCalisma+0x508>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	4b6c      	ldr	r3, [pc, #432]	; (8006f48 <checkDemoModCalisma+0x508>)
 8006d96:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006d98:	4b6b      	ldr	r3, [pc, #428]	; (8006f48 <checkDemoModCalisma+0x508>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	d908      	bls.n	8006db2 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006da0:	4b69      	ldr	r3, [pc, #420]	; (8006f48 <checkDemoModCalisma+0x508>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006da6:	4b69      	ldr	r3, [pc, #420]	; (8006f4c <checkDemoModCalisma+0x50c>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	4b67      	ldr	r3, [pc, #412]	; (8006f4c <checkDemoModCalisma+0x50c>)
 8006db0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006db2:	4b66      	ldr	r3, [pc, #408]	; (8006f4c <checkDemoModCalisma+0x50c>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b09      	cmp	r3, #9
 8006db8:	d908      	bls.n	8006dcc <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006dba:	4b64      	ldr	r3, [pc, #400]	; (8006f4c <checkDemoModCalisma+0x50c>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006dc0:	4b63      	ldr	r3, [pc, #396]	; (8006f50 <checkDemoModCalisma+0x510>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	4b61      	ldr	r3, [pc, #388]	; (8006f50 <checkDemoModCalisma+0x510>)
 8006dca:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006dcc:	4b60      	ldr	r3, [pc, #384]	; (8006f50 <checkDemoModCalisma+0x510>)
 8006dce:	781a      	ldrb	r2, [r3, #0]
 8006dd0:	4b60      	ldr	r3, [pc, #384]	; (8006f54 <checkDemoModCalisma+0x514>)
 8006dd2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006dd6:	4b5d      	ldr	r3, [pc, #372]	; (8006f4c <checkDemoModCalisma+0x50c>)
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	4b5e      	ldr	r3, [pc, #376]	; (8006f54 <checkDemoModCalisma+0x514>)
 8006ddc:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006dde:	4b5a      	ldr	r3, [pc, #360]	; (8006f48 <checkDemoModCalisma+0x508>)
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	4b5c      	ldr	r3, [pc, #368]	; (8006f54 <checkDemoModCalisma+0x514>)
 8006de4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006de6:	4b57      	ldr	r3, [pc, #348]	; (8006f44 <checkDemoModCalisma+0x504>)
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	4b5a      	ldr	r3, [pc, #360]	; (8006f54 <checkDemoModCalisma+0x514>)
 8006dec:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006dee:	4b54      	ldr	r3, [pc, #336]	; (8006f40 <checkDemoModCalisma+0x500>)
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	4b58      	ldr	r3, [pc, #352]	; (8006f54 <checkDemoModCalisma+0x514>)
 8006df4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006df6:	4b58      	ldr	r3, [pc, #352]	; (8006f58 <checkDemoModCalisma+0x518>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006dfc:	4b4f      	ldr	r3, [pc, #316]	; (8006f3c <checkDemoModCalisma+0x4fc>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006e02:	4b56      	ldr	r3, [pc, #344]	; (8006f5c <checkDemoModCalisma+0x51c>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 8087 	bne.w	8006f1a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006e0c:	4a54      	ldr	r2, [pc, #336]	; (8006f60 <checkDemoModCalisma+0x520>)
 8006e0e:	2101      	movs	r1, #1
 8006e10:	2002      	movs	r0, #2
 8006e12:	f7f9 fc7c 	bl	800070e <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006e16:	4a53      	ldr	r2, [pc, #332]	; (8006f64 <checkDemoModCalisma+0x524>)
 8006e18:	2101      	movs	r1, #1
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	f7f9 fc77 	bl	800070e <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006e20:	4b4b      	ldr	r3, [pc, #300]	; (8006f50 <checkDemoModCalisma+0x510>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	220a      	movs	r2, #10
 8006e26:	4950      	ldr	r1, [pc, #320]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f004 fe59 	bl	800bae0 <itoa>
			lcd_print(2,12,snum);
 8006e2e:	4a4e      	ldr	r2, [pc, #312]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e30:	210c      	movs	r1, #12
 8006e32:	2002      	movs	r0, #2
 8006e34:	f7f9 fc6b 	bl	800070e <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006e38:	4b44      	ldr	r3, [pc, #272]	; (8006f4c <checkDemoModCalisma+0x50c>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	220a      	movs	r2, #10
 8006e3e:	494a      	ldr	r1, [pc, #296]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e40:	4618      	mov	r0, r3
 8006e42:	f004 fe4d 	bl	800bae0 <itoa>
			lcd_print(2,13,snum);
 8006e46:	4a48      	ldr	r2, [pc, #288]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e48:	210d      	movs	r1, #13
 8006e4a:	2002      	movs	r0, #2
 8006e4c:	f7f9 fc5f 	bl	800070e <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006e50:	4b3d      	ldr	r3, [pc, #244]	; (8006f48 <checkDemoModCalisma+0x508>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	220a      	movs	r2, #10
 8006e56:	4944      	ldr	r1, [pc, #272]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f004 fe41 	bl	800bae0 <itoa>
			lcd_print(2,14,snum);
 8006e5e:	4a42      	ldr	r2, [pc, #264]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e60:	210e      	movs	r1, #14
 8006e62:	2002      	movs	r0, #2
 8006e64:	f7f9 fc53 	bl	800070e <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006e68:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <checkDemoModCalisma+0x504>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	493e      	ldr	r1, [pc, #248]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e70:	4618      	mov	r0, r3
 8006e72:	f004 fe35 	bl	800bae0 <itoa>
			lcd_print(2,15,snum);
 8006e76:	4a3c      	ldr	r2, [pc, #240]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e78:	210f      	movs	r1, #15
 8006e7a:	2002      	movs	r0, #2
 8006e7c:	f7f9 fc47 	bl	800070e <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006e80:	4b2f      	ldr	r3, [pc, #188]	; (8006f40 <checkDemoModCalisma+0x500>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	220a      	movs	r2, #10
 8006e86:	4938      	ldr	r1, [pc, #224]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f004 fe29 	bl	800bae0 <itoa>
			lcd_print(2,16,snum);
 8006e8e:	4a36      	ldr	r2, [pc, #216]	; (8006f68 <checkDemoModCalisma+0x528>)
 8006e90:	2110      	movs	r1, #16
 8006e92:	2002      	movs	r0, #2
 8006e94:	f7f9 fc3b 	bl	800070e <lcd_print>
			mesajYazildi=1;
 8006e98:	4b34      	ldr	r3, [pc, #208]	; (8006f6c <checkDemoModCalisma+0x52c>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006e9e:	e03c      	b.n	8006f1a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006ea0:	4b33      	ldr	r3, [pc, #204]	; (8006f70 <checkDemoModCalisma+0x530>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d003      	beq.n	8006eb0 <checkDemoModCalisma+0x470>
 8006ea8:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <checkDemoModCalisma+0x51c>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d134      	bne.n	8006f1a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006eb6:	481b      	ldr	r0, [pc, #108]	; (8006f24 <checkDemoModCalisma+0x4e4>)
 8006eb8:	f001 fdfd 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ec2:	4818      	ldr	r0, [pc, #96]	; (8006f24 <checkDemoModCalisma+0x4e4>)
 8006ec4:	f001 fdf7 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2104      	movs	r1, #4
 8006ecc:	4815      	ldr	r0, [pc, #84]	; (8006f24 <checkDemoModCalisma+0x4e4>)
 8006ece:	f001 fdf2 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	4813      	ldr	r0, [pc, #76]	; (8006f24 <checkDemoModCalisma+0x4e4>)
 8006ed8:	f001 fded 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006edc:	2200      	movs	r2, #0
 8006ede:	2101      	movs	r1, #1
 8006ee0:	4810      	ldr	r0, [pc, #64]	; (8006f24 <checkDemoModCalisma+0x4e4>)
 8006ee2:	f001 fde8 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2120      	movs	r1, #32
 8006eea:	480d      	ldr	r0, [pc, #52]	; (8006f20 <checkDemoModCalisma+0x4e0>)
 8006eec:	f001 fde3 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2110      	movs	r1, #16
 8006ef4:	480a      	ldr	r0, [pc, #40]	; (8006f20 <checkDemoModCalisma+0x4e0>)
 8006ef6:	f001 fdde 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006efa:	2200      	movs	r2, #0
 8006efc:	2180      	movs	r1, #128	; 0x80
 8006efe:	480b      	ldr	r0, [pc, #44]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006f00:	f001 fdd9 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006f04:	2200      	movs	r2, #0
 8006f06:	2140      	movs	r1, #64	; 0x40
 8006f08:	4808      	ldr	r0, [pc, #32]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006f0a:	f001 fdd4 	bl	8008ab6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2120      	movs	r1, #32
 8006f12:	4806      	ldr	r0, [pc, #24]	; (8006f2c <checkDemoModCalisma+0x4ec>)
 8006f14:	f001 fdcf 	bl	8008ab6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006f18:	e7ff      	b.n	8006f1a <checkDemoModCalisma+0x4da>
 8006f1a:	bf00      	nop
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40011000 	.word	0x40011000
 8006f24:	40010c00 	.word	0x40010c00
 8006f28:	20000b84 	.word	0x20000b84
 8006f2c:	40010800 	.word	0x40010800
 8006f30:	20000b08 	.word	0x20000b08
 8006f34:	20000b18 	.word	0x20000b18
 8006f38:	20000b83 	.word	0x20000b83
 8006f3c:	20000b69 	.word	0x20000b69
 8006f40:	20000b29 	.word	0x20000b29
 8006f44:	20000b2a 	.word	0x20000b2a
 8006f48:	20000947 	.word	0x20000947
 8006f4c:	20000948 	.word	0x20000948
 8006f50:	20000b2b 	.word	0x20000b2b
 8006f54:	20000ac0 	.word	0x20000ac0
 8006f58:	20000b57 	.word	0x20000b57
 8006f5c:	20000b49 	.word	0x20000b49
 8006f60:	0800d16c 	.word	0x0800d16c
 8006f64:	0800d178 	.word	0x0800d178
 8006f68:	20000b00 	.word	0x20000b00
 8006f6c:	20000b5f 	.word	0x20000b5f
 8006f70:	20000b4a 	.word	0x20000b4a

08006f74 <mergeData>:

char* mergeData() {
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b09e      	sub	sp, #120	; 0x78
 8006f78:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f82:	2229      	movs	r2, #41	; 0x29
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f004 fec2 	bl	800bd10 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8006f8c:	4b6a      	ldr	r3, [pc, #424]	; (8007138 <mergeData+0x1c4>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	713b      	strb	r3, [r7, #4]
 8006f92:	4b6a      	ldr	r3, [pc, #424]	; (800713c <mergeData+0x1c8>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	717b      	strb	r3, [r7, #5]
 8006f98:	4b69      	ldr	r3, [pc, #420]	; (8007140 <mergeData+0x1cc>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	71bb      	strb	r3, [r7, #6]
 8006f9e:	4b69      	ldr	r3, [pc, #420]	; (8007144 <mergeData+0x1d0>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	71fb      	strb	r3, [r7, #7]
 8006fa4:	4b68      	ldr	r3, [pc, #416]	; (8007148 <mergeData+0x1d4>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	723b      	strb	r3, [r7, #8]
 8006faa:	4b68      	ldr	r3, [pc, #416]	; (800714c <mergeData+0x1d8>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	727b      	strb	r3, [r7, #9]
 8006fb0:	4b67      	ldr	r3, [pc, #412]	; (8007150 <mergeData+0x1dc>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	72bb      	strb	r3, [r7, #10]
 8006fb6:	4b67      	ldr	r3, [pc, #412]	; (8007154 <mergeData+0x1e0>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	72fb      	strb	r3, [r7, #11]
 8006fbc:	4b66      	ldr	r3, [pc, #408]	; (8007158 <mergeData+0x1e4>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	733b      	strb	r3, [r7, #12]
 8006fc2:	4b66      	ldr	r3, [pc, #408]	; (800715c <mergeData+0x1e8>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	737b      	strb	r3, [r7, #13]
 8006fc8:	4b65      	ldr	r3, [pc, #404]	; (8007160 <mergeData+0x1ec>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	73bb      	strb	r3, [r7, #14]
 8006fce:	4b65      	ldr	r3, [pc, #404]	; (8007164 <mergeData+0x1f0>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	73fb      	strb	r3, [r7, #15]
 8006fd4:	4b64      	ldr	r3, [pc, #400]	; (8007168 <mergeData+0x1f4>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	743b      	strb	r3, [r7, #16]
 8006fda:	4b64      	ldr	r3, [pc, #400]	; (800716c <mergeData+0x1f8>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	747b      	strb	r3, [r7, #17]
 8006fe0:	4b63      	ldr	r3, [pc, #396]	; (8007170 <mergeData+0x1fc>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	74bb      	strb	r3, [r7, #18]
 8006fe6:	4b63      	ldr	r3, [pc, #396]	; (8007174 <mergeData+0x200>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	74fb      	strb	r3, [r7, #19]
 8006fec:	4b62      	ldr	r3, [pc, #392]	; (8007178 <mergeData+0x204>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	753b      	strb	r3, [r7, #20]
 8006ff2:	4b62      	ldr	r3, [pc, #392]	; (800717c <mergeData+0x208>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	757b      	strb	r3, [r7, #21]
 8006ff8:	4b61      	ldr	r3, [pc, #388]	; (8007180 <mergeData+0x20c>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	75bb      	strb	r3, [r7, #22]
 8006ffe:	4b61      	ldr	r3, [pc, #388]	; (8007184 <mergeData+0x210>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	75fb      	strb	r3, [r7, #23]
 8007004:	4b60      	ldr	r3, [pc, #384]	; (8007188 <mergeData+0x214>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	763b      	strb	r3, [r7, #24]
 800700a:	4b60      	ldr	r3, [pc, #384]	; (800718c <mergeData+0x218>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	767b      	strb	r3, [r7, #25]
 8007010:	4b5f      	ldr	r3, [pc, #380]	; (8007190 <mergeData+0x21c>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	76bb      	strb	r3, [r7, #26]
 8007016:	4b5f      	ldr	r3, [pc, #380]	; (8007194 <mergeData+0x220>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	76fb      	strb	r3, [r7, #27]
 800701c:	4b5e      	ldr	r3, [pc, #376]	; (8007198 <mergeData+0x224>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	773b      	strb	r3, [r7, #28]
 8007022:	4b5e      	ldr	r3, [pc, #376]	; (800719c <mergeData+0x228>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	777b      	strb	r3, [r7, #29]
 8007028:	4b5d      	ldr	r3, [pc, #372]	; (80071a0 <mergeData+0x22c>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	77bb      	strb	r3, [r7, #30]
 800702e:	4b5d      	ldr	r3, [pc, #372]	; (80071a4 <mergeData+0x230>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	4b5c      	ldr	r3, [pc, #368]	; (80071a8 <mergeData+0x234>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f887 3020 	strb.w	r3, [r7, #32]
 800703c:	4b5b      	ldr	r3, [pc, #364]	; (80071ac <mergeData+0x238>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007044:	4b5a      	ldr	r3, [pc, #360]	; (80071b0 <mergeData+0x23c>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800704c:	4b59      	ldr	r3, [pc, #356]	; (80071b4 <mergeData+0x240>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007054:	4b58      	ldr	r3, [pc, #352]	; (80071b8 <mergeData+0x244>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 800705c:	4b57      	ldr	r3, [pc, #348]	; (80071bc <mergeData+0x248>)
 800705e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8007062:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 8007066:	4b55      	ldr	r3, [pc, #340]	; (80071bc <mergeData+0x248>)
 8007068:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800706c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8007070:	4b52      	ldr	r3, [pc, #328]	; (80071bc <mergeData+0x248>)
 8007072:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800707a:	4b50      	ldr	r3, [pc, #320]	; (80071bc <mergeData+0x248>)
 800707c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007080:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8007084:	4b4d      	ldr	r3, [pc, #308]	; (80071bc <mergeData+0x248>)
 8007086:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800708a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 800708e:	4b4b      	ldr	r3, [pc, #300]	; (80071bc <mergeData+0x248>)
 8007090:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007094:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8007098:	4b48      	ldr	r3, [pc, #288]	; (80071bc <mergeData+0x248>)
 800709a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80070a2:	4b46      	ldr	r3, [pc, #280]	; (80071bc <mergeData+0x248>)
 80070a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80070a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80070ac:	4b43      	ldr	r3, [pc, #268]	; (80071bc <mergeData+0x248>)
 80070ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80070b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80070b6:	4b41      	ldr	r3, [pc, #260]	; (80071bc <mergeData+0x248>)
 80070b8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80070bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 80070c0:	4b3e      	ldr	r3, [pc, #248]	; (80071bc <mergeData+0x248>)
 80070c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80070c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80070ca:	4b3d      	ldr	r3, [pc, #244]	; (80071c0 <mergeData+0x24c>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80070d2:	2300      	movs	r3, #0
 80070d4:	677b      	str	r3, [r7, #116]	; 0x74
 80070d6:	e015      	b.n	8007104 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 80070d8:	1d3a      	adds	r2, r7, #4
 80070da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070dc:	4413      	add	r3, r2
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80070e6:	4937      	ldr	r1, [pc, #220]	; (80071c4 <mergeData+0x250>)
 80070e8:	4618      	mov	r0, r3
 80070ea:	f004 fdf1 	bl	800bcd0 <siprintf>
	    strcat(combinedString, temp);
 80070ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80070f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070f6:	4611      	mov	r1, r2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f004 fe11 	bl	800bd20 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80070fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007100:	3301      	adds	r3, #1
 8007102:	677b      	str	r3, [r7, #116]	; 0x74
 8007104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007106:	2b2c      	cmp	r3, #44	; 0x2c
 8007108:	d9e6      	bls.n	80070d8 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800710a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800710e:	4618      	mov	r0, r3
 8007110:	f7f9 f888 	bl	8000224 <strlen>
 8007114:	4603      	mov	r3, r0
 8007116:	3301      	adds	r3, #1
 8007118:	4618      	mov	r0, r3
 800711a:	f004 fce3 	bl	800bae4 <malloc>
 800711e:	4603      	mov	r3, r0
 8007120:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8007122:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007126:	4619      	mov	r1, r3
 8007128:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800712a:	f004 fe45 	bl	800bdb8 <strcpy>
	return result;
 800712e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8007130:	4618      	mov	r0, r3
 8007132:	3778      	adds	r7, #120	; 0x78
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000b3b 	.word	0x20000b3b
 800713c:	20000b2d 	.word	0x20000b2d
 8007140:	20000b30 	.word	0x20000b30
 8007144:	20000b31 	.word	0x20000b31
 8007148:	20000b32 	.word	0x20000b32
 800714c:	20000b39 	.word	0x20000b39
 8007150:	20000b33 	.word	0x20000b33
 8007154:	20000b34 	.word	0x20000b34
 8007158:	20000b38 	.word	0x20000b38
 800715c:	20000b35 	.word	0x20000b35
 8007160:	20000b45 	.word	0x20000b45
 8007164:	20000b36 	.word	0x20000b36
 8007168:	20000b46 	.word	0x20000b46
 800716c:	20000b37 	.word	0x20000b37
 8007170:	20000b47 	.word	0x20000b47
 8007174:	20000b3a 	.word	0x20000b3a
 8007178:	20000b3c 	.word	0x20000b3c
 800717c:	20000b3d 	.word	0x20000b3d
 8007180:	20000b3e 	.word	0x20000b3e
 8007184:	20000b3f 	.word	0x20000b3f
 8007188:	20000b40 	.word	0x20000b40
 800718c:	20000b41 	.word	0x20000b41
 8007190:	20000b42 	.word	0x20000b42
 8007194:	20000b43 	.word	0x20000b43
 8007198:	20000b44 	.word	0x20000b44
 800719c:	20000b48 	.word	0x20000b48
 80071a0:	20000b4a 	.word	0x20000b4a
 80071a4:	20000b29 	.word	0x20000b29
 80071a8:	20000b2a 	.word	0x20000b2a
 80071ac:	20000947 	.word	0x20000947
 80071b0:	20000948 	.word	0x20000948
 80071b4:	20000b2b 	.word	0x20000b2b
 80071b8:	20000b4c 	.word	0x20000b4c
 80071bc:	20000ac0 	.word	0x20000ac0
 80071c0:	20000946 	.word	0x20000946
 80071c4:	0800d18c 	.word	0x0800d18c

080071c8 <mainLoop>:

void mainLoop() {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80071ce:	f7fd fffb 	bl	80051c8 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80071d2:	2101      	movs	r1, #1
 80071d4:	48ac      	ldr	r0, [pc, #688]	; (8007488 <mainLoop+0x2c0>)
 80071d6:	f001 fc57 	bl	8008a88 <HAL_GPIO_ReadPin>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d136      	bne.n	800724e <mainLoop+0x86>
 80071e0:	2108      	movs	r1, #8
 80071e2:	48aa      	ldr	r0, [pc, #680]	; (800748c <mainLoop+0x2c4>)
 80071e4:	f001 fc50 	bl	8008a88 <HAL_GPIO_ReadPin>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d12f      	bne.n	800724e <mainLoop+0x86>
 80071ee:	2102      	movs	r1, #2
 80071f0:	48a5      	ldr	r0, [pc, #660]	; (8007488 <mainLoop+0x2c0>)
 80071f2:	f001 fc49 	bl	8008a88 <HAL_GPIO_ReadPin>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d128      	bne.n	800724e <mainLoop+0x86>
 80071fc:	2104      	movs	r1, #4
 80071fe:	48a2      	ldr	r0, [pc, #648]	; (8007488 <mainLoop+0x2c0>)
 8007200:	f001 fc42 	bl	8008a88 <HAL_GPIO_ReadPin>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d121      	bne.n	800724e <mainLoop+0x86>
 800720a:	2108      	movs	r1, #8
 800720c:	489e      	ldr	r0, [pc, #632]	; (8007488 <mainLoop+0x2c0>)
 800720e:	f001 fc3b 	bl	8008a88 <HAL_GPIO_ReadPin>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d11a      	bne.n	800724e <mainLoop+0x86>
 8007218:	2180      	movs	r1, #128	; 0x80
 800721a:	489c      	ldr	r0, [pc, #624]	; (800748c <mainLoop+0x2c4>)
 800721c:	f001 fc34 	bl	8008a88 <HAL_GPIO_ReadPin>
 8007220:	4603      	mov	r3, r0
 8007222:	2b01      	cmp	r3, #1
 8007224:	d113      	bne.n	800724e <mainLoop+0x86>
 8007226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800722a:	4898      	ldr	r0, [pc, #608]	; (800748c <mainLoop+0x2c4>)
 800722c:	f001 fc2c 	bl	8008a88 <HAL_GPIO_ReadPin>
 8007230:	4603      	mov	r3, r0
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10b      	bne.n	800724e <mainLoop+0x86>
 8007236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800723a:	4894      	ldr	r0, [pc, #592]	; (800748c <mainLoop+0x2c4>)
 800723c:	f001 fc24 	bl	8008a88 <HAL_GPIO_ReadPin>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d103      	bne.n	800724e <mainLoop+0x86>
			butonKontrol=0;
 8007246:	4b92      	ldr	r3, [pc, #584]	; (8007490 <mainLoop+0x2c8>)
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e003      	b.n	8007256 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800724e:	4b91      	ldr	r3, [pc, #580]	; (8007494 <mainLoop+0x2cc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a91      	ldr	r2, [pc, #580]	; (8007498 <mainLoop+0x2d0>)
 8007254:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007256:	4b91      	ldr	r3, [pc, #580]	; (800749c <mainLoop+0x2d4>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d039      	beq.n	80072d2 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800725e:	bf00      	nop
 8007260:	488f      	ldr	r0, [pc, #572]	; (80074a0 <mainLoop+0x2d8>)
 8007262:	f002 fa3a 	bl	80096da <HAL_I2C_GetError>
 8007266:	4603      	mov	r3, r0
 8007268:	2b04      	cmp	r3, #4
 800726a:	d0f9      	beq.n	8007260 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800726c:	bf00      	nop
 800726e:	488c      	ldr	r0, [pc, #560]	; (80074a0 <mainLoop+0x2d8>)
 8007270:	f002 fa26 	bl	80096c0 <HAL_I2C_GetState>
 8007274:	4603      	mov	r3, r0
 8007276:	2b20      	cmp	r3, #32
 8007278:	d1f9      	bne.n	800726e <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 800727a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800727e:	9302      	str	r3, [sp, #8]
 8007280:	233f      	movs	r3, #63	; 0x3f
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	4b87      	ldr	r3, [pc, #540]	; (80074a4 <mainLoop+0x2dc>)
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	233f      	movs	r3, #63	; 0x3f
 800728a:	2200      	movs	r2, #0
 800728c:	21a0      	movs	r1, #160	; 0xa0
 800728e:	4884      	ldr	r0, [pc, #528]	; (80074a0 <mainLoop+0x2d8>)
 8007290:	f001 feb4 	bl	8008ffc <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8007294:	2005      	movs	r0, #5
 8007296:	f000 fe27 	bl	8007ee8 <HAL_Delay>

		  hafizaYaz=0;
 800729a:	4b80      	ldr	r3, [pc, #512]	; (800749c <mainLoop+0x2d4>)
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80072a0:	4b81      	ldr	r3, [pc, #516]	; (80074a8 <mainLoop+0x2e0>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d105      	bne.n	80072b4 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 80072a8:	4a80      	ldr	r2, [pc, #512]	; (80074ac <mainLoop+0x2e4>)
 80072aa:	2101      	movs	r1, #1
 80072ac:	2002      	movs	r0, #2
 80072ae:	f7f9 fa2e 	bl	800070e <lcd_print>
 80072b2:	e008      	b.n	80072c6 <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 80072b4:	4b7c      	ldr	r3, [pc, #496]	; (80074a8 <mainLoop+0x2e0>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d104      	bne.n	80072c6 <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 80072bc:	4a7c      	ldr	r2, [pc, #496]	; (80074b0 <mainLoop+0x2e8>)
 80072be:	2101      	movs	r1, #1
 80072c0:	2002      	movs	r0, #2
 80072c2:	f7f9 fa24 	bl	800070e <lcd_print>
		  }

		  HAL_Delay(1000);
 80072c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072ca:	f000 fe0d 	bl	8007ee8 <HAL_Delay>
		  lcd_clear();
 80072ce:	f7f9 fa33 	bl	8000738 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80072d2:	4b78      	ldr	r3, [pc, #480]	; (80074b4 <mainLoop+0x2ec>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	f083 0301 	eor.w	r3, r3, #1
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d06e      	beq.n	80073be <mainLoop+0x1f6>
 80072e0:	486f      	ldr	r0, [pc, #444]	; (80074a0 <mainLoop+0x2d8>)
 80072e2:	f002 f9ed 	bl	80096c0 <HAL_I2C_GetState>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d168      	bne.n	80073be <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 80072ec:	4b72      	ldr	r3, [pc, #456]	; (80074b8 <mainLoop+0x2f0>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f083 0301 	eor.w	r3, r3, #1
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d044      	beq.n	8007384 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 80072fa:	4a70      	ldr	r2, [pc, #448]	; (80074bc <mainLoop+0x2f4>)
 80072fc:	2101      	movs	r1, #1
 80072fe:	2001      	movs	r0, #1
 8007300:	f7f9 fa05 	bl	800070e <lcd_print>
			  if(dilSecim==0) {
 8007304:	4b68      	ldr	r3, [pc, #416]	; (80074a8 <mainLoop+0x2e0>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d105      	bne.n	8007318 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 800730c:	4a6c      	ldr	r2, [pc, #432]	; (80074c0 <mainLoop+0x2f8>)
 800730e:	2101      	movs	r1, #1
 8007310:	2002      	movs	r0, #2
 8007312:	f7f9 f9fc 	bl	800070e <lcd_print>
 8007316:	e008      	b.n	800732a <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8007318:	4b63      	ldr	r3, [pc, #396]	; (80074a8 <mainLoop+0x2e0>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d104      	bne.n	800732a <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8007320:	4a68      	ldr	r2, [pc, #416]	; (80074c4 <mainLoop+0x2fc>)
 8007322:	2101      	movs	r1, #1
 8007324:	2002      	movs	r0, #2
 8007326:	f7f9 f9f2 	bl	800070e <lcd_print>
			  }
			  HAL_Delay(1000);
 800732a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800732e:	f000 fddb 	bl	8007ee8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007332:	bf00      	nop
 8007334:	485a      	ldr	r0, [pc, #360]	; (80074a0 <mainLoop+0x2d8>)
 8007336:	f002 f9d0 	bl	80096da <HAL_I2C_GetError>
 800733a:	4603      	mov	r3, r0
 800733c:	2b04      	cmp	r3, #4
 800733e:	d0f9      	beq.n	8007334 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007340:	e003      	b.n	800734a <mainLoop+0x182>
				  HAL_Delay(1000);
 8007342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007346:	f000 fdcf 	bl	8007ee8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800734a:	4855      	ldr	r0, [pc, #340]	; (80074a0 <mainLoop+0x2d8>)
 800734c:	f002 f9b8 	bl	80096c0 <HAL_I2C_GetState>
 8007350:	4603      	mov	r3, r0
 8007352:	2b20      	cmp	r3, #32
 8007354:	d1f5      	bne.n	8007342 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 8007356:	4b54      	ldr	r3, [pc, #336]	; (80074a8 <mainLoop+0x2e0>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d105      	bne.n	800736a <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 800735e:	4a5a      	ldr	r2, [pc, #360]	; (80074c8 <mainLoop+0x300>)
 8007360:	2101      	movs	r1, #1
 8007362:	2002      	movs	r0, #2
 8007364:	f7f9 f9d3 	bl	800070e <lcd_print>
 8007368:	e008      	b.n	800737c <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 800736a:	4b4f      	ldr	r3, [pc, #316]	; (80074a8 <mainLoop+0x2e0>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d104      	bne.n	800737c <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8007372:	4a56      	ldr	r2, [pc, #344]	; (80074cc <mainLoop+0x304>)
 8007374:	2101      	movs	r1, #1
 8007376:	2002      	movs	r0, #2
 8007378:	f7f9 f9c9 	bl	800070e <lcd_print>
			  }

			  ilkOkuma=1;
 800737c:	4b4e      	ldr	r3, [pc, #312]	; (80074b8 <mainLoop+0x2f0>)
 800737e:	2201      	movs	r2, #1
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e014      	b.n	80073ae <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8007384:	4b48      	ldr	r3, [pc, #288]	; (80074a8 <mainLoop+0x2e0>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 800738c:	4a50      	ldr	r2, [pc, #320]	; (80074d0 <mainLoop+0x308>)
 800738e:	2101      	movs	r1, #1
 8007390:	2002      	movs	r0, #2
 8007392:	f7f9 f9bc 	bl	800070e <lcd_print>
 8007396:	e008      	b.n	80073aa <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8007398:	4b43      	ldr	r3, [pc, #268]	; (80074a8 <mainLoop+0x2e0>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d104      	bne.n	80073aa <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 80073a0:	4a4c      	ldr	r2, [pc, #304]	; (80074d4 <mainLoop+0x30c>)
 80073a2:	2101      	movs	r1, #1
 80073a4:	2002      	movs	r0, #2
 80073a6:	f7f9 f9b2 	bl	800070e <lcd_print>
			  }
			  lcd_clear();
 80073aa:	f7f9 f9c5 	bl	8000738 <lcd_clear>
		  }

		  lcd_clear();
 80073ae:	f7f9 f9c3 	bl	8000738 <lcd_clear>

		  eepromKontrol(1);
 80073b2:	2001      	movs	r0, #1
 80073b4:	f7fd fada 	bl	800496c <eepromKontrol>
		  hafizaOku=1;
 80073b8:	4b3e      	ldr	r3, [pc, #248]	; (80074b4 <mainLoop+0x2ec>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80073be:	4b46      	ldr	r3, [pc, #280]	; (80074d8 <mainLoop+0x310>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d11c      	bne.n	8007400 <mainLoop+0x238>
 80073c6:	4b45      	ldr	r3, [pc, #276]	; (80074dc <mainLoop+0x314>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	f083 0301 	eor.w	r3, r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d015      	beq.n	8007400 <mainLoop+0x238>
 80073d4:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <mainLoop+0x318>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d111      	bne.n	8007400 <mainLoop+0x238>
			lcd_clear();
 80073dc:	f7f9 f9ac 	bl	8000738 <lcd_clear>
			HAL_Delay(10);
 80073e0:	200a      	movs	r0, #10
 80073e2:	f000 fd81 	bl	8007ee8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80073e6:	4a3f      	ldr	r2, [pc, #252]	; (80074e4 <mainLoop+0x31c>)
 80073e8:	2101      	movs	r1, #1
 80073ea:	2001      	movs	r0, #1
 80073ec:	f7f9 f98f 	bl	800070e <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80073f0:	4a3d      	ldr	r2, [pc, #244]	; (80074e8 <mainLoop+0x320>)
 80073f2:	2101      	movs	r1, #1
 80073f4:	2002      	movs	r0, #2
 80073f6:	f7f9 f98a 	bl	800070e <lcd_print>
			mesajYazildi=1;
 80073fa:	4b38      	ldr	r3, [pc, #224]	; (80074dc <mainLoop+0x314>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007400:	4b35      	ldr	r3, [pc, #212]	; (80074d8 <mainLoop+0x310>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d112      	bne.n	800742e <mainLoop+0x266>
 8007408:	2102      	movs	r1, #2
 800740a:	481f      	ldr	r0, [pc, #124]	; (8007488 <mainLoop+0x2c0>)
 800740c:	f001 fb3c 	bl	8008a88 <HAL_GPIO_ReadPin>
 8007410:	4603      	mov	r3, r0
 8007412:	2b01      	cmp	r3, #1
 8007414:	d10b      	bne.n	800742e <mainLoop+0x266>
 8007416:	2104      	movs	r1, #4
 8007418:	481b      	ldr	r0, [pc, #108]	; (8007488 <mainLoop+0x2c0>)
 800741a:	f001 fb35 	bl	8008a88 <HAL_GPIO_ReadPin>
 800741e:	4603      	mov	r3, r0
 8007420:	2b01      	cmp	r3, #1
 8007422:	d104      	bne.n	800742e <mainLoop+0x266>
			menuGiris=1;
 8007424:	4b2c      	ldr	r3, [pc, #176]	; (80074d8 <mainLoop+0x310>)
 8007426:	2201      	movs	r2, #1
 8007428:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800742a:	f7f9 f985 	bl	8000738 <lcd_clear>
		}

		if(menuGiris==1) {
 800742e:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <mainLoop+0x310>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <mainLoop+0x272>
			menu();
 8007436:	f7f9 f9cb 	bl	80007d0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800743a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800743e:	4813      	ldr	r0, [pc, #76]	; (800748c <mainLoop+0x2c4>)
 8007440:	f001 fb51 	bl	8008ae6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007448:	4828      	ldr	r0, [pc, #160]	; (80074ec <mainLoop+0x324>)
 800744a:	f001 fb1d 	bl	8008a88 <HAL_GPIO_ReadPin>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <mainLoop+0x2a2>
 8007454:	4b26      	ldr	r3, [pc, #152]	; (80074f0 <mainLoop+0x328>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f083 0301 	eor.w	r3, r3, #1
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <mainLoop+0x2a2>
			stopVar=1;
 8007462:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <mainLoop+0x32c>)
 8007464:	2201      	movs	r2, #1
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e002      	b.n	8007470 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 800746a:	4b22      	ldr	r3, [pc, #136]	; (80074f4 <mainLoop+0x32c>)
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007470:	f7fd feca 	bl	8005208 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007474:	f7fd fefc 	bl	8005270 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007478:	f7fd ff40 	bl	80052fc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 800747c:	f7fd ff90 	bl	80053a0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007480:	f7ff fade 	bl	8006a40 <checkDemoModCalisma>
		checkLCDBacklight();
 8007484:	e6a3      	b.n	80071ce <mainLoop+0x6>
 8007486:	bf00      	nop
 8007488:	40010800 	.word	0x40010800
 800748c:	40011000 	.word	0x40011000
 8007490:	20000b5a 	.word	0x20000b5a
 8007494:	20000b08 	.word	0x20000b08
 8007498:	20000b24 	.word	0x20000b24
 800749c:	20000b57 	.word	0x20000b57
 80074a0:	20000ce8 	.word	0x20000ce8
 80074a4:	20000ac0 	.word	0x20000ac0
 80074a8:	20000b4c 	.word	0x20000b4c
 80074ac:	0800d190 	.word	0x0800d190
 80074b0:	0800d1a4 	.word	0x0800d1a4
 80074b4:	20000b58 	.word	0x20000b58
 80074b8:	20000b59 	.word	0x20000b59
 80074bc:	0800d1b8 	.word	0x0800d1b8
 80074c0:	0800d1cc 	.word	0x0800d1cc
 80074c4:	0800d1e0 	.word	0x0800d1e0
 80074c8:	0800d1f4 	.word	0x0800d1f4
 80074cc:	0800d208 	.word	0x0800d208
 80074d0:	0800d21c 	.word	0x0800d21c
 80074d4:	0800d230 	.word	0x0800d230
 80074d8:	20000b49 	.word	0x20000b49
 80074dc:	20000b5f 	.word	0x20000b5f
 80074e0:	20000b4a 	.word	0x20000b4a
 80074e4:	0800d0dc 	.word	0x0800d0dc
 80074e8:	0800d0f0 	.word	0x0800d0f0
 80074ec:	40010c00 	.word	0x40010c00
 80074f0:	20000b80 	.word	0x20000b80
 80074f4:	20000b7d 	.word	0x20000b7d

080074f8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007500:	4b04      	ldr	r3, [pc, #16]	; (8007514 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	4a03      	ldr	r2, [pc, #12]	; (8007514 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007508:	6013      	str	r3, [r2, #0]
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr
 8007514:	20000b08 	.word	0x20000b08

08007518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800751c:	f000 fc82 	bl	8007e24 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007524:	f000 fce0 	bl	8007ee8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007528:	f000 f8b2 	bl	8007690 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800752c:	f000 f9d4 	bl	80078d8 <MX_GPIO_Init>
  MX_CAN_Init();
 8007530:	f000 f8f4 	bl	800771c <MX_CAN_Init>
  MX_I2C1_Init();
 8007534:	f000 f926 	bl	8007784 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007538:	f000 f952 	bl	80077e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800753c:	f000 f9a2 	bl	8007884 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007540:	2201      	movs	r2, #1
 8007542:	2140      	movs	r1, #64	; 0x40
 8007544:	4846      	ldr	r0, [pc, #280]	; (8007660 <main+0x148>)
 8007546:	f001 fab6 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800754a:	2201      	movs	r2, #1
 800754c:	2180      	movs	r1, #128	; 0x80
 800754e:	4844      	ldr	r0, [pc, #272]	; (8007660 <main+0x148>)
 8007550:	f001 fab1 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007554:	200a      	movs	r0, #10
 8007556:	f000 fcc7 	bl	8007ee8 <HAL_Delay>
  lcd_init();
 800755a:	f7f9 f8a6 	bl	80006aa <lcd_init>
  HAL_Delay(10);
 800755e:	200a      	movs	r0, #10
 8007560:	f000 fcc2 	bl	8007ee8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007564:	483f      	ldr	r0, [pc, #252]	; (8007664 <main+0x14c>)
 8007566:	f003 f959 	bl	800a81c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800756a:	bf00      	nop
 800756c:	483e      	ldr	r0, [pc, #248]	; (8007668 <main+0x150>)
 800756e:	f002 f8b4 	bl	80096da <HAL_I2C_GetError>
 8007572:	4603      	mov	r3, r0
 8007574:	2b04      	cmp	r3, #4
 8007576:	d0f9      	beq.n	800756c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007578:	bf00      	nop
 800757a:	483b      	ldr	r0, [pc, #236]	; (8007668 <main+0x150>)
 800757c:	f002 f8a0 	bl	80096c0 <HAL_I2C_GetState>
 8007580:	4603      	mov	r3, r0
 8007582:	2b20      	cmp	r3, #32
 8007584:	d1f9      	bne.n	800757a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007586:	2200      	movs	r2, #0
 8007588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800758c:	4834      	ldr	r0, [pc, #208]	; (8007660 <main+0x148>)
 800758e:	f001 fa92 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007592:	2200      	movs	r2, #0
 8007594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007598:	4831      	ldr	r0, [pc, #196]	; (8007660 <main+0x148>)
 800759a:	f001 fa8c 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800759e:	2200      	movs	r2, #0
 80075a0:	2104      	movs	r1, #4
 80075a2:	482f      	ldr	r0, [pc, #188]	; (8007660 <main+0x148>)
 80075a4:	f001 fa87 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80075a8:	2200      	movs	r2, #0
 80075aa:	2102      	movs	r1, #2
 80075ac:	482c      	ldr	r0, [pc, #176]	; (8007660 <main+0x148>)
 80075ae:	f001 fa82 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80075b2:	2200      	movs	r2, #0
 80075b4:	2101      	movs	r1, #1
 80075b6:	482a      	ldr	r0, [pc, #168]	; (8007660 <main+0x148>)
 80075b8:	f001 fa7d 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80075bc:	2200      	movs	r2, #0
 80075be:	2120      	movs	r1, #32
 80075c0:	482a      	ldr	r0, [pc, #168]	; (800766c <main+0x154>)
 80075c2:	f001 fa78 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80075c6:	2200      	movs	r2, #0
 80075c8:	2110      	movs	r1, #16
 80075ca:	4828      	ldr	r0, [pc, #160]	; (800766c <main+0x154>)
 80075cc:	f001 fa73 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80075d0:	2200      	movs	r2, #0
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	4826      	ldr	r0, [pc, #152]	; (8007670 <main+0x158>)
 80075d6:	f001 fa6e 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80075da:	2200      	movs	r2, #0
 80075dc:	2140      	movs	r1, #64	; 0x40
 80075de:	4824      	ldr	r0, [pc, #144]	; (8007670 <main+0x158>)
 80075e0:	f001 fa69 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80075e4:	2200      	movs	r2, #0
 80075e6:	2120      	movs	r1, #32
 80075e8:	4821      	ldr	r0, [pc, #132]	; (8007670 <main+0x158>)
 80075ea:	f001 fa64 	bl	8008ab6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80075ee:	2200      	movs	r2, #0
 80075f0:	2110      	movs	r1, #16
 80075f2:	481f      	ldr	r0, [pc, #124]	; (8007670 <main+0x158>)
 80075f4:	f001 fa5f 	bl	8008ab6 <HAL_GPIO_WritePin>

  i2cTest();
 80075f8:	f7fd fd38 	bl	800506c <i2cTest>
  HAL_Delay(100);
 80075fc:	2064      	movs	r0, #100	; 0x64
 80075fe:	f000 fc73 	bl	8007ee8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007602:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <main+0x15c>)
 8007604:	2101      	movs	r1, #1
 8007606:	2001      	movs	r0, #1
 8007608:	f7f9 f881 	bl	800070e <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 800760c:	4a1a      	ldr	r2, [pc, #104]	; (8007678 <main+0x160>)
 800760e:	2101      	movs	r1, #1
 8007610:	2002      	movs	r0, #2
 8007612:	f7f9 f87c 	bl	800070e <lcd_print>
  HAL_Delay(1000);
 8007616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800761a:	f000 fc65 	bl	8007ee8 <HAL_Delay>
  lcd_clear();
 800761e:	f7f9 f88b 	bl	8000738 <lcd_clear>

  lcd_print(1, 1, "Wifi Ayarlaniyor");
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <main+0x164>)
 8007624:	2101      	movs	r1, #1
 8007626:	2001      	movs	r0, #1
 8007628:	f7f9 f871 	bl	800070e <lcd_print>
  lcd_print(2, 1, "Lutfen Bekleyin");
 800762c:	4a14      	ldr	r2, [pc, #80]	; (8007680 <main+0x168>)
 800762e:	2101      	movs	r1, #1
 8007630:	2002      	movs	r0, #2
 8007632:	f7f9 f86c 	bl	800070e <lcd_print>
  ESP8266_Init(&huart1);
 8007636:	4813      	ldr	r0, [pc, #76]	; (8007684 <main+0x16c>)
 8007638:	f7f8 fdfc 	bl	8000234 <ESP8266_Init>
  HAL_Delay(500);
 800763c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007640:	f000 fc52 	bl	8007ee8 <HAL_Delay>

  lcd_clear();
 8007644:	f7f9 f878 	bl	8000738 <lcd_clear>
  eepromKontrol(0);
 8007648:	2000      	movs	r0, #0
 800764a:	f7fd f98f 	bl	800496c <eepromKontrol>
  lcd_clear();
 800764e:	f7f9 f873 	bl	8000738 <lcd_clear>

  backLightTimer = millis;
 8007652:	4b0d      	ldr	r3, [pc, #52]	; (8007688 <main+0x170>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a0d      	ldr	r2, [pc, #52]	; (800768c <main+0x174>)
 8007658:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800765a:	f7ff fdb5 	bl	80071c8 <mainLoop>
 800765e:	e7fc      	b.n	800765a <main+0x142>
 8007660:	40010c00 	.word	0x40010c00
 8007664:	20000d3c 	.word	0x20000d3c
 8007668:	20000ce8 	.word	0x20000ce8
 800766c:	40011000 	.word	0x40011000
 8007670:	40010800 	.word	0x40010800
 8007674:	0800d244 	.word	0x0800d244
 8007678:	0800d258 	.word	0x0800d258
 800767c:	0800d26c 	.word	0x0800d26c
 8007680:	0800d280 	.word	0x0800d280
 8007684:	20000d84 	.word	0x20000d84
 8007688:	20000b08 	.word	0x20000b08
 800768c:	20000b24 	.word	0x20000b24

08007690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b090      	sub	sp, #64	; 0x40
 8007694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007696:	f107 0318 	add.w	r3, r7, #24
 800769a:	2228      	movs	r2, #40	; 0x28
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f004 fb36 	bl	800bd10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076a4:	1d3b      	adds	r3, r7, #4
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	605a      	str	r2, [r3, #4]
 80076ac:	609a      	str	r2, [r3, #8]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80076b2:	2301      	movs	r3, #1
 80076b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80076b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80076bc:	2300      	movs	r3, #0
 80076be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80076c0:	2301      	movs	r3, #1
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076c4:	2302      	movs	r3, #2
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80076c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80076ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076d4:	f107 0318 	add.w	r3, r7, #24
 80076d8:	4618      	mov	r0, r3
 80076da:	f002 fc3f 	bl	8009f5c <HAL_RCC_OscConfig>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80076e4:	f000 f9a2 	bl	8007a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076e8:	230f      	movs	r3, #15
 80076ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076ec:	2302      	movs	r3, #2
 80076ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80076f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80076fe:	1d3b      	adds	r3, r7, #4
 8007700:	2102      	movs	r1, #2
 8007702:	4618      	mov	r0, r3
 8007704:	f002 feac 	bl	800a460 <HAL_RCC_ClockConfig>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800770e:	f000 f98d 	bl	8007a2c <Error_Handler>
  }
}
 8007712:	bf00      	nop
 8007714:	3740      	adds	r7, #64	; 0x40
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007720:	4b16      	ldr	r3, [pc, #88]	; (800777c <MX_CAN_Init+0x60>)
 8007722:	4a17      	ldr	r2, [pc, #92]	; (8007780 <MX_CAN_Init+0x64>)
 8007724:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007726:	4b15      	ldr	r3, [pc, #84]	; (800777c <MX_CAN_Init+0x60>)
 8007728:	2210      	movs	r2, #16
 800772a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800772c:	4b13      	ldr	r3, [pc, #76]	; (800777c <MX_CAN_Init+0x60>)
 800772e:	2200      	movs	r2, #0
 8007730:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <MX_CAN_Init+0x60>)
 8007734:	2200      	movs	r2, #0
 8007736:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007738:	4b10      	ldr	r3, [pc, #64]	; (800777c <MX_CAN_Init+0x60>)
 800773a:	2200      	movs	r2, #0
 800773c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800773e:	4b0f      	ldr	r3, [pc, #60]	; (800777c <MX_CAN_Init+0x60>)
 8007740:	2200      	movs	r2, #0
 8007742:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007744:	4b0d      	ldr	r3, [pc, #52]	; (800777c <MX_CAN_Init+0x60>)
 8007746:	2200      	movs	r2, #0
 8007748:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800774a:	4b0c      	ldr	r3, [pc, #48]	; (800777c <MX_CAN_Init+0x60>)
 800774c:	2200      	movs	r2, #0
 800774e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007750:	4b0a      	ldr	r3, [pc, #40]	; (800777c <MX_CAN_Init+0x60>)
 8007752:	2200      	movs	r2, #0
 8007754:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <MX_CAN_Init+0x60>)
 8007758:	2200      	movs	r2, #0
 800775a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800775c:	4b07      	ldr	r3, [pc, #28]	; (800777c <MX_CAN_Init+0x60>)
 800775e:	2200      	movs	r2, #0
 8007760:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <MX_CAN_Init+0x60>)
 8007764:	2200      	movs	r2, #0
 8007766:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007768:	4804      	ldr	r0, [pc, #16]	; (800777c <MX_CAN_Init+0x60>)
 800776a:	f000 fbe1 	bl	8007f30 <HAL_CAN_Init>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007774:	f000 f95a 	bl	8007a2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007778:	bf00      	nop
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000cc0 	.word	0x20000cc0
 8007780:	40006400 	.word	0x40006400

08007784 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007788:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <MX_I2C1_Init+0x50>)
 800778a:	4a13      	ldr	r2, [pc, #76]	; (80077d8 <MX_I2C1_Init+0x54>)
 800778c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800778e:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <MX_I2C1_Init+0x50>)
 8007790:	4a12      	ldr	r2, [pc, #72]	; (80077dc <MX_I2C1_Init+0x58>)
 8007792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007794:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <MX_I2C1_Init+0x50>)
 8007796:	2200      	movs	r2, #0
 8007798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800779a:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <MX_I2C1_Init+0x50>)
 800779c:	2200      	movs	r2, #0
 800779e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077a0:	4b0c      	ldr	r3, [pc, #48]	; (80077d4 <MX_I2C1_Init+0x50>)
 80077a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <MX_I2C1_Init+0x50>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80077ae:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <MX_I2C1_Init+0x50>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077b4:	4b07      	ldr	r3, [pc, #28]	; (80077d4 <MX_I2C1_Init+0x50>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077ba:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <MX_I2C1_Init+0x50>)
 80077bc:	2200      	movs	r2, #0
 80077be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077c0:	4804      	ldr	r0, [pc, #16]	; (80077d4 <MX_I2C1_Init+0x50>)
 80077c2:	f001 f9a9 	bl	8008b18 <HAL_I2C_Init>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80077cc:	f000 f92e 	bl	8007a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80077d0:	bf00      	nop
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000ce8 	.word	0x20000ce8
 80077d8:	40005400 	.word	0x40005400
 80077dc:	00061a80 	.word	0x00061a80

080077e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077e6:	f107 0308 	add.w	r3, r7, #8
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	605a      	str	r2, [r3, #4]
 80077f0:	609a      	str	r2, [r3, #8]
 80077f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077f4:	463b      	mov	r3, r7
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80077fc:	4b1f      	ldr	r3, [pc, #124]	; (800787c <MX_TIM1_Init+0x9c>)
 80077fe:	4a20      	ldr	r2, [pc, #128]	; (8007880 <MX_TIM1_Init+0xa0>)
 8007800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007802:	4b1e      	ldr	r3, [pc, #120]	; (800787c <MX_TIM1_Init+0x9c>)
 8007804:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800780a:	4b1c      	ldr	r3, [pc, #112]	; (800787c <MX_TIM1_Init+0x9c>)
 800780c:	2200      	movs	r2, #0
 800780e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007810:	4b1a      	ldr	r3, [pc, #104]	; (800787c <MX_TIM1_Init+0x9c>)
 8007812:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007816:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007818:	4b18      	ldr	r3, [pc, #96]	; (800787c <MX_TIM1_Init+0x9c>)
 800781a:	2200      	movs	r2, #0
 800781c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800781e:	4b17      	ldr	r3, [pc, #92]	; (800787c <MX_TIM1_Init+0x9c>)
 8007820:	2200      	movs	r2, #0
 8007822:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <MX_TIM1_Init+0x9c>)
 8007826:	2200      	movs	r2, #0
 8007828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800782a:	4814      	ldr	r0, [pc, #80]	; (800787c <MX_TIM1_Init+0x9c>)
 800782c:	f002 ffa6 	bl	800a77c <HAL_TIM_Base_Init>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007836:	f000 f8f9 	bl	8007a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800783a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800783e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007840:	f107 0308 	add.w	r3, r7, #8
 8007844:	4619      	mov	r1, r3
 8007846:	480d      	ldr	r0, [pc, #52]	; (800787c <MX_TIM1_Init+0x9c>)
 8007848:	f003 f950 	bl	800aaec <HAL_TIM_ConfigClockSource>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007852:	f000 f8eb 	bl	8007a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007856:	2300      	movs	r3, #0
 8007858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800785a:	2300      	movs	r3, #0
 800785c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800785e:	463b      	mov	r3, r7
 8007860:	4619      	mov	r1, r3
 8007862:	4806      	ldr	r0, [pc, #24]	; (800787c <MX_TIM1_Init+0x9c>)
 8007864:	f003 fb3e 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800786e:	f000 f8dd 	bl	8007a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007872:	bf00      	nop
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000d3c 	.word	0x20000d3c
 8007880:	40012c00 	.word	0x40012c00

08007884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007888:	4b11      	ldr	r3, [pc, #68]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 800788a:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <MX_USART1_UART_Init+0x50>)
 800788c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800788e:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 8007890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007896:	4b0e      	ldr	r3, [pc, #56]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 8007898:	2200      	movs	r2, #0
 800789a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800789c:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 800789e:	2200      	movs	r2, #0
 80078a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80078a2:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80078a8:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 80078aa:	220c      	movs	r2, #12
 80078ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078ae:	4b08      	ldr	r3, [pc, #32]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80078ba:	4805      	ldr	r0, [pc, #20]	; (80078d0 <MX_USART1_UART_Init+0x4c>)
 80078bc:	f003 fb90 	bl	800afe0 <HAL_UART_Init>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80078c6:	f000 f8b1 	bl	8007a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80078ca:	bf00      	nop
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000d84 	.word	0x20000d84
 80078d4:	40013800 	.word	0x40013800

080078d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078de:	f107 0310 	add.w	r3, r7, #16
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	605a      	str	r2, [r3, #4]
 80078e8:	609a      	str	r2, [r3, #8]
 80078ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80078ec:	4b4b      	ldr	r3, [pc, #300]	; (8007a1c <MX_GPIO_Init+0x144>)
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	4a4a      	ldr	r2, [pc, #296]	; (8007a1c <MX_GPIO_Init+0x144>)
 80078f2:	f043 0310 	orr.w	r3, r3, #16
 80078f6:	6193      	str	r3, [r2, #24]
 80078f8:	4b48      	ldr	r3, [pc, #288]	; (8007a1c <MX_GPIO_Init+0x144>)
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007904:	4b45      	ldr	r3, [pc, #276]	; (8007a1c <MX_GPIO_Init+0x144>)
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	4a44      	ldr	r2, [pc, #272]	; (8007a1c <MX_GPIO_Init+0x144>)
 800790a:	f043 0320 	orr.w	r3, r3, #32
 800790e:	6193      	str	r3, [r2, #24]
 8007910:	4b42      	ldr	r3, [pc, #264]	; (8007a1c <MX_GPIO_Init+0x144>)
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800791c:	4b3f      	ldr	r3, [pc, #252]	; (8007a1c <MX_GPIO_Init+0x144>)
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	4a3e      	ldr	r2, [pc, #248]	; (8007a1c <MX_GPIO_Init+0x144>)
 8007922:	f043 0304 	orr.w	r3, r3, #4
 8007926:	6193      	str	r3, [r2, #24]
 8007928:	4b3c      	ldr	r3, [pc, #240]	; (8007a1c <MX_GPIO_Init+0x144>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	607b      	str	r3, [r7, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007934:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <MX_GPIO_Init+0x144>)
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	4a38      	ldr	r2, [pc, #224]	; (8007a1c <MX_GPIO_Init+0x144>)
 800793a:	f043 0308 	orr.w	r3, r3, #8
 800793e:	6193      	str	r3, [r2, #24]
 8007940:	4b36      	ldr	r3, [pc, #216]	; (8007a1c <MX_GPIO_Init+0x144>)
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800794c:	2200      	movs	r2, #0
 800794e:	21f0      	movs	r1, #240	; 0xf0
 8007950:	4833      	ldr	r0, [pc, #204]	; (8007a20 <MX_GPIO_Init+0x148>)
 8007952:	f001 f8b0 	bl	8008ab6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007956:	2200      	movs	r2, #0
 8007958:	f241 0130 	movw	r1, #4144	; 0x1030
 800795c:	4831      	ldr	r0, [pc, #196]	; (8007a24 <MX_GPIO_Init+0x14c>)
 800795e:	f001 f8aa 	bl	8008ab6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007962:	2200      	movs	r2, #0
 8007964:	f640 4107 	movw	r1, #3079	; 0xc07
 8007968:	482f      	ldr	r0, [pc, #188]	; (8007a28 <MX_GPIO_Init+0x150>)
 800796a:	f001 f8a4 	bl	8008ab6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800796e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007972:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800797c:	f107 0310 	add.w	r3, r7, #16
 8007980:	4619      	mov	r1, r3
 8007982:	4828      	ldr	r0, [pc, #160]	; (8007a24 <MX_GPIO_Init+0x14c>)
 8007984:	f000 fe20 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007988:	f248 130f 	movw	r3, #33039	; 0x810f
 800798c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007992:	2300      	movs	r3, #0
 8007994:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007996:	f107 0310 	add.w	r3, r7, #16
 800799a:	4619      	mov	r1, r3
 800799c:	4820      	ldr	r0, [pc, #128]	; (8007a20 <MX_GPIO_Init+0x148>)
 800799e:	f000 fe13 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80079a2:	23f0      	movs	r3, #240	; 0xf0
 80079a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079a6:	2301      	movs	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ae:	2302      	movs	r3, #2
 80079b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079b2:	f107 0310 	add.w	r3, r7, #16
 80079b6:	4619      	mov	r1, r3
 80079b8:	4819      	ldr	r0, [pc, #100]	; (8007a20 <MX_GPIO_Init+0x148>)
 80079ba:	f000 fe05 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80079be:	f241 0330 	movw	r3, #4144	; 0x1030
 80079c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079c4:	2301      	movs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079cc:	2302      	movs	r3, #2
 80079ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079d0:	f107 0310 	add.w	r3, r7, #16
 80079d4:	4619      	mov	r1, r3
 80079d6:	4813      	ldr	r0, [pc, #76]	; (8007a24 <MX_GPIO_Init+0x14c>)
 80079d8:	f000 fdf6 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80079dc:	f640 4307 	movw	r3, #3079	; 0xc07
 80079e0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079e2:	2301      	movs	r3, #1
 80079e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ea:	2302      	movs	r3, #2
 80079ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079ee:	f107 0310 	add.w	r3, r7, #16
 80079f2:	4619      	mov	r1, r3
 80079f4:	480c      	ldr	r0, [pc, #48]	; (8007a28 <MX_GPIO_Init+0x150>)
 80079f6:	f000 fde7 	bl	80085c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80079fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80079fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4806      	ldr	r0, [pc, #24]	; (8007a28 <MX_GPIO_Init+0x150>)
 8007a10:	f000 fdda 	bl	80085c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007a14:	bf00      	nop
 8007a16:	3720      	adds	r7, #32
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40021000 	.word	0x40021000
 8007a20:	40010800 	.word	0x40010800
 8007a24:	40011000 	.word	0x40011000
 8007a28:	40010c00 	.word	0x40010c00

08007a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007a30:	bf00      	nop
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr

08007a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007a3e:	4b15      	ldr	r3, [pc, #84]	; (8007a94 <HAL_MspInit+0x5c>)
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	4a14      	ldr	r2, [pc, #80]	; (8007a94 <HAL_MspInit+0x5c>)
 8007a44:	f043 0301 	orr.w	r3, r3, #1
 8007a48:	6193      	str	r3, [r2, #24]
 8007a4a:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <HAL_MspInit+0x5c>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	60bb      	str	r3, [r7, #8]
 8007a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a56:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <HAL_MspInit+0x5c>)
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	4a0e      	ldr	r2, [pc, #56]	; (8007a94 <HAL_MspInit+0x5c>)
 8007a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a60:	61d3      	str	r3, [r2, #28]
 8007a62:	4b0c      	ldr	r3, [pc, #48]	; (8007a94 <HAL_MspInit+0x5c>)
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a6a:	607b      	str	r3, [r7, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <HAL_MspInit+0x60>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <HAL_MspInit+0x60>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr
 8007a94:	40021000 	.word	0x40021000
 8007a98:	40010000 	.word	0x40010000

08007a9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa4:	f107 0310 	add.w	r3, r7, #16
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	605a      	str	r2, [r3, #4]
 8007aae:	609a      	str	r2, [r3, #8]
 8007ab0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1c      	ldr	r2, [pc, #112]	; (8007b28 <HAL_CAN_MspInit+0x8c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d131      	bne.n	8007b20 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007abc:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <HAL_CAN_MspInit+0x90>)
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	4a1a      	ldr	r2, [pc, #104]	; (8007b2c <HAL_CAN_MspInit+0x90>)
 8007ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ac6:	61d3      	str	r3, [r2, #28]
 8007ac8:	4b18      	ldr	r3, [pc, #96]	; (8007b2c <HAL_CAN_MspInit+0x90>)
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ad4:	4b15      	ldr	r3, [pc, #84]	; (8007b2c <HAL_CAN_MspInit+0x90>)
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	4a14      	ldr	r2, [pc, #80]	; (8007b2c <HAL_CAN_MspInit+0x90>)
 8007ada:	f043 0304 	orr.w	r3, r3, #4
 8007ade:	6193      	str	r3, [r2, #24]
 8007ae0:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <HAL_CAN_MspInit+0x90>)
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007afa:	f107 0310 	add.w	r3, r7, #16
 8007afe:	4619      	mov	r1, r3
 8007b00:	480b      	ldr	r0, [pc, #44]	; (8007b30 <HAL_CAN_MspInit+0x94>)
 8007b02:	f000 fd61 	bl	80085c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b10:	2303      	movs	r3, #3
 8007b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b14:	f107 0310 	add.w	r3, r7, #16
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4805      	ldr	r0, [pc, #20]	; (8007b30 <HAL_CAN_MspInit+0x94>)
 8007b1c:	f000 fd54 	bl	80085c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007b20:	bf00      	nop
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40006400 	.word	0x40006400
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	40010800 	.word	0x40010800

08007b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b3c:	f107 0310 	add.w	r3, r7, #16
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	605a      	str	r2, [r3, #4]
 8007b46:	609a      	str	r2, [r3, #8]
 8007b48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a15      	ldr	r2, [pc, #84]	; (8007ba4 <HAL_I2C_MspInit+0x70>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d123      	bne.n	8007b9c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b54:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <HAL_I2C_MspInit+0x74>)
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	4a13      	ldr	r2, [pc, #76]	; (8007ba8 <HAL_I2C_MspInit+0x74>)
 8007b5a:	f043 0308 	orr.w	r3, r3, #8
 8007b5e:	6193      	str	r3, [r2, #24]
 8007b60:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <HAL_I2C_MspInit+0x74>)
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b6c:	23c0      	movs	r3, #192	; 0xc0
 8007b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b70:	2312      	movs	r3, #18
 8007b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b74:	2303      	movs	r3, #3
 8007b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b78:	f107 0310 	add.w	r3, r7, #16
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	480b      	ldr	r0, [pc, #44]	; (8007bac <HAL_I2C_MspInit+0x78>)
 8007b80:	f000 fd22 	bl	80085c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007b84:	4b08      	ldr	r3, [pc, #32]	; (8007ba8 <HAL_I2C_MspInit+0x74>)
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	4a07      	ldr	r2, [pc, #28]	; (8007ba8 <HAL_I2C_MspInit+0x74>)
 8007b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b8e:	61d3      	str	r3, [r2, #28]
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <HAL_I2C_MspInit+0x74>)
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007b9c:	bf00      	nop
 8007b9e:	3720      	adds	r7, #32
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	40005400 	.word	0x40005400
 8007ba8:	40021000 	.word	0x40021000
 8007bac:	40010c00 	.word	0x40010c00

08007bb0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <HAL_I2C_MspDeInit+0x38>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d10d      	bne.n	8007bde <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <HAL_I2C_MspDeInit+0x3c>)
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	4a09      	ldr	r2, [pc, #36]	; (8007bec <HAL_I2C_MspDeInit+0x3c>)
 8007bc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bcc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007bce:	2140      	movs	r1, #64	; 0x40
 8007bd0:	4807      	ldr	r0, [pc, #28]	; (8007bf0 <HAL_I2C_MspDeInit+0x40>)
 8007bd2:	f000 fe8d 	bl	80088f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007bd6:	2180      	movs	r1, #128	; 0x80
 8007bd8:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <HAL_I2C_MspDeInit+0x40>)
 8007bda:	f000 fe89 	bl	80088f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40005400 	.word	0x40005400
 8007bec:	40021000 	.word	0x40021000
 8007bf0:	40010c00 	.word	0x40010c00

08007bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0d      	ldr	r2, [pc, #52]	; (8007c38 <HAL_TIM_Base_MspInit+0x44>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d113      	bne.n	8007c2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007c06:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <HAL_TIM_Base_MspInit+0x48>)
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	4a0c      	ldr	r2, [pc, #48]	; (8007c3c <HAL_TIM_Base_MspInit+0x48>)
 8007c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007c10:	6193      	str	r3, [r2, #24]
 8007c12:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <HAL_TIM_Base_MspInit+0x48>)
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2100      	movs	r1, #0
 8007c22:	2019      	movs	r0, #25
 8007c24:	f000 fb57 	bl	80082d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007c28:	2019      	movs	r0, #25
 8007c2a:	f000 fb70 	bl	800830e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	40012c00 	.word	0x40012c00
 8007c3c:	40021000 	.word	0x40021000

08007c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c48:	f107 0310 	add.w	r3, r7, #16
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	605a      	str	r2, [r3, #4]
 8007c52:	609a      	str	r2, [r3, #8]
 8007c54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <HAL_UART_MspInit+0x9c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d139      	bne.n	8007cd4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c60:	4b1f      	ldr	r3, [pc, #124]	; (8007ce0 <HAL_UART_MspInit+0xa0>)
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	4a1e      	ldr	r2, [pc, #120]	; (8007ce0 <HAL_UART_MspInit+0xa0>)
 8007c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c6a:	6193      	str	r3, [r2, #24]
 8007c6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <HAL_UART_MspInit+0xa0>)
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c78:	4b19      	ldr	r3, [pc, #100]	; (8007ce0 <HAL_UART_MspInit+0xa0>)
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <HAL_UART_MspInit+0xa0>)
 8007c7e:	f043 0304 	orr.w	r3, r3, #4
 8007c82:	6193      	str	r3, [r2, #24]
 8007c84:	4b16      	ldr	r3, [pc, #88]	; (8007ce0 <HAL_UART_MspInit+0xa0>)
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c96:	2302      	movs	r3, #2
 8007c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c9e:	f107 0310 	add.w	r3, r7, #16
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	480f      	ldr	r0, [pc, #60]	; (8007ce4 <HAL_UART_MspInit+0xa4>)
 8007ca6:	f000 fc8f 	bl	80085c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cb8:	f107 0310 	add.w	r3, r7, #16
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4809      	ldr	r0, [pc, #36]	; (8007ce4 <HAL_UART_MspInit+0xa4>)
 8007cc0:	f000 fc82 	bl	80085c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	2025      	movs	r0, #37	; 0x25
 8007cca:	f000 fb04 	bl	80082d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007cce:	2025      	movs	r0, #37	; 0x25
 8007cd0:	f000 fb1d 	bl	800830e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007cd4:	bf00      	nop
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40013800 	.word	0x40013800
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	40010800 	.word	0x40010800

08007ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007cec:	e7fe      	b.n	8007cec <NMI_Handler+0x4>

08007cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cf2:	e7fe      	b.n	8007cf2 <HardFault_Handler+0x4>

08007cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007cf8:	e7fe      	b.n	8007cf8 <MemManage_Handler+0x4>

08007cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007cfe:	e7fe      	b.n	8007cfe <BusFault_Handler+0x4>

08007d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d04:	e7fe      	b.n	8007d04 <UsageFault_Handler+0x4>

08007d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d06:	b480      	push	{r7}
 8007d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d0a:	bf00      	nop
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d12:	b480      	push	{r7}
 8007d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d16:	bf00      	nop
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d22:	bf00      	nop
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr

08007d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d2e:	f000 f8bf 	bl	8007eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d32:	bf00      	nop
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d3c:	4802      	ldr	r0, [pc, #8]	; (8007d48 <TIM1_UP_IRQHandler+0x10>)
 8007d3e:	f002 fdcd 	bl	800a8dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007d42:	bf00      	nop
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000d3c 	.word	0x20000d3c

08007d4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007d50:	4802      	ldr	r0, [pc, #8]	; (8007d5c <USART1_IRQHandler+0x10>)
 8007d52:	f003 f9cb 	bl	800b0ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007d56:	bf00      	nop
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000d84 	.word	0x20000d84

08007d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d68:	4a14      	ldr	r2, [pc, #80]	; (8007dbc <_sbrk+0x5c>)
 8007d6a:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <_sbrk+0x60>)
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <_sbrk+0x64>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <_sbrk+0x64>)
 8007d7e:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <_sbrk+0x68>)
 8007d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d82:	4b10      	ldr	r3, [pc, #64]	; (8007dc4 <_sbrk+0x64>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d207      	bcs.n	8007da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007d90:	f003 ffe6 	bl	800bd60 <__errno>
 8007d94:	4603      	mov	r3, r0
 8007d96:	220c      	movs	r2, #12
 8007d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9e:	e009      	b.n	8007db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007da0:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <_sbrk+0x64>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007da6:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <_sbrk+0x64>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4413      	add	r3, r2
 8007dae:	4a05      	ldr	r2, [pc, #20]	; (8007dc4 <_sbrk+0x64>)
 8007db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007db2:	68fb      	ldr	r3, [r7, #12]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	2000c000 	.word	0x2000c000
 8007dc0:	00000400 	.word	0x00000400
 8007dc4:	20000dcc 	.word	0x20000dcc
 8007dc8:	20000f20 	.word	0x20000f20

08007dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007dd0:	bf00      	nop
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr

08007dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007dd8:	480c      	ldr	r0, [pc, #48]	; (8007e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007dda:	490d      	ldr	r1, [pc, #52]	; (8007e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007ddc:	4a0d      	ldr	r2, [pc, #52]	; (8007e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007de0:	e002      	b.n	8007de8 <LoopCopyDataInit>

08007de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007de6:	3304      	adds	r3, #4

08007de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007dec:	d3f9      	bcc.n	8007de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007dee:	4a0a      	ldr	r2, [pc, #40]	; (8007e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007df0:	4c0a      	ldr	r4, [pc, #40]	; (8007e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007df4:	e001      	b.n	8007dfa <LoopFillZerobss>

08007df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007df8:	3204      	adds	r2, #4

08007dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007dfc:	d3fb      	bcc.n	8007df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007dfe:	f7ff ffe5 	bl	8007dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e02:	f003 ffb3 	bl	800bd6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007e06:	f7ff fb87 	bl	8007518 <main>
  bx lr
 8007e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8007e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007e10:	200009a8 	.word	0x200009a8
  ldr r2, =_sidata
 8007e14:	0800d31c 	.word	0x0800d31c
  ldr r2, =_sbss
 8007e18:	200009a8 	.word	0x200009a8
  ldr r4, =_ebss
 8007e1c:	20000f1c 	.word	0x20000f1c

08007e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007e20:	e7fe      	b.n	8007e20 <ADC1_2_IRQHandler>
	...

08007e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e28:	4b08      	ldr	r3, [pc, #32]	; (8007e4c <HAL_Init+0x28>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <HAL_Init+0x28>)
 8007e2e:	f043 0310 	orr.w	r3, r3, #16
 8007e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e34:	2003      	movs	r0, #3
 8007e36:	f000 fa43 	bl	80082c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e3a:	200f      	movs	r0, #15
 8007e3c:	f000 f808 	bl	8007e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e40:	f7ff fdfa 	bl	8007a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40022000 	.word	0x40022000

08007e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e58:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <HAL_InitTick+0x54>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <HAL_InitTick+0x58>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fa5b 	bl	800832a <HAL_SYSTICK_Config>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e00e      	b.n	8007e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b0f      	cmp	r3, #15
 8007e82:	d80a      	bhi.n	8007e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e84:	2200      	movs	r2, #0
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	f000 fa23 	bl	80082d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e90:	4a06      	ldr	r2, [pc, #24]	; (8007eac <HAL_InitTick+0x5c>)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	e000      	b.n	8007e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	2000094c 	.word	0x2000094c
 8007ea8:	20000954 	.word	0x20000954
 8007eac:	20000950 	.word	0x20000950

08007eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <HAL_IncTick+0x1c>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <HAL_IncTick+0x20>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	4a03      	ldr	r2, [pc, #12]	; (8007ed0 <HAL_IncTick+0x20>)
 8007ec2:	6013      	str	r3, [r2, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	20000954 	.word	0x20000954
 8007ed0:	20000dd0 	.word	0x20000dd0

08007ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <HAL_GetTick+0x10>)
 8007eda:	681b      	ldr	r3, [r3, #0]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr
 8007ee4:	20000dd0 	.word	0x20000dd0

08007ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ef0:	f7ff fff0 	bl	8007ed4 <HAL_GetTick>
 8007ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f00:	d005      	beq.n	8007f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007f02:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <HAL_Delay+0x44>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007f0e:	bf00      	nop
 8007f10:	f7ff ffe0 	bl	8007ed4 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d8f7      	bhi.n	8007f10 <HAL_Delay+0x28>
  {
  }
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000954 	.word	0x20000954

08007f30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e0ed      	b.n	800811e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff fda4 	bl	8007a9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0201 	orr.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f64:	f7ff ffb6 	bl	8007ed4 <HAL_GetTick>
 8007f68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007f6a:	e012      	b.n	8007f92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007f6c:	f7ff ffb2 	bl	8007ed4 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b0a      	cmp	r3, #10
 8007f78:	d90b      	bls.n	8007f92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2205      	movs	r2, #5
 8007f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e0c5      	b.n	800811e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0e5      	beq.n	8007f6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0202 	bic.w	r2, r2, #2
 8007fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fb0:	f7ff ff90 	bl	8007ed4 <HAL_GetTick>
 8007fb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007fb6:	e012      	b.n	8007fde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007fb8:	f7ff ff8c 	bl	8007ed4 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b0a      	cmp	r3, #10
 8007fc4:	d90b      	bls.n	8007fde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2205      	movs	r2, #5
 8007fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e09f      	b.n	800811e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e5      	bne.n	8007fb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	7e1b      	ldrb	r3, [r3, #24]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d108      	bne.n	8008006 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e007      	b.n	8008016 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	7e5b      	ldrb	r3, [r3, #25]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d108      	bne.n	8008030 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e007      	b.n	8008040 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800803e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7e9b      	ldrb	r3, [r3, #26]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d108      	bne.n	800805a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0220 	orr.w	r2, r2, #32
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	e007      	b.n	800806a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0220 	bic.w	r2, r2, #32
 8008068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7edb      	ldrb	r3, [r3, #27]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d108      	bne.n	8008084 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0210 	bic.w	r2, r2, #16
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e007      	b.n	8008094 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0210 	orr.w	r2, r2, #16
 8008092:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	7f1b      	ldrb	r3, [r3, #28]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d108      	bne.n	80080ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0208 	orr.w	r2, r2, #8
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	e007      	b.n	80080be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0208 	bic.w	r2, r2, #8
 80080bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	7f5b      	ldrb	r3, [r3, #29]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d108      	bne.n	80080d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0204 	orr.w	r2, r2, #4
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	e007      	b.n	80080e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0204 	bic.w	r2, r2, #4
 80080e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	ea42 0103 	orr.w	r1, r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	1e5a      	subs	r2, r3, #1
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <__NVIC_SetPriorityGrouping>:
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008138:	4b0c      	ldr	r3, [pc, #48]	; (800816c <__NVIC_SetPriorityGrouping+0x44>)
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008144:	4013      	ands	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800815a:	4a04      	ldr	r2, [pc, #16]	; (800816c <__NVIC_SetPriorityGrouping+0x44>)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	60d3      	str	r3, [r2, #12]
}
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	e000ed00 	.word	0xe000ed00

08008170 <__NVIC_GetPriorityGrouping>:
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <__NVIC_GetPriorityGrouping+0x18>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	f003 0307 	and.w	r3, r3, #7
}
 800817e:	4618      	mov	r0, r3
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	e000ed00 	.word	0xe000ed00

0800818c <__NVIC_EnableIRQ>:
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800819a:	2b00      	cmp	r3, #0
 800819c:	db0b      	blt.n	80081b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	f003 021f 	and.w	r2, r3, #31
 80081a4:	4906      	ldr	r1, [pc, #24]	; (80081c0 <__NVIC_EnableIRQ+0x34>)
 80081a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	2001      	movs	r0, #1
 80081ae:	fa00 f202 	lsl.w	r2, r0, r2
 80081b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr
 80081c0:	e000e100 	.word	0xe000e100

080081c4 <__NVIC_SetPriority>:
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	6039      	str	r1, [r7, #0]
 80081ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	db0a      	blt.n	80081ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	490c      	ldr	r1, [pc, #48]	; (8008210 <__NVIC_SetPriority+0x4c>)
 80081de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081e2:	0112      	lsls	r2, r2, #4
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	440b      	add	r3, r1
 80081e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081ec:	e00a      	b.n	8008204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	4908      	ldr	r1, [pc, #32]	; (8008214 <__NVIC_SetPriority+0x50>)
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	f003 030f 	and.w	r3, r3, #15
 80081fa:	3b04      	subs	r3, #4
 80081fc:	0112      	lsls	r2, r2, #4
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	440b      	add	r3, r1
 8008202:	761a      	strb	r2, [r3, #24]
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	e000e100 	.word	0xe000e100
 8008214:	e000ed00 	.word	0xe000ed00

08008218 <NVIC_EncodePriority>:
{
 8008218:	b480      	push	{r7}
 800821a:	b089      	sub	sp, #36	; 0x24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f1c3 0307 	rsb	r3, r3, #7
 8008232:	2b04      	cmp	r3, #4
 8008234:	bf28      	it	cs
 8008236:	2304      	movcs	r3, #4
 8008238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	3304      	adds	r3, #4
 800823e:	2b06      	cmp	r3, #6
 8008240:	d902      	bls.n	8008248 <NVIC_EncodePriority+0x30>
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	3b03      	subs	r3, #3
 8008246:	e000      	b.n	800824a <NVIC_EncodePriority+0x32>
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	fa02 f303 	lsl.w	r3, r2, r3
 8008256:	43da      	mvns	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	401a      	ands	r2, r3
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008260:	f04f 31ff 	mov.w	r1, #4294967295
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	fa01 f303 	lsl.w	r3, r1, r3
 800826a:	43d9      	mvns	r1, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008270:	4313      	orrs	r3, r2
}
 8008272:	4618      	mov	r0, r3
 8008274:	3724      	adds	r7, #36	; 0x24
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3b01      	subs	r3, #1
 8008288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800828c:	d301      	bcc.n	8008292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800828e:	2301      	movs	r3, #1
 8008290:	e00f      	b.n	80082b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008292:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <SysTick_Config+0x40>)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3b01      	subs	r3, #1
 8008298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800829a:	210f      	movs	r1, #15
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	f7ff ff90 	bl	80081c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <SysTick_Config+0x40>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082aa:	4b04      	ldr	r3, [pc, #16]	; (80082bc <SysTick_Config+0x40>)
 80082ac:	2207      	movs	r2, #7
 80082ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	e000e010 	.word	0xe000e010

080082c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff ff2d 	bl	8008128 <__NVIC_SetPriorityGrouping>
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b086      	sub	sp, #24
 80082da:	af00      	add	r7, sp, #0
 80082dc:	4603      	mov	r3, r0
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80082e8:	f7ff ff42 	bl	8008170 <__NVIC_GetPriorityGrouping>
 80082ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	6978      	ldr	r0, [r7, #20]
 80082f4:	f7ff ff90 	bl	8008218 <NVIC_EncodePriority>
 80082f8:	4602      	mov	r2, r0
 80082fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff ff5f 	bl	80081c4 <__NVIC_SetPriority>
}
 8008306:	bf00      	nop
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	4603      	mov	r3, r0
 8008316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff ff35 	bl	800818c <__NVIC_EnableIRQ>
}
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff ffa2 	bl	800827c <SysTick_Config>
 8008338:	4603      	mov	r3, r0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008342:	b480      	push	{r7}
 8008344:	b085      	sub	sp, #20
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d008      	beq.n	800836c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2204      	movs	r2, #4
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e020      	b.n	80083ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 020e 	bic.w	r2, r2, #14
 800837a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0201 	bic.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008394:	2101      	movs	r1, #1
 8008396:	fa01 f202 	lsl.w	r2, r1, r2
 800839a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr

080083b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d005      	beq.n	80083dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2204      	movs	r2, #4
 80083d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	73fb      	strb	r3, [r7, #15]
 80083da:	e0d6      	b.n	800858a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 020e 	bic.w	r2, r2, #14
 80083ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0201 	bic.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	4b64      	ldr	r3, [pc, #400]	; (8008594 <HAL_DMA_Abort_IT+0x1dc>)
 8008404:	429a      	cmp	r2, r3
 8008406:	d958      	bls.n	80084ba <HAL_DMA_Abort_IT+0x102>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a62      	ldr	r2, [pc, #392]	; (8008598 <HAL_DMA_Abort_IT+0x1e0>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d04f      	beq.n	80084b2 <HAL_DMA_Abort_IT+0xfa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a61      	ldr	r2, [pc, #388]	; (800859c <HAL_DMA_Abort_IT+0x1e4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d048      	beq.n	80084ae <HAL_DMA_Abort_IT+0xf6>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a5f      	ldr	r2, [pc, #380]	; (80085a0 <HAL_DMA_Abort_IT+0x1e8>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d040      	beq.n	80084a8 <HAL_DMA_Abort_IT+0xf0>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a5e      	ldr	r2, [pc, #376]	; (80085a4 <HAL_DMA_Abort_IT+0x1ec>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d038      	beq.n	80084a2 <HAL_DMA_Abort_IT+0xea>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a5c      	ldr	r2, [pc, #368]	; (80085a8 <HAL_DMA_Abort_IT+0x1f0>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d030      	beq.n	800849c <HAL_DMA_Abort_IT+0xe4>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a5b      	ldr	r2, [pc, #364]	; (80085ac <HAL_DMA_Abort_IT+0x1f4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d028      	beq.n	8008496 <HAL_DMA_Abort_IT+0xde>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a52      	ldr	r2, [pc, #328]	; (8008594 <HAL_DMA_Abort_IT+0x1dc>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d020      	beq.n	8008490 <HAL_DMA_Abort_IT+0xd8>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a57      	ldr	r2, [pc, #348]	; (80085b0 <HAL_DMA_Abort_IT+0x1f8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d019      	beq.n	800848c <HAL_DMA_Abort_IT+0xd4>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a55      	ldr	r2, [pc, #340]	; (80085b4 <HAL_DMA_Abort_IT+0x1fc>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d012      	beq.n	8008488 <HAL_DMA_Abort_IT+0xd0>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a54      	ldr	r2, [pc, #336]	; (80085b8 <HAL_DMA_Abort_IT+0x200>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00a      	beq.n	8008482 <HAL_DMA_Abort_IT+0xca>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a52      	ldr	r2, [pc, #328]	; (80085bc <HAL_DMA_Abort_IT+0x204>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d102      	bne.n	800847c <HAL_DMA_Abort_IT+0xc4>
 8008476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800847a:	e01b      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 800847c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008480:	e018      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 8008482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008486:	e015      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 8008488:	2310      	movs	r3, #16
 800848a:	e013      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 800848c:	2301      	movs	r3, #1
 800848e:	e011      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 8008490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008494:	e00e      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 8008496:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800849a:	e00b      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 800849c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80084a0:	e008      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 80084a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084a6:	e005      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 80084a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084ac:	e002      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 80084ae:	2310      	movs	r3, #16
 80084b0:	e000      	b.n	80084b4 <HAL_DMA_Abort_IT+0xfc>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4a42      	ldr	r2, [pc, #264]	; (80085c0 <HAL_DMA_Abort_IT+0x208>)
 80084b6:	6053      	str	r3, [r2, #4]
 80084b8:	e057      	b.n	800856a <HAL_DMA_Abort_IT+0x1b2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a36      	ldr	r2, [pc, #216]	; (8008598 <HAL_DMA_Abort_IT+0x1e0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d04f      	beq.n	8008564 <HAL_DMA_Abort_IT+0x1ac>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a34      	ldr	r2, [pc, #208]	; (800859c <HAL_DMA_Abort_IT+0x1e4>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d048      	beq.n	8008560 <HAL_DMA_Abort_IT+0x1a8>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a33      	ldr	r2, [pc, #204]	; (80085a0 <HAL_DMA_Abort_IT+0x1e8>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d040      	beq.n	800855a <HAL_DMA_Abort_IT+0x1a2>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a31      	ldr	r2, [pc, #196]	; (80085a4 <HAL_DMA_Abort_IT+0x1ec>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d038      	beq.n	8008554 <HAL_DMA_Abort_IT+0x19c>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a30      	ldr	r2, [pc, #192]	; (80085a8 <HAL_DMA_Abort_IT+0x1f0>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d030      	beq.n	800854e <HAL_DMA_Abort_IT+0x196>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a2e      	ldr	r2, [pc, #184]	; (80085ac <HAL_DMA_Abort_IT+0x1f4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d028      	beq.n	8008548 <HAL_DMA_Abort_IT+0x190>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a26      	ldr	r2, [pc, #152]	; (8008594 <HAL_DMA_Abort_IT+0x1dc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d020      	beq.n	8008542 <HAL_DMA_Abort_IT+0x18a>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a2a      	ldr	r2, [pc, #168]	; (80085b0 <HAL_DMA_Abort_IT+0x1f8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d019      	beq.n	800853e <HAL_DMA_Abort_IT+0x186>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a29      	ldr	r2, [pc, #164]	; (80085b4 <HAL_DMA_Abort_IT+0x1fc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d012      	beq.n	800853a <HAL_DMA_Abort_IT+0x182>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a27      	ldr	r2, [pc, #156]	; (80085b8 <HAL_DMA_Abort_IT+0x200>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00a      	beq.n	8008534 <HAL_DMA_Abort_IT+0x17c>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a26      	ldr	r2, [pc, #152]	; (80085bc <HAL_DMA_Abort_IT+0x204>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d102      	bne.n	800852e <HAL_DMA_Abort_IT+0x176>
 8008528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800852c:	e01b      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 800852e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008532:	e018      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 8008534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008538:	e015      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 800853a:	2310      	movs	r3, #16
 800853c:	e013      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 800853e:	2301      	movs	r3, #1
 8008540:	e011      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 8008542:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008546:	e00e      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 8008548:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800854c:	e00b      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 800854e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008552:	e008      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 8008554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008558:	e005      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 800855a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800855e:	e002      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 8008560:	2310      	movs	r3, #16
 8008562:	e000      	b.n	8008566 <HAL_DMA_Abort_IT+0x1ae>
 8008564:	2301      	movs	r3, #1
 8008566:	4a17      	ldr	r2, [pc, #92]	; (80085c4 <HAL_DMA_Abort_IT+0x20c>)
 8008568:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
    } 
  }
  return status;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40020080 	.word	0x40020080
 8008598:	40020008 	.word	0x40020008
 800859c:	4002001c 	.word	0x4002001c
 80085a0:	40020030 	.word	0x40020030
 80085a4:	40020044 	.word	0x40020044
 80085a8:	40020058 	.word	0x40020058
 80085ac:	4002006c 	.word	0x4002006c
 80085b0:	40020408 	.word	0x40020408
 80085b4:	4002041c 	.word	0x4002041c
 80085b8:	40020430 	.word	0x40020430
 80085bc:	40020444 	.word	0x40020444
 80085c0:	40020400 	.word	0x40020400
 80085c4:	40020000 	.word	0x40020000

080085c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b08b      	sub	sp, #44	; 0x2c
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80085d2:	2300      	movs	r3, #0
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80085d6:	2300      	movs	r3, #0
 80085d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085da:	e179      	b.n	80088d0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80085dc:	2201      	movs	r2, #1
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	4013      	ands	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	f040 8168 	bne.w	80088ca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	4a96      	ldr	r2, [pc, #600]	; (8008858 <HAL_GPIO_Init+0x290>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d05e      	beq.n	80086c2 <HAL_GPIO_Init+0xfa>
 8008604:	4a94      	ldr	r2, [pc, #592]	; (8008858 <HAL_GPIO_Init+0x290>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d875      	bhi.n	80086f6 <HAL_GPIO_Init+0x12e>
 800860a:	4a94      	ldr	r2, [pc, #592]	; (800885c <HAL_GPIO_Init+0x294>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d058      	beq.n	80086c2 <HAL_GPIO_Init+0xfa>
 8008610:	4a92      	ldr	r2, [pc, #584]	; (800885c <HAL_GPIO_Init+0x294>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d86f      	bhi.n	80086f6 <HAL_GPIO_Init+0x12e>
 8008616:	4a92      	ldr	r2, [pc, #584]	; (8008860 <HAL_GPIO_Init+0x298>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d052      	beq.n	80086c2 <HAL_GPIO_Init+0xfa>
 800861c:	4a90      	ldr	r2, [pc, #576]	; (8008860 <HAL_GPIO_Init+0x298>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d869      	bhi.n	80086f6 <HAL_GPIO_Init+0x12e>
 8008622:	4a90      	ldr	r2, [pc, #576]	; (8008864 <HAL_GPIO_Init+0x29c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d04c      	beq.n	80086c2 <HAL_GPIO_Init+0xfa>
 8008628:	4a8e      	ldr	r2, [pc, #568]	; (8008864 <HAL_GPIO_Init+0x29c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d863      	bhi.n	80086f6 <HAL_GPIO_Init+0x12e>
 800862e:	4a8e      	ldr	r2, [pc, #568]	; (8008868 <HAL_GPIO_Init+0x2a0>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d046      	beq.n	80086c2 <HAL_GPIO_Init+0xfa>
 8008634:	4a8c      	ldr	r2, [pc, #560]	; (8008868 <HAL_GPIO_Init+0x2a0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d85d      	bhi.n	80086f6 <HAL_GPIO_Init+0x12e>
 800863a:	2b12      	cmp	r3, #18
 800863c:	d82a      	bhi.n	8008694 <HAL_GPIO_Init+0xcc>
 800863e:	2b12      	cmp	r3, #18
 8008640:	d859      	bhi.n	80086f6 <HAL_GPIO_Init+0x12e>
 8008642:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <HAL_GPIO_Init+0x80>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	080086c3 	.word	0x080086c3
 800864c:	0800869d 	.word	0x0800869d
 8008650:	080086af 	.word	0x080086af
 8008654:	080086f1 	.word	0x080086f1
 8008658:	080086f7 	.word	0x080086f7
 800865c:	080086f7 	.word	0x080086f7
 8008660:	080086f7 	.word	0x080086f7
 8008664:	080086f7 	.word	0x080086f7
 8008668:	080086f7 	.word	0x080086f7
 800866c:	080086f7 	.word	0x080086f7
 8008670:	080086f7 	.word	0x080086f7
 8008674:	080086f7 	.word	0x080086f7
 8008678:	080086f7 	.word	0x080086f7
 800867c:	080086f7 	.word	0x080086f7
 8008680:	080086f7 	.word	0x080086f7
 8008684:	080086f7 	.word	0x080086f7
 8008688:	080086f7 	.word	0x080086f7
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086b9 	.word	0x080086b9
 8008694:	4a75      	ldr	r2, [pc, #468]	; (800886c <HAL_GPIO_Init+0x2a4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d013      	beq.n	80086c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800869a:	e02c      	b.n	80086f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	623b      	str	r3, [r7, #32]
          break;
 80086a2:	e029      	b.n	80086f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	3304      	adds	r3, #4
 80086aa:	623b      	str	r3, [r7, #32]
          break;
 80086ac:	e024      	b.n	80086f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	3308      	adds	r3, #8
 80086b4:	623b      	str	r3, [r7, #32]
          break;
 80086b6:	e01f      	b.n	80086f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	330c      	adds	r3, #12
 80086be:	623b      	str	r3, [r7, #32]
          break;
 80086c0:	e01a      	b.n	80086f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80086ca:	2304      	movs	r3, #4
 80086cc:	623b      	str	r3, [r7, #32]
          break;
 80086ce:	e013      	b.n	80086f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d105      	bne.n	80086e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80086d8:	2308      	movs	r3, #8
 80086da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	611a      	str	r2, [r3, #16]
          break;
 80086e2:	e009      	b.n	80086f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80086e4:	2308      	movs	r3, #8
 80086e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	615a      	str	r2, [r3, #20]
          break;
 80086ee:	e003      	b.n	80086f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80086f0:	2300      	movs	r3, #0
 80086f2:	623b      	str	r3, [r7, #32]
          break;
 80086f4:	e000      	b.n	80086f8 <HAL_GPIO_Init+0x130>
          break;
 80086f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	2bff      	cmp	r3, #255	; 0xff
 80086fc:	d801      	bhi.n	8008702 <HAL_GPIO_Init+0x13a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	e001      	b.n	8008706 <HAL_GPIO_Init+0x13e>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3304      	adds	r3, #4
 8008706:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d802      	bhi.n	8008714 <HAL_GPIO_Init+0x14c>
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	e002      	b.n	800871a <HAL_GPIO_Init+0x152>
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	3b08      	subs	r3, #8
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	210f      	movs	r1, #15
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	fa01 f303 	lsl.w	r3, r1, r3
 8008728:	43db      	mvns	r3, r3
 800872a:	401a      	ands	r2, r3
 800872c:	6a39      	ldr	r1, [r7, #32]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	fa01 f303 	lsl.w	r3, r1, r3
 8008734:	431a      	orrs	r2, r3
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 80c1 	beq.w	80088ca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008748:	4b49      	ldr	r3, [pc, #292]	; (8008870 <HAL_GPIO_Init+0x2a8>)
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	4a48      	ldr	r2, [pc, #288]	; (8008870 <HAL_GPIO_Init+0x2a8>)
 800874e:	f043 0301 	orr.w	r3, r3, #1
 8008752:	6193      	str	r3, [r2, #24]
 8008754:	4b46      	ldr	r3, [pc, #280]	; (8008870 <HAL_GPIO_Init+0x2a8>)
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	60bb      	str	r3, [r7, #8]
 800875e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008760:	4a44      	ldr	r2, [pc, #272]	; (8008874 <HAL_GPIO_Init+0x2ac>)
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	089b      	lsrs	r3, r3, #2
 8008766:	3302      	adds	r3, #2
 8008768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800876c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	f003 0303 	and.w	r3, r3, #3
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	220f      	movs	r2, #15
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	43db      	mvns	r3, r3
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4013      	ands	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a3c      	ldr	r2, [pc, #240]	; (8008878 <HAL_GPIO_Init+0x2b0>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d01f      	beq.n	80087cc <HAL_GPIO_Init+0x204>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a3b      	ldr	r2, [pc, #236]	; (800887c <HAL_GPIO_Init+0x2b4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d019      	beq.n	80087c8 <HAL_GPIO_Init+0x200>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a3a      	ldr	r2, [pc, #232]	; (8008880 <HAL_GPIO_Init+0x2b8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <HAL_GPIO_Init+0x1fc>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a39      	ldr	r2, [pc, #228]	; (8008884 <HAL_GPIO_Init+0x2bc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00d      	beq.n	80087c0 <HAL_GPIO_Init+0x1f8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a38      	ldr	r2, [pc, #224]	; (8008888 <HAL_GPIO_Init+0x2c0>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d007      	beq.n	80087bc <HAL_GPIO_Init+0x1f4>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a37      	ldr	r2, [pc, #220]	; (800888c <HAL_GPIO_Init+0x2c4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d101      	bne.n	80087b8 <HAL_GPIO_Init+0x1f0>
 80087b4:	2305      	movs	r3, #5
 80087b6:	e00a      	b.n	80087ce <HAL_GPIO_Init+0x206>
 80087b8:	2306      	movs	r3, #6
 80087ba:	e008      	b.n	80087ce <HAL_GPIO_Init+0x206>
 80087bc:	2304      	movs	r3, #4
 80087be:	e006      	b.n	80087ce <HAL_GPIO_Init+0x206>
 80087c0:	2303      	movs	r3, #3
 80087c2:	e004      	b.n	80087ce <HAL_GPIO_Init+0x206>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e002      	b.n	80087ce <HAL_GPIO_Init+0x206>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <HAL_GPIO_Init+0x206>
 80087cc:	2300      	movs	r3, #0
 80087ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d0:	f002 0203 	and.w	r2, r2, #3
 80087d4:	0092      	lsls	r2, r2, #2
 80087d6:	4093      	lsls	r3, r2
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80087de:	4925      	ldr	r1, [pc, #148]	; (8008874 <HAL_GPIO_Init+0x2ac>)
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	3302      	adds	r3, #2
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d006      	beq.n	8008806 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80087f8:	4b25      	ldr	r3, [pc, #148]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	4924      	ldr	r1, [pc, #144]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	4313      	orrs	r3, r2
 8008802:	608b      	str	r3, [r1, #8]
 8008804:	e006      	b.n	8008814 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008806:	4b22      	ldr	r3, [pc, #136]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	43db      	mvns	r3, r3
 800880e:	4920      	ldr	r1, [pc, #128]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 8008810:	4013      	ands	r3, r2
 8008812:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d006      	beq.n	800882e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008820:	4b1b      	ldr	r3, [pc, #108]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	491a      	ldr	r1, [pc, #104]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	4313      	orrs	r3, r2
 800882a:	60cb      	str	r3, [r1, #12]
 800882c:	e006      	b.n	800883c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800882e:	4b18      	ldr	r3, [pc, #96]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	43db      	mvns	r3, r3
 8008836:	4916      	ldr	r1, [pc, #88]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 8008838:	4013      	ands	r3, r2
 800883a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d025      	beq.n	8008894 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008848:	4b11      	ldr	r3, [pc, #68]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	4910      	ldr	r1, [pc, #64]	; (8008890 <HAL_GPIO_Init+0x2c8>)
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	4313      	orrs	r3, r2
 8008852:	604b      	str	r3, [r1, #4]
 8008854:	e025      	b.n	80088a2 <HAL_GPIO_Init+0x2da>
 8008856:	bf00      	nop
 8008858:	10320000 	.word	0x10320000
 800885c:	10310000 	.word	0x10310000
 8008860:	10220000 	.word	0x10220000
 8008864:	10210000 	.word	0x10210000
 8008868:	10120000 	.word	0x10120000
 800886c:	10110000 	.word	0x10110000
 8008870:	40021000 	.word	0x40021000
 8008874:	40010000 	.word	0x40010000
 8008878:	40010800 	.word	0x40010800
 800887c:	40010c00 	.word	0x40010c00
 8008880:	40011000 	.word	0x40011000
 8008884:	40011400 	.word	0x40011400
 8008888:	40011800 	.word	0x40011800
 800888c:	40011c00 	.word	0x40011c00
 8008890:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008894:	4b15      	ldr	r3, [pc, #84]	; (80088ec <HAL_GPIO_Init+0x324>)
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	43db      	mvns	r3, r3
 800889c:	4913      	ldr	r1, [pc, #76]	; (80088ec <HAL_GPIO_Init+0x324>)
 800889e:	4013      	ands	r3, r2
 80088a0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d006      	beq.n	80088bc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80088ae:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <HAL_GPIO_Init+0x324>)
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	490e      	ldr	r1, [pc, #56]	; (80088ec <HAL_GPIO_Init+0x324>)
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	600b      	str	r3, [r1, #0]
 80088ba:	e006      	b.n	80088ca <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <HAL_GPIO_Init+0x324>)
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	43db      	mvns	r3, r3
 80088c4:	4909      	ldr	r1, [pc, #36]	; (80088ec <HAL_GPIO_Init+0x324>)
 80088c6:	4013      	ands	r3, r2
 80088c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	3301      	adds	r3, #1
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	fa22 f303 	lsr.w	r3, r2, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f47f ae7e 	bne.w	80085dc <HAL_GPIO_Init+0x14>
  }
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	372c      	adds	r7, #44	; 0x2c
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr
 80088ec:	40010400 	.word	0x40010400

080088f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b089      	sub	sp, #36	; 0x24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80088fa:	2300      	movs	r3, #0
 80088fc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80088fe:	e0a6      	b.n	8008a4e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008900:	2201      	movs	r2, #1
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	fa02 f303 	lsl.w	r3, r2, r3
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	4013      	ands	r3, r2
 800890c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 8099 	beq.w	8008a48 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008916:	4a54      	ldr	r2, [pc, #336]	; (8008a68 <HAL_GPIO_DeInit+0x178>)
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	089b      	lsrs	r3, r3, #2
 800891c:	3302      	adds	r3, #2
 800891e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008922:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	220f      	movs	r2, #15
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4013      	ands	r3, r2
 8008936:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a4c      	ldr	r2, [pc, #304]	; (8008a6c <HAL_GPIO_DeInit+0x17c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d01f      	beq.n	8008980 <HAL_GPIO_DeInit+0x90>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a4b      	ldr	r2, [pc, #300]	; (8008a70 <HAL_GPIO_DeInit+0x180>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d019      	beq.n	800897c <HAL_GPIO_DeInit+0x8c>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a4a      	ldr	r2, [pc, #296]	; (8008a74 <HAL_GPIO_DeInit+0x184>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d013      	beq.n	8008978 <HAL_GPIO_DeInit+0x88>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a49      	ldr	r2, [pc, #292]	; (8008a78 <HAL_GPIO_DeInit+0x188>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00d      	beq.n	8008974 <HAL_GPIO_DeInit+0x84>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a48      	ldr	r2, [pc, #288]	; (8008a7c <HAL_GPIO_DeInit+0x18c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d007      	beq.n	8008970 <HAL_GPIO_DeInit+0x80>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a47      	ldr	r2, [pc, #284]	; (8008a80 <HAL_GPIO_DeInit+0x190>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d101      	bne.n	800896c <HAL_GPIO_DeInit+0x7c>
 8008968:	2305      	movs	r3, #5
 800896a:	e00a      	b.n	8008982 <HAL_GPIO_DeInit+0x92>
 800896c:	2306      	movs	r3, #6
 800896e:	e008      	b.n	8008982 <HAL_GPIO_DeInit+0x92>
 8008970:	2304      	movs	r3, #4
 8008972:	e006      	b.n	8008982 <HAL_GPIO_DeInit+0x92>
 8008974:	2303      	movs	r3, #3
 8008976:	e004      	b.n	8008982 <HAL_GPIO_DeInit+0x92>
 8008978:	2302      	movs	r3, #2
 800897a:	e002      	b.n	8008982 <HAL_GPIO_DeInit+0x92>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <HAL_GPIO_DeInit+0x92>
 8008980:	2300      	movs	r3, #0
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	f002 0203 	and.w	r2, r2, #3
 8008988:	0092      	lsls	r2, r2, #2
 800898a:	4093      	lsls	r3, r2
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	429a      	cmp	r2, r3
 8008990:	d132      	bne.n	80089f8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008992:	4b3c      	ldr	r3, [pc, #240]	; (8008a84 <HAL_GPIO_DeInit+0x194>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	43db      	mvns	r3, r3
 800899a:	493a      	ldr	r1, [pc, #232]	; (8008a84 <HAL_GPIO_DeInit+0x194>)
 800899c:	4013      	ands	r3, r2
 800899e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80089a0:	4b38      	ldr	r3, [pc, #224]	; (8008a84 <HAL_GPIO_DeInit+0x194>)
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	43db      	mvns	r3, r3
 80089a8:	4936      	ldr	r1, [pc, #216]	; (8008a84 <HAL_GPIO_DeInit+0x194>)
 80089aa:	4013      	ands	r3, r2
 80089ac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80089ae:	4b35      	ldr	r3, [pc, #212]	; (8008a84 <HAL_GPIO_DeInit+0x194>)
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	43db      	mvns	r3, r3
 80089b6:	4933      	ldr	r1, [pc, #204]	; (8008a84 <HAL_GPIO_DeInit+0x194>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80089bc:	4b31      	ldr	r3, [pc, #196]	; (8008a84 <HAL_GPIO_DeInit+0x194>)
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	43db      	mvns	r3, r3
 80089c4:	492f      	ldr	r1, [pc, #188]	; (8008a84 <HAL_GPIO_DeInit+0x194>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	220f      	movs	r2, #15
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80089da:	4a23      	ldr	r2, [pc, #140]	; (8008a68 <HAL_GPIO_DeInit+0x178>)
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	089b      	lsrs	r3, r3, #2
 80089e0:	3302      	adds	r3, #2
 80089e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	43da      	mvns	r2, r3
 80089ea:	481f      	ldr	r0, [pc, #124]	; (8008a68 <HAL_GPIO_DeInit+0x178>)
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	089b      	lsrs	r3, r3, #2
 80089f0:	400a      	ands	r2, r1
 80089f2:	3302      	adds	r3, #2
 80089f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	2bff      	cmp	r3, #255	; 0xff
 80089fc:	d801      	bhi.n	8008a02 <HAL_GPIO_DeInit+0x112>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	e001      	b.n	8008a06 <HAL_GPIO_DeInit+0x116>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3304      	adds	r3, #4
 8008a06:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2bff      	cmp	r3, #255	; 0xff
 8008a0c:	d802      	bhi.n	8008a14 <HAL_GPIO_DeInit+0x124>
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	e002      	b.n	8008a1a <HAL_GPIO_DeInit+0x12a>
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	3b08      	subs	r3, #8
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	210f      	movs	r1, #15
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	fa01 f303 	lsl.w	r3, r1, r3
 8008a28:	43db      	mvns	r3, r3
 8008a2a:	401a      	ands	r2, r3
 8008a2c:	2104      	movs	r1, #4
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	fa01 f303 	lsl.w	r3, r1, r3
 8008a34:	431a      	orrs	r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	43db      	mvns	r3, r3
 8008a42:	401a      	ands	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f47f af52 	bne.w	8008900 <HAL_GPIO_DeInit+0x10>
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	3724      	adds	r7, #36	; 0x24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	40010800 	.word	0x40010800
 8008a70:	40010c00 	.word	0x40010c00
 8008a74:	40011000 	.word	0x40011000
 8008a78:	40011400 	.word	0x40011400
 8008a7c:	40011800 	.word	0x40011800
 8008a80:	40011c00 	.word	0x40011c00
 8008a84:	40010400 	.word	0x40010400

08008a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	887b      	ldrh	r3, [r7, #2]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	73fb      	strb	r3, [r7, #15]
 8008aa4:	e001      	b.n	8008aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr

08008ab6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	807b      	strh	r3, [r7, #2]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ac6:	787b      	ldrb	r3, [r7, #1]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008acc:	887a      	ldrh	r2, [r7, #2]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008ad2:	e003      	b.n	8008adc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008ad4:	887b      	ldrh	r3, [r7, #2]
 8008ad6:	041a      	lsls	r2, r3, #16
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	611a      	str	r2, [r3, #16]
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr

08008ae6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008af8:	887a      	ldrh	r2, [r7, #2]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4013      	ands	r3, r2
 8008afe:	041a      	lsls	r2, r3, #16
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	43d9      	mvns	r1, r3
 8008b04:	887b      	ldrh	r3, [r7, #2]
 8008b06:	400b      	ands	r3, r1
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	611a      	str	r2, [r3, #16]
}
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr

08008b18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e12b      	b.n	8008d82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fe fff8 	bl	8007b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2224      	movs	r2, #36	; 0x24
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0201 	bic.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b7c:	f001 fdb8 	bl	800a6f0 <HAL_RCC_GetPCLK1Freq>
 8008b80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	4a81      	ldr	r2, [pc, #516]	; (8008d8c <HAL_I2C_Init+0x274>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d807      	bhi.n	8008b9c <HAL_I2C_Init+0x84>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a80      	ldr	r2, [pc, #512]	; (8008d90 <HAL_I2C_Init+0x278>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	bf94      	ite	ls
 8008b94:	2301      	movls	r3, #1
 8008b96:	2300      	movhi	r3, #0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	e006      	b.n	8008baa <HAL_I2C_Init+0x92>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4a7d      	ldr	r2, [pc, #500]	; (8008d94 <HAL_I2C_Init+0x27c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	bf94      	ite	ls
 8008ba4:	2301      	movls	r3, #1
 8008ba6:	2300      	movhi	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e0e7      	b.n	8008d82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4a78      	ldr	r2, [pc, #480]	; (8008d98 <HAL_I2C_Init+0x280>)
 8008bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bba:	0c9b      	lsrs	r3, r3, #18
 8008bbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a6a      	ldr	r2, [pc, #424]	; (8008d8c <HAL_I2C_Init+0x274>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d802      	bhi.n	8008bec <HAL_I2C_Init+0xd4>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3301      	adds	r3, #1
 8008bea:	e009      	b.n	8008c00 <HAL_I2C_Init+0xe8>
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008bf2:	fb02 f303 	mul.w	r3, r2, r3
 8008bf6:	4a69      	ldr	r2, [pc, #420]	; (8008d9c <HAL_I2C_Init+0x284>)
 8008bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfc:	099b      	lsrs	r3, r3, #6
 8008bfe:	3301      	adds	r3, #1
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	6812      	ldr	r2, [r2, #0]
 8008c04:	430b      	orrs	r3, r1
 8008c06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008c12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	495c      	ldr	r1, [pc, #368]	; (8008d8c <HAL_I2C_Init+0x274>)
 8008c1c:	428b      	cmp	r3, r1
 8008c1e:	d819      	bhi.n	8008c54 <HAL_I2C_Init+0x13c>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	1e59      	subs	r1, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c2e:	1c59      	adds	r1, r3, #1
 8008c30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c34:	400b      	ands	r3, r1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <HAL_I2C_Init+0x138>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	1e59      	subs	r1, r3, #1
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c48:	3301      	adds	r3, #1
 8008c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c4e:	e051      	b.n	8008cf4 <HAL_I2C_Init+0x1dc>
 8008c50:	2304      	movs	r3, #4
 8008c52:	e04f      	b.n	8008cf4 <HAL_I2C_Init+0x1dc>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d111      	bne.n	8008c80 <HAL_I2C_Init+0x168>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	1e58      	subs	r0, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6859      	ldr	r1, [r3, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	440b      	add	r3, r1
 8008c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c6e:	3301      	adds	r3, #1
 8008c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bf0c      	ite	eq
 8008c78:	2301      	moveq	r3, #1
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	e012      	b.n	8008ca6 <HAL_I2C_Init+0x18e>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	1e58      	subs	r0, r3, #1
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	0099      	lsls	r1, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c96:	3301      	adds	r3, #1
 8008c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2301      	moveq	r3, #1
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <HAL_I2C_Init+0x196>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e022      	b.n	8008cf4 <HAL_I2C_Init+0x1dc>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10e      	bne.n	8008cd4 <HAL_I2C_Init+0x1bc>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	1e58      	subs	r0, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6859      	ldr	r1, [r3, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	440b      	add	r3, r1
 8008cc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cc8:	3301      	adds	r3, #1
 8008cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd2:	e00f      	b.n	8008cf4 <HAL_I2C_Init+0x1dc>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	1e58      	subs	r0, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6859      	ldr	r1, [r3, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	0099      	lsls	r1, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cea:	3301      	adds	r3, #1
 8008cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	6809      	ldr	r1, [r1, #0]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	69da      	ldr	r2, [r3, #28]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6911      	ldr	r1, [r2, #16]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	68d2      	ldr	r2, [r2, #12]
 8008d2e:	4311      	orrs	r1, r2
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6812      	ldr	r2, [r2, #0]
 8008d34:	430b      	orrs	r3, r1
 8008d36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	695a      	ldr	r2, [r3, #20]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	000186a0 	.word	0x000186a0
 8008d90:	001e847f 	.word	0x001e847f
 8008d94:	003d08ff 	.word	0x003d08ff
 8008d98:	431bde83 	.word	0x431bde83
 8008d9c:	10624dd3 	.word	0x10624dd3

08008da0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e021      	b.n	8008df6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2224      	movs	r2, #36	; 0x24
 8008db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0201 	bic.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7fe fef0 	bl	8007bb0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	607a      	str	r2, [r7, #4]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	817b      	strh	r3, [r7, #10]
 8008e10:	4613      	mov	r3, r2
 8008e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e14:	f7ff f85e 	bl	8007ed4 <HAL_GetTick>
 8008e18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	f040 80e0 	bne.w	8008fe8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	2319      	movs	r3, #25
 8008e2e:	2201      	movs	r2, #1
 8008e30:	4970      	ldr	r1, [pc, #448]	; (8008ff4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 fe5c 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e0d3      	b.n	8008fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d101      	bne.n	8008e50 <HAL_I2C_Master_Transmit+0x50>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e0cc      	b.n	8008fea <HAL_I2C_Master_Transmit+0x1ea>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d007      	beq.n	8008e76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f042 0201 	orr.w	r2, r2, #1
 8008e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2221      	movs	r2, #33	; 0x21
 8008e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2210      	movs	r2, #16
 8008e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	893a      	ldrh	r2, [r7, #8]
 8008ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4a50      	ldr	r2, [pc, #320]	; (8008ff8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008eb8:	8979      	ldrh	r1, [r7, #10]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	6a3a      	ldr	r2, [r7, #32]
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fc16 	bl	80096f0 <I2C_MasterRequestWrite>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e08d      	b.n	8008fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ece:	2300      	movs	r3, #0
 8008ed0:	613b      	str	r3, [r7, #16]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	613b      	str	r3, [r7, #16]
 8008ee2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008ee4:	e066      	b.n	8008fb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	6a39      	ldr	r1, [r7, #32]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 ff1a 	bl	8009d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00d      	beq.n	8008f12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d107      	bne.n	8008f0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e06b      	b.n	8008fea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	d11b      	bne.n	8008f88 <HAL_I2C_Master_Transmit+0x188>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d017      	beq.n	8008f88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	781a      	ldrb	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f80:	3b01      	subs	r3, #1
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	6a39      	ldr	r1, [r7, #32]
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 ff11 	bl	8009db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00d      	beq.n	8008fb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d107      	bne.n	8008fb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e01a      	b.n	8008fea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d194      	bne.n	8008ee6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e000      	b.n	8008fea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008fe8:	2302      	movs	r3, #2
  }
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	00100002 	.word	0x00100002
 8008ff8:	ffff0000 	.word	0xffff0000

08008ffc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af02      	add	r7, sp, #8
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	4608      	mov	r0, r1
 8009006:	4611      	mov	r1, r2
 8009008:	461a      	mov	r2, r3
 800900a:	4603      	mov	r3, r0
 800900c:	817b      	strh	r3, [r7, #10]
 800900e:	460b      	mov	r3, r1
 8009010:	813b      	strh	r3, [r7, #8]
 8009012:	4613      	mov	r3, r2
 8009014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009016:	f7fe ff5d 	bl	8007ed4 <HAL_GetTick>
 800901a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b20      	cmp	r3, #32
 8009026:	f040 80d9 	bne.w	80091dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	2319      	movs	r3, #25
 8009030:	2201      	movs	r2, #1
 8009032:	496d      	ldr	r1, [pc, #436]	; (80091e8 <HAL_I2C_Mem_Write+0x1ec>)
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 fd5b 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009040:	2302      	movs	r3, #2
 8009042:	e0cc      	b.n	80091de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800904a:	2b01      	cmp	r3, #1
 800904c:	d101      	bne.n	8009052 <HAL_I2C_Mem_Write+0x56>
 800904e:	2302      	movs	r3, #2
 8009050:	e0c5      	b.n	80091de <HAL_I2C_Mem_Write+0x1e2>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b01      	cmp	r3, #1
 8009066:	d007      	beq.n	8009078 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0201 	orr.w	r2, r2, #1
 8009076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2221      	movs	r2, #33	; 0x21
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2240      	movs	r2, #64	; 0x40
 8009094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6a3a      	ldr	r2, [r7, #32]
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4a4d      	ldr	r2, [pc, #308]	; (80091ec <HAL_I2C_Mem_Write+0x1f0>)
 80090b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090ba:	88f8      	ldrh	r0, [r7, #6]
 80090bc:	893a      	ldrh	r2, [r7, #8]
 80090be:	8979      	ldrh	r1, [r7, #10]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4603      	mov	r3, r0
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 fb92 	bl	80097f4 <I2C_RequestMemoryWrite>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d052      	beq.n	800917c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e081      	b.n	80091de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 fe20 	bl	8009d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00d      	beq.n	8009106 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d107      	bne.n	8009102 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e06b      	b.n	80091de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009120:	3b01      	subs	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29a      	uxth	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b04      	cmp	r3, #4
 8009142:	d11b      	bne.n	800917c <HAL_I2C_Mem_Write+0x180>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009148:	2b00      	cmp	r3, #0
 800914a:	d017      	beq.n	800917c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1aa      	bne.n	80090da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 fe13 	bl	8009db4 <I2C_WaitOnBTFFlagUntilTimeout>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00d      	beq.n	80091b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009198:	2b04      	cmp	r3, #4
 800919a:	d107      	bne.n	80091ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e016      	b.n	80091de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	e000      	b.n	80091de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80091dc:	2302      	movs	r3, #2
  }
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	00100002 	.word	0x00100002
 80091ec:	ffff0000 	.word	0xffff0000

080091f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08c      	sub	sp, #48	; 0x30
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	4608      	mov	r0, r1
 80091fa:	4611      	mov	r1, r2
 80091fc:	461a      	mov	r2, r3
 80091fe:	4603      	mov	r3, r0
 8009200:	817b      	strh	r3, [r7, #10]
 8009202:	460b      	mov	r3, r1
 8009204:	813b      	strh	r3, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800920e:	f7fe fe61 	bl	8007ed4 <HAL_GetTick>
 8009212:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b20      	cmp	r3, #32
 800921e:	f040 8244 	bne.w	80096aa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	2319      	movs	r3, #25
 8009228:	2201      	movs	r2, #1
 800922a:	4982      	ldr	r1, [pc, #520]	; (8009434 <HAL_I2C_Mem_Read+0x244>)
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 fc5f 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009238:	2302      	movs	r3, #2
 800923a:	e237      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009242:	2b01      	cmp	r3, #1
 8009244:	d101      	bne.n	800924a <HAL_I2C_Mem_Read+0x5a>
 8009246:	2302      	movs	r3, #2
 8009248:	e230      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b01      	cmp	r3, #1
 800925e:	d007      	beq.n	8009270 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0201 	orr.w	r2, r2, #1
 800926e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800927e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2222      	movs	r2, #34	; 0x22
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2240      	movs	r2, #64	; 0x40
 800928c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80092a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a62      	ldr	r2, [pc, #392]	; (8009438 <HAL_I2C_Mem_Read+0x248>)
 80092b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092b2:	88f8      	ldrh	r0, [r7, #6]
 80092b4:	893a      	ldrh	r2, [r7, #8]
 80092b6:	8979      	ldrh	r1, [r7, #10]
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	4603      	mov	r3, r0
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 fb2c 	bl	8009920 <I2C_RequestMemoryRead>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e1ec      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d113      	bne.n	8009302 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e1c0      	b.n	8009684 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009306:	2b01      	cmp	r3, #1
 8009308:	d11e      	bne.n	8009348 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009318:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800931a:	b672      	cpsid	i
}
 800931c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800931e:	2300      	movs	r3, #0
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	61bb      	str	r3, [r7, #24]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009342:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009344:	b662      	cpsie	i
}
 8009346:	e035      	b.n	80093b4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934c:	2b02      	cmp	r3, #2
 800934e:	d11e      	bne.n	800938e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800935e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009360:	b672      	cpsid	i
}
 8009362:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009388:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800938a:	b662      	cpsie	i
}
 800938c:	e012      	b.n	80093b4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800939c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800939e:	2300      	movs	r3, #0
 80093a0:	613b      	str	r3, [r7, #16]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	613b      	str	r3, [r7, #16]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80093b4:	e166      	b.n	8009684 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	f200 811f 	bhi.w	80095fe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d123      	bne.n	8009410 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 fd39 	bl	8009e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e167      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691a      	ldr	r2, [r3, #16]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	b2d2      	uxtb	r2, r2
 80093e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f8:	3b01      	subs	r3, #1
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009404:	b29b      	uxth	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	b29a      	uxth	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800940e:	e139      	b.n	8009684 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009414:	2b02      	cmp	r3, #2
 8009416:	d152      	bne.n	80094be <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	2200      	movs	r2, #0
 8009420:	4906      	ldr	r1, [pc, #24]	; (800943c <HAL_I2C_Mem_Read+0x24c>)
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fb64 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e13c      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
 8009432:	bf00      	nop
 8009434:	00100002 	.word	0x00100002
 8009438:	ffff0000 	.word	0xffff0000
 800943c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009440:	b672      	cpsid	i
}
 8009442:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	691a      	ldr	r2, [r3, #16]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947c:	b29b      	uxth	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009486:	b662      	cpsie	i
}
 8009488:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	691a      	ldr	r2, [r3, #16]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	b2d2      	uxtb	r2, r2
 8009496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094bc:	e0e2      	b.n	8009684 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	2200      	movs	r2, #0
 80094c6:	497b      	ldr	r1, [pc, #492]	; (80096b4 <HAL_I2C_Mem_Read+0x4c4>)
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fb11 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e0e9      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80094e8:	b672      	cpsid	i
}
 80094ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	691a      	ldr	r2, [r3, #16]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009514:	b29b      	uxth	r3, r3
 8009516:	3b01      	subs	r3, #1
 8009518:	b29a      	uxth	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800951e:	4b66      	ldr	r3, [pc, #408]	; (80096b8 <HAL_I2C_Mem_Read+0x4c8>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	08db      	lsrs	r3, r3, #3
 8009524:	4a65      	ldr	r2, [pc, #404]	; (80096bc <HAL_I2C_Mem_Read+0x4cc>)
 8009526:	fba2 2303 	umull	r2, r3, r2, r3
 800952a:	0a1a      	lsrs	r2, r3, #8
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	00da      	lsls	r2, r3, #3
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	3b01      	subs	r3, #1
 800953c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d118      	bne.n	8009576 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2220      	movs	r2, #32
 800954e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	f043 0220 	orr.w	r2, r3, #32
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009566:	b662      	cpsie	i
}
 8009568:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e09a      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	695b      	ldr	r3, [r3, #20]
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b04      	cmp	r3, #4
 8009582:	d1d9      	bne.n	8009538 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691a      	ldr	r2, [r3, #16]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b0:	3b01      	subs	r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3b01      	subs	r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80095c6:	b662      	cpsie	i
}
 80095c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691a      	ldr	r2, [r3, #16]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095fc:	e042      	b.n	8009684 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 fc1e 	bl	8009e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e04c      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691a      	ldr	r2, [r3, #16]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	b2d2      	uxtb	r2, r2
 800961e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962e:	3b01      	subs	r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963a:	b29b      	uxth	r3, r3
 800963c:	3b01      	subs	r3, #1
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	f003 0304 	and.w	r3, r3, #4
 800964e:	2b04      	cmp	r3, #4
 8009650:	d118      	bne.n	8009684 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966e:	3b01      	subs	r3, #1
 8009670:	b29a      	uxth	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967a:	b29b      	uxth	r3, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009688:	2b00      	cmp	r3, #0
 800968a:	f47f ae94 	bne.w	80093b6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2220      	movs	r2, #32
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	e000      	b.n	80096ac <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80096aa:	2302      	movs	r3, #2
  }
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3728      	adds	r7, #40	; 0x28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	00010004 	.word	0x00010004
 80096b8:	2000094c 	.word	0x2000094c
 80096bc:	14f8b589 	.word	0x14f8b589

080096c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ce:	b2db      	uxtb	r3, r3
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr

080096da <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bc80      	pop	{r7}
 80096ee:	4770      	bx	lr

080096f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	460b      	mov	r3, r1
 80096fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b08      	cmp	r3, #8
 800970a:	d006      	beq.n	800971a <I2C_MasterRequestWrite+0x2a>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d003      	beq.n	800971a <I2C_MasterRequestWrite+0x2a>
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009718:	d108      	bne.n	800972c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e00b      	b.n	8009744 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009730:	2b12      	cmp	r3, #18
 8009732:	d107      	bne.n	8009744 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 f9cd 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00d      	beq.n	8009778 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800976a:	d103      	bne.n	8009774 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e035      	b.n	80097e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009780:	d108      	bne.n	8009794 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009782:	897b      	ldrh	r3, [r7, #10]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	461a      	mov	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009790:	611a      	str	r2, [r3, #16]
 8009792:	e01b      	b.n	80097cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009794:	897b      	ldrh	r3, [r7, #10]
 8009796:	11db      	asrs	r3, r3, #7
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0306 	and.w	r3, r3, #6
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f063 030f 	orn	r3, r3, #15
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	490e      	ldr	r1, [pc, #56]	; (80097ec <I2C_MasterRequestWrite+0xfc>)
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fa16 	bl	8009be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e010      	b.n	80097e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80097c2:	897b      	ldrh	r3, [r7, #10]
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	4907      	ldr	r1, [pc, #28]	; (80097f0 <I2C_MasterRequestWrite+0x100>)
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fa06 	bl	8009be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	00010008 	.word	0x00010008
 80097f0:	00010002 	.word	0x00010002

080097f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	4608      	mov	r0, r1
 80097fe:	4611      	mov	r1, r2
 8009800:	461a      	mov	r2, r3
 8009802:	4603      	mov	r3, r0
 8009804:	817b      	strh	r3, [r7, #10]
 8009806:	460b      	mov	r3, r1
 8009808:	813b      	strh	r3, [r7, #8]
 800980a:	4613      	mov	r3, r2
 800980c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800981c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	2200      	movs	r2, #0
 8009826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f960 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00d      	beq.n	8009852 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009844:	d103      	bne.n	800984e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800984c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e05f      	b.n	8009912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009852:	897b      	ldrh	r3, [r7, #10]
 8009854:	b2db      	uxtb	r3, r3
 8009856:	461a      	mov	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	6a3a      	ldr	r2, [r7, #32]
 8009866:	492d      	ldr	r1, [pc, #180]	; (800991c <I2C_RequestMemoryWrite+0x128>)
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f9bb 	bl	8009be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e04c      	b.n	8009912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800988e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009890:	6a39      	ldr	r1, [r7, #32]
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fa46 	bl	8009d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00d      	beq.n	80098ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	d107      	bne.n	80098b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e02b      	b.n	8009912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d105      	bne.n	80098cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80098c0:	893b      	ldrh	r3, [r7, #8]
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	611a      	str	r2, [r3, #16]
 80098ca:	e021      	b.n	8009910 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80098cc:	893b      	ldrh	r3, [r7, #8]
 80098ce:	0a1b      	lsrs	r3, r3, #8
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098dc:	6a39      	ldr	r1, [r7, #32]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 fa20 	bl	8009d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00d      	beq.n	8009906 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d107      	bne.n	8009902 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e005      	b.n	8009912 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009906:	893b      	ldrh	r3, [r7, #8]
 8009908:	b2da      	uxtb	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	00010002 	.word	0x00010002

08009920 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b088      	sub	sp, #32
 8009924:	af02      	add	r7, sp, #8
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	4608      	mov	r0, r1
 800992a:	4611      	mov	r1, r2
 800992c:	461a      	mov	r2, r3
 800992e:	4603      	mov	r3, r0
 8009930:	817b      	strh	r3, [r7, #10]
 8009932:	460b      	mov	r3, r1
 8009934:	813b      	strh	r3, [r7, #8]
 8009936:	4613      	mov	r3, r2
 8009938:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009948:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	2200      	movs	r2, #0
 8009962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 f8c2 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00d      	beq.n	800998e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009980:	d103      	bne.n	800998a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009988:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e0aa      	b.n	8009ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800998e:	897b      	ldrh	r3, [r7, #10]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	461a      	mov	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800999c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	6a3a      	ldr	r2, [r7, #32]
 80099a2:	4952      	ldr	r1, [pc, #328]	; (8009aec <I2C_RequestMemoryRead+0x1cc>)
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f91d 	bl	8009be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e097      	b.n	8009ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099cc:	6a39      	ldr	r1, [r7, #32]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 f9a8 	bl	8009d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00d      	beq.n	80099f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d107      	bne.n	80099f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e076      	b.n	8009ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d105      	bne.n	8009a08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099fc:	893b      	ldrh	r3, [r7, #8]
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	611a      	str	r2, [r3, #16]
 8009a06:	e021      	b.n	8009a4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a08:	893b      	ldrh	r3, [r7, #8]
 8009a0a:	0a1b      	lsrs	r3, r3, #8
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a18:	6a39      	ldr	r1, [r7, #32]
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 f982 	bl	8009d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00d      	beq.n	8009a42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d107      	bne.n	8009a3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e050      	b.n	8009ae4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a42:	893b      	ldrh	r3, [r7, #8]
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4e:	6a39      	ldr	r1, [r7, #32]
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 f967 	bl	8009d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00d      	beq.n	8009a78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d107      	bne.n	8009a74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e035      	b.n	8009ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f82b 	bl	8009af0 <I2C_WaitOnFlagUntilTimeout>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00d      	beq.n	8009abc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aae:	d103      	bne.n	8009ab8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e013      	b.n	8009ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009abc:	897b      	ldrh	r3, [r7, #10]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	f043 0301 	orr.w	r3, r3, #1
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	6a3a      	ldr	r2, [r7, #32]
 8009ad0:	4906      	ldr	r1, [pc, #24]	; (8009aec <I2C_RequestMemoryRead+0x1cc>)
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 f886 	bl	8009be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e000      	b.n	8009ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	00010002 	.word	0x00010002

08009af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	4613      	mov	r3, r2
 8009afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b00:	e048      	b.n	8009b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b08:	d044      	beq.n	8009b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b0a:	f7fe f9e3 	bl	8007ed4 <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d302      	bcc.n	8009b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d139      	bne.n	8009b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	0c1b      	lsrs	r3, r3, #16
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d10d      	bne.n	8009b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	43da      	mvns	r2, r3
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	4013      	ands	r3, r2
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2301      	moveq	r3, #1
 8009b3e:	2300      	movne	r3, #0
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	461a      	mov	r2, r3
 8009b44:	e00c      	b.n	8009b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	43da      	mvns	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	4013      	ands	r3, r2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bf0c      	ite	eq
 8009b58:	2301      	moveq	r3, #1
 8009b5a:	2300      	movne	r3, #0
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	461a      	mov	r2, r3
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d116      	bne.n	8009b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b80:	f043 0220 	orr.w	r2, r3, #32
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e023      	b.n	8009bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d10d      	bne.n	8009bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	43da      	mvns	r2, r3
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bf0c      	ite	eq
 8009bb0:	2301      	moveq	r3, #1
 8009bb2:	2300      	movne	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	e00c      	b.n	8009bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	43da      	mvns	r2, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	bf0c      	ite	eq
 8009bcc:	2301      	moveq	r3, #1
 8009bce:	2300      	movne	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	79fb      	ldrb	r3, [r7, #7]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d093      	beq.n	8009b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009bf2:	e071      	b.n	8009cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c02:	d123      	bne.n	8009c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	f043 0204 	orr.w	r2, r3, #4
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e067      	b.n	8009d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d041      	beq.n	8009cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c54:	f7fe f93e 	bl	8007ed4 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d302      	bcc.n	8009c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d136      	bne.n	8009cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	0c1b      	lsrs	r3, r3, #16
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d10c      	bne.n	8009c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	43da      	mvns	r2, r3
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bf14      	ite	ne
 8009c86:	2301      	movne	r3, #1
 8009c88:	2300      	moveq	r3, #0
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	e00b      	b.n	8009ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	43da      	mvns	r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	4013      	ands	r3, r2
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	bf14      	ite	ne
 8009ca0:	2301      	movne	r3, #1
 8009ca2:	2300      	moveq	r3, #0
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d016      	beq.n	8009cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc4:	f043 0220 	orr.w	r2, r3, #32
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e021      	b.n	8009d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	0c1b      	lsrs	r3, r3, #16
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d10c      	bne.n	8009cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	43da      	mvns	r2, r3
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4013      	ands	r3, r2
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bf14      	ite	ne
 8009cf4:	2301      	movne	r3, #1
 8009cf6:	2300      	moveq	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	e00b      	b.n	8009d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	43da      	mvns	r2, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4013      	ands	r3, r2
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	bf14      	ite	ne
 8009d0e:	2301      	movne	r3, #1
 8009d10:	2300      	moveq	r3, #0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f47f af6d 	bne.w	8009bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d30:	e034      	b.n	8009d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 f8e3 	bl	8009efe <I2C_IsAcknowledgeFailed>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e034      	b.n	8009dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d028      	beq.n	8009d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4a:	f7fe f8c3 	bl	8007ed4 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d11d      	bne.n	8009d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6a:	2b80      	cmp	r3, #128	; 0x80
 8009d6c:	d016      	beq.n	8009d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	f043 0220 	orr.w	r2, r3, #32
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e007      	b.n	8009dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da6:	2b80      	cmp	r3, #128	; 0x80
 8009da8:	d1c3      	bne.n	8009d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009dc0:	e034      	b.n	8009e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 f89b 	bl	8009efe <I2C_IsAcknowledgeFailed>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e034      	b.n	8009e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	d028      	beq.n	8009e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dda:	f7fe f87b 	bl	8007ed4 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d302      	bcc.n	8009df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d11d      	bne.n	8009e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	f003 0304 	and.w	r3, r3, #4
 8009dfa:	2b04      	cmp	r3, #4
 8009dfc:	d016      	beq.n	8009e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2220      	movs	r2, #32
 8009e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e18:	f043 0220 	orr.w	r2, r3, #32
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e007      	b.n	8009e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	f003 0304 	and.w	r3, r3, #4
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d1c3      	bne.n	8009dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e50:	e049      	b.n	8009ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b10      	cmp	r3, #16
 8009e5e:	d119      	bne.n	8009e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f06f 0210 	mvn.w	r2, #16
 8009e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e030      	b.n	8009ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e94:	f7fe f81e 	bl	8007ed4 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d302      	bcc.n	8009eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d11d      	bne.n	8009ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb4:	2b40      	cmp	r3, #64	; 0x40
 8009eb6:	d016      	beq.n	8009ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	f043 0220 	orr.w	r2, r3, #32
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e007      	b.n	8009ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef0:	2b40      	cmp	r3, #64	; 0x40
 8009ef2:	d1ae      	bne.n	8009e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f14:	d11b      	bne.n	8009f4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	f043 0204 	orr.w	r2, r3, #4
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bc80      	pop	{r7}
 8009f58:	4770      	bx	lr
	...

08009f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e272      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 8087 	beq.w	800a08a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f7c:	4b92      	ldr	r3, [pc, #584]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f003 030c 	and.w	r3, r3, #12
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d00c      	beq.n	8009fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009f88:	4b8f      	ldr	r3, [pc, #572]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f003 030c 	and.w	r3, r3, #12
 8009f90:	2b08      	cmp	r3, #8
 8009f92:	d112      	bne.n	8009fba <HAL_RCC_OscConfig+0x5e>
 8009f94:	4b8c      	ldr	r3, [pc, #560]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa0:	d10b      	bne.n	8009fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fa2:	4b89      	ldr	r3, [pc, #548]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d06c      	beq.n	800a088 <HAL_RCC_OscConfig+0x12c>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d168      	bne.n	800a088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e24c      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc2:	d106      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x76>
 8009fc4:	4b80      	ldr	r3, [pc, #512]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a7f      	ldr	r2, [pc, #508]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	e02e      	b.n	800a030 <HAL_RCC_OscConfig+0xd4>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10c      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x98>
 8009fda:	4b7b      	ldr	r3, [pc, #492]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a7a      	ldr	r2, [pc, #488]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	4b78      	ldr	r3, [pc, #480]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a77      	ldr	r2, [pc, #476]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 8009fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	e01d      	b.n	800a030 <HAL_RCC_OscConfig+0xd4>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ffc:	d10c      	bne.n	800a018 <HAL_RCC_OscConfig+0xbc>
 8009ffe:	4b72      	ldr	r3, [pc, #456]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a71      	ldr	r2, [pc, #452]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	4b6f      	ldr	r3, [pc, #444]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a6e      	ldr	r2, [pc, #440]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	e00b      	b.n	800a030 <HAL_RCC_OscConfig+0xd4>
 800a018:	4b6b      	ldr	r3, [pc, #428]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a6a      	ldr	r2, [pc, #424]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a01e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	4b68      	ldr	r3, [pc, #416]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a67      	ldr	r2, [pc, #412]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a02a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a02e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d013      	beq.n	800a060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a038:	f7fd ff4c 	bl	8007ed4 <HAL_GetTick>
 800a03c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a03e:	e008      	b.n	800a052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a040:	f7fd ff48 	bl	8007ed4 <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	2b64      	cmp	r3, #100	; 0x64
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e200      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a052:	4b5d      	ldr	r3, [pc, #372]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0f0      	beq.n	800a040 <HAL_RCC_OscConfig+0xe4>
 800a05e:	e014      	b.n	800a08a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a060:	f7fd ff38 	bl	8007ed4 <HAL_GetTick>
 800a064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a066:	e008      	b.n	800a07a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a068:	f7fd ff34 	bl	8007ed4 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b64      	cmp	r3, #100	; 0x64
 800a074:	d901      	bls.n	800a07a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e1ec      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a07a:	4b53      	ldr	r3, [pc, #332]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1f0      	bne.n	800a068 <HAL_RCC_OscConfig+0x10c>
 800a086:	e000      	b.n	800a08a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0302 	and.w	r3, r3, #2
 800a092:	2b00      	cmp	r3, #0
 800a094:	d063      	beq.n	800a15e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a096:	4b4c      	ldr	r3, [pc, #304]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f003 030c 	and.w	r3, r3, #12
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00b      	beq.n	800a0ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a0a2:	4b49      	ldr	r3, [pc, #292]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f003 030c 	and.w	r3, r3, #12
 800a0aa:	2b08      	cmp	r3, #8
 800a0ac:	d11c      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x18c>
 800a0ae:	4b46      	ldr	r3, [pc, #280]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d116      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0ba:	4b43      	ldr	r3, [pc, #268]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d005      	beq.n	800a0d2 <HAL_RCC_OscConfig+0x176>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d001      	beq.n	800a0d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e1c0      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0d2:	4b3d      	ldr	r3, [pc, #244]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	4939      	ldr	r1, [pc, #228]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0e6:	e03a      	b.n	800a15e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d020      	beq.n	800a132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0f0:	4b36      	ldr	r3, [pc, #216]	; (800a1cc <HAL_RCC_OscConfig+0x270>)
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0f6:	f7fd feed 	bl	8007ed4 <HAL_GetTick>
 800a0fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0fc:	e008      	b.n	800a110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0fe:	f7fd fee9 	bl	8007ed4 <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d901      	bls.n	800a110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e1a1      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a110:	4b2d      	ldr	r3, [pc, #180]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0302 	and.w	r3, r3, #2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0f0      	beq.n	800a0fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a11c:	4b2a      	ldr	r3, [pc, #168]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	00db      	lsls	r3, r3, #3
 800a12a:	4927      	ldr	r1, [pc, #156]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	600b      	str	r3, [r1, #0]
 800a130:	e015      	b.n	800a15e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a132:	4b26      	ldr	r3, [pc, #152]	; (800a1cc <HAL_RCC_OscConfig+0x270>)
 800a134:	2200      	movs	r2, #0
 800a136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a138:	f7fd fecc 	bl	8007ed4 <HAL_GetTick>
 800a13c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a13e:	e008      	b.n	800a152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a140:	f7fd fec8 	bl	8007ed4 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d901      	bls.n	800a152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e180      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a152:	4b1d      	ldr	r3, [pc, #116]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1f0      	bne.n	800a140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0308 	and.w	r3, r3, #8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d03a      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d019      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a172:	4b17      	ldr	r3, [pc, #92]	; (800a1d0 <HAL_RCC_OscConfig+0x274>)
 800a174:	2201      	movs	r2, #1
 800a176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a178:	f7fd feac 	bl	8007ed4 <HAL_GetTick>
 800a17c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a17e:	e008      	b.n	800a192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a180:	f7fd fea8 	bl	8007ed4 <HAL_GetTick>
 800a184:	4602      	mov	r2, r0
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d901      	bls.n	800a192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e160      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a192:	4b0d      	ldr	r3, [pc, #52]	; (800a1c8 <HAL_RCC_OscConfig+0x26c>)
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	f003 0302 	and.w	r3, r3, #2
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0f0      	beq.n	800a180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a19e:	2001      	movs	r0, #1
 800a1a0:	f000 face 	bl	800a740 <RCC_Delay>
 800a1a4:	e01c      	b.n	800a1e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1a6:	4b0a      	ldr	r3, [pc, #40]	; (800a1d0 <HAL_RCC_OscConfig+0x274>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1ac:	f7fd fe92 	bl	8007ed4 <HAL_GetTick>
 800a1b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1b2:	e00f      	b.n	800a1d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1b4:	f7fd fe8e 	bl	8007ed4 <HAL_GetTick>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d908      	bls.n	800a1d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e146      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
 800a1c6:	bf00      	nop
 800a1c8:	40021000 	.word	0x40021000
 800a1cc:	42420000 	.word	0x42420000
 800a1d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1d4:	4b92      	ldr	r3, [pc, #584]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e9      	bne.n	800a1b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 80a6 	beq.w	800a33a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1f2:	4b8b      	ldr	r3, [pc, #556]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10d      	bne.n	800a21a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1fe:	4b88      	ldr	r3, [pc, #544]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	4a87      	ldr	r2, [pc, #540]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a208:	61d3      	str	r3, [r2, #28]
 800a20a:	4b85      	ldr	r3, [pc, #532]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a212:	60bb      	str	r3, [r7, #8]
 800a214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a216:	2301      	movs	r3, #1
 800a218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a21a:	4b82      	ldr	r3, [pc, #520]	; (800a424 <HAL_RCC_OscConfig+0x4c8>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a222:	2b00      	cmp	r3, #0
 800a224:	d118      	bne.n	800a258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a226:	4b7f      	ldr	r3, [pc, #508]	; (800a424 <HAL_RCC_OscConfig+0x4c8>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a7e      	ldr	r2, [pc, #504]	; (800a424 <HAL_RCC_OscConfig+0x4c8>)
 800a22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a232:	f7fd fe4f 	bl	8007ed4 <HAL_GetTick>
 800a236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a238:	e008      	b.n	800a24c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a23a:	f7fd fe4b 	bl	8007ed4 <HAL_GetTick>
 800a23e:	4602      	mov	r2, r0
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	2b64      	cmp	r3, #100	; 0x64
 800a246:	d901      	bls.n	800a24c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e103      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a24c:	4b75      	ldr	r3, [pc, #468]	; (800a424 <HAL_RCC_OscConfig+0x4c8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a254:	2b00      	cmp	r3, #0
 800a256:	d0f0      	beq.n	800a23a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d106      	bne.n	800a26e <HAL_RCC_OscConfig+0x312>
 800a260:	4b6f      	ldr	r3, [pc, #444]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	4a6e      	ldr	r2, [pc, #440]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a266:	f043 0301 	orr.w	r3, r3, #1
 800a26a:	6213      	str	r3, [r2, #32]
 800a26c:	e02d      	b.n	800a2ca <HAL_RCC_OscConfig+0x36e>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10c      	bne.n	800a290 <HAL_RCC_OscConfig+0x334>
 800a276:	4b6a      	ldr	r3, [pc, #424]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	4a69      	ldr	r2, [pc, #420]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a27c:	f023 0301 	bic.w	r3, r3, #1
 800a280:	6213      	str	r3, [r2, #32]
 800a282:	4b67      	ldr	r3, [pc, #412]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	4a66      	ldr	r2, [pc, #408]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a288:	f023 0304 	bic.w	r3, r3, #4
 800a28c:	6213      	str	r3, [r2, #32]
 800a28e:	e01c      	b.n	800a2ca <HAL_RCC_OscConfig+0x36e>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	2b05      	cmp	r3, #5
 800a296:	d10c      	bne.n	800a2b2 <HAL_RCC_OscConfig+0x356>
 800a298:	4b61      	ldr	r3, [pc, #388]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	4a60      	ldr	r2, [pc, #384]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a29e:	f043 0304 	orr.w	r3, r3, #4
 800a2a2:	6213      	str	r3, [r2, #32]
 800a2a4:	4b5e      	ldr	r3, [pc, #376]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	4a5d      	ldr	r2, [pc, #372]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a2aa:	f043 0301 	orr.w	r3, r3, #1
 800a2ae:	6213      	str	r3, [r2, #32]
 800a2b0:	e00b      	b.n	800a2ca <HAL_RCC_OscConfig+0x36e>
 800a2b2:	4b5b      	ldr	r3, [pc, #364]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	4a5a      	ldr	r2, [pc, #360]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a2b8:	f023 0301 	bic.w	r3, r3, #1
 800a2bc:	6213      	str	r3, [r2, #32]
 800a2be:	4b58      	ldr	r3, [pc, #352]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	4a57      	ldr	r2, [pc, #348]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a2c4:	f023 0304 	bic.w	r3, r3, #4
 800a2c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d015      	beq.n	800a2fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2d2:	f7fd fdff 	bl	8007ed4 <HAL_GetTick>
 800a2d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2d8:	e00a      	b.n	800a2f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2da:	f7fd fdfb 	bl	8007ed4 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d901      	bls.n	800a2f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e0b1      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2f0:	4b4b      	ldr	r3, [pc, #300]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d0ee      	beq.n	800a2da <HAL_RCC_OscConfig+0x37e>
 800a2fc:	e014      	b.n	800a328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2fe:	f7fd fde9 	bl	8007ed4 <HAL_GetTick>
 800a302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a304:	e00a      	b.n	800a31c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a306:	f7fd fde5 	bl	8007ed4 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	f241 3288 	movw	r2, #5000	; 0x1388
 800a314:	4293      	cmp	r3, r2
 800a316:	d901      	bls.n	800a31c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e09b      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a31c:	4b40      	ldr	r3, [pc, #256]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	f003 0302 	and.w	r3, r3, #2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1ee      	bne.n	800a306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d105      	bne.n	800a33a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a32e:	4b3c      	ldr	r3, [pc, #240]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	4a3b      	ldr	r2, [pc, #236]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 8087 	beq.w	800a452 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a344:	4b36      	ldr	r3, [pc, #216]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f003 030c 	and.w	r3, r3, #12
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d061      	beq.n	800a414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	2b02      	cmp	r3, #2
 800a356:	d146      	bne.n	800a3e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a358:	4b33      	ldr	r3, [pc, #204]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a35e:	f7fd fdb9 	bl	8007ed4 <HAL_GetTick>
 800a362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a364:	e008      	b.n	800a378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a366:	f7fd fdb5 	bl	8007ed4 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	2b02      	cmp	r3, #2
 800a372:	d901      	bls.n	800a378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e06d      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a378:	4b29      	ldr	r3, [pc, #164]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1f0      	bne.n	800a366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38c:	d108      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a38e:	4b24      	ldr	r3, [pc, #144]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	4921      	ldr	r1, [pc, #132]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3a0:	4b1f      	ldr	r3, [pc, #124]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a19      	ldr	r1, [r3, #32]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	491b      	ldr	r1, [pc, #108]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3b8:	4b1b      	ldr	r3, [pc, #108]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3be:	f7fd fd89 	bl	8007ed4 <HAL_GetTick>
 800a3c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a3c4:	e008      	b.n	800a3d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3c6:	f7fd fd85 	bl	8007ed4 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d901      	bls.n	800a3d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e03d      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a3d8:	4b11      	ldr	r3, [pc, #68]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0f0      	beq.n	800a3c6 <HAL_RCC_OscConfig+0x46a>
 800a3e4:	e035      	b.n	800a452 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3e6:	4b10      	ldr	r3, [pc, #64]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3ec:	f7fd fd72 	bl	8007ed4 <HAL_GetTick>
 800a3f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a3f2:	e008      	b.n	800a406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3f4:	f7fd fd6e 	bl	8007ed4 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d901      	bls.n	800a406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e026      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a406:	4b06      	ldr	r3, [pc, #24]	; (800a420 <HAL_RCC_OscConfig+0x4c4>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f0      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x498>
 800a412:	e01e      	b.n	800a452 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d107      	bne.n	800a42c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e019      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
 800a420:	40021000 	.word	0x40021000
 800a424:	40007000 	.word	0x40007000
 800a428:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a42c:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <HAL_RCC_OscConfig+0x500>)
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d106      	bne.n	800a44e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d001      	beq.n	800a452 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e000      	b.n	800a454 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	40021000 	.word	0x40021000

0800a460 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e0d0      	b.n	800a616 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a474:	4b6a      	ldr	r3, [pc, #424]	; (800a620 <HAL_RCC_ClockConfig+0x1c0>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0307 	and.w	r3, r3, #7
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d910      	bls.n	800a4a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a482:	4b67      	ldr	r3, [pc, #412]	; (800a620 <HAL_RCC_ClockConfig+0x1c0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f023 0207 	bic.w	r2, r3, #7
 800a48a:	4965      	ldr	r1, [pc, #404]	; (800a620 <HAL_RCC_ClockConfig+0x1c0>)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	4313      	orrs	r3, r2
 800a490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a492:	4b63      	ldr	r3, [pc, #396]	; (800a620 <HAL_RCC_ClockConfig+0x1c0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d001      	beq.n	800a4a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e0b8      	b.n	800a616 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0302 	and.w	r3, r3, #2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d020      	beq.n	800a4f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0304 	and.w	r3, r3, #4
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d005      	beq.n	800a4c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4bc:	4b59      	ldr	r3, [pc, #356]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	4a58      	ldr	r2, [pc, #352]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a4c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a4c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0308 	and.w	r3, r3, #8
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4d4:	4b53      	ldr	r3, [pc, #332]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	4a52      	ldr	r2, [pc, #328]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a4da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a4de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4e0:	4b50      	ldr	r3, [pc, #320]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	494d      	ldr	r1, [pc, #308]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d040      	beq.n	800a580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d107      	bne.n	800a516 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a506:	4b47      	ldr	r3, [pc, #284]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d115      	bne.n	800a53e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e07f      	b.n	800a616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d107      	bne.n	800a52e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a51e:	4b41      	ldr	r3, [pc, #260]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d109      	bne.n	800a53e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e073      	b.n	800a616 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a52e:	4b3d      	ldr	r3, [pc, #244]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e06b      	b.n	800a616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a53e:	4b39      	ldr	r3, [pc, #228]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f023 0203 	bic.w	r2, r3, #3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	4936      	ldr	r1, [pc, #216]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a550:	f7fd fcc0 	bl	8007ed4 <HAL_GetTick>
 800a554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a556:	e00a      	b.n	800a56e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a558:	f7fd fcbc 	bl	8007ed4 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	f241 3288 	movw	r2, #5000	; 0x1388
 800a566:	4293      	cmp	r3, r2
 800a568:	d901      	bls.n	800a56e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e053      	b.n	800a616 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a56e:	4b2d      	ldr	r3, [pc, #180]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f003 020c 	and.w	r2, r3, #12
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d1eb      	bne.n	800a558 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a580:	4b27      	ldr	r3, [pc, #156]	; (800a620 <HAL_RCC_ClockConfig+0x1c0>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 0307 	and.w	r3, r3, #7
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d210      	bcs.n	800a5b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a58e:	4b24      	ldr	r3, [pc, #144]	; (800a620 <HAL_RCC_ClockConfig+0x1c0>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f023 0207 	bic.w	r2, r3, #7
 800a596:	4922      	ldr	r1, [pc, #136]	; (800a620 <HAL_RCC_ClockConfig+0x1c0>)
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a59e:	4b20      	ldr	r3, [pc, #128]	; (800a620 <HAL_RCC_ClockConfig+0x1c0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0307 	and.w	r3, r3, #7
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d001      	beq.n	800a5b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e032      	b.n	800a616 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d008      	beq.n	800a5ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5bc:	4b19      	ldr	r3, [pc, #100]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	4916      	ldr	r1, [pc, #88]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0308 	and.w	r3, r3, #8
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d009      	beq.n	800a5ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a5da:	4b12      	ldr	r3, [pc, #72]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	490e      	ldr	r1, [pc, #56]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a5ee:	f000 f821 	bl	800a634 <HAL_RCC_GetSysClockFreq>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <HAL_RCC_ClockConfig+0x1c4>)
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	091b      	lsrs	r3, r3, #4
 800a5fa:	f003 030f 	and.w	r3, r3, #15
 800a5fe:	490a      	ldr	r1, [pc, #40]	; (800a628 <HAL_RCC_ClockConfig+0x1c8>)
 800a600:	5ccb      	ldrb	r3, [r1, r3]
 800a602:	fa22 f303 	lsr.w	r3, r2, r3
 800a606:	4a09      	ldr	r2, [pc, #36]	; (800a62c <HAL_RCC_ClockConfig+0x1cc>)
 800a608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <HAL_RCC_ClockConfig+0x1d0>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fd fc1e 	bl	8007e50 <HAL_InitTick>

  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	40022000 	.word	0x40022000
 800a624:	40021000 	.word	0x40021000
 800a628:	0800d290 	.word	0x0800d290
 800a62c:	2000094c 	.word	0x2000094c
 800a630:	20000950 	.word	0x20000950

0800a634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a63a:	2300      	movs	r3, #0
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	2300      	movs	r3, #0
 800a640:	60bb      	str	r3, [r7, #8]
 800a642:	2300      	movs	r3, #0
 800a644:	617b      	str	r3, [r7, #20]
 800a646:	2300      	movs	r3, #0
 800a648:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a64e:	4b1e      	ldr	r3, [pc, #120]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f003 030c 	and.w	r3, r3, #12
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d002      	beq.n	800a664 <HAL_RCC_GetSysClockFreq+0x30>
 800a65e:	2b08      	cmp	r3, #8
 800a660:	d003      	beq.n	800a66a <HAL_RCC_GetSysClockFreq+0x36>
 800a662:	e027      	b.n	800a6b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a664:	4b19      	ldr	r3, [pc, #100]	; (800a6cc <HAL_RCC_GetSysClockFreq+0x98>)
 800a666:	613b      	str	r3, [r7, #16]
      break;
 800a668:	e027      	b.n	800a6ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	0c9b      	lsrs	r3, r3, #18
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	4a17      	ldr	r2, [pc, #92]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a674:	5cd3      	ldrb	r3, [r2, r3]
 800a676:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d010      	beq.n	800a6a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a682:	4b11      	ldr	r3, [pc, #68]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	0c5b      	lsrs	r3, r3, #17
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	4a11      	ldr	r2, [pc, #68]	; (800a6d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a68e:	5cd3      	ldrb	r3, [r2, r3]
 800a690:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a0d      	ldr	r2, [pc, #52]	; (800a6cc <HAL_RCC_GetSysClockFreq+0x98>)
 800a696:	fb03 f202 	mul.w	r2, r3, r2
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	e004      	b.n	800a6ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a0c      	ldr	r2, [pc, #48]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a6a8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	613b      	str	r3, [r7, #16]
      break;
 800a6b2:	e002      	b.n	800a6ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a6b4:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <HAL_RCC_GetSysClockFreq+0x98>)
 800a6b6:	613b      	str	r3, [r7, #16]
      break;
 800a6b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a6ba:	693b      	ldr	r3, [r7, #16]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	371c      	adds	r7, #28
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bc80      	pop	{r7}
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	40021000 	.word	0x40021000
 800a6cc:	007a1200 	.word	0x007a1200
 800a6d0:	0800d2a8 	.word	0x0800d2a8
 800a6d4:	0800d2b8 	.word	0x0800d2b8
 800a6d8:	003d0900 	.word	0x003d0900

0800a6dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a6e0:	4b02      	ldr	r3, [pc, #8]	; (800a6ec <HAL_RCC_GetHCLKFreq+0x10>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bc80      	pop	{r7}
 800a6ea:	4770      	bx	lr
 800a6ec:	2000094c 	.word	0x2000094c

0800a6f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a6f4:	f7ff fff2 	bl	800a6dc <HAL_RCC_GetHCLKFreq>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	4b05      	ldr	r3, [pc, #20]	; (800a710 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	0a1b      	lsrs	r3, r3, #8
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	4903      	ldr	r1, [pc, #12]	; (800a714 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a706:	5ccb      	ldrb	r3, [r1, r3]
 800a708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	40021000 	.word	0x40021000
 800a714:	0800d2a0 	.word	0x0800d2a0

0800a718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a71c:	f7ff ffde 	bl	800a6dc <HAL_RCC_GetHCLKFreq>
 800a720:	4602      	mov	r2, r0
 800a722:	4b05      	ldr	r3, [pc, #20]	; (800a738 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	0adb      	lsrs	r3, r3, #11
 800a728:	f003 0307 	and.w	r3, r3, #7
 800a72c:	4903      	ldr	r1, [pc, #12]	; (800a73c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a72e:	5ccb      	ldrb	r3, [r1, r3]
 800a730:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a734:	4618      	mov	r0, r3
 800a736:	bd80      	pop	{r7, pc}
 800a738:	40021000 	.word	0x40021000
 800a73c:	0800d2a0 	.word	0x0800d2a0

0800a740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a748:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <RCC_Delay+0x34>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a0a      	ldr	r2, [pc, #40]	; (800a778 <RCC_Delay+0x38>)
 800a74e:	fba2 2303 	umull	r2, r3, r2, r3
 800a752:	0a5b      	lsrs	r3, r3, #9
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	fb02 f303 	mul.w	r3, r2, r3
 800a75a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a75c:	bf00      	nop
  }
  while (Delay --);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1e5a      	subs	r2, r3, #1
 800a762:	60fa      	str	r2, [r7, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1f9      	bne.n	800a75c <RCC_Delay+0x1c>
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	bc80      	pop	{r7}
 800a772:	4770      	bx	lr
 800a774:	2000094c 	.word	0x2000094c
 800a778:	10624dd3 	.word	0x10624dd3

0800a77c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e041      	b.n	800a812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d106      	bne.n	800a7a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7fd fa26 	bl	8007bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f000 fa82 	bl	800acc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d001      	beq.n	800a834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e044      	b.n	800a8be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2202      	movs	r2, #2
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f042 0201 	orr.w	r2, r2, #1
 800a84a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a1d      	ldr	r2, [pc, #116]	; (800a8c8 <HAL_TIM_Base_Start_IT+0xac>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d018      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x6c>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a1c      	ldr	r2, [pc, #112]	; (800a8cc <HAL_TIM_Base_Start_IT+0xb0>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d013      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x6c>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a868:	d00e      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x6c>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a18      	ldr	r2, [pc, #96]	; (800a8d0 <HAL_TIM_Base_Start_IT+0xb4>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d009      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x6c>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a16      	ldr	r2, [pc, #88]	; (800a8d4 <HAL_TIM_Base_Start_IT+0xb8>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d004      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x6c>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a15      	ldr	r2, [pc, #84]	; (800a8d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d111      	bne.n	800a8ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 0307 	and.w	r3, r3, #7
 800a892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b06      	cmp	r3, #6
 800a898:	d010      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f042 0201 	orr.w	r2, r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8aa:	e007      	b.n	800a8bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f042 0201 	orr.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr
 800a8c8:	40012c00 	.word	0x40012c00
 800a8cc:	40013400 	.word	0x40013400
 800a8d0:	40000400 	.word	0x40000400
 800a8d4:	40000800 	.word	0x40000800
 800a8d8:	40000c00 	.word	0x40000c00

0800a8dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d122      	bne.n	800a938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f003 0302 	and.w	r3, r3, #2
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d11b      	bne.n	800a938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f06f 0202 	mvn.w	r2, #2
 800a908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f9b4 	bl	800ac8c <HAL_TIM_IC_CaptureCallback>
 800a924:	e005      	b.n	800a932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f9a7 	bl	800ac7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f9b6 	bl	800ac9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f003 0304 	and.w	r3, r3, #4
 800a942:	2b04      	cmp	r3, #4
 800a944:	d122      	bne.n	800a98c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b04      	cmp	r3, #4
 800a952:	d11b      	bne.n	800a98c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f06f 0204 	mvn.w	r2, #4
 800a95c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2202      	movs	r2, #2
 800a962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f98a 	bl	800ac8c <HAL_TIM_IC_CaptureCallback>
 800a978:	e005      	b.n	800a986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f97d 	bl	800ac7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f98c 	bl	800ac9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b08      	cmp	r3, #8
 800a998:	d122      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b08      	cmp	r3, #8
 800a9a6:	d11b      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f06f 0208 	mvn.w	r2, #8
 800a9b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d003      	beq.n	800a9ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f960 	bl	800ac8c <HAL_TIM_IC_CaptureCallback>
 800a9cc:	e005      	b.n	800a9da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f953 	bl	800ac7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f962 	bl	800ac9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	f003 0310 	and.w	r3, r3, #16
 800a9ea:	2b10      	cmp	r3, #16
 800a9ec:	d122      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f003 0310 	and.w	r3, r3, #16
 800a9f8:	2b10      	cmp	r3, #16
 800a9fa:	d11b      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f06f 0210 	mvn.w	r2, #16
 800aa04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2208      	movs	r2, #8
 800aa0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f936 	bl	800ac8c <HAL_TIM_IC_CaptureCallback>
 800aa20:	e005      	b.n	800aa2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f929 	bl	800ac7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f938 	bl	800ac9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d10e      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0301 	and.w	r3, r3, #1
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d107      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0201 	mvn.w	r2, #1
 800aa58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7fc fd4c 	bl	80074f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6a:	2b80      	cmp	r3, #128	; 0x80
 800aa6c:	d10e      	bne.n	800aa8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa78:	2b80      	cmp	r3, #128	; 0x80
 800aa7a:	d107      	bne.n	800aa8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 faa1 	bl	800afce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa96:	2b40      	cmp	r3, #64	; 0x40
 800aa98:	d10e      	bne.n	800aab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa4:	2b40      	cmp	r3, #64	; 0x40
 800aaa6:	d107      	bne.n	800aab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f8fc 	bl	800acb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f003 0320 	and.w	r3, r3, #32
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d10e      	bne.n	800aae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b20      	cmp	r3, #32
 800aad2:	d107      	bne.n	800aae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f06f 0220 	mvn.w	r2, #32
 800aadc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fa6c 	bl	800afbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d101      	bne.n	800ab08 <HAL_TIM_ConfigClockSource+0x1c>
 800ab04:	2302      	movs	r3, #2
 800ab06:	e0b4      	b.n	800ac72 <HAL_TIM_ConfigClockSource+0x186>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab40:	d03e      	beq.n	800abc0 <HAL_TIM_ConfigClockSource+0xd4>
 800ab42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab46:	f200 8087 	bhi.w	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
 800ab4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab4e:	f000 8086 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x172>
 800ab52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab56:	d87f      	bhi.n	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
 800ab58:	2b70      	cmp	r3, #112	; 0x70
 800ab5a:	d01a      	beq.n	800ab92 <HAL_TIM_ConfigClockSource+0xa6>
 800ab5c:	2b70      	cmp	r3, #112	; 0x70
 800ab5e:	d87b      	bhi.n	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
 800ab60:	2b60      	cmp	r3, #96	; 0x60
 800ab62:	d050      	beq.n	800ac06 <HAL_TIM_ConfigClockSource+0x11a>
 800ab64:	2b60      	cmp	r3, #96	; 0x60
 800ab66:	d877      	bhi.n	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
 800ab68:	2b50      	cmp	r3, #80	; 0x50
 800ab6a:	d03c      	beq.n	800abe6 <HAL_TIM_ConfigClockSource+0xfa>
 800ab6c:	2b50      	cmp	r3, #80	; 0x50
 800ab6e:	d873      	bhi.n	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
 800ab70:	2b40      	cmp	r3, #64	; 0x40
 800ab72:	d058      	beq.n	800ac26 <HAL_TIM_ConfigClockSource+0x13a>
 800ab74:	2b40      	cmp	r3, #64	; 0x40
 800ab76:	d86f      	bhi.n	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
 800ab78:	2b30      	cmp	r3, #48	; 0x30
 800ab7a:	d064      	beq.n	800ac46 <HAL_TIM_ConfigClockSource+0x15a>
 800ab7c:	2b30      	cmp	r3, #48	; 0x30
 800ab7e:	d86b      	bhi.n	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d060      	beq.n	800ac46 <HAL_TIM_ConfigClockSource+0x15a>
 800ab84:	2b20      	cmp	r3, #32
 800ab86:	d867      	bhi.n	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d05c      	beq.n	800ac46 <HAL_TIM_ConfigClockSource+0x15a>
 800ab8c:	2b10      	cmp	r3, #16
 800ab8e:	d05a      	beq.n	800ac46 <HAL_TIM_ConfigClockSource+0x15a>
 800ab90:	e062      	b.n	800ac58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aba2:	f000 f980 	bl	800aea6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	609a      	str	r2, [r3, #8]
      break;
 800abbe:	e04f      	b.n	800ac60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abd0:	f000 f969 	bl	800aea6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689a      	ldr	r2, [r3, #8]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abe2:	609a      	str	r2, [r3, #8]
      break;
 800abe4:	e03c      	b.n	800ac60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abf2:	461a      	mov	r2, r3
 800abf4:	f000 f8e0 	bl	800adb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2150      	movs	r1, #80	; 0x50
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 f937 	bl	800ae72 <TIM_ITRx_SetConfig>
      break;
 800ac04:	e02c      	b.n	800ac60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac12:	461a      	mov	r2, r3
 800ac14:	f000 f8fe 	bl	800ae14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2160      	movs	r1, #96	; 0x60
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 f927 	bl	800ae72 <TIM_ITRx_SetConfig>
      break;
 800ac24:	e01c      	b.n	800ac60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac32:	461a      	mov	r2, r3
 800ac34:	f000 f8c0 	bl	800adb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2140      	movs	r1, #64	; 0x40
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f917 	bl	800ae72 <TIM_ITRx_SetConfig>
      break;
 800ac44:	e00c      	b.n	800ac60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4610      	mov	r0, r2
 800ac52:	f000 f90e 	bl	800ae72 <TIM_ITRx_SetConfig>
      break;
 800ac56:	e003      	b.n	800ac60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac5c:	e000      	b.n	800ac60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac82:	bf00      	nop
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bc80      	pop	{r7}
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bc80      	pop	{r7}
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aca6:	bf00      	nop
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	bc80      	pop	{r7}
 800acae:	4770      	bx	lr

0800acb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bc80      	pop	{r7}
 800acc0:	4770      	bx	lr
	...

0800acc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a33      	ldr	r2, [pc, #204]	; (800ada4 <TIM_Base_SetConfig+0xe0>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d013      	beq.n	800ad04 <TIM_Base_SetConfig+0x40>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a32      	ldr	r2, [pc, #200]	; (800ada8 <TIM_Base_SetConfig+0xe4>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00f      	beq.n	800ad04 <TIM_Base_SetConfig+0x40>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acea:	d00b      	beq.n	800ad04 <TIM_Base_SetConfig+0x40>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a2f      	ldr	r2, [pc, #188]	; (800adac <TIM_Base_SetConfig+0xe8>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d007      	beq.n	800ad04 <TIM_Base_SetConfig+0x40>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a2e      	ldr	r2, [pc, #184]	; (800adb0 <TIM_Base_SetConfig+0xec>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d003      	beq.n	800ad04 <TIM_Base_SetConfig+0x40>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a2d      	ldr	r2, [pc, #180]	; (800adb4 <TIM_Base_SetConfig+0xf0>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d108      	bne.n	800ad16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a22      	ldr	r2, [pc, #136]	; (800ada4 <TIM_Base_SetConfig+0xe0>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d013      	beq.n	800ad46 <TIM_Base_SetConfig+0x82>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a21      	ldr	r2, [pc, #132]	; (800ada8 <TIM_Base_SetConfig+0xe4>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d00f      	beq.n	800ad46 <TIM_Base_SetConfig+0x82>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2c:	d00b      	beq.n	800ad46 <TIM_Base_SetConfig+0x82>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a1e      	ldr	r2, [pc, #120]	; (800adac <TIM_Base_SetConfig+0xe8>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d007      	beq.n	800ad46 <TIM_Base_SetConfig+0x82>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a1d      	ldr	r2, [pc, #116]	; (800adb0 <TIM_Base_SetConfig+0xec>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d003      	beq.n	800ad46 <TIM_Base_SetConfig+0x82>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a1c      	ldr	r2, [pc, #112]	; (800adb4 <TIM_Base_SetConfig+0xf0>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d108      	bne.n	800ad58 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	689a      	ldr	r2, [r3, #8]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a09      	ldr	r2, [pc, #36]	; (800ada4 <TIM_Base_SetConfig+0xe0>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d003      	beq.n	800ad8c <TIM_Base_SetConfig+0xc8>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a08      	ldr	r2, [pc, #32]	; (800ada8 <TIM_Base_SetConfig+0xe4>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d103      	bne.n	800ad94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	691a      	ldr	r2, [r3, #16]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	615a      	str	r2, [r3, #20]
}
 800ad9a:	bf00      	nop
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bc80      	pop	{r7}
 800ada2:	4770      	bx	lr
 800ada4:	40012c00 	.word	0x40012c00
 800ada8:	40013400 	.word	0x40013400
 800adac:	40000400 	.word	0x40000400
 800adb0:	40000800 	.word	0x40000800
 800adb4:	40000c00 	.word	0x40000c00

0800adb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	f023 0201 	bic.w	r2, r3, #1
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ade2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4313      	orrs	r3, r2
 800adec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f023 030a 	bic.w	r3, r3, #10
 800adf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	621a      	str	r2, [r3, #32]
}
 800ae0a:	bf00      	nop
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bc80      	pop	{r7}
 800ae12:	4770      	bx	lr

0800ae14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	f023 0210 	bic.w	r2, r3, #16
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	031b      	lsls	r3, r3, #12
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	621a      	str	r2, [r3, #32]
}
 800ae68:	bf00      	nop
 800ae6a:	371c      	adds	r7, #28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bc80      	pop	{r7}
 800ae70:	4770      	bx	lr

0800ae72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f043 0307 	orr.w	r3, r3, #7
 800ae94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	609a      	str	r2, [r3, #8]
}
 800ae9c:	bf00      	nop
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bc80      	pop	{r7}
 800aea4:	4770      	bx	lr

0800aea6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b087      	sub	sp, #28
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	607a      	str	r2, [r7, #4]
 800aeb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aec0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	021a      	lsls	r2, r3, #8
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	431a      	orrs	r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	4313      	orrs	r3, r2
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	609a      	str	r2, [r3, #8]
}
 800aeda:	bf00      	nop
 800aedc:	371c      	adds	r7, #28
 800aede:	46bd      	mov	sp, r7
 800aee0:	bc80      	pop	{r7}
 800aee2:	4770      	bx	lr

0800aee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d101      	bne.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aef8:	2302      	movs	r3, #2
 800aefa:	e050      	b.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a1b      	ldr	r2, [pc, #108]	; (800afa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d018      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a19      	ldr	r2, [pc, #100]	; (800afac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d013      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af52:	d00e      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a15      	ldr	r2, [pc, #84]	; (800afb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d009      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a14      	ldr	r2, [pc, #80]	; (800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d004      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a12      	ldr	r2, [pc, #72]	; (800afb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d10c      	bne.n	800af8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	4313      	orrs	r3, r2
 800af82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bc80      	pop	{r7}
 800afa6:	4770      	bx	lr
 800afa8:	40012c00 	.word	0x40012c00
 800afac:	40013400 	.word	0x40013400
 800afb0:	40000400 	.word	0x40000400
 800afb4:	40000800 	.word	0x40000800
 800afb8:	40000c00 	.word	0x40000c00

0800afbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bc80      	pop	{r7}
 800afcc:	4770      	bx	lr

0800afce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afd6:	bf00      	nop
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	bc80      	pop	{r7}
 800afde:	4770      	bx	lr

0800afe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e042      	b.n	800b078 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	d106      	bne.n	800b00c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7fc fe1a 	bl	8007c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2224      	movs	r2, #36	; 0x24
 800b010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fcb5 	bl	800b994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	691a      	ldr	r2, [r3, #16]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	695a      	ldr	r2, [r3, #20]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68da      	ldr	r2, [r3, #12]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2220      	movs	r2, #32
 800b064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2220      	movs	r2, #32
 800b06c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b20      	cmp	r3, #32
 800b098:	d121      	bne.n	800b0de <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <HAL_UART_Transmit_IT+0x26>
 800b0a0:	88fb      	ldrh	r3, [r7, #6]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e01a      	b.n	800b0e0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	88fa      	ldrh	r2, [r7, #6]
 800b0b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	88fa      	ldrh	r2, [r7, #6]
 800b0ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2221      	movs	r2, #33	; 0x21
 800b0c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b0d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e000      	b.n	800b0e0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b0de:	2302      	movs	r3, #2
  }
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bc80      	pop	{r7}
 800b0e8:	4770      	bx	lr
	...

0800b0ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b0ba      	sub	sp, #232	; 0xe8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b112:	2300      	movs	r3, #0
 800b114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b118:	2300      	movs	r3, #0
 800b11a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b122:	f003 030f 	and.w	r3, r3, #15
 800b126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b12a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10f      	bne.n	800b152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b136:	f003 0320 	and.w	r3, r3, #32
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d009      	beq.n	800b152 <HAL_UART_IRQHandler+0x66>
 800b13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b142:	f003 0320 	and.w	r3, r3, #32
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fb63 	bl	800b816 <UART_Receive_IT>
      return;
 800b150:	e25b      	b.n	800b60a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 80de 	beq.w	800b318 <HAL_UART_IRQHandler+0x22c>
 800b15c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	2b00      	cmp	r3, #0
 800b166:	d106      	bne.n	800b176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b16c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 80d1 	beq.w	800b318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00b      	beq.n	800b19a <HAL_UART_IRQHandler+0xae>
 800b182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d005      	beq.n	800b19a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b192:	f043 0201 	orr.w	r2, r3, #1
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b19e:	f003 0304 	and.w	r3, r3, #4
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00b      	beq.n	800b1be <HAL_UART_IRQHandler+0xd2>
 800b1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d005      	beq.n	800b1be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b6:	f043 0202 	orr.w	r2, r3, #2
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00b      	beq.n	800b1e2 <HAL_UART_IRQHandler+0xf6>
 800b1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d005      	beq.n	800b1e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1da:	f043 0204 	orr.w	r2, r3, #4
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1e6:	f003 0308 	and.w	r3, r3, #8
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d011      	beq.n	800b212 <HAL_UART_IRQHandler+0x126>
 800b1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d105      	bne.n	800b206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b20a:	f043 0208 	orr.w	r2, r3, #8
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 81f2 	beq.w	800b600 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b220:	f003 0320 	and.w	r3, r3, #32
 800b224:	2b00      	cmp	r3, #0
 800b226:	d008      	beq.n	800b23a <HAL_UART_IRQHandler+0x14e>
 800b228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b22c:	f003 0320 	and.w	r3, r3, #32
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 faee 	bl	800b816 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b244:	2b00      	cmp	r3, #0
 800b246:	bf14      	ite	ne
 800b248:	2301      	movne	r3, #1
 800b24a:	2300      	moveq	r3, #0
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b256:	f003 0308 	and.w	r3, r3, #8
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <HAL_UART_IRQHandler+0x17a>
 800b25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d04f      	beq.n	800b306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f9f8 	bl	800b65c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	695b      	ldr	r3, [r3, #20]
 800b272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b276:	2b00      	cmp	r3, #0
 800b278:	d041      	beq.n	800b2fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3314      	adds	r3, #20
 800b280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3314      	adds	r3, #20
 800b2a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b2a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b2aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b2b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b2b6:	e841 2300 	strex	r3, r2, [r1]
 800b2ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1d9      	bne.n	800b27a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d013      	beq.n	800b2f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2d2:	4a7e      	ldr	r2, [pc, #504]	; (800b4cc <HAL_UART_IRQHandler+0x3e0>)
 800b2d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fd f86c 	bl	80083b8 <HAL_DMA_Abort_IT>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d016      	beq.n	800b314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2f4:	e00e      	b.n	800b314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f99c 	bl	800b634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2fc:	e00a      	b.n	800b314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f998 	bl	800b634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b304:	e006      	b.n	800b314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f994 	bl	800b634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b312:	e175      	b.n	800b600 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b314:	bf00      	nop
    return;
 800b316:	e173      	b.n	800b600 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	f040 814f 	bne.w	800b5c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b326:	f003 0310 	and.w	r3, r3, #16
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 8148 	beq.w	800b5c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b334:	f003 0310 	and.w	r3, r3, #16
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 8141 	beq.w	800b5c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b33e:	2300      	movs	r3, #0
 800b340:	60bb      	str	r3, [r7, #8]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	60bb      	str	r3, [r7, #8]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	60bb      	str	r3, [r7, #8]
 800b352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 80b6 	beq.w	800b4d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 8145 	beq.w	800b604 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b37e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b382:	429a      	cmp	r2, r3
 800b384:	f080 813e 	bcs.w	800b604 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b38e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	2b20      	cmp	r3, #32
 800b398:	f000 8088 	beq.w	800b4ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	330c      	adds	r3, #12
 800b3a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3aa:	e853 3f00 	ldrex	r3, [r3]
 800b3ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b3b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	330c      	adds	r3, #12
 800b3c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b3c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b3cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b3d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b3d8:	e841 2300 	strex	r3, r2, [r1]
 800b3dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b3e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1d9      	bne.n	800b39c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3314      	adds	r3, #20
 800b3ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3f2:	e853 3f00 	ldrex	r3, [r3]
 800b3f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b3f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3fa:	f023 0301 	bic.w	r3, r3, #1
 800b3fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3314      	adds	r3, #20
 800b408:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b40c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b410:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b412:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b414:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b418:	e841 2300 	strex	r3, r2, [r1]
 800b41c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b41e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1e1      	bne.n	800b3e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3314      	adds	r3, #20
 800b42a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b42e:	e853 3f00 	ldrex	r3, [r3]
 800b432:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b43a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3314      	adds	r3, #20
 800b444:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b448:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b44a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b44e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b450:	e841 2300 	strex	r3, r2, [r1]
 800b454:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1e3      	bne.n	800b424 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2220      	movs	r2, #32
 800b460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	330c      	adds	r3, #12
 800b470:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b47a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b47c:	f023 0310 	bic.w	r3, r3, #16
 800b480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	330c      	adds	r3, #12
 800b48a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b48e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b490:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e3      	bne.n	800b46a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fc ff4b 	bl	8008342 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f8bf 	bl	800b646 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b4c8:	e09c      	b.n	800b604 <HAL_UART_IRQHandler+0x518>
 800b4ca:	bf00      	nop
 800b4cc:	0800b721 	.word	0x0800b721
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f000 808e 	beq.w	800b608 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b4ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 8089 	beq.w	800b608 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	330c      	adds	r3, #12
 800b4fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b50c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	330c      	adds	r3, #12
 800b516:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b51a:	647a      	str	r2, [r7, #68]	; 0x44
 800b51c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e3      	bne.n	800b4f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3314      	adds	r3, #20
 800b534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	e853 3f00 	ldrex	r3, [r3]
 800b53c:	623b      	str	r3, [r7, #32]
   return(result);
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	f023 0301 	bic.w	r3, r3, #1
 800b544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3314      	adds	r3, #20
 800b54e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b552:	633a      	str	r2, [r7, #48]	; 0x30
 800b554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e3      	bne.n	800b52e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2220      	movs	r2, #32
 800b56a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	330c      	adds	r3, #12
 800b57a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	e853 3f00 	ldrex	r3, [r3]
 800b582:	60fb      	str	r3, [r7, #12]
   return(result);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 0310 	bic.w	r3, r3, #16
 800b58a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	330c      	adds	r3, #12
 800b594:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b598:	61fa      	str	r2, [r7, #28]
 800b59a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	69b9      	ldr	r1, [r7, #24]
 800b59e:	69fa      	ldr	r2, [r7, #28]
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e3      	bne.n	800b574 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f844 	bl	800b646 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5be:	e023      	b.n	800b608 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d009      	beq.n	800b5e0 <HAL_UART_IRQHandler+0x4f4>
 800b5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f8b5 	bl	800b748 <UART_Transmit_IT>
    return;
 800b5de:	e014      	b.n	800b60a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00e      	beq.n	800b60a <HAL_UART_IRQHandler+0x51e>
 800b5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d008      	beq.n	800b60a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f8f4 	bl	800b7e6 <UART_EndTransmit_IT>
    return;
 800b5fe:	e004      	b.n	800b60a <HAL_UART_IRQHandler+0x51e>
    return;
 800b600:	bf00      	nop
 800b602:	e002      	b.n	800b60a <HAL_UART_IRQHandler+0x51e>
      return;
 800b604:	bf00      	nop
 800b606:	e000      	b.n	800b60a <HAL_UART_IRQHandler+0x51e>
      return;
 800b608:	bf00      	nop
  }
}
 800b60a:	37e8      	adds	r7, #232	; 0xe8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bc80      	pop	{r7}
 800b620:	4770      	bx	lr

0800b622 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b62a:	bf00      	nop
 800b62c:	370c      	adds	r7, #12
 800b62e:	46bd      	mov	sp, r7
 800b630:	bc80      	pop	{r7}
 800b632:	4770      	bx	lr

0800b634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	bc80      	pop	{r7}
 800b644:	4770      	bx	lr

0800b646 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	bc80      	pop	{r7}
 800b65a:	4770      	bx	lr

0800b65c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b095      	sub	sp, #84	; 0x54
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	330c      	adds	r3, #12
 800b66a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b67a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	330c      	adds	r3, #12
 800b682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b684:	643a      	str	r2, [r7, #64]	; 0x40
 800b686:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b68a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e5      	bne.n	800b664 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3314      	adds	r3, #20
 800b69e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	f023 0301 	bic.w	r3, r3, #1
 800b6ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3314      	adds	r3, #20
 800b6b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c0:	e841 2300 	strex	r3, r2, [r1]
 800b6c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1e5      	bne.n	800b698 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d119      	bne.n	800b708 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	330c      	adds	r3, #12
 800b6da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	e853 3f00 	ldrex	r3, [r3]
 800b6e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	f023 0310 	bic.w	r3, r3, #16
 800b6ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	330c      	adds	r3, #12
 800b6f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6f4:	61ba      	str	r2, [r7, #24]
 800b6f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f8:	6979      	ldr	r1, [r7, #20]
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	e841 2300 	strex	r3, r2, [r1]
 800b700:	613b      	str	r3, [r7, #16]
   return(result);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1e5      	bne.n	800b6d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2220      	movs	r2, #32
 800b70c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b716:	bf00      	nop
 800b718:	3754      	adds	r7, #84	; 0x54
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bc80      	pop	{r7}
 800b71e:	4770      	bx	lr

0800b720 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f7ff ff7a 	bl	800b634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b740:	bf00      	nop
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b21      	cmp	r3, #33	; 0x21
 800b75a:	d13e      	bne.n	800b7da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b764:	d114      	bne.n	800b790 <UART_Transmit_IT+0x48>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d110      	bne.n	800b790 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	461a      	mov	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b782:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	1c9a      	adds	r2, r3, #2
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	621a      	str	r2, [r3, #32]
 800b78e:	e008      	b.n	800b7a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a1b      	ldr	r3, [r3, #32]
 800b794:	1c59      	adds	r1, r3, #1
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	6211      	str	r1, [r2, #32]
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10f      	bne.n	800b7d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68da      	ldr	r2, [r3, #12]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e000      	b.n	800b7dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b7da:	2302      	movs	r3, #2
  }
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bc80      	pop	{r7}
 800b7e4:	4770      	bx	lr

0800b7e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68da      	ldr	r2, [r3, #12]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2220      	movs	r2, #32
 800b802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff ff02 	bl	800b610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b08c      	sub	sp, #48	; 0x30
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b824:	b2db      	uxtb	r3, r3
 800b826:	2b22      	cmp	r3, #34	; 0x22
 800b828:	f040 80ae 	bne.w	800b988 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b834:	d117      	bne.n	800b866 <UART_Receive_IT+0x50>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d113      	bne.n	800b866 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b83e:	2300      	movs	r3, #0
 800b840:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b846:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b854:	b29a      	uxth	r2, r3
 800b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b858:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	1c9a      	adds	r2, r3, #2
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	629a      	str	r2, [r3, #40]	; 0x28
 800b864:	e026      	b.n	800b8b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b86c:	2300      	movs	r3, #0
 800b86e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b878:	d007      	beq.n	800b88a <UART_Receive_IT+0x74>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10a      	bne.n	800b898 <UART_Receive_IT+0x82>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	b2da      	uxtb	r2, r3
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	701a      	strb	r2, [r3, #0]
 800b896:	e008      	b.n	800b8aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d15d      	bne.n	800b984 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68da      	ldr	r2, [r3, #12]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f022 0220 	bic.w	r2, r2, #32
 800b8d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	695a      	ldr	r2, [r3, #20]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f022 0201 	bic.w	r2, r2, #1
 800b8f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2220      	movs	r2, #32
 800b8fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d135      	bne.n	800b97a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	330c      	adds	r3, #12
 800b91a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	e853 3f00 	ldrex	r3, [r3]
 800b922:	613b      	str	r3, [r7, #16]
   return(result);
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f023 0310 	bic.w	r3, r3, #16
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	330c      	adds	r3, #12
 800b932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b934:	623a      	str	r2, [r7, #32]
 800b936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b938:	69f9      	ldr	r1, [r7, #28]
 800b93a:	6a3a      	ldr	r2, [r7, #32]
 800b93c:	e841 2300 	strex	r3, r2, [r1]
 800b940:	61bb      	str	r3, [r7, #24]
   return(result);
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1e5      	bne.n	800b914 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 0310 	and.w	r3, r3, #16
 800b952:	2b10      	cmp	r3, #16
 800b954:	d10a      	bne.n	800b96c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	60fb      	str	r3, [r7, #12]
 800b96a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff fe67 	bl	800b646 <HAL_UARTEx_RxEventCallback>
 800b978:	e002      	b.n	800b980 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7ff fe51 	bl	800b622 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	e002      	b.n	800b98a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	e000      	b.n	800b98a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b988:	2302      	movs	r3, #2
  }
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3730      	adds	r7, #48	; 0x30
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68da      	ldr	r2, [r3, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	689a      	ldr	r2, [r3, #8]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	431a      	orrs	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b9ce:	f023 030c 	bic.w	r3, r3, #12
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	6812      	ldr	r2, [r2, #0]
 800b9d6:	68b9      	ldr	r1, [r7, #8]
 800b9d8:	430b      	orrs	r3, r1
 800b9da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	699a      	ldr	r2, [r3, #24]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a2c      	ldr	r2, [pc, #176]	; (800baa8 <UART_SetConfig+0x114>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d103      	bne.n	800ba04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b9fc:	f7fe fe8c 	bl	800a718 <HAL_RCC_GetPCLK2Freq>
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	e002      	b.n	800ba0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ba04:	f7fe fe74 	bl	800a6f0 <HAL_RCC_GetPCLK1Freq>
 800ba08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	009a      	lsls	r2, r3, #2
 800ba14:	441a      	add	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba20:	4a22      	ldr	r2, [pc, #136]	; (800baac <UART_SetConfig+0x118>)
 800ba22:	fba2 2303 	umull	r2, r3, r2, r3
 800ba26:	095b      	lsrs	r3, r3, #5
 800ba28:	0119      	lsls	r1, r3, #4
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4413      	add	r3, r2
 800ba32:	009a      	lsls	r2, r3, #2
 800ba34:	441a      	add	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba40:	4b1a      	ldr	r3, [pc, #104]	; (800baac <UART_SetConfig+0x118>)
 800ba42:	fba3 0302 	umull	r0, r3, r3, r2
 800ba46:	095b      	lsrs	r3, r3, #5
 800ba48:	2064      	movs	r0, #100	; 0x64
 800ba4a:	fb00 f303 	mul.w	r3, r0, r3
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	3332      	adds	r3, #50	; 0x32
 800ba54:	4a15      	ldr	r2, [pc, #84]	; (800baac <UART_SetConfig+0x118>)
 800ba56:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5a:	095b      	lsrs	r3, r3, #5
 800ba5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba60:	4419      	add	r1, r3
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009a      	lsls	r2, r3, #2
 800ba6c:	441a      	add	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba78:	4b0c      	ldr	r3, [pc, #48]	; (800baac <UART_SetConfig+0x118>)
 800ba7a:	fba3 0302 	umull	r0, r3, r3, r2
 800ba7e:	095b      	lsrs	r3, r3, #5
 800ba80:	2064      	movs	r0, #100	; 0x64
 800ba82:	fb00 f303 	mul.w	r3, r0, r3
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	011b      	lsls	r3, r3, #4
 800ba8a:	3332      	adds	r3, #50	; 0x32
 800ba8c:	4a07      	ldr	r2, [pc, #28]	; (800baac <UART_SetConfig+0x118>)
 800ba8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba92:	095b      	lsrs	r3, r3, #5
 800ba94:	f003 020f 	and.w	r2, r3, #15
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800baa0:	bf00      	nop
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	40013800 	.word	0x40013800
 800baac:	51eb851f 	.word	0x51eb851f

0800bab0 <__itoa>:
 800bab0:	1e93      	subs	r3, r2, #2
 800bab2:	2b22      	cmp	r3, #34	; 0x22
 800bab4:	b510      	push	{r4, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	d904      	bls.n	800bac4 <__itoa+0x14>
 800baba:	2300      	movs	r3, #0
 800babc:	461c      	mov	r4, r3
 800babe:	700b      	strb	r3, [r1, #0]
 800bac0:	4620      	mov	r0, r4
 800bac2:	bd10      	pop	{r4, pc}
 800bac4:	2a0a      	cmp	r2, #10
 800bac6:	d109      	bne.n	800badc <__itoa+0x2c>
 800bac8:	2800      	cmp	r0, #0
 800baca:	da07      	bge.n	800badc <__itoa+0x2c>
 800bacc:	232d      	movs	r3, #45	; 0x2d
 800bace:	700b      	strb	r3, [r1, #0]
 800bad0:	2101      	movs	r1, #1
 800bad2:	4240      	negs	r0, r0
 800bad4:	4421      	add	r1, r4
 800bad6:	f000 f8b9 	bl	800bc4c <__utoa>
 800bada:	e7f1      	b.n	800bac0 <__itoa+0x10>
 800badc:	2100      	movs	r1, #0
 800bade:	e7f9      	b.n	800bad4 <__itoa+0x24>

0800bae0 <itoa>:
 800bae0:	f7ff bfe6 	b.w	800bab0 <__itoa>

0800bae4 <malloc>:
 800bae4:	4b02      	ldr	r3, [pc, #8]	; (800baf0 <malloc+0xc>)
 800bae6:	4601      	mov	r1, r0
 800bae8:	6818      	ldr	r0, [r3, #0]
 800baea:	f000 b823 	b.w	800bb34 <_malloc_r>
 800baee:	bf00      	nop
 800baf0:	200009a4 	.word	0x200009a4

0800baf4 <sbrk_aligned>:
 800baf4:	b570      	push	{r4, r5, r6, lr}
 800baf6:	4e0e      	ldr	r6, [pc, #56]	; (800bb30 <sbrk_aligned+0x3c>)
 800baf8:	460c      	mov	r4, r1
 800bafa:	6831      	ldr	r1, [r6, #0]
 800bafc:	4605      	mov	r5, r0
 800bafe:	b911      	cbnz	r1, 800bb06 <sbrk_aligned+0x12>
 800bb00:	f000 f91e 	bl	800bd40 <_sbrk_r>
 800bb04:	6030      	str	r0, [r6, #0]
 800bb06:	4621      	mov	r1, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f000 f919 	bl	800bd40 <_sbrk_r>
 800bb0e:	1c43      	adds	r3, r0, #1
 800bb10:	d00a      	beq.n	800bb28 <sbrk_aligned+0x34>
 800bb12:	1cc4      	adds	r4, r0, #3
 800bb14:	f024 0403 	bic.w	r4, r4, #3
 800bb18:	42a0      	cmp	r0, r4
 800bb1a:	d007      	beq.n	800bb2c <sbrk_aligned+0x38>
 800bb1c:	1a21      	subs	r1, r4, r0
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 f90e 	bl	800bd40 <_sbrk_r>
 800bb24:	3001      	adds	r0, #1
 800bb26:	d101      	bne.n	800bb2c <sbrk_aligned+0x38>
 800bb28:	f04f 34ff 	mov.w	r4, #4294967295
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	20000dd8 	.word	0x20000dd8

0800bb34 <_malloc_r>:
 800bb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb38:	1ccd      	adds	r5, r1, #3
 800bb3a:	f025 0503 	bic.w	r5, r5, #3
 800bb3e:	3508      	adds	r5, #8
 800bb40:	2d0c      	cmp	r5, #12
 800bb42:	bf38      	it	cc
 800bb44:	250c      	movcc	r5, #12
 800bb46:	2d00      	cmp	r5, #0
 800bb48:	4607      	mov	r7, r0
 800bb4a:	db01      	blt.n	800bb50 <_malloc_r+0x1c>
 800bb4c:	42a9      	cmp	r1, r5
 800bb4e:	d905      	bls.n	800bb5c <_malloc_r+0x28>
 800bb50:	230c      	movs	r3, #12
 800bb52:	2600      	movs	r6, #0
 800bb54:	603b      	str	r3, [r7, #0]
 800bb56:	4630      	mov	r0, r6
 800bb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc30 <_malloc_r+0xfc>
 800bb60:	f000 f868 	bl	800bc34 <__malloc_lock>
 800bb64:	f8d8 3000 	ldr.w	r3, [r8]
 800bb68:	461c      	mov	r4, r3
 800bb6a:	bb5c      	cbnz	r4, 800bbc4 <_malloc_r+0x90>
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f7ff ffc0 	bl	800baf4 <sbrk_aligned>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	4604      	mov	r4, r0
 800bb78:	d155      	bne.n	800bc26 <_malloc_r+0xf2>
 800bb7a:	f8d8 4000 	ldr.w	r4, [r8]
 800bb7e:	4626      	mov	r6, r4
 800bb80:	2e00      	cmp	r6, #0
 800bb82:	d145      	bne.n	800bc10 <_malloc_r+0xdc>
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	d048      	beq.n	800bc1a <_malloc_r+0xe6>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	eb04 0903 	add.w	r9, r4, r3
 800bb92:	f000 f8d5 	bl	800bd40 <_sbrk_r>
 800bb96:	4581      	cmp	r9, r0
 800bb98:	d13f      	bne.n	800bc1a <_malloc_r+0xe6>
 800bb9a:	6821      	ldr	r1, [r4, #0]
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	1a6d      	subs	r5, r5, r1
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7ff ffa7 	bl	800baf4 <sbrk_aligned>
 800bba6:	3001      	adds	r0, #1
 800bba8:	d037      	beq.n	800bc1a <_malloc_r+0xe6>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	442b      	add	r3, r5
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	f8d8 3000 	ldr.w	r3, [r8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d038      	beq.n	800bc2a <_malloc_r+0xf6>
 800bbb8:	685a      	ldr	r2, [r3, #4]
 800bbba:	42a2      	cmp	r2, r4
 800bbbc:	d12b      	bne.n	800bc16 <_malloc_r+0xe2>
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	605a      	str	r2, [r3, #4]
 800bbc2:	e00f      	b.n	800bbe4 <_malloc_r+0xb0>
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	1b52      	subs	r2, r2, r5
 800bbc8:	d41f      	bmi.n	800bc0a <_malloc_r+0xd6>
 800bbca:	2a0b      	cmp	r2, #11
 800bbcc:	d917      	bls.n	800bbfe <_malloc_r+0xca>
 800bbce:	1961      	adds	r1, r4, r5
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	6025      	str	r5, [r4, #0]
 800bbd4:	bf18      	it	ne
 800bbd6:	6059      	strne	r1, [r3, #4]
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	bf08      	it	eq
 800bbdc:	f8c8 1000 	streq.w	r1, [r8]
 800bbe0:	5162      	str	r2, [r4, r5]
 800bbe2:	604b      	str	r3, [r1, #4]
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	f104 060b 	add.w	r6, r4, #11
 800bbea:	f000 f829 	bl	800bc40 <__malloc_unlock>
 800bbee:	f026 0607 	bic.w	r6, r6, #7
 800bbf2:	1d23      	adds	r3, r4, #4
 800bbf4:	1af2      	subs	r2, r6, r3
 800bbf6:	d0ae      	beq.n	800bb56 <_malloc_r+0x22>
 800bbf8:	1b9b      	subs	r3, r3, r6
 800bbfa:	50a3      	str	r3, [r4, r2]
 800bbfc:	e7ab      	b.n	800bb56 <_malloc_r+0x22>
 800bbfe:	42a3      	cmp	r3, r4
 800bc00:	6862      	ldr	r2, [r4, #4]
 800bc02:	d1dd      	bne.n	800bbc0 <_malloc_r+0x8c>
 800bc04:	f8c8 2000 	str.w	r2, [r8]
 800bc08:	e7ec      	b.n	800bbe4 <_malloc_r+0xb0>
 800bc0a:	4623      	mov	r3, r4
 800bc0c:	6864      	ldr	r4, [r4, #4]
 800bc0e:	e7ac      	b.n	800bb6a <_malloc_r+0x36>
 800bc10:	4634      	mov	r4, r6
 800bc12:	6876      	ldr	r6, [r6, #4]
 800bc14:	e7b4      	b.n	800bb80 <_malloc_r+0x4c>
 800bc16:	4613      	mov	r3, r2
 800bc18:	e7cc      	b.n	800bbb4 <_malloc_r+0x80>
 800bc1a:	230c      	movs	r3, #12
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	f000 f80e 	bl	800bc40 <__malloc_unlock>
 800bc24:	e797      	b.n	800bb56 <_malloc_r+0x22>
 800bc26:	6025      	str	r5, [r4, #0]
 800bc28:	e7dc      	b.n	800bbe4 <_malloc_r+0xb0>
 800bc2a:	605b      	str	r3, [r3, #4]
 800bc2c:	deff      	udf	#255	; 0xff
 800bc2e:	bf00      	nop
 800bc30:	20000dd4 	.word	0x20000dd4

0800bc34 <__malloc_lock>:
 800bc34:	4801      	ldr	r0, [pc, #4]	; (800bc3c <__malloc_lock+0x8>)
 800bc36:	f000 b8bd 	b.w	800bdb4 <__retarget_lock_acquire_recursive>
 800bc3a:	bf00      	nop
 800bc3c:	20000f18 	.word	0x20000f18

0800bc40 <__malloc_unlock>:
 800bc40:	4801      	ldr	r0, [pc, #4]	; (800bc48 <__malloc_unlock+0x8>)
 800bc42:	f000 b8b8 	b.w	800bdb6 <__retarget_lock_release_recursive>
 800bc46:	bf00      	nop
 800bc48:	20000f18 	.word	0x20000f18

0800bc4c <__utoa>:
 800bc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4e:	b08b      	sub	sp, #44	; 0x2c
 800bc50:	4605      	mov	r5, r0
 800bc52:	460b      	mov	r3, r1
 800bc54:	466e      	mov	r6, sp
 800bc56:	4c1d      	ldr	r4, [pc, #116]	; (800bccc <__utoa+0x80>)
 800bc58:	f104 0c20 	add.w	ip, r4, #32
 800bc5c:	4637      	mov	r7, r6
 800bc5e:	6820      	ldr	r0, [r4, #0]
 800bc60:	6861      	ldr	r1, [r4, #4]
 800bc62:	3408      	adds	r4, #8
 800bc64:	c703      	stmia	r7!, {r0, r1}
 800bc66:	4564      	cmp	r4, ip
 800bc68:	463e      	mov	r6, r7
 800bc6a:	d1f7      	bne.n	800bc5c <__utoa+0x10>
 800bc6c:	7921      	ldrb	r1, [r4, #4]
 800bc6e:	6820      	ldr	r0, [r4, #0]
 800bc70:	7139      	strb	r1, [r7, #4]
 800bc72:	1e91      	subs	r1, r2, #2
 800bc74:	2922      	cmp	r1, #34	; 0x22
 800bc76:	6038      	str	r0, [r7, #0]
 800bc78:	f04f 0100 	mov.w	r1, #0
 800bc7c:	d904      	bls.n	800bc88 <__utoa+0x3c>
 800bc7e:	7019      	strb	r1, [r3, #0]
 800bc80:	460b      	mov	r3, r1
 800bc82:	4618      	mov	r0, r3
 800bc84:	b00b      	add	sp, #44	; 0x2c
 800bc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc88:	1e58      	subs	r0, r3, #1
 800bc8a:	4684      	mov	ip, r0
 800bc8c:	fbb5 f7f2 	udiv	r7, r5, r2
 800bc90:	fb02 5617 	mls	r6, r2, r7, r5
 800bc94:	3628      	adds	r6, #40	; 0x28
 800bc96:	446e      	add	r6, sp
 800bc98:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bc9c:	460c      	mov	r4, r1
 800bc9e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bca2:	462e      	mov	r6, r5
 800bca4:	42b2      	cmp	r2, r6
 800bca6:	463d      	mov	r5, r7
 800bca8:	f101 0101 	add.w	r1, r1, #1
 800bcac:	d9ee      	bls.n	800bc8c <__utoa+0x40>
 800bcae:	2200      	movs	r2, #0
 800bcb0:	545a      	strb	r2, [r3, r1]
 800bcb2:	1919      	adds	r1, r3, r4
 800bcb4:	1aa5      	subs	r5, r4, r2
 800bcb6:	42aa      	cmp	r2, r5
 800bcb8:	dae3      	bge.n	800bc82 <__utoa+0x36>
 800bcba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bcbe:	780e      	ldrb	r6, [r1, #0]
 800bcc0:	3201      	adds	r2, #1
 800bcc2:	7006      	strb	r6, [r0, #0]
 800bcc4:	f801 5901 	strb.w	r5, [r1], #-1
 800bcc8:	e7f4      	b.n	800bcb4 <__utoa+0x68>
 800bcca:	bf00      	nop
 800bccc:	0800d2ba 	.word	0x0800d2ba

0800bcd0 <siprintf>:
 800bcd0:	b40e      	push	{r1, r2, r3}
 800bcd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcd6:	b500      	push	{lr}
 800bcd8:	b09c      	sub	sp, #112	; 0x70
 800bcda:	ab1d      	add	r3, sp, #116	; 0x74
 800bcdc:	9002      	str	r0, [sp, #8]
 800bcde:	9006      	str	r0, [sp, #24]
 800bce0:	9107      	str	r1, [sp, #28]
 800bce2:	9104      	str	r1, [sp, #16]
 800bce4:	4808      	ldr	r0, [pc, #32]	; (800bd08 <siprintf+0x38>)
 800bce6:	4909      	ldr	r1, [pc, #36]	; (800bd0c <siprintf+0x3c>)
 800bce8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcec:	9105      	str	r1, [sp, #20]
 800bcee:	6800      	ldr	r0, [r0, #0]
 800bcf0:	a902      	add	r1, sp, #8
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	f000 f90a 	bl	800bf0c <_svfiprintf_r>
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	9b02      	ldr	r3, [sp, #8]
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	b01c      	add	sp, #112	; 0x70
 800bd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd04:	b003      	add	sp, #12
 800bd06:	4770      	bx	lr
 800bd08:	200009a4 	.word	0x200009a4
 800bd0c:	ffff0208 	.word	0xffff0208

0800bd10 <memset>:
 800bd10:	4603      	mov	r3, r0
 800bd12:	4402      	add	r2, r0
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d100      	bne.n	800bd1a <memset+0xa>
 800bd18:	4770      	bx	lr
 800bd1a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd1e:	e7f9      	b.n	800bd14 <memset+0x4>

0800bd20 <strcat>:
 800bd20:	4602      	mov	r2, r0
 800bd22:	b510      	push	{r4, lr}
 800bd24:	7814      	ldrb	r4, [r2, #0]
 800bd26:	4613      	mov	r3, r2
 800bd28:	3201      	adds	r2, #1
 800bd2a:	2c00      	cmp	r4, #0
 800bd2c:	d1fa      	bne.n	800bd24 <strcat+0x4>
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd34:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd38:	2a00      	cmp	r2, #0
 800bd3a:	d1f9      	bne.n	800bd30 <strcat+0x10>
 800bd3c:	bd10      	pop	{r4, pc}
	...

0800bd40 <_sbrk_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	2300      	movs	r3, #0
 800bd44:	4d05      	ldr	r5, [pc, #20]	; (800bd5c <_sbrk_r+0x1c>)
 800bd46:	4604      	mov	r4, r0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	602b      	str	r3, [r5, #0]
 800bd4c:	f7fc f808 	bl	8007d60 <_sbrk>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_sbrk_r+0x1a>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_sbrk_r+0x1a>
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20000f14 	.word	0x20000f14

0800bd60 <__errno>:
 800bd60:	4b01      	ldr	r3, [pc, #4]	; (800bd68 <__errno+0x8>)
 800bd62:	6818      	ldr	r0, [r3, #0]
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	200009a4 	.word	0x200009a4

0800bd6c <__libc_init_array>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	2600      	movs	r6, #0
 800bd70:	4d0c      	ldr	r5, [pc, #48]	; (800bda4 <__libc_init_array+0x38>)
 800bd72:	4c0d      	ldr	r4, [pc, #52]	; (800bda8 <__libc_init_array+0x3c>)
 800bd74:	1b64      	subs	r4, r4, r5
 800bd76:	10a4      	asrs	r4, r4, #2
 800bd78:	42a6      	cmp	r6, r4
 800bd7a:	d109      	bne.n	800bd90 <__libc_init_array+0x24>
 800bd7c:	f000 fbc6 	bl	800c50c <_init>
 800bd80:	2600      	movs	r6, #0
 800bd82:	4d0a      	ldr	r5, [pc, #40]	; (800bdac <__libc_init_array+0x40>)
 800bd84:	4c0a      	ldr	r4, [pc, #40]	; (800bdb0 <__libc_init_array+0x44>)
 800bd86:	1b64      	subs	r4, r4, r5
 800bd88:	10a4      	asrs	r4, r4, #2
 800bd8a:	42a6      	cmp	r6, r4
 800bd8c:	d105      	bne.n	800bd9a <__libc_init_array+0x2e>
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}
 800bd90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd94:	4798      	blx	r3
 800bd96:	3601      	adds	r6, #1
 800bd98:	e7ee      	b.n	800bd78 <__libc_init_array+0xc>
 800bd9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd9e:	4798      	blx	r3
 800bda0:	3601      	adds	r6, #1
 800bda2:	e7f2      	b.n	800bd8a <__libc_init_array+0x1e>
 800bda4:	0800d314 	.word	0x0800d314
 800bda8:	0800d314 	.word	0x0800d314
 800bdac:	0800d314 	.word	0x0800d314
 800bdb0:	0800d318 	.word	0x0800d318

0800bdb4 <__retarget_lock_acquire_recursive>:
 800bdb4:	4770      	bx	lr

0800bdb6 <__retarget_lock_release_recursive>:
 800bdb6:	4770      	bx	lr

0800bdb8 <strcpy>:
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdbe:	f803 2b01 	strb.w	r2, [r3], #1
 800bdc2:	2a00      	cmp	r2, #0
 800bdc4:	d1f9      	bne.n	800bdba <strcpy+0x2>
 800bdc6:	4770      	bx	lr

0800bdc8 <_free_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4605      	mov	r5, r0
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	d040      	beq.n	800be52 <_free_r+0x8a>
 800bdd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd4:	1f0c      	subs	r4, r1, #4
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	bfb8      	it	lt
 800bdda:	18e4      	addlt	r4, r4, r3
 800bddc:	f7ff ff2a 	bl	800bc34 <__malloc_lock>
 800bde0:	4a1c      	ldr	r2, [pc, #112]	; (800be54 <_free_r+0x8c>)
 800bde2:	6813      	ldr	r3, [r2, #0]
 800bde4:	b933      	cbnz	r3, 800bdf4 <_free_r+0x2c>
 800bde6:	6063      	str	r3, [r4, #4]
 800bde8:	6014      	str	r4, [r2, #0]
 800bdea:	4628      	mov	r0, r5
 800bdec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdf0:	f7ff bf26 	b.w	800bc40 <__malloc_unlock>
 800bdf4:	42a3      	cmp	r3, r4
 800bdf6:	d908      	bls.n	800be0a <_free_r+0x42>
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	1821      	adds	r1, r4, r0
 800bdfc:	428b      	cmp	r3, r1
 800bdfe:	bf01      	itttt	eq
 800be00:	6819      	ldreq	r1, [r3, #0]
 800be02:	685b      	ldreq	r3, [r3, #4]
 800be04:	1809      	addeq	r1, r1, r0
 800be06:	6021      	streq	r1, [r4, #0]
 800be08:	e7ed      	b.n	800bde6 <_free_r+0x1e>
 800be0a:	461a      	mov	r2, r3
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	b10b      	cbz	r3, 800be14 <_free_r+0x4c>
 800be10:	42a3      	cmp	r3, r4
 800be12:	d9fa      	bls.n	800be0a <_free_r+0x42>
 800be14:	6811      	ldr	r1, [r2, #0]
 800be16:	1850      	adds	r0, r2, r1
 800be18:	42a0      	cmp	r0, r4
 800be1a:	d10b      	bne.n	800be34 <_free_r+0x6c>
 800be1c:	6820      	ldr	r0, [r4, #0]
 800be1e:	4401      	add	r1, r0
 800be20:	1850      	adds	r0, r2, r1
 800be22:	4283      	cmp	r3, r0
 800be24:	6011      	str	r1, [r2, #0]
 800be26:	d1e0      	bne.n	800bdea <_free_r+0x22>
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4408      	add	r0, r1
 800be2e:	6010      	str	r0, [r2, #0]
 800be30:	6053      	str	r3, [r2, #4]
 800be32:	e7da      	b.n	800bdea <_free_r+0x22>
 800be34:	d902      	bls.n	800be3c <_free_r+0x74>
 800be36:	230c      	movs	r3, #12
 800be38:	602b      	str	r3, [r5, #0]
 800be3a:	e7d6      	b.n	800bdea <_free_r+0x22>
 800be3c:	6820      	ldr	r0, [r4, #0]
 800be3e:	1821      	adds	r1, r4, r0
 800be40:	428b      	cmp	r3, r1
 800be42:	bf01      	itttt	eq
 800be44:	6819      	ldreq	r1, [r3, #0]
 800be46:	685b      	ldreq	r3, [r3, #4]
 800be48:	1809      	addeq	r1, r1, r0
 800be4a:	6021      	streq	r1, [r4, #0]
 800be4c:	6063      	str	r3, [r4, #4]
 800be4e:	6054      	str	r4, [r2, #4]
 800be50:	e7cb      	b.n	800bdea <_free_r+0x22>
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	20000dd4 	.word	0x20000dd4

0800be58 <__ssputs_r>:
 800be58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be5c:	461f      	mov	r7, r3
 800be5e:	688e      	ldr	r6, [r1, #8]
 800be60:	4682      	mov	sl, r0
 800be62:	42be      	cmp	r6, r7
 800be64:	460c      	mov	r4, r1
 800be66:	4690      	mov	r8, r2
 800be68:	680b      	ldr	r3, [r1, #0]
 800be6a:	d82c      	bhi.n	800bec6 <__ssputs_r+0x6e>
 800be6c:	898a      	ldrh	r2, [r1, #12]
 800be6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be72:	d026      	beq.n	800bec2 <__ssputs_r+0x6a>
 800be74:	6965      	ldr	r5, [r4, #20]
 800be76:	6909      	ldr	r1, [r1, #16]
 800be78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be7c:	eba3 0901 	sub.w	r9, r3, r1
 800be80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be84:	1c7b      	adds	r3, r7, #1
 800be86:	444b      	add	r3, r9
 800be88:	106d      	asrs	r5, r5, #1
 800be8a:	429d      	cmp	r5, r3
 800be8c:	bf38      	it	cc
 800be8e:	461d      	movcc	r5, r3
 800be90:	0553      	lsls	r3, r2, #21
 800be92:	d527      	bpl.n	800bee4 <__ssputs_r+0x8c>
 800be94:	4629      	mov	r1, r5
 800be96:	f7ff fe4d 	bl	800bb34 <_malloc_r>
 800be9a:	4606      	mov	r6, r0
 800be9c:	b360      	cbz	r0, 800bef8 <__ssputs_r+0xa0>
 800be9e:	464a      	mov	r2, r9
 800bea0:	6921      	ldr	r1, [r4, #16]
 800bea2:	f000 faed 	bl	800c480 <memcpy>
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800beac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beb0:	81a3      	strh	r3, [r4, #12]
 800beb2:	6126      	str	r6, [r4, #16]
 800beb4:	444e      	add	r6, r9
 800beb6:	6026      	str	r6, [r4, #0]
 800beb8:	463e      	mov	r6, r7
 800beba:	6165      	str	r5, [r4, #20]
 800bebc:	eba5 0509 	sub.w	r5, r5, r9
 800bec0:	60a5      	str	r5, [r4, #8]
 800bec2:	42be      	cmp	r6, r7
 800bec4:	d900      	bls.n	800bec8 <__ssputs_r+0x70>
 800bec6:	463e      	mov	r6, r7
 800bec8:	4632      	mov	r2, r6
 800beca:	4641      	mov	r1, r8
 800becc:	6820      	ldr	r0, [r4, #0]
 800bece:	f000 faaf 	bl	800c430 <memmove>
 800bed2:	2000      	movs	r0, #0
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	1b9b      	subs	r3, r3, r6
 800bed8:	60a3      	str	r3, [r4, #8]
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	4433      	add	r3, r6
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee4:	462a      	mov	r2, r5
 800bee6:	f000 fad9 	bl	800c49c <_realloc_r>
 800beea:	4606      	mov	r6, r0
 800beec:	2800      	cmp	r0, #0
 800beee:	d1e0      	bne.n	800beb2 <__ssputs_r+0x5a>
 800bef0:	4650      	mov	r0, sl
 800bef2:	6921      	ldr	r1, [r4, #16]
 800bef4:	f7ff ff68 	bl	800bdc8 <_free_r>
 800bef8:	230c      	movs	r3, #12
 800befa:	f8ca 3000 	str.w	r3, [sl]
 800befe:	89a3      	ldrh	r3, [r4, #12]
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf08:	81a3      	strh	r3, [r4, #12]
 800bf0a:	e7e9      	b.n	800bee0 <__ssputs_r+0x88>

0800bf0c <_svfiprintf_r>:
 800bf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf10:	4698      	mov	r8, r3
 800bf12:	898b      	ldrh	r3, [r1, #12]
 800bf14:	4607      	mov	r7, r0
 800bf16:	061b      	lsls	r3, r3, #24
 800bf18:	460d      	mov	r5, r1
 800bf1a:	4614      	mov	r4, r2
 800bf1c:	b09d      	sub	sp, #116	; 0x74
 800bf1e:	d50e      	bpl.n	800bf3e <_svfiprintf_r+0x32>
 800bf20:	690b      	ldr	r3, [r1, #16]
 800bf22:	b963      	cbnz	r3, 800bf3e <_svfiprintf_r+0x32>
 800bf24:	2140      	movs	r1, #64	; 0x40
 800bf26:	f7ff fe05 	bl	800bb34 <_malloc_r>
 800bf2a:	6028      	str	r0, [r5, #0]
 800bf2c:	6128      	str	r0, [r5, #16]
 800bf2e:	b920      	cbnz	r0, 800bf3a <_svfiprintf_r+0x2e>
 800bf30:	230c      	movs	r3, #12
 800bf32:	603b      	str	r3, [r7, #0]
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295
 800bf38:	e0d0      	b.n	800c0dc <_svfiprintf_r+0x1d0>
 800bf3a:	2340      	movs	r3, #64	; 0x40
 800bf3c:	616b      	str	r3, [r5, #20]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9309      	str	r3, [sp, #36]	; 0x24
 800bf42:	2320      	movs	r3, #32
 800bf44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf48:	2330      	movs	r3, #48	; 0x30
 800bf4a:	f04f 0901 	mov.w	r9, #1
 800bf4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf52:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c0f4 <_svfiprintf_r+0x1e8>
 800bf56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	469a      	mov	sl, r3
 800bf5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf62:	b10a      	cbz	r2, 800bf68 <_svfiprintf_r+0x5c>
 800bf64:	2a25      	cmp	r2, #37	; 0x25
 800bf66:	d1f9      	bne.n	800bf5c <_svfiprintf_r+0x50>
 800bf68:	ebba 0b04 	subs.w	fp, sl, r4
 800bf6c:	d00b      	beq.n	800bf86 <_svfiprintf_r+0x7a>
 800bf6e:	465b      	mov	r3, fp
 800bf70:	4622      	mov	r2, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	4638      	mov	r0, r7
 800bf76:	f7ff ff6f 	bl	800be58 <__ssputs_r>
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	f000 80a9 	beq.w	800c0d2 <_svfiprintf_r+0x1c6>
 800bf80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf82:	445a      	add	r2, fp
 800bf84:	9209      	str	r2, [sp, #36]	; 0x24
 800bf86:	f89a 3000 	ldrb.w	r3, [sl]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 80a1 	beq.w	800c0d2 <_svfiprintf_r+0x1c6>
 800bf90:	2300      	movs	r3, #0
 800bf92:	f04f 32ff 	mov.w	r2, #4294967295
 800bf96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf9a:	f10a 0a01 	add.w	sl, sl, #1
 800bf9e:	9304      	str	r3, [sp, #16]
 800bfa0:	9307      	str	r3, [sp, #28]
 800bfa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfa6:	931a      	str	r3, [sp, #104]	; 0x68
 800bfa8:	4654      	mov	r4, sl
 800bfaa:	2205      	movs	r2, #5
 800bfac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb0:	4850      	ldr	r0, [pc, #320]	; (800c0f4 <_svfiprintf_r+0x1e8>)
 800bfb2:	f000 fa57 	bl	800c464 <memchr>
 800bfb6:	9a04      	ldr	r2, [sp, #16]
 800bfb8:	b9d8      	cbnz	r0, 800bff2 <_svfiprintf_r+0xe6>
 800bfba:	06d0      	lsls	r0, r2, #27
 800bfbc:	bf44      	itt	mi
 800bfbe:	2320      	movmi	r3, #32
 800bfc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfc4:	0711      	lsls	r1, r2, #28
 800bfc6:	bf44      	itt	mi
 800bfc8:	232b      	movmi	r3, #43	; 0x2b
 800bfca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfce:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd2:	2b2a      	cmp	r3, #42	; 0x2a
 800bfd4:	d015      	beq.n	800c002 <_svfiprintf_r+0xf6>
 800bfd6:	4654      	mov	r4, sl
 800bfd8:	2000      	movs	r0, #0
 800bfda:	f04f 0c0a 	mov.w	ip, #10
 800bfde:	9a07      	ldr	r2, [sp, #28]
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfe6:	3b30      	subs	r3, #48	; 0x30
 800bfe8:	2b09      	cmp	r3, #9
 800bfea:	d94d      	bls.n	800c088 <_svfiprintf_r+0x17c>
 800bfec:	b1b0      	cbz	r0, 800c01c <_svfiprintf_r+0x110>
 800bfee:	9207      	str	r2, [sp, #28]
 800bff0:	e014      	b.n	800c01c <_svfiprintf_r+0x110>
 800bff2:	eba0 0308 	sub.w	r3, r0, r8
 800bff6:	fa09 f303 	lsl.w	r3, r9, r3
 800bffa:	4313      	orrs	r3, r2
 800bffc:	46a2      	mov	sl, r4
 800bffe:	9304      	str	r3, [sp, #16]
 800c000:	e7d2      	b.n	800bfa8 <_svfiprintf_r+0x9c>
 800c002:	9b03      	ldr	r3, [sp, #12]
 800c004:	1d19      	adds	r1, r3, #4
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	9103      	str	r1, [sp, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	bfbb      	ittet	lt
 800c00e:	425b      	neglt	r3, r3
 800c010:	f042 0202 	orrlt.w	r2, r2, #2
 800c014:	9307      	strge	r3, [sp, #28]
 800c016:	9307      	strlt	r3, [sp, #28]
 800c018:	bfb8      	it	lt
 800c01a:	9204      	strlt	r2, [sp, #16]
 800c01c:	7823      	ldrb	r3, [r4, #0]
 800c01e:	2b2e      	cmp	r3, #46	; 0x2e
 800c020:	d10c      	bne.n	800c03c <_svfiprintf_r+0x130>
 800c022:	7863      	ldrb	r3, [r4, #1]
 800c024:	2b2a      	cmp	r3, #42	; 0x2a
 800c026:	d134      	bne.n	800c092 <_svfiprintf_r+0x186>
 800c028:	9b03      	ldr	r3, [sp, #12]
 800c02a:	3402      	adds	r4, #2
 800c02c:	1d1a      	adds	r2, r3, #4
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	9203      	str	r2, [sp, #12]
 800c032:	2b00      	cmp	r3, #0
 800c034:	bfb8      	it	lt
 800c036:	f04f 33ff 	movlt.w	r3, #4294967295
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c0f8 <_svfiprintf_r+0x1ec>
 800c040:	2203      	movs	r2, #3
 800c042:	4650      	mov	r0, sl
 800c044:	7821      	ldrb	r1, [r4, #0]
 800c046:	f000 fa0d 	bl	800c464 <memchr>
 800c04a:	b138      	cbz	r0, 800c05c <_svfiprintf_r+0x150>
 800c04c:	2240      	movs	r2, #64	; 0x40
 800c04e:	9b04      	ldr	r3, [sp, #16]
 800c050:	eba0 000a 	sub.w	r0, r0, sl
 800c054:	4082      	lsls	r2, r0
 800c056:	4313      	orrs	r3, r2
 800c058:	3401      	adds	r4, #1
 800c05a:	9304      	str	r3, [sp, #16]
 800c05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c060:	2206      	movs	r2, #6
 800c062:	4826      	ldr	r0, [pc, #152]	; (800c0fc <_svfiprintf_r+0x1f0>)
 800c064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c068:	f000 f9fc 	bl	800c464 <memchr>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d038      	beq.n	800c0e2 <_svfiprintf_r+0x1d6>
 800c070:	4b23      	ldr	r3, [pc, #140]	; (800c100 <_svfiprintf_r+0x1f4>)
 800c072:	bb1b      	cbnz	r3, 800c0bc <_svfiprintf_r+0x1b0>
 800c074:	9b03      	ldr	r3, [sp, #12]
 800c076:	3307      	adds	r3, #7
 800c078:	f023 0307 	bic.w	r3, r3, #7
 800c07c:	3308      	adds	r3, #8
 800c07e:	9303      	str	r3, [sp, #12]
 800c080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c082:	4433      	add	r3, r6
 800c084:	9309      	str	r3, [sp, #36]	; 0x24
 800c086:	e768      	b.n	800bf5a <_svfiprintf_r+0x4e>
 800c088:	460c      	mov	r4, r1
 800c08a:	2001      	movs	r0, #1
 800c08c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c090:	e7a6      	b.n	800bfe0 <_svfiprintf_r+0xd4>
 800c092:	2300      	movs	r3, #0
 800c094:	f04f 0c0a 	mov.w	ip, #10
 800c098:	4619      	mov	r1, r3
 800c09a:	3401      	adds	r4, #1
 800c09c:	9305      	str	r3, [sp, #20]
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0a4:	3a30      	subs	r2, #48	; 0x30
 800c0a6:	2a09      	cmp	r2, #9
 800c0a8:	d903      	bls.n	800c0b2 <_svfiprintf_r+0x1a6>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d0c6      	beq.n	800c03c <_svfiprintf_r+0x130>
 800c0ae:	9105      	str	r1, [sp, #20]
 800c0b0:	e7c4      	b.n	800c03c <_svfiprintf_r+0x130>
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0ba:	e7f0      	b.n	800c09e <_svfiprintf_r+0x192>
 800c0bc:	ab03      	add	r3, sp, #12
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	462a      	mov	r2, r5
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	4b0f      	ldr	r3, [pc, #60]	; (800c104 <_svfiprintf_r+0x1f8>)
 800c0c6:	a904      	add	r1, sp, #16
 800c0c8:	f3af 8000 	nop.w
 800c0cc:	1c42      	adds	r2, r0, #1
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	d1d6      	bne.n	800c080 <_svfiprintf_r+0x174>
 800c0d2:	89ab      	ldrh	r3, [r5, #12]
 800c0d4:	065b      	lsls	r3, r3, #25
 800c0d6:	f53f af2d 	bmi.w	800bf34 <_svfiprintf_r+0x28>
 800c0da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0dc:	b01d      	add	sp, #116	; 0x74
 800c0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e2:	ab03      	add	r3, sp, #12
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	462a      	mov	r2, r5
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	4b06      	ldr	r3, [pc, #24]	; (800c104 <_svfiprintf_r+0x1f8>)
 800c0ec:	a904      	add	r1, sp, #16
 800c0ee:	f000 f87d 	bl	800c1ec <_printf_i>
 800c0f2:	e7eb      	b.n	800c0cc <_svfiprintf_r+0x1c0>
 800c0f4:	0800d2df 	.word	0x0800d2df
 800c0f8:	0800d2e5 	.word	0x0800d2e5
 800c0fc:	0800d2e9 	.word	0x0800d2e9
 800c100:	00000000 	.word	0x00000000
 800c104:	0800be59 	.word	0x0800be59

0800c108 <_printf_common>:
 800c108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c10c:	4616      	mov	r6, r2
 800c10e:	4699      	mov	r9, r3
 800c110:	688a      	ldr	r2, [r1, #8]
 800c112:	690b      	ldr	r3, [r1, #16]
 800c114:	4607      	mov	r7, r0
 800c116:	4293      	cmp	r3, r2
 800c118:	bfb8      	it	lt
 800c11a:	4613      	movlt	r3, r2
 800c11c:	6033      	str	r3, [r6, #0]
 800c11e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c122:	460c      	mov	r4, r1
 800c124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c128:	b10a      	cbz	r2, 800c12e <_printf_common+0x26>
 800c12a:	3301      	adds	r3, #1
 800c12c:	6033      	str	r3, [r6, #0]
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	0699      	lsls	r1, r3, #26
 800c132:	bf42      	ittt	mi
 800c134:	6833      	ldrmi	r3, [r6, #0]
 800c136:	3302      	addmi	r3, #2
 800c138:	6033      	strmi	r3, [r6, #0]
 800c13a:	6825      	ldr	r5, [r4, #0]
 800c13c:	f015 0506 	ands.w	r5, r5, #6
 800c140:	d106      	bne.n	800c150 <_printf_common+0x48>
 800c142:	f104 0a19 	add.w	sl, r4, #25
 800c146:	68e3      	ldr	r3, [r4, #12]
 800c148:	6832      	ldr	r2, [r6, #0]
 800c14a:	1a9b      	subs	r3, r3, r2
 800c14c:	42ab      	cmp	r3, r5
 800c14e:	dc2b      	bgt.n	800c1a8 <_printf_common+0xa0>
 800c150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c154:	1e13      	subs	r3, r2, #0
 800c156:	6822      	ldr	r2, [r4, #0]
 800c158:	bf18      	it	ne
 800c15a:	2301      	movne	r3, #1
 800c15c:	0692      	lsls	r2, r2, #26
 800c15e:	d430      	bmi.n	800c1c2 <_printf_common+0xba>
 800c160:	4649      	mov	r1, r9
 800c162:	4638      	mov	r0, r7
 800c164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c168:	47c0      	blx	r8
 800c16a:	3001      	adds	r0, #1
 800c16c:	d023      	beq.n	800c1b6 <_printf_common+0xae>
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	6922      	ldr	r2, [r4, #16]
 800c172:	f003 0306 	and.w	r3, r3, #6
 800c176:	2b04      	cmp	r3, #4
 800c178:	bf14      	ite	ne
 800c17a:	2500      	movne	r5, #0
 800c17c:	6833      	ldreq	r3, [r6, #0]
 800c17e:	f04f 0600 	mov.w	r6, #0
 800c182:	bf08      	it	eq
 800c184:	68e5      	ldreq	r5, [r4, #12]
 800c186:	f104 041a 	add.w	r4, r4, #26
 800c18a:	bf08      	it	eq
 800c18c:	1aed      	subeq	r5, r5, r3
 800c18e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c192:	bf08      	it	eq
 800c194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c198:	4293      	cmp	r3, r2
 800c19a:	bfc4      	itt	gt
 800c19c:	1a9b      	subgt	r3, r3, r2
 800c19e:	18ed      	addgt	r5, r5, r3
 800c1a0:	42b5      	cmp	r5, r6
 800c1a2:	d11a      	bne.n	800c1da <_printf_common+0xd2>
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	e008      	b.n	800c1ba <_printf_common+0xb2>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	4652      	mov	r2, sl
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	47c0      	blx	r8
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	d103      	bne.n	800c1be <_printf_common+0xb6>
 800c1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1be:	3501      	adds	r5, #1
 800c1c0:	e7c1      	b.n	800c146 <_printf_common+0x3e>
 800c1c2:	2030      	movs	r0, #48	; 0x30
 800c1c4:	18e1      	adds	r1, r4, r3
 800c1c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1d0:	4422      	add	r2, r4
 800c1d2:	3302      	adds	r3, #2
 800c1d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1d8:	e7c2      	b.n	800c160 <_printf_common+0x58>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4622      	mov	r2, r4
 800c1de:	4649      	mov	r1, r9
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	47c0      	blx	r8
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	d0e6      	beq.n	800c1b6 <_printf_common+0xae>
 800c1e8:	3601      	adds	r6, #1
 800c1ea:	e7d9      	b.n	800c1a0 <_printf_common+0x98>

0800c1ec <_printf_i>:
 800c1ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f0:	7e0f      	ldrb	r7, [r1, #24]
 800c1f2:	4691      	mov	r9, r2
 800c1f4:	2f78      	cmp	r7, #120	; 0x78
 800c1f6:	4680      	mov	r8, r0
 800c1f8:	460c      	mov	r4, r1
 800c1fa:	469a      	mov	sl, r3
 800c1fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c202:	d807      	bhi.n	800c214 <_printf_i+0x28>
 800c204:	2f62      	cmp	r7, #98	; 0x62
 800c206:	d80a      	bhi.n	800c21e <_printf_i+0x32>
 800c208:	2f00      	cmp	r7, #0
 800c20a:	f000 80d5 	beq.w	800c3b8 <_printf_i+0x1cc>
 800c20e:	2f58      	cmp	r7, #88	; 0x58
 800c210:	f000 80c1 	beq.w	800c396 <_printf_i+0x1aa>
 800c214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c21c:	e03a      	b.n	800c294 <_printf_i+0xa8>
 800c21e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c222:	2b15      	cmp	r3, #21
 800c224:	d8f6      	bhi.n	800c214 <_printf_i+0x28>
 800c226:	a101      	add	r1, pc, #4	; (adr r1, 800c22c <_printf_i+0x40>)
 800c228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c22c:	0800c285 	.word	0x0800c285
 800c230:	0800c299 	.word	0x0800c299
 800c234:	0800c215 	.word	0x0800c215
 800c238:	0800c215 	.word	0x0800c215
 800c23c:	0800c215 	.word	0x0800c215
 800c240:	0800c215 	.word	0x0800c215
 800c244:	0800c299 	.word	0x0800c299
 800c248:	0800c215 	.word	0x0800c215
 800c24c:	0800c215 	.word	0x0800c215
 800c250:	0800c215 	.word	0x0800c215
 800c254:	0800c215 	.word	0x0800c215
 800c258:	0800c39f 	.word	0x0800c39f
 800c25c:	0800c2c5 	.word	0x0800c2c5
 800c260:	0800c359 	.word	0x0800c359
 800c264:	0800c215 	.word	0x0800c215
 800c268:	0800c215 	.word	0x0800c215
 800c26c:	0800c3c1 	.word	0x0800c3c1
 800c270:	0800c215 	.word	0x0800c215
 800c274:	0800c2c5 	.word	0x0800c2c5
 800c278:	0800c215 	.word	0x0800c215
 800c27c:	0800c215 	.word	0x0800c215
 800c280:	0800c361 	.word	0x0800c361
 800c284:	682b      	ldr	r3, [r5, #0]
 800c286:	1d1a      	adds	r2, r3, #4
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	602a      	str	r2, [r5, #0]
 800c28c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c294:	2301      	movs	r3, #1
 800c296:	e0a0      	b.n	800c3da <_printf_i+0x1ee>
 800c298:	6820      	ldr	r0, [r4, #0]
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	0607      	lsls	r7, r0, #24
 800c29e:	f103 0104 	add.w	r1, r3, #4
 800c2a2:	6029      	str	r1, [r5, #0]
 800c2a4:	d501      	bpl.n	800c2aa <_printf_i+0xbe>
 800c2a6:	681e      	ldr	r6, [r3, #0]
 800c2a8:	e003      	b.n	800c2b2 <_printf_i+0xc6>
 800c2aa:	0646      	lsls	r6, r0, #25
 800c2ac:	d5fb      	bpl.n	800c2a6 <_printf_i+0xba>
 800c2ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c2b2:	2e00      	cmp	r6, #0
 800c2b4:	da03      	bge.n	800c2be <_printf_i+0xd2>
 800c2b6:	232d      	movs	r3, #45	; 0x2d
 800c2b8:	4276      	negs	r6, r6
 800c2ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2be:	230a      	movs	r3, #10
 800c2c0:	4859      	ldr	r0, [pc, #356]	; (800c428 <_printf_i+0x23c>)
 800c2c2:	e012      	b.n	800c2ea <_printf_i+0xfe>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	6820      	ldr	r0, [r4, #0]
 800c2c8:	1d19      	adds	r1, r3, #4
 800c2ca:	6029      	str	r1, [r5, #0]
 800c2cc:	0605      	lsls	r5, r0, #24
 800c2ce:	d501      	bpl.n	800c2d4 <_printf_i+0xe8>
 800c2d0:	681e      	ldr	r6, [r3, #0]
 800c2d2:	e002      	b.n	800c2da <_printf_i+0xee>
 800c2d4:	0641      	lsls	r1, r0, #25
 800c2d6:	d5fb      	bpl.n	800c2d0 <_printf_i+0xe4>
 800c2d8:	881e      	ldrh	r6, [r3, #0]
 800c2da:	2f6f      	cmp	r7, #111	; 0x6f
 800c2dc:	bf0c      	ite	eq
 800c2de:	2308      	moveq	r3, #8
 800c2e0:	230a      	movne	r3, #10
 800c2e2:	4851      	ldr	r0, [pc, #324]	; (800c428 <_printf_i+0x23c>)
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2ea:	6865      	ldr	r5, [r4, #4]
 800c2ec:	2d00      	cmp	r5, #0
 800c2ee:	bfa8      	it	ge
 800c2f0:	6821      	ldrge	r1, [r4, #0]
 800c2f2:	60a5      	str	r5, [r4, #8]
 800c2f4:	bfa4      	itt	ge
 800c2f6:	f021 0104 	bicge.w	r1, r1, #4
 800c2fa:	6021      	strge	r1, [r4, #0]
 800c2fc:	b90e      	cbnz	r6, 800c302 <_printf_i+0x116>
 800c2fe:	2d00      	cmp	r5, #0
 800c300:	d04b      	beq.n	800c39a <_printf_i+0x1ae>
 800c302:	4615      	mov	r5, r2
 800c304:	fbb6 f1f3 	udiv	r1, r6, r3
 800c308:	fb03 6711 	mls	r7, r3, r1, r6
 800c30c:	5dc7      	ldrb	r7, [r0, r7]
 800c30e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c312:	4637      	mov	r7, r6
 800c314:	42bb      	cmp	r3, r7
 800c316:	460e      	mov	r6, r1
 800c318:	d9f4      	bls.n	800c304 <_printf_i+0x118>
 800c31a:	2b08      	cmp	r3, #8
 800c31c:	d10b      	bne.n	800c336 <_printf_i+0x14a>
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	07de      	lsls	r6, r3, #31
 800c322:	d508      	bpl.n	800c336 <_printf_i+0x14a>
 800c324:	6923      	ldr	r3, [r4, #16]
 800c326:	6861      	ldr	r1, [r4, #4]
 800c328:	4299      	cmp	r1, r3
 800c32a:	bfde      	ittt	le
 800c32c:	2330      	movle	r3, #48	; 0x30
 800c32e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c332:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c336:	1b52      	subs	r2, r2, r5
 800c338:	6122      	str	r2, [r4, #16]
 800c33a:	464b      	mov	r3, r9
 800c33c:	4621      	mov	r1, r4
 800c33e:	4640      	mov	r0, r8
 800c340:	f8cd a000 	str.w	sl, [sp]
 800c344:	aa03      	add	r2, sp, #12
 800c346:	f7ff fedf 	bl	800c108 <_printf_common>
 800c34a:	3001      	adds	r0, #1
 800c34c:	d14a      	bne.n	800c3e4 <_printf_i+0x1f8>
 800c34e:	f04f 30ff 	mov.w	r0, #4294967295
 800c352:	b004      	add	sp, #16
 800c354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	f043 0320 	orr.w	r3, r3, #32
 800c35e:	6023      	str	r3, [r4, #0]
 800c360:	2778      	movs	r7, #120	; 0x78
 800c362:	4832      	ldr	r0, [pc, #200]	; (800c42c <_printf_i+0x240>)
 800c364:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	6829      	ldr	r1, [r5, #0]
 800c36c:	061f      	lsls	r7, r3, #24
 800c36e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c372:	d402      	bmi.n	800c37a <_printf_i+0x18e>
 800c374:	065f      	lsls	r7, r3, #25
 800c376:	bf48      	it	mi
 800c378:	b2b6      	uxthmi	r6, r6
 800c37a:	07df      	lsls	r7, r3, #31
 800c37c:	bf48      	it	mi
 800c37e:	f043 0320 	orrmi.w	r3, r3, #32
 800c382:	6029      	str	r1, [r5, #0]
 800c384:	bf48      	it	mi
 800c386:	6023      	strmi	r3, [r4, #0]
 800c388:	b91e      	cbnz	r6, 800c392 <_printf_i+0x1a6>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	f023 0320 	bic.w	r3, r3, #32
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	2310      	movs	r3, #16
 800c394:	e7a6      	b.n	800c2e4 <_printf_i+0xf8>
 800c396:	4824      	ldr	r0, [pc, #144]	; (800c428 <_printf_i+0x23c>)
 800c398:	e7e4      	b.n	800c364 <_printf_i+0x178>
 800c39a:	4615      	mov	r5, r2
 800c39c:	e7bd      	b.n	800c31a <_printf_i+0x12e>
 800c39e:	682b      	ldr	r3, [r5, #0]
 800c3a0:	6826      	ldr	r6, [r4, #0]
 800c3a2:	1d18      	adds	r0, r3, #4
 800c3a4:	6961      	ldr	r1, [r4, #20]
 800c3a6:	6028      	str	r0, [r5, #0]
 800c3a8:	0635      	lsls	r5, r6, #24
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	d501      	bpl.n	800c3b2 <_printf_i+0x1c6>
 800c3ae:	6019      	str	r1, [r3, #0]
 800c3b0:	e002      	b.n	800c3b8 <_printf_i+0x1cc>
 800c3b2:	0670      	lsls	r0, r6, #25
 800c3b4:	d5fb      	bpl.n	800c3ae <_printf_i+0x1c2>
 800c3b6:	8019      	strh	r1, [r3, #0]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4615      	mov	r5, r2
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	e7bc      	b.n	800c33a <_printf_i+0x14e>
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	1d1a      	adds	r2, r3, #4
 800c3c6:	602a      	str	r2, [r5, #0]
 800c3c8:	681d      	ldr	r5, [r3, #0]
 800c3ca:	6862      	ldr	r2, [r4, #4]
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f000 f849 	bl	800c464 <memchr>
 800c3d2:	b108      	cbz	r0, 800c3d8 <_printf_i+0x1ec>
 800c3d4:	1b40      	subs	r0, r0, r5
 800c3d6:	6060      	str	r0, [r4, #4]
 800c3d8:	6863      	ldr	r3, [r4, #4]
 800c3da:	6123      	str	r3, [r4, #16]
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3e2:	e7aa      	b.n	800c33a <_printf_i+0x14e>
 800c3e4:	462a      	mov	r2, r5
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	4640      	mov	r0, r8
 800c3ea:	6923      	ldr	r3, [r4, #16]
 800c3ec:	47d0      	blx	sl
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	d0ad      	beq.n	800c34e <_printf_i+0x162>
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	079b      	lsls	r3, r3, #30
 800c3f6:	d413      	bmi.n	800c420 <_printf_i+0x234>
 800c3f8:	68e0      	ldr	r0, [r4, #12]
 800c3fa:	9b03      	ldr	r3, [sp, #12]
 800c3fc:	4298      	cmp	r0, r3
 800c3fe:	bfb8      	it	lt
 800c400:	4618      	movlt	r0, r3
 800c402:	e7a6      	b.n	800c352 <_printf_i+0x166>
 800c404:	2301      	movs	r3, #1
 800c406:	4632      	mov	r2, r6
 800c408:	4649      	mov	r1, r9
 800c40a:	4640      	mov	r0, r8
 800c40c:	47d0      	blx	sl
 800c40e:	3001      	adds	r0, #1
 800c410:	d09d      	beq.n	800c34e <_printf_i+0x162>
 800c412:	3501      	adds	r5, #1
 800c414:	68e3      	ldr	r3, [r4, #12]
 800c416:	9903      	ldr	r1, [sp, #12]
 800c418:	1a5b      	subs	r3, r3, r1
 800c41a:	42ab      	cmp	r3, r5
 800c41c:	dcf2      	bgt.n	800c404 <_printf_i+0x218>
 800c41e:	e7eb      	b.n	800c3f8 <_printf_i+0x20c>
 800c420:	2500      	movs	r5, #0
 800c422:	f104 0619 	add.w	r6, r4, #25
 800c426:	e7f5      	b.n	800c414 <_printf_i+0x228>
 800c428:	0800d2f0 	.word	0x0800d2f0
 800c42c:	0800d301 	.word	0x0800d301

0800c430 <memmove>:
 800c430:	4288      	cmp	r0, r1
 800c432:	b510      	push	{r4, lr}
 800c434:	eb01 0402 	add.w	r4, r1, r2
 800c438:	d902      	bls.n	800c440 <memmove+0x10>
 800c43a:	4284      	cmp	r4, r0
 800c43c:	4623      	mov	r3, r4
 800c43e:	d807      	bhi.n	800c450 <memmove+0x20>
 800c440:	1e43      	subs	r3, r0, #1
 800c442:	42a1      	cmp	r1, r4
 800c444:	d008      	beq.n	800c458 <memmove+0x28>
 800c446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c44a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c44e:	e7f8      	b.n	800c442 <memmove+0x12>
 800c450:	4601      	mov	r1, r0
 800c452:	4402      	add	r2, r0
 800c454:	428a      	cmp	r2, r1
 800c456:	d100      	bne.n	800c45a <memmove+0x2a>
 800c458:	bd10      	pop	{r4, pc}
 800c45a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c45e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c462:	e7f7      	b.n	800c454 <memmove+0x24>

0800c464 <memchr>:
 800c464:	4603      	mov	r3, r0
 800c466:	b510      	push	{r4, lr}
 800c468:	b2c9      	uxtb	r1, r1
 800c46a:	4402      	add	r2, r0
 800c46c:	4293      	cmp	r3, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	d101      	bne.n	800c476 <memchr+0x12>
 800c472:	2000      	movs	r0, #0
 800c474:	e003      	b.n	800c47e <memchr+0x1a>
 800c476:	7804      	ldrb	r4, [r0, #0]
 800c478:	3301      	adds	r3, #1
 800c47a:	428c      	cmp	r4, r1
 800c47c:	d1f6      	bne.n	800c46c <memchr+0x8>
 800c47e:	bd10      	pop	{r4, pc}

0800c480 <memcpy>:
 800c480:	440a      	add	r2, r1
 800c482:	4291      	cmp	r1, r2
 800c484:	f100 33ff 	add.w	r3, r0, #4294967295
 800c488:	d100      	bne.n	800c48c <memcpy+0xc>
 800c48a:	4770      	bx	lr
 800c48c:	b510      	push	{r4, lr}
 800c48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c492:	4291      	cmp	r1, r2
 800c494:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c498:	d1f9      	bne.n	800c48e <memcpy+0xe>
 800c49a:	bd10      	pop	{r4, pc}

0800c49c <_realloc_r>:
 800c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	4614      	mov	r4, r2
 800c4a4:	460e      	mov	r6, r1
 800c4a6:	b921      	cbnz	r1, 800c4b2 <_realloc_r+0x16>
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ae:	f7ff bb41 	b.w	800bb34 <_malloc_r>
 800c4b2:	b92a      	cbnz	r2, 800c4c0 <_realloc_r+0x24>
 800c4b4:	f7ff fc88 	bl	800bdc8 <_free_r>
 800c4b8:	4625      	mov	r5, r4
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c0:	f000 f81b 	bl	800c4fa <_malloc_usable_size_r>
 800c4c4:	4284      	cmp	r4, r0
 800c4c6:	4607      	mov	r7, r0
 800c4c8:	d802      	bhi.n	800c4d0 <_realloc_r+0x34>
 800c4ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4ce:	d812      	bhi.n	800c4f6 <_realloc_r+0x5a>
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	f7ff fb2e 	bl	800bb34 <_malloc_r>
 800c4d8:	4605      	mov	r5, r0
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d0ed      	beq.n	800c4ba <_realloc_r+0x1e>
 800c4de:	42bc      	cmp	r4, r7
 800c4e0:	4622      	mov	r2, r4
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	bf28      	it	cs
 800c4e6:	463a      	movcs	r2, r7
 800c4e8:	f7ff ffca 	bl	800c480 <memcpy>
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	f7ff fc6a 	bl	800bdc8 <_free_r>
 800c4f4:	e7e1      	b.n	800c4ba <_realloc_r+0x1e>
 800c4f6:	4635      	mov	r5, r6
 800c4f8:	e7df      	b.n	800c4ba <_realloc_r+0x1e>

0800c4fa <_malloc_usable_size_r>:
 800c4fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4fe:	1f18      	subs	r0, r3, #4
 800c500:	2b00      	cmp	r3, #0
 800c502:	bfbc      	itt	lt
 800c504:	580b      	ldrlt	r3, [r1, r0]
 800c506:	18c0      	addlt	r0, r0, r3
 800c508:	4770      	bx	lr
	...

0800c50c <_init>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	bf00      	nop
 800c510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c512:	bc08      	pop	{r3}
 800c514:	469e      	mov	lr, r3
 800c516:	4770      	bx	lr

0800c518 <_fini>:
 800c518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51a:	bf00      	nop
 800c51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c51e:	bc08      	pop	{r3}
 800c520:	469e      	mov	lr, r3
 800c522:	4770      	bx	lr
