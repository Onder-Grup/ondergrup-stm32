
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcb0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe4  0800de94  0800de94  0001de94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee78  0800ee78  000209fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee78  0800ee78  000209fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee78  0800ee78  000209fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee78  0800ee78  0001ee78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee7c  0800ee7c  0001ee7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009fc  20000000  0800ee80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  200009fc  0800f87c  000209fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000130c  0800f87c  0002130c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a25  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180f3  00000000  00000000  00020a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b1  00000000  00000000  00038b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e97  00000000  00000000  0003d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c85a  00000000  00000000  0003e26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb02  00000000  00000000  0005aac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ff77  00000000  00000000  000775cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d4  00000000  00000000  00117544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009fc 	.word	0x200009fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800de7c 	.word	0x0800de7c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a00 	.word	0x20000a00
 8000220:	0800de7c 	.word	0x0800de7c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f00a fc02 	bl	800aa58 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f009 fa7a 	bl	8009750 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000a18 	.word	0x20000a18
 80004bc:	200010d8 	.word	0x200010d8
 80004c0:	20000ac5 	.word	0x20000ac5
 80004c4:	20000aed 	.word	0x20000aed
 80004c8:	20000af0 	.word	0x20000af0
 80004cc:	20000af1 	.word	0x20000af1
 80004d0:	20000af2 	.word	0x20000af2
 80004d4:	20000af3 	.word	0x20000af3
 80004d8:	20000af4 	.word	0x20000af4
 80004dc:	20000af5 	.word	0x20000af5
 80004e0:	20000b05 	.word	0x20000b05
 80004e4:	20000af6 	.word	0x20000af6
 80004e8:	20000b06 	.word	0x20000b06
 80004ec:	20000af7 	.word	0x20000af7
 80004f0:	20000b07 	.word	0x20000b07
 80004f4:	20000afa 	.word	0x20000afa
 80004f8:	20000afb 	.word	0x20000afb
 80004fc:	20000afc 	.word	0x20000afc
 8000500:	20000afd 	.word	0x20000afd
 8000504:	20000afe 	.word	0x20000afe
 8000508:	20000aff 	.word	0x20000aff
 800050c:	20000b00 	.word	0x20000b00
 8000510:	20000b01 	.word	0x20000b01
 8000514:	20000b02 	.word	0x20000b02
 8000518:	20000b03 	.word	0x20000b03
 800051c:	20000b04 	.word	0x20000b04
 8000520:	20000b08 	.word	0x20000b08
 8000524:	20000b0a 	.word	0x20000b0a
 8000528:	20000ae8 	.word	0x20000ae8
 800052c:	20000ae9 	.word	0x20000ae9
 8000530:	20000aea 	.word	0x20000aea
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000aeb 	.word	0x20000aeb
 8000540:	20000b0d 	.word	0x20000b0d
 8000544:	20000b0b 	.word	0x20000b0b
 8000548:	20000af9 	.word	0x20000af9
 800054c:	20000b0c 	.word	0x20000b0c
 8000550:	20000af8 	.word	0x20000af8
 8000554:	20000b0e 	.word	0x20000b0e
 8000558:	20000b0f 	.word	0x20000b0f
 800055c:	20000b10 	.word	0x20000b10
 8000560:	20000b11 	.word	0x20000b11
 8000564:	20000b12 	.word	0x20000b12
 8000568:	20000b13 	.word	0x20000b13
 800056c:	20000b14 	.word	0x20000b14
 8000570:	20000b15 	.word	0x20000b15
 8000574:	20000b16 	.word	0x20000b16
 8000578:	20000b17 	.word	0x20000b17
 800057c:	20000ac4 	.word	0x20000ac4
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	; (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	; (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	; (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	; (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	; (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	; (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	; (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	; (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	; (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	; (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	; (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	; (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f009 f848 	bl	8009750 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f009 f842 	bl	8009750 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f009 f83c 	bl	8009750 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 fbcb 	bl	8006e78 <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000b05 	.word	0x20000b05
 80006ec:	20000af6 	.word	0x20000af6
 80006f0:	20000b06 	.word	0x20000b06
 80006f4:	20000af7 	.word	0x20000af7
 80006f8:	20000af9 	.word	0x20000af9
 80006fc:	20000b07 	.word	0x20000b07
 8000700:	20000afa 	.word	0x20000afa
 8000704:	20000afb 	.word	0x20000afb
 8000708:	20000afc 	.word	0x20000afc
 800070c:	20000afd 	.word	0x20000afd
 8000710:	20000afe 	.word	0x20000afe
 8000714:	20000aff 	.word	0x20000aff
 8000718:	20000b00 	.word	0x20000b00
 800071c:	20000b01 	.word	0x20000b01
 8000720:	20000b02 	.word	0x20000b02
 8000724:	20000b03 	.word	0x20000b03
 8000728:	20000b04 	.word	0x20000b04
 800072c:	20000b08 	.word	0x20000b08
 8000730:	20000b0a 	.word	0x20000b0a
 8000734:	20000b0c 	.word	0x20000b0c
 8000738:	20000b0d 	.word	0x20000b0d
 800073c:	20000b0b 	.word	0x20000b0b

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	; 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	; (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	; (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	; (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	; (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	; 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000a18 	.word	0x20000a18
 8000828:	20000010 	.word	0x20000010
 800082c:	20000a90 	.word	0x20000a90
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20000a9c 	.word	0x20000a9c
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20000ab0 	.word	0x20000ab0

08000844 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b09f      	sub	sp, #124	; 0x7c
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000850:	4948      	ldr	r1, [pc, #288]	; (8000974 <ESP8266_Init+0x130>)
 8000852:	4849      	ldr	r0, [pc, #292]	; (8000978 <ESP8266_Init+0x134>)
 8000854:	f00c fe8a 	bl	800d56c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000858:	4847      	ldr	r0, [pc, #284]	; (8000978 <ESP8266_Init+0x134>)
 800085a:	f7ff fce3 	bl	8000224 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29b      	uxth	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	4944      	ldr	r1, [pc, #272]	; (8000978 <ESP8266_Init+0x134>)
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f00c f83e 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f008 ff6e 	bl	8009750 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000874:	4941      	ldr	r1, [pc, #260]	; (800097c <ESP8266_Init+0x138>)
 8000876:	4840      	ldr	r0, [pc, #256]	; (8000978 <ESP8266_Init+0x134>)
 8000878:	f00c fe78 	bl	800d56c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800087c:	483e      	ldr	r0, [pc, #248]	; (8000978 <ESP8266_Init+0x134>)
 800087e:	f7ff fcd1 	bl	8000224 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	493b      	ldr	r1, [pc, #236]	; (8000978 <ESP8266_Init+0x134>)
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f00c f82c 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000894:	f008 ff5c 	bl	8009750 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000898:	4939      	ldr	r1, [pc, #228]	; (8000980 <ESP8266_Init+0x13c>)
 800089a:	4837      	ldr	r0, [pc, #220]	; (8000978 <ESP8266_Init+0x134>)
 800089c:	f00c fe66 	bl	800d56c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008a0:	4835      	ldr	r0, [pc, #212]	; (8000978 <ESP8266_Init+0x134>)
 80008a2:	f7ff fcbf 	bl	8000224 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	4932      	ldr	r1, [pc, #200]	; (8000978 <ESP8266_Init+0x134>)
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f00c f81a 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b8:	f008 ff4a 	bl	8009750 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008bc:	4931      	ldr	r1, [pc, #196]	; (8000984 <ESP8266_Init+0x140>)
 80008be:	482e      	ldr	r0, [pc, #184]	; (8000978 <ESP8266_Init+0x134>)
 80008c0:	f00c fe54 	bl	800d56c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008c4:	482c      	ldr	r0, [pc, #176]	; (8000978 <ESP8266_Init+0x134>)
 80008c6:	f7ff fcad 	bl	8000224 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	4929      	ldr	r1, [pc, #164]	; (8000978 <ESP8266_Init+0x134>)
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f00c f808 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008dc:	f008 ff38 	bl	8009750 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <ESP8266_Init+0x144>)
 80008e6:	461c      	mov	r4, r3
 80008e8:	4613      	mov	r3, r2
 80008ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ec:	c407      	stmia	r4!, {r0, r1, r2}
 80008ee:	8023      	strh	r3, [r4, #0]
 80008f0:	3402      	adds	r4, #2
 80008f2:	0c1b      	lsrs	r3, r3, #16
 80008f4:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00c fe97 	bl	800d630 <strcat>
	strcat(str, "\",\"");
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc8c 	bl	8000224 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4413      	add	r3, r2
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <ESP8266_Init+0x148>)
 8000918:	6810      	ldr	r0, [r2, #0]
 800091a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	f00c fe84 	bl	800d630 <strcat>
	strcat(str, "\"\r\n");
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc79 	bl	8000224 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4413      	add	r3, r2
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <ESP8266_Init+0x14c>)
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	461a      	mov	r2, r3
 8000948:	4912      	ldr	r1, [pc, #72]	; (8000994 <ESP8266_Init+0x150>)
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <ESP8266_Init+0x134>)
 800094c:	f00c fe0e 	bl	800d56c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <ESP8266_Init+0x134>)
 8000952:	f7ff fc67 	bl	8000224 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29b      	uxth	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <ESP8266_Init+0x134>)
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f00b ffc2 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000964:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000968:	f008 fef2 	bl	8009750 <HAL_Delay>
}
 800096c:	bf00      	nop
 800096e:	377c      	adds	r7, #124	; 0x7c
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	0800de94 	.word	0x0800de94
 8000978:	20000b50 	.word	0x20000b50
 800097c:	0800dea4 	.word	0x0800dea4
 8000980:	0800deb0 	.word	0x0800deb0
 8000984:	0800deb8 	.word	0x0800deb8
 8000988:	0800dec8 	.word	0x0800dec8
 800098c:	0800ded8 	.word	0x0800ded8
 8000990:	0800dedc 	.word	0x0800dedc
 8000994:	0800dee0 	.word	0x0800dee0

08000998 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800099e:	af04      	add	r7, sp, #16
 80009a0:	f507 7414 	add.w	r4, r7, #592	; 0x250
 80009a4:	f5a4 7411 	sub.w	r4, r4, #580	; 0x244
 80009a8:	6020      	str	r0, [r4, #0]
 80009aa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80009ae:	f5a0 7012 	sub.w	r0, r0, #584	; 0x248
 80009b2:	6001      	str	r1, [r0, #0]
 80009b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80009b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80009bc:	600a      	str	r2, [r1, #0]
 80009be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80009c2:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 80009c6:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 80009c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009cc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80009d0:	f107 0014 	add.w	r0, r7, #20
 80009d4:	220c      	movs	r2, #12
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	f00c fe39 	bl	800d64e <strncpy>
	subMachineID[12] = '\0';
 80009dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80009e0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009e8:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <sendMachineData+0x128>)
 80009ea:	4936      	ldr	r1, [pc, #216]	; (8000ac4 <sendMachineData+0x12c>)
 80009ec:	4836      	ldr	r0, [pc, #216]	; (8000ac8 <sendMachineData+0x130>)
 80009ee:	f00c fdbd 	bl	800d56c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f2:	4835      	ldr	r0, [pc, #212]	; (8000ac8 <sendMachineData+0x130>)
 80009f4:	f7ff fc16 	bl	8000224 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a00:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a04:	4930      	ldr	r1, [pc, #192]	; (8000ac8 <sendMachineData+0x130>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	f00b ff6e 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a0c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a10:	f008 fe9e 	bl	8009750 <HAL_Delay>

	sprintf(local_txA,
 8000a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000a1c:	f107 0114 	add.w	r1, r7, #20
 8000a20:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000a24:	4a29      	ldr	r2, [pc, #164]	; (8000acc <sendMachineData+0x134>)
 8000a26:	9202      	str	r2, [sp, #8]
 8000a28:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8000a32:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	9200      	str	r2, [sp, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	4924      	ldr	r1, [pc, #144]	; (8000ad0 <sendMachineData+0x138>)
 8000a40:	f00c fd94 	bl	800d56c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbeb 	bl	8000224 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000a5c:	491d      	ldr	r1, [pc, #116]	; (8000ad4 <sendMachineData+0x13c>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00c fd84 	bl	800d56c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fbdb 	bl	8000224 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f00b ff32 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a84:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a88:	f008 fe62 	bl	8009750 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbc7 	bl	8000224 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000aa2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f00b ff1e 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000aac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ab0:	f008 fe4e 	bl	8009750 <HAL_Delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	0800dee4 	.word	0x0800dee4
 8000ac4:	0800def4 	.word	0x0800def4
 8000ac8:	20000b50 	.word	0x20000b50
 8000acc:	0800df88 	.word	0x0800df88
 8000ad0:	0800df14 	.word	0x0800df14
 8000ad4:	0800df9c 	.word	0x0800df9c

08000ad8 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	f6ad 2d18 	subw	sp, sp, #2584	; 0xa18
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000ae4:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000ae8:	6018      	str	r0, [r3, #0]
 8000aea:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000aee:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000af2:	6019      	str	r1, [r3, #0]
	int len;

	char bufferRX[2000];

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000af4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000af8:	f6a3 2318 	subw	r3, r3, #2584	; 0xa18
 8000afc:	f107 000c 	add.w	r0, r7, #12
 8000b00:	220c      	movs	r2, #12
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	f00c fda3 	bl	800d64e <strncpy>
	subMachineID[12] = '\0';
 8000b08:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b0c:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8000b10:	2200      	movs	r2, #0
 8000b12:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b14:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <checkMachineID+0x13c>)
 8000b16:	4940      	ldr	r1, [pc, #256]	; (8000c18 <checkMachineID+0x140>)
 8000b18:	4840      	ldr	r0, [pc, #256]	; (8000c1c <checkMachineID+0x144>)
 8000b1a:	f00c fd27 	bl	800d56c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b1e:	483f      	ldr	r0, [pc, #252]	; (8000c1c <checkMachineID+0x144>)
 8000b20:	f7ff fb80 	bl	8000224 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b2c:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b30:	493a      	ldr	r1, [pc, #232]	; (8000c1c <checkMachineID+0x144>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	f00b fed8 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3c:	f008 fe08 	bl	8009750 <HAL_Delay>

	sprintf(local_txA,
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	f507 6002 	add.w	r0, r7, #2080	; 0x820
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <checkMachineID+0x148>)
 8000b4a:	4936      	ldr	r1, [pc, #216]	; (8000c24 <checkMachineID+0x14c>)
 8000b4c:	f00c fd0e 	bl	800d56c <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, mainServerWithPort);
	len = strlen(local_txA);
 8000b50:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb65 	bl	8000224 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000b60:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b64:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 8000b68:	492f      	ldr	r1, [pc, #188]	; (8000c28 <checkMachineID+0x150>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00c fcfe 	bl	800d56c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000b70:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fb55 	bl	8000224 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f207 71ec 	addw	r1, r7, #2028	; 0x7ec
 8000b82:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000b86:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f00b feac 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b90:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b94:	f008 fddc 	bl	8009750 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b98:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fb41 	bl	8000224 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8000baa:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bae:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	f00b fe98 	bl	800c8e8 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 8000bb8:	f241 7070 	movw	r0, #6000	; 0x1770
 8000bbc:	f008 fdc8 	bl	8009750 <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000bc0:	f107 011c 	add.w	r1, r7, #28
 8000bc4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8000bc8:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000bcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f00b febe 	bl	800c952 <HAL_UART_Receive_IT>
	HAL_Delay(5000);
 8000bd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bda:	f008 fdb9 	bl	8009750 <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") || strstr(bufferRX, "HTTP/1.0 200 OK")) {
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4912      	ldr	r1, [pc, #72]	; (8000c2c <checkMachineID+0x154>)
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00c fd45 	bl	800d674 <strstr>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d108      	bne.n	8000c02 <checkMachineID+0x12a>
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	490e      	ldr	r1, [pc, #56]	; (8000c30 <checkMachineID+0x158>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00c fd3c 	bl	800d674 <strstr>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <checkMachineID+0x12e>
	    return 1; // Başarılı yanıt
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <checkMachineID+0x130>
	}

	return 0; // Yanıt başarısız
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f607 2718 	addw	r7, r7, #2584	; 0xa18
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800dee4 	.word	0x0800dee4
 8000c18:	0800def4 	.word	0x0800def4
 8000c1c:	20000b50 	.word	0x20000b50
 8000c20:	0800df88 	.word	0x0800df88
 8000c24:	0800dfac 	.word	0x0800dfac
 8000c28:	0800df9c 	.word	0x0800df9c
 8000c2c:	0800dff0 	.word	0x0800dff0
 8000c30:	0800e000 	.word	0x0800e000

08000c34 <hata2EEPROM>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af04      	add	r7, sp, #16
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000c52:	f000 f929 	bl	8000ea8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000c56:	e000      	b.n	8000c5a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000c58:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e012      	b.n	8000c86 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d107      	bne.n	8000c80 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	4918      	ldr	r1, [pc, #96]	; (8000cdc <hata2EEPROM+0xa8>)
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	54ca      	strb	r2, [r1, r3]
					break;
 8000c7e:	e007      	b.n	8000c90 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbe7      	blt.n	8000c60 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <hata2EEPROM+0xa4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <hata2EEPROM+0xa8>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <hata2EEPROM+0xa0>)
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	b292      	uxth	r2, r2
 8000caa:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000cae:	9402      	str	r4, [sp, #8]
 8000cb0:	9201      	str	r2, [sp, #4]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	460a      	mov	r2, r1
 8000cb8:	21a0      	movs	r1, #160	; 0xa0
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <hata2EEPROM+0xac>)
 8000cbc:	f009 fdd2 	bl	800a864 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc4:	f008 fd44 	bl	8009750 <HAL_Delay>
	eepromKontrol();
 8000cc8:	f7ff fab4 	bl	8000234 <eepromKontrol>
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	20000098 	.word	0x20000098
 8000cd8:	2000009c 	.word	0x2000009c
 8000cdc:	20000a18 	.word	0x20000a18
 8000ce0:	200010d8 	.word	0x200010d8

08000ce4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d11d      	bne.n	8000d30 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000cf4:	4b62      	ldr	r3, [pc, #392]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000cfc:	4a61      	ldr	r2, [pc, #388]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2001      	movs	r0, #1
 8000d02:	f007 ffcf 	bl	8008ca4 <lcd_print>
 8000d06:	e008      	b.n	8000d1a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000d08:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d104      	bne.n	8000d1a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000d10:	4a5d      	ldr	r2, [pc, #372]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	2001      	movs	r0, #1
 8000d16:	f007 ffc5 	bl	8008ca4 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000d1a:	4a5c      	ldr	r2, [pc, #368]	; (8000e8c <hataKoduLcdGoster+0x1a8>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f007 ffc0 	bl	8008ca4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d24:	4a5a      	ldr	r2, [pc, #360]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000d26:	2107      	movs	r1, #7
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f007 ffbb 	bl	8008ca4 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000d2e:	e0a3      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d11d      	bne.n	8000d72 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000d36:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d105      	bne.n	8000d4a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000d3e:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	2001      	movs	r0, #1
 8000d44:	f007 ffae 	bl	8008ca4 <lcd_print>
 8000d48:	e008      	b.n	8000d5c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d104      	bne.n	8000d5c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000d52:	4a4d      	ldr	r2, [pc, #308]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	2001      	movs	r0, #1
 8000d58:	f007 ffa4 	bl	8008ca4 <lcd_print>
		lcd_print(2, 2, "2");
 8000d5c:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <hataKoduLcdGoster+0x1b0>)
 8000d5e:	2102      	movs	r1, #2
 8000d60:	2002      	movs	r0, #2
 8000d62:	f007 ff9f 	bl	8008ca4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000d68:	2107      	movs	r1, #7
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f007 ff9a 	bl	8008ca4 <lcd_print>
}
 8000d70:	e082      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d11d      	bne.n	8000db4 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000d78:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000d80:	4a40      	ldr	r2, [pc, #256]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2001      	movs	r0, #1
 8000d86:	f007 ff8d 	bl	8008ca4 <lcd_print>
 8000d8a:	e008      	b.n	8000d9e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d104      	bne.n	8000d9e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000d94:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000d96:	2101      	movs	r1, #1
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f007 ff83 	bl	8008ca4 <lcd_print>
		lcd_print(2, 3, "3");
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <hataKoduLcdGoster+0x1b4>)
 8000da0:	2103      	movs	r1, #3
 8000da2:	2002      	movs	r0, #2
 8000da4:	f007 ff7e 	bl	8008ca4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000da8:	4a39      	ldr	r2, [pc, #228]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000daa:	2107      	movs	r1, #7
 8000dac:	2002      	movs	r0, #2
 8000dae:	f007 ff79 	bl	8008ca4 <lcd_print>
}
 8000db2:	e061      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d11d      	bne.n	8000df6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f007 ff6c 	bl	8008ca4 <lcd_print>
 8000dcc:	e008      	b.n	8000de0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d104      	bne.n	8000de0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000dd6:	4a2c      	ldr	r2, [pc, #176]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f007 ff62 	bl	8008ca4 <lcd_print>
		lcd_print(2, 4, "4");
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <hataKoduLcdGoster+0x1b8>)
 8000de2:	2104      	movs	r1, #4
 8000de4:	2002      	movs	r0, #2
 8000de6:	f007 ff5d 	bl	8008ca4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000dec:	2107      	movs	r1, #7
 8000dee:	2002      	movs	r0, #2
 8000df0:	f007 ff58 	bl	8008ca4 <lcd_print>
}
 8000df4:	e040      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d11d      	bne.n	8000e38 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f007 ff4b 	bl	8008ca4 <lcd_print>
 8000e0e:	e008      	b.n	8000e22 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d104      	bne.n	8000e22 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f007 ff41 	bl	8008ca4 <lcd_print>
		lcd_print(2, 5, "5");
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <hataKoduLcdGoster+0x1bc>)
 8000e24:	2105      	movs	r1, #5
 8000e26:	2002      	movs	r0, #2
 8000e28:	f007 ff3c 	bl	8008ca4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000e2e:	2107      	movs	r1, #7
 8000e30:	2002      	movs	r0, #2
 8000e32:	f007 ff37 	bl	8008ca4 <lcd_print>
}
 8000e36:	e01f      	b.n	8000e78 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d11c      	bne.n	8000e78 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <hataKoduLcdGoster+0x1a0>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f007 ff2a 	bl	8008ca4 <lcd_print>
 8000e50:	e008      	b.n	8000e64 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <hataKoduLcdGoster+0x19c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d104      	bne.n	8000e64 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <hataKoduLcdGoster+0x1a4>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f007 ff20 	bl	8008ca4 <lcd_print>
		lcd_print(2, 6, "6");
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <hataKoduLcdGoster+0x1c0>)
 8000e66:	2106      	movs	r1, #6
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f007 ff1b 	bl	8008ca4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <hataKoduLcdGoster+0x1ac>)
 8000e70:	2107      	movs	r1, #7
 8000e72:	2002      	movs	r0, #2
 8000e74:	f007 ff16 	bl	8008ca4 <lcd_print>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000b0d 	.word	0x20000b0d
 8000e84:	0800e010 	.word	0x0800e010
 8000e88:	0800e020 	.word	0x0800e020
 8000e8c:	0800e030 	.word	0x0800e030
 8000e90:	0800e034 	.word	0x0800e034
 8000e94:	0800e040 	.word	0x0800e040
 8000e98:	0800e044 	.word	0x0800e044
 8000e9c:	0800e048 	.word	0x0800e048
 8000ea0:	0800e04c 	.word	0x0800e04c
 8000ea4:	0800e050 	.word	0x0800e050

08000ea8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e009      	b.n	8000ec8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <eepromDataFillWithEmpty+0x38>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <eepromDataFillWithEmpty+0x3c>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <eepromDataFillWithEmpty+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbf0      	blt.n	8000eb4 <eepromDataFillWithEmpty+0xc>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000070 	.word	0x20000070
 8000ee4:	20000a18 	.word	0x20000a18
 8000ee8:	20000098 	.word	0x20000098

08000eec <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000efe:	4b50      	ldr	r3, [pc, #320]	; (8001040 <i2cTest+0x154>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <i2cTest+0x154>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000f0e:	484c      	ldr	r0, [pc, #304]	; (8001040 <i2cTest+0x154>)
 8000f10:	f009 fb7a 	bl	800a608 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f14:	23c0      	movs	r3, #192	; 0xc0
 8000f16:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000f18:	2311      	movs	r3, #17
 8000f1a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4846      	ldr	r0, [pc, #280]	; (8001044 <i2cTest+0x158>)
 8000f2a:	f008 ff81 	bl	8009e30 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <i2cTest+0x158>)
 8000f34:	f009 f9f3 	bl	800a31e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	4841      	ldr	r0, [pc, #260]	; (8001044 <i2cTest+0x158>)
 8000f3e:	f009 f9ee 	bl	800a31e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f008 fc04 	bl	8009750 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f48:	bf00      	nop
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	483d      	ldr	r0, [pc, #244]	; (8001044 <i2cTest+0x158>)
 8000f4e:	f009 f9cf 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d006      	beq.n	8000f66 <i2cTest+0x7a>
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	483a      	ldr	r0, [pc, #232]	; (8001044 <i2cTest+0x158>)
 8000f5c:	f009 f9c8 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d1f1      	bne.n	8000f4a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	4836      	ldr	r0, [pc, #216]	; (8001044 <i2cTest+0x158>)
 8000f6c:	f009 f9d7 	bl	800a31e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f008 fbed 	bl	8009750 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f76:	bf00      	nop
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	4832      	ldr	r0, [pc, #200]	; (8001044 <i2cTest+0x158>)
 8000f7c:	f009 f9b8 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d0f8      	beq.n	8000f78 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	482e      	ldr	r0, [pc, #184]	; (8001044 <i2cTest+0x158>)
 8000f8c:	f009 f9c7 	bl	800a31e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f008 fbdd 	bl	8009750 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f96:	bf00      	nop
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	482a      	ldr	r0, [pc, #168]	; (8001044 <i2cTest+0x158>)
 8000f9c:	f009 f9a8 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d0f8      	beq.n	8000f98 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <i2cTest+0x158>)
 8000fac:	f009 f9b7 	bl	800a31e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f008 fbcd 	bl	8009750 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000fb6:	bf00      	nop
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <i2cTest+0x158>)
 8000fbc:	f009 f998 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d1f8      	bne.n	8000fb8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <i2cTest+0x158>)
 8000fcc:	f009 f9a7 	bl	800a31e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f008 fbbd 	bl	8009750 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000fd6:	bf00      	nop
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	481a      	ldr	r0, [pc, #104]	; (8001044 <i2cTest+0x158>)
 8000fdc:	f009 f988 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d1f8      	bne.n	8000fd8 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000fea:	2312      	movs	r3, #18
 8000fec:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <i2cTest+0x158>)
 8000ffc:	f008 ff18 	bl	8009e30 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <i2cTest+0x154>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <i2cTest+0x154>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800100e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <i2cTest+0x154>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <i2cTest+0x154>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800101e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <i2cTest+0x154>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <i2cTest+0x154>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <i2cTest+0x154>)
 8001032:	f009 f9a5 	bl	800a380 <HAL_I2C_Init>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200010d8 	.word	0x200010d8
 8001044:	40010c00 	.word	0x40010c00

08001048 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8001052:	20c8      	movs	r0, #200	; 0xc8
 8001054:	f008 fb7c 	bl	8009750 <HAL_Delay>
	lcd_clear();
 8001058:	f007 fe50 	bl	8008cfc <lcd_clear>
	if(type == 1 && page == 0) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d13e      	bne.n	80010e0 <printTemplate+0x98>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d13b      	bne.n	80010e0 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001068:	4a81      	ldr	r2, [pc, #516]	; (8001270 <printTemplate+0x228>)
 800106a:	2101      	movs	r1, #1
 800106c:	2001      	movs	r0, #1
 800106e:	f007 fe19 	bl	8008ca4 <lcd_print>
		lcd_print(2, 3, "0");
 8001072:	4a80      	ldr	r2, [pc, #512]	; (8001274 <printTemplate+0x22c>)
 8001074:	2103      	movs	r1, #3
 8001076:	2002      	movs	r0, #2
 8001078:	f007 fe14 	bl	8008ca4 <lcd_print>
		lcd_print(2, 4, "1");
 800107c:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <printTemplate+0x230>)
 800107e:	2104      	movs	r1, #4
 8001080:	2002      	movs	r0, #2
 8001082:	f007 fe0f 	bl	8008ca4 <lcd_print>
		lcd_print(2, 5, "2");
 8001086:	4a7d      	ldr	r2, [pc, #500]	; (800127c <printTemplate+0x234>)
 8001088:	2105      	movs	r1, #5
 800108a:	2002      	movs	r0, #2
 800108c:	f007 fe0a 	bl	8008ca4 <lcd_print>
		lcd_print(2, 6, "3");
 8001090:	4a7b      	ldr	r2, [pc, #492]	; (8001280 <printTemplate+0x238>)
 8001092:	2106      	movs	r1, #6
 8001094:	2002      	movs	r0, #2
 8001096:	f007 fe05 	bl	8008ca4 <lcd_print>
		lcd_print(2, 7, "4");
 800109a:	4a7a      	ldr	r2, [pc, #488]	; (8001284 <printTemplate+0x23c>)
 800109c:	2107      	movs	r1, #7
 800109e:	2002      	movs	r0, #2
 80010a0:	f007 fe00 	bl	8008ca4 <lcd_print>
		lcd_print(2, 10, "5");
 80010a4:	4a78      	ldr	r2, [pc, #480]	; (8001288 <printTemplate+0x240>)
 80010a6:	210a      	movs	r1, #10
 80010a8:	2002      	movs	r0, #2
 80010aa:	f007 fdfb 	bl	8008ca4 <lcd_print>
		lcd_print(2, 11, "6");
 80010ae:	4a77      	ldr	r2, [pc, #476]	; (800128c <printTemplate+0x244>)
 80010b0:	210b      	movs	r1, #11
 80010b2:	2002      	movs	r0, #2
 80010b4:	f007 fdf6 	bl	8008ca4 <lcd_print>
		lcd_print(2, 12, "7");
 80010b8:	4a75      	ldr	r2, [pc, #468]	; (8001290 <printTemplate+0x248>)
 80010ba:	210c      	movs	r1, #12
 80010bc:	2002      	movs	r0, #2
 80010be:	f007 fdf1 	bl	8008ca4 <lcd_print>
		lcd_print(2, 13, "8");
 80010c2:	4a74      	ldr	r2, [pc, #464]	; (8001294 <printTemplate+0x24c>)
 80010c4:	210d      	movs	r1, #13
 80010c6:	2002      	movs	r0, #2
 80010c8:	f007 fdec 	bl	8008ca4 <lcd_print>
		lcd_print(2, 14, "9");
 80010cc:	4a72      	ldr	r2, [pc, #456]	; (8001298 <printTemplate+0x250>)
 80010ce:	210e      	movs	r1, #14
 80010d0:	2002      	movs	r0, #2
 80010d2:	f007 fde7 	bl	8008ca4 <lcd_print>
		lcd_gotoxy(2, 3);
 80010d6:	2103      	movs	r1, #3
 80010d8:	2002      	movs	r0, #2
 80010da:	f007 fdc4 	bl	8008c66 <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80010de:	e0c2      	b.n	8001266 <printTemplate+0x21e>
	} else if(type == 2) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d15e      	bne.n	80011a4 <printTemplate+0x15c>
		if(page == 1) {
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10f      	bne.n	800110c <printTemplate+0xc4>
			lcd_clear();
 80010ec:	f007 fe06 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 80010f0:	2064      	movs	r0, #100	; 0x64
 80010f2:	f008 fb2d 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010f6:	4a69      	ldr	r2, [pc, #420]	; (800129c <printTemplate+0x254>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	2001      	movs	r0, #1
 80010fc:	f007 fdd2 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001100:	4a67      	ldr	r2, [pc, #412]	; (80012a0 <printTemplate+0x258>)
 8001102:	2101      	movs	r1, #1
 8001104:	2002      	movs	r0, #2
 8001106:	f007 fdcd 	bl	8008ca4 <lcd_print>
}
 800110a:	e0ac      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 2) {
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10f      	bne.n	8001132 <printTemplate+0xea>
			lcd_clear();
 8001112:	f007 fdf3 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 8001116:	2064      	movs	r0, #100	; 0x64
 8001118:	f008 fb1a 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800111c:	4a5f      	ldr	r2, [pc, #380]	; (800129c <printTemplate+0x254>)
 800111e:	2101      	movs	r1, #1
 8001120:	2001      	movs	r0, #1
 8001122:	f007 fdbf 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <printTemplate+0x25c>)
 8001128:	2101      	movs	r1, #1
 800112a:	2002      	movs	r0, #2
 800112c:	f007 fdba 	bl	8008ca4 <lcd_print>
}
 8001130:	e099      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 3) {
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d10f      	bne.n	8001158 <printTemplate+0x110>
			lcd_clear();
 8001138:	f007 fde0 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	; 0x64
 800113e:	f008 fb07 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001142:	4a56      	ldr	r2, [pc, #344]	; (800129c <printTemplate+0x254>)
 8001144:	2101      	movs	r1, #1
 8001146:	2001      	movs	r0, #1
 8001148:	f007 fdac 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800114c:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <printTemplate+0x260>)
 800114e:	2101      	movs	r1, #1
 8001150:	2002      	movs	r0, #2
 8001152:	f007 fda7 	bl	8008ca4 <lcd_print>
}
 8001156:	e086      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 4) {
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d10f      	bne.n	800117e <printTemplate+0x136>
			lcd_clear();
 800115e:	f007 fdcd 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f008 faf4 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <printTemplate+0x254>)
 800116a:	2101      	movs	r1, #1
 800116c:	2001      	movs	r0, #1
 800116e:	f007 fd99 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001172:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <printTemplate+0x264>)
 8001174:	2101      	movs	r1, #1
 8001176:	2002      	movs	r0, #2
 8001178:	f007 fd94 	bl	8008ca4 <lcd_print>
}
 800117c:	e073      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 5) {
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b05      	cmp	r3, #5
 8001182:	d170      	bne.n	8001266 <printTemplate+0x21e>
			lcd_clear();
 8001184:	f007 fdba 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f008 fae1 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <printTemplate+0x254>)
 8001190:	2101      	movs	r1, #1
 8001192:	2001      	movs	r0, #1
 8001194:	f007 fd86 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001198:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <printTemplate+0x268>)
 800119a:	2101      	movs	r1, #1
 800119c:	2002      	movs	r0, #2
 800119e:	f007 fd81 	bl	8008ca4 <lcd_print>
}
 80011a2:	e060      	b.n	8001266 <printTemplate+0x21e>
	} else if(type == 3) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d15d      	bne.n	8001266 <printTemplate+0x21e>
		if(page == 1) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d10f      	bne.n	80011d0 <printTemplate+0x188>
			lcd_clear();
 80011b0:	f007 fda4 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f008 facb 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011ba:	4a3e      	ldr	r2, [pc, #248]	; (80012b4 <printTemplate+0x26c>)
 80011bc:	2101      	movs	r1, #1
 80011be:	2001      	movs	r0, #1
 80011c0:	f007 fd70 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <printTemplate+0x258>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2002      	movs	r0, #2
 80011ca:	f007 fd6b 	bl	8008ca4 <lcd_print>
}
 80011ce:	e04a      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 2) {
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d10f      	bne.n	80011f6 <printTemplate+0x1ae>
			lcd_clear();
 80011d6:	f007 fd91 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 80011da:	2064      	movs	r0, #100	; 0x64
 80011dc:	f008 fab8 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011e0:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <printTemplate+0x26c>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	2001      	movs	r0, #1
 80011e6:	f007 fd5d 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011ea:	4a2e      	ldr	r2, [pc, #184]	; (80012a4 <printTemplate+0x25c>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	2002      	movs	r0, #2
 80011f0:	f007 fd58 	bl	8008ca4 <lcd_print>
}
 80011f4:	e037      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 3) {
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d10f      	bne.n	800121c <printTemplate+0x1d4>
			lcd_clear();
 80011fc:	f007 fd7e 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 8001200:	2064      	movs	r0, #100	; 0x64
 8001202:	f008 faa5 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001206:	4a2b      	ldr	r2, [pc, #172]	; (80012b4 <printTemplate+0x26c>)
 8001208:	2101      	movs	r1, #1
 800120a:	2001      	movs	r0, #1
 800120c:	f007 fd4a 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001210:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <printTemplate+0x260>)
 8001212:	2101      	movs	r1, #1
 8001214:	2002      	movs	r0, #2
 8001216:	f007 fd45 	bl	8008ca4 <lcd_print>
}
 800121a:	e024      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 4) {
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d10f      	bne.n	8001242 <printTemplate+0x1fa>
			lcd_clear();
 8001222:	f007 fd6b 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f008 fa92 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800122c:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <printTemplate+0x26c>)
 800122e:	2101      	movs	r1, #1
 8001230:	2001      	movs	r0, #1
 8001232:	f007 fd37 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <printTemplate+0x264>)
 8001238:	2101      	movs	r1, #1
 800123a:	2002      	movs	r0, #2
 800123c:	f007 fd32 	bl	8008ca4 <lcd_print>
}
 8001240:	e011      	b.n	8001266 <printTemplate+0x21e>
		} else if(page == 5) {
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d10e      	bne.n	8001266 <printTemplate+0x21e>
			lcd_clear();
 8001248:	f007 fd58 	bl	8008cfc <lcd_clear>
			HAL_Delay(100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f008 fa7f 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <printTemplate+0x26c>)
 8001254:	2101      	movs	r1, #1
 8001256:	2001      	movs	r0, #1
 8001258:	f007 fd24 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <printTemplate+0x268>)
 800125e:	2101      	movs	r1, #1
 8001260:	2002      	movs	r0, #2
 8001262:	f007 fd1f 	bl	8008ca4 <lcd_print>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800e054 	.word	0x0800e054
 8001274:	0800e05c 	.word	0x0800e05c
 8001278:	0800e060 	.word	0x0800e060
 800127c:	0800e064 	.word	0x0800e064
 8001280:	0800e068 	.word	0x0800e068
 8001284:	0800e06c 	.word	0x0800e06c
 8001288:	0800e070 	.word	0x0800e070
 800128c:	0800e074 	.word	0x0800e074
 8001290:	0800e078 	.word	0x0800e078
 8001294:	0800e07c 	.word	0x0800e07c
 8001298:	0800e080 	.word	0x0800e080
 800129c:	0800e084 	.word	0x0800e084
 80012a0:	0800e08c 	.word	0x0800e08c
 80012a4:	0800e0a0 	.word	0x0800e0a0
 80012a8:	0800e0b4 	.word	0x0800e0b4
 80012ac:	0800e0c8 	.word	0x0800e0c8
 80012b0:	0800e0dc 	.word	0x0800e0dc
 80012b4:	0800e0f0 	.word	0x0800e0f0

080012b8 <checkSlideVal>:

int checkSlideVal(int state) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d111      	bne.n	80012ea <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012c6:	2101      	movs	r1, #1
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <checkSlideVal+0x60>)
 80012ca:	f009 f811 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <checkSlideVal+0x20>
			return 34;
 80012d4:	2322      	movs	r3, #34	; 0x22
 80012d6:	e01b      	b.n	8001310 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012d8:	2108      	movs	r1, #8
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <checkSlideVal+0x64>)
 80012dc:	f009 f808 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d113      	bne.n	800130e <checkSlideVal+0x56>
			return 32;
 80012e6:	2320      	movs	r3, #32
 80012e8:	e012      	b.n	8001310 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012ea:	2101      	movs	r1, #1
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <checkSlideVal+0x60>)
 80012ee:	f008 ffff 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <checkSlideVal+0x44>
			return 35;
 80012f8:	2323      	movs	r3, #35	; 0x23
 80012fa:	e009      	b.n	8001310 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012fc:	2108      	movs	r1, #8
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <checkSlideVal+0x64>)
 8001300:	f008 fff6 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <checkSlideVal+0x56>
			return 33;
 800130a:	2321      	movs	r3, #33	; 0x21
 800130c:	e000      	b.n	8001310 <checkSlideVal+0x58>
		}
	}
	return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40010800 	.word	0x40010800
 800131c:	40011000 	.word	0x40011000

08001320 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7fe ff78 	bl	8000224 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800133c:	e08a      	b.n	8001454 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7ff ffba 	bl	80012b8 <checkSlideVal>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	dd07      	ble.n	800135a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f7ff ffb4 	bl	80012b8 <checkSlideVal>
 8001350:	4603      	mov	r3, r0
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b44      	ldr	r3, [pc, #272]	; (8001468 <slideText+0x148>)
 8001356:	701a      	strb	r2, [r3, #0]
			break;
 8001358:	e081      	b.n	800145e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	e075      	b.n	800144c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff ffa9 	bl	80012b8 <checkSlideVal>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd09      	ble.n	8001380 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff ffa3 	bl	80012b8 <checkSlideVal>
 8001372:	4603      	mov	r3, r0
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <slideText+0x148>)
 8001378:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800137e:	e069      	b.n	8001454 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	4413      	add	r3, r2
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	e029      	b.n	80013de <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800138a:	6838      	ldr	r0, [r7, #0]
 800138c:	f7ff ff94 	bl	80012b8 <checkSlideVal>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	dd0b      	ble.n	80013ae <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f7ff ff8e 	bl	80012b8 <checkSlideVal>
 800139c:	4603      	mov	r3, r0
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <slideText+0x148>)
 80013a2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013ac:	e01d      	b.n	80013ea <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f007 fc7e 	bl	8008cce <lcd_print_char>
				HAL_Delay(30);
 80013d2:	201e      	movs	r0, #30
 80013d4:	f008 f9bc 	bl	8009750 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3301      	adds	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	7dfa      	ldrb	r2, [r7, #23]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbcf      	blt.n	800138a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	e023      	b.n	800143a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f7ff ff60 	bl	80012b8 <checkSlideVal>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd0b      	ble.n	8001416 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f7ff ff5a 	bl	80012b8 <checkSlideVal>
 8001404:	4603      	mov	r3, r0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <slideText+0x148>)
 800140a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001414:	e017      	b.n	8001446 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	db0a      	blt.n	8001434 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	b2d1      	uxtb	r1, r2
 8001426:	2220      	movs	r2, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f007 fc50 	bl	8008cce <lcd_print_char>
			    	 HAL_Delay(30);
 800142e:	201e      	movs	r0, #30
 8001430:	f008 f98e 	bl	8009750 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3b01      	subs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	7dfa      	ldrb	r2, [r7, #23]
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	429a      	cmp	r2, r3
 8001444:	dad5      	bge.n	80013f2 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	3301      	adds	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	6a3a      	ldr	r2, [r7, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	db85      	blt.n	8001360 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b01      	cmp	r3, #1
 8001458:	f43f af71 	beq.w	800133e <slideText+0x1e>
			     }
			}
		}
	}
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000aec 	.word	0x20000aec

0800146c <printCredentials>:

void printCredentials(int type) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d119      	bne.n	80014ae <printCredentials+0x42>
		//machine id yazdır
		if(dilSecim == 0) {
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <printCredentials+0xf0>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <printCredentials+0x22>
			lcd_print(1, 1, "MAKINE ID       ");
 8001482:	4a37      	ldr	r2, [pc, #220]	; (8001560 <printCredentials+0xf4>)
 8001484:	2101      	movs	r1, #1
 8001486:	2001      	movs	r0, #1
 8001488:	f007 fc0c 	bl	8008ca4 <lcd_print>
 800148c:	e004      	b.n	8001498 <printCredentials+0x2c>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 800148e:	4a35      	ldr	r2, [pc, #212]	; (8001564 <printCredentials+0xf8>)
 8001490:	2101      	movs	r1, #1
 8001492:	2001      	movs	r0, #1
 8001494:	f007 fc06 	bl	8008ca4 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8001498:	4a33      	ldr	r2, [pc, #204]	; (8001568 <printCredentials+0xfc>)
 800149a:	2101      	movs	r1, #1
 800149c:	2002      	movs	r0, #2
 800149e:	f007 fc01 	bl	8008ca4 <lcd_print>
		lcd_print(2, 13, "    ");
 80014a2:	4a32      	ldr	r2, [pc, #200]	; (800156c <printCredentials+0x100>)
 80014a4:	210d      	movs	r1, #13
 80014a6:	2002      	movs	r0, #2
 80014a8:	f007 fbfc 	bl	8008ca4 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 80014ac:	e051      	b.n	8001552 <printCredentials+0xe6>
	} else if(type == 2) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d127      	bne.n	8001504 <printCredentials+0x98>
		int ssidLength = strlen(wifiSSID);
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <printCredentials+0x104>)
 80014b6:	f7fe feb5 	bl	8000224 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <printCredentials+0x108>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	2001      	movs	r0, #1
 80014c4:	f007 fbee 	bl	8008ca4 <lcd_print>
		if(ssidLength == 16) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d105      	bne.n	80014da <printCredentials+0x6e>
			lcd_print(2, 1, wifiSSID);
 80014ce:	4a28      	ldr	r2, [pc, #160]	; (8001570 <printCredentials+0x104>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	2002      	movs	r0, #2
 80014d4:	f007 fbe6 	bl	8008ca4 <lcd_print>
}
 80014d8:	e03b      	b.n	8001552 <printCredentials+0xe6>
		} else if(ssidLength < 16) {
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	dc0a      	bgt.n	80014f6 <printCredentials+0x8a>
			lcd_print(2, 1, "                ");
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <printCredentials+0x10c>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f007 fbdd 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <printCredentials+0x104>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2002      	movs	r0, #2
 80014f0:	f007 fbd8 	bl	8008ca4 <lcd_print>
}
 80014f4:	e02d      	b.n	8001552 <printCredentials+0xe6>
			slideText(wifiSSID, 1, 2, 0);
 80014f6:	2300      	movs	r3, #0
 80014f8:	2202      	movs	r2, #2
 80014fa:	2101      	movs	r1, #1
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <printCredentials+0x104>)
 80014fe:	f7ff ff0f 	bl	8001320 <slideText>
}
 8001502:	e026      	b.n	8001552 <printCredentials+0xe6>
		int passLength = strlen(wifiPass);
 8001504:	481d      	ldr	r0, [pc, #116]	; (800157c <printCredentials+0x110>)
 8001506:	f7fe fe8d 	bl	8000224 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <printCredentials+0x114>)
 8001510:	2101      	movs	r1, #1
 8001512:	2001      	movs	r0, #1
 8001514:	f007 fbc6 	bl	8008ca4 <lcd_print>
		if(passLength == 16) {
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d105      	bne.n	800152a <printCredentials+0xbe>
			lcd_print(2, 1, wifiPass);
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <printCredentials+0x110>)
 8001520:	2101      	movs	r1, #1
 8001522:	2002      	movs	r0, #2
 8001524:	f007 fbbe 	bl	8008ca4 <lcd_print>
}
 8001528:	e013      	b.n	8001552 <printCredentials+0xe6>
		} else if(passLength < 16) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	dc0a      	bgt.n	8001546 <printCredentials+0xda>
			lcd_print(2, 1, "                ");
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <printCredentials+0x10c>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f007 fbb5 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, wifiPass);
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <printCredentials+0x110>)
 800153c:	2101      	movs	r1, #1
 800153e:	2002      	movs	r0, #2
 8001540:	f007 fbb0 	bl	8008ca4 <lcd_print>
}
 8001544:	e005      	b.n	8001552 <printCredentials+0xe6>
			slideText(wifiPass, 1, 2, 1);
 8001546:	2301      	movs	r3, #1
 8001548:	2202      	movs	r2, #2
 800154a:	2101      	movs	r1, #1
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <printCredentials+0x110>)
 800154e:	f7ff fee7 	bl	8001320 <slideText>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000b0d 	.word	0x20000b0d
 8001560:	0800e0f8 	.word	0x0800e0f8
 8001564:	0800e10c 	.word	0x0800e10c
 8001568:	20000a90 	.word	0x20000a90
 800156c:	0800e120 	.word	0x0800e120
 8001570:	20000a9c 	.word	0x20000a9c
 8001574:	0800e128 	.word	0x0800e128
 8001578:	0800e13c 	.word	0x0800e13c
 800157c:	20000ab0 	.word	0x20000ab0
 8001580:	0800e150 	.word	0x0800e150

08001584 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001588:	f3bf 8f4f 	dsb	sy
}
 800158c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <__NVIC_SystemReset+0x24>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001596:	4904      	ldr	r1, [pc, #16]	; (80015a8 <__NVIC_SystemReset+0x24>)
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_SystemReset+0x28>)
 800159a:	4313      	orrs	r3, r2
 800159c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800159e:	f3bf 8f4f 	dsb	sy
}
 80015a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <__NVIC_SystemReset+0x20>
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	05fa0004 	.word	0x05fa0004

080015b0 <menu>:
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"

void menu() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015b6:	2101      	movs	r1, #1
 80015b8:	4890      	ldr	r0, [pc, #576]	; (80017fc <menu+0x24c>)
 80015ba:	f008 fe99 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 808e 	bne.w	80016e2 <menu+0x132>
 80015c6:	4b8e      	ldr	r3, [pc, #568]	; (8001800 <menu+0x250>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8086 	beq.w	80016e2 <menu+0x132>
		menuSayac = menuSayac+1;
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <menu+0x254>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <menu+0x254>)
 80015e0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015e2:	4b88      	ldr	r3, [pc, #544]	; (8001804 <menu+0x254>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b24      	cmp	r3, #36	; 0x24
 80015e8:	d102      	bne.n	80015f0 <menu+0x40>
			menuSayac = 1;
 80015ea:	4b86      	ldr	r3, [pc, #536]	; (8001804 <menu+0x254>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <menu+0x254>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d106      	bne.n	8001606 <menu+0x56>
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <menu+0x258>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <menu+0x56>
			menuSayac = 21;
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <menu+0x254>)
 8001602:	2215      	movs	r2, #21
 8001604:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001606:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <menu+0x254>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d106      	bne.n	800161c <menu+0x6c>
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <menu+0x25c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <menu+0x6c>
			menuSayac = 16;
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <menu+0x254>)
 8001618:	2210      	movs	r2, #16
 800161a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <menu+0x254>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b0d      	cmp	r3, #13
 8001622:	d106      	bne.n	8001632 <menu+0x82>
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <menu+0x25c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <menu+0x82>
			menuSayac = 16;
 800162c:	4b75      	ldr	r3, [pc, #468]	; (8001804 <menu+0x254>)
 800162e:	2210      	movs	r2, #16
 8001630:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001632:	4b74      	ldr	r3, [pc, #464]	; (8001804 <menu+0x254>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b09      	cmp	r3, #9
 8001638:	d106      	bne.n	8001648 <menu+0x98>
 800163a:	4b74      	ldr	r3, [pc, #464]	; (800180c <menu+0x25c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d102      	bne.n	8001648 <menu+0x98>
			menuSayac = 13;
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <menu+0x254>)
 8001644:	220d      	movs	r2, #13
 8001646:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001648:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <menu+0x254>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b0a      	cmp	r3, #10
 800164e:	d10a      	bne.n	8001666 <menu+0xb6>
 8001650:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <menu+0x260>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d003      	beq.n	8001660 <menu+0xb0>
 8001658:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <menu+0x260>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d102      	bne.n	8001666 <menu+0xb6>
			menuSayac = 11;
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <menu+0x254>)
 8001662:	220b      	movs	r2, #11
 8001664:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <menu+0x254>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d10e      	bne.n	800168c <menu+0xdc>
 800166e:	4b69      	ldr	r3, [pc, #420]	; (8001814 <menu+0x264>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d003      	beq.n	800167e <menu+0xce>
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <menu+0x264>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d106      	bne.n	800168c <menu+0xdc>
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <menu+0x25c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <menu+0xdc>
			menuSayac = 16;
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <menu+0x254>)
 8001688:	2210      	movs	r2, #16
 800168a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <menu+0x254>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d10e      	bne.n	80016b2 <menu+0x102>
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <menu+0x264>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <menu+0xf4>
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <menu+0x264>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d106      	bne.n	80016b2 <menu+0x102>
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <menu+0x25c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d102      	bne.n	80016b2 <menu+0x102>
			menuSayac = 13;
 80016ac:	4b55      	ldr	r3, [pc, #340]	; (8001804 <menu+0x254>)
 80016ae:	220d      	movs	r2, #13
 80016b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016b2:	4b54      	ldr	r3, [pc, #336]	; (8001804 <menu+0x254>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d106      	bne.n	80016c8 <menu+0x118>
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <menu+0x268>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <menu+0x118>
			menuSayac = 16;
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <menu+0x254>)
 80016c4:	2210      	movs	r2, #16
 80016c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <menu+0x254>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b18      	cmp	r3, #24
 80016ce:	d106      	bne.n	80016de <menu+0x12e>
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <menu+0x258>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <menu+0x12e>
			menuSayac = 26;
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <menu+0x254>)
 80016da:	221a      	movs	r2, #26
 80016dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016de:	f003 fa81 	bl	8004be4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016e2:	2108      	movs	r1, #8
 80016e4:	484d      	ldr	r0, [pc, #308]	; (800181c <menu+0x26c>)
 80016e6:	f008 fe03 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d175      	bne.n	80017dc <menu+0x22c>
 80016f0:	4b43      	ldr	r3, [pc, #268]	; (8001800 <menu+0x250>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f083 0301 	eor.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06e      	beq.n	80017dc <menu+0x22c>
		if (menuSayac <= 1) {
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <menu+0x254>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d802      	bhi.n	800170c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <menu+0x254>)
 8001708:	2224      	movs	r2, #36	; 0x24
 800170a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800170c:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <menu+0x254>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <menu+0x254>)
 8001716:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <menu+0x254>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b14      	cmp	r3, #20
 800171e:	d106      	bne.n	800172e <menu+0x17e>
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <menu+0x258>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <menu+0x17e>
			menuSayac = 17;
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <menu+0x254>)
 800172a:	2211      	movs	r2, #17
 800172c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <menu+0x254>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	d106      	bne.n	8001744 <menu+0x194>
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <menu+0x25c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <menu+0x194>
			menuSayac = 7;
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <menu+0x254>)
 8001740:	2207      	movs	r2, #7
 8001742:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <menu+0x254>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d106      	bne.n	800175a <menu+0x1aa>
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <menu+0x25c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <menu+0x1aa>
			menuSayac = 12;
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <menu+0x254>)
 8001756:	220c      	movs	r2, #12
 8001758:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <menu+0x254>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d106      	bne.n	8001770 <menu+0x1c0>
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <menu+0x25c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d102      	bne.n	8001770 <menu+0x1c0>
			menuSayac = 8;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <menu+0x254>)
 800176c:	2208      	movs	r2, #8
 800176e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <menu+0x254>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d10a      	bne.n	800178e <menu+0x1de>
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <menu+0x260>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d003      	beq.n	8001788 <menu+0x1d8>
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <menu+0x260>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d102      	bne.n	800178e <menu+0x1de>
			menuSayac = 9;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <menu+0x254>)
 800178a:	2209      	movs	r2, #9
 800178c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <menu+0x254>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d10a      	bne.n	80017ac <menu+0x1fc>
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <menu+0x264>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d003      	beq.n	80017a6 <menu+0x1f6>
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <menu+0x264>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d102      	bne.n	80017ac <menu+0x1fc>
			menuSayac = 11;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <menu+0x254>)
 80017a8:	220b      	movs	r2, #11
 80017aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <menu+0x254>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d106      	bne.n	80017c2 <menu+0x212>
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <menu+0x268>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d102      	bne.n	80017c2 <menu+0x212>
			menuSayac = 14;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <menu+0x254>)
 80017be:	220e      	movs	r2, #14
 80017c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <menu+0x254>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b19      	cmp	r3, #25
 80017c8:	d106      	bne.n	80017d8 <menu+0x228>
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <menu+0x258>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <menu+0x228>
			menuSayac = 23;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <menu+0x254>)
 80017d4:	2217      	movs	r2, #23
 80017d6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017d8:	f003 fa04 	bl	8004be4 <bekle>
	}

	if (menuSayac == 0) {
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <menu+0x254>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d121      	bne.n	8001828 <menu+0x278>
		} else if(dilSecim  ==  1) {
			lcd_print(1, 1, "ENTERED THE MENU");
			lcd_print(2, 1, "    SETTINGS    ");
		}*/

		lcd_print(1, 1, menuyeGirildiText);
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <menu+0x270>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	2001      	movs	r0, #1
 80017ea:	f007 fa5b 	bl	8008ca4 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <menu+0x274>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	2002      	movs	r0, #2
 80017f4:	f007 fa56 	bl	8008ca4 <lcd_print>
 80017f8:	e016      	b.n	8001828 <menu+0x278>
 80017fa:	bf00      	nop
 80017fc:	40010800 	.word	0x40010800
 8001800:	20000b1b 	.word	0x20000b1b
 8001804:	20000aec 	.word	0x20000aec
 8001808:	20000afb 	.word	0x20000afb
 800180c:	20000af4 	.word	0x20000af4
 8001810:	20000af5 	.word	0x20000af5
 8001814:	20000af6 	.word	0x20000af6
 8001818:	20000af7 	.word	0x20000af7
 800181c:	40011000 	.word	0x40011000
 8001820:	20000c4c 	.word	0x20000c4c
 8001824:	20000c5c 	.word	0x20000c5c
	}

	if (menuSayac == 1) {
 8001828:	4ba4      	ldr	r3, [pc, #656]	; (8001abc <menu+0x50c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 8279 	bne.w	8001d24 <menu+0x774>
		/*if(dilSecim == 0) {
			lcd_print(1, 1, "HATA KAYIT LiST.");
		} else if(dilSecim == 1) {
			lcd_print(1, 1, "ERROR SAVE LiST.");
		}*/
		lcd_print(1, 1, hataKayitListText);
 8001832:	4aa3      	ldr	r2, [pc, #652]	; (8001ac0 <menu+0x510>)
 8001834:	2101      	movs	r1, #1
 8001836:	2001      	movs	r0, #1
 8001838:	f007 fa34 	bl	8008ca4 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800183c:	4ba1      	ldr	r3, [pc, #644]	; (8001ac4 <menu+0x514>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d115      	bne.n	8001870 <menu+0x2c0>
				lcd_print(2, 1, "1.Hata Kodu: ");

			} else if(dilSecim == 1) {
				lcd_print(2, 1, "1.Error Code:");
			}*/
			lcd_print(2, 1, birHataKoduText);
 8001844:	4aa0      	ldr	r2, [pc, #640]	; (8001ac8 <menu+0x518>)
 8001846:	2101      	movs	r1, #1
 8001848:	2002      	movs	r0, #2
 800184a:	f007 fa2b 	bl	8008ca4 <lcd_print>
			lcd_print(2, 15, "   ");
 800184e:	4a9f      	ldr	r2, [pc, #636]	; (8001acc <menu+0x51c>)
 8001850:	210f      	movs	r1, #15
 8001852:	2002      	movs	r0, #2
 8001854:	f007 fa26 	bl	8008ca4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001858:	4b9d      	ldr	r3, [pc, #628]	; (8001ad0 <menu+0x520>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	220a      	movs	r2, #10
 800185e:	499d      	ldr	r1, [pc, #628]	; (8001ad4 <menu+0x524>)
 8001860:	4618      	mov	r0, r3
 8001862:	f00b fdcd 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 8001866:	4a9b      	ldr	r2, [pc, #620]	; (8001ad4 <menu+0x524>)
 8001868:	210e      	movs	r1, #14
 800186a:	2002      	movs	r0, #2
 800186c:	f007 fa1a 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001870:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <menu+0x514>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d123      	bne.n	80018c0 <menu+0x310>
			if(dilSecim == 0) {
 8001878:	4b97      	ldr	r3, [pc, #604]	; (8001ad8 <menu+0x528>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <menu+0x2dc>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001880:	4a96      	ldr	r2, [pc, #600]	; (8001adc <menu+0x52c>)
 8001882:	2101      	movs	r1, #1
 8001884:	2002      	movs	r0, #2
 8001886:	f007 fa0d 	bl	8008ca4 <lcd_print>
 800188a:	e008      	b.n	800189e <menu+0x2ee>
			} else if(dilSecim == 1) {
 800188c:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <menu+0x528>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d104      	bne.n	800189e <menu+0x2ee>
				lcd_print(2, 1, "2.Error Code:");
 8001894:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <menu+0x530>)
 8001896:	2101      	movs	r1, #1
 8001898:	2002      	movs	r0, #2
 800189a:	f007 fa03 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800189e:	4a91      	ldr	r2, [pc, #580]	; (8001ae4 <menu+0x534>)
 80018a0:	210f      	movs	r1, #15
 80018a2:	2002      	movs	r0, #2
 80018a4:	f007 f9fe 	bl	8008ca4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80018a8:	4b8f      	ldr	r3, [pc, #572]	; (8001ae8 <menu+0x538>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	220a      	movs	r2, #10
 80018ae:	4989      	ldr	r1, [pc, #548]	; (8001ad4 <menu+0x524>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f00b fda5 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 80018b6:	4a87      	ldr	r2, [pc, #540]	; (8001ad4 <menu+0x524>)
 80018b8:	210e      	movs	r1, #14
 80018ba:	2002      	movs	r0, #2
 80018bc:	f007 f9f2 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <menu+0x514>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d123      	bne.n	8001910 <menu+0x360>
			if(dilSecim == 0) {
 80018c8:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <menu+0x528>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <menu+0x32c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80018d0:	4a86      	ldr	r2, [pc, #536]	; (8001aec <menu+0x53c>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2002      	movs	r0, #2
 80018d6:	f007 f9e5 	bl	8008ca4 <lcd_print>
 80018da:	e008      	b.n	80018ee <menu+0x33e>
			} else if(dilSecim == 1) {
 80018dc:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <menu+0x528>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d104      	bne.n	80018ee <menu+0x33e>
				lcd_print(2, 1, "3.Error Code:");
 80018e4:	4a82      	ldr	r2, [pc, #520]	; (8001af0 <menu+0x540>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	2002      	movs	r0, #2
 80018ea:	f007 f9db 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018ee:	4a7d      	ldr	r2, [pc, #500]	; (8001ae4 <menu+0x534>)
 80018f0:	210f      	movs	r1, #15
 80018f2:	2002      	movs	r0, #2
 80018f4:	f007 f9d6 	bl	8008ca4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80018f8:	4b7e      	ldr	r3, [pc, #504]	; (8001af4 <menu+0x544>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	220a      	movs	r2, #10
 80018fe:	4975      	ldr	r1, [pc, #468]	; (8001ad4 <menu+0x524>)
 8001900:	4618      	mov	r0, r3
 8001902:	f00b fd7d 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 8001906:	4a73      	ldr	r2, [pc, #460]	; (8001ad4 <menu+0x524>)
 8001908:	210e      	movs	r1, #14
 800190a:	2002      	movs	r0, #2
 800190c:	f007 f9ca 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001910:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <menu+0x514>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d123      	bne.n	8001960 <menu+0x3b0>
			if(dilSecim == 0) {
 8001918:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <menu+0x528>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <menu+0x37c>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001920:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <menu+0x548>)
 8001922:	2101      	movs	r1, #1
 8001924:	2002      	movs	r0, #2
 8001926:	f007 f9bd 	bl	8008ca4 <lcd_print>
 800192a:	e008      	b.n	800193e <menu+0x38e>
			} else if(dilSecim == 1) {
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <menu+0x528>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d104      	bne.n	800193e <menu+0x38e>
				lcd_print(2, 1, "4.Error Code:");
 8001934:	4a71      	ldr	r2, [pc, #452]	; (8001afc <menu+0x54c>)
 8001936:	2101      	movs	r1, #1
 8001938:	2002      	movs	r0, #2
 800193a:	f007 f9b3 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800193e:	4a69      	ldr	r2, [pc, #420]	; (8001ae4 <menu+0x534>)
 8001940:	210f      	movs	r1, #15
 8001942:	2002      	movs	r0, #2
 8001944:	f007 f9ae 	bl	8008ca4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001948:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <menu+0x550>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	220a      	movs	r2, #10
 800194e:	4961      	ldr	r1, [pc, #388]	; (8001ad4 <menu+0x524>)
 8001950:	4618      	mov	r0, r3
 8001952:	f00b fd55 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 8001956:	4a5f      	ldr	r2, [pc, #380]	; (8001ad4 <menu+0x524>)
 8001958:	210e      	movs	r1, #14
 800195a:	2002      	movs	r0, #2
 800195c:	f007 f9a2 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001960:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <menu+0x514>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d123      	bne.n	80019b0 <menu+0x400>
			if(dilSecim == 0) {
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <menu+0x528>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <menu+0x3cc>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001970:	4a64      	ldr	r2, [pc, #400]	; (8001b04 <menu+0x554>)
 8001972:	2101      	movs	r1, #1
 8001974:	2002      	movs	r0, #2
 8001976:	f007 f995 	bl	8008ca4 <lcd_print>
 800197a:	e008      	b.n	800198e <menu+0x3de>
			} else if(dilSecim == 1) {
 800197c:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <menu+0x528>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d104      	bne.n	800198e <menu+0x3de>
				lcd_print(2, 1, "5.Error Code:");
 8001984:	4a60      	ldr	r2, [pc, #384]	; (8001b08 <menu+0x558>)
 8001986:	2101      	movs	r1, #1
 8001988:	2002      	movs	r0, #2
 800198a:	f007 f98b 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800198e:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <menu+0x534>)
 8001990:	210f      	movs	r1, #15
 8001992:	2002      	movs	r0, #2
 8001994:	f007 f986 	bl	8008ca4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001998:	4b5c      	ldr	r3, [pc, #368]	; (8001b0c <menu+0x55c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	220a      	movs	r2, #10
 800199e:	494d      	ldr	r1, [pc, #308]	; (8001ad4 <menu+0x524>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00b fd2d 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 80019a6:	4a4b      	ldr	r2, [pc, #300]	; (8001ad4 <menu+0x524>)
 80019a8:	210e      	movs	r1, #14
 80019aa:	2002      	movs	r0, #2
 80019ac:	f007 f97a 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80019b0:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <menu+0x514>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d123      	bne.n	8001a00 <menu+0x450>
			if(dilSecim == 0) {
 80019b8:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <menu+0x528>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <menu+0x41c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80019c0:	4a53      	ldr	r2, [pc, #332]	; (8001b10 <menu+0x560>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	2002      	movs	r0, #2
 80019c6:	f007 f96d 	bl	8008ca4 <lcd_print>
 80019ca:	e008      	b.n	80019de <menu+0x42e>
			} else if(dilSecim == 1) {
 80019cc:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <menu+0x528>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d104      	bne.n	80019de <menu+0x42e>
				lcd_print(2, 1, "6.Error Code:");
 80019d4:	4a4f      	ldr	r2, [pc, #316]	; (8001b14 <menu+0x564>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f007 f963 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019de:	4a41      	ldr	r2, [pc, #260]	; (8001ae4 <menu+0x534>)
 80019e0:	210f      	movs	r1, #15
 80019e2:	2002      	movs	r0, #2
 80019e4:	f007 f95e 	bl	8008ca4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80019e8:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <menu+0x568>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	220a      	movs	r2, #10
 80019ee:	4939      	ldr	r1, [pc, #228]	; (8001ad4 <menu+0x524>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00b fd05 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 80019f6:	4a37      	ldr	r2, [pc, #220]	; (8001ad4 <menu+0x524>)
 80019f8:	210e      	movs	r1, #14
 80019fa:	2002      	movs	r0, #2
 80019fc:	f007 f952 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <menu+0x514>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	d123      	bne.n	8001a50 <menu+0x4a0>
			if(dilSecim == 0) {
 8001a08:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <menu+0x528>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <menu+0x46c>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <menu+0x56c>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	2002      	movs	r0, #2
 8001a16:	f007 f945 	bl	8008ca4 <lcd_print>
 8001a1a:	e008      	b.n	8001a2e <menu+0x47e>
			} else if(dilSecim == 1) {
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <menu+0x528>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d104      	bne.n	8001a2e <menu+0x47e>
				lcd_print(2, 1, "7.Error Code:");
 8001a24:	4a3e      	ldr	r2, [pc, #248]	; (8001b20 <menu+0x570>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f007 f93b 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <menu+0x534>)
 8001a30:	210f      	movs	r1, #15
 8001a32:	2002      	movs	r0, #2
 8001a34:	f007 f936 	bl	8008ca4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001a38:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <menu+0x574>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	4925      	ldr	r1, [pc, #148]	; (8001ad4 <menu+0x524>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00b fcdd 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <menu+0x524>)
 8001a48:	210e      	movs	r1, #14
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f007 f92a 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <menu+0x514>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b07      	cmp	r3, #7
 8001a56:	d123      	bne.n	8001aa0 <menu+0x4f0>
			if(dilSecim == 0) {
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <menu+0x528>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <menu+0x4bc>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a60:	4a31      	ldr	r2, [pc, #196]	; (8001b28 <menu+0x578>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	2002      	movs	r0, #2
 8001a66:	f007 f91d 	bl	8008ca4 <lcd_print>
 8001a6a:	e008      	b.n	8001a7e <menu+0x4ce>
			} else if(dilSecim == 1) {
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <menu+0x528>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d104      	bne.n	8001a7e <menu+0x4ce>
				lcd_print(2, 1, "8.Error Code:");
 8001a74:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <menu+0x57c>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f007 f913 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <menu+0x534>)
 8001a80:	210f      	movs	r1, #15
 8001a82:	2002      	movs	r0, #2
 8001a84:	f007 f90e 	bl	8008ca4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <menu+0x580>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	4911      	ldr	r1, [pc, #68]	; (8001ad4 <menu+0x524>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00b fcb5 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <menu+0x524>)
 8001a98:	210e      	movs	r1, #14
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f007 f902 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <menu+0x514>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d161      	bne.n	8001b6c <menu+0x5bc>
			if(dilSecim == 0) {
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <menu+0x528>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d143      	bne.n	8001b38 <menu+0x588>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <menu+0x584>)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f007 f8f5 	bl	8008ca4 <lcd_print>
 8001aba:	e046      	b.n	8001b4a <menu+0x59a>
 8001abc:	20000aec 	.word	0x20000aec
 8001ac0:	20000c6c 	.word	0x20000c6c
 8001ac4:	20000aee 	.word	0x20000aee
 8001ac8:	20000c7c 	.word	0x20000c7c
 8001acc:	0800e164 	.word	0x0800e164
 8001ad0:	20000b0e 	.word	0x20000b0e
 8001ad4:	20000a88 	.word	0x20000a88
 8001ad8:	20000b0d 	.word	0x20000b0d
 8001adc:	0800e168 	.word	0x0800e168
 8001ae0:	0800e178 	.word	0x0800e178
 8001ae4:	0800e188 	.word	0x0800e188
 8001ae8:	20000b0f 	.word	0x20000b0f
 8001aec:	0800e18c 	.word	0x0800e18c
 8001af0:	0800e19c 	.word	0x0800e19c
 8001af4:	20000b10 	.word	0x20000b10
 8001af8:	0800e1ac 	.word	0x0800e1ac
 8001afc:	0800e1bc 	.word	0x0800e1bc
 8001b00:	20000b11 	.word	0x20000b11
 8001b04:	0800e1cc 	.word	0x0800e1cc
 8001b08:	0800e1dc 	.word	0x0800e1dc
 8001b0c:	20000b12 	.word	0x20000b12
 8001b10:	0800e1ec 	.word	0x0800e1ec
 8001b14:	0800e1fc 	.word	0x0800e1fc
 8001b18:	20000b13 	.word	0x20000b13
 8001b1c:	0800e20c 	.word	0x0800e20c
 8001b20:	0800e21c 	.word	0x0800e21c
 8001b24:	20000b14 	.word	0x20000b14
 8001b28:	0800e22c 	.word	0x0800e22c
 8001b2c:	0800e23c 	.word	0x0800e23c
 8001b30:	20000b15 	.word	0x20000b15
 8001b34:	0800e24c 	.word	0x0800e24c
			} else if(dilSecim == 1) {
 8001b38:	4b9d      	ldr	r3, [pc, #628]	; (8001db0 <menu+0x800>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d104      	bne.n	8001b4a <menu+0x59a>
				lcd_print(2, 1, "9.Error Code:");
 8001b40:	4a9c      	ldr	r2, [pc, #624]	; (8001db4 <menu+0x804>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	2002      	movs	r0, #2
 8001b46:	f007 f8ad 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b4a:	4a9b      	ldr	r2, [pc, #620]	; (8001db8 <menu+0x808>)
 8001b4c:	210f      	movs	r1, #15
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f007 f8a8 	bl	8008ca4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001b54:	4b99      	ldr	r3, [pc, #612]	; (8001dbc <menu+0x80c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	220a      	movs	r2, #10
 8001b5a:	4999      	ldr	r1, [pc, #612]	; (8001dc0 <menu+0x810>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00b fc4f 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 8001b62:	4a97      	ldr	r2, [pc, #604]	; (8001dc0 <menu+0x810>)
 8001b64:	210e      	movs	r1, #14
 8001b66:	2002      	movs	r0, #2
 8001b68:	f007 f89c 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001b6c:	4b95      	ldr	r3, [pc, #596]	; (8001dc4 <menu+0x814>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b09      	cmp	r3, #9
 8001b72:	d123      	bne.n	8001bbc <menu+0x60c>
			if(dilSecim == 0) {
 8001b74:	4b8e      	ldr	r3, [pc, #568]	; (8001db0 <menu+0x800>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d105      	bne.n	8001b88 <menu+0x5d8>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001b7c:	4a92      	ldr	r2, [pc, #584]	; (8001dc8 <menu+0x818>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2002      	movs	r0, #2
 8001b82:	f007 f88f 	bl	8008ca4 <lcd_print>
 8001b86:	e008      	b.n	8001b9a <menu+0x5ea>
			} else if(dilSecim == 1) {
 8001b88:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <menu+0x800>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d104      	bne.n	8001b9a <menu+0x5ea>
				lcd_print(2, 1, "10.Error Code:");
 8001b90:	4a8e      	ldr	r2, [pc, #568]	; (8001dcc <menu+0x81c>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	2002      	movs	r0, #2
 8001b96:	f007 f885 	bl	8008ca4 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001b9a:	4a8d      	ldr	r2, [pc, #564]	; (8001dd0 <menu+0x820>)
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f007 f880 	bl	8008ca4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001ba4:	4b8b      	ldr	r3, [pc, #556]	; (8001dd4 <menu+0x824>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	220a      	movs	r2, #10
 8001baa:	4985      	ldr	r1, [pc, #532]	; (8001dc0 <menu+0x810>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00b fc27 	bl	800d400 <itoa>
			lcd_print(2, 15, snum);
 8001bb2:	4a83      	ldr	r2, [pc, #524]	; (8001dc0 <menu+0x810>)
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f007 f874 	bl	8008ca4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001bbc:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <menu+0x814>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b0a      	cmp	r3, #10
 8001bc2:	d112      	bne.n	8001bea <menu+0x63a>
			if(dilSecim == 0) {
 8001bc4:	4b7a      	ldr	r3, [pc, #488]	; (8001db0 <menu+0x800>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <menu+0x628>
				lcd_print(2, 1, "Silmek icin ent.");
 8001bcc:	4a82      	ldr	r2, [pc, #520]	; (8001dd8 <menu+0x828>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f007 f867 	bl	8008ca4 <lcd_print>
 8001bd6:	e008      	b.n	8001bea <menu+0x63a>
			} else if(dilSecim == 1) {
 8001bd8:	4b75      	ldr	r3, [pc, #468]	; (8001db0 <menu+0x800>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d104      	bne.n	8001bea <menu+0x63a>
				lcd_print(2, 1, "Del. press enter");
 8001be0:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <menu+0x82c>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	2002      	movs	r0, #2
 8001be6:	f007 f85d 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bea:	2102      	movs	r1, #2
 8001bec:	487c      	ldr	r0, [pc, #496]	; (8001de0 <menu+0x830>)
 8001bee:	f008 fb7f 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d119      	bne.n	8001c2c <menu+0x67c>
 8001bf8:	4b7a      	ldr	r3, [pc, #488]	; (8001de4 <menu+0x834>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d012      	beq.n	8001c2c <menu+0x67c>
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <menu+0x838>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10e      	bne.n	8001c2c <menu+0x67c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <menu+0x814>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <menu+0x814>)
 8001c18:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <menu+0x814>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d902      	bls.n	8001c28 <menu+0x678>
				hataGostermeSirasi = 0;
 8001c22:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <menu+0x814>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c28:	f002 ffdc 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	486c      	ldr	r0, [pc, #432]	; (8001de0 <menu+0x830>)
 8001c30:	f008 fb5e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d119      	bne.n	8001c6e <menu+0x6be>
 8001c3a:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <menu+0x834>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <menu+0x6be>
 8001c48:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <menu+0x838>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10e      	bne.n	8001c6e <menu+0x6be>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001c50:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <menu+0x814>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <menu+0x814>)
 8001c5a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <menu+0x814>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b0b      	cmp	r3, #11
 8001c62:	d902      	bls.n	8001c6a <menu+0x6ba>
	    		hataGostermeSirasi = 10;
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <menu+0x814>)
 8001c66:	220a      	movs	r2, #10
 8001c68:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c6a:	f002 ffbb 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001c6e:	2108      	movs	r1, #8
 8001c70:	485b      	ldr	r0, [pc, #364]	; (8001de0 <menu+0x830>)
 8001c72:	f008 fb3d 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d153      	bne.n	8001d24 <menu+0x774>
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <menu+0x834>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d04c      	beq.n	8001d24 <menu+0x774>
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <menu+0x814>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b0a      	cmp	r3, #10
 8001c90:	d148      	bne.n	8001d24 <menu+0x774>
			hataKayit1 = 0; eepromData[37] = 0;
 8001c92:	4b56      	ldr	r3, [pc, #344]	; (8001dec <menu+0x83c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <menu+0x840>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001ca0:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <menu+0x844>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	4b52      	ldr	r3, [pc, #328]	; (8001df0 <menu+0x840>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <menu+0x848>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <menu+0x840>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <menu+0x84c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <menu+0x840>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001cca:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <menu+0x850>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <menu+0x840>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <menu+0x854>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <menu+0x840>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <menu+0x858>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <menu+0x840>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001cf4:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <menu+0x85c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <menu+0x840>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <menu+0x80c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <menu+0x840>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <menu+0x824>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <menu+0x840>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001d1e:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <menu+0x860>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <menu+0x864>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	f040 8107 	bne.w	8001f3c <menu+0x98c>
		if(dilSecim == 0) {
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <menu+0x800>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d105      	bne.n	8001d42 <menu+0x792>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001d36:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <menu+0x868>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f006 ffb2 	bl	8008ca4 <lcd_print>
 8001d40:	e008      	b.n	8001d54 <menu+0x7a4>
		} else if(dilSecim == 1) {
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <menu+0x800>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d104      	bne.n	8001d54 <menu+0x7a4>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001d4a:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <menu+0x86c>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f006 ffa8 	bl	8008ca4 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <menu+0x838>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d003      	beq.n	8001d64 <menu+0x7b4>
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <menu+0x838>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d112      	bne.n	8001d8a <menu+0x7da>
			if(dilSecim == 0) {
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <menu+0x800>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <menu+0x7c8>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	; (8001e20 <menu+0x870>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2002      	movs	r0, #2
 8001d72:	f006 ff97 	bl	8008ca4 <lcd_print>
 8001d76:	e008      	b.n	8001d8a <menu+0x7da>
			} else if(dilSecim == 1) {
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <menu+0x800>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d104      	bne.n	8001d8a <menu+0x7da>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001d80:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <menu+0x874>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	2002      	movs	r0, #2
 8001d86:	f006 ff8d 	bl	8008ca4 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <menu+0x878>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d157      	bne.n	8001e42 <menu+0x892>
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <menu+0x838>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d153      	bne.n	8001e42 <menu+0x892>
			if(dilSecim == 0) {
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <menu+0x800>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d146      	bne.n	8001e30 <menu+0x880>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001da2:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <menu+0x87c>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	2002      	movs	r0, #2
 8001da8:	f006 ff7c 	bl	8008ca4 <lcd_print>
 8001dac:	e049      	b.n	8001e42 <menu+0x892>
 8001dae:	bf00      	nop
 8001db0:	20000b0d 	.word	0x20000b0d
 8001db4:	0800e25c 	.word	0x0800e25c
 8001db8:	0800e188 	.word	0x0800e188
 8001dbc:	20000b16 	.word	0x20000b16
 8001dc0:	20000a88 	.word	0x20000a88
 8001dc4:	20000aee 	.word	0x20000aee
 8001dc8:	0800e26c 	.word	0x0800e26c
 8001dcc:	0800e27c 	.word	0x0800e27c
 8001dd0:	0800e28c 	.word	0x0800e28c
 8001dd4:	20000b17 	.word	0x20000b17
 8001dd8:	0800e290 	.word	0x0800e290
 8001ddc:	0800e2a4 	.word	0x0800e2a4
 8001de0:	40010800 	.word	0x40010800
 8001de4:	20000b1b 	.word	0x20000b1b
 8001de8:	20000afb 	.word	0x20000afb
 8001dec:	20000b0e 	.word	0x20000b0e
 8001df0:	20000a18 	.word	0x20000a18
 8001df4:	20000b0f 	.word	0x20000b0f
 8001df8:	20000b10 	.word	0x20000b10
 8001dfc:	20000b11 	.word	0x20000b11
 8001e00:	20000b12 	.word	0x20000b12
 8001e04:	20000b13 	.word	0x20000b13
 8001e08:	20000b14 	.word	0x20000b14
 8001e0c:	20000b15 	.word	0x20000b15
 8001e10:	20000b18 	.word	0x20000b18
 8001e14:	20000aec 	.word	0x20000aec
 8001e18:	0800e2b8 	.word	0x0800e2b8
 8001e1c:	0800e2cc 	.word	0x0800e2cc
 8001e20:	0800e2e0 	.word	0x0800e2e0
 8001e24:	0800e2f4 	.word	0x0800e2f4
 8001e28:	20000aed 	.word	0x20000aed
 8001e2c:	0800e308 	.word	0x0800e308
			} else if(dilSecim == 1) {
 8001e30:	4b99      	ldr	r3, [pc, #612]	; (8002098 <menu+0xae8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d104      	bne.n	8001e42 <menu+0x892>
				lcd_print(2, 1, "Deadman Control");
 8001e38:	4a98      	ldr	r2, [pc, #608]	; (800209c <menu+0xaec>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f006 ff31 	bl	8008ca4 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e42:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <menu+0xaf0>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d116      	bne.n	8001e78 <menu+0x8c8>
 8001e4a:	4b96      	ldr	r3, [pc, #600]	; (80020a4 <menu+0xaf4>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d112      	bne.n	8001e78 <menu+0x8c8>
			if(dilSecim == 0) {
 8001e52:	4b91      	ldr	r3, [pc, #580]	; (8002098 <menu+0xae8>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <menu+0x8b6>
				lcd_print(2, 1, "Bas gonder     ");
 8001e5a:	4a93      	ldr	r2, [pc, #588]	; (80020a8 <menu+0xaf8>)
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f006 ff20 	bl	8008ca4 <lcd_print>
 8001e64:	e008      	b.n	8001e78 <menu+0x8c8>
			} else if(dilSecim == 1) {
 8001e66:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <menu+0xae8>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d104      	bne.n	8001e78 <menu+0x8c8>
				lcd_print(2, 1, "Call & Send    ");
 8001e6e:	4a8f      	ldr	r2, [pc, #572]	; (80020ac <menu+0xafc>)
 8001e70:	2101      	movs	r1, #1
 8001e72:	2002      	movs	r0, #2
 8001e74:	f006 ff16 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e78:	2102      	movs	r1, #2
 8001e7a:	488d      	ldr	r0, [pc, #564]	; (80020b0 <menu+0xb00>)
 8001e7c:	f008 fa38 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d119      	bne.n	8001eba <menu+0x90a>
 8001e86:	4b8b      	ldr	r3, [pc, #556]	; (80020b4 <menu+0xb04>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f083 0301 	eor.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d012      	beq.n	8001eba <menu+0x90a>
 8001e94:	4b83      	ldr	r3, [pc, #524]	; (80020a4 <menu+0xaf4>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10e      	bne.n	8001eba <menu+0x90a>
			calismaSekli = calismaSekli + 1;
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <menu+0xaf0>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b7e      	ldr	r3, [pc, #504]	; (80020a0 <menu+0xaf0>)
 8001ea6:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001ea8:	4b7d      	ldr	r3, [pc, #500]	; (80020a0 <menu+0xaf0>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d902      	bls.n	8001eb6 <menu+0x906>
				calismaSekli = 0;
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <menu+0xaf0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001eb6:	f002 fe95 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001eba:	2104      	movs	r1, #4
 8001ebc:	487c      	ldr	r0, [pc, #496]	; (80020b0 <menu+0xb00>)
 8001ebe:	f008 fa17 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d119      	bne.n	8001efc <menu+0x94c>
 8001ec8:	4b7a      	ldr	r3, [pc, #488]	; (80020b4 <menu+0xb04>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f083 0301 	eor.w	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <menu+0x94c>
 8001ed6:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <menu+0xaf4>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10e      	bne.n	8001efc <menu+0x94c>
			calismaSekli = calismaSekli - 1;
 8001ede:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <menu+0xaf0>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	; (80020a0 <menu+0xaf0>)
 8001ee8:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001eea:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <menu+0xaf0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <menu+0x948>
	    		calismaSekli = 1;
 8001ef2:	4b6b      	ldr	r3, [pc, #428]	; (80020a0 <menu+0xaf0>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ef8:	f002 fe74 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001efc:	2108      	movs	r1, #8
 8001efe:	486c      	ldr	r0, [pc, #432]	; (80020b0 <menu+0xb00>)
 8001f00:	f008 f9f6 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d118      	bne.n	8001f3c <menu+0x98c>
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <menu+0xb04>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	f083 0301 	eor.w	r3, r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d011      	beq.n	8001f3c <menu+0x98c>
			eepromData[1] = calismaSekli;
 8001f18:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <menu+0xaf0>)
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <menu+0xb08>)
 8001f1e:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001f20:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <menu+0xaf0>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d106      	bne.n	8001f36 <menu+0x986>
				altLimit = 1;
 8001f28:	4b64      	ldr	r3, [pc, #400]	; (80020bc <menu+0xb0c>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001f2e:	4b63      	ldr	r3, [pc, #396]	; (80020bc <menu+0xb0c>)
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <menu+0xb08>)
 8001f34:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001f36:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <menu+0xb10>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001f3c:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <menu+0xb14>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	f040 8083 	bne.w	800204c <menu+0xa9c>
		if(dilSecim == 0) {
 8001f46:	4b54      	ldr	r3, [pc, #336]	; (8002098 <menu+0xae8>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d105      	bne.n	8001f5a <menu+0x9aa>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001f4e:	4a5e      	ldr	r2, [pc, #376]	; (80020c8 <menu+0xb18>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	2001      	movs	r0, #1
 8001f54:	f006 fea6 	bl	8008ca4 <lcd_print>
 8001f58:	e008      	b.n	8001f6c <menu+0x9bc>
		} else if(dilSecim == 1) {
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	; (8002098 <menu+0xae8>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d104      	bne.n	8001f6c <menu+0x9bc>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001f62:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <menu+0xb1c>)
 8001f64:	2101      	movs	r1, #1
 8001f66:	2001      	movs	r0, #1
 8001f68:	f006 fe9c 	bl	8008ca4 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <menu+0xb20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d113      	bne.n	8001f9c <menu+0x9ec>
			if(dilSecim == 0) {
 8001f74:	4b48      	ldr	r3, [pc, #288]	; (8002098 <menu+0xae8>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <menu+0x9d8>
				lcd_print(2, 1, "Pasif           ");
 8001f7c:	4a55      	ldr	r2, [pc, #340]	; (80020d4 <menu+0xb24>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2002      	movs	r0, #2
 8001f82:	f006 fe8f 	bl	8008ca4 <lcd_print>
 8001f86:	e012      	b.n	8001fae <menu+0x9fe>
			} else if(dilSecim == 1) {
 8001f88:	4b43      	ldr	r3, [pc, #268]	; (8002098 <menu+0xae8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10e      	bne.n	8001fae <menu+0x9fe>
				lcd_print(2, 1, "Passive         ");
 8001f90:	4a51      	ldr	r2, [pc, #324]	; (80020d8 <menu+0xb28>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	2002      	movs	r0, #2
 8001f96:	f006 fe85 	bl	8008ca4 <lcd_print>
 8001f9a:	e008      	b.n	8001fae <menu+0x9fe>
			}
		} else if(emniyetCercevesi == 1) {
 8001f9c:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <menu+0xb20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d104      	bne.n	8001fae <menu+0x9fe>
			lcd_print(2, 1, "OND Safety     ");
 8001fa4:	4a4d      	ldr	r2, [pc, #308]	; (80020dc <menu+0xb2c>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2002      	movs	r0, #2
 8001faa:	f006 fe7b 	bl	8008ca4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fae:	2102      	movs	r1, #2
 8001fb0:	483f      	ldr	r0, [pc, #252]	; (80020b0 <menu+0xb00>)
 8001fb2:	f008 f99d 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d115      	bne.n	8001fe8 <menu+0xa38>
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <menu+0xb04>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f083 0301 	eor.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00e      	beq.n	8001fe8 <menu+0xa38>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <menu+0xb20>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	; (80020d0 <menu+0xb20>)
 8001fd4:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <menu+0xb20>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d902      	bls.n	8001fe4 <menu+0xa34>
				emniyetCercevesi = 0;
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <menu+0xb20>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fe4:	f002 fdfe 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4831      	ldr	r0, [pc, #196]	; (80020b0 <menu+0xb00>)
 8001fec:	f008 f980 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d115      	bne.n	8002022 <menu+0xa72>
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <menu+0xb04>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f083 0301 	eor.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <menu+0xa72>
			emniyetCercevesi = emniyetCercevesi - 1;
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <menu+0xb20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3b01      	subs	r3, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <menu+0xb20>)
 800200e:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8002010:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <menu+0xb20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <menu+0xa6e>
		   		emniyetCercevesi = 1;
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <menu+0xb20>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800201e:	f002 fde1 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002022:	2108      	movs	r1, #8
 8002024:	4822      	ldr	r0, [pc, #136]	; (80020b0 <menu+0xb00>)
 8002026:	f008 f963 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800202a:	4603      	mov	r3, r0
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10d      	bne.n	800204c <menu+0xa9c>
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <menu+0xb04>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f083 0301 	eor.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <menu+0xa9c>
			eepromData[2] = emniyetCercevesi;
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <menu+0xb20>)
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <menu+0xb08>)
 8002044:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <menu+0xb10>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <menu+0xb14>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b04      	cmp	r3, #4
 8002052:	f040 80bb 	bne.w	80021cc <menu+0xc1c>
		if(dilSecim == 0) {
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <menu+0xae8>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d105      	bne.n	800206a <menu+0xaba>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800205e:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <menu+0xb30>)
 8002060:	2101      	movs	r1, #1
 8002062:	2001      	movs	r0, #1
 8002064:	f006 fe1e 	bl	8008ca4 <lcd_print>
 8002068:	e008      	b.n	800207c <menu+0xacc>
		} else if(dilSecim == 1) {
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <menu+0xae8>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d104      	bne.n	800207c <menu+0xacc>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <menu+0xb34>)
 8002074:	2101      	movs	r1, #1
 8002076:	2001      	movs	r0, #1
 8002078:	f006 fe14 	bl	8008ca4 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <menu+0xb38>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d13d      	bne.n	8002100 <menu+0xb50>
			if(dilSecim == 0) {
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <menu+0xae8>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d12f      	bne.n	80020ec <menu+0xb3c>
				lcd_print(2, 1, "Pasif           ");
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <menu+0xb24>)
 800208e:	2101      	movs	r1, #1
 8002090:	2002      	movs	r0, #2
 8002092:	f006 fe07 	bl	8008ca4 <lcd_print>
 8002096:	e04a      	b.n	800212e <menu+0xb7e>
 8002098:	20000b0d 	.word	0x20000b0d
 800209c:	0800e318 	.word	0x0800e318
 80020a0:	20000aed 	.word	0x20000aed
 80020a4:	20000afb 	.word	0x20000afb
 80020a8:	0800e328 	.word	0x0800e328
 80020ac:	0800e338 	.word	0x0800e338
 80020b0:	40010800 	.word	0x40010800
 80020b4:	20000b1b 	.word	0x20000b1b
 80020b8:	20000a18 	.word	0x20000a18
 80020bc:	20000af2 	.word	0x20000af2
 80020c0:	20000b18 	.word	0x20000b18
 80020c4:	20000aec 	.word	0x20000aec
 80020c8:	0800e348 	.word	0x0800e348
 80020cc:	0800e35c 	.word	0x0800e35c
 80020d0:	20000af0 	.word	0x20000af0
 80020d4:	0800e370 	.word	0x0800e370
 80020d8:	0800e384 	.word	0x0800e384
 80020dc:	0800e398 	.word	0x0800e398
 80020e0:	0800e3a8 	.word	0x0800e3a8
 80020e4:	0800e3bc 	.word	0x0800e3bc
 80020e8:	20000af1 	.word	0x20000af1
			} else if(dilSecim == 1) {
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <menu+0xd7c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d11c      	bne.n	800212e <menu+0xb7e>
				lcd_print(2, 1, "Passive         ");
 80020f4:	4a8e      	ldr	r2, [pc, #568]	; (8002330 <menu+0xd80>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	2002      	movs	r0, #2
 80020fa:	f006 fdd3 	bl	8008ca4 <lcd_print>
 80020fe:	e016      	b.n	800212e <menu+0xb7e>
			}
		} else if(yavaslamaLimit == 1) {
 8002100:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <menu+0xd84>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d112      	bne.n	800212e <menu+0xb7e>
			if(dilSecim == 0) {
 8002108:	4b88      	ldr	r3, [pc, #544]	; (800232c <menu+0xd7c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <menu+0xb6c>
				lcd_print(2, 1, "Aktif           ");
 8002110:	4a89      	ldr	r2, [pc, #548]	; (8002338 <menu+0xd88>)
 8002112:	2101      	movs	r1, #1
 8002114:	2002      	movs	r0, #2
 8002116:	f006 fdc5 	bl	8008ca4 <lcd_print>
 800211a:	e008      	b.n	800212e <menu+0xb7e>
			} else if(dilSecim == 1) {
 800211c:	4b83      	ldr	r3, [pc, #524]	; (800232c <menu+0xd7c>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d104      	bne.n	800212e <menu+0xb7e>
				lcd_print(2, 1, "Active          ");
 8002124:	4a85      	ldr	r2, [pc, #532]	; (800233c <menu+0xd8c>)
 8002126:	2101      	movs	r1, #1
 8002128:	2002      	movs	r0, #2
 800212a:	f006 fdbb 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800212e:	2102      	movs	r1, #2
 8002130:	4883      	ldr	r0, [pc, #524]	; (8002340 <menu+0xd90>)
 8002132:	f008 f8dd 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d115      	bne.n	8002168 <menu+0xbb8>
 800213c:	4b81      	ldr	r3, [pc, #516]	; (8002344 <menu+0xd94>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f083 0301 	eor.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00e      	beq.n	8002168 <menu+0xbb8>
			yavaslamaLimit = yavaslamaLimit + 1;
 800214a:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <menu+0xd84>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b78      	ldr	r3, [pc, #480]	; (8002334 <menu+0xd84>)
 8002154:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002156:	4b77      	ldr	r3, [pc, #476]	; (8002334 <menu+0xd84>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d902      	bls.n	8002164 <menu+0xbb4>
				yavaslamaLimit = 0;
 800215e:	4b75      	ldr	r3, [pc, #468]	; (8002334 <menu+0xd84>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002164:	f002 fd3e 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002168:	2104      	movs	r1, #4
 800216a:	4875      	ldr	r0, [pc, #468]	; (8002340 <menu+0xd90>)
 800216c:	f008 f8c0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d115      	bne.n	80021a2 <menu+0xbf2>
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <menu+0xd94>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00e      	beq.n	80021a2 <menu+0xbf2>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002184:	4b6b      	ldr	r3, [pc, #428]	; (8002334 <menu+0xd84>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	3b01      	subs	r3, #1
 800218a:	b2da      	uxtb	r2, r3
 800218c:	4b69      	ldr	r3, [pc, #420]	; (8002334 <menu+0xd84>)
 800218e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002190:	4b68      	ldr	r3, [pc, #416]	; (8002334 <menu+0xd84>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <menu+0xbee>
		   		yavaslamaLimit = 1;
 8002198:	4b66      	ldr	r3, [pc, #408]	; (8002334 <menu+0xd84>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800219e:	f002 fd21 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021a2:	2108      	movs	r1, #8
 80021a4:	4866      	ldr	r0, [pc, #408]	; (8002340 <menu+0xd90>)
 80021a6:	f008 f8a3 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10d      	bne.n	80021cc <menu+0xc1c>
 80021b0:	4b64      	ldr	r3, [pc, #400]	; (8002344 <menu+0xd94>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <menu+0xc1c>
			eepromData[4] = yavaslamaLimit;
 80021be:	4b5d      	ldr	r3, [pc, #372]	; (8002334 <menu+0xd84>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b61      	ldr	r3, [pc, #388]	; (8002348 <menu+0xd98>)
 80021c4:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80021c6:	4b61      	ldr	r3, [pc, #388]	; (800234c <menu+0xd9c>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80021cc:	4b60      	ldr	r3, [pc, #384]	; (8002350 <menu+0xda0>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	f040 80d9 	bne.w	8002388 <menu+0xdd8>
		if(dilSecim == 0) {
 80021d6:	4b55      	ldr	r3, [pc, #340]	; (800232c <menu+0xd7c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <menu+0xc3a>
			lcd_print(1, 1, "ALT LIMIT       ");
 80021de:	4a5d      	ldr	r2, [pc, #372]	; (8002354 <menu+0xda4>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2001      	movs	r0, #1
 80021e4:	f006 fd5e 	bl	8008ca4 <lcd_print>
 80021e8:	e008      	b.n	80021fc <menu+0xc4c>
		} else if(dilSecim == 1) {
 80021ea:	4b50      	ldr	r3, [pc, #320]	; (800232c <menu+0xd7c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d104      	bne.n	80021fc <menu+0xc4c>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80021f2:	4a59      	ldr	r2, [pc, #356]	; (8002358 <menu+0xda8>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	2001      	movs	r0, #1
 80021f8:	f006 fd54 	bl	8008ca4 <lcd_print>
		}

		if(altLimit == 0) {
 80021fc:	4b57      	ldr	r3, [pc, #348]	; (800235c <menu+0xdac>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d113      	bne.n	800222c <menu+0xc7c>
			if(dilSecim == 0) {
 8002204:	4b49      	ldr	r3, [pc, #292]	; (800232c <menu+0xd7c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <menu+0xc68>
				lcd_print(2, 1, "Pasif           ");
 800220c:	4a54      	ldr	r2, [pc, #336]	; (8002360 <menu+0xdb0>)
 800220e:	2101      	movs	r1, #1
 8002210:	2002      	movs	r0, #2
 8002212:	f006 fd47 	bl	8008ca4 <lcd_print>
 8002216:	e020      	b.n	800225a <menu+0xcaa>
			} else if(dilSecim == 1) {
 8002218:	4b44      	ldr	r3, [pc, #272]	; (800232c <menu+0xd7c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d11c      	bne.n	800225a <menu+0xcaa>
				lcd_print(2, 1, "Passive         ");
 8002220:	4a43      	ldr	r2, [pc, #268]	; (8002330 <menu+0xd80>)
 8002222:	2101      	movs	r1, #1
 8002224:	2002      	movs	r0, #2
 8002226:	f006 fd3d 	bl	8008ca4 <lcd_print>
 800222a:	e016      	b.n	800225a <menu+0xcaa>
			}
		} else if(altLimit == 1) {
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <menu+0xdac>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d112      	bne.n	800225a <menu+0xcaa>
			if(dilSecim == 0){
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <menu+0xd7c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <menu+0xc98>
				lcd_print(2, 1, "Aktif           ");
 800223c:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <menu+0xd88>)
 800223e:	2101      	movs	r1, #1
 8002240:	2002      	movs	r0, #2
 8002242:	f006 fd2f 	bl	8008ca4 <lcd_print>
 8002246:	e008      	b.n	800225a <menu+0xcaa>
			} else if(dilSecim == 1){
 8002248:	4b38      	ldr	r3, [pc, #224]	; (800232c <menu+0xd7c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d104      	bne.n	800225a <menu+0xcaa>
				lcd_print(2, 1, "Active          ");
 8002250:	4a3a      	ldr	r2, [pc, #232]	; (800233c <menu+0xd8c>)
 8002252:	2101      	movs	r1, #1
 8002254:	2002      	movs	r0, #2
 8002256:	f006 fd25 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800225a:	2102      	movs	r1, #2
 800225c:	4838      	ldr	r0, [pc, #224]	; (8002340 <menu+0xd90>)
 800225e:	f008 f847 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d119      	bne.n	800229c <menu+0xcec>
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <menu+0xd94>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f083 0301 	eor.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <menu+0xcec>
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <menu+0xdb4>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10e      	bne.n	800229c <menu+0xcec>
			altLimit = altLimit + 1;
 800227e:	4b37      	ldr	r3, [pc, #220]	; (800235c <menu+0xdac>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <menu+0xdac>)
 8002288:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800228a:	4b34      	ldr	r3, [pc, #208]	; (800235c <menu+0xdac>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d902      	bls.n	8002298 <menu+0xce8>
				altLimit = 0;
 8002292:	4b32      	ldr	r3, [pc, #200]	; (800235c <menu+0xdac>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002298:	f002 fca4 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800229c:	2104      	movs	r1, #4
 800229e:	4828      	ldr	r0, [pc, #160]	; (8002340 <menu+0xd90>)
 80022a0:	f008 f826 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d119      	bne.n	80022de <menu+0xd2e>
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <menu+0xd94>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d012      	beq.n	80022de <menu+0xd2e>
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <menu+0xdb4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10e      	bne.n	80022de <menu+0xd2e>
			altLimit = altLimit - 1;
 80022c0:	4b26      	ldr	r3, [pc, #152]	; (800235c <menu+0xdac>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <menu+0xdac>)
 80022ca:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <menu+0xdac>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <menu+0xd2a>
		   		altLimit = 1;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <menu+0xdac>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022da:	f002 fc83 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2108      	movs	r1, #8
 80022e0:	4817      	ldr	r0, [pc, #92]	; (8002340 <menu+0xd90>)
 80022e2:	f008 f805 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d14d      	bne.n	8002388 <menu+0xdd8>
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <menu+0xd94>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d046      	beq.n	8002388 <menu+0xdd8>
			eepromData[5] = altLimit;
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <menu+0xdac>)
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <menu+0xd98>)
 8002300:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <menu+0xdac>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d130      	bne.n	800236c <menu+0xdbc>
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <menu+0xdb8>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <menu+0xd6a>
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <menu+0xdb8>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d128      	bne.n	800236c <menu+0xdbc>
				kapiTablaAcKonum = 3;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <menu+0xdb8>)
 800231c:	2203      	movs	r2, #3
 800231e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <menu+0xdb8>)
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <menu+0xd98>)
 8002326:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800232a:	e02a      	b.n	8002382 <menu+0xdd2>
 800232c:	20000b0d 	.word	0x20000b0d
 8002330:	0800e384 	.word	0x0800e384
 8002334:	20000af1 	.word	0x20000af1
 8002338:	0800e3d0 	.word	0x0800e3d0
 800233c:	0800e3e4 	.word	0x0800e3e4
 8002340:	40010800 	.word	0x40010800
 8002344:	20000b1b 	.word	0x20000b1b
 8002348:	20000a18 	.word	0x20000a18
 800234c:	20000b18 	.word	0x20000b18
 8002350:	20000aec 	.word	0x20000aec
 8002354:	0800e3f8 	.word	0x0800e3f8
 8002358:	0800e40c 	.word	0x0800e40c
 800235c:	20000af2 	.word	0x20000af2
 8002360:	0800e370 	.word	0x0800e370
 8002364:	20000aed 	.word	0x20000aed
 8002368:	20000af9 	.word	0x20000af9
			} else if(altLimit == 0) {
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <menu+0xfe0>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <menu+0xdd2>
				platformSilindirTipi = 0;
 8002374:	4b87      	ldr	r3, [pc, #540]	; (8002594 <menu+0xfe4>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800237a:	4b86      	ldr	r3, [pc, #536]	; (8002594 <menu+0xfe4>)
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	4b86      	ldr	r3, [pc, #536]	; (8002598 <menu+0xfe8>)
 8002380:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002382:	4b86      	ldr	r3, [pc, #536]	; (800259c <menu+0xfec>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002388:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <menu+0xff0>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b06      	cmp	r3, #6
 800238e:	f040 8091 	bne.w	80024b4 <menu+0xf04>
		if(dilSecim == 0) {
 8002392:	4b84      	ldr	r3, [pc, #528]	; (80025a4 <menu+0xff4>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <menu+0xdf6>
			lcd_print(1, 1, "BASINC SALTERI ");
 800239a:	4a83      	ldr	r2, [pc, #524]	; (80025a8 <menu+0xff8>)
 800239c:	2101      	movs	r1, #1
 800239e:	2001      	movs	r0, #1
 80023a0:	f006 fc80 	bl	8008ca4 <lcd_print>
 80023a4:	e008      	b.n	80023b8 <menu+0xe08>
		} else if(dilSecim == 1){
 80023a6:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <menu+0xff4>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d104      	bne.n	80023b8 <menu+0xe08>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80023ae:	4a7f      	ldr	r2, [pc, #508]	; (80025ac <menu+0xffc>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	2001      	movs	r0, #1
 80023b4:	f006 fc76 	bl	8008ca4 <lcd_print>
		}
		if(basincSalteri == 0){
 80023b8:	4b7d      	ldr	r3, [pc, #500]	; (80025b0 <menu+0x1000>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d113      	bne.n	80023e8 <menu+0xe38>
			if(dilSecim == 0) {
 80023c0:	4b78      	ldr	r3, [pc, #480]	; (80025a4 <menu+0xff4>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <menu+0xe24>
				lcd_print(2, 1, "Pasif           ");
 80023c8:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <menu+0x1004>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	2002      	movs	r0, #2
 80023ce:	f006 fc69 	bl	8008ca4 <lcd_print>
 80023d2:	e020      	b.n	8002416 <menu+0xe66>
			} else if(dilSecim == 1){
 80023d4:	4b73      	ldr	r3, [pc, #460]	; (80025a4 <menu+0xff4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d11c      	bne.n	8002416 <menu+0xe66>
				lcd_print(2, 1, "Passive         ");
 80023dc:	4a76      	ldr	r2, [pc, #472]	; (80025b8 <menu+0x1008>)
 80023de:	2101      	movs	r1, #1
 80023e0:	2002      	movs	r0, #2
 80023e2:	f006 fc5f 	bl	8008ca4 <lcd_print>
 80023e6:	e016      	b.n	8002416 <menu+0xe66>
			}
		} else if(basincSalteri == 1) {
 80023e8:	4b71      	ldr	r3, [pc, #452]	; (80025b0 <menu+0x1000>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d112      	bne.n	8002416 <menu+0xe66>
			if(dilSecim == 0) {
 80023f0:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <menu+0xff4>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <menu+0xe54>
				lcd_print(2, 1, "Aktif           ");
 80023f8:	4a70      	ldr	r2, [pc, #448]	; (80025bc <menu+0x100c>)
 80023fa:	2101      	movs	r1, #1
 80023fc:	2002      	movs	r0, #2
 80023fe:	f006 fc51 	bl	8008ca4 <lcd_print>
 8002402:	e008      	b.n	8002416 <menu+0xe66>
			} else if(dilSecim == 1) {
 8002404:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <menu+0xff4>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d104      	bne.n	8002416 <menu+0xe66>
				lcd_print(2, 1, "Active          ");
 800240c:	4a6c      	ldr	r2, [pc, #432]	; (80025c0 <menu+0x1010>)
 800240e:	2101      	movs	r1, #1
 8002410:	2002      	movs	r0, #2
 8002412:	f006 fc47 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002416:	2102      	movs	r1, #2
 8002418:	486a      	ldr	r0, [pc, #424]	; (80025c4 <menu+0x1014>)
 800241a:	f007 ff69 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	d115      	bne.n	8002450 <menu+0xea0>
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <menu+0x1018>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00e      	beq.n	8002450 <menu+0xea0>
			basincSalteri = basincSalteri + 1;
 8002432:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <menu+0x1000>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <menu+0x1000>)
 800243c:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800243e:	4b5c      	ldr	r3, [pc, #368]	; (80025b0 <menu+0x1000>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d902      	bls.n	800244c <menu+0xe9c>
				basincSalteri = 0;
 8002446:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <menu+0x1000>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800244c:	f002 fbca 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002450:	2104      	movs	r1, #4
 8002452:	485c      	ldr	r0, [pc, #368]	; (80025c4 <menu+0x1014>)
 8002454:	f007 ff4c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002458:	4603      	mov	r3, r0
 800245a:	2b01      	cmp	r3, #1
 800245c:	d115      	bne.n	800248a <menu+0xeda>
 800245e:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <menu+0x1018>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	f083 0301 	eor.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00e      	beq.n	800248a <menu+0xeda>
			basincSalteri = basincSalteri - 1;
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <menu+0x1000>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <menu+0x1000>)
 8002476:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002478:	4b4d      	ldr	r3, [pc, #308]	; (80025b0 <menu+0x1000>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <menu+0xed6>
		   		basincSalteri = 1;
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <menu+0x1000>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002486:	f002 fbad 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800248a:	2108      	movs	r1, #8
 800248c:	484d      	ldr	r0, [pc, #308]	; (80025c4 <menu+0x1014>)
 800248e:	f007 ff2f 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002492:	4603      	mov	r3, r0
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10d      	bne.n	80024b4 <menu+0xf04>
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <menu+0x1018>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	f083 0301 	eor.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <menu+0xf04>
			eepromData[6] = basincSalteri;
 80024a6:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <menu+0x1000>)
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <menu+0xfe8>)
 80024ac:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80024ae:	4b3b      	ldr	r3, [pc, #236]	; (800259c <menu+0xfec>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <menu+0xff0>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b07      	cmp	r3, #7
 80024ba:	f040 80fa 	bne.w	80026b2 <menu+0x1102>
		if(dilSecim == 0) {
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <menu+0xff4>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <menu+0xf22>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80024c6:	4a41      	ldr	r2, [pc, #260]	; (80025cc <menu+0x101c>)
 80024c8:	2101      	movs	r1, #1
 80024ca:	2001      	movs	r0, #1
 80024cc:	f006 fbea 	bl	8008ca4 <lcd_print>
 80024d0:	e008      	b.n	80024e4 <menu+0xf34>
		} else if(dilSecim == 1){
 80024d2:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <menu+0xff4>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d104      	bne.n	80024e4 <menu+0xf34>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80024da:	4a3d      	ldr	r2, [pc, #244]	; (80025d0 <menu+0x1020>)
 80024dc:	2101      	movs	r1, #1
 80024de:	2001      	movs	r0, #1
 80024e0:	f006 fbe0 	bl	8008ca4 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80024e4:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <menu+0x1024>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d113      	bne.n	8002514 <menu+0xf64>
			if(dilSecim == 0) {
 80024ec:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <menu+0xff4>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <menu+0xf50>
				lcd_print(2, 1, "Pasif           ");
 80024f4:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <menu+0x1004>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	2002      	movs	r0, #2
 80024fa:	f006 fbd3 	bl	8008ca4 <lcd_print>
 80024fe:	e07e      	b.n	80025fe <menu+0x104e>
			} else if(dilSecim == 1){
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <menu+0xff4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d17a      	bne.n	80025fe <menu+0x104e>
				lcd_print(2, 1, "Passive         ");
 8002508:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <menu+0x1008>)
 800250a:	2101      	movs	r1, #1
 800250c:	2002      	movs	r0, #2
 800250e:	f006 fbc9 	bl	8008ca4 <lcd_print>
 8002512:	e074      	b.n	80025fe <menu+0x104e>
			}
		} else if(kapiSecimleri == 1) {
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <menu+0x1024>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d113      	bne.n	8002544 <menu+0xf94>
			if(dilSecim == 0) {
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <menu+0xff4>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <menu+0xf80>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002524:	4a2c      	ldr	r2, [pc, #176]	; (80025d8 <menu+0x1028>)
 8002526:	2101      	movs	r1, #1
 8002528:	2002      	movs	r0, #2
 800252a:	f006 fbbb 	bl	8008ca4 <lcd_print>
 800252e:	e066      	b.n	80025fe <menu+0x104e>
			} else if(dilSecim == 1) {
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <menu+0xff4>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d162      	bne.n	80025fe <menu+0x104e>
				lcd_print(2, 1, "Floor door act  ");
 8002538:	4a28      	ldr	r2, [pc, #160]	; (80025dc <menu+0x102c>)
 800253a:	2101      	movs	r1, #1
 800253c:	2002      	movs	r0, #2
 800253e:	f006 fbb1 	bl	8008ca4 <lcd_print>
 8002542:	e05c      	b.n	80025fe <menu+0x104e>
			}
		} else if(kapiSecimleri == 2){
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <menu+0x1024>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d113      	bne.n	8002574 <menu+0xfc4>
			if(dilSecim == 0) {
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <menu+0xff4>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <menu+0xfb0>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <menu+0x1030>)
 8002556:	2101      	movs	r1, #1
 8002558:	2002      	movs	r0, #2
 800255a:	f006 fba3 	bl	8008ca4 <lcd_print>
 800255e:	e04e      	b.n	80025fe <menu+0x104e>
			} else if(dilSecim == 1) {
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <menu+0xff4>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d14a      	bne.n	80025fe <menu+0x104e>
				lcd_print(2, 1, "Pltfrm door act ");
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <menu+0x1034>)
 800256a:	2101      	movs	r1, #1
 800256c:	2002      	movs	r0, #2
 800256e:	f006 fb99 	bl	8008ca4 <lcd_print>
 8002572:	e044      	b.n	80025fe <menu+0x104e>
			}
		} else if(kapiSecimleri == 3){
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <menu+0x1024>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d140      	bne.n	80025fe <menu+0x104e>
			if(dilSecim == 0) {
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <menu+0xff4>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d133      	bne.n	80025ec <menu+0x103c>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <menu+0x1038>)
 8002586:	2101      	movs	r1, #1
 8002588:	2002      	movs	r0, #2
 800258a:	f006 fb8b 	bl	8008ca4 <lcd_print>
 800258e:	e036      	b.n	80025fe <menu+0x104e>
 8002590:	20000af2 	.word	0x20000af2
 8002594:	20000aff 	.word	0x20000aff
 8002598:	20000a18 	.word	0x20000a18
 800259c:	20000b18 	.word	0x20000b18
 80025a0:	20000aec 	.word	0x20000aec
 80025a4:	20000b0d 	.word	0x20000b0d
 80025a8:	0800e420 	.word	0x0800e420
 80025ac:	0800e430 	.word	0x0800e430
 80025b0:	20000af3 	.word	0x20000af3
 80025b4:	0800e370 	.word	0x0800e370
 80025b8:	0800e384 	.word	0x0800e384
 80025bc:	0800e3d0 	.word	0x0800e3d0
 80025c0:	0800e3e4 	.word	0x0800e3e4
 80025c4:	40010800 	.word	0x40010800
 80025c8:	20000b1b 	.word	0x20000b1b
 80025cc:	0800e440 	.word	0x0800e440
 80025d0:	0800e454 	.word	0x0800e454
 80025d4:	20000af4 	.word	0x20000af4
 80025d8:	0800e468 	.word	0x0800e468
 80025dc:	0800e47c 	.word	0x0800e47c
 80025e0:	0800e490 	.word	0x0800e490
 80025e4:	0800e4a4 	.word	0x0800e4a4
 80025e8:	0800e4b8 	.word	0x0800e4b8
			} else if(dilSecim == 1){
 80025ec:	4b99      	ldr	r3, [pc, #612]	; (8002854 <menu+0x12a4>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d104      	bne.n	80025fe <menu+0x104e>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80025f4:	4a98      	ldr	r2, [pc, #608]	; (8002858 <menu+0x12a8>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	2002      	movs	r0, #2
 80025fa:	f006 fb53 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fe:	2102      	movs	r1, #2
 8002600:	4896      	ldr	r0, [pc, #600]	; (800285c <menu+0x12ac>)
 8002602:	f007 fe75 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d115      	bne.n	8002638 <menu+0x1088>
 800260c:	4b94      	ldr	r3, [pc, #592]	; (8002860 <menu+0x12b0>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <menu+0x1088>
			kapiSecimleri = kapiSecimleri + 1;
 800261a:	4b92      	ldr	r3, [pc, #584]	; (8002864 <menu+0x12b4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b90      	ldr	r3, [pc, #576]	; (8002864 <menu+0x12b4>)
 8002624:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002626:	4b8f      	ldr	r3, [pc, #572]	; (8002864 <menu+0x12b4>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d902      	bls.n	8002634 <menu+0x1084>
				kapiSecimleri = 0;
 800262e:	4b8d      	ldr	r3, [pc, #564]	; (8002864 <menu+0x12b4>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002634:	f002 fad6 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002638:	2104      	movs	r1, #4
 800263a:	4888      	ldr	r0, [pc, #544]	; (800285c <menu+0x12ac>)
 800263c:	f007 fe58 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d115      	bne.n	8002672 <menu+0x10c2>
 8002646:	4b86      	ldr	r3, [pc, #536]	; (8002860 <menu+0x12b0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <menu+0x10c2>
			kapiSecimleri = kapiSecimleri - 1;
 8002654:	4b83      	ldr	r3, [pc, #524]	; (8002864 <menu+0x12b4>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	b2da      	uxtb	r2, r3
 800265c:	4b81      	ldr	r3, [pc, #516]	; (8002864 <menu+0x12b4>)
 800265e:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002660:	4b80      	ldr	r3, [pc, #512]	; (8002864 <menu+0x12b4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d902      	bls.n	800266e <menu+0x10be>
		   		kapiSecimleri = 3;
 8002668:	4b7e      	ldr	r3, [pc, #504]	; (8002864 <menu+0x12b4>)
 800266a:	2203      	movs	r2, #3
 800266c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800266e:	f002 fab9 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002672:	2108      	movs	r1, #8
 8002674:	4879      	ldr	r0, [pc, #484]	; (800285c <menu+0x12ac>)
 8002676:	f007 fe3b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800267a:	4603      	mov	r3, r0
 800267c:	2b01      	cmp	r3, #1
 800267e:	d118      	bne.n	80026b2 <menu+0x1102>
 8002680:	4b77      	ldr	r3, [pc, #476]	; (8002860 <menu+0x12b0>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d011      	beq.n	80026b2 <menu+0x1102>
			eepromData[7] = kapiSecimleri;
 800268e:	4b75      	ldr	r3, [pc, #468]	; (8002864 <menu+0x12b4>)
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	4b75      	ldr	r3, [pc, #468]	; (8002868 <menu+0x12b8>)
 8002694:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002696:	4b73      	ldr	r3, [pc, #460]	; (8002864 <menu+0x12b4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <menu+0x10fc>
				altLimit = 1;
 800269e:	4b73      	ldr	r3, [pc, #460]	; (800286c <menu+0x12bc>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80026a4:	4b71      	ldr	r3, [pc, #452]	; (800286c <menu+0x12bc>)
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	4b6f      	ldr	r3, [pc, #444]	; (8002868 <menu+0x12b8>)
 80026aa:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80026ac:	4b70      	ldr	r3, [pc, #448]	; (8002870 <menu+0x12c0>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80026b2:	4b70      	ldr	r3, [pc, #448]	; (8002874 <menu+0x12c4>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	f040 8092 	bne.w	80027e0 <menu+0x1230>
		if(dilSecim == 0) {
 80026bc:	4b65      	ldr	r3, [pc, #404]	; (8002854 <menu+0x12a4>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <menu+0x1120>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80026c4:	4a6c      	ldr	r2, [pc, #432]	; (8002878 <menu+0x12c8>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	2001      	movs	r0, #1
 80026ca:	f006 faeb 	bl	8008ca4 <lcd_print>
 80026ce:	e008      	b.n	80026e2 <menu+0x1132>
		} else if(dilSecim == 1) {
 80026d0:	4b60      	ldr	r3, [pc, #384]	; (8002854 <menu+0x12a4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d104      	bne.n	80026e2 <menu+0x1132>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80026d8:	4a68      	ldr	r2, [pc, #416]	; (800287c <menu+0x12cc>)
 80026da:	2101      	movs	r1, #1
 80026dc:	2001      	movs	r0, #1
 80026de:	f006 fae1 	bl	8008ca4 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <menu+0x12d0>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d113      	bne.n	8002712 <menu+0x1162>
			if(dilSecim == 0) {
 80026ea:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <menu+0x12a4>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <menu+0x114e>
				lcd_print(2, 1, "Kapi butonu ESP");
 80026f2:	4a64      	ldr	r2, [pc, #400]	; (8002884 <menu+0x12d4>)
 80026f4:	2101      	movs	r1, #1
 80026f6:	2002      	movs	r0, #2
 80026f8:	f006 fad4 	bl	8008ca4 <lcd_print>
 80026fc:	e020      	b.n	8002740 <menu+0x1190>
			} else if(dilSecim == 1) {
 80026fe:	4b55      	ldr	r3, [pc, #340]	; (8002854 <menu+0x12a4>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d11c      	bne.n	8002740 <menu+0x1190>
				lcd_print(2, 1, "Door Button ESP");
 8002706:	4a60      	ldr	r2, [pc, #384]	; (8002888 <menu+0x12d8>)
 8002708:	2101      	movs	r1, #1
 800270a:	2002      	movs	r0, #2
 800270c:	f006 faca 	bl	8008ca4 <lcd_print>
 8002710:	e016      	b.n	8002740 <menu+0x1190>
			}
		} else if(kapiAcTipi == 1){
 8002712:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <menu+0x12d0>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d112      	bne.n	8002740 <menu+0x1190>
			if(dilSecim == 0){
 800271a:	4b4e      	ldr	r3, [pc, #312]	; (8002854 <menu+0x12a4>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <menu+0x117e>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002722:	4a5a      	ldr	r2, [pc, #360]	; (800288c <menu+0x12dc>)
 8002724:	2101      	movs	r1, #1
 8002726:	2002      	movs	r0, #2
 8002728:	f006 fabc 	bl	8008ca4 <lcd_print>
 800272c:	e008      	b.n	8002740 <menu+0x1190>
			} else if(dilSecim == 1){
 800272e:	4b49      	ldr	r3, [pc, #292]	; (8002854 <menu+0x12a4>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d104      	bne.n	8002740 <menu+0x1190>
				lcd_print(2, 1, "Floor button EXT");
 8002736:	4a56      	ldr	r2, [pc, #344]	; (8002890 <menu+0x12e0>)
 8002738:	2101      	movs	r1, #1
 800273a:	2002      	movs	r0, #2
 800273c:	f006 fab2 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002740:	2102      	movs	r1, #2
 8002742:	4846      	ldr	r0, [pc, #280]	; (800285c <menu+0x12ac>)
 8002744:	f007 fdd4 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002748:	4603      	mov	r3, r0
 800274a:	2b01      	cmp	r3, #1
 800274c:	d115      	bne.n	800277a <menu+0x11ca>
 800274e:	4b44      	ldr	r3, [pc, #272]	; (8002860 <menu+0x12b0>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f083 0301 	eor.w	r3, r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00e      	beq.n	800277a <menu+0x11ca>
			kapiAcTipi = kapiAcTipi + 1;
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <menu+0x12d0>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4b46      	ldr	r3, [pc, #280]	; (8002880 <menu+0x12d0>)
 8002766:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002768:	4b45      	ldr	r3, [pc, #276]	; (8002880 <menu+0x12d0>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d902      	bls.n	8002776 <menu+0x11c6>
				kapiAcTipi = 0;
 8002770:	4b43      	ldr	r3, [pc, #268]	; (8002880 <menu+0x12d0>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002776:	f002 fa35 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800277a:	2104      	movs	r1, #4
 800277c:	4837      	ldr	r0, [pc, #220]	; (800285c <menu+0x12ac>)
 800277e:	f007 fdb7 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d115      	bne.n	80027b4 <menu+0x1204>
 8002788:	4b35      	ldr	r3, [pc, #212]	; (8002860 <menu+0x12b0>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <menu+0x1204>
			kapiAcTipi = kapiAcTipi - 1;
 8002796:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <menu+0x12d0>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3b01      	subs	r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <menu+0x12d0>)
 80027a0:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80027a2:	4b37      	ldr	r3, [pc, #220]	; (8002880 <menu+0x12d0>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <menu+0x1200>
		   		kapiAcTipi = 1;
 80027aa:	4b35      	ldr	r3, [pc, #212]	; (8002880 <menu+0x12d0>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027b0:	f002 fa18 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b4:	2108      	movs	r1, #8
 80027b6:	4829      	ldr	r0, [pc, #164]	; (800285c <menu+0x12ac>)
 80027b8:	f007 fd9a 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d10e      	bne.n	80027e0 <menu+0x1230>
 80027c2:	4b27      	ldr	r3, [pc, #156]	; (8002860 <menu+0x12b0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <menu+0x1230>
			eepromData[36] = kapiAcTipi;
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <menu+0x12d0>)
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	4b24      	ldr	r3, [pc, #144]	; (8002868 <menu+0x12b8>)
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <menu+0x12c0>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <menu+0x12c4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	f040 80b9 	bne.w	800295c <menu+0x13ac>
		if(dilSecim == 0){
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <menu+0x12a4>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <menu+0x124e>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80027f2:	4a28      	ldr	r2, [pc, #160]	; (8002894 <menu+0x12e4>)
 80027f4:	2101      	movs	r1, #1
 80027f6:	2001      	movs	r0, #1
 80027f8:	f006 fa54 	bl	8008ca4 <lcd_print>
 80027fc:	e008      	b.n	8002810 <menu+0x1260>
		} else if(dilSecim == 1) {
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <menu+0x12a4>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d104      	bne.n	8002810 <menu+0x1260>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002806:	4a24      	ldr	r2, [pc, #144]	; (8002898 <menu+0x12e8>)
 8002808:	2101      	movs	r1, #1
 800280a:	2001      	movs	r0, #1
 800280c:	f006 fa4a 	bl	8008ca4 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <menu+0x12ec>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <menu+0x1274>
			lcd_print(2, 1, "Prudhome        ");
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <menu+0x12f0>)
 800281a:	2101      	movs	r1, #1
 800281c:	2002      	movs	r0, #2
 800281e:	f006 fa41 	bl	8008ca4 <lcd_print>
 8002822:	e04c      	b.n	80028be <menu+0x130e>
		} else if(kapi1Tip == 1) {
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <menu+0x12ec>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d13f      	bne.n	80028ac <menu+0x12fc>
			if(dilSecim == 0){
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <menu+0x12a4>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <menu+0x1290>
				lcd_print(2, 1, "Buton kontrollu");
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <menu+0x12f4>)
 8002836:	2101      	movs	r1, #1
 8002838:	2002      	movs	r0, #2
 800283a:	f006 fa33 	bl	8008ca4 <lcd_print>
 800283e:	e03e      	b.n	80028be <menu+0x130e>
			} else if(dilSecim == 1) {
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <menu+0x12a4>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d13a      	bne.n	80028be <menu+0x130e>
				lcd_print(2, 1, "Button cntrolled");
 8002848:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <menu+0x12f8>)
 800284a:	2101      	movs	r1, #1
 800284c:	2002      	movs	r0, #2
 800284e:	f006 fa29 	bl	8008ca4 <lcd_print>
 8002852:	e034      	b.n	80028be <menu+0x130e>
 8002854:	20000b0d 	.word	0x20000b0d
 8002858:	0800e4cc 	.word	0x0800e4cc
 800285c:	40010800 	.word	0x40010800
 8002860:	20000b1b 	.word	0x20000b1b
 8002864:	20000af4 	.word	0x20000af4
 8002868:	20000a18 	.word	0x20000a18
 800286c:	20000af2 	.word	0x20000af2
 8002870:	20000b18 	.word	0x20000b18
 8002874:	20000aec 	.word	0x20000aec
 8002878:	0800e4e0 	.word	0x0800e4e0
 800287c:	0800e4f4 	.word	0x0800e4f4
 8002880:	20000af8 	.word	0x20000af8
 8002884:	0800e508 	.word	0x0800e508
 8002888:	0800e518 	.word	0x0800e518
 800288c:	0800e528 	.word	0x0800e528
 8002890:	0800e53c 	.word	0x0800e53c
 8002894:	0800e550 	.word	0x0800e550
 8002898:	0800e564 	.word	0x0800e564
 800289c:	20000af5 	.word	0x20000af5
 80028a0:	0800e578 	.word	0x0800e578
 80028a4:	0800e58c 	.word	0x0800e58c
 80028a8:	0800e59c 	.word	0x0800e59c
			}
		} else if(kapi1Tip == 2) {
 80028ac:	4b8a      	ldr	r3, [pc, #552]	; (8002ad8 <menu+0x1528>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d104      	bne.n	80028be <menu+0x130e>
			lcd_print(2, 1, "Pizzato        ");
 80028b4:	4a89      	ldr	r2, [pc, #548]	; (8002adc <menu+0x152c>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	2002      	movs	r0, #2
 80028ba:	f006 f9f3 	bl	8008ca4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028be:	2102      	movs	r1, #2
 80028c0:	4887      	ldr	r0, [pc, #540]	; (8002ae0 <menu+0x1530>)
 80028c2:	f007 fd15 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d115      	bne.n	80028f8 <menu+0x1348>
 80028cc:	4b85      	ldr	r3, [pc, #532]	; (8002ae4 <menu+0x1534>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00e      	beq.n	80028f8 <menu+0x1348>
			kapi1Tip = kapi1Tip + 1;
 80028da:	4b7f      	ldr	r3, [pc, #508]	; (8002ad8 <menu+0x1528>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b7d      	ldr	r3, [pc, #500]	; (8002ad8 <menu+0x1528>)
 80028e4:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80028e6:	4b7c      	ldr	r3, [pc, #496]	; (8002ad8 <menu+0x1528>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <menu+0x1344>
				kapi1Tip = 0;
 80028ee:	4b7a      	ldr	r3, [pc, #488]	; (8002ad8 <menu+0x1528>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028f4:	f002 f976 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028f8:	2104      	movs	r1, #4
 80028fa:	4879      	ldr	r0, [pc, #484]	; (8002ae0 <menu+0x1530>)
 80028fc:	f007 fcf8 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d115      	bne.n	8002932 <menu+0x1382>
 8002906:	4b77      	ldr	r3, [pc, #476]	; (8002ae4 <menu+0x1534>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <menu+0x1382>
			kapi1Tip = kapi1Tip - 1;
 8002914:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <menu+0x1528>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b6e      	ldr	r3, [pc, #440]	; (8002ad8 <menu+0x1528>)
 800291e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002920:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <menu+0x1528>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d902      	bls.n	800292e <menu+0x137e>
		   		kapi1Tip = 2;
 8002928:	4b6b      	ldr	r3, [pc, #428]	; (8002ad8 <menu+0x1528>)
 800292a:	2202      	movs	r2, #2
 800292c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800292e:	f002 f959 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002932:	2108      	movs	r1, #8
 8002934:	486a      	ldr	r0, [pc, #424]	; (8002ae0 <menu+0x1530>)
 8002936:	f007 fcdb 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800293a:	4603      	mov	r3, r0
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10d      	bne.n	800295c <menu+0x13ac>
 8002940:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <menu+0x1534>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <menu+0x13ac>
			eepromData[8] = kapi1Tip;
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <menu+0x1528>)
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <menu+0x1538>)
 8002954:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <menu+0x153c>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <menu+0x1540>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b0a      	cmp	r3, #10
 8002962:	d17f      	bne.n	8002a64 <menu+0x14b4>
		if(dilSecim == 0) {
 8002964:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <menu+0x1544>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <menu+0x13d2>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 800296c:	4a62      	ldr	r2, [pc, #392]	; (8002af8 <menu+0x1548>)
 800296e:	2101      	movs	r1, #1
 8002970:	2001      	movs	r0, #1
 8002972:	f006 f997 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002976:	4a61      	ldr	r2, [pc, #388]	; (8002afc <menu+0x154c>)
 8002978:	2101      	movs	r1, #1
 800297a:	2002      	movs	r0, #2
 800297c:	f006 f992 	bl	8008ca4 <lcd_print>
 8002980:	e00d      	b.n	800299e <menu+0x13ee>
		} else if(dilSecim == 1) {
 8002982:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <menu+0x1544>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d109      	bne.n	800299e <menu+0x13ee>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800298a:	4a5d      	ldr	r2, [pc, #372]	; (8002b00 <menu+0x1550>)
 800298c:	2101      	movs	r1, #1
 800298e:	2001      	movs	r0, #1
 8002990:	f006 f988 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002994:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <menu+0x1554>)
 8002996:	2101      	movs	r1, #1
 8002998:	2002      	movs	r0, #2
 800299a:	f006 f983 	bl	8008ca4 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <menu+0x1558>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	220a      	movs	r2, #10
 80029a4:	4959      	ldr	r1, [pc, #356]	; (8002b0c <menu+0x155c>)
 80029a6:	4618      	mov	r0, r3
 80029a8:	f00a fd2a 	bl	800d400 <itoa>
		lcd_print(2,16,snum);
 80029ac:	4a57      	ldr	r2, [pc, #348]	; (8002b0c <menu+0x155c>)
 80029ae:	2110      	movs	r1, #16
 80029b0:	2002      	movs	r0, #2
 80029b2:	f006 f977 	bl	8008ca4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80029b6:	2102      	movs	r1, #2
 80029b8:	4849      	ldr	r0, [pc, #292]	; (8002ae0 <menu+0x1530>)
 80029ba:	f007 fc99 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d119      	bne.n	80029f8 <menu+0x1448>
 80029c4:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <menu+0x1534>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f083 0301 	eor.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <menu+0x1448>
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <menu+0x1528>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10e      	bne.n	80029f8 <menu+0x1448>
			kapi1AcSure = kapi1AcSure + 1;
 80029da:	4b4b      	ldr	r3, [pc, #300]	; (8002b08 <menu+0x1558>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <menu+0x1558>)
 80029e4:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80029e6:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <menu+0x1558>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b05      	cmp	r3, #5
 80029ec:	d902      	bls.n	80029f4 <menu+0x1444>
				kapi1AcSure = 0;
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <menu+0x1558>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f4:	f002 f8f6 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80029f8:	2104      	movs	r1, #4
 80029fa:	4839      	ldr	r0, [pc, #228]	; (8002ae0 <menu+0x1530>)
 80029fc:	f007 fc78 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d119      	bne.n	8002a3a <menu+0x148a>
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <menu+0x1534>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <menu+0x148a>
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <menu+0x1528>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10e      	bne.n	8002a3a <menu+0x148a>
			kapi1AcSure = kapi1AcSure - 1;
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <menu+0x1558>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <menu+0x1558>)
 8002a26:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <menu+0x1558>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d902      	bls.n	8002a36 <menu+0x1486>
		   		kapi1AcSure = 5;
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <menu+0x1558>)
 8002a32:	2205      	movs	r2, #5
 8002a34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a36:	f002 f8d5 	bl	8004be4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a3a:	2108      	movs	r1, #8
 8002a3c:	4828      	ldr	r0, [pc, #160]	; (8002ae0 <menu+0x1530>)
 8002a3e:	f007 fc57 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10d      	bne.n	8002a64 <menu+0x14b4>
 8002a48:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <menu+0x1534>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	f083 0301 	eor.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <menu+0x14b4>
			eepromData[9] = kapi1AcSure;
 8002a56:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <menu+0x1558>)
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <menu+0x1538>)
 8002a5c:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <menu+0x153c>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <menu+0x1540>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b0b      	cmp	r3, #11
 8002a6a:	f040 80b5 	bne.w	8002bd8 <menu+0x1628>
		if(dilSecim == 0) {
 8002a6e:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <menu+0x1544>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <menu+0x14d2>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002a76:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <menu+0x1560>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f006 f912 	bl	8008ca4 <lcd_print>
 8002a80:	e008      	b.n	8002a94 <menu+0x14e4>
		} else if(dilSecim == 1) {
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <menu+0x1544>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d104      	bne.n	8002a94 <menu+0x14e4>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <menu+0x1564>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f006 f908 	bl	8008ca4 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <menu+0x1568>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <menu+0x14f8>
			lcd_print(2, 1, "Prudhome        ");
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <menu+0x156c>)
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	2002      	movs	r0, #2
 8002aa2:	f006 f8ff 	bl	8008ca4 <lcd_print>
 8002aa6:	e048      	b.n	8002b3a <menu+0x158a>
		} else if(kapi2Tip == 1) {
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <menu+0x1568>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d13b      	bne.n	8002b28 <menu+0x1578>
			if(dilSecim == 0) {
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <menu+0x1544>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <menu+0x1514>
				lcd_print(2, 1, "Buton kontrollu");
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <menu+0x1570>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	2002      	movs	r0, #2
 8002abe:	f006 f8f1 	bl	8008ca4 <lcd_print>
 8002ac2:	e03a      	b.n	8002b3a <menu+0x158a>
			} else if(dilSecim == 1) {
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <menu+0x1544>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d136      	bne.n	8002b3a <menu+0x158a>
				lcd_print(2, 1, "Button cntrolled");
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <menu+0x1574>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2002      	movs	r0, #2
 8002ad2:	f006 f8e7 	bl	8008ca4 <lcd_print>
 8002ad6:	e030      	b.n	8002b3a <menu+0x158a>
 8002ad8:	20000af5 	.word	0x20000af5
 8002adc:	0800e5b0 	.word	0x0800e5b0
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	20000b1b 	.word	0x20000b1b
 8002ae8:	20000a18 	.word	0x20000a18
 8002aec:	20000b18 	.word	0x20000b18
 8002af0:	20000aec 	.word	0x20000aec
 8002af4:	20000b0d 	.word	0x20000b0d
 8002af8:	0800e5c0 	.word	0x0800e5c0
 8002afc:	0800e5d4 	.word	0x0800e5d4
 8002b00:	0800e5e4 	.word	0x0800e5e4
 8002b04:	0800e5f8 	.word	0x0800e5f8
 8002b08:	20000b05 	.word	0x20000b05
 8002b0c:	20000a88 	.word	0x20000a88
 8002b10:	0800e608 	.word	0x0800e608
 8002b14:	0800e61c 	.word	0x0800e61c
 8002b18:	20000af6 	.word	0x20000af6
 8002b1c:	0800e578 	.word	0x0800e578
 8002b20:	0800e58c 	.word	0x0800e58c
 8002b24:	0800e59c 	.word	0x0800e59c
			}
		} else if(kapi2Tip == 2) {
 8002b28:	4b8a      	ldr	r3, [pc, #552]	; (8002d54 <menu+0x17a4>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d104      	bne.n	8002b3a <menu+0x158a>
			lcd_print(2, 1, "Pizzato        ");
 8002b30:	4a89      	ldr	r2, [pc, #548]	; (8002d58 <menu+0x17a8>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	2002      	movs	r0, #2
 8002b36:	f006 f8b5 	bl	8008ca4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4887      	ldr	r0, [pc, #540]	; (8002d5c <menu+0x17ac>)
 8002b3e:	f007 fbd7 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d115      	bne.n	8002b74 <menu+0x15c4>
 8002b48:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <menu+0x17b0>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f083 0301 	eor.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00e      	beq.n	8002b74 <menu+0x15c4>
			kapi2Tip = kapi2Tip + 1;
 8002b56:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <menu+0x17a4>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b7d      	ldr	r3, [pc, #500]	; (8002d54 <menu+0x17a4>)
 8002b60:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002b62:	4b7c      	ldr	r3, [pc, #496]	; (8002d54 <menu+0x17a4>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d902      	bls.n	8002b70 <menu+0x15c0>
				kapi2Tip = 0;
 8002b6a:	4b7a      	ldr	r3, [pc, #488]	; (8002d54 <menu+0x17a4>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b70:	f002 f838 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b74:	2104      	movs	r1, #4
 8002b76:	4879      	ldr	r0, [pc, #484]	; (8002d5c <menu+0x17ac>)
 8002b78:	f007 fbba 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d115      	bne.n	8002bae <menu+0x15fe>
 8002b82:	4b77      	ldr	r3, [pc, #476]	; (8002d60 <menu+0x17b0>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <menu+0x15fe>
			kapi2Tip = kapi2Tip - 1;
 8002b90:	4b70      	ldr	r3, [pc, #448]	; (8002d54 <menu+0x17a4>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b6e      	ldr	r3, [pc, #440]	; (8002d54 <menu+0x17a4>)
 8002b9a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002b9c:	4b6d      	ldr	r3, [pc, #436]	; (8002d54 <menu+0x17a4>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d902      	bls.n	8002baa <menu+0x15fa>
		   		kapi2Tip = 2;
 8002ba4:	4b6b      	ldr	r3, [pc, #428]	; (8002d54 <menu+0x17a4>)
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002baa:	f002 f81b 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bae:	2108      	movs	r1, #8
 8002bb0:	486a      	ldr	r0, [pc, #424]	; (8002d5c <menu+0x17ac>)
 8002bb2:	f007 fb9d 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d10d      	bne.n	8002bd8 <menu+0x1628>
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <menu+0x17b0>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f083 0301 	eor.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <menu+0x1628>
			eepromData[10] = kapi2Tip;
 8002bca:	4b62      	ldr	r3, [pc, #392]	; (8002d54 <menu+0x17a4>)
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <menu+0x17b4>)
 8002bd0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002bd2:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <menu+0x17b8>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002bd8:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <menu+0x17bc>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d17f      	bne.n	8002ce0 <menu+0x1730>
		if(dilSecim == 0) {
 8002be0:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <menu+0x17c0>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <menu+0x164e>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002be8:	4a62      	ldr	r2, [pc, #392]	; (8002d74 <menu+0x17c4>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	2001      	movs	r0, #1
 8002bee:	f006 f859 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002bf2:	4a61      	ldr	r2, [pc, #388]	; (8002d78 <menu+0x17c8>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f006 f854 	bl	8008ca4 <lcd_print>
 8002bfc:	e00d      	b.n	8002c1a <menu+0x166a>
		} else if(dilSecim == 1) {
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <menu+0x17c0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d109      	bne.n	8002c1a <menu+0x166a>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002c06:	4a5d      	ldr	r2, [pc, #372]	; (8002d7c <menu+0x17cc>)
 8002c08:	2101      	movs	r1, #1
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f006 f84a 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c10:	4a5b      	ldr	r2, [pc, #364]	; (8002d80 <menu+0x17d0>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	2002      	movs	r0, #2
 8002c16:	f006 f845 	bl	8008ca4 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <menu+0x17d4>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	220a      	movs	r2, #10
 8002c20:	4959      	ldr	r1, [pc, #356]	; (8002d88 <menu+0x17d8>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f00a fbec 	bl	800d400 <itoa>
		lcd_print(2,16,snum);
 8002c28:	4a57      	ldr	r2, [pc, #348]	; (8002d88 <menu+0x17d8>)
 8002c2a:	2110      	movs	r1, #16
 8002c2c:	2002      	movs	r0, #2
 8002c2e:	f006 f839 	bl	8008ca4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002c32:	2102      	movs	r1, #2
 8002c34:	4849      	ldr	r0, [pc, #292]	; (8002d5c <menu+0x17ac>)
 8002c36:	f007 fb5b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d119      	bne.n	8002c74 <menu+0x16c4>
 8002c40:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <menu+0x17b0>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d012      	beq.n	8002c74 <menu+0x16c4>
 8002c4e:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <menu+0x17a4>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10e      	bne.n	8002c74 <menu+0x16c4>
			kapi2AcSure = kapi2AcSure + 1;
 8002c56:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <menu+0x17d4>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <menu+0x17d4>)
 8002c60:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002c62:	4b48      	ldr	r3, [pc, #288]	; (8002d84 <menu+0x17d4>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d902      	bls.n	8002c70 <menu+0x16c0>
				kapi2AcSure = 0;
 8002c6a:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <menu+0x17d4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c70:	f001 ffb8 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002c74:	2104      	movs	r1, #4
 8002c76:	4839      	ldr	r0, [pc, #228]	; (8002d5c <menu+0x17ac>)
 8002c78:	f007 fb3a 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d119      	bne.n	8002cb6 <menu+0x1706>
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <menu+0x17b0>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	f083 0301 	eor.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <menu+0x1706>
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <menu+0x17a4>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10e      	bne.n	8002cb6 <menu+0x1706>
			kapi2AcSure = kapi2AcSure - 1;
 8002c98:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <menu+0x17d4>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <menu+0x17d4>)
 8002ca2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002ca4:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <menu+0x17d4>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d902      	bls.n	8002cb2 <menu+0x1702>
		   		kapi2AcSure = 5;
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <menu+0x17d4>)
 8002cae:	2205      	movs	r2, #5
 8002cb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cb2:	f001 ff97 	bl	8004be4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb6:	2108      	movs	r1, #8
 8002cb8:	4828      	ldr	r0, [pc, #160]	; (8002d5c <menu+0x17ac>)
 8002cba:	f007 fb19 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10d      	bne.n	8002ce0 <menu+0x1730>
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <menu+0x17b0>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f083 0301 	eor.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d006      	beq.n	8002ce0 <menu+0x1730>
			eepromData[11] = kapi2AcSure;
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <menu+0x17d4>)
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <menu+0x17b4>)
 8002cd8:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002cda:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <menu+0x17b8>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <menu+0x17bc>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b0d      	cmp	r3, #13
 8002ce6:	f040 80b5 	bne.w	8002e54 <menu+0x18a4>
		if(dilSecim == 0) {
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <menu+0x17c0>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d105      	bne.n	8002cfe <menu+0x174e>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002cf2:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <menu+0x17dc>)
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	f005 ffd4 	bl	8008ca4 <lcd_print>
 8002cfc:	e008      	b.n	8002d10 <menu+0x1760>
		} else if(dilSecim == 1){
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <menu+0x17c0>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d104      	bne.n	8002d10 <menu+0x1760>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <menu+0x17e0>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f005 ffca 	bl	8008ca4 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002d10:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <menu+0x17e4>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <menu+0x1774>
			lcd_print(2, 1, "Prudhome        ");
 8002d18:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <menu+0x17e8>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f005 ffc1 	bl	8008ca4 <lcd_print>
 8002d22:	e048      	b.n	8002db6 <menu+0x1806>
		} else if(kapitablaTip == 1) {
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <menu+0x17e4>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d13b      	bne.n	8002da4 <menu+0x17f4>
			if(dilSecim == 0) {
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <menu+0x17c0>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <menu+0x1790>
				lcd_print(2, 1, "Buton kontrollu");
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <menu+0x17ec>)
 8002d36:	2101      	movs	r1, #1
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f005 ffb3 	bl	8008ca4 <lcd_print>
 8002d3e:	e03a      	b.n	8002db6 <menu+0x1806>
			} else if(dilSecim == 1) {
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <menu+0x17c0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d136      	bne.n	8002db6 <menu+0x1806>
				lcd_print(2, 1, "Button cntrolled");
 8002d48:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <menu+0x17f0>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	f005 ffa9 	bl	8008ca4 <lcd_print>
 8002d52:	e030      	b.n	8002db6 <menu+0x1806>
 8002d54:	20000af6 	.word	0x20000af6
 8002d58:	0800e5b0 	.word	0x0800e5b0
 8002d5c:	40010800 	.word	0x40010800
 8002d60:	20000b1b 	.word	0x20000b1b
 8002d64:	20000a18 	.word	0x20000a18
 8002d68:	20000b18 	.word	0x20000b18
 8002d6c:	20000aec 	.word	0x20000aec
 8002d70:	20000b0d 	.word	0x20000b0d
 8002d74:	0800e630 	.word	0x0800e630
 8002d78:	0800e5d4 	.word	0x0800e5d4
 8002d7c:	0800e644 	.word	0x0800e644
 8002d80:	0800e5f8 	.word	0x0800e5f8
 8002d84:	20000b06 	.word	0x20000b06
 8002d88:	20000a88 	.word	0x20000a88
 8002d8c:	0800e658 	.word	0x0800e658
 8002d90:	0800e66c 	.word	0x0800e66c
 8002d94:	20000af7 	.word	0x20000af7
 8002d98:	0800e578 	.word	0x0800e578
 8002d9c:	0800e58c 	.word	0x0800e58c
 8002da0:	0800e59c 	.word	0x0800e59c
			}
		} else if(kapitablaTip == 2) {
 8002da4:	4b5b      	ldr	r3, [pc, #364]	; (8002f14 <menu+0x1964>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d104      	bne.n	8002db6 <menu+0x1806>
			lcd_print(2, 1, "Pizzato        ");
 8002dac:	4a5a      	ldr	r2, [pc, #360]	; (8002f18 <menu+0x1968>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	2002      	movs	r0, #2
 8002db2:	f005 ff77 	bl	8008ca4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002db6:	2102      	movs	r1, #2
 8002db8:	4858      	ldr	r0, [pc, #352]	; (8002f1c <menu+0x196c>)
 8002dba:	f007 fa99 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d115      	bne.n	8002df0 <menu+0x1840>
 8002dc4:	4b56      	ldr	r3, [pc, #344]	; (8002f20 <menu+0x1970>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f083 0301 	eor.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00e      	beq.n	8002df0 <menu+0x1840>
			kapitablaTip = kapitablaTip + 1;
 8002dd2:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <menu+0x1964>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b4e      	ldr	r3, [pc, #312]	; (8002f14 <menu+0x1964>)
 8002ddc:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002dde:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <menu+0x1964>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d902      	bls.n	8002dec <menu+0x183c>
				kapitablaTip = 0;
 8002de6:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <menu+0x1964>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dec:	f001 fefa 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df0:	2104      	movs	r1, #4
 8002df2:	484a      	ldr	r0, [pc, #296]	; (8002f1c <menu+0x196c>)
 8002df4:	f007 fa7c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d115      	bne.n	8002e2a <menu+0x187a>
 8002dfe:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <menu+0x1970>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	f083 0301 	eor.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <menu+0x187a>
			kapitablaTip = kapitablaTip - 1;
 8002e0c:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <menu+0x1964>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <menu+0x1964>)
 8002e16:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002e18:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <menu+0x1964>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d902      	bls.n	8002e26 <menu+0x1876>
		   		kapitablaTip = 2;
 8002e20:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <menu+0x1964>)
 8002e22:	2202      	movs	r2, #2
 8002e24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e26:	f001 fedd 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2a:	2108      	movs	r1, #8
 8002e2c:	483b      	ldr	r0, [pc, #236]	; (8002f1c <menu+0x196c>)
 8002e2e:	f007 fa5f 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d10d      	bne.n	8002e54 <menu+0x18a4>
 8002e38:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <menu+0x1970>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	f083 0301 	eor.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <menu+0x18a4>
			eepromData[12] = kapitablaTip;
 8002e46:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <menu+0x1964>)
 8002e48:	781a      	ldrb	r2, [r3, #0]
 8002e4a:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <menu+0x1974>)
 8002e4c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002e4e:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <menu+0x1978>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002e54:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <menu+0x197c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b0e      	cmp	r3, #14
 8002e5a:	f040 80f2 	bne.w	8003042 <menu+0x1a92>
		if(dilSecim == 0) {
 8002e5e:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <menu+0x1980>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <menu+0x18c2>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002e66:	4a33      	ldr	r2, [pc, #204]	; (8002f34 <menu+0x1984>)
 8002e68:	2101      	movs	r1, #1
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f005 ff1a 	bl	8008ca4 <lcd_print>
 8002e70:	e008      	b.n	8002e84 <menu+0x18d4>
		} else if(dilSecim == 1) {
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <menu+0x1980>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d104      	bne.n	8002e84 <menu+0x18d4>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <menu+0x1988>)
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f005 ff10 	bl	8008ca4 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002e84:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <menu+0x198c>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d113      	bne.n	8002eb4 <menu+0x1904>
			if(dilSecim == 0){
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <menu+0x1980>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <menu+0x18f0>
				lcd_print(2, 1, "1. Katta ac    ");
 8002e94:	4a2a      	ldr	r2, [pc, #168]	; (8002f40 <menu+0x1990>)
 8002e96:	2101      	movs	r1, #1
 8002e98:	2002      	movs	r0, #2
 8002e9a:	f005 ff03 	bl	8008ca4 <lcd_print>
 8002e9e:	e071      	b.n	8002f84 <menu+0x19d4>
			} else if(dilSecim == 1) {
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <menu+0x1980>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d16d      	bne.n	8002f84 <menu+0x19d4>
				lcd_print(2, 1, "1. Floor open  ");
 8002ea8:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <menu+0x1994>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2002      	movs	r0, #2
 8002eae:	f005 fef9 	bl	8008ca4 <lcd_print>
 8002eb2:	e067      	b.n	8002f84 <menu+0x19d4>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <menu+0x198c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d112      	bne.n	8002ee2 <menu+0x1932>
			if(dilSecim == 0){
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <menu+0x1980>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <menu+0x191e>
				lcd_print(2, 1, "2. Katta ac    ");
 8002ec4:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <menu+0x1998>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f005 feeb 	bl	8008ca4 <lcd_print>
			}
			if(dilSecim == 1){
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <menu+0x1980>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d156      	bne.n	8002f84 <menu+0x19d4>
				lcd_print(2, 1, "2. Floor open  ");
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <menu+0x199c>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2002      	movs	r0, #2
 8002edc:	f005 fee2 	bl	8008ca4 <lcd_print>
 8002ee0:	e050      	b.n	8002f84 <menu+0x19d4>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <menu+0x198c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d136      	bne.n	8002f58 <menu+0x19a8>
			if(dilSecim == 0){
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <menu+0x1980>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <menu+0x194e>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <menu+0x19a0>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	2002      	movs	r0, #2
 8002ef8:	f005 fed4 	bl	8008ca4 <lcd_print>
 8002efc:	e042      	b.n	8002f84 <menu+0x19d4>
			} else if(dilSecim == 1) {
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <menu+0x1980>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d13e      	bne.n	8002f84 <menu+0x19d4>
				lcd_print(2, 1, "1.+2. Floor open");
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <menu+0x19a4>)
 8002f08:	2101      	movs	r1, #1
 8002f0a:	2002      	movs	r0, #2
 8002f0c:	f005 feca 	bl	8008ca4 <lcd_print>
 8002f10:	e038      	b.n	8002f84 <menu+0x19d4>
 8002f12:	bf00      	nop
 8002f14:	20000af7 	.word	0x20000af7
 8002f18:	0800e5b0 	.word	0x0800e5b0
 8002f1c:	40010800 	.word	0x40010800
 8002f20:	20000b1b 	.word	0x20000b1b
 8002f24:	20000a18 	.word	0x20000a18
 8002f28:	20000b18 	.word	0x20000b18
 8002f2c:	20000aec 	.word	0x20000aec
 8002f30:	20000b0d 	.word	0x20000b0d
 8002f34:	0800e680 	.word	0x0800e680
 8002f38:	0800e694 	.word	0x0800e694
 8002f3c:	20000af9 	.word	0x20000af9
 8002f40:	0800e6a8 	.word	0x0800e6a8
 8002f44:	0800e6b8 	.word	0x0800e6b8
 8002f48:	0800e6c8 	.word	0x0800e6c8
 8002f4c:	0800e6d8 	.word	0x0800e6d8
 8002f50:	0800e6e8 	.word	0x0800e6e8
 8002f54:	0800e6fc 	.word	0x0800e6fc
			}
		} else if(kapiTablaAcKonum == 3) {
 8002f58:	4b9b      	ldr	r3, [pc, #620]	; (80031c8 <menu+0x1c18>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d111      	bne.n	8002f84 <menu+0x19d4>
			if(dilSecim == 0) {
 8002f60:	4b9a      	ldr	r3, [pc, #616]	; (80031cc <menu+0x1c1c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <menu+0x19c2>
				lcd_print(2, 1, "Pasif           ");
 8002f68:	4a99      	ldr	r2, [pc, #612]	; (80031d0 <menu+0x1c20>)
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	2002      	movs	r0, #2
 8002f6e:	f005 fe99 	bl	8008ca4 <lcd_print>
			}
			if(dilSecim == 1) {
 8002f72:	4b96      	ldr	r3, [pc, #600]	; (80031cc <menu+0x1c1c>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d104      	bne.n	8002f84 <menu+0x19d4>
				lcd_print(2, 1, "Passive         ");
 8002f7a:	4a96      	ldr	r2, [pc, #600]	; (80031d4 <menu+0x1c24>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f005 fe90 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f84:	2102      	movs	r1, #2
 8002f86:	4894      	ldr	r0, [pc, #592]	; (80031d8 <menu+0x1c28>)
 8002f88:	f007 f9b2 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d115      	bne.n	8002fbe <menu+0x1a0e>
 8002f92:	4b92      	ldr	r3, [pc, #584]	; (80031dc <menu+0x1c2c>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f083 0301 	eor.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <menu+0x1a0e>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002fa0:	4b89      	ldr	r3, [pc, #548]	; (80031c8 <menu+0x1c18>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	4b87      	ldr	r3, [pc, #540]	; (80031c8 <menu+0x1c18>)
 8002faa:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002fac:	4b86      	ldr	r3, [pc, #536]	; (80031c8 <menu+0x1c18>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d902      	bls.n	8002fba <menu+0x1a0a>
				kapiTablaAcKonum = 0;
 8002fb4:	4b84      	ldr	r3, [pc, #528]	; (80031c8 <menu+0x1c18>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fba:	f001 fe13 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	4885      	ldr	r0, [pc, #532]	; (80031d8 <menu+0x1c28>)
 8002fc2:	f007 f995 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d115      	bne.n	8002ff8 <menu+0x1a48>
 8002fcc:	4b83      	ldr	r3, [pc, #524]	; (80031dc <menu+0x1c2c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	f083 0301 	eor.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00e      	beq.n	8002ff8 <menu+0x1a48>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002fda:	4b7b      	ldr	r3, [pc, #492]	; (80031c8 <menu+0x1c18>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b79      	ldr	r3, [pc, #484]	; (80031c8 <menu+0x1c18>)
 8002fe4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002fe6:	4b78      	ldr	r3, [pc, #480]	; (80031c8 <menu+0x1c18>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d902      	bls.n	8002ff4 <menu+0x1a44>
		   		kapiTablaAcKonum = 2;
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <menu+0x1c18>)
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ff4:	f001 fdf6 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ff8:	2108      	movs	r1, #8
 8002ffa:	4877      	ldr	r0, [pc, #476]	; (80031d8 <menu+0x1c28>)
 8002ffc:	f007 f978 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d11d      	bne.n	8003042 <menu+0x1a92>
 8003006:	4b75      	ldr	r3, [pc, #468]	; (80031dc <menu+0x1c2c>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f083 0301 	eor.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d016      	beq.n	8003042 <menu+0x1a92>
			eepromData[34] = kapiTablaAcKonum;
 8003014:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <menu+0x1c18>)
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <menu+0x1c30>)
 800301a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800301e:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <menu+0x1c18>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <menu+0x1a7e>
 8003026:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <menu+0x1c18>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d106      	bne.n	800303c <menu+0x1a8c>
				altLimit = 1;
 800302e:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <menu+0x1c34>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003034:	4b6b      	ldr	r3, [pc, #428]	; (80031e4 <menu+0x1c34>)
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	4b69      	ldr	r3, [pc, #420]	; (80031e0 <menu+0x1c30>)
 800303a:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <menu+0x1c38>)
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8003042:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <menu+0x1c3c>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	d17f      	bne.n	800314a <menu+0x1b9a>
		if(dilSecim == 0) {
 800304a:	4b60      	ldr	r3, [pc, #384]	; (80031cc <menu+0x1c1c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <menu+0x1ab8>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8003052:	4a67      	ldr	r2, [pc, #412]	; (80031f0 <menu+0x1c40>)
 8003054:	2101      	movs	r1, #1
 8003056:	2001      	movs	r0, #1
 8003058:	f005 fe24 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800305c:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <menu+0x1c44>)
 800305e:	2101      	movs	r1, #1
 8003060:	2002      	movs	r0, #2
 8003062:	f005 fe1f 	bl	8008ca4 <lcd_print>
 8003066:	e00d      	b.n	8003084 <menu+0x1ad4>
		} else if(dilSecim == 1) {
 8003068:	4b58      	ldr	r3, [pc, #352]	; (80031cc <menu+0x1c1c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d109      	bne.n	8003084 <menu+0x1ad4>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003070:	4a61      	ldr	r2, [pc, #388]	; (80031f8 <menu+0x1c48>)
 8003072:	2101      	movs	r1, #1
 8003074:	2001      	movs	r0, #1
 8003076:	f005 fe15 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800307a:	4a60      	ldr	r2, [pc, #384]	; (80031fc <menu+0x1c4c>)
 800307c:	2101      	movs	r1, #1
 800307e:	2002      	movs	r0, #2
 8003080:	f005 fe10 	bl	8008ca4 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003084:	4b5e      	ldr	r3, [pc, #376]	; (8003200 <menu+0x1c50>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	220a      	movs	r2, #10
 800308a:	495e      	ldr	r1, [pc, #376]	; (8003204 <menu+0x1c54>)
 800308c:	4618      	mov	r0, r3
 800308e:	f00a f9b7 	bl	800d400 <itoa>
		lcd_print(2,16,snum);
 8003092:	4a5c      	ldr	r2, [pc, #368]	; (8003204 <menu+0x1c54>)
 8003094:	2110      	movs	r1, #16
 8003096:	2002      	movs	r0, #2
 8003098:	f005 fe04 	bl	8008ca4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800309c:	2102      	movs	r1, #2
 800309e:	484e      	ldr	r0, [pc, #312]	; (80031d8 <menu+0x1c28>)
 80030a0:	f007 f926 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d119      	bne.n	80030de <menu+0x1b2e>
 80030aa:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <menu+0x1c2c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d012      	beq.n	80030de <menu+0x1b2e>
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <menu+0x1c58>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10e      	bne.n	80030de <menu+0x1b2e>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80030c0:	4b4f      	ldr	r3, [pc, #316]	; (8003200 <menu+0x1c50>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <menu+0x1c50>)
 80030ca:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80030cc:	4b4c      	ldr	r3, [pc, #304]	; (8003200 <menu+0x1c50>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d902      	bls.n	80030da <menu+0x1b2a>
				kapiTablaAcSure = 0;
 80030d4:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <menu+0x1c50>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030da:	f001 fd83 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80030de:	2104      	movs	r1, #4
 80030e0:	483d      	ldr	r0, [pc, #244]	; (80031d8 <menu+0x1c28>)
 80030e2:	f007 f905 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d119      	bne.n	8003120 <menu+0x1b70>
 80030ec:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <menu+0x1c2c>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f083 0301 	eor.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d012      	beq.n	8003120 <menu+0x1b70>
 80030fa:	4b43      	ldr	r3, [pc, #268]	; (8003208 <menu+0x1c58>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10e      	bne.n	8003120 <menu+0x1b70>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003102:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <menu+0x1c50>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	3b01      	subs	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <menu+0x1c50>)
 800310c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800310e:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <menu+0x1c50>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b06      	cmp	r3, #6
 8003114:	d902      	bls.n	800311c <menu+0x1b6c>
		   		kapiTablaAcSure = 5;
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <menu+0x1c50>)
 8003118:	2205      	movs	r2, #5
 800311a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800311c:	f001 fd62 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003120:	2108      	movs	r1, #8
 8003122:	482d      	ldr	r0, [pc, #180]	; (80031d8 <menu+0x1c28>)
 8003124:	f007 f8e4 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10d      	bne.n	800314a <menu+0x1b9a>
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <menu+0x1c2c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <menu+0x1b9a>
			eepromData[13] = kapiTablaAcSure;
 800313c:	4b30      	ldr	r3, [pc, #192]	; (8003200 <menu+0x1c50>)
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <menu+0x1c30>)
 8003142:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003144:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <menu+0x1c38>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800314a:	4b28      	ldr	r3, [pc, #160]	; (80031ec <menu+0x1c3c>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b10      	cmp	r3, #16
 8003150:	f040 80bc 	bne.w	80032cc <menu+0x1d1c>
		if(dilSecim == 0) {
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <menu+0x1c1c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <menu+0x1bb8>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 800315c:	4a2b      	ldr	r2, [pc, #172]	; (800320c <menu+0x1c5c>)
 800315e:	2101      	movs	r1, #1
 8003160:	2001      	movs	r0, #1
 8003162:	f005 fd9f 	bl	8008ca4 <lcd_print>
 8003166:	e008      	b.n	800317a <menu+0x1bca>
		} else if(dilSecim == 1) {
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <menu+0x1c1c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d104      	bne.n	800317a <menu+0x1bca>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <menu+0x1c60>)
 8003172:	2101      	movs	r1, #1
 8003174:	2001      	movs	r0, #1
 8003176:	f005 fd95 	bl	8008ca4 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800317a:	4b26      	ldr	r3, [pc, #152]	; (8003214 <menu+0x1c64>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d113      	bne.n	80031aa <menu+0x1bfa>
			if(dilSecim == 0) {
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <menu+0x1c1c>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <menu+0x1be6>
				lcd_print(2, 1, "Pasif           ");
 800318a:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <menu+0x1c20>)
 800318c:	2101      	movs	r1, #1
 800318e:	2002      	movs	r0, #2
 8003190:	f005 fd88 	bl	8008ca4 <lcd_print>
 8003194:	e04b      	b.n	800322e <menu+0x1c7e>
			} else if(dilSecim == 1) {
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <menu+0x1c1c>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d147      	bne.n	800322e <menu+0x1c7e>
				lcd_print(2, 1, "Passive         ");
 800319e:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <menu+0x1c24>)
 80031a0:	2101      	movs	r1, #1
 80031a2:	2002      	movs	r0, #2
 80031a4:	f005 fd7e 	bl	8008ca4 <lcd_print>
 80031a8:	e041      	b.n	800322e <menu+0x1c7e>
			}
		} else if(yukariYavasLimit == 1) {
 80031aa:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <menu+0x1c64>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d13d      	bne.n	800322e <menu+0x1c7e>
			if(dilSecim == 0) {
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <menu+0x1c1c>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d130      	bne.n	800321c <menu+0x1c6c>
				lcd_print(2, 1, "Aktif           ");
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <menu+0x1c68>)
 80031bc:	2101      	movs	r1, #1
 80031be:	2002      	movs	r0, #2
 80031c0:	f005 fd70 	bl	8008ca4 <lcd_print>
 80031c4:	e033      	b.n	800322e <menu+0x1c7e>
 80031c6:	bf00      	nop
 80031c8:	20000af9 	.word	0x20000af9
 80031cc:	20000b0d 	.word	0x20000b0d
 80031d0:	0800e370 	.word	0x0800e370
 80031d4:	0800e384 	.word	0x0800e384
 80031d8:	40010800 	.word	0x40010800
 80031dc:	20000b1b 	.word	0x20000b1b
 80031e0:	20000a18 	.word	0x20000a18
 80031e4:	20000af2 	.word	0x20000af2
 80031e8:	20000b18 	.word	0x20000b18
 80031ec:	20000aec 	.word	0x20000aec
 80031f0:	0800e710 	.word	0x0800e710
 80031f4:	0800e5d4 	.word	0x0800e5d4
 80031f8:	0800e724 	.word	0x0800e724
 80031fc:	0800e5f8 	.word	0x0800e5f8
 8003200:	20000b07 	.word	0x20000b07
 8003204:	20000a88 	.word	0x20000a88
 8003208:	20000af7 	.word	0x20000af7
 800320c:	0800e738 	.word	0x0800e738
 8003210:	0800e74c 	.word	0x0800e74c
 8003214:	20000afa 	.word	0x20000afa
 8003218:	0800e3d0 	.word	0x0800e3d0
			} else if(dilSecim == 1) {
 800321c:	4b99      	ldr	r3, [pc, #612]	; (8003484 <menu+0x1ed4>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d104      	bne.n	800322e <menu+0x1c7e>
				lcd_print(2, 1, "Active          ");
 8003224:	4a98      	ldr	r2, [pc, #608]	; (8003488 <menu+0x1ed8>)
 8003226:	2101      	movs	r1, #1
 8003228:	2002      	movs	r0, #2
 800322a:	f005 fd3b 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800322e:	2102      	movs	r1, #2
 8003230:	4896      	ldr	r0, [pc, #600]	; (800348c <menu+0x1edc>)
 8003232:	f007 f85d 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003236:	4603      	mov	r3, r0
 8003238:	2b01      	cmp	r3, #1
 800323a:	d115      	bne.n	8003268 <menu+0x1cb8>
 800323c:	4b94      	ldr	r3, [pc, #592]	; (8003490 <menu+0x1ee0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	f083 0301 	eor.w	r3, r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00e      	beq.n	8003268 <menu+0x1cb8>
			yukariYavasLimit = yukariYavasLimit + 1;
 800324a:	4b92      	ldr	r3, [pc, #584]	; (8003494 <menu+0x1ee4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b90      	ldr	r3, [pc, #576]	; (8003494 <menu+0x1ee4>)
 8003254:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003256:	4b8f      	ldr	r3, [pc, #572]	; (8003494 <menu+0x1ee4>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d902      	bls.n	8003264 <menu+0x1cb4>
				yukariYavasLimit = 0;
 800325e:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <menu+0x1ee4>)
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003264:	f001 fcbe 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003268:	2104      	movs	r1, #4
 800326a:	4888      	ldr	r0, [pc, #544]	; (800348c <menu+0x1edc>)
 800326c:	f007 f840 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003270:	4603      	mov	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d115      	bne.n	80032a2 <menu+0x1cf2>
 8003276:	4b86      	ldr	r3, [pc, #536]	; (8003490 <menu+0x1ee0>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f083 0301 	eor.w	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00e      	beq.n	80032a2 <menu+0x1cf2>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003284:	4b83      	ldr	r3, [pc, #524]	; (8003494 <menu+0x1ee4>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	3b01      	subs	r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b81      	ldr	r3, [pc, #516]	; (8003494 <menu+0x1ee4>)
 800328e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003290:	4b80      	ldr	r3, [pc, #512]	; (8003494 <menu+0x1ee4>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <menu+0x1cee>
		   		yukariYavasLimit = 1;
 8003298:	4b7e      	ldr	r3, [pc, #504]	; (8003494 <menu+0x1ee4>)
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800329e:	f001 fca1 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a2:	2108      	movs	r1, #8
 80032a4:	4879      	ldr	r0, [pc, #484]	; (800348c <menu+0x1edc>)
 80032a6:	f007 f823 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10d      	bne.n	80032cc <menu+0x1d1c>
 80032b0:	4b77      	ldr	r3, [pc, #476]	; (8003490 <menu+0x1ee0>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	f083 0301 	eor.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <menu+0x1d1c>
			eepromData[14] = yukariYavasLimit;
 80032be:	4b75      	ldr	r3, [pc, #468]	; (8003494 <menu+0x1ee4>)
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	4b75      	ldr	r3, [pc, #468]	; (8003498 <menu+0x1ee8>)
 80032c4:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80032c6:	4b75      	ldr	r3, [pc, #468]	; (800349c <menu+0x1eec>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80032cc:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <menu+0x1ef0>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b11      	cmp	r3, #17
 80032d2:	f040 80c3 	bne.w	800345c <menu+0x1eac>
		if(dilSecim == 0) {
 80032d6:	4b6b      	ldr	r3, [pc, #428]	; (8003484 <menu+0x1ed4>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <menu+0x1d3a>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80032de:	4a71      	ldr	r2, [pc, #452]	; (80034a4 <menu+0x1ef4>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	2001      	movs	r0, #1
 80032e4:	f005 fcde 	bl	8008ca4 <lcd_print>
 80032e8:	e008      	b.n	80032fc <menu+0x1d4c>
		} else if(dilSecim == 1) {
 80032ea:	4b66      	ldr	r3, [pc, #408]	; (8003484 <menu+0x1ed4>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d104      	bne.n	80032fc <menu+0x1d4c>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80032f2:	4a6d      	ldr	r2, [pc, #436]	; (80034a8 <menu+0x1ef8>)
 80032f4:	2101      	movs	r1, #1
 80032f6:	2001      	movs	r0, #1
 80032f8:	f005 fcd4 	bl	8008ca4 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80032fc:	4b6b      	ldr	r3, [pc, #428]	; (80034ac <menu+0x1efc>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d113      	bne.n	800332c <menu+0x1d7c>
			if(dilSecim == 0){
 8003304:	4b5f      	ldr	r3, [pc, #380]	; (8003484 <menu+0x1ed4>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <menu+0x1d68>
				lcd_print(2, 1, "Devirme aktif  ");
 800330c:	4a68      	ldr	r2, [pc, #416]	; (80034b0 <menu+0x1f00>)
 800330e:	2101      	movs	r1, #1
 8003310:	2002      	movs	r0, #2
 8003312:	f005 fcc7 	bl	8008ca4 <lcd_print>
 8003316:	e038      	b.n	800338a <menu+0x1dda>
			} else if(dilSecim == 1){
 8003318:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <menu+0x1ed4>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d134      	bne.n	800338a <menu+0x1dda>
				lcd_print(2, 1, "Tipping active ");
 8003320:	4a64      	ldr	r2, [pc, #400]	; (80034b4 <menu+0x1f04>)
 8003322:	2101      	movs	r1, #1
 8003324:	2002      	movs	r0, #2
 8003326:	f005 fcbd 	bl	8008ca4 <lcd_print>
 800332a:	e02e      	b.n	800338a <menu+0x1dda>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800332c:	4b5f      	ldr	r3, [pc, #380]	; (80034ac <menu+0x1efc>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d113      	bne.n	800335c <menu+0x1dac>
			if(dilSecim == 0){
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <menu+0x1ed4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <menu+0x1d98>
				lcd_print(2, 1, "Yuruyus aktif  ");
 800333c:	4a5e      	ldr	r2, [pc, #376]	; (80034b8 <menu+0x1f08>)
 800333e:	2101      	movs	r1, #1
 8003340:	2002      	movs	r0, #2
 8003342:	f005 fcaf 	bl	8008ca4 <lcd_print>
 8003346:	e020      	b.n	800338a <menu+0x1dda>
			} else if(dilSecim == 1) {
 8003348:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <menu+0x1ed4>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d11c      	bne.n	800338a <menu+0x1dda>
				lcd_print(2, 1, "Drive active   ");
 8003350:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <menu+0x1f0c>)
 8003352:	2101      	movs	r1, #1
 8003354:	2002      	movs	r0, #2
 8003356:	f005 fca5 	bl	8008ca4 <lcd_print>
 800335a:	e016      	b.n	800338a <menu+0x1dda>
			}
		} else if(devirmeYuruyusSecim == 0) {
 800335c:	4b53      	ldr	r3, [pc, #332]	; (80034ac <menu+0x1efc>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d112      	bne.n	800338a <menu+0x1dda>
			if(dilSecim == 0) {
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <menu+0x1ed4>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <menu+0x1dc8>
				lcd_print(2, 1, "Pasif           ");
 800336c:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <menu+0x1f10>)
 800336e:	2101      	movs	r1, #1
 8003370:	2002      	movs	r0, #2
 8003372:	f005 fc97 	bl	8008ca4 <lcd_print>
 8003376:	e008      	b.n	800338a <menu+0x1dda>
			} else if(dilSecim == 1) {
 8003378:	4b42      	ldr	r3, [pc, #264]	; (8003484 <menu+0x1ed4>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d104      	bne.n	800338a <menu+0x1dda>
				lcd_print(2, 1, "Passive         ");
 8003380:	4a50      	ldr	r2, [pc, #320]	; (80034c4 <menu+0x1f14>)
 8003382:	2101      	movs	r1, #1
 8003384:	2002      	movs	r0, #2
 8003386:	f005 fc8d 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800338a:	2102      	movs	r1, #2
 800338c:	483f      	ldr	r0, [pc, #252]	; (800348c <menu+0x1edc>)
 800338e:	f006 ffaf 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003392:	4603      	mov	r3, r0
 8003394:	2b01      	cmp	r3, #1
 8003396:	d115      	bne.n	80033c4 <menu+0x1e14>
 8003398:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <menu+0x1ee0>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	f083 0301 	eor.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00e      	beq.n	80033c4 <menu+0x1e14>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80033a6:	4b41      	ldr	r3, [pc, #260]	; (80034ac <menu+0x1efc>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <menu+0x1efc>)
 80033b0:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80033b2:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <menu+0x1efc>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d902      	bls.n	80033c0 <menu+0x1e10>
				devirmeYuruyusSecim = 0;
 80033ba:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <menu+0x1efc>)
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033c0:	f001 fc10 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033c4:	2104      	movs	r1, #4
 80033c6:	4831      	ldr	r0, [pc, #196]	; (800348c <menu+0x1edc>)
 80033c8:	f006 ff92 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d115      	bne.n	80033fe <menu+0x1e4e>
 80033d2:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <menu+0x1ee0>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f083 0301 	eor.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00e      	beq.n	80033fe <menu+0x1e4e>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <menu+0x1efc>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <menu+0x1efc>)
 80033ea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <menu+0x1efc>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d902      	bls.n	80033fa <menu+0x1e4a>
		   		devirmeYuruyusSecim = 2;
 80033f4:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <menu+0x1efc>)
 80033f6:	2202      	movs	r2, #2
 80033f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033fa:	f001 fbf3 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fe:	2108      	movs	r1, #8
 8003400:	4822      	ldr	r0, [pc, #136]	; (800348c <menu+0x1edc>)
 8003402:	f006 ff75 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d127      	bne.n	800345c <menu+0x1eac>
 800340c:	4b20      	ldr	r3, [pc, #128]	; (8003490 <menu+0x1ee0>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	f083 0301 	eor.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d020      	beq.n	800345c <menu+0x1eac>
			eepromData[15] = devirmeYuruyusSecim;
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <menu+0x1efc>)
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <menu+0x1ee8>)
 8003420:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <menu+0x1efc>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d003      	beq.n	8003432 <menu+0x1e82>
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <menu+0x1efc>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d106      	bne.n	8003440 <menu+0x1e90>
				calismaSekli = 0;
 8003432:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <menu+0x1f18>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003438:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <menu+0x1f18>)
 800343a:	781a      	ldrb	r2, [r3, #0]
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <menu+0x1ee8>)
 800343e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <menu+0x1efc>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <menu+0x1ea6>
				devirmeSilindirTipi = 1;
 8003448:	4b20      	ldr	r3, [pc, #128]	; (80034cc <menu+0x1f1c>)
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800344e:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <menu+0x1f1c>)
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <menu+0x1ee8>)
 8003454:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <menu+0x1eec>)
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <menu+0x1ef0>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b12      	cmp	r3, #18
 8003462:	f040 80d5 	bne.w	8003610 <menu+0x2060>
		if(devirmeYuruyusSecim == 2) {
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <menu+0x1efc>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d13c      	bne.n	80034e8 <menu+0x1f38>
			if(dilSecim == 0) {
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <menu+0x1ed4>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d12e      	bne.n	80034d4 <menu+0x1f24>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <menu+0x1f20>)
 8003478:	2101      	movs	r1, #1
 800347a:	2001      	movs	r0, #1
 800347c:	f005 fc12 	bl	8008ca4 <lcd_print>
 8003480:	e048      	b.n	8003514 <menu+0x1f64>
 8003482:	bf00      	nop
 8003484:	20000b0d 	.word	0x20000b0d
 8003488:	0800e3e4 	.word	0x0800e3e4
 800348c:	40010800 	.word	0x40010800
 8003490:	20000b1b 	.word	0x20000b1b
 8003494:	20000afa 	.word	0x20000afa
 8003498:	20000a18 	.word	0x20000a18
 800349c:	20000b18 	.word	0x20000b18
 80034a0:	20000aec 	.word	0x20000aec
 80034a4:	0800e760 	.word	0x0800e760
 80034a8:	0800e774 	.word	0x0800e774
 80034ac:	20000afb 	.word	0x20000afb
 80034b0:	0800e788 	.word	0x0800e788
 80034b4:	0800e798 	.word	0x0800e798
 80034b8:	0800e7a8 	.word	0x0800e7a8
 80034bc:	0800e7b8 	.word	0x0800e7b8
 80034c0:	0800e370 	.word	0x0800e370
 80034c4:	0800e384 	.word	0x0800e384
 80034c8:	20000aed 	.word	0x20000aed
 80034cc:	20000afe 	.word	0x20000afe
 80034d0:	0800e7c8 	.word	0x0800e7c8
			} else if(dilSecim == 1) {
 80034d4:	4b7b      	ldr	r3, [pc, #492]	; (80036c4 <menu+0x2114>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d11b      	bne.n	8003514 <menu+0x1f64>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80034dc:	4a7a      	ldr	r2, [pc, #488]	; (80036c8 <menu+0x2118>)
 80034de:	2101      	movs	r1, #1
 80034e0:	2001      	movs	r0, #1
 80034e2:	f005 fbdf 	bl	8008ca4 <lcd_print>
 80034e6:	e015      	b.n	8003514 <menu+0x1f64>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034e8:	4b78      	ldr	r3, [pc, #480]	; (80036cc <menu+0x211c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d111      	bne.n	8003514 <menu+0x1f64>
			if(dilSecim == 0){
 80034f0:	4b74      	ldr	r3, [pc, #464]	; (80036c4 <menu+0x2114>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <menu+0x1f52>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80034f8:	4a75      	ldr	r2, [pc, #468]	; (80036d0 <menu+0x2120>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	2001      	movs	r0, #1
 80034fe:	f005 fbd1 	bl	8008ca4 <lcd_print>
			}
			if(dilSecim == 1){
 8003502:	4b70      	ldr	r3, [pc, #448]	; (80036c4 <menu+0x2114>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d104      	bne.n	8003514 <menu+0x1f64>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800350a:	4a72      	ldr	r2, [pc, #456]	; (80036d4 <menu+0x2124>)
 800350c:	2101      	movs	r1, #1
 800350e:	2001      	movs	r0, #1
 8003510:	f005 fbc8 	bl	8008ca4 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003514:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <menu+0x2128>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d113      	bne.n	8003544 <menu+0x1f94>
			if(dilSecim == 0) {
 800351c:	4b69      	ldr	r3, [pc, #420]	; (80036c4 <menu+0x2114>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <menu+0x1f80>
				lcd_print(2, 1, "Pasif           ");
 8003524:	4a6d      	ldr	r2, [pc, #436]	; (80036dc <menu+0x212c>)
 8003526:	2101      	movs	r1, #1
 8003528:	2002      	movs	r0, #2
 800352a:	f005 fbbb 	bl	8008ca4 <lcd_print>
 800352e:	e020      	b.n	8003572 <menu+0x1fc2>
			} else if(dilSecim == 1){
 8003530:	4b64      	ldr	r3, [pc, #400]	; (80036c4 <menu+0x2114>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d11c      	bne.n	8003572 <menu+0x1fc2>
				lcd_print(2, 1, "Passive         ");
 8003538:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <menu+0x2130>)
 800353a:	2101      	movs	r1, #1
 800353c:	2002      	movs	r0, #2
 800353e:	f005 fbb1 	bl	8008ca4 <lcd_print>
 8003542:	e016      	b.n	8003572 <menu+0x1fc2>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003544:	4b64      	ldr	r3, [pc, #400]	; (80036d8 <menu+0x2128>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d112      	bne.n	8003572 <menu+0x1fc2>
			if(dilSecim == 0){
 800354c:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <menu+0x2114>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <menu+0x1fb0>
				lcd_print(2, 1, "Aktif           ");
 8003554:	4a63      	ldr	r2, [pc, #396]	; (80036e4 <menu+0x2134>)
 8003556:	2101      	movs	r1, #1
 8003558:	2002      	movs	r0, #2
 800355a:	f005 fba3 	bl	8008ca4 <lcd_print>
 800355e:	e008      	b.n	8003572 <menu+0x1fc2>
			} else if(dilSecim == 1){
 8003560:	4b58      	ldr	r3, [pc, #352]	; (80036c4 <menu+0x2114>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d104      	bne.n	8003572 <menu+0x1fc2>
				lcd_print(2, 1, "Active          ");
 8003568:	4a5f      	ldr	r2, [pc, #380]	; (80036e8 <menu+0x2138>)
 800356a:	2101      	movs	r1, #1
 800356c:	2002      	movs	r0, #2
 800356e:	f005 fb99 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003572:	2102      	movs	r1, #2
 8003574:	485d      	ldr	r0, [pc, #372]	; (80036ec <menu+0x213c>)
 8003576:	f006 febb 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d115      	bne.n	80035ac <menu+0x1ffc>
 8003580:	4b5b      	ldr	r3, [pc, #364]	; (80036f0 <menu+0x2140>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00e      	beq.n	80035ac <menu+0x1ffc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800358e:	4b52      	ldr	r3, [pc, #328]	; (80036d8 <menu+0x2128>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <menu+0x2128>)
 8003598:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800359a:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <menu+0x2128>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d902      	bls.n	80035a8 <menu+0x1ff8>
				devirmeYukariIleriLimit = 0;
 80035a2:	4b4d      	ldr	r3, [pc, #308]	; (80036d8 <menu+0x2128>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035a8:	f001 fb1c 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ac:	2104      	movs	r1, #4
 80035ae:	484f      	ldr	r0, [pc, #316]	; (80036ec <menu+0x213c>)
 80035b0:	f006 fe9e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d115      	bne.n	80035e6 <menu+0x2036>
 80035ba:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <menu+0x2140>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	f083 0301 	eor.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <menu+0x2036>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80035c8:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <menu+0x2128>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <menu+0x2128>)
 80035d2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80035d4:	4b40      	ldr	r3, [pc, #256]	; (80036d8 <menu+0x2128>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <menu+0x2032>
		   		devirmeYukariIleriLimit = 1;
 80035dc:	4b3e      	ldr	r3, [pc, #248]	; (80036d8 <menu+0x2128>)
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035e2:	f001 faff 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e6:	2108      	movs	r1, #8
 80035e8:	4840      	ldr	r0, [pc, #256]	; (80036ec <menu+0x213c>)
 80035ea:	f006 fe81 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10d      	bne.n	8003610 <menu+0x2060>
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <menu+0x2140>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f083 0301 	eor.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <menu+0x2060>
			eepromData[16] = devirmeYukariIleriLimit;
 8003602:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <menu+0x2128>)
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <menu+0x2144>)
 8003608:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800360a:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <menu+0x2148>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003610:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <menu+0x214c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b13      	cmp	r3, #19
 8003616:	f040 80d5 	bne.w	80037c4 <menu+0x2214>
		if(devirmeYuruyusSecim == 2) {
 800361a:	4b2c      	ldr	r3, [pc, #176]	; (80036cc <menu+0x211c>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d113      	bne.n	800364a <menu+0x209a>
			if(dilSecim == 0) {
 8003622:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <menu+0x2114>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <menu+0x2086>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800362a:	4a35      	ldr	r2, [pc, #212]	; (8003700 <menu+0x2150>)
 800362c:	2101      	movs	r1, #1
 800362e:	2001      	movs	r0, #1
 8003630:	f005 fb38 	bl	8008ca4 <lcd_print>
 8003634:	e01f      	b.n	8003676 <menu+0x20c6>
			} else if(dilSecim == 1) {
 8003636:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <menu+0x2114>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d11b      	bne.n	8003676 <menu+0x20c6>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800363e:	4a31      	ldr	r2, [pc, #196]	; (8003704 <menu+0x2154>)
 8003640:	2101      	movs	r1, #1
 8003642:	2001      	movs	r0, #1
 8003644:	f005 fb2e 	bl	8008ca4 <lcd_print>
 8003648:	e015      	b.n	8003676 <menu+0x20c6>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <menu+0x211c>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d111      	bne.n	8003676 <menu+0x20c6>
			if(dilSecim == 0) {
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <menu+0x2114>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <menu+0x20b4>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800365a:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <menu+0x2158>)
 800365c:	2101      	movs	r1, #1
 800365e:	2001      	movs	r0, #1
 8003660:	f005 fb20 	bl	8008ca4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <menu+0x2114>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d104      	bne.n	8003676 <menu+0x20c6>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <menu+0x215c>)
 800366e:	2101      	movs	r1, #1
 8003670:	2001      	movs	r0, #1
 8003672:	f005 fb17 	bl	8008ca4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <menu+0x2160>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d113      	bne.n	80036a6 <menu+0x20f6>
			if(dilSecim == 0) {
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <menu+0x2114>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <menu+0x20e2>
				lcd_print(2, 1, "Pasif           ");
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <menu+0x212c>)
 8003688:	2101      	movs	r1, #1
 800368a:	2002      	movs	r0, #2
 800368c:	f005 fb0a 	bl	8008ca4 <lcd_print>
 8003690:	e049      	b.n	8003726 <menu+0x2176>
			} else if(dilSecim == 1) {
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <menu+0x2114>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d145      	bne.n	8003726 <menu+0x2176>
				lcd_print(2, 1, "Passive         ");
 800369a:	4a11      	ldr	r2, [pc, #68]	; (80036e0 <menu+0x2130>)
 800369c:	2101      	movs	r1, #1
 800369e:	2002      	movs	r0, #2
 80036a0:	f005 fb00 	bl	8008ca4 <lcd_print>
 80036a4:	e03f      	b.n	8003726 <menu+0x2176>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80036a6:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <menu+0x2160>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d13b      	bne.n	8003726 <menu+0x2176>
			if(dilSecim == 0) {
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <menu+0x2114>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d12e      	bne.n	8003714 <menu+0x2164>
				lcd_print(2, 1, "Aktif           ");
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <menu+0x2134>)
 80036b8:	2101      	movs	r1, #1
 80036ba:	2002      	movs	r0, #2
 80036bc:	f005 faf2 	bl	8008ca4 <lcd_print>
 80036c0:	e031      	b.n	8003726 <menu+0x2176>
 80036c2:	bf00      	nop
 80036c4:	20000b0d 	.word	0x20000b0d
 80036c8:	0800e7dc 	.word	0x0800e7dc
 80036cc:	20000afb 	.word	0x20000afb
 80036d0:	0800e7ec 	.word	0x0800e7ec
 80036d4:	0800e800 	.word	0x0800e800
 80036d8:	20000afc 	.word	0x20000afc
 80036dc:	0800e370 	.word	0x0800e370
 80036e0:	0800e384 	.word	0x0800e384
 80036e4:	0800e3d0 	.word	0x0800e3d0
 80036e8:	0800e3e4 	.word	0x0800e3e4
 80036ec:	40010800 	.word	0x40010800
 80036f0:	20000b1b 	.word	0x20000b1b
 80036f4:	20000a18 	.word	0x20000a18
 80036f8:	20000b18 	.word	0x20000b18
 80036fc:	20000aec 	.word	0x20000aec
 8003700:	0800e814 	.word	0x0800e814
 8003704:	0800e828 	.word	0x0800e828
 8003708:	0800e83c 	.word	0x0800e83c
 800370c:	0800e850 	.word	0x0800e850
 8003710:	20000afd 	.word	0x20000afd
			} else if(dilSecim == 1) {
 8003714:	4b90      	ldr	r3, [pc, #576]	; (8003958 <menu+0x23a8>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d104      	bne.n	8003726 <menu+0x2176>
				lcd_print(2, 1, "Active          ");
 800371c:	4a8f      	ldr	r2, [pc, #572]	; (800395c <menu+0x23ac>)
 800371e:	2101      	movs	r1, #1
 8003720:	2002      	movs	r0, #2
 8003722:	f005 fabf 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003726:	2102      	movs	r1, #2
 8003728:	488d      	ldr	r0, [pc, #564]	; (8003960 <menu+0x23b0>)
 800372a:	f006 fde1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d115      	bne.n	8003760 <menu+0x21b0>
 8003734:	4b8b      	ldr	r3, [pc, #556]	; (8003964 <menu+0x23b4>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	f083 0301 	eor.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00e      	beq.n	8003760 <menu+0x21b0>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003742:	4b89      	ldr	r3, [pc, #548]	; (8003968 <menu+0x23b8>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b87      	ldr	r3, [pc, #540]	; (8003968 <menu+0x23b8>)
 800374c:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800374e:	4b86      	ldr	r3, [pc, #536]	; (8003968 <menu+0x23b8>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d902      	bls.n	800375c <menu+0x21ac>
				devirmeAsagiGeriLimit = 0;
 8003756:	4b84      	ldr	r3, [pc, #528]	; (8003968 <menu+0x23b8>)
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800375c:	f001 fa42 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003760:	2104      	movs	r1, #4
 8003762:	487f      	ldr	r0, [pc, #508]	; (8003960 <menu+0x23b0>)
 8003764:	f006 fdc4 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d115      	bne.n	800379a <menu+0x21ea>
 800376e:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <menu+0x23b4>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <menu+0x21ea>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800377c:	4b7a      	ldr	r3, [pc, #488]	; (8003968 <menu+0x23b8>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	b2da      	uxtb	r2, r3
 8003784:	4b78      	ldr	r3, [pc, #480]	; (8003968 <menu+0x23b8>)
 8003786:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003788:	4b77      	ldr	r3, [pc, #476]	; (8003968 <menu+0x23b8>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <menu+0x21e6>
		   		devirmeAsagiGeriLimit = 1;
 8003790:	4b75      	ldr	r3, [pc, #468]	; (8003968 <menu+0x23b8>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003796:	f001 fa25 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800379a:	2108      	movs	r1, #8
 800379c:	4870      	ldr	r0, [pc, #448]	; (8003960 <menu+0x23b0>)
 800379e:	f006 fda7 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10d      	bne.n	80037c4 <menu+0x2214>
 80037a8:	4b6e      	ldr	r3, [pc, #440]	; (8003964 <menu+0x23b4>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	f083 0301 	eor.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <menu+0x2214>
			eepromData[17] = devirmeAsagiGeriLimit;
 80037b6:	4b6c      	ldr	r3, [pc, #432]	; (8003968 <menu+0x23b8>)
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	4b6c      	ldr	r3, [pc, #432]	; (800396c <menu+0x23bc>)
 80037bc:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80037be:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <menu+0x23c0>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80037c4:	4b6b      	ldr	r3, [pc, #428]	; (8003974 <menu+0x23c4>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b14      	cmp	r3, #20
 80037ca:	f040 80b5 	bne.w	8003938 <menu+0x2388>
		if(devirmeYuruyusSecim == 1) {
 80037ce:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <menu+0x23c8>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d113      	bne.n	80037fe <menu+0x224e>
			if(dilSecim == 0) {
 80037d6:	4b60      	ldr	r3, [pc, #384]	; (8003958 <menu+0x23a8>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <menu+0x223a>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80037de:	4a67      	ldr	r2, [pc, #412]	; (800397c <menu+0x23cc>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	2001      	movs	r0, #1
 80037e4:	f005 fa5e 	bl	8008ca4 <lcd_print>
 80037e8:	e020      	b.n	800382c <menu+0x227c>
			} else if(dilSecim == 1) {
 80037ea:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <menu+0x23a8>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d11c      	bne.n	800382c <menu+0x227c>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80037f2:	4a63      	ldr	r2, [pc, #396]	; (8003980 <menu+0x23d0>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	2001      	movs	r0, #1
 80037f8:	f005 fa54 	bl	8008ca4 <lcd_print>
 80037fc:	e016      	b.n	800382c <menu+0x227c>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80037fe:	4b5e      	ldr	r3, [pc, #376]	; (8003978 <menu+0x23c8>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d112      	bne.n	800382c <menu+0x227c>
			if(dilSecim == 0) {
 8003806:	4b54      	ldr	r3, [pc, #336]	; (8003958 <menu+0x23a8>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d105      	bne.n	800381a <menu+0x226a>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800380e:	4a5d      	ldr	r2, [pc, #372]	; (8003984 <menu+0x23d4>)
 8003810:	2101      	movs	r1, #1
 8003812:	2001      	movs	r0, #1
 8003814:	f005 fa46 	bl	8008ca4 <lcd_print>
 8003818:	e008      	b.n	800382c <menu+0x227c>
			} else if(dilSecim == 1) {
 800381a:	4b4f      	ldr	r3, [pc, #316]	; (8003958 <menu+0x23a8>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d104      	bne.n	800382c <menu+0x227c>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003822:	4a59      	ldr	r2, [pc, #356]	; (8003988 <menu+0x23d8>)
 8003824:	2101      	movs	r1, #1
 8003826:	2001      	movs	r0, #1
 8003828:	f005 fa3c 	bl	8008ca4 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 800382c:	4b57      	ldr	r3, [pc, #348]	; (800398c <menu+0x23dc>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <menu+0x22ac>
			if(dilSecim == 0) {
 8003834:	4b48      	ldr	r3, [pc, #288]	; (8003958 <menu+0x23a8>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <menu+0x2298>
				lcd_print(2, 1, "Tek tesir       ");
 800383c:	4a54      	ldr	r2, [pc, #336]	; (8003990 <menu+0x23e0>)
 800383e:	2101      	movs	r1, #1
 8003840:	2002      	movs	r0, #2
 8003842:	f005 fa2f 	bl	8008ca4 <lcd_print>
 8003846:	e020      	b.n	800388a <menu+0x22da>
			} else if(dilSecim == 1) {
 8003848:	4b43      	ldr	r3, [pc, #268]	; (8003958 <menu+0x23a8>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d11c      	bne.n	800388a <menu+0x22da>
				lcd_print(2, 1, "Single acting  ");
 8003850:	4a50      	ldr	r2, [pc, #320]	; (8003994 <menu+0x23e4>)
 8003852:	2101      	movs	r1, #1
 8003854:	2002      	movs	r0, #2
 8003856:	f005 fa25 	bl	8008ca4 <lcd_print>
 800385a:	e016      	b.n	800388a <menu+0x22da>
			}
		} else if(devirmeSilindirTipi == 1) {
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <menu+0x23dc>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d112      	bne.n	800388a <menu+0x22da>
			if(dilSecim == 0) {
 8003864:	4b3c      	ldr	r3, [pc, #240]	; (8003958 <menu+0x23a8>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <menu+0x22c8>
				lcd_print(2, 1, "Cift tesir      ");
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <menu+0x23e8>)
 800386e:	2101      	movs	r1, #1
 8003870:	2002      	movs	r0, #2
 8003872:	f005 fa17 	bl	8008ca4 <lcd_print>
 8003876:	e008      	b.n	800388a <menu+0x22da>
			} else if(dilSecim == 1) {
 8003878:	4b37      	ldr	r3, [pc, #220]	; (8003958 <menu+0x23a8>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d104      	bne.n	800388a <menu+0x22da>
				lcd_print(2, 1, "Double acting  ");
 8003880:	4a46      	ldr	r2, [pc, #280]	; (800399c <menu+0x23ec>)
 8003882:	2101      	movs	r1, #1
 8003884:	2002      	movs	r0, #2
 8003886:	f005 fa0d 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800388a:	2102      	movs	r1, #2
 800388c:	4834      	ldr	r0, [pc, #208]	; (8003960 <menu+0x23b0>)
 800388e:	f006 fd2f 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003892:	4603      	mov	r3, r0
 8003894:	2b01      	cmp	r3, #1
 8003896:	d119      	bne.n	80038cc <menu+0x231c>
 8003898:	4b32      	ldr	r3, [pc, #200]	; (8003964 <menu+0x23b4>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f083 0301 	eor.w	r3, r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d012      	beq.n	80038cc <menu+0x231c>
 80038a6:	4b34      	ldr	r3, [pc, #208]	; (8003978 <menu+0x23c8>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d10e      	bne.n	80038cc <menu+0x231c>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <menu+0x23dc>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b35      	ldr	r3, [pc, #212]	; (800398c <menu+0x23dc>)
 80038b8:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80038ba:	4b34      	ldr	r3, [pc, #208]	; (800398c <menu+0x23dc>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d902      	bls.n	80038c8 <menu+0x2318>
				devirmeSilindirTipi = 0;
 80038c2:	4b32      	ldr	r3, [pc, #200]	; (800398c <menu+0x23dc>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c8:	f001 f98c 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80038cc:	2104      	movs	r1, #4
 80038ce:	4824      	ldr	r0, [pc, #144]	; (8003960 <menu+0x23b0>)
 80038d0:	f006 fd0e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d119      	bne.n	800390e <menu+0x235e>
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <menu+0x23b4>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	f083 0301 	eor.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <menu+0x235e>
 80038e8:	4b23      	ldr	r3, [pc, #140]	; (8003978 <menu+0x23c8>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d10e      	bne.n	800390e <menu+0x235e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80038f0:	4b26      	ldr	r3, [pc, #152]	; (800398c <menu+0x23dc>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <menu+0x23dc>)
 80038fa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <menu+0x23dc>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <menu+0x235a>
		   		devirmeSilindirTipi = 1;
 8003904:	4b21      	ldr	r3, [pc, #132]	; (800398c <menu+0x23dc>)
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800390a:	f001 f96b 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800390e:	2108      	movs	r1, #8
 8003910:	4813      	ldr	r0, [pc, #76]	; (8003960 <menu+0x23b0>)
 8003912:	f006 fced 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10d      	bne.n	8003938 <menu+0x2388>
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <menu+0x23b4>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <menu+0x2388>
			eepromData[18] = devirmeSilindirTipi;
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <menu+0x23dc>)
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	4b0f      	ldr	r3, [pc, #60]	; (800396c <menu+0x23bc>)
 8003930:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003932:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <menu+0x23c0>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <menu+0x23c4>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b15      	cmp	r3, #21
 800393e:	f040 80c2 	bne.w	8003ac6 <menu+0x2516>
		if(dilSecim == 0) {
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <menu+0x23a8>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d12c      	bne.n	80039a4 <menu+0x23f4>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <menu+0x23f0>)
 800394c:	2101      	movs	r1, #1
 800394e:	2001      	movs	r0, #1
 8003950:	f005 f9a8 	bl	8008ca4 <lcd_print>
 8003954:	e02f      	b.n	80039b6 <menu+0x2406>
 8003956:	bf00      	nop
 8003958:	20000b0d 	.word	0x20000b0d
 800395c:	0800e3e4 	.word	0x0800e3e4
 8003960:	40010800 	.word	0x40010800
 8003964:	20000b1b 	.word	0x20000b1b
 8003968:	20000afd 	.word	0x20000afd
 800396c:	20000a18 	.word	0x20000a18
 8003970:	20000b18 	.word	0x20000b18
 8003974:	20000aec 	.word	0x20000aec
 8003978:	20000afb 	.word	0x20000afb
 800397c:	0800e864 	.word	0x0800e864
 8003980:	0800e878 	.word	0x0800e878
 8003984:	0800e88c 	.word	0x0800e88c
 8003988:	0800e8a0 	.word	0x0800e8a0
 800398c:	20000afe 	.word	0x20000afe
 8003990:	0800e8b4 	.word	0x0800e8b4
 8003994:	0800e8c8 	.word	0x0800e8c8
 8003998:	0800e8d8 	.word	0x0800e8d8
 800399c:	0800e8ec 	.word	0x0800e8ec
 80039a0:	0800e8fc 	.word	0x0800e8fc
		} else if(dilSecim == 1) {
 80039a4:	4b9c      	ldr	r3, [pc, #624]	; (8003c18 <menu+0x2668>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d104      	bne.n	80039b6 <menu+0x2406>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80039ac:	4a9b      	ldr	r2, [pc, #620]	; (8003c1c <menu+0x266c>)
 80039ae:	2101      	movs	r1, #1
 80039b0:	2001      	movs	r0, #1
 80039b2:	f005 f977 	bl	8008ca4 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80039b6:	4b9a      	ldr	r3, [pc, #616]	; (8003c20 <menu+0x2670>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d112      	bne.n	80039e4 <menu+0x2434>
			if(dilSecim == 0) {
 80039be:	4b96      	ldr	r3, [pc, #600]	; (8003c18 <menu+0x2668>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <menu+0x2420>
				lcd_print(2, 1, "Tek tesir       ");
 80039c6:	4a97      	ldr	r2, [pc, #604]	; (8003c24 <menu+0x2674>)
 80039c8:	2101      	movs	r1, #1
 80039ca:	2002      	movs	r0, #2
 80039cc:	f005 f96a 	bl	8008ca4 <lcd_print>
			}
			if(dilSecim == 1) {
 80039d0:	4b91      	ldr	r3, [pc, #580]	; (8003c18 <menu+0x2668>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d11c      	bne.n	8003a12 <menu+0x2462>
				lcd_print(2, 1, "Single acting  ");
 80039d8:	4a93      	ldr	r2, [pc, #588]	; (8003c28 <menu+0x2678>)
 80039da:	2101      	movs	r1, #1
 80039dc:	2002      	movs	r0, #2
 80039de:	f005 f961 	bl	8008ca4 <lcd_print>
 80039e2:	e016      	b.n	8003a12 <menu+0x2462>
			}
		} else if(platformSilindirTipi == 1) {
 80039e4:	4b8e      	ldr	r3, [pc, #568]	; (8003c20 <menu+0x2670>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d112      	bne.n	8003a12 <menu+0x2462>
			if(dilSecim == 0) {
 80039ec:	4b8a      	ldr	r3, [pc, #552]	; (8003c18 <menu+0x2668>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <menu+0x2450>
				lcd_print(2, 1, "Cift tesir      ");
 80039f4:	4a8d      	ldr	r2, [pc, #564]	; (8003c2c <menu+0x267c>)
 80039f6:	2101      	movs	r1, #1
 80039f8:	2002      	movs	r0, #2
 80039fa:	f005 f953 	bl	8008ca4 <lcd_print>
 80039fe:	e008      	b.n	8003a12 <menu+0x2462>
			} else if(dilSecim == 1) {
 8003a00:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <menu+0x2668>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d104      	bne.n	8003a12 <menu+0x2462>
				lcd_print(2, 1, "Double acting  ");
 8003a08:	4a89      	ldr	r2, [pc, #548]	; (8003c30 <menu+0x2680>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	f005 f949 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a12:	2102      	movs	r1, #2
 8003a14:	4887      	ldr	r0, [pc, #540]	; (8003c34 <menu+0x2684>)
 8003a16:	f006 fc6b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d115      	bne.n	8003a4c <menu+0x249c>
 8003a20:	4b85      	ldr	r3, [pc, #532]	; (8003c38 <menu+0x2688>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	f083 0301 	eor.w	r3, r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <menu+0x249c>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003a2e:	4b7c      	ldr	r3, [pc, #496]	; (8003c20 <menu+0x2670>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4b7a      	ldr	r3, [pc, #488]	; (8003c20 <menu+0x2670>)
 8003a38:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003a3a:	4b79      	ldr	r3, [pc, #484]	; (8003c20 <menu+0x2670>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d902      	bls.n	8003a48 <menu+0x2498>
				platformSilindirTipi = 0;
 8003a42:	4b77      	ldr	r3, [pc, #476]	; (8003c20 <menu+0x2670>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a48:	f001 f8cc 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	4879      	ldr	r0, [pc, #484]	; (8003c34 <menu+0x2684>)
 8003a50:	f006 fc4e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d115      	bne.n	8003a86 <menu+0x24d6>
 8003a5a:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <menu+0x2688>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	f083 0301 	eor.w	r3, r3, #1
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <menu+0x24d6>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003a68:	4b6d      	ldr	r3, [pc, #436]	; (8003c20 <menu+0x2670>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	4b6b      	ldr	r3, [pc, #428]	; (8003c20 <menu+0x2670>)
 8003a72:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003a74:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <menu+0x2670>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <menu+0x24d2>
		   		platformSilindirTipi = 1;
 8003a7c:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <menu+0x2670>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a82:	f001 f8af 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a86:	2108      	movs	r1, #8
 8003a88:	486a      	ldr	r0, [pc, #424]	; (8003c34 <menu+0x2684>)
 8003a8a:	f006 fc31 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d118      	bne.n	8003ac6 <menu+0x2516>
 8003a94:	4b68      	ldr	r3, [pc, #416]	; (8003c38 <menu+0x2688>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	f083 0301 	eor.w	r3, r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d011      	beq.n	8003ac6 <menu+0x2516>
			eepromData[19] = platformSilindirTipi;
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	; (8003c20 <menu+0x2670>)
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	4b65      	ldr	r3, [pc, #404]	; (8003c3c <menu+0x268c>)
 8003aa8:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003aaa:	4b5d      	ldr	r3, [pc, #372]	; (8003c20 <menu+0x2670>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d106      	bne.n	8003ac0 <menu+0x2510>
				altLimit = 1;
 8003ab2:	4b63      	ldr	r3, [pc, #396]	; (8003c40 <menu+0x2690>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003ab8:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <menu+0x2690>)
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	4b5f      	ldr	r3, [pc, #380]	; (8003c3c <menu+0x268c>)
 8003abe:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003ac0:	4b60      	ldr	r3, [pc, #384]	; (8003c44 <menu+0x2694>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003ac6:	4b60      	ldr	r3, [pc, #384]	; (8003c48 <menu+0x2698>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b16      	cmp	r3, #22
 8003acc:	f040 8081 	bne.w	8003bd2 <menu+0x2622>
		if(dilSecim == 0) {
 8003ad0:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <menu+0x2668>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <menu+0x2534>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003ad8:	4a5c      	ldr	r2, [pc, #368]	; (8003c4c <menu+0x269c>)
 8003ada:	2101      	movs	r1, #1
 8003adc:	2001      	movs	r0, #1
 8003ade:	f005 f8e1 	bl	8008ca4 <lcd_print>
 8003ae2:	e008      	b.n	8003af6 <menu+0x2546>
		} else if(dilSecim == 1) {
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <menu+0x2668>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d104      	bne.n	8003af6 <menu+0x2546>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003aec:	4a58      	ldr	r2, [pc, #352]	; (8003c50 <menu+0x26a0>)
 8003aee:	2101      	movs	r1, #1
 8003af0:	2001      	movs	r0, #1
 8003af2:	f005 f8d7 	bl	8008ca4 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003af6:	4b48      	ldr	r3, [pc, #288]	; (8003c18 <menu+0x2668>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <menu+0x255a>
				lcd_print(2, 1, "Kac Saniye     ");
 8003afe:	4a55      	ldr	r2, [pc, #340]	; (8003c54 <menu+0x26a4>)
 8003b00:	2101      	movs	r1, #1
 8003b02:	2002      	movs	r0, #2
 8003b04:	f005 f8ce 	bl	8008ca4 <lcd_print>
 8003b08:	e008      	b.n	8003b1c <menu+0x256c>
			} else if(dilSecim == 1){
 8003b0a:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <menu+0x2668>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d104      	bne.n	8003b1c <menu+0x256c>
				lcd_print(2, 1, "Second         ");
 8003b12:	4a51      	ldr	r2, [pc, #324]	; (8003c58 <menu+0x26a8>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	2002      	movs	r0, #2
 8003b18:	f005 f8c4 	bl	8008ca4 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003b1c:	4b4f      	ldr	r3, [pc, #316]	; (8003c5c <menu+0x26ac>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	220a      	movs	r2, #10
 8003b22:	494f      	ldr	r1, [pc, #316]	; (8003c60 <menu+0x26b0>)
 8003b24:	4618      	mov	r0, r3
 8003b26:	f009 fc6b 	bl	800d400 <itoa>
		lcd_print(2,16,snum);
 8003b2a:	4a4d      	ldr	r2, [pc, #308]	; (8003c60 <menu+0x26b0>)
 8003b2c:	2110      	movs	r1, #16
 8003b2e:	2002      	movs	r0, #2
 8003b30:	f005 f8b8 	bl	8008ca4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b34:	2102      	movs	r1, #2
 8003b36:	483f      	ldr	r0, [pc, #252]	; (8003c34 <menu+0x2684>)
 8003b38:	f006 fbda 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d115      	bne.n	8003b6e <menu+0x25be>
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <menu+0x2688>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	f083 0301 	eor.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <menu+0x25be>
			yukariValfTmr = yukariValfTmr + 1;
 8003b50:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <menu+0x26ac>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <menu+0x26ac>)
 8003b5a:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003b5c:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <menu+0x26ac>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b05      	cmp	r3, #5
 8003b62:	d902      	bls.n	8003b6a <menu+0x25ba>
				yukariValfTmr = 0;
 8003b64:	4b3d      	ldr	r3, [pc, #244]	; (8003c5c <menu+0x26ac>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b6a:	f001 f83b 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b6e:	2104      	movs	r1, #4
 8003b70:	4830      	ldr	r0, [pc, #192]	; (8003c34 <menu+0x2684>)
 8003b72:	f006 fbbd 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d115      	bne.n	8003ba8 <menu+0x25f8>
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <menu+0x2688>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	f083 0301 	eor.w	r3, r3, #1
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00e      	beq.n	8003ba8 <menu+0x25f8>
			yukariValfTmr = yukariValfTmr - 1;
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <menu+0x26ac>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <menu+0x26ac>)
 8003b94:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <menu+0x26ac>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d902      	bls.n	8003ba4 <menu+0x25f4>
		   		yukariValfTmr = 5;
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <menu+0x26ac>)
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ba4:	f001 f81e 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ba8:	2108      	movs	r1, #8
 8003baa:	4822      	ldr	r0, [pc, #136]	; (8003c34 <menu+0x2684>)
 8003bac:	f006 fba0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d10d      	bne.n	8003bd2 <menu+0x2622>
 8003bb6:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <menu+0x2688>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	f083 0301 	eor.w	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <menu+0x2622>
			eepromData[20] = yukariValfTmr;
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <menu+0x26ac>)
 8003bc6:	781a      	ldrb	r2, [r3, #0]
 8003bc8:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <menu+0x268c>)
 8003bca:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <menu+0x2694>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003bd2:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <menu+0x2698>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b17      	cmp	r3, #23
 8003bd8:	f040 80ac 	bne.w	8003d34 <menu+0x2784>
		if(dilSecim == 0) {
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <menu+0x2668>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <menu+0x2640>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003be4:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <menu+0x26b4>)
 8003be6:	2101      	movs	r1, #1
 8003be8:	2001      	movs	r0, #1
 8003bea:	f005 f85b 	bl	8008ca4 <lcd_print>
 8003bee:	e008      	b.n	8003c02 <menu+0x2652>
		} else if(dilSecim == 1) {
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <menu+0x2668>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d104      	bne.n	8003c02 <menu+0x2652>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <menu+0x26b8>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f005 f851 	bl	8008ca4 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <menu+0x2668>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d130      	bne.n	8003c6c <menu+0x26bc>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <menu+0x26a4>)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	2002      	movs	r0, #2
 8003c10:	f005 f848 	bl	8008ca4 <lcd_print>
 8003c14:	e033      	b.n	8003c7e <menu+0x26ce>
 8003c16:	bf00      	nop
 8003c18:	20000b0d 	.word	0x20000b0d
 8003c1c:	0800e910 	.word	0x0800e910
 8003c20:	20000aff 	.word	0x20000aff
 8003c24:	0800e8b4 	.word	0x0800e8b4
 8003c28:	0800e8c8 	.word	0x0800e8c8
 8003c2c:	0800e8d8 	.word	0x0800e8d8
 8003c30:	0800e8ec 	.word	0x0800e8ec
 8003c34:	40010800 	.word	0x40010800
 8003c38:	20000b1b 	.word	0x20000b1b
 8003c3c:	20000a18 	.word	0x20000a18
 8003c40:	20000af2 	.word	0x20000af2
 8003c44:	20000b18 	.word	0x20000b18
 8003c48:	20000aec 	.word	0x20000aec
 8003c4c:	0800e920 	.word	0x0800e920
 8003c50:	0800e934 	.word	0x0800e934
 8003c54:	0800e5d4 	.word	0x0800e5d4
 8003c58:	0800e948 	.word	0x0800e948
 8003c5c:	20000b00 	.word	0x20000b00
 8003c60:	20000a88 	.word	0x20000a88
 8003c64:	0800e958 	.word	0x0800e958
 8003c68:	0800e96c 	.word	0x0800e96c
			} else if(dilSecim == 1) {
 8003c6c:	4b98      	ldr	r3, [pc, #608]	; (8003ed0 <menu+0x2920>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d104      	bne.n	8003c7e <menu+0x26ce>
				lcd_print(2, 1, "Second         ");
 8003c74:	4a97      	ldr	r2, [pc, #604]	; (8003ed4 <menu+0x2924>)
 8003c76:	2101      	movs	r1, #1
 8003c78:	2002      	movs	r0, #2
 8003c7a:	f005 f813 	bl	8008ca4 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003c7e:	4b96      	ldr	r3, [pc, #600]	; (8003ed8 <menu+0x2928>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	220a      	movs	r2, #10
 8003c84:	4995      	ldr	r1, [pc, #596]	; (8003edc <menu+0x292c>)
 8003c86:	4618      	mov	r0, r3
 8003c88:	f009 fbba 	bl	800d400 <itoa>
		lcd_print(2,16,snum);
 8003c8c:	4a93      	ldr	r2, [pc, #588]	; (8003edc <menu+0x292c>)
 8003c8e:	2110      	movs	r1, #16
 8003c90:	2002      	movs	r0, #2
 8003c92:	f005 f807 	bl	8008ca4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c96:	2102      	movs	r1, #2
 8003c98:	4891      	ldr	r0, [pc, #580]	; (8003ee0 <menu+0x2930>)
 8003c9a:	f006 fb29 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d115      	bne.n	8003cd0 <menu+0x2720>
 8003ca4:	4b8f      	ldr	r3, [pc, #572]	; (8003ee4 <menu+0x2934>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	f083 0301 	eor.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <menu+0x2720>
			asagiValfTmr = asagiValfTmr + 1;
 8003cb2:	4b89      	ldr	r3, [pc, #548]	; (8003ed8 <menu+0x2928>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b87      	ldr	r3, [pc, #540]	; (8003ed8 <menu+0x2928>)
 8003cbc:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003cbe:	4b86      	ldr	r3, [pc, #536]	; (8003ed8 <menu+0x2928>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d902      	bls.n	8003ccc <menu+0x271c>
				asagiValfTmr = 0;
 8003cc6:	4b84      	ldr	r3, [pc, #528]	; (8003ed8 <menu+0x2928>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ccc:	f000 ff8a 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	4883      	ldr	r0, [pc, #524]	; (8003ee0 <menu+0x2930>)
 8003cd4:	f006 fb0c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d115      	bne.n	8003d0a <menu+0x275a>
 8003cde:	4b81      	ldr	r3, [pc, #516]	; (8003ee4 <menu+0x2934>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	f083 0301 	eor.w	r3, r3, #1
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <menu+0x275a>
			asagiValfTmr = asagiValfTmr - 1;
 8003cec:	4b7a      	ldr	r3, [pc, #488]	; (8003ed8 <menu+0x2928>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b78      	ldr	r3, [pc, #480]	; (8003ed8 <menu+0x2928>)
 8003cf6:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003cf8:	4b77      	ldr	r3, [pc, #476]	; (8003ed8 <menu+0x2928>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d902      	bls.n	8003d06 <menu+0x2756>
		   		asagiValfTmr = 5;
 8003d00:	4b75      	ldr	r3, [pc, #468]	; (8003ed8 <menu+0x2928>)
 8003d02:	2205      	movs	r2, #5
 8003d04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d06:	f000 ff6d 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d0a:	2108      	movs	r1, #8
 8003d0c:	4874      	ldr	r0, [pc, #464]	; (8003ee0 <menu+0x2930>)
 8003d0e:	f006 faef 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10d      	bne.n	8003d34 <menu+0x2784>
 8003d18:	4b72      	ldr	r3, [pc, #456]	; (8003ee4 <menu+0x2934>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f083 0301 	eor.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <menu+0x2784>
			eepromData[21] = asagiValfTmr;
 8003d26:	4b6c      	ldr	r3, [pc, #432]	; (8003ed8 <menu+0x2928>)
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <menu+0x2938>)
 8003d2c:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003d2e:	4b6f      	ldr	r3, [pc, #444]	; (8003eec <menu+0x293c>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003d34:	4b6e      	ldr	r3, [pc, #440]	; (8003ef0 <menu+0x2940>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b18      	cmp	r3, #24
 8003d3a:	f040 809d 	bne.w	8003e78 <menu+0x28c8>
		if(devirmeYuruyusSecim == 2) {
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <menu+0x2944>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d113      	bne.n	8003d6e <menu+0x27be>
			if(dilSecim == 0) {
 8003d46:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <menu+0x2920>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d105      	bne.n	8003d5a <menu+0x27aa>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003d4e:	4a6a      	ldr	r2, [pc, #424]	; (8003ef8 <menu+0x2948>)
 8003d50:	2101      	movs	r1, #1
 8003d52:	2001      	movs	r0, #1
 8003d54:	f004 ffa6 	bl	8008ca4 <lcd_print>
 8003d58:	e020      	b.n	8003d9c <menu+0x27ec>
			} else if(dilSecim == 1) {
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <menu+0x2920>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d11c      	bne.n	8003d9c <menu+0x27ec>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003d62:	4a66      	ldr	r2, [pc, #408]	; (8003efc <menu+0x294c>)
 8003d64:	2101      	movs	r1, #1
 8003d66:	2001      	movs	r0, #1
 8003d68:	f004 ff9c 	bl	8008ca4 <lcd_print>
 8003d6c:	e016      	b.n	8003d9c <menu+0x27ec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d6e:	4b61      	ldr	r3, [pc, #388]	; (8003ef4 <menu+0x2944>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d112      	bne.n	8003d9c <menu+0x27ec>
			if(dilSecim == 0) {
 8003d76:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <menu+0x2920>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <menu+0x27da>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003d7e:	4a60      	ldr	r2, [pc, #384]	; (8003f00 <menu+0x2950>)
 8003d80:	2101      	movs	r1, #1
 8003d82:	2001      	movs	r0, #1
 8003d84:	f004 ff8e 	bl	8008ca4 <lcd_print>
 8003d88:	e008      	b.n	8003d9c <menu+0x27ec>
			} else if(dilSecim == 1) {
 8003d8a:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <menu+0x2920>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d104      	bne.n	8003d9c <menu+0x27ec>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003d92:	4a5c      	ldr	r2, [pc, #368]	; (8003f04 <menu+0x2954>)
 8003d94:	2101      	movs	r1, #1
 8003d96:	2001      	movs	r0, #1
 8003d98:	f004 ff84 	bl	8008ca4 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003d9c:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <menu+0x2920>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <menu+0x2800>
				lcd_print(2, 1, "Kac Saniye     ");
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <menu+0x2958>)
 8003da6:	2101      	movs	r1, #1
 8003da8:	2002      	movs	r0, #2
 8003daa:	f004 ff7b 	bl	8008ca4 <lcd_print>
 8003dae:	e008      	b.n	8003dc2 <menu+0x2812>
			} else if(dilSecim == 1) {
 8003db0:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <menu+0x2920>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d104      	bne.n	8003dc2 <menu+0x2812>
				lcd_print(2, 1, "Second         ");
 8003db8:	4a46      	ldr	r2, [pc, #280]	; (8003ed4 <menu+0x2924>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f004 ff71 	bl	8008ca4 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003dc2:	4b52      	ldr	r3, [pc, #328]	; (8003f0c <menu+0x295c>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	220a      	movs	r2, #10
 8003dc8:	4944      	ldr	r1, [pc, #272]	; (8003edc <menu+0x292c>)
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f009 fb18 	bl	800d400 <itoa>
		lcd_print(2, 16, snum);
 8003dd0:	4a42      	ldr	r2, [pc, #264]	; (8003edc <menu+0x292c>)
 8003dd2:	2110      	movs	r1, #16
 8003dd4:	2002      	movs	r0, #2
 8003dd6:	f004 ff65 	bl	8008ca4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dda:	2102      	movs	r1, #2
 8003ddc:	4840      	ldr	r0, [pc, #256]	; (8003ee0 <menu+0x2930>)
 8003dde:	f006 fa87 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d115      	bne.n	8003e14 <menu+0x2864>
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <menu+0x2934>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f083 0301 	eor.w	r3, r3, #1
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00e      	beq.n	8003e14 <menu+0x2864>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003df6:	4b45      	ldr	r3, [pc, #276]	; (8003f0c <menu+0x295c>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <menu+0x295c>)
 8003e00:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003e02:	4b42      	ldr	r3, [pc, #264]	; (8003f0c <menu+0x295c>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d902      	bls.n	8003e10 <menu+0x2860>
				devirmeYukariIleriTmr = 0;
 8003e0a:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <menu+0x295c>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e10:	f000 fee8 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e14:	2104      	movs	r1, #4
 8003e16:	4832      	ldr	r0, [pc, #200]	; (8003ee0 <menu+0x2930>)
 8003e18:	f006 fa6a 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d115      	bne.n	8003e4e <menu+0x289e>
 8003e22:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <menu+0x2934>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	f083 0301 	eor.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00e      	beq.n	8003e4e <menu+0x289e>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <menu+0x295c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <menu+0x295c>)
 8003e3a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003e3c:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <menu+0x295c>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d902      	bls.n	8003e4a <menu+0x289a>
		   		devirmeYukariIleriTmr = 5;
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <menu+0x295c>)
 8003e46:	2205      	movs	r2, #5
 8003e48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e4a:	f000 fecb 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e4e:	2108      	movs	r1, #8
 8003e50:	4823      	ldr	r0, [pc, #140]	; (8003ee0 <menu+0x2930>)
 8003e52:	f006 fa4d 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d10d      	bne.n	8003e78 <menu+0x28c8>
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <menu+0x2934>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	f083 0301 	eor.w	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d006      	beq.n	8003e78 <menu+0x28c8>
			eepromData[22] = devirmeYukariIleriTmr;
 8003e6a:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <menu+0x295c>)
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <menu+0x2938>)
 8003e70:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <menu+0x293c>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <menu+0x2940>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b19      	cmp	r3, #25
 8003e7e:	f040 80c4 	bne.w	800400a <menu+0x2a5a>
		if(devirmeYuruyusSecim == 2) {
 8003e82:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <menu+0x2944>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d113      	bne.n	8003eb2 <menu+0x2902>
			if(dilSecim == 0) {
 8003e8a:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <menu+0x2920>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <menu+0x28ee>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <menu+0x2960>)
 8003e94:	2101      	movs	r1, #1
 8003e96:	2001      	movs	r0, #1
 8003e98:	f004 ff04 	bl	8008ca4 <lcd_print>
 8003e9c:	e047      	b.n	8003f2e <menu+0x297e>
			} else if(dilSecim == 1) {
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <menu+0x2920>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d143      	bne.n	8003f2e <menu+0x297e>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003ea6:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <menu+0x2964>)
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f004 fefa 	bl	8008ca4 <lcd_print>
 8003eb0:	e03d      	b.n	8003f2e <menu+0x297e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <menu+0x2944>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d139      	bne.n	8003f2e <menu+0x297e>
			if(dilSecim == 0) {
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <menu+0x2920>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d12c      	bne.n	8003f1c <menu+0x296c>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003ec2:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <menu+0x2968>)
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	f004 feec 	bl	8008ca4 <lcd_print>
 8003ecc:	e02f      	b.n	8003f2e <menu+0x297e>
 8003ece:	bf00      	nop
 8003ed0:	20000b0d 	.word	0x20000b0d
 8003ed4:	0800e948 	.word	0x0800e948
 8003ed8:	20000b01 	.word	0x20000b01
 8003edc:	20000a88 	.word	0x20000a88
 8003ee0:	40010800 	.word	0x40010800
 8003ee4:	20000b1b 	.word	0x20000b1b
 8003ee8:	20000a18 	.word	0x20000a18
 8003eec:	20000b18 	.word	0x20000b18
 8003ef0:	20000aec 	.word	0x20000aec
 8003ef4:	20000afb 	.word	0x20000afb
 8003ef8:	0800e980 	.word	0x0800e980
 8003efc:	0800e994 	.word	0x0800e994
 8003f00:	0800e9a8 	.word	0x0800e9a8
 8003f04:	0800e9bc 	.word	0x0800e9bc
 8003f08:	0800e5d4 	.word	0x0800e5d4
 8003f0c:	20000b02 	.word	0x20000b02
 8003f10:	0800e9d0 	.word	0x0800e9d0
 8003f14:	0800e9e4 	.word	0x0800e9e4
 8003f18:	0800e9f8 	.word	0x0800e9f8
			} else if(dilSecim == 1) {
 8003f1c:	4b73      	ldr	r3, [pc, #460]	; (80040ec <menu+0x2b3c>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d104      	bne.n	8003f2e <menu+0x297e>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003f24:	4a72      	ldr	r2, [pc, #456]	; (80040f0 <menu+0x2b40>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f004 febb 	bl	8008ca4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003f2e:	4b6f      	ldr	r3, [pc, #444]	; (80040ec <menu+0x2b3c>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <menu+0x2992>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f36:	4a6f      	ldr	r2, [pc, #444]	; (80040f4 <menu+0x2b44>)
 8003f38:	2101      	movs	r1, #1
 8003f3a:	2002      	movs	r0, #2
 8003f3c:	f004 feb2 	bl	8008ca4 <lcd_print>
 8003f40:	e008      	b.n	8003f54 <menu+0x29a4>
			} else if(dilSecim == 1) {
 8003f42:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <menu+0x2b3c>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d104      	bne.n	8003f54 <menu+0x29a4>
				lcd_print(2, 1, "Second         ");
 8003f4a:	4a6b      	ldr	r2, [pc, #428]	; (80040f8 <menu+0x2b48>)
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	2002      	movs	r0, #2
 8003f50:	f004 fea8 	bl	8008ca4 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003f54:	4b69      	ldr	r3, [pc, #420]	; (80040fc <menu+0x2b4c>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	220a      	movs	r2, #10
 8003f5a:	4969      	ldr	r1, [pc, #420]	; (8004100 <menu+0x2b50>)
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f009 fa4f 	bl	800d400 <itoa>
		lcd_print(2,16,snum);
 8003f62:	4a67      	ldr	r2, [pc, #412]	; (8004100 <menu+0x2b50>)
 8003f64:	2110      	movs	r1, #16
 8003f66:	2002      	movs	r0, #2
 8003f68:	f004 fe9c 	bl	8008ca4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4865      	ldr	r0, [pc, #404]	; (8004104 <menu+0x2b54>)
 8003f70:	f006 f9be 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d115      	bne.n	8003fa6 <menu+0x29f6>
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <menu+0x2b58>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	f083 0301 	eor.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <menu+0x29f6>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003f88:	4b5c      	ldr	r3, [pc, #368]	; (80040fc <menu+0x2b4c>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	4b5a      	ldr	r3, [pc, #360]	; (80040fc <menu+0x2b4c>)
 8003f92:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003f94:	4b59      	ldr	r3, [pc, #356]	; (80040fc <menu+0x2b4c>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d902      	bls.n	8003fa2 <menu+0x29f2>
				devirmeAsagiGeriTmr = 0;
 8003f9c:	4b57      	ldr	r3, [pc, #348]	; (80040fc <menu+0x2b4c>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fa2:	f000 fe1f 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	4856      	ldr	r0, [pc, #344]	; (8004104 <menu+0x2b54>)
 8003faa:	f006 f9a1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d115      	bne.n	8003fe0 <menu+0x2a30>
 8003fb4:	4b54      	ldr	r3, [pc, #336]	; (8004108 <menu+0x2b58>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	f083 0301 	eor.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00e      	beq.n	8003fe0 <menu+0x2a30>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <menu+0x2b4c>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <menu+0x2b4c>)
 8003fcc:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003fce:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <menu+0x2b4c>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d902      	bls.n	8003fdc <menu+0x2a2c>
		   		devirmeAsagiGeriTmr = 5;
 8003fd6:	4b49      	ldr	r3, [pc, #292]	; (80040fc <menu+0x2b4c>)
 8003fd8:	2205      	movs	r2, #5
 8003fda:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fdc:	f000 fe02 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe0:	2108      	movs	r1, #8
 8003fe2:	4848      	ldr	r0, [pc, #288]	; (8004104 <menu+0x2b54>)
 8003fe4:	f006 f984 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10d      	bne.n	800400a <menu+0x2a5a>
 8003fee:	4b46      	ldr	r3, [pc, #280]	; (8004108 <menu+0x2b58>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	f083 0301 	eor.w	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <menu+0x2a5a>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003ffc:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <menu+0x2b4c>)
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	4b42      	ldr	r3, [pc, #264]	; (800410c <menu+0x2b5c>)
 8004002:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004004:	4b42      	ldr	r3, [pc, #264]	; (8004110 <menu+0x2b60>)
 8004006:	2201      	movs	r2, #1
 8004008:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800400a:	4b42      	ldr	r3, [pc, #264]	; (8004114 <menu+0x2b64>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b1a      	cmp	r3, #26
 8004010:	f040 80ec 	bne.w	80041ec <menu+0x2c3c>
		if(dilSecim == 0) {
 8004014:	4b35      	ldr	r3, [pc, #212]	; (80040ec <menu+0x2b3c>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d105      	bne.n	8004028 <menu+0x2a78>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 800401c:	4a3e      	ldr	r2, [pc, #248]	; (8004118 <menu+0x2b68>)
 800401e:	2101      	movs	r1, #1
 8004020:	2001      	movs	r0, #1
 8004022:	f004 fe3f 	bl	8008ca4 <lcd_print>
 8004026:	e008      	b.n	800403a <menu+0x2a8a>
		} else if(dilSecim == 1) {
 8004028:	4b30      	ldr	r3, [pc, #192]	; (80040ec <menu+0x2b3c>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d104      	bne.n	800403a <menu+0x2a8a>
			lcd_print(1, 1, "WORKING TIME    ");
 8004030:	4a3a      	ldr	r2, [pc, #232]	; (800411c <menu+0x2b6c>)
 8004032:	2101      	movs	r1, #1
 8004034:	2001      	movs	r0, #1
 8004036:	f004 fe35 	bl	8008ca4 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800403a:	4b39      	ldr	r3, [pc, #228]	; (8004120 <menu+0x2b70>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b63      	cmp	r3, #99	; 0x63
 8004040:	d91e      	bls.n	8004080 <menu+0x2ad0>
			if(dilSecim == 0) {
 8004042:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <menu+0x2b3c>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <menu+0x2aa4>
				lcd_print(2, 1, "Kac Saniye     ");
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <menu+0x2b44>)
 800404c:	2101      	movs	r1, #1
 800404e:	2002      	movs	r0, #2
 8004050:	f004 fe28 	bl	8008ca4 <lcd_print>
			}
			if(dilSecim == 1) {
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <menu+0x2b3c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d104      	bne.n	8004066 <menu+0x2ab6>
				lcd_print(2, 1, "Second         ");
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <menu+0x2b48>)
 800405e:	2101      	movs	r1, #1
 8004060:	2002      	movs	r0, #2
 8004062:	f004 fe1f 	bl	8008ca4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <menu+0x2b70>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	220a      	movs	r2, #10
 800406c:	4924      	ldr	r1, [pc, #144]	; (8004100 <menu+0x2b50>)
 800406e:	4618      	mov	r0, r3
 8004070:	f009 f9c6 	bl	800d400 <itoa>
			lcd_print(2,14,snum);
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <menu+0x2b50>)
 8004076:	210e      	movs	r1, #14
 8004078:	2002      	movs	r0, #2
 800407a:	f004 fe13 	bl	8008ca4 <lcd_print>
 800407e:	e066      	b.n	800414e <menu+0x2b9e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <menu+0x2b70>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b09      	cmp	r3, #9
 8004086:	d923      	bls.n	80040d0 <menu+0x2b20>
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <menu+0x2b70>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b63      	cmp	r3, #99	; 0x63
 800408e:	d81f      	bhi.n	80040d0 <menu+0x2b20>
			if(dilSecim == 0) {
 8004090:	4b16      	ldr	r3, [pc, #88]	; (80040ec <menu+0x2b3c>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <menu+0x2af4>
				lcd_print(2, 1, "Kac Saniye     ");
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <menu+0x2b44>)
 800409a:	2101      	movs	r1, #1
 800409c:	2002      	movs	r0, #2
 800409e:	f004 fe01 	bl	8008ca4 <lcd_print>
 80040a2:	e008      	b.n	80040b6 <menu+0x2b06>
			} else if(dilSecim == 1) {
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <menu+0x2b3c>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d104      	bne.n	80040b6 <menu+0x2b06>
				lcd_print(2, 1, "Second         ");
 80040ac:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <menu+0x2b48>)
 80040ae:	2101      	movs	r1, #1
 80040b0:	2002      	movs	r0, #2
 80040b2:	f004 fdf7 	bl	8008ca4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040b6:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <menu+0x2b70>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	220a      	movs	r2, #10
 80040bc:	4910      	ldr	r1, [pc, #64]	; (8004100 <menu+0x2b50>)
 80040be:	4618      	mov	r0, r3
 80040c0:	f009 f99e 	bl	800d400 <itoa>
			lcd_print(2, 15, snum);
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <menu+0x2b50>)
 80040c6:	210f      	movs	r1, #15
 80040c8:	2002      	movs	r0, #2
 80040ca:	f004 fdeb 	bl	8008ca4 <lcd_print>
 80040ce:	e03e      	b.n	800414e <menu+0x2b9e>
		} else if(makineCalismaTmr <=  9) {
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <menu+0x2b70>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d83a      	bhi.n	800414e <menu+0x2b9e>
			if(dilSecim == 0) {
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <menu+0x2b3c>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d121      	bne.n	8004124 <menu+0x2b74>
				lcd_print(2, 1, "Kac Saniye     ");
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <menu+0x2b44>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2002      	movs	r0, #2
 80040e6:	f004 fddd 	bl	8008ca4 <lcd_print>
 80040ea:	e024      	b.n	8004136 <menu+0x2b86>
 80040ec:	20000b0d 	.word	0x20000b0d
 80040f0:	0800ea0c 	.word	0x0800ea0c
 80040f4:	0800e5d4 	.word	0x0800e5d4
 80040f8:	0800e948 	.word	0x0800e948
 80040fc:	20000b03 	.word	0x20000b03
 8004100:	20000a88 	.word	0x20000a88
 8004104:	40010800 	.word	0x40010800
 8004108:	20000b1b 	.word	0x20000b1b
 800410c:	20000a18 	.word	0x20000a18
 8004110:	20000b18 	.word	0x20000b18
 8004114:	20000aec 	.word	0x20000aec
 8004118:	0800ea20 	.word	0x0800ea20
 800411c:	0800ea34 	.word	0x0800ea34
 8004120:	20000b04 	.word	0x20000b04
			} else if(dilSecim == 1) {
 8004124:	4b8f      	ldr	r3, [pc, #572]	; (8004364 <menu+0x2db4>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d104      	bne.n	8004136 <menu+0x2b86>
				lcd_print(2, 1, "Second         ");
 800412c:	4a8e      	ldr	r2, [pc, #568]	; (8004368 <menu+0x2db8>)
 800412e:	2101      	movs	r1, #1
 8004130:	2002      	movs	r0, #2
 8004132:	f004 fdb7 	bl	8008ca4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004136:	4b8d      	ldr	r3, [pc, #564]	; (800436c <menu+0x2dbc>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	220a      	movs	r2, #10
 800413c:	498c      	ldr	r1, [pc, #560]	; (8004370 <menu+0x2dc0>)
 800413e:	4618      	mov	r0, r3
 8004140:	f009 f95e 	bl	800d400 <itoa>
			lcd_print(2, 16, snum);
 8004144:	4a8a      	ldr	r2, [pc, #552]	; (8004370 <menu+0x2dc0>)
 8004146:	2110      	movs	r1, #16
 8004148:	2002      	movs	r0, #2
 800414a:	f004 fdab 	bl	8008ca4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800414e:	2102      	movs	r1, #2
 8004150:	4888      	ldr	r0, [pc, #544]	; (8004374 <menu+0x2dc4>)
 8004152:	f006 f8cd 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004156:	4603      	mov	r3, r0
 8004158:	2b01      	cmp	r3, #1
 800415a:	d115      	bne.n	8004188 <menu+0x2bd8>
 800415c:	4b86      	ldr	r3, [pc, #536]	; (8004378 <menu+0x2dc8>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	f083 0301 	eor.w	r3, r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <menu+0x2bd8>
			makineCalismaTmr = makineCalismaTmr + 1;
 800416a:	4b80      	ldr	r3, [pc, #512]	; (800436c <menu+0x2dbc>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b7e      	ldr	r3, [pc, #504]	; (800436c <menu+0x2dbc>)
 8004174:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004176:	4b7d      	ldr	r3, [pc, #500]	; (800436c <menu+0x2dbc>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2bb4      	cmp	r3, #180	; 0xb4
 800417c:	d902      	bls.n	8004184 <menu+0x2bd4>
				makineCalismaTmr = 0;
 800417e:	4b7b      	ldr	r3, [pc, #492]	; (800436c <menu+0x2dbc>)
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004184:	f000 fd2e 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004188:	2104      	movs	r1, #4
 800418a:	487a      	ldr	r0, [pc, #488]	; (8004374 <menu+0x2dc4>)
 800418c:	f006 f8b0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004190:	4603      	mov	r3, r0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d115      	bne.n	80041c2 <menu+0x2c12>
 8004196:	4b78      	ldr	r3, [pc, #480]	; (8004378 <menu+0x2dc8>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	f083 0301 	eor.w	r3, r3, #1
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <menu+0x2c12>
			makineCalismaTmr = makineCalismaTmr - 1;
 80041a4:	4b71      	ldr	r3, [pc, #452]	; (800436c <menu+0x2dbc>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	4b6f      	ldr	r3, [pc, #444]	; (800436c <menu+0x2dbc>)
 80041ae:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80041b0:	4b6e      	ldr	r3, [pc, #440]	; (800436c <menu+0x2dbc>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2bb5      	cmp	r3, #181	; 0xb5
 80041b6:	d902      	bls.n	80041be <menu+0x2c0e>
		   		makineCalismaTmr = 180;
 80041b8:	4b6c      	ldr	r3, [pc, #432]	; (800436c <menu+0x2dbc>)
 80041ba:	22b4      	movs	r2, #180	; 0xb4
 80041bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041be:	f000 fd11 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041c2:	2108      	movs	r1, #8
 80041c4:	486b      	ldr	r0, [pc, #428]	; (8004374 <menu+0x2dc4>)
 80041c6:	f006 f893 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10d      	bne.n	80041ec <menu+0x2c3c>
 80041d0:	4b69      	ldr	r3, [pc, #420]	; (8004378 <menu+0x2dc8>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	f083 0301 	eor.w	r3, r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <menu+0x2c3c>
			eepromData[24] = makineCalismaTmr;
 80041de:	4b63      	ldr	r3, [pc, #396]	; (800436c <menu+0x2dbc>)
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	4b66      	ldr	r3, [pc, #408]	; (800437c <menu+0x2dcc>)
 80041e4:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80041e6:	4b66      	ldr	r3, [pc, #408]	; (8004380 <menu+0x2dd0>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80041ec:	4b65      	ldr	r3, [pc, #404]	; (8004384 <menu+0x2dd4>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b1b      	cmp	r3, #27
 80041f2:	f040 8083 	bne.w	80042fc <menu+0x2d4c>
		lcd_print(1, 1, "BUZZER          ");
 80041f6:	4a64      	ldr	r2, [pc, #400]	; (8004388 <menu+0x2dd8>)
 80041f8:	2101      	movs	r1, #1
 80041fa:	2001      	movs	r0, #1
 80041fc:	f004 fd52 	bl	8008ca4 <lcd_print>

		if(buzzer == 0) {
 8004200:	4b62      	ldr	r3, [pc, #392]	; (800438c <menu+0x2ddc>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d113      	bne.n	8004230 <menu+0x2c80>
			if(dilSecim == 0) {
 8004208:	4b56      	ldr	r3, [pc, #344]	; (8004364 <menu+0x2db4>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <menu+0x2c6c>
				lcd_print(2, 1, "Pasif           ");
 8004210:	4a5f      	ldr	r2, [pc, #380]	; (8004390 <menu+0x2de0>)
 8004212:	2101      	movs	r1, #1
 8004214:	2002      	movs	r0, #2
 8004216:	f004 fd45 	bl	8008ca4 <lcd_print>
 800421a:	e020      	b.n	800425e <menu+0x2cae>
			} else if(dilSecim == 1) {
 800421c:	4b51      	ldr	r3, [pc, #324]	; (8004364 <menu+0x2db4>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d11c      	bne.n	800425e <menu+0x2cae>
				lcd_print(2, 1, "Passive         ");
 8004224:	4a5b      	ldr	r2, [pc, #364]	; (8004394 <menu+0x2de4>)
 8004226:	2101      	movs	r1, #1
 8004228:	2002      	movs	r0, #2
 800422a:	f004 fd3b 	bl	8008ca4 <lcd_print>
 800422e:	e016      	b.n	800425e <menu+0x2cae>
			}
		} else if(buzzer == 1) {
 8004230:	4b56      	ldr	r3, [pc, #344]	; (800438c <menu+0x2ddc>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d112      	bne.n	800425e <menu+0x2cae>
			if(dilSecim == 0) {
 8004238:	4b4a      	ldr	r3, [pc, #296]	; (8004364 <menu+0x2db4>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <menu+0x2c9c>
				lcd_print(2, 1, "Aktif           ");
 8004240:	4a55      	ldr	r2, [pc, #340]	; (8004398 <menu+0x2de8>)
 8004242:	2101      	movs	r1, #1
 8004244:	2002      	movs	r0, #2
 8004246:	f004 fd2d 	bl	8008ca4 <lcd_print>
 800424a:	e008      	b.n	800425e <menu+0x2cae>
			} else if(dilSecim == 1) {
 800424c:	4b45      	ldr	r3, [pc, #276]	; (8004364 <menu+0x2db4>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d104      	bne.n	800425e <menu+0x2cae>
				lcd_print(2, 1, "Active          ");
 8004254:	4a51      	ldr	r2, [pc, #324]	; (800439c <menu+0x2dec>)
 8004256:	2101      	movs	r1, #1
 8004258:	2002      	movs	r0, #2
 800425a:	f004 fd23 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800425e:	2102      	movs	r1, #2
 8004260:	4844      	ldr	r0, [pc, #272]	; (8004374 <menu+0x2dc4>)
 8004262:	f006 f845 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004266:	4603      	mov	r3, r0
 8004268:	2b01      	cmp	r3, #1
 800426a:	d115      	bne.n	8004298 <menu+0x2ce8>
 800426c:	4b42      	ldr	r3, [pc, #264]	; (8004378 <menu+0x2dc8>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f083 0301 	eor.w	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00e      	beq.n	8004298 <menu+0x2ce8>
			buzzer = buzzer + 1;
 800427a:	4b44      	ldr	r3, [pc, #272]	; (800438c <menu+0x2ddc>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	3301      	adds	r3, #1
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4b42      	ldr	r3, [pc, #264]	; (800438c <menu+0x2ddc>)
 8004284:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004286:	4b41      	ldr	r3, [pc, #260]	; (800438c <menu+0x2ddc>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d902      	bls.n	8004294 <menu+0x2ce4>
				buzzer = 0;
 800428e:	4b3f      	ldr	r3, [pc, #252]	; (800438c <menu+0x2ddc>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004294:	f000 fca6 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004298:	2104      	movs	r1, #4
 800429a:	4836      	ldr	r0, [pc, #216]	; (8004374 <menu+0x2dc4>)
 800429c:	f006 f828 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d115      	bne.n	80042d2 <menu+0x2d22>
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <menu+0x2dc8>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	f083 0301 	eor.w	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00e      	beq.n	80042d2 <menu+0x2d22>
			buzzer = buzzer - 1;
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <menu+0x2ddc>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	4b33      	ldr	r3, [pc, #204]	; (800438c <menu+0x2ddc>)
 80042be:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <menu+0x2ddc>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <menu+0x2d1e>
		   		buzzer = 1;
 80042c8:	4b30      	ldr	r3, [pc, #192]	; (800438c <menu+0x2ddc>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042ce:	f000 fc89 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042d2:	2108      	movs	r1, #8
 80042d4:	4827      	ldr	r0, [pc, #156]	; (8004374 <menu+0x2dc4>)
 80042d6:	f006 f80b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10d      	bne.n	80042fc <menu+0x2d4c>
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <menu+0x2dc8>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	f083 0301 	eor.w	r3, r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <menu+0x2d4c>
			eepromData[25] = buzzer;
 80042ee:	4b27      	ldr	r3, [pc, #156]	; (800438c <menu+0x2ddc>)
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <menu+0x2dcc>)
 80042f4:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <menu+0x2dd0>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <menu+0x2dd4>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b1c      	cmp	r3, #28
 8004302:	f040 80ab 	bne.w	800445c <menu+0x2eac>
		calismaSayModu = 0;
 8004306:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <menu+0x2df0>)
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 800430c:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <menu+0x2df4>)
 800430e:	2101      	movs	r1, #1
 8004310:	2001      	movs	r0, #1
 8004312:	f004 fcc7 	bl	8008ca4 <lcd_print>

		if(demoMode == 0) {
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <menu+0x2df8>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d113      	bne.n	8004346 <menu+0x2d96>
			if(dilSecim == 0) {
 800431e:	4b11      	ldr	r3, [pc, #68]	; (8004364 <menu+0x2db4>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <menu+0x2d82>
				lcd_print(2, 1, "Pasif           ");
 8004326:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <menu+0x2de0>)
 8004328:	2101      	movs	r1, #1
 800432a:	2002      	movs	r0, #2
 800432c:	f004 fcba 	bl	8008ca4 <lcd_print>
 8004330:	e045      	b.n	80043be <menu+0x2e0e>
			} else if(dilSecim == 1) {
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <menu+0x2db4>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d141      	bne.n	80043be <menu+0x2e0e>
				lcd_print(2, 1, "Passive         ");
 800433a:	4a16      	ldr	r2, [pc, #88]	; (8004394 <menu+0x2de4>)
 800433c:	2101      	movs	r1, #1
 800433e:	2002      	movs	r0, #2
 8004340:	f004 fcb0 	bl	8008ca4 <lcd_print>
 8004344:	e03b      	b.n	80043be <menu+0x2e0e>
			}
		} else if(demoMode == 1) {
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <menu+0x2df8>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d137      	bne.n	80043be <menu+0x2e0e>
			if(dilSecim == 0){
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <menu+0x2db4>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d12a      	bne.n	80043ac <menu+0x2dfc>
				lcd_print(2, 1, "Aktif           ");
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <menu+0x2de8>)
 8004358:	2101      	movs	r1, #1
 800435a:	2002      	movs	r0, #2
 800435c:	f004 fca2 	bl	8008ca4 <lcd_print>
 8004360:	e02d      	b.n	80043be <menu+0x2e0e>
 8004362:	bf00      	nop
 8004364:	20000b0d 	.word	0x20000b0d
 8004368:	0800e948 	.word	0x0800e948
 800436c:	20000b04 	.word	0x20000b04
 8004370:	20000a88 	.word	0x20000a88
 8004374:	40010800 	.word	0x40010800
 8004378:	20000b1b 	.word	0x20000b1b
 800437c:	20000a18 	.word	0x20000a18
 8004380:	20000b18 	.word	0x20000b18
 8004384:	20000aec 	.word	0x20000aec
 8004388:	0800ea48 	.word	0x0800ea48
 800438c:	20000b08 	.word	0x20000b08
 8004390:	0800e370 	.word	0x0800e370
 8004394:	0800e384 	.word	0x0800e384
 8004398:	0800e3d0 	.word	0x0800e3d0
 800439c:	0800e3e4 	.word	0x0800e3e4
 80043a0:	20000b0c 	.word	0x20000b0c
 80043a4:	0800ea5c 	.word	0x0800ea5c
 80043a8:	20000b0a 	.word	0x20000b0a
			} else if(dilSecim == 1) {
 80043ac:	4b71      	ldr	r3, [pc, #452]	; (8004574 <menu+0x2fc4>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d104      	bne.n	80043be <menu+0x2e0e>
				lcd_print(2, 1, "Active          ");
 80043b4:	4a70      	ldr	r2, [pc, #448]	; (8004578 <menu+0x2fc8>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	2002      	movs	r0, #2
 80043ba:	f004 fc73 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043be:	2102      	movs	r1, #2
 80043c0:	486e      	ldr	r0, [pc, #440]	; (800457c <menu+0x2fcc>)
 80043c2:	f005 ff95 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d115      	bne.n	80043f8 <menu+0x2e48>
 80043cc:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <menu+0x2fd0>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f083 0301 	eor.w	r3, r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00e      	beq.n	80043f8 <menu+0x2e48>
			demoMode = demoMode + 1;
 80043da:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <menu+0x2fd4>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	4b68      	ldr	r3, [pc, #416]	; (8004584 <menu+0x2fd4>)
 80043e4:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80043e6:	4b67      	ldr	r3, [pc, #412]	; (8004584 <menu+0x2fd4>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d902      	bls.n	80043f4 <menu+0x2e44>
				demoMode = 0;
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <menu+0x2fd4>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043f4:	f000 fbf6 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043f8:	2104      	movs	r1, #4
 80043fa:	4860      	ldr	r0, [pc, #384]	; (800457c <menu+0x2fcc>)
 80043fc:	f005 ff78 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004400:	4603      	mov	r3, r0
 8004402:	2b01      	cmp	r3, #1
 8004404:	d115      	bne.n	8004432 <menu+0x2e82>
 8004406:	4b5e      	ldr	r3, [pc, #376]	; (8004580 <menu+0x2fd0>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	f083 0301 	eor.w	r3, r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00e      	beq.n	8004432 <menu+0x2e82>
			demoMode = demoMode - 1;
 8004414:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <menu+0x2fd4>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	3b01      	subs	r3, #1
 800441a:	b2da      	uxtb	r2, r3
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <menu+0x2fd4>)
 800441e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004420:	4b58      	ldr	r3, [pc, #352]	; (8004584 <menu+0x2fd4>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <menu+0x2e7e>
		   		demoMode = 1;
 8004428:	4b56      	ldr	r3, [pc, #344]	; (8004584 <menu+0x2fd4>)
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800442e:	f000 fbd9 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004432:	2108      	movs	r1, #8
 8004434:	4851      	ldr	r0, [pc, #324]	; (800457c <menu+0x2fcc>)
 8004436:	f005 ff5b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800443a:	4603      	mov	r3, r0
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10d      	bne.n	800445c <menu+0x2eac>
 8004440:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <menu+0x2fd0>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	f083 0301 	eor.w	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d006      	beq.n	800445c <menu+0x2eac>
			eepromData[26] = demoMode;
 800444e:	4b4d      	ldr	r3, [pc, #308]	; (8004584 <menu+0x2fd4>)
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	4b4d      	ldr	r3, [pc, #308]	; (8004588 <menu+0x2fd8>)
 8004454:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004456:	4b4d      	ldr	r3, [pc, #308]	; (800458c <menu+0x2fdc>)
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800445c:	4b4c      	ldr	r3, [pc, #304]	; (8004590 <menu+0x2fe0>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b1d      	cmp	r3, #29
 8004462:	f040 8132 	bne.w	80046ca <menu+0x311a>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004466:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <menu+0x2fe4>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d113      	bne.n	8004496 <menu+0x2ee6>
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <menu+0x2fe8>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10f      	bne.n	8004496 <menu+0x2ee6>
 8004476:	4b49      	ldr	r3, [pc, #292]	; (800459c <menu+0x2fec>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <menu+0x2ee6>
 800447e:	4b48      	ldr	r3, [pc, #288]	; (80045a0 <menu+0x2ff0>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <menu+0x2ee6>
 8004486:	4b47      	ldr	r3, [pc, #284]	; (80045a4 <menu+0x2ff4>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <menu+0x2ee6>
			calismaSayisiYar = 0;
 800448e:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <menu+0x2ff8>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e002      	b.n	800449c <menu+0x2eec>
		} else {
			calismaSayisiYar = 1;
 8004496:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <menu+0x2ff8>)
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800449c:	4b43      	ldr	r3, [pc, #268]	; (80045ac <menu+0x2ffc>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d154      	bne.n	800454e <menu+0x2f9e>
			if(dilSecim == 0) {
 80044a4:	4b33      	ldr	r3, [pc, #204]	; (8004574 <menu+0x2fc4>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d105      	bne.n	80044b8 <menu+0x2f08>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80044ac:	4a40      	ldr	r2, [pc, #256]	; (80045b0 <menu+0x3000>)
 80044ae:	2101      	movs	r1, #1
 80044b0:	2001      	movs	r0, #1
 80044b2:	f004 fbf7 	bl	8008ca4 <lcd_print>
 80044b6:	e008      	b.n	80044ca <menu+0x2f1a>
			} else if(dilSecim == 1) {
 80044b8:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <menu+0x2fc4>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d104      	bne.n	80044ca <menu+0x2f1a>
				lcd_print(1, 1, "Working Cycle   ");
 80044c0:	4a3c      	ldr	r2, [pc, #240]	; (80045b4 <menu+0x3004>)
 80044c2:	2101      	movs	r1, #1
 80044c4:	2001      	movs	r0, #1
 80044c6:	f004 fbed 	bl	8008ca4 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80044ca:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <menu+0x2ff4>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	220a      	movs	r2, #10
 80044d0:	4939      	ldr	r1, [pc, #228]	; (80045b8 <menu+0x3008>)
 80044d2:	4618      	mov	r0, r3
 80044d4:	f008 ff94 	bl	800d400 <itoa>
			lcd_print(2, 12, snum);
 80044d8:	4a37      	ldr	r2, [pc, #220]	; (80045b8 <menu+0x3008>)
 80044da:	210c      	movs	r1, #12
 80044dc:	2002      	movs	r0, #2
 80044de:	f004 fbe1 	bl	8008ca4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80044e2:	4b2f      	ldr	r3, [pc, #188]	; (80045a0 <menu+0x2ff0>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	220a      	movs	r2, #10
 80044e8:	4933      	ldr	r1, [pc, #204]	; (80045b8 <menu+0x3008>)
 80044ea:	4618      	mov	r0, r3
 80044ec:	f008 ff88 	bl	800d400 <itoa>
			lcd_print(2, 13, snum);
 80044f0:	4a31      	ldr	r2, [pc, #196]	; (80045b8 <menu+0x3008>)
 80044f2:	210d      	movs	r1, #13
 80044f4:	2002      	movs	r0, #2
 80044f6:	f004 fbd5 	bl	8008ca4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80044fa:	4b28      	ldr	r3, [pc, #160]	; (800459c <menu+0x2fec>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	220a      	movs	r2, #10
 8004500:	492d      	ldr	r1, [pc, #180]	; (80045b8 <menu+0x3008>)
 8004502:	4618      	mov	r0, r3
 8004504:	f008 ff7c 	bl	800d400 <itoa>
			lcd_print(2, 14, snum);
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <menu+0x3008>)
 800450a:	210e      	movs	r1, #14
 800450c:	2002      	movs	r0, #2
 800450e:	f004 fbc9 	bl	8008ca4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004512:	4b21      	ldr	r3, [pc, #132]	; (8004598 <menu+0x2fe8>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	220a      	movs	r2, #10
 8004518:	4927      	ldr	r1, [pc, #156]	; (80045b8 <menu+0x3008>)
 800451a:	4618      	mov	r0, r3
 800451c:	f008 ff70 	bl	800d400 <itoa>
			lcd_print(2, 15, snum);
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <menu+0x3008>)
 8004522:	210f      	movs	r1, #15
 8004524:	2002      	movs	r0, #2
 8004526:	f004 fbbd 	bl	8008ca4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800452a:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <menu+0x2fe4>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	220a      	movs	r2, #10
 8004530:	4921      	ldr	r1, [pc, #132]	; (80045b8 <menu+0x3008>)
 8004532:	4618      	mov	r0, r3
 8004534:	f008 ff64 	bl	800d400 <itoa>
			lcd_print(2, 16, snum);
 8004538:	4a1f      	ldr	r2, [pc, #124]	; (80045b8 <menu+0x3008>)
 800453a:	2110      	movs	r1, #16
 800453c:	2002      	movs	r0, #2
 800453e:	f004 fbb1 	bl	8008ca4 <lcd_print>

			lcd_print(2, 1, "           ");
 8004542:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <menu+0x300c>)
 8004544:	2101      	movs	r1, #1
 8004546:	2002      	movs	r0, #2
 8004548:	f004 fbac 	bl	8008ca4 <lcd_print>
 800454c:	e048      	b.n	80045e0 <menu+0x3030>
		} else if(calismaSayModu == 1) {
 800454e:	4b17      	ldr	r3, [pc, #92]	; (80045ac <menu+0x2ffc>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d144      	bne.n	80045e0 <menu+0x3030>
			if(dilSecim == 0) {
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <menu+0x2fc4>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d132      	bne.n	80045c4 <menu+0x3014>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800455e:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <menu+0x3000>)
 8004560:	2101      	movs	r1, #1
 8004562:	2001      	movs	r0, #1
 8004564:	f004 fb9e 	bl	8008ca4 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004568:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <menu+0x3010>)
 800456a:	2101      	movs	r1, #1
 800456c:	2002      	movs	r0, #2
 800456e:	f004 fb99 	bl	8008ca4 <lcd_print>
 8004572:	e035      	b.n	80045e0 <menu+0x3030>
 8004574:	20000b0d 	.word	0x20000b0d
 8004578:	0800e3e4 	.word	0x0800e3e4
 800457c:	40010800 	.word	0x40010800
 8004580:	20000b1b 	.word	0x20000b1b
 8004584:	20000b0a 	.word	0x20000b0a
 8004588:	20000a18 	.word	0x20000a18
 800458c:	20000b18 	.word	0x20000b18
 8004590:	20000aec 	.word	0x20000aec
 8004594:	20000ae9 	.word	0x20000ae9
 8004598:	20000aea 	.word	0x20000aea
 800459c:	20000000 	.word	0x20000000
 80045a0:	20000001 	.word	0x20000001
 80045a4:	20000aeb 	.word	0x20000aeb
 80045a8:	20000b2d 	.word	0x20000b2d
 80045ac:	20000b0c 	.word	0x20000b0c
 80045b0:	0800ea6c 	.word	0x0800ea6c
 80045b4:	0800ea80 	.word	0x0800ea80
 80045b8:	20000a88 	.word	0x20000a88
 80045bc:	0800ea94 	.word	0x0800ea94
 80045c0:	0800eaa0 	.word	0x0800eaa0
			} else if(dilSecim == 1) {
 80045c4:	4b94      	ldr	r3, [pc, #592]	; (8004818 <menu+0x3268>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d109      	bne.n	80045e0 <menu+0x3030>
				lcd_print(1, 1, "Working Cycle   ");
 80045cc:	4a93      	ldr	r2, [pc, #588]	; (800481c <menu+0x326c>)
 80045ce:	2101      	movs	r1, #1
 80045d0:	2001      	movs	r0, #1
 80045d2:	f004 fb67 	bl	8008ca4 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80045d6:	4a92      	ldr	r2, [pc, #584]	; (8004820 <menu+0x3270>)
 80045d8:	2101      	movs	r1, #1
 80045da:	2002      	movs	r0, #2
 80045dc:	f004 fb62 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80045e0:	2102      	movs	r1, #2
 80045e2:	4890      	ldr	r0, [pc, #576]	; (8004824 <menu+0x3274>)
 80045e4:	f005 fe84 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d119      	bne.n	8004622 <menu+0x3072>
 80045ee:	4b8e      	ldr	r3, [pc, #568]	; (8004828 <menu+0x3278>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	f083 0301 	eor.w	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d012      	beq.n	8004622 <menu+0x3072>
 80045fc:	4b8b      	ldr	r3, [pc, #556]	; (800482c <menu+0x327c>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <menu+0x3072>
			calismaSayModu = calismaSayModu + 1;
 8004604:	4b8a      	ldr	r3, [pc, #552]	; (8004830 <menu+0x3280>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b88      	ldr	r3, [pc, #544]	; (8004830 <menu+0x3280>)
 800460e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004610:	4b87      	ldr	r3, [pc, #540]	; (8004830 <menu+0x3280>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d902      	bls.n	800461e <menu+0x306e>
				calismaSayModu = 0;
 8004618:	4b85      	ldr	r3, [pc, #532]	; (8004830 <menu+0x3280>)
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800461e:	f000 fae1 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004622:	2104      	movs	r1, #4
 8004624:	487f      	ldr	r0, [pc, #508]	; (8004824 <menu+0x3274>)
 8004626:	f005 fe63 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800462a:	4603      	mov	r3, r0
 800462c:	2b01      	cmp	r3, #1
 800462e:	d119      	bne.n	8004664 <menu+0x30b4>
 8004630:	4b7d      	ldr	r3, [pc, #500]	; (8004828 <menu+0x3278>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	f083 0301 	eor.w	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d012      	beq.n	8004664 <menu+0x30b4>
 800463e:	4b7b      	ldr	r3, [pc, #492]	; (800482c <menu+0x327c>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00e      	beq.n	8004664 <menu+0x30b4>
			calismaSayModu = calismaSayModu - 1;
 8004646:	4b7a      	ldr	r3, [pc, #488]	; (8004830 <menu+0x3280>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	3b01      	subs	r3, #1
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4b78      	ldr	r3, [pc, #480]	; (8004830 <menu+0x3280>)
 8004650:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004652:	4b77      	ldr	r3, [pc, #476]	; (8004830 <menu+0x3280>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <menu+0x30b0>
		   		calismaSayModu = 1;
 800465a:	4b75      	ldr	r3, [pc, #468]	; (8004830 <menu+0x3280>)
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004660:	f000 fac0 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004664:	2108      	movs	r1, #8
 8004666:	486f      	ldr	r0, [pc, #444]	; (8004824 <menu+0x3274>)
 8004668:	f005 fe42 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d12b      	bne.n	80046ca <menu+0x311a>
 8004672:	4b6d      	ldr	r3, [pc, #436]	; (8004828 <menu+0x3278>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f083 0301 	eor.w	r3, r3, #1
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d024      	beq.n	80046ca <menu+0x311a>
			eepromData[32] = 0;
 8004680:	4b6c      	ldr	r3, [pc, #432]	; (8004834 <menu+0x3284>)
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004688:	4b6a      	ldr	r3, [pc, #424]	; (8004834 <menu+0x3284>)
 800468a:	2200      	movs	r2, #0
 800468c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800468e:	4b69      	ldr	r3, [pc, #420]	; (8004834 <menu+0x3284>)
 8004690:	2200      	movs	r2, #0
 8004692:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004694:	4b67      	ldr	r3, [pc, #412]	; (8004834 <menu+0x3284>)
 8004696:	2200      	movs	r2, #0
 8004698:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800469a:	4b66      	ldr	r3, [pc, #408]	; (8004834 <menu+0x3284>)
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80046a0:	4b65      	ldr	r3, [pc, #404]	; (8004838 <menu+0x3288>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80046a6:	4b65      	ldr	r3, [pc, #404]	; (800483c <menu+0x328c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80046ac:	4b64      	ldr	r3, [pc, #400]	; (8004840 <menu+0x3290>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80046b2:	4b64      	ldr	r3, [pc, #400]	; (8004844 <menu+0x3294>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80046b8:	4b63      	ldr	r3, [pc, #396]	; (8004848 <menu+0x3298>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80046be:	4b5c      	ldr	r3, [pc, #368]	; (8004830 <menu+0x3280>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80046c4:	4b61      	ldr	r3, [pc, #388]	; (800484c <menu+0x329c>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80046ca:	4b61      	ldr	r3, [pc, #388]	; (8004850 <menu+0x32a0>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b1e      	cmp	r3, #30
 80046d0:	d16f      	bne.n	80047b2 <menu+0x3202>
		calismaSayModu = 0;
 80046d2:	4b57      	ldr	r3, [pc, #348]	; (8004830 <menu+0x3280>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80046d8:	4b4f      	ldr	r3, [pc, #316]	; (8004818 <menu+0x3268>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <menu+0x3146>
			lcd_print(1, 1, "DIL SECIMI      ");
 80046e0:	4a5c      	ldr	r2, [pc, #368]	; (8004854 <menu+0x32a4>)
 80046e2:	2101      	movs	r1, #1
 80046e4:	2001      	movs	r0, #1
 80046e6:	f004 fadd 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80046ea:	4a5b      	ldr	r2, [pc, #364]	; (8004858 <menu+0x32a8>)
 80046ec:	2101      	movs	r1, #1
 80046ee:	2002      	movs	r0, #2
 80046f0:	f004 fad8 	bl	8008ca4 <lcd_print>
 80046f4:	e00d      	b.n	8004712 <menu+0x3162>
		} else if(dilSecim == 1) {
 80046f6:	4b48      	ldr	r3, [pc, #288]	; (8004818 <menu+0x3268>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d109      	bne.n	8004712 <menu+0x3162>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80046fe:	4a57      	ldr	r2, [pc, #348]	; (800485c <menu+0x32ac>)
 8004700:	2101      	movs	r1, #1
 8004702:	2001      	movs	r0, #1
 8004704:	f004 face 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004708:	4a55      	ldr	r2, [pc, #340]	; (8004860 <menu+0x32b0>)
 800470a:	2101      	movs	r1, #1
 800470c:	2002      	movs	r0, #2
 800470e:	f004 fac9 	bl	8008ca4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004712:	2102      	movs	r1, #2
 8004714:	4843      	ldr	r0, [pc, #268]	; (8004824 <menu+0x3274>)
 8004716:	f005 fdeb 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800471a:	4603      	mov	r3, r0
 800471c:	2b01      	cmp	r3, #1
 800471e:	d115      	bne.n	800474c <menu+0x319c>
 8004720:	4b41      	ldr	r3, [pc, #260]	; (8004828 <menu+0x3278>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	f083 0301 	eor.w	r3, r3, #1
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00e      	beq.n	800474c <menu+0x319c>
			dilSecim = dilSecim + 1;
 800472e:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <menu+0x3268>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4b38      	ldr	r3, [pc, #224]	; (8004818 <menu+0x3268>)
 8004738:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800473a:	4b37      	ldr	r3, [pc, #220]	; (8004818 <menu+0x3268>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d902      	bls.n	8004748 <menu+0x3198>
				dilSecim = 0;
 8004742:	4b35      	ldr	r3, [pc, #212]	; (8004818 <menu+0x3268>)
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004748:	f000 fa4c 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800474c:	2104      	movs	r1, #4
 800474e:	4835      	ldr	r0, [pc, #212]	; (8004824 <menu+0x3274>)
 8004750:	f005 fdce 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004754:	4603      	mov	r3, r0
 8004756:	2b01      	cmp	r3, #1
 8004758:	d115      	bne.n	8004786 <menu+0x31d6>
 800475a:	4b33      	ldr	r3, [pc, #204]	; (8004828 <menu+0x3278>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00e      	beq.n	8004786 <menu+0x31d6>
			dilSecim = dilSecim - 1;
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <menu+0x3268>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	3b01      	subs	r3, #1
 800476e:	b2da      	uxtb	r2, r3
 8004770:	4b29      	ldr	r3, [pc, #164]	; (8004818 <menu+0x3268>)
 8004772:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <menu+0x3268>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <menu+0x31d2>
		   		dilSecim = 1;
 800477c:	4b26      	ldr	r3, [pc, #152]	; (8004818 <menu+0x3268>)
 800477e:	2201      	movs	r2, #1
 8004780:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004782:	f000 fa2f 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004786:	2108      	movs	r1, #8
 8004788:	4826      	ldr	r0, [pc, #152]	; (8004824 <menu+0x3274>)
 800478a:	f005 fdb1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800478e:	4603      	mov	r3, r0
 8004790:	2b01      	cmp	r3, #1
 8004792:	d10e      	bne.n	80047b2 <menu+0x3202>
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <menu+0x3278>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <menu+0x3202>
			eepromData[33] = dilSecim;
 80047a2:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <menu+0x3268>)
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	4b23      	ldr	r3, [pc, #140]	; (8004834 <menu+0x3284>)
 80047a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80047ac:	4b27      	ldr	r3, [pc, #156]	; (800484c <menu+0x329c>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80047b2:	4b27      	ldr	r3, [pc, #156]	; (8004850 <menu+0x32a0>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b1f      	cmp	r3, #31
 80047b8:	f040 80b7 	bne.w	800492a <menu+0x337a>
		calismaSayModu = 0;
 80047bc:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <menu+0x3280>)
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80047c2:	4a28      	ldr	r2, [pc, #160]	; (8004864 <menu+0x32b4>)
 80047c4:	2101      	movs	r1, #1
 80047c6:	2001      	movs	r0, #1
 80047c8:	f004 fa6c 	bl	8008ca4 <lcd_print>

		if(iotMode == 0) {
 80047cc:	4b26      	ldr	r3, [pc, #152]	; (8004868 <menu+0x32b8>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d113      	bne.n	80047fc <menu+0x324c>
			if(dilSecim == 0) {
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <menu+0x3268>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <menu+0x3238>
				lcd_print(2, 1, "Pasif           ");
 80047dc:	4a23      	ldr	r2, [pc, #140]	; (800486c <menu+0x32bc>)
 80047de:	2101      	movs	r1, #1
 80047e0:	2002      	movs	r0, #2
 80047e2:	f004 fa5f 	bl	8008ca4 <lcd_print>
 80047e6:	e050      	b.n	800488a <menu+0x32da>
			} else if(dilSecim == 1) {
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <menu+0x3268>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d14c      	bne.n	800488a <menu+0x32da>
				lcd_print(2, 1, "Passive         ");
 80047f0:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <menu+0x32c0>)
 80047f2:	2101      	movs	r1, #1
 80047f4:	2002      	movs	r0, #2
 80047f6:	f004 fa55 	bl	8008ca4 <lcd_print>
 80047fa:	e046      	b.n	800488a <menu+0x32da>
			}
		} else if(iotMode == 1) {
 80047fc:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <menu+0x32b8>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d142      	bne.n	800488a <menu+0x32da>
			if(dilSecim == 0) {
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <menu+0x3268>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d135      	bne.n	8004878 <menu+0x32c8>
				lcd_print(2, 1, "Aktif           ");
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <menu+0x32c4>)
 800480e:	2101      	movs	r1, #1
 8004810:	2002      	movs	r0, #2
 8004812:	f004 fa47 	bl	8008ca4 <lcd_print>
 8004816:	e038      	b.n	800488a <menu+0x32da>
 8004818:	20000b0d 	.word	0x20000b0d
 800481c:	0800ea80 	.word	0x0800ea80
 8004820:	0800eab4 	.word	0x0800eab4
 8004824:	40010800 	.word	0x40010800
 8004828:	20000b1b 	.word	0x20000b1b
 800482c:	20000b2d 	.word	0x20000b2d
 8004830:	20000b0c 	.word	0x20000b0c
 8004834:	20000a18 	.word	0x20000a18
 8004838:	20000aeb 	.word	0x20000aeb
 800483c:	20000001 	.word	0x20000001
 8004840:	20000000 	.word	0x20000000
 8004844:	20000aea 	.word	0x20000aea
 8004848:	20000ae9 	.word	0x20000ae9
 800484c:	20000b18 	.word	0x20000b18
 8004850:	20000aec 	.word	0x20000aec
 8004854:	0800eac8 	.word	0x0800eac8
 8004858:	0800eadc 	.word	0x0800eadc
 800485c:	0800eaf0 	.word	0x0800eaf0
 8004860:	0800eb04 	.word	0x0800eb04
 8004864:	0800eb18 	.word	0x0800eb18
 8004868:	20000b0b 	.word	0x20000b0b
 800486c:	0800e370 	.word	0x0800e370
 8004870:	0800e384 	.word	0x0800e384
 8004874:	0800e3d0 	.word	0x0800e3d0
			} else if(dilSecim == 1) {
 8004878:	4ba1      	ldr	r3, [pc, #644]	; (8004b00 <menu+0x3550>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d104      	bne.n	800488a <menu+0x32da>
				lcd_print(2, 1, "Active          ");
 8004880:	4aa0      	ldr	r2, [pc, #640]	; (8004b04 <menu+0x3554>)
 8004882:	2101      	movs	r1, #1
 8004884:	2002      	movs	r0, #2
 8004886:	f004 fa0d 	bl	8008ca4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800488a:	2102      	movs	r1, #2
 800488c:	489e      	ldr	r0, [pc, #632]	; (8004b08 <menu+0x3558>)
 800488e:	f005 fd2f 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004892:	4603      	mov	r3, r0
 8004894:	2b01      	cmp	r3, #1
 8004896:	d115      	bne.n	80048c4 <menu+0x3314>
 8004898:	4b9c      	ldr	r3, [pc, #624]	; (8004b0c <menu+0x355c>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	f083 0301 	eor.w	r3, r3, #1
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00e      	beq.n	80048c4 <menu+0x3314>
			iotMode = iotMode + 1;
 80048a6:	4b9a      	ldr	r3, [pc, #616]	; (8004b10 <menu+0x3560>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	4b98      	ldr	r3, [pc, #608]	; (8004b10 <menu+0x3560>)
 80048b0:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80048b2:	4b97      	ldr	r3, [pc, #604]	; (8004b10 <menu+0x3560>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d902      	bls.n	80048c0 <menu+0x3310>
				iotMode = 0;
 80048ba:	4b95      	ldr	r3, [pc, #596]	; (8004b10 <menu+0x3560>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80048c0:	f000 f990 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048c4:	2104      	movs	r1, #4
 80048c6:	4890      	ldr	r0, [pc, #576]	; (8004b08 <menu+0x3558>)
 80048c8:	f005 fd12 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d115      	bne.n	80048fe <menu+0x334e>
 80048d2:	4b8e      	ldr	r3, [pc, #568]	; (8004b0c <menu+0x355c>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	f083 0301 	eor.w	r3, r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00e      	beq.n	80048fe <menu+0x334e>
			iotMode = iotMode - 1;
 80048e0:	4b8b      	ldr	r3, [pc, #556]	; (8004b10 <menu+0x3560>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	4b89      	ldr	r3, [pc, #548]	; (8004b10 <menu+0x3560>)
 80048ea:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80048ec:	4b88      	ldr	r3, [pc, #544]	; (8004b10 <menu+0x3560>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <menu+0x334a>
		   		iotMode = 1;
 80048f4:	4b86      	ldr	r3, [pc, #536]	; (8004b10 <menu+0x3560>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80048fa:	f000 f973 	bl	8004be4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80048fe:	2108      	movs	r1, #8
 8004900:	4881      	ldr	r0, [pc, #516]	; (8004b08 <menu+0x3558>)
 8004902:	f005 fcf5 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004906:	4603      	mov	r3, r0
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10e      	bne.n	800492a <menu+0x337a>
 800490c:	4b7f      	ldr	r3, [pc, #508]	; (8004b0c <menu+0x355c>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	f083 0301 	eor.w	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <menu+0x337a>
			eepromData[48] = iotMode;
 800491a:	4b7d      	ldr	r3, [pc, #500]	; (8004b10 <menu+0x3560>)
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	4b7d      	ldr	r3, [pc, #500]	; (8004b14 <menu+0x3564>)
 8004920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004924:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <menu+0x3568>)
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800492a:	4b7c      	ldr	r3, [pc, #496]	; (8004b1c <menu+0x356c>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b20      	cmp	r3, #32
 8004930:	d12b      	bne.n	800498a <menu+0x33da>
		calismaSayModu = 0;
 8004932:	4b7b      	ldr	r3, [pc, #492]	; (8004b20 <menu+0x3570>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004938:	2001      	movs	r0, #1
 800493a:	f7fb ff01 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 800493e:	2032      	movs	r0, #50	; 0x32
 8004940:	f004 ff06 	bl	8009750 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8004944:	2001      	movs	r0, #1
 8004946:	f7fc fd91 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800494a:	2102      	movs	r1, #2
 800494c:	486e      	ldr	r0, [pc, #440]	; (8004b08 <menu+0x3558>)
 800494e:	f005 fccf 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004952:	4603      	mov	r3, r0
 8004954:	2b01      	cmp	r3, #1
 8004956:	d118      	bne.n	800498a <menu+0x33da>
 8004958:	2104      	movs	r1, #4
 800495a:	486b      	ldr	r0, [pc, #428]	; (8004b08 <menu+0x3558>)
 800495c:	f005 fcc8 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004960:	4603      	mov	r3, r0
 8004962:	2b01      	cmp	r3, #1
 8004964:	d111      	bne.n	800498a <menu+0x33da>
 8004966:	4b69      	ldr	r3, [pc, #420]	; (8004b0c <menu+0x355c>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	f083 0301 	eor.w	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <menu+0x33da>
			takeMachineID();
 8004974:	f003 f924 	bl	8007bc0 <takeMachineID>

			convertArrays(1);
 8004978:	2001      	movs	r0, #1
 800497a:	f7fb fee1 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 800497e:	2032      	movs	r0, #50	; 0x32
 8004980:	f004 fee6 	bl	8009750 <HAL_Delay>

			printCredentials(1); //ekrana machine id yazdır
 8004984:	2001      	movs	r0, #1
 8004986:	f7fc fd71 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 33) {
 800498a:	4b64      	ldr	r3, [pc, #400]	; (8004b1c <menu+0x356c>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b21      	cmp	r3, #33	; 0x21
 8004990:	d12e      	bne.n	80049f0 <menu+0x3440>
		calismaSayModu = 0;
 8004992:	4b63      	ldr	r3, [pc, #396]	; (8004b20 <menu+0x3570>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004998:	2001      	movs	r0, #1
 800499a:	f004 f9cf 	bl	8008d3c <lcd_backlight>

		convertArrays(2);
 800499e:	2002      	movs	r0, #2
 80049a0:	f7fb fece 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 80049a4:	2032      	movs	r0, #50	; 0x32
 80049a6:	f004 fed3 	bl	8009750 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 80049aa:	2002      	movs	r0, #2
 80049ac:	f7fc fd5e 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049b0:	2102      	movs	r1, #2
 80049b2:	4855      	ldr	r0, [pc, #340]	; (8004b08 <menu+0x3558>)
 80049b4:	f005 fc9c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d118      	bne.n	80049f0 <menu+0x3440>
 80049be:	2104      	movs	r1, #4
 80049c0:	4851      	ldr	r0, [pc, #324]	; (8004b08 <menu+0x3558>)
 80049c2:	f005 fc95 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d111      	bne.n	80049f0 <menu+0x3440>
 80049cc:	4b4f      	ldr	r3, [pc, #316]	; (8004b0c <menu+0x355c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	f083 0301 	eor.w	r3, r3, #1
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <menu+0x3440>
			takeWifiSSID();
 80049da:	f003 fa89 	bl	8007ef0 <takeWifiSSID>

			convertArrays(2);
 80049de:	2002      	movs	r0, #2
 80049e0:	f7fb feae 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 80049e4:	2032      	movs	r0, #50	; 0x32
 80049e6:	f004 feb3 	bl	8009750 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 80049ea:	2002      	movs	r0, #2
 80049ec:	f7fc fd3e 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 80049f0:	4b4a      	ldr	r3, [pc, #296]	; (8004b1c <menu+0x356c>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b22      	cmp	r3, #34	; 0x22
 80049f6:	d12e      	bne.n	8004a56 <menu+0x34a6>
		calismaSayModu = 0;
 80049f8:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <menu+0x3570>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 80049fe:	2001      	movs	r0, #1
 8004a00:	f004 f99c 	bl	8008d3c <lcd_backlight>

		convertArrays(3);
 8004a04:	2003      	movs	r0, #3
 8004a06:	f7fb fe9b 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8004a0a:	2032      	movs	r0, #50	; 0x32
 8004a0c:	f004 fea0 	bl	8009750 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8004a10:	2003      	movs	r0, #3
 8004a12:	f7fc fd2b 	bl	800146c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a16:	2102      	movs	r1, #2
 8004a18:	483b      	ldr	r0, [pc, #236]	; (8004b08 <menu+0x3558>)
 8004a1a:	f005 fc69 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d118      	bne.n	8004a56 <menu+0x34a6>
 8004a24:	2104      	movs	r1, #4
 8004a26:	4838      	ldr	r0, [pc, #224]	; (8004b08 <menu+0x3558>)
 8004a28:	f005 fc62 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d111      	bne.n	8004a56 <menu+0x34a6>
 8004a32:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <menu+0x355c>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f083 0301 	eor.w	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <menu+0x34a6>
			takeWifiPass();
 8004a40:	f003 fbe4 	bl	800820c <takeWifiPass>

			convertArrays(3);
 8004a44:	2003      	movs	r0, #3
 8004a46:	f7fb fe7b 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8004a4a:	2032      	movs	r0, #50	; 0x32
 8004a4c:	f004 fe80 	bl	8009750 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8004a50:	2003      	movs	r0, #3
 8004a52:	f7fc fd0b 	bl	800146c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <menu+0x356c>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b23      	cmp	r3, #35	; 0x23
 8004a5c:	d14d      	bne.n	8004afa <menu+0x354a>
		if(dilSecim == 0) {
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <menu+0x3550>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <menu+0x34cc>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004a66:	4a2f      	ldr	r2, [pc, #188]	; (8004b24 <menu+0x3574>)
 8004a68:	2101      	movs	r1, #1
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f004 f91a 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004a70:	4a2d      	ldr	r2, [pc, #180]	; (8004b28 <menu+0x3578>)
 8004a72:	2101      	movs	r1, #1
 8004a74:	2002      	movs	r0, #2
 8004a76:	f004 f915 	bl	8008ca4 <lcd_print>
 8004a7a:	e00d      	b.n	8004a98 <menu+0x34e8>
		} else if(dilSecim == 1) {
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <menu+0x3550>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d109      	bne.n	8004a98 <menu+0x34e8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004a84:	4a29      	ldr	r2, [pc, #164]	; (8004b2c <menu+0x357c>)
 8004a86:	2101      	movs	r1, #1
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f004 f90b 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004a8e:	4a28      	ldr	r2, [pc, #160]	; (8004b30 <menu+0x3580>)
 8004a90:	2101      	movs	r1, #1
 8004a92:	2002      	movs	r0, #2
 8004a94:	f004 f906 	bl	8008ca4 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004a98:	2108      	movs	r1, #8
 8004a9a:	481b      	ldr	r0, [pc, #108]	; (8004b08 <menu+0x3558>)
 8004a9c:	f005 fc28 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d129      	bne.n	8004afa <menu+0x354a>
			menuGiris = 0;
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <menu+0x3584>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004aac:	bf00      	nop
 8004aae:	4822      	ldr	r0, [pc, #136]	; (8004b38 <menu+0x3588>)
 8004ab0:	f006 fa47 	bl	800af42 <HAL_I2C_GetError>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d0f9      	beq.n	8004aae <menu+0x34fe>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004aba:	bf00      	nop
 8004abc:	481e      	ldr	r0, [pc, #120]	; (8004b38 <menu+0x3588>)
 8004abe:	f006 fa33 	bl	800af28 <HAL_I2C_GetState>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d1f9      	bne.n	8004abc <menu+0x350c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004ac8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004acc:	9302      	str	r3, [sp, #8]
 8004ace:	236e      	movs	r3, #110	; 0x6e
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <menu+0x3564>)
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	236e      	movs	r3, #110	; 0x6e
 8004ad8:	2200      	movs	r2, #0
 8004ada:	21a0      	movs	r1, #160	; 0xa0
 8004adc:	4816      	ldr	r0, [pc, #88]	; (8004b38 <menu+0x3588>)
 8004ade:	f005 fec1 	bl	800a864 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004ae2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004ae6:	f004 fe33 	bl	8009750 <HAL_Delay>

			lcd_clear();
 8004aea:	f004 f907 	bl	8008cfc <lcd_clear>
			HAL_Delay(500);
 8004aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004af2:	f004 fe2d 	bl	8009750 <HAL_Delay>
			NVIC_SystemReset();
 8004af6:	f7fc fd45 	bl	8001584 <__NVIC_SystemReset>
		}
	}
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000b0d 	.word	0x20000b0d
 8004b04:	0800e3e4 	.word	0x0800e3e4
 8004b08:	40010800 	.word	0x40010800
 8004b0c:	20000b1b 	.word	0x20000b1b
 8004b10:	20000b0b 	.word	0x20000b0b
 8004b14:	20000a18 	.word	0x20000a18
 8004b18:	20000b18 	.word	0x20000b18
 8004b1c:	20000aec 	.word	0x20000aec
 8004b20:	20000b0c 	.word	0x20000b0c
 8004b24:	0800eb2c 	.word	0x0800eb2c
 8004b28:	0800eb40 	.word	0x0800eb40
 8004b2c:	0800eb54 	.word	0x0800eb54
 8004b30:	0800eb68 	.word	0x0800eb68
 8004b34:	20000b09 	.word	0x20000b09
 8004b38:	200010d8 	.word	0x200010d8

08004b3c <lcdUpdate>:
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"

void lcdUpdate(uint8_t y) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d105      	bne.n	8004b58 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004b4c:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <lcdUpdate+0x9c>)
 8004b4e:	2101      	movs	r1, #1
 8004b50:	2002      	movs	r0, #2
 8004b52:	f004 f8a7 	bl	8008ca4 <lcd_print>
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		//lcd_print(1, 4, "ESP-RMK");
		//lcd_print(2, 6, "RUN");
	}
}
 8004b56:	e03b      	b.n	8004bd0 <lcdUpdate+0x94>
	} else if(y==2) {
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d105      	bne.n	8004b6a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <lcdUpdate+0x9c>)
 8004b60:	2102      	movs	r1, #2
 8004b62:	2002      	movs	r0, #2
 8004b64:	f004 f89e 	bl	8008ca4 <lcd_print>
}
 8004b68:	e032      	b.n	8004bd0 <lcdUpdate+0x94>
	} else if(y==3) {
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d105      	bne.n	8004b7c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <lcdUpdate+0x9c>)
 8004b72:	2103      	movs	r1, #3
 8004b74:	2002      	movs	r0, #2
 8004b76:	f004 f895 	bl	8008ca4 <lcd_print>
}
 8004b7a:	e029      	b.n	8004bd0 <lcdUpdate+0x94>
	} else if(y==4) {
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d105      	bne.n	8004b8e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <lcdUpdate+0x9c>)
 8004b84:	2104      	movs	r1, #4
 8004b86:	2002      	movs	r0, #2
 8004b88:	f004 f88c 	bl	8008ca4 <lcd_print>
}
 8004b8c:	e020      	b.n	8004bd0 <lcdUpdate+0x94>
	} else if(y==5) {
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d105      	bne.n	8004ba0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004b94:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <lcdUpdate+0x9c>)
 8004b96:	2105      	movs	r1, #5
 8004b98:	2002      	movs	r0, #2
 8004b9a:	f004 f883 	bl	8008ca4 <lcd_print>
}
 8004b9e:	e017      	b.n	8004bd0 <lcdUpdate+0x94>
	} else if(y==6) {
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	d105      	bne.n	8004bb2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <lcdUpdate+0x9c>)
 8004ba8:	2106      	movs	r1, #6
 8004baa:	2002      	movs	r0, #2
 8004bac:	f004 f87a 	bl	8008ca4 <lcd_print>
}
 8004bb0:	e00e      	b.n	8004bd0 <lcdUpdate+0x94>
	} else if (y==7) {
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	2b07      	cmp	r3, #7
 8004bb6:	d10b      	bne.n	8004bd0 <lcdUpdate+0x94>
		lcd_clear();
 8004bb8:	f004 f8a0 	bl	8008cfc <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8004bbc:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <lcdUpdate+0xa0>)
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	f004 f86f 	bl	8008ca4 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8004bc6:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <lcdUpdate+0xa4>)
 8004bc8:	2101      	movs	r1, #1
 8004bca:	2002      	movs	r0, #2
 8004bcc:	f004 f86a 	bl	8008ca4 <lcd_print>
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	0800eb7c 	.word	0x0800eb7c
 8004bdc:	200000c0 	.word	0x200000c0
 8004be0:	200000d0 	.word	0x200000d0

08004be4 <bekle>:

void bekle() {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
	timer1=millis;
 8004be8:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <bekle+0x124>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a47      	ldr	r2, [pc, #284]	; (8004d0c <bekle+0x128>)
 8004bee:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bf0:	e002      	b.n	8004bf8 <bekle+0x14>
    	butonKontrol = 1;
 8004bf2:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <bekle+0x12c>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4846      	ldr	r0, [pc, #280]	; (8004d14 <bekle+0x130>)
 8004bfc:	f005 fb78 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d109      	bne.n	8004c1a <bekle+0x36>
 8004c06:	4b40      	ldr	r3, [pc, #256]	; (8004d08 <bekle+0x124>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b40      	ldr	r3, [pc, #256]	; (8004d0c <bekle+0x128>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d0ef      	beq.n	8004bf2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c12:	e002      	b.n	8004c1a <bekle+0x36>
    	butonKontrol = 1;
 8004c14:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <bekle+0x12c>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c1a:	2108      	movs	r1, #8
 8004c1c:	483e      	ldr	r0, [pc, #248]	; (8004d18 <bekle+0x134>)
 8004c1e:	f005 fb67 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d109      	bne.n	8004c3c <bekle+0x58>
 8004c28:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <bekle+0x124>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <bekle+0x128>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d0ef      	beq.n	8004c14 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c34:	e002      	b.n	8004c3c <bekle+0x58>
    	butonKontrol = 1;
 8004c36:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <bekle+0x12c>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4835      	ldr	r0, [pc, #212]	; (8004d14 <bekle+0x130>)
 8004c40:	f005 fb56 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d109      	bne.n	8004c5e <bekle+0x7a>
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <bekle+0x124>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b2f      	ldr	r3, [pc, #188]	; (8004d0c <bekle+0x128>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d0ef      	beq.n	8004c36 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c56:	e002      	b.n	8004c5e <bekle+0x7a>
    	butonKontrol = 1;
 8004c58:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <bekle+0x12c>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c5e:	2104      	movs	r1, #4
 8004c60:	482c      	ldr	r0, [pc, #176]	; (8004d14 <bekle+0x130>)
 8004c62:	f005 fb45 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d109      	bne.n	8004c80 <bekle+0x9c>
 8004c6c:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <bekle+0x124>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <bekle+0x128>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d0ef      	beq.n	8004c58 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c78:	e002      	b.n	8004c80 <bekle+0x9c>
    	butonKontrol = 1;
 8004c7a:	4b25      	ldr	r3, [pc, #148]	; (8004d10 <bekle+0x12c>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c80:	2108      	movs	r1, #8
 8004c82:	4824      	ldr	r0, [pc, #144]	; (8004d14 <bekle+0x130>)
 8004c84:	f005 fb34 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d109      	bne.n	8004ca2 <bekle+0xbe>
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <bekle+0x124>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b1e      	ldr	r3, [pc, #120]	; (8004d0c <bekle+0x128>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d0ef      	beq.n	8004c7a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c9a:	e002      	b.n	8004ca2 <bekle+0xbe>
    	butonKontrol = 1;
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <bekle+0x12c>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ca2:	2180      	movs	r1, #128	; 0x80
 8004ca4:	481c      	ldr	r0, [pc, #112]	; (8004d18 <bekle+0x134>)
 8004ca6:	f005 fb23 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <bekle+0xe0>
 8004cb0:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <bekle+0x124>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <bekle+0x128>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d0ef      	beq.n	8004c9c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cbc:	e002      	b.n	8004cc4 <bekle+0xe0>
    	butonKontrol = 1;
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <bekle+0x12c>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cc8:	4813      	ldr	r0, [pc, #76]	; (8004d18 <bekle+0x134>)
 8004cca:	f005 fb11 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <bekle+0x104>
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <bekle+0x124>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <bekle+0x128>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d0ee      	beq.n	8004cbe <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ce0:	e002      	b.n	8004ce8 <bekle+0x104>
    	butonKontrol = 1;
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <bekle+0x12c>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cec:	480a      	ldr	r0, [pc, #40]	; (8004d18 <bekle+0x134>)
 8004cee:	f005 faff 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d105      	bne.n	8004d04 <bekle+0x120>
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <bekle+0x124>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <bekle+0x128>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d0ee      	beq.n	8004ce2 <bekle+0xfe>
    }

}
 8004d04:	bf00      	nop
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000ac8 	.word	0x20000ac8
 8004d0c:	20000ad0 	.word	0x20000ad0
 8004d10:	20000b1b 	.word	0x20000b1b
 8004d14:	40010800 	.word	0x40010800
 8004d18:	40011000 	.word	0x40011000

08004d1c <buttonCheck>:

uint8_t buttonCheck(void) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004d20:	2101      	movs	r1, #1
 8004d22:	4815      	ldr	r0, [pc, #84]	; (8004d78 <buttonCheck+0x5c>)
 8004d24:	f005 fae4 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d01b      	beq.n	8004d66 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004d2e:	2108      	movs	r1, #8
 8004d30:	4812      	ldr	r0, [pc, #72]	; (8004d7c <buttonCheck+0x60>)
 8004d32:	f005 fadd 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d014      	beq.n	8004d66 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	480e      	ldr	r0, [pc, #56]	; (8004d78 <buttonCheck+0x5c>)
 8004d40:	f005 fad6 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d00d      	beq.n	8004d66 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	480a      	ldr	r0, [pc, #40]	; (8004d78 <buttonCheck+0x5c>)
 8004d4e:	f005 facf 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d006      	beq.n	8004d66 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004d58:	2108      	movs	r1, #8
 8004d5a:	4807      	ldr	r0, [pc, #28]	; (8004d78 <buttonCheck+0x5c>)
 8004d5c:	f005 fac8 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d104      	bne.n	8004d70 <buttonCheck+0x54>
		backLightTimer = 0;
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <buttonCheck+0x64>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
		return 1;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <buttonCheck+0x56>
	}
	return 0;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40010800 	.word	0x40010800
 8004d7c:	40011000 	.word	0x40011000
 8004d80:	20000ae4 	.word	0x20000ae4

08004d84 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <checkLCDBacklight+0x24>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b07      	ldr	r3, [pc, #28]	; (8004dac <checkLCDBacklight+0x28>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b3b      	cmp	r3, #59	; 0x3b
 8004d94:	d903      	bls.n	8004d9e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004d96:	2000      	movs	r0, #0
 8004d98:	f003 ffd0 	bl	8008d3c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004d9c:	e002      	b.n	8004da4 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004d9e:	2001      	movs	r0, #1
 8004da0:	f003 ffcc 	bl	8008d3c <lcd_backlight>
}
 8004da4:	bf00      	nop
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000ac8 	.word	0x20000ac8
 8004dac:	20000ae4 	.word	0x20000ae4

08004db0 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <checkBasincSalteri+0x54>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <checkBasincSalteri+0x12>
		basincVar=1;
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <checkBasincSalteri+0x58>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <checkBasincSalteri+0x54>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d119      	bne.n	8004dfe <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004dca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dce:	480f      	ldr	r0, [pc, #60]	; (8004e0c <checkBasincSalteri+0x5c>)
 8004dd0:	f005 fa8e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004dda:	4b0d      	ldr	r3, [pc, #52]	; (8004e10 <checkBasincSalteri+0x60>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <checkBasincSalteri+0x64>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d90a      	bls.n	8004dfe <checkBasincSalteri+0x4e>
				basincVar=1;
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <checkBasincSalteri+0x58>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004dee:	e006      	b.n	8004dfe <checkBasincSalteri+0x4e>
			timer5=millis;
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <checkBasincSalteri+0x60>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a07      	ldr	r2, [pc, #28]	; (8004e14 <checkBasincSalteri+0x64>)
 8004df6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <checkBasincSalteri+0x58>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000af3 	.word	0x20000af3
 8004e08:	20000aef 	.word	0x20000aef
 8004e0c:	40011000 	.word	0x40011000
 8004e10:	20000ac8 	.word	0x20000ac8
 8004e14:	20000ae0 	.word	0x20000ae0

08004e18 <checkBasGonder>:

void checkBasGonder() {
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <checkBasGonder+0x74>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d10b      	bne.n	8004e3c <checkBasGonder+0x24>
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <checkBasGonder+0x78>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <checkBasGonder+0x24>
 8004e2c:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <checkBasGonder+0x7c>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <checkBasGonder+0x80>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e009      	b.n	8004e50 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004e3c:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <checkBasGonder+0x78>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	f083 0301 	eor.w	r3, r3, #1
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <checkBasGonder+0x80>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <checkBasGonder+0x74>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10b      	bne.n	8004e70 <checkBasGonder+0x58>
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <checkBasGonder+0x84>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <checkBasGonder+0x58>
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <checkBasGonder+0x7c>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <checkBasGonder+0x88>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004e6e:	e009      	b.n	8004e84 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <checkBasGonder+0x84>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f083 0301 	eor.w	r3, r3, #1
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <checkBasGonder+0x88>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr
 8004e8c:	20000aed 	.word	0x20000aed
 8004e90:	20000b21 	.word	0x20000b21
 8004e94:	20000afb 	.word	0x20000afb
 8004e98:	20000b28 	.word	0x20000b28
 8004e9c:	20000b24 	.word	0x20000b24
 8004ea0:	20000b29 	.word	0x20000b29

08004ea4 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <checkKapiSecimleri+0x98>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004eb0:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <checkKapiSecimleri+0x9c>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004eb6:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <checkKapiSecimleri+0x98>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10e      	bne.n	8004edc <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ec2:	4820      	ldr	r0, [pc, #128]	; (8004f44 <checkKapiSecimleri+0xa0>)
 8004ec4:	f005 fa14 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004ece:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <checkKapiSecimleri+0x9c>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	e002      	b.n	8004edc <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <checkKapiSecimleri+0x9c>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004edc:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <checkKapiSecimleri+0x98>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d10e      	bne.n	8004f02 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ee8:	4816      	ldr	r0, [pc, #88]	; (8004f44 <checkKapiSecimleri+0xa0>)
 8004eea:	f005 fa01 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d103      	bne.n	8004efc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004ef4:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <checkKapiSecimleri+0x9c>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e002      	b.n	8004f02 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <checkKapiSecimleri+0x9c>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <checkKapiSecimleri+0x98>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d116      	bne.n	8004f38 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f0e:	480d      	ldr	r0, [pc, #52]	; (8004f44 <checkKapiSecimleri+0xa0>)
 8004f10:	f005 f9ee 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <checkKapiSecimleri+0x8e>
 8004f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f1e:	4809      	ldr	r0, [pc, #36]	; (8004f44 <checkKapiSecimleri+0xa0>)
 8004f20:	f005 f9e6 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <checkKapiSecimleri+0x9c>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004f30:	e002      	b.n	8004f38 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004f32:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <checkKapiSecimleri+0x9c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000af4 	.word	0x20000af4
 8004f40:	20000b3f 	.word	0x20000b3f
 8004f44:	40010800 	.word	0x40010800

08004f48 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004f4c:	4b62      	ldr	r3, [pc, #392]	; (80050d8 <checkAktifCalisma+0x190>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f041 833e 	bne.w	80065d2 <checkAktifCalisma+0x168a>
 8004f56:	4b61      	ldr	r3, [pc, #388]	; (80050dc <checkAktifCalisma+0x194>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f041 8339 	bne.w	80065d2 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004f60:	4b5f      	ldr	r3, [pc, #380]	; (80050e0 <checkAktifCalisma+0x198>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11a      	bne.n	8004f9e <checkAktifCalisma+0x56>
 8004f68:	4b5e      	ldr	r3, [pc, #376]	; (80050e4 <checkAktifCalisma+0x19c>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d116      	bne.n	8004f9e <checkAktifCalisma+0x56>
 8004f70:	4b5d      	ldr	r3, [pc, #372]	; (80050e8 <checkAktifCalisma+0x1a0>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <checkAktifCalisma+0x46>
 8004f78:	4b5c      	ldr	r3, [pc, #368]	; (80050ec <checkAktifCalisma+0x1a4>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	f083 0301 	eor.w	r3, r3, #1
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <checkAktifCalisma+0x46>
 8004f86:	4b5a      	ldr	r3, [pc, #360]	; (80050f0 <checkAktifCalisma+0x1a8>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d007      	beq.n	8004f9e <checkAktifCalisma+0x56>
 8004f8e:	4b59      	ldr	r3, [pc, #356]	; (80050f4 <checkAktifCalisma+0x1ac>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d018      	beq.n	8004fc8 <checkAktifCalisma+0x80>
 8004f96:	4b58      	ldr	r3, [pc, #352]	; (80050f8 <checkAktifCalisma+0x1b0>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d114      	bne.n	8004fc8 <checkAktifCalisma+0x80>
 8004f9e:	4b57      	ldr	r3, [pc, #348]	; (80050fc <checkAktifCalisma+0x1b4>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <checkAktifCalisma+0x80>
 8004fa6:	4b56      	ldr	r3, [pc, #344]	; (8005100 <checkAktifCalisma+0x1b8>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fb4:	4853      	ldr	r0, [pc, #332]	; (8005104 <checkAktifCalisma+0x1bc>)
 8004fb6:	f005 f9b2 	bl	800a31e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004fba:	4b53      	ldr	r3, [pc, #332]	; (8005108 <checkAktifCalisma+0x1c0>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004fc0:	4b52      	ldr	r3, [pc, #328]	; (800510c <checkAktifCalisma+0x1c4>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e008      	b.n	8004fda <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fce:	484d      	ldr	r0, [pc, #308]	; (8005104 <checkAktifCalisma+0x1bc>)
 8004fd0:	f005 f9a5 	bl	800a31e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004fd4:	4b4c      	ldr	r3, [pc, #304]	; (8005108 <checkAktifCalisma+0x1c0>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004fda:	4b40      	ldr	r3, [pc, #256]	; (80050dc <checkAktifCalisma+0x194>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d160      	bne.n	80050a4 <checkAktifCalisma+0x15c>
 8004fe2:	4b46      	ldr	r3, [pc, #280]	; (80050fc <checkAktifCalisma+0x1b4>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d05c      	beq.n	80050a4 <checkAktifCalisma+0x15c>
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <checkAktifCalisma+0x1b8>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d058      	beq.n	80050a4 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ff6:	4843      	ldr	r0, [pc, #268]	; (8005104 <checkAktifCalisma+0x1bc>)
 8004ff8:	f005 f97a 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <checkAktifCalisma+0xc2>
 8005002:	4b43      	ldr	r3, [pc, #268]	; (8005110 <checkAktifCalisma+0x1c8>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04c      	beq.n	80050a4 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800500a:	2102      	movs	r1, #2
 800500c:	4841      	ldr	r0, [pc, #260]	; (8005114 <checkAktifCalisma+0x1cc>)
 800500e:	f005 f96f 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d145      	bne.n	80050a4 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005018:	4b3f      	ldr	r3, [pc, #252]	; (8005118 <checkAktifCalisma+0x1d0>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d041      	beq.n	80050a4 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005020:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005024:	4837      	ldr	r0, [pc, #220]	; (8005104 <checkAktifCalisma+0x1bc>)
 8005026:	f005 f963 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800502a:	4603      	mov	r3, r0
 800502c:	2b01      	cmp	r3, #1
 800502e:	d10e      	bne.n	800504e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005034:	4833      	ldr	r0, [pc, #204]	; (8005104 <checkAktifCalisma+0x1bc>)
 8005036:	f005 f95b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800503a:	4603      	mov	r3, r0
 800503c:	2b01      	cmp	r3, #1
 800503e:	d106      	bne.n	800504e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005040:	2140      	movs	r1, #64	; 0x40
 8005042:	4834      	ldr	r0, [pc, #208]	; (8005114 <checkAktifCalisma+0x1cc>)
 8005044:	f005 f954 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d003      	beq.n	8005056 <checkAktifCalisma+0x10e>
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <checkAktifCalisma+0x198>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d026      	beq.n	80050a4 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <checkAktifCalisma+0x1a0>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	f083 0301 	eor.w	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01f      	beq.n	80050a4 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005064:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <checkAktifCalisma+0x19c>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	f083 0301 	eor.w	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <checkAktifCalisma+0x1ac>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	f083 0301 	eor.w	r3, r3, #1
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d011      	beq.n	80050a4 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005080:	4b26      	ldr	r3, [pc, #152]	; (800511c <checkAktifCalisma+0x1d4>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	f083 0301 	eor.w	r3, r3, #1
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <checkAktifCalisma+0x1d8>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	f083 0301 	eor.w	r3, r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <checkAktifCalisma+0x198>)
 800509e:	2201      	movs	r2, #1
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e002      	b.n	80050aa <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80050a4:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <checkAktifCalisma+0x198>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80050aa:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <checkAktifCalisma+0x198>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03a      	beq.n	8005128 <checkAktifCalisma+0x1e0>
 80050b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050b6:	4817      	ldr	r0, [pc, #92]	; (8005114 <checkAktifCalisma+0x1cc>)
 80050b8:	f005 f91a 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d132      	bne.n	8005128 <checkAktifCalisma+0x1e0>
 80050c2:	4b18      	ldr	r3, [pc, #96]	; (8005124 <checkAktifCalisma+0x1dc>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d02e      	beq.n	8005128 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80050ca:	2201      	movs	r2, #1
 80050cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050d0:	480c      	ldr	r0, [pc, #48]	; (8005104 <checkAktifCalisma+0x1bc>)
 80050d2:	f005 f924 	bl	800a31e <HAL_GPIO_WritePin>
 80050d6:	e02d      	b.n	8005134 <checkAktifCalisma+0x1ec>
 80050d8:	20000b0a 	.word	0x20000b0a
 80050dc:	20000b09 	.word	0x20000b09
 80050e0:	20000b21 	.word	0x20000b21
 80050e4:	20000b22 	.word	0x20000b22
 80050e8:	20000b24 	.word	0x20000b24
 80050ec:	20000b1c 	.word	0x20000b1c
 80050f0:	20000aff 	.word	0x20000aff
 80050f4:	20000b23 	.word	0x20000b23
 80050f8:	20000afe 	.word	0x20000afe
 80050fc:	20000b3e 	.word	0x20000b3e
 8005100:	20000b3f 	.word	0x20000b3f
 8005104:	40010c00 	.word	0x40010c00
 8005108:	20000b40 	.word	0x20000b40
 800510c:	20000b2b 	.word	0x20000b2b
 8005110:	20000b28 	.word	0x20000b28
 8005114:	40011000 	.word	0x40011000
 8005118:	20000aef 	.word	0x20000aef
 800511c:	20000b26 	.word	0x20000b26
 8005120:	20000b27 	.word	0x20000b27
 8005124:	20000afa 	.word	0x20000afa
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800512e:	4860      	ldr	r0, [pc, #384]	; (80052b0 <checkAktifCalisma+0x368>)
 8005130:	f005 f8f5 	bl	800a31e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005134:	4b5f      	ldr	r3, [pc, #380]	; (80052b4 <checkAktifCalisma+0x36c>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <checkAktifCalisma+0x21c>
 800513c:	4b5e      	ldr	r3, [pc, #376]	; (80052b8 <checkAktifCalisma+0x370>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d007      	beq.n	8005154 <checkAktifCalisma+0x20c>
 8005144:	4b5c      	ldr	r3, [pc, #368]	; (80052b8 <checkAktifCalisma+0x370>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d003      	beq.n	8005154 <checkAktifCalisma+0x20c>
 800514c:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <checkAktifCalisma+0x374>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005154:	2201      	movs	r2, #1
 8005156:	2104      	movs	r1, #4
 8005158:	4855      	ldr	r0, [pc, #340]	; (80052b0 <checkAktifCalisma+0x368>)
 800515a:	f005 f8e0 	bl	800a31e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800515e:	4b58      	ldr	r3, [pc, #352]	; (80052c0 <checkAktifCalisma+0x378>)
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005164:	4b56      	ldr	r3, [pc, #344]	; (80052c0 <checkAktifCalisma+0x378>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02f      	beq.n	80051cc <checkAktifCalisma+0x284>
 800516c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005170:	484f      	ldr	r0, [pc, #316]	; (80052b0 <checkAktifCalisma+0x368>)
 8005172:	f005 f8bd 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005176:	4603      	mov	r3, r0
 8005178:	2b01      	cmp	r3, #1
 800517a:	d106      	bne.n	800518a <checkAktifCalisma+0x242>
 800517c:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <checkAktifCalisma+0x37c>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	f083 0301 	eor.w	r3, r3, #1
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <checkAktifCalisma+0x250>
 800518a:	2102      	movs	r1, #2
 800518c:	484e      	ldr	r0, [pc, #312]	; (80052c8 <checkAktifCalisma+0x380>)
 800518e:	f005 f8af 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005192:	4603      	mov	r3, r0
 8005194:	2b01      	cmp	r3, #1
 8005196:	d119      	bne.n	80051cc <checkAktifCalisma+0x284>
 8005198:	4b4c      	ldr	r3, [pc, #304]	; (80052cc <checkAktifCalisma+0x384>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d015      	beq.n	80051cc <checkAktifCalisma+0x284>
 80051a0:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <checkAktifCalisma+0x388>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d011      	beq.n	80051cc <checkAktifCalisma+0x284>
 80051a8:	4b4a      	ldr	r3, [pc, #296]	; (80052d4 <checkAktifCalisma+0x38c>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00d      	beq.n	80051cc <checkAktifCalisma+0x284>
 80051b0:	4b49      	ldr	r3, [pc, #292]	; (80052d8 <checkAktifCalisma+0x390>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f083 0301 	eor.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d006      	beq.n	80051cc <checkAktifCalisma+0x284>
			timer2=millis;
 80051be:	4b47      	ldr	r3, [pc, #284]	; (80052dc <checkAktifCalisma+0x394>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a47      	ldr	r2, [pc, #284]	; (80052e0 <checkAktifCalisma+0x398>)
 80051c4:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80051c6:	4b44      	ldr	r3, [pc, #272]	; (80052d8 <checkAktifCalisma+0x390>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80051cc:	4b43      	ldr	r3, [pc, #268]	; (80052dc <checkAktifCalisma+0x394>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b43      	ldr	r3, [pc, #268]	; (80052e0 <checkAktifCalisma+0x398>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	4a43      	ldr	r2, [pc, #268]	; (80052e4 <checkAktifCalisma+0x39c>)
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	4293      	cmp	r3, r2
 80051dc:	d303      	bcc.n	80051e6 <checkAktifCalisma+0x29e>
 80051de:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <checkAktifCalisma+0x390>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d111      	bne.n	800520a <checkAktifCalisma+0x2c2>
 80051e6:	4b39      	ldr	r3, [pc, #228]	; (80052cc <checkAktifCalisma+0x384>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	f083 0301 	eor.w	r3, r3, #1
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <checkAktifCalisma+0x2c2>
 80051f4:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <checkAktifCalisma+0x388>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	f083 0301 	eor.w	r3, r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <checkAktifCalisma+0x2c2>
 8005202:	4b34      	ldr	r3, [pc, #208]	; (80052d4 <checkAktifCalisma+0x38c>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800520a:	2200      	movs	r2, #0
 800520c:	2104      	movs	r1, #4
 800520e:	4828      	ldr	r0, [pc, #160]	; (80052b0 <checkAktifCalisma+0x368>)
 8005210:	f005 f885 	bl	800a31e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005214:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <checkAktifCalisma+0x378>)
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800521a:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <checkAktifCalisma+0x390>)
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <checkAktifCalisma+0x3a0>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <checkAktifCalisma+0x3a4>)
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800522e:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <checkAktifCalisma+0x3a0>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d116      	bne.n	8005264 <checkAktifCalisma+0x31c>
 8005236:	4b2e      	ldr	r3, [pc, #184]	; (80052f0 <checkAktifCalisma+0x3a8>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d112      	bne.n	8005264 <checkAktifCalisma+0x31c>
 800523e:	2101      	movs	r1, #1
 8005240:	4821      	ldr	r0, [pc, #132]	; (80052c8 <checkAktifCalisma+0x380>)
 8005242:	f005 f855 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10b      	bne.n	8005264 <checkAktifCalisma+0x31c>
 800524c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005250:	4817      	ldr	r0, [pc, #92]	; (80052b0 <checkAktifCalisma+0x368>)
 8005252:	f005 f84d 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800525c:	4b23      	ldr	r3, [pc, #140]	; (80052ec <checkAktifCalisma+0x3a4>)
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e011      	b.n	8005288 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005264:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <checkAktifCalisma+0x3a0>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d10d      	bne.n	8005288 <checkAktifCalisma+0x340>
 800526c:	2101      	movs	r1, #1
 800526e:	4816      	ldr	r0, [pc, #88]	; (80052c8 <checkAktifCalisma+0x380>)
 8005270:	f005 f83e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d106      	bne.n	8005288 <checkAktifCalisma+0x340>
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <checkAktifCalisma+0x3a8>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005282:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <checkAktifCalisma+0x3a4>)
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005288:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <checkAktifCalisma+0x3a0>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d134      	bne.n	80052fa <checkAktifCalisma+0x3b2>
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <checkAktifCalisma+0x3a8>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d130      	bne.n	80052fa <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005298:	2101      	movs	r1, #1
 800529a:	480b      	ldr	r0, [pc, #44]	; (80052c8 <checkAktifCalisma+0x380>)
 800529c:	f005 f828 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d126      	bne.n	80052f4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <checkAktifCalisma+0x3a4>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e025      	b.n	80052fa <checkAktifCalisma+0x3b2>
 80052ae:	bf00      	nop
 80052b0:	40010c00 	.word	0x40010c00
 80052b4:	20000b21 	.word	0x20000b21
 80052b8:	20000afb 	.word	0x20000afb
 80052bc:	20000aff 	.word	0x20000aff
 80052c0:	20000b25 	.word	0x20000b25
 80052c4:	20000b28 	.word	0x20000b28
 80052c8:	40011000 	.word	0x40011000
 80052cc:	20000b3e 	.word	0x20000b3e
 80052d0:	20000b3f 	.word	0x20000b3f
 80052d4:	20000aef 	.word	0x20000aef
 80052d8:	20000b1d 	.word	0x20000b1d
 80052dc:	20000ac8 	.word	0x20000ac8
 80052e0:	20000ad4 	.word	0x20000ad4
 80052e4:	20000b00 	.word	0x20000b00
 80052e8:	20000af0 	.word	0x20000af0
 80052ec:	20000b43 	.word	0x20000b43
 80052f0:	20000aed 	.word	0x20000aed
			} else {
				cerceveVar=0;
 80052f4:	4b7f      	ldr	r3, [pc, #508]	; (80054f4 <checkAktifCalisma+0x5ac>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80052fa:	4b7f      	ldr	r3, [pc, #508]	; (80054f8 <checkAktifCalisma+0x5b0>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d17c      	bne.n	80053fc <checkAktifCalisma+0x4b4>
 8005302:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <checkAktifCalisma+0x5b4>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d078      	beq.n	80053fc <checkAktifCalisma+0x4b4>
 800530a:	4b7d      	ldr	r3, [pc, #500]	; (8005500 <checkAktifCalisma+0x5b8>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d074      	beq.n	80053fc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005316:	487b      	ldr	r0, [pc, #492]	; (8005504 <checkAktifCalisma+0x5bc>)
 8005318:	f004 ffea 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <checkAktifCalisma+0x3e2>
 8005322:	4b79      	ldr	r3, [pc, #484]	; (8005508 <checkAktifCalisma+0x5c0>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d068      	beq.n	80053fc <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800532a:	4b72      	ldr	r3, [pc, #456]	; (80054f4 <checkAktifCalisma+0x5ac>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d064      	beq.n	80053fc <checkAktifCalisma+0x4b4>
 8005332:	4b76      	ldr	r3, [pc, #472]	; (800550c <checkAktifCalisma+0x5c4>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	f083 0301 	eor.w	r3, r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05d      	beq.n	80053fc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005340:	2104      	movs	r1, #4
 8005342:	4873      	ldr	r0, [pc, #460]	; (8005510 <checkAktifCalisma+0x5c8>)
 8005344:	f004 ffd4 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <checkAktifCalisma+0x40e>
 800534e:	4b71      	ldr	r3, [pc, #452]	; (8005514 <checkAktifCalisma+0x5cc>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d152      	bne.n	80053fc <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800535a:	486a      	ldr	r0, [pc, #424]	; (8005504 <checkAktifCalisma+0x5bc>)
 800535c:	f004 ffc8 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005360:	4603      	mov	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10e      	bne.n	8005384 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536a:	4866      	ldr	r0, [pc, #408]	; (8005504 <checkAktifCalisma+0x5bc>)
 800536c:	f004 ffc0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d106      	bne.n	8005384 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005376:	2140      	movs	r1, #64	; 0x40
 8005378:	4865      	ldr	r0, [pc, #404]	; (8005510 <checkAktifCalisma+0x5c8>)
 800537a:	f004 ffb9 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800537e:	4603      	mov	r3, r0
 8005380:	2b01      	cmp	r3, #1
 8005382:	d003      	beq.n	800538c <checkAktifCalisma+0x444>
 8005384:	4b64      	ldr	r3, [pc, #400]	; (8005518 <checkAktifCalisma+0x5d0>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d037      	beq.n	80053fc <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800538c:	4b63      	ldr	r3, [pc, #396]	; (800551c <checkAktifCalisma+0x5d4>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	f083 0301 	eor.w	r3, r3, #1
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d030      	beq.n	80053fc <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800539a:	4b61      	ldr	r3, [pc, #388]	; (8005520 <checkAktifCalisma+0x5d8>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	f083 0301 	eor.w	r3, r3, #1
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d029      	beq.n	80053fc <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80053a8:	4b5e      	ldr	r3, [pc, #376]	; (8005524 <checkAktifCalisma+0x5dc>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	f083 0301 	eor.w	r3, r3, #1
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d022      	beq.n	80053fc <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80053b6:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <checkAktifCalisma+0x5e0>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f083 0301 	eor.w	r3, r3, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80053c4:	4b59      	ldr	r3, [pc, #356]	; (800552c <checkAktifCalisma+0x5e4>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f083 0301 	eor.w	r3, r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80053d2:	4b57      	ldr	r3, [pc, #348]	; (8005530 <checkAktifCalisma+0x5e8>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f083 0301 	eor.w	r3, r3, #1
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00d      	beq.n	80053fc <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80053e0:	2201      	movs	r2, #1
 80053e2:	2102      	movs	r1, #2
 80053e4:	4847      	ldr	r0, [pc, #284]	; (8005504 <checkAktifCalisma+0x5bc>)
 80053e6:	f004 ff9a 	bl	800a31e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80053ea:	4b4b      	ldr	r3, [pc, #300]	; (8005518 <checkAktifCalisma+0x5d0>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80053f0:	4b50      	ldr	r3, [pc, #320]	; (8005534 <checkAktifCalisma+0x5ec>)
 80053f2:	2201      	movs	r2, #1
 80053f4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80053f6:	4b50      	ldr	r3, [pc, #320]	; (8005538 <checkAktifCalisma+0x5f0>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80053fc:	4b46      	ldr	r3, [pc, #280]	; (8005518 <checkAktifCalisma+0x5d0>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d033      	beq.n	800546c <checkAktifCalisma+0x524>
 8005404:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005408:	483e      	ldr	r0, [pc, #248]	; (8005504 <checkAktifCalisma+0x5bc>)
 800540a:	f004 ff71 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800540e:	4603      	mov	r3, r0
 8005410:	2b01      	cmp	r3, #1
 8005412:	d106      	bne.n	8005422 <checkAktifCalisma+0x4da>
 8005414:	4b3c      	ldr	r3, [pc, #240]	; (8005508 <checkAktifCalisma+0x5c0>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f083 0301 	eor.w	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <checkAktifCalisma+0x4f0>
 8005422:	2104      	movs	r1, #4
 8005424:	483a      	ldr	r0, [pc, #232]	; (8005510 <checkAktifCalisma+0x5c8>)
 8005426:	f004 ff63 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800542a:	4603      	mov	r3, r0
 800542c:	2b01      	cmp	r3, #1
 800542e:	d11d      	bne.n	800546c <checkAktifCalisma+0x524>
 8005430:	4b38      	ldr	r3, [pc, #224]	; (8005514 <checkAktifCalisma+0x5cc>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d019      	beq.n	800546c <checkAktifCalisma+0x524>
 8005438:	4b30      	ldr	r3, [pc, #192]	; (80054fc <checkAktifCalisma+0x5b4>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d015      	beq.n	800546c <checkAktifCalisma+0x524>
 8005440:	4b2f      	ldr	r3, [pc, #188]	; (8005500 <checkAktifCalisma+0x5b8>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d011      	beq.n	800546c <checkAktifCalisma+0x524>
 8005448:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <checkAktifCalisma+0x5ac>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <checkAktifCalisma+0x524>
 8005450:	4b3a      	ldr	r3, [pc, #232]	; (800553c <checkAktifCalisma+0x5f4>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f083 0301 	eor.w	r3, r3, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <checkAktifCalisma+0x524>
			timer2=millis;
 800545e:	4b38      	ldr	r3, [pc, #224]	; (8005540 <checkAktifCalisma+0x5f8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a38      	ldr	r2, [pc, #224]	; (8005544 <checkAktifCalisma+0x5fc>)
 8005464:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005466:	4b35      	ldr	r3, [pc, #212]	; (800553c <checkAktifCalisma+0x5f4>)
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800546c:	4b34      	ldr	r3, [pc, #208]	; (8005540 <checkAktifCalisma+0x5f8>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b34      	ldr	r3, [pc, #208]	; (8005544 <checkAktifCalisma+0x5fc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	4a34      	ldr	r2, [pc, #208]	; (8005548 <checkAktifCalisma+0x600>)
 8005478:	7812      	ldrb	r2, [r2, #0]
 800547a:	4293      	cmp	r3, r2
 800547c:	d303      	bcc.n	8005486 <checkAktifCalisma+0x53e>
 800547e:	4b2f      	ldr	r3, [pc, #188]	; (800553c <checkAktifCalisma+0x5f4>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d114      	bne.n	80054b0 <checkAktifCalisma+0x568>
 8005486:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <checkAktifCalisma+0x5b4>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f083 0301 	eor.w	r3, r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10d      	bne.n	80054b0 <checkAktifCalisma+0x568>
 8005494:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <checkAktifCalisma+0x5b8>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f083 0301 	eor.w	r3, r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <checkAktifCalisma+0x568>
 80054a2:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <checkAktifCalisma+0x5ac>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f083 0301 	eor.w	r3, r3, #1
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2102      	movs	r1, #2
 80054b4:	4813      	ldr	r0, [pc, #76]	; (8005504 <checkAktifCalisma+0x5bc>)
 80054b6:	f004 ff32 	bl	800a31e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <checkAktifCalisma+0x5d0>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80054c0:	4b1e      	ldr	r3, [pc, #120]	; (800553c <checkAktifCalisma+0x5f4>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <checkAktifCalisma+0x5d0>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d040      	beq.n	8005550 <checkAktifCalisma+0x608>
 80054ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054d2:	480f      	ldr	r0, [pc, #60]	; (8005510 <checkAktifCalisma+0x5c8>)
 80054d4:	f004 ff0c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d138      	bne.n	8005550 <checkAktifCalisma+0x608>
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <checkAktifCalisma+0x604>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d034      	beq.n	8005550 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80054e6:	2201      	movs	r2, #1
 80054e8:	2101      	movs	r1, #1
 80054ea:	4806      	ldr	r0, [pc, #24]	; (8005504 <checkAktifCalisma+0x5bc>)
 80054ec:	f004 ff17 	bl	800a31e <HAL_GPIO_WritePin>
 80054f0:	e033      	b.n	800555a <checkAktifCalisma+0x612>
 80054f2:	bf00      	nop
 80054f4:	20000b43 	.word	0x20000b43
 80054f8:	20000b09 	.word	0x20000b09
 80054fc:	20000b3e 	.word	0x20000b3e
 8005500:	20000b3f 	.word	0x20000b3f
 8005504:	40010c00 	.word	0x40010c00
 8005508:	20000b29 	.word	0x20000b29
 800550c:	20000b3d 	.word	0x20000b3d
 8005510:	40011000 	.word	0x40011000
 8005514:	20000af2 	.word	0x20000af2
 8005518:	20000b24 	.word	0x20000b24
 800551c:	20000b21 	.word	0x20000b21
 8005520:	20000b25 	.word	0x20000b25
 8005524:	20000b22 	.word	0x20000b22
 8005528:	20000b23 	.word	0x20000b23
 800552c:	20000b26 	.word	0x20000b26
 8005530:	20000b27 	.word	0x20000b27
 8005534:	20000b2c 	.word	0x20000b2c
 8005538:	20000b4d 	.word	0x20000b4d
 800553c:	20000b1c 	.word	0x20000b1c
 8005540:	20000ac8 	.word	0x20000ac8
 8005544:	20000ad4 	.word	0x20000ad4
 8005548:	20000b01 	.word	0x20000b01
 800554c:	20000af1 	.word	0x20000af1
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005550:	2200      	movs	r2, #0
 8005552:	2101      	movs	r1, #1
 8005554:	4836      	ldr	r0, [pc, #216]	; (8005630 <checkAktifCalisma+0x6e8>)
 8005556:	f004 fee2 	bl	800a31e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800555a:	4b36      	ldr	r3, [pc, #216]	; (8005634 <checkAktifCalisma+0x6ec>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 8080 	bne.w	8005664 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005564:	4b34      	ldr	r3, [pc, #208]	; (8005638 <checkAktifCalisma+0x6f0>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d003      	beq.n	8005574 <checkAktifCalisma+0x62c>
 800556c:	4b32      	ldr	r3, [pc, #200]	; (8005638 <checkAktifCalisma+0x6f0>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d177      	bne.n	8005664 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005574:	4b31      	ldr	r3, [pc, #196]	; (800563c <checkAktifCalisma+0x6f4>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d073      	beq.n	8005664 <checkAktifCalisma+0x71c>
 800557c:	4b30      	ldr	r3, [pc, #192]	; (8005640 <checkAktifCalisma+0x6f8>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d06f      	beq.n	8005664 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005588:	4829      	ldr	r0, [pc, #164]	; (8005630 <checkAktifCalisma+0x6e8>)
 800558a:	f004 feb1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d167      	bne.n	8005664 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005598:	482a      	ldr	r0, [pc, #168]	; (8005644 <checkAktifCalisma+0x6fc>)
 800559a:	f004 fea9 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <checkAktifCalisma+0x664>
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <checkAktifCalisma+0x700>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d15b      	bne.n	8005664 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80055ac:	2140      	movs	r1, #64	; 0x40
 80055ae:	4825      	ldr	r0, [pc, #148]	; (8005644 <checkAktifCalisma+0x6fc>)
 80055b0:	f004 fe9e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d10f      	bne.n	80055da <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80055ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055be:	481c      	ldr	r0, [pc, #112]	; (8005630 <checkAktifCalisma+0x6e8>)
 80055c0:	f004 fe96 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d107      	bne.n	80055da <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80055ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055ce:	4818      	ldr	r0, [pc, #96]	; (8005630 <checkAktifCalisma+0x6e8>)
 80055d0:	f004 fe8e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d003      	beq.n	80055e2 <checkAktifCalisma+0x69a>
 80055da:	4b1c      	ldr	r3, [pc, #112]	; (800564c <checkAktifCalisma+0x704>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d040      	beq.n	8005664 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80055e2:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <checkAktifCalisma+0x708>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f083 0301 	eor.w	r3, r3, #1
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d039      	beq.n	8005664 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80055f0:	4b18      	ldr	r3, [pc, #96]	; (8005654 <checkAktifCalisma+0x70c>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f083 0301 	eor.w	r3, r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d032      	beq.n	8005664 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80055fe:	4b16      	ldr	r3, [pc, #88]	; (8005658 <checkAktifCalisma+0x710>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f083 0301 	eor.w	r3, r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02b      	beq.n	8005664 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 800560c:	4b13      	ldr	r3, [pc, #76]	; (800565c <checkAktifCalisma+0x714>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f083 0301 	eor.w	r3, r3, #1
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d024      	beq.n	8005664 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <checkAktifCalisma+0x718>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f083 0301 	eor.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01d      	beq.n	8005664 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005628:	4b08      	ldr	r3, [pc, #32]	; (800564c <checkAktifCalisma+0x704>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e01c      	b.n	800566a <checkAktifCalisma+0x722>
 8005630:	40010c00 	.word	0x40010c00
 8005634:	20000b09 	.word	0x20000b09
 8005638:	20000afb 	.word	0x20000afb
 800563c:	20000b3e 	.word	0x20000b3e
 8005640:	20000b3f 	.word	0x20000b3f
 8005644:	40011000 	.word	0x40011000
 8005648:	20000afc 	.word	0x20000afc
 800564c:	20000b22 	.word	0x20000b22
 8005650:	20000b21 	.word	0x20000b21
 8005654:	20000b25 	.word	0x20000b25
 8005658:	20000b24 	.word	0x20000b24
 800565c:	20000b23 	.word	0x20000b23
 8005660:	20000b27 	.word	0x20000b27
		} else {
			devmotoryukaricalisiyor=0;
 8005664:	4b64      	ldr	r3, [pc, #400]	; (80057f8 <checkAktifCalisma+0x8b0>)
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800566a:	4b63      	ldr	r3, [pc, #396]	; (80057f8 <checkAktifCalisma+0x8b0>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005672:	2201      	movs	r2, #1
 8005674:	2120      	movs	r1, #32
 8005676:	4861      	ldr	r0, [pc, #388]	; (80057fc <checkAktifCalisma+0x8b4>)
 8005678:	f004 fe51 	bl	800a31e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800567c:	4b60      	ldr	r3, [pc, #384]	; (8005800 <checkAktifCalisma+0x8b8>)
 800567e:	2201      	movs	r2, #1
 8005680:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005682:	4b5f      	ldr	r3, [pc, #380]	; (8005800 <checkAktifCalisma+0x8b8>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d025      	beq.n	80056d6 <checkAktifCalisma+0x78e>
 800568a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800568e:	485d      	ldr	r0, [pc, #372]	; (8005804 <checkAktifCalisma+0x8bc>)
 8005690:	f004 fe2e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005694:	4603      	mov	r3, r0
 8005696:	2b01      	cmp	r3, #1
 8005698:	d007      	beq.n	80056aa <checkAktifCalisma+0x762>
 800569a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800569e:	4857      	ldr	r0, [pc, #348]	; (80057fc <checkAktifCalisma+0x8b4>)
 80056a0:	f004 fe26 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d115      	bne.n	80056d6 <checkAktifCalisma+0x78e>
 80056aa:	4b57      	ldr	r3, [pc, #348]	; (8005808 <checkAktifCalisma+0x8c0>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d011      	beq.n	80056d6 <checkAktifCalisma+0x78e>
 80056b2:	4b56      	ldr	r3, [pc, #344]	; (800580c <checkAktifCalisma+0x8c4>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <checkAktifCalisma+0x78e>
 80056ba:	4b55      	ldr	r3, [pc, #340]	; (8005810 <checkAktifCalisma+0x8c8>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	f083 0301 	eor.w	r3, r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d006      	beq.n	80056d6 <checkAktifCalisma+0x78e>
			timer2=millis;
 80056c8:	4b52      	ldr	r3, [pc, #328]	; (8005814 <checkAktifCalisma+0x8cc>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a52      	ldr	r2, [pc, #328]	; (8005818 <checkAktifCalisma+0x8d0>)
 80056ce:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80056d0:	4b4f      	ldr	r3, [pc, #316]	; (8005810 <checkAktifCalisma+0x8c8>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80056d6:	4b4f      	ldr	r3, [pc, #316]	; (8005814 <checkAktifCalisma+0x8cc>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b4f      	ldr	r3, [pc, #316]	; (8005818 <checkAktifCalisma+0x8d0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	4a4e      	ldr	r2, [pc, #312]	; (800581c <checkAktifCalisma+0x8d4>)
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d303      	bcc.n	80056f0 <checkAktifCalisma+0x7a8>
 80056e8:	4b49      	ldr	r3, [pc, #292]	; (8005810 <checkAktifCalisma+0x8c8>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <checkAktifCalisma+0x7c4>
 80056f0:	4b45      	ldr	r3, [pc, #276]	; (8005808 <checkAktifCalisma+0x8c0>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f083 0301 	eor.w	r3, r3, #1
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <checkAktifCalisma+0x7c4>
 80056fe:	4b43      	ldr	r3, [pc, #268]	; (800580c <checkAktifCalisma+0x8c4>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f083 0301 	eor.w	r3, r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800570c:	2200      	movs	r2, #0
 800570e:	2120      	movs	r1, #32
 8005710:	483a      	ldr	r0, [pc, #232]	; (80057fc <checkAktifCalisma+0x8b4>)
 8005712:	f004 fe04 	bl	800a31e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005716:	4b3a      	ldr	r3, [pc, #232]	; (8005800 <checkAktifCalisma+0x8b8>)
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 800571c:	4b3c      	ldr	r3, [pc, #240]	; (8005810 <checkAktifCalisma+0x8c8>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005722:	4b3f      	ldr	r3, [pc, #252]	; (8005820 <checkAktifCalisma+0x8d8>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 8088 	bne.w	800583c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800572c:	4b3d      	ldr	r3, [pc, #244]	; (8005824 <checkAktifCalisma+0x8dc>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d003      	beq.n	800573c <checkAktifCalisma+0x7f4>
 8005734:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <checkAktifCalisma+0x8dc>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d17f      	bne.n	800583c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 800573c:	4b32      	ldr	r3, [pc, #200]	; (8005808 <checkAktifCalisma+0x8c0>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d07b      	beq.n	800583c <checkAktifCalisma+0x8f4>
 8005744:	4b31      	ldr	r3, [pc, #196]	; (800580c <checkAktifCalisma+0x8c4>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d077      	beq.n	800583c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800574c:	2140      	movs	r1, #64	; 0x40
 800574e:	482b      	ldr	r0, [pc, #172]	; (80057fc <checkAktifCalisma+0x8b4>)
 8005750:	f004 fdce 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d170      	bne.n	800583c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800575a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800575e:	4827      	ldr	r0, [pc, #156]	; (80057fc <checkAktifCalisma+0x8b4>)
 8005760:	f004 fdc6 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <checkAktifCalisma+0x82a>
 800576a:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <checkAktifCalisma+0x8e0>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d164      	bne.n	800583c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005776:	4823      	ldr	r0, [pc, #140]	; (8005804 <checkAktifCalisma+0x8bc>)
 8005778:	f004 fdba 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800577c:	4603      	mov	r3, r0
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10f      	bne.n	80057a2 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005786:	481f      	ldr	r0, [pc, #124]	; (8005804 <checkAktifCalisma+0x8bc>)
 8005788:	f004 fdb2 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d107      	bne.n	80057a2 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005792:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005796:	481b      	ldr	r0, [pc, #108]	; (8005804 <checkAktifCalisma+0x8bc>)
 8005798:	f004 fdaa 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d003      	beq.n	80057aa <checkAktifCalisma+0x862>
 80057a2:	4b22      	ldr	r3, [pc, #136]	; (800582c <checkAktifCalisma+0x8e4>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d048      	beq.n	800583c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80057aa:	4b21      	ldr	r3, [pc, #132]	; (8005830 <checkAktifCalisma+0x8e8>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f083 0301 	eor.w	r3, r3, #1
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d041      	beq.n	800583c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80057b8:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <checkAktifCalisma+0x8ec>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f083 0301 	eor.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d03a      	beq.n	800583c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80057c6:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <checkAktifCalisma+0x8f0>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f083 0301 	eor.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d033      	beq.n	800583c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <checkAktifCalisma+0x8b8>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f083 0301 	eor.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02c      	beq.n	800583c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <checkAktifCalisma+0x8b0>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f083 0301 	eor.w	r3, r3, #1
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d025      	beq.n	800583c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80057f0:	4b0e      	ldr	r3, [pc, #56]	; (800582c <checkAktifCalisma+0x8e4>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e024      	b.n	8005842 <checkAktifCalisma+0x8fa>
 80057f8:	20000b22 	.word	0x20000b22
 80057fc:	40011000 	.word	0x40011000
 8005800:	20000b26 	.word	0x20000b26
 8005804:	40010c00 	.word	0x40010c00
 8005808:	20000b3e 	.word	0x20000b3e
 800580c:	20000b3f 	.word	0x20000b3f
 8005810:	20000b1e 	.word	0x20000b1e
 8005814:	20000ac8 	.word	0x20000ac8
 8005818:	20000ad4 	.word	0x20000ad4
 800581c:	20000b02 	.word	0x20000b02
 8005820:	20000b09 	.word	0x20000b09
 8005824:	20000afb 	.word	0x20000afb
 8005828:	20000afd 	.word	0x20000afd
 800582c:	20000b23 	.word	0x20000b23
 8005830:	20000b21 	.word	0x20000b21
 8005834:	20000b25 	.word	0x20000b25
 8005838:	20000b24 	.word	0x20000b24
		} else {
			devmotorasagicalisiyor=0;
 800583c:	4b96      	ldr	r3, [pc, #600]	; (8005a98 <checkAktifCalisma+0xb50>)
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005842:	4b95      	ldr	r3, [pc, #596]	; (8005a98 <checkAktifCalisma+0xb50>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800584a:	2201      	movs	r2, #1
 800584c:	2110      	movs	r1, #16
 800584e:	4893      	ldr	r0, [pc, #588]	; (8005a9c <checkAktifCalisma+0xb54>)
 8005850:	f004 fd65 	bl	800a31e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005854:	4b92      	ldr	r3, [pc, #584]	; (8005aa0 <checkAktifCalisma+0xb58>)
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800585a:	4b91      	ldr	r3, [pc, #580]	; (8005aa0 <checkAktifCalisma+0xb58>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d024      	beq.n	80058ac <checkAktifCalisma+0x964>
 8005862:	2140      	movs	r1, #64	; 0x40
 8005864:	488d      	ldr	r0, [pc, #564]	; (8005a9c <checkAktifCalisma+0xb54>)
 8005866:	f004 fd43 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800586a:	4603      	mov	r3, r0
 800586c:	2b01      	cmp	r3, #1
 800586e:	d007      	beq.n	8005880 <checkAktifCalisma+0x938>
 8005870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005874:	4889      	ldr	r0, [pc, #548]	; (8005a9c <checkAktifCalisma+0xb54>)
 8005876:	f004 fd3b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800587a:	4603      	mov	r3, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d115      	bne.n	80058ac <checkAktifCalisma+0x964>
 8005880:	4b88      	ldr	r3, [pc, #544]	; (8005aa4 <checkAktifCalisma+0xb5c>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d011      	beq.n	80058ac <checkAktifCalisma+0x964>
 8005888:	4b87      	ldr	r3, [pc, #540]	; (8005aa8 <checkAktifCalisma+0xb60>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <checkAktifCalisma+0x964>
 8005890:	4b86      	ldr	r3, [pc, #536]	; (8005aac <checkAktifCalisma+0xb64>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f083 0301 	eor.w	r3, r3, #1
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <checkAktifCalisma+0x964>
			timer2=millis;
 800589e:	4b84      	ldr	r3, [pc, #528]	; (8005ab0 <checkAktifCalisma+0xb68>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a84      	ldr	r2, [pc, #528]	; (8005ab4 <checkAktifCalisma+0xb6c>)
 80058a4:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80058a6:	4b81      	ldr	r3, [pc, #516]	; (8005aac <checkAktifCalisma+0xb64>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80058ac:	4b80      	ldr	r3, [pc, #512]	; (8005ab0 <checkAktifCalisma+0xb68>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4b80      	ldr	r3, [pc, #512]	; (8005ab4 <checkAktifCalisma+0xb6c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	4a80      	ldr	r2, [pc, #512]	; (8005ab8 <checkAktifCalisma+0xb70>)
 80058b8:	7812      	ldrb	r2, [r2, #0]
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d303      	bcc.n	80058c6 <checkAktifCalisma+0x97e>
 80058be:	4b7b      	ldr	r3, [pc, #492]	; (8005aac <checkAktifCalisma+0xb64>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10d      	bne.n	80058e2 <checkAktifCalisma+0x99a>
 80058c6:	4b77      	ldr	r3, [pc, #476]	; (8005aa4 <checkAktifCalisma+0xb5c>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f083 0301 	eor.w	r3, r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <checkAktifCalisma+0x99a>
 80058d4:	4b74      	ldr	r3, [pc, #464]	; (8005aa8 <checkAktifCalisma+0xb60>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f083 0301 	eor.w	r3, r3, #1
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80058e2:	2200      	movs	r2, #0
 80058e4:	2110      	movs	r1, #16
 80058e6:	486d      	ldr	r0, [pc, #436]	; (8005a9c <checkAktifCalisma+0xb54>)
 80058e8:	f004 fd19 	bl	800a31e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80058ec:	4b6c      	ldr	r3, [pc, #432]	; (8005aa0 <checkAktifCalisma+0xb58>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80058f2:	4b6e      	ldr	r3, [pc, #440]	; (8005aac <checkAktifCalisma+0xb64>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80058f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058fc:	486f      	ldr	r0, [pc, #444]	; (8005abc <checkAktifCalisma+0xb74>)
 80058fe:	f004 fcf7 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d120      	bne.n	800594a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800590c:	486b      	ldr	r0, [pc, #428]	; (8005abc <checkAktifCalisma+0xb74>)
 800590e:	f004 fcef 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d118      	bne.n	800594a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005918:	2104      	movs	r1, #4
 800591a:	4868      	ldr	r0, [pc, #416]	; (8005abc <checkAktifCalisma+0xb74>)
 800591c:	f004 fce8 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d111      	bne.n	800594a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005926:	2102      	movs	r1, #2
 8005928:	4864      	ldr	r0, [pc, #400]	; (8005abc <checkAktifCalisma+0xb74>)
 800592a:	f004 fce1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005934:	2101      	movs	r1, #1
 8005936:	4861      	ldr	r0, [pc, #388]	; (8005abc <checkAktifCalisma+0xb74>)
 8005938:	f004 fcda 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d103      	bne.n	800594a <checkAktifCalisma+0xa02>
			makineStop=1;
 8005942:	4b5f      	ldr	r3, [pc, #380]	; (8005ac0 <checkAktifCalisma+0xb78>)
 8005944:	2201      	movs	r2, #1
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	e002      	b.n	8005950 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800594a:	4b5d      	ldr	r3, [pc, #372]	; (8005ac0 <checkAktifCalisma+0xb78>)
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005950:	4b5c      	ldr	r3, [pc, #368]	; (8005ac4 <checkAktifCalisma+0xb7c>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d144      	bne.n	80059e2 <checkAktifCalisma+0xa9a>
 8005958:	4b5b      	ldr	r3, [pc, #364]	; (8005ac8 <checkAktifCalisma+0xb80>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d003      	beq.n	8005968 <checkAktifCalisma+0xa20>
 8005960:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <checkAktifCalisma+0xb80>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d13c      	bne.n	80059e2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	484c      	ldr	r0, [pc, #304]	; (8005a9c <checkAktifCalisma+0xb54>)
 800596c:	f004 fcc0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d103      	bne.n	800597e <checkAktifCalisma+0xa36>
 8005976:	4b55      	ldr	r3, [pc, #340]	; (8005acc <checkAktifCalisma+0xb84>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <checkAktifCalisma+0xa4e>
 800597e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005982:	484e      	ldr	r0, [pc, #312]	; (8005abc <checkAktifCalisma+0xb74>)
 8005984:	f004 fcb4 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d129      	bne.n	80059e2 <checkAktifCalisma+0xa9a>
 800598e:	4b4f      	ldr	r3, [pc, #316]	; (8005acc <checkAktifCalisma+0xb84>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d125      	bne.n	80059e2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005996:	2104      	movs	r1, #4
 8005998:	4840      	ldr	r0, [pc, #256]	; (8005a9c <checkAktifCalisma+0xb54>)
 800599a:	f004 fca9 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d003      	beq.n	80059ac <checkAktifCalisma+0xa64>
 80059a4:	4b4a      	ldr	r3, [pc, #296]	; (8005ad0 <checkAktifCalisma+0xb88>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11a      	bne.n	80059e2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059ac:	2102      	movs	r1, #2
 80059ae:	483b      	ldr	r0, [pc, #236]	; (8005a9c <checkAktifCalisma+0xb54>)
 80059b0:	f004 fc9e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d113      	bne.n	80059e2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80059ba:	4b46      	ldr	r3, [pc, #280]	; (8005ad4 <checkAktifCalisma+0xb8c>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f083 0301 	eor.w	r3, r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00c      	beq.n	80059e2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80059c8:	4b3d      	ldr	r3, [pc, #244]	; (8005ac0 <checkAktifCalisma+0xb78>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80059d0:	4b41      	ldr	r3, [pc, #260]	; (8005ad8 <checkAktifCalisma+0xb90>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80059d6:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <checkAktifCalisma+0xb68>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a40      	ldr	r2, [pc, #256]	; (8005adc <checkAktifCalisma+0xb94>)
 80059dc:	6013      	str	r3, [r2, #0]
			bekle();
 80059de:	f7ff f901 	bl	8004be4 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80059e2:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <checkAktifCalisma+0xb68>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <checkAktifCalisma+0xb94>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	4a3c      	ldr	r2, [pc, #240]	; (8005ae0 <checkAktifCalisma+0xb98>)
 80059ee:	7812      	ldrb	r2, [r2, #0]
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d211      	bcs.n	8005a18 <checkAktifCalisma+0xad0>
 80059f4:	2104      	movs	r1, #4
 80059f6:	4829      	ldr	r0, [pc, #164]	; (8005a9c <checkAktifCalisma+0xb54>)
 80059f8:	f004 fc7a 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <checkAktifCalisma+0xad0>
 8005a02:	4b33      	ldr	r3, [pc, #204]	; (8005ad0 <checkAktifCalisma+0xb88>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <checkAktifCalisma+0xad0>
 8005a0a:	4b2d      	ldr	r3, [pc, #180]	; (8005ac0 <checkAktifCalisma+0xb78>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f083 0301 	eor.w	r3, r3, #1
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005a18:	4b2f      	ldr	r3, [pc, #188]	; (8005ad8 <checkAktifCalisma+0xb90>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a1e:	4b29      	ldr	r3, [pc, #164]	; (8005ac4 <checkAktifCalisma+0xb7c>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d160      	bne.n	8005ae8 <checkAktifCalisma+0xba0>
 8005a26:	4b28      	ldr	r3, [pc, #160]	; (8005ac8 <checkAktifCalisma+0xb80>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d003      	beq.n	8005a36 <checkAktifCalisma+0xaee>
 8005a2e:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <checkAktifCalisma+0xb80>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d158      	bne.n	8005ae8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a36:	2104      	movs	r1, #4
 8005a38:	4818      	ldr	r0, [pc, #96]	; (8005a9c <checkAktifCalisma+0xb54>)
 8005a3a:	f004 fc59 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d003      	beq.n	8005a4c <checkAktifCalisma+0xb04>
 8005a44:	4b22      	ldr	r3, [pc, #136]	; (8005ad0 <checkAktifCalisma+0xb88>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d14d      	bne.n	8005ae8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	4813      	ldr	r0, [pc, #76]	; (8005a9c <checkAktifCalisma+0xb54>)
 8005a50:	f004 fc4e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d146      	bne.n	8005ae8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a5a:	2180      	movs	r1, #128	; 0x80
 8005a5c:	480f      	ldr	r0, [pc, #60]	; (8005a9c <checkAktifCalisma+0xb54>)
 8005a5e:	f004 fc47 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d103      	bne.n	8005a70 <checkAktifCalisma+0xb28>
 8005a68:	4b18      	ldr	r3, [pc, #96]	; (8005acc <checkAktifCalisma+0xb84>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <checkAktifCalisma+0xb40>
 8005a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a74:	4811      	ldr	r0, [pc, #68]	; (8005abc <checkAktifCalisma+0xb74>)
 8005a76:	f004 fc3b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d133      	bne.n	8005ae8 <checkAktifCalisma+0xba0>
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <checkAktifCalisma+0xb84>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d12f      	bne.n	8005ae8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005a88:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <checkAktifCalisma+0xb78>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d02b      	beq.n	8005ae8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005a90:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <checkAktifCalisma+0xb9c>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	e02a      	b.n	8005aee <checkAktifCalisma+0xba6>
 8005a98:	20000b23 	.word	0x20000b23
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	20000b27 	.word	0x20000b27
 8005aa4:	20000b3e 	.word	0x20000b3e
 8005aa8:	20000b3f 	.word	0x20000b3f
 8005aac:	20000b1f 	.word	0x20000b1f
 8005ab0:	20000ac8 	.word	0x20000ac8
 8005ab4:	20000ad4 	.word	0x20000ad4
 8005ab8:	20000b02 	.word	0x20000b02
 8005abc:	40010c00 	.word	0x40010c00
 8005ac0:	20000b2e 	.word	0x20000b2e
 8005ac4:	20000af5 	.word	0x20000af5
 8005ac8:	20000af4 	.word	0x20000af4
 8005acc:	20000af8 	.word	0x20000af8
 8005ad0:	20000af2 	.word	0x20000af2
 8005ad4:	20000b1b 	.word	0x20000b1b
 8005ad8:	20000b2f 	.word	0x20000b2f
 8005adc:	20000acc 	.word	0x20000acc
 8005ae0:	20000b05 	.word	0x20000b05
 8005ae4:	20000b30 	.word	0x20000b30
		} else {
			kapi1butonkontrol=0;
 8005ae8:	4b8b      	ldr	r3, [pc, #556]	; (8005d18 <checkAktifCalisma+0xdd0>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005aee:	4b8b      	ldr	r3, [pc, #556]	; (8005d1c <checkAktifCalisma+0xdd4>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d121      	bne.n	8005b3a <checkAktifCalisma+0xbf2>
 8005af6:	4b8a      	ldr	r3, [pc, #552]	; (8005d20 <checkAktifCalisma+0xdd8>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d003      	beq.n	8005b06 <checkAktifCalisma+0xbbe>
 8005afe:	4b88      	ldr	r3, [pc, #544]	; (8005d20 <checkAktifCalisma+0xdd8>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d119      	bne.n	8005b3a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b06:	2104      	movs	r1, #4
 8005b08:	4886      	ldr	r0, [pc, #536]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005b0a:	f004 fbf1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d003      	beq.n	8005b1c <checkAktifCalisma+0xbd4>
 8005b14:	4b84      	ldr	r3, [pc, #528]	; (8005d28 <checkAktifCalisma+0xde0>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10e      	bne.n	8005b3a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005b1c:	2102      	movs	r1, #2
 8005b1e:	4881      	ldr	r0, [pc, #516]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005b20:	f004 fbe6 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d107      	bne.n	8005b3a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005b2a:	4b80      	ldr	r3, [pc, #512]	; (8005d2c <checkAktifCalisma+0xde4>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005b32:	4b7f      	ldr	r3, [pc, #508]	; (8005d30 <checkAktifCalisma+0xde8>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	e002      	b.n	8005b40 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005b3a:	4b7d      	ldr	r3, [pc, #500]	; (8005d30 <checkAktifCalisma+0xde8>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005b40:	4b75      	ldr	r3, [pc, #468]	; (8005d18 <checkAktifCalisma+0xdd0>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d107      	bne.n	8005b58 <checkAktifCalisma+0xc10>
 8005b48:	4b79      	ldr	r3, [pc, #484]	; (8005d30 <checkAktifCalisma+0xde8>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <checkAktifCalisma+0xc10>
 8005b50:	4b78      	ldr	r3, [pc, #480]	; (8005d34 <checkAktifCalisma+0xdec>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005b58:	2201      	movs	r2, #1
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	4876      	ldr	r0, [pc, #472]	; (8005d38 <checkAktifCalisma+0xdf0>)
 8005b5e:	f004 fbde 	bl	800a31e <HAL_GPIO_WritePin>
 8005b62:	e004      	b.n	8005b6e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b64:	2200      	movs	r2, #0
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	4873      	ldr	r0, [pc, #460]	; (8005d38 <checkAktifCalisma+0xdf0>)
 8005b6a:	f004 fbd8 	bl	800a31e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b6e:	4b73      	ldr	r3, [pc, #460]	; (8005d3c <checkAktifCalisma+0xdf4>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d141      	bne.n	8005bfa <checkAktifCalisma+0xcb2>
 8005b76:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <checkAktifCalisma+0xdd8>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d003      	beq.n	8005b86 <checkAktifCalisma+0xc3e>
 8005b7e:	4b68      	ldr	r3, [pc, #416]	; (8005d20 <checkAktifCalisma+0xdd8>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d139      	bne.n	8005bfa <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b8a:	4866      	ldr	r0, [pc, #408]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005b8c:	f004 fbb0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <checkAktifCalisma+0xc56>
 8005b96:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <checkAktifCalisma+0xdf8>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <checkAktifCalisma+0xc6e>
 8005b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ba2:	4868      	ldr	r0, [pc, #416]	; (8005d44 <checkAktifCalisma+0xdfc>)
 8005ba4:	f004 fba4 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d125      	bne.n	8005bfa <checkAktifCalisma+0xcb2>
 8005bae:	4b64      	ldr	r3, [pc, #400]	; (8005d40 <checkAktifCalisma+0xdf8>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d121      	bne.n	8005bfa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	485a      	ldr	r0, [pc, #360]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005bba:	f004 fb99 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d11a      	bne.n	8005bfa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005bc4:	2104      	movs	r1, #4
 8005bc6:	4857      	ldr	r0, [pc, #348]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005bc8:	f004 fb92 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d113      	bne.n	8005bfa <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005bd2:	4b56      	ldr	r3, [pc, #344]	; (8005d2c <checkAktifCalisma+0xde4>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00f      	beq.n	8005bfa <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005bda:	4b5b      	ldr	r3, [pc, #364]	; (8005d48 <checkAktifCalisma+0xe00>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f083 0301 	eor.w	r3, r3, #1
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005be8:	4b58      	ldr	r3, [pc, #352]	; (8005d4c <checkAktifCalisma+0xe04>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005bee:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <checkAktifCalisma+0xe08>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a58      	ldr	r2, [pc, #352]	; (8005d54 <checkAktifCalisma+0xe0c>)
 8005bf4:	6013      	str	r3, [r2, #0]
			bekle();
 8005bf6:	f7fe fff5 	bl	8004be4 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005bfa:	4b55      	ldr	r3, [pc, #340]	; (8005d50 <checkAktifCalisma+0xe08>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b55      	ldr	r3, [pc, #340]	; (8005d54 <checkAktifCalisma+0xe0c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	4a54      	ldr	r2, [pc, #336]	; (8005d58 <checkAktifCalisma+0xe10>)
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d20d      	bcs.n	8005c28 <checkAktifCalisma+0xce0>
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	4845      	ldr	r0, [pc, #276]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005c10:	f004 fb6e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d006      	beq.n	8005c28 <checkAktifCalisma+0xce0>
 8005c1a:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <checkAktifCalisma+0xde4>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f083 0301 	eor.w	r3, r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005c28:	4b48      	ldr	r3, [pc, #288]	; (8005d4c <checkAktifCalisma+0xe04>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c2e:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <checkAktifCalisma+0xdf4>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d135      	bne.n	8005ca2 <checkAktifCalisma+0xd5a>
 8005c36:	4b3a      	ldr	r3, [pc, #232]	; (8005d20 <checkAktifCalisma+0xdd8>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d003      	beq.n	8005c46 <checkAktifCalisma+0xcfe>
 8005c3e:	4b38      	ldr	r3, [pc, #224]	; (8005d20 <checkAktifCalisma+0xdd8>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d12d      	bne.n	8005ca2 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c4a:	4836      	ldr	r0, [pc, #216]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005c4c:	f004 fb50 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <checkAktifCalisma+0xd16>
 8005c56:	4b3a      	ldr	r3, [pc, #232]	; (8005d40 <checkAktifCalisma+0xdf8>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <checkAktifCalisma+0xd2e>
 8005c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c62:	4838      	ldr	r0, [pc, #224]	; (8005d44 <checkAktifCalisma+0xdfc>)
 8005c64:	f004 fb44 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d119      	bne.n	8005ca2 <checkAktifCalisma+0xd5a>
 8005c6e:	4b34      	ldr	r3, [pc, #208]	; (8005d40 <checkAktifCalisma+0xdf8>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d115      	bne.n	8005ca2 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c76:	2102      	movs	r1, #2
 8005c78:	482a      	ldr	r0, [pc, #168]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005c7a:	f004 fb39 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10e      	bne.n	8005ca2 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c84:	2104      	movs	r1, #4
 8005c86:	4827      	ldr	r0, [pc, #156]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005c88:	f004 fb32 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d107      	bne.n	8005ca2 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005c92:	4b26      	ldr	r3, [pc, #152]	; (8005d2c <checkAktifCalisma+0xde4>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005c9a:	4b30      	ldr	r3, [pc, #192]	; (8005d5c <checkAktifCalisma+0xe14>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e002      	b.n	8005ca8 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005ca2:	4b2e      	ldr	r3, [pc, #184]	; (8005d5c <checkAktifCalisma+0xe14>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ca8:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <checkAktifCalisma+0xdf4>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d11d      	bne.n	8005cec <checkAktifCalisma+0xda4>
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <checkAktifCalisma+0xdd8>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d003      	beq.n	8005cc0 <checkAktifCalisma+0xd78>
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <checkAktifCalisma+0xdd8>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d115      	bne.n	8005cec <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	4818      	ldr	r0, [pc, #96]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005cc4:	f004 fb14 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10e      	bne.n	8005cec <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005cce:	2104      	movs	r1, #4
 8005cd0:	4814      	ldr	r0, [pc, #80]	; (8005d24 <checkAktifCalisma+0xddc>)
 8005cd2:	f004 fb0d 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d107      	bne.n	8005cec <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005cdc:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <checkAktifCalisma+0xde4>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005ce4:	4b1e      	ldr	r3, [pc, #120]	; (8005d60 <checkAktifCalisma+0xe18>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <checkAktifCalisma+0xe18>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005cf2:	4b1a      	ldr	r3, [pc, #104]	; (8005d5c <checkAktifCalisma+0xe14>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <checkAktifCalisma+0xdc2>
 8005cfa:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <checkAktifCalisma+0xe18>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <checkAktifCalisma+0xdc2>
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <checkAktifCalisma+0xe04>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d02c      	beq.n	8005d64 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	2140      	movs	r1, #64	; 0x40
 8005d0e:	480a      	ldr	r0, [pc, #40]	; (8005d38 <checkAktifCalisma+0xdf0>)
 8005d10:	f004 fb05 	bl	800a31e <HAL_GPIO_WritePin>
 8005d14:	e02b      	b.n	8005d6e <checkAktifCalisma+0xe26>
 8005d16:	bf00      	nop
 8005d18:	20000b30 	.word	0x20000b30
 8005d1c:	20000af5 	.word	0x20000af5
 8005d20:	20000af4 	.word	0x20000af4
 8005d24:	40011000 	.word	0x40011000
 8005d28:	20000af2 	.word	0x20000af2
 8005d2c:	20000b2e 	.word	0x20000b2e
 8005d30:	20000b31 	.word	0x20000b31
 8005d34:	20000b2f 	.word	0x20000b2f
 8005d38:	40010800 	.word	0x40010800
 8005d3c:	20000af6 	.word	0x20000af6
 8005d40:	20000af8 	.word	0x20000af8
 8005d44:	40010c00 	.word	0x40010c00
 8005d48:	20000b1b 	.word	0x20000b1b
 8005d4c:	20000b32 	.word	0x20000b32
 8005d50:	20000ac8 	.word	0x20000ac8
 8005d54:	20000acc 	.word	0x20000acc
 8005d58:	20000b06 	.word	0x20000b06
 8005d5c:	20000b33 	.word	0x20000b33
 8005d60:	20000b34 	.word	0x20000b34
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d64:	2200      	movs	r2, #0
 8005d66:	2140      	movs	r1, #64	; 0x40
 8005d68:	488d      	ldr	r0, [pc, #564]	; (8005fa0 <checkAktifCalisma+0x1058>)
 8005d6a:	f004 fad8 	bl	800a31e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005d6e:	4b8d      	ldr	r3, [pc, #564]	; (8005fa4 <checkAktifCalisma+0x105c>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <checkAktifCalisma+0xe36>
 8005d76:	4b8b      	ldr	r3, [pc, #556]	; (8005fa4 <checkAktifCalisma+0x105c>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d115      	bne.n	8005daa <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005d7e:	2104      	movs	r1, #4
 8005d80:	4889      	ldr	r0, [pc, #548]	; (8005fa8 <checkAktifCalisma+0x1060>)
 8005d82:	f004 fab5 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d003      	beq.n	8005d94 <checkAktifCalisma+0xe4c>
 8005d8c:	4b87      	ldr	r3, [pc, #540]	; (8005fac <checkAktifCalisma+0x1064>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005d94:	2102      	movs	r1, #2
 8005d96:	4884      	ldr	r0, [pc, #528]	; (8005fa8 <checkAktifCalisma+0x1060>)
 8005d98:	f004 faaa 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d103      	bne.n	8005daa <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005da2:	4b83      	ldr	r3, [pc, #524]	; (8005fb0 <checkAktifCalisma+0x1068>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e002      	b.n	8005db0 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005daa:	4b81      	ldr	r3, [pc, #516]	; (8005fb0 <checkAktifCalisma+0x1068>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005db0:	4b7c      	ldr	r3, [pc, #496]	; (8005fa4 <checkAktifCalisma+0x105c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d003      	beq.n	8005dc0 <checkAktifCalisma+0xe78>
 8005db8:	4b7a      	ldr	r3, [pc, #488]	; (8005fa4 <checkAktifCalisma+0x105c>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d111      	bne.n	8005de4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005dc0:	2102      	movs	r1, #2
 8005dc2:	4879      	ldr	r0, [pc, #484]	; (8005fa8 <checkAktifCalisma+0x1060>)
 8005dc4:	f004 fa94 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10a      	bne.n	8005de4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005dce:	2104      	movs	r1, #4
 8005dd0:	4875      	ldr	r0, [pc, #468]	; (8005fa8 <checkAktifCalisma+0x1060>)
 8005dd2:	f004 fa8d 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d103      	bne.n	8005de4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005ddc:	4b75      	ldr	r3, [pc, #468]	; (8005fb4 <checkAktifCalisma+0x106c>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	e002      	b.n	8005dea <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005de4:	4b73      	ldr	r3, [pc, #460]	; (8005fb4 <checkAktifCalisma+0x106c>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005dea:	4b71      	ldr	r3, [pc, #452]	; (8005fb0 <checkAktifCalisma+0x1068>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00f      	beq.n	8005e12 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005df2:	4b71      	ldr	r3, [pc, #452]	; (8005fb8 <checkAktifCalisma+0x1070>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10b      	bne.n	8005e12 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dfe:	486f      	ldr	r0, [pc, #444]	; (8005fbc <checkAktifCalisma+0x1074>)
 8005e00:	f004 fa76 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005e0a:	4b6d      	ldr	r3, [pc, #436]	; (8005fc0 <checkAktifCalisma+0x1078>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e002      	b.n	8005e18 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005e12:	4b6b      	ldr	r3, [pc, #428]	; (8005fc0 <checkAktifCalisma+0x1078>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005e18:	4b66      	ldr	r3, [pc, #408]	; (8005fb4 <checkAktifCalisma+0x106c>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00f      	beq.n	8005e40 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005e20:	4b65      	ldr	r3, [pc, #404]	; (8005fb8 <checkAktifCalisma+0x1070>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10b      	bne.n	8005e40 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e2c:	4863      	ldr	r0, [pc, #396]	; (8005fbc <checkAktifCalisma+0x1074>)
 8005e2e:	f004 fa5f 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005e38:	4b62      	ldr	r3, [pc, #392]	; (8005fc4 <checkAktifCalisma+0x107c>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005e40:	4b60      	ldr	r3, [pc, #384]	; (8005fc4 <checkAktifCalisma+0x107c>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e46:	4b60      	ldr	r3, [pc, #384]	; (8005fc8 <checkAktifCalisma+0x1080>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d137      	bne.n	8005ebe <checkAktifCalisma+0xf76>
 8005e4e:	4b5f      	ldr	r3, [pc, #380]	; (8005fcc <checkAktifCalisma+0x1084>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d003      	beq.n	8005e5e <checkAktifCalisma+0xf16>
 8005e56:	4b5d      	ldr	r3, [pc, #372]	; (8005fcc <checkAktifCalisma+0x1084>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d12f      	bne.n	8005ebe <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e5e:	4b54      	ldr	r3, [pc, #336]	; (8005fb0 <checkAktifCalisma+0x1068>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <checkAktifCalisma+0xf26>
 8005e66:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <checkAktifCalisma+0x106c>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d027      	beq.n	8005ebe <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e72:	484d      	ldr	r0, [pc, #308]	; (8005fa8 <checkAktifCalisma+0x1060>)
 8005e74:	f004 fa3c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <checkAktifCalisma+0xf3e>
 8005e7e:	4b4e      	ldr	r3, [pc, #312]	; (8005fb8 <checkAktifCalisma+0x1070>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e86:	4b4e      	ldr	r3, [pc, #312]	; (8005fc0 <checkAktifCalisma+0x1078>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <checkAktifCalisma+0xf4e>
 8005e8e:	4b4d      	ldr	r3, [pc, #308]	; (8005fc4 <checkAktifCalisma+0x107c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d013      	beq.n	8005ebe <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005e96:	4b4e      	ldr	r3, [pc, #312]	; (8005fd0 <checkAktifCalisma+0x1088>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00f      	beq.n	8005ebe <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005e9e:	4b4d      	ldr	r3, [pc, #308]	; (8005fd4 <checkAktifCalisma+0x108c>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	f083 0301 	eor.w	r3, r3, #1
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005eac:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <checkAktifCalisma+0x1090>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005eb2:	4b4a      	ldr	r3, [pc, #296]	; (8005fdc <checkAktifCalisma+0x1094>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a4a      	ldr	r2, [pc, #296]	; (8005fe0 <checkAktifCalisma+0x1098>)
 8005eb8:	6013      	str	r3, [r2, #0]
			bekle();
 8005eba:	f7fe fe93 	bl	8004be4 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005ebe:	4b47      	ldr	r3, [pc, #284]	; (8005fdc <checkAktifCalisma+0x1094>)
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <checkAktifCalisma+0x1098>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	4a46      	ldr	r2, [pc, #280]	; (8005fe4 <checkAktifCalisma+0x109c>)
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d214      	bcs.n	8005efa <checkAktifCalisma+0xfb2>
 8005ed0:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <checkAktifCalisma+0x1068>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <checkAktifCalisma+0xfa4>
 8005ede:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <checkAktifCalisma+0x106c>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f083 0301 	eor.w	r3, r3, #1
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <checkAktifCalisma+0xfb2>
 8005eec:	4b38      	ldr	r3, [pc, #224]	; (8005fd0 <checkAktifCalisma+0x1088>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f083 0301 	eor.w	r3, r3, #1
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005efa:	4b37      	ldr	r3, [pc, #220]	; (8005fd8 <checkAktifCalisma+0x1090>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f00:	4b31      	ldr	r3, [pc, #196]	; (8005fc8 <checkAktifCalisma+0x1080>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d12b      	bne.n	8005f60 <checkAktifCalisma+0x1018>
 8005f08:	4b30      	ldr	r3, [pc, #192]	; (8005fcc <checkAktifCalisma+0x1084>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d003      	beq.n	8005f18 <checkAktifCalisma+0xfd0>
 8005f10:	4b2e      	ldr	r3, [pc, #184]	; (8005fcc <checkAktifCalisma+0x1084>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d123      	bne.n	8005f60 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <checkAktifCalisma+0x1068>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <checkAktifCalisma+0xfe0>
 8005f20:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <checkAktifCalisma+0x106c>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f2c:	481e      	ldr	r0, [pc, #120]	; (8005fa8 <checkAktifCalisma+0x1060>)
 8005f2e:	f004 f9df 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d103      	bne.n	8005f40 <checkAktifCalisma+0xff8>
 8005f38:	4b1f      	ldr	r3, [pc, #124]	; (8005fb8 <checkAktifCalisma+0x1070>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005f40:	4b1f      	ldr	r3, [pc, #124]	; (8005fc0 <checkAktifCalisma+0x1078>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d103      	bne.n	8005f50 <checkAktifCalisma+0x1008>
 8005f48:	4b1e      	ldr	r3, [pc, #120]	; (8005fc4 <checkAktifCalisma+0x107c>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d007      	beq.n	8005f60 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005f50:	4b1f      	ldr	r3, [pc, #124]	; (8005fd0 <checkAktifCalisma+0x1088>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005f58:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <checkAktifCalisma+0x10a0>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e002      	b.n	8005f66 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005f60:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <checkAktifCalisma+0x10a0>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f66:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <checkAktifCalisma+0x1080>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d140      	bne.n	8005ff0 <checkAktifCalisma+0x10a8>
 8005f6e:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <checkAktifCalisma+0x1084>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d003      	beq.n	8005f7e <checkAktifCalisma+0x1036>
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <checkAktifCalisma+0x1084>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d138      	bne.n	8005ff0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <checkAktifCalisma+0x1068>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d103      	bne.n	8005f8e <checkAktifCalisma+0x1046>
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <checkAktifCalisma+0x106c>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d030      	beq.n	8005ff0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005f8e:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <checkAktifCalisma+0x1088>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d02c      	beq.n	8005ff0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <checkAktifCalisma+0x10a4>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e02b      	b.n	8005ff6 <checkAktifCalisma+0x10ae>
 8005f9e:	bf00      	nop
 8005fa0:	40010800 	.word	0x40010800
 8005fa4:	20000af9 	.word	0x20000af9
 8005fa8:	40011000 	.word	0x40011000
 8005fac:	20000af2 	.word	0x20000af2
 8005fb0:	20000b38 	.word	0x20000b38
 8005fb4:	20000b39 	.word	0x20000b39
 8005fb8:	20000af8 	.word	0x20000af8
 8005fbc:	40010c00 	.word	0x40010c00
 8005fc0:	20000b48 	.word	0x20000b48
 8005fc4:	20000b49 	.word	0x20000b49
 8005fc8:	20000af7 	.word	0x20000af7
 8005fcc:	20000af4 	.word	0x20000af4
 8005fd0:	20000b2e 	.word	0x20000b2e
 8005fd4:	20000b1b 	.word	0x20000b1b
 8005fd8:	20000b35 	.word	0x20000b35
 8005fdc:	20000ac8 	.word	0x20000ac8
 8005fe0:	20000acc 	.word	0x20000acc
 8005fe4:	20000b07 	.word	0x20000b07
 8005fe8:	20000b36 	.word	0x20000b36
 8005fec:	20000b37 	.word	0x20000b37
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005ff0:	4b8b      	ldr	r3, [pc, #556]	; (8006220 <checkAktifCalisma+0x12d8>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005ff6:	4b8b      	ldr	r3, [pc, #556]	; (8006224 <checkAktifCalisma+0x12dc>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <checkAktifCalisma+0x10c6>
 8005ffe:	4b8a      	ldr	r3, [pc, #552]	; (8006228 <checkAktifCalisma+0x12e0>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <checkAktifCalisma+0x10c6>
 8006006:	4b86      	ldr	r3, [pc, #536]	; (8006220 <checkAktifCalisma+0x12d8>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800600e:	2201      	movs	r2, #1
 8006010:	2120      	movs	r1, #32
 8006012:	4886      	ldr	r0, [pc, #536]	; (800622c <checkAktifCalisma+0x12e4>)
 8006014:	f004 f983 	bl	800a31e <HAL_GPIO_WritePin>
 8006018:	e004      	b.n	8006024 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800601a:	2200      	movs	r2, #0
 800601c:	2120      	movs	r1, #32
 800601e:	4883      	ldr	r0, [pc, #524]	; (800622c <checkAktifCalisma+0x12e4>)
 8006020:	f004 f97d 	bl	800a31e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006024:	4b82      	ldr	r3, [pc, #520]	; (8006230 <checkAktifCalisma+0x12e8>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00e      	beq.n	800604a <checkAktifCalisma+0x1102>
 800602c:	2102      	movs	r1, #2
 800602e:	4881      	ldr	r0, [pc, #516]	; (8006234 <checkAktifCalisma+0x12ec>)
 8006030:	f004 f95e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006034:	4603      	mov	r3, r0
 8006036:	2b01      	cmp	r3, #1
 8006038:	d107      	bne.n	800604a <checkAktifCalisma+0x1102>
 800603a:	4b7f      	ldr	r3, [pc, #508]	; (8006238 <checkAktifCalisma+0x12f0>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <checkAktifCalisma+0x1102>
 8006042:	4b7e      	ldr	r3, [pc, #504]	; (800623c <checkAktifCalisma+0x12f4>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d112      	bne.n	8006070 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800604a:	4b7d      	ldr	r3, [pc, #500]	; (8006240 <checkAktifCalisma+0x12f8>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d066      	beq.n	8006120 <checkAktifCalisma+0x11d8>
 8006052:	2104      	movs	r1, #4
 8006054:	4877      	ldr	r0, [pc, #476]	; (8006234 <checkAktifCalisma+0x12ec>)
 8006056:	f004 f94b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800605a:	4603      	mov	r3, r0
 800605c:	2b01      	cmp	r3, #1
 800605e:	d15f      	bne.n	8006120 <checkAktifCalisma+0x11d8>
 8006060:	4b75      	ldr	r3, [pc, #468]	; (8006238 <checkAktifCalisma+0x12f0>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d05b      	beq.n	8006120 <checkAktifCalisma+0x11d8>
 8006068:	4b74      	ldr	r3, [pc, #464]	; (800623c <checkAktifCalisma+0x12f4>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d057      	beq.n	8006120 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006070:	4b74      	ldr	r3, [pc, #464]	; (8006244 <checkAktifCalisma+0x12fc>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	4b72      	ldr	r3, [pc, #456]	; (8006244 <checkAktifCalisma+0x12fc>)
 800607a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 800607c:	4b71      	ldr	r3, [pc, #452]	; (8006244 <checkAktifCalisma+0x12fc>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b09      	cmp	r3, #9
 8006082:	d908      	bls.n	8006096 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006084:	4b6f      	ldr	r3, [pc, #444]	; (8006244 <checkAktifCalisma+0x12fc>)
 8006086:	2200      	movs	r2, #0
 8006088:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800608a:	4b6f      	ldr	r3, [pc, #444]	; (8006248 <checkAktifCalisma+0x1300>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	b2da      	uxtb	r2, r3
 8006092:	4b6d      	ldr	r3, [pc, #436]	; (8006248 <checkAktifCalisma+0x1300>)
 8006094:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006096:	4b6c      	ldr	r3, [pc, #432]	; (8006248 <checkAktifCalisma+0x1300>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b09      	cmp	r3, #9
 800609c:	d908      	bls.n	80060b0 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800609e:	4b6a      	ldr	r3, [pc, #424]	; (8006248 <checkAktifCalisma+0x1300>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80060a4:	4b69      	ldr	r3, [pc, #420]	; (800624c <checkAktifCalisma+0x1304>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	4b67      	ldr	r3, [pc, #412]	; (800624c <checkAktifCalisma+0x1304>)
 80060ae:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80060b0:	4b66      	ldr	r3, [pc, #408]	; (800624c <checkAktifCalisma+0x1304>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b09      	cmp	r3, #9
 80060b6:	d908      	bls.n	80060ca <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80060b8:	4b64      	ldr	r3, [pc, #400]	; (800624c <checkAktifCalisma+0x1304>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80060be:	4b64      	ldr	r3, [pc, #400]	; (8006250 <checkAktifCalisma+0x1308>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b62      	ldr	r3, [pc, #392]	; (8006250 <checkAktifCalisma+0x1308>)
 80060c8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80060ca:	4b61      	ldr	r3, [pc, #388]	; (8006250 <checkAktifCalisma+0x1308>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	d908      	bls.n	80060e4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80060d2:	4b5f      	ldr	r3, [pc, #380]	; (8006250 <checkAktifCalisma+0x1308>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80060d8:	4b5e      	ldr	r3, [pc, #376]	; (8006254 <checkAktifCalisma+0x130c>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b5c      	ldr	r3, [pc, #368]	; (8006254 <checkAktifCalisma+0x130c>)
 80060e2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80060e4:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <checkAktifCalisma+0x130c>)
 80060e6:	781a      	ldrb	r2, [r3, #0]
 80060e8:	4b5b      	ldr	r3, [pc, #364]	; (8006258 <checkAktifCalisma+0x1310>)
 80060ea:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80060ee:	4b58      	ldr	r3, [pc, #352]	; (8006250 <checkAktifCalisma+0x1308>)
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	4b59      	ldr	r3, [pc, #356]	; (8006258 <checkAktifCalisma+0x1310>)
 80060f4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80060f6:	4b55      	ldr	r3, [pc, #340]	; (800624c <checkAktifCalisma+0x1304>)
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	4b57      	ldr	r3, [pc, #348]	; (8006258 <checkAktifCalisma+0x1310>)
 80060fc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80060fe:	4b52      	ldr	r3, [pc, #328]	; (8006248 <checkAktifCalisma+0x1300>)
 8006100:	781a      	ldrb	r2, [r3, #0]
 8006102:	4b55      	ldr	r3, [pc, #340]	; (8006258 <checkAktifCalisma+0x1310>)
 8006104:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006106:	4b4f      	ldr	r3, [pc, #316]	; (8006244 <checkAktifCalisma+0x12fc>)
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	4b53      	ldr	r3, [pc, #332]	; (8006258 <checkAktifCalisma+0x1310>)
 800610c:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800610e:	4b53      	ldr	r3, [pc, #332]	; (800625c <checkAktifCalisma+0x1314>)
 8006110:	2201      	movs	r2, #1
 8006112:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006114:	4b46      	ldr	r3, [pc, #280]	; (8006230 <checkAktifCalisma+0x12e8>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800611a:	4b49      	ldr	r3, [pc, #292]	; (8006240 <checkAktifCalisma+0x12f8>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006120:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006124:	484e      	ldr	r0, [pc, #312]	; (8006260 <checkAktifCalisma+0x1318>)
 8006126:	f004 f8e3 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d016      	beq.n	800615e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006134:	484a      	ldr	r0, [pc, #296]	; (8006260 <checkAktifCalisma+0x1318>)
 8006136:	f004 f8db 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006144:	4846      	ldr	r0, [pc, #280]	; (8006260 <checkAktifCalisma+0x1318>)
 8006146:	f004 f8d3 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	4838      	ldr	r0, [pc, #224]	; (8006234 <checkAktifCalisma+0x12ec>)
 8006154:	f004 f8cc 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <checkAktifCalisma+0x121e>
			startBasili=1;
 800615e:	4b41      	ldr	r3, [pc, #260]	; (8006264 <checkAktifCalisma+0x131c>)
 8006160:	2201      	movs	r2, #1
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e002      	b.n	800616c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006166:	4b3f      	ldr	r3, [pc, #252]	; (8006264 <checkAktifCalisma+0x131c>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800616c:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <checkAktifCalisma+0x131c>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d016      	beq.n	80061a2 <checkAktifCalisma+0x125a>
 8006174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006178:	4839      	ldr	r0, [pc, #228]	; (8006260 <checkAktifCalisma+0x1318>)
 800617a:	f004 f8b9 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800617e:	4603      	mov	r3, r0
 8006180:	2b01      	cmp	r3, #1
 8006182:	d10e      	bne.n	80061a2 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006184:	4b38      	ldr	r3, [pc, #224]	; (8006268 <checkAktifCalisma+0x1320>)
 8006186:	2201      	movs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800618a:	2001      	movs	r0, #1
 800618c:	f7fa fdaa 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006190:	2001      	movs	r0, #1
 8006192:	f7fa fd4f 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8006196:	f002 fae7 	bl	8008768 <convertAndSendData>
			acilstophatasi=1;
 800619a:	4b34      	ldr	r3, [pc, #208]	; (800626c <checkAktifCalisma+0x1324>)
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e018      	b.n	80061d4 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80061a2:	4b32      	ldr	r3, [pc, #200]	; (800626c <checkAktifCalisma+0x1324>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d014      	beq.n	80061d4 <checkAktifCalisma+0x128c>
 80061aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061ae:	482c      	ldr	r0, [pc, #176]	; (8006260 <checkAktifCalisma+0x1318>)
 80061b0:	f004 f89e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10c      	bne.n	80061d4 <checkAktifCalisma+0x128c>
 80061ba:	4b2a      	ldr	r3, [pc, #168]	; (8006264 <checkAktifCalisma+0x131c>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f083 0301 	eor.w	r3, r3, #1
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80061c8:	4b28      	ldr	r3, [pc, #160]	; (800626c <checkAktifCalisma+0x1324>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80061ce:	2001      	movs	r0, #1
 80061d0:	f7fe fcb4 	bl	8004b3c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80061d4:	4b26      	ldr	r3, [pc, #152]	; (8006270 <checkAktifCalisma+0x1328>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f083 0301 	eor.w	r3, r3, #1
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d04e      	beq.n	8006280 <checkAktifCalisma+0x1338>
 80061e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061e6:	481e      	ldr	r0, [pc, #120]	; (8006260 <checkAktifCalisma+0x1318>)
 80061e8:	f004 f882 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <checkAktifCalisma+0x12b2>
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <checkAktifCalisma+0x132c>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d042      	beq.n	8006280 <checkAktifCalisma+0x1338>
 80061fa:	4b1f      	ldr	r3, [pc, #124]	; (8006278 <checkAktifCalisma+0x1330>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d13e      	bne.n	8006280 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006202:	4b19      	ldr	r3, [pc, #100]	; (8006268 <checkAktifCalisma+0x1320>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006208:	2002      	movs	r0, #2
 800620a:	f7fa fd6b 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(2);
 800620e:	2002      	movs	r0, #2
 8006210:	f7fa fd10 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8006214:	f002 faa8 	bl	8008768 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006218:	4b18      	ldr	r3, [pc, #96]	; (800627c <checkAktifCalisma+0x1334>)
 800621a:	2201      	movs	r2, #1
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e047      	b.n	80062b0 <checkAktifCalisma+0x1368>
 8006220:	20000b37 	.word	0x20000b37
 8006224:	20000b36 	.word	0x20000b36
 8006228:	20000b35 	.word	0x20000b35
 800622c:	40010800 	.word	0x40010800
 8006230:	20000b2b 	.word	0x20000b2b
 8006234:	40011000 	.word	0x40011000
 8006238:	20000af2 	.word	0x20000af2
 800623c:	20000b2e 	.word	0x20000b2e
 8006240:	20000b2c 	.word	0x20000b2c
 8006244:	20000ae9 	.word	0x20000ae9
 8006248:	20000aea 	.word	0x20000aea
 800624c:	20000000 	.word	0x20000000
 8006250:	20000001 	.word	0x20000001
 8006254:	20000aeb 	.word	0x20000aeb
 8006258:	20000a18 	.word	0x20000a18
 800625c:	20000b18 	.word	0x20000b18
 8006260:	40010c00 	.word	0x40010c00
 8006264:	20000b3a 	.word	0x20000b3a
 8006268:	20000b41 	.word	0x20000b41
 800626c:	20000b3c 	.word	0x20000b3c
 8006270:	20000b43 	.word	0x20000b43
 8006274:	20000b4d 	.word	0x20000b4d
 8006278:	20000af0 	.word	0x20000af0
 800627c:	20000b3d 	.word	0x20000b3d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006280:	4b9b      	ldr	r3, [pc, #620]	; (80064f0 <checkAktifCalisma+0x15a8>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d013      	beq.n	80062b0 <checkAktifCalisma+0x1368>
 8006288:	4b9a      	ldr	r3, [pc, #616]	; (80064f4 <checkAktifCalisma+0x15ac>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00f      	beq.n	80062b0 <checkAktifCalisma+0x1368>
 8006290:	4b99      	ldr	r3, [pc, #612]	; (80064f8 <checkAktifCalisma+0x15b0>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f083 0301 	eor.w	r3, r3, #1
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800629e:	4b94      	ldr	r3, [pc, #592]	; (80064f0 <checkAktifCalisma+0x15a8>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80062a4:	4b95      	ldr	r3, [pc, #596]	; (80064fc <checkAktifCalisma+0x15b4>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80062aa:	2002      	movs	r0, #2
 80062ac:	f7fe fc46 	bl	8004b3c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80062b0:	4b93      	ldr	r3, [pc, #588]	; (8006500 <checkAktifCalisma+0x15b8>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11e      	bne.n	80062f6 <checkAktifCalisma+0x13ae>
 80062b8:	4b92      	ldr	r3, [pc, #584]	; (8006504 <checkAktifCalisma+0x15bc>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d11a      	bne.n	80062f6 <checkAktifCalisma+0x13ae>
 80062c0:	4b91      	ldr	r3, [pc, #580]	; (8006508 <checkAktifCalisma+0x15c0>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d016      	beq.n	80062f6 <checkAktifCalisma+0x13ae>
 80062c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062cc:	488f      	ldr	r0, [pc, #572]	; (800650c <checkAktifCalisma+0x15c4>)
 80062ce:	f004 f80f 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10e      	bne.n	80062f6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 80062d8:	4b8d      	ldr	r3, [pc, #564]	; (8006510 <checkAktifCalisma+0x15c8>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80062de:	2003      	movs	r0, #3
 80062e0:	f7fa fd00 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80062e4:	2003      	movs	r0, #3
 80062e6:	f7fa fca5 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 80062ea:	f002 fa3d 	bl	8008768 <convertAndSendData>
			basinchatasi=1;
 80062ee:	4b89      	ldr	r3, [pc, #548]	; (8006514 <checkAktifCalisma+0x15cc>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e015      	b.n	8006322 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80062f6:	4b87      	ldr	r3, [pc, #540]	; (8006514 <checkAktifCalisma+0x15cc>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d011      	beq.n	8006322 <checkAktifCalisma+0x13da>
 80062fe:	4b80      	ldr	r3, [pc, #512]	; (8006500 <checkAktifCalisma+0x15b8>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d10d      	bne.n	8006322 <checkAktifCalisma+0x13da>
 8006306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800630a:	4883      	ldr	r0, [pc, #524]	; (8006518 <checkAktifCalisma+0x15d0>)
 800630c:	f003 fff0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006310:	4603      	mov	r3, r0
 8006312:	2b01      	cmp	r3, #1
 8006314:	d105      	bne.n	8006322 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006316:	4b7f      	ldr	r3, [pc, #508]	; (8006514 <checkAktifCalisma+0x15cc>)
 8006318:	2200      	movs	r2, #0
 800631a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800631c:	2003      	movs	r0, #3
 800631e:	f7fe fc0d 	bl	8004b3c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006322:	4b7e      	ldr	r3, [pc, #504]	; (800651c <checkAktifCalisma+0x15d4>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <checkAktifCalisma+0x13ea>
 800632a:	4b7d      	ldr	r3, [pc, #500]	; (8006520 <checkAktifCalisma+0x15d8>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01e      	beq.n	8006370 <checkAktifCalisma+0x1428>
 8006332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006336:	487b      	ldr	r0, [pc, #492]	; (8006524 <checkAktifCalisma+0x15dc>)
 8006338:	f003 ffda 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800633c:	4603      	mov	r3, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d116      	bne.n	8006370 <checkAktifCalisma+0x1428>
 8006342:	4b79      	ldr	r3, [pc, #484]	; (8006528 <checkAktifCalisma+0x15e0>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d003      	beq.n	8006352 <checkAktifCalisma+0x140a>
 800634a:	4b77      	ldr	r3, [pc, #476]	; (8006528 <checkAktifCalisma+0x15e0>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d10e      	bne.n	8006370 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006352:	4b6f      	ldr	r3, [pc, #444]	; (8006510 <checkAktifCalisma+0x15c8>)
 8006354:	2201      	movs	r2, #1
 8006356:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006358:	2004      	movs	r0, #4
 800635a:	f7fa fcc3 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800635e:	2004      	movs	r0, #4
 8006360:	f7fa fc68 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 8006364:	f002 fa00 	bl	8008768 <convertAndSendData>
			katkapisivicihatasi=1;
 8006368:	4b70      	ldr	r3, [pc, #448]	; (800652c <checkAktifCalisma+0x15e4>)
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e01f      	b.n	80063b0 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006370:	4b6e      	ldr	r3, [pc, #440]	; (800652c <checkAktifCalisma+0x15e4>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <checkAktifCalisma+0x1468>
 8006378:	4b6d      	ldr	r3, [pc, #436]	; (8006530 <checkAktifCalisma+0x15e8>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d017      	beq.n	80063b0 <checkAktifCalisma+0x1468>
 8006380:	4b66      	ldr	r3, [pc, #408]	; (800651c <checkAktifCalisma+0x15d4>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f083 0301 	eor.w	r3, r3, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d010      	beq.n	80063b0 <checkAktifCalisma+0x1468>
 800638e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006392:	4864      	ldr	r0, [pc, #400]	; (8006524 <checkAktifCalisma+0x15dc>)
 8006394:	f003 ffac 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d108      	bne.n	80063b0 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800639e:	4b63      	ldr	r3, [pc, #396]	; (800652c <checkAktifCalisma+0x15e4>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80063a4:	4b5e      	ldr	r3, [pc, #376]	; (8006520 <checkAktifCalisma+0x15d8>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80063aa:	2004      	movs	r0, #4
 80063ac:	f7fe fbc6 	bl	8004b3c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80063b0:	4b5a      	ldr	r3, [pc, #360]	; (800651c <checkAktifCalisma+0x15d4>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <checkAktifCalisma+0x1478>
 80063b8:	4b5e      	ldr	r3, [pc, #376]	; (8006534 <checkAktifCalisma+0x15ec>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01e      	beq.n	80063fe <checkAktifCalisma+0x14b6>
 80063c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063c4:	4857      	ldr	r0, [pc, #348]	; (8006524 <checkAktifCalisma+0x15dc>)
 80063c6:	f003 ff93 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d116      	bne.n	80063fe <checkAktifCalisma+0x14b6>
 80063d0:	4b55      	ldr	r3, [pc, #340]	; (8006528 <checkAktifCalisma+0x15e0>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d003      	beq.n	80063e0 <checkAktifCalisma+0x1498>
 80063d8:	4b53      	ldr	r3, [pc, #332]	; (8006528 <checkAktifCalisma+0x15e0>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d10e      	bne.n	80063fe <checkAktifCalisma+0x14b6>
			hataVar=1;
 80063e0:	4b4b      	ldr	r3, [pc, #300]	; (8006510 <checkAktifCalisma+0x15c8>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80063e6:	2005      	movs	r0, #5
 80063e8:	f7fa fc7c 	bl	8000ce4 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80063ec:	2005      	movs	r0, #5
 80063ee:	f7fa fc21 	bl	8000c34 <hata2EEPROM>
			convertAndSendData();
 80063f2:	f002 f9b9 	bl	8008768 <convertAndSendData>
			tablakapisivicihatasi=1;
 80063f6:	4b50      	ldr	r3, [pc, #320]	; (8006538 <checkAktifCalisma+0x15f0>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	e023      	b.n	8006446 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80063fe:	4b4e      	ldr	r3, [pc, #312]	; (8006538 <checkAktifCalisma+0x15f0>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01f      	beq.n	8006446 <checkAktifCalisma+0x14fe>
 8006406:	4b4a      	ldr	r3, [pc, #296]	; (8006530 <checkAktifCalisma+0x15e8>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01b      	beq.n	8006446 <checkAktifCalisma+0x14fe>
 800640e:	4b43      	ldr	r3, [pc, #268]	; (800651c <checkAktifCalisma+0x15d4>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f083 0301 	eor.w	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d014      	beq.n	8006446 <checkAktifCalisma+0x14fe>
 800641c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006420:	4840      	ldr	r0, [pc, #256]	; (8006524 <checkAktifCalisma+0x15dc>)
 8006422:	f003 ff65 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10c      	bne.n	8006446 <checkAktifCalisma+0x14fe>
 800642c:	4b40      	ldr	r3, [pc, #256]	; (8006530 <checkAktifCalisma+0x15e8>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006434:	4b40      	ldr	r3, [pc, #256]	; (8006538 <checkAktifCalisma+0x15f0>)
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800643a:	4b3e      	ldr	r3, [pc, #248]	; (8006534 <checkAktifCalisma+0x15ec>)
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006440:	2005      	movs	r0, #5
 8006442:	f7fe fb7b 	bl	8004b3c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006446:	4b30      	ldr	r3, [pc, #192]	; (8006508 <checkAktifCalisma+0x15c0>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d107      	bne.n	800645e <checkAktifCalisma+0x1516>
 800644e:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <checkAktifCalisma+0x15b0>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <checkAktifCalisma+0x1516>
 8006456:	4b39      	ldr	r3, [pc, #228]	; (800653c <checkAktifCalisma+0x15f4>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d016      	beq.n	800648c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800645e:	4b38      	ldr	r3, [pc, #224]	; (8006540 <checkAktifCalisma+0x15f8>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b38      	ldr	r3, [pc, #224]	; (8006544 <checkAktifCalisma+0x15fc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	4a37      	ldr	r2, [pc, #220]	; (8006548 <checkAktifCalisma+0x1600>)
 800646a:	7812      	ldrb	r2, [r2, #0]
 800646c:	4293      	cmp	r3, r2
 800646e:	d30d      	bcc.n	800648c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006470:	4b27      	ldr	r3, [pc, #156]	; (8006510 <checkAktifCalisma+0x15c8>)
 8006472:	2201      	movs	r2, #1
 8006474:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006476:	2006      	movs	r0, #6
 8006478:	f7fa fc34 	bl	8000ce4 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800647c:	2006      	movs	r0, #6
 800647e:	f7fa fbd9 	bl	8000c34 <hata2EEPROM>
			  	convertAndSendData();
 8006482:	f002 f971 	bl	8008768 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006486:	4b31      	ldr	r3, [pc, #196]	; (800654c <checkAktifCalisma+0x1604>)
 8006488:	2201      	movs	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800648c:	4b2f      	ldr	r3, [pc, #188]	; (800654c <checkAktifCalisma+0x1604>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <checkAktifCalisma+0x1574>
 8006494:	2108      	movs	r1, #8
 8006496:	4823      	ldr	r0, [pc, #140]	; (8006524 <checkAktifCalisma+0x15dc>)
 8006498:	f003 ff2a 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00c      	beq.n	80064bc <checkAktifCalisma+0x1574>
 80064a2:	4b1e      	ldr	r3, [pc, #120]	; (800651c <checkAktifCalisma+0x15d4>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f083 0301 	eor.w	r3, r3, #1
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80064b0:	4b26      	ldr	r3, [pc, #152]	; (800654c <checkAktifCalisma+0x1604>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80064b6:	2006      	movs	r0, #6
 80064b8:	f7fe fb40 	bl	8004b3c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80064bc:	4b24      	ldr	r3, [pc, #144]	; (8006550 <checkAktifCalisma+0x1608>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10b      	bne.n	80064dc <checkAktifCalisma+0x1594>
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <checkAktifCalisma+0x15b0>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <checkAktifCalisma+0x1594>
 80064cc:	4b21      	ldr	r3, [pc, #132]	; (8006554 <checkAktifCalisma+0x160c>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <checkAktifCalisma+0x1594>
 80064d4:	4b19      	ldr	r3, [pc, #100]	; (800653c <checkAktifCalisma+0x15f4>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d03f      	beq.n	800655c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80064dc:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <checkAktifCalisma+0x1610>)
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80064e2:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <checkAktifCalisma+0x15d8>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80064e8:	4b12      	ldr	r3, [pc, #72]	; (8006534 <checkAktifCalisma+0x15ec>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e03c      	b.n	800656a <checkAktifCalisma+0x1622>
 80064f0:	20000b3d 	.word	0x20000b3d
 80064f4:	20000b43 	.word	0x20000b43
 80064f8:	20000b24 	.word	0x20000b24
 80064fc:	20000b4d 	.word	0x20000b4d
 8006500:	20000aef 	.word	0x20000aef
 8006504:	20000af3 	.word	0x20000af3
 8006508:	20000b40 	.word	0x20000b40
 800650c:	40011000 	.word	0x40011000
 8006510:	20000b41 	.word	0x20000b41
 8006514:	20000b4a 	.word	0x20000b4a
 8006518:	40010c00 	.word	0x40010c00
 800651c:	20000b3a 	.word	0x20000b3a
 8006520:	20000b4e 	.word	0x20000b4e
 8006524:	40010800 	.word	0x40010800
 8006528:	20000af4 	.word	0x20000af4
 800652c:	20000b4b 	.word	0x20000b4b
 8006530:	20000b2e 	.word	0x20000b2e
 8006534:	20000b4f 	.word	0x20000b4f
 8006538:	20000b4c 	.word	0x20000b4c
 800653c:	20000b23 	.word	0x20000b23
 8006540:	20000ac8 	.word	0x20000ac8
 8006544:	20000adc 	.word	0x20000adc
 8006548:	20000b04 	.word	0x20000b04
 800654c:	20000b3b 	.word	0x20000b3b
 8006550:	20000b21 	.word	0x20000b21
 8006554:	20000b22 	.word	0x20000b22
 8006558:	20000b42 	.word	0x20000b42
		} else {
			makineCalisiyor=1;
 800655c:	4b1e      	ldr	r3, [pc, #120]	; (80065d8 <checkAktifCalisma+0x1690>)
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006562:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <checkAktifCalisma+0x1694>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <checkAktifCalisma+0x1698>)
 8006568:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800656a:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <checkAktifCalisma+0x169c>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d02f      	beq.n	80065d2 <checkAktifCalisma+0x168a>
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <checkAktifCalisma+0x16a0>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f083 0301 	eor.w	r3, r3, #1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d028      	beq.n	80065d2 <checkAktifCalisma+0x168a>
 8006580:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <checkAktifCalisma+0x16a4>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f083 0301 	eor.w	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d021      	beq.n	80065d2 <checkAktifCalisma+0x168a>
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <checkAktifCalisma+0x16a8>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f083 0301 	eor.w	r3, r3, #1
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01a      	beq.n	80065d2 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800659c:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <checkAktifCalisma+0x16ac>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	f083 0301 	eor.w	r3, r3, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d013      	beq.n	80065d2 <checkAktifCalisma+0x168a>
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <checkAktifCalisma+0x16b0>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f083 0301 	eor.w	r3, r3, #1
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00c      	beq.n	80065d2 <checkAktifCalisma+0x168a>
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <checkAktifCalisma+0x16b4>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	f083 0301 	eor.w	r3, r3, #1
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <checkAktifCalisma+0x168a>
			hataVar=0;
 80065c6:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <checkAktifCalisma+0x169c>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80065cc:	2007      	movs	r0, #7
 80065ce:	f7fe fab5 	bl	8004b3c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80065d2:	bf00      	nop
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000b42 	.word	0x20000b42
 80065dc:	20000ac8 	.word	0x20000ac8
 80065e0:	20000adc 	.word	0x20000adc
 80065e4:	20000b41 	.word	0x20000b41
 80065e8:	20000b3c 	.word	0x20000b3c
 80065ec:	20000b3d 	.word	0x20000b3d
 80065f0:	20000b4a 	.word	0x20000b4a
 80065f4:	20000b4b 	.word	0x20000b4b
 80065f8:	20000b4c 	.word	0x20000b4c
 80065fc:	20000b3b 	.word	0x20000b3b

08006600 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006604:	4b8b      	ldr	r3, [pc, #556]	; (8006834 <checkDemoModCalisma+0x234>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b01      	cmp	r3, #1
 800660a:	f040 8229 	bne.w	8006a60 <checkDemoModCalisma+0x460>
 800660e:	4b8a      	ldr	r3, [pc, #552]	; (8006838 <checkDemoModCalisma+0x238>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8224 	beq.w	8006a60 <checkDemoModCalisma+0x460>
 8006618:	4b88      	ldr	r3, [pc, #544]	; (800683c <checkDemoModCalisma+0x23c>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 821f 	bne.w	8006a60 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006622:	2102      	movs	r1, #2
 8006624:	4886      	ldr	r0, [pc, #536]	; (8006840 <checkDemoModCalisma+0x240>)
 8006626:	f003 fe63 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d11d      	bne.n	800666c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006630:	4b84      	ldr	r3, [pc, #528]	; (8006844 <checkDemoModCalisma+0x244>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f083 0301 	eor.w	r3, r3, #1
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d016      	beq.n	800666c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800663e:	4b82      	ldr	r3, [pc, #520]	; (8006848 <checkDemoModCalisma+0x248>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	f083 0301 	eor.w	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00f      	beq.n	800666c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 800664c:	4b7f      	ldr	r3, [pc, #508]	; (800684c <checkDemoModCalisma+0x24c>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f083 0301 	eor.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800665a:	2201      	movs	r2, #1
 800665c:	2104      	movs	r1, #4
 800665e:	487c      	ldr	r0, [pc, #496]	; (8006850 <checkDemoModCalisma+0x250>)
 8006660:	f003 fe5d 	bl	800a31e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006664:	4b7b      	ldr	r3, [pc, #492]	; (8006854 <checkDemoModCalisma+0x254>)
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	e00e      	b.n	800668a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800666c:	2102      	movs	r1, #2
 800666e:	4874      	ldr	r0, [pc, #464]	; (8006840 <checkDemoModCalisma+0x240>)
 8006670:	f003 fe3e 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006674:	4603      	mov	r3, r0
 8006676:	2b01      	cmp	r3, #1
 8006678:	d107      	bne.n	800668a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800667a:	2200      	movs	r2, #0
 800667c:	2104      	movs	r1, #4
 800667e:	4874      	ldr	r0, [pc, #464]	; (8006850 <checkDemoModCalisma+0x250>)
 8006680:	f003 fe4d 	bl	800a31e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006684:	4b73      	ldr	r3, [pc, #460]	; (8006854 <checkDemoModCalisma+0x254>)
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800668a:	4b72      	ldr	r3, [pc, #456]	; (8006854 <checkDemoModCalisma+0x254>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <checkDemoModCalisma+0xaa>
 8006692:	4b6d      	ldr	r3, [pc, #436]	; (8006848 <checkDemoModCalisma+0x248>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d107      	bne.n	80066aa <checkDemoModCalisma+0xaa>
 800669a:	4b6c      	ldr	r3, [pc, #432]	; (800684c <checkDemoModCalisma+0x24c>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <checkDemoModCalisma+0xaa>
 80066a2:	4b68      	ldr	r3, [pc, #416]	; (8006844 <checkDemoModCalisma+0x244>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00c      	beq.n	80066c4 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80066aa:	2201      	movs	r2, #1
 80066ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066b0:	4867      	ldr	r0, [pc, #412]	; (8006850 <checkDemoModCalisma+0x250>)
 80066b2:	f003 fe34 	bl	800a31e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80066b6:	2201      	movs	r2, #1
 80066b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066bc:	4864      	ldr	r0, [pc, #400]	; (8006850 <checkDemoModCalisma+0x250>)
 80066be:	f003 fe2e 	bl	800a31e <HAL_GPIO_WritePin>
 80066c2:	e00b      	b.n	80066dc <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80066c4:	2200      	movs	r2, #0
 80066c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066ca:	4861      	ldr	r0, [pc, #388]	; (8006850 <checkDemoModCalisma+0x250>)
 80066cc:	f003 fe27 	bl	800a31e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80066d0:	2200      	movs	r2, #0
 80066d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066d6:	485e      	ldr	r0, [pc, #376]	; (8006850 <checkDemoModCalisma+0x250>)
 80066d8:	f003 fe21 	bl	800a31e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80066dc:	2102      	movs	r1, #2
 80066de:	4858      	ldr	r0, [pc, #352]	; (8006840 <checkDemoModCalisma+0x240>)
 80066e0:	f003 fe06 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10d      	bne.n	8006706 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80066ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066ee:	4854      	ldr	r0, [pc, #336]	; (8006840 <checkDemoModCalisma+0x240>)
 80066f0:	f003 fdfe 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d105      	bne.n	8006706 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80066fa:	4b56      	ldr	r3, [pc, #344]	; (8006854 <checkDemoModCalisma+0x254>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f083 0301 	eor.w	r3, r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006706:	2102      	movs	r1, #2
 8006708:	484d      	ldr	r0, [pc, #308]	; (8006840 <checkDemoModCalisma+0x240>)
 800670a:	f003 fdf1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800670e:	4603      	mov	r3, r0
 8006710:	2b01      	cmp	r3, #1
 8006712:	d125      	bne.n	8006760 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006718:	4849      	ldr	r0, [pc, #292]	; (8006840 <checkDemoModCalisma+0x240>)
 800671a:	f003 fde9 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d11d      	bne.n	8006760 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006724:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <checkDemoModCalisma+0x254>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f083 0301 	eor.w	r3, r3, #1
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d016      	beq.n	8006760 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006732:	4b44      	ldr	r3, [pc, #272]	; (8006844 <checkDemoModCalisma+0x244>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f083 0301 	eor.w	r3, r3, #1
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00f      	beq.n	8006760 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006740:	4b42      	ldr	r3, [pc, #264]	; (800684c <checkDemoModCalisma+0x24c>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	f083 0301 	eor.w	r3, r3, #1
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800674e:	2201      	movs	r2, #1
 8006750:	2120      	movs	r1, #32
 8006752:	483b      	ldr	r0, [pc, #236]	; (8006840 <checkDemoModCalisma+0x240>)
 8006754:	f003 fde3 	bl	800a31e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006758:	4b3b      	ldr	r3, [pc, #236]	; (8006848 <checkDemoModCalisma+0x248>)
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e007      	b.n	8006770 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006760:	2200      	movs	r2, #0
 8006762:	2120      	movs	r1, #32
 8006764:	4836      	ldr	r0, [pc, #216]	; (8006840 <checkDemoModCalisma+0x240>)
 8006766:	f003 fdda 	bl	800a31e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800676a:	4b37      	ldr	r3, [pc, #220]	; (8006848 <checkDemoModCalisma+0x248>)
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006770:	2102      	movs	r1, #2
 8006772:	4833      	ldr	r0, [pc, #204]	; (8006840 <checkDemoModCalisma+0x240>)
 8006774:	f003 fdbc 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006778:	4603      	mov	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d125      	bne.n	80067ca <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800677e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006782:	482f      	ldr	r0, [pc, #188]	; (8006840 <checkDemoModCalisma+0x240>)
 8006784:	f003 fdb4 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d11d      	bne.n	80067ca <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <checkDemoModCalisma+0x254>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	f083 0301 	eor.w	r3, r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d016      	beq.n	80067ca <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800679c:	4b2a      	ldr	r3, [pc, #168]	; (8006848 <checkDemoModCalisma+0x248>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f083 0301 	eor.w	r3, r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00f      	beq.n	80067ca <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80067aa:	4b26      	ldr	r3, [pc, #152]	; (8006844 <checkDemoModCalisma+0x244>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f083 0301 	eor.w	r3, r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80067b8:	2201      	movs	r2, #1
 80067ba:	2110      	movs	r1, #16
 80067bc:	4820      	ldr	r0, [pc, #128]	; (8006840 <checkDemoModCalisma+0x240>)
 80067be:	f003 fdae 	bl	800a31e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80067c2:	4b22      	ldr	r3, [pc, #136]	; (800684c <checkDemoModCalisma+0x24c>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e007      	b.n	80067da <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80067ca:	2200      	movs	r2, #0
 80067cc:	2110      	movs	r1, #16
 80067ce:	481c      	ldr	r0, [pc, #112]	; (8006840 <checkDemoModCalisma+0x240>)
 80067d0:	f003 fda5 	bl	800a31e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80067d4:	4b1d      	ldr	r3, [pc, #116]	; (800684c <checkDemoModCalisma+0x24c>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80067da:	2104      	movs	r1, #4
 80067dc:	4818      	ldr	r0, [pc, #96]	; (8006840 <checkDemoModCalisma+0x240>)
 80067de:	f003 fd87 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d139      	bne.n	800685c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <checkDemoModCalisma+0x254>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f083 0301 	eor.w	r3, r3, #1
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d032      	beq.n	800685c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80067f6:	4b15      	ldr	r3, [pc, #84]	; (800684c <checkDemoModCalisma+0x24c>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	f083 0301 	eor.w	r3, r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d02b      	beq.n	800685c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006804:	4b10      	ldr	r3, [pc, #64]	; (8006848 <checkDemoModCalisma+0x248>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	f083 0301 	eor.w	r3, r3, #1
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d024      	beq.n	800685c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006812:	2201      	movs	r2, #1
 8006814:	2102      	movs	r1, #2
 8006816:	480e      	ldr	r0, [pc, #56]	; (8006850 <checkDemoModCalisma+0x250>)
 8006818:	f003 fd81 	bl	800a31e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800681c:	2201      	movs	r2, #1
 800681e:	2101      	movs	r1, #1
 8006820:	480b      	ldr	r0, [pc, #44]	; (8006850 <checkDemoModCalisma+0x250>)
 8006822:	f003 fd7c 	bl	800a31e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006826:	4b07      	ldr	r3, [pc, #28]	; (8006844 <checkDemoModCalisma+0x244>)
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 800682c:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <checkDemoModCalisma+0x258>)
 800682e:	2201      	movs	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	e027      	b.n	8006884 <checkDemoModCalisma+0x284>
 8006834:	20000b0a 	.word	0x20000b0a
 8006838:	20000b3e 	.word	0x20000b3e
 800683c:	20000b09 	.word	0x20000b09
 8006840:	40011000 	.word	0x40011000
 8006844:	20000b45 	.word	0x20000b45
 8006848:	20000b46 	.word	0x20000b46
 800684c:	20000b47 	.word	0x20000b47
 8006850:	40010c00 	.word	0x40010c00
 8006854:	20000b44 	.word	0x20000b44
 8006858:	20000b2a 	.word	0x20000b2a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800685c:	2104      	movs	r1, #4
 800685e:	48a0      	ldr	r0, [pc, #640]	; (8006ae0 <checkDemoModCalisma+0x4e0>)
 8006860:	f003 fd46 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006864:	4603      	mov	r3, r0
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10c      	bne.n	8006884 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800686a:	2200      	movs	r2, #0
 800686c:	2102      	movs	r1, #2
 800686e:	489d      	ldr	r0, [pc, #628]	; (8006ae4 <checkDemoModCalisma+0x4e4>)
 8006870:	f003 fd55 	bl	800a31e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006874:	2200      	movs	r2, #0
 8006876:	2101      	movs	r1, #1
 8006878:	489a      	ldr	r0, [pc, #616]	; (8006ae4 <checkDemoModCalisma+0x4e4>)
 800687a:	f003 fd50 	bl	800a31e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800687e:	4b9a      	ldr	r3, [pc, #616]	; (8006ae8 <checkDemoModCalisma+0x4e8>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006884:	2104      	movs	r1, #4
 8006886:	4896      	ldr	r0, [pc, #600]	; (8006ae0 <checkDemoModCalisma+0x4e0>)
 8006888:	f003 fd32 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10d      	bne.n	80068ae <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006892:	2201      	movs	r2, #1
 8006894:	2180      	movs	r1, #128	; 0x80
 8006896:	4895      	ldr	r0, [pc, #596]	; (8006aec <checkDemoModCalisma+0x4ec>)
 8006898:	f003 fd41 	bl	800a31e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800689c:	2201      	movs	r2, #1
 800689e:	2120      	movs	r1, #32
 80068a0:	4892      	ldr	r0, [pc, #584]	; (8006aec <checkDemoModCalisma+0x4ec>)
 80068a2:	f003 fd3c 	bl	800a31e <HAL_GPIO_WritePin>
			timer3 = millis;
 80068a6:	4b92      	ldr	r3, [pc, #584]	; (8006af0 <checkDemoModCalisma+0x4f0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a92      	ldr	r2, [pc, #584]	; (8006af4 <checkDemoModCalisma+0x4f4>)
 80068ac:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80068ae:	4b90      	ldr	r3, [pc, #576]	; (8006af0 <checkDemoModCalisma+0x4f0>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b90      	ldr	r3, [pc, #576]	; (8006af4 <checkDemoModCalisma+0x4f4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d909      	bls.n	80068d0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80068bc:	2200      	movs	r2, #0
 80068be:	2180      	movs	r1, #128	; 0x80
 80068c0:	488a      	ldr	r0, [pc, #552]	; (8006aec <checkDemoModCalisma+0x4ec>)
 80068c2:	f003 fd2c 	bl	800a31e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80068c6:	2200      	movs	r2, #0
 80068c8:	2120      	movs	r1, #32
 80068ca:	4888      	ldr	r0, [pc, #544]	; (8006aec <checkDemoModCalisma+0x4ec>)
 80068cc:	f003 fd27 	bl	800a31e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80068d0:	2102      	movs	r1, #2
 80068d2:	4883      	ldr	r0, [pc, #524]	; (8006ae0 <checkDemoModCalisma+0x4e0>)
 80068d4:	f003 fd0c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d108      	bne.n	80068f0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80068de:	2201      	movs	r2, #1
 80068e0:	2140      	movs	r1, #64	; 0x40
 80068e2:	4882      	ldr	r0, [pc, #520]	; (8006aec <checkDemoModCalisma+0x4ec>)
 80068e4:	f003 fd1b 	bl	800a31e <HAL_GPIO_WritePin>
			timer3 = millis;
 80068e8:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <checkDemoModCalisma+0x4f0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a81      	ldr	r2, [pc, #516]	; (8006af4 <checkDemoModCalisma+0x4f4>)
 80068ee:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80068f0:	4b7f      	ldr	r3, [pc, #508]	; (8006af0 <checkDemoModCalisma+0x4f0>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4b7f      	ldr	r3, [pc, #508]	; (8006af4 <checkDemoModCalisma+0x4f4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d904      	bls.n	8006908 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80068fe:	2200      	movs	r2, #0
 8006900:	2140      	movs	r1, #64	; 0x40
 8006902:	487a      	ldr	r0, [pc, #488]	; (8006aec <checkDemoModCalisma+0x4ec>)
 8006904:	f003 fd0b 	bl	800a31e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006908:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <checkDemoModCalisma+0x4f8>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d058      	beq.n	80069c2 <checkDemoModCalisma+0x3c2>
 8006910:	4b7a      	ldr	r3, [pc, #488]	; (8006afc <checkDemoModCalisma+0x4fc>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d054      	beq.n	80069c2 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006918:	4b79      	ldr	r3, [pc, #484]	; (8006b00 <checkDemoModCalisma+0x500>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	3301      	adds	r3, #1
 800691e:	b2da      	uxtb	r2, r3
 8006920:	4b77      	ldr	r3, [pc, #476]	; (8006b00 <checkDemoModCalisma+0x500>)
 8006922:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006924:	4b76      	ldr	r3, [pc, #472]	; (8006b00 <checkDemoModCalisma+0x500>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b09      	cmp	r3, #9
 800692a:	d908      	bls.n	800693e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 800692c:	4b74      	ldr	r3, [pc, #464]	; (8006b00 <checkDemoModCalisma+0x500>)
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006932:	4b74      	ldr	r3, [pc, #464]	; (8006b04 <checkDemoModCalisma+0x504>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	3301      	adds	r3, #1
 8006938:	b2da      	uxtb	r2, r3
 800693a:	4b72      	ldr	r3, [pc, #456]	; (8006b04 <checkDemoModCalisma+0x504>)
 800693c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800693e:	4b71      	ldr	r3, [pc, #452]	; (8006b04 <checkDemoModCalisma+0x504>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b09      	cmp	r3, #9
 8006944:	d908      	bls.n	8006958 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006946:	4b6f      	ldr	r3, [pc, #444]	; (8006b04 <checkDemoModCalisma+0x504>)
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 800694c:	4b6e      	ldr	r3, [pc, #440]	; (8006b08 <checkDemoModCalisma+0x508>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	3301      	adds	r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	4b6c      	ldr	r3, [pc, #432]	; (8006b08 <checkDemoModCalisma+0x508>)
 8006956:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006958:	4b6b      	ldr	r3, [pc, #428]	; (8006b08 <checkDemoModCalisma+0x508>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b09      	cmp	r3, #9
 800695e:	d908      	bls.n	8006972 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006960:	4b69      	ldr	r3, [pc, #420]	; (8006b08 <checkDemoModCalisma+0x508>)
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006966:	4b69      	ldr	r3, [pc, #420]	; (8006b0c <checkDemoModCalisma+0x50c>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	b2da      	uxtb	r2, r3
 800696e:	4b67      	ldr	r3, [pc, #412]	; (8006b0c <checkDemoModCalisma+0x50c>)
 8006970:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006972:	4b66      	ldr	r3, [pc, #408]	; (8006b0c <checkDemoModCalisma+0x50c>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b09      	cmp	r3, #9
 8006978:	d908      	bls.n	800698c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800697a:	4b64      	ldr	r3, [pc, #400]	; (8006b0c <checkDemoModCalisma+0x50c>)
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006980:	4b63      	ldr	r3, [pc, #396]	; (8006b10 <checkDemoModCalisma+0x510>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	b2da      	uxtb	r2, r3
 8006988:	4b61      	ldr	r3, [pc, #388]	; (8006b10 <checkDemoModCalisma+0x510>)
 800698a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800698c:	4b60      	ldr	r3, [pc, #384]	; (8006b10 <checkDemoModCalisma+0x510>)
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	4b60      	ldr	r3, [pc, #384]	; (8006b14 <checkDemoModCalisma+0x514>)
 8006992:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006996:	4b5d      	ldr	r3, [pc, #372]	; (8006b0c <checkDemoModCalisma+0x50c>)
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	4b5e      	ldr	r3, [pc, #376]	; (8006b14 <checkDemoModCalisma+0x514>)
 800699c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800699e:	4b5a      	ldr	r3, [pc, #360]	; (8006b08 <checkDemoModCalisma+0x508>)
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	4b5c      	ldr	r3, [pc, #368]	; (8006b14 <checkDemoModCalisma+0x514>)
 80069a4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80069a6:	4b57      	ldr	r3, [pc, #348]	; (8006b04 <checkDemoModCalisma+0x504>)
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	4b5a      	ldr	r3, [pc, #360]	; (8006b14 <checkDemoModCalisma+0x514>)
 80069ac:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80069ae:	4b54      	ldr	r3, [pc, #336]	; (8006b00 <checkDemoModCalisma+0x500>)
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	4b58      	ldr	r3, [pc, #352]	; (8006b14 <checkDemoModCalisma+0x514>)
 80069b4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80069b6:	4b58      	ldr	r3, [pc, #352]	; (8006b18 <checkDemoModCalisma+0x518>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80069bc:	4b4f      	ldr	r3, [pc, #316]	; (8006afc <checkDemoModCalisma+0x4fc>)
 80069be:	2200      	movs	r2, #0
 80069c0:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80069c2:	4b56      	ldr	r3, [pc, #344]	; (8006b1c <checkDemoModCalisma+0x51c>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 8087 	bne.w	8006ada <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80069cc:	4a54      	ldr	r2, [pc, #336]	; (8006b20 <checkDemoModCalisma+0x520>)
 80069ce:	2101      	movs	r1, #1
 80069d0:	2002      	movs	r0, #2
 80069d2:	f002 f967 	bl	8008ca4 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80069d6:	4a53      	ldr	r2, [pc, #332]	; (8006b24 <checkDemoModCalisma+0x524>)
 80069d8:	2101      	movs	r1, #1
 80069da:	2001      	movs	r0, #1
 80069dc:	f002 f962 	bl	8008ca4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80069e0:	4b4b      	ldr	r3, [pc, #300]	; (8006b10 <checkDemoModCalisma+0x510>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	220a      	movs	r2, #10
 80069e6:	4950      	ldr	r1, [pc, #320]	; (8006b28 <checkDemoModCalisma+0x528>)
 80069e8:	4618      	mov	r0, r3
 80069ea:	f006 fd09 	bl	800d400 <itoa>
			lcd_print(2,12,snum);
 80069ee:	4a4e      	ldr	r2, [pc, #312]	; (8006b28 <checkDemoModCalisma+0x528>)
 80069f0:	210c      	movs	r1, #12
 80069f2:	2002      	movs	r0, #2
 80069f4:	f002 f956 	bl	8008ca4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80069f8:	4b44      	ldr	r3, [pc, #272]	; (8006b0c <checkDemoModCalisma+0x50c>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	220a      	movs	r2, #10
 80069fe:	494a      	ldr	r1, [pc, #296]	; (8006b28 <checkDemoModCalisma+0x528>)
 8006a00:	4618      	mov	r0, r3
 8006a02:	f006 fcfd 	bl	800d400 <itoa>
			lcd_print(2,13,snum);
 8006a06:	4a48      	ldr	r2, [pc, #288]	; (8006b28 <checkDemoModCalisma+0x528>)
 8006a08:	210d      	movs	r1, #13
 8006a0a:	2002      	movs	r0, #2
 8006a0c:	f002 f94a 	bl	8008ca4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006a10:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <checkDemoModCalisma+0x508>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	220a      	movs	r2, #10
 8006a16:	4944      	ldr	r1, [pc, #272]	; (8006b28 <checkDemoModCalisma+0x528>)
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f006 fcf1 	bl	800d400 <itoa>
			lcd_print(2,14,snum);
 8006a1e:	4a42      	ldr	r2, [pc, #264]	; (8006b28 <checkDemoModCalisma+0x528>)
 8006a20:	210e      	movs	r1, #14
 8006a22:	2002      	movs	r0, #2
 8006a24:	f002 f93e 	bl	8008ca4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006a28:	4b36      	ldr	r3, [pc, #216]	; (8006b04 <checkDemoModCalisma+0x504>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	220a      	movs	r2, #10
 8006a2e:	493e      	ldr	r1, [pc, #248]	; (8006b28 <checkDemoModCalisma+0x528>)
 8006a30:	4618      	mov	r0, r3
 8006a32:	f006 fce5 	bl	800d400 <itoa>
			lcd_print(2,15,snum);
 8006a36:	4a3c      	ldr	r2, [pc, #240]	; (8006b28 <checkDemoModCalisma+0x528>)
 8006a38:	210f      	movs	r1, #15
 8006a3a:	2002      	movs	r0, #2
 8006a3c:	f002 f932 	bl	8008ca4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006a40:	4b2f      	ldr	r3, [pc, #188]	; (8006b00 <checkDemoModCalisma+0x500>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	220a      	movs	r2, #10
 8006a46:	4938      	ldr	r1, [pc, #224]	; (8006b28 <checkDemoModCalisma+0x528>)
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f006 fcd9 	bl	800d400 <itoa>
			lcd_print(2,16,snum);
 8006a4e:	4a36      	ldr	r2, [pc, #216]	; (8006b28 <checkDemoModCalisma+0x528>)
 8006a50:	2110      	movs	r1, #16
 8006a52:	2002      	movs	r0, #2
 8006a54:	f002 f926 	bl	8008ca4 <lcd_print>
			mesajYazildi=1;
 8006a58:	4b34      	ldr	r3, [pc, #208]	; (8006b2c <checkDemoModCalisma+0x52c>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006a5e:	e03c      	b.n	8006ada <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006a60:	4b33      	ldr	r3, [pc, #204]	; (8006b30 <checkDemoModCalisma+0x530>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d003      	beq.n	8006a70 <checkDemoModCalisma+0x470>
 8006a68:	4b2c      	ldr	r3, [pc, #176]	; (8006b1c <checkDemoModCalisma+0x51c>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d134      	bne.n	8006ada <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a76:	481b      	ldr	r0, [pc, #108]	; (8006ae4 <checkDemoModCalisma+0x4e4>)
 8006a78:	f003 fc51 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a82:	4818      	ldr	r0, [pc, #96]	; (8006ae4 <checkDemoModCalisma+0x4e4>)
 8006a84:	f003 fc4b 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2104      	movs	r1, #4
 8006a8c:	4815      	ldr	r0, [pc, #84]	; (8006ae4 <checkDemoModCalisma+0x4e4>)
 8006a8e:	f003 fc46 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006a92:	2200      	movs	r2, #0
 8006a94:	2102      	movs	r1, #2
 8006a96:	4813      	ldr	r0, [pc, #76]	; (8006ae4 <checkDemoModCalisma+0x4e4>)
 8006a98:	f003 fc41 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	4810      	ldr	r0, [pc, #64]	; (8006ae4 <checkDemoModCalisma+0x4e4>)
 8006aa2:	f003 fc3c 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2120      	movs	r1, #32
 8006aaa:	480d      	ldr	r0, [pc, #52]	; (8006ae0 <checkDemoModCalisma+0x4e0>)
 8006aac:	f003 fc37 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2110      	movs	r1, #16
 8006ab4:	480a      	ldr	r0, [pc, #40]	; (8006ae0 <checkDemoModCalisma+0x4e0>)
 8006ab6:	f003 fc32 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006aba:	2200      	movs	r2, #0
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	480b      	ldr	r0, [pc, #44]	; (8006aec <checkDemoModCalisma+0x4ec>)
 8006ac0:	f003 fc2d 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2140      	movs	r1, #64	; 0x40
 8006ac8:	4808      	ldr	r0, [pc, #32]	; (8006aec <checkDemoModCalisma+0x4ec>)
 8006aca:	f003 fc28 	bl	800a31e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2120      	movs	r1, #32
 8006ad2:	4806      	ldr	r0, [pc, #24]	; (8006aec <checkDemoModCalisma+0x4ec>)
 8006ad4:	f003 fc23 	bl	800a31e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006ad8:	e7ff      	b.n	8006ada <checkDemoModCalisma+0x4da>
 8006ada:	bf00      	nop
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	40011000 	.word	0x40011000
 8006ae4:	40010c00 	.word	0x40010c00
 8006ae8:	20000b45 	.word	0x20000b45
 8006aec:	40010800 	.word	0x40010800
 8006af0:	20000ac8 	.word	0x20000ac8
 8006af4:	20000ad8 	.word	0x20000ad8
 8006af8:	20000b44 	.word	0x20000b44
 8006afc:	20000b2a 	.word	0x20000b2a
 8006b00:	20000ae9 	.word	0x20000ae9
 8006b04:	20000aea 	.word	0x20000aea
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	20000001 	.word	0x20000001
 8006b10:	20000aeb 	.word	0x20000aeb
 8006b14:	20000a18 	.word	0x20000a18
 8006b18:	20000b18 	.word	0x20000b18
 8006b1c:	20000b09 	.word	0x20000b09
 8006b20:	0800eb80 	.word	0x0800eb80
 8006b24:	0800eb8c 	.word	0x0800eb8c
 8006b28:	20000a88 	.word	0x20000a88
 8006b2c:	20000b20 	.word	0x20000b20
 8006b30:	20000b0a 	.word	0x20000b0a

08006b34 <mainLoop>:

void mainLoop() {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006b3a:	f7fe f923 	bl	8004d84 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006b3e:	2101      	movs	r1, #1
 8006b40:	48a9      	ldr	r0, [pc, #676]	; (8006de8 <mainLoop+0x2b4>)
 8006b42:	f003 fbd5 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d136      	bne.n	8006bba <mainLoop+0x86>
 8006b4c:	2108      	movs	r1, #8
 8006b4e:	48a7      	ldr	r0, [pc, #668]	; (8006dec <mainLoop+0x2b8>)
 8006b50:	f003 fbce 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d12f      	bne.n	8006bba <mainLoop+0x86>
 8006b5a:	2102      	movs	r1, #2
 8006b5c:	48a2      	ldr	r0, [pc, #648]	; (8006de8 <mainLoop+0x2b4>)
 8006b5e:	f003 fbc7 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d128      	bne.n	8006bba <mainLoop+0x86>
 8006b68:	2104      	movs	r1, #4
 8006b6a:	489f      	ldr	r0, [pc, #636]	; (8006de8 <mainLoop+0x2b4>)
 8006b6c:	f003 fbc0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d121      	bne.n	8006bba <mainLoop+0x86>
 8006b76:	2108      	movs	r1, #8
 8006b78:	489b      	ldr	r0, [pc, #620]	; (8006de8 <mainLoop+0x2b4>)
 8006b7a:	f003 fbb9 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11a      	bne.n	8006bba <mainLoop+0x86>
 8006b84:	2180      	movs	r1, #128	; 0x80
 8006b86:	4899      	ldr	r0, [pc, #612]	; (8006dec <mainLoop+0x2b8>)
 8006b88:	f003 fbb2 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d113      	bne.n	8006bba <mainLoop+0x86>
 8006b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b96:	4895      	ldr	r0, [pc, #596]	; (8006dec <mainLoop+0x2b8>)
 8006b98:	f003 fbaa 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d10b      	bne.n	8006bba <mainLoop+0x86>
 8006ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ba6:	4891      	ldr	r0, [pc, #580]	; (8006dec <mainLoop+0x2b8>)
 8006ba8:	f003 fba2 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d103      	bne.n	8006bba <mainLoop+0x86>
			butonKontrol=0;
 8006bb2:	4b8f      	ldr	r3, [pc, #572]	; (8006df0 <mainLoop+0x2bc>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e003      	b.n	8006bc2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006bba:	4b8e      	ldr	r3, [pc, #568]	; (8006df4 <mainLoop+0x2c0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a8e      	ldr	r2, [pc, #568]	; (8006df8 <mainLoop+0x2c4>)
 8006bc0:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8006bc2:	f7fe f8ab 	bl	8004d1c <buttonCheck>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d003      	beq.n	8006bd4 <mainLoop+0xa0>
			backLightTimer = millis;
 8006bcc:	4b89      	ldr	r3, [pc, #548]	; (8006df4 <mainLoop+0x2c0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a89      	ldr	r2, [pc, #548]	; (8006df8 <mainLoop+0x2c4>)
 8006bd2:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006bd4:	4b89      	ldr	r3, [pc, #548]	; (8006dfc <mainLoop+0x2c8>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d03a      	beq.n	8006c52 <mainLoop+0x11e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006bdc:	bf00      	nop
 8006bde:	4888      	ldr	r0, [pc, #544]	; (8006e00 <mainLoop+0x2cc>)
 8006be0:	f004 f9af 	bl	800af42 <HAL_I2C_GetError>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d0f9      	beq.n	8006bde <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006bea:	bf00      	nop
 8006bec:	4884      	ldr	r0, [pc, #528]	; (8006e00 <mainLoop+0x2cc>)
 8006bee:	f004 f99b 	bl	800af28 <HAL_I2C_GetState>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d1f9      	bne.n	8006bec <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006bf8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bfc:	9302      	str	r3, [sp, #8]
 8006bfe:	236e      	movs	r3, #110	; 0x6e
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	4b80      	ldr	r3, [pc, #512]	; (8006e04 <mainLoop+0x2d0>)
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	236e      	movs	r3, #110	; 0x6e
 8006c08:	2200      	movs	r2, #0
 8006c0a:	21a0      	movs	r1, #160	; 0xa0
 8006c0c:	487c      	ldr	r0, [pc, #496]	; (8006e00 <mainLoop+0x2cc>)
 8006c0e:	f003 fe29 	bl	800a864 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c16:	f002 fd9b 	bl	8009750 <HAL_Delay>

		  hafizaYaz=0;
 8006c1a:	4b78      	ldr	r3, [pc, #480]	; (8006dfc <mainLoop+0x2c8>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006c20:	4b79      	ldr	r3, [pc, #484]	; (8006e08 <mainLoop+0x2d4>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 8006c28:	4a78      	ldr	r2, [pc, #480]	; (8006e0c <mainLoop+0x2d8>)
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	2002      	movs	r0, #2
 8006c2e:	f002 f839 	bl	8008ca4 <lcd_print>
 8006c32:	e008      	b.n	8006c46 <mainLoop+0x112>
		  } else if(dilSecim==1) {
 8006c34:	4b74      	ldr	r3, [pc, #464]	; (8006e08 <mainLoop+0x2d4>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d104      	bne.n	8006c46 <mainLoop+0x112>
			  lcd_print(2,1,"Data Wrote      ");
 8006c3c:	4a74      	ldr	r2, [pc, #464]	; (8006e10 <mainLoop+0x2dc>)
 8006c3e:	2101      	movs	r1, #1
 8006c40:	2002      	movs	r0, #2
 8006c42:	f002 f82f 	bl	8008ca4 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c4a:	f002 fd81 	bl	8009750 <HAL_Delay>
		  lcd_clear();
 8006c4e:	f002 f855 	bl	8008cfc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006c52:	4b70      	ldr	r3, [pc, #448]	; (8006e14 <mainLoop+0x2e0>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f083 0301 	eor.w	r3, r3, #1
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d06d      	beq.n	8006d3c <mainLoop+0x208>
 8006c60:	4867      	ldr	r0, [pc, #412]	; (8006e00 <mainLoop+0x2cc>)
 8006c62:	f004 f961 	bl	800af28 <HAL_I2C_GetState>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d167      	bne.n	8006d3c <mainLoop+0x208>
		  if(ilkOkuma==0) {
 8006c6c:	4b6a      	ldr	r3, [pc, #424]	; (8006e18 <mainLoop+0x2e4>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	f083 0301 	eor.w	r3, r3, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d044      	beq.n	8006d04 <mainLoop+0x1d0>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006c7a:	4a68      	ldr	r2, [pc, #416]	; (8006e1c <mainLoop+0x2e8>)
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	2001      	movs	r0, #1
 8006c80:	f002 f810 	bl	8008ca4 <lcd_print>
			  if(dilSecim==0) {
 8006c84:	4b60      	ldr	r3, [pc, #384]	; (8006e08 <mainLoop+0x2d4>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d105      	bne.n	8006c98 <mainLoop+0x164>
				  lcd_print(2,1,"Data Okunuyor...");
 8006c8c:	4a64      	ldr	r2, [pc, #400]	; (8006e20 <mainLoop+0x2ec>)
 8006c8e:	2101      	movs	r1, #1
 8006c90:	2002      	movs	r0, #2
 8006c92:	f002 f807 	bl	8008ca4 <lcd_print>
 8006c96:	e008      	b.n	8006caa <mainLoop+0x176>
			  } else if(dilSecim==1) {
 8006c98:	4b5b      	ldr	r3, [pc, #364]	; (8006e08 <mainLoop+0x2d4>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d104      	bne.n	8006caa <mainLoop+0x176>
				  lcd_print(2,1,"Data Reading... ");
 8006ca0:	4a60      	ldr	r2, [pc, #384]	; (8006e24 <mainLoop+0x2f0>)
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	2002      	movs	r0, #2
 8006ca6:	f001 fffd 	bl	8008ca4 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cae:	f002 fd4f 	bl	8009750 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006cb2:	bf00      	nop
 8006cb4:	4852      	ldr	r0, [pc, #328]	; (8006e00 <mainLoop+0x2cc>)
 8006cb6:	f004 f944 	bl	800af42 <HAL_I2C_GetError>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d0f9      	beq.n	8006cb4 <mainLoop+0x180>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006cc0:	e003      	b.n	8006cca <mainLoop+0x196>
				  HAL_Delay(1000);
 8006cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cc6:	f002 fd43 	bl	8009750 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006cca:	484d      	ldr	r0, [pc, #308]	; (8006e00 <mainLoop+0x2cc>)
 8006ccc:	f004 f92c 	bl	800af28 <HAL_I2C_GetState>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d1f5      	bne.n	8006cc2 <mainLoop+0x18e>
			  }

			  if(dilSecim==0) {
 8006cd6:	4b4c      	ldr	r3, [pc, #304]	; (8006e08 <mainLoop+0x2d4>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d105      	bne.n	8006cea <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Okundu.    ");
 8006cde:	4a52      	ldr	r2, [pc, #328]	; (8006e28 <mainLoop+0x2f4>)
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	2002      	movs	r0, #2
 8006ce4:	f001 ffde 	bl	8008ca4 <lcd_print>
 8006ce8:	e008      	b.n	8006cfc <mainLoop+0x1c8>
			  } else if(dilSecim==1) {
 8006cea:	4b47      	ldr	r3, [pc, #284]	; (8006e08 <mainLoop+0x2d4>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d104      	bne.n	8006cfc <mainLoop+0x1c8>
				  lcd_print(2,1,"Data Read.      ");
 8006cf2:	4a4e      	ldr	r2, [pc, #312]	; (8006e2c <mainLoop+0x2f8>)
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	2002      	movs	r0, #2
 8006cf8:	f001 ffd4 	bl	8008ca4 <lcd_print>
			  }

			  ilkOkuma=1;
 8006cfc:	4b46      	ldr	r3, [pc, #280]	; (8006e18 <mainLoop+0x2e4>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	e014      	b.n	8006d2e <mainLoop+0x1fa>
		  } else {
			  if(dilSecim==0) {
 8006d04:	4b40      	ldr	r3, [pc, #256]	; (8006e08 <mainLoop+0x2d4>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d105      	bne.n	8006d18 <mainLoop+0x1e4>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006d0c:	4a48      	ldr	r2, [pc, #288]	; (8006e30 <mainLoop+0x2fc>)
 8006d0e:	2101      	movs	r1, #1
 8006d10:	2002      	movs	r0, #2
 8006d12:	f001 ffc7 	bl	8008ca4 <lcd_print>
 8006d16:	e008      	b.n	8006d2a <mainLoop+0x1f6>
			  } else if(dilSecim==1) {
 8006d18:	4b3b      	ldr	r3, [pc, #236]	; (8006e08 <mainLoop+0x2d4>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d104      	bne.n	8006d2a <mainLoop+0x1f6>
				  lcd_print(2,1,"Value Saved     ");
 8006d20:	4a44      	ldr	r2, [pc, #272]	; (8006e34 <mainLoop+0x300>)
 8006d22:	2101      	movs	r1, #1
 8006d24:	2002      	movs	r0, #2
 8006d26:	f001 ffbd 	bl	8008ca4 <lcd_print>
			  }
			  lcd_clear();
 8006d2a:	f001 ffe7 	bl	8008cfc <lcd_clear>
		  }

		  lcd_clear();
 8006d2e:	f001 ffe5 	bl	8008cfc <lcd_clear>

		  eepromKontrol();
 8006d32:	f7f9 fa7f 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <mainLoop+0x2e0>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006d3c:	4b3e      	ldr	r3, [pc, #248]	; (8006e38 <mainLoop+0x304>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11c      	bne.n	8006d7e <mainLoop+0x24a>
 8006d44:	4b3d      	ldr	r3, [pc, #244]	; (8006e3c <mainLoop+0x308>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f083 0301 	eor.w	r3, r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d015      	beq.n	8006d7e <mainLoop+0x24a>
 8006d52:	4b3b      	ldr	r3, [pc, #236]	; (8006e40 <mainLoop+0x30c>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d111      	bne.n	8006d7e <mainLoop+0x24a>
			lcd_clear();
 8006d5a:	f001 ffcf 	bl	8008cfc <lcd_clear>
			HAL_Delay(10);
 8006d5e:	200a      	movs	r0, #10
 8006d60:	f002 fcf6 	bl	8009750 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006d64:	4a37      	ldr	r2, [pc, #220]	; (8006e44 <mainLoop+0x310>)
 8006d66:	2101      	movs	r1, #1
 8006d68:	2001      	movs	r0, #1
 8006d6a:	f001 ff9b 	bl	8008ca4 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006d6e:	4a36      	ldr	r2, [pc, #216]	; (8006e48 <mainLoop+0x314>)
 8006d70:	2101      	movs	r1, #1
 8006d72:	2002      	movs	r0, #2
 8006d74:	f001 ff96 	bl	8008ca4 <lcd_print>
			mesajYazildi=1;
 8006d78:	4b30      	ldr	r3, [pc, #192]	; (8006e3c <mainLoop+0x308>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006d7e:	4b2e      	ldr	r3, [pc, #184]	; (8006e38 <mainLoop+0x304>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d112      	bne.n	8006dac <mainLoop+0x278>
 8006d86:	2102      	movs	r1, #2
 8006d88:	4817      	ldr	r0, [pc, #92]	; (8006de8 <mainLoop+0x2b4>)
 8006d8a:	f003 fab1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d10b      	bne.n	8006dac <mainLoop+0x278>
 8006d94:	2104      	movs	r1, #4
 8006d96:	4814      	ldr	r0, [pc, #80]	; (8006de8 <mainLoop+0x2b4>)
 8006d98:	f003 faaa 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d104      	bne.n	8006dac <mainLoop+0x278>
			menuGiris=1;
 8006da2:	4b25      	ldr	r3, [pc, #148]	; (8006e38 <mainLoop+0x304>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006da8:	f001 ffa8 	bl	8008cfc <lcd_clear>
		}

		if(menuGiris==1) {
 8006dac:	4b22      	ldr	r3, [pc, #136]	; (8006e38 <mainLoop+0x304>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <mainLoop+0x284>
			menu();
 8006db4:	f7fa fbfc 	bl	80015b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006dbc:	480b      	ldr	r0, [pc, #44]	; (8006dec <mainLoop+0x2b8>)
 8006dbe:	f003 fac6 	bl	800a34e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006dc6:	4821      	ldr	r0, [pc, #132]	; (8006e4c <mainLoop+0x318>)
 8006dc8:	f003 fa92 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d142      	bne.n	8006e58 <mainLoop+0x324>
 8006dd2:	4b1f      	ldr	r3, [pc, #124]	; (8006e50 <mainLoop+0x31c>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f083 0301 	eor.w	r3, r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d03b      	beq.n	8006e58 <mainLoop+0x324>
			stopVar=1;
 8006de0:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <mainLoop+0x320>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e03a      	b.n	8006e5e <mainLoop+0x32a>
 8006de8:	40010800 	.word	0x40010800
 8006dec:	40011000 	.word	0x40011000
 8006df0:	20000b1b 	.word	0x20000b1b
 8006df4:	20000ac8 	.word	0x20000ac8
 8006df8:	20000ae4 	.word	0x20000ae4
 8006dfc:	20000b18 	.word	0x20000b18
 8006e00:	200010d8 	.word	0x200010d8
 8006e04:	20000a18 	.word	0x20000a18
 8006e08:	20000b0d 	.word	0x20000b0d
 8006e0c:	0800eba0 	.word	0x0800eba0
 8006e10:	0800ebb4 	.word	0x0800ebb4
 8006e14:	20000b19 	.word	0x20000b19
 8006e18:	20000b1a 	.word	0x20000b1a
 8006e1c:	0800ebc8 	.word	0x0800ebc8
 8006e20:	0800ebdc 	.word	0x0800ebdc
 8006e24:	0800ebf0 	.word	0x0800ebf0
 8006e28:	0800ec04 	.word	0x0800ec04
 8006e2c:	0800ec18 	.word	0x0800ec18
 8006e30:	0800ec2c 	.word	0x0800ec2c
 8006e34:	0800ec40 	.word	0x0800ec40
 8006e38:	20000b09 	.word	0x20000b09
 8006e3c:	20000b20 	.word	0x20000b20
 8006e40:	20000b0a 	.word	0x20000b0a
 8006e44:	0800ec54 	.word	0x0800ec54
 8006e48:	0800ec68 	.word	0x0800ec68
 8006e4c:	40010c00 	.word	0x40010c00
 8006e50:	20000b41 	.word	0x20000b41
 8006e54:	20000b3e 	.word	0x20000b3e
		} else {
			stopVar=0;
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <mainLoop+0x340>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006e5e:	f7fd ffa7 	bl	8004db0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006e62:	f7fd ffd9 	bl	8004e18 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006e66:	f7fe f81d 	bl	8004ea4 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006e6a:	f7fe f86d 	bl	8004f48 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006e6e:	f7ff fbc7 	bl	8006600 <checkDemoModCalisma>
		checkLCDBacklight();
 8006e72:	e662      	b.n	8006b3a <mainLoop+0x6>
 8006e74:	20000b3e 	.word	0x20000b3e

08006e78 <loadMenuTexts>:
char secilenDilText[16];
char menudenCikisText[16];
char enteraBasinizText[16];
char hataKoduText[16];

void loadMenuTexts(uint8_t dilSecim) {
 8006e78:	b490      	push	{r4, r7}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 1) {
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 834b 	bne.w	8007520 <loadMenuTexts+0x6a8>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 16); //destination, source, size
 8006e8a:	4ab8      	ldr	r2, [pc, #736]	; (800716c <loadMenuTexts+0x2f4>)
 8006e8c:	4bb8      	ldr	r3, [pc, #736]	; (8007170 <loadMenuTexts+0x2f8>)
 8006e8e:	4614      	mov	r4, r2
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ayarlarText, ayarlarTextTR, 16);
 8006e9a:	4ab6      	ldr	r2, [pc, #728]	; (8007174 <loadMenuTexts+0x2fc>)
 8006e9c:	4bb6      	ldr	r3, [pc, #728]	; (8007178 <loadMenuTexts+0x300>)
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	6859      	ldr	r1, [r3, #4]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKayitListText, hataKayitListTextTR, 16);
 8006eaa:	4ab4      	ldr	r2, [pc, #720]	; (800717c <loadMenuTexts+0x304>)
 8006eac:	4bb4      	ldr	r3, [pc, #720]	; (8007180 <loadMenuTexts+0x308>)
 8006eae:	4614      	mov	r4, r2
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birHataKoduText, birHataKoduTextTR, 16);
 8006eba:	4ab2      	ldr	r2, [pc, #712]	; (8007184 <loadMenuTexts+0x30c>)
 8006ebc:	4bb2      	ldr	r3, [pc, #712]	; (8007188 <loadMenuTexts+0x310>)
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	6859      	ldr	r1, [r3, #4]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 16);
 8006eca:	4ab0      	ldr	r2, [pc, #704]	; (800718c <loadMenuTexts+0x314>)
 8006ecc:	4bb0      	ldr	r3, [pc, #704]	; (8007190 <loadMenuTexts+0x318>)
 8006ece:	4614      	mov	r4, r2
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ucHataKoduText, ucHataKoduTextTR, 16);
 8006eda:	4aae      	ldr	r2, [pc, #696]	; (8007194 <loadMenuTexts+0x31c>)
 8006edc:	4bae      	ldr	r3, [pc, #696]	; (8007198 <loadMenuTexts+0x320>)
 8006ede:	4614      	mov	r4, r2
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	6859      	ldr	r1, [r3, #4]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dortHataKoduText, dortHataKoduTextTR, 16);
 8006eea:	4aac      	ldr	r2, [pc, #688]	; (800719c <loadMenuTexts+0x324>)
 8006eec:	4bac      	ldr	r3, [pc, #688]	; (80071a0 <loadMenuTexts+0x328>)
 8006eee:	4614      	mov	r4, r2
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(besHataKoduText, besHataKoduTextTR, 16);
 8006efa:	4aaa      	ldr	r2, [pc, #680]	; (80071a4 <loadMenuTexts+0x32c>)
 8006efc:	4baa      	ldr	r3, [pc, #680]	; (80071a8 <loadMenuTexts+0x330>)
 8006efe:	4614      	mov	r4, r2
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altiHataKoduText, altiHataKoduTextTR, 16);
 8006f0a:	4aa8      	ldr	r2, [pc, #672]	; (80071ac <loadMenuTexts+0x334>)
 8006f0c:	4ba8      	ldr	r3, [pc, #672]	; (80071b0 <loadMenuTexts+0x338>)
 8006f0e:	4614      	mov	r4, r2
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	6859      	ldr	r1, [r3, #4]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yediHataKoduText, yediHataKoduTextTR, 16);
 8006f1a:	4aa6      	ldr	r2, [pc, #664]	; (80071b4 <loadMenuTexts+0x33c>)
 8006f1c:	4ba6      	ldr	r3, [pc, #664]	; (80071b8 <loadMenuTexts+0x340>)
 8006f1e:	4614      	mov	r4, r2
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	6859      	ldr	r1, [r3, #4]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 16);
 8006f2a:	4aa4      	ldr	r2, [pc, #656]	; (80071bc <loadMenuTexts+0x344>)
 8006f2c:	4ba4      	ldr	r3, [pc, #656]	; (80071c0 <loadMenuTexts+0x348>)
 8006f2e:	4614      	mov	r4, r2
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	6859      	ldr	r1, [r3, #4]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 16);
 8006f3a:	4aa2      	ldr	r2, [pc, #648]	; (80071c4 <loadMenuTexts+0x34c>)
 8006f3c:	4ba2      	ldr	r3, [pc, #648]	; (80071c8 <loadMenuTexts+0x350>)
 8006f3e:	4614      	mov	r4, r2
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	6859      	ldr	r1, [r3, #4]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(onHataKoduText, onHataKoduTextTR, 16);
 8006f4a:	4aa0      	ldr	r2, [pc, #640]	; (80071cc <loadMenuTexts+0x354>)
 8006f4c:	4ba0      	ldr	r3, [pc, #640]	; (80071d0 <loadMenuTexts+0x358>)
 8006f4e:	4614      	mov	r4, r2
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	6859      	ldr	r1, [r3, #4]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(silmekIcinText, silmekIcinTextTR, 16);
 8006f5a:	4a9e      	ldr	r2, [pc, #632]	; (80071d4 <loadMenuTexts+0x35c>)
 8006f5c:	4b9e      	ldr	r3, [pc, #632]	; (80071d8 <loadMenuTexts+0x360>)
 8006f5e:	4614      	mov	r4, r2
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	6859      	ldr	r1, [r3, #4]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSekliText, calismaSekliTextTR, 16);
 8006f6a:	4a9c      	ldr	r2, [pc, #624]	; (80071dc <loadMenuTexts+0x364>)
 8006f6c:	4b9c      	ldr	r3, [pc, #624]	; (80071e0 <loadMenuTexts+0x368>)
 8006f6e:	4614      	mov	r4, r2
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 16);
 8006f7a:	4a9a      	ldr	r2, [pc, #616]	; (80071e4 <loadMenuTexts+0x36c>)
 8006f7c:	4b9a      	ldr	r3, [pc, #616]	; (80071e8 <loadMenuTexts+0x370>)
 8006f7e:	4614      	mov	r4, r2
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	6859      	ldr	r1, [r3, #4]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 16);
 8006f8a:	4a98      	ldr	r2, [pc, #608]	; (80071ec <loadMenuTexts+0x374>)
 8006f8c:	4b98      	ldr	r3, [pc, #608]	; (80071f0 <loadMenuTexts+0x378>)
 8006f8e:	4614      	mov	r4, r2
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	6859      	ldr	r1, [r3, #4]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basGonderText, basGonderTextTR, 16);
 8006f9a:	4a96      	ldr	r2, [pc, #600]	; (80071f4 <loadMenuTexts+0x37c>)
 8006f9c:	4b96      	ldr	r3, [pc, #600]	; (80071f8 <loadMenuTexts+0x380>)
 8006f9e:	4614      	mov	r4, r2
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	6859      	ldr	r1, [r3, #4]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 16);
 8006faa:	4a94      	ldr	r2, [pc, #592]	; (80071fc <loadMenuTexts+0x384>)
 8006fac:	4b94      	ldr	r3, [pc, #592]	; (8007200 <loadMenuTexts+0x388>)
 8006fae:	4614      	mov	r4, r2
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	6859      	ldr	r1, [r3, #4]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(pasifText, pasifTextTR, 16);
 8006fba:	4a92      	ldr	r2, [pc, #584]	; (8007204 <loadMenuTexts+0x38c>)
 8006fbc:	4b92      	ldr	r3, [pc, #584]	; (8007208 <loadMenuTexts+0x390>)
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	6818      	ldr	r0, [r3, #0]
 8006fc2:	6859      	ldr	r1, [r3, #4]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(aktifText, aktifTextTR, 16);
 8006fca:	4a90      	ldr	r2, [pc, #576]	; (800720c <loadMenuTexts+0x394>)
 8006fcc:	4b90      	ldr	r3, [pc, #576]	; (8007210 <loadMenuTexts+0x398>)
 8006fce:	4614      	mov	r4, r2
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	6859      	ldr	r1, [r3, #4]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 16);
 8006fda:	4a8e      	ldr	r2, [pc, #568]	; (8007214 <loadMenuTexts+0x39c>)
 8006fdc:	4b8e      	ldr	r3, [pc, #568]	; (8007218 <loadMenuTexts+0x3a0>)
 8006fde:	4614      	mov	r4, r2
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	6859      	ldr	r1, [r3, #4]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altLimitText, altLimitTextTR, 16);
 8006fea:	4a8c      	ldr	r2, [pc, #560]	; (800721c <loadMenuTexts+0x3a4>)
 8006fec:	4b8c      	ldr	r3, [pc, #560]	; (8007220 <loadMenuTexts+0x3a8>)
 8006fee:	4614      	mov	r4, r2
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	6859      	ldr	r1, [r3, #4]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basincSalteriText, basincSalteriTextTR, 16);
 8006ffa:	4a8a      	ldr	r2, [pc, #552]	; (8007224 <loadMenuTexts+0x3ac>)
 8006ffc:	4b8a      	ldr	r3, [pc, #552]	; (8007228 <loadMenuTexts+0x3b0>)
 8006ffe:	4614      	mov	r4, r2
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	6859      	ldr	r1, [r3, #4]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 16);
 800700a:	4a88      	ldr	r2, [pc, #544]	; (800722c <loadMenuTexts+0x3b4>)
 800700c:	4b88      	ldr	r3, [pc, #544]	; (8007230 <loadMenuTexts+0x3b8>)
 800700e:	4614      	mov	r4, r2
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 16);
 800701a:	4a86      	ldr	r2, [pc, #536]	; (8007234 <loadMenuTexts+0x3bc>)
 800701c:	4b86      	ldr	r3, [pc, #536]	; (8007238 <loadMenuTexts+0x3c0>)
 800701e:	4614      	mov	r4, r2
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	6859      	ldr	r1, [r3, #4]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 16);
 800702a:	4a84      	ldr	r2, [pc, #528]	; (800723c <loadMenuTexts+0x3c4>)
 800702c:	4b84      	ldr	r3, [pc, #528]	; (8007240 <loadMenuTexts+0x3c8>)
 800702e:	4614      	mov	r4, r2
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	6859      	ldr	r1, [r3, #4]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 16);
 800703a:	4a82      	ldr	r2, [pc, #520]	; (8007244 <loadMenuTexts+0x3cc>)
 800703c:	4b82      	ldr	r3, [pc, #520]	; (8007248 <loadMenuTexts+0x3d0>)
 800703e:	4614      	mov	r4, r2
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	6859      	ldr	r1, [r3, #4]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 16);
 800704a:	4a80      	ldr	r2, [pc, #512]	; (800724c <loadMenuTexts+0x3d4>)
 800704c:	4b80      	ldr	r3, [pc, #512]	; (8007250 <loadMenuTexts+0x3d8>)
 800704e:	4614      	mov	r4, r2
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	6859      	ldr	r1, [r3, #4]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 16);
 800705a:	4a7e      	ldr	r2, [pc, #504]	; (8007254 <loadMenuTexts+0x3dc>)
 800705c:	4b7e      	ldr	r3, [pc, #504]	; (8007258 <loadMenuTexts+0x3e0>)
 800705e:	4614      	mov	r4, r2
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	6859      	ldr	r1, [r3, #4]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katButonuEXTText, katButonuEXTTextTR, 16);
 800706a:	4a7c      	ldr	r2, [pc, #496]	; (800725c <loadMenuTexts+0x3e4>)
 800706c:	4b7c      	ldr	r3, [pc, #496]	; (8007260 <loadMenuTexts+0x3e8>)
 800706e:	4614      	mov	r4, r2
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	6859      	ldr	r1, [r3, #4]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 16);
 800707a:	4a7a      	ldr	r2, [pc, #488]	; (8007264 <loadMenuTexts+0x3ec>)
 800707c:	4b7a      	ldr	r3, [pc, #488]	; (8007268 <loadMenuTexts+0x3f0>)
 800707e:	4614      	mov	r4, r2
 8007080:	6818      	ldr	r0, [r3, #0]
 8007082:	6859      	ldr	r1, [r3, #4]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(butonKontrolluText, butonKontrolluTextTR, 16);
 800708a:	4a78      	ldr	r2, [pc, #480]	; (800726c <loadMenuTexts+0x3f4>)
 800708c:	4b78      	ldr	r3, [pc, #480]	; (8007270 <loadMenuTexts+0x3f8>)
 800708e:	4614      	mov	r4, r2
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	6859      	ldr	r1, [r3, #4]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 16);
 800709a:	4a76      	ldr	r2, [pc, #472]	; (8007274 <loadMenuTexts+0x3fc>)
 800709c:	4b76      	ldr	r3, [pc, #472]	; (8007278 <loadMenuTexts+0x400>)
 800709e:	4614      	mov	r4, r2
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	6859      	ldr	r1, [r3, #4]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kacSaniyeText, kacSaniyeTextTR, 16);
 80070aa:	4a74      	ldr	r2, [pc, #464]	; (800727c <loadMenuTexts+0x404>)
 80070ac:	4b74      	ldr	r3, [pc, #464]	; (8007280 <loadMenuTexts+0x408>)
 80070ae:	4614      	mov	r4, r2
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	6859      	ldr	r1, [r3, #4]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 16);
 80070ba:	4a72      	ldr	r2, [pc, #456]	; (8007284 <loadMenuTexts+0x40c>)
 80070bc:	4b72      	ldr	r3, [pc, #456]	; (8007288 <loadMenuTexts+0x410>)
 80070be:	4614      	mov	r4, r2
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	6859      	ldr	r1, [r3, #4]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 16);
 80070ca:	4a70      	ldr	r2, [pc, #448]	; (800728c <loadMenuTexts+0x414>)
 80070cc:	4b70      	ldr	r3, [pc, #448]	; (8007290 <loadMenuTexts+0x418>)
 80070ce:	4614      	mov	r4, r2
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	6859      	ldr	r1, [r3, #4]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 16);
 80070da:	4a6e      	ldr	r2, [pc, #440]	; (8007294 <loadMenuTexts+0x41c>)
 80070dc:	4b6e      	ldr	r3, [pc, #440]	; (8007298 <loadMenuTexts+0x420>)
 80070de:	4614      	mov	r4, r2
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	6859      	ldr	r1, [r3, #4]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 16);
 80070ea:	4a6c      	ldr	r2, [pc, #432]	; (800729c <loadMenuTexts+0x424>)
 80070ec:	4b6c      	ldr	r3, [pc, #432]	; (80072a0 <loadMenuTexts+0x428>)
 80070ee:	4614      	mov	r4, r2
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	6859      	ldr	r1, [r3, #4]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 16);
 80070fa:	4a6a      	ldr	r2, [pc, #424]	; (80072a4 <loadMenuTexts+0x42c>)
 80070fc:	4b6a      	ldr	r3, [pc, #424]	; (80072a8 <loadMenuTexts+0x430>)
 80070fe:	4614      	mov	r4, r2
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	6859      	ldr	r1, [r3, #4]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 16);
 800710a:	4a68      	ldr	r2, [pc, #416]	; (80072ac <loadMenuTexts+0x434>)
 800710c:	4b68      	ldr	r3, [pc, #416]	; (80072b0 <loadMenuTexts+0x438>)
 800710e:	4614      	mov	r4, r2
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	6859      	ldr	r1, [r3, #4]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 16);
 800711a:	4a66      	ldr	r2, [pc, #408]	; (80072b4 <loadMenuTexts+0x43c>)
 800711c:	4b66      	ldr	r3, [pc, #408]	; (80072b8 <loadMenuTexts+0x440>)
 800711e:	4614      	mov	r4, r2
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	6859      	ldr	r1, [r3, #4]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 16);
 800712a:	4a64      	ldr	r2, [pc, #400]	; (80072bc <loadMenuTexts+0x444>)
 800712c:	4b64      	ldr	r3, [pc, #400]	; (80072c0 <loadMenuTexts+0x448>)
 800712e:	4614      	mov	r4, r2
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	6859      	ldr	r1, [r3, #4]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 16);
 800713a:	4a62      	ldr	r2, [pc, #392]	; (80072c4 <loadMenuTexts+0x44c>)
 800713c:	4b62      	ldr	r3, [pc, #392]	; (80072c8 <loadMenuTexts+0x450>)
 800713e:	4614      	mov	r4, r2
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	6859      	ldr	r1, [r3, #4]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 16);
 800714a:	4a60      	ldr	r2, [pc, #384]	; (80072cc <loadMenuTexts+0x454>)
 800714c:	4b60      	ldr	r3, [pc, #384]	; (80072d0 <loadMenuTexts+0x458>)
 800714e:	4614      	mov	r4, r2
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	6859      	ldr	r1, [r3, #4]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAktifText, devirmeAktifTextTR, 16);
 800715a:	4a5e      	ldr	r2, [pc, #376]	; (80072d4 <loadMenuTexts+0x45c>)
 800715c:	4b5e      	ldr	r3, [pc, #376]	; (80072d8 <loadMenuTexts+0x460>)
 800715e:	4614      	mov	r4, r2
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	6859      	ldr	r1, [r3, #4]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800716a:	e0b7      	b.n	80072dc <loadMenuTexts+0x464>
 800716c:	20000c4c 	.word	0x20000c4c
 8007170:	200000e0 	.word	0x200000e0
 8007174:	20000c5c 	.word	0x20000c5c
 8007178:	200000f0 	.word	0x200000f0
 800717c:	20000c6c 	.word	0x20000c6c
 8007180:	20000100 	.word	0x20000100
 8007184:	20000c7c 	.word	0x20000c7c
 8007188:	20000110 	.word	0x20000110
 800718c:	20000c8c 	.word	0x20000c8c
 8007190:	20000120 	.word	0x20000120
 8007194:	20000c9c 	.word	0x20000c9c
 8007198:	20000130 	.word	0x20000130
 800719c:	20000cac 	.word	0x20000cac
 80071a0:	20000140 	.word	0x20000140
 80071a4:	20000cbc 	.word	0x20000cbc
 80071a8:	20000150 	.word	0x20000150
 80071ac:	20000ccc 	.word	0x20000ccc
 80071b0:	20000160 	.word	0x20000160
 80071b4:	20000cdc 	.word	0x20000cdc
 80071b8:	20000170 	.word	0x20000170
 80071bc:	20000cec 	.word	0x20000cec
 80071c0:	20000180 	.word	0x20000180
 80071c4:	20000cfc 	.word	0x20000cfc
 80071c8:	20000190 	.word	0x20000190
 80071cc:	20000d0c 	.word	0x20000d0c
 80071d0:	200001a0 	.word	0x200001a0
 80071d4:	20000d1c 	.word	0x20000d1c
 80071d8:	200001b0 	.word	0x200001b0
 80071dc:	20000d2c 	.word	0x20000d2c
 80071e0:	200001c0 	.word	0x200001c0
 80071e4:	20000d3c 	.word	0x20000d3c
 80071e8:	200001d0 	.word	0x200001d0
 80071ec:	20000d4c 	.word	0x20000d4c
 80071f0:	200001e0 	.word	0x200001e0
 80071f4:	20000d5c 	.word	0x20000d5c
 80071f8:	200001f0 	.word	0x200001f0
 80071fc:	20000d6c 	.word	0x20000d6c
 8007200:	20000200 	.word	0x20000200
 8007204:	20000d7c 	.word	0x20000d7c
 8007208:	20000210 	.word	0x20000210
 800720c:	20000d8c 	.word	0x20000d8c
 8007210:	20000220 	.word	0x20000220
 8007214:	20000d9c 	.word	0x20000d9c
 8007218:	20000230 	.word	0x20000230
 800721c:	20000dac 	.word	0x20000dac
 8007220:	20000240 	.word	0x20000240
 8007224:	20000dbc 	.word	0x20000dbc
 8007228:	20000250 	.word	0x20000250
 800722c:	20000dcc 	.word	0x20000dcc
 8007230:	20000260 	.word	0x20000260
 8007234:	20000ddc 	.word	0x20000ddc
 8007238:	20000270 	.word	0x20000270
 800723c:	20000dec 	.word	0x20000dec
 8007240:	20000280 	.word	0x20000280
 8007244:	20000dfc 	.word	0x20000dfc
 8007248:	20000290 	.word	0x20000290
 800724c:	20000e0c 	.word	0x20000e0c
 8007250:	200002a0 	.word	0x200002a0
 8007254:	20000e1c 	.word	0x20000e1c
 8007258:	200002b0 	.word	0x200002b0
 800725c:	20000e2c 	.word	0x20000e2c
 8007260:	200002c0 	.word	0x200002c0
 8007264:	20000e3c 	.word	0x20000e3c
 8007268:	200002d0 	.word	0x200002d0
 800726c:	20000e4c 	.word	0x20000e4c
 8007270:	200002e0 	.word	0x200002e0
 8007274:	20000e5c 	.word	0x20000e5c
 8007278:	200002f0 	.word	0x200002f0
 800727c:	20000e6c 	.word	0x20000e6c
 8007280:	20000300 	.word	0x20000300
 8007284:	20000e7c 	.word	0x20000e7c
 8007288:	20000310 	.word	0x20000310
 800728c:	20000e8c 	.word	0x20000e8c
 8007290:	20000320 	.word	0x20000320
 8007294:	20000e9c 	.word	0x20000e9c
 8007298:	20000330 	.word	0x20000330
 800729c:	20000eac 	.word	0x20000eac
 80072a0:	20000340 	.word	0x20000340
 80072a4:	20000ebc 	.word	0x20000ebc
 80072a8:	20000350 	.word	0x20000350
 80072ac:	20000ecc 	.word	0x20000ecc
 80072b0:	20000360 	.word	0x20000360
 80072b4:	20000edc 	.word	0x20000edc
 80072b8:	20000370 	.word	0x20000370
 80072bc:	20000eec 	.word	0x20000eec
 80072c0:	20000380 	.word	0x20000380
 80072c4:	20000efc 	.word	0x20000efc
 80072c8:	20000390 	.word	0x20000390
 80072cc:	20000f0c 	.word	0x20000f0c
 80072d0:	200003a0 	.word	0x200003a0
 80072d4:	20000f1c 	.word	0x20000f1c
 80072d8:	200003b0 	.word	0x200003b0
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 16);
 80072dc:	4a60      	ldr	r2, [pc, #384]	; (8007460 <loadMenuTexts+0x5e8>)
 80072de:	4b61      	ldr	r3, [pc, #388]	; (8007464 <loadMenuTexts+0x5ec>)
 80072e0:	4614      	mov	r4, r2
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	6859      	ldr	r1, [r3, #4]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariText, devirmeYukariTextTR, 16);
 80072ec:	4a5e      	ldr	r2, [pc, #376]	; (8007468 <loadMenuTexts+0x5f0>)
 80072ee:	4b5f      	ldr	r3, [pc, #380]	; (800746c <loadMenuTexts+0x5f4>)
 80072f0:	4614      	mov	r4, r2
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	6859      	ldr	r1, [r3, #4]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 16);
 80072fc:	4a5c      	ldr	r2, [pc, #368]	; (8007470 <loadMenuTexts+0x5f8>)
 80072fe:	4b5d      	ldr	r3, [pc, #372]	; (8007474 <loadMenuTexts+0x5fc>)
 8007300:	4614      	mov	r4, r2
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	6859      	ldr	r1, [r3, #4]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 16);
 800730c:	4a5a      	ldr	r2, [pc, #360]	; (8007478 <loadMenuTexts+0x600>)
 800730e:	4b5b      	ldr	r3, [pc, #364]	; (800747c <loadMenuTexts+0x604>)
 8007310:	4614      	mov	r4, r2
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	6859      	ldr	r1, [r3, #4]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 16);
 800731c:	4a58      	ldr	r2, [pc, #352]	; (8007480 <loadMenuTexts+0x608>)
 800731e:	4b59      	ldr	r3, [pc, #356]	; (8007484 <loadMenuTexts+0x60c>)
 8007320:	4614      	mov	r4, r2
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	6859      	ldr	r1, [r3, #4]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 16);
 800732c:	4a56      	ldr	r2, [pc, #344]	; (8007488 <loadMenuTexts+0x610>)
 800732e:	4b57      	ldr	r3, [pc, #348]	; (800748c <loadMenuTexts+0x614>)
 8007330:	4614      	mov	r4, r2
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	6859      	ldr	r1, [r3, #4]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 16);
 800733c:	4a54      	ldr	r2, [pc, #336]	; (8007490 <loadMenuTexts+0x618>)
 800733e:	4b55      	ldr	r3, [pc, #340]	; (8007494 <loadMenuTexts+0x61c>)
 8007340:	4614      	mov	r4, r2
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	6859      	ldr	r1, [r3, #4]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tekTesirText, tekTesirTextTR, 16);
 800734c:	4a52      	ldr	r2, [pc, #328]	; (8007498 <loadMenuTexts+0x620>)
 800734e:	4b53      	ldr	r3, [pc, #332]	; (800749c <loadMenuTexts+0x624>)
 8007350:	4614      	mov	r4, r2
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	6859      	ldr	r1, [r3, #4]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ciftTesirText, ciftTesirTextTR, 16);
 800735c:	4a50      	ldr	r2, [pc, #320]	; (80074a0 <loadMenuTexts+0x628>)
 800735e:	4b51      	ldr	r3, [pc, #324]	; (80074a4 <loadMenuTexts+0x62c>)
 8007360:	4614      	mov	r4, r2
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	6859      	ldr	r1, [r3, #4]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 16);
 800736c:	4a4e      	ldr	r2, [pc, #312]	; (80074a8 <loadMenuTexts+0x630>)
 800736e:	4b4f      	ldr	r3, [pc, #316]	; (80074ac <loadMenuTexts+0x634>)
 8007370:	4614      	mov	r4, r2
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	6859      	ldr	r1, [r3, #4]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariValfSureText, yukariValfSureTextTR, 16);
 800737c:	4a4c      	ldr	r2, [pc, #304]	; (80074b0 <loadMenuTexts+0x638>)
 800737e:	4b4d      	ldr	r3, [pc, #308]	; (80074b4 <loadMenuTexts+0x63c>)
 8007380:	4614      	mov	r4, r2
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	6859      	ldr	r1, [r3, #4]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(asagiValfSureText, asagiValfSureTextTR, 16);
 800738c:	4a4a      	ldr	r2, [pc, #296]	; (80074b8 <loadMenuTexts+0x640>)
 800738e:	4b4b      	ldr	r3, [pc, #300]	; (80074bc <loadMenuTexts+0x644>)
 8007390:	4614      	mov	r4, r2
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	6859      	ldr	r1, [r3, #4]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 16);
 800739c:	4a48      	ldr	r2, [pc, #288]	; (80074c0 <loadMenuTexts+0x648>)
 800739e:	4b49      	ldr	r3, [pc, #292]	; (80074c4 <loadMenuTexts+0x64c>)
 80073a0:	4614      	mov	r4, r2
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	6859      	ldr	r1, [r3, #4]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ileriValfSureText, ileriValfSureTextTR, 16);
 80073ac:	4a46      	ldr	r2, [pc, #280]	; (80074c8 <loadMenuTexts+0x650>)
 80073ae:	4b47      	ldr	r3, [pc, #284]	; (80074cc <loadMenuTexts+0x654>)
 80073b0:	4614      	mov	r4, r2
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 16);
 80073bc:	4a44      	ldr	r2, [pc, #272]	; (80074d0 <loadMenuTexts+0x658>)
 80073be:	4b45      	ldr	r3, [pc, #276]	; (80074d4 <loadMenuTexts+0x65c>)
 80073c0:	4614      	mov	r4, r2
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	6859      	ldr	r1, [r3, #4]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(geriValfSureText, geriValfSureTextTR, 16);
 80073cc:	4a42      	ldr	r2, [pc, #264]	; (80074d8 <loadMenuTexts+0x660>)
 80073ce:	4b43      	ldr	r3, [pc, #268]	; (80074dc <loadMenuTexts+0x664>)
 80073d0:	4614      	mov	r4, r2
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	6859      	ldr	r1, [r3, #4]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSuresiText, calismaSuresiTextTR, 16);
 80073dc:	4a40      	ldr	r2, [pc, #256]	; (80074e0 <loadMenuTexts+0x668>)
 80073de:	4b41      	ldr	r3, [pc, #260]	; (80074e4 <loadMenuTexts+0x66c>)
 80073e0:	4614      	mov	r4, r2
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	6859      	ldr	r1, [r3, #4]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSayisiText, calismaSayisiTextTR, 16);
 80073ec:	4a3e      	ldr	r2, [pc, #248]	; (80074e8 <loadMenuTexts+0x670>)
 80073ee:	4b3f      	ldr	r3, [pc, #252]	; (80074ec <loadMenuTexts+0x674>)
 80073f0:	4614      	mov	r4, r2
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	6859      	ldr	r1, [r3, #4]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 16);
 80073fc:	4a3c      	ldr	r2, [pc, #240]	; (80074f0 <loadMenuTexts+0x678>)
 80073fe:	4b3d      	ldr	r3, [pc, #244]	; (80074f4 <loadMenuTexts+0x67c>)
 8007400:	4614      	mov	r4, r2
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	6859      	ldr	r1, [r3, #4]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dilSecimText, dilSecimTextTR, 16);
 800740c:	4a3a      	ldr	r2, [pc, #232]	; (80074f8 <loadMenuTexts+0x680>)
 800740e:	4b3b      	ldr	r3, [pc, #236]	; (80074fc <loadMenuTexts+0x684>)
 8007410:	4614      	mov	r4, r2
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	6859      	ldr	r1, [r3, #4]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(secilenDilText, secilenDilTextTR, 16);
 800741c:	4a38      	ldr	r2, [pc, #224]	; (8007500 <loadMenuTexts+0x688>)
 800741e:	4b39      	ldr	r3, [pc, #228]	; (8007504 <loadMenuTexts+0x68c>)
 8007420:	4614      	mov	r4, r2
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	6859      	ldr	r1, [r3, #4]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(menudenCikisText, menudenCikisTextTR, 16);
 800742c:	4a36      	ldr	r2, [pc, #216]	; (8007508 <loadMenuTexts+0x690>)
 800742e:	4b37      	ldr	r3, [pc, #220]	; (800750c <loadMenuTexts+0x694>)
 8007430:	4614      	mov	r4, r2
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enteraBasinizText, enteraBasinizTextTR, 16);
 800743c:	4a34      	ldr	r2, [pc, #208]	; (8007510 <loadMenuTexts+0x698>)
 800743e:	4b35      	ldr	r3, [pc, #212]	; (8007514 <loadMenuTexts+0x69c>)
 8007440:	4614      	mov	r4, r2
 8007442:	6818      	ldr	r0, [r3, #0]
 8007444:	6859      	ldr	r1, [r3, #4]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKoduText, hataKoduTextTR, 16);
 800744c:	4a32      	ldr	r2, [pc, #200]	; (8007518 <loadMenuTexts+0x6a0>)
 800744e:	4b33      	ldr	r3, [pc, #204]	; (800751c <loadMenuTexts+0x6a4>)
 8007450:	4614      	mov	r4, r2
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(secilenDilText, secilenDilTextEN, 16);
		memcpy(menudenCikisText, menudenCikisTextEN, 16);
		memcpy(enteraBasinizText, enteraBasinizTextEN, 16);
		memcpy(hataKoduText, hataKoduTextEN, 16);
	}
}
 800745c:	e34a      	b.n	8007af4 <loadMenuTexts+0xc7c>
 800745e:	bf00      	nop
 8007460:	20000f2c 	.word	0x20000f2c
 8007464:	200003c0 	.word	0x200003c0
 8007468:	20000f3c 	.word	0x20000f3c
 800746c:	200003d0 	.word	0x200003d0
 8007470:	20000f4c 	.word	0x20000f4c
 8007474:	200003e0 	.word	0x200003e0
 8007478:	20000f5c 	.word	0x20000f5c
 800747c:	200003f0 	.word	0x200003f0
 8007480:	20000f6c 	.word	0x20000f6c
 8007484:	20000400 	.word	0x20000400
 8007488:	20000f7c 	.word	0x20000f7c
 800748c:	20000410 	.word	0x20000410
 8007490:	20000f8c 	.word	0x20000f8c
 8007494:	20000420 	.word	0x20000420
 8007498:	20000f9c 	.word	0x20000f9c
 800749c:	20000430 	.word	0x20000430
 80074a0:	20000fac 	.word	0x20000fac
 80074a4:	20000440 	.word	0x20000440
 80074a8:	20000fbc 	.word	0x20000fbc
 80074ac:	20000450 	.word	0x20000450
 80074b0:	20000fcc 	.word	0x20000fcc
 80074b4:	20000460 	.word	0x20000460
 80074b8:	20000fdc 	.word	0x20000fdc
 80074bc:	20000470 	.word	0x20000470
 80074c0:	20000fec 	.word	0x20000fec
 80074c4:	20000480 	.word	0x20000480
 80074c8:	20000ffc 	.word	0x20000ffc
 80074cc:	20000490 	.word	0x20000490
 80074d0:	2000100c 	.word	0x2000100c
 80074d4:	200004a0 	.word	0x200004a0
 80074d8:	2000101c 	.word	0x2000101c
 80074dc:	200004b0 	.word	0x200004b0
 80074e0:	2000102c 	.word	0x2000102c
 80074e4:	200004c0 	.word	0x200004c0
 80074e8:	2000103c 	.word	0x2000103c
 80074ec:	200004d0 	.word	0x200004d0
 80074f0:	2000104c 	.word	0x2000104c
 80074f4:	200004e0 	.word	0x200004e0
 80074f8:	2000105c 	.word	0x2000105c
 80074fc:	200004f0 	.word	0x200004f0
 8007500:	2000106c 	.word	0x2000106c
 8007504:	20000500 	.word	0x20000500
 8007508:	2000107c 	.word	0x2000107c
 800750c:	20000510 	.word	0x20000510
 8007510:	2000108c 	.word	0x2000108c
 8007514:	20000520 	.word	0x20000520
 8007518:	2000109c 	.word	0x2000109c
 800751c:	20000530 	.word	0x20000530
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 16); //destination, source, size
 8007520:	4ab8      	ldr	r2, [pc, #736]	; (8007804 <loadMenuTexts+0x98c>)
 8007522:	4bb9      	ldr	r3, [pc, #740]	; (8007808 <loadMenuTexts+0x990>)
 8007524:	4614      	mov	r4, r2
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	6859      	ldr	r1, [r3, #4]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ayarlarText, ayarlarTextEN, 16);
 8007530:	4ab6      	ldr	r2, [pc, #728]	; (800780c <loadMenuTexts+0x994>)
 8007532:	4bb7      	ldr	r3, [pc, #732]	; (8007810 <loadMenuTexts+0x998>)
 8007534:	4614      	mov	r4, r2
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	6859      	ldr	r1, [r3, #4]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKayitListText, hataKayitListTextEN, 16);
 8007540:	4ab4      	ldr	r2, [pc, #720]	; (8007814 <loadMenuTexts+0x99c>)
 8007542:	4bb5      	ldr	r3, [pc, #724]	; (8007818 <loadMenuTexts+0x9a0>)
 8007544:	4614      	mov	r4, r2
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birHataKoduText, birHataKoduTextEN, 16);
 8007550:	4ab2      	ldr	r2, [pc, #712]	; (800781c <loadMenuTexts+0x9a4>)
 8007552:	4bb3      	ldr	r3, [pc, #716]	; (8007820 <loadMenuTexts+0x9a8>)
 8007554:	4614      	mov	r4, r2
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	6859      	ldr	r1, [r3, #4]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 16);
 8007560:	4ab0      	ldr	r2, [pc, #704]	; (8007824 <loadMenuTexts+0x9ac>)
 8007562:	4bb1      	ldr	r3, [pc, #708]	; (8007828 <loadMenuTexts+0x9b0>)
 8007564:	4614      	mov	r4, r2
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ucHataKoduText, ucHataKoduTextEN, 16);
 8007570:	4aae      	ldr	r2, [pc, #696]	; (800782c <loadMenuTexts+0x9b4>)
 8007572:	4baf      	ldr	r3, [pc, #700]	; (8007830 <loadMenuTexts+0x9b8>)
 8007574:	4614      	mov	r4, r2
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dortHataKoduText, dortHataKoduTextEN, 16);
 8007580:	4aac      	ldr	r2, [pc, #688]	; (8007834 <loadMenuTexts+0x9bc>)
 8007582:	4bad      	ldr	r3, [pc, #692]	; (8007838 <loadMenuTexts+0x9c0>)
 8007584:	4614      	mov	r4, r2
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	6859      	ldr	r1, [r3, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(besHataKoduText, besHataKoduTextEN, 16);
 8007590:	4aaa      	ldr	r2, [pc, #680]	; (800783c <loadMenuTexts+0x9c4>)
 8007592:	4bab      	ldr	r3, [pc, #684]	; (8007840 <loadMenuTexts+0x9c8>)
 8007594:	4614      	mov	r4, r2
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	6859      	ldr	r1, [r3, #4]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altiHataKoduText, altiHataKoduTextEN, 16);
 80075a0:	4aa8      	ldr	r2, [pc, #672]	; (8007844 <loadMenuTexts+0x9cc>)
 80075a2:	4ba9      	ldr	r3, [pc, #676]	; (8007848 <loadMenuTexts+0x9d0>)
 80075a4:	4614      	mov	r4, r2
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	6859      	ldr	r1, [r3, #4]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yediHataKoduText, yediHataKoduTextEN, 16);
 80075b0:	4aa6      	ldr	r2, [pc, #664]	; (800784c <loadMenuTexts+0x9d4>)
 80075b2:	4ba7      	ldr	r3, [pc, #668]	; (8007850 <loadMenuTexts+0x9d8>)
 80075b4:	4614      	mov	r4, r2
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	6859      	ldr	r1, [r3, #4]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 16);
 80075c0:	4aa4      	ldr	r2, [pc, #656]	; (8007854 <loadMenuTexts+0x9dc>)
 80075c2:	4ba5      	ldr	r3, [pc, #660]	; (8007858 <loadMenuTexts+0x9e0>)
 80075c4:	4614      	mov	r4, r2
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	6859      	ldr	r1, [r3, #4]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 16);
 80075d0:	4aa2      	ldr	r2, [pc, #648]	; (800785c <loadMenuTexts+0x9e4>)
 80075d2:	4ba3      	ldr	r3, [pc, #652]	; (8007860 <loadMenuTexts+0x9e8>)
 80075d4:	4614      	mov	r4, r2
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	6859      	ldr	r1, [r3, #4]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(onHataKoduText, onHataKoduTextEN, 16);
 80075e0:	4aa0      	ldr	r2, [pc, #640]	; (8007864 <loadMenuTexts+0x9ec>)
 80075e2:	4ba1      	ldr	r3, [pc, #644]	; (8007868 <loadMenuTexts+0x9f0>)
 80075e4:	4614      	mov	r4, r2
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	6859      	ldr	r1, [r3, #4]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(silmekIcinText, silmekIcinTextEN, 16);
 80075f0:	4a9e      	ldr	r2, [pc, #632]	; (800786c <loadMenuTexts+0x9f4>)
 80075f2:	4b9f      	ldr	r3, [pc, #636]	; (8007870 <loadMenuTexts+0x9f8>)
 80075f4:	4614      	mov	r4, r2
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSekliText, calismaSekliTextEN, 16);
 8007600:	4a9c      	ldr	r2, [pc, #624]	; (8007874 <loadMenuTexts+0x9fc>)
 8007602:	4b9d      	ldr	r3, [pc, #628]	; (8007878 <loadMenuTexts+0xa00>)
 8007604:	4614      	mov	r4, r2
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	6859      	ldr	r1, [r3, #4]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 16);
 8007610:	4a9a      	ldr	r2, [pc, #616]	; (800787c <loadMenuTexts+0xa04>)
 8007612:	4b9b      	ldr	r3, [pc, #620]	; (8007880 <loadMenuTexts+0xa08>)
 8007614:	4614      	mov	r4, r2
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	6859      	ldr	r1, [r3, #4]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 16);
 8007620:	4a98      	ldr	r2, [pc, #608]	; (8007884 <loadMenuTexts+0xa0c>)
 8007622:	4b99      	ldr	r3, [pc, #612]	; (8007888 <loadMenuTexts+0xa10>)
 8007624:	4614      	mov	r4, r2
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basGonderText, basGonderTextEN, 16);
 8007630:	4a96      	ldr	r2, [pc, #600]	; (800788c <loadMenuTexts+0xa14>)
 8007632:	4b97      	ldr	r3, [pc, #604]	; (8007890 <loadMenuTexts+0xa18>)
 8007634:	4614      	mov	r4, r2
 8007636:	6818      	ldr	r0, [r3, #0]
 8007638:	6859      	ldr	r1, [r3, #4]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 16);
 8007640:	4a94      	ldr	r2, [pc, #592]	; (8007894 <loadMenuTexts+0xa1c>)
 8007642:	4b95      	ldr	r3, [pc, #596]	; (8007898 <loadMenuTexts+0xa20>)
 8007644:	4614      	mov	r4, r2
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(pasifText, pasifTextEN, 16);
 8007650:	4a92      	ldr	r2, [pc, #584]	; (800789c <loadMenuTexts+0xa24>)
 8007652:	4b93      	ldr	r3, [pc, #588]	; (80078a0 <loadMenuTexts+0xa28>)
 8007654:	4614      	mov	r4, r2
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	6859      	ldr	r1, [r3, #4]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(aktifText, aktifTextEN, 16);
 8007660:	4a90      	ldr	r2, [pc, #576]	; (80078a4 <loadMenuTexts+0xa2c>)
 8007662:	4b91      	ldr	r3, [pc, #580]	; (80078a8 <loadMenuTexts+0xa30>)
 8007664:	4614      	mov	r4, r2
 8007666:	6818      	ldr	r0, [r3, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 16);
 8007670:	4a8e      	ldr	r2, [pc, #568]	; (80078ac <loadMenuTexts+0xa34>)
 8007672:	4b8f      	ldr	r3, [pc, #572]	; (80078b0 <loadMenuTexts+0xa38>)
 8007674:	4614      	mov	r4, r2
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	6859      	ldr	r1, [r3, #4]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(altLimitText, altLimitTextEN, 16);
 8007680:	4a8c      	ldr	r2, [pc, #560]	; (80078b4 <loadMenuTexts+0xa3c>)
 8007682:	4b8d      	ldr	r3, [pc, #564]	; (80078b8 <loadMenuTexts+0xa40>)
 8007684:	4614      	mov	r4, r2
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(basincSalteriText, basincSalteriTextEN, 16);
 8007690:	4a8a      	ldr	r2, [pc, #552]	; (80078bc <loadMenuTexts+0xa44>)
 8007692:	4b8b      	ldr	r3, [pc, #556]	; (80078c0 <loadMenuTexts+0xa48>)
 8007694:	4614      	mov	r4, r2
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	6859      	ldr	r1, [r3, #4]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 16);
 80076a0:	4a88      	ldr	r2, [pc, #544]	; (80078c4 <loadMenuTexts+0xa4c>)
 80076a2:	4b89      	ldr	r3, [pc, #548]	; (80078c8 <loadMenuTexts+0xa50>)
 80076a4:	4614      	mov	r4, r2
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	6859      	ldr	r1, [r3, #4]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 16);
 80076b0:	4a86      	ldr	r2, [pc, #536]	; (80078cc <loadMenuTexts+0xa54>)
 80076b2:	4b87      	ldr	r3, [pc, #540]	; (80078d0 <loadMenuTexts+0xa58>)
 80076b4:	4614      	mov	r4, r2
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	6859      	ldr	r1, [r3, #4]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 16);
 80076c0:	4a84      	ldr	r2, [pc, #528]	; (80078d4 <loadMenuTexts+0xa5c>)
 80076c2:	4b85      	ldr	r3, [pc, #532]	; (80078d8 <loadMenuTexts+0xa60>)
 80076c4:	4614      	mov	r4, r2
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	6859      	ldr	r1, [r3, #4]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 16);
 80076d0:	4a82      	ldr	r2, [pc, #520]	; (80078dc <loadMenuTexts+0xa64>)
 80076d2:	4b83      	ldr	r3, [pc, #524]	; (80078e0 <loadMenuTexts+0xa68>)
 80076d4:	4614      	mov	r4, r2
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	6859      	ldr	r1, [r3, #4]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 16);
 80076e0:	4a80      	ldr	r2, [pc, #512]	; (80078e4 <loadMenuTexts+0xa6c>)
 80076e2:	4b81      	ldr	r3, [pc, #516]	; (80078e8 <loadMenuTexts+0xa70>)
 80076e4:	4614      	mov	r4, r2
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	6859      	ldr	r1, [r3, #4]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 16);
 80076f0:	4a7e      	ldr	r2, [pc, #504]	; (80078ec <loadMenuTexts+0xa74>)
 80076f2:	4b7f      	ldr	r3, [pc, #508]	; (80078f0 <loadMenuTexts+0xa78>)
 80076f4:	4614      	mov	r4, r2
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	6859      	ldr	r1, [r3, #4]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(katButonuEXTText, katButonuEXTTextEN, 16);
 8007700:	4a7c      	ldr	r2, [pc, #496]	; (80078f4 <loadMenuTexts+0xa7c>)
 8007702:	4b7d      	ldr	r3, [pc, #500]	; (80078f8 <loadMenuTexts+0xa80>)
 8007704:	4614      	mov	r4, r2
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	6859      	ldr	r1, [r3, #4]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 16);
 8007710:	4a7a      	ldr	r2, [pc, #488]	; (80078fc <loadMenuTexts+0xa84>)
 8007712:	4b7b      	ldr	r3, [pc, #492]	; (8007900 <loadMenuTexts+0xa88>)
 8007714:	4614      	mov	r4, r2
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	6859      	ldr	r1, [r3, #4]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(butonKontrolluText, butonKontrolluTextEN, 16);
 8007720:	4a78      	ldr	r2, [pc, #480]	; (8007904 <loadMenuTexts+0xa8c>)
 8007722:	4b79      	ldr	r3, [pc, #484]	; (8007908 <loadMenuTexts+0xa90>)
 8007724:	4614      	mov	r4, r2
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	6859      	ldr	r1, [r3, #4]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 16);
 8007730:	4a76      	ldr	r2, [pc, #472]	; (800790c <loadMenuTexts+0xa94>)
 8007732:	4b77      	ldr	r3, [pc, #476]	; (8007910 <loadMenuTexts+0xa98>)
 8007734:	4614      	mov	r4, r2
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	6859      	ldr	r1, [r3, #4]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(kacSaniyeText, kacSaniyeTextEN, 16);
 8007740:	4a74      	ldr	r2, [pc, #464]	; (8007914 <loadMenuTexts+0xa9c>)
 8007742:	4b75      	ldr	r3, [pc, #468]	; (8007918 <loadMenuTexts+0xaa0>)
 8007744:	4614      	mov	r4, r2
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	6859      	ldr	r1, [r3, #4]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 16);
 8007750:	4a72      	ldr	r2, [pc, #456]	; (800791c <loadMenuTexts+0xaa4>)
 8007752:	4b73      	ldr	r3, [pc, #460]	; (8007920 <loadMenuTexts+0xaa8>)
 8007754:	4614      	mov	r4, r2
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	6859      	ldr	r1, [r3, #4]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 16);
 8007760:	4a70      	ldr	r2, [pc, #448]	; (8007924 <loadMenuTexts+0xaac>)
 8007762:	4b71      	ldr	r3, [pc, #452]	; (8007928 <loadMenuTexts+0xab0>)
 8007764:	4614      	mov	r4, r2
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	6859      	ldr	r1, [r3, #4]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 16);
 8007770:	4a6e      	ldr	r2, [pc, #440]	; (800792c <loadMenuTexts+0xab4>)
 8007772:	4b6f      	ldr	r3, [pc, #444]	; (8007930 <loadMenuTexts+0xab8>)
 8007774:	4614      	mov	r4, r2
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	6859      	ldr	r1, [r3, #4]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 16);
 8007780:	4a6c      	ldr	r2, [pc, #432]	; (8007934 <loadMenuTexts+0xabc>)
 8007782:	4b6d      	ldr	r3, [pc, #436]	; (8007938 <loadMenuTexts+0xac0>)
 8007784:	4614      	mov	r4, r2
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	6859      	ldr	r1, [r3, #4]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 16);
 8007790:	4a6a      	ldr	r2, [pc, #424]	; (800793c <loadMenuTexts+0xac4>)
 8007792:	4b6b      	ldr	r3, [pc, #428]	; (8007940 <loadMenuTexts+0xac8>)
 8007794:	4614      	mov	r4, r2
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	6859      	ldr	r1, [r3, #4]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 16);
 80077a0:	4a68      	ldr	r2, [pc, #416]	; (8007944 <loadMenuTexts+0xacc>)
 80077a2:	4b69      	ldr	r3, [pc, #420]	; (8007948 <loadMenuTexts+0xad0>)
 80077a4:	4614      	mov	r4, r2
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	6859      	ldr	r1, [r3, #4]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 16);
 80077b0:	4a66      	ldr	r2, [pc, #408]	; (800794c <loadMenuTexts+0xad4>)
 80077b2:	4b67      	ldr	r3, [pc, #412]	; (8007950 <loadMenuTexts+0xad8>)
 80077b4:	4614      	mov	r4, r2
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	6859      	ldr	r1, [r3, #4]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 16);
 80077c0:	4a64      	ldr	r2, [pc, #400]	; (8007954 <loadMenuTexts+0xadc>)
 80077c2:	4b65      	ldr	r3, [pc, #404]	; (8007958 <loadMenuTexts+0xae0>)
 80077c4:	4614      	mov	r4, r2
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	6859      	ldr	r1, [r3, #4]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 16);
 80077d0:	4a62      	ldr	r2, [pc, #392]	; (800795c <loadMenuTexts+0xae4>)
 80077d2:	4b63      	ldr	r3, [pc, #396]	; (8007960 <loadMenuTexts+0xae8>)
 80077d4:	4614      	mov	r4, r2
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	6859      	ldr	r1, [r3, #4]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 16);
 80077e0:	4a60      	ldr	r2, [pc, #384]	; (8007964 <loadMenuTexts+0xaec>)
 80077e2:	4b61      	ldr	r3, [pc, #388]	; (8007968 <loadMenuTexts+0xaf0>)
 80077e4:	4614      	mov	r4, r2
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	6859      	ldr	r1, [r3, #4]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAktifText, devirmeAktifTextEN, 16);
 80077f0:	4a5e      	ldr	r2, [pc, #376]	; (800796c <loadMenuTexts+0xaf4>)
 80077f2:	4b5f      	ldr	r3, [pc, #380]	; (8007970 <loadMenuTexts+0xaf8>)
 80077f4:	4614      	mov	r4, r2
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	6859      	ldr	r1, [r3, #4]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007800:	e0b8      	b.n	8007974 <loadMenuTexts+0xafc>
 8007802:	bf00      	nop
 8007804:	20000c4c 	.word	0x20000c4c
 8007808:	20000540 	.word	0x20000540
 800780c:	20000c5c 	.word	0x20000c5c
 8007810:	20000550 	.word	0x20000550
 8007814:	20000c6c 	.word	0x20000c6c
 8007818:	20000560 	.word	0x20000560
 800781c:	20000c7c 	.word	0x20000c7c
 8007820:	20000570 	.word	0x20000570
 8007824:	20000c8c 	.word	0x20000c8c
 8007828:	20000580 	.word	0x20000580
 800782c:	20000c9c 	.word	0x20000c9c
 8007830:	20000590 	.word	0x20000590
 8007834:	20000cac 	.word	0x20000cac
 8007838:	200005a0 	.word	0x200005a0
 800783c:	20000cbc 	.word	0x20000cbc
 8007840:	200005b0 	.word	0x200005b0
 8007844:	20000ccc 	.word	0x20000ccc
 8007848:	200005c0 	.word	0x200005c0
 800784c:	20000cdc 	.word	0x20000cdc
 8007850:	200005d0 	.word	0x200005d0
 8007854:	20000cec 	.word	0x20000cec
 8007858:	200005e0 	.word	0x200005e0
 800785c:	20000cfc 	.word	0x20000cfc
 8007860:	200005f0 	.word	0x200005f0
 8007864:	20000d0c 	.word	0x20000d0c
 8007868:	20000600 	.word	0x20000600
 800786c:	20000d1c 	.word	0x20000d1c
 8007870:	20000610 	.word	0x20000610
 8007874:	20000d2c 	.word	0x20000d2c
 8007878:	20000620 	.word	0x20000620
 800787c:	20000d3c 	.word	0x20000d3c
 8007880:	20000630 	.word	0x20000630
 8007884:	20000d4c 	.word	0x20000d4c
 8007888:	20000640 	.word	0x20000640
 800788c:	20000d5c 	.word	0x20000d5c
 8007890:	20000650 	.word	0x20000650
 8007894:	20000d6c 	.word	0x20000d6c
 8007898:	20000660 	.word	0x20000660
 800789c:	20000d7c 	.word	0x20000d7c
 80078a0:	20000670 	.word	0x20000670
 80078a4:	20000d8c 	.word	0x20000d8c
 80078a8:	20000680 	.word	0x20000680
 80078ac:	20000d9c 	.word	0x20000d9c
 80078b0:	20000690 	.word	0x20000690
 80078b4:	20000dac 	.word	0x20000dac
 80078b8:	200006a0 	.word	0x200006a0
 80078bc:	20000dbc 	.word	0x20000dbc
 80078c0:	200006b0 	.word	0x200006b0
 80078c4:	20000dcc 	.word	0x20000dcc
 80078c8:	200006c0 	.word	0x200006c0
 80078cc:	20000ddc 	.word	0x20000ddc
 80078d0:	200006d0 	.word	0x200006d0
 80078d4:	20000dec 	.word	0x20000dec
 80078d8:	200006e0 	.word	0x200006e0
 80078dc:	20000dfc 	.word	0x20000dfc
 80078e0:	200006f0 	.word	0x200006f0
 80078e4:	20000e0c 	.word	0x20000e0c
 80078e8:	20000700 	.word	0x20000700
 80078ec:	20000e1c 	.word	0x20000e1c
 80078f0:	20000710 	.word	0x20000710
 80078f4:	20000e2c 	.word	0x20000e2c
 80078f8:	20000720 	.word	0x20000720
 80078fc:	20000e3c 	.word	0x20000e3c
 8007900:	20000730 	.word	0x20000730
 8007904:	20000e4c 	.word	0x20000e4c
 8007908:	20000740 	.word	0x20000740
 800790c:	20000e5c 	.word	0x20000e5c
 8007910:	20000750 	.word	0x20000750
 8007914:	20000e6c 	.word	0x20000e6c
 8007918:	20000760 	.word	0x20000760
 800791c:	20000e7c 	.word	0x20000e7c
 8007920:	20000770 	.word	0x20000770
 8007924:	20000e8c 	.word	0x20000e8c
 8007928:	20000780 	.word	0x20000780
 800792c:	20000e9c 	.word	0x20000e9c
 8007930:	20000790 	.word	0x20000790
 8007934:	20000eac 	.word	0x20000eac
 8007938:	200007a0 	.word	0x200007a0
 800793c:	20000ebc 	.word	0x20000ebc
 8007940:	200007b0 	.word	0x200007b0
 8007944:	20000ecc 	.word	0x20000ecc
 8007948:	200007c0 	.word	0x200007c0
 800794c:	20000edc 	.word	0x20000edc
 8007950:	200007d0 	.word	0x200007d0
 8007954:	20000eec 	.word	0x20000eec
 8007958:	200007e0 	.word	0x200007e0
 800795c:	20000efc 	.word	0x20000efc
 8007960:	200007f0 	.word	0x200007f0
 8007964:	20000f0c 	.word	0x20000f0c
 8007968:	20000800 	.word	0x20000800
 800796c:	20000f1c 	.word	0x20000f1c
 8007970:	20000810 	.word	0x20000810
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 16);
 8007974:	4a62      	ldr	r2, [pc, #392]	; (8007b00 <loadMenuTexts+0xc88>)
 8007976:	4b63      	ldr	r3, [pc, #396]	; (8007b04 <loadMenuTexts+0xc8c>)
 8007978:	4614      	mov	r4, r2
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	6859      	ldr	r1, [r3, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariText, devirmeYukariTextEN, 16);
 8007984:	4a60      	ldr	r2, [pc, #384]	; (8007b08 <loadMenuTexts+0xc90>)
 8007986:	4b61      	ldr	r3, [pc, #388]	; (8007b0c <loadMenuTexts+0xc94>)
 8007988:	4614      	mov	r4, r2
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 16);
 8007994:	4a5e      	ldr	r2, [pc, #376]	; (8007b10 <loadMenuTexts+0xc98>)
 8007996:	4b5f      	ldr	r3, [pc, #380]	; (8007b14 <loadMenuTexts+0xc9c>)
 8007998:	4614      	mov	r4, r2
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	6859      	ldr	r1, [r3, #4]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 16);
 80079a4:	4a5c      	ldr	r2, [pc, #368]	; (8007b18 <loadMenuTexts+0xca0>)
 80079a6:	4b5d      	ldr	r3, [pc, #372]	; (8007b1c <loadMenuTexts+0xca4>)
 80079a8:	4614      	mov	r4, r2
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 16);
 80079b4:	4a5a      	ldr	r2, [pc, #360]	; (8007b20 <loadMenuTexts+0xca8>)
 80079b6:	4b5b      	ldr	r3, [pc, #364]	; (8007b24 <loadMenuTexts+0xcac>)
 80079b8:	4614      	mov	r4, r2
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	6859      	ldr	r1, [r3, #4]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 16);
 80079c4:	4a58      	ldr	r2, [pc, #352]	; (8007b28 <loadMenuTexts+0xcb0>)
 80079c6:	4b59      	ldr	r3, [pc, #356]	; (8007b2c <loadMenuTexts+0xcb4>)
 80079c8:	4614      	mov	r4, r2
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	6859      	ldr	r1, [r3, #4]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 16);
 80079d4:	4a56      	ldr	r2, [pc, #344]	; (8007b30 <loadMenuTexts+0xcb8>)
 80079d6:	4b57      	ldr	r3, [pc, #348]	; (8007b34 <loadMenuTexts+0xcbc>)
 80079d8:	4614      	mov	r4, r2
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	6859      	ldr	r1, [r3, #4]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(tekTesirText, tekTesirTextEN, 16);
 80079e4:	4a54      	ldr	r2, [pc, #336]	; (8007b38 <loadMenuTexts+0xcc0>)
 80079e6:	4b55      	ldr	r3, [pc, #340]	; (8007b3c <loadMenuTexts+0xcc4>)
 80079e8:	4614      	mov	r4, r2
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	6859      	ldr	r1, [r3, #4]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ciftTesirText, ciftTesirTextEN, 16);
 80079f4:	4a52      	ldr	r2, [pc, #328]	; (8007b40 <loadMenuTexts+0xcc8>)
 80079f6:	4b53      	ldr	r3, [pc, #332]	; (8007b44 <loadMenuTexts+0xccc>)
 80079f8:	4614      	mov	r4, r2
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 16);
 8007a04:	4a50      	ldr	r2, [pc, #320]	; (8007b48 <loadMenuTexts+0xcd0>)
 8007a06:	4b51      	ldr	r3, [pc, #324]	; (8007b4c <loadMenuTexts+0xcd4>)
 8007a08:	4614      	mov	r4, r2
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	6859      	ldr	r1, [r3, #4]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(yukariValfSureText, yukariValfSureTextEN, 16);
 8007a14:	4a4e      	ldr	r2, [pc, #312]	; (8007b50 <loadMenuTexts+0xcd8>)
 8007a16:	4b4f      	ldr	r3, [pc, #316]	; (8007b54 <loadMenuTexts+0xcdc>)
 8007a18:	4614      	mov	r4, r2
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(asagiValfSureText, asagiValfSureTextEN, 16);
 8007a24:	4a4c      	ldr	r2, [pc, #304]	; (8007b58 <loadMenuTexts+0xce0>)
 8007a26:	4b4d      	ldr	r3, [pc, #308]	; (8007b5c <loadMenuTexts+0xce4>)
 8007a28:	4614      	mov	r4, r2
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	6859      	ldr	r1, [r3, #4]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 16);
 8007a34:	4a4a      	ldr	r2, [pc, #296]	; (8007b60 <loadMenuTexts+0xce8>)
 8007a36:	4b4b      	ldr	r3, [pc, #300]	; (8007b64 <loadMenuTexts+0xcec>)
 8007a38:	4614      	mov	r4, r2
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(ileriValfSureText, ileriValfSureTextEN, 16);
 8007a44:	4a48      	ldr	r2, [pc, #288]	; (8007b68 <loadMenuTexts+0xcf0>)
 8007a46:	4b49      	ldr	r3, [pc, #292]	; (8007b6c <loadMenuTexts+0xcf4>)
 8007a48:	4614      	mov	r4, r2
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 16);
 8007a54:	4a46      	ldr	r2, [pc, #280]	; (8007b70 <loadMenuTexts+0xcf8>)
 8007a56:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <loadMenuTexts+0xcfc>)
 8007a58:	4614      	mov	r4, r2
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	6859      	ldr	r1, [r3, #4]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(geriValfSureText, geriValfSureTextEN, 16);
 8007a64:	4a44      	ldr	r2, [pc, #272]	; (8007b78 <loadMenuTexts+0xd00>)
 8007a66:	4b45      	ldr	r3, [pc, #276]	; (8007b7c <loadMenuTexts+0xd04>)
 8007a68:	4614      	mov	r4, r2
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	6859      	ldr	r1, [r3, #4]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSuresiText, calismaSuresiTextEN, 16);
 8007a74:	4a42      	ldr	r2, [pc, #264]	; (8007b80 <loadMenuTexts+0xd08>)
 8007a76:	4b43      	ldr	r3, [pc, #268]	; (8007b84 <loadMenuTexts+0xd0c>)
 8007a78:	4614      	mov	r4, r2
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	6859      	ldr	r1, [r3, #4]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(calismaSayisiText, calismaSayisiTextEN, 16);
 8007a84:	4a40      	ldr	r2, [pc, #256]	; (8007b88 <loadMenuTexts+0xd10>)
 8007a86:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <loadMenuTexts+0xd14>)
 8007a88:	4614      	mov	r4, r2
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	6859      	ldr	r1, [r3, #4]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 16);
 8007a94:	4a3e      	ldr	r2, [pc, #248]	; (8007b90 <loadMenuTexts+0xd18>)
 8007a96:	4b3f      	ldr	r3, [pc, #252]	; (8007b94 <loadMenuTexts+0xd1c>)
 8007a98:	4614      	mov	r4, r2
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	6859      	ldr	r1, [r3, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(dilSecimText, dilSecimTextEN, 16);
 8007aa4:	4a3c      	ldr	r2, [pc, #240]	; (8007b98 <loadMenuTexts+0xd20>)
 8007aa6:	4b3d      	ldr	r3, [pc, #244]	; (8007b9c <loadMenuTexts+0xd24>)
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	6859      	ldr	r1, [r3, #4]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(secilenDilText, secilenDilTextEN, 16);
 8007ab4:	4a3a      	ldr	r2, [pc, #232]	; (8007ba0 <loadMenuTexts+0xd28>)
 8007ab6:	4b3b      	ldr	r3, [pc, #236]	; (8007ba4 <loadMenuTexts+0xd2c>)
 8007ab8:	4614      	mov	r4, r2
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	6859      	ldr	r1, [r3, #4]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(menudenCikisText, menudenCikisTextEN, 16);
 8007ac4:	4a38      	ldr	r2, [pc, #224]	; (8007ba8 <loadMenuTexts+0xd30>)
 8007ac6:	4b39      	ldr	r3, [pc, #228]	; (8007bac <loadMenuTexts+0xd34>)
 8007ac8:	4614      	mov	r4, r2
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	6859      	ldr	r1, [r3, #4]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(enteraBasinizText, enteraBasinizTextEN, 16);
 8007ad4:	4a36      	ldr	r2, [pc, #216]	; (8007bb0 <loadMenuTexts+0xd38>)
 8007ad6:	4b37      	ldr	r3, [pc, #220]	; (8007bb4 <loadMenuTexts+0xd3c>)
 8007ad8:	4614      	mov	r4, r2
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	6859      	ldr	r1, [r3, #4]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(hataKoduText, hataKoduTextEN, 16);
 8007ae4:	4a34      	ldr	r2, [pc, #208]	; (8007bb8 <loadMenuTexts+0xd40>)
 8007ae6:	4b35      	ldr	r3, [pc, #212]	; (8007bbc <loadMenuTexts+0xd44>)
 8007ae8:	4614      	mov	r4, r2
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	6859      	ldr	r1, [r3, #4]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc90      	pop	{r4, r7}
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000f2c 	.word	0x20000f2c
 8007b04:	20000820 	.word	0x20000820
 8007b08:	20000f3c 	.word	0x20000f3c
 8007b0c:	20000830 	.word	0x20000830
 8007b10:	20000f4c 	.word	0x20000f4c
 8007b14:	20000840 	.word	0x20000840
 8007b18:	20000f5c 	.word	0x20000f5c
 8007b1c:	20000850 	.word	0x20000850
 8007b20:	20000f6c 	.word	0x20000f6c
 8007b24:	20000860 	.word	0x20000860
 8007b28:	20000f7c 	.word	0x20000f7c
 8007b2c:	20000870 	.word	0x20000870
 8007b30:	20000f8c 	.word	0x20000f8c
 8007b34:	20000880 	.word	0x20000880
 8007b38:	20000f9c 	.word	0x20000f9c
 8007b3c:	20000890 	.word	0x20000890
 8007b40:	20000fac 	.word	0x20000fac
 8007b44:	200008a0 	.word	0x200008a0
 8007b48:	20000fbc 	.word	0x20000fbc
 8007b4c:	200008b0 	.word	0x200008b0
 8007b50:	20000fcc 	.word	0x20000fcc
 8007b54:	200008c0 	.word	0x200008c0
 8007b58:	20000fdc 	.word	0x20000fdc
 8007b5c:	200008d0 	.word	0x200008d0
 8007b60:	20000fec 	.word	0x20000fec
 8007b64:	200008e0 	.word	0x200008e0
 8007b68:	20000ffc 	.word	0x20000ffc
 8007b6c:	200008f0 	.word	0x200008f0
 8007b70:	2000100c 	.word	0x2000100c
 8007b74:	20000900 	.word	0x20000900
 8007b78:	2000101c 	.word	0x2000101c
 8007b7c:	20000910 	.word	0x20000910
 8007b80:	2000102c 	.word	0x2000102c
 8007b84:	20000920 	.word	0x20000920
 8007b88:	2000103c 	.word	0x2000103c
 8007b8c:	20000930 	.word	0x20000930
 8007b90:	2000104c 	.word	0x2000104c
 8007b94:	20000940 	.word	0x20000940
 8007b98:	2000105c 	.word	0x2000105c
 8007b9c:	20000950 	.word	0x20000950
 8007ba0:	2000106c 	.word	0x2000106c
 8007ba4:	20000960 	.word	0x20000960
 8007ba8:	2000107c 	.word	0x2000107c
 8007bac:	20000970 	.word	0x20000970
 8007bb0:	2000108c 	.word	0x2000108c
 8007bb4:	20000980 	.word	0x20000980
 8007bb8:	2000109c 	.word	0x2000109c
 8007bbc:	20000990 	.word	0x20000990

08007bc0 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	f001 f8ca 	bl	8008d60 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007bcc:	220c      	movs	r2, #12
 8007bce:	2100      	movs	r1, #0
 8007bd0:	48a3      	ldr	r0, [pc, #652]	; (8007e60 <takeMachineID+0x2a0>)
 8007bd2:	f005 fd65 	bl	800d6a0 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007bd6:	2305      	movs	r3, #5
 8007bd8:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007bda:	2303      	movs	r3, #3
 8007bdc:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007bde:	2300      	movs	r3, #0
 8007be0:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007be2:	4ba0      	ldr	r3, [pc, #640]	; (8007e64 <takeMachineID+0x2a4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007be8:	2100      	movs	r1, #0
 8007bea:	2001      	movs	r0, #1
 8007bec:	f7f9 fa2c 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007bf0:	2108      	movs	r1, #8
 8007bf2:	489d      	ldr	r0, [pc, #628]	; (8007e68 <takeMachineID+0x2a8>)
 8007bf4:	f002 fb7c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d139      	bne.n	8007c72 <takeMachineID+0xb2>
        	lcd_cursor(0);
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f001 f8ae 	bl	8008d60 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007c04:	f000 fe90 	bl	8008928 <checkEEPROM4ID>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d01f      	beq.n	8007c4e <takeMachineID+0x8e>
        		lcd_clear();
 8007c0e:	f001 f875 	bl	8008cfc <lcd_clear>
        		if(dilSecim == 1) {
 8007c12:	4b96      	ldr	r3, [pc, #600]	; (8007e6c <takeMachineID+0x2ac>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d10a      	bne.n	8007c30 <takeMachineID+0x70>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8007c1a:	4a95      	ldr	r2, [pc, #596]	; (8007e70 <takeMachineID+0x2b0>)
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f001 f840 	bl	8008ca4 <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8007c24:	4a93      	ldr	r2, [pc, #588]	; (8007e74 <takeMachineID+0x2b4>)
 8007c26:	2101      	movs	r1, #1
 8007c28:	2002      	movs	r0, #2
 8007c2a:	f001 f83b 	bl	8008ca4 <lcd_print>
 8007c2e:	e009      	b.n	8007c44 <takeMachineID+0x84>
        		} else {
        			lcd_print(1, 1, " ID MUST BE  12 ");
 8007c30:	4a91      	ldr	r2, [pc, #580]	; (8007e78 <takeMachineID+0x2b8>)
 8007c32:	2101      	movs	r1, #1
 8007c34:	2001      	movs	r0, #1
 8007c36:	f001 f835 	bl	8008ca4 <lcd_print>
        			lcd_print(2, 1, "   CHARACTERS   ");
 8007c3a:	4a90      	ldr	r2, [pc, #576]	; (8007e7c <takeMachineID+0x2bc>)
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	2002      	movs	r0, #2
 8007c40:	f001 f830 	bl	8008ca4 <lcd_print>
        		}
        		HAL_Delay(1250);
 8007c44:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007c48:	f001 fd82 	bl	8009750 <HAL_Delay>

        		goto mainSection;
 8007c4c:	e7bb      	b.n	8007bc6 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007c4e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007c52:	9302      	str	r3, [sp, #8]
 8007c54:	236e      	movs	r3, #110	; 0x6e
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	4b89      	ldr	r3, [pc, #548]	; (8007e80 <takeMachineID+0x2c0>)
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	236e      	movs	r3, #110	; 0x6e
 8007c5e:	2200      	movs	r2, #0
 8007c60:	21a0      	movs	r1, #160	; 0xa0
 8007c62:	4888      	ldr	r0, [pc, #544]	; (8007e84 <takeMachineID+0x2c4>)
 8007c64:	f002 fdfe 	bl	800a864 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c6c:	f001 fd70 	bl	8009750 <HAL_Delay>

            	break;
 8007c70:	e138      	b.n	8007ee4 <takeMachineID+0x324>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007c72:	2101      	movs	r1, #1
 8007c74:	487c      	ldr	r0, [pc, #496]	; (8007e68 <takeMachineID+0x2a8>)
 8007c76:	f002 fb3b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d111      	bne.n	8007ca4 <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b07      	cmp	r3, #7
 8007c84:	d102      	bne.n	8007c8c <takeMachineID+0xcc>
        		cursorPosition = 10;
 8007c86:	230a      	movs	r3, #10
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	e008      	b.n	8007c9e <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b0e      	cmp	r3, #14
 8007c90:	d102      	bne.n	8007c98 <takeMachineID+0xd8>
                cursorPosition = 3;
 8007c92:	2303      	movs	r3, #3
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	e002      	b.n	8007c9e <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007c9e:	2096      	movs	r0, #150	; 0x96
 8007ca0:	f001 fd56 	bl	8009750 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007ca4:	2108      	movs	r1, #8
 8007ca6:	4878      	ldr	r0, [pc, #480]	; (8007e88 <takeMachineID+0x2c8>)
 8007ca8:	f002 fb22 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d111      	bne.n	8007cd6 <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d102      	bne.n	8007cbe <takeMachineID+0xfe>
                cursorPosition = 14;
 8007cb8:	230e      	movs	r3, #14
 8007cba:	60bb      	str	r3, [r7, #8]
 8007cbc:	e008      	b.n	8007cd0 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b0a      	cmp	r3, #10
 8007cc2:	d102      	bne.n	8007cca <takeMachineID+0x10a>
            	cursorPosition = 7;
 8007cc4:	2307      	movs	r3, #7
 8007cc6:	60bb      	str	r3, [r7, #8]
 8007cc8:	e002      	b.n	8007cd0 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007cd0:	20fa      	movs	r0, #250	; 0xfa
 8007cd2:	f001 fd3d 	bl	8009750 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007cd6:	2102      	movs	r1, #2
 8007cd8:	4863      	ldr	r0, [pc, #396]	; (8007e68 <takeMachineID+0x2a8>)
 8007cda:	f002 fb09 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	f040 80a1 	bne.w	8007e28 <takeMachineID+0x268>
        	if(cursorPosition == 3) {
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d10a      	bne.n	8007d02 <takeMachineID+0x142>
        		machineID[arrayPos] = '0';
 8007cec:	4a5c      	ldr	r2, [pc, #368]	; (8007e60 <takeMachineID+0x2a0>)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	2230      	movs	r2, #48	; 0x30
 8007cf4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007cf6:	4a62      	ldr	r2, [pc, #392]	; (8007e80 <takeMachineID+0x2c0>)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	e07c      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 4) {
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d10a      	bne.n	8007d1e <takeMachineID+0x15e>
        		machineID[arrayPos] = '1';
 8007d08:	4a55      	ldr	r2, [pc, #340]	; (8007e60 <takeMachineID+0x2a0>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	2231      	movs	r2, #49	; 0x31
 8007d10:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007d12:	4a5b      	ldr	r2, [pc, #364]	; (8007e80 <takeMachineID+0x2c0>)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	4413      	add	r3, r2
 8007d18:	2201      	movs	r2, #1
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	e06e      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 5) {
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b05      	cmp	r3, #5
 8007d22:	d10a      	bne.n	8007d3a <takeMachineID+0x17a>
        		machineID[arrayPos] = '2';
 8007d24:	4a4e      	ldr	r2, [pc, #312]	; (8007e60 <takeMachineID+0x2a0>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4413      	add	r3, r2
 8007d2a:	2232      	movs	r2, #50	; 0x32
 8007d2c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007d2e:	4a54      	ldr	r2, [pc, #336]	; (8007e80 <takeMachineID+0x2c0>)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	4413      	add	r3, r2
 8007d34:	2202      	movs	r2, #2
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e060      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 6) {
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b06      	cmp	r3, #6
 8007d3e:	d10a      	bne.n	8007d56 <takeMachineID+0x196>
        		machineID[arrayPos] = '3';
 8007d40:	4a47      	ldr	r2, [pc, #284]	; (8007e60 <takeMachineID+0x2a0>)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4413      	add	r3, r2
 8007d46:	2233      	movs	r2, #51	; 0x33
 8007d48:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007d4a:	4a4d      	ldr	r2, [pc, #308]	; (8007e80 <takeMachineID+0x2c0>)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	4413      	add	r3, r2
 8007d50:	2203      	movs	r2, #3
 8007d52:	701a      	strb	r2, [r3, #0]
 8007d54:	e052      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 7) {
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b07      	cmp	r3, #7
 8007d5a:	d10a      	bne.n	8007d72 <takeMachineID+0x1b2>
        		machineID[arrayPos] = '4';
 8007d5c:	4a40      	ldr	r2, [pc, #256]	; (8007e60 <takeMachineID+0x2a0>)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4413      	add	r3, r2
 8007d62:	2234      	movs	r2, #52	; 0x34
 8007d64:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007d66:	4a46      	ldr	r2, [pc, #280]	; (8007e80 <takeMachineID+0x2c0>)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	e044      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 10) {
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b0a      	cmp	r3, #10
 8007d76:	d10a      	bne.n	8007d8e <takeMachineID+0x1ce>
        		machineID[arrayPos] = '5';
 8007d78:	4a39      	ldr	r2, [pc, #228]	; (8007e60 <takeMachineID+0x2a0>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	2235      	movs	r2, #53	; 0x35
 8007d80:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007d82:	4a3f      	ldr	r2, [pc, #252]	; (8007e80 <takeMachineID+0x2c0>)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	4413      	add	r3, r2
 8007d88:	2205      	movs	r2, #5
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	e036      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 11) {
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b0b      	cmp	r3, #11
 8007d92:	d10a      	bne.n	8007daa <takeMachineID+0x1ea>
        		machineID[arrayPos] = '6';
 8007d94:	4a32      	ldr	r2, [pc, #200]	; (8007e60 <takeMachineID+0x2a0>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4413      	add	r3, r2
 8007d9a:	2236      	movs	r2, #54	; 0x36
 8007d9c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007d9e:	4a38      	ldr	r2, [pc, #224]	; (8007e80 <takeMachineID+0x2c0>)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	4413      	add	r3, r2
 8007da4:	2206      	movs	r2, #6
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	e028      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 12) {
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d10a      	bne.n	8007dc6 <takeMachineID+0x206>
        		machineID[arrayPos] = '7';
 8007db0:	4a2b      	ldr	r2, [pc, #172]	; (8007e60 <takeMachineID+0x2a0>)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4413      	add	r3, r2
 8007db6:	2237      	movs	r2, #55	; 0x37
 8007db8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007dba:	4a31      	ldr	r2, [pc, #196]	; (8007e80 <takeMachineID+0x2c0>)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	2207      	movs	r2, #7
 8007dc2:	701a      	strb	r2, [r3, #0]
 8007dc4:	e01a      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 13) {
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b0d      	cmp	r3, #13
 8007dca:	d10a      	bne.n	8007de2 <takeMachineID+0x222>
        		machineID[arrayPos] = '8';
 8007dcc:	4a24      	ldr	r2, [pc, #144]	; (8007e60 <takeMachineID+0x2a0>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	2238      	movs	r2, #56	; 0x38
 8007dd4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007dd6:	4a2a      	ldr	r2, [pc, #168]	; (8007e80 <takeMachineID+0x2c0>)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	4413      	add	r3, r2
 8007ddc:	2208      	movs	r2, #8
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	e00c      	b.n	8007dfc <takeMachineID+0x23c>
        	} else if(cursorPosition == 14) {
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b0e      	cmp	r3, #14
 8007de6:	d109      	bne.n	8007dfc <takeMachineID+0x23c>
        		machineID[arrayPos] = '9';
 8007de8:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <takeMachineID+0x2a0>)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	2239      	movs	r2, #57	; 0x39
 8007df0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007df2:	4a23      	ldr	r2, [pc, #140]	; (8007e80 <takeMachineID+0x2c0>)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	4413      	add	r3, r2
 8007df8:	2209      	movs	r2, #9
 8007dfa:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	b2d9      	uxtb	r1, r3
 8007e00:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <takeMachineID+0x2a0>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4413      	add	r3, r2
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	2001      	movs	r0, #1
 8007e0c:	f000 ff5f 	bl	8008cce <lcd_print_char>

        	writeLoc++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007e22:	2096      	movs	r0, #150	; 0x96
 8007e24:	f001 fc94 	bl	8009750 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007e28:	2104      	movs	r1, #4
 8007e2a:	480f      	ldr	r0, [pc, #60]	; (8007e68 <takeMachineID+0x2a8>)
 8007e2c:	f002 fa60 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d14f      	bne.n	8007ed6 <takeMachineID+0x316>
            if(strlen(machineID) >= 1) {
 8007e36:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <takeMachineID+0x2a0>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d048      	beq.n	8007ed0 <takeMachineID+0x310>
                machineID[arrayPos] = '\0';
 8007e3e:	4a08      	ldr	r2, [pc, #32]	; (8007e60 <takeMachineID+0x2a0>)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4413      	add	r3, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007e48:	4a0d      	ldr	r2, [pc, #52]	; (8007e80 <takeMachineID+0x2c0>)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b05      	cmp	r3, #5
 8007e56:	dd19      	ble.n	8007e8c <takeMachineID+0x2cc>
                	writeLoc--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	e01a      	b.n	8007e96 <takeMachineID+0x2d6>
 8007e60:	20000a90 	.word	0x20000a90
 8007e64:	20000004 	.word	0x20000004
 8007e68:	40010800 	.word	0x40010800
 8007e6c:	20000b0d 	.word	0x20000b0d
 8007e70:	0800ec7c 	.word	0x0800ec7c
 8007e74:	0800ec90 	.word	0x0800ec90
 8007e78:	0800eca4 	.word	0x0800eca4
 8007e7c:	0800ecb8 	.word	0x0800ecb8
 8007e80:	20000a18 	.word	0x20000a18
 8007e84:	200010d8 	.word	0x200010d8
 8007e88:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	dc01      	bgt.n	8007e96 <takeMachineID+0x2d6>
                	writeLoc = 5;
 8007e92:	2305      	movs	r3, #5
 8007e94:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd06      	ble.n	8007eaa <takeMachineID+0x2ea>
                	arrayPos--;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	e007      	b.n	8007eba <takeMachineID+0x2fa>
                } else if(arrayPos < 0) {
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	da04      	bge.n	8007eba <takeMachineID+0x2fa>
                	arrayPos = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007eb4:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <takeMachineID+0x32c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	f000 ff23 	bl	8008d10 <lcd_delete_char>
                HAL_Delay(50);
 8007eca:	2032      	movs	r0, #50	; 0x32
 8007ecc:	f001 fc40 	bl	8009750 <HAL_Delay>
            }

            HAL_Delay(150);
 8007ed0:	2096      	movs	r0, #150	; 0x96
 8007ed2:	f001 fc3d 	bl	8009750 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	4619      	mov	r1, r3
 8007edc:	2002      	movs	r0, #2
 8007ede:	f000 fec2 	bl	8008c66 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007ee2:	e685      	b.n	8007bf0 <takeMachineID+0x30>
    }
}
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20000004 	.word	0x20000004

08007ef0 <takeWifiSSID>:

void takeWifiSSID() {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08a      	sub	sp, #40	; 0x28
 8007ef4:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f000 ff32 	bl	8008d60 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007efc:	2214      	movs	r2, #20
 8007efe:	2100      	movs	r1, #0
 8007f00:	48a4      	ldr	r0, [pc, #656]	; (8008194 <takeWifiSSID+0x2a4>)
 8007f02:	f005 fbcd 	bl	800d6a0 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007f06:	2301      	movs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007f0a:	2307      	movs	r3, #7
 8007f0c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007f0e:	2301      	movs	r3, #1
 8007f10:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007f16:	4ba0      	ldr	r3, [pc, #640]	; (8008198 <takeWifiSSID+0x2a8>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	2002      	movs	r0, #2
 8007f20:	f7f9 f892 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f24:	2108      	movs	r1, #8
 8007f26:	489d      	ldr	r0, [pc, #628]	; (800819c <takeWifiSSID+0x2ac>)
 8007f28:	f002 f9e2 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d13a      	bne.n	8007fa8 <takeWifiSSID+0xb8>
            lcd_cursor(0);
 8007f32:	2000      	movs	r0, #0
 8007f34:	f000 ff14 	bl	8008d60 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007f38:	4896      	ldr	r0, [pc, #600]	; (8008194 <takeWifiSSID+0x2a4>)
 8007f3a:	f7f8 f973 	bl	8000224 <strlen>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b14      	cmp	r3, #20
 8007f42:	d91f      	bls.n	8007f84 <takeWifiSSID+0x94>
                lcd_clear();
 8007f44:	f000 feda 	bl	8008cfc <lcd_clear>
                if(dilSecim == 1) {
 8007f48:	4b95      	ldr	r3, [pc, #596]	; (80081a0 <takeWifiSSID+0x2b0>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d10a      	bne.n	8007f66 <takeWifiSSID+0x76>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007f50:	4a94      	ldr	r2, [pc, #592]	; (80081a4 <takeWifiSSID+0x2b4>)
 8007f52:	2101      	movs	r1, #1
 8007f54:	2001      	movs	r0, #1
 8007f56:	f000 fea5 	bl	8008ca4 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007f5a:	4a93      	ldr	r2, [pc, #588]	; (80081a8 <takeWifiSSID+0x2b8>)
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	2002      	movs	r0, #2
 8007f60:	f000 fea0 	bl	8008ca4 <lcd_print>
 8007f64:	e009      	b.n	8007f7a <takeWifiSSID+0x8a>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8007f66:	4a91      	ldr	r2, [pc, #580]	; (80081ac <takeWifiSSID+0x2bc>)
 8007f68:	2101      	movs	r1, #1
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	f000 fe9a 	bl	8008ca4 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 8007f70:	4a8f      	ldr	r2, [pc, #572]	; (80081b0 <takeWifiSSID+0x2c0>)
 8007f72:	2101      	movs	r1, #1
 8007f74:	2002      	movs	r0, #2
 8007f76:	f000 fe95 	bl	8008ca4 <lcd_print>
                }
                HAL_Delay(1250);
 8007f7a:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007f7e:	f001 fbe7 	bl	8009750 <HAL_Delay>

                goto mainSSIDSection;
 8007f82:	e7b8      	b.n	8007ef6 <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007f84:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007f88:	9302      	str	r3, [sp, #8]
 8007f8a:	236e      	movs	r3, #110	; 0x6e
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	4b89      	ldr	r3, [pc, #548]	; (80081b4 <takeWifiSSID+0x2c4>)
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	236e      	movs	r3, #110	; 0x6e
 8007f94:	2200      	movs	r2, #0
 8007f96:	21a0      	movs	r1, #160	; 0xa0
 8007f98:	4887      	ldr	r0, [pc, #540]	; (80081b8 <takeWifiSSID+0x2c8>)
 8007f9a:	f002 fc63 	bl	800a864 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fa2:	f001 fbd5 	bl	8009750 <HAL_Delay>

            	break;
 8007fa6:	e12a      	b.n	80081fe <takeWifiSSID+0x30e>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007fa8:	2101      	movs	r1, #1
 8007faa:	487c      	ldr	r0, [pc, #496]	; (800819c <takeWifiSSID+0x2ac>)
 8007fac:	f002 f9a0 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d14d      	bne.n	8008052 <takeWifiSSID+0x162>
        	if(cursorPosition > 80) {
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b50      	cmp	r3, #80	; 0x50
 8007fba:	dd01      	ble.n	8007fc0 <takeWifiSSID+0xd0>
        		cursorPosition = 1;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b10      	cmp	r3, #16
 8007fc4:	d13f      	bne.n	8008046 <takeWifiSSID+0x156>
            	if(page == 1) {
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d109      	bne.n	8007fe0 <takeWifiSSID+0xf0>
            		cursorPosition = 1;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
            		page++;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	2002      	movs	r0, #2
 8007fda:	f7f9 f835 	bl	8001048 <printTemplate>
 8007fde:	e035      	b.n	800804c <takeWifiSSID+0x15c>
            	} else if(page == 2) {
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d109      	bne.n	8007ffa <takeWifiSSID+0x10a>
            		cursorPosition = 1;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
            		page++;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	3301      	adds	r3, #1
 8007fee:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007ff0:	2103      	movs	r1, #3
 8007ff2:	2002      	movs	r0, #2
 8007ff4:	f7f9 f828 	bl	8001048 <printTemplate>
 8007ff8:	e028      	b.n	800804c <takeWifiSSID+0x15c>
            	} else if(page == 3) {
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d109      	bne.n	8008014 <takeWifiSSID+0x124>
            		cursorPosition = 1;
 8008000:	2301      	movs	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]
            		page++;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	3301      	adds	r3, #1
 8008008:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800800a:	2104      	movs	r1, #4
 800800c:	2002      	movs	r0, #2
 800800e:	f7f9 f81b 	bl	8001048 <printTemplate>
 8008012:	e01b      	b.n	800804c <takeWifiSSID+0x15c>
            	} else if(page == 4) {
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b04      	cmp	r3, #4
 8008018:	d109      	bne.n	800802e <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 800801a:	2301      	movs	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
            		page++;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	3301      	adds	r3, #1
 8008022:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008024:	2105      	movs	r1, #5
 8008026:	2002      	movs	r0, #2
 8008028:	f7f9 f80e 	bl	8001048 <printTemplate>
 800802c:	e00e      	b.n	800804c <takeWifiSSID+0x15c>
            	} else if(page == 5) {
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b05      	cmp	r3, #5
 8008032:	d10b      	bne.n	800804c <takeWifiSSID+0x15c>
            		cursorPosition = 1;
 8008034:	2301      	movs	r3, #1
 8008036:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008038:	2301      	movs	r3, #1
 800803a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800803c:	2101      	movs	r1, #1
 800803e:	2002      	movs	r0, #2
 8008040:	f7f9 f802 	bl	8001048 <printTemplate>
 8008044:	e002      	b.n	800804c <takeWifiSSID+0x15c>
            	}
            } else {
            	cursorPosition++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3301      	adds	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800804c:	2096      	movs	r0, #150	; 0x96
 800804e:	f001 fb7f 	bl	8009750 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008052:	2108      	movs	r1, #8
 8008054:	4859      	ldr	r0, [pc, #356]	; (80081bc <takeWifiSSID+0x2cc>)
 8008056:	f002 f94b 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800805a:	4603      	mov	r3, r0
 800805c:	2b01      	cmp	r3, #1
 800805e:	d149      	bne.n	80080f4 <takeWifiSSID+0x204>
        	if(cursorPosition < 1) {
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	dc01      	bgt.n	800806a <takeWifiSSID+0x17a>
        		cursorPosition = 80;
 8008066:	2350      	movs	r3, #80	; 0x50
 8008068:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d13b      	bne.n	80080e8 <takeWifiSSID+0x1f8>
            	if(page == 1) {
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d108      	bne.n	8008088 <takeWifiSSID+0x198>
            		cursorPosition = 16;
 8008076:	2310      	movs	r3, #16
 8008078:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800807a:	2305      	movs	r3, #5
 800807c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800807e:	2105      	movs	r1, #5
 8008080:	2002      	movs	r0, #2
 8008082:	f7f8 ffe1 	bl	8001048 <printTemplate>
 8008086:	e032      	b.n	80080ee <takeWifiSSID+0x1fe>
            	} else if(page == 2) {
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d108      	bne.n	80080a0 <takeWifiSSID+0x1b0>
            		cursorPosition = 16;
 800808e:	2310      	movs	r3, #16
 8008090:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008092:	2301      	movs	r3, #1
 8008094:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008096:	2101      	movs	r1, #1
 8008098:	2002      	movs	r0, #2
 800809a:	f7f8 ffd5 	bl	8001048 <printTemplate>
 800809e:	e026      	b.n	80080ee <takeWifiSSID+0x1fe>
            	} else if(page == 3) {
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d108      	bne.n	80080b8 <takeWifiSSID+0x1c8>
            		cursorPosition = 16;
 80080a6:	2310      	movs	r3, #16
 80080a8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80080aa:	2302      	movs	r3, #2
 80080ac:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80080ae:	2102      	movs	r1, #2
 80080b0:	2002      	movs	r0, #2
 80080b2:	f7f8 ffc9 	bl	8001048 <printTemplate>
 80080b6:	e01a      	b.n	80080ee <takeWifiSSID+0x1fe>
            	} else if(page == 4) {
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d108      	bne.n	80080d0 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 80080be:	2310      	movs	r3, #16
 80080c0:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80080c2:	2303      	movs	r3, #3
 80080c4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80080c6:	2103      	movs	r1, #3
 80080c8:	2002      	movs	r0, #2
 80080ca:	f7f8 ffbd 	bl	8001048 <printTemplate>
 80080ce:	e00e      	b.n	80080ee <takeWifiSSID+0x1fe>
            	} else if(page == 5) {
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2b05      	cmp	r3, #5
 80080d4:	d10b      	bne.n	80080ee <takeWifiSSID+0x1fe>
            		cursorPosition = 16;
 80080d6:	2310      	movs	r3, #16
 80080d8:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80080da:	2304      	movs	r3, #4
 80080dc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80080de:	2104      	movs	r1, #4
 80080e0:	2002      	movs	r0, #2
 80080e2:	f7f8 ffb1 	bl	8001048 <printTemplate>
 80080e6:	e002      	b.n	80080ee <takeWifiSSID+0x1fe>
            	}
            } else {
            	cursorPosition--;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80080ee:	2096      	movs	r0, #150	; 0x96
 80080f0:	f001 fb2e 	bl	8009750 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80080f4:	2102      	movs	r1, #2
 80080f6:	4829      	ldr	r0, [pc, #164]	; (800819c <takeWifiSSID+0x2ac>)
 80080f8:	f002 f8fa 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d121      	bne.n	8008146 <takeWifiSSID+0x256>
            eepromData[eepromVal] = cursorPosition;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	b2d9      	uxtb	r1, r3
 8008106:	4a2b      	ldr	r2, [pc, #172]	; (80081b4 <takeWifiSSID+0x2c4>)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4413      	add	r3, r2
 800810c:	460a      	mov	r2, r1
 800810e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	b2d9      	uxtb	r1, r3
 8008114:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <takeWifiSSID+0x2d0>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	2001      	movs	r0, #1
 8008120:	f000 fdd5 	bl	8008cce <lcd_print_char>

            writeLoc++;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	3301      	adds	r3, #1
 8008128:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3301      	adds	r3, #1
 800812e:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3301      	adds	r3, #1
 8008134:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008136:	4a1f      	ldr	r2, [pc, #124]	; (80081b4 <takeWifiSSID+0x2c4>)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4413      	add	r3, r2
 800813c:	2200      	movs	r2, #0
 800813e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008140:	2096      	movs	r0, #150	; 0x96
 8008142:	f001 fb05 	bl	8009750 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008146:	2104      	movs	r1, #4
 8008148:	4814      	ldr	r0, [pc, #80]	; (800819c <takeWifiSSID+0x2ac>)
 800814a:	f002 f8d1 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d14d      	bne.n	80081f0 <takeWifiSSID+0x300>
        	if(strlen(wifiSSID) >= 1) {
 8008154:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <takeWifiSSID+0x2a4>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d046      	beq.n	80081ea <takeWifiSSID+0x2fa>
        		eepromData[eepromVal] = '\0';
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <takeWifiSSID+0x2c4>)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	2200      	movs	r2, #0
 8008164:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b07      	cmp	r3, #7
 800816a:	dd03      	ble.n	8008174 <takeWifiSSID+0x284>
        			writeLoc--;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	3b01      	subs	r3, #1
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	e004      	b.n	800817e <takeWifiSSID+0x28e>
        		} else if(writeLoc < 7) {
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b06      	cmp	r3, #6
 8008178:	dc01      	bgt.n	800817e <takeWifiSSID+0x28e>
        			writeLoc = 7;
 800817a:	2307      	movs	r3, #7
 800817c:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	dd1f      	ble.n	80081c4 <takeWifiSSID+0x2d4>
        			arrayPosition--;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	3b01      	subs	r3, #1
 8008188:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3b01      	subs	r3, #1
 800818e:	607b      	str	r3, [r7, #4]
 8008190:	e020      	b.n	80081d4 <takeWifiSSID+0x2e4>
 8008192:	bf00      	nop
 8008194:	20000a9c 	.word	0x20000a9c
 8008198:	20000008 	.word	0x20000008
 800819c:	40010800 	.word	0x40010800
 80081a0:	20000b0d 	.word	0x20000b0d
 80081a4:	0800eccc 	.word	0x0800eccc
 80081a8:	0800ece0 	.word	0x0800ece0
 80081ac:	0800ecf4 	.word	0x0800ecf4
 80081b0:	0800ed08 	.word	0x0800ed08
 80081b4:	20000a18 	.word	0x20000a18
 80081b8:	200010d8 	.word	0x200010d8
 80081bc:	40011000 	.word	0x40011000
 80081c0:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da04      	bge.n	80081d4 <takeWifiSSID+0x2e4>
        			arrayPosition = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80081ce:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <takeWifiSSID+0x318>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	3306      	adds	r3, #6
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	4619      	mov	r1, r3
 80081de:	2001      	movs	r0, #1
 80081e0:	f000 fd96 	bl	8008d10 <lcd_delete_char>
        		HAL_Delay(50);
 80081e4:	2032      	movs	r0, #50	; 0x32
 80081e6:	f001 fab3 	bl	8009750 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80081ea:	2096      	movs	r0, #150	; 0x96
 80081ec:	f001 fab0 	bl	8009750 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	4619      	mov	r1, r3
 80081f6:	2002      	movs	r0, #2
 80081f8:	f000 fd35 	bl	8008c66 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80081fc:	e692      	b.n	8007f24 <takeWifiSSID+0x34>
    }
}
 80081fe:	bf00      	nop
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000008 	.word	0x20000008

0800820c <takeWifiPass>:

void takeWifiPass() {
 800820c:	b580      	push	{r7, lr}
 800820e:	b08a      	sub	sp, #40	; 0x28
 8008210:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8008212:	2001      	movs	r0, #1
 8008214:	f000 fda4 	bl	8008d60 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8008218:	2214      	movs	r2, #20
 800821a:	2100      	movs	r1, #0
 800821c:	48a4      	ldr	r0, [pc, #656]	; (80084b0 <takeWifiPass+0x2a4>)
 800821e:	f005 fa3f 	bl	800d6a0 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008226:	2307      	movs	r3, #7
 8008228:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800822a:	2301      	movs	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008232:	4ba0      	ldr	r3, [pc, #640]	; (80084b4 <takeWifiPass+0x2a8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008238:	2101      	movs	r1, #1
 800823a:	2003      	movs	r0, #3
 800823c:	f7f8 ff04 	bl	8001048 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008240:	2108      	movs	r1, #8
 8008242:	489d      	ldr	r0, [pc, #628]	; (80084b8 <takeWifiPass+0x2ac>)
 8008244:	f002 f854 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8008248:	4603      	mov	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	d13a      	bne.n	80082c4 <takeWifiPass+0xb8>
            lcd_cursor(0);
 800824e:	2000      	movs	r0, #0
 8008250:	f000 fd86 	bl	8008d60 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8008254:	4899      	ldr	r0, [pc, #612]	; (80084bc <takeWifiPass+0x2b0>)
 8008256:	f7f7 ffe5 	bl	8000224 <strlen>
 800825a:	4603      	mov	r3, r0
 800825c:	2b14      	cmp	r3, #20
 800825e:	d91f      	bls.n	80082a0 <takeWifiPass+0x94>
                lcd_clear();
 8008260:	f000 fd4c 	bl	8008cfc <lcd_clear>
                if(dilSecim == 1) {
 8008264:	4b96      	ldr	r3, [pc, #600]	; (80084c0 <takeWifiPass+0x2b4>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d10a      	bne.n	8008282 <takeWifiPass+0x76>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 800826c:	4a95      	ldr	r2, [pc, #596]	; (80084c4 <takeWifiPass+0x2b8>)
 800826e:	2101      	movs	r1, #1
 8008270:	2001      	movs	r0, #1
 8008272:	f000 fd17 	bl	8008ca4 <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8008276:	4a94      	ldr	r2, [pc, #592]	; (80084c8 <takeWifiPass+0x2bc>)
 8008278:	2101      	movs	r1, #1
 800827a:	2002      	movs	r0, #2
 800827c:	f000 fd12 	bl	8008ca4 <lcd_print>
 8008280:	e009      	b.n	8008296 <takeWifiPass+0x8a>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 8008282:	4a92      	ldr	r2, [pc, #584]	; (80084cc <takeWifiPass+0x2c0>)
 8008284:	2101      	movs	r1, #1
 8008286:	2001      	movs	r0, #1
 8008288:	f000 fd0c 	bl	8008ca4 <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 800828c:	4a90      	ldr	r2, [pc, #576]	; (80084d0 <takeWifiPass+0x2c4>)
 800828e:	2101      	movs	r1, #1
 8008290:	2002      	movs	r0, #2
 8008292:	f000 fd07 	bl	8008ca4 <lcd_print>
                }
                HAL_Delay(1250);
 8008296:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800829a:	f001 fa59 	bl	8009750 <HAL_Delay>

                goto mainPassSection;
 800829e:	e7b8      	b.n	8008212 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80082a0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80082a4:	9302      	str	r3, [sp, #8]
 80082a6:	236e      	movs	r3, #110	; 0x6e
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	4b8a      	ldr	r3, [pc, #552]	; (80084d4 <takeWifiPass+0x2c8>)
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	236e      	movs	r3, #110	; 0x6e
 80082b0:	2200      	movs	r2, #0
 80082b2:	21a0      	movs	r1, #160	; 0xa0
 80082b4:	4888      	ldr	r0, [pc, #544]	; (80084d8 <takeWifiPass+0x2cc>)
 80082b6:	f002 fad5 	bl	800a864 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80082ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082be:	f001 fa47 	bl	8009750 <HAL_Delay>

            	break;
 80082c2:	e12c      	b.n	800851e <takeWifiPass+0x312>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80082c4:	2101      	movs	r1, #1
 80082c6:	487c      	ldr	r0, [pc, #496]	; (80084b8 <takeWifiPass+0x2ac>)
 80082c8:	f002 f812 	bl	800a2f0 <HAL_GPIO_ReadPin>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d14d      	bne.n	800836e <takeWifiPass+0x162>
        	if(cursorPosition > 80) {
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b50      	cmp	r3, #80	; 0x50
 80082d6:	dd01      	ble.n	80082dc <takeWifiPass+0xd0>
        		cursorPosition = 1;
 80082d8:	2301      	movs	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d13f      	bne.n	8008362 <takeWifiPass+0x156>
            	if(page == 1) {
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d109      	bne.n	80082fc <takeWifiPass+0xf0>
            		cursorPosition = 1;
 80082e8:	2301      	movs	r3, #1
 80082ea:	60fb      	str	r3, [r7, #12]
            		page++;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	3301      	adds	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80082f2:	2102      	movs	r1, #2
 80082f4:	2003      	movs	r0, #3
 80082f6:	f7f8 fea7 	bl	8001048 <printTemplate>
 80082fa:	e035      	b.n	8008368 <takeWifiPass+0x15c>
            	} else if(page == 2) {
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d109      	bne.n	8008316 <takeWifiPass+0x10a>
            		cursorPosition = 1;
 8008302:	2301      	movs	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]
            		page++;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	3301      	adds	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800830c:	2103      	movs	r1, #3
 800830e:	2003      	movs	r0, #3
 8008310:	f7f8 fe9a 	bl	8001048 <printTemplate>
 8008314:	e028      	b.n	8008368 <takeWifiPass+0x15c>
            	} else if(page == 3) {
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d109      	bne.n	8008330 <takeWifiPass+0x124>
            		cursorPosition = 1;
 800831c:	2301      	movs	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	3301      	adds	r3, #1
 8008324:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008326:	2104      	movs	r1, #4
 8008328:	2003      	movs	r0, #3
 800832a:	f7f8 fe8d 	bl	8001048 <printTemplate>
 800832e:	e01b      	b.n	8008368 <takeWifiPass+0x15c>
            	} else if(page == 4) {
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b04      	cmp	r3, #4
 8008334:	d109      	bne.n	800834a <takeWifiPass+0x13e>
            		cursorPosition = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
            		page++;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	3301      	adds	r3, #1
 800833e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008340:	2105      	movs	r1, #5
 8008342:	2003      	movs	r0, #3
 8008344:	f7f8 fe80 	bl	8001048 <printTemplate>
 8008348:	e00e      	b.n	8008368 <takeWifiPass+0x15c>
            	} else if(page == 5) {
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b05      	cmp	r3, #5
 800834e:	d10b      	bne.n	8008368 <takeWifiPass+0x15c>
            		cursorPosition = 1;
 8008350:	2301      	movs	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008354:	2301      	movs	r3, #1
 8008356:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008358:	2101      	movs	r1, #1
 800835a:	2003      	movs	r0, #3
 800835c:	f7f8 fe74 	bl	8001048 <printTemplate>
 8008360:	e002      	b.n	8008368 <takeWifiPass+0x15c>
            	}
            } else {
            	cursorPosition++;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008368:	2096      	movs	r0, #150	; 0x96
 800836a:	f001 f9f1 	bl	8009750 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800836e:	2108      	movs	r1, #8
 8008370:	485a      	ldr	r0, [pc, #360]	; (80084dc <takeWifiPass+0x2d0>)
 8008372:	f001 ffbd 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8008376:	4603      	mov	r3, r0
 8008378:	2b01      	cmp	r3, #1
 800837a:	d149      	bne.n	8008410 <takeWifiPass+0x204>
        	if(cursorPosition < 1) {
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	dc01      	bgt.n	8008386 <takeWifiPass+0x17a>
        		cursorPosition = 80;
 8008382:	2350      	movs	r3, #80	; 0x50
 8008384:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d13b      	bne.n	8008404 <takeWifiPass+0x1f8>
            	if(page == 1) {
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d108      	bne.n	80083a4 <takeWifiPass+0x198>
            		cursorPosition = 16;
 8008392:	2310      	movs	r3, #16
 8008394:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008396:	2305      	movs	r3, #5
 8008398:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800839a:	2105      	movs	r1, #5
 800839c:	2003      	movs	r0, #3
 800839e:	f7f8 fe53 	bl	8001048 <printTemplate>
 80083a2:	e032      	b.n	800840a <takeWifiPass+0x1fe>
            	} else if(page == 2) {
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d108      	bne.n	80083bc <takeWifiPass+0x1b0>
            		cursorPosition = 16;
 80083aa:	2310      	movs	r3, #16
 80083ac:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80083ae:	2301      	movs	r3, #1
 80083b0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80083b2:	2101      	movs	r1, #1
 80083b4:	2003      	movs	r0, #3
 80083b6:	f7f8 fe47 	bl	8001048 <printTemplate>
 80083ba:	e026      	b.n	800840a <takeWifiPass+0x1fe>
            	} else if(page == 3) {
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d108      	bne.n	80083d4 <takeWifiPass+0x1c8>
            		cursorPosition = 16;
 80083c2:	2310      	movs	r3, #16
 80083c4:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80083c6:	2302      	movs	r3, #2
 80083c8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80083ca:	2102      	movs	r1, #2
 80083cc:	2003      	movs	r0, #3
 80083ce:	f7f8 fe3b 	bl	8001048 <printTemplate>
 80083d2:	e01a      	b.n	800840a <takeWifiPass+0x1fe>
            	} else if(page == 4) {
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d108      	bne.n	80083ec <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 80083da:	2310      	movs	r3, #16
 80083dc:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80083de:	2303      	movs	r3, #3
 80083e0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80083e2:	2103      	movs	r1, #3
 80083e4:	2003      	movs	r0, #3
 80083e6:	f7f8 fe2f 	bl	8001048 <printTemplate>
 80083ea:	e00e      	b.n	800840a <takeWifiPass+0x1fe>
            	} else if(page == 5) {
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d10b      	bne.n	800840a <takeWifiPass+0x1fe>
            		cursorPosition = 16;
 80083f2:	2310      	movs	r3, #16
 80083f4:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80083f6:	2304      	movs	r3, #4
 80083f8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80083fa:	2104      	movs	r1, #4
 80083fc:	2003      	movs	r0, #3
 80083fe:	f7f8 fe23 	bl	8001048 <printTemplate>
 8008402:	e002      	b.n	800840a <takeWifiPass+0x1fe>
            	}
            } else {
            	cursorPosition--;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3b01      	subs	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800840a:	2096      	movs	r0, #150	; 0x96
 800840c:	f001 f9a0 	bl	8009750 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008410:	2102      	movs	r1, #2
 8008412:	4829      	ldr	r0, [pc, #164]	; (80084b8 <takeWifiPass+0x2ac>)
 8008414:	f001 ff6c 	bl	800a2f0 <HAL_GPIO_ReadPin>
 8008418:	4603      	mov	r3, r0
 800841a:	2b01      	cmp	r3, #1
 800841c:	d121      	bne.n	8008462 <takeWifiPass+0x256>
            eepromData[eepromVal] = cursorPosition;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	b2d9      	uxtb	r1, r3
 8008422:	4a2c      	ldr	r2, [pc, #176]	; (80084d4 <takeWifiPass+0x2c8>)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4413      	add	r3, r2
 8008428:	460a      	mov	r2, r1
 800842a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	b2d9      	uxtb	r1, r3
 8008430:	4a2b      	ldr	r2, [pc, #172]	; (80084e0 <takeWifiPass+0x2d4>)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	2001      	movs	r0, #1
 800843c:	f000 fc47 	bl	8008cce <lcd_print_char>

            writeLoc++;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	3301      	adds	r3, #1
 8008444:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3301      	adds	r3, #1
 800844a:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3301      	adds	r3, #1
 8008450:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008452:	4a20      	ldr	r2, [pc, #128]	; (80084d4 <takeWifiPass+0x2c8>)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4413      	add	r3, r2
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800845c:	2096      	movs	r0, #150	; 0x96
 800845e:	f001 f977 	bl	8009750 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008462:	2104      	movs	r1, #4
 8008464:	4814      	ldr	r0, [pc, #80]	; (80084b8 <takeWifiPass+0x2ac>)
 8008466:	f001 ff43 	bl	800a2f0 <HAL_GPIO_ReadPin>
 800846a:	4603      	mov	r3, r0
 800846c:	2b01      	cmp	r3, #1
 800846e:	d14f      	bne.n	8008510 <takeWifiPass+0x304>
        	if(strlen(wifiSSID) >= 1) {
 8008470:	4b12      	ldr	r3, [pc, #72]	; (80084bc <takeWifiPass+0x2b0>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d048      	beq.n	800850a <takeWifiPass+0x2fe>
        		eepromData[eepromVal] = '\0';
 8008478:	4a16      	ldr	r2, [pc, #88]	; (80084d4 <takeWifiPass+0x2c8>)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4413      	add	r3, r2
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	2b07      	cmp	r3, #7
 8008486:	dd03      	ble.n	8008490 <takeWifiPass+0x284>
        			writeLoc--;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	3b01      	subs	r3, #1
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	e004      	b.n	800849a <takeWifiPass+0x28e>
        		} else if(writeLoc < 7) {
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b06      	cmp	r3, #6
 8008494:	dc01      	bgt.n	800849a <takeWifiPass+0x28e>
        			writeLoc = 7;
 8008496:	2307      	movs	r3, #7
 8008498:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd21      	ble.n	80084e4 <takeWifiPass+0x2d8>
        			arrayPosition--;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	607b      	str	r3, [r7, #4]
 80084ac:	e022      	b.n	80084f4 <takeWifiPass+0x2e8>
 80084ae:	bf00      	nop
 80084b0:	20000ab0 	.word	0x20000ab0
 80084b4:	2000000c 	.word	0x2000000c
 80084b8:	40010800 	.word	0x40010800
 80084bc:	20000a9c 	.word	0x20000a9c
 80084c0:	20000b0d 	.word	0x20000b0d
 80084c4:	0800eccc 	.word	0x0800eccc
 80084c8:	0800ece0 	.word	0x0800ece0
 80084cc:	0800ed1c 	.word	0x0800ed1c
 80084d0:	0800ed08 	.word	0x0800ed08
 80084d4:	20000a18 	.word	0x20000a18
 80084d8:	200010d8 	.word	0x200010d8
 80084dc:	40011000 	.word	0x40011000
 80084e0:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	da04      	bge.n	80084f4 <takeWifiPass+0x2e8>
        			arrayPosition = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80084ee:	4b0e      	ldr	r3, [pc, #56]	; (8008528 <takeWifiPass+0x31c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	3306      	adds	r3, #6
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	4619      	mov	r1, r3
 80084fe:	2001      	movs	r0, #1
 8008500:	f000 fc06 	bl	8008d10 <lcd_delete_char>
        		HAL_Delay(50);
 8008504:	2032      	movs	r0, #50	; 0x32
 8008506:	f001 f923 	bl	8009750 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800850a:	2096      	movs	r0, #150	; 0x96
 800850c:	f001 f920 	bl	8009750 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	4619      	mov	r1, r3
 8008516:	2002      	movs	r0, #2
 8008518:	f000 fba5 	bl	8008c66 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800851c:	e690      	b.n	8008240 <takeWifiPass+0x34>
    }
}
 800851e:	bf00      	nop
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	2000000c 	.word	0x2000000c

0800852c <mergeData>:

char* mergeData() {
 800852c:	b580      	push	{r7, lr}
 800852e:	b09c      	sub	sp, #112	; 0x70
 8008530:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008532:	2300      	movs	r3, #0
 8008534:	63bb      	str	r3, [r7, #56]	; 0x38
 8008536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800853a:	2229      	movs	r2, #41	; 0x29
 800853c:	2100      	movs	r1, #0
 800853e:	4618      	mov	r0, r3
 8008540:	f005 f8ae 	bl	800d6a0 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008544:	4b65      	ldr	r3, [pc, #404]	; (80086dc <mergeData+0x1b0>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	703b      	strb	r3, [r7, #0]
 800854a:	4b65      	ldr	r3, [pc, #404]	; (80086e0 <mergeData+0x1b4>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	707b      	strb	r3, [r7, #1]
 8008550:	4b64      	ldr	r3, [pc, #400]	; (80086e4 <mergeData+0x1b8>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	70bb      	strb	r3, [r7, #2]
 8008556:	4b64      	ldr	r3, [pc, #400]	; (80086e8 <mergeData+0x1bc>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	70fb      	strb	r3, [r7, #3]
 800855c:	4b63      	ldr	r3, [pc, #396]	; (80086ec <mergeData+0x1c0>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	713b      	strb	r3, [r7, #4]
 8008562:	4b63      	ldr	r3, [pc, #396]	; (80086f0 <mergeData+0x1c4>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	717b      	strb	r3, [r7, #5]
 8008568:	4b62      	ldr	r3, [pc, #392]	; (80086f4 <mergeData+0x1c8>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	71bb      	strb	r3, [r7, #6]
 800856e:	4b62      	ldr	r3, [pc, #392]	; (80086f8 <mergeData+0x1cc>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
 8008574:	4b61      	ldr	r3, [pc, #388]	; (80086fc <mergeData+0x1d0>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	723b      	strb	r3, [r7, #8]
 800857a:	4b61      	ldr	r3, [pc, #388]	; (8008700 <mergeData+0x1d4>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	727b      	strb	r3, [r7, #9]
 8008580:	4b60      	ldr	r3, [pc, #384]	; (8008704 <mergeData+0x1d8>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	72bb      	strb	r3, [r7, #10]
 8008586:	4b60      	ldr	r3, [pc, #384]	; (8008708 <mergeData+0x1dc>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	72fb      	strb	r3, [r7, #11]
 800858c:	4b5f      	ldr	r3, [pc, #380]	; (800870c <mergeData+0x1e0>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	733b      	strb	r3, [r7, #12]
 8008592:	4b5f      	ldr	r3, [pc, #380]	; (8008710 <mergeData+0x1e4>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	737b      	strb	r3, [r7, #13]
 8008598:	4b5e      	ldr	r3, [pc, #376]	; (8008714 <mergeData+0x1e8>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	73bb      	strb	r3, [r7, #14]
 800859e:	4b5e      	ldr	r3, [pc, #376]	; (8008718 <mergeData+0x1ec>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	73fb      	strb	r3, [r7, #15]
 80085a4:	4b5d      	ldr	r3, [pc, #372]	; (800871c <mergeData+0x1f0>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	743b      	strb	r3, [r7, #16]
 80085aa:	4b5d      	ldr	r3, [pc, #372]	; (8008720 <mergeData+0x1f4>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	747b      	strb	r3, [r7, #17]
 80085b0:	4b5c      	ldr	r3, [pc, #368]	; (8008724 <mergeData+0x1f8>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	74bb      	strb	r3, [r7, #18]
 80085b6:	4b5c      	ldr	r3, [pc, #368]	; (8008728 <mergeData+0x1fc>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	74fb      	strb	r3, [r7, #19]
 80085bc:	4b5b      	ldr	r3, [pc, #364]	; (800872c <mergeData+0x200>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	753b      	strb	r3, [r7, #20]
 80085c2:	4b5b      	ldr	r3, [pc, #364]	; (8008730 <mergeData+0x204>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	757b      	strb	r3, [r7, #21]
 80085c8:	4b5a      	ldr	r3, [pc, #360]	; (8008734 <mergeData+0x208>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	75bb      	strb	r3, [r7, #22]
 80085ce:	4b5a      	ldr	r3, [pc, #360]	; (8008738 <mergeData+0x20c>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	75fb      	strb	r3, [r7, #23]
 80085d4:	4b59      	ldr	r3, [pc, #356]	; (800873c <mergeData+0x210>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	763b      	strb	r3, [r7, #24]
 80085da:	4b59      	ldr	r3, [pc, #356]	; (8008740 <mergeData+0x214>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	767b      	strb	r3, [r7, #25]
 80085e0:	4b58      	ldr	r3, [pc, #352]	; (8008744 <mergeData+0x218>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	76bb      	strb	r3, [r7, #26]
 80085e6:	4b58      	ldr	r3, [pc, #352]	; (8008748 <mergeData+0x21c>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	76fb      	strb	r3, [r7, #27]
 80085ec:	4b57      	ldr	r3, [pc, #348]	; (800874c <mergeData+0x220>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	773b      	strb	r3, [r7, #28]
 80085f2:	4b57      	ldr	r3, [pc, #348]	; (8008750 <mergeData+0x224>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	777b      	strb	r3, [r7, #29]
 80085f8:	4b56      	ldr	r3, [pc, #344]	; (8008754 <mergeData+0x228>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	77bb      	strb	r3, [r7, #30]
 80085fe:	4b56      	ldr	r3, [pc, #344]	; (8008758 <mergeData+0x22c>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	77fb      	strb	r3, [r7, #31]
 8008604:	4b55      	ldr	r3, [pc, #340]	; (800875c <mergeData+0x230>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800860c:	4b54      	ldr	r3, [pc, #336]	; (8008760 <mergeData+0x234>)
 800860e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008612:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			eepromData[39],
 8008616:	4b52      	ldr	r3, [pc, #328]	; (8008760 <mergeData+0x234>)
 8008618:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800861c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			eepromData[40],
 8008620:	4b4f      	ldr	r3, [pc, #316]	; (8008760 <mergeData+0x234>)
 8008622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			eepromData[41],
 800862a:	4b4d      	ldr	r3, [pc, #308]	; (8008760 <mergeData+0x234>)
 800862c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8008630:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			eepromData[42],
 8008634:	4b4a      	ldr	r3, [pc, #296]	; (8008760 <mergeData+0x234>)
 8008636:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800863a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[43],
 800863e:	4b48      	ldr	r3, [pc, #288]	; (8008760 <mergeData+0x234>)
 8008640:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[44],
 8008648:	4b45      	ldr	r3, [pc, #276]	; (8008760 <mergeData+0x234>)
 800864a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800864e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[45],
 8008652:	4b43      	ldr	r3, [pc, #268]	; (8008760 <mergeData+0x234>)
 8008654:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8008658:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[46],
 800865c:	4b40      	ldr	r3, [pc, #256]	; (8008760 <mergeData+0x234>)
 800865e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008662:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[47],
 8008666:	4b3e      	ldr	r3, [pc, #248]	; (8008760 <mergeData+0x234>)
 8008668:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800866c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008670:	2306      	movs	r3, #6
 8008672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008676:	2300      	movs	r3, #0
 8008678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800867a:	e015      	b.n	80086a8 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 800867c:	463a      	mov	r2, r7
 800867e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008680:	4413      	add	r3, r2
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800868a:	4936      	ldr	r1, [pc, #216]	; (8008764 <mergeData+0x238>)
 800868c:	4618      	mov	r0, r3
 800868e:	f004 ff6d 	bl	800d56c <siprintf>
	    strcat(combinedString, temp);
 8008692:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f004 ffc7 	bl	800d630 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80086a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a4:	3301      	adds	r3, #1
 80086a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086aa:	2b2b      	cmp	r3, #43	; 0x2b
 80086ac:	d9e6      	bls.n	800867c <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80086ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7f7 fdb6 	bl	8000224 <strlen>
 80086b8:	4603      	mov	r3, r0
 80086ba:	3301      	adds	r3, #1
 80086bc:	4618      	mov	r0, r3
 80086be:	f004 fea1 	bl	800d404 <malloc>
 80086c2:	4603      	mov	r3, r0
 80086c4:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80086c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086ca:	4619      	mov	r1, r3
 80086cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80086ce:	f005 f82b 	bl	800d728 <strcpy>
	return result;
 80086d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3770      	adds	r7, #112	; 0x70
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000afb 	.word	0x20000afb
 80086e0:	20000aed 	.word	0x20000aed
 80086e4:	20000af0 	.word	0x20000af0
 80086e8:	20000af1 	.word	0x20000af1
 80086ec:	20000af2 	.word	0x20000af2
 80086f0:	20000af9 	.word	0x20000af9
 80086f4:	20000af3 	.word	0x20000af3
 80086f8:	20000af4 	.word	0x20000af4
 80086fc:	20000af8 	.word	0x20000af8
 8008700:	20000af5 	.word	0x20000af5
 8008704:	20000b05 	.word	0x20000b05
 8008708:	20000af6 	.word	0x20000af6
 800870c:	20000b06 	.word	0x20000b06
 8008710:	20000af7 	.word	0x20000af7
 8008714:	20000b07 	.word	0x20000b07
 8008718:	20000afa 	.word	0x20000afa
 800871c:	20000afc 	.word	0x20000afc
 8008720:	20000afd 	.word	0x20000afd
 8008724:	20000afe 	.word	0x20000afe
 8008728:	20000aff 	.word	0x20000aff
 800872c:	20000b00 	.word	0x20000b00
 8008730:	20000b01 	.word	0x20000b01
 8008734:	20000b02 	.word	0x20000b02
 8008738:	20000b03 	.word	0x20000b03
 800873c:	20000b04 	.word	0x20000b04
 8008740:	20000b08 	.word	0x20000b08
 8008744:	20000b0a 	.word	0x20000b0a
 8008748:	20000ae9 	.word	0x20000ae9
 800874c:	20000aea 	.word	0x20000aea
 8008750:	20000000 	.word	0x20000000
 8008754:	20000001 	.word	0x20000001
 8008758:	20000aeb 	.word	0x20000aeb
 800875c:	20000b0d 	.word	0x20000b0d
 8008760:	20000a18 	.word	0x20000a18
 8008764:	0800ed30 	.word	0x0800ed30

08008768 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 800876e:	4b1b      	ldr	r3, [pc, #108]	; (80087dc <convertAndSendData+0x74>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8008776:	4a1a      	ldr	r2, [pc, #104]	; (80087e0 <convertAndSendData+0x78>)
 8008778:	2101      	movs	r1, #1
 800877a:	2001      	movs	r0, #1
 800877c:	f000 fa92 	bl	8008ca4 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8008780:	4a18      	ldr	r2, [pc, #96]	; (80087e4 <convertAndSendData+0x7c>)
 8008782:	2101      	movs	r1, #1
 8008784:	2002      	movs	r0, #2
 8008786:	f000 fa8d 	bl	8008ca4 <lcd_print>
 800878a:	e009      	b.n	80087a0 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 800878c:	4a16      	ldr	r2, [pc, #88]	; (80087e8 <convertAndSendData+0x80>)
 800878e:	2101      	movs	r1, #1
 8008790:	2001      	movs	r0, #1
 8008792:	f000 fa87 	bl	8008ca4 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8008796:	4a15      	ldr	r2, [pc, #84]	; (80087ec <convertAndSendData+0x84>)
 8008798:	2101      	movs	r1, #1
 800879a:	2002      	movs	r0, #2
 800879c:	f000 fa82 	bl	8008ca4 <lcd_print>
	}

	for(int i=0; i<2; i++) {
 80087a0:	2300      	movs	r3, #0
 80087a2:	607b      	str	r3, [r7, #4]
 80087a4:	e00c      	b.n	80087c0 <convertAndSendData+0x58>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80087a6:	f7ff fec1 	bl	800852c <mergeData>
 80087aa:	4603      	mov	r3, r0
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <convertAndSendData+0x88>)
 80087b0:	4a10      	ldr	r2, [pc, #64]	; (80087f4 <convertAndSendData+0x8c>)
 80087b2:	4911      	ldr	r1, [pc, #68]	; (80087f8 <convertAndSendData+0x90>)
 80087b4:	4811      	ldr	r0, [pc, #68]	; (80087fc <convertAndSendData+0x94>)
 80087b6:	f7f8 f8ef 	bl	8000998 <sendMachineData>
	for(int i=0; i<2; i++) {
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3301      	adds	r3, #1
 80087be:	607b      	str	r3, [r7, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	ddef      	ble.n	80087a6 <convertAndSendData+0x3e>
	}

	HAL_Delay(500);
 80087c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087ca:	f000 ffc1 	bl	8009750 <HAL_Delay>
	lcd_clear();
 80087ce:	f000 fa95 	bl	8008cfc <lcd_clear>
}
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000b0d 	.word	0x20000b0d
 80087e0:	0800ed34 	.word	0x0800ed34
 80087e4:	0800ed48 	.word	0x0800ed48
 80087e8:	0800ed5c 	.word	0x0800ed5c
 80087ec:	0800ed70 	.word	0x0800ed70
 80087f0:	20000ab0 	.word	0x20000ab0
 80087f4:	20000a9c 	.word	0x20000a9c
 80087f8:	20000a90 	.word	0x20000a90
 80087fc:	20001174 	.word	0x20001174

08008800 <iotSetup>:

void iotSetup() {
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af04      	add	r7, sp, #16
	if(iotMode != 0) {
 8008806:	4b39      	ldr	r3, [pc, #228]	; (80088ec <iotSetup+0xec>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d016      	beq.n	800883c <iotSetup+0x3c>
		if(checkEEPROM4ID() != 1) {
 800880e:	f000 f88b 	bl	8008928 <checkEEPROM4ID>
 8008812:	4603      	mov	r3, r0
 8008814:	2b01      	cmp	r3, #1
 8008816:	d001      	beq.n	800881c <iotSetup+0x1c>
			takeMachineID();
 8008818:	f7ff f9d2 	bl	8007bc0 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 800881c:	4834      	ldr	r0, [pc, #208]	; (80088f0 <iotSetup+0xf0>)
 800881e:	f7f7 fd01 	bl	8000224 <strlen>
 8008822:	4603      	mov	r3, r0
 8008824:	2b01      	cmp	r3, #1
 8008826:	d801      	bhi.n	800882c <iotSetup+0x2c>
			takeWifiSSID();
 8008828:	f7ff fb62 	bl	8007ef0 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 800882c:	4831      	ldr	r0, [pc, #196]	; (80088f4 <iotSetup+0xf4>)
 800882e:	f7f7 fcf9 	bl	8000224 <strlen>
 8008832:	4603      	mov	r3, r0
 8008834:	2b01      	cmp	r3, #1
 8008836:	d801      	bhi.n	800883c <iotSetup+0x3c>
			takeWifiPass();
 8008838:	f7ff fce8 	bl	800820c <takeWifiPass>
		}
	}

	if(setupCompleted != 1) {
 800883c:	4b2e      	ldr	r3, [pc, #184]	; (80088f8 <iotSetup+0xf8>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d044      	beq.n	80088ce <iotSetup+0xce>
		takeIDSection:
 8008844:	bf00      	nop
		if(checkMachineID(&huart1, machineID) == 1) {
 8008846:	492d      	ldr	r1, [pc, #180]	; (80088fc <iotSetup+0xfc>)
 8008848:	482d      	ldr	r0, [pc, #180]	; (8008900 <iotSetup+0x100>)
 800884a:	f7f8 f945 	bl	8000ad8 <checkMachineID>
 800884e:	4603      	mov	r3, r0
 8008850:	2b01      	cmp	r3, #1
 8008852:	d119      	bne.n	8008888 <iotSetup+0x88>
			setupCompleted = 1;
 8008854:	4b28      	ldr	r3, [pc, #160]	; (80088f8 <iotSetup+0xf8>)
 8008856:	2201      	movs	r2, #1
 8008858:	701a      	strb	r2, [r3, #0]
			eepromData[104] = setupCompleted;
 800885a:	4b27      	ldr	r3, [pc, #156]	; (80088f8 <iotSetup+0xf8>)
 800885c:	781a      	ldrb	r2, [r3, #0]
 800885e:	4b29      	ldr	r3, [pc, #164]	; (8008904 <iotSetup+0x104>)
 8008860:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			//EEPROMA yazma işlemini başlat
        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008864:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008868:	9302      	str	r3, [sp, #8]
 800886a:	236e      	movs	r3, #110	; 0x6e
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	4b25      	ldr	r3, [pc, #148]	; (8008904 <iotSetup+0x104>)
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	236e      	movs	r3, #110	; 0x6e
 8008874:	2200      	movs	r2, #0
 8008876:	21a0      	movs	r1, #160	; 0xa0
 8008878:	4823      	ldr	r0, [pc, #140]	; (8008908 <iotSetup+0x108>)
 800887a:	f001 fff3 	bl	800a864 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 800887e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008882:	f000 ff65 	bl	8009750 <HAL_Delay>
 8008886:	e022      	b.n	80088ce <iotSetup+0xce>
		} else {
			if(dilSecim == 1) {
 8008888:	4b20      	ldr	r3, [pc, #128]	; (800890c <iotSetup+0x10c>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d10a      	bne.n	80088a6 <iotSetup+0xa6>
				//türkçe hata mesajı
				lcd_print(1, 1, " BU ID MAKINEDE ");
 8008890:	4a1f      	ldr	r2, [pc, #124]	; (8008910 <iotSetup+0x110>)
 8008892:	2101      	movs	r1, #1
 8008894:	2001      	movs	r0, #1
 8008896:	f000 fa05 	bl	8008ca4 <lcd_print>
				lcd_print(2, 1, "  KULLANILAMAZ  ");
 800889a:	4a1e      	ldr	r2, [pc, #120]	; (8008914 <iotSetup+0x114>)
 800889c:	2101      	movs	r1, #1
 800889e:	2002      	movs	r0, #2
 80088a0:	f000 fa00 	bl	8008ca4 <lcd_print>
 80088a4:	e009      	b.n	80088ba <iotSetup+0xba>
			} else {
				//ingilizce hata mesajı
				lcd_print(1, 1, "ID NOT AVAILABLE");
 80088a6:	4a1c      	ldr	r2, [pc, #112]	; (8008918 <iotSetup+0x118>)
 80088a8:	2101      	movs	r1, #1
 80088aa:	2001      	movs	r0, #1
 80088ac:	f000 f9fa 	bl	8008ca4 <lcd_print>
				lcd_print(2, 1, "FOR THIS MACHINE");
 80088b0:	4a1a      	ldr	r2, [pc, #104]	; (800891c <iotSetup+0x11c>)
 80088b2:	2101      	movs	r1, #1
 80088b4:	2002      	movs	r0, #2
 80088b6:	f000 f9f5 	bl	8008ca4 <lcd_print>
			}

			HAL_Delay(1250);
 80088ba:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80088be:	f000 ff47 	bl	8009750 <HAL_Delay>
			//Tekrar id alma işlemi
			takeMachineID();
 80088c2:	f7ff f97d 	bl	8007bc0 <takeMachineID>
			HAL_Delay(200);
 80088c6:	20c8      	movs	r0, #200	; 0xc8
 80088c8:	f000 ff42 	bl	8009750 <HAL_Delay>
			goto takeIDSection;
 80088cc:	e7bb      	b.n	8008846 <iotSetup+0x46>
		}
	}

	ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 80088ce:	4a14      	ldr	r2, [pc, #80]	; (8008920 <iotSetup+0x120>)
 80088d0:	4914      	ldr	r1, [pc, #80]	; (8008924 <iotSetup+0x124>)
 80088d2:	480b      	ldr	r0, [pc, #44]	; (8008900 <iotSetup+0x100>)
 80088d4:	f7f7 ffb6 	bl	8000844 <ESP8266_Init>
	HAL_Delay(500);
 80088d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088dc:	f000 ff38 	bl	8009750 <HAL_Delay>
	convertAndSendData();
 80088e0:	f7ff ff42 	bl	8008768 <convertAndSendData>
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20000b0b 	.word	0x20000b0b
 80088f0:	20000a9c 	.word	0x20000a9c
 80088f4:	20000ab0 	.word	0x20000ab0
 80088f8:	20000ac4 	.word	0x20000ac4
 80088fc:	20000a90 	.word	0x20000a90
 8008900:	20001174 	.word	0x20001174
 8008904:	20000a18 	.word	0x20000a18
 8008908:	200010d8 	.word	0x200010d8
 800890c:	20000b0d 	.word	0x20000b0d
 8008910:	0800ed84 	.word	0x0800ed84
 8008914:	0800ed98 	.word	0x0800ed98
 8008918:	0800edac 	.word	0x0800edac
 800891c:	0800edc0 	.word	0x0800edc0
 8008920:	0800edd4 	.word	0x0800edd4
 8008924:	0800edec 	.word	0x0800edec

08008928 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 800892e:	4b0f      	ldr	r3, [pc, #60]	; (800896c <checkEEPROM4ID+0x44>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008934:	2301      	movs	r3, #1
 8008936:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008938:	2300      	movs	r3, #0
 800893a:	607b      	str	r3, [r7, #4]
 800893c:	e00d      	b.n	800895a <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 800893e:	4a0c      	ldr	r2, [pc, #48]	; (8008970 <checkEEPROM4ID+0x48>)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4413      	add	r3, r2
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <checkEEPROM4ID+0x26>
			returnVal = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3301      	adds	r3, #1
 8008952:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3301      	adds	r3, #1
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b0b      	cmp	r3, #11
 800895e:	ddee      	ble.n	800893e <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008960:	68bb      	ldr	r3, [r7, #8]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr
 800896c:	20000004 	.word	0x20000004
 8008970:	20000a18 	.word	0x20000a18

08008974 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af02      	add	r7, sp, #8
 800897a:	4603      	mov	r3, r0
 800897c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	f023 030f 	bic.w	r3, r3, #15
 8008984:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	011b      	lsls	r3, r3, #4
 800898a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800898c:	7b7b      	ldrb	r3, [r7, #13]
 800898e:	f043 030c 	orr.w	r3, r3, #12
 8008992:	b2db      	uxtb	r3, r3
 8008994:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008996:	7b7b      	ldrb	r3, [r7, #13]
 8008998:	f043 0308 	orr.w	r3, r3, #8
 800899c:	b2db      	uxtb	r3, r3
 800899e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80089a0:	7b3b      	ldrb	r3, [r7, #12]
 80089a2:	f043 030c 	orr.w	r3, r3, #12
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80089aa:	7b3b      	ldrb	r3, [r7, #12]
 80089ac:	f043 0308 	orr.w	r3, r3, #8
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80089b4:	bf00      	nop
 80089b6:	4825      	ldr	r0, [pc, #148]	; (8008a4c <lcd_send_cmd+0xd8>)
 80089b8:	f002 fac3 	bl	800af42 <HAL_I2C_GetError>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d0f9      	beq.n	80089b6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80089c2:	bf00      	nop
 80089c4:	4821      	ldr	r0, [pc, #132]	; (8008a4c <lcd_send_cmd+0xd8>)
 80089c6:	f002 faaf 	bl	800af28 <HAL_I2C_GetState>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d1f9      	bne.n	80089c4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80089d0:	4b1f      	ldr	r3, [pc, #124]	; (8008a50 <lcd_send_cmd+0xdc>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d116      	bne.n	8008a06 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
 80089dc:	e00f      	b.n	80089fe <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	3310      	adds	r3, #16
 80089e2:	443b      	add	r3, r7
 80089e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	f022 0208 	bic.w	r2, r2, #8
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	3310      	adds	r3, #16
 80089f2:	443b      	add	r3, r7
 80089f4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	3301      	adds	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d9ec      	bls.n	80089de <lcd_send_cmd+0x6a>
 8008a04:	e015      	b.n	8008a32 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008a06:	2300      	movs	r3, #0
 8008a08:	73bb      	strb	r3, [r7, #14]
 8008a0a:	e00f      	b.n	8008a2c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	3310      	adds	r3, #16
 8008a10:	443b      	add	r3, r7
 8008a12:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	f042 0208 	orr.w	r2, r2, #8
 8008a1c:	b2d2      	uxtb	r2, r2
 8008a1e:	3310      	adds	r3, #16
 8008a20:	443b      	add	r3, r7
 8008a22:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	73bb      	strb	r3, [r7, #14]
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d9ec      	bls.n	8008a0c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008a32:	f107 0208 	add.w	r2, r7, #8
 8008a36:	2364      	movs	r3, #100	; 0x64
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	2304      	movs	r3, #4
 8008a3c:	214e      	movs	r1, #78	; 0x4e
 8008a3e:	4803      	ldr	r0, [pc, #12]	; (8008a4c <lcd_send_cmd+0xd8>)
 8008a40:	f001 fe12 	bl	800a668 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200010d8 	.word	0x200010d8
 8008a50:	200010ac 	.word	0x200010ac

08008a54 <lcd_send_data>:

void lcd_send_data (char data) {
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	f023 030f 	bic.w	r3, r3, #15
 8008a64:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008a6c:	7b7b      	ldrb	r3, [r7, #13]
 8008a6e:	f043 030d 	orr.w	r3, r3, #13
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008a76:	7b7b      	ldrb	r3, [r7, #13]
 8008a78:	f043 0309 	orr.w	r3, r3, #9
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008a80:	7b3b      	ldrb	r3, [r7, #12]
 8008a82:	f043 030d 	orr.w	r3, r3, #13
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008a8a:	7b3b      	ldrb	r3, [r7, #12]
 8008a8c:	f043 0309 	orr.w	r3, r3, #9
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008a94:	bf00      	nop
 8008a96:	4825      	ldr	r0, [pc, #148]	; (8008b2c <lcd_send_data+0xd8>)
 8008a98:	f002 fa53 	bl	800af42 <HAL_I2C_GetError>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d0f9      	beq.n	8008a96 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008aa2:	bf00      	nop
 8008aa4:	4821      	ldr	r0, [pc, #132]	; (8008b2c <lcd_send_data+0xd8>)
 8008aa6:	f002 fa3f 	bl	800af28 <HAL_I2C_GetState>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d1f9      	bne.n	8008aa4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008ab0:	4b1f      	ldr	r3, [pc, #124]	; (8008b30 <lcd_send_data+0xdc>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d116      	bne.n	8008ae6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
 8008abc:	e00f      	b.n	8008ade <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	3310      	adds	r3, #16
 8008ac2:	443b      	add	r3, r7
 8008ac4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	f022 0208 	bic.w	r2, r2, #8
 8008ace:	b2d2      	uxtb	r2, r2
 8008ad0:	3310      	adds	r3, #16
 8008ad2:	443b      	add	r3, r7
 8008ad4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	3301      	adds	r3, #1
 8008adc:	73fb      	strb	r3, [r7, #15]
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d9ec      	bls.n	8008abe <lcd_send_data+0x6a>
 8008ae4:	e015      	b.n	8008b12 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73bb      	strb	r3, [r7, #14]
 8008aea:	e00f      	b.n	8008b0c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	3310      	adds	r3, #16
 8008af0:	443b      	add	r3, r7
 8008af2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	f042 0208 	orr.w	r2, r2, #8
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	3310      	adds	r3, #16
 8008b00:	443b      	add	r3, r7
 8008b02:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	73bb      	strb	r3, [r7, #14]
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d9ec      	bls.n	8008aec <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008b12:	f107 0208 	add.w	r2, r7, #8
 8008b16:	2364      	movs	r3, #100	; 0x64
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	2304      	movs	r3, #4
 8008b1c:	214e      	movs	r1, #78	; 0x4e
 8008b1e:	4803      	ldr	r0, [pc, #12]	; (8008b2c <lcd_send_data+0xd8>)
 8008b20:	f001 fda2 	bl	800a668 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	200010d8 	.word	0x200010d8
 8008b30:	200010ac 	.word	0x200010ac

08008b34 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008b3c:	e006      	b.n	8008b4c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff ff84 	bl	8008a54 <lcd_send_data>
	while (*str) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f4      	bne.n	8008b3e <lcd_send_string+0xa>
	}
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	4603      	mov	r3, r0
 8008b68:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	f023 030f 	bic.w	r3, r3, #15
 8008b70:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	011b      	lsls	r3, r3, #4
 8008b76:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008b78:	7b7b      	ldrb	r3, [r7, #13]
 8008b7a:	f043 030d 	orr.w	r3, r3, #13
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008b82:	7b7b      	ldrb	r3, [r7, #13]
 8008b84:	f043 0309 	orr.w	r3, r3, #9
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008b8c:	7b3b      	ldrb	r3, [r7, #12]
 8008b8e:	f043 030d 	orr.w	r3, r3, #13
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008b96:	7b3b      	ldrb	r3, [r7, #12]
 8008b98:	f043 0309 	orr.w	r3, r3, #9
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008ba0:	bf00      	nop
 8008ba2:	4825      	ldr	r0, [pc, #148]	; (8008c38 <lcd_send_char+0xd8>)
 8008ba4:	f002 f9cd 	bl	800af42 <HAL_I2C_GetError>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b04      	cmp	r3, #4
 8008bac:	d0f9      	beq.n	8008ba2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008bae:	bf00      	nop
 8008bb0:	4821      	ldr	r0, [pc, #132]	; (8008c38 <lcd_send_char+0xd8>)
 8008bb2:	f002 f9b9 	bl	800af28 <HAL_I2C_GetState>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b20      	cmp	r3, #32
 8008bba:	d1f9      	bne.n	8008bb0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008bbc:	4b1f      	ldr	r3, [pc, #124]	; (8008c3c <lcd_send_char+0xdc>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d116      	bne.n	8008bf2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
 8008bc8:	e00f      	b.n	8008bea <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	3310      	adds	r3, #16
 8008bce:	443b      	add	r3, r7
 8008bd0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	f022 0208 	bic.w	r2, r2, #8
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	3310      	adds	r3, #16
 8008bde:	443b      	add	r3, r7
 8008be0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	3301      	adds	r3, #1
 8008be8:	73fb      	strb	r3, [r7, #15]
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d9ec      	bls.n	8008bca <lcd_send_char+0x6a>
 8008bf0:	e015      	b.n	8008c1e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73bb      	strb	r3, [r7, #14]
 8008bf6:	e00f      	b.n	8008c18 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	3310      	adds	r3, #16
 8008bfc:	443b      	add	r3, r7
 8008bfe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	f042 0208 	orr.w	r2, r2, #8
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	3310      	adds	r3, #16
 8008c0c:	443b      	add	r3, r7
 8008c0e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	3301      	adds	r3, #1
 8008c16:	73bb      	strb	r3, [r7, #14]
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d9ec      	bls.n	8008bf8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008c1e:	f107 0208 	add.w	r2, r7, #8
 8008c22:	2364      	movs	r3, #100	; 0x64
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	2304      	movs	r3, #4
 8008c28:	214e      	movs	r1, #78	; 0x4e
 8008c2a:	4803      	ldr	r0, [pc, #12]	; (8008c38 <lcd_send_char+0xd8>)
 8008c2c:	f001 fd1c 	bl	800a668 <HAL_I2C_Master_Transmit>
}
 8008c30:	bf00      	nop
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	200010d8 	.word	0x200010d8
 8008c3c:	200010ac 	.word	0x200010ac

08008c40 <lcd_init>:

void lcd_init (void) {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008c44:	2002      	movs	r0, #2
 8008c46:	f7ff fe95 	bl	8008974 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008c4a:	2028      	movs	r0, #40	; 0x28
 8008c4c:	f7ff fe92 	bl	8008974 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008c50:	200c      	movs	r0, #12
 8008c52:	f7ff fe8f 	bl	8008974 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008c56:	2080      	movs	r0, #128	; 0x80
 8008c58:	f7ff fe8c 	bl	8008974 <lcd_send_cmd>
	lcd_backlight(1);
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	f000 f86d 	bl	8008d3c <lcd_backlight>
}
 8008c62:	bf00      	nop
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	460a      	mov	r2, r1
 8008c70:	71fb      	strb	r3, [r7, #7]
 8008c72:	4613      	mov	r3, r2
 8008c74:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d106      	bne.n	8008c8a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008c7c:	79bb      	ldrb	r3, [r7, #6]
 8008c7e:	337f      	adds	r3, #127	; 0x7f
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff fe76 	bl	8008974 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008c88:	e008      	b.n	8008c9c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d105      	bne.n	8008c9c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008c90:	79bb      	ldrb	r3, [r7, #6]
 8008c92:	3b41      	subs	r3, #65	; 0x41
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff fe6c 	bl	8008974 <lcd_send_cmd>
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	603a      	str	r2, [r7, #0]
 8008cae:	71fb      	strb	r3, [r7, #7]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008cb4:	79ba      	ldrb	r2, [r7, #6]
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	4611      	mov	r1, r2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff ffd3 	bl	8008c66 <lcd_gotoxy>
	lcd_send_string(str);
 8008cc0:	6838      	ldr	r0, [r7, #0]
 8008cc2:	f7ff ff37 	bl	8008b34 <lcd_send_string>
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	71fb      	strb	r3, [r7, #7]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	71bb      	strb	r3, [r7, #6]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008ce0:	79ba      	ldrb	r2, [r7, #6]
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff ffbd 	bl	8008c66 <lcd_gotoxy>
    lcd_send_char(ch);
 8008cec:	797b      	ldrb	r3, [r7, #5]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff ff36 	bl	8008b60 <lcd_send_char>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <lcd_clear>:

void lcd_clear(void) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008d00:	2001      	movs	r0, #1
 8008d02:	f7ff fe37 	bl	8008974 <lcd_send_cmd>
    HAL_Delay(2);
 8008d06:	2002      	movs	r0, #2
 8008d08:	f000 fd22 	bl	8009750 <HAL_Delay>
}
 8008d0c:	bf00      	nop
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	460a      	mov	r2, r1
 8008d1a:	71fb      	strb	r3, [r7, #7]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008d20:	79ba      	ldrb	r2, [r7, #6]
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	4611      	mov	r1, r2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff ff9d 	bl	8008c66 <lcd_gotoxy>

    lcd_send_char(' ');
 8008d2c:	2020      	movs	r0, #32
 8008d2e:	f7ff ff17 	bl	8008b60 <lcd_send_char>
}
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008d46:	4a05      	ldr	r2, [pc, #20]	; (8008d5c <lcd_backlight+0x20>)
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	f7ff fe11 	bl	8008974 <lcd_send_cmd>
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200010ac 	.word	0x200010ac

08008d60 <lcd_cursor>:

void lcd_cursor(int state) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d106      	bne.n	8008d7c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8008d6e:	200e      	movs	r0, #14
 8008d70:	f7ff fe00 	bl	8008974 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008d74:	200f      	movs	r0, #15
 8008d76:	f7ff fdfd 	bl	8008974 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008d7a:	e002      	b.n	8008d82 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008d7c:	200c      	movs	r0, #12
 8008d7e:	f7ff fdf9 	bl	8008974 <lcd_send_cmd>
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008d94:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	4a03      	ldr	r2, [pc, #12]	; (8008da8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008d9c:	6013      	str	r3, [r2, #0]
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bc80      	pop	{r7}
 8008da6:	4770      	bx	lr
 8008da8:	20000ac8 	.word	0x20000ac8

08008dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008db0:	f000 fc6c 	bl	800968c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008db4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008db8:	f000 fcca 	bl	8009750 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008dbc:	f000 f89c 	bl	8008ef8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008dc0:	f000 f9be 	bl	8009140 <MX_GPIO_Init>
  MX_CAN_Init();
 8008dc4:	f000 f8de 	bl	8008f84 <MX_CAN_Init>
  MX_I2C1_Init();
 8008dc8:	f000 f910 	bl	8008fec <MX_I2C1_Init>
  MX_TIM1_Init();
 8008dcc:	f000 f93c 	bl	8009048 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008dd0:	f000 f98c 	bl	80090ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	2140      	movs	r1, #64	; 0x40
 8008dd8:	483e      	ldr	r0, [pc, #248]	; (8008ed4 <main+0x128>)
 8008dda:	f001 faa0 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008dde:	2201      	movs	r2, #1
 8008de0:	2180      	movs	r1, #128	; 0x80
 8008de2:	483c      	ldr	r0, [pc, #240]	; (8008ed4 <main+0x128>)
 8008de4:	f001 fa9b 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008de8:	200a      	movs	r0, #10
 8008dea:	f000 fcb1 	bl	8009750 <HAL_Delay>
  lcd_init();
 8008dee:	f7ff ff27 	bl	8008c40 <lcd_init>
  HAL_Delay(10);
 8008df2:	200a      	movs	r0, #10
 8008df4:	f000 fcac 	bl	8009750 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008df8:	4837      	ldr	r0, [pc, #220]	; (8008ed8 <main+0x12c>)
 8008dfa:	f003 f943 	bl	800c084 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008dfe:	bf00      	nop
 8008e00:	4836      	ldr	r0, [pc, #216]	; (8008edc <main+0x130>)
 8008e02:	f002 f89e 	bl	800af42 <HAL_I2C_GetError>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d0f9      	beq.n	8008e00 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008e0c:	bf00      	nop
 8008e0e:	4833      	ldr	r0, [pc, #204]	; (8008edc <main+0x130>)
 8008e10:	f002 f88a 	bl	800af28 <HAL_I2C_GetState>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	d1f9      	bne.n	8008e0e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e20:	482c      	ldr	r0, [pc, #176]	; (8008ed4 <main+0x128>)
 8008e22:	f001 fa7c 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008e26:	2200      	movs	r2, #0
 8008e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e2c:	4829      	ldr	r0, [pc, #164]	; (8008ed4 <main+0x128>)
 8008e2e:	f001 fa76 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008e32:	2200      	movs	r2, #0
 8008e34:	2104      	movs	r1, #4
 8008e36:	4827      	ldr	r0, [pc, #156]	; (8008ed4 <main+0x128>)
 8008e38:	f001 fa71 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2102      	movs	r1, #2
 8008e40:	4824      	ldr	r0, [pc, #144]	; (8008ed4 <main+0x128>)
 8008e42:	f001 fa6c 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008e46:	2200      	movs	r2, #0
 8008e48:	2101      	movs	r1, #1
 8008e4a:	4822      	ldr	r0, [pc, #136]	; (8008ed4 <main+0x128>)
 8008e4c:	f001 fa67 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008e50:	2200      	movs	r2, #0
 8008e52:	2120      	movs	r1, #32
 8008e54:	4822      	ldr	r0, [pc, #136]	; (8008ee0 <main+0x134>)
 8008e56:	f001 fa62 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2110      	movs	r1, #16
 8008e5e:	4820      	ldr	r0, [pc, #128]	; (8008ee0 <main+0x134>)
 8008e60:	f001 fa5d 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008e64:	2200      	movs	r2, #0
 8008e66:	2180      	movs	r1, #128	; 0x80
 8008e68:	481e      	ldr	r0, [pc, #120]	; (8008ee4 <main+0x138>)
 8008e6a:	f001 fa58 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2140      	movs	r1, #64	; 0x40
 8008e72:	481c      	ldr	r0, [pc, #112]	; (8008ee4 <main+0x138>)
 8008e74:	f001 fa53 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2120      	movs	r1, #32
 8008e7c:	4819      	ldr	r0, [pc, #100]	; (8008ee4 <main+0x138>)
 8008e7e:	f001 fa4e 	bl	800a31e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008e82:	2200      	movs	r2, #0
 8008e84:	2110      	movs	r1, #16
 8008e86:	4817      	ldr	r0, [pc, #92]	; (8008ee4 <main+0x138>)
 8008e88:	f001 fa49 	bl	800a31e <HAL_GPIO_WritePin>

  i2cTest();
 8008e8c:	f7f8 f82e 	bl	8000eec <i2cTest>
  HAL_Delay(100);
 8008e90:	2064      	movs	r0, #100	; 0x64
 8008e92:	f000 fc5d 	bl	8009750 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008e96:	4a14      	ldr	r2, [pc, #80]	; (8008ee8 <main+0x13c>)
 8008e98:	2101      	movs	r1, #1
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	f7ff ff02 	bl	8008ca4 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008ea0:	4a12      	ldr	r2, [pc, #72]	; (8008eec <main+0x140>)
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	2002      	movs	r0, #2
 8008ea6:	f7ff fefd 	bl	8008ca4 <lcd_print>
  //lcd_print(1,1,"     RMK-V1     ");
  //lcd_print(2,1,"ONDTECH ESP CONT");
  HAL_Delay(1000);
 8008eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008eae:	f000 fc4f 	bl	8009750 <HAL_Delay>
  lcd_clear();
 8008eb2:	f7ff ff23 	bl	8008cfc <lcd_clear>

  eepromKontrol();
 8008eb6:	f7f7 f9bd 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008eba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ebe:	f000 fc47 	bl	8009750 <HAL_Delay>

  backLightTimer = millis;
 8008ec2:	4b0b      	ldr	r3, [pc, #44]	; (8008ef0 <main+0x144>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a0b      	ldr	r2, [pc, #44]	; (8008ef4 <main+0x148>)
 8008ec8:	6013      	str	r3, [r2, #0]

  iotSetup();
 8008eca:	f7ff fc99 	bl	8008800 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008ece:	f7fd fe31 	bl	8006b34 <mainLoop>
 8008ed2:	e7fc      	b.n	8008ece <main+0x122>
 8008ed4:	40010c00 	.word	0x40010c00
 8008ed8:	2000112c 	.word	0x2000112c
 8008edc:	200010d8 	.word	0x200010d8
 8008ee0:	40011000 	.word	0x40011000
 8008ee4:	40010800 	.word	0x40010800
 8008ee8:	200000a0 	.word	0x200000a0
 8008eec:	200000b0 	.word	0x200000b0
 8008ef0:	20000ac8 	.word	0x20000ac8
 8008ef4:	20000ae4 	.word	0x20000ae4

08008ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b090      	sub	sp, #64	; 0x40
 8008efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008efe:	f107 0318 	add.w	r3, r7, #24
 8008f02:	2228      	movs	r2, #40	; 0x28
 8008f04:	2100      	movs	r1, #0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f004 fbca 	bl	800d6a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f0c:	1d3b      	adds	r3, r7, #4
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	605a      	str	r2, [r3, #4]
 8008f14:	609a      	str	r2, [r3, #8]
 8008f16:	60da      	str	r2, [r3, #12]
 8008f18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008f24:	2300      	movs	r3, #0
 8008f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008f36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f3c:	f107 0318 	add.w	r3, r7, #24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f002 fc3f 	bl	800b7c4 <HAL_RCC_OscConfig>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008f4c:	f000 f9a2 	bl	8009294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f50:	230f      	movs	r3, #15
 8008f52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f54:	2302      	movs	r3, #2
 8008f56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008f66:	1d3b      	adds	r3, r7, #4
 8008f68:	2102      	movs	r1, #2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f002 feac 	bl	800bcc8 <HAL_RCC_ClockConfig>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008f76:	f000 f98d 	bl	8009294 <Error_Handler>
  }
}
 8008f7a:	bf00      	nop
 8008f7c:	3740      	adds	r7, #64	; 0x40
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008f88:	4b16      	ldr	r3, [pc, #88]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008f8a:	4a17      	ldr	r2, [pc, #92]	; (8008fe8 <MX_CAN_Init+0x64>)
 8008f8c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008f8e:	4b15      	ldr	r3, [pc, #84]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008f90:	2210      	movs	r2, #16
 8008f92:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008f94:	4b13      	ldr	r3, [pc, #76]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008f9a:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008fa0:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008fac:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008fb8:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008fbe:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008fc4:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008fca:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008fd0:	4804      	ldr	r0, [pc, #16]	; (8008fe4 <MX_CAN_Init+0x60>)
 8008fd2:	f000 fbe1 	bl	8009798 <HAL_CAN_Init>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008fdc:	f000 f95a 	bl	8009294 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008fe0:	bf00      	nop
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	200010b0 	.word	0x200010b0
 8008fe8:	40006400 	.word	0x40006400

08008fec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008ff0:	4b12      	ldr	r3, [pc, #72]	; (800903c <MX_I2C1_Init+0x50>)
 8008ff2:	4a13      	ldr	r2, [pc, #76]	; (8009040 <MX_I2C1_Init+0x54>)
 8008ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008ff6:	4b11      	ldr	r3, [pc, #68]	; (800903c <MX_I2C1_Init+0x50>)
 8008ff8:	4a12      	ldr	r2, [pc, #72]	; (8009044 <MX_I2C1_Init+0x58>)
 8008ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008ffc:	4b0f      	ldr	r3, [pc, #60]	; (800903c <MX_I2C1_Init+0x50>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009002:	4b0e      	ldr	r3, [pc, #56]	; (800903c <MX_I2C1_Init+0x50>)
 8009004:	2200      	movs	r2, #0
 8009006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009008:	4b0c      	ldr	r3, [pc, #48]	; (800903c <MX_I2C1_Init+0x50>)
 800900a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800900e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009010:	4b0a      	ldr	r3, [pc, #40]	; (800903c <MX_I2C1_Init+0x50>)
 8009012:	2200      	movs	r2, #0
 8009014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009016:	4b09      	ldr	r3, [pc, #36]	; (800903c <MX_I2C1_Init+0x50>)
 8009018:	2200      	movs	r2, #0
 800901a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800901c:	4b07      	ldr	r3, [pc, #28]	; (800903c <MX_I2C1_Init+0x50>)
 800901e:	2200      	movs	r2, #0
 8009020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009022:	4b06      	ldr	r3, [pc, #24]	; (800903c <MX_I2C1_Init+0x50>)
 8009024:	2200      	movs	r2, #0
 8009026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009028:	4804      	ldr	r0, [pc, #16]	; (800903c <MX_I2C1_Init+0x50>)
 800902a:	f001 f9a9 	bl	800a380 <HAL_I2C_Init>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009034:	f000 f92e 	bl	8009294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009038:	bf00      	nop
 800903a:	bd80      	pop	{r7, pc}
 800903c:	200010d8 	.word	0x200010d8
 8009040:	40005400 	.word	0x40005400
 8009044:	00061a80 	.word	0x00061a80

08009048 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800904e:	f107 0308 	add.w	r3, r7, #8
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	605a      	str	r2, [r3, #4]
 8009058:	609a      	str	r2, [r3, #8]
 800905a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800905c:	463b      	mov	r3, r7
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009064:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <MX_TIM1_Init+0x9c>)
 8009066:	4a20      	ldr	r2, [pc, #128]	; (80090e8 <MX_TIM1_Init+0xa0>)
 8009068:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800906a:	4b1e      	ldr	r3, [pc, #120]	; (80090e4 <MX_TIM1_Init+0x9c>)
 800906c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8009070:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009072:	4b1c      	ldr	r3, [pc, #112]	; (80090e4 <MX_TIM1_Init+0x9c>)
 8009074:	2200      	movs	r2, #0
 8009076:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009078:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <MX_TIM1_Init+0x9c>)
 800907a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800907e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009080:	4b18      	ldr	r3, [pc, #96]	; (80090e4 <MX_TIM1_Init+0x9c>)
 8009082:	2200      	movs	r2, #0
 8009084:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009086:	4b17      	ldr	r3, [pc, #92]	; (80090e4 <MX_TIM1_Init+0x9c>)
 8009088:	2200      	movs	r2, #0
 800908a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800908c:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <MX_TIM1_Init+0x9c>)
 800908e:	2200      	movs	r2, #0
 8009090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009092:	4814      	ldr	r0, [pc, #80]	; (80090e4 <MX_TIM1_Init+0x9c>)
 8009094:	f002 ffa6 	bl	800bfe4 <HAL_TIM_Base_Init>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800909e:	f000 f8f9 	bl	8009294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80090a8:	f107 0308 	add.w	r3, r7, #8
 80090ac:	4619      	mov	r1, r3
 80090ae:	480d      	ldr	r0, [pc, #52]	; (80090e4 <MX_TIM1_Init+0x9c>)
 80090b0:	f003 f950 	bl	800c354 <HAL_TIM_ConfigClockSource>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80090ba:	f000 f8eb 	bl	8009294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090be:	2300      	movs	r3, #0
 80090c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090c2:	2300      	movs	r3, #0
 80090c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80090c6:	463b      	mov	r3, r7
 80090c8:	4619      	mov	r1, r3
 80090ca:	4806      	ldr	r0, [pc, #24]	; (80090e4 <MX_TIM1_Init+0x9c>)
 80090cc:	f003 fb3e 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80090d6:	f000 f8dd 	bl	8009294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80090da:	bf00      	nop
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	2000112c 	.word	0x2000112c
 80090e8:	40012c00 	.word	0x40012c00

080090ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80090f0:	4b11      	ldr	r3, [pc, #68]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 80090f2:	4a12      	ldr	r2, [pc, #72]	; (800913c <MX_USART1_UART_Init+0x50>)
 80090f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80090f6:	4b10      	ldr	r3, [pc, #64]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 80090f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80090fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80090fe:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 8009100:	2200      	movs	r2, #0
 8009102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 8009106:	2200      	movs	r2, #0
 8009108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800910a:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 800910c:	2200      	movs	r2, #0
 800910e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009110:	4b09      	ldr	r3, [pc, #36]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 8009112:	220c      	movs	r2, #12
 8009114:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009116:	4b08      	ldr	r3, [pc, #32]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 8009118:	2200      	movs	r2, #0
 800911a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800911c:	4b06      	ldr	r3, [pc, #24]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 800911e:	2200      	movs	r2, #0
 8009120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009122:	4805      	ldr	r0, [pc, #20]	; (8009138 <MX_USART1_UART_Init+0x4c>)
 8009124:	f003 fb90 	bl	800c848 <HAL_UART_Init>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800912e:	f000 f8b1 	bl	8009294 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009132:	bf00      	nop
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20001174 	.word	0x20001174
 800913c:	40013800 	.word	0x40013800

08009140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009146:	f107 0310 	add.w	r3, r7, #16
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	605a      	str	r2, [r3, #4]
 8009150:	609a      	str	r2, [r3, #8]
 8009152:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009154:	4b4b      	ldr	r3, [pc, #300]	; (8009284 <MX_GPIO_Init+0x144>)
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	4a4a      	ldr	r2, [pc, #296]	; (8009284 <MX_GPIO_Init+0x144>)
 800915a:	f043 0310 	orr.w	r3, r3, #16
 800915e:	6193      	str	r3, [r2, #24]
 8009160:	4b48      	ldr	r3, [pc, #288]	; (8009284 <MX_GPIO_Init+0x144>)
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800916c:	4b45      	ldr	r3, [pc, #276]	; (8009284 <MX_GPIO_Init+0x144>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	4a44      	ldr	r2, [pc, #272]	; (8009284 <MX_GPIO_Init+0x144>)
 8009172:	f043 0320 	orr.w	r3, r3, #32
 8009176:	6193      	str	r3, [r2, #24]
 8009178:	4b42      	ldr	r3, [pc, #264]	; (8009284 <MX_GPIO_Init+0x144>)
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	60bb      	str	r3, [r7, #8]
 8009182:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009184:	4b3f      	ldr	r3, [pc, #252]	; (8009284 <MX_GPIO_Init+0x144>)
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	4a3e      	ldr	r2, [pc, #248]	; (8009284 <MX_GPIO_Init+0x144>)
 800918a:	f043 0304 	orr.w	r3, r3, #4
 800918e:	6193      	str	r3, [r2, #24]
 8009190:	4b3c      	ldr	r3, [pc, #240]	; (8009284 <MX_GPIO_Init+0x144>)
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	f003 0304 	and.w	r3, r3, #4
 8009198:	607b      	str	r3, [r7, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800919c:	4b39      	ldr	r3, [pc, #228]	; (8009284 <MX_GPIO_Init+0x144>)
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	4a38      	ldr	r2, [pc, #224]	; (8009284 <MX_GPIO_Init+0x144>)
 80091a2:	f043 0308 	orr.w	r3, r3, #8
 80091a6:	6193      	str	r3, [r2, #24]
 80091a8:	4b36      	ldr	r3, [pc, #216]	; (8009284 <MX_GPIO_Init+0x144>)
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	f003 0308 	and.w	r3, r3, #8
 80091b0:	603b      	str	r3, [r7, #0]
 80091b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80091b4:	2200      	movs	r2, #0
 80091b6:	21f0      	movs	r1, #240	; 0xf0
 80091b8:	4833      	ldr	r0, [pc, #204]	; (8009288 <MX_GPIO_Init+0x148>)
 80091ba:	f001 f8b0 	bl	800a31e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80091be:	2200      	movs	r2, #0
 80091c0:	f241 0130 	movw	r1, #4144	; 0x1030
 80091c4:	4831      	ldr	r0, [pc, #196]	; (800928c <MX_GPIO_Init+0x14c>)
 80091c6:	f001 f8aa 	bl	800a31e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80091ca:	2200      	movs	r2, #0
 80091cc:	f640 4107 	movw	r1, #3079	; 0xc07
 80091d0:	482f      	ldr	r0, [pc, #188]	; (8009290 <MX_GPIO_Init+0x150>)
 80091d2:	f001 f8a4 	bl	800a31e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80091d6:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80091da:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091e4:	f107 0310 	add.w	r3, r7, #16
 80091e8:	4619      	mov	r1, r3
 80091ea:	4828      	ldr	r0, [pc, #160]	; (800928c <MX_GPIO_Init+0x14c>)
 80091ec:	f000 fe20 	bl	8009e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80091f0:	f248 130f 	movw	r3, #33039	; 0x810f
 80091f4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091f6:	2300      	movs	r3, #0
 80091f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091fe:	f107 0310 	add.w	r3, r7, #16
 8009202:	4619      	mov	r1, r3
 8009204:	4820      	ldr	r0, [pc, #128]	; (8009288 <MX_GPIO_Init+0x148>)
 8009206:	f000 fe13 	bl	8009e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800920a:	23f0      	movs	r3, #240	; 0xf0
 800920c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800920e:	2301      	movs	r3, #1
 8009210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009212:	2300      	movs	r3, #0
 8009214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009216:	2302      	movs	r3, #2
 8009218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800921a:	f107 0310 	add.w	r3, r7, #16
 800921e:	4619      	mov	r1, r3
 8009220:	4819      	ldr	r0, [pc, #100]	; (8009288 <MX_GPIO_Init+0x148>)
 8009222:	f000 fe05 	bl	8009e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8009226:	f241 0330 	movw	r3, #4144	; 0x1030
 800922a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800922c:	2301      	movs	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009234:	2302      	movs	r3, #2
 8009236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009238:	f107 0310 	add.w	r3, r7, #16
 800923c:	4619      	mov	r1, r3
 800923e:	4813      	ldr	r0, [pc, #76]	; (800928c <MX_GPIO_Init+0x14c>)
 8009240:	f000 fdf6 	bl	8009e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009244:	f640 4307 	movw	r3, #3079	; 0xc07
 8009248:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800924a:	2301      	movs	r3, #1
 800924c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800924e:	2300      	movs	r3, #0
 8009250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009252:	2302      	movs	r3, #2
 8009254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009256:	f107 0310 	add.w	r3, r7, #16
 800925a:	4619      	mov	r1, r3
 800925c:	480c      	ldr	r0, [pc, #48]	; (8009290 <MX_GPIO_Init+0x150>)
 800925e:	f000 fde7 	bl	8009e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8009262:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926c:	2300      	movs	r3, #0
 800926e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009270:	f107 0310 	add.w	r3, r7, #16
 8009274:	4619      	mov	r1, r3
 8009276:	4806      	ldr	r0, [pc, #24]	; (8009290 <MX_GPIO_Init+0x150>)
 8009278:	f000 fdda 	bl	8009e30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800927c:	bf00      	nop
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	40021000 	.word	0x40021000
 8009288:	40010800 	.word	0x40010800
 800928c:	40011000 	.word	0x40011000
 8009290:	40010c00 	.word	0x40010c00

08009294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009298:	bf00      	nop
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr

080092a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80092a6:	4b15      	ldr	r3, [pc, #84]	; (80092fc <HAL_MspInit+0x5c>)
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	4a14      	ldr	r2, [pc, #80]	; (80092fc <HAL_MspInit+0x5c>)
 80092ac:	f043 0301 	orr.w	r3, r3, #1
 80092b0:	6193      	str	r3, [r2, #24]
 80092b2:	4b12      	ldr	r3, [pc, #72]	; (80092fc <HAL_MspInit+0x5c>)
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	60bb      	str	r3, [r7, #8]
 80092bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <HAL_MspInit+0x5c>)
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	4a0e      	ldr	r2, [pc, #56]	; (80092fc <HAL_MspInit+0x5c>)
 80092c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c8:	61d3      	str	r3, [r2, #28]
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <HAL_MspInit+0x5c>)
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d2:	607b      	str	r3, [r7, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80092d6:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <HAL_MspInit+0x60>)
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	4a04      	ldr	r2, [pc, #16]	; (8009300 <HAL_MspInit+0x60>)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092f2:	bf00      	nop
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr
 80092fc:	40021000 	.word	0x40021000
 8009300:	40010000 	.word	0x40010000

08009304 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800930c:	f107 0310 	add.w	r3, r7, #16
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	609a      	str	r2, [r3, #8]
 8009318:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1c      	ldr	r2, [pc, #112]	; (8009390 <HAL_CAN_MspInit+0x8c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d131      	bne.n	8009388 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009324:	4b1b      	ldr	r3, [pc, #108]	; (8009394 <HAL_CAN_MspInit+0x90>)
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	4a1a      	ldr	r2, [pc, #104]	; (8009394 <HAL_CAN_MspInit+0x90>)
 800932a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800932e:	61d3      	str	r3, [r2, #28]
 8009330:	4b18      	ldr	r3, [pc, #96]	; (8009394 <HAL_CAN_MspInit+0x90>)
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800933c:	4b15      	ldr	r3, [pc, #84]	; (8009394 <HAL_CAN_MspInit+0x90>)
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	4a14      	ldr	r2, [pc, #80]	; (8009394 <HAL_CAN_MspInit+0x90>)
 8009342:	f043 0304 	orr.w	r3, r3, #4
 8009346:	6193      	str	r3, [r2, #24]
 8009348:	4b12      	ldr	r3, [pc, #72]	; (8009394 <HAL_CAN_MspInit+0x90>)
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	60bb      	str	r3, [r7, #8]
 8009352:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009354:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800935a:	2300      	movs	r3, #0
 800935c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800935e:	2300      	movs	r3, #0
 8009360:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009362:	f107 0310 	add.w	r3, r7, #16
 8009366:	4619      	mov	r1, r3
 8009368:	480b      	ldr	r0, [pc, #44]	; (8009398 <HAL_CAN_MspInit+0x94>)
 800936a:	f000 fd61 	bl	8009e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800936e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009374:	2302      	movs	r3, #2
 8009376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009378:	2303      	movs	r3, #3
 800937a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800937c:	f107 0310 	add.w	r3, r7, #16
 8009380:	4619      	mov	r1, r3
 8009382:	4805      	ldr	r0, [pc, #20]	; (8009398 <HAL_CAN_MspInit+0x94>)
 8009384:	f000 fd54 	bl	8009e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8009388:	bf00      	nop
 800938a:	3720      	adds	r7, #32
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	40006400 	.word	0x40006400
 8009394:	40021000 	.word	0x40021000
 8009398:	40010800 	.word	0x40010800

0800939c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093a4:	f107 0310 	add.w	r3, r7, #16
 80093a8:	2200      	movs	r2, #0
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	605a      	str	r2, [r3, #4]
 80093ae:	609a      	str	r2, [r3, #8]
 80093b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a15      	ldr	r2, [pc, #84]	; (800940c <HAL_I2C_MspInit+0x70>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d123      	bne.n	8009404 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093bc:	4b14      	ldr	r3, [pc, #80]	; (8009410 <HAL_I2C_MspInit+0x74>)
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	4a13      	ldr	r2, [pc, #76]	; (8009410 <HAL_I2C_MspInit+0x74>)
 80093c2:	f043 0308 	orr.w	r3, r3, #8
 80093c6:	6193      	str	r3, [r2, #24]
 80093c8:	4b11      	ldr	r3, [pc, #68]	; (8009410 <HAL_I2C_MspInit+0x74>)
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80093d4:	23c0      	movs	r3, #192	; 0xc0
 80093d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80093d8:	2312      	movs	r3, #18
 80093da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80093dc:	2303      	movs	r3, #3
 80093de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093e0:	f107 0310 	add.w	r3, r7, #16
 80093e4:	4619      	mov	r1, r3
 80093e6:	480b      	ldr	r0, [pc, #44]	; (8009414 <HAL_I2C_MspInit+0x78>)
 80093e8:	f000 fd22 	bl	8009e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80093ec:	4b08      	ldr	r3, [pc, #32]	; (8009410 <HAL_I2C_MspInit+0x74>)
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	4a07      	ldr	r2, [pc, #28]	; (8009410 <HAL_I2C_MspInit+0x74>)
 80093f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093f6:	61d3      	str	r3, [r2, #28]
 80093f8:	4b05      	ldr	r3, [pc, #20]	; (8009410 <HAL_I2C_MspInit+0x74>)
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009400:	60bb      	str	r3, [r7, #8]
 8009402:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009404:	bf00      	nop
 8009406:	3720      	adds	r7, #32
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	40005400 	.word	0x40005400
 8009410:	40021000 	.word	0x40021000
 8009414:	40010c00 	.word	0x40010c00

08009418 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a0a      	ldr	r2, [pc, #40]	; (8009450 <HAL_I2C_MspDeInit+0x38>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d10d      	bne.n	8009446 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800942a:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <HAL_I2C_MspDeInit+0x3c>)
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	4a09      	ldr	r2, [pc, #36]	; (8009454 <HAL_I2C_MspDeInit+0x3c>)
 8009430:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009434:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009436:	2140      	movs	r1, #64	; 0x40
 8009438:	4807      	ldr	r0, [pc, #28]	; (8009458 <HAL_I2C_MspDeInit+0x40>)
 800943a:	f000 fe8d 	bl	800a158 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800943e:	2180      	movs	r1, #128	; 0x80
 8009440:	4805      	ldr	r0, [pc, #20]	; (8009458 <HAL_I2C_MspDeInit+0x40>)
 8009442:	f000 fe89 	bl	800a158 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	40005400 	.word	0x40005400
 8009454:	40021000 	.word	0x40021000
 8009458:	40010c00 	.word	0x40010c00

0800945c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a0d      	ldr	r2, [pc, #52]	; (80094a0 <HAL_TIM_Base_MspInit+0x44>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d113      	bne.n	8009496 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800946e:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <HAL_TIM_Base_MspInit+0x48>)
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	4a0c      	ldr	r2, [pc, #48]	; (80094a4 <HAL_TIM_Base_MspInit+0x48>)
 8009474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009478:	6193      	str	r3, [r2, #24]
 800947a:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <HAL_TIM_Base_MspInit+0x48>)
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009486:	2200      	movs	r2, #0
 8009488:	2100      	movs	r1, #0
 800948a:	2019      	movs	r0, #25
 800948c:	f000 fb57 	bl	8009b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009490:	2019      	movs	r0, #25
 8009492:	f000 fb70 	bl	8009b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8009496:	bf00      	nop
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	40012c00 	.word	0x40012c00
 80094a4:	40021000 	.word	0x40021000

080094a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094b0:	f107 0310 	add.w	r3, r7, #16
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	605a      	str	r2, [r3, #4]
 80094ba:	609a      	str	r2, [r3, #8]
 80094bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a20      	ldr	r2, [pc, #128]	; (8009544 <HAL_UART_MspInit+0x9c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d139      	bne.n	800953c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80094c8:	4b1f      	ldr	r3, [pc, #124]	; (8009548 <HAL_UART_MspInit+0xa0>)
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	4a1e      	ldr	r2, [pc, #120]	; (8009548 <HAL_UART_MspInit+0xa0>)
 80094ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094d2:	6193      	str	r3, [r2, #24]
 80094d4:	4b1c      	ldr	r3, [pc, #112]	; (8009548 <HAL_UART_MspInit+0xa0>)
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094e0:	4b19      	ldr	r3, [pc, #100]	; (8009548 <HAL_UART_MspInit+0xa0>)
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	4a18      	ldr	r2, [pc, #96]	; (8009548 <HAL_UART_MspInit+0xa0>)
 80094e6:	f043 0304 	orr.w	r3, r3, #4
 80094ea:	6193      	str	r3, [r2, #24]
 80094ec:	4b16      	ldr	r3, [pc, #88]	; (8009548 <HAL_UART_MspInit+0xa0>)
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	60bb      	str	r3, [r7, #8]
 80094f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80094f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094fe:	2302      	movs	r3, #2
 8009500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009502:	2303      	movs	r3, #3
 8009504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009506:	f107 0310 	add.w	r3, r7, #16
 800950a:	4619      	mov	r1, r3
 800950c:	480f      	ldr	r0, [pc, #60]	; (800954c <HAL_UART_MspInit+0xa4>)
 800950e:	f000 fc8f 	bl	8009e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009518:	2300      	movs	r3, #0
 800951a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800951c:	2300      	movs	r3, #0
 800951e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009520:	f107 0310 	add.w	r3, r7, #16
 8009524:	4619      	mov	r1, r3
 8009526:	4809      	ldr	r0, [pc, #36]	; (800954c <HAL_UART_MspInit+0xa4>)
 8009528:	f000 fc82 	bl	8009e30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	2025      	movs	r0, #37	; 0x25
 8009532:	f000 fb04 	bl	8009b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009536:	2025      	movs	r0, #37	; 0x25
 8009538:	f000 fb1d 	bl	8009b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800953c:	bf00      	nop
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	40013800 	.word	0x40013800
 8009548:	40021000 	.word	0x40021000
 800954c:	40010800 	.word	0x40010800

08009550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009554:	e7fe      	b.n	8009554 <NMI_Handler+0x4>

08009556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009556:	b480      	push	{r7}
 8009558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800955a:	e7fe      	b.n	800955a <HardFault_Handler+0x4>

0800955c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009560:	e7fe      	b.n	8009560 <MemManage_Handler+0x4>

08009562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009562:	b480      	push	{r7}
 8009564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009566:	e7fe      	b.n	8009566 <BusFault_Handler+0x4>

08009568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009568:	b480      	push	{r7}
 800956a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800956c:	e7fe      	b.n	800956c <UsageFault_Handler+0x4>

0800956e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800956e:	b480      	push	{r7}
 8009570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009572:	bf00      	nop
 8009574:	46bd      	mov	sp, r7
 8009576:	bc80      	pop	{r7}
 8009578:	4770      	bx	lr

0800957a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800957a:	b480      	push	{r7}
 800957c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800957e:	bf00      	nop
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr

08009586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009586:	b480      	push	{r7}
 8009588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800958a:	bf00      	nop
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr

08009592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009596:	f000 f8bf 	bl	8009718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800959a:	bf00      	nop
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095a4:	4802      	ldr	r0, [pc, #8]	; (80095b0 <TIM1_UP_IRQHandler+0x10>)
 80095a6:	f002 fdcd 	bl	800c144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	2000112c 	.word	0x2000112c

080095b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80095b8:	4802      	ldr	r0, [pc, #8]	; (80095c4 <USART1_IRQHandler+0x10>)
 80095ba:	f003 f9ef 	bl	800c99c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80095be:	bf00      	nop
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20001174 	.word	0x20001174

080095c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80095d0:	4a14      	ldr	r2, [pc, #80]	; (8009624 <_sbrk+0x5c>)
 80095d2:	4b15      	ldr	r3, [pc, #84]	; (8009628 <_sbrk+0x60>)
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80095dc:	4b13      	ldr	r3, [pc, #76]	; (800962c <_sbrk+0x64>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d102      	bne.n	80095ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80095e4:	4b11      	ldr	r3, [pc, #68]	; (800962c <_sbrk+0x64>)
 80095e6:	4a12      	ldr	r2, [pc, #72]	; (8009630 <_sbrk+0x68>)
 80095e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80095ea:	4b10      	ldr	r3, [pc, #64]	; (800962c <_sbrk+0x64>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d207      	bcs.n	8009608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80095f8:	f004 f86a 	bl	800d6d0 <__errno>
 80095fc:	4603      	mov	r3, r0
 80095fe:	220c      	movs	r2, #12
 8009600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009606:	e009      	b.n	800961c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009608:	4b08      	ldr	r3, [pc, #32]	; (800962c <_sbrk+0x64>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800960e:	4b07      	ldr	r3, [pc, #28]	; (800962c <_sbrk+0x64>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4413      	add	r3, r2
 8009616:	4a05      	ldr	r2, [pc, #20]	; (800962c <_sbrk+0x64>)
 8009618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800961a:	68fb      	ldr	r3, [r7, #12]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	2000c000 	.word	0x2000c000
 8009628:	00000400 	.word	0x00000400
 800962c:	200011bc 	.word	0x200011bc
 8009630:	20001310 	.word	0x20001310

08009634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009638:	bf00      	nop
 800963a:	46bd      	mov	sp, r7
 800963c:	bc80      	pop	{r7}
 800963e:	4770      	bx	lr

08009640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009640:	480c      	ldr	r0, [pc, #48]	; (8009674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009642:	490d      	ldr	r1, [pc, #52]	; (8009678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009644:	4a0d      	ldr	r2, [pc, #52]	; (800967c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009648:	e002      	b.n	8009650 <LoopCopyDataInit>

0800964a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800964a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800964c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800964e:	3304      	adds	r3, #4

08009650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009654:	d3f9      	bcc.n	800964a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009656:	4a0a      	ldr	r2, [pc, #40]	; (8009680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009658:	4c0a      	ldr	r4, [pc, #40]	; (8009684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800965a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800965c:	e001      	b.n	8009662 <LoopFillZerobss>

0800965e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800965e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009660:	3204      	adds	r2, #4

08009662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009664:	d3fb      	bcc.n	800965e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009666:	f7ff ffe5 	bl	8009634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800966a:	f004 f837 	bl	800d6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800966e:	f7ff fb9d 	bl	8008dac <main>
  bx lr
 8009672:	4770      	bx	lr
  ldr r0, =_sdata
 8009674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009678:	200009fc 	.word	0x200009fc
  ldr r2, =_sidata
 800967c:	0800ee80 	.word	0x0800ee80
  ldr r2, =_sbss
 8009680:	200009fc 	.word	0x200009fc
  ldr r4, =_ebss
 8009684:	2000130c 	.word	0x2000130c

08009688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009688:	e7fe      	b.n	8009688 <ADC1_2_IRQHandler>
	...

0800968c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009690:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <HAL_Init+0x28>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a07      	ldr	r2, [pc, #28]	; (80096b4 <HAL_Init+0x28>)
 8009696:	f043 0310 	orr.w	r3, r3, #16
 800969a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800969c:	2003      	movs	r0, #3
 800969e:	f000 fa43 	bl	8009b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80096a2:	200f      	movs	r0, #15
 80096a4:	f000 f808 	bl	80096b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80096a8:	f7ff fdfa 	bl	80092a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	40022000 	.word	0x40022000

080096b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80096c0:	4b12      	ldr	r3, [pc, #72]	; (800970c <HAL_InitTick+0x54>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	4b12      	ldr	r3, [pc, #72]	; (8009710 <HAL_InitTick+0x58>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	4619      	mov	r1, r3
 80096ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fa5b 	bl	8009b92 <HAL_SYSTICK_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e00e      	b.n	8009704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b0f      	cmp	r3, #15
 80096ea:	d80a      	bhi.n	8009702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096ec:	2200      	movs	r2, #0
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f4:	f000 fa23 	bl	8009b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80096f8:	4a06      	ldr	r2, [pc, #24]	; (8009714 <HAL_InitTick+0x5c>)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	e000      	b.n	8009704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	200009a0 	.word	0x200009a0
 8009710:	200009a8 	.word	0x200009a8
 8009714:	200009a4 	.word	0x200009a4

08009718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <HAL_IncTick+0x1c>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	4b05      	ldr	r3, [pc, #20]	; (8009738 <HAL_IncTick+0x20>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4413      	add	r3, r2
 8009728:	4a03      	ldr	r2, [pc, #12]	; (8009738 <HAL_IncTick+0x20>)
 800972a:	6013      	str	r3, [r2, #0]
}
 800972c:	bf00      	nop
 800972e:	46bd      	mov	sp, r7
 8009730:	bc80      	pop	{r7}
 8009732:	4770      	bx	lr
 8009734:	200009a8 	.word	0x200009a8
 8009738:	200011c0 	.word	0x200011c0

0800973c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800973c:	b480      	push	{r7}
 800973e:	af00      	add	r7, sp, #0
  return uwTick;
 8009740:	4b02      	ldr	r3, [pc, #8]	; (800974c <HAL_GetTick+0x10>)
 8009742:	681b      	ldr	r3, [r3, #0]
}
 8009744:	4618      	mov	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr
 800974c:	200011c0 	.word	0x200011c0

08009750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009758:	f7ff fff0 	bl	800973c <HAL_GetTick>
 800975c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009768:	d005      	beq.n	8009776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <HAL_Delay+0x44>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009776:	bf00      	nop
 8009778:	f7ff ffe0 	bl	800973c <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	429a      	cmp	r2, r3
 8009786:	d8f7      	bhi.n	8009778 <HAL_Delay+0x28>
  {
  }
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200009a8 	.word	0x200009a8

08009798 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e0ed      	b.n	8009986 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff fda4 	bl	8009304 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0201 	orr.w	r2, r2, #1
 80097ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097cc:	f7ff ffb6 	bl	800973c <HAL_GetTick>
 80097d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097d2:	e012      	b.n	80097fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80097d4:	f7ff ffb2 	bl	800973c <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	2b0a      	cmp	r3, #10
 80097e0:	d90b      	bls.n	80097fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2205      	movs	r2, #5
 80097f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e0c5      	b.n	8009986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0e5      	beq.n	80097d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f022 0202 	bic.w	r2, r2, #2
 8009816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009818:	f7ff ff90 	bl	800973c <HAL_GetTick>
 800981c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800981e:	e012      	b.n	8009846 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009820:	f7ff ff8c 	bl	800973c <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	2b0a      	cmp	r3, #10
 800982c:	d90b      	bls.n	8009846 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2205      	movs	r2, #5
 800983e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e09f      	b.n	8009986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e5      	bne.n	8009820 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7e1b      	ldrb	r3, [r3, #24]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d108      	bne.n	800986e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e007      	b.n	800987e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800987c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7e5b      	ldrb	r3, [r3, #25]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d108      	bne.n	8009898 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	e007      	b.n	80098a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7e9b      	ldrb	r3, [r3, #26]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d108      	bne.n	80098c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 0220 	orr.w	r2, r2, #32
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	e007      	b.n	80098d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0220 	bic.w	r2, r2, #32
 80098d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	7edb      	ldrb	r3, [r3, #27]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d108      	bne.n	80098ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f022 0210 	bic.w	r2, r2, #16
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	e007      	b.n	80098fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0210 	orr.w	r2, r2, #16
 80098fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7f1b      	ldrb	r3, [r3, #28]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d108      	bne.n	8009916 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0208 	orr.w	r2, r2, #8
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	e007      	b.n	8009926 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f022 0208 	bic.w	r2, r2, #8
 8009924:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	7f5b      	ldrb	r3, [r3, #29]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d108      	bne.n	8009940 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f042 0204 	orr.w	r2, r2, #4
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e007      	b.n	8009950 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 0204 	bic.w	r2, r2, #4
 800994e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	431a      	orrs	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	ea42 0103 	orr.w	r1, r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	1e5a      	subs	r2, r3, #1
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <__NVIC_SetPriorityGrouping>:
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099a0:	4b0c      	ldr	r3, [pc, #48]	; (80099d4 <__NVIC_SetPriorityGrouping+0x44>)
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099ac:	4013      	ands	r3, r2
 80099ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80099b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099c2:	4a04      	ldr	r2, [pc, #16]	; (80099d4 <__NVIC_SetPriorityGrouping+0x44>)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	60d3      	str	r3, [r2, #12]
}
 80099c8:	bf00      	nop
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bc80      	pop	{r7}
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	e000ed00 	.word	0xe000ed00

080099d8 <__NVIC_GetPriorityGrouping>:
{
 80099d8:	b480      	push	{r7}
 80099da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099dc:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <__NVIC_GetPriorityGrouping+0x18>)
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	0a1b      	lsrs	r3, r3, #8
 80099e2:	f003 0307 	and.w	r3, r3, #7
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	e000ed00 	.word	0xe000ed00

080099f4 <__NVIC_EnableIRQ>:
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	db0b      	blt.n	8009a1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	f003 021f 	and.w	r2, r3, #31
 8009a0c:	4906      	ldr	r1, [pc, #24]	; (8009a28 <__NVIC_EnableIRQ+0x34>)
 8009a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a12:	095b      	lsrs	r3, r3, #5
 8009a14:	2001      	movs	r0, #1
 8009a16:	fa00 f202 	lsl.w	r2, r0, r2
 8009a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009a1e:	bf00      	nop
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bc80      	pop	{r7}
 8009a26:	4770      	bx	lr
 8009a28:	e000e100 	.word	0xe000e100

08009a2c <__NVIC_SetPriority>:
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	db0a      	blt.n	8009a56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	490c      	ldr	r1, [pc, #48]	; (8009a78 <__NVIC_SetPriority+0x4c>)
 8009a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a4a:	0112      	lsls	r2, r2, #4
 8009a4c:	b2d2      	uxtb	r2, r2
 8009a4e:	440b      	add	r3, r1
 8009a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a54:	e00a      	b.n	8009a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	4908      	ldr	r1, [pc, #32]	; (8009a7c <__NVIC_SetPriority+0x50>)
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	f003 030f 	and.w	r3, r3, #15
 8009a62:	3b04      	subs	r3, #4
 8009a64:	0112      	lsls	r2, r2, #4
 8009a66:	b2d2      	uxtb	r2, r2
 8009a68:	440b      	add	r3, r1
 8009a6a:	761a      	strb	r2, [r3, #24]
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bc80      	pop	{r7}
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	e000e100 	.word	0xe000e100
 8009a7c:	e000ed00 	.word	0xe000ed00

08009a80 <NVIC_EncodePriority>:
{
 8009a80:	b480      	push	{r7}
 8009a82:	b089      	sub	sp, #36	; 0x24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f1c3 0307 	rsb	r3, r3, #7
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	bf28      	it	cs
 8009a9e:	2304      	movcs	r3, #4
 8009aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	2b06      	cmp	r3, #6
 8009aa8:	d902      	bls.n	8009ab0 <NVIC_EncodePriority+0x30>
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	3b03      	subs	r3, #3
 8009aae:	e000      	b.n	8009ab2 <NVIC_EncodePriority+0x32>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	43da      	mvns	r2, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	401a      	ands	r2, r3
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad2:	43d9      	mvns	r1, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ad8:	4313      	orrs	r3, r2
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3724      	adds	r7, #36	; 0x24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bc80      	pop	{r7}
 8009ae2:	4770      	bx	lr

08009ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009af4:	d301      	bcc.n	8009afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009af6:	2301      	movs	r3, #1
 8009af8:	e00f      	b.n	8009b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009afa:	4a0a      	ldr	r2, [pc, #40]	; (8009b24 <SysTick_Config+0x40>)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b02:	210f      	movs	r1, #15
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b08:	f7ff ff90 	bl	8009a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b0c:	4b05      	ldr	r3, [pc, #20]	; (8009b24 <SysTick_Config+0x40>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b12:	4b04      	ldr	r3, [pc, #16]	; (8009b24 <SysTick_Config+0x40>)
 8009b14:	2207      	movs	r2, #7
 8009b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	e000e010 	.word	0xe000e010

08009b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7ff ff2d 	bl	8009990 <__NVIC_SetPriorityGrouping>
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b086      	sub	sp, #24
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	4603      	mov	r3, r0
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b50:	f7ff ff42 	bl	80099d8 <__NVIC_GetPriorityGrouping>
 8009b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	68b9      	ldr	r1, [r7, #8]
 8009b5a:	6978      	ldr	r0, [r7, #20]
 8009b5c:	f7ff ff90 	bl	8009a80 <NVIC_EncodePriority>
 8009b60:	4602      	mov	r2, r0
 8009b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b66:	4611      	mov	r1, r2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7ff ff5f 	bl	8009a2c <__NVIC_SetPriority>
}
 8009b6e:	bf00      	nop
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff ff35 	bl	80099f4 <__NVIC_EnableIRQ>
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff ffa2 	bl	8009ae4 <SysTick_Config>
 8009ba0:	4603      	mov	r3, r0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b085      	sub	sp, #20
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d008      	beq.n	8009bd4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2204      	movs	r2, #4
 8009bc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e020      	b.n	8009c16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 020e 	bic.w	r2, r2, #14
 8009be2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0201 	bic.w	r2, r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8009c02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bc80      	pop	{r7}
 8009c1e:	4770      	bx	lr

08009c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d005      	beq.n	8009c44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2204      	movs	r2, #4
 8009c3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	73fb      	strb	r3, [r7, #15]
 8009c42:	e0d6      	b.n	8009df2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 020e 	bic.w	r2, r2, #14
 8009c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 0201 	bic.w	r2, r2, #1
 8009c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4b64      	ldr	r3, [pc, #400]	; (8009dfc <HAL_DMA_Abort_IT+0x1dc>)
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d958      	bls.n	8009d22 <HAL_DMA_Abort_IT+0x102>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a62      	ldr	r2, [pc, #392]	; (8009e00 <HAL_DMA_Abort_IT+0x1e0>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d04f      	beq.n	8009d1a <HAL_DMA_Abort_IT+0xfa>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a61      	ldr	r2, [pc, #388]	; (8009e04 <HAL_DMA_Abort_IT+0x1e4>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d048      	beq.n	8009d16 <HAL_DMA_Abort_IT+0xf6>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a5f      	ldr	r2, [pc, #380]	; (8009e08 <HAL_DMA_Abort_IT+0x1e8>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d040      	beq.n	8009d10 <HAL_DMA_Abort_IT+0xf0>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a5e      	ldr	r2, [pc, #376]	; (8009e0c <HAL_DMA_Abort_IT+0x1ec>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d038      	beq.n	8009d0a <HAL_DMA_Abort_IT+0xea>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a5c      	ldr	r2, [pc, #368]	; (8009e10 <HAL_DMA_Abort_IT+0x1f0>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d030      	beq.n	8009d04 <HAL_DMA_Abort_IT+0xe4>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a5b      	ldr	r2, [pc, #364]	; (8009e14 <HAL_DMA_Abort_IT+0x1f4>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d028      	beq.n	8009cfe <HAL_DMA_Abort_IT+0xde>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a52      	ldr	r2, [pc, #328]	; (8009dfc <HAL_DMA_Abort_IT+0x1dc>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d020      	beq.n	8009cf8 <HAL_DMA_Abort_IT+0xd8>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a57      	ldr	r2, [pc, #348]	; (8009e18 <HAL_DMA_Abort_IT+0x1f8>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d019      	beq.n	8009cf4 <HAL_DMA_Abort_IT+0xd4>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a55      	ldr	r2, [pc, #340]	; (8009e1c <HAL_DMA_Abort_IT+0x1fc>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d012      	beq.n	8009cf0 <HAL_DMA_Abort_IT+0xd0>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a54      	ldr	r2, [pc, #336]	; (8009e20 <HAL_DMA_Abort_IT+0x200>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d00a      	beq.n	8009cea <HAL_DMA_Abort_IT+0xca>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a52      	ldr	r2, [pc, #328]	; (8009e24 <HAL_DMA_Abort_IT+0x204>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d102      	bne.n	8009ce4 <HAL_DMA_Abort_IT+0xc4>
 8009cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce2:	e01b      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ce8:	e018      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cee:	e015      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009cf0:	2310      	movs	r3, #16
 8009cf2:	e013      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e011      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cfc:	e00e      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009cfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d02:	e00b      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d08:	e008      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d0e:	e005      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d14:	e002      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009d16:	2310      	movs	r3, #16
 8009d18:	e000      	b.n	8009d1c <HAL_DMA_Abort_IT+0xfc>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4a42      	ldr	r2, [pc, #264]	; (8009e28 <HAL_DMA_Abort_IT+0x208>)
 8009d1e:	6053      	str	r3, [r2, #4]
 8009d20:	e057      	b.n	8009dd2 <HAL_DMA_Abort_IT+0x1b2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a36      	ldr	r2, [pc, #216]	; (8009e00 <HAL_DMA_Abort_IT+0x1e0>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d04f      	beq.n	8009dcc <HAL_DMA_Abort_IT+0x1ac>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a34      	ldr	r2, [pc, #208]	; (8009e04 <HAL_DMA_Abort_IT+0x1e4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d048      	beq.n	8009dc8 <HAL_DMA_Abort_IT+0x1a8>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a33      	ldr	r2, [pc, #204]	; (8009e08 <HAL_DMA_Abort_IT+0x1e8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d040      	beq.n	8009dc2 <HAL_DMA_Abort_IT+0x1a2>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a31      	ldr	r2, [pc, #196]	; (8009e0c <HAL_DMA_Abort_IT+0x1ec>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d038      	beq.n	8009dbc <HAL_DMA_Abort_IT+0x19c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a30      	ldr	r2, [pc, #192]	; (8009e10 <HAL_DMA_Abort_IT+0x1f0>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d030      	beq.n	8009db6 <HAL_DMA_Abort_IT+0x196>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a2e      	ldr	r2, [pc, #184]	; (8009e14 <HAL_DMA_Abort_IT+0x1f4>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d028      	beq.n	8009db0 <HAL_DMA_Abort_IT+0x190>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a26      	ldr	r2, [pc, #152]	; (8009dfc <HAL_DMA_Abort_IT+0x1dc>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d020      	beq.n	8009daa <HAL_DMA_Abort_IT+0x18a>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a2a      	ldr	r2, [pc, #168]	; (8009e18 <HAL_DMA_Abort_IT+0x1f8>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d019      	beq.n	8009da6 <HAL_DMA_Abort_IT+0x186>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a29      	ldr	r2, [pc, #164]	; (8009e1c <HAL_DMA_Abort_IT+0x1fc>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d012      	beq.n	8009da2 <HAL_DMA_Abort_IT+0x182>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a27      	ldr	r2, [pc, #156]	; (8009e20 <HAL_DMA_Abort_IT+0x200>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00a      	beq.n	8009d9c <HAL_DMA_Abort_IT+0x17c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a26      	ldr	r2, [pc, #152]	; (8009e24 <HAL_DMA_Abort_IT+0x204>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d102      	bne.n	8009d96 <HAL_DMA_Abort_IT+0x176>
 8009d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d94:	e01b      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d9a:	e018      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009da0:	e015      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009da2:	2310      	movs	r3, #16
 8009da4:	e013      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e011      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009dae:	e00e      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009db0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009db4:	e00b      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dba:	e008      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dc0:	e005      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dc6:	e002      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	e000      	b.n	8009dce <HAL_DMA_Abort_IT+0x1ae>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	4a17      	ldr	r2, [pc, #92]	; (8009e2c <HAL_DMA_Abort_IT+0x20c>)
 8009dd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	4798      	blx	r3
    } 
  }
  return status;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	40020080 	.word	0x40020080
 8009e00:	40020008 	.word	0x40020008
 8009e04:	4002001c 	.word	0x4002001c
 8009e08:	40020030 	.word	0x40020030
 8009e0c:	40020044 	.word	0x40020044
 8009e10:	40020058 	.word	0x40020058
 8009e14:	4002006c 	.word	0x4002006c
 8009e18:	40020408 	.word	0x40020408
 8009e1c:	4002041c 	.word	0x4002041c
 8009e20:	40020430 	.word	0x40020430
 8009e24:	40020444 	.word	0x40020444
 8009e28:	40020400 	.word	0x40020400
 8009e2c:	40020000 	.word	0x40020000

08009e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b08b      	sub	sp, #44	; 0x2c
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e42:	e179      	b.n	800a138 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009e44:	2201      	movs	r2, #1
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	4013      	ands	r3, r2
 8009e56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	f040 8168 	bne.w	800a132 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	4a96      	ldr	r2, [pc, #600]	; (800a0c0 <HAL_GPIO_Init+0x290>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d05e      	beq.n	8009f2a <HAL_GPIO_Init+0xfa>
 8009e6c:	4a94      	ldr	r2, [pc, #592]	; (800a0c0 <HAL_GPIO_Init+0x290>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d875      	bhi.n	8009f5e <HAL_GPIO_Init+0x12e>
 8009e72:	4a94      	ldr	r2, [pc, #592]	; (800a0c4 <HAL_GPIO_Init+0x294>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d058      	beq.n	8009f2a <HAL_GPIO_Init+0xfa>
 8009e78:	4a92      	ldr	r2, [pc, #584]	; (800a0c4 <HAL_GPIO_Init+0x294>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d86f      	bhi.n	8009f5e <HAL_GPIO_Init+0x12e>
 8009e7e:	4a92      	ldr	r2, [pc, #584]	; (800a0c8 <HAL_GPIO_Init+0x298>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d052      	beq.n	8009f2a <HAL_GPIO_Init+0xfa>
 8009e84:	4a90      	ldr	r2, [pc, #576]	; (800a0c8 <HAL_GPIO_Init+0x298>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d869      	bhi.n	8009f5e <HAL_GPIO_Init+0x12e>
 8009e8a:	4a90      	ldr	r2, [pc, #576]	; (800a0cc <HAL_GPIO_Init+0x29c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d04c      	beq.n	8009f2a <HAL_GPIO_Init+0xfa>
 8009e90:	4a8e      	ldr	r2, [pc, #568]	; (800a0cc <HAL_GPIO_Init+0x29c>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d863      	bhi.n	8009f5e <HAL_GPIO_Init+0x12e>
 8009e96:	4a8e      	ldr	r2, [pc, #568]	; (800a0d0 <HAL_GPIO_Init+0x2a0>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d046      	beq.n	8009f2a <HAL_GPIO_Init+0xfa>
 8009e9c:	4a8c      	ldr	r2, [pc, #560]	; (800a0d0 <HAL_GPIO_Init+0x2a0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d85d      	bhi.n	8009f5e <HAL_GPIO_Init+0x12e>
 8009ea2:	2b12      	cmp	r3, #18
 8009ea4:	d82a      	bhi.n	8009efc <HAL_GPIO_Init+0xcc>
 8009ea6:	2b12      	cmp	r3, #18
 8009ea8:	d859      	bhi.n	8009f5e <HAL_GPIO_Init+0x12e>
 8009eaa:	a201      	add	r2, pc, #4	; (adr r2, 8009eb0 <HAL_GPIO_Init+0x80>)
 8009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb0:	08009f2b 	.word	0x08009f2b
 8009eb4:	08009f05 	.word	0x08009f05
 8009eb8:	08009f17 	.word	0x08009f17
 8009ebc:	08009f59 	.word	0x08009f59
 8009ec0:	08009f5f 	.word	0x08009f5f
 8009ec4:	08009f5f 	.word	0x08009f5f
 8009ec8:	08009f5f 	.word	0x08009f5f
 8009ecc:	08009f5f 	.word	0x08009f5f
 8009ed0:	08009f5f 	.word	0x08009f5f
 8009ed4:	08009f5f 	.word	0x08009f5f
 8009ed8:	08009f5f 	.word	0x08009f5f
 8009edc:	08009f5f 	.word	0x08009f5f
 8009ee0:	08009f5f 	.word	0x08009f5f
 8009ee4:	08009f5f 	.word	0x08009f5f
 8009ee8:	08009f5f 	.word	0x08009f5f
 8009eec:	08009f5f 	.word	0x08009f5f
 8009ef0:	08009f5f 	.word	0x08009f5f
 8009ef4:	08009f0d 	.word	0x08009f0d
 8009ef8:	08009f21 	.word	0x08009f21
 8009efc:	4a75      	ldr	r2, [pc, #468]	; (800a0d4 <HAL_GPIO_Init+0x2a4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d013      	beq.n	8009f2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009f02:	e02c      	b.n	8009f5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	623b      	str	r3, [r7, #32]
          break;
 8009f0a:	e029      	b.n	8009f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	3304      	adds	r3, #4
 8009f12:	623b      	str	r3, [r7, #32]
          break;
 8009f14:	e024      	b.n	8009f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	623b      	str	r3, [r7, #32]
          break;
 8009f1e:	e01f      	b.n	8009f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	330c      	adds	r3, #12
 8009f26:	623b      	str	r3, [r7, #32]
          break;
 8009f28:	e01a      	b.n	8009f60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d102      	bne.n	8009f38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009f32:	2304      	movs	r3, #4
 8009f34:	623b      	str	r3, [r7, #32]
          break;
 8009f36:	e013      	b.n	8009f60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d105      	bne.n	8009f4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009f40:	2308      	movs	r3, #8
 8009f42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	611a      	str	r2, [r3, #16]
          break;
 8009f4a:	e009      	b.n	8009f60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009f4c:	2308      	movs	r3, #8
 8009f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	69fa      	ldr	r2, [r7, #28]
 8009f54:	615a      	str	r2, [r3, #20]
          break;
 8009f56:	e003      	b.n	8009f60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	623b      	str	r3, [r7, #32]
          break;
 8009f5c:	e000      	b.n	8009f60 <HAL_GPIO_Init+0x130>
          break;
 8009f5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	2bff      	cmp	r3, #255	; 0xff
 8009f64:	d801      	bhi.n	8009f6a <HAL_GPIO_Init+0x13a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	e001      	b.n	8009f6e <HAL_GPIO_Init+0x13e>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2bff      	cmp	r3, #255	; 0xff
 8009f74:	d802      	bhi.n	8009f7c <HAL_GPIO_Init+0x14c>
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	e002      	b.n	8009f82 <HAL_GPIO_Init+0x152>
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	3b08      	subs	r3, #8
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	210f      	movs	r1, #15
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f90:	43db      	mvns	r3, r3
 8009f92:	401a      	ands	r2, r3
 8009f94:	6a39      	ldr	r1, [r7, #32]
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	fa01 f303 	lsl.w	r3, r1, r3
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 80c1 	beq.w	800a132 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009fb0:	4b49      	ldr	r3, [pc, #292]	; (800a0d8 <HAL_GPIO_Init+0x2a8>)
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	4a48      	ldr	r2, [pc, #288]	; (800a0d8 <HAL_GPIO_Init+0x2a8>)
 8009fb6:	f043 0301 	orr.w	r3, r3, #1
 8009fba:	6193      	str	r3, [r2, #24]
 8009fbc:	4b46      	ldr	r3, [pc, #280]	; (800a0d8 <HAL_GPIO_Init+0x2a8>)
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	60bb      	str	r3, [r7, #8]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009fc8:	4a44      	ldr	r2, [pc, #272]	; (800a0dc <HAL_GPIO_Init+0x2ac>)
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	089b      	lsrs	r3, r3, #2
 8009fce:	3302      	adds	r3, #2
 8009fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	220f      	movs	r2, #15
 8009fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe4:	43db      	mvns	r3, r3
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4013      	ands	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a3c      	ldr	r2, [pc, #240]	; (800a0e0 <HAL_GPIO_Init+0x2b0>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d01f      	beq.n	800a034 <HAL_GPIO_Init+0x204>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a3b      	ldr	r2, [pc, #236]	; (800a0e4 <HAL_GPIO_Init+0x2b4>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d019      	beq.n	800a030 <HAL_GPIO_Init+0x200>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a3a      	ldr	r2, [pc, #232]	; (800a0e8 <HAL_GPIO_Init+0x2b8>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d013      	beq.n	800a02c <HAL_GPIO_Init+0x1fc>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a39      	ldr	r2, [pc, #228]	; (800a0ec <HAL_GPIO_Init+0x2bc>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d00d      	beq.n	800a028 <HAL_GPIO_Init+0x1f8>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a38      	ldr	r2, [pc, #224]	; (800a0f0 <HAL_GPIO_Init+0x2c0>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d007      	beq.n	800a024 <HAL_GPIO_Init+0x1f4>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a37      	ldr	r2, [pc, #220]	; (800a0f4 <HAL_GPIO_Init+0x2c4>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d101      	bne.n	800a020 <HAL_GPIO_Init+0x1f0>
 800a01c:	2305      	movs	r3, #5
 800a01e:	e00a      	b.n	800a036 <HAL_GPIO_Init+0x206>
 800a020:	2306      	movs	r3, #6
 800a022:	e008      	b.n	800a036 <HAL_GPIO_Init+0x206>
 800a024:	2304      	movs	r3, #4
 800a026:	e006      	b.n	800a036 <HAL_GPIO_Init+0x206>
 800a028:	2303      	movs	r3, #3
 800a02a:	e004      	b.n	800a036 <HAL_GPIO_Init+0x206>
 800a02c:	2302      	movs	r3, #2
 800a02e:	e002      	b.n	800a036 <HAL_GPIO_Init+0x206>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <HAL_GPIO_Init+0x206>
 800a034:	2300      	movs	r3, #0
 800a036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a038:	f002 0203 	and.w	r2, r2, #3
 800a03c:	0092      	lsls	r2, r2, #2
 800a03e:	4093      	lsls	r3, r2
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a046:	4925      	ldr	r1, [pc, #148]	; (800a0dc <HAL_GPIO_Init+0x2ac>)
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	089b      	lsrs	r3, r3, #2
 800a04c:	3302      	adds	r3, #2
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d006      	beq.n	800a06e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a060:	4b25      	ldr	r3, [pc, #148]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a062:	689a      	ldr	r2, [r3, #8]
 800a064:	4924      	ldr	r1, [pc, #144]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	4313      	orrs	r3, r2
 800a06a:	608b      	str	r3, [r1, #8]
 800a06c:	e006      	b.n	800a07c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a06e:	4b22      	ldr	r3, [pc, #136]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	43db      	mvns	r3, r3
 800a076:	4920      	ldr	r1, [pc, #128]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a078:	4013      	ands	r3, r2
 800a07a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d006      	beq.n	800a096 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a088:	4b1b      	ldr	r3, [pc, #108]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	491a      	ldr	r1, [pc, #104]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	4313      	orrs	r3, r2
 800a092:	60cb      	str	r3, [r1, #12]
 800a094:	e006      	b.n	800a0a4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a096:	4b18      	ldr	r3, [pc, #96]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a098:	68da      	ldr	r2, [r3, #12]
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	43db      	mvns	r3, r3
 800a09e:	4916      	ldr	r1, [pc, #88]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d025      	beq.n	800a0fc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a0b0:	4b11      	ldr	r3, [pc, #68]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	4910      	ldr	r1, [pc, #64]	; (800a0f8 <HAL_GPIO_Init+0x2c8>)
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	604b      	str	r3, [r1, #4]
 800a0bc:	e025      	b.n	800a10a <HAL_GPIO_Init+0x2da>
 800a0be:	bf00      	nop
 800a0c0:	10320000 	.word	0x10320000
 800a0c4:	10310000 	.word	0x10310000
 800a0c8:	10220000 	.word	0x10220000
 800a0cc:	10210000 	.word	0x10210000
 800a0d0:	10120000 	.word	0x10120000
 800a0d4:	10110000 	.word	0x10110000
 800a0d8:	40021000 	.word	0x40021000
 800a0dc:	40010000 	.word	0x40010000
 800a0e0:	40010800 	.word	0x40010800
 800a0e4:	40010c00 	.word	0x40010c00
 800a0e8:	40011000 	.word	0x40011000
 800a0ec:	40011400 	.word	0x40011400
 800a0f0:	40011800 	.word	0x40011800
 800a0f4:	40011c00 	.word	0x40011c00
 800a0f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a0fc:	4b15      	ldr	r3, [pc, #84]	; (800a154 <HAL_GPIO_Init+0x324>)
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	43db      	mvns	r3, r3
 800a104:	4913      	ldr	r1, [pc, #76]	; (800a154 <HAL_GPIO_Init+0x324>)
 800a106:	4013      	ands	r3, r2
 800a108:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d006      	beq.n	800a124 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a116:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <HAL_GPIO_Init+0x324>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	490e      	ldr	r1, [pc, #56]	; (800a154 <HAL_GPIO_Init+0x324>)
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	4313      	orrs	r3, r2
 800a120:	600b      	str	r3, [r1, #0]
 800a122:	e006      	b.n	800a132 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a124:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <HAL_GPIO_Init+0x324>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	43db      	mvns	r3, r3
 800a12c:	4909      	ldr	r1, [pc, #36]	; (800a154 <HAL_GPIO_Init+0x324>)
 800a12e:	4013      	ands	r3, r2
 800a130:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	3301      	adds	r3, #1
 800a136:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	fa22 f303 	lsr.w	r3, r2, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	f47f ae7e 	bne.w	8009e44 <HAL_GPIO_Init+0x14>
  }
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	372c      	adds	r7, #44	; 0x2c
 800a14e:	46bd      	mov	sp, r7
 800a150:	bc80      	pop	{r7}
 800a152:	4770      	bx	lr
 800a154:	40010400 	.word	0x40010400

0800a158 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a158:	b480      	push	{r7}
 800a15a:	b089      	sub	sp, #36	; 0x24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a162:	2300      	movs	r3, #0
 800a164:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a166:	e0a6      	b.n	800a2b6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a168:	2201      	movs	r2, #1
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	fa02 f303 	lsl.w	r3, r2, r3
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	4013      	ands	r3, r2
 800a174:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 8099 	beq.w	800a2b0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a17e:	4a54      	ldr	r2, [pc, #336]	; (800a2d0 <HAL_GPIO_DeInit+0x178>)
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	089b      	lsrs	r3, r3, #2
 800a184:	3302      	adds	r3, #2
 800a186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a18a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	220f      	movs	r2, #15
 800a196:	fa02 f303 	lsl.w	r3, r2, r3
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	4013      	ands	r3, r2
 800a19e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a4c      	ldr	r2, [pc, #304]	; (800a2d4 <HAL_GPIO_DeInit+0x17c>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d01f      	beq.n	800a1e8 <HAL_GPIO_DeInit+0x90>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a4b      	ldr	r2, [pc, #300]	; (800a2d8 <HAL_GPIO_DeInit+0x180>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d019      	beq.n	800a1e4 <HAL_GPIO_DeInit+0x8c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a4a      	ldr	r2, [pc, #296]	; (800a2dc <HAL_GPIO_DeInit+0x184>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d013      	beq.n	800a1e0 <HAL_GPIO_DeInit+0x88>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a49      	ldr	r2, [pc, #292]	; (800a2e0 <HAL_GPIO_DeInit+0x188>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d00d      	beq.n	800a1dc <HAL_GPIO_DeInit+0x84>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a48      	ldr	r2, [pc, #288]	; (800a2e4 <HAL_GPIO_DeInit+0x18c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d007      	beq.n	800a1d8 <HAL_GPIO_DeInit+0x80>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a47      	ldr	r2, [pc, #284]	; (800a2e8 <HAL_GPIO_DeInit+0x190>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d101      	bne.n	800a1d4 <HAL_GPIO_DeInit+0x7c>
 800a1d0:	2305      	movs	r3, #5
 800a1d2:	e00a      	b.n	800a1ea <HAL_GPIO_DeInit+0x92>
 800a1d4:	2306      	movs	r3, #6
 800a1d6:	e008      	b.n	800a1ea <HAL_GPIO_DeInit+0x92>
 800a1d8:	2304      	movs	r3, #4
 800a1da:	e006      	b.n	800a1ea <HAL_GPIO_DeInit+0x92>
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e004      	b.n	800a1ea <HAL_GPIO_DeInit+0x92>
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e002      	b.n	800a1ea <HAL_GPIO_DeInit+0x92>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e000      	b.n	800a1ea <HAL_GPIO_DeInit+0x92>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	f002 0203 	and.w	r2, r2, #3
 800a1f0:	0092      	lsls	r2, r2, #2
 800a1f2:	4093      	lsls	r3, r2
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d132      	bne.n	800a260 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a1fa:	4b3c      	ldr	r3, [pc, #240]	; (800a2ec <HAL_GPIO_DeInit+0x194>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	43db      	mvns	r3, r3
 800a202:	493a      	ldr	r1, [pc, #232]	; (800a2ec <HAL_GPIO_DeInit+0x194>)
 800a204:	4013      	ands	r3, r2
 800a206:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a208:	4b38      	ldr	r3, [pc, #224]	; (800a2ec <HAL_GPIO_DeInit+0x194>)
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	43db      	mvns	r3, r3
 800a210:	4936      	ldr	r1, [pc, #216]	; (800a2ec <HAL_GPIO_DeInit+0x194>)
 800a212:	4013      	ands	r3, r2
 800a214:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a216:	4b35      	ldr	r3, [pc, #212]	; (800a2ec <HAL_GPIO_DeInit+0x194>)
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	43db      	mvns	r3, r3
 800a21e:	4933      	ldr	r1, [pc, #204]	; (800a2ec <HAL_GPIO_DeInit+0x194>)
 800a220:	4013      	ands	r3, r2
 800a222:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a224:	4b31      	ldr	r3, [pc, #196]	; (800a2ec <HAL_GPIO_DeInit+0x194>)
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	43db      	mvns	r3, r3
 800a22c:	492f      	ldr	r1, [pc, #188]	; (800a2ec <HAL_GPIO_DeInit+0x194>)
 800a22e:	4013      	ands	r3, r2
 800a230:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	f003 0303 	and.w	r3, r3, #3
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	220f      	movs	r2, #15
 800a23c:	fa02 f303 	lsl.w	r3, r2, r3
 800a240:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a242:	4a23      	ldr	r2, [pc, #140]	; (800a2d0 <HAL_GPIO_DeInit+0x178>)
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	089b      	lsrs	r3, r3, #2
 800a248:	3302      	adds	r3, #2
 800a24a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	43da      	mvns	r2, r3
 800a252:	481f      	ldr	r0, [pc, #124]	; (800a2d0 <HAL_GPIO_DeInit+0x178>)
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	089b      	lsrs	r3, r3, #2
 800a258:	400a      	ands	r2, r1
 800a25a:	3302      	adds	r3, #2
 800a25c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2bff      	cmp	r3, #255	; 0xff
 800a264:	d801      	bhi.n	800a26a <HAL_GPIO_DeInit+0x112>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	e001      	b.n	800a26e <HAL_GPIO_DeInit+0x116>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3304      	adds	r3, #4
 800a26e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	2bff      	cmp	r3, #255	; 0xff
 800a274:	d802      	bhi.n	800a27c <HAL_GPIO_DeInit+0x124>
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	e002      	b.n	800a282 <HAL_GPIO_DeInit+0x12a>
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	3b08      	subs	r3, #8
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	210f      	movs	r1, #15
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	fa01 f303 	lsl.w	r3, r1, r3
 800a290:	43db      	mvns	r3, r3
 800a292:	401a      	ands	r2, r3
 800a294:	2104      	movs	r1, #4
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	fa01 f303 	lsl.w	r3, r1, r3
 800a29c:	431a      	orrs	r2, r3
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	43db      	mvns	r3, r3
 800a2aa:	401a      	ands	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f47f af52 	bne.w	800a168 <HAL_GPIO_DeInit+0x10>
  }
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	3724      	adds	r7, #36	; 0x24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr
 800a2d0:	40010000 	.word	0x40010000
 800a2d4:	40010800 	.word	0x40010800
 800a2d8:	40010c00 	.word	0x40010c00
 800a2dc:	40011000 	.word	0x40011000
 800a2e0:	40011400 	.word	0x40011400
 800a2e4:	40011800 	.word	0x40011800
 800a2e8:	40011c00 	.word	0x40011c00
 800a2ec:	40010400 	.word	0x40010400

0800a2f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	887b      	ldrh	r3, [r7, #2]
 800a302:	4013      	ands	r3, r2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a308:	2301      	movs	r3, #1
 800a30a:	73fb      	strb	r3, [r7, #15]
 800a30c:	e001      	b.n	800a312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a30e:	2300      	movs	r3, #0
 800a310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	bc80      	pop	{r7}
 800a31c:	4770      	bx	lr

0800a31e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	460b      	mov	r3, r1
 800a328:	807b      	strh	r3, [r7, #2]
 800a32a:	4613      	mov	r3, r2
 800a32c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a32e:	787b      	ldrb	r3, [r7, #1]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a334:	887a      	ldrh	r2, [r7, #2]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a33a:	e003      	b.n	800a344 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a33c:	887b      	ldrh	r3, [r7, #2]
 800a33e:	041a      	lsls	r2, r3, #16
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	611a      	str	r2, [r3, #16]
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	bc80      	pop	{r7}
 800a34c:	4770      	bx	lr

0800a34e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a34e:	b480      	push	{r7}
 800a350:	b085      	sub	sp, #20
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	460b      	mov	r3, r1
 800a358:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a360:	887a      	ldrh	r2, [r7, #2]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	4013      	ands	r3, r2
 800a366:	041a      	lsls	r2, r3, #16
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	43d9      	mvns	r1, r3
 800a36c:	887b      	ldrh	r3, [r7, #2]
 800a36e:	400b      	ands	r3, r1
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	611a      	str	r2, [r3, #16]
}
 800a376:	bf00      	nop
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bc80      	pop	{r7}
 800a37e:	4770      	bx	lr

0800a380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e12b      	b.n	800a5ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d106      	bne.n	800a3ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7fe fff8 	bl	800939c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2224      	movs	r2, #36	; 0x24
 800a3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f022 0201 	bic.w	r2, r2, #1
 800a3c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a3e4:	f001 fdb8 	bl	800bf58 <HAL_RCC_GetPCLK1Freq>
 800a3e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	4a81      	ldr	r2, [pc, #516]	; (800a5f4 <HAL_I2C_Init+0x274>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d807      	bhi.n	800a404 <HAL_I2C_Init+0x84>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4a80      	ldr	r2, [pc, #512]	; (800a5f8 <HAL_I2C_Init+0x278>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	bf94      	ite	ls
 800a3fc:	2301      	movls	r3, #1
 800a3fe:	2300      	movhi	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	e006      	b.n	800a412 <HAL_I2C_Init+0x92>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4a7d      	ldr	r2, [pc, #500]	; (800a5fc <HAL_I2C_Init+0x27c>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	bf94      	ite	ls
 800a40c:	2301      	movls	r3, #1
 800a40e:	2300      	movhi	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e0e7      	b.n	800a5ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	4a78      	ldr	r2, [pc, #480]	; (800a600 <HAL_I2C_Init+0x280>)
 800a41e:	fba2 2303 	umull	r2, r3, r2, r3
 800a422:	0c9b      	lsrs	r3, r3, #18
 800a424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	430a      	orrs	r2, r1
 800a438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	4a6a      	ldr	r2, [pc, #424]	; (800a5f4 <HAL_I2C_Init+0x274>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d802      	bhi.n	800a454 <HAL_I2C_Init+0xd4>
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	3301      	adds	r3, #1
 800a452:	e009      	b.n	800a468 <HAL_I2C_Init+0xe8>
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a45a:	fb02 f303 	mul.w	r3, r2, r3
 800a45e:	4a69      	ldr	r2, [pc, #420]	; (800a604 <HAL_I2C_Init+0x284>)
 800a460:	fba2 2303 	umull	r2, r3, r2, r3
 800a464:	099b      	lsrs	r3, r3, #6
 800a466:	3301      	adds	r3, #1
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	6812      	ldr	r2, [r2, #0]
 800a46c:	430b      	orrs	r3, r1
 800a46e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a47a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	495c      	ldr	r1, [pc, #368]	; (800a5f4 <HAL_I2C_Init+0x274>)
 800a484:	428b      	cmp	r3, r1
 800a486:	d819      	bhi.n	800a4bc <HAL_I2C_Init+0x13c>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	1e59      	subs	r1, r3, #1
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	fbb1 f3f3 	udiv	r3, r1, r3
 800a496:	1c59      	adds	r1, r3, #1
 800a498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a49c:	400b      	ands	r3, r1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <HAL_I2C_Init+0x138>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	1e59      	subs	r1, r3, #1
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4b6:	e051      	b.n	800a55c <HAL_I2C_Init+0x1dc>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	e04f      	b.n	800a55c <HAL_I2C_Init+0x1dc>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d111      	bne.n	800a4e8 <HAL_I2C_Init+0x168>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	1e58      	subs	r0, r3, #1
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6859      	ldr	r1, [r3, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	440b      	add	r3, r1
 800a4d2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bf0c      	ite	eq
 800a4e0:	2301      	moveq	r3, #1
 800a4e2:	2300      	movne	r3, #0
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	e012      	b.n	800a50e <HAL_I2C_Init+0x18e>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	1e58      	subs	r0, r3, #1
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6859      	ldr	r1, [r3, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	0099      	lsls	r1, r3, #2
 800a4f8:	440b      	add	r3, r1
 800a4fa:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4fe:	3301      	adds	r3, #1
 800a500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a504:	2b00      	cmp	r3, #0
 800a506:	bf0c      	ite	eq
 800a508:	2301      	moveq	r3, #1
 800a50a:	2300      	movne	r3, #0
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <HAL_I2C_Init+0x196>
 800a512:	2301      	movs	r3, #1
 800a514:	e022      	b.n	800a55c <HAL_I2C_Init+0x1dc>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10e      	bne.n	800a53c <HAL_I2C_Init+0x1bc>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	1e58      	subs	r0, r3, #1
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6859      	ldr	r1, [r3, #4]
 800a526:	460b      	mov	r3, r1
 800a528:	005b      	lsls	r3, r3, #1
 800a52a:	440b      	add	r3, r1
 800a52c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a530:	3301      	adds	r3, #1
 800a532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a53a:	e00f      	b.n	800a55c <HAL_I2C_Init+0x1dc>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	1e58      	subs	r0, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6859      	ldr	r1, [r3, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	440b      	add	r3, r1
 800a54a:	0099      	lsls	r1, r3, #2
 800a54c:	440b      	add	r3, r1
 800a54e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a552:	3301      	adds	r3, #1
 800a554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	6809      	ldr	r1, [r1, #0]
 800a560:	4313      	orrs	r3, r2
 800a562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	69da      	ldr	r2, [r3, #28]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	431a      	orrs	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	430a      	orrs	r2, r1
 800a57e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a58a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6911      	ldr	r1, [r2, #16]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	68d2      	ldr	r2, [r2, #12]
 800a596:	4311      	orrs	r1, r2
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6812      	ldr	r2, [r2, #0]
 800a59c:	430b      	orrs	r3, r1
 800a59e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	695a      	ldr	r2, [r3, #20]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0201 	orr.w	r2, r2, #1
 800a5ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	000186a0 	.word	0x000186a0
 800a5f8:	001e847f 	.word	0x001e847f
 800a5fc:	003d08ff 	.word	0x003d08ff
 800a600:	431bde83 	.word	0x431bde83
 800a604:	10624dd3 	.word	0x10624dd3

0800a608 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e021      	b.n	800a65e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2224      	movs	r2, #36	; 0x24
 800a61e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f022 0201 	bic.w	r2, r2, #1
 800a630:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7fe fef0 	bl	8009418 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b088      	sub	sp, #32
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	607a      	str	r2, [r7, #4]
 800a672:	461a      	mov	r2, r3
 800a674:	460b      	mov	r3, r1
 800a676:	817b      	strh	r3, [r7, #10]
 800a678:	4613      	mov	r3, r2
 800a67a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a67c:	f7ff f85e 	bl	800973c <HAL_GetTick>
 800a680:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b20      	cmp	r3, #32
 800a68c:	f040 80e0 	bne.w	800a850 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2319      	movs	r3, #25
 800a696:	2201      	movs	r2, #1
 800a698:	4970      	ldr	r1, [pc, #448]	; (800a85c <HAL_I2C_Master_Transmit+0x1f4>)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 fe5c 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e0d3      	b.n	800a852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d101      	bne.n	800a6b8 <HAL_I2C_Master_Transmit+0x50>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e0cc      	b.n	800a852 <HAL_I2C_Master_Transmit+0x1ea>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d007      	beq.n	800a6de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f042 0201 	orr.w	r2, r2, #1
 800a6dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2221      	movs	r2, #33	; 0x21
 800a6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2210      	movs	r2, #16
 800a6fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	893a      	ldrh	r2, [r7, #8]
 800a70e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a714:	b29a      	uxth	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4a50      	ldr	r2, [pc, #320]	; (800a860 <HAL_I2C_Master_Transmit+0x1f8>)
 800a71e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a720:	8979      	ldrh	r1, [r7, #10]
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	6a3a      	ldr	r2, [r7, #32]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 fc16 	bl	800af58 <I2C_MasterRequestWrite>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e08d      	b.n	800a852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a736:	2300      	movs	r3, #0
 800a738:	613b      	str	r3, [r7, #16]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	613b      	str	r3, [r7, #16]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a74c:	e066      	b.n	800a81c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	6a39      	ldr	r1, [r7, #32]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 ff1a 	bl	800b58c <I2C_WaitOnTXEFlagUntilTimeout>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00d      	beq.n	800a77a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	2b04      	cmp	r3, #4
 800a764:	d107      	bne.n	800a776 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e06b      	b.n	800a852 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a794:	b29b      	uxth	r3, r3
 800a796:	3b01      	subs	r3, #1
 800a798:	b29a      	uxth	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d11b      	bne.n	800a7f0 <HAL_I2C_Master_Transmit+0x188>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d017      	beq.n	800a7f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	781a      	ldrb	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	6a39      	ldr	r1, [r7, #32]
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 ff11 	bl	800b61c <I2C_WaitOnBTFFlagUntilTimeout>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00d      	beq.n	800a81c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a804:	2b04      	cmp	r3, #4
 800a806:	d107      	bne.n	800a818 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a816:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e01a      	b.n	800a852 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a820:	2b00      	cmp	r3, #0
 800a822:	d194      	bne.n	800a74e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e000      	b.n	800a852 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a850:	2302      	movs	r3, #2
  }
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	00100002 	.word	0x00100002
 800a860:	ffff0000 	.word	0xffff0000

0800a864 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b088      	sub	sp, #32
 800a868:	af02      	add	r7, sp, #8
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	4608      	mov	r0, r1
 800a86e:	4611      	mov	r1, r2
 800a870:	461a      	mov	r2, r3
 800a872:	4603      	mov	r3, r0
 800a874:	817b      	strh	r3, [r7, #10]
 800a876:	460b      	mov	r3, r1
 800a878:	813b      	strh	r3, [r7, #8]
 800a87a:	4613      	mov	r3, r2
 800a87c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a87e:	f7fe ff5d 	bl	800973c <HAL_GetTick>
 800a882:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b20      	cmp	r3, #32
 800a88e:	f040 80d9 	bne.w	800aa44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	2319      	movs	r3, #25
 800a898:	2201      	movs	r2, #1
 800a89a:	496d      	ldr	r1, [pc, #436]	; (800aa50 <HAL_I2C_Mem_Write+0x1ec>)
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 fd5b 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e0cc      	b.n	800aa46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d101      	bne.n	800a8ba <HAL_I2C_Mem_Write+0x56>
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e0c5      	b.n	800aa46 <HAL_I2C_Mem_Write+0x1e2>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d007      	beq.n	800a8e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f042 0201 	orr.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2221      	movs	r2, #33	; 0x21
 800a8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2240      	movs	r2, #64	; 0x40
 800a8fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6a3a      	ldr	r2, [r7, #32]
 800a90a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a916:	b29a      	uxth	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4a4d      	ldr	r2, [pc, #308]	; (800aa54 <HAL_I2C_Mem_Write+0x1f0>)
 800a920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a922:	88f8      	ldrh	r0, [r7, #6]
 800a924:	893a      	ldrh	r2, [r7, #8]
 800a926:	8979      	ldrh	r1, [r7, #10]
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	4603      	mov	r3, r0
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f000 fb92 	bl	800b05c <I2C_RequestMemoryWrite>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d052      	beq.n	800a9e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e081      	b.n	800aa46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 fe20 	bl	800b58c <I2C_WaitOnTXEFlagUntilTimeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00d      	beq.n	800a96e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	2b04      	cmp	r3, #4
 800a958:	d107      	bne.n	800a96a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e06b      	b.n	800aa46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	781a      	ldrb	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a988:	3b01      	subs	r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a994:	b29b      	uxth	r3, r3
 800a996:	3b01      	subs	r3, #1
 800a998:	b29a      	uxth	r2, r3
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d11b      	bne.n	800a9e4 <HAL_I2C_Mem_Write+0x180>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d017      	beq.n	800a9e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	781a      	ldrb	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1aa      	bne.n	800a942 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 fe13 	bl	800b61c <I2C_WaitOnBTFFlagUntilTimeout>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00d      	beq.n	800aa18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	d107      	bne.n	800aa14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e016      	b.n	800aa46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	e000      	b.n	800aa46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aa44:	2302      	movs	r3, #2
  }
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3718      	adds	r7, #24
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	00100002 	.word	0x00100002
 800aa54:	ffff0000 	.word	0xffff0000

0800aa58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08c      	sub	sp, #48	; 0x30
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	4608      	mov	r0, r1
 800aa62:	4611      	mov	r1, r2
 800aa64:	461a      	mov	r2, r3
 800aa66:	4603      	mov	r3, r0
 800aa68:	817b      	strh	r3, [r7, #10]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	813b      	strh	r3, [r7, #8]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aa76:	f7fe fe61 	bl	800973c <HAL_GetTick>
 800aa7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	f040 8244 	bne.w	800af12 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	2319      	movs	r3, #25
 800aa90:	2201      	movs	r2, #1
 800aa92:	4982      	ldr	r1, [pc, #520]	; (800ac9c <HAL_I2C_Mem_Read+0x244>)
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f000 fc5f 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	e237      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <HAL_I2C_Mem_Read+0x5a>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e230      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 0301 	and.w	r3, r3, #1
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d007      	beq.n	800aad8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f042 0201 	orr.w	r2, r2, #1
 800aad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2222      	movs	r2, #34	; 0x22
 800aaec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2240      	movs	r2, #64	; 0x40
 800aaf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ab08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4a62      	ldr	r2, [pc, #392]	; (800aca0 <HAL_I2C_Mem_Read+0x248>)
 800ab18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab1a:	88f8      	ldrh	r0, [r7, #6]
 800ab1c:	893a      	ldrh	r2, [r7, #8]
 800ab1e:	8979      	ldrh	r1, [r7, #10]
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	4603      	mov	r3, r0
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 fb2c 	bl	800b188 <I2C_RequestMemoryRead>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d001      	beq.n	800ab3a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e1ec      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d113      	bne.n	800ab6a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab42:	2300      	movs	r3, #0
 800ab44:	61fb      	str	r3, [r7, #28]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	61fb      	str	r3, [r7, #28]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	61fb      	str	r3, [r7, #28]
 800ab56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e1c0      	b.n	800aeec <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d11e      	bne.n	800abb0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab82:	b672      	cpsid	i
}
 800ab84:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab86:	2300      	movs	r3, #0
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	695b      	ldr	r3, [r3, #20]
 800ab90:	61bb      	str	r3, [r7, #24]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	61bb      	str	r3, [r7, #24]
 800ab9a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800abac:	b662      	cpsie	i
}
 800abae:	e035      	b.n	800ac1c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d11e      	bne.n	800abf6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800abc8:	b672      	cpsid	i
}
 800abca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abcc:	2300      	movs	r3, #0
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	617b      	str	r3, [r7, #20]
 800abe0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800abf2:	b662      	cpsie	i
}
 800abf4:	e012      	b.n	800ac1c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac04:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac06:	2300      	movs	r3, #0
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	613b      	str	r3, [r7, #16]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800ac1c:	e166      	b.n	800aeec <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	f200 811f 	bhi.w	800ae66 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d123      	bne.n	800ac78 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f000 fd39 	bl	800b6ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e167      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	691a      	ldr	r2, [r3, #16]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4e:	b2d2      	uxtb	r2, r2
 800ac50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	1c5a      	adds	r2, r3, #1
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac60:	3b01      	subs	r3, #1
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac76:	e139      	b.n	800aeec <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d152      	bne.n	800ad26 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	2200      	movs	r2, #0
 800ac88:	4906      	ldr	r1, [pc, #24]	; (800aca4 <HAL_I2C_Mem_Read+0x24c>)
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 fb64 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d008      	beq.n	800aca8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e13c      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
 800ac9a:	bf00      	nop
 800ac9c:	00100002 	.word	0x00100002
 800aca0:	ffff0000 	.word	0xffff0000
 800aca4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800aca8:	b672      	cpsid	i
}
 800acaa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	691a      	ldr	r2, [r3, #16]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd8:	3b01      	subs	r3, #1
 800acda:	b29a      	uxth	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	3b01      	subs	r3, #1
 800ace8:	b29a      	uxth	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800acee:	b662      	cpsie	i
}
 800acf0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	691a      	ldr	r2, [r3, #16]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfc:	b2d2      	uxtb	r2, r2
 800acfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad24:	e0e2      	b.n	800aeec <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	497b      	ldr	r1, [pc, #492]	; (800af1c <HAL_I2C_Mem_Read+0x4c4>)
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f000 fb11 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e0e9      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad50:	b672      	cpsid	i
}
 800ad52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	691a      	ldr	r2, [r3, #16]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	b2d2      	uxtb	r2, r2
 800ad60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad70:	3b01      	subs	r3, #1
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ad86:	4b66      	ldr	r3, [pc, #408]	; (800af20 <HAL_I2C_Mem_Read+0x4c8>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	08db      	lsrs	r3, r3, #3
 800ad8c:	4a65      	ldr	r2, [pc, #404]	; (800af24 <HAL_I2C_Mem_Read+0x4cc>)
 800ad8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad92:	0a1a      	lsrs	r2, r3, #8
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	00da      	lsls	r2, r3, #3
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d118      	bne.n	800adde <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2220      	movs	r2, #32
 800adb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	f043 0220 	orr.w	r2, r3, #32
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800adce:	b662      	cpsie	i
}
 800add0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e09a      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d1d9      	bne.n	800ada0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	691a      	ldr	r2, [r3, #16]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	3b01      	subs	r3, #1
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ae2e:	b662      	cpsie	i
}
 800ae30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691a      	ldr	r2, [r3, #16]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	b2d2      	uxtb	r2, r2
 800ae3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ae64:	e042      	b.n	800aeec <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f000 fc1e 	bl	800b6ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e04c      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	691a      	ldr	r2, [r3, #16]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	b2d2      	uxtb	r2, r2
 800ae86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	1c5a      	adds	r2, r3, #1
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae96:	3b01      	subs	r3, #1
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	3b01      	subs	r3, #1
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	f003 0304 	and.w	r3, r3, #4
 800aeb6:	2b04      	cmp	r3, #4
 800aeb8:	d118      	bne.n	800aeec <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	691a      	ldr	r2, [r3, #16]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	b2d2      	uxtb	r2, r2
 800aec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aed6:	3b01      	subs	r3, #1
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f47f ae94 	bne.w	800ac1e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	e000      	b.n	800af14 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800af12:	2302      	movs	r3, #2
  }
}
 800af14:	4618      	mov	r0, r3
 800af16:	3728      	adds	r7, #40	; 0x28
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	00010004 	.word	0x00010004
 800af20:	200009a0 	.word	0x200009a0
 800af24:	14f8b589 	.word	0x14f8b589

0800af28 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af36:	b2db      	uxtb	r3, r3
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bc80      	pop	{r7}
 800af40:	4770      	bx	lr

0800af42 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800af42:	b480      	push	{r7}
 800af44:	b083      	sub	sp, #12
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800af4e:	4618      	mov	r0, r3
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	bc80      	pop	{r7}
 800af56:	4770      	bx	lr

0800af58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af02      	add	r7, sp, #8
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	607a      	str	r2, [r7, #4]
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	460b      	mov	r3, r1
 800af66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2b08      	cmp	r3, #8
 800af72:	d006      	beq.n	800af82 <I2C_MasterRequestWrite+0x2a>
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d003      	beq.n	800af82 <I2C_MasterRequestWrite+0x2a>
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af80:	d108      	bne.n	800af94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	e00b      	b.n	800afac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af98:	2b12      	cmp	r3, #18
 800af9a:	d107      	bne.n	800afac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f000 f9cd 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00d      	beq.n	800afe0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afd2:	d103      	bne.n	800afdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800afdc:	2303      	movs	r3, #3
 800afde:	e035      	b.n	800b04c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afe8:	d108      	bne.n	800affc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800afea:	897b      	ldrh	r3, [r7, #10]
 800afec:	b2db      	uxtb	r3, r3
 800afee:	461a      	mov	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aff8:	611a      	str	r2, [r3, #16]
 800affa:	e01b      	b.n	800b034 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800affc:	897b      	ldrh	r3, [r7, #10]
 800affe:	11db      	asrs	r3, r3, #7
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 0306 	and.w	r3, r3, #6
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f063 030f 	orn	r3, r3, #15
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	490e      	ldr	r1, [pc, #56]	; (800b054 <I2C_MasterRequestWrite+0xfc>)
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f000 fa16 	bl	800b44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e010      	b.n	800b04c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b02a:	897b      	ldrh	r3, [r7, #10]
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	4907      	ldr	r1, [pc, #28]	; (800b058 <I2C_MasterRequestWrite+0x100>)
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f000 fa06 	bl	800b44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	00010008 	.word	0x00010008
 800b058:	00010002 	.word	0x00010002

0800b05c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af02      	add	r7, sp, #8
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	4608      	mov	r0, r1
 800b066:	4611      	mov	r1, r2
 800b068:	461a      	mov	r2, r3
 800b06a:	4603      	mov	r3, r0
 800b06c:	817b      	strh	r3, [r7, #10]
 800b06e:	460b      	mov	r3, r1
 800b070:	813b      	strh	r3, [r7, #8]
 800b072:	4613      	mov	r3, r2
 800b074:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b084:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f000 f960 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00d      	beq.n	800b0ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ac:	d103      	bne.n	800b0b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e05f      	b.n	800b17a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b0ba:	897b      	ldrh	r3, [r7, #10]
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	461a      	mov	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	6a3a      	ldr	r2, [r7, #32]
 800b0ce:	492d      	ldr	r1, [pc, #180]	; (800b184 <I2C_RequestMemoryWrite+0x128>)
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 f9bb 	bl	800b44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e04c      	b.n	800b17a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f8:	6a39      	ldr	r1, [r7, #32]
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f000 fa46 	bl	800b58c <I2C_WaitOnTXEFlagUntilTimeout>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00d      	beq.n	800b122 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d107      	bne.n	800b11e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b11c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e02b      	b.n	800b17a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b122:	88fb      	ldrh	r3, [r7, #6]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d105      	bne.n	800b134 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b128:	893b      	ldrh	r3, [r7, #8]
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	611a      	str	r2, [r3, #16]
 800b132:	e021      	b.n	800b178 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b134:	893b      	ldrh	r3, [r7, #8]
 800b136:	0a1b      	lsrs	r3, r3, #8
 800b138:	b29b      	uxth	r3, r3
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b144:	6a39      	ldr	r1, [r7, #32]
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 fa20 	bl	800b58c <I2C_WaitOnTXEFlagUntilTimeout>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00d      	beq.n	800b16e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b156:	2b04      	cmp	r3, #4
 800b158:	d107      	bne.n	800b16a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b168:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e005      	b.n	800b17a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b16e:	893b      	ldrh	r3, [r7, #8]
 800b170:	b2da      	uxtb	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	00010002 	.word	0x00010002

0800b188 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	4608      	mov	r0, r1
 800b192:	4611      	mov	r1, r2
 800b194:	461a      	mov	r2, r3
 800b196:	4603      	mov	r3, r0
 800b198:	817b      	strh	r3, [r7, #10]
 800b19a:	460b      	mov	r3, r1
 800b19c:	813b      	strh	r3, [r7, #8]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 f8c2 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00d      	beq.n	800b1f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e8:	d103      	bne.n	800b1f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e0aa      	b.n	800b34c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b1f6:	897b      	ldrh	r3, [r7, #10]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b204:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	6a3a      	ldr	r2, [r7, #32]
 800b20a:	4952      	ldr	r1, [pc, #328]	; (800b354 <I2C_RequestMemoryRead+0x1cc>)
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f000 f91d 	bl	800b44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e097      	b.n	800b34c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b21c:	2300      	movs	r3, #0
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	617b      	str	r3, [r7, #20]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	617b      	str	r3, [r7, #20]
 800b230:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b234:	6a39      	ldr	r1, [r7, #32]
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 f9a8 	bl	800b58c <I2C_WaitOnTXEFlagUntilTimeout>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00d      	beq.n	800b25e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b246:	2b04      	cmp	r3, #4
 800b248:	d107      	bne.n	800b25a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b258:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e076      	b.n	800b34c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b25e:	88fb      	ldrh	r3, [r7, #6]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d105      	bne.n	800b270 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b264:	893b      	ldrh	r3, [r7, #8]
 800b266:	b2da      	uxtb	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	611a      	str	r2, [r3, #16]
 800b26e:	e021      	b.n	800b2b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b270:	893b      	ldrh	r3, [r7, #8]
 800b272:	0a1b      	lsrs	r3, r3, #8
 800b274:	b29b      	uxth	r3, r3
 800b276:	b2da      	uxtb	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b280:	6a39      	ldr	r1, [r7, #32]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 f982 	bl	800b58c <I2C_WaitOnTXEFlagUntilTimeout>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00d      	beq.n	800b2aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b292:	2b04      	cmp	r3, #4
 800b294:	d107      	bne.n	800b2a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e050      	b.n	800b34c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b2aa:	893b      	ldrh	r3, [r7, #8]
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b6:	6a39      	ldr	r1, [r7, #32]
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 f967 	bl	800b58c <I2C_WaitOnTXEFlagUntilTimeout>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00d      	beq.n	800b2e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c8:	2b04      	cmp	r3, #4
 800b2ca:	d107      	bne.n	800b2dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e035      	b.n	800b34c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f000 f82b 	bl	800b358 <I2C_WaitOnFlagUntilTimeout>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00d      	beq.n	800b324 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b316:	d103      	bne.n	800b320 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b31e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e013      	b.n	800b34c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b324:	897b      	ldrh	r3, [r7, #10]
 800b326:	b2db      	uxtb	r3, r3
 800b328:	f043 0301 	orr.w	r3, r3, #1
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	6a3a      	ldr	r2, [r7, #32]
 800b338:	4906      	ldr	r1, [pc, #24]	; (800b354 <I2C_RequestMemoryRead+0x1cc>)
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f000 f886 	bl	800b44c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e000      	b.n	800b34c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	00010002 	.word	0x00010002

0800b358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	4613      	mov	r3, r2
 800b366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b368:	e048      	b.n	800b3fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b370:	d044      	beq.n	800b3fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b372:	f7fe f9e3 	bl	800973c <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d302      	bcc.n	800b388 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d139      	bne.n	800b3fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	0c1b      	lsrs	r3, r3, #16
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d10d      	bne.n	800b3ae <I2C_WaitOnFlagUntilTimeout+0x56>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	43da      	mvns	r2, r3
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	4013      	ands	r3, r2
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	bf0c      	ite	eq
 800b3a4:	2301      	moveq	r3, #1
 800b3a6:	2300      	movne	r3, #0
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	e00c      	b.n	800b3c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	43da      	mvns	r2, r3
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	bf0c      	ite	eq
 800b3c0:	2301      	moveq	r3, #1
 800b3c2:	2300      	movne	r3, #0
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d116      	bne.n	800b3fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	f043 0220 	orr.w	r2, r3, #32
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e023      	b.n	800b444 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	0c1b      	lsrs	r3, r3, #16
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b01      	cmp	r3, #1
 800b404:	d10d      	bne.n	800b422 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	43da      	mvns	r2, r3
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	4013      	ands	r3, r2
 800b412:	b29b      	uxth	r3, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	bf0c      	ite	eq
 800b418:	2301      	moveq	r3, #1
 800b41a:	2300      	movne	r3, #0
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	461a      	mov	r2, r3
 800b420:	e00c      	b.n	800b43c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	43da      	mvns	r2, r3
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	4013      	ands	r3, r2
 800b42e:	b29b      	uxth	r3, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	bf0c      	ite	eq
 800b434:	2301      	moveq	r3, #1
 800b436:	2300      	movne	r3, #0
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	461a      	mov	r2, r3
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d093      	beq.n	800b36a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b45a:	e071      	b.n	800b540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b46a:	d123      	bne.n	800b4b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b47a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2220      	movs	r2, #32
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a0:	f043 0204 	orr.w	r2, r3, #4
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e067      	b.n	800b584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ba:	d041      	beq.n	800b540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4bc:	f7fe f93e 	bl	800973c <HAL_GetTick>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d302      	bcc.n	800b4d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d136      	bne.n	800b540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	0c1b      	lsrs	r3, r3, #16
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d10c      	bne.n	800b4f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	43da      	mvns	r2, r3
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	bf14      	ite	ne
 800b4ee:	2301      	movne	r3, #1
 800b4f0:	2300      	moveq	r3, #0
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	e00b      	b.n	800b50e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	43da      	mvns	r2, r3
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	4013      	ands	r3, r2
 800b502:	b29b      	uxth	r3, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	bf14      	ite	ne
 800b508:	2301      	movne	r3, #1
 800b50a:	2300      	moveq	r3, #0
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d016      	beq.n	800b540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2220      	movs	r2, #32
 800b51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52c:	f043 0220 	orr.w	r2, r3, #32
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e021      	b.n	800b584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	0c1b      	lsrs	r3, r3, #16
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b01      	cmp	r3, #1
 800b548:	d10c      	bne.n	800b564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	43da      	mvns	r2, r3
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	4013      	ands	r3, r2
 800b556:	b29b      	uxth	r3, r3
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bf14      	ite	ne
 800b55c:	2301      	movne	r3, #1
 800b55e:	2300      	moveq	r3, #0
 800b560:	b2db      	uxtb	r3, r3
 800b562:	e00b      	b.n	800b57c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	43da      	mvns	r2, r3
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	4013      	ands	r3, r2
 800b570:	b29b      	uxth	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	bf14      	ite	ne
 800b576:	2301      	movne	r3, #1
 800b578:	2300      	moveq	r3, #0
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f47f af6d 	bne.w	800b45c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b598:	e034      	b.n	800b604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 f8e3 	bl	800b766 <I2C_IsAcknowledgeFailed>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e034      	b.n	800b614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5b0:	d028      	beq.n	800b604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5b2:	f7fe f8c3 	bl	800973c <HAL_GetTick>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d302      	bcc.n	800b5c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d11d      	bne.n	800b604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d2:	2b80      	cmp	r3, #128	; 0x80
 800b5d4:	d016      	beq.n	800b604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2220      	movs	r2, #32
 800b5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f0:	f043 0220 	orr.w	r2, r3, #32
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	e007      	b.n	800b614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b60e:	2b80      	cmp	r3, #128	; 0x80
 800b610:	d1c3      	bne.n	800b59a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b628:	e034      	b.n	800b694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f000 f89b 	bl	800b766 <I2C_IsAcknowledgeFailed>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e034      	b.n	800b6a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b640:	d028      	beq.n	800b694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b642:	f7fe f87b 	bl	800973c <HAL_GetTick>
 800b646:	4602      	mov	r2, r0
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d302      	bcc.n	800b658 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d11d      	bne.n	800b694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	f003 0304 	and.w	r3, r3, #4
 800b662:	2b04      	cmp	r3, #4
 800b664:	d016      	beq.n	800b694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2220      	movs	r2, #32
 800b670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b680:	f043 0220 	orr.w	r2, r3, #32
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	e007      	b.n	800b6a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	f003 0304 	and.w	r3, r3, #4
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d1c3      	bne.n	800b62a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b6b8:	e049      	b.n	800b74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	f003 0310 	and.w	r3, r3, #16
 800b6c4:	2b10      	cmp	r3, #16
 800b6c6:	d119      	bne.n	800b6fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0210 	mvn.w	r2, #16
 800b6d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e030      	b.n	800b75e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6fc:	f7fe f81e 	bl	800973c <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d302      	bcc.n	800b712 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d11d      	bne.n	800b74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b71c:	2b40      	cmp	r3, #64	; 0x40
 800b71e:	d016      	beq.n	800b74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2220      	movs	r2, #32
 800b72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73a:	f043 0220 	orr.w	r2, r3, #32
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e007      	b.n	800b75e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b758:	2b40      	cmp	r3, #64	; 0x40
 800b75a:	d1ae      	bne.n	800b6ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b766:	b480      	push	{r7}
 800b768:	b083      	sub	sp, #12
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	695b      	ldr	r3, [r3, #20]
 800b774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b77c:	d11b      	bne.n	800b7b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b786:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2220      	movs	r2, #32
 800b792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a2:	f043 0204 	orr.w	r2, r3, #4
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e000      	b.n	800b7b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc80      	pop	{r7}
 800b7c0:	4770      	bx	lr
	...

0800b7c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e272      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 8087 	beq.w	800b8f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b7e4:	4b92      	ldr	r3, [pc, #584]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	f003 030c 	and.w	r3, r3, #12
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	d00c      	beq.n	800b80a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b7f0:	4b8f      	ldr	r3, [pc, #572]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	f003 030c 	and.w	r3, r3, #12
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d112      	bne.n	800b822 <HAL_RCC_OscConfig+0x5e>
 800b7fc:	4b8c      	ldr	r3, [pc, #560]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b808:	d10b      	bne.n	800b822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b80a:	4b89      	ldr	r3, [pc, #548]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d06c      	beq.n	800b8f0 <HAL_RCC_OscConfig+0x12c>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d168      	bne.n	800b8f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e24c      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b82a:	d106      	bne.n	800b83a <HAL_RCC_OscConfig+0x76>
 800b82c:	4b80      	ldr	r3, [pc, #512]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a7f      	ldr	r2, [pc, #508]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	e02e      	b.n	800b898 <HAL_RCC_OscConfig+0xd4>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10c      	bne.n	800b85c <HAL_RCC_OscConfig+0x98>
 800b842:	4b7b      	ldr	r3, [pc, #492]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a7a      	ldr	r2, [pc, #488]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b84c:	6013      	str	r3, [r2, #0]
 800b84e:	4b78      	ldr	r3, [pc, #480]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a77      	ldr	r2, [pc, #476]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	e01d      	b.n	800b898 <HAL_RCC_OscConfig+0xd4>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b864:	d10c      	bne.n	800b880 <HAL_RCC_OscConfig+0xbc>
 800b866:	4b72      	ldr	r3, [pc, #456]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a71      	ldr	r2, [pc, #452]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b86c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	4b6f      	ldr	r3, [pc, #444]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a6e      	ldr	r2, [pc, #440]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	e00b      	b.n	800b898 <HAL_RCC_OscConfig+0xd4>
 800b880:	4b6b      	ldr	r3, [pc, #428]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a6a      	ldr	r2, [pc, #424]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	4b68      	ldr	r3, [pc, #416]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a67      	ldr	r2, [pc, #412]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d013      	beq.n	800b8c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8a0:	f7fd ff4c 	bl	800973c <HAL_GetTick>
 800b8a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8a6:	e008      	b.n	800b8ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8a8:	f7fd ff48 	bl	800973c <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	2b64      	cmp	r3, #100	; 0x64
 800b8b4:	d901      	bls.n	800b8ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	e200      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8ba:	4b5d      	ldr	r3, [pc, #372]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0f0      	beq.n	800b8a8 <HAL_RCC_OscConfig+0xe4>
 800b8c6:	e014      	b.n	800b8f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8c8:	f7fd ff38 	bl	800973c <HAL_GetTick>
 800b8cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8ce:	e008      	b.n	800b8e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8d0:	f7fd ff34 	bl	800973c <HAL_GetTick>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	2b64      	cmp	r3, #100	; 0x64
 800b8dc:	d901      	bls.n	800b8e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e1ec      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8e2:	4b53      	ldr	r3, [pc, #332]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1f0      	bne.n	800b8d0 <HAL_RCC_OscConfig+0x10c>
 800b8ee:	e000      	b.n	800b8f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 0302 	and.w	r3, r3, #2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d063      	beq.n	800b9c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8fe:	4b4c      	ldr	r3, [pc, #304]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	f003 030c 	and.w	r3, r3, #12
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00b      	beq.n	800b922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b90a:	4b49      	ldr	r3, [pc, #292]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f003 030c 	and.w	r3, r3, #12
 800b912:	2b08      	cmp	r3, #8
 800b914:	d11c      	bne.n	800b950 <HAL_RCC_OscConfig+0x18c>
 800b916:	4b46      	ldr	r3, [pc, #280]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d116      	bne.n	800b950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b922:	4b43      	ldr	r3, [pc, #268]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 0302 	and.w	r3, r3, #2
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <HAL_RCC_OscConfig+0x176>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d001      	beq.n	800b93a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	e1c0      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b93a:	4b3d      	ldr	r3, [pc, #244]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	4939      	ldr	r1, [pc, #228]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b94e:	e03a      	b.n	800b9c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d020      	beq.n	800b99a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b958:	4b36      	ldr	r3, [pc, #216]	; (800ba34 <HAL_RCC_OscConfig+0x270>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b95e:	f7fd feed 	bl	800973c <HAL_GetTick>
 800b962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b964:	e008      	b.n	800b978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b966:	f7fd fee9 	bl	800973c <HAL_GetTick>
 800b96a:	4602      	mov	r2, r0
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	2b02      	cmp	r3, #2
 800b972:	d901      	bls.n	800b978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b974:	2303      	movs	r3, #3
 800b976:	e1a1      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b978:	4b2d      	ldr	r3, [pc, #180]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0302 	and.w	r3, r3, #2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d0f0      	beq.n	800b966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b984:	4b2a      	ldr	r3, [pc, #168]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	4927      	ldr	r1, [pc, #156]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b994:	4313      	orrs	r3, r2
 800b996:	600b      	str	r3, [r1, #0]
 800b998:	e015      	b.n	800b9c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b99a:	4b26      	ldr	r3, [pc, #152]	; (800ba34 <HAL_RCC_OscConfig+0x270>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9a0:	f7fd fecc 	bl	800973c <HAL_GetTick>
 800b9a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9a6:	e008      	b.n	800b9ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9a8:	f7fd fec8 	bl	800973c <HAL_GetTick>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d901      	bls.n	800b9ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e180      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0302 	and.w	r3, r3, #2
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1f0      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 0308 	and.w	r3, r3, #8
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d03a      	beq.n	800ba48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d019      	beq.n	800ba0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9da:	4b17      	ldr	r3, [pc, #92]	; (800ba38 <HAL_RCC_OscConfig+0x274>)
 800b9dc:	2201      	movs	r2, #1
 800b9de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b9e0:	f7fd feac 	bl	800973c <HAL_GetTick>
 800b9e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9e6:	e008      	b.n	800b9fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9e8:	f7fd fea8 	bl	800973c <HAL_GetTick>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d901      	bls.n	800b9fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e160      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9fa:	4b0d      	ldr	r3, [pc, #52]	; (800ba30 <HAL_RCC_OscConfig+0x26c>)
 800b9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fe:	f003 0302 	and.w	r3, r3, #2
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0f0      	beq.n	800b9e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ba06:	2001      	movs	r0, #1
 800ba08:	f000 face 	bl	800bfa8 <RCC_Delay>
 800ba0c:	e01c      	b.n	800ba48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba0e:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <HAL_RCC_OscConfig+0x274>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba14:	f7fd fe92 	bl	800973c <HAL_GetTick>
 800ba18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba1a:	e00f      	b.n	800ba3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba1c:	f7fd fe8e 	bl	800973c <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d908      	bls.n	800ba3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	e146      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
 800ba2e:	bf00      	nop
 800ba30:	40021000 	.word	0x40021000
 800ba34:	42420000 	.word	0x42420000
 800ba38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba3c:	4b92      	ldr	r3, [pc, #584]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1e9      	bne.n	800ba1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f000 80a6 	beq.w	800bba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba56:	2300      	movs	r3, #0
 800ba58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba5a:	4b8b      	ldr	r3, [pc, #556]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10d      	bne.n	800ba82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba66:	4b88      	ldr	r3, [pc, #544]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	4a87      	ldr	r2, [pc, #540]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800ba6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba70:	61d3      	str	r3, [r2, #28]
 800ba72:	4b85      	ldr	r3, [pc, #532]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba7a:	60bb      	str	r3, [r7, #8]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba82:	4b82      	ldr	r3, [pc, #520]	; (800bc8c <HAL_RCC_OscConfig+0x4c8>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d118      	bne.n	800bac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ba8e:	4b7f      	ldr	r3, [pc, #508]	; (800bc8c <HAL_RCC_OscConfig+0x4c8>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a7e      	ldr	r2, [pc, #504]	; (800bc8c <HAL_RCC_OscConfig+0x4c8>)
 800ba94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba9a:	f7fd fe4f 	bl	800973c <HAL_GetTick>
 800ba9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800baa0:	e008      	b.n	800bab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800baa2:	f7fd fe4b 	bl	800973c <HAL_GetTick>
 800baa6:	4602      	mov	r2, r0
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	2b64      	cmp	r3, #100	; 0x64
 800baae:	d901      	bls.n	800bab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bab0:	2303      	movs	r3, #3
 800bab2:	e103      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bab4:	4b75      	ldr	r3, [pc, #468]	; (800bc8c <HAL_RCC_OscConfig+0x4c8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800babc:	2b00      	cmp	r3, #0
 800babe:	d0f0      	beq.n	800baa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d106      	bne.n	800bad6 <HAL_RCC_OscConfig+0x312>
 800bac8:	4b6f      	ldr	r3, [pc, #444]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800baca:	6a1b      	ldr	r3, [r3, #32]
 800bacc:	4a6e      	ldr	r2, [pc, #440]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bace:	f043 0301 	orr.w	r3, r3, #1
 800bad2:	6213      	str	r3, [r2, #32]
 800bad4:	e02d      	b.n	800bb32 <HAL_RCC_OscConfig+0x36e>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10c      	bne.n	800baf8 <HAL_RCC_OscConfig+0x334>
 800bade:	4b6a      	ldr	r3, [pc, #424]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	4a69      	ldr	r2, [pc, #420]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bae4:	f023 0301 	bic.w	r3, r3, #1
 800bae8:	6213      	str	r3, [r2, #32]
 800baea:	4b67      	ldr	r3, [pc, #412]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	4a66      	ldr	r2, [pc, #408]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800baf0:	f023 0304 	bic.w	r3, r3, #4
 800baf4:	6213      	str	r3, [r2, #32]
 800baf6:	e01c      	b.n	800bb32 <HAL_RCC_OscConfig+0x36e>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	2b05      	cmp	r3, #5
 800bafe:	d10c      	bne.n	800bb1a <HAL_RCC_OscConfig+0x356>
 800bb00:	4b61      	ldr	r3, [pc, #388]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb02:	6a1b      	ldr	r3, [r3, #32]
 800bb04:	4a60      	ldr	r2, [pc, #384]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb06:	f043 0304 	orr.w	r3, r3, #4
 800bb0a:	6213      	str	r3, [r2, #32]
 800bb0c:	4b5e      	ldr	r3, [pc, #376]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	4a5d      	ldr	r2, [pc, #372]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb12:	f043 0301 	orr.w	r3, r3, #1
 800bb16:	6213      	str	r3, [r2, #32]
 800bb18:	e00b      	b.n	800bb32 <HAL_RCC_OscConfig+0x36e>
 800bb1a:	4b5b      	ldr	r3, [pc, #364]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	4a5a      	ldr	r2, [pc, #360]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb20:	f023 0301 	bic.w	r3, r3, #1
 800bb24:	6213      	str	r3, [r2, #32]
 800bb26:	4b58      	ldr	r3, [pc, #352]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	4a57      	ldr	r2, [pc, #348]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb2c:	f023 0304 	bic.w	r3, r3, #4
 800bb30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d015      	beq.n	800bb66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb3a:	f7fd fdff 	bl	800973c <HAL_GetTick>
 800bb3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb40:	e00a      	b.n	800bb58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb42:	f7fd fdfb 	bl	800973c <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d901      	bls.n	800bb58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e0b1      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb58:	4b4b      	ldr	r3, [pc, #300]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb5a:	6a1b      	ldr	r3, [r3, #32]
 800bb5c:	f003 0302 	and.w	r3, r3, #2
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d0ee      	beq.n	800bb42 <HAL_RCC_OscConfig+0x37e>
 800bb64:	e014      	b.n	800bb90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb66:	f7fd fde9 	bl	800973c <HAL_GetTick>
 800bb6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb6c:	e00a      	b.n	800bb84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb6e:	f7fd fde5 	bl	800973c <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d901      	bls.n	800bb84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e09b      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb84:	4b40      	ldr	r3, [pc, #256]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb86:	6a1b      	ldr	r3, [r3, #32]
 800bb88:	f003 0302 	and.w	r3, r3, #2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1ee      	bne.n	800bb6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bb90:	7dfb      	ldrb	r3, [r7, #23]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d105      	bne.n	800bba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb96:	4b3c      	ldr	r3, [pc, #240]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb98:	69db      	ldr	r3, [r3, #28]
 800bb9a:	4a3b      	ldr	r2, [pc, #236]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bb9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 8087 	beq.w	800bcba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bbac:	4b36      	ldr	r3, [pc, #216]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f003 030c 	and.w	r3, r3, #12
 800bbb4:	2b08      	cmp	r3, #8
 800bbb6:	d061      	beq.n	800bc7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d146      	bne.n	800bc4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbc0:	4b33      	ldr	r3, [pc, #204]	; (800bc90 <HAL_RCC_OscConfig+0x4cc>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbc6:	f7fd fdb9 	bl	800973c <HAL_GetTick>
 800bbca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bbcc:	e008      	b.n	800bbe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbce:	f7fd fdb5 	bl	800973c <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d901      	bls.n	800bbe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e06d      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bbe0:	4b29      	ldr	r3, [pc, #164]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1f0      	bne.n	800bbce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbf4:	d108      	bne.n	800bc08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bbf6:	4b24      	ldr	r3, [pc, #144]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	4921      	ldr	r1, [pc, #132]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc08:	4b1f      	ldr	r3, [pc, #124]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a19      	ldr	r1, [r3, #32]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	430b      	orrs	r3, r1
 800bc1a:	491b      	ldr	r1, [pc, #108]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc20:	4b1b      	ldr	r3, [pc, #108]	; (800bc90 <HAL_RCC_OscConfig+0x4cc>)
 800bc22:	2201      	movs	r2, #1
 800bc24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc26:	f7fd fd89 	bl	800973c <HAL_GetTick>
 800bc2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bc2c:	e008      	b.n	800bc40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc2e:	f7fd fd85 	bl	800973c <HAL_GetTick>
 800bc32:	4602      	mov	r2, r0
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d901      	bls.n	800bc40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	e03d      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bc40:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d0f0      	beq.n	800bc2e <HAL_RCC_OscConfig+0x46a>
 800bc4c:	e035      	b.n	800bcba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc4e:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <HAL_RCC_OscConfig+0x4cc>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc54:	f7fd fd72 	bl	800973c <HAL_GetTick>
 800bc58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc5a:	e008      	b.n	800bc6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc5c:	f7fd fd6e 	bl	800973c <HAL_GetTick>
 800bc60:	4602      	mov	r2, r0
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d901      	bls.n	800bc6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e026      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc6e:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <HAL_RCC_OscConfig+0x4c4>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1f0      	bne.n	800bc5c <HAL_RCC_OscConfig+0x498>
 800bc7a:	e01e      	b.n	800bcba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d107      	bne.n	800bc94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e019      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
 800bc88:	40021000 	.word	0x40021000
 800bc8c:	40007000 	.word	0x40007000
 800bc90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bc94:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <HAL_RCC_OscConfig+0x500>)
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6a1b      	ldr	r3, [r3, #32]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d106      	bne.n	800bcb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d001      	beq.n	800bcba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	40021000 	.word	0x40021000

0800bcc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e0d0      	b.n	800be7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bcdc:	4b6a      	ldr	r3, [pc, #424]	; (800be88 <HAL_RCC_ClockConfig+0x1c0>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0307 	and.w	r3, r3, #7
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d910      	bls.n	800bd0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcea:	4b67      	ldr	r3, [pc, #412]	; (800be88 <HAL_RCC_ClockConfig+0x1c0>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f023 0207 	bic.w	r2, r3, #7
 800bcf2:	4965      	ldr	r1, [pc, #404]	; (800be88 <HAL_RCC_ClockConfig+0x1c0>)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcfa:	4b63      	ldr	r3, [pc, #396]	; (800be88 <HAL_RCC_ClockConfig+0x1c0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 0307 	and.w	r3, r3, #7
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d001      	beq.n	800bd0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e0b8      	b.n	800be7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d020      	beq.n	800bd5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d005      	beq.n	800bd30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd24:	4b59      	ldr	r3, [pc, #356]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	4a58      	ldr	r2, [pc, #352]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bd2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0308 	and.w	r3, r3, #8
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d005      	beq.n	800bd48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd3c:	4b53      	ldr	r3, [pc, #332]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	4a52      	ldr	r2, [pc, #328]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800bd46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd48:	4b50      	ldr	r3, [pc, #320]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	494d      	ldr	r1, [pc, #308]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd56:	4313      	orrs	r3, r2
 800bd58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d040      	beq.n	800bde8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d107      	bne.n	800bd7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd6e:	4b47      	ldr	r3, [pc, #284]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d115      	bne.n	800bda6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e07f      	b.n	800be7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d107      	bne.n	800bd96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd86:	4b41      	ldr	r3, [pc, #260]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d109      	bne.n	800bda6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e073      	b.n	800be7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd96:	4b3d      	ldr	r3, [pc, #244]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 0302 	and.w	r3, r3, #2
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e06b      	b.n	800be7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bda6:	4b39      	ldr	r3, [pc, #228]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	f023 0203 	bic.w	r2, r3, #3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	4936      	ldr	r1, [pc, #216]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bdb8:	f7fd fcc0 	bl	800973c <HAL_GetTick>
 800bdbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdbe:	e00a      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdc0:	f7fd fcbc 	bl	800973c <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d901      	bls.n	800bdd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	e053      	b.n	800be7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdd6:	4b2d      	ldr	r3, [pc, #180]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	f003 020c 	and.w	r2, r3, #12
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d1eb      	bne.n	800bdc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bde8:	4b27      	ldr	r3, [pc, #156]	; (800be88 <HAL_RCC_ClockConfig+0x1c0>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 0307 	and.w	r3, r3, #7
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d210      	bcs.n	800be18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdf6:	4b24      	ldr	r3, [pc, #144]	; (800be88 <HAL_RCC_ClockConfig+0x1c0>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f023 0207 	bic.w	r2, r3, #7
 800bdfe:	4922      	ldr	r1, [pc, #136]	; (800be88 <HAL_RCC_ClockConfig+0x1c0>)
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	4313      	orrs	r3, r2
 800be04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be06:	4b20      	ldr	r3, [pc, #128]	; (800be88 <HAL_RCC_ClockConfig+0x1c0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 0307 	and.w	r3, r3, #7
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d001      	beq.n	800be18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	e032      	b.n	800be7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 0304 	and.w	r3, r3, #4
 800be20:	2b00      	cmp	r3, #0
 800be22:	d008      	beq.n	800be36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be24:	4b19      	ldr	r3, [pc, #100]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	4916      	ldr	r1, [pc, #88]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800be32:	4313      	orrs	r3, r2
 800be34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f003 0308 	and.w	r3, r3, #8
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d009      	beq.n	800be56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800be42:	4b12      	ldr	r3, [pc, #72]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	490e      	ldr	r1, [pc, #56]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800be52:	4313      	orrs	r3, r2
 800be54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800be56:	f000 f821 	bl	800be9c <HAL_RCC_GetSysClockFreq>
 800be5a:	4602      	mov	r2, r0
 800be5c:	4b0b      	ldr	r3, [pc, #44]	; (800be8c <HAL_RCC_ClockConfig+0x1c4>)
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	091b      	lsrs	r3, r3, #4
 800be62:	f003 030f 	and.w	r3, r3, #15
 800be66:	490a      	ldr	r1, [pc, #40]	; (800be90 <HAL_RCC_ClockConfig+0x1c8>)
 800be68:	5ccb      	ldrb	r3, [r1, r3]
 800be6a:	fa22 f303 	lsr.w	r3, r2, r3
 800be6e:	4a09      	ldr	r2, [pc, #36]	; (800be94 <HAL_RCC_ClockConfig+0x1cc>)
 800be70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800be72:	4b09      	ldr	r3, [pc, #36]	; (800be98 <HAL_RCC_ClockConfig+0x1d0>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f7fd fc1e 	bl	80096b8 <HAL_InitTick>

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	40022000 	.word	0x40022000
 800be8c:	40021000 	.word	0x40021000
 800be90:	0800edf4 	.word	0x0800edf4
 800be94:	200009a0 	.word	0x200009a0
 800be98:	200009a4 	.word	0x200009a4

0800be9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	60fb      	str	r3, [r7, #12]
 800bea6:	2300      	movs	r3, #0
 800bea8:	60bb      	str	r3, [r7, #8]
 800beaa:	2300      	movs	r3, #0
 800beac:	617b      	str	r3, [r7, #20]
 800beae:	2300      	movs	r3, #0
 800beb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800beb2:	2300      	movs	r3, #0
 800beb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800beb6:	4b1e      	ldr	r3, [pc, #120]	; (800bf30 <HAL_RCC_GetSysClockFreq+0x94>)
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f003 030c 	and.w	r3, r3, #12
 800bec2:	2b04      	cmp	r3, #4
 800bec4:	d002      	beq.n	800becc <HAL_RCC_GetSysClockFreq+0x30>
 800bec6:	2b08      	cmp	r3, #8
 800bec8:	d003      	beq.n	800bed2 <HAL_RCC_GetSysClockFreq+0x36>
 800beca:	e027      	b.n	800bf1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800becc:	4b19      	ldr	r3, [pc, #100]	; (800bf34 <HAL_RCC_GetSysClockFreq+0x98>)
 800bece:	613b      	str	r3, [r7, #16]
      break;
 800bed0:	e027      	b.n	800bf22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	0c9b      	lsrs	r3, r3, #18
 800bed6:	f003 030f 	and.w	r3, r3, #15
 800beda:	4a17      	ldr	r2, [pc, #92]	; (800bf38 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bedc:	5cd3      	ldrb	r3, [r2, r3]
 800bede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d010      	beq.n	800bf0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800beea:	4b11      	ldr	r3, [pc, #68]	; (800bf30 <HAL_RCC_GetSysClockFreq+0x94>)
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	0c5b      	lsrs	r3, r3, #17
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	4a11      	ldr	r2, [pc, #68]	; (800bf3c <HAL_RCC_GetSysClockFreq+0xa0>)
 800bef6:	5cd3      	ldrb	r3, [r2, r3]
 800bef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a0d      	ldr	r2, [pc, #52]	; (800bf34 <HAL_RCC_GetSysClockFreq+0x98>)
 800befe:	fb03 f202 	mul.w	r2, r3, r2
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf08:	617b      	str	r3, [r7, #20]
 800bf0a:	e004      	b.n	800bf16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a0c      	ldr	r2, [pc, #48]	; (800bf40 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bf10:	fb02 f303 	mul.w	r3, r2, r3
 800bf14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	613b      	str	r3, [r7, #16]
      break;
 800bf1a:	e002      	b.n	800bf22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bf1c:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <HAL_RCC_GetSysClockFreq+0x98>)
 800bf1e:	613b      	str	r3, [r7, #16]
      break;
 800bf20:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf22:	693b      	ldr	r3, [r7, #16]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	371c      	adds	r7, #28
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bc80      	pop	{r7}
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	40021000 	.word	0x40021000
 800bf34:	007a1200 	.word	0x007a1200
 800bf38:	0800ee0c 	.word	0x0800ee0c
 800bf3c:	0800ee1c 	.word	0x0800ee1c
 800bf40:	003d0900 	.word	0x003d0900

0800bf44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf44:	b480      	push	{r7}
 800bf46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf48:	4b02      	ldr	r3, [pc, #8]	; (800bf54 <HAL_RCC_GetHCLKFreq+0x10>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bc80      	pop	{r7}
 800bf52:	4770      	bx	lr
 800bf54:	200009a0 	.word	0x200009a0

0800bf58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bf5c:	f7ff fff2 	bl	800bf44 <HAL_RCC_GetHCLKFreq>
 800bf60:	4602      	mov	r2, r0
 800bf62:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	0a1b      	lsrs	r3, r3, #8
 800bf68:	f003 0307 	and.w	r3, r3, #7
 800bf6c:	4903      	ldr	r1, [pc, #12]	; (800bf7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bf6e:	5ccb      	ldrb	r3, [r1, r3]
 800bf70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	40021000 	.word	0x40021000
 800bf7c:	0800ee04 	.word	0x0800ee04

0800bf80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bf84:	f7ff ffde 	bl	800bf44 <HAL_RCC_GetHCLKFreq>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	0adb      	lsrs	r3, r3, #11
 800bf90:	f003 0307 	and.w	r3, r3, #7
 800bf94:	4903      	ldr	r1, [pc, #12]	; (800bfa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bf96:	5ccb      	ldrb	r3, [r1, r3]
 800bf98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	40021000 	.word	0x40021000
 800bfa4:	0800ee04 	.word	0x0800ee04

0800bfa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <RCC_Delay+0x34>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a0a      	ldr	r2, [pc, #40]	; (800bfe0 <RCC_Delay+0x38>)
 800bfb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfba:	0a5b      	lsrs	r3, r3, #9
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	fb02 f303 	mul.w	r3, r2, r3
 800bfc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bfc4:	bf00      	nop
  }
  while (Delay --);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	1e5a      	subs	r2, r3, #1
 800bfca:	60fa      	str	r2, [r7, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1f9      	bne.n	800bfc4 <RCC_Delay+0x1c>
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bc80      	pop	{r7}
 800bfda:	4770      	bx	lr
 800bfdc:	200009a0 	.word	0x200009a0
 800bfe0:	10624dd3 	.word	0x10624dd3

0800bfe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d101      	bne.n	800bff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e041      	b.n	800c07a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7fd fa26 	bl	800945c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2202      	movs	r2, #2
 800c014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	3304      	adds	r3, #4
 800c020:	4619      	mov	r1, r3
 800c022:	4610      	mov	r0, r2
 800c024:	f000 fa82 	bl	800c52c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b01      	cmp	r3, #1
 800c096:	d001      	beq.n	800c09c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	e044      	b.n	800c126 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2202      	movs	r2, #2
 800c0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68da      	ldr	r2, [r3, #12]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f042 0201 	orr.w	r2, r2, #1
 800c0b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a1d      	ldr	r2, [pc, #116]	; (800c130 <HAL_TIM_Base_Start_IT+0xac>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d018      	beq.n	800c0f0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a1c      	ldr	r2, [pc, #112]	; (800c134 <HAL_TIM_Base_Start_IT+0xb0>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d013      	beq.n	800c0f0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0d0:	d00e      	beq.n	800c0f0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a18      	ldr	r2, [pc, #96]	; (800c138 <HAL_TIM_Base_Start_IT+0xb4>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d009      	beq.n	800c0f0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a16      	ldr	r2, [pc, #88]	; (800c13c <HAL_TIM_Base_Start_IT+0xb8>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d004      	beq.n	800c0f0 <HAL_TIM_Base_Start_IT+0x6c>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a15      	ldr	r2, [pc, #84]	; (800c140 <HAL_TIM_Base_Start_IT+0xbc>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d111      	bne.n	800c114 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	f003 0307 	and.w	r3, r3, #7
 800c0fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b06      	cmp	r3, #6
 800c100:	d010      	beq.n	800c124 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f042 0201 	orr.w	r2, r2, #1
 800c110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c112:	e007      	b.n	800c124 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f042 0201 	orr.w	r2, r2, #1
 800c122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bc80      	pop	{r7}
 800c12e:	4770      	bx	lr
 800c130:	40012c00 	.word	0x40012c00
 800c134:	40013400 	.word	0x40013400
 800c138:	40000400 	.word	0x40000400
 800c13c:	40000800 	.word	0x40000800
 800c140:	40000c00 	.word	0x40000c00

0800c144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	f003 0302 	and.w	r3, r3, #2
 800c156:	2b02      	cmp	r3, #2
 800c158:	d122      	bne.n	800c1a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f003 0302 	and.w	r3, r3, #2
 800c164:	2b02      	cmp	r3, #2
 800c166:	d11b      	bne.n	800c1a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f06f 0202 	mvn.w	r2, #2
 800c170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	f003 0303 	and.w	r3, r3, #3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f9b4 	bl	800c4f4 <HAL_TIM_IC_CaptureCallback>
 800c18c:	e005      	b.n	800c19a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f9a7 	bl	800c4e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f9b6 	bl	800c506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	f003 0304 	and.w	r3, r3, #4
 800c1aa:	2b04      	cmp	r3, #4
 800c1ac:	d122      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	f003 0304 	and.w	r3, r3, #4
 800c1b8:	2b04      	cmp	r3, #4
 800c1ba:	d11b      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f06f 0204 	mvn.w	r2, #4
 800c1c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f98a 	bl	800c4f4 <HAL_TIM_IC_CaptureCallback>
 800c1e0:	e005      	b.n	800c1ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f97d 	bl	800c4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f98c 	bl	800c506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	f003 0308 	and.w	r3, r3, #8
 800c1fe:	2b08      	cmp	r3, #8
 800c200:	d122      	bne.n	800c248 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	f003 0308 	and.w	r3, r3, #8
 800c20c:	2b08      	cmp	r3, #8
 800c20e:	d11b      	bne.n	800c248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f06f 0208 	mvn.w	r2, #8
 800c218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2204      	movs	r2, #4
 800c21e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	f003 0303 	and.w	r3, r3, #3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f960 	bl	800c4f4 <HAL_TIM_IC_CaptureCallback>
 800c234:	e005      	b.n	800c242 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f953 	bl	800c4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f962 	bl	800c506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	f003 0310 	and.w	r3, r3, #16
 800c252:	2b10      	cmp	r3, #16
 800c254:	d122      	bne.n	800c29c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	f003 0310 	and.w	r3, r3, #16
 800c260:	2b10      	cmp	r3, #16
 800c262:	d11b      	bne.n	800c29c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f06f 0210 	mvn.w	r2, #16
 800c26c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2208      	movs	r2, #8
 800c272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f936 	bl	800c4f4 <HAL_TIM_IC_CaptureCallback>
 800c288:	e005      	b.n	800c296 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f929 	bl	800c4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f938 	bl	800c506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d10e      	bne.n	800c2c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d107      	bne.n	800c2c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f06f 0201 	mvn.w	r2, #1
 800c2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7fc fd62 	bl	8008d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d2:	2b80      	cmp	r3, #128	; 0x80
 800c2d4:	d10e      	bne.n	800c2f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2e0:	2b80      	cmp	r3, #128	; 0x80
 800c2e2:	d107      	bne.n	800c2f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 faa1 	bl	800c836 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fe:	2b40      	cmp	r3, #64	; 0x40
 800c300:	d10e      	bne.n	800c320 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c30c:	2b40      	cmp	r3, #64	; 0x40
 800c30e:	d107      	bne.n	800c320 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f8fc 	bl	800c518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	f003 0320 	and.w	r3, r3, #32
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	d10e      	bne.n	800c34c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	f003 0320 	and.w	r3, r3, #32
 800c338:	2b20      	cmp	r3, #32
 800c33a:	d107      	bne.n	800c34c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f06f 0220 	mvn.w	r2, #32
 800c344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa6c 	bl	800c824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d101      	bne.n	800c370 <HAL_TIM_ConfigClockSource+0x1c>
 800c36c:	2302      	movs	r3, #2
 800c36e:	e0b4      	b.n	800c4da <HAL_TIM_ConfigClockSource+0x186>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2202      	movs	r2, #2
 800c37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c38e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3a8:	d03e      	beq.n	800c428 <HAL_TIM_ConfigClockSource+0xd4>
 800c3aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ae:	f200 8087 	bhi.w	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3b6:	f000 8086 	beq.w	800c4c6 <HAL_TIM_ConfigClockSource+0x172>
 800c3ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3be:	d87f      	bhi.n	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c3c0:	2b70      	cmp	r3, #112	; 0x70
 800c3c2:	d01a      	beq.n	800c3fa <HAL_TIM_ConfigClockSource+0xa6>
 800c3c4:	2b70      	cmp	r3, #112	; 0x70
 800c3c6:	d87b      	bhi.n	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c3c8:	2b60      	cmp	r3, #96	; 0x60
 800c3ca:	d050      	beq.n	800c46e <HAL_TIM_ConfigClockSource+0x11a>
 800c3cc:	2b60      	cmp	r3, #96	; 0x60
 800c3ce:	d877      	bhi.n	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c3d0:	2b50      	cmp	r3, #80	; 0x50
 800c3d2:	d03c      	beq.n	800c44e <HAL_TIM_ConfigClockSource+0xfa>
 800c3d4:	2b50      	cmp	r3, #80	; 0x50
 800c3d6:	d873      	bhi.n	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c3d8:	2b40      	cmp	r3, #64	; 0x40
 800c3da:	d058      	beq.n	800c48e <HAL_TIM_ConfigClockSource+0x13a>
 800c3dc:	2b40      	cmp	r3, #64	; 0x40
 800c3de:	d86f      	bhi.n	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c3e0:	2b30      	cmp	r3, #48	; 0x30
 800c3e2:	d064      	beq.n	800c4ae <HAL_TIM_ConfigClockSource+0x15a>
 800c3e4:	2b30      	cmp	r3, #48	; 0x30
 800c3e6:	d86b      	bhi.n	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c3e8:	2b20      	cmp	r3, #32
 800c3ea:	d060      	beq.n	800c4ae <HAL_TIM_ConfigClockSource+0x15a>
 800c3ec:	2b20      	cmp	r3, #32
 800c3ee:	d867      	bhi.n	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d05c      	beq.n	800c4ae <HAL_TIM_ConfigClockSource+0x15a>
 800c3f4:	2b10      	cmp	r3, #16
 800c3f6:	d05a      	beq.n	800c4ae <HAL_TIM_ConfigClockSource+0x15a>
 800c3f8:	e062      	b.n	800c4c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c40a:	f000 f980 	bl	800c70e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c41c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	609a      	str	r2, [r3, #8]
      break;
 800c426:	e04f      	b.n	800c4c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c438:	f000 f969 	bl	800c70e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	689a      	ldr	r2, [r3, #8]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c44a:	609a      	str	r2, [r3, #8]
      break;
 800c44c:	e03c      	b.n	800c4c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c45a:	461a      	mov	r2, r3
 800c45c:	f000 f8e0 	bl	800c620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2150      	movs	r1, #80	; 0x50
 800c466:	4618      	mov	r0, r3
 800c468:	f000 f937 	bl	800c6da <TIM_ITRx_SetConfig>
      break;
 800c46c:	e02c      	b.n	800c4c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c47a:	461a      	mov	r2, r3
 800c47c:	f000 f8fe 	bl	800c67c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2160      	movs	r1, #96	; 0x60
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f927 	bl	800c6da <TIM_ITRx_SetConfig>
      break;
 800c48c:	e01c      	b.n	800c4c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c49a:	461a      	mov	r2, r3
 800c49c:	f000 f8c0 	bl	800c620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2140      	movs	r1, #64	; 0x40
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 f917 	bl	800c6da <TIM_ITRx_SetConfig>
      break;
 800c4ac:	e00c      	b.n	800c4c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	f000 f90e 	bl	800c6da <TIM_ITRx_SetConfig>
      break;
 800c4be:	e003      	b.n	800c4c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c4:	e000      	b.n	800c4c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c4c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b083      	sub	sp, #12
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bc80      	pop	{r7}
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	bc80      	pop	{r7}
 800c504:	4770      	bx	lr

0800c506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c506:	b480      	push	{r7}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c50e:	bf00      	nop
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	bc80      	pop	{r7}
 800c516:	4770      	bx	lr

0800c518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	bc80      	pop	{r7}
 800c528:	4770      	bx	lr
	...

0800c52c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a33      	ldr	r2, [pc, #204]	; (800c60c <TIM_Base_SetConfig+0xe0>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d013      	beq.n	800c56c <TIM_Base_SetConfig+0x40>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a32      	ldr	r2, [pc, #200]	; (800c610 <TIM_Base_SetConfig+0xe4>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d00f      	beq.n	800c56c <TIM_Base_SetConfig+0x40>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c552:	d00b      	beq.n	800c56c <TIM_Base_SetConfig+0x40>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a2f      	ldr	r2, [pc, #188]	; (800c614 <TIM_Base_SetConfig+0xe8>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d007      	beq.n	800c56c <TIM_Base_SetConfig+0x40>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a2e      	ldr	r2, [pc, #184]	; (800c618 <TIM_Base_SetConfig+0xec>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d003      	beq.n	800c56c <TIM_Base_SetConfig+0x40>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a2d      	ldr	r2, [pc, #180]	; (800c61c <TIM_Base_SetConfig+0xf0>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d108      	bne.n	800c57e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a22      	ldr	r2, [pc, #136]	; (800c60c <TIM_Base_SetConfig+0xe0>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d013      	beq.n	800c5ae <TIM_Base_SetConfig+0x82>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a21      	ldr	r2, [pc, #132]	; (800c610 <TIM_Base_SetConfig+0xe4>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d00f      	beq.n	800c5ae <TIM_Base_SetConfig+0x82>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c594:	d00b      	beq.n	800c5ae <TIM_Base_SetConfig+0x82>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a1e      	ldr	r2, [pc, #120]	; (800c614 <TIM_Base_SetConfig+0xe8>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d007      	beq.n	800c5ae <TIM_Base_SetConfig+0x82>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a1d      	ldr	r2, [pc, #116]	; (800c618 <TIM_Base_SetConfig+0xec>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d003      	beq.n	800c5ae <TIM_Base_SetConfig+0x82>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a1c      	ldr	r2, [pc, #112]	; (800c61c <TIM_Base_SetConfig+0xf0>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d108      	bne.n	800c5c0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	689a      	ldr	r2, [r3, #8]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a09      	ldr	r2, [pc, #36]	; (800c60c <TIM_Base_SetConfig+0xe0>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d003      	beq.n	800c5f4 <TIM_Base_SetConfig+0xc8>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a08      	ldr	r2, [pc, #32]	; (800c610 <TIM_Base_SetConfig+0xe4>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d103      	bne.n	800c5fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	691a      	ldr	r2, [r3, #16]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	615a      	str	r2, [r3, #20]
}
 800c602:	bf00      	nop
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	bc80      	pop	{r7}
 800c60a:	4770      	bx	lr
 800c60c:	40012c00 	.word	0x40012c00
 800c610:	40013400 	.word	0x40013400
 800c614:	40000400 	.word	0x40000400
 800c618:	40000800 	.word	0x40000800
 800c61c:	40000c00 	.word	0x40000c00

0800c620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6a1b      	ldr	r3, [r3, #32]
 800c630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	f023 0201 	bic.w	r2, r3, #1
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c64a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	011b      	lsls	r3, r3, #4
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	4313      	orrs	r3, r2
 800c654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	f023 030a 	bic.w	r3, r3, #10
 800c65c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	4313      	orrs	r3, r2
 800c664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	621a      	str	r2, [r3, #32]
}
 800c672:	bf00      	nop
 800c674:	371c      	adds	r7, #28
 800c676:	46bd      	mov	sp, r7
 800c678:	bc80      	pop	{r7}
 800c67a:	4770      	bx	lr

0800c67c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	f023 0210 	bic.w	r2, r3, #16
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	031b      	lsls	r3, r3, #12
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	011b      	lsls	r3, r3, #4
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	621a      	str	r2, [r3, #32]
}
 800c6d0:	bf00      	nop
 800c6d2:	371c      	adds	r7, #28
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bc80      	pop	{r7}
 800c6d8:	4770      	bx	lr

0800c6da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b085      	sub	sp, #20
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	f043 0307 	orr.w	r3, r3, #7
 800c6fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	609a      	str	r2, [r3, #8]
}
 800c704:	bf00      	nop
 800c706:	3714      	adds	r7, #20
 800c708:	46bd      	mov	sp, r7
 800c70a:	bc80      	pop	{r7}
 800c70c:	4770      	bx	lr

0800c70e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c70e:	b480      	push	{r7}
 800c710:	b087      	sub	sp, #28
 800c712:	af00      	add	r7, sp, #0
 800c714:	60f8      	str	r0, [r7, #12]
 800c716:	60b9      	str	r1, [r7, #8]
 800c718:	607a      	str	r2, [r7, #4]
 800c71a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c728:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	021a      	lsls	r2, r3, #8
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	431a      	orrs	r2, r3
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	4313      	orrs	r3, r2
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	4313      	orrs	r3, r2
 800c73a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	697a      	ldr	r2, [r7, #20]
 800c740:	609a      	str	r2, [r3, #8]
}
 800c742:	bf00      	nop
 800c744:	371c      	adds	r7, #28
 800c746:	46bd      	mov	sp, r7
 800c748:	bc80      	pop	{r7}
 800c74a:	4770      	bx	lr

0800c74c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c760:	2302      	movs	r3, #2
 800c762:	e050      	b.n	800c806 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c78a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	4313      	orrs	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a1b      	ldr	r2, [pc, #108]	; (800c810 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d018      	beq.n	800c7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a19      	ldr	r2, [pc, #100]	; (800c814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d013      	beq.n	800c7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ba:	d00e      	beq.n	800c7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a15      	ldr	r2, [pc, #84]	; (800c818 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d009      	beq.n	800c7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a14      	ldr	r2, [pc, #80]	; (800c81c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d004      	beq.n	800c7da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a12      	ldr	r2, [pc, #72]	; (800c820 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d10c      	bne.n	800c7f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bc80      	pop	{r7}
 800c80e:	4770      	bx	lr
 800c810:	40012c00 	.word	0x40012c00
 800c814:	40013400 	.word	0x40013400
 800c818:	40000400 	.word	0x40000400
 800c81c:	40000800 	.word	0x40000800
 800c820:	40000c00 	.word	0x40000c00

0800c824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	bc80      	pop	{r7}
 800c834:	4770      	bx	lr

0800c836 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c836:	b480      	push	{r7}
 800c838:	b083      	sub	sp, #12
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c83e:	bf00      	nop
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	bc80      	pop	{r7}
 800c846:	4770      	bx	lr

0800c848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d101      	bne.n	800c85a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e042      	b.n	800c8e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7fc fe1a 	bl	80094a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2224      	movs	r2, #36	; 0x24
 800c878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68da      	ldr	r2, [r3, #12]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c88a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fd11 	bl	800d2b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	691a      	ldr	r2, [r3, #16]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	695a      	ldr	r2, [r3, #20]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68da      	ldr	r2, [r3, #12]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2220      	movs	r2, #32
 800c8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b20      	cmp	r3, #32
 800c900:	d121      	bne.n	800c946 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <HAL_UART_Transmit_IT+0x26>
 800c908:	88fb      	ldrh	r3, [r7, #6]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e01a      	b.n	800c948 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	88fa      	ldrh	r2, [r7, #6]
 800c91c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	88fa      	ldrh	r2, [r7, #6]
 800c922:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2221      	movs	r2, #33	; 0x21
 800c92e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68da      	ldr	r2, [r3, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c940:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	e000      	b.n	800c948 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c946:	2302      	movs	r3, #2
  }
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bc80      	pop	{r7}
 800c950:	4770      	bx	lr

0800c952 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b084      	sub	sp, #16
 800c956:	af00      	add	r7, sp, #0
 800c958:	60f8      	str	r0, [r7, #12]
 800c95a:	60b9      	str	r1, [r7, #8]
 800c95c:	4613      	mov	r3, r2
 800c95e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b20      	cmp	r3, #32
 800c96a:	d112      	bne.n	800c992 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d002      	beq.n	800c978 <HAL_UART_Receive_IT+0x26>
 800c972:	88fb      	ldrh	r3, [r7, #6]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	e00b      	b.n	800c994 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2200      	movs	r2, #0
 800c980:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c982:	88fb      	ldrh	r3, [r7, #6]
 800c984:	461a      	mov	r2, r3
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 fabf 	bl	800cf0c <UART_Start_Receive_IT>
 800c98e:	4603      	mov	r3, r0
 800c990:	e000      	b.n	800c994 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c992:	2302      	movs	r3, #2
  }
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b0ba      	sub	sp, #232	; 0xe8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9d2:	f003 030f 	and.w	r3, r3, #15
 800c9d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c9da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10f      	bne.n	800ca02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9e6:	f003 0320 	and.w	r3, r3, #32
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d009      	beq.n	800ca02 <HAL_UART_IRQHandler+0x66>
 800c9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9f2:	f003 0320 	and.w	r3, r3, #32
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d003      	beq.n	800ca02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fb9c 	bl	800d138 <UART_Receive_IT>
      return;
 800ca00:	e25b      	b.n	800ceba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ca02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 80de 	beq.w	800cbc8 <HAL_UART_IRQHandler+0x22c>
 800ca0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d106      	bne.n	800ca26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ca18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 80d1 	beq.w	800cbc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ca26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00b      	beq.n	800ca4a <HAL_UART_IRQHandler+0xae>
 800ca32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d005      	beq.n	800ca4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca42:	f043 0201 	orr.w	r2, r3, #1
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca4e:	f003 0304 	and.w	r3, r3, #4
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00b      	beq.n	800ca6e <HAL_UART_IRQHandler+0xd2>
 800ca56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d005      	beq.n	800ca6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca66:	f043 0202 	orr.w	r2, r3, #2
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00b      	beq.n	800ca92 <HAL_UART_IRQHandler+0xf6>
 800ca7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca7e:	f003 0301 	and.w	r3, r3, #1
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d005      	beq.n	800ca92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca8a:	f043 0204 	orr.w	r2, r3, #4
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ca92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca96:	f003 0308 	and.w	r3, r3, #8
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d011      	beq.n	800cac2 <HAL_UART_IRQHandler+0x126>
 800ca9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caa2:	f003 0320 	and.w	r3, r3, #32
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d105      	bne.n	800cab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800caaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caae:	f003 0301 	and.w	r3, r3, #1
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d005      	beq.n	800cac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caba:	f043 0208 	orr.w	r2, r3, #8
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f000 81f2 	beq.w	800ceb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cad0:	f003 0320 	and.w	r3, r3, #32
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d008      	beq.n	800caea <HAL_UART_IRQHandler+0x14e>
 800cad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cadc:	f003 0320 	and.w	r3, r3, #32
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fb27 	bl	800d138 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	bf14      	ite	ne
 800caf8:	2301      	movne	r3, #1
 800cafa:	2300      	moveq	r3, #0
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb06:	f003 0308 	and.w	r3, r3, #8
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d103      	bne.n	800cb16 <HAL_UART_IRQHandler+0x17a>
 800cb0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d04f      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fa31 	bl	800cf7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d041      	beq.n	800cbae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	3314      	adds	r3, #20
 800cb30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb38:	e853 3f00 	ldrex	r3, [r3]
 800cb3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cb40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cb44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3314      	adds	r3, #20
 800cb52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cb56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cb5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cb62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cb6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1d9      	bne.n	800cb2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d013      	beq.n	800cba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb82:	4a7e      	ldr	r2, [pc, #504]	; (800cd7c <HAL_UART_IRQHandler+0x3e0>)
 800cb84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fd f848 	bl	8009c20 <HAL_DMA_Abort_IT>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d016      	beq.n	800cbc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cba0:	4610      	mov	r0, r2
 800cba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba4:	e00e      	b.n	800cbc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f99c 	bl	800cee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbac:	e00a      	b.n	800cbc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f998 	bl	800cee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbb4:	e006      	b.n	800cbc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f994 	bl	800cee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800cbc2:	e175      	b.n	800ceb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbc4:	bf00      	nop
    return;
 800cbc6:	e173      	b.n	800ceb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	f040 814f 	bne.w	800ce70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cbd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbd6:	f003 0310 	and.w	r3, r3, #16
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 8148 	beq.w	800ce70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbe4:	f003 0310 	and.w	r3, r3, #16
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	f000 8141 	beq.w	800ce70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60bb      	str	r3, [r7, #8]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60bb      	str	r3, [r7, #8]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	60bb      	str	r3, [r7, #8]
 800cc02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 80b6 	beq.w	800cd80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cc20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f000 8145 	beq.w	800ceb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cc2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc32:	429a      	cmp	r2, r3
 800cc34:	f080 813e 	bcs.w	800ceb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	2b20      	cmp	r3, #32
 800cc48:	f000 8088 	beq.w	800cd5c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	330c      	adds	r3, #12
 800cc52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc5a:	e853 3f00 	ldrex	r3, [r3]
 800cc5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	330c      	adds	r3, #12
 800cc74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cc78:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cc7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cc84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc88:	e841 2300 	strex	r3, r2, [r1]
 800cc8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cc90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1d9      	bne.n	800cc4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	3314      	adds	r3, #20
 800cc9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cca2:	e853 3f00 	ldrex	r3, [r3]
 800cca6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ccaa:	f023 0301 	bic.w	r3, r3, #1
 800ccae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3314      	adds	r3, #20
 800ccb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ccbc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ccc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ccc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ccc8:	e841 2300 	strex	r3, r2, [r1]
 800cccc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ccce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1e1      	bne.n	800cc98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3314      	adds	r3, #20
 800ccda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccde:	e853 3f00 	ldrex	r3, [r3]
 800cce2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3314      	adds	r3, #20
 800ccf4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ccf8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ccfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ccfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd00:	e841 2300 	strex	r3, r2, [r1]
 800cd04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1e3      	bne.n	800ccd4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2220      	movs	r2, #32
 800cd10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	330c      	adds	r3, #12
 800cd20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd24:	e853 3f00 	ldrex	r3, [r3]
 800cd28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cd2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd2c:	f023 0310 	bic.w	r3, r3, #16
 800cd30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	330c      	adds	r3, #12
 800cd3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cd3e:	65ba      	str	r2, [r7, #88]	; 0x58
 800cd40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd46:	e841 2300 	strex	r3, r2, [r1]
 800cd4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1e3      	bne.n	800cd1a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fc ff27 	bl	8009baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f8bf 	bl	800cef6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cd78:	e09c      	b.n	800ceb4 <HAL_UART_IRQHandler+0x518>
 800cd7a:	bf00      	nop
 800cd7c:	0800d043 	.word	0x0800d043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 808e 	beq.w	800ceb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cd9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 8089 	beq.w	800ceb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	330c      	adds	r3, #12
 800cdac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb0:	e853 3f00 	ldrex	r3, [r3]
 800cdb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	330c      	adds	r3, #12
 800cdc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cdca:	647a      	str	r2, [r7, #68]	; 0x44
 800cdcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cdd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdd2:	e841 2300 	strex	r3, r2, [r1]
 800cdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1e3      	bne.n	800cda6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3314      	adds	r3, #20
 800cde4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde8:	e853 3f00 	ldrex	r3, [r3]
 800cdec:	623b      	str	r3, [r7, #32]
   return(result);
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	f023 0301 	bic.w	r3, r3, #1
 800cdf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3314      	adds	r3, #20
 800cdfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ce02:	633a      	str	r2, [r7, #48]	; 0x30
 800ce04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce0a:	e841 2300 	strex	r3, r2, [r1]
 800ce0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1e3      	bne.n	800cdde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2220      	movs	r2, #32
 800ce1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	330c      	adds	r3, #12
 800ce2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	e853 3f00 	ldrex	r3, [r3]
 800ce32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 0310 	bic.w	r3, r3, #16
 800ce3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	330c      	adds	r3, #12
 800ce44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ce48:	61fa      	str	r2, [r7, #28]
 800ce4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4c:	69b9      	ldr	r1, [r7, #24]
 800ce4e:	69fa      	ldr	r2, [r7, #28]
 800ce50:	e841 2300 	strex	r3, r2, [r1]
 800ce54:	617b      	str	r3, [r7, #20]
   return(result);
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1e3      	bne.n	800ce24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2202      	movs	r2, #2
 800ce60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce66:	4619      	mov	r1, r3
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f844 	bl	800cef6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ce6e:	e023      	b.n	800ceb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ce70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d009      	beq.n	800ce90 <HAL_UART_IRQHandler+0x4f4>
 800ce7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d003      	beq.n	800ce90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f8ee 	bl	800d06a <UART_Transmit_IT>
    return;
 800ce8e:	e014      	b.n	800ceba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ce90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00e      	beq.n	800ceba <HAL_UART_IRQHandler+0x51e>
 800ce9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d008      	beq.n	800ceba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f92d 	bl	800d108 <UART_EndTransmit_IT>
    return;
 800ceae:	e004      	b.n	800ceba <HAL_UART_IRQHandler+0x51e>
    return;
 800ceb0:	bf00      	nop
 800ceb2:	e002      	b.n	800ceba <HAL_UART_IRQHandler+0x51e>
      return;
 800ceb4:	bf00      	nop
 800ceb6:	e000      	b.n	800ceba <HAL_UART_IRQHandler+0x51e>
      return;
 800ceb8:	bf00      	nop
  }
}
 800ceba:	37e8      	adds	r7, #232	; 0xe8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	bc80      	pop	{r7}
 800ced0:	4770      	bx	lr

0800ced2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ced2:	b480      	push	{r7}
 800ced4:	b083      	sub	sp, #12
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ceda:	bf00      	nop
 800cedc:	370c      	adds	r7, #12
 800cede:	46bd      	mov	sp, r7
 800cee0:	bc80      	pop	{r7}
 800cee2:	4770      	bx	lr

0800cee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bc80      	pop	{r7}
 800cef4:	4770      	bx	lr

0800cef6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	460b      	mov	r3, r1
 800cf00:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf02:	bf00      	nop
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bc80      	pop	{r7}
 800cf0a:	4770      	bx	lr

0800cf0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	4613      	mov	r3, r2
 800cf18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	88fa      	ldrh	r2, [r7, #6]
 800cf24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	88fa      	ldrh	r2, [r7, #6]
 800cf2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2222      	movs	r2, #34	; 0x22
 800cf36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d007      	beq.n	800cf52 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68da      	ldr	r2, [r3, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	695a      	ldr	r2, [r3, #20]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f042 0201 	orr.w	r2, r2, #1
 800cf60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68da      	ldr	r2, [r3, #12]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f042 0220 	orr.w	r2, r2, #32
 800cf70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bc80      	pop	{r7}
 800cf7c:	4770      	bx	lr

0800cf7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf7e:	b480      	push	{r7}
 800cf80:	b095      	sub	sp, #84	; 0x54
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	330c      	adds	r3, #12
 800cf8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf90:	e853 3f00 	ldrex	r3, [r3]
 800cf94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	330c      	adds	r3, #12
 800cfa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfa6:	643a      	str	r2, [r7, #64]	; 0x40
 800cfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfae:	e841 2300 	strex	r3, r2, [r1]
 800cfb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1e5      	bne.n	800cf86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	3314      	adds	r3, #20
 800cfc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	e853 3f00 	ldrex	r3, [r3]
 800cfc8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	f023 0301 	bic.w	r3, r3, #1
 800cfd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3314      	adds	r3, #20
 800cfd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfda:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfe2:	e841 2300 	strex	r3, r2, [r1]
 800cfe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1e5      	bne.n	800cfba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d119      	bne.n	800d02a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	330c      	adds	r3, #12
 800cffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	e853 3f00 	ldrex	r3, [r3]
 800d004:	60bb      	str	r3, [r7, #8]
   return(result);
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	f023 0310 	bic.w	r3, r3, #16
 800d00c:	647b      	str	r3, [r7, #68]	; 0x44
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	330c      	adds	r3, #12
 800d014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d016:	61ba      	str	r2, [r7, #24]
 800d018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01a:	6979      	ldr	r1, [r7, #20]
 800d01c:	69ba      	ldr	r2, [r7, #24]
 800d01e:	e841 2300 	strex	r3, r2, [r1]
 800d022:	613b      	str	r3, [r7, #16]
   return(result);
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1e5      	bne.n	800cff6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2220      	movs	r2, #32
 800d02e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d038:	bf00      	nop
 800d03a:	3754      	adds	r7, #84	; 0x54
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bc80      	pop	{r7}
 800d040:	4770      	bx	lr

0800d042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f7ff ff41 	bl	800cee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d062:	bf00      	nop
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b085      	sub	sp, #20
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	2b21      	cmp	r3, #33	; 0x21
 800d07c:	d13e      	bne.n	800d0fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d086:	d114      	bne.n	800d0b2 <UART_Transmit_IT+0x48>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d110      	bne.n	800d0b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6a1b      	ldr	r3, [r3, #32]
 800d094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	461a      	mov	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a1b      	ldr	r3, [r3, #32]
 800d0aa:	1c9a      	adds	r2, r3, #2
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	621a      	str	r2, [r3, #32]
 800d0b0:	e008      	b.n	800d0c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6a1b      	ldr	r3, [r3, #32]
 800d0b6:	1c59      	adds	r1, r3, #1
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	6211      	str	r1, [r2, #32]
 800d0bc:	781a      	ldrb	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10f      	bne.n	800d0f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68da      	ldr	r2, [r3, #12]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68da      	ldr	r2, [r3, #12]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	e000      	b.n	800d0fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d0fc:	2302      	movs	r3, #2
  }
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3714      	adds	r7, #20
 800d102:	46bd      	mov	sp, r7
 800d104:	bc80      	pop	{r7}
 800d106:	4770      	bx	lr

0800d108 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68da      	ldr	r2, [r3, #12]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d11e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2220      	movs	r2, #32
 800d124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff fec9 	bl	800cec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08c      	sub	sp, #48	; 0x30
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b22      	cmp	r3, #34	; 0x22
 800d14a:	f040 80ae 	bne.w	800d2aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d156:	d117      	bne.n	800d188 <UART_Receive_IT+0x50>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d113      	bne.n	800d188 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d168:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	b29b      	uxth	r3, r3
 800d172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d176:	b29a      	uxth	r2, r3
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d180:	1c9a      	adds	r2, r3, #2
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	629a      	str	r2, [r3, #40]	; 0x28
 800d186:	e026      	b.n	800d1d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d18e:	2300      	movs	r3, #0
 800d190:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d19a:	d007      	beq.n	800d1ac <UART_Receive_IT+0x74>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <UART_Receive_IT+0x82>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d106      	bne.n	800d1ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	701a      	strb	r2, [r3, #0]
 800d1b8:	e008      	b.n	800d1cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d15d      	bne.n	800d2a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	68da      	ldr	r2, [r3, #12]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f022 0220 	bic.w	r2, r2, #32
 800d1f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68da      	ldr	r2, [r3, #12]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d208:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	695a      	ldr	r2, [r3, #20]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f022 0201 	bic.w	r2, r2, #1
 800d218:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2220      	movs	r2, #32
 800d21e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d135      	bne.n	800d29c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	330c      	adds	r3, #12
 800d23c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	e853 3f00 	ldrex	r3, [r3]
 800d244:	613b      	str	r3, [r7, #16]
   return(result);
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	f023 0310 	bic.w	r3, r3, #16
 800d24c:	627b      	str	r3, [r7, #36]	; 0x24
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	330c      	adds	r3, #12
 800d254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d256:	623a      	str	r2, [r7, #32]
 800d258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25a:	69f9      	ldr	r1, [r7, #28]
 800d25c:	6a3a      	ldr	r2, [r7, #32]
 800d25e:	e841 2300 	strex	r3, r2, [r1]
 800d262:	61bb      	str	r3, [r7, #24]
   return(result);
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1e5      	bne.n	800d236 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f003 0310 	and.w	r3, r3, #16
 800d274:	2b10      	cmp	r3, #16
 800d276:	d10a      	bne.n	800d28e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d278:	2300      	movs	r3, #0
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	60fb      	str	r3, [r7, #12]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7ff fe2e 	bl	800cef6 <HAL_UARTEx_RxEventCallback>
 800d29a:	e002      	b.n	800d2a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7ff fe18 	bl	800ced2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e002      	b.n	800d2ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e000      	b.n	800d2ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d2aa:	2302      	movs	r3, #2
  }
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3730      	adds	r7, #48	; 0x30
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68da      	ldr	r2, [r3, #12]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	430a      	orrs	r2, r1
 800d2d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	689a      	ldr	r2, [r3, #8]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d2ee:	f023 030c 	bic.w	r3, r3, #12
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	6812      	ldr	r2, [r2, #0]
 800d2f6:	68b9      	ldr	r1, [r7, #8]
 800d2f8:	430b      	orrs	r3, r1
 800d2fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	699a      	ldr	r2, [r3, #24]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	430a      	orrs	r2, r1
 800d310:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a2c      	ldr	r2, [pc, #176]	; (800d3c8 <UART_SetConfig+0x114>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d103      	bne.n	800d324 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d31c:	f7fe fe30 	bl	800bf80 <HAL_RCC_GetPCLK2Freq>
 800d320:	60f8      	str	r0, [r7, #12]
 800d322:	e002      	b.n	800d32a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d324:	f7fe fe18 	bl	800bf58 <HAL_RCC_GetPCLK1Freq>
 800d328:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	4613      	mov	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	009a      	lsls	r2, r3, #2
 800d334:	441a      	add	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d340:	4a22      	ldr	r2, [pc, #136]	; (800d3cc <UART_SetConfig+0x118>)
 800d342:	fba2 2303 	umull	r2, r3, r2, r3
 800d346:	095b      	lsrs	r3, r3, #5
 800d348:	0119      	lsls	r1, r3, #4
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	4613      	mov	r3, r2
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	4413      	add	r3, r2
 800d352:	009a      	lsls	r2, r3, #2
 800d354:	441a      	add	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d360:	4b1a      	ldr	r3, [pc, #104]	; (800d3cc <UART_SetConfig+0x118>)
 800d362:	fba3 0302 	umull	r0, r3, r3, r2
 800d366:	095b      	lsrs	r3, r3, #5
 800d368:	2064      	movs	r0, #100	; 0x64
 800d36a:	fb00 f303 	mul.w	r3, r0, r3
 800d36e:	1ad3      	subs	r3, r2, r3
 800d370:	011b      	lsls	r3, r3, #4
 800d372:	3332      	adds	r3, #50	; 0x32
 800d374:	4a15      	ldr	r2, [pc, #84]	; (800d3cc <UART_SetConfig+0x118>)
 800d376:	fba2 2303 	umull	r2, r3, r2, r3
 800d37a:	095b      	lsrs	r3, r3, #5
 800d37c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d380:	4419      	add	r1, r3
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	009a      	lsls	r2, r3, #2
 800d38c:	441a      	add	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	fbb2 f2f3 	udiv	r2, r2, r3
 800d398:	4b0c      	ldr	r3, [pc, #48]	; (800d3cc <UART_SetConfig+0x118>)
 800d39a:	fba3 0302 	umull	r0, r3, r3, r2
 800d39e:	095b      	lsrs	r3, r3, #5
 800d3a0:	2064      	movs	r0, #100	; 0x64
 800d3a2:	fb00 f303 	mul.w	r3, r0, r3
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	3332      	adds	r3, #50	; 0x32
 800d3ac:	4a07      	ldr	r2, [pc, #28]	; (800d3cc <UART_SetConfig+0x118>)
 800d3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b2:	095b      	lsrs	r3, r3, #5
 800d3b4:	f003 020f 	and.w	r2, r3, #15
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	440a      	add	r2, r1
 800d3be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d3c0:	bf00      	nop
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	40013800 	.word	0x40013800
 800d3cc:	51eb851f 	.word	0x51eb851f

0800d3d0 <__itoa>:
 800d3d0:	1e93      	subs	r3, r2, #2
 800d3d2:	2b22      	cmp	r3, #34	; 0x22
 800d3d4:	b510      	push	{r4, lr}
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	d904      	bls.n	800d3e4 <__itoa+0x14>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	461c      	mov	r4, r3
 800d3de:	700b      	strb	r3, [r1, #0]
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	bd10      	pop	{r4, pc}
 800d3e4:	2a0a      	cmp	r2, #10
 800d3e6:	d109      	bne.n	800d3fc <__itoa+0x2c>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	da07      	bge.n	800d3fc <__itoa+0x2c>
 800d3ec:	232d      	movs	r3, #45	; 0x2d
 800d3ee:	700b      	strb	r3, [r1, #0]
 800d3f0:	2101      	movs	r1, #1
 800d3f2:	4240      	negs	r0, r0
 800d3f4:	4421      	add	r1, r4
 800d3f6:	f000 f8d9 	bl	800d5ac <__utoa>
 800d3fa:	e7f1      	b.n	800d3e0 <__itoa+0x10>
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	e7f9      	b.n	800d3f4 <__itoa+0x24>

0800d400 <itoa>:
 800d400:	f7ff bfe6 	b.w	800d3d0 <__itoa>

0800d404 <malloc>:
 800d404:	4b02      	ldr	r3, [pc, #8]	; (800d410 <malloc+0xc>)
 800d406:	4601      	mov	r1, r0
 800d408:	6818      	ldr	r0, [r3, #0]
 800d40a:	f000 b823 	b.w	800d454 <_malloc_r>
 800d40e:	bf00      	nop
 800d410:	200009f8 	.word	0x200009f8

0800d414 <sbrk_aligned>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	4e0e      	ldr	r6, [pc, #56]	; (800d450 <sbrk_aligned+0x3c>)
 800d418:	460c      	mov	r4, r1
 800d41a:	6831      	ldr	r1, [r6, #0]
 800d41c:	4605      	mov	r5, r0
 800d41e:	b911      	cbnz	r1, 800d426 <sbrk_aligned+0x12>
 800d420:	f000 f946 	bl	800d6b0 <_sbrk_r>
 800d424:	6030      	str	r0, [r6, #0]
 800d426:	4621      	mov	r1, r4
 800d428:	4628      	mov	r0, r5
 800d42a:	f000 f941 	bl	800d6b0 <_sbrk_r>
 800d42e:	1c43      	adds	r3, r0, #1
 800d430:	d00a      	beq.n	800d448 <sbrk_aligned+0x34>
 800d432:	1cc4      	adds	r4, r0, #3
 800d434:	f024 0403 	bic.w	r4, r4, #3
 800d438:	42a0      	cmp	r0, r4
 800d43a:	d007      	beq.n	800d44c <sbrk_aligned+0x38>
 800d43c:	1a21      	subs	r1, r4, r0
 800d43e:	4628      	mov	r0, r5
 800d440:	f000 f936 	bl	800d6b0 <_sbrk_r>
 800d444:	3001      	adds	r0, #1
 800d446:	d101      	bne.n	800d44c <sbrk_aligned+0x38>
 800d448:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d44c:	4620      	mov	r0, r4
 800d44e:	bd70      	pop	{r4, r5, r6, pc}
 800d450:	200011c8 	.word	0x200011c8

0800d454 <_malloc_r>:
 800d454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d458:	1ccd      	adds	r5, r1, #3
 800d45a:	f025 0503 	bic.w	r5, r5, #3
 800d45e:	3508      	adds	r5, #8
 800d460:	2d0c      	cmp	r5, #12
 800d462:	bf38      	it	cc
 800d464:	250c      	movcc	r5, #12
 800d466:	2d00      	cmp	r5, #0
 800d468:	4607      	mov	r7, r0
 800d46a:	db01      	blt.n	800d470 <_malloc_r+0x1c>
 800d46c:	42a9      	cmp	r1, r5
 800d46e:	d905      	bls.n	800d47c <_malloc_r+0x28>
 800d470:	230c      	movs	r3, #12
 800d472:	2600      	movs	r6, #0
 800d474:	603b      	str	r3, [r7, #0]
 800d476:	4630      	mov	r0, r6
 800d478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d47c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d550 <_malloc_r+0xfc>
 800d480:	f000 f868 	bl	800d554 <__malloc_lock>
 800d484:	f8d8 3000 	ldr.w	r3, [r8]
 800d488:	461c      	mov	r4, r3
 800d48a:	bb5c      	cbnz	r4, 800d4e4 <_malloc_r+0x90>
 800d48c:	4629      	mov	r1, r5
 800d48e:	4638      	mov	r0, r7
 800d490:	f7ff ffc0 	bl	800d414 <sbrk_aligned>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	4604      	mov	r4, r0
 800d498:	d155      	bne.n	800d546 <_malloc_r+0xf2>
 800d49a:	f8d8 4000 	ldr.w	r4, [r8]
 800d49e:	4626      	mov	r6, r4
 800d4a0:	2e00      	cmp	r6, #0
 800d4a2:	d145      	bne.n	800d530 <_malloc_r+0xdc>
 800d4a4:	2c00      	cmp	r4, #0
 800d4a6:	d048      	beq.n	800d53a <_malloc_r+0xe6>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	eb04 0903 	add.w	r9, r4, r3
 800d4b2:	f000 f8fd 	bl	800d6b0 <_sbrk_r>
 800d4b6:	4581      	cmp	r9, r0
 800d4b8:	d13f      	bne.n	800d53a <_malloc_r+0xe6>
 800d4ba:	6821      	ldr	r1, [r4, #0]
 800d4bc:	4638      	mov	r0, r7
 800d4be:	1a6d      	subs	r5, r5, r1
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	f7ff ffa7 	bl	800d414 <sbrk_aligned>
 800d4c6:	3001      	adds	r0, #1
 800d4c8:	d037      	beq.n	800d53a <_malloc_r+0xe6>
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	442b      	add	r3, r5
 800d4ce:	6023      	str	r3, [r4, #0]
 800d4d0:	f8d8 3000 	ldr.w	r3, [r8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d038      	beq.n	800d54a <_malloc_r+0xf6>
 800d4d8:	685a      	ldr	r2, [r3, #4]
 800d4da:	42a2      	cmp	r2, r4
 800d4dc:	d12b      	bne.n	800d536 <_malloc_r+0xe2>
 800d4de:	2200      	movs	r2, #0
 800d4e0:	605a      	str	r2, [r3, #4]
 800d4e2:	e00f      	b.n	800d504 <_malloc_r+0xb0>
 800d4e4:	6822      	ldr	r2, [r4, #0]
 800d4e6:	1b52      	subs	r2, r2, r5
 800d4e8:	d41f      	bmi.n	800d52a <_malloc_r+0xd6>
 800d4ea:	2a0b      	cmp	r2, #11
 800d4ec:	d917      	bls.n	800d51e <_malloc_r+0xca>
 800d4ee:	1961      	adds	r1, r4, r5
 800d4f0:	42a3      	cmp	r3, r4
 800d4f2:	6025      	str	r5, [r4, #0]
 800d4f4:	bf18      	it	ne
 800d4f6:	6059      	strne	r1, [r3, #4]
 800d4f8:	6863      	ldr	r3, [r4, #4]
 800d4fa:	bf08      	it	eq
 800d4fc:	f8c8 1000 	streq.w	r1, [r8]
 800d500:	5162      	str	r2, [r4, r5]
 800d502:	604b      	str	r3, [r1, #4]
 800d504:	4638      	mov	r0, r7
 800d506:	f104 060b 	add.w	r6, r4, #11
 800d50a:	f000 f829 	bl	800d560 <__malloc_unlock>
 800d50e:	f026 0607 	bic.w	r6, r6, #7
 800d512:	1d23      	adds	r3, r4, #4
 800d514:	1af2      	subs	r2, r6, r3
 800d516:	d0ae      	beq.n	800d476 <_malloc_r+0x22>
 800d518:	1b9b      	subs	r3, r3, r6
 800d51a:	50a3      	str	r3, [r4, r2]
 800d51c:	e7ab      	b.n	800d476 <_malloc_r+0x22>
 800d51e:	42a3      	cmp	r3, r4
 800d520:	6862      	ldr	r2, [r4, #4]
 800d522:	d1dd      	bne.n	800d4e0 <_malloc_r+0x8c>
 800d524:	f8c8 2000 	str.w	r2, [r8]
 800d528:	e7ec      	b.n	800d504 <_malloc_r+0xb0>
 800d52a:	4623      	mov	r3, r4
 800d52c:	6864      	ldr	r4, [r4, #4]
 800d52e:	e7ac      	b.n	800d48a <_malloc_r+0x36>
 800d530:	4634      	mov	r4, r6
 800d532:	6876      	ldr	r6, [r6, #4]
 800d534:	e7b4      	b.n	800d4a0 <_malloc_r+0x4c>
 800d536:	4613      	mov	r3, r2
 800d538:	e7cc      	b.n	800d4d4 <_malloc_r+0x80>
 800d53a:	230c      	movs	r3, #12
 800d53c:	4638      	mov	r0, r7
 800d53e:	603b      	str	r3, [r7, #0]
 800d540:	f000 f80e 	bl	800d560 <__malloc_unlock>
 800d544:	e797      	b.n	800d476 <_malloc_r+0x22>
 800d546:	6025      	str	r5, [r4, #0]
 800d548:	e7dc      	b.n	800d504 <_malloc_r+0xb0>
 800d54a:	605b      	str	r3, [r3, #4]
 800d54c:	deff      	udf	#255	; 0xff
 800d54e:	bf00      	nop
 800d550:	200011c4 	.word	0x200011c4

0800d554 <__malloc_lock>:
 800d554:	4801      	ldr	r0, [pc, #4]	; (800d55c <__malloc_lock+0x8>)
 800d556:	f000 b8e5 	b.w	800d724 <__retarget_lock_acquire_recursive>
 800d55a:	bf00      	nop
 800d55c:	20001304 	.word	0x20001304

0800d560 <__malloc_unlock>:
 800d560:	4801      	ldr	r0, [pc, #4]	; (800d568 <__malloc_unlock+0x8>)
 800d562:	f000 b8e0 	b.w	800d726 <__retarget_lock_release_recursive>
 800d566:	bf00      	nop
 800d568:	20001304 	.word	0x20001304

0800d56c <siprintf>:
 800d56c:	b40e      	push	{r1, r2, r3}
 800d56e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d572:	b500      	push	{lr}
 800d574:	b09c      	sub	sp, #112	; 0x70
 800d576:	ab1d      	add	r3, sp, #116	; 0x74
 800d578:	9002      	str	r0, [sp, #8]
 800d57a:	9006      	str	r0, [sp, #24]
 800d57c:	9107      	str	r1, [sp, #28]
 800d57e:	9104      	str	r1, [sp, #16]
 800d580:	4808      	ldr	r0, [pc, #32]	; (800d5a4 <siprintf+0x38>)
 800d582:	4909      	ldr	r1, [pc, #36]	; (800d5a8 <siprintf+0x3c>)
 800d584:	f853 2b04 	ldr.w	r2, [r3], #4
 800d588:	9105      	str	r1, [sp, #20]
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	a902      	add	r1, sp, #8
 800d58e:	9301      	str	r3, [sp, #4]
 800d590:	f000 f974 	bl	800d87c <_svfiprintf_r>
 800d594:	2200      	movs	r2, #0
 800d596:	9b02      	ldr	r3, [sp, #8]
 800d598:	701a      	strb	r2, [r3, #0]
 800d59a:	b01c      	add	sp, #112	; 0x70
 800d59c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5a0:	b003      	add	sp, #12
 800d5a2:	4770      	bx	lr
 800d5a4:	200009f8 	.word	0x200009f8
 800d5a8:	ffff0208 	.word	0xffff0208

0800d5ac <__utoa>:
 800d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ae:	b08b      	sub	sp, #44	; 0x2c
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	466e      	mov	r6, sp
 800d5b6:	4c1d      	ldr	r4, [pc, #116]	; (800d62c <__utoa+0x80>)
 800d5b8:	f104 0c20 	add.w	ip, r4, #32
 800d5bc:	4637      	mov	r7, r6
 800d5be:	6820      	ldr	r0, [r4, #0]
 800d5c0:	6861      	ldr	r1, [r4, #4]
 800d5c2:	3408      	adds	r4, #8
 800d5c4:	c703      	stmia	r7!, {r0, r1}
 800d5c6:	4564      	cmp	r4, ip
 800d5c8:	463e      	mov	r6, r7
 800d5ca:	d1f7      	bne.n	800d5bc <__utoa+0x10>
 800d5cc:	7921      	ldrb	r1, [r4, #4]
 800d5ce:	6820      	ldr	r0, [r4, #0]
 800d5d0:	7139      	strb	r1, [r7, #4]
 800d5d2:	1e91      	subs	r1, r2, #2
 800d5d4:	2922      	cmp	r1, #34	; 0x22
 800d5d6:	6038      	str	r0, [r7, #0]
 800d5d8:	f04f 0100 	mov.w	r1, #0
 800d5dc:	d904      	bls.n	800d5e8 <__utoa+0x3c>
 800d5de:	7019      	strb	r1, [r3, #0]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	b00b      	add	sp, #44	; 0x2c
 800d5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e8:	1e58      	subs	r0, r3, #1
 800d5ea:	4684      	mov	ip, r0
 800d5ec:	fbb5 f7f2 	udiv	r7, r5, r2
 800d5f0:	fb02 5617 	mls	r6, r2, r7, r5
 800d5f4:	3628      	adds	r6, #40	; 0x28
 800d5f6:	446e      	add	r6, sp
 800d5f8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d602:	462e      	mov	r6, r5
 800d604:	42b2      	cmp	r2, r6
 800d606:	463d      	mov	r5, r7
 800d608:	f101 0101 	add.w	r1, r1, #1
 800d60c:	d9ee      	bls.n	800d5ec <__utoa+0x40>
 800d60e:	2200      	movs	r2, #0
 800d610:	545a      	strb	r2, [r3, r1]
 800d612:	1919      	adds	r1, r3, r4
 800d614:	1aa5      	subs	r5, r4, r2
 800d616:	42aa      	cmp	r2, r5
 800d618:	dae3      	bge.n	800d5e2 <__utoa+0x36>
 800d61a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d61e:	780e      	ldrb	r6, [r1, #0]
 800d620:	3201      	adds	r2, #1
 800d622:	7006      	strb	r6, [r0, #0]
 800d624:	f801 5901 	strb.w	r5, [r1], #-1
 800d628:	e7f4      	b.n	800d614 <__utoa+0x68>
 800d62a:	bf00      	nop
 800d62c:	0800ee1e 	.word	0x0800ee1e

0800d630 <strcat>:
 800d630:	4602      	mov	r2, r0
 800d632:	b510      	push	{r4, lr}
 800d634:	7814      	ldrb	r4, [r2, #0]
 800d636:	4613      	mov	r3, r2
 800d638:	3201      	adds	r2, #1
 800d63a:	2c00      	cmp	r4, #0
 800d63c:	d1fa      	bne.n	800d634 <strcat+0x4>
 800d63e:	3b01      	subs	r3, #1
 800d640:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d644:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d648:	2a00      	cmp	r2, #0
 800d64a:	d1f9      	bne.n	800d640 <strcat+0x10>
 800d64c:	bd10      	pop	{r4, pc}

0800d64e <strncpy>:
 800d64e:	4603      	mov	r3, r0
 800d650:	b510      	push	{r4, lr}
 800d652:	3901      	subs	r1, #1
 800d654:	b132      	cbz	r2, 800d664 <strncpy+0x16>
 800d656:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d65a:	3a01      	subs	r2, #1
 800d65c:	f803 4b01 	strb.w	r4, [r3], #1
 800d660:	2c00      	cmp	r4, #0
 800d662:	d1f7      	bne.n	800d654 <strncpy+0x6>
 800d664:	2100      	movs	r1, #0
 800d666:	441a      	add	r2, r3
 800d668:	4293      	cmp	r3, r2
 800d66a:	d100      	bne.n	800d66e <strncpy+0x20>
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	f803 1b01 	strb.w	r1, [r3], #1
 800d672:	e7f9      	b.n	800d668 <strncpy+0x1a>

0800d674 <strstr>:
 800d674:	780a      	ldrb	r2, [r1, #0]
 800d676:	b570      	push	{r4, r5, r6, lr}
 800d678:	b96a      	cbnz	r2, 800d696 <strstr+0x22>
 800d67a:	bd70      	pop	{r4, r5, r6, pc}
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d109      	bne.n	800d694 <strstr+0x20>
 800d680:	460c      	mov	r4, r1
 800d682:	4605      	mov	r5, r0
 800d684:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d0f6      	beq.n	800d67a <strstr+0x6>
 800d68c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d690:	429e      	cmp	r6, r3
 800d692:	d0f7      	beq.n	800d684 <strstr+0x10>
 800d694:	3001      	adds	r0, #1
 800d696:	7803      	ldrb	r3, [r0, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1ef      	bne.n	800d67c <strstr+0x8>
 800d69c:	4618      	mov	r0, r3
 800d69e:	e7ec      	b.n	800d67a <strstr+0x6>

0800d6a0 <memset>:
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	4402      	add	r2, r0
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d100      	bne.n	800d6aa <memset+0xa>
 800d6a8:	4770      	bx	lr
 800d6aa:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ae:	e7f9      	b.n	800d6a4 <memset+0x4>

0800d6b0 <_sbrk_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	4d05      	ldr	r5, [pc, #20]	; (800d6cc <_sbrk_r+0x1c>)
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	4608      	mov	r0, r1
 800d6ba:	602b      	str	r3, [r5, #0]
 800d6bc:	f7fb ff84 	bl	80095c8 <_sbrk>
 800d6c0:	1c43      	adds	r3, r0, #1
 800d6c2:	d102      	bne.n	800d6ca <_sbrk_r+0x1a>
 800d6c4:	682b      	ldr	r3, [r5, #0]
 800d6c6:	b103      	cbz	r3, 800d6ca <_sbrk_r+0x1a>
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	20001308 	.word	0x20001308

0800d6d0 <__errno>:
 800d6d0:	4b01      	ldr	r3, [pc, #4]	; (800d6d8 <__errno+0x8>)
 800d6d2:	6818      	ldr	r0, [r3, #0]
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	200009f8 	.word	0x200009f8

0800d6dc <__libc_init_array>:
 800d6dc:	b570      	push	{r4, r5, r6, lr}
 800d6de:	2600      	movs	r6, #0
 800d6e0:	4d0c      	ldr	r5, [pc, #48]	; (800d714 <__libc_init_array+0x38>)
 800d6e2:	4c0d      	ldr	r4, [pc, #52]	; (800d718 <__libc_init_array+0x3c>)
 800d6e4:	1b64      	subs	r4, r4, r5
 800d6e6:	10a4      	asrs	r4, r4, #2
 800d6e8:	42a6      	cmp	r6, r4
 800d6ea:	d109      	bne.n	800d700 <__libc_init_array+0x24>
 800d6ec:	f000 fbc6 	bl	800de7c <_init>
 800d6f0:	2600      	movs	r6, #0
 800d6f2:	4d0a      	ldr	r5, [pc, #40]	; (800d71c <__libc_init_array+0x40>)
 800d6f4:	4c0a      	ldr	r4, [pc, #40]	; (800d720 <__libc_init_array+0x44>)
 800d6f6:	1b64      	subs	r4, r4, r5
 800d6f8:	10a4      	asrs	r4, r4, #2
 800d6fa:	42a6      	cmp	r6, r4
 800d6fc:	d105      	bne.n	800d70a <__libc_init_array+0x2e>
 800d6fe:	bd70      	pop	{r4, r5, r6, pc}
 800d700:	f855 3b04 	ldr.w	r3, [r5], #4
 800d704:	4798      	blx	r3
 800d706:	3601      	adds	r6, #1
 800d708:	e7ee      	b.n	800d6e8 <__libc_init_array+0xc>
 800d70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d70e:	4798      	blx	r3
 800d710:	3601      	adds	r6, #1
 800d712:	e7f2      	b.n	800d6fa <__libc_init_array+0x1e>
 800d714:	0800ee78 	.word	0x0800ee78
 800d718:	0800ee78 	.word	0x0800ee78
 800d71c:	0800ee78 	.word	0x0800ee78
 800d720:	0800ee7c 	.word	0x0800ee7c

0800d724 <__retarget_lock_acquire_recursive>:
 800d724:	4770      	bx	lr

0800d726 <__retarget_lock_release_recursive>:
 800d726:	4770      	bx	lr

0800d728 <strcpy>:
 800d728:	4603      	mov	r3, r0
 800d72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d72e:	f803 2b01 	strb.w	r2, [r3], #1
 800d732:	2a00      	cmp	r2, #0
 800d734:	d1f9      	bne.n	800d72a <strcpy+0x2>
 800d736:	4770      	bx	lr

0800d738 <_free_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4605      	mov	r5, r0
 800d73c:	2900      	cmp	r1, #0
 800d73e:	d040      	beq.n	800d7c2 <_free_r+0x8a>
 800d740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d744:	1f0c      	subs	r4, r1, #4
 800d746:	2b00      	cmp	r3, #0
 800d748:	bfb8      	it	lt
 800d74a:	18e4      	addlt	r4, r4, r3
 800d74c:	f7ff ff02 	bl	800d554 <__malloc_lock>
 800d750:	4a1c      	ldr	r2, [pc, #112]	; (800d7c4 <_free_r+0x8c>)
 800d752:	6813      	ldr	r3, [r2, #0]
 800d754:	b933      	cbnz	r3, 800d764 <_free_r+0x2c>
 800d756:	6063      	str	r3, [r4, #4]
 800d758:	6014      	str	r4, [r2, #0]
 800d75a:	4628      	mov	r0, r5
 800d75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d760:	f7ff befe 	b.w	800d560 <__malloc_unlock>
 800d764:	42a3      	cmp	r3, r4
 800d766:	d908      	bls.n	800d77a <_free_r+0x42>
 800d768:	6820      	ldr	r0, [r4, #0]
 800d76a:	1821      	adds	r1, r4, r0
 800d76c:	428b      	cmp	r3, r1
 800d76e:	bf01      	itttt	eq
 800d770:	6819      	ldreq	r1, [r3, #0]
 800d772:	685b      	ldreq	r3, [r3, #4]
 800d774:	1809      	addeq	r1, r1, r0
 800d776:	6021      	streq	r1, [r4, #0]
 800d778:	e7ed      	b.n	800d756 <_free_r+0x1e>
 800d77a:	461a      	mov	r2, r3
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	b10b      	cbz	r3, 800d784 <_free_r+0x4c>
 800d780:	42a3      	cmp	r3, r4
 800d782:	d9fa      	bls.n	800d77a <_free_r+0x42>
 800d784:	6811      	ldr	r1, [r2, #0]
 800d786:	1850      	adds	r0, r2, r1
 800d788:	42a0      	cmp	r0, r4
 800d78a:	d10b      	bne.n	800d7a4 <_free_r+0x6c>
 800d78c:	6820      	ldr	r0, [r4, #0]
 800d78e:	4401      	add	r1, r0
 800d790:	1850      	adds	r0, r2, r1
 800d792:	4283      	cmp	r3, r0
 800d794:	6011      	str	r1, [r2, #0]
 800d796:	d1e0      	bne.n	800d75a <_free_r+0x22>
 800d798:	6818      	ldr	r0, [r3, #0]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	4408      	add	r0, r1
 800d79e:	6010      	str	r0, [r2, #0]
 800d7a0:	6053      	str	r3, [r2, #4]
 800d7a2:	e7da      	b.n	800d75a <_free_r+0x22>
 800d7a4:	d902      	bls.n	800d7ac <_free_r+0x74>
 800d7a6:	230c      	movs	r3, #12
 800d7a8:	602b      	str	r3, [r5, #0]
 800d7aa:	e7d6      	b.n	800d75a <_free_r+0x22>
 800d7ac:	6820      	ldr	r0, [r4, #0]
 800d7ae:	1821      	adds	r1, r4, r0
 800d7b0:	428b      	cmp	r3, r1
 800d7b2:	bf01      	itttt	eq
 800d7b4:	6819      	ldreq	r1, [r3, #0]
 800d7b6:	685b      	ldreq	r3, [r3, #4]
 800d7b8:	1809      	addeq	r1, r1, r0
 800d7ba:	6021      	streq	r1, [r4, #0]
 800d7bc:	6063      	str	r3, [r4, #4]
 800d7be:	6054      	str	r4, [r2, #4]
 800d7c0:	e7cb      	b.n	800d75a <_free_r+0x22>
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}
 800d7c4:	200011c4 	.word	0x200011c4

0800d7c8 <__ssputs_r>:
 800d7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7cc:	461f      	mov	r7, r3
 800d7ce:	688e      	ldr	r6, [r1, #8]
 800d7d0:	4682      	mov	sl, r0
 800d7d2:	42be      	cmp	r6, r7
 800d7d4:	460c      	mov	r4, r1
 800d7d6:	4690      	mov	r8, r2
 800d7d8:	680b      	ldr	r3, [r1, #0]
 800d7da:	d82c      	bhi.n	800d836 <__ssputs_r+0x6e>
 800d7dc:	898a      	ldrh	r2, [r1, #12]
 800d7de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7e2:	d026      	beq.n	800d832 <__ssputs_r+0x6a>
 800d7e4:	6965      	ldr	r5, [r4, #20]
 800d7e6:	6909      	ldr	r1, [r1, #16]
 800d7e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7ec:	eba3 0901 	sub.w	r9, r3, r1
 800d7f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7f4:	1c7b      	adds	r3, r7, #1
 800d7f6:	444b      	add	r3, r9
 800d7f8:	106d      	asrs	r5, r5, #1
 800d7fa:	429d      	cmp	r5, r3
 800d7fc:	bf38      	it	cc
 800d7fe:	461d      	movcc	r5, r3
 800d800:	0553      	lsls	r3, r2, #21
 800d802:	d527      	bpl.n	800d854 <__ssputs_r+0x8c>
 800d804:	4629      	mov	r1, r5
 800d806:	f7ff fe25 	bl	800d454 <_malloc_r>
 800d80a:	4606      	mov	r6, r0
 800d80c:	b360      	cbz	r0, 800d868 <__ssputs_r+0xa0>
 800d80e:	464a      	mov	r2, r9
 800d810:	6921      	ldr	r1, [r4, #16]
 800d812:	f000 fb1c 	bl	800de4e <memcpy>
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d820:	81a3      	strh	r3, [r4, #12]
 800d822:	6126      	str	r6, [r4, #16]
 800d824:	444e      	add	r6, r9
 800d826:	6026      	str	r6, [r4, #0]
 800d828:	463e      	mov	r6, r7
 800d82a:	6165      	str	r5, [r4, #20]
 800d82c:	eba5 0509 	sub.w	r5, r5, r9
 800d830:	60a5      	str	r5, [r4, #8]
 800d832:	42be      	cmp	r6, r7
 800d834:	d900      	bls.n	800d838 <__ssputs_r+0x70>
 800d836:	463e      	mov	r6, r7
 800d838:	4632      	mov	r2, r6
 800d83a:	4641      	mov	r1, r8
 800d83c:	6820      	ldr	r0, [r4, #0]
 800d83e:	f000 fade 	bl	800ddfe <memmove>
 800d842:	2000      	movs	r0, #0
 800d844:	68a3      	ldr	r3, [r4, #8]
 800d846:	1b9b      	subs	r3, r3, r6
 800d848:	60a3      	str	r3, [r4, #8]
 800d84a:	6823      	ldr	r3, [r4, #0]
 800d84c:	4433      	add	r3, r6
 800d84e:	6023      	str	r3, [r4, #0]
 800d850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d854:	462a      	mov	r2, r5
 800d856:	f000 faa3 	bl	800dda0 <_realloc_r>
 800d85a:	4606      	mov	r6, r0
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d1e0      	bne.n	800d822 <__ssputs_r+0x5a>
 800d860:	4650      	mov	r0, sl
 800d862:	6921      	ldr	r1, [r4, #16]
 800d864:	f7ff ff68 	bl	800d738 <_free_r>
 800d868:	230c      	movs	r3, #12
 800d86a:	f8ca 3000 	str.w	r3, [sl]
 800d86e:	89a3      	ldrh	r3, [r4, #12]
 800d870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d878:	81a3      	strh	r3, [r4, #12]
 800d87a:	e7e9      	b.n	800d850 <__ssputs_r+0x88>

0800d87c <_svfiprintf_r>:
 800d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	4698      	mov	r8, r3
 800d882:	898b      	ldrh	r3, [r1, #12]
 800d884:	4607      	mov	r7, r0
 800d886:	061b      	lsls	r3, r3, #24
 800d888:	460d      	mov	r5, r1
 800d88a:	4614      	mov	r4, r2
 800d88c:	b09d      	sub	sp, #116	; 0x74
 800d88e:	d50e      	bpl.n	800d8ae <_svfiprintf_r+0x32>
 800d890:	690b      	ldr	r3, [r1, #16]
 800d892:	b963      	cbnz	r3, 800d8ae <_svfiprintf_r+0x32>
 800d894:	2140      	movs	r1, #64	; 0x40
 800d896:	f7ff fddd 	bl	800d454 <_malloc_r>
 800d89a:	6028      	str	r0, [r5, #0]
 800d89c:	6128      	str	r0, [r5, #16]
 800d89e:	b920      	cbnz	r0, 800d8aa <_svfiprintf_r+0x2e>
 800d8a0:	230c      	movs	r3, #12
 800d8a2:	603b      	str	r3, [r7, #0]
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8a8:	e0d0      	b.n	800da4c <_svfiprintf_r+0x1d0>
 800d8aa:	2340      	movs	r3, #64	; 0x40
 800d8ac:	616b      	str	r3, [r5, #20]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d8b2:	2320      	movs	r3, #32
 800d8b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8b8:	2330      	movs	r3, #48	; 0x30
 800d8ba:	f04f 0901 	mov.w	r9, #1
 800d8be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8c2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800da64 <_svfiprintf_r+0x1e8>
 800d8c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8ca:	4623      	mov	r3, r4
 800d8cc:	469a      	mov	sl, r3
 800d8ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8d2:	b10a      	cbz	r2, 800d8d8 <_svfiprintf_r+0x5c>
 800d8d4:	2a25      	cmp	r2, #37	; 0x25
 800d8d6:	d1f9      	bne.n	800d8cc <_svfiprintf_r+0x50>
 800d8d8:	ebba 0b04 	subs.w	fp, sl, r4
 800d8dc:	d00b      	beq.n	800d8f6 <_svfiprintf_r+0x7a>
 800d8de:	465b      	mov	r3, fp
 800d8e0:	4622      	mov	r2, r4
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	f7ff ff6f 	bl	800d7c8 <__ssputs_r>
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	f000 80a9 	beq.w	800da42 <_svfiprintf_r+0x1c6>
 800d8f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8f2:	445a      	add	r2, fp
 800d8f4:	9209      	str	r2, [sp, #36]	; 0x24
 800d8f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f000 80a1 	beq.w	800da42 <_svfiprintf_r+0x1c6>
 800d900:	2300      	movs	r3, #0
 800d902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d90a:	f10a 0a01 	add.w	sl, sl, #1
 800d90e:	9304      	str	r3, [sp, #16]
 800d910:	9307      	str	r3, [sp, #28]
 800d912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d916:	931a      	str	r3, [sp, #104]	; 0x68
 800d918:	4654      	mov	r4, sl
 800d91a:	2205      	movs	r2, #5
 800d91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d920:	4850      	ldr	r0, [pc, #320]	; (800da64 <_svfiprintf_r+0x1e8>)
 800d922:	f000 fa86 	bl	800de32 <memchr>
 800d926:	9a04      	ldr	r2, [sp, #16]
 800d928:	b9d8      	cbnz	r0, 800d962 <_svfiprintf_r+0xe6>
 800d92a:	06d0      	lsls	r0, r2, #27
 800d92c:	bf44      	itt	mi
 800d92e:	2320      	movmi	r3, #32
 800d930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d934:	0711      	lsls	r1, r2, #28
 800d936:	bf44      	itt	mi
 800d938:	232b      	movmi	r3, #43	; 0x2b
 800d93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d93e:	f89a 3000 	ldrb.w	r3, [sl]
 800d942:	2b2a      	cmp	r3, #42	; 0x2a
 800d944:	d015      	beq.n	800d972 <_svfiprintf_r+0xf6>
 800d946:	4654      	mov	r4, sl
 800d948:	2000      	movs	r0, #0
 800d94a:	f04f 0c0a 	mov.w	ip, #10
 800d94e:	9a07      	ldr	r2, [sp, #28]
 800d950:	4621      	mov	r1, r4
 800d952:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d956:	3b30      	subs	r3, #48	; 0x30
 800d958:	2b09      	cmp	r3, #9
 800d95a:	d94d      	bls.n	800d9f8 <_svfiprintf_r+0x17c>
 800d95c:	b1b0      	cbz	r0, 800d98c <_svfiprintf_r+0x110>
 800d95e:	9207      	str	r2, [sp, #28]
 800d960:	e014      	b.n	800d98c <_svfiprintf_r+0x110>
 800d962:	eba0 0308 	sub.w	r3, r0, r8
 800d966:	fa09 f303 	lsl.w	r3, r9, r3
 800d96a:	4313      	orrs	r3, r2
 800d96c:	46a2      	mov	sl, r4
 800d96e:	9304      	str	r3, [sp, #16]
 800d970:	e7d2      	b.n	800d918 <_svfiprintf_r+0x9c>
 800d972:	9b03      	ldr	r3, [sp, #12]
 800d974:	1d19      	adds	r1, r3, #4
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	9103      	str	r1, [sp, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	bfbb      	ittet	lt
 800d97e:	425b      	neglt	r3, r3
 800d980:	f042 0202 	orrlt.w	r2, r2, #2
 800d984:	9307      	strge	r3, [sp, #28]
 800d986:	9307      	strlt	r3, [sp, #28]
 800d988:	bfb8      	it	lt
 800d98a:	9204      	strlt	r2, [sp, #16]
 800d98c:	7823      	ldrb	r3, [r4, #0]
 800d98e:	2b2e      	cmp	r3, #46	; 0x2e
 800d990:	d10c      	bne.n	800d9ac <_svfiprintf_r+0x130>
 800d992:	7863      	ldrb	r3, [r4, #1]
 800d994:	2b2a      	cmp	r3, #42	; 0x2a
 800d996:	d134      	bne.n	800da02 <_svfiprintf_r+0x186>
 800d998:	9b03      	ldr	r3, [sp, #12]
 800d99a:	3402      	adds	r4, #2
 800d99c:	1d1a      	adds	r2, r3, #4
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	9203      	str	r2, [sp, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	bfb8      	it	lt
 800d9a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d9aa:	9305      	str	r3, [sp, #20]
 800d9ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800da68 <_svfiprintf_r+0x1ec>
 800d9b0:	2203      	movs	r2, #3
 800d9b2:	4650      	mov	r0, sl
 800d9b4:	7821      	ldrb	r1, [r4, #0]
 800d9b6:	f000 fa3c 	bl	800de32 <memchr>
 800d9ba:	b138      	cbz	r0, 800d9cc <_svfiprintf_r+0x150>
 800d9bc:	2240      	movs	r2, #64	; 0x40
 800d9be:	9b04      	ldr	r3, [sp, #16]
 800d9c0:	eba0 000a 	sub.w	r0, r0, sl
 800d9c4:	4082      	lsls	r2, r0
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	3401      	adds	r4, #1
 800d9ca:	9304      	str	r3, [sp, #16]
 800d9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d0:	2206      	movs	r2, #6
 800d9d2:	4826      	ldr	r0, [pc, #152]	; (800da6c <_svfiprintf_r+0x1f0>)
 800d9d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9d8:	f000 fa2b 	bl	800de32 <memchr>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d038      	beq.n	800da52 <_svfiprintf_r+0x1d6>
 800d9e0:	4b23      	ldr	r3, [pc, #140]	; (800da70 <_svfiprintf_r+0x1f4>)
 800d9e2:	bb1b      	cbnz	r3, 800da2c <_svfiprintf_r+0x1b0>
 800d9e4:	9b03      	ldr	r3, [sp, #12]
 800d9e6:	3307      	adds	r3, #7
 800d9e8:	f023 0307 	bic.w	r3, r3, #7
 800d9ec:	3308      	adds	r3, #8
 800d9ee:	9303      	str	r3, [sp, #12]
 800d9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f2:	4433      	add	r3, r6
 800d9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9f6:	e768      	b.n	800d8ca <_svfiprintf_r+0x4e>
 800d9f8:	460c      	mov	r4, r1
 800d9fa:	2001      	movs	r0, #1
 800d9fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800da00:	e7a6      	b.n	800d950 <_svfiprintf_r+0xd4>
 800da02:	2300      	movs	r3, #0
 800da04:	f04f 0c0a 	mov.w	ip, #10
 800da08:	4619      	mov	r1, r3
 800da0a:	3401      	adds	r4, #1
 800da0c:	9305      	str	r3, [sp, #20]
 800da0e:	4620      	mov	r0, r4
 800da10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da14:	3a30      	subs	r2, #48	; 0x30
 800da16:	2a09      	cmp	r2, #9
 800da18:	d903      	bls.n	800da22 <_svfiprintf_r+0x1a6>
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d0c6      	beq.n	800d9ac <_svfiprintf_r+0x130>
 800da1e:	9105      	str	r1, [sp, #20]
 800da20:	e7c4      	b.n	800d9ac <_svfiprintf_r+0x130>
 800da22:	4604      	mov	r4, r0
 800da24:	2301      	movs	r3, #1
 800da26:	fb0c 2101 	mla	r1, ip, r1, r2
 800da2a:	e7f0      	b.n	800da0e <_svfiprintf_r+0x192>
 800da2c:	ab03      	add	r3, sp, #12
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	462a      	mov	r2, r5
 800da32:	4638      	mov	r0, r7
 800da34:	4b0f      	ldr	r3, [pc, #60]	; (800da74 <_svfiprintf_r+0x1f8>)
 800da36:	a904      	add	r1, sp, #16
 800da38:	f3af 8000 	nop.w
 800da3c:	1c42      	adds	r2, r0, #1
 800da3e:	4606      	mov	r6, r0
 800da40:	d1d6      	bne.n	800d9f0 <_svfiprintf_r+0x174>
 800da42:	89ab      	ldrh	r3, [r5, #12]
 800da44:	065b      	lsls	r3, r3, #25
 800da46:	f53f af2d 	bmi.w	800d8a4 <_svfiprintf_r+0x28>
 800da4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da4c:	b01d      	add	sp, #116	; 0x74
 800da4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da52:	ab03      	add	r3, sp, #12
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	462a      	mov	r2, r5
 800da58:	4638      	mov	r0, r7
 800da5a:	4b06      	ldr	r3, [pc, #24]	; (800da74 <_svfiprintf_r+0x1f8>)
 800da5c:	a904      	add	r1, sp, #16
 800da5e:	f000 f87d 	bl	800db5c <_printf_i>
 800da62:	e7eb      	b.n	800da3c <_svfiprintf_r+0x1c0>
 800da64:	0800ee43 	.word	0x0800ee43
 800da68:	0800ee49 	.word	0x0800ee49
 800da6c:	0800ee4d 	.word	0x0800ee4d
 800da70:	00000000 	.word	0x00000000
 800da74:	0800d7c9 	.word	0x0800d7c9

0800da78 <_printf_common>:
 800da78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da7c:	4616      	mov	r6, r2
 800da7e:	4699      	mov	r9, r3
 800da80:	688a      	ldr	r2, [r1, #8]
 800da82:	690b      	ldr	r3, [r1, #16]
 800da84:	4607      	mov	r7, r0
 800da86:	4293      	cmp	r3, r2
 800da88:	bfb8      	it	lt
 800da8a:	4613      	movlt	r3, r2
 800da8c:	6033      	str	r3, [r6, #0]
 800da8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da92:	460c      	mov	r4, r1
 800da94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da98:	b10a      	cbz	r2, 800da9e <_printf_common+0x26>
 800da9a:	3301      	adds	r3, #1
 800da9c:	6033      	str	r3, [r6, #0]
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	0699      	lsls	r1, r3, #26
 800daa2:	bf42      	ittt	mi
 800daa4:	6833      	ldrmi	r3, [r6, #0]
 800daa6:	3302      	addmi	r3, #2
 800daa8:	6033      	strmi	r3, [r6, #0]
 800daaa:	6825      	ldr	r5, [r4, #0]
 800daac:	f015 0506 	ands.w	r5, r5, #6
 800dab0:	d106      	bne.n	800dac0 <_printf_common+0x48>
 800dab2:	f104 0a19 	add.w	sl, r4, #25
 800dab6:	68e3      	ldr	r3, [r4, #12]
 800dab8:	6832      	ldr	r2, [r6, #0]
 800daba:	1a9b      	subs	r3, r3, r2
 800dabc:	42ab      	cmp	r3, r5
 800dabe:	dc2b      	bgt.n	800db18 <_printf_common+0xa0>
 800dac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dac4:	1e13      	subs	r3, r2, #0
 800dac6:	6822      	ldr	r2, [r4, #0]
 800dac8:	bf18      	it	ne
 800daca:	2301      	movne	r3, #1
 800dacc:	0692      	lsls	r2, r2, #26
 800dace:	d430      	bmi.n	800db32 <_printf_common+0xba>
 800dad0:	4649      	mov	r1, r9
 800dad2:	4638      	mov	r0, r7
 800dad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dad8:	47c0      	blx	r8
 800dada:	3001      	adds	r0, #1
 800dadc:	d023      	beq.n	800db26 <_printf_common+0xae>
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	6922      	ldr	r2, [r4, #16]
 800dae2:	f003 0306 	and.w	r3, r3, #6
 800dae6:	2b04      	cmp	r3, #4
 800dae8:	bf14      	ite	ne
 800daea:	2500      	movne	r5, #0
 800daec:	6833      	ldreq	r3, [r6, #0]
 800daee:	f04f 0600 	mov.w	r6, #0
 800daf2:	bf08      	it	eq
 800daf4:	68e5      	ldreq	r5, [r4, #12]
 800daf6:	f104 041a 	add.w	r4, r4, #26
 800dafa:	bf08      	it	eq
 800dafc:	1aed      	subeq	r5, r5, r3
 800dafe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800db02:	bf08      	it	eq
 800db04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db08:	4293      	cmp	r3, r2
 800db0a:	bfc4      	itt	gt
 800db0c:	1a9b      	subgt	r3, r3, r2
 800db0e:	18ed      	addgt	r5, r5, r3
 800db10:	42b5      	cmp	r5, r6
 800db12:	d11a      	bne.n	800db4a <_printf_common+0xd2>
 800db14:	2000      	movs	r0, #0
 800db16:	e008      	b.n	800db2a <_printf_common+0xb2>
 800db18:	2301      	movs	r3, #1
 800db1a:	4652      	mov	r2, sl
 800db1c:	4649      	mov	r1, r9
 800db1e:	4638      	mov	r0, r7
 800db20:	47c0      	blx	r8
 800db22:	3001      	adds	r0, #1
 800db24:	d103      	bne.n	800db2e <_printf_common+0xb6>
 800db26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db2e:	3501      	adds	r5, #1
 800db30:	e7c1      	b.n	800dab6 <_printf_common+0x3e>
 800db32:	2030      	movs	r0, #48	; 0x30
 800db34:	18e1      	adds	r1, r4, r3
 800db36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db3a:	1c5a      	adds	r2, r3, #1
 800db3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db40:	4422      	add	r2, r4
 800db42:	3302      	adds	r3, #2
 800db44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db48:	e7c2      	b.n	800dad0 <_printf_common+0x58>
 800db4a:	2301      	movs	r3, #1
 800db4c:	4622      	mov	r2, r4
 800db4e:	4649      	mov	r1, r9
 800db50:	4638      	mov	r0, r7
 800db52:	47c0      	blx	r8
 800db54:	3001      	adds	r0, #1
 800db56:	d0e6      	beq.n	800db26 <_printf_common+0xae>
 800db58:	3601      	adds	r6, #1
 800db5a:	e7d9      	b.n	800db10 <_printf_common+0x98>

0800db5c <_printf_i>:
 800db5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db60:	7e0f      	ldrb	r7, [r1, #24]
 800db62:	4691      	mov	r9, r2
 800db64:	2f78      	cmp	r7, #120	; 0x78
 800db66:	4680      	mov	r8, r0
 800db68:	460c      	mov	r4, r1
 800db6a:	469a      	mov	sl, r3
 800db6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db72:	d807      	bhi.n	800db84 <_printf_i+0x28>
 800db74:	2f62      	cmp	r7, #98	; 0x62
 800db76:	d80a      	bhi.n	800db8e <_printf_i+0x32>
 800db78:	2f00      	cmp	r7, #0
 800db7a:	f000 80d5 	beq.w	800dd28 <_printf_i+0x1cc>
 800db7e:	2f58      	cmp	r7, #88	; 0x58
 800db80:	f000 80c1 	beq.w	800dd06 <_printf_i+0x1aa>
 800db84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db8c:	e03a      	b.n	800dc04 <_printf_i+0xa8>
 800db8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db92:	2b15      	cmp	r3, #21
 800db94:	d8f6      	bhi.n	800db84 <_printf_i+0x28>
 800db96:	a101      	add	r1, pc, #4	; (adr r1, 800db9c <_printf_i+0x40>)
 800db98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db9c:	0800dbf5 	.word	0x0800dbf5
 800dba0:	0800dc09 	.word	0x0800dc09
 800dba4:	0800db85 	.word	0x0800db85
 800dba8:	0800db85 	.word	0x0800db85
 800dbac:	0800db85 	.word	0x0800db85
 800dbb0:	0800db85 	.word	0x0800db85
 800dbb4:	0800dc09 	.word	0x0800dc09
 800dbb8:	0800db85 	.word	0x0800db85
 800dbbc:	0800db85 	.word	0x0800db85
 800dbc0:	0800db85 	.word	0x0800db85
 800dbc4:	0800db85 	.word	0x0800db85
 800dbc8:	0800dd0f 	.word	0x0800dd0f
 800dbcc:	0800dc35 	.word	0x0800dc35
 800dbd0:	0800dcc9 	.word	0x0800dcc9
 800dbd4:	0800db85 	.word	0x0800db85
 800dbd8:	0800db85 	.word	0x0800db85
 800dbdc:	0800dd31 	.word	0x0800dd31
 800dbe0:	0800db85 	.word	0x0800db85
 800dbe4:	0800dc35 	.word	0x0800dc35
 800dbe8:	0800db85 	.word	0x0800db85
 800dbec:	0800db85 	.word	0x0800db85
 800dbf0:	0800dcd1 	.word	0x0800dcd1
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	1d1a      	adds	r2, r3, #4
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	602a      	str	r2, [r5, #0]
 800dbfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc04:	2301      	movs	r3, #1
 800dc06:	e0a0      	b.n	800dd4a <_printf_i+0x1ee>
 800dc08:	6820      	ldr	r0, [r4, #0]
 800dc0a:	682b      	ldr	r3, [r5, #0]
 800dc0c:	0607      	lsls	r7, r0, #24
 800dc0e:	f103 0104 	add.w	r1, r3, #4
 800dc12:	6029      	str	r1, [r5, #0]
 800dc14:	d501      	bpl.n	800dc1a <_printf_i+0xbe>
 800dc16:	681e      	ldr	r6, [r3, #0]
 800dc18:	e003      	b.n	800dc22 <_printf_i+0xc6>
 800dc1a:	0646      	lsls	r6, r0, #25
 800dc1c:	d5fb      	bpl.n	800dc16 <_printf_i+0xba>
 800dc1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dc22:	2e00      	cmp	r6, #0
 800dc24:	da03      	bge.n	800dc2e <_printf_i+0xd2>
 800dc26:	232d      	movs	r3, #45	; 0x2d
 800dc28:	4276      	negs	r6, r6
 800dc2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc2e:	230a      	movs	r3, #10
 800dc30:	4859      	ldr	r0, [pc, #356]	; (800dd98 <_printf_i+0x23c>)
 800dc32:	e012      	b.n	800dc5a <_printf_i+0xfe>
 800dc34:	682b      	ldr	r3, [r5, #0]
 800dc36:	6820      	ldr	r0, [r4, #0]
 800dc38:	1d19      	adds	r1, r3, #4
 800dc3a:	6029      	str	r1, [r5, #0]
 800dc3c:	0605      	lsls	r5, r0, #24
 800dc3e:	d501      	bpl.n	800dc44 <_printf_i+0xe8>
 800dc40:	681e      	ldr	r6, [r3, #0]
 800dc42:	e002      	b.n	800dc4a <_printf_i+0xee>
 800dc44:	0641      	lsls	r1, r0, #25
 800dc46:	d5fb      	bpl.n	800dc40 <_printf_i+0xe4>
 800dc48:	881e      	ldrh	r6, [r3, #0]
 800dc4a:	2f6f      	cmp	r7, #111	; 0x6f
 800dc4c:	bf0c      	ite	eq
 800dc4e:	2308      	moveq	r3, #8
 800dc50:	230a      	movne	r3, #10
 800dc52:	4851      	ldr	r0, [pc, #324]	; (800dd98 <_printf_i+0x23c>)
 800dc54:	2100      	movs	r1, #0
 800dc56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc5a:	6865      	ldr	r5, [r4, #4]
 800dc5c:	2d00      	cmp	r5, #0
 800dc5e:	bfa8      	it	ge
 800dc60:	6821      	ldrge	r1, [r4, #0]
 800dc62:	60a5      	str	r5, [r4, #8]
 800dc64:	bfa4      	itt	ge
 800dc66:	f021 0104 	bicge.w	r1, r1, #4
 800dc6a:	6021      	strge	r1, [r4, #0]
 800dc6c:	b90e      	cbnz	r6, 800dc72 <_printf_i+0x116>
 800dc6e:	2d00      	cmp	r5, #0
 800dc70:	d04b      	beq.n	800dd0a <_printf_i+0x1ae>
 800dc72:	4615      	mov	r5, r2
 800dc74:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc78:	fb03 6711 	mls	r7, r3, r1, r6
 800dc7c:	5dc7      	ldrb	r7, [r0, r7]
 800dc7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc82:	4637      	mov	r7, r6
 800dc84:	42bb      	cmp	r3, r7
 800dc86:	460e      	mov	r6, r1
 800dc88:	d9f4      	bls.n	800dc74 <_printf_i+0x118>
 800dc8a:	2b08      	cmp	r3, #8
 800dc8c:	d10b      	bne.n	800dca6 <_printf_i+0x14a>
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	07de      	lsls	r6, r3, #31
 800dc92:	d508      	bpl.n	800dca6 <_printf_i+0x14a>
 800dc94:	6923      	ldr	r3, [r4, #16]
 800dc96:	6861      	ldr	r1, [r4, #4]
 800dc98:	4299      	cmp	r1, r3
 800dc9a:	bfde      	ittt	le
 800dc9c:	2330      	movle	r3, #48	; 0x30
 800dc9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dca2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dca6:	1b52      	subs	r2, r2, r5
 800dca8:	6122      	str	r2, [r4, #16]
 800dcaa:	464b      	mov	r3, r9
 800dcac:	4621      	mov	r1, r4
 800dcae:	4640      	mov	r0, r8
 800dcb0:	f8cd a000 	str.w	sl, [sp]
 800dcb4:	aa03      	add	r2, sp, #12
 800dcb6:	f7ff fedf 	bl	800da78 <_printf_common>
 800dcba:	3001      	adds	r0, #1
 800dcbc:	d14a      	bne.n	800dd54 <_printf_i+0x1f8>
 800dcbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcc2:	b004      	add	sp, #16
 800dcc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	f043 0320 	orr.w	r3, r3, #32
 800dcce:	6023      	str	r3, [r4, #0]
 800dcd0:	2778      	movs	r7, #120	; 0x78
 800dcd2:	4832      	ldr	r0, [pc, #200]	; (800dd9c <_printf_i+0x240>)
 800dcd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	6829      	ldr	r1, [r5, #0]
 800dcdc:	061f      	lsls	r7, r3, #24
 800dcde:	f851 6b04 	ldr.w	r6, [r1], #4
 800dce2:	d402      	bmi.n	800dcea <_printf_i+0x18e>
 800dce4:	065f      	lsls	r7, r3, #25
 800dce6:	bf48      	it	mi
 800dce8:	b2b6      	uxthmi	r6, r6
 800dcea:	07df      	lsls	r7, r3, #31
 800dcec:	bf48      	it	mi
 800dcee:	f043 0320 	orrmi.w	r3, r3, #32
 800dcf2:	6029      	str	r1, [r5, #0]
 800dcf4:	bf48      	it	mi
 800dcf6:	6023      	strmi	r3, [r4, #0]
 800dcf8:	b91e      	cbnz	r6, 800dd02 <_printf_i+0x1a6>
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	f023 0320 	bic.w	r3, r3, #32
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	2310      	movs	r3, #16
 800dd04:	e7a6      	b.n	800dc54 <_printf_i+0xf8>
 800dd06:	4824      	ldr	r0, [pc, #144]	; (800dd98 <_printf_i+0x23c>)
 800dd08:	e7e4      	b.n	800dcd4 <_printf_i+0x178>
 800dd0a:	4615      	mov	r5, r2
 800dd0c:	e7bd      	b.n	800dc8a <_printf_i+0x12e>
 800dd0e:	682b      	ldr	r3, [r5, #0]
 800dd10:	6826      	ldr	r6, [r4, #0]
 800dd12:	1d18      	adds	r0, r3, #4
 800dd14:	6961      	ldr	r1, [r4, #20]
 800dd16:	6028      	str	r0, [r5, #0]
 800dd18:	0635      	lsls	r5, r6, #24
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	d501      	bpl.n	800dd22 <_printf_i+0x1c6>
 800dd1e:	6019      	str	r1, [r3, #0]
 800dd20:	e002      	b.n	800dd28 <_printf_i+0x1cc>
 800dd22:	0670      	lsls	r0, r6, #25
 800dd24:	d5fb      	bpl.n	800dd1e <_printf_i+0x1c2>
 800dd26:	8019      	strh	r1, [r3, #0]
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4615      	mov	r5, r2
 800dd2c:	6123      	str	r3, [r4, #16]
 800dd2e:	e7bc      	b.n	800dcaa <_printf_i+0x14e>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	2100      	movs	r1, #0
 800dd34:	1d1a      	adds	r2, r3, #4
 800dd36:	602a      	str	r2, [r5, #0]
 800dd38:	681d      	ldr	r5, [r3, #0]
 800dd3a:	6862      	ldr	r2, [r4, #4]
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f000 f878 	bl	800de32 <memchr>
 800dd42:	b108      	cbz	r0, 800dd48 <_printf_i+0x1ec>
 800dd44:	1b40      	subs	r0, r0, r5
 800dd46:	6060      	str	r0, [r4, #4]
 800dd48:	6863      	ldr	r3, [r4, #4]
 800dd4a:	6123      	str	r3, [r4, #16]
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd52:	e7aa      	b.n	800dcaa <_printf_i+0x14e>
 800dd54:	462a      	mov	r2, r5
 800dd56:	4649      	mov	r1, r9
 800dd58:	4640      	mov	r0, r8
 800dd5a:	6923      	ldr	r3, [r4, #16]
 800dd5c:	47d0      	blx	sl
 800dd5e:	3001      	adds	r0, #1
 800dd60:	d0ad      	beq.n	800dcbe <_printf_i+0x162>
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	079b      	lsls	r3, r3, #30
 800dd66:	d413      	bmi.n	800dd90 <_printf_i+0x234>
 800dd68:	68e0      	ldr	r0, [r4, #12]
 800dd6a:	9b03      	ldr	r3, [sp, #12]
 800dd6c:	4298      	cmp	r0, r3
 800dd6e:	bfb8      	it	lt
 800dd70:	4618      	movlt	r0, r3
 800dd72:	e7a6      	b.n	800dcc2 <_printf_i+0x166>
 800dd74:	2301      	movs	r3, #1
 800dd76:	4632      	mov	r2, r6
 800dd78:	4649      	mov	r1, r9
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	47d0      	blx	sl
 800dd7e:	3001      	adds	r0, #1
 800dd80:	d09d      	beq.n	800dcbe <_printf_i+0x162>
 800dd82:	3501      	adds	r5, #1
 800dd84:	68e3      	ldr	r3, [r4, #12]
 800dd86:	9903      	ldr	r1, [sp, #12]
 800dd88:	1a5b      	subs	r3, r3, r1
 800dd8a:	42ab      	cmp	r3, r5
 800dd8c:	dcf2      	bgt.n	800dd74 <_printf_i+0x218>
 800dd8e:	e7eb      	b.n	800dd68 <_printf_i+0x20c>
 800dd90:	2500      	movs	r5, #0
 800dd92:	f104 0619 	add.w	r6, r4, #25
 800dd96:	e7f5      	b.n	800dd84 <_printf_i+0x228>
 800dd98:	0800ee54 	.word	0x0800ee54
 800dd9c:	0800ee65 	.word	0x0800ee65

0800dda0 <_realloc_r>:
 800dda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda4:	4680      	mov	r8, r0
 800dda6:	4614      	mov	r4, r2
 800dda8:	460e      	mov	r6, r1
 800ddaa:	b921      	cbnz	r1, 800ddb6 <_realloc_r+0x16>
 800ddac:	4611      	mov	r1, r2
 800ddae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb2:	f7ff bb4f 	b.w	800d454 <_malloc_r>
 800ddb6:	b92a      	cbnz	r2, 800ddc4 <_realloc_r+0x24>
 800ddb8:	f7ff fcbe 	bl	800d738 <_free_r>
 800ddbc:	4625      	mov	r5, r4
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc4:	f000 f851 	bl	800de6a <_malloc_usable_size_r>
 800ddc8:	4284      	cmp	r4, r0
 800ddca:	4607      	mov	r7, r0
 800ddcc:	d802      	bhi.n	800ddd4 <_realloc_r+0x34>
 800ddce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddd2:	d812      	bhi.n	800ddfa <_realloc_r+0x5a>
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	f7ff fb3c 	bl	800d454 <_malloc_r>
 800dddc:	4605      	mov	r5, r0
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d0ed      	beq.n	800ddbe <_realloc_r+0x1e>
 800dde2:	42bc      	cmp	r4, r7
 800dde4:	4622      	mov	r2, r4
 800dde6:	4631      	mov	r1, r6
 800dde8:	bf28      	it	cs
 800ddea:	463a      	movcs	r2, r7
 800ddec:	f000 f82f 	bl	800de4e <memcpy>
 800ddf0:	4631      	mov	r1, r6
 800ddf2:	4640      	mov	r0, r8
 800ddf4:	f7ff fca0 	bl	800d738 <_free_r>
 800ddf8:	e7e1      	b.n	800ddbe <_realloc_r+0x1e>
 800ddfa:	4635      	mov	r5, r6
 800ddfc:	e7df      	b.n	800ddbe <_realloc_r+0x1e>

0800ddfe <memmove>:
 800ddfe:	4288      	cmp	r0, r1
 800de00:	b510      	push	{r4, lr}
 800de02:	eb01 0402 	add.w	r4, r1, r2
 800de06:	d902      	bls.n	800de0e <memmove+0x10>
 800de08:	4284      	cmp	r4, r0
 800de0a:	4623      	mov	r3, r4
 800de0c:	d807      	bhi.n	800de1e <memmove+0x20>
 800de0e:	1e43      	subs	r3, r0, #1
 800de10:	42a1      	cmp	r1, r4
 800de12:	d008      	beq.n	800de26 <memmove+0x28>
 800de14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de18:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de1c:	e7f8      	b.n	800de10 <memmove+0x12>
 800de1e:	4601      	mov	r1, r0
 800de20:	4402      	add	r2, r0
 800de22:	428a      	cmp	r2, r1
 800de24:	d100      	bne.n	800de28 <memmove+0x2a>
 800de26:	bd10      	pop	{r4, pc}
 800de28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de30:	e7f7      	b.n	800de22 <memmove+0x24>

0800de32 <memchr>:
 800de32:	4603      	mov	r3, r0
 800de34:	b510      	push	{r4, lr}
 800de36:	b2c9      	uxtb	r1, r1
 800de38:	4402      	add	r2, r0
 800de3a:	4293      	cmp	r3, r2
 800de3c:	4618      	mov	r0, r3
 800de3e:	d101      	bne.n	800de44 <memchr+0x12>
 800de40:	2000      	movs	r0, #0
 800de42:	e003      	b.n	800de4c <memchr+0x1a>
 800de44:	7804      	ldrb	r4, [r0, #0]
 800de46:	3301      	adds	r3, #1
 800de48:	428c      	cmp	r4, r1
 800de4a:	d1f6      	bne.n	800de3a <memchr+0x8>
 800de4c:	bd10      	pop	{r4, pc}

0800de4e <memcpy>:
 800de4e:	440a      	add	r2, r1
 800de50:	4291      	cmp	r1, r2
 800de52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de56:	d100      	bne.n	800de5a <memcpy+0xc>
 800de58:	4770      	bx	lr
 800de5a:	b510      	push	{r4, lr}
 800de5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de60:	4291      	cmp	r1, r2
 800de62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de66:	d1f9      	bne.n	800de5c <memcpy+0xe>
 800de68:	bd10      	pop	{r4, pc}

0800de6a <_malloc_usable_size_r>:
 800de6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de6e:	1f18      	subs	r0, r3, #4
 800de70:	2b00      	cmp	r3, #0
 800de72:	bfbc      	itt	lt
 800de74:	580b      	ldrlt	r3, [r1, r0]
 800de76:	18c0      	addlt	r0, r0, r3
 800de78:	4770      	bx	lr
	...

0800de7c <_init>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	bf00      	nop
 800de80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de82:	bc08      	pop	{r3}
 800de84:	469e      	mov	lr, r3
 800de86:	4770      	bx	lr

0800de88 <_fini>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr
